
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	10 48 00 20 fd 3a 00 00 6b 98 00 00 d1 3a 00 00     .H. .:..k....:..
  10:	d1 3a 00 00 d1 3a 00 00 d1 3a 00 00 00 00 00 00     .:...:...:......
	...
  2c:	39 38 00 00 d1 3a 00 00 00 00 00 00 f1 37 00 00     98...:.......7..
  3c:	d1 3a 00 00                                         .:..

00000040 <_irq_vector_table>:
  40:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  50:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  60:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  70:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  80:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  90:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  a0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  b0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  c0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  d0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  e0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..
  f0:	b5 38 00 00 b5 38 00 00 b5 38 00 00 b5 38 00 00     .8...8...8...8..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0xe2>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0xce>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x18>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x134>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x62>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x5e>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0x78>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0xc6>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xae>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x142>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x106>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x124>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x2c>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x2c>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x2c>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <__aeabi_dmul+0x1dc>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <__aeabi_dmul+0x238>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <__aeabi_dmul+0x164>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <__aeabi_dmul+0x1c2>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1a6>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <__aeabi_dmul+0x1c6>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <__aeabi_dmul+0x206>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <__aeabi_dmul+0x19c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <__aeabi_dmul+0x24a>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <__aeabi_dmul+0x222>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <__aeabi_dmul+0x24a>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <__aeabi_dmul+0x234>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <__aeabi_dmul+0x24a>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <__aeabi_dmul+0x24a>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <__aeabi_dmul+0x24a>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <__aeabi_dmul+0x234>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <__aeabi_dmul+0x24a>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <__aeabi_dmul+0x1f8>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <__aeabi_dmul+0x24a>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <__aeabi_dmul+0x19c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <__aeabi_dmul+0x234>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <__aeabi_dmul+0x1f8>
     89a:	e712      	b.n	6c2 <__aeabi_dmul+0x24a>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     8fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     900:	f000 b974 	b.w	bec <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	4688      	mov	r8, r1
     928:	2b00      	cmp	r3, #0
     92a:	d14d      	bne.n	9c8 <__udivmoddi4+0xac>
     92c:	428a      	cmp	r2, r1
     92e:	4694      	mov	ip, r2
     930:	d968      	bls.n	a04 <__udivmoddi4+0xe8>
     932:	fab2 f282 	clz	r2, r2
     936:	b152      	cbz	r2, 94e <__udivmoddi4+0x32>
     938:	fa01 f302 	lsl.w	r3, r1, r2
     93c:	f1c2 0120 	rsb	r1, r2, #32
     940:	fa20 f101 	lsr.w	r1, r0, r1
     944:	fa0c fc02 	lsl.w	ip, ip, r2
     948:	ea41 0803 	orr.w	r8, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     952:	0c21      	lsrs	r1, r4, #16
     954:	fbb8 fef5 	udiv	lr, r8, r5
     958:	fa1f f78c 	uxth.w	r7, ip
     95c:	fb05 831e 	mls	r3, r5, lr, r8
     960:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     964:	fb0e f107 	mul.w	r1, lr, r7
     968:	4299      	cmp	r1, r3
     96a:	d90b      	bls.n	984 <__udivmoddi4+0x68>
     96c:	eb1c 0303 	adds.w	r3, ip, r3
     970:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     974:	f080 811e 	bcs.w	bb4 <__udivmoddi4+0x298>
     978:	4299      	cmp	r1, r3
     97a:	f240 811b 	bls.w	bb4 <__udivmoddi4+0x298>
     97e:	f1ae 0e02 	sub.w	lr, lr, #2
     982:	4463      	add	r3, ip
     984:	1a5b      	subs	r3, r3, r1
     986:	b2a4      	uxth	r4, r4
     988:	fbb3 f0f5 	udiv	r0, r3, r5
     98c:	fb05 3310 	mls	r3, r5, r0, r3
     990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     994:	fb00 f707 	mul.w	r7, r0, r7
     998:	42a7      	cmp	r7, r4
     99a:	d90a      	bls.n	9b2 <__udivmoddi4+0x96>
     99c:	eb1c 0404 	adds.w	r4, ip, r4
     9a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     9a4:	f080 8108 	bcs.w	bb8 <__udivmoddi4+0x29c>
     9a8:	42a7      	cmp	r7, r4
     9aa:	f240 8105 	bls.w	bb8 <__udivmoddi4+0x29c>
     9ae:	4464      	add	r4, ip
     9b0:	3802      	subs	r0, #2
     9b2:	1be4      	subs	r4, r4, r7
     9b4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     9b8:	2100      	movs	r1, #0
     9ba:	b11e      	cbz	r6, 9c4 <__udivmoddi4+0xa8>
     9bc:	40d4      	lsrs	r4, r2
     9be:	2300      	movs	r3, #0
     9c0:	e9c6 4300 	strd	r4, r3, [r6]
     9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c8:	428b      	cmp	r3, r1
     9ca:	d908      	bls.n	9de <__udivmoddi4+0xc2>
     9cc:	2e00      	cmp	r6, #0
     9ce:	f000 80ee 	beq.w	bae <__udivmoddi4+0x292>
     9d2:	2100      	movs	r1, #0
     9d4:	e9c6 0500 	strd	r0, r5, [r6]
     9d8:	4608      	mov	r0, r1
     9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9de:	fab3 f183 	clz	r1, r3
     9e2:	2900      	cmp	r1, #0
     9e4:	d14a      	bne.n	a7c <__udivmoddi4+0x160>
     9e6:	42ab      	cmp	r3, r5
     9e8:	d302      	bcc.n	9f0 <__udivmoddi4+0xd4>
     9ea:	4282      	cmp	r2, r0
     9ec:	f200 80f9 	bhi.w	be2 <__udivmoddi4+0x2c6>
     9f0:	1a84      	subs	r4, r0, r2
     9f2:	eb65 0303 	sbc.w	r3, r5, r3
     9f6:	2001      	movs	r0, #1
     9f8:	4698      	mov	r8, r3
     9fa:	2e00      	cmp	r6, #0
     9fc:	d0e2      	beq.n	9c4 <__udivmoddi4+0xa8>
     9fe:	e9c6 4800 	strd	r4, r8, [r6]
     a02:	e7df      	b.n	9c4 <__udivmoddi4+0xa8>
     a04:	b902      	cbnz	r2, a08 <__udivmoddi4+0xec>
     a06:	deff      	udf	#255	; 0xff
     a08:	fab2 f282 	clz	r2, r2
     a0c:	2a00      	cmp	r2, #0
     a0e:	f040 8091 	bne.w	b34 <__udivmoddi4+0x218>
     a12:	eba1 050c 	sub.w	r5, r1, ip
     a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
     a1a:	fa1f fe8c 	uxth.w	lr, ip
     a1e:	2101      	movs	r1, #1
     a20:	fbb5 f3f7 	udiv	r3, r5, r7
     a24:	fb07 5013 	mls	r0, r7, r3, r5
     a28:	0c25      	lsrs	r5, r4, #16
     a2a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     a2e:	fb0e f003 	mul.w	r0, lr, r3
     a32:	42a8      	cmp	r0, r5
     a34:	d908      	bls.n	a48 <__udivmoddi4+0x12c>
     a36:	eb1c 0505 	adds.w	r5, ip, r5
     a3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     a3e:	d202      	bcs.n	a46 <__udivmoddi4+0x12a>
     a40:	42a8      	cmp	r0, r5
     a42:	f200 80cb 	bhi.w	bdc <__udivmoddi4+0x2c0>
     a46:	4643      	mov	r3, r8
     a48:	1a2d      	subs	r5, r5, r0
     a4a:	b2a4      	uxth	r4, r4
     a4c:	fbb5 f0f7 	udiv	r0, r5, r7
     a50:	fb07 5510 	mls	r5, r7, r0, r5
     a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     a58:	fb0e fe00 	mul.w	lr, lr, r0
     a5c:	45a6      	cmp	lr, r4
     a5e:	d908      	bls.n	a72 <__udivmoddi4+0x156>
     a60:	eb1c 0404 	adds.w	r4, ip, r4
     a64:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     a68:	d202      	bcs.n	a70 <__udivmoddi4+0x154>
     a6a:	45a6      	cmp	lr, r4
     a6c:	f200 80bb 	bhi.w	be6 <__udivmoddi4+0x2ca>
     a70:	4628      	mov	r0, r5
     a72:	eba4 040e 	sub.w	r4, r4, lr
     a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     a7a:	e79e      	b.n	9ba <__udivmoddi4+0x9e>
     a7c:	f1c1 0720 	rsb	r7, r1, #32
     a80:	408b      	lsls	r3, r1
     a82:	fa22 fc07 	lsr.w	ip, r2, r7
     a86:	ea4c 0c03 	orr.w	ip, ip, r3
     a8a:	fa20 f407 	lsr.w	r4, r0, r7
     a8e:	fa05 f301 	lsl.w	r3, r5, r1
     a92:	431c      	orrs	r4, r3
     a94:	40fd      	lsrs	r5, r7
     a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
     a9a:	fa00 f301 	lsl.w	r3, r0, r1
     a9e:	fbb5 f8f9 	udiv	r8, r5, r9
     aa2:	0c20      	lsrs	r0, r4, #16
     aa4:	fa1f fe8c 	uxth.w	lr, ip
     aa8:	fb09 5518 	mls	r5, r9, r8, r5
     aac:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     ab0:	fb08 f00e 	mul.w	r0, r8, lr
     ab4:	42a8      	cmp	r0, r5
     ab6:	fa02 f201 	lsl.w	r2, r2, r1
     aba:	d90b      	bls.n	ad4 <__udivmoddi4+0x1b8>
     abc:	eb1c 0505 	adds.w	r5, ip, r5
     ac0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     ac4:	f080 8088 	bcs.w	bd8 <__udivmoddi4+0x2bc>
     ac8:	42a8      	cmp	r0, r5
     aca:	f240 8085 	bls.w	bd8 <__udivmoddi4+0x2bc>
     ace:	f1a8 0802 	sub.w	r8, r8, #2
     ad2:	4465      	add	r5, ip
     ad4:	1a2d      	subs	r5, r5, r0
     ad6:	b2a4      	uxth	r4, r4
     ad8:	fbb5 f0f9 	udiv	r0, r5, r9
     adc:	fb09 5510 	mls	r5, r9, r0, r5
     ae0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     ae4:	fb00 fe0e 	mul.w	lr, r0, lr
     ae8:	45ae      	cmp	lr, r5
     aea:	d908      	bls.n	afe <__udivmoddi4+0x1e2>
     aec:	eb1c 0505 	adds.w	r5, ip, r5
     af0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     af4:	d26c      	bcs.n	bd0 <__udivmoddi4+0x2b4>
     af6:	45ae      	cmp	lr, r5
     af8:	d96a      	bls.n	bd0 <__udivmoddi4+0x2b4>
     afa:	3802      	subs	r0, #2
     afc:	4465      	add	r5, ip
     afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     b02:	fba0 9402 	umull	r9, r4, r0, r2
     b06:	eba5 050e 	sub.w	r5, r5, lr
     b0a:	42a5      	cmp	r5, r4
     b0c:	46c8      	mov	r8, r9
     b0e:	46a6      	mov	lr, r4
     b10:	d356      	bcc.n	bc0 <__udivmoddi4+0x2a4>
     b12:	d053      	beq.n	bbc <__udivmoddi4+0x2a0>
     b14:	b15e      	cbz	r6, b2e <__udivmoddi4+0x212>
     b16:	ebb3 0208 	subs.w	r2, r3, r8
     b1a:	eb65 050e 	sbc.w	r5, r5, lr
     b1e:	fa05 f707 	lsl.w	r7, r5, r7
     b22:	fa22 f301 	lsr.w	r3, r2, r1
     b26:	40cd      	lsrs	r5, r1
     b28:	431f      	orrs	r7, r3
     b2a:	e9c6 7500 	strd	r7, r5, [r6]
     b2e:	2100      	movs	r1, #0
     b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b34:	f1c2 0320 	rsb	r3, r2, #32
     b38:	fa20 f103 	lsr.w	r1, r0, r3
     b3c:	fa0c fc02 	lsl.w	ip, ip, r2
     b40:	fa25 f303 	lsr.w	r3, r5, r3
     b44:	4095      	lsls	r5, r2
     b46:	430d      	orrs	r5, r1
     b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
     b4c:	fa1f fe8c 	uxth.w	lr, ip
     b50:	fbb3 f1f7 	udiv	r1, r3, r7
     b54:	fb07 3011 	mls	r0, r7, r1, r3
     b58:	0c2b      	lsrs	r3, r5, #16
     b5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b5e:	fb01 f00e 	mul.w	r0, r1, lr
     b62:	4298      	cmp	r0, r3
     b64:	fa04 f402 	lsl.w	r4, r4, r2
     b68:	d908      	bls.n	b7c <__udivmoddi4+0x260>
     b6a:	eb1c 0303 	adds.w	r3, ip, r3
     b6e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     b72:	d22f      	bcs.n	bd4 <__udivmoddi4+0x2b8>
     b74:	4298      	cmp	r0, r3
     b76:	d92d      	bls.n	bd4 <__udivmoddi4+0x2b8>
     b78:	3902      	subs	r1, #2
     b7a:	4463      	add	r3, ip
     b7c:	1a1b      	subs	r3, r3, r0
     b7e:	b2ad      	uxth	r5, r5
     b80:	fbb3 f0f7 	udiv	r0, r3, r7
     b84:	fb07 3310 	mls	r3, r7, r0, r3
     b88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b8c:	fb00 f30e 	mul.w	r3, r0, lr
     b90:	42ab      	cmp	r3, r5
     b92:	d908      	bls.n	ba6 <__udivmoddi4+0x28a>
     b94:	eb1c 0505 	adds.w	r5, ip, r5
     b98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     b9c:	d216      	bcs.n	bcc <__udivmoddi4+0x2b0>
     b9e:	42ab      	cmp	r3, r5
     ba0:	d914      	bls.n	bcc <__udivmoddi4+0x2b0>
     ba2:	3802      	subs	r0, #2
     ba4:	4465      	add	r5, ip
     ba6:	1aed      	subs	r5, r5, r3
     ba8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bac:	e738      	b.n	a20 <__udivmoddi4+0x104>
     bae:	4631      	mov	r1, r6
     bb0:	4630      	mov	r0, r6
     bb2:	e707      	b.n	9c4 <__udivmoddi4+0xa8>
     bb4:	4686      	mov	lr, r0
     bb6:	e6e5      	b.n	984 <__udivmoddi4+0x68>
     bb8:	4618      	mov	r0, r3
     bba:	e6fa      	b.n	9b2 <__udivmoddi4+0x96>
     bbc:	454b      	cmp	r3, r9
     bbe:	d2a9      	bcs.n	b14 <__udivmoddi4+0x1f8>
     bc0:	ebb9 0802 	subs.w	r8, r9, r2
     bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
     bc8:	3801      	subs	r0, #1
     bca:	e7a3      	b.n	b14 <__udivmoddi4+0x1f8>
     bcc:	4640      	mov	r0, r8
     bce:	e7ea      	b.n	ba6 <__udivmoddi4+0x28a>
     bd0:	4620      	mov	r0, r4
     bd2:	e794      	b.n	afe <__udivmoddi4+0x1e2>
     bd4:	4641      	mov	r1, r8
     bd6:	e7d1      	b.n	b7c <__udivmoddi4+0x260>
     bd8:	46d0      	mov	r8, sl
     bda:	e77b      	b.n	ad4 <__udivmoddi4+0x1b8>
     bdc:	3b02      	subs	r3, #2
     bde:	4465      	add	r5, ip
     be0:	e732      	b.n	a48 <__udivmoddi4+0x12c>
     be2:	4608      	mov	r0, r1
     be4:	e709      	b.n	9fa <__udivmoddi4+0xde>
     be6:	4464      	add	r4, ip
     be8:	3802      	subs	r0, #2
     bea:	e742      	b.n	a72 <__udivmoddi4+0x156>

00000bec <__aeabi_idiv0>:
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <strcmp>:
     bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
     bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
     bf8:	2a01      	cmp	r2, #1
     bfa:	bf28      	it	cs
     bfc:	429a      	cmpcs	r2, r3
     bfe:	d0f7      	beq.n	bf0 <strcmp>
     c00:	1ad0      	subs	r0, r2, r3
     c02:	4770      	bx	lr

00000c04 <strlen>:
     c04:	4603      	mov	r3, r0
     c06:	f813 2b01 	ldrb.w	r2, [r3], #1
     c0a:	2a00      	cmp	r2, #0
     c0c:	d1fb      	bne.n	c06 <strlen+0x2>
     c0e:	1a18      	subs	r0, r3, r0
     c10:	3801      	subs	r0, #1
     c12:	4770      	bx	lr
     c14:	0000      	movs	r0, r0
	...

00000c18 <maxim_heart_rate_and_oxygen_saturation>:
    * \param[out]    *pn_heart_rate          - Calculated heart rate value
    * \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
    *
    * \retval       None
    */
{
     c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c1c:	b0bd      	sub	sp, #244	; 0xf4
     c1e:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal    
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     c20:	2200      	movs	r2, #0
{
     c22:	9305      	str	r3, [sp, #20]
     c24:	4606      	mov	r6, r0
     c26:	460d      	mov	r5, r1
    un_ir_mean = 0;
     c28:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     c2a:	42aa      	cmp	r2, r5
     c2c:	db41      	blt.n	cb2 <maxim_heart_rate_and_oxygen_saturation+0x9a>
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
     c2e:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)  an_x[k] = pun_ir_buffer[k] - un_ir_mean;
     c32:	4c97      	ldr	r4, [pc, #604]	; (e90 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     c34:	2200      	movs	r2, #0
     c36:	4620      	mov	r0, r4
     c38:	42aa      	cmp	r2, r5
     c3a:	db3f      	blt.n	cbc <maxim_heart_rate_and_oxygen_saturation+0xa4>
     c3c:	4a94      	ldr	r2, [pc, #592]	; (e90 <maxim_heart_rate_and_oxygen_saturation+0x278>)

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c3e:	2100      	movs	r1, #0
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
     c40:	6813      	ldr	r3, [r2, #0]
     c42:	f852 0f04 	ldr.w	r0, [r2, #4]!
     c46:	4403      	add	r3, r0
     c48:	6850      	ldr	r0, [r2, #4]
     c4a:	4403      	add	r3, r0
     c4c:	6890      	ldr	r0, [r2, #8]
        an_x[k] = n_denom / (int32_t)4;
     c4e:	181b      	adds	r3, r3, r0
     c50:	bf48      	it	mi
     c52:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
     c54:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
     c56:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c58:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
     c5c:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c60:	d1ee      	bne.n	c40 <maxim_heart_rate_and_oxygen_saturation+0x28>
     c62:	498c      	ldr	r1, [pc, #560]	; (e94 <maxim_heart_rate_and_oxygen_saturation+0x27c>)
     c64:	4f8a      	ldr	r7, [pc, #552]	; (e90 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     c66:	468c      	mov	ip, r1
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c68:	2200      	movs	r2, #0
     c6a:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
     c6e:	463b      	mov	r3, r7
     c70:	6878      	ldr	r0, [r7, #4]
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	3201      	adds	r2, #1
     c76:	1ac3      	subs	r3, r0, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c78:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
     c7a:	f84c 3b04 	str.w	r3, [ip], #4
     c7e:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c82:	d1f4      	bne.n	c6e <maxim_heart_rate_and_oxygen_saturation+0x56>
     c84:	4a83      	ldr	r2, [pc, #524]	; (e94 <maxim_heart_rate_and_oxygen_saturation+0x27c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c86:	2000      	movs	r0, #0
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
     c88:	6813      	ldr	r3, [r2, #0]
     c8a:	f852 7f04 	ldr.w	r7, [r2, #4]!
     c8e:	443b      	add	r3, r7
     c90:	3001      	adds	r0, #1
     c92:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     c96:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c98:	f5b0 7ff7 	cmp.w	r0, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
     c9c:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     ca0:	d1f2      	bne.n	c88 <maxim_heart_rate_and_oxygen_saturation+0x70>
     ca2:	487c      	ldr	r0, [pc, #496]	; (e94 <maxim_heart_rate_and_oxygen_saturation+0x27c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     ca4:	2700      	movs	r7, #0
     ca6:	f8df e1f0 	ldr.w	lr, [pc, #496]	; e98 <maxim_heart_rate_and_oxygen_saturation+0x280>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     caa:	4684      	mov	ip, r0
     cac:	2306      	movs	r3, #6
        s = 0;
     cae:	2200      	movs	r2, #0
     cb0:	e012      	b.n	cd8 <maxim_heart_rate_and_oxygen_saturation+0xc0>
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     cb2:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
     cb6:	3201      	adds	r2, #1
     cb8:	440b      	add	r3, r1
     cba:	e7b6      	b.n	c2a <maxim_heart_rate_and_oxygen_saturation+0x12>
    for (k = 0; k < n_ir_buffer_length; k++)  an_x[k] = pun_ir_buffer[k] - un_ir_mean;
     cbc:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
     cc0:	1ac9      	subs	r1, r1, r3
     cc2:	f840 1b04 	str.w	r1, [r0], #4
     cc6:	3201      	adds	r2, #1
     cc8:	e7b6      	b.n	c38 <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE;k++) {
            s -= an_dx[k] * auw_hamm[k - i];
     cca:	f85c ab04 	ldr.w	sl, [ip], #4
     cce:	46d1      	mov	r9, sl
     cd0:	f83e ab02 	ldrh.w	sl, [lr], #2
     cd4:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE;k++) {
     cd8:	3b01      	subs	r3, #1
     cda:	d1f6      	bne.n	cca <maxim_heart_rate_and_oxygen_saturation+0xb2>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm 
     cdc:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     ce0:	3701      	adds	r7, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm 
     ce2:	fb92 f2fc 	sdiv	r2, r2, ip
     ce6:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     cea:	f240 12e9 	movw	r2, #489	; 0x1e9
     cee:	4297      	cmp	r7, r2
     cf0:	d1d9      	bne.n	ca6 <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }


    n_th1 = 0; // threshold calculation
     cf2:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     cf4:	f240 17ef 	movw	r7, #495	; 0x1ef
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     cf8:	f851 0b04 	ldr.w	r0, [r1], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     cfc:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     cfe:	2800      	cmp	r0, #0
     d00:	bfb8      	it	lt
     d02:	4240      	neglt	r0, r0
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     d04:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     d06:	4402      	add	r2, r0
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     d08:	d1f6      	bne.n	cf8 <maxim_heart_rate_and_oxygen_saturation+0xe0>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5);//peak_height, peak_distance, max_num_peaks 
     d0a:	2108      	movs	r1, #8
     d0c:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
     d0e:	fbb2 f2f3 	udiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5);//peak_height, peak_distance, max_num_peaks 
     d12:	e9cd 1001 	strd	r1, r0, [sp, #4]
     d16:	9200      	str	r2, [sp, #0]
     d18:	a909      	add	r1, sp, #36	; 0x24
     d1a:	4a5e      	ldr	r2, [pc, #376]	; (e94 <maxim_heart_rate_and_oxygen_saturation+0x27c>)
     d1c:	a82d      	add	r0, sp, #180	; 0xb4
     d1e:	f008 f83c 	bl	8d9a <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2) {
     d22:	9909      	ldr	r1, [sp, #36]	; 0x24
     d24:	2901      	cmp	r1, #1
     d26:	f04f 0300 	mov.w	r3, #0
     d2a:	dd38      	ble.n	d9e <maxim_heart_rate_and_oxygen_saturation+0x186>
     d2c:	aa2d      	add	r2, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
     d2e:	2701      	movs	r7, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d30:	4610      	mov	r0, r2
     d32:	f8d2 c004 	ldr.w	ip, [r2, #4]
     d36:	6800      	ldr	r0, [r0, #0]
        for (k = 1; k < n_npks; k++)
     d38:	3701      	adds	r7, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d3a:	ebac 0000 	sub.w	r0, ip, r0
        for (k = 1; k < n_npks; k++)
     d3e:	42b9      	cmp	r1, r7
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d40:	f102 0204 	add.w	r2, r2, #4
     d44:	4403      	add	r3, r0
        for (k = 1; k < n_npks; k++)
     d46:	d1f3      	bne.n	d30 <maxim_heart_rate_and_oxygen_saturation+0x118>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
     d48:	1e4a      	subs	r2, r1, #1
     d4a:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum);// beats per minutes
     d4e:	f241 7270 	movw	r2, #6000	; 0x1770
     d52:	fb92 f3f3 	sdiv	r3, r2, r3
     d56:	9a47      	ldr	r2, [sp, #284]	; 0x11c
     d58:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
     d5a:	2301      	movs	r3, #1
     d5c:	9a48      	ldr	r2, [sp, #288]	; 0x120
     d5e:	af0f      	add	r7, sp, #60	; 0x3c
     d60:	7013      	strb	r3, [r2, #0]
     d62:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
     d66:	4638      	mov	r0, r7
     d68:	2300      	movs	r3, #0
    else {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks;k++)
     d6a:	4299      	cmp	r1, r3
     d6c:	dc1b      	bgt.n	da6 <maxim_heart_rate_and_oxygen_saturation+0x18e>
     d6e:	4b4b      	ldr	r3, [pc, #300]	; (e9c <maxim_heart_rate_and_oxygen_saturation+0x284>)
     d70:	4847      	ldr	r0, [pc, #284]	; (e90 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     d72:	469c      	mov	ip, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG. 
    for (k = 0; k < n_ir_buffer_length; k++) {
     d74:	2200      	movs	r2, #0
     d76:	4686      	mov	lr, r0
     d78:	42aa      	cmp	r2, r5
     d7a:	db1b      	blt.n	db4 <maxim_heart_rate_and_oxygen_saturation+0x19c>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
     d7c:	2200      	movs	r2, #0
    for (k = 0; k < n_npks;k++) {
     d7e:	4616      	mov	r6, r2
                if (an_x[i] < n_c_min) {
                    if (un_only_once > 0) {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
     d80:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks;k++) {
     d84:	42b1      	cmp	r1, r6
     d86:	dc1f      	bgt.n	dc8 <maxim_heart_rate_and_oxygen_saturation+0x1b0>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2) {
     d88:	2a01      	cmp	r2, #1
     d8a:	dc3c      	bgt.n	e06 <maxim_heart_rate_and_oxygen_saturation+0x1ee>
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
     d8c:	9a05      	ldr	r2, [sp, #20]
     d8e:	4b44      	ldr	r3, [pc, #272]	; (ea0 <maxim_heart_rate_and_oxygen_saturation+0x288>)
     d90:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
     d92:	2300      	movs	r3, #0
        n_ratio_average = an_ratio[n_middle_idx];

    if (n_ratio_average > 2 && n_ratio_average < 184) {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = (int32_t)-45.060 * n_ratio_average * n_ratio_average / 10000 + 30.354 * n_ratio_average / 100 + 94.845;
        *pch_spo2_valid = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
     d94:	9a46      	ldr	r2, [sp, #280]	; 0x118
     d96:	7013      	strb	r3, [r2, #0]
    }
    else {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
     d98:	b03d      	add	sp, #244	; 0xf4
     d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
     d9e:	9847      	ldr	r0, [sp, #284]	; 0x11c
     da0:	4a3f      	ldr	r2, [pc, #252]	; (ea0 <maxim_heart_rate_and_oxygen_saturation+0x288>)
     da2:	6002      	str	r2, [r0, #0]
        *pch_hr_valid = 0;
     da4:	e7da      	b.n	d5c <maxim_heart_rate_and_oxygen_saturation+0x144>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
     da6:	f85c 2b04 	ldr.w	r2, [ip], #4
     daa:	3202      	adds	r2, #2
     dac:	f840 2b04 	str.w	r2, [r0], #4
    for (k = 0; k < n_npks;k++)
     db0:	3301      	adds	r3, #1
     db2:	e7da      	b.n	d6a <maxim_heart_rate_and_oxygen_saturation+0x152>
        an_x[k] = pun_ir_buffer[k];
     db4:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
     db8:	f840 9b04 	str.w	r9, [r0], #4
        an_y[k] = pun_red_buffer[k];
     dbc:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
     dc0:	f84c 9b04 	str.w	r9, [ip], #4
    for (k = 0; k < n_ir_buffer_length; k++) {
     dc4:	3201      	adds	r2, #1
     dc6:	e7d7      	b.n	d78 <maxim_heart_rate_and_oxygen_saturation+0x160>
        m = an_ir_valley_locs[k];
     dc8:	f857 0b04 	ldr.w	r0, [r7], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0) {
     dcc:	1f85      	subs	r5, r0, #6
     dce:	f5b5 7ff2 	cmp.w	r5, #484	; 0x1e4
     dd2:	d20b      	bcs.n	dec <maxim_heart_rate_and_oxygen_saturation+0x1d4>
            for (i = m - 5;i < m + 5; i++)
     dd4:	1f45      	subs	r5, r0, #5
        n_c_min = 16777216;//2^24;
     dd6:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
     dda:	3005      	adds	r0, #5
        un_only_once = 1;
     ddc:	f04f 0c01 	mov.w	ip, #1
            for (i = m - 5;i < m + 5; i++)
     de0:	4285      	cmp	r5, r0
     de2:	d105      	bne.n	df0 <maxim_heart_rate_and_oxygen_saturation+0x1d8>
            if (un_only_once == 0)
     de4:	f1bc 0f00 	cmp.w	ip, #0
     de8:	d100      	bne.n	dec <maxim_heart_rate_and_oxygen_saturation+0x1d4>
                n_exact_ir_valley_locs_count++;
     dea:	3201      	adds	r2, #1
    for (k = 0; k < n_npks;k++) {
     dec:	3601      	adds	r6, #1
     dee:	e7c9      	b.n	d84 <maxim_heart_rate_and_oxygen_saturation+0x16c>
                if (an_x[i] < n_c_min) {
     df0:	f85e 9025 	ldr.w	r9, [lr, r5, lsl #2]
     df4:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
     df6:	bfbe      	ittt	lt
     df8:	f84a 5026 	strlt.w	r5, [sl, r6, lsl #2]
     dfc:	46c8      	movlt	r8, r9
     dfe:	f04f 0c00 	movlt.w	ip, #0
            for (i = m - 5;i < m + 5; i++)
     e02:	3501      	adds	r5, #1
     e04:	e7ec      	b.n	de0 <maxim_heart_rate_and_oxygen_saturation+0x1c8>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     e06:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
     e08:	6821      	ldr	r1, [r4, #0]
     e0a:	f854 0f04 	ldr.w	r0, [r4, #4]!
     e0e:	4401      	add	r1, r0
     e10:	6860      	ldr	r0, [r4, #4]
     e12:	4408      	add	r0, r1
     e14:	68a1      	ldr	r1, [r4, #8]
     e16:	1841      	adds	r1, r0, r1
     e18:	bf48      	it	mi
     e1a:	3103      	addmi	r1, #3
     e1c:	1089      	asrs	r1, r1, #2
     e1e:	f844 1c04 	str.w	r1, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     e22:	6819      	ldr	r1, [r3, #0]
     e24:	f853 0f04 	ldr.w	r0, [r3, #4]!
     e28:	4401      	add	r1, r0
     e2a:	6858      	ldr	r0, [r3, #4]
     e2c:	4401      	add	r1, r0
     e2e:	6898      	ldr	r0, [r3, #8]
     e30:	1809      	adds	r1, r1, r0
     e32:	bf48      	it	mi
     e34:	3103      	addmi	r1, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
     e36:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     e38:	1089      	asrs	r1, r1, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     e3a:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     e3e:	f843 1c04 	str.w	r1, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     e42:	d1e1      	bne.n	e08 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
    for (k = 0; k < 5; k++) an_ratio[k] = 0;
     e44:	2300      	movs	r3, #0
     e46:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
     e4a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
     e4e:	ac1e      	add	r4, sp, #120	; 0x78
     e50:	930e      	str	r3, [sp, #56]	; 0x38
     e52:	4621      	mov	r1, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE) {
     e54:	f851 0b04 	ldr.w	r0, [r1], #4
     e58:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     e5c:	dc96      	bgt.n	d8c <maxim_heart_rate_and_oxygen_saturation+0x174>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++) {
     e5e:	3301      	adds	r3, #1
     e60:	429a      	cmp	r2, r3
     e62:	d1f7      	bne.n	e54 <maxim_heart_rate_and_oxygen_saturation+0x23c>
    n_i_ratio_count = 0;
     e64:	2100      	movs	r1, #0
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     e66:	1e53      	subs	r3, r2, #1
     e68:	4d09      	ldr	r5, [pc, #36]	; (e90 <maxim_heart_rate_and_oxygen_saturation+0x278>)
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     e6a:	4e0c      	ldr	r6, [pc, #48]	; (e9c <maxim_heart_rate_and_oxygen_saturation+0x284>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     e6c:	9307      	str	r3, [sp, #28]
     e6e:	468e      	mov	lr, r1
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10) {
     e70:	f8d4 c004 	ldr.w	ip, [r4, #4]
     e74:	f854 0b04 	ldr.w	r0, [r4], #4
     e78:	ebac 0800 	sub.w	r8, ip, r0
     e7c:	f1b8 0f0a 	cmp.w	r8, #10
     e80:	f10e 0e01 	add.w	lr, lr, #1
     e84:	dd54      	ble.n	f30 <maxim_heart_rate_and_oxygen_saturation+0x318>
        n_x_dc_max = -16777216;
     e86:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++) {
     e8a:	4603      	mov	r3, r0
        n_y_dc_max = -16777216;
     e8c:	46b9      	mov	r9, r7
     e8e:	e017      	b.n	ec0 <maxim_heart_rate_and_oxygen_saturation+0x2a8>
     e90:	20001ddc 	.word	0x20001ddc
     e94:	2000161c 	.word	0x2000161c
     e98:	0000afdc 	.word	0x0000afdc
     e9c:	200025ac 	.word	0x200025ac
     ea0:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max) { n_x_dc_max = an_x[i];n_x_dc_max_idx = i; }
     ea4:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
     ea8:	42ba      	cmp	r2, r7
     eaa:	bfc8      	it	gt
     eac:	4617      	movgt	r7, r2
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     eae:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max) { n_x_dc_max = an_x[i];n_x_dc_max_idx = i; }
     eb2:	bfc8      	it	gt
     eb4:	9306      	strgt	r3, [sp, #24]
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     eb6:	454a      	cmp	r2, r9
     eb8:	bfc4      	itt	gt
     eba:	469b      	movgt	fp, r3
     ebc:	4691      	movgt	r9, r2
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++) {
     ebe:	3301      	adds	r3, #1
     ec0:	459c      	cmp	ip, r3
     ec2:	dcef      	bgt.n	ea4 <maxim_heart_rate_and_oxygen_saturation+0x28c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
     ec4:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
     ec8:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
     ecc:	f8dd a018 	ldr.w	sl, [sp, #24]
     ed0:	1a9b      	subs	r3, r3, r2
     ed2:	ebaa 0a00 	sub.w	sl, sl, r0
     ed6:	fb0a f303 	mul.w	r3, sl, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
     eda:	fb93 f3f8 	sdiv	r3, r3, r8
     ede:	4413      	add	r3, r2
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
     ee0:	f855 202b 	ldr.w	r2, [r5, fp, lsl #2]
     ee4:	1ad2      	subs	r2, r2, r3
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
     ee6:	fb09 f202 	mul.w	r2, r9, r2
     eea:	ea4f 19e2 	mov.w	r9, r2, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
     eee:	f1b9 0f00 	cmp.w	r9, #0
     ef2:	dd1d      	ble.n	f30 <maxim_heart_rate_and_oxygen_saturation+0x318>
     ef4:	2904      	cmp	r1, #4
     ef6:	dc1b      	bgt.n	f30 <maxim_heart_rate_and_oxygen_saturation+0x318>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
     ef8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
     efc:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
     f00:	ebab 0000 	sub.w	r0, fp, r0
     f04:	1ad2      	subs	r2, r2, r3
     f06:	4350      	muls	r0, r2
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
     f08:	fb90 f0f8 	sdiv	r0, r0, r8
     f0c:	4418      	add	r0, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
     f0e:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
     f12:	1a1b      	subs	r3, r3, r0
            n_nume = (n_y_ac * n_x_dc_max) >> 7; //prepare X100 to preserve floating value
     f14:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
     f16:	11ff      	asrs	r7, r7, #7
     f18:	d00a      	beq.n	f30 <maxim_heart_rate_and_oxygen_saturation+0x318>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
     f1a:	ab3c      	add	r3, sp, #240	; 0xf0
     f1c:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
     f20:	2364      	movs	r3, #100	; 0x64
     f22:	fb03 f207 	mul.w	r2, r3, r7
                n_i_ratio_count++;
     f26:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
     f28:	fb92 f2f9 	sdiv	r2, r2, r9
     f2c:	f84c 2cc8 	str.w	r2, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     f30:	9b07      	ldr	r3, [sp, #28]
     f32:	459e      	cmp	lr, r3
     f34:	db9c      	blt.n	e70 <maxim_heart_rate_and_oxygen_saturation+0x258>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
     f36:	a80a      	add	r0, sp, #40	; 0x28
     f38:	f007 fec5 	bl	8cc6 <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
     f3c:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
     f3e:	2903      	cmp	r1, #3
     f40:	ea4f 0382 	mov.w	r3, r2, lsl #2
     f44:	dd3a      	ble.n	fbc <maxim_heart_rate_and_oxygen_saturation+0x3a4>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
     f46:	a93c      	add	r1, sp, #240	; 0xf0
     f48:	33f0      	adds	r3, #240	; 0xf0
     f4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     f4e:	446b      	add	r3, sp
     f50:	f852 4ccc 	ldr.w	r4, [r2, #-204]
     f54:	f853 3cc8 	ldr.w	r3, [r3, #-200]
     f58:	441c      	add	r4, r3
     f5a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
     f5e:	1064      	asrs	r4, r4, #1
    if (n_ratio_average > 2 && n_ratio_average < 184) {
     f60:	1ee3      	subs	r3, r4, #3
     f62:	2bb4      	cmp	r3, #180	; 0xb4
     f64:	f63f af12 	bhi.w	d8c <maxim_heart_rate_and_oxygen_saturation+0x174>
        *pn_spo2 = (int32_t)-45.060 * n_ratio_average * n_ratio_average / 10000 + 30.354 * n_ratio_average / 100 + 94.845;
     f68:	f06f 002c 	mvn.w	r0, #44	; 0x2c
     f6c:	fb04 f304 	mul.w	r3, r4, r4
     f70:	4343      	muls	r3, r0
     f72:	f242 7010 	movw	r0, #10000	; 0x2710
     f76:	fb93 f0f0 	sdiv	r0, r3, r0
     f7a:	f7ff fa13 	bl	3a4 <__aeabi_i2d>
     f7e:	4606      	mov	r6, r0
     f80:	4620      	mov	r0, r4
     f82:	460f      	mov	r7, r1
     f84:	f7ff fa0e 	bl	3a4 <__aeabi_i2d>
     f88:	a30f      	add	r3, pc, #60	; (adr r3, fc8 <maxim_heart_rate_and_oxygen_saturation+0x3b0>)
     f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f8e:	f7ff fa73 	bl	478 <__aeabi_dmul>
     f92:	4b11      	ldr	r3, [pc, #68]	; (fd8 <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
     f94:	2200      	movs	r2, #0
     f96:	f7ff fb99 	bl	6cc <__aeabi_ddiv>
     f9a:	4602      	mov	r2, r0
     f9c:	460b      	mov	r3, r1
     f9e:	4630      	mov	r0, r6
     fa0:	4639      	mov	r1, r7
     fa2:	f7ff f8b3 	bl	10c <__adddf3>
     fa6:	a30a      	add	r3, pc, #40	; (adr r3, fd0 <maxim_heart_rate_and_oxygen_saturation+0x3b8>)
     fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
     fac:	f7ff f8ae 	bl	10c <__adddf3>
     fb0:	f7ff fc74 	bl	89c <__aeabi_d2iz>
     fb4:	9b05      	ldr	r3, [sp, #20]
     fb6:	6018      	str	r0, [r3, #0]
        *pch_spo2_valid = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
     fb8:	2301      	movs	r3, #1
     fba:	e6eb      	b.n	d94 <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_ratio_average = an_ratio[n_middle_idx];
     fbc:	33f0      	adds	r3, #240	; 0xf0
     fbe:	446b      	add	r3, sp
     fc0:	f853 4cc8 	ldr.w	r4, [r3, #-200]
     fc4:	e7cc      	b.n	f60 <maxim_heart_rate_and_oxygen_saturation+0x348>
     fc6:	bf00      	nop
     fc8:	be76c8b4 	.word	0xbe76c8b4
     fcc:	403e5a9f 	.word	0x403e5a9f
     fd0:	7ae147ae 	.word	0x7ae147ae
     fd4:	4057b614 	.word	0x4057b614
     fd8:	40590000 	.word	0x40590000

00000fdc <main>:
float beatsPerMinute;
int beatAvg;
float ratio;
float correl;
//mainloop
int main() {
     fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct device* console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    if (usb_enable(NULL)) {
     fe0:	2000      	movs	r0, #0
int main() {
     fe2:	b087      	sub	sp, #28
    if (usb_enable(NULL)) {
     fe4:	f001 fcd2 	bl	298c <usb_enable>
     fe8:	4605      	mov	r5, r0
     fea:	2800      	cmp	r0, #0
     fec:	f040 80b1 	bne.w	1152 <main+0x176>
        return 1;
    }
    const struct device* i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c1));
    max30102_init(i2c_dev);
     ff0:	485a      	ldr	r0, [pc, #360]	; (115c <main+0x180>)
     ff2:	f000 f8f1 	bl	11d8 <max30102_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     ff6:	485a      	ldr	r0, [pc, #360]	; (1160 <main+0x184>)
     ff8:	f006 fc16 	bl	7828 <z_impl_device_get_binding>
     ffc:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     ffe:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    1000:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    1002:	6813      	ldr	r3, [r2, #0]

    n_ir_buffer_length = 500;
    int i = 0;


    for (i = 0; i < n_ir_buffer_length;i++)
    1004:	4f57      	ldr	r7, [pc, #348]	; (1164 <main+0x188>)
    1006:	4e58      	ldr	r6, [pc, #352]	; (1168 <main+0x18c>)
    {
        while (gpio_pin_get(gpio_dev, INTPIN) == 1) { printk("WAITING\n"); };   //wait until the interrupt pin asserts
    1008:	f8df 9160 	ldr.w	r9, [pc, #352]	; 116c <main+0x190>
        //     check(i2c_dev);
        // }
        // aun_ir_buffer[i] = getIRVal(i2c_dev);
        // aun_red_buffer[i] = getRedVal(i2c_dev);
        // nextSample();
        readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    100c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 115c <main+0x180>


        printk("red=");
    1010:	f8df b15c 	ldr.w	fp, [pc, #348]	; 1170 <main+0x194>
    1014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1018:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
    101a:	680b      	ldr	r3, [r1, #0]
    101c:	4a55      	ldr	r2, [pc, #340]	; (1174 <main+0x198>)
    101e:	210a      	movs	r1, #10
    1020:	4798      	blx	r3
    reset(i2c_dev);
    1022:	484e      	ldr	r0, [pc, #312]	; (115c <main+0x180>)
    1024:	f007 fe17 	bl	8c56 <reset>
    MAX30102_setup(i2c_dev);
    1028:	484c      	ldr	r0, [pc, #304]	; (115c <main+0x180>)
    102a:	f007 fe08 	bl	8c3e <MAX30102_setup>
    n_ir_buffer_length = 500;
    102e:	4a52      	ldr	r2, [pc, #328]	; (1178 <main+0x19c>)
    1030:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1034:	6013      	str	r3, [r2, #0]
    for (i = 0; i < n_ir_buffer_length;i++)
    1036:	4b50      	ldr	r3, [pc, #320]	; (1178 <main+0x19c>)
    1038:	6819      	ldr	r1, [r3, #0]
    103a:	42a9      	cmp	r1, r5
    103c:	dc67      	bgt.n	110e <main+0x132>
        printk("%i", aun_red_buffer[i]);
        printk(", ir=");
        printk("%i\n\r", aun_ir_buffer[i]);
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    103e:	4b4f      	ldr	r3, [pc, #316]	; (117c <main+0x1a0>)
    1040:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1180 <main+0x1a4>
    1044:	4f4f      	ldr	r7, [pc, #316]	; (1184 <main+0x1a8>)
    1046:	9300      	str	r3, [sp, #0]
    1048:	4a47      	ldr	r2, [pc, #284]	; (1168 <main+0x18c>)
    104a:	4b4f      	ldr	r3, [pc, #316]	; (1188 <main+0x1ac>)
    104c:	4845      	ldr	r0, [pc, #276]	; (1164 <main+0x188>)
    104e:	f8cd 8008 	str.w	r8, [sp, #8]
    1052:	9701      	str	r7, [sp, #4]
    1054:	f7ff fde0 	bl	c18 <maxim_heart_rate_and_oxygen_saturation>
            // nextSample();


            //send samples and calculation result to terminal program through UART
            printk("red=");
            printk("%i", aun_red_buffer[i]);
    1058:	f8df a130 	ldr.w	sl, [pc, #304]	; 118c <main+0x1b0>
    for (i = 0; i < n_ir_buffer_length;i++)
    105c:	4a41      	ldr	r2, [pc, #260]	; (1164 <main+0x188>)
    105e:	4942      	ldr	r1, [pc, #264]	; (1168 <main+0x18c>)
        for (i = 100;i < 500;i++)
    1060:	2364      	movs	r3, #100	; 0x64
            aun_red_buffer[i - 100] = aun_red_buffer[i];
    1062:	f8d1 0190 	ldr.w	r0, [r1, #400]	; 0x190
    1066:	f841 0b04 	str.w	r0, [r1], #4
        for (i = 100;i < 500;i++)
    106a:	3301      	adds	r3, #1
            aun_ir_buffer[i - 100] = aun_ir_buffer[i];
    106c:	f8d2 0190 	ldr.w	r0, [r2, #400]	; 0x190
    1070:	f842 0b04 	str.w	r0, [r2], #4
        for (i = 100;i < 500;i++)
    1074:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1078:	d1f3      	bne.n	1062 <main+0x86>
    107a:	2364      	movs	r3, #100	; 0x64
    107c:	4e44      	ldr	r6, [pc, #272]	; (1190 <main+0x1b4>)
    107e:	4d45      	ldr	r5, [pc, #276]	; (1194 <main+0x1b8>)
    1080:	9305      	str	r3, [sp, #20]
            while (gpio_pin_get(gpio_dev, INTPIN) == 1) { printk("WAITING\n"); };
    1082:	4620      	mov	r0, r4
    1084:	f007 fd49 	bl	8b1a <gpio_pin_get.constprop.0>
    1088:	2801      	cmp	r0, #1
    108a:	d05e      	beq.n	114a <main+0x16e>
            readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    108c:	4632      	mov	r2, r6
    108e:	4629      	mov	r1, r5
    1090:	4832      	ldr	r0, [pc, #200]	; (115c <main+0x180>)
            printk(", ir=");
            printk("%i", aun_ir_buffer[i]);
            printk(", HR=%i, ", n_heart_rate);
            printk("HRvalid=%i, ", ch_hr_valid);
            printk("SpO2=%i, ", n_sp02);
    1092:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1188 <main+0x1ac>
            printk("SPO2Valid=%i\n\r", ch_spo2_valid);
    1096:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 117c <main+0x1a0>
            readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    109a:	f000 f8e1 	bl	1260 <readFIFOv2>
            printk("red=");
    109e:	4834      	ldr	r0, [pc, #208]	; (1170 <main+0x194>)
    10a0:	f007 feae 	bl	8e00 <printk>
            printk("%i", aun_red_buffer[i]);
    10a4:	6831      	ldr	r1, [r6, #0]
    10a6:	4650      	mov	r0, sl
    10a8:	f007 feaa 	bl	8e00 <printk>
            printk(", ir=");
    10ac:	483a      	ldr	r0, [pc, #232]	; (1198 <main+0x1bc>)
    10ae:	f007 fea7 	bl	8e00 <printk>
            printk("%i", aun_ir_buffer[i]);
    10b2:	6829      	ldr	r1, [r5, #0]
    10b4:	4650      	mov	r0, sl
    10b6:	f007 fea3 	bl	8e00 <printk>
            printk(", HR=%i, ", n_heart_rate);
    10ba:	6839      	ldr	r1, [r7, #0]
    10bc:	4837      	ldr	r0, [pc, #220]	; (119c <main+0x1c0>)
    10be:	f007 fe9f 	bl	8e00 <printk>
            printk("HRvalid=%i, ", ch_hr_valid);
    10c2:	f998 1000 	ldrsb.w	r1, [r8]
    10c6:	4836      	ldr	r0, [pc, #216]	; (11a0 <main+0x1c4>)
    10c8:	f007 fe9a 	bl	8e00 <printk>
            printk("SpO2=%i, ", n_sp02);
    10cc:	f8d9 1000 	ldr.w	r1, [r9]
    10d0:	4834      	ldr	r0, [pc, #208]	; (11a4 <main+0x1c8>)
    10d2:	f007 fe95 	bl	8e00 <printk>
            printk("SPO2Valid=%i\n\r", ch_spo2_valid);
    10d6:	f99b 1000 	ldrsb.w	r1, [fp]
    10da:	4833      	ldr	r0, [pc, #204]	; (11a8 <main+0x1cc>)
    10dc:	f007 fe90 	bl	8e00 <printk>
        for (i = 400;i < 500;i++)
    10e0:	9b05      	ldr	r3, [sp, #20]
    10e2:	3b01      	subs	r3, #1
            printk("%i", aun_red_buffer[i]);
    10e4:	f106 0604 	add.w	r6, r6, #4
            printk("%i", aun_ir_buffer[i]);
    10e8:	f105 0504 	add.w	r5, r5, #4
        for (i = 400;i < 500;i++)
    10ec:	9305      	str	r3, [sp, #20]
    10ee:	d1c8      	bne.n	1082 <main+0xa6>
        }
        maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    10f0:	e9cd 7801 	strd	r7, r8, [sp, #4]
    10f4:	4920      	ldr	r1, [pc, #128]	; (1178 <main+0x19c>)
    10f6:	f8cd b000 	str.w	fp, [sp]
    10fa:	4a1b      	ldr	r2, [pc, #108]	; (1168 <main+0x18c>)
    10fc:	6809      	ldr	r1, [r1, #0]
    10fe:	4819      	ldr	r0, [pc, #100]	; (1164 <main+0x188>)
    1100:	464b      	mov	r3, r9
    1102:	f7ff fd89 	bl	c18 <maxim_heart_rate_and_oxygen_saturation>
        i = 0;
    1106:	e7a9      	b.n	105c <main+0x80>
        while (gpio_pin_get(gpio_dev, INTPIN) == 1) { printk("WAITING\n"); };   //wait until the interrupt pin asserts
    1108:	4648      	mov	r0, r9
    110a:	f007 fe79 	bl	8e00 <printk>
    110e:	4620      	mov	r0, r4
    1110:	f007 fd03 	bl	8b1a <gpio_pin_get.constprop.0>
    1114:	2801      	cmp	r0, #1
    1116:	d0f7      	beq.n	1108 <main+0x12c>
        readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    1118:	4632      	mov	r2, r6
    111a:	4639      	mov	r1, r7
    111c:	4650      	mov	r0, sl
    111e:	9605      	str	r6, [sp, #20]
    1120:	f000 f89e 	bl	1260 <readFIFOv2>
        printk("red=");
    1124:	4658      	mov	r0, fp
    1126:	f007 fe6b 	bl	8e00 <printk>
        printk("%i", aun_red_buffer[i]);
    112a:	9b05      	ldr	r3, [sp, #20]
    112c:	4817      	ldr	r0, [pc, #92]	; (118c <main+0x1b0>)
    112e:	6819      	ldr	r1, [r3, #0]
    1130:	f007 fe66 	bl	8e00 <printk>
        printk(", ir=");
    1134:	4818      	ldr	r0, [pc, #96]	; (1198 <main+0x1bc>)
    1136:	f007 fe63 	bl	8e00 <printk>
        printk("%i\n\r", aun_ir_buffer[i]);
    113a:	6839      	ldr	r1, [r7, #0]
    113c:	481b      	ldr	r0, [pc, #108]	; (11ac <main+0x1d0>)
    113e:	f007 fe5f 	bl	8e00 <printk>
        printk("%i", aun_red_buffer[i]);
    1142:	3604      	adds	r6, #4
        printk("%i\n\r", aun_ir_buffer[i]);
    1144:	3704      	adds	r7, #4
    for (i = 0; i < n_ir_buffer_length;i++)
    1146:	3501      	adds	r5, #1
    1148:	e775      	b.n	1036 <main+0x5a>
            while (gpio_pin_get(gpio_dev, INTPIN) == 1) { printk("WAITING\n"); };
    114a:	4808      	ldr	r0, [pc, #32]	; (116c <main+0x190>)
    114c:	f007 fe58 	bl	8e00 <printk>
    1150:	e797      	b.n	1082 <main+0xa6>

    }


    return 1;
}
    1152:	2001      	movs	r0, #1
    1154:	b007      	add	sp, #28
    1156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    115a:	bf00      	nop
    115c:	0000ab8c 	.word	0x0000ab8c
    1160:	0000b03e 	.word	0x0000b03e
    1164:	20000670 	.word	0x20000670
    1168:	20000e40 	.word	0x20000e40
    116c:	0000b045 	.word	0x0000b045
    1170:	0000b04e 	.word	0x0000b04e
    1174:	00080100 	.word	0x00080100
    1178:	20001614 	.word	0x20001614
    117c:	20003bb1 	.word	0x20003bb1
    1180:	20003bb0 	.word	0x20003bb0
    1184:	20001610 	.word	0x20001610
    1188:	20001618 	.word	0x20001618
    118c:	0000b053 	.word	0x0000b053
    1190:	20001480 	.word	0x20001480
    1194:	20000cb0 	.word	0x20000cb0
    1198:	0000b056 	.word	0x0000b056
    119c:	0000b05c 	.word	0x0000b05c
    11a0:	0000b066 	.word	0x0000b066
    11a4:	0000b073 	.word	0x0000b073
    11a8:	0000b07d 	.word	0x0000b07d
    11ac:	0000b087 	.word	0x0000b087

000011b0 <readPartID>:
    }

}

// Read Part ID
uint8_t readPartID(const struct device* dev) {
    11b0:	b507      	push	{r0, r1, r2, lr}
    uint8_t partid = 0;
    11b2:	2300      	movs	r3, #0
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_PARTID, &partid);
    11b4:	f10d 0207 	add.w	r2, sp, #7
    11b8:	21ff      	movs	r1, #255	; 0xff
    uint8_t partid = 0;
    11ba:	f88d 3007 	strb.w	r3, [sp, #7]
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_PARTID, &partid);
    11be:	f007 fccf 	bl	8b60 <i2c_reg_read_byte.constprop.0>
    if (ret) {
    11c2:	b110      	cbz	r0, 11ca <readPartID+0x1a>
        printk("Unable to read deviceID register\n");
    11c4:	4803      	ldr	r0, [pc, #12]	; (11d4 <readPartID+0x24>)
    11c6:	f007 fe1b 	bl	8e00 <printk>
    }
    return partid;
}
    11ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
    11ce:	b003      	add	sp, #12
    11d0:	f85d fb04 	ldr.w	pc, [sp], #4
    11d4:	0000b08c 	.word	0x0000b08c

000011d8 <max30102_init>:
    i2c_configure(i2c_dev, i2c_cfg);
    11d8:	4b0b      	ldr	r3, [pc, #44]	; (1208 <max30102_init+0x30>)
void max30102_init(const struct device* i2c_dev) {
    11da:	b510      	push	{r4, lr}
    i2c_configure(i2c_dev, i2c_cfg);
    11dc:	6819      	ldr	r1, [r3, #0]
void max30102_init(const struct device* i2c_dev) {
    11de:	4604      	mov	r4, r0
				       uint32_t dev_config)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->configure(dev, dev_config);
    11e0:	6883      	ldr	r3, [r0, #8]
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	4798      	blx	r3
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    11e6:	4620      	mov	r0, r4
    11e8:	f009 f907 	bl	a3fa <z_device_is_ready>
    if (!device_is_ready(i2c_dev)) {
    11ec:	b920      	cbnz	r0, 11f8 <max30102_init+0x20>
        printk("Could not get I2C device\n");
    11ee:	4807      	ldr	r0, [pc, #28]	; (120c <max30102_init+0x34>)
}
    11f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Device Found!\n");
    11f4:	f007 be04 	b.w	8e00 <printk>
    if (readPartID(i2c_dev) != MAX30102_PARTID_VALUE) {
    11f8:	4620      	mov	r0, r4
    11fa:	f7ff ffd9 	bl	11b0 <readPartID>
    11fe:	2815      	cmp	r0, #21
        printk("Unable to find device\n");
    1200:	bf14      	ite	ne
    1202:	4803      	ldrne	r0, [pc, #12]	; (1210 <max30102_init+0x38>)
        printk("Device Found!\n");
    1204:	4803      	ldreq	r0, [pc, #12]	; (1214 <max30102_init+0x3c>)
    1206:	e7f3      	b.n	11f0 <max30102_init+0x18>
    1208:	20000000 	.word	0x20000000
    120c:	0000b0ae 	.word	0x0000b0ae
    1210:	0000b0c8 	.word	0x0000b0c8
    1214:	0000b0df 	.word	0x0000b0df

00001218 <readINT1>:
        printk("Failed to read device write pointer\n");
    }
    return wptr;
}

uint8_t readINT1(const struct device* dev) {
    1218:	b507      	push	{r0, r1, r2, lr}
    uint8_t status;
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_INTSTAT1, &status);
    121a:	2100      	movs	r1, #0
    121c:	f10d 0207 	add.w	r2, sp, #7
    1220:	f007 fc9e 	bl	8b60 <i2c_reg_read_byte.constprop.0>
    if (ret) {
    1224:	b110      	cbz	r0, 122c <readINT1+0x14>
        printk("Error reading INT1 Status \n");
    1226:	4804      	ldr	r0, [pc, #16]	; (1238 <readINT1+0x20>)
    1228:	f007 fdea 	bl	8e00 <printk>
    }
    return status;
}
    122c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1230:	b003      	add	sp, #12
    1232:	f85d fb04 	ldr.w	pc, [sp], #4
    1236:	bf00      	nop
    1238:	0000b0ee 	.word	0x0000b0ee

0000123c <readINT2>:

uint8_t readINT2(const struct device* dev) {
    123c:	b507      	push	{r0, r1, r2, lr}
    uint8_t status;
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_INTSTAT2, &status);
    123e:	2101      	movs	r1, #1
    1240:	f10d 0207 	add.w	r2, sp, #7
    1244:	f007 fc8c 	bl	8b60 <i2c_reg_read_byte.constprop.0>
    if (ret) {
    1248:	b110      	cbz	r0, 1250 <readINT2+0x14>
        printk("Error reading INT1 Status \n");
    124a:	4804      	ldr	r0, [pc, #16]	; (125c <readINT2+0x20>)
    124c:	f007 fdd8 	bl	8e00 <printk>
    }
    return status;
}
    1250:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1254:	b003      	add	sp, #12
    1256:	f85d fb04 	ldr.w	pc, [sp], #4
    125a:	bf00      	nop
    125c:	0000b0ee 	.word	0x0000b0ee

00001260 <readFIFOv2>:
    sense.red[sense.head] = redLED;
    sense.IR[sense.head] = irLED;
    return true;
}

bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    1260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t un_temp;
    unsigned char uch_temp;
    *pun_red_led = 0;
    1262:	2300      	movs	r3, #0
    1264:	600b      	str	r3, [r1, #0]
bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    1266:	4606      	mov	r6, r0
    *pun_ir_led = 0;
    1268:	6013      	str	r3, [r2, #0]
bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    126a:	460d      	mov	r5, r1
    126c:	4614      	mov	r4, r2
    char ach_i2c_data[6];

    //read and clear status register
    readINT1(dev);
    126e:	f7ff ffd3 	bl	1218 <readINT1>
    readINT2(dev);
    1272:	4630      	mov	r0, r6
    1274:	f7ff ffe2 	bl	123c <readINT2>
 * @param num_bytes Number of bytes being read.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_burst_read(const struct device *dev,
    1278:	2307      	movs	r3, #7
    127a:	f88d 3007 	strb.w	r3, [sp, #7]
				 uint16_t dev_addr,
				 uint8_t start_addr,
				 uint8_t *buf,
				 uint32_t num_bytes)
{
	return i2c_write_read(dev, dev_addr,
    127e:	f10d 0107 	add.w	r1, sp, #7
    1282:	2306      	movs	r3, #6
    1284:	aa02      	add	r2, sp, #8
    1286:	4630      	mov	r0, r6
    1288:	f007 fc55 	bl	8b36 <i2c_write_read.constprop.0>

    int ret = i2c_burst_read(dev, MAX30102_ADDRESS, MAX30102_FIFODATA, ach_i2c_data, 6);
    if (ret) {
    128c:	4601      	mov	r1, r0
    128e:	b110      	cbz	r0, 1296 <readFIFOv2+0x36>
        printk("Unable to read FIFO data (ERR: %i)\n", ret);
    1290:	4813      	ldr	r0, [pc, #76]	; (12e0 <readFIFOv2+0x80>)
    1292:	f007 fdb5 	bl	8e00 <printk>
    }
    un_temp = (unsigned char)ach_i2c_data[0];
    un_temp <<= 16;
    *pun_red_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[1];
    1296:	f89d 3009 	ldrb.w	r3, [sp, #9]
    un_temp = (unsigned char)ach_i2c_data[0];
    129a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    un_temp <<= 8;
    129e:	021b      	lsls	r3, r3, #8
    *pun_red_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[2];
    *pun_red_led += un_temp;
    12a0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    un_temp = (unsigned char)ach_i2c_data[2];
    12a4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    *pun_red_led += un_temp;
    12a8:	4413      	add	r3, r2
    12aa:	682a      	ldr	r2, [r5, #0]
    12ac:	4413      	add	r3, r2
    12ae:	602b      	str	r3, [r5, #0]

    un_temp = (unsigned char)ach_i2c_data[3];
    un_temp <<= 16;
    *pun_ir_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[4];
    12b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    un_temp = (unsigned char)ach_i2c_data[3];
    12b4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    un_temp <<= 8;
    12b8:	021b      	lsls	r3, r3, #8
    *pun_ir_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[5];
    *pun_ir_led += un_temp;
    12ba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    un_temp = (unsigned char)ach_i2c_data[5];
    12be:	f89d 200d 	ldrb.w	r2, [sp, #13]
    *pun_ir_led += un_temp;
    12c2:	4413      	add	r3, r2
    12c4:	6822      	ldr	r2, [r4, #0]
    12c6:	4413      	add	r3, r2
    12c8:	6023      	str	r3, [r4, #0]
    *pun_red_led &= 0x03FFFF;  //Mask MSB [23:18]
    12ca:	682b      	ldr	r3, [r5, #0]
    12cc:	f3c3 0311 	ubfx	r3, r3, #0, #18
    12d0:	602b      	str	r3, [r5, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    12d2:	6823      	ldr	r3, [r4, #0]


    return true;
}
    12d4:	2001      	movs	r0, #1
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    12d6:	f3c3 0311 	ubfx	r3, r3, #0, #18
    12da:	6023      	str	r3, [r4, #0]
}
    12dc:	b004      	add	sp, #16
    12de:	bd70      	pop	{r4, r5, r6, pc}
    12e0:	0000b10a 	.word	0x0000b10a

000012e4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    12e4:	680b      	ldr	r3, [r1, #0]
    12e6:	3301      	adds	r3, #1
    12e8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    12ea:	4b01      	ldr	r3, [pc, #4]	; (12f0 <char_out+0xc>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	4718      	bx	r3
    12f0:	20000004 	.word	0x20000004

000012f4 <__printk_hook_install>:
	_char_out = fn;
    12f4:	4b01      	ldr	r3, [pc, #4]	; (12fc <__printk_hook_install+0x8>)
    12f6:	6018      	str	r0, [r3, #0]
}
    12f8:	4770      	bx	lr
    12fa:	bf00      	nop
    12fc:	20000004 	.word	0x20000004

00001300 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1300:	b507      	push	{r0, r1, r2, lr}
    1302:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    1304:	2100      	movs	r1, #0
{
    1306:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    1308:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    130a:	4803      	ldr	r0, [pc, #12]	; (1318 <vprintk+0x18>)
    130c:	a901      	add	r1, sp, #4
    130e:	f000 f945 	bl	159c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1312:	b003      	add	sp, #12
    1314:	f85d fb04 	ldr.w	pc, [sp], #4
    1318:	000012e5 	.word	0x000012e5

0000131c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    131c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1320:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1324:	f019 0808 	ands.w	r8, r9, #8
{
    1328:	4604      	mov	r4, r0
    132a:	4693      	mov	fp, r2
	if (processing) {
    132c:	d00d      	beq.n	134a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    132e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1330:	bf0c      	ite	eq
    1332:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1336:	f049 0920 	orrne.w	r9, r9, #32
    133a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    133e:	f38b 8811 	msr	BASEPRI, fp
    1342:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    134a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    134e:	2902      	cmp	r1, #2
    1350:	d107      	bne.n	1362 <process_event+0x46>
			evt = process_recheck(mgr);
    1352:	4620      	mov	r0, r4
    1354:	f007 fd7b 	bl	8e4e <process_recheck>
		if (evt == EVT_NOP) {
    1358:	2800      	cmp	r0, #0
    135a:	d0f0      	beq.n	133e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    135c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    135e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1360:	d14e      	bne.n	1400 <process_event+0xe4>
			res = mgr->last_res;
    1362:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1364:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1366:	2f00      	cmp	r7, #0
    1368:	da15      	bge.n	1396 <process_event+0x7a>
		*clients = mgr->clients;
    136a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    136c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1370:	e9c4 8800 	strd	r8, r8, [r4]
    1374:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1378:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    137a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    137c:	8b21      	ldrh	r1, [r4, #24]
    137e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1382:	45ca      	cmp	sl, r9
    1384:	d002      	beq.n	138c <process_event+0x70>
		if (do_monitors
    1386:	68a3      	ldr	r3, [r4, #8]
    1388:	2b00      	cmp	r3, #0
    138a:	d15a      	bne.n	1442 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    138c:	b90d      	cbnz	r5, 1392 <process_event+0x76>
		    || (transit != NULL)) {
    138e:	2e00      	cmp	r6, #0
    1390:	d071      	beq.n	1476 <process_event+0x15a>
    1392:	2300      	movs	r3, #0
    1394:	e056      	b.n	1444 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1396:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    139a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    139c:	2a01      	cmp	r2, #1
    139e:	d81e      	bhi.n	13de <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13a0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    13a4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    13a6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13a8:	b289      	uxth	r1, r1
    13aa:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    13ae:	d10a      	bne.n	13c6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    13b0:	b13d      	cbz	r5, 13c2 <process_event+0xa6>
    13b2:	8b63      	ldrh	r3, [r4, #26]
    13b4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    13b6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    13b8:	3301      	adds	r3, #1
    13ba:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    13bc:	2a00      	cmp	r2, #0
    13be:	d1fa      	bne.n	13b6 <process_event+0x9a>
    13c0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13c2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    13c6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13c8:	4620      	mov	r0, r4
    13ca:	f007 fd40 	bl	8e4e <process_recheck>
    13ce:	4606      	mov	r6, r0
    13d0:	2800      	cmp	r0, #0
    13d2:	d0d3      	beq.n	137c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13d4:	8b23      	ldrh	r3, [r4, #24]
    13d6:	f043 0320 	orr.w	r3, r3, #32
    13da:	8323      	strh	r3, [r4, #24]
    13dc:	e7cd      	b.n	137a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    13de:	2b04      	cmp	r3, #4
    13e0:	d10c      	bne.n	13fc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e2:	f021 0107 	bic.w	r1, r1, #7
    13e6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13e8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13ea:	4620      	mov	r0, r4
    13ec:	f007 fd2f 	bl	8e4e <process_recheck>
    13f0:	4605      	mov	r5, r0
    13f2:	2800      	cmp	r0, #0
    13f4:	d0c1      	beq.n	137a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13f6:	f041 0120 	orr.w	r1, r1, #32
    13fa:	8321      	strh	r1, [r4, #24]
    13fc:	2500      	movs	r5, #0
    13fe:	e7bc      	b.n	137a <process_event+0x5e>
		} else if (evt == EVT_START) {
    1400:	2803      	cmp	r0, #3
    1402:	d109      	bne.n	1418 <process_event+0xfc>
			transit = mgr->transitions->start;
    1404:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1406:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    140a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    140c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1410:	8323      	strh	r3, [r4, #24]
}
    1412:	2500      	movs	r5, #0
		res = 0;
    1414:	462f      	mov	r7, r5
    1416:	e7b1      	b.n	137c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1418:	2804      	cmp	r0, #4
    141a:	d106      	bne.n	142a <process_event+0x10e>
			transit = mgr->transitions->stop;
    141c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    141e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1422:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1424:	f043 0304 	orr.w	r3, r3, #4
    1428:	e7f2      	b.n	1410 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    142a:	2805      	cmp	r0, #5
    142c:	d106      	bne.n	143c <process_event+0x120>
			transit = mgr->transitions->reset;
    142e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1430:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1434:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1436:	f043 0305 	orr.w	r3, r3, #5
    143a:	e7e9      	b.n	1410 <process_event+0xf4>
    143c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    143e:	462e      	mov	r6, r5
    1440:	e7e8      	b.n	1414 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1442:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1444:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1448:	8321      	strh	r1, [r4, #24]
    144a:	f38b 8811 	msr	BASEPRI, fp
    144e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1452:	b9fb      	cbnz	r3, 1494 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1454:	bb85      	cbnz	r5, 14b8 <process_event+0x19c>
			if (transit != NULL) {
    1456:	b116      	cbz	r6, 145e <process_event+0x142>
				transit(mgr, transition_complete);
    1458:	491f      	ldr	r1, [pc, #124]	; (14d8 <process_event+0x1bc>)
    145a:	4620      	mov	r0, r4
    145c:	47b0      	blx	r6
	__asm__ volatile(
    145e:	f04f 0320 	mov.w	r3, #32
    1462:	f3ef 8b11 	mrs	fp, BASEPRI
    1466:	f383 8812 	msr	BASEPRI_MAX, r3
    146a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    146e:	8b23      	ldrh	r3, [r4, #24]
    1470:	f023 0308 	bic.w	r3, r3, #8
    1474:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1476:	8b23      	ldrh	r3, [r4, #24]
    1478:	06da      	lsls	r2, r3, #27
    147a:	d525      	bpl.n	14c8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    147c:	f023 0310 	bic.w	r3, r3, #16
    1480:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1482:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1484:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1488:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    148c:	2900      	cmp	r1, #0
    148e:	f47f af5e 	bne.w	134e <process_event+0x32>
out:
    1492:	e754      	b.n	133e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1494:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1496:	2900      	cmp	r1, #0
    1498:	d0dc      	beq.n	1454 <process_event+0x138>
	return node->next;
    149a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    149e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    14a2:	463b      	mov	r3, r7
    14a4:	4652      	mov	r2, sl
    14a6:	4620      	mov	r0, r4
    14a8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14aa:	f1b9 0f00 	cmp.w	r9, #0
    14ae:	d0d1      	beq.n	1454 <process_event+0x138>
    14b0:	4649      	mov	r1, r9
    14b2:	f8d9 9000 	ldr.w	r9, [r9]
    14b6:	e7f2      	b.n	149e <process_event+0x182>
    14b8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    14ba:	463b      	mov	r3, r7
    14bc:	4652      	mov	r2, sl
    14be:	4620      	mov	r0, r4
    14c0:	682d      	ldr	r5, [r5, #0]
    14c2:	f007 fce0 	bl	8e86 <notify_one>
    14c6:	e7c5      	b.n	1454 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    14c8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    14cc:	bf1e      	ittt	ne
    14ce:	f023 0320 	bicne.w	r3, r3, #32
    14d2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    14d4:	2102      	movne	r1, #2
    14d6:	e7d5      	b.n	1484 <process_event+0x168>
    14d8:	00008eb3 	.word	0x00008eb3

000014dc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    14de:	4e08      	ldr	r6, [pc, #32]	; (1500 <extract_decimal+0x24>)
    14e0:	6802      	ldr	r2, [r0, #0]
{
    14e2:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
    14e4:	270a      	movs	r7, #10
	size_t val = 0;
    14e6:	2000      	movs	r0, #0
    14e8:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
    14ea:	3201      	adds	r2, #1
    14ec:	780c      	ldrb	r4, [r1, #0]
    14ee:	5da5      	ldrb	r5, [r4, r6]
    14f0:	076d      	lsls	r5, r5, #29
    14f2:	d401      	bmi.n	14f8 <extract_decimal+0x1c>
	}
	*str = sp;
    14f4:	6019      	str	r1, [r3, #0]
	return val;
}
    14f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    14f8:	fb07 4000 	mla	r0, r7, r0, r4
    14fc:	3830      	subs	r0, #48	; 0x30
    14fe:	e7f3      	b.n	14e8 <extract_decimal+0xc>
    1500:	0000b21e 	.word	0x0000b21e

00001504 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1508:	4615      	mov	r5, r2
    150a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    150c:	78d3      	ldrb	r3, [r2, #3]
    150e:	4a22      	ldr	r2, [pc, #136]	; (1598 <encode_uint+0x94>)
    1510:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    1514:	2b6f      	cmp	r3, #111	; 0x6f
{
    1516:	4680      	mov	r8, r0
    1518:	460f      	mov	r7, r1
    151a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    151e:	d029      	beq.n	1574 <encode_uint+0x70>
    1520:	d824      	bhi.n	156c <encode_uint+0x68>
		return 16;
    1522:	2b58      	cmp	r3, #88	; 0x58
    1524:	bf14      	ite	ne
    1526:	260a      	movne	r6, #10
    1528:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    152a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    152e:	4632      	mov	r2, r6
    1530:	2300      	movs	r3, #0
    1532:	4640      	mov	r0, r8
    1534:	4639      	mov	r1, r7
    1536:	f7ff f9d9 	bl	8ec <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    153a:	2a09      	cmp	r2, #9
    153c:	b2d4      	uxtb	r4, r2
    153e:	d81e      	bhi.n	157e <encode_uint+0x7a>
    1540:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    1542:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1544:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    1546:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    154a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    154e:	d301      	bcc.n	1554 <encode_uint+0x50>
    1550:	45d1      	cmp	r9, sl
    1552:	d811      	bhi.n	1578 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1554:	782b      	ldrb	r3, [r5, #0]
    1556:	069b      	lsls	r3, r3, #26
    1558:	d505      	bpl.n	1566 <encode_uint+0x62>
		if (radix == 8) {
    155a:	2e08      	cmp	r6, #8
    155c:	d115      	bne.n	158a <encode_uint+0x86>
			conv->altform_0 = true;
    155e:	78ab      	ldrb	r3, [r5, #2]
    1560:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    1564:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    1566:	4648      	mov	r0, r9
    1568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    156c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    1570:	2b70      	cmp	r3, #112	; 0x70
    1572:	e7d7      	b.n	1524 <encode_uint+0x20>
	switch (specifier) {
    1574:	2608      	movs	r6, #8
    1576:	e7d8      	b.n	152a <encode_uint+0x26>
		value /= radix;
    1578:	4680      	mov	r8, r0
    157a:	460f      	mov	r7, r1
    157c:	e7d7      	b.n	152e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    157e:	f1bb 0f01 	cmp.w	fp, #1
    1582:	bf0c      	ite	eq
    1584:	3437      	addeq	r4, #55	; 0x37
    1586:	3457      	addne	r4, #87	; 0x57
    1588:	e7db      	b.n	1542 <encode_uint+0x3e>
		} else if (radix == 16) {
    158a:	2e10      	cmp	r6, #16
    158c:	d1eb      	bne.n	1566 <encode_uint+0x62>
			conv->altform_0c = true;
    158e:	78ab      	ldrb	r3, [r5, #2]
    1590:	f043 0310 	orr.w	r3, r3, #16
    1594:	e7e6      	b.n	1564 <encode_uint+0x60>
    1596:	bf00      	nop
    1598:	0000b21e 	.word	0x0000b21e

0000159c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a0:	4681      	mov	r9, r0
    15a2:	b09b      	sub	sp, #108	; 0x6c
    15a4:	468a      	mov	sl, r1
    15a6:	4615      	mov	r5, r2
    15a8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    15aa:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    15ac:	7828      	ldrb	r0, [r5, #0]
    15ae:	b910      	cbnz	r0, 15b6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    15b0:	4630      	mov	r0, r6
    15b2:	f000 bdc5 	b.w	2140 <cbvprintf+0xba4>
			OUTC(*fp++);
    15b6:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    15b8:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    15ba:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    15bc:	d006      	beq.n	15cc <cbvprintf+0x30>
			OUTC(*fp++);
    15be:	4651      	mov	r1, sl
			OUTC('%');
    15c0:	47c8      	blx	r9
    15c2:	2800      	cmp	r0, #0
    15c4:	f2c0 85bc 	blt.w	2140 <cbvprintf+0xba4>
    15c8:	3601      	adds	r6, #1
		if (bps == NULL) {
    15ca:	e226      	b.n	1a1a <cbvprintf+0x47e>
		} state = {
    15cc:	2218      	movs	r2, #24
    15ce:	2100      	movs	r1, #0
    15d0:	a80c      	add	r0, sp, #48	; 0x30
    15d2:	f009 fa2c 	bl	aa2e <memset>
	if (*sp == '%') {
    15d6:	786b      	ldrb	r3, [r5, #1]
    15d8:	2b25      	cmp	r3, #37	; 0x25
    15da:	d059      	beq.n	1690 <cbvprintf+0xf4>
    15dc:	1c6a      	adds	r2, r5, #1
    15de:	4617      	mov	r7, r2
		switch (*sp) {
    15e0:	f812 3b01 	ldrb.w	r3, [r2], #1
    15e4:	2b2b      	cmp	r3, #43	; 0x2b
    15e6:	f000 808b 	beq.w	1700 <cbvprintf+0x164>
    15ea:	d879      	bhi.n	16e0 <cbvprintf+0x144>
    15ec:	2b20      	cmp	r3, #32
    15ee:	f000 808c 	beq.w	170a <cbvprintf+0x16e>
    15f2:	2b23      	cmp	r3, #35	; 0x23
    15f4:	f000 808e 	beq.w	1714 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
    15f8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    15fc:	f003 0244 	and.w	r2, r3, #68	; 0x44
    1600:	2a44      	cmp	r2, #68	; 0x44
    1602:	d103      	bne.n	160c <cbvprintf+0x70>
		conv->flag_zero = false;
    1604:	f36f 1386 	bfc	r3, #6, #1
    1608:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    160c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1610:	970a      	str	r7, [sp, #40]	; 0x28
    1612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1616:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    161a:	783b      	ldrb	r3, [r7, #0]
    161c:	2b2a      	cmp	r3, #42	; 0x2a
    161e:	d17e      	bne.n	171e <cbvprintf+0x182>
		conv->width_star = true;
    1620:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1624:	f043 0301 	orr.w	r3, r3, #1
    1628:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    162c:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    162e:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    1630:	781a      	ldrb	r2, [r3, #0]
    1632:	2a2e      	cmp	r2, #46	; 0x2e
    1634:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1638:	bf0c      	ite	eq
    163a:	2101      	moveq	r1, #1
    163c:	2100      	movne	r1, #0
    163e:	f361 0241 	bfi	r2, r1, #1, #1
    1642:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    1646:	d10b      	bne.n	1660 <cbvprintf+0xc4>
	++sp;
    1648:	1c5a      	adds	r2, r3, #1
    164a:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    164c:	785a      	ldrb	r2, [r3, #1]
    164e:	2a2a      	cmp	r2, #42	; 0x2a
    1650:	d17b      	bne.n	174a <cbvprintf+0x1ae>
		conv->prec_star = true;
    1652:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1656:	f042 0204 	orr.w	r2, r2, #4
    165a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    165e:	3302      	adds	r3, #2
	switch (*sp) {
    1660:	461a      	mov	r2, r3
    1662:	f812 0b01 	ldrb.w	r0, [r2], #1
    1666:	286c      	cmp	r0, #108	; 0x6c
    1668:	f000 80cf 	beq.w	180a <cbvprintf+0x26e>
    166c:	d87d      	bhi.n	176a <cbvprintf+0x1ce>
    166e:	2868      	cmp	r0, #104	; 0x68
    1670:	f000 8084 	beq.w	177c <cbvprintf+0x1e0>
    1674:	286a      	cmp	r0, #106	; 0x6a
    1676:	f000 80d2 	beq.w	181e <cbvprintf+0x282>
    167a:	284c      	cmp	r0, #76	; 0x4c
    167c:	f000 80d6 	beq.w	182c <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
    1680:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1684:	f36f 02c6 	bfc	r2, #3, #4
    1688:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    168c:	461a      	mov	r2, r3
    168e:	e080      	b.n	1792 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    1690:	1caa      	adds	r2, r5, #2
    1692:	9202      	str	r2, [sp, #8]
    1694:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    1698:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    169c:	07df      	lsls	r7, r3, #31
    169e:	f140 8170 	bpl.w	1982 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
    16a2:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    16a6:	f1bb 0f00 	cmp.w	fp, #0
    16aa:	da07      	bge.n	16bc <cbvprintf+0x120>
				conv->flag_dash = true;
    16ac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    16b0:	f042 0204 	orr.w	r2, r2, #4
    16b4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    16b8:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    16bc:	0758      	lsls	r0, r3, #29
    16be:	f140 8169 	bpl.w	1994 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
    16c2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    16c6:	f1b8 0f00 	cmp.w	r8, #0
    16ca:	f280 8168 	bge.w	199e <cbvprintf+0x402>
				conv->prec_present = false;
    16ce:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    16d2:	f36f 0341 	bfc	r3, #1, #1
    16d6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    16da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    16de:	e15e      	b.n	199e <cbvprintf+0x402>
		switch (*sp) {
    16e0:	2b2d      	cmp	r3, #45	; 0x2d
    16e2:	d006      	beq.n	16f2 <cbvprintf+0x156>
    16e4:	2b30      	cmp	r3, #48	; 0x30
    16e6:	d187      	bne.n	15f8 <cbvprintf+0x5c>
			conv->flag_zero = true;
    16e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    16ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16f0:	e003      	b.n	16fa <cbvprintf+0x15e>
			conv->flag_dash = true;
    16f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    16f6:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    16fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    16fe:	e76e      	b.n	15de <cbvprintf+0x42>
			conv->flag_plus = true;
    1700:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1704:	f043 0308 	orr.w	r3, r3, #8
    1708:	e7f7      	b.n	16fa <cbvprintf+0x15e>
			conv->flag_space = true;
    170a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    170e:	f043 0310 	orr.w	r3, r3, #16
    1712:	e7f2      	b.n	16fa <cbvprintf+0x15e>
			conv->flag_hash = true;
    1714:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1718:	f043 0320 	orr.w	r3, r3, #32
    171c:	e7ed      	b.n	16fa <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
    171e:	a80a      	add	r0, sp, #40	; 0x28
    1720:	f7ff fedc 	bl	14dc <extract_decimal>
	if (sp != wp) {
    1724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1726:	42bb      	cmp	r3, r7
    1728:	d081      	beq.n	162e <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
    172a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    172e:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    1730:	f3c1 0240 	ubfx	r2, r1, #1, #1
    1734:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    1738:	0052      	lsls	r2, r2, #1
    173a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    173e:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    1742:	430a      	orrs	r2, r1
    1744:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    1748:	e771      	b.n	162e <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
    174a:	a80a      	add	r0, sp, #40	; 0x28
    174c:	f7ff fec6 	bl	14dc <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    1750:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    1754:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    1756:	f3c3 0240 	ubfx	r2, r3, #1, #1
    175a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    175e:	f360 0341 	bfi	r3, r0, #1, #1
    1762:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    1766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1768:	e77a      	b.n	1660 <cbvprintf+0xc4>
	switch (*sp) {
    176a:	2874      	cmp	r0, #116	; 0x74
    176c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    1770:	d059      	beq.n	1826 <cbvprintf+0x28a>
    1772:	287a      	cmp	r0, #122	; 0x7a
    1774:	d184      	bne.n	1680 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
    1776:	460b      	mov	r3, r1
    1778:	2106      	movs	r1, #6
    177a:	e041      	b.n	1800 <cbvprintf+0x264>
		if (*++sp == 'h') {
    177c:	7859      	ldrb	r1, [r3, #1]
    177e:	2968      	cmp	r1, #104	; 0x68
    1780:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    1784:	d13a      	bne.n	17fc <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
    1786:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    1788:	f362 01c6 	bfi	r1, r2, #3, #4
    178c:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
    1790:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    1792:	4613      	mov	r3, r2
    1794:	f813 2b01 	ldrb.w	r2, [r3], #1
    1798:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    179a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    179c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    17a0:	f200 80c5 	bhi.w	192e <cbvprintf+0x392>
    17a4:	2a57      	cmp	r2, #87	; 0x57
    17a6:	d84e      	bhi.n	1846 <cbvprintf+0x2aa>
    17a8:	2a41      	cmp	r2, #65	; 0x41
    17aa:	d004      	beq.n	17b6 <cbvprintf+0x21a>
    17ac:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    17b0:	2b02      	cmp	r3, #2
    17b2:	f200 80bc 	bhi.w	192e <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    17b6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    17ba:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    17be:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    17c0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    17c4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    17c8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    17cc:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    17d0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    17d4:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    17d8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    17dc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    17de:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    17e2:	b2cb      	uxtb	r3, r1
    17e4:	f100 80cb 	bmi.w	197e <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
    17e8:	f003 0278 	and.w	r2, r3, #120	; 0x78
    17ec:	2a18      	cmp	r2, #24
    17ee:	f040 809b 	bne.w	1928 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
    17f2:	f36f 03c6 	bfc	r3, #3, #4
    17f6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    17fa:	e082      	b.n	1902 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
    17fc:	460b      	mov	r3, r1
    17fe:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    1800:	f361 03c6 	bfi	r3, r1, #3, #4
    1804:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    1808:	e7c3      	b.n	1792 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
    180a:	7859      	ldrb	r1, [r3, #1]
    180c:	296c      	cmp	r1, #108	; 0x6c
    180e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    1812:	d101      	bne.n	1818 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
    1814:	2204      	movs	r2, #4
    1816:	e7b7      	b.n	1788 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
    1818:	460b      	mov	r3, r1
    181a:	2103      	movs	r1, #3
    181c:	e7f0      	b.n	1800 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
    181e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1822:	2105      	movs	r1, #5
    1824:	e7ec      	b.n	1800 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
    1826:	460b      	mov	r3, r1
    1828:	2107      	movs	r1, #7
    182a:	e7e9      	b.n	1800 <cbvprintf+0x264>
		conv->unsupported = true;
    182c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1830:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1834:	f023 0302 	bic.w	r3, r3, #2
    1838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    183c:	f043 0302 	orr.w	r3, r3, #2
    1840:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1844:	e7a5      	b.n	1792 <cbvprintf+0x1f6>
	switch (conv->specifier) {
    1846:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    184a:	2b20      	cmp	r3, #32
    184c:	d86f      	bhi.n	192e <cbvprintf+0x392>
    184e:	a101      	add	r1, pc, #4	; (adr r1, 1854 <cbvprintf+0x2b8>)
    1850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1854:	00001907 	.word	0x00001907
    1858:	0000192f 	.word	0x0000192f
    185c:	0000192f 	.word	0x0000192f
    1860:	0000192f 	.word	0x0000192f
    1864:	0000192f 	.word	0x0000192f
    1868:	0000192f 	.word	0x0000192f
    186c:	0000192f 	.word	0x0000192f
    1870:	0000192f 	.word	0x0000192f
    1874:	0000192f 	.word	0x0000192f
    1878:	000017b7 	.word	0x000017b7
    187c:	0000192f 	.word	0x0000192f
    1880:	00001907 	.word	0x00001907
    1884:	000018d9 	.word	0x000018d9
    1888:	000017b7 	.word	0x000017b7
    188c:	000017b7 	.word	0x000017b7
    1890:	000017b7 	.word	0x000017b7
    1894:	0000192f 	.word	0x0000192f
    1898:	000018d9 	.word	0x000018d9
    189c:	0000192f 	.word	0x0000192f
    18a0:	0000192f 	.word	0x0000192f
    18a4:	0000192f 	.word	0x0000192f
    18a8:	0000192f 	.word	0x0000192f
    18ac:	0000193d 	.word	0x0000193d
    18b0:	00001907 	.word	0x00001907
    18b4:	00001961 	.word	0x00001961
    18b8:	0000192f 	.word	0x0000192f
    18bc:	0000192f 	.word	0x0000192f
    18c0:	00001961 	.word	0x00001961
    18c4:	0000192f 	.word	0x0000192f
    18c8:	00001907 	.word	0x00001907
    18cc:	0000192f 	.word	0x0000192f
    18d0:	0000192f 	.word	0x0000192f
    18d4:	00001907 	.word	0x00001907
		conv->specifier_cat = SPECIFIER_SINT;
    18d8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    18dc:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    18de:	f361 0302 	bfi	r3, r1, #0, #3
    18e2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    18e6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    18ea:	f003 0378 	and.w	r3, r3, #120	; 0x78
    18ee:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    18f0:	bf02      	ittt	eq
    18f2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    18f6:	f041 0101 	orreq.w	r1, r1, #1
    18fa:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    18fe:	2a63      	cmp	r2, #99	; 0x63
    1900:	d005      	beq.n	190e <cbvprintf+0x372>
	bool unsupported = false;
    1902:	2300      	movs	r3, #0
    1904:	e006      	b.n	1914 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
    1906:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    190a:	2102      	movs	r1, #2
    190c:	e7e7      	b.n	18de <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
    190e:	3b00      	subs	r3, #0
    1910:	bf18      	it	ne
    1912:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1914:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1918:	f3c2 0140 	ubfx	r1, r2, #1, #1
    191c:	430b      	orrs	r3, r1
    191e:	f363 0241 	bfi	r2, r3, #1, #1
    1922:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    1926:	e6b7      	b.n	1698 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
    1928:	f013 0f38 	tst.w	r3, #56	; 0x38
    192c:	d0e9      	beq.n	1902 <cbvprintf+0x366>
			conv->invalid = true;
    192e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1932:	f043 0301 	orr.w	r3, r3, #1
    1936:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    193a:	e7e2      	b.n	1902 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
    193c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1940:	2203      	movs	r2, #3
    1942:	f362 0302 	bfi	r3, r2, #0, #3
    1946:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    194a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    194e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1952:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    1956:	f1dc 0300 	rsbs	r3, ip, #0
    195a:	eb43 030c 	adc.w	r3, r3, ip
    195e:	e7d9      	b.n	1914 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1960:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1964:	2203      	movs	r2, #3
    1966:	f362 0302 	bfi	r3, r2, #0, #3
    196a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    196e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1972:	f013 0f78 	tst.w	r3, #120	; 0x78
    1976:	bf14      	ite	ne
    1978:	2301      	movne	r3, #1
    197a:	2300      	moveq	r3, #0
    197c:	e7ca      	b.n	1914 <cbvprintf+0x378>
			unsupported = true;
    197e:	2301      	movs	r3, #1
    1980:	e7c8      	b.n	1914 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1982:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    1986:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1988:	bfb4      	ite	lt
    198a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    198e:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    1992:	e693      	b.n	16bc <cbvprintf+0x120>
		} else if (conv->prec_present) {
    1994:	0799      	lsls	r1, r3, #30
    1996:	f57f aea0 	bpl.w	16da <cbvprintf+0x13e>
			precision = conv->prec_value;
    199a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    199e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    19a2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    19a4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    19a8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    19ac:	f003 0207 	and.w	r2, r3, #7
    19b0:	2a04      	cmp	r2, #4
    19b2:	d109      	bne.n	19c8 <cbvprintf+0x42c>
		    && !conv->prec_present) {
    19b4:	078a      	lsls	r2, r1, #30
    19b6:	d407      	bmi.n	19c8 <cbvprintf+0x42c>
			if (conv->specifier_a) {
    19b8:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    19bc:	2a00      	cmp	r2, #0
    19be:	bfb4      	ite	lt
    19c0:	f04f 080d 	movlt.w	r8, #13
    19c4:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    19c8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    19cc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    19ce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    19d2:	d137      	bne.n	1a44 <cbvprintf+0x4a8>
			switch (length_mod) {
    19d4:	1ecb      	subs	r3, r1, #3
    19d6:	2b04      	cmp	r3, #4
    19d8:	d821      	bhi.n	1a1e <cbvprintf+0x482>
    19da:	e8df f003 	tbb	[pc, r3]
    19de:	0903      	.short	0x0903
    19e0:	2009      	.short	0x2009
    19e2:	20          	.byte	0x20
    19e3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    19e4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    19e8:	17da      	asrs	r2, r3, #31
    19ea:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    19ee:	e006      	b.n	19fe <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
    19f0:	3407      	adds	r4, #7
    19f2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    19f6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    19fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    19fe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1a02:	07bb      	lsls	r3, r7, #30
    1a04:	d056      	beq.n	1ab4 <cbvprintf+0x518>
			OUTS(sp, fp);
    1a06:	9b02      	ldr	r3, [sp, #8]
    1a08:	462a      	mov	r2, r5
    1a0a:	4651      	mov	r1, sl
    1a0c:	4648      	mov	r0, r9
    1a0e:	f007 fd09 	bl	9424 <outs>
    1a12:	2800      	cmp	r0, #0
    1a14:	f2c0 8394 	blt.w	2140 <cbvprintf+0xba4>
    1a18:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    1a1a:	9d02      	ldr	r5, [sp, #8]
    1a1c:	e5c6      	b.n	15ac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1a1e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1a22:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1a24:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1a28:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1a2c:	d105      	bne.n	1a3a <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
    1a2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    1a32:	930c      	str	r3, [sp, #48]	; 0x30
    1a34:	2300      	movs	r3, #0
    1a36:	930d      	str	r3, [sp, #52]	; 0x34
    1a38:	e7e1      	b.n	19fe <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
    1a3a:	2902      	cmp	r1, #2
    1a3c:	d1df      	bne.n	19fe <cbvprintf+0x462>
				value->sint = (short)value->sint;
    1a3e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    1a42:	e7d1      	b.n	19e8 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1a44:	2b02      	cmp	r3, #2
    1a46:	d123      	bne.n	1a90 <cbvprintf+0x4f4>
			switch (length_mod) {
    1a48:	1ecb      	subs	r3, r1, #3
    1a4a:	2b04      	cmp	r3, #4
    1a4c:	d813      	bhi.n	1a76 <cbvprintf+0x4da>
    1a4e:	e8df f003 	tbb	[pc, r3]
    1a52:	0a03      	.short	0x0a03
    1a54:	120a      	.short	0x120a
    1a56:	12          	.byte	0x12
    1a57:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1a58:	6822      	ldr	r2, [r4, #0]
    1a5a:	920c      	str	r2, [sp, #48]	; 0x30
    1a5c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1a5e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1a60:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    1a62:	4604      	mov	r4, r0
    1a64:	e7cb      	b.n	19fe <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
    1a66:	1de0      	adds	r0, r4, #7
    1a68:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1a6c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1a70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    1a74:	e7f5      	b.n	1a62 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
    1a76:	f854 3b04 	ldr.w	r3, [r4], #4
    1a7a:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1a7c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1a7e:	f04f 0300 	mov.w	r3, #0
    1a82:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    1a84:	d0d3      	beq.n	1a2e <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
    1a86:	2902      	cmp	r1, #2
    1a88:	d1b9      	bne.n	19fe <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
    1a8a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1a8e:	e7d0      	b.n	1a32 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
    1a90:	2b04      	cmp	r3, #4
    1a92:	d109      	bne.n	1aa8 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
    1a94:	1de3      	adds	r3, r4, #7
    1a96:	f023 0307 	bic.w	r3, r3, #7
    1a9a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aa2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    1aa6:	e7aa      	b.n	19fe <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1aa8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1aaa:	bf04      	itt	eq
    1aac:	f854 3b04 	ldreq.w	r3, [r4], #4
    1ab0:	930c      	streq	r3, [sp, #48]	; 0x30
    1ab2:	e7a4      	b.n	19fe <cbvprintf+0x462>
		switch (conv->specifier) {
    1ab4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    1ab8:	2a78      	cmp	r2, #120	; 0x78
    1aba:	d8ae      	bhi.n	1a1a <cbvprintf+0x47e>
    1abc:	2a57      	cmp	r2, #87	; 0x57
    1abe:	f200 808c 	bhi.w	1bda <cbvprintf+0x63e>
    1ac2:	2a25      	cmp	r2, #37	; 0x25
    1ac4:	f000 80d4 	beq.w	1c70 <cbvprintf+0x6d4>
    1ac8:	2a24      	cmp	r2, #36	; 0x24
    1aca:	d9a6      	bls.n	1a1a <cbvprintf+0x47e>
    1acc:	2a41      	cmp	r2, #65	; 0x41
    1ace:	d003      	beq.n	1ad8 <cbvprintf+0x53c>
    1ad0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1ad4:	2b02      	cmp	r3, #2
    1ad6:	d8a0      	bhi.n	1a1a <cbvprintf+0x47e>
	} u = {
    1ad8:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1adc:	2b00      	cmp	r3, #0
    1ade:	f2c0 81b7 	blt.w	1e50 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
    1ae2:	0738      	lsls	r0, r7, #28
    1ae4:	f100 81b6 	bmi.w	1e54 <cbvprintf+0x8b8>
		*sign = ' ';
    1ae8:	f017 0710 	ands.w	r7, r7, #16
    1aec:	bf18      	it	ne
    1aee:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1af0:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1af8:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1afc:	2d00      	cmp	r5, #0
    1afe:	f040 81ab 	bne.w	1e58 <cbvprintf+0x8bc>
    1b02:	ea51 0003 	orrs.w	r0, r1, r3
    1b06:	bf14      	ite	ne
    1b08:	2001      	movne	r0, #1
    1b0a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    1b0c:	02db      	lsls	r3, r3, #11
    1b0e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    1b12:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1b14:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    1b16:	ea45 0e01 	orr.w	lr, r5, r1
    1b1a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    1b1e:	bf08      	it	eq
    1b20:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    1b22:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    1b26:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    1b2a:	f000 8203 	beq.w	1f34 <cbvprintf+0x998>
		if (is_subnormal) {
    1b2e:	2800      	cmp	r0, #0
    1b30:	f040 81cb 	bne.w	1eca <cbvprintf+0x92e>
		fract |= BIT_63;
    1b34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1b38:	f04f 0c00 	mov.w	ip, #0
    1b3c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1b40:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    1b44:	9109      	str	r1, [sp, #36]	; 0x24
    1b46:	4663      	mov	r3, ip
		fract *= 5U;
    1b48:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    1b4c:	f115 0f02 	cmn.w	r5, #2
    1b50:	f2c0 81c2 	blt.w	1ed8 <cbvprintf+0x93c>
    1b54:	f1bc 0f00 	cmp.w	ip, #0
    1b58:	d001      	beq.n	1b5e <cbvprintf+0x5c2>
    1b5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    1b5e:	2d00      	cmp	r5, #0
		fract += 2;
    1b60:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    1b64:	f300 81cd 	bgt.w	1f02 <cbvprintf+0x966>
	fract >>= (4 - expo);
    1b68:	9809      	ldr	r0, [sp, #36]	; 0x24
    1b6a:	9908      	ldr	r1, [sp, #32]
    1b6c:	f1c5 0c04 	rsb	ip, r5, #4
    1b70:	351c      	adds	r5, #28
    1b72:	fa00 f505 	lsl.w	r5, r0, r5
    1b76:	f1ac 0e20 	sub.w	lr, ip, #32
    1b7a:	fa21 f10c 	lsr.w	r1, r1, ip
    1b7e:	fa20 fe0e 	lsr.w	lr, r0, lr
    1b82:	4329      	orrs	r1, r5
    1b84:	ea41 010e 	orr.w	r1, r1, lr
    1b88:	fa20 f00c 	lsr.w	r0, r0, ip
    1b8c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    1b90:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1b94:	2947      	cmp	r1, #71	; 0x47
    1b96:	f040 81d4 	bne.w	1f42 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
    1b9a:	1cdd      	adds	r5, r3, #3
    1b9c:	db02      	blt.n	1ba4 <cbvprintf+0x608>
    1b9e:	4598      	cmp	r8, r3
    1ba0:	f280 81cb 	bge.w	1f3a <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
    1ba4:	3a02      	subs	r2, #2
			if (precision > 0) {
    1ba6:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    1baa:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    1bac:	dd01      	ble.n	1bb2 <cbvprintf+0x616>
				precision--;
    1bae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    1bb2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1bb6:	0688      	lsls	r0, r1, #26
    1bb8:	f100 81c3 	bmi.w	1f42 <cbvprintf+0x9a6>
    1bbc:	f1b8 0f00 	cmp.w	r8, #0
    1bc0:	bfd4      	ite	le
    1bc2:	2100      	movle	r1, #0
    1bc4:	2101      	movgt	r1, #1
	if (c == 'f') {
    1bc6:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    1bc8:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    1bca:	f040 81bc 	bne.w	1f46 <cbvprintf+0x9aa>
		if (decimals < 0) {
    1bce:	eb13 0508 	adds.w	r5, r3, r8
    1bd2:	f140 81ba 	bpl.w	1f4a <cbvprintf+0x9ae>
			decimals = 0;
    1bd6:	2500      	movs	r5, #0
    1bd8:	e1ba      	b.n	1f50 <cbvprintf+0x9b4>
		switch (conv->specifier) {
    1bda:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1bde:	2b20      	cmp	r3, #32
    1be0:	f63f af1b 	bhi.w	1a1a <cbvprintf+0x47e>
    1be4:	a001      	add	r0, pc, #4	; (adr r0, 1bec <cbvprintf+0x650>)
    1be6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    1bea:	bf00      	nop
    1bec:	00001df3 	.word	0x00001df3
    1bf0:	00001a1b 	.word	0x00001a1b
    1bf4:	00001a1b 	.word	0x00001a1b
    1bf8:	00001a1b 	.word	0x00001a1b
    1bfc:	00001a1b 	.word	0x00001a1b
    1c00:	00001a1b 	.word	0x00001a1b
    1c04:	00001a1b 	.word	0x00001a1b
    1c08:	00001a1b 	.word	0x00001a1b
    1c0c:	00001a1b 	.word	0x00001a1b
    1c10:	00001ad9 	.word	0x00001ad9
    1c14:	00001a1b 	.word	0x00001a1b
    1c18:	00001c9d 	.word	0x00001c9d
    1c1c:	00001d93 	.word	0x00001d93
    1c20:	00001ad9 	.word	0x00001ad9
    1c24:	00001ad9 	.word	0x00001ad9
    1c28:	00001ad9 	.word	0x00001ad9
    1c2c:	00001a1b 	.word	0x00001a1b
    1c30:	00001d93 	.word	0x00001d93
    1c34:	00001a1b 	.word	0x00001a1b
    1c38:	00001a1b 	.word	0x00001a1b
    1c3c:	00001a1b 	.word	0x00001a1b
    1c40:	00001a1b 	.word	0x00001a1b
    1c44:	00001e29 	.word	0x00001e29
    1c48:	00001df3 	.word	0x00001df3
    1c4c:	00001df7 	.word	0x00001df7
    1c50:	00001a1b 	.word	0x00001a1b
    1c54:	00001a1b 	.word	0x00001a1b
    1c58:	00001c77 	.word	0x00001c77
    1c5c:	00001a1b 	.word	0x00001a1b
    1c60:	00001df3 	.word	0x00001df3
    1c64:	00001a1b 	.word	0x00001a1b
    1c68:	00001a1b 	.word	0x00001a1b
    1c6c:	00001df3 	.word	0x00001df3
			OUTC('%');
    1c70:	4651      	mov	r1, sl
    1c72:	4610      	mov	r0, r2
    1c74:	e4a4      	b.n	15c0 <cbvprintf+0x24>
			if (precision >= 0) {
    1c76:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    1c7c:	db09      	blt.n	1c92 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
    1c7e:	4641      	mov	r1, r8
    1c80:	4610      	mov	r0, r2
    1c82:	9203      	str	r2, [sp, #12]
    1c84:	f008 fedb 	bl	aa3e <strnlen>
				len = strlen(bps);
    1c88:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    1c8a:	2700      	movs	r7, #0
			bpe = bps + len;
    1c8c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    1c8e:	b962      	cbnz	r2, 1caa <cbvprintf+0x70e>
    1c90:	e6c3      	b.n	1a1a <cbvprintf+0x47e>
				len = strlen(bps);
    1c92:	4610      	mov	r0, r2
    1c94:	9203      	str	r2, [sp, #12]
    1c96:	f7fe ffb5 	bl	c04 <strlen>
    1c9a:	e7f5      	b.n	1c88 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c9e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    1ca2:	2700      	movs	r7, #0
			bpe = buf + 1;
    1ca4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    1ca8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    1caa:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    1cac:	b107      	cbz	r7, 1cb0 <cbvprintf+0x714>
			nj_len += 1U;
    1cae:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1cb0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    1cb4:	06c1      	lsls	r1, r0, #27
    1cb6:	f140 8237 	bpl.w	2128 <cbvprintf+0xb8c>
			nj_len += 2U;
    1cba:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    1cbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    1cbe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    1cc0:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1cc2:	bf44      	itt	mi
    1cc4:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    1cc6:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    1cc8:	f1bb 0f00 	cmp.w	fp, #0
    1ccc:	dd23      	ble.n	1d16 <cbvprintf+0x77a>
			width -= (int)nj_len;
    1cce:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    1cd2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1cd6:	0759      	lsls	r1, r3, #29
    1cd8:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1cdc:	d41b      	bmi.n	1d16 <cbvprintf+0x77a>
				if (conv->flag_zero) {
    1cde:	0658      	lsls	r0, r3, #25
    1ce0:	f140 8236 	bpl.w	2150 <cbvprintf+0xbb4>
					if (sign != 0) {
    1ce4:	2f00      	cmp	r7, #0
    1ce6:	f000 8236 	beq.w	2156 <cbvprintf+0xbba>
						OUTC(sign);
    1cea:	4651      	mov	r1, sl
    1cec:	4638      	mov	r0, r7
    1cee:	9203      	str	r2, [sp, #12]
    1cf0:	47c8      	blx	r9
    1cf2:	2800      	cmp	r0, #0
    1cf4:	f2c0 8224 	blt.w	2140 <cbvprintf+0xba4>
    1cf8:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    1cfa:	4647      	mov	r7, r8
						OUTC(sign);
    1cfc:	3601      	adds	r6, #1
					pad = '0';
    1cfe:	f04f 0830 	mov.w	r8, #48	; 0x30
    1d02:	445e      	add	r6, fp
    1d04:	465b      	mov	r3, fp
				while (width-- > 0) {
    1d06:	2b00      	cmp	r3, #0
    1d08:	eba6 000b 	sub.w	r0, r6, fp
    1d0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1d10:	f300 820e 	bgt.w	2130 <cbvprintf+0xb94>
    1d14:	4606      	mov	r6, r0
		if (sign != 0) {
    1d16:	b147      	cbz	r7, 1d2a <cbvprintf+0x78e>
			OUTC(sign);
    1d18:	4651      	mov	r1, sl
    1d1a:	4638      	mov	r0, r7
    1d1c:	9203      	str	r2, [sp, #12]
    1d1e:	47c8      	blx	r9
    1d20:	2800      	cmp	r0, #0
    1d22:	f2c0 820d 	blt.w	2140 <cbvprintf+0xba4>
    1d26:	9a03      	ldr	r2, [sp, #12]
    1d28:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1d2a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1d2e:	0659      	lsls	r1, r3, #25
    1d30:	f140 8265 	bpl.w	21fe <cbvprintf+0xc62>
			if (conv->specifier_a) {
    1d34:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1d38:	2b00      	cmp	r3, #0
    1d3a:	eba6 0602 	sub.w	r6, r6, r2
    1d3e:	f280 8219 	bge.w	2174 <cbvprintf+0xbd8>
    1d42:	4617      	mov	r7, r2
    1d44:	46b8      	mov	r8, r7
    1d46:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    1d48:	f817 0b01 	ldrb.w	r0, [r7], #1
    1d4c:	2870      	cmp	r0, #112	; 0x70
    1d4e:	f040 8205 	bne.w	215c <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
    1d52:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1d54:	461e      	mov	r6, r3
    1d56:	441f      	add	r7, r3
    1d58:	1bbb      	subs	r3, r7, r6
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	f300 8248 	bgt.w	21f0 <cbvprintf+0xc54>
			OUTS(cp, bpe);
    1d60:	462b      	mov	r3, r5
    1d62:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    1d64:	4651      	mov	r1, sl
    1d66:	4648      	mov	r0, r9
    1d68:	f007 fb5c 	bl	9424 <outs>
    1d6c:	2800      	cmp	r0, #0
    1d6e:	f2c0 81e7 	blt.w	2140 <cbvprintf+0xba4>
    1d72:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    1d74:	4606      	mov	r6, r0
    1d76:	4483      	add	fp, r0
		while (width > 0) {
    1d78:	ebab 0306 	sub.w	r3, fp, r6
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	f77f ae4c 	ble.w	1a1a <cbvprintf+0x47e>
			OUTC(' ');
    1d82:	4651      	mov	r1, sl
    1d84:	2020      	movs	r0, #32
    1d86:	47c8      	blx	r9
    1d88:	2800      	cmp	r0, #0
    1d8a:	f2c0 81d9 	blt.w	2140 <cbvprintf+0xba4>
    1d8e:	3601      	adds	r6, #1
			--width;
    1d90:	e7f2      	b.n	1d78 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
    1d92:	073d      	lsls	r5, r7, #28
    1d94:	d42b      	bmi.n	1dee <cbvprintf+0x852>
				sign = ' ';
    1d96:	f017 0710 	ands.w	r7, r7, #16
    1d9a:	bf18      	it	ne
    1d9c:	2720      	movne	r7, #32
			sint = value->sint;
    1d9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    1da2:	2b00      	cmp	r3, #0
    1da4:	da05      	bge.n	1db2 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
    1da6:	4252      	negs	r2, r2
    1da8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1dac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    1db0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1db2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1db6:	9300      	str	r3, [sp, #0]
    1db8:	aa0e      	add	r2, sp, #56	; 0x38
    1dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dbe:	ab13      	add	r3, sp, #76	; 0x4c
    1dc0:	f7ff fba0 	bl	1504 <encode_uint>
    1dc4:	4602      	mov	r2, r0
			if (precision >= 0) {
    1dc6:	f1b8 0f00 	cmp.w	r8, #0
    1dca:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1dce:	f6ff af5e 	blt.w	1c8e <cbvprintf+0x6f2>
				conv->flag_zero = false;
    1dd2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    1dd6:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    1dd8:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1ddc:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1dde:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1de2:	f67f af54 	bls.w	1c8e <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
    1de6:	eba8 0303 	sub.w	r3, r8, r3
    1dea:	930f      	str	r3, [sp, #60]	; 0x3c
    1dec:	e74f      	b.n	1c8e <cbvprintf+0x6f2>
				sign = '+';
    1dee:	272b      	movs	r7, #43	; 0x2b
    1df0:	e7d5      	b.n	1d9e <cbvprintf+0x802>
		switch (conv->specifier) {
    1df2:	2700      	movs	r7, #0
    1df4:	e7dd      	b.n	1db2 <cbvprintf+0x816>
			if (value->ptr != NULL) {
    1df6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1df8:	2800      	cmp	r0, #0
    1dfa:	f000 8191 	beq.w	2120 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1dfe:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1e02:	9300      	str	r3, [sp, #0]
    1e04:	aa0e      	add	r2, sp, #56	; 0x38
    1e06:	ab13      	add	r3, sp, #76	; 0x4c
    1e08:	2100      	movs	r1, #0
    1e0a:	f7ff fb7b 	bl	1504 <encode_uint>
				conv->altform_0c = true;
    1e0e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1e12:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1e16:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1e1a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e1e:	4602      	mov	r2, r0
				conv->altform_0c = true;
    1e20:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    1e24:	2700      	movs	r7, #0
				goto prec_int_pad0;
    1e26:	e7ce      	b.n	1dc6 <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
    1e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    1e2a:	2907      	cmp	r1, #7
    1e2c:	f63f adf5 	bhi.w	1a1a <cbvprintf+0x47e>
    1e30:	e8df f001 	tbb	[pc, r1]
    1e34:	0c06040c 	.word	0x0c06040c
    1e38:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1e3c:	701e      	strb	r6, [r3, #0]
		break;
    1e3e:	e5ec      	b.n	1a1a <cbvprintf+0x47e>
		*(short *)dp = (short)count;
    1e40:	801e      	strh	r6, [r3, #0]
		break;
    1e42:	e5ea      	b.n	1a1a <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
    1e44:	17f2      	asrs	r2, r6, #31
    1e46:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    1e4a:	e5e6      	b.n	1a1a <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1e4c:	601e      	str	r6, [r3, #0]
		break;
    1e4e:	e5e4      	b.n	1a1a <cbvprintf+0x47e>
		*sign = '-';
    1e50:	272d      	movs	r7, #45	; 0x2d
    1e52:	e64d      	b.n	1af0 <cbvprintf+0x554>
		*sign = '+';
    1e54:	272b      	movs	r7, #43	; 0x2b
    1e56:	e64b      	b.n	1af0 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1e58:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1e5c:	4285      	cmp	r5, r0
    1e5e:	d131      	bne.n	1ec4 <cbvprintf+0x928>
			if (isupper((int)c)) {
    1e60:	3201      	adds	r2, #1
    1e62:	48b9      	ldr	r0, [pc, #740]	; (2148 <cbvprintf+0xbac>)
    1e64:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    1e66:	430b      	orrs	r3, r1
    1e68:	5c12      	ldrb	r2, [r2, r0]
    1e6a:	f002 0203 	and.w	r2, r2, #3
    1e6e:	d11b      	bne.n	1ea8 <cbvprintf+0x90c>
			if (isupper((int)c)) {
    1e70:	2a01      	cmp	r2, #1
    1e72:	d111      	bne.n	1e98 <cbvprintf+0x8fc>
				*buf++ = 'I';
    1e74:	2349      	movs	r3, #73	; 0x49
    1e76:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    1e7a:	234e      	movs	r3, #78	; 0x4e
    1e7c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    1e80:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    1e82:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    1e86:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1e8a:	f36f 1386 	bfc	r3, #6, #1
    1e8e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    1e92:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    1e96:	e707      	b.n	1ca8 <cbvprintf+0x70c>
				*buf++ = 'i';
    1e98:	2369      	movs	r3, #105	; 0x69
    1e9a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1e9e:	236e      	movs	r3, #110	; 0x6e
    1ea0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    1ea4:	2366      	movs	r3, #102	; 0x66
    1ea6:	e7ec      	b.n	1e82 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
    1ea8:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    1eaa:	bf07      	ittee	eq
    1eac:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    1eae:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    1eb0:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    1eb2:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    1eb4:	bf0c      	ite	eq
    1eb6:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1eba:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    1ebe:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    1ec2:	e7de      	b.n	1e82 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1ec4:	2000      	movs	r0, #0
    1ec6:	e621      	b.n	1b0c <cbvprintf+0x570>
				expo--;
    1ec8:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1eca:	1849      	adds	r1, r1, r1
    1ecc:	415b      	adcs	r3, r3
    1ece:	2b00      	cmp	r3, #0
    1ed0:	dafa      	bge.n	1ec8 <cbvprintf+0x92c>
    1ed2:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1ed6:	e62d      	b.n	1b34 <cbvprintf+0x598>
			fract >>= 1;
    1ed8:	0840      	lsrs	r0, r0, #1
    1eda:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    1ede:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1ee0:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1ee4:	46ac      	mov	ip, r5
			expo++;
    1ee6:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1eea:	d2f5      	bcs.n	1ed8 <cbvprintf+0x93c>
		fract *= 5U;
    1eec:	fb0e f501 	mul.w	r5, lr, r1
    1ef0:	fba0 010e 	umull	r0, r1, r0, lr
    1ef4:	4429      	add	r1, r5
		decexp--;
    1ef6:	3b01      	subs	r3, #1
		expo++;
    1ef8:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    1efc:	f04f 0c01 	mov.w	ip, #1
    1f00:	e624      	b.n	1b4c <cbvprintf+0x5b0>
		fract += 2;
    1f02:	3102      	adds	r1, #2
    1f04:	f140 0000 	adc.w	r0, r0, #0
    1f08:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    1f0c:	a808      	add	r0, sp, #32
    1f0e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1f12:	f007 fa58 	bl	93c6 <_ldiv5>
		decexp++;
    1f16:	9b04      	ldr	r3, [sp, #16]
    1f18:	9a03      	ldr	r2, [sp, #12]
    1f1a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    1f1e:	3d01      	subs	r5, #1
		decexp++;
    1f20:	3301      	adds	r3, #1
			fract <<= 1;
    1f22:	1849      	adds	r1, r1, r1
    1f24:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1f26:	2800      	cmp	r0, #0
			expo--;
    1f28:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1f2c:	daf9      	bge.n	1f22 <cbvprintf+0x986>
    1f2e:	e9cd 1008 	strd	r1, r0, [sp, #32]
    1f32:	e614      	b.n	1b5e <cbvprintf+0x5c2>
    1f34:	2300      	movs	r3, #0
    1f36:	461d      	mov	r5, r3
    1f38:	e616      	b.n	1b68 <cbvprintf+0x5cc>
			precision -= decexp;
    1f3a:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    1f3e:	2266      	movs	r2, #102	; 0x66
    1f40:	e637      	b.n	1bb2 <cbvprintf+0x616>
	bool prune_zero = false;
    1f42:	2100      	movs	r1, #0
    1f44:	e63f      	b.n	1bc6 <cbvprintf+0x62a>
		decimals = precision + 1;
    1f46:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    1f4a:	2d10      	cmp	r5, #16
    1f4c:	bfa8      	it	ge
    1f4e:	2510      	movge	r5, #16
    1f50:	2110      	movs	r1, #16
    1f52:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    1f54:	2000      	movs	r0, #0
    1f56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1f5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    1f5e:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    1f62:	b9a5      	cbnz	r5, 1f8e <cbvprintf+0x9f2>
	fract += round;
    1f64:	9d08      	ldr	r5, [sp, #32]
    1f66:	1949      	adds	r1, r1, r5
    1f68:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1f6a:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    1f6e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    1f72:	d21b      	bcs.n	1fac <cbvprintf+0xa10>
	fract += round;
    1f74:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    1f78:	2a66      	cmp	r2, #102	; 0x66
    1f7a:	f040 8099 	bne.w	20b0 <cbvprintf+0xb14>
		if (decexp > 0) {
    1f7e:	2b00      	cmp	r3, #0
    1f80:	dc23      	bgt.n	1fca <cbvprintf+0xa2e>
			*buf++ = '0';
    1f82:	2130      	movs	r1, #48	; 0x30
    1f84:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1f88:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1f8c:	e02f      	b.n	1fee <cbvprintf+0xa52>
	*v >>= 1;
    1f8e:	0849      	lsrs	r1, r1, #1
    1f90:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1f94:	0840      	lsrs	r0, r0, #1
    1f96:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    1f9a:	a80a      	add	r0, sp, #40	; 0x28
    1f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1fa0:	3d01      	subs	r5, #1
    1fa2:	f007 fa10 	bl	93c6 <_ldiv5>
    1fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1faa:	e7d8      	b.n	1f5e <cbvprintf+0x9c2>
	*v >>= 1;
    1fac:	0849      	lsrs	r1, r1, #1
    1fae:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    1fb2:	a808      	add	r0, sp, #32
	*v >>= 1;
    1fb4:	086d      	lsrs	r5, r5, #1
    1fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1fba:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    1fbe:	f007 fa02 	bl	93c6 <_ldiv5>
		decexp++;
    1fc2:	9b05      	ldr	r3, [sp, #20]
    1fc4:	9a04      	ldr	r2, [sp, #16]
    1fc6:	3301      	adds	r3, #1
    1fc8:	e7d6      	b.n	1f78 <cbvprintf+0x9dc>
	char *buf = bps;
    1fca:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    1fcc:	9907      	ldr	r1, [sp, #28]
    1fce:	2900      	cmp	r1, #0
    1fd0:	dd0b      	ble.n	1fea <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
    1fd2:	a907      	add	r1, sp, #28
    1fd4:	a808      	add	r0, sp, #32
    1fd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1fda:	f007 fa0c 	bl	93f6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1fde:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    1fe0:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1fe4:	3b01      	subs	r3, #1
    1fe6:	9a04      	ldr	r2, [sp, #16]
    1fe8:	d1f0      	bne.n	1fcc <cbvprintf+0xa30>
			conv->pad0_value = decexp;
    1fea:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    1fec:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    1fee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1ff2:	0689      	lsls	r1, r1, #26
    1ff4:	d402      	bmi.n	1ffc <cbvprintf+0xa60>
    1ff6:	f1b8 0f00 	cmp.w	r8, #0
    1ffa:	dd1d      	ble.n	2038 <cbvprintf+0xa9c>
			*buf++ = '.';
    1ffc:	212e      	movs	r1, #46	; 0x2e
    1ffe:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    2002:	b19b      	cbz	r3, 202c <cbvprintf+0xa90>
    2004:	f1b8 0f00 	cmp.w	r8, #0
    2008:	dd16      	ble.n	2038 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
    200a:	4259      	negs	r1, r3
    200c:	4541      	cmp	r1, r8
    200e:	bfa8      	it	ge
    2010:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    2012:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    2016:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    2018:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    201a:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    201e:	bfd4      	ite	le
    2020:	2100      	movle	r1, #0
    2022:	2101      	movgt	r1, #1
    2024:	f361 1045 	bfi	r0, r1, #5, #1
    2028:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    202c:	f1b8 0f00 	cmp.w	r8, #0
    2030:	dd02      	ble.n	2038 <cbvprintf+0xa9c>
    2032:	9907      	ldr	r1, [sp, #28]
    2034:	2900      	cmp	r1, #0
    2036:	dc56      	bgt.n	20e6 <cbvprintf+0xb4a>
	if (prune_zero) {
    2038:	9903      	ldr	r1, [sp, #12]
    203a:	2900      	cmp	r1, #0
    203c:	d163      	bne.n	2106 <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
    203e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    2042:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    2046:	2945      	cmp	r1, #69	; 0x45
    2048:	d121      	bne.n	208e <cbvprintf+0xaf2>
		if (decexp < 0) {
    204a:	2b00      	cmp	r3, #0
		*buf++ = c;
    204c:	4629      	mov	r1, r5
			decexp = -decexp;
    204e:	bfb8      	it	lt
    2050:	425b      	neglt	r3, r3
		*buf++ = c;
    2052:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    2056:	bfb4      	ite	lt
    2058:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    205a:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    205c:	2b63      	cmp	r3, #99	; 0x63
    205e:	706a      	strb	r2, [r5, #1]
    2060:	dd09      	ble.n	2076 <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
    2062:	2064      	movs	r0, #100	; 0x64
    2064:	fbb3 f2f0 	udiv	r2, r3, r0
    2068:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    206c:	1ce9      	adds	r1, r5, #3
    206e:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    2072:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2076:	200a      	movs	r0, #10
    2078:	460d      	mov	r5, r1
    207a:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    207e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2082:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2086:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2088:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    208c:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    208e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2090:	2b00      	cmp	r3, #0
    2092:	dc43      	bgt.n	211c <cbvprintf+0xb80>
    2094:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2096:	2b00      	cmp	r3, #0
    2098:	bfd4      	ite	le
    209a:	2300      	movle	r3, #0
    209c:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    209e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    20a2:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    20a6:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    20a8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    20ac:	702b      	strb	r3, [r5, #0]
	return bps;
    20ae:	e5fb      	b.n	1ca8 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
    20b0:	a907      	add	r1, sp, #28
    20b2:	a808      	add	r0, sp, #32
    20b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    20b8:	f007 f99d 	bl	93f6 <_get_digit>
		if (*buf++ != '0') {
    20bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    20c0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    20c4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    20c8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    20ca:	bf18      	it	ne
    20cc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    20d0:	0688      	lsls	r0, r1, #26
    20d2:	d402      	bmi.n	20da <cbvprintf+0xb3e>
    20d4:	f1b8 0f00 	cmp.w	r8, #0
    20d8:	dd12      	ble.n	2100 <cbvprintf+0xb64>
			*buf++ = '.';
    20da:	212e      	movs	r1, #46	; 0x2e
    20dc:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    20e0:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    20e4:	e7a2      	b.n	202c <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
    20e6:	a907      	add	r1, sp, #28
    20e8:	a808      	add	r0, sp, #32
    20ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    20ee:	f007 f982 	bl	93f6 <_get_digit>
		precision--;
    20f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    20f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    20fa:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    20fe:	e795      	b.n	202c <cbvprintf+0xa90>
		if (*buf++ != '0') {
    2100:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    2104:	e798      	b.n	2038 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
    2106:	2100      	movs	r1, #0
    2108:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    210a:	4628      	mov	r0, r5
    210c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    2110:	2930      	cmp	r1, #48	; 0x30
    2112:	d0fa      	beq.n	210a <cbvprintf+0xb6e>
		if (*buf != '.') {
    2114:	292e      	cmp	r1, #46	; 0x2e
    2116:	bf18      	it	ne
    2118:	4605      	movne	r5, r0
    211a:	e792      	b.n	2042 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
    211c:	2301      	movs	r3, #1
    211e:	e7be      	b.n	209e <cbvprintf+0xb02>
			bpe = bps + 5;
    2120:	4d0a      	ldr	r5, [pc, #40]	; (214c <cbvprintf+0xbb0>)
		char sign = 0;
    2122:	4607      	mov	r7, r0
			bps = "(nil)";
    2124:	1f6a      	subs	r2, r5, #5
    2126:	e5c0      	b.n	1caa <cbvprintf+0x70e>
		} else if (conv->altform_0) {
    2128:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    212a:	bf48      	it	mi
    212c:	3301      	addmi	r3, #1
    212e:	e5c5      	b.n	1cbc <cbvprintf+0x720>
					OUTC(pad);
    2130:	4651      	mov	r1, sl
    2132:	4640      	mov	r0, r8
    2134:	9203      	str	r2, [sp, #12]
    2136:	47c8      	blx	r9
    2138:	2800      	cmp	r0, #0
    213a:	9a03      	ldr	r2, [sp, #12]
    213c:	f6bf ade2 	bge.w	1d04 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
    2140:	b01b      	add	sp, #108	; 0x6c
    2142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2146:	bf00      	nop
    2148:	0000b21d 	.word	0x0000b21d
    214c:	0000b133 	.word	0x0000b133
				char pad = ' ';
    2150:	f04f 0820 	mov.w	r8, #32
    2154:	e5d5      	b.n	1d02 <cbvprintf+0x766>
					pad = '0';
    2156:	f04f 0830 	mov.w	r8, #48	; 0x30
    215a:	e5d2      	b.n	1d02 <cbvprintf+0x766>
					OUTC(*cp++);
    215c:	4651      	mov	r1, sl
    215e:	47c8      	blx	r9
    2160:	2800      	cmp	r0, #0
    2162:	f6bf adef 	bge.w	1d44 <cbvprintf+0x7a8>
    2166:	e7eb      	b.n	2140 <cbvprintf+0xba4>
					OUTC(*cp++);
    2168:	4651      	mov	r1, sl
    216a:	9203      	str	r2, [sp, #12]
    216c:	47c8      	blx	r9
    216e:	2800      	cmp	r0, #0
    2170:	9a03      	ldr	r2, [sp, #12]
    2172:	dbe5      	blt.n	2140 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    2174:	7810      	ldrb	r0, [r2, #0]
    2176:	4b37      	ldr	r3, [pc, #220]	; (2254 <cbvprintf+0xcb8>)
    2178:	5cc3      	ldrb	r3, [r0, r3]
    217a:	075b      	lsls	r3, r3, #29
    217c:	4617      	mov	r7, r2
    217e:	eb06 0802 	add.w	r8, r6, r2
    2182:	f102 0201 	add.w	r2, r2, #1
    2186:	d4ef      	bmi.n	2168 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
    2188:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    218c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    218e:	0699      	lsls	r1, r3, #26
    2190:	d407      	bmi.n	21a2 <cbvprintf+0xc06>
    2192:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    2194:	2e00      	cmp	r6, #0
    2196:	eba8 0206 	sub.w	r2, r8, r6
    219a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    219e:	dc0f      	bgt.n	21c0 <cbvprintf+0xc24>
    21a0:	4690      	mov	r8, r2
				if (*cp == '.') {
    21a2:	7838      	ldrb	r0, [r7, #0]
    21a4:	282e      	cmp	r0, #46	; 0x2e
    21a6:	d108      	bne.n	21ba <cbvprintf+0xc1e>
					OUTC(*cp++);
    21a8:	4651      	mov	r1, sl
    21aa:	47c8      	blx	r9
						OUTC('0');
    21ac:	2800      	cmp	r0, #0
    21ae:	dbc7      	blt.n	2140 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
    21b0:	2e00      	cmp	r6, #0
						OUTC('0');
    21b2:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    21b6:	dc09      	bgt.n	21cc <cbvprintf+0xc30>
					OUTC(*cp++);
    21b8:	3701      	adds	r7, #1
    21ba:	eba8 0607 	sub.w	r6, r8, r7
    21be:	e00e      	b.n	21de <cbvprintf+0xc42>
						OUTC('0');
    21c0:	4651      	mov	r1, sl
    21c2:	2030      	movs	r0, #48	; 0x30
    21c4:	47c8      	blx	r9
    21c6:	2800      	cmp	r0, #0
    21c8:	dae4      	bge.n	2194 <cbvprintf+0xbf8>
    21ca:	e7b9      	b.n	2140 <cbvprintf+0xba4>
						OUTC('0');
    21cc:	4651      	mov	r1, sl
    21ce:	2030      	movs	r0, #48	; 0x30
    21d0:	47c8      	blx	r9
    21d2:	3e01      	subs	r6, #1
    21d4:	e7ea      	b.n	21ac <cbvprintf+0xc10>
					OUTC(*cp++);
    21d6:	4651      	mov	r1, sl
    21d8:	47c8      	blx	r9
    21da:	2800      	cmp	r0, #0
    21dc:	dbb0      	blt.n	2140 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    21de:	4a1d      	ldr	r2, [pc, #116]	; (2254 <cbvprintf+0xcb8>)
    21e0:	46b8      	mov	r8, r7
    21e2:	19f3      	adds	r3, r6, r7
    21e4:	f817 0b01 	ldrb.w	r0, [r7], #1
    21e8:	5c12      	ldrb	r2, [r2, r0]
    21ea:	0752      	lsls	r2, r2, #29
    21ec:	d4f3      	bmi.n	21d6 <cbvprintf+0xc3a>
    21ee:	e5b0      	b.n	1d52 <cbvprintf+0x7b6>
				OUTC('0');
    21f0:	4651      	mov	r1, sl
    21f2:	2030      	movs	r0, #48	; 0x30
    21f4:	47c8      	blx	r9
    21f6:	2800      	cmp	r0, #0
    21f8:	dba2      	blt.n	2140 <cbvprintf+0xba4>
    21fa:	3601      	adds	r6, #1
    21fc:	e5ac      	b.n	1d58 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
    21fe:	06d8      	lsls	r0, r3, #27
    2200:	d401      	bmi.n	2206 <cbvprintf+0xc6a>
    2202:	0719      	lsls	r1, r3, #28
    2204:	d507      	bpl.n	2216 <cbvprintf+0xc7a>
				OUTC('0');
    2206:	4651      	mov	r1, sl
    2208:	2030      	movs	r0, #48	; 0x30
    220a:	9203      	str	r2, [sp, #12]
    220c:	47c8      	blx	r9
    220e:	2800      	cmp	r0, #0
    2210:	db96      	blt.n	2140 <cbvprintf+0xba4>
    2212:	9a03      	ldr	r2, [sp, #12]
    2214:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    2216:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    221a:	06db      	lsls	r3, r3, #27
    221c:	d508      	bpl.n	2230 <cbvprintf+0xc94>
				OUTC(conv->specifier);
    221e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2222:	9203      	str	r2, [sp, #12]
    2224:	4651      	mov	r1, sl
    2226:	47c8      	blx	r9
    2228:	2800      	cmp	r0, #0
    222a:	db89      	blt.n	2140 <cbvprintf+0xba4>
    222c:	9a03      	ldr	r2, [sp, #12]
    222e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    2230:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2232:	4437      	add	r7, r6
    2234:	1bbb      	subs	r3, r7, r6
    2236:	2b00      	cmp	r3, #0
    2238:	dc01      	bgt.n	223e <cbvprintf+0xca2>
			OUTS(bps, bpe);
    223a:	462b      	mov	r3, r5
    223c:	e592      	b.n	1d64 <cbvprintf+0x7c8>
				OUTC('0');
    223e:	4651      	mov	r1, sl
    2240:	2030      	movs	r0, #48	; 0x30
    2242:	9203      	str	r2, [sp, #12]
    2244:	47c8      	blx	r9
    2246:	2800      	cmp	r0, #0
    2248:	f6ff af7a 	blt.w	2140 <cbvprintf+0xba4>
    224c:	9a03      	ldr	r2, [sp, #12]
    224e:	3601      	adds	r6, #1
    2250:	e7f0      	b.n	2234 <cbvprintf+0xc98>
    2252:	bf00      	nop
    2254:	0000b21e 	.word	0x0000b21e

00002258 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2258:	4b0c      	ldr	r3, [pc, #48]	; (228c <class_handler+0x34>)
{
    225a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    225c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    225e:	4e0c      	ldr	r6, [pc, #48]	; (2290 <class_handler+0x38>)
    2260:	4b0c      	ldr	r3, [pc, #48]	; (2294 <class_handler+0x3c>)
    2262:	42b3      	cmp	r3, r6
    2264:	d303      	bcc.n	226e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    2266:	f06f 0085 	mvn.w	r0, #133	; 0x85
    226a:	bcf0      	pop	{r4, r5, r6, r7}
    226c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    226e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2270:	42bd      	cmp	r5, r7
    2272:	d309      	bcc.n	2288 <class_handler+0x30>
		if (iface->class_handler &&
    2274:	691c      	ldr	r4, [r3, #16]
    2276:	b13c      	cbz	r4, 2288 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2278:	f895 c002 	ldrb.w	ip, [r5, #2]
    227c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    227e:	45ac      	cmp	ip, r5
    2280:	d102      	bne.n	2288 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    2282:	4623      	mov	r3, r4
}
    2284:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    2286:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2288:	3324      	adds	r3, #36	; 0x24
    228a:	e7ea      	b.n	2262 <class_handler+0xa>
    228c:	20002d7c 	.word	0x20002d7c
    2290:	20000364 	.word	0x20000364
    2294:	20000340 	.word	0x20000340

00002298 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    229c:	4c13      	ldr	r4, [pc, #76]	; (22ec <custom_handler+0x54>)
    229e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 22f0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    22a2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 22f4 <custom_handler+0x5c>
{
    22a6:	4605      	mov	r5, r0
    22a8:	460e      	mov	r6, r1
    22aa:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22ac:	4544      	cmp	r4, r8
    22ae:	d303      	bcc.n	22b8 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    22b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    22b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    22b8:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    22ba:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    22be:	429a      	cmp	r2, r3
    22c0:	d312      	bcc.n	22e8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    22c2:	69a3      	ldr	r3, [r4, #24]
    22c4:	b183      	cbz	r3, 22e8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    22c6:	7890      	ldrb	r0, [r2, #2]
    22c8:	7929      	ldrb	r1, [r5, #4]
    22ca:	4288      	cmp	r0, r1
    22cc:	d105      	bne.n	22da <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    22ce:	463a      	mov	r2, r7
    22d0:	4631      	mov	r1, r6
    22d2:	4628      	mov	r0, r5
}
    22d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    22d8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    22da:	7952      	ldrb	r2, [r2, #5]
    22dc:	2a01      	cmp	r2, #1
    22de:	d103      	bne.n	22e8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    22e0:	463a      	mov	r2, r7
    22e2:	4631      	mov	r1, r6
    22e4:	4628      	mov	r0, r5
    22e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22e8:	3424      	adds	r4, #36	; 0x24
    22ea:	e7df      	b.n	22ac <custom_handler+0x14>
    22ec:	20000340 	.word	0x20000340
    22f0:	20000364 	.word	0x20000364
    22f4:	20002d7c 	.word	0x20002d7c

000022f8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    22f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22fc:	4c0b      	ldr	r4, [pc, #44]	; (232c <vendor_handler+0x34>)
    22fe:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2330 <vendor_handler+0x38>
{
    2302:	4605      	mov	r5, r0
    2304:	460e      	mov	r6, r1
    2306:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2308:	4544      	cmp	r4, r8
    230a:	d302      	bcc.n	2312 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    230c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2310:	e009      	b.n	2326 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    2312:	6963      	ldr	r3, [r4, #20]
    2314:	b90b      	cbnz	r3, 231a <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2316:	3424      	adds	r4, #36	; 0x24
    2318:	e7f6      	b.n	2308 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    231a:	463a      	mov	r2, r7
    231c:	4631      	mov	r1, r6
    231e:	4628      	mov	r0, r5
    2320:	4798      	blx	r3
    2322:	2800      	cmp	r0, #0
    2324:	d1f7      	bne.n	2316 <vendor_handler+0x1e>
}
    2326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    232a:	bf00      	nop
    232c:	20000340 	.word	0x20000340
    2330:	20000364 	.word	0x20000364

00002334 <set_endpoint>:
{
    2334:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2336:	7883      	ldrb	r3, [r0, #2]
    2338:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    233c:	7903      	ldrb	r3, [r0, #4]
    233e:	7942      	ldrb	r2, [r0, #5]
    2340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2344:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2348:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    234a:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    234c:	f003 0303 	and.w	r3, r3, #3
    2350:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    2354:	f002 f8aa 	bl	44ac <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2358:	f110 0f78 	cmn.w	r0, #120	; 0x78
    235c:	d004      	beq.n	2368 <set_endpoint+0x34>
	} else if (ret) {
    235e:	b118      	cbz	r0, 2368 <set_endpoint+0x34>
		return false;
    2360:	2000      	movs	r0, #0
}
    2362:	b003      	add	sp, #12
    2364:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2368:	f89d 0000 	ldrb.w	r0, [sp]
    236c:	f002 f924 	bl	45b8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2370:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2374:	d001      	beq.n	237a <set_endpoint+0x46>
	} else if (ret) {
    2376:	2800      	cmp	r0, #0
    2378:	d1f2      	bne.n	2360 <set_endpoint+0x2c>
	usb_dev.configured = true;
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <set_endpoint+0x50>)
    237c:	2001      	movs	r0, #1
    237e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    2382:	e7ee      	b.n	2362 <set_endpoint+0x2e>
    2384:	20002d7c 	.word	0x20002d7c

00002388 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2388:	4b03      	ldr	r3, [pc, #12]	; (2398 <usb_reset_alt_setting+0x10>)
    238a:	2200      	movs	r2, #0
    238c:	f8c3 20bb 	str.w	r2, [r3, #187]	; 0xbb
    2390:	f8c3 20bf 	str.w	r2, [r3, #191]	; 0xbf
}
    2394:	4770      	bx	lr
    2396:	bf00      	nop
    2398:	20002d7c 	.word	0x20002d7c

0000239c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    239c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    239e:	4b0b      	ldr	r3, [pc, #44]	; (23cc <is_ep_valid.part.0+0x30>)
    23a0:	4c0b      	ldr	r4, [pc, #44]	; (23d0 <is_ep_valid.part.0+0x34>)
    23a2:	42a3      	cmp	r3, r4
    23a4:	d301      	bcc.n	23aa <is_ep_valid.part.0+0xe>
	return false;
    23a6:	2000      	movs	r0, #0
}
    23a8:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    23aa:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23ac:	7f1e      	ldrb	r6, [r3, #28]
    23ae:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    23b0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23b2:	b2d5      	uxtb	r5, r2
    23b4:	42ae      	cmp	r6, r5
    23b6:	d801      	bhi.n	23bc <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23b8:	3324      	adds	r3, #36	; 0x24
    23ba:	e7f2      	b.n	23a2 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    23bc:	3201      	adds	r2, #1
    23be:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    23c2:	4285      	cmp	r5, r0
    23c4:	d1f5      	bne.n	23b2 <is_ep_valid.part.0+0x16>
				return true;
    23c6:	2001      	movs	r0, #1
    23c8:	e7ee      	b.n	23a8 <is_ep_valid.part.0+0xc>
    23ca:	bf00      	nop
    23cc:	20000340 	.word	0x20000340
    23d0:	20000364 	.word	0x20000364

000023d4 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    23d4:	4809      	ldr	r0, [pc, #36]	; (23fc <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    23d6:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    23d8:	7803      	ldrb	r3, [r0, #0]
    23da:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    23de:	330a      	adds	r3, #10
    23e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    23e4:	b13b      	cbz	r3, 23f6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    23e6:	f100 0208 	add.w	r2, r0, #8
    23ea:	f100 0110 	add.w	r1, r0, #16
    23ee:	4798      	blx	r3
    23f0:	43c0      	mvns	r0, r0
    23f2:	0fc0      	lsrs	r0, r0, #31
}
    23f4:	bd08      	pop	{r3, pc}
		return false;
    23f6:	4618      	mov	r0, r3
    23f8:	e7fc      	b.n	23f4 <usb_handle_request.constprop.0+0x20>
    23fa:	bf00      	nop
    23fc:	20002d7c 	.word	0x20002d7c

00002400 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2400:	2804      	cmp	r0, #4
{
    2402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2406:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2490 <forward_status_cb+0x90>
    240a:	4604      	mov	r4, r0
    240c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    240e:	d10e      	bne.n	242e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    2410:	f7ff ffba 	bl	2388 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    2414:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2494 <forward_status_cb+0x94>
    2418:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    241c:	b15b      	cbz	r3, 2436 <forward_status_cb+0x36>
			usb_cancel_transfers();
    241e:	f000 fdb3 	bl	2f88 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2422:	2c04      	cmp	r4, #4
    2424:	d001      	beq.n	242a <forward_status_cb+0x2a>
    2426:	2c01      	cmp	r4, #1
    2428:	d105      	bne.n	2436 <forward_status_cb+0x36>
    242a:	4d1b      	ldr	r5, [pc, #108]	; (2498 <forward_status_cb+0x98>)
    242c:	e016      	b.n	245c <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    242e:	2805      	cmp	r0, #5
    2430:	d0f0      	beq.n	2414 <forward_status_cb+0x14>
    2432:	2801      	cmp	r0, #1
    2434:	d0ee      	beq.n	2414 <forward_status_cb+0x14>
    2436:	4d18      	ldr	r5, [pc, #96]	; (2498 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2438:	4545      	cmp	r5, r8
    243a:	d31e      	bcc.n	247a <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    243c:	4b15      	ldr	r3, [pc, #84]	; (2494 <forward_status_cb+0x94>)
    243e:	6a1b      	ldr	r3, [r3, #32]
    2440:	b31b      	cbz	r3, 248a <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    2442:	4631      	mov	r1, r6
    2444:	4620      	mov	r0, r4
}
    2446:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    244a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    244c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2450:	2700      	movs	r7, #0
    2452:	7f2a      	ldrb	r2, [r5, #28]
    2454:	b2fb      	uxtb	r3, r7
    2456:	429a      	cmp	r2, r3
    2458:	d803      	bhi.n	2462 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    245a:	3524      	adds	r5, #36	; 0x24
    245c:	4545      	cmp	r5, r8
    245e:	d3f5      	bcc.n	244c <forward_status_cb+0x4c>
    2460:	e007      	b.n	2472 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    2462:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    2466:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    2468:	7918      	ldrb	r0, [r3, #4]
    246a:	f002 f8cf 	bl	460c <usb_dc_ep_disable>
			if (ret < 0) {
    246e:	2800      	cmp	r0, #0
    2470:	daef      	bge.n	2452 <forward_status_cb+0x52>
				usb_dev.configured = false;
    2472:	2300      	movs	r3, #0
    2474:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    2478:	e7dd      	b.n	2436 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    247a:	68eb      	ldr	r3, [r5, #12]
    247c:	b11b      	cbz	r3, 2486 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    247e:	4632      	mov	r2, r6
    2480:	4621      	mov	r1, r4
    2482:	4628      	mov	r0, r5
    2484:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2486:	3524      	adds	r5, #36	; 0x24
    2488:	e7d6      	b.n	2438 <forward_status_cb+0x38>
}
    248a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    248e:	bf00      	nop
    2490:	20000364 	.word	0x20000364
    2494:	20002d7c 	.word	0x20002d7c
    2498:	20000340 	.word	0x20000340

0000249c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    249c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    249e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    24a0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    24a2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    24a4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    24a8:	d007      	beq.n	24ba <usb_halt_endpoint_req.isra.0+0x1e>
    24aa:	4620      	mov	r0, r4
    24ac:	f7ff ff76 	bl	239c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    24b0:	b188      	cbz	r0, 24d6 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    24b2:	4b0f      	ldr	r3, [pc, #60]	; (24f0 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    24b4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    24b8:	b168      	cbz	r0, 24d6 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    24ba:	4e0d      	ldr	r6, [pc, #52]	; (24f0 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    24bc:	4620      	mov	r0, r4
		if (halt) {
    24be:	b165      	cbz	r5, 24da <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    24c0:	f002 f816 	bl	44f0 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    24c4:	69f3      	ldr	r3, [r6, #28]
    24c6:	b90b      	cbnz	r3, 24cc <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    24c8:	2001      	movs	r0, #1
    24ca:	e004      	b.n	24d6 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    24cc:	2008      	movs	r0, #8
    24ce:	f10d 0107 	add.w	r1, sp, #7
    24d2:	4798      	blx	r3
		return true;
    24d4:	4628      	mov	r0, r5
}
    24d6:	b002      	add	sp, #8
    24d8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    24da:	f002 f831 	bl	4540 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    24de:	69f3      	ldr	r3, [r6, #28]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d0f1      	beq.n	24c8 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    24e4:	f10d 0107 	add.w	r1, sp, #7
    24e8:	2009      	movs	r0, #9
    24ea:	4798      	blx	r3
    24ec:	e7ec      	b.n	24c8 <usb_halt_endpoint_req.isra.0+0x2c>
    24ee:	bf00      	nop
    24f0:	20002d7c 	.word	0x20002d7c

000024f4 <usb_handle_standard_request>:
{
    24f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    24f8:	4ea8      	ldr	r6, [pc, #672]	; (279c <usb_handle_standard_request+0x2a8>)
    24fa:	69b3      	ldr	r3, [r6, #24]
{
    24fc:	4605      	mov	r5, r0
    24fe:	460f      	mov	r7, r1
    2500:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    2502:	b963      	cbnz	r3, 251e <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
    2504:	7828      	ldrb	r0, [r5, #0]
    2506:	f000 001f 	and.w	r0, r0, #31
    250a:	2801      	cmp	r0, #1
    250c:	f000 80a6 	beq.w	265c <usb_handle_standard_request+0x168>
    2510:	2802      	cmp	r0, #2
    2512:	f000 810e 	beq.w	2732 <usb_handle_standard_request+0x23e>
    2516:	b138      	cbz	r0, 2528 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
    2518:	f06f 0015 	mvn.w	r0, #21
    251c:	e095      	b.n	264a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    251e:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2520:	2800      	cmp	r0, #0
    2522:	d1ef      	bne.n	2504 <usb_handle_standard_request+0x10>
	int rc = 0;
    2524:	2000      	movs	r0, #0
    2526:	e090      	b.n	264a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    2528:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    252c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    252e:	2a00      	cmp	r2, #0
    2530:	da31      	bge.n	2596 <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
    2532:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    2534:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    2538:	d010      	beq.n	255c <usb_handle_standard_request+0x68>
    253a:	2b08      	cmp	r3, #8
    253c:	d025      	beq.n	258a <usb_handle_standard_request+0x96>
    253e:	2b00      	cmp	r3, #0
    2540:	d1ea      	bne.n	2518 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2542:	2101      	movs	r1, #1
	data[1] = 0U;
    2544:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2546:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    2548:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    254c:	2900      	cmp	r1, #0
    254e:	bf18      	it	ne
    2550:	2302      	movne	r3, #2
    2552:	f043 0301 	orr.w	r3, r3, #1
    2556:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2558:	2302      	movs	r3, #2
    255a:	e01a      	b.n	2592 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
    255c:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    255e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2560:	1f11      	subs	r1, r2, #4
    2562:	2901      	cmp	r1, #1
    2564:	d9d8      	bls.n	2518 <usb_handle_standard_request+0x24>
    2566:	2a07      	cmp	r2, #7
    2568:	d8d6      	bhi.n	2518 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    256a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    256c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    256e:	781c      	ldrb	r4, [r3, #0]
    2570:	2c00      	cmp	r4, #0
    2572:	d0d1      	beq.n	2518 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
    2574:	785d      	ldrb	r5, [r3, #1]
    2576:	4295      	cmp	r5, r2
    2578:	d103      	bne.n	2582 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
    257a:	4281      	cmp	r1, r0
    257c:	f000 8112 	beq.w	27a4 <usb_handle_standard_request+0x2b0>
			cur_index++;
    2580:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    2582:	4423      	add	r3, r4
    2584:	e7f3      	b.n	256e <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	e112      	b.n	27b0 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
    258a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    258e:	7013      	strb	r3, [r2, #0]
			*len = 1;
    2590:	2301      	movs	r3, #1
		*len = 2;
    2592:	603b      	str	r3, [r7, #0]
		return true;
    2594:	e059      	b.n	264a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    2596:	3b01      	subs	r3, #1
    2598:	2b08      	cmp	r3, #8
    259a:	d8bd      	bhi.n	2518 <usb_handle_standard_request+0x24>
    259c:	a201      	add	r2, pc, #4	; (adr r2, 25a4 <usb_handle_standard_request+0xb0>)
    259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    25a2:	bf00      	nop
    25a4:	0000263d 	.word	0x0000263d
    25a8:	00002519 	.word	0x00002519
    25ac:	0000264f 	.word	0x0000264f
    25b0:	00002519 	.word	0x00002519
    25b4:	000025c9 	.word	0x000025c9
    25b8:	00002519 	.word	0x00002519
    25bc:	00002519 	.word	0x00002519
    25c0:	00002519 	.word	0x00002519
    25c4:	000025d5 	.word	0x000025d5
			return !usb_dc_set_address(setup->wValue);
    25c8:	78a8      	ldrb	r0, [r5, #2]
    25ca:	f001 ff5d 	bl	4488 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25ce:	2800      	cmp	r0, #0
    25d0:	d0a8      	beq.n	2524 <usb_handle_standard_request+0x30>
    25d2:	e7a1      	b.n	2518 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
    25d4:	886c      	ldrh	r4, [r5, #2]
    25d6:	b144      	cbz	r4, 25ea <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    25d8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    25dc:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    25de:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    25e0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    25e2:	783c      	ldrb	r4, [r7, #0]
    25e4:	b96c      	cbnz	r4, 2602 <usb_handle_standard_request+0x10e>
	if (found) {
    25e6:	2800      	cmp	r0, #0
    25e8:	d096      	beq.n	2518 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
    25ea:	f7ff fecd 	bl	2388 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    25ee:	886b      	ldrh	r3, [r5, #2]
    25f0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    25f4:	69f3      	ldr	r3, [r6, #28]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d094      	beq.n	2524 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    25fa:	4969      	ldr	r1, [pc, #420]	; (27a0 <usb_handle_standard_request+0x2ac>)
    25fc:	2003      	movs	r0, #3
    25fe:	4798      	blx	r3
    2600:	e790      	b.n	2524 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
    2602:	787b      	ldrb	r3, [r7, #1]
    2604:	2b04      	cmp	r3, #4
    2606:	d00c      	beq.n	2622 <usb_handle_standard_request+0x12e>
    2608:	2b05      	cmp	r3, #5
    260a:	d00d      	beq.n	2628 <usb_handle_standard_request+0x134>
    260c:	2b02      	cmp	r3, #2
    260e:	d105      	bne.n	261c <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2610:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    2614:	886a      	ldrh	r2, [r5, #2]
				found = true;
    2616:	4542      	cmp	r2, r8
    2618:	bf08      	it	eq
    261a:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    261c:	783b      	ldrb	r3, [r7, #0]
    261e:	441f      	add	r7, r3
    2620:	e7df      	b.n	25e2 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    2622:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    2626:	e7f9      	b.n	261c <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    2628:	886b      	ldrh	r3, [r5, #2]
    262a:	4543      	cmp	r3, r8
    262c:	d1f6      	bne.n	261c <usb_handle_standard_request+0x128>
    262e:	f1b9 0f00 	cmp.w	r9, #0
    2632:	d1f3      	bne.n	261c <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2634:	4638      	mov	r0, r7
    2636:	f7ff fe7d 	bl	2334 <set_endpoint>
			break;
    263a:	e7ef      	b.n	261c <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    263c:	886b      	ldrh	r3, [r5, #2]
    263e:	2b01      	cmp	r3, #1
    2640:	f47f af6a 	bne.w	2518 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
    2644:	2000      	movs	r0, #0
    2646:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    264e:	886b      	ldrh	r3, [r5, #2]
    2650:	2b01      	cmp	r3, #1
    2652:	f47f af61 	bne.w	2518 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
    2656:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    265a:	e763      	b.n	2524 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
    265c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2660:	2b00      	cmp	r3, #0
    2662:	f43f af59 	beq.w	2518 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2666:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2668:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    266c:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    266e:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    2670:	781a      	ldrb	r2, [r3, #0]
    2672:	2a00      	cmp	r2, #0
    2674:	f43f af50 	beq.w	2518 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2678:	7859      	ldrb	r1, [r3, #1]
    267a:	2902      	cmp	r1, #2
    267c:	d104      	bne.n	2688 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
    267e:	f893 e004 	ldrb.w	lr, [r3, #4]
    2682:	4586      	cmp	lr, r0
    2684:	f200 8096 	bhi.w	27b4 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
    2688:	4413      	add	r3, r2
    268a:	e7f1      	b.n	2670 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
    268c:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    268e:	7050      	strb	r0, [r2, #1]
			*len = 2;
    2690:	6039      	str	r1, [r7, #0]
			return true;
    2692:	e7da      	b.n	264a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    2694:	440c      	add	r4, r1
    2696:	e09b      	b.n	27d0 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2698:	280b      	cmp	r0, #11
    269a:	f47f af3d 	bne.w	2518 <usb_handle_standard_request+0x24>
	bool ret = false;
    269e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    26a0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    26a4:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    26a6:	46b9      	mov	r9, r7
    26a8:	e006      	b.n	26b8 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
    26aa:	7863      	ldrb	r3, [r4, #1]
    26ac:	2b04      	cmp	r3, #4
    26ae:	d00f      	beq.n	26d0 <usb_handle_standard_request+0x1dc>
    26b0:	2b05      	cmp	r3, #5
    26b2:	d022      	beq.n	26fa <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
    26b4:	7823      	ldrb	r3, [r4, #0]
    26b6:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    26b8:	7823      	ldrb	r3, [r4, #0]
    26ba:	2b00      	cmp	r3, #0
    26bc:	d1f5      	bne.n	26aa <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
    26be:	69f3      	ldr	r3, [r6, #28]
    26c0:	b113      	cbz	r3, 26c8 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    26c2:	4649      	mov	r1, r9
    26c4:	2007      	movs	r0, #7
    26c6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    26c8:	2f00      	cmp	r7, #0
    26ca:	f47f af2b 	bne.w	2524 <usb_handle_standard_request+0x30>
    26ce:	e723      	b.n	2518 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    26d0:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
    26d4:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    26d6:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
    26da:	4592      	cmp	sl, r2
    26dc:	4653      	mov	r3, sl
    26de:	d1e9      	bne.n	26b4 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
    26e0:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
    26e2:	4588      	cmp	r8, r1
    26e4:	fa1f f288 	uxth.w	r2, r8
    26e8:	d1e4      	bne.n	26b4 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    26ea:	2b07      	cmp	r3, #7
    26ec:	d81e      	bhi.n	272c <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
    26ee:	4433      	add	r3, r6
		return true;
    26f0:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
    26f2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    26f6:	2701      	movs	r7, #1
    26f8:	e7dc      	b.n	26b4 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
    26fa:	88ab      	ldrh	r3, [r5, #4]
    26fc:	4553      	cmp	r3, sl
    26fe:	d1d9      	bne.n	26b4 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
    2700:	78ab      	ldrb	r3, [r5, #2]
    2702:	4543      	cmp	r3, r8
    2704:	d00d      	beq.n	2722 <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
    2706:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2708:	4638      	mov	r0, r7
    270a:	f000 fc1f 	bl	2f4c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    270e:	4638      	mov	r0, r7
    2710:	f001 ff7c 	bl	460c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2714:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2718:	d0ed      	beq.n	26f6 <usb_handle_standard_request+0x202>
	} else if (ret) {
    271a:	fab0 f780 	clz	r7, r0
    271e:	097f      	lsrs	r7, r7, #5
    2720:	e7c8      	b.n	26b4 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
    2722:	4620      	mov	r0, r4
    2724:	f7ff fe06 	bl	2334 <set_endpoint>
    2728:	4607      	mov	r7, r0
    272a:	e7c3      	b.n	26b4 <usb_handle_standard_request+0x1c0>
    272c:	46a1      	mov	r9, r4
	return false;
    272e:	2700      	movs	r7, #0
    2730:	e7c0      	b.n	26b4 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
    2732:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    2736:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2738:	2a00      	cmp	r2, #0
    273a:	da19      	bge.n	2770 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    273c:	2b00      	cmp	r3, #0
    273e:	f47f aeeb 	bne.w	2518 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
    2742:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    2744:	0663      	lsls	r3, r4, #25
    2746:	d00a      	beq.n	275e <usb_handle_standard_request+0x26a>
    2748:	4620      	mov	r0, r4
    274a:	f7ff fe27 	bl	239c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    274e:	2800      	cmp	r0, #0
    2750:	f43f aee2 	beq.w	2518 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2754:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2758:	2b00      	cmp	r3, #0
    275a:	f43f aedd 	beq.w	2518 <usb_handle_standard_request+0x24>
    275e:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    2762:	4620      	mov	r0, r4
    2764:	4629      	mov	r1, r5
    2766:	f001 ff0b 	bl	4580 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    276a:	2000      	movs	r0, #0
    276c:	7068      	strb	r0, [r5, #1]
    276e:	e6f3      	b.n	2558 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
    2770:	2b01      	cmp	r3, #1
    2772:	d008      	beq.n	2786 <usb_handle_standard_request+0x292>
    2774:	2b03      	cmp	r3, #3
    2776:	f47f aecf 	bne.w	2518 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    277a:	886b      	ldrh	r3, [r5, #2]
    277c:	2b00      	cmp	r3, #0
    277e:	f47f aecb 	bne.w	2518 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    2782:	2101      	movs	r1, #1
    2784:	e003      	b.n	278e <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2786:	8869      	ldrh	r1, [r5, #2]
    2788:	2900      	cmp	r1, #0
    278a:	f47f aec5 	bne.w	2518 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    278e:	88a8      	ldrh	r0, [r5, #4]
    2790:	f7ff fe84 	bl	249c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2794:	2800      	cmp	r0, #0
    2796:	f47f aec5 	bne.w	2524 <usb_handle_standard_request+0x30>
    279a:	e6bd      	b.n	2518 <usb_handle_standard_request+0x24>
    279c:	20002d7c 	.word	0x20002d7c
    27a0:	20002e36 	.word	0x20002e36
		if (type == USB_DESC_CONFIGURATION) {
    27a4:	2a02      	cmp	r2, #2
		*data = p;
    27a6:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    27aa:	f47f aeec 	bne.w	2586 <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
    27ae:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    27b0:	603b      	str	r3, [r7, #0]
    27b2:	e6b7      	b.n	2524 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
    27b4:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    27b8:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    27ba:	2b00      	cmp	r3, #0
    27bc:	f6bf af6c 	bge.w	2698 <usb_handle_standard_request+0x1a4>
    27c0:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    27c4:	2800      	cmp	r0, #0
    27c6:	f43f af61 	beq.w	268c <usb_handle_standard_request+0x198>
    27ca:	280a      	cmp	r0, #10
    27cc:	f47f aea4 	bne.w	2518 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
    27d0:	7821      	ldrb	r1, [r4, #0]
    27d2:	2900      	cmp	r1, #0
    27d4:	f43f aea0 	beq.w	2518 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    27d8:	7863      	ldrb	r3, [r4, #1]
    27da:	2b04      	cmp	r3, #4
    27dc:	f47f af5a 	bne.w	2694 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    27e0:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    27e2:	459c      	cmp	ip, r3
    27e4:	f47f af56 	bne.w	2694 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    27e8:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    27ea:	bf96      	itet	ls
    27ec:	199b      	addls	r3, r3, r6
	return 0;
    27ee:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    27f0:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    27f4:	7013      	strb	r3, [r2, #0]
				*len = 1;
    27f6:	2301      	movs	r3, #1
    27f8:	e7da      	b.n	27b0 <usb_handle_standard_request+0x2bc>
    27fa:	bf00      	nop

000027fc <usb_data_to_host>:
{
    27fc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <usb_data_to_host+0x50>)
    2800:	7d23      	ldrb	r3, [r4, #20]
    2802:	b9cb      	cbnz	r3, 2838 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2804:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2806:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2808:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    280a:	ab01      	add	r3, sp, #4
    280c:	2080      	movs	r0, #128	; 0x80
    280e:	f006 ff05 	bl	961c <usb_write>
		usb_dev.data_buf += chunk;
    2812:	9a01      	ldr	r2, [sp, #4]
    2814:	68a3      	ldr	r3, [r4, #8]
    2816:	4413      	add	r3, r2
    2818:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    281a:	68e3      	ldr	r3, [r4, #12]
    281c:	1a9b      	subs	r3, r3, r2
    281e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2820:	b943      	cbnz	r3, 2834 <usb_data_to_host+0x38>
    2822:	b13a      	cbz	r2, 2834 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2824:	6923      	ldr	r3, [r4, #16]
    2826:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2828:	429a      	cmp	r2, r3
    282a:	dd03      	ble.n	2834 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    282c:	069b      	lsls	r3, r3, #26
    282e:	d101      	bne.n	2834 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    2830:	2301      	movs	r3, #1
    2832:	7523      	strb	r3, [r4, #20]
}
    2834:	b002      	add	sp, #8
    2836:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2838:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    283a:	461a      	mov	r2, r3
    283c:	4619      	mov	r1, r3
    283e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    2840:	7523      	strb	r3, [r4, #20]
}
    2842:	b002      	add	sp, #8
    2844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2848:	f001 bf06 	b.w	4658 <usb_dc_ep_write>
    284c:	20002d7c 	.word	0x20002d7c

00002850 <usb_handle_control_transfer>:
{
    2850:	b530      	push	{r4, r5, lr}
    2852:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    2854:	2300      	movs	r3, #0
{
    2856:	4602      	mov	r2, r0
    2858:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    285a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    285c:	2800      	cmp	r0, #0
    285e:	d15f      	bne.n	2920 <usb_handle_control_transfer+0xd0>
    2860:	2900      	cmp	r1, #0
    2862:	d13c      	bne.n	28de <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2864:	2208      	movs	r2, #8
    2866:	460b      	mov	r3, r1
    2868:	eb0d 0102 	add.w	r1, sp, r2
    286c:	f007 f86b 	bl	9946 <usb_dc_ep_read>
    2870:	2800      	cmp	r0, #0
    2872:	da04      	bge.n	287e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2874:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2876:	f001 fe3b 	bl	44f0 <usb_dc_ep_set_stall>
}
    287a:	b005      	add	sp, #20
    287c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    287e:	4c2d      	ldr	r4, [pc, #180]	; (2934 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
    2880:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    2884:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    2888:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    288a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    288e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2890:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    2894:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2896:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2898:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    289c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    28a0:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    28a2:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    28a4:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    28a8:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    28aa:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    28ac:	d40a      	bmi.n	28c4 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    28ae:	2b80      	cmp	r3, #128	; 0x80
    28b0:	d904      	bls.n	28bc <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    28b2:	2080      	movs	r0, #128	; 0x80
    28b4:	f001 fe1c 	bl	44f0 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    28b8:	2000      	movs	r0, #0
    28ba:	e7dc      	b.n	2876 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    28bc:	b113      	cbz	r3, 28c4 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
    28be:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    28c2:	e7da      	b.n	287a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    28c4:	f7ff fd86 	bl	23d4 <usb_handle_request.constprop.0>
    28c8:	2800      	cmp	r0, #0
    28ca:	d0d3      	beq.n	2874 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    28cc:	88e2      	ldrh	r2, [r4, #6]
    28ce:	6923      	ldr	r3, [r4, #16]
    28d0:	429a      	cmp	r2, r3
    28d2:	bfd4      	ite	le
    28d4:	60e2      	strle	r2, [r4, #12]
    28d6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    28d8:	f7ff ff90 	bl	27fc <usb_data_to_host>
    28dc:	e7cd      	b.n	287a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    28de:	4c15      	ldr	r4, [pc, #84]	; (2934 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28e0:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    28e4:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28e6:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    28e8:	dc04      	bgt.n	28f4 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28ea:	f007 f82c 	bl	9946 <usb_dc_ep_read>
    28ee:	2800      	cmp	r0, #0
    28f0:	dac3      	bge.n	287a <usb_handle_control_transfer+0x2a>
    28f2:	e7bf      	b.n	2874 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28f4:	462a      	mov	r2, r5
    28f6:	f007 f826 	bl	9946 <usb_dc_ep_read>
    28fa:	2800      	cmp	r0, #0
    28fc:	dbd9      	blt.n	28b2 <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
    28fe:	9901      	ldr	r1, [sp, #4]
    2900:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2902:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    2904:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    2906:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    2908:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    290a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    290c:	2b00      	cmp	r3, #0
    290e:	d1b4      	bne.n	287a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2910:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2914:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2916:	f7ff fd5d 	bl	23d4 <usb_handle_request.constprop.0>
    291a:	2800      	cmp	r0, #0
    291c:	d1dc      	bne.n	28d8 <usb_handle_control_transfer+0x88>
    291e:	e7a9      	b.n	2874 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2920:	2880      	cmp	r0, #128	; 0x80
    2922:	d1aa      	bne.n	287a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2924:	4b03      	ldr	r3, [pc, #12]	; (2934 <usb_handle_control_transfer+0xe4>)
    2926:	68da      	ldr	r2, [r3, #12]
    2928:	2a00      	cmp	r2, #0
    292a:	d1d5      	bne.n	28d8 <usb_handle_control_transfer+0x88>
    292c:	7d1b      	ldrb	r3, [r3, #20]
    292e:	2b00      	cmp	r3, #0
    2930:	d1d2      	bne.n	28d8 <usb_handle_control_transfer+0x88>
    2932:	e7a2      	b.n	287a <usb_handle_control_transfer+0x2a>
    2934:	20002d7c 	.word	0x20002d7c

00002938 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2938:	4b05      	ldr	r3, [pc, #20]	; (2950 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    293a:	4a06      	ldr	r2, [pc, #24]	; (2954 <usb_set_config+0x1c>)
    293c:	629a      	str	r2, [r3, #40]	; 0x28
    293e:	4a06      	ldr	r2, [pc, #24]	; (2958 <usb_set_config+0x20>)
    2940:	62da      	str	r2, [r3, #44]	; 0x2c
    2942:	4a06      	ldr	r2, [pc, #24]	; (295c <usb_set_config+0x24>)
    2944:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    2946:	4a06      	ldr	r2, [pc, #24]	; (2960 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2948:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    294a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    294c:	2000      	movs	r0, #0
    294e:	4770      	bx	lr
    2950:	20002d7c 	.word	0x20002d7c
    2954:	000024f5 	.word	0x000024f5
    2958:	00002259 	.word	0x00002259
    295c:	000022f9 	.word	0x000022f9
    2960:	00002299 	.word	0x00002299

00002964 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    2964:	4b08      	ldr	r3, [pc, #32]	; (2988 <usb_device_init+0x24>)
{
    2966:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2968:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    296c:	b934      	cbnz	r4, 297c <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    296e:	f000 f9a3 	bl	2cb8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2972:	b130      	cbz	r0, 2982 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    2974:	f7ff ffe0 	bl	2938 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    2978:	4620      	mov	r0, r4
}
    297a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    297c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2980:	e7fb      	b.n	297a <usb_device_init+0x16>
		return -1;
    2982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2986:	e7f8      	b.n	297a <usb_device_init+0x16>
    2988:	20002d7c 	.word	0x20002d7c

0000298c <usb_enable>:
{
    298c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2990:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    2992:	4d35      	ldr	r5, [pc, #212]	; (2a68 <usb_enable+0xdc>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2994:	4835      	ldr	r0, [pc, #212]	; (2a6c <usb_enable+0xe0>)
    2996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    299e:	f005 f953 	bl	7c48 <z_impl_k_mutex_lock>
    29a2:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    29a6:	2e00      	cmp	r6, #0
    29a8:	d15b      	bne.n	2a62 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    29aa:	4831      	ldr	r0, [pc, #196]	; (2a70 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    29ac:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    29ae:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    29b0:	f001 ff68 	bl	4884 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    29b4:	f001 fd2a 	bl	440c <usb_dc_attach>
	if (ret < 0) {
    29b8:	1e04      	subs	r4, r0, #0
    29ba:	db36      	blt.n	2a2a <usb_enable+0x9e>
	ret = usb_transfer_init();
    29bc:	f000 fb0c 	bl	2fd8 <usb_transfer_init>
	if (ret < 0) {
    29c0:	1e04      	subs	r4, r0, #0
    29c2:	db32      	blt.n	2a2a <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    29c4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    29c6:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    29c8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    29cc:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    29d0:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29d4:	f001 fd6a 	bl	44ac <usb_dc_ep_configure>
	if (ret < 0) {
    29d8:	1e04      	subs	r4, r0, #0
    29da:	db26      	blt.n	2a2a <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    29dc:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    29de:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    29e0:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29e4:	f001 fd62 	bl	44ac <usb_dc_ep_configure>
	if (ret < 0) {
    29e8:	1e04      	subs	r4, r0, #0
    29ea:	db1e      	blt.n	2a2a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    29ec:	4921      	ldr	r1, [pc, #132]	; (2a74 <usb_enable+0xe8>)
    29ee:	4630      	mov	r0, r6
    29f0:	f001 ff34 	bl	485c <usb_dc_ep_set_callback>
	if (ret < 0) {
    29f4:	1e04      	subs	r4, r0, #0
    29f6:	db18      	blt.n	2a2a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    29f8:	491e      	ldr	r1, [pc, #120]	; (2a74 <usb_enable+0xe8>)
    29fa:	4638      	mov	r0, r7
    29fc:	f001 ff2e 	bl	485c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a00:	1e04      	subs	r4, r0, #0
    2a02:	db12      	blt.n	2a2a <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a04:	4c1c      	ldr	r4, [pc, #112]	; (2a78 <usb_enable+0xec>)
    2a06:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a7c <usb_enable+0xf0>
    2a0a:	4544      	cmp	r4, r8
    2a0c:	d314      	bcc.n	2a38 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2a0e:	2000      	movs	r0, #0
    2a10:	f001 fdd2 	bl	45b8 <usb_dc_ep_enable>
	if (ret < 0) {
    2a14:	1e04      	subs	r4, r0, #0
    2a16:	db08      	blt.n	2a2a <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2a18:	2080      	movs	r0, #128	; 0x80
    2a1a:	f001 fdcd 	bl	45b8 <usb_dc_ep_enable>
	if (ret < 0) {
    2a1e:	1e04      	subs	r4, r0, #0
    2a20:	db03      	blt.n	2a2a <usb_enable+0x9e>
	usb_dev.enabled = true;
    2a22:	2301      	movs	r3, #1
    2a24:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2a28:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2a2a:	4810      	ldr	r0, [pc, #64]	; (2a6c <usb_enable+0xe0>)
    2a2c:	f005 f984 	bl	7d38 <z_impl_k_mutex_unlock>
}
    2a30:	4620      	mov	r0, r4
    2a32:	b002      	add	sp, #8
    2a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    2a38:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2a3a:	2600      	movs	r6, #0
    2a3c:	7f22      	ldrb	r2, [r4, #28]
    2a3e:	b2f3      	uxtb	r3, r6
    2a40:	429a      	cmp	r2, r3
    2a42:	d801      	bhi.n	2a48 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a44:	3424      	adds	r4, #36	; 0x24
    2a46:	e7e0      	b.n	2a0a <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2a48:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2a4c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2a50:	7910      	ldrb	r0, [r2, #4]
    2a52:	f001 ff03 	bl	485c <usb_dc_ep_set_callback>
    2a56:	3601      	adds	r6, #1
    2a58:	2800      	cmp	r0, #0
    2a5a:	d0ef      	beq.n	2a3c <usb_enable+0xb0>
    2a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2a60:	e7e3      	b.n	2a2a <usb_enable+0x9e>
		ret = -EALREADY;
    2a62:	f06f 0477 	mvn.w	r4, #119	; 0x77
    2a66:	e7e0      	b.n	2a2a <usb_enable+0x9e>
    2a68:	20002d7c 	.word	0x20002d7c
    2a6c:	20000254 	.word	0x20000254
    2a70:	00002401 	.word	0x00002401
    2a74:	00002851 	.word	0x00002851
    2a78:	20000340 	.word	0x20000340
    2a7c:	20000364 	.word	0x20000364

00002a80 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2a80:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2a82:	4b1f      	ldr	r3, [pc, #124]	; (2b00 <usb_update_sn_string_descriptor+0x80>)
{
    2a84:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2a86:	aa05      	add	r2, sp, #20
    2a88:	f103 0510 	add.w	r5, r3, #16
    2a8c:	6818      	ldr	r0, [r3, #0]
    2a8e:	6859      	ldr	r1, [r3, #4]
    2a90:	4614      	mov	r4, r2
    2a92:	c403      	stmia	r4!, {r0, r1}
    2a94:	3308      	adds	r3, #8
    2a96:	42ab      	cmp	r3, r5
    2a98:	4622      	mov	r2, r4
    2a9a:	d1f7      	bne.n	2a8c <usb_update_sn_string_descriptor+0xc>
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2aa0:	2210      	movs	r2, #16
    2aa2:	2100      	movs	r1, #0
    2aa4:	a801      	add	r0, sp, #4
    2aa6:	f007 ffc2 	bl	aa2e <memset>
	memset(sn, 0, sizeof(sn));
    2aaa:	2212      	movs	r2, #18
    2aac:	2100      	movs	r1, #0
    2aae:	4815      	ldr	r0, [pc, #84]	; (2b04 <usb_update_sn_string_descriptor+0x84>)
    2ab0:	f007 ffbd 	bl	aa2e <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2ab4:	2110      	movs	r1, #16
    2ab6:	a801      	add	r0, sp, #4
    2ab8:	f007 f850 	bl	9b5c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2abc:	2800      	cmp	r0, #0
    2abe:	dd1b      	ble.n	2af8 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2ac0:	2808      	cmp	r0, #8
    2ac2:	bfb8      	it	lt
    2ac4:	2008      	movlt	r0, #8
    2ac6:	3808      	subs	r0, #8
    2ac8:	ab01      	add	r3, sp, #4
    2aca:	4a0e      	ldr	r2, [pc, #56]	; (2b04 <usb_update_sn_string_descriptor+0x84>)
    2acc:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2ace:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2ad0:	f810 3b01 	ldrb.w	r3, [r0], #1
    2ad4:	ac0a      	add	r4, sp, #40	; 0x28
    2ad6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2ada:	f003 030f 	and.w	r3, r3, #15
    2ade:	3328      	adds	r3, #40	; 0x28
    2ae0:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    2ae2:	3101      	adds	r1, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2ae4:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2ae8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2aec:	7014      	strb	r4, [r2, #0]
		for (int i = 0; i < usblen; i++) {
    2aee:	2908      	cmp	r1, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2af0:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    2af2:	f102 0202 	add.w	r2, r2, #2
    2af6:	d1eb      	bne.n	2ad0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2af8:	4802      	ldr	r0, [pc, #8]	; (2b04 <usb_update_sn_string_descriptor+0x84>)
    2afa:	b00b      	add	sp, #44	; 0x2c
    2afc:	bd30      	pop	{r4, r5, pc}
    2afe:	bf00      	nop
    2b00:	0000b134 	.word	0x0000b134
    2b04:	20003bb2 	.word	0x20003bb2

00002b08 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b0c:	4604      	mov	r4, r0
    2b0e:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    2b10:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2b12:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2b16:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    2b18:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2b1a:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
    2b1c:	7820      	ldrb	r0, [r4, #0]
    2b1e:	b920      	cbnz	r0, 2b2a <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    2b20:	4b61      	ldr	r3, [pc, #388]	; (2ca8 <usb_fix_descriptor+0x1a0>)
    2b22:	3402      	adds	r4, #2
    2b24:	429c      	cmp	r4, r3
    2b26:	d01f      	beq.n	2b68 <usb_fix_descriptor+0x60>
    2b28:	e7f2      	b.n	2b10 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    2b2a:	7863      	ldrb	r3, [r4, #1]
    2b2c:	2b05      	cmp	r3, #5
    2b2e:	d805      	bhi.n	2b3c <usb_fix_descriptor+0x34>
    2b30:	e8df f003 	tbb	[pc, r3]
    2b34:	78030478 	.word	0x78030478
    2b38:	2007      	.short	0x2007
    2b3a:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2b3c:	7823      	ldrb	r3, [r4, #0]
    2b3e:	441c      	add	r4, r3
    2b40:	e7ec      	b.n	2b1c <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    2b42:	78e3      	ldrb	r3, [r4, #3]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d1f9      	bne.n	2b3c <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    2b48:	78a3      	ldrb	r3, [r4, #2]
    2b4a:	b183      	cbz	r3, 2b6e <usb_fix_descriptor+0x66>
			numof_ifaces++;
    2b4c:	f109 0901 	add.w	r9, r9, #1
    2b50:	fa5f f989 	uxtb.w	r9, r9
			break;
    2b54:	e7f2      	b.n	2b3c <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    2b56:	6872      	ldr	r2, [r6, #4]
    2b58:	4294      	cmp	r4, r2
    2b5a:	f000 809d 	beq.w	2c98 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b5e:	3624      	adds	r6, #36	; 0x24
    2b60:	429e      	cmp	r6, r3
    2b62:	d3f8      	bcc.n	2b56 <usb_fix_descriptor+0x4e>
					return -1;
    2b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    2b68:	b005      	add	sp, #20
    2b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b6e:	4e4f      	ldr	r6, [pc, #316]	; (2cac <usb_fix_descriptor+0x1a4>)
    2b70:	4b4f      	ldr	r3, [pc, #316]	; (2cb0 <usb_fix_descriptor+0x1a8>)
    2b72:	e7f5      	b.n	2b60 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    2b74:	2e00      	cmp	r6, #0
    2b76:	d0f5      	beq.n	2b64 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2b78:	2300      	movs	r3, #0
    2b7a:	2101      	movs	r1, #1
    2b7c:	7f32      	ldrb	r2, [r6, #28]
    2b7e:	4293      	cmp	r3, r2
    2b80:	d2f0      	bcs.n	2b64 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    2b82:	6a32      	ldr	r2, [r6, #32]
    2b84:	78a7      	ldrb	r7, [r4, #2]
    2b86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2b8a:	7910      	ldrb	r0, [r2, #4]
    2b8c:	4287      	cmp	r7, r0
    2b8e:	d001      	beq.n	2b94 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2b90:	3301      	adds	r3, #1
    2b92:	e7f3      	b.n	2b7c <usb_fix_descriptor+0x74>
    2b94:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2b96:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2b98:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2b9c:	f000 0003 	and.w	r0, r0, #3
    2ba0:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2ba4:	7920      	ldrb	r0, [r4, #4]
    2ba6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2baa:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2bae:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2bb2:	2800      	cmp	r0, #0
    2bb4:	fa5f f887 	uxtb.w	r8, r7
    2bb8:	da28      	bge.n	2c0c <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2bba:	f107 0010 	add.w	r0, r7, #16
    2bbe:	fa01 f000 	lsl.w	r0, r1, r0
    2bc2:	ea10 0f0b 	tst.w	r0, fp
    2bc6:	d129      	bne.n	2c1c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2bc8:	f068 007f 	orn	r0, r8, #127	; 0x7f
    2bcc:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2bd0:	a802      	add	r0, sp, #8
    2bd2:	e9cd 3200 	strd	r3, r2, [sp]
    2bd6:	f006 fe9e 	bl	9916 <usb_dc_ep_check_cap>
    2bda:	e9dd 3200 	ldrd	r3, r2, [sp]
    2bde:	2101      	movs	r1, #1
    2be0:	b9e0      	cbnz	r0, 2c1c <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2be2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2be6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2be8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2bec:	bf1c      	itt	ne
    2bee:	f108 0810 	addne.w	r8, r8, #16
    2bf2:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2bf6:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2bf8:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    2bfa:	bf15      	itete	ne
    2bfc:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
    2c00:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    2c02:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
    2c06:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    2c0a:	e797      	b.n	2b3c <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    2c0c:	fa01 f007 	lsl.w	r0, r1, r7
    2c10:	ea10 0f0b 	tst.w	r0, fp
    2c14:	d102      	bne.n	2c1c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
    2c16:	f88d 8008 	strb.w	r8, [sp, #8]
    2c1a:	e7d9      	b.n	2bd0 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2c1c:	3701      	adds	r7, #1
    2c1e:	2f10      	cmp	r7, #16
    2c20:	d1b9      	bne.n	2b96 <usb_fix_descriptor+0x8e>
    2c22:	e7b5      	b.n	2b90 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2c24:	2d03      	cmp	r5, #3
    2c26:	d11d      	bne.n	2c64 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2c28:	f7ff ff2a 	bl	2a80 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2c2c:	4607      	mov	r7, r0
    2c2e:	b168      	cbz	r0, 2c4c <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
    2c30:	f7fd ffe8 	bl	c04 <strlen>
	if (!runtime_sn_len) {
    2c34:	4680      	mov	r8, r0
    2c36:	b148      	cbz	r0, 2c4c <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2c38:	481e      	ldr	r0, [pc, #120]	; (2cb4 <usb_fix_descriptor+0x1ac>)
    2c3a:	f7fd ffe3 	bl	c04 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2c3e:	4580      	cmp	r8, r0
    2c40:	d104      	bne.n	2c4c <usb_fix_descriptor+0x144>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2c42:	4642      	mov	r2, r8
    2c44:	4639      	mov	r1, r7
    2c46:	1ca0      	adds	r0, r4, #2
    2c48:	f007 fed0 	bl	a9ec <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2c4c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2c4e:	f06f 0102 	mvn.w	r1, #2
    2c52:	18e2      	adds	r2, r4, r3
    2c54:	1b09      	subs	r1, r1, r4
    2c56:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    2c5a:	42d1      	cmn	r1, r2
    2c5c:	d513      	bpl.n	2c86 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
    2c5e:	3501      	adds	r5, #1
    2c60:	b2ed      	uxtb	r5, r5
			break;
    2c62:	e76b      	b.n	2b3c <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
    2c64:	2d00      	cmp	r5, #0
    2c66:	d1f1      	bne.n	2c4c <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
    2c68:	f1ba 0f00 	cmp.w	sl, #0
    2c6c:	f43f af7a 	beq.w	2b64 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2c70:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2c74:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    2c78:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2c7c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2c80:	f88a 9004 	strb.w	r9, [sl, #4]
    2c84:	e7eb      	b.n	2c5e <usb_fix_descriptor+0x156>
		buf[i] = 0U;
    2c86:	f04f 0000 	mov.w	r0, #0
    2c8a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2c8e:	f813 0901 	ldrb.w	r0, [r3], #-1
    2c92:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2c96:	e7e0      	b.n	2c5a <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
    2c98:	68b3      	ldr	r3, [r6, #8]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	f43f af56 	beq.w	2b4c <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    2ca0:	4649      	mov	r1, r9
    2ca2:	4620      	mov	r0, r4
    2ca4:	4798      	blx	r3
    2ca6:	e751      	b.n	2b4c <usb_fix_descriptor+0x44>
    2ca8:	2000033d 	.word	0x2000033d
    2cac:	20000340 	.word	0x20000340
    2cb0:	20000364 	.word	0x20000364
    2cb4:	0000b134 	.word	0x0000b134

00002cb8 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2cb8:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2cba:	4804      	ldr	r0, [pc, #16]	; (2ccc <usb_get_device_descriptor+0x14>)
    2cbc:	f7ff ff24 	bl	2b08 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
    2cc0:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    2cc2:	4802      	ldr	r0, [pc, #8]	; (2ccc <usb_get_device_descriptor+0x14>)
    2cc4:	bf18      	it	ne
    2cc6:	2000      	movne	r0, #0
    2cc8:	bd08      	pop	{r3, pc}
    2cca:	bf00      	nop
    2ccc:	20000278 	.word	0x20000278

00002cd0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2cd0:	b510      	push	{r4, lr}
    2cd2:	4b09      	ldr	r3, [pc, #36]	; (2cf8 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2cd4:	2100      	movs	r1, #0
    2cd6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2cd8:	781c      	ldrb	r4, [r3, #0]
    2cda:	4284      	cmp	r4, r0
    2cdc:	d104      	bne.n	2ce8 <usb_ep_get_transfer+0x18>
    2cde:	685c      	ldr	r4, [r3, #4]
    2ce0:	b114      	cbz	r4, 2ce8 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2ce2:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2ce6:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ce8:	3101      	adds	r1, #1
    2cea:	2904      	cmp	r1, #4
    2cec:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2cf0:	d1f2      	bne.n	2cd8 <usb_ep_get_transfer+0x8>
	return NULL;
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7f7      	b.n	2ce6 <usb_ep_get_transfer+0x16>
    2cf6:	bf00      	nop
    2cf8:	20002e40 	.word	0x20002e40

00002cfc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2d00:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    2d04:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2d08:	3310      	adds	r3, #16
{
    2d0a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2d0c:	d110      	bne.n	2d30 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2d0e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2d10:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2d14:	0799      	lsls	r1, r3, #30
    2d16:	d53c      	bpl.n	2d92 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2d18:	bb02      	cbnz	r2, 2d5c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2d1a:	f013 0304 	ands.w	r3, r3, #4
    2d1e:	d104      	bne.n	2d2a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2d20:	461a      	mov	r2, r3
    2d22:	4619      	mov	r1, r3
    2d24:	4630      	mov	r0, r6
    2d26:	f006 fc79 	bl	961c <usb_write>
			}
			trans->status = 0;
    2d2a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2d2c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2d30:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d34:	3310      	adds	r3, #16
    2d36:	d00e      	beq.n	2d56 <usb_transfer_work+0x5a>
    2d38:	f854 5c18 	ldr.w	r5, [r4, #-24]
    2d3c:	b15d      	cbz	r5, 2d56 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2d3e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2d42:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2d46:	f007 fbb2 	bl	a4ae <k_is_in_isr>
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d04c      	beq.n	2de8 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2d4e:	482e      	ldr	r0, [pc, #184]	; (2e08 <usb_transfer_work+0x10c>)
    2d50:	4621      	mov	r1, r4
    2d52:	f007 fc6b 	bl	a62c <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2d56:	b002      	add	sp, #8
    2d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2d5c:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2d60:	ab01      	add	r3, sp, #4
    2d62:	4630      	mov	r0, r6
    2d64:	f006 fc5a 	bl	961c <usb_write>
		if (ret) {
    2d68:	b110      	cbz	r0, 2d70 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2d6a:	f06f 0315 	mvn.w	r3, #21
    2d6e:	e7dd      	b.n	2d2c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    2d70:	9a01      	ldr	r2, [sp, #4]
    2d72:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2d76:	4413      	add	r3, r2
    2d78:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2d7c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2d80:	1a9b      	subs	r3, r3, r2
    2d82:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2d86:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2d8a:	4413      	add	r3, r2
    2d8c:	f844 3c1c 	str.w	r3, [r4, #-28]
    2d90:	e7ce      	b.n	2d30 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2d92:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2d96:	ab01      	add	r3, sp, #4
    2d98:	4630      	mov	r0, r6
    2d9a:	f001 fcd5 	bl	4748 <usb_dc_ep_read_wait>
		if (ret) {
    2d9e:	2800      	cmp	r0, #0
    2da0:	d1e3      	bne.n	2d6a <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2da2:	9d01      	ldr	r5, [sp, #4]
    2da4:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2da8:	442b      	add	r3, r5
    2daa:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2dae:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2db2:	1b5b      	subs	r3, r3, r5
    2db4:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2db8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2dbc:	442b      	add	r3, r5
    2dbe:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2dc2:	2d00      	cmp	r5, #0
    2dc4:	d0b1      	beq.n	2d2a <usb_transfer_work+0x2e>
    2dc6:	4630      	mov	r0, r6
    2dc8:	f001 fd62 	bl	4890 <usb_dc_ep_mps>
    2dcc:	fbb5 f3f0 	udiv	r3, r5, r0
    2dd0:	fb03 5510 	mls	r5, r3, r0, r5
    2dd4:	2d00      	cmp	r5, #0
    2dd6:	d1a8      	bne.n	2d2a <usb_transfer_work+0x2e>
    2dd8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d0a4      	beq.n	2d2a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2de0:	4630      	mov	r0, r6
    2de2:	f001 fcf9 	bl	47d8 <usb_dc_ep_read_continue>
    2de6:	e7a3      	b.n	2d30 <usb_transfer_work+0x34>
		trans->cb = NULL;
    2de8:	f844 0c18 	str.w	r0, [r4, #-24]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2dec:	f1a4 0010 	sub.w	r0, r4, #16
    2df0:	f005 f818 	bl	7e24 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    2df4:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2df8:	338c      	adds	r3, #140	; 0x8c
    2dfa:	d0ac      	beq.n	2d56 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    2dfc:	4642      	mov	r2, r8
    2dfe:	4639      	mov	r1, r7
    2e00:	4630      	mov	r0, r6
    2e02:	47a8      	blx	r5
    2e04:	e7a7      	b.n	2d56 <usb_transfer_work+0x5a>
    2e06:	bf00      	nop
    2e08:	20000368 	.word	0x20000368

00002e0c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e0c:	1e4b      	subs	r3, r1, #1
    2e0e:	2b01      	cmp	r3, #1
{
    2e10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e12:	4606      	mov	r6, r0
    2e14:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e16:	d80f      	bhi.n	2e38 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2e18:	f7ff ff5a 	bl	2cd0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2e1c:	4604      	mov	r4, r0
    2e1e:	b968      	cbnz	r0, 2e3c <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2e20:	2d01      	cmp	r5, #1
    2e22:	d109      	bne.n	2e38 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2e24:	ab01      	add	r3, sp, #4
    2e26:	2201      	movs	r2, #1
    2e28:	f10d 0103 	add.w	r1, sp, #3
    2e2c:	4630      	mov	r0, r6
    2e2e:	f001 fc8b 	bl	4748 <usb_dc_ep_read_wait>
			} while (bytes);
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d1f5      	bne.n	2e24 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2e38:	b002      	add	sp, #8
    2e3a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e3c:	f007 fb37 	bl	a4ae <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e40:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e44:	b108      	cbz	r0, 2e4a <usb_transfer_ep_callback+0x3e>
    2e46:	2d01      	cmp	r5, #1
    2e48:	d105      	bne.n	2e56 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2e4a:	4608      	mov	r0, r1
}
    2e4c:	b002      	add	sp, #8
    2e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2e52:	f7ff bf53 	b.w	2cfc <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e56:	4803      	ldr	r0, [pc, #12]	; (2e64 <usb_transfer_ep_callback+0x58>)
}
    2e58:	b002      	add	sp, #8
    2e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e5e:	f007 bbe5 	b.w	a62c <k_work_submit_to_queue>
    2e62:	bf00      	nop
    2e64:	20000368 	.word	0x20000368

00002e68 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e6c:	4606      	mov	r6, r0
    2e6e:	9101      	str	r1, [sp, #4]
    2e70:	4615      	mov	r5, r2
    2e72:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2e74:	f006 fc1a 	bl	96ac <usb_transfer_is_busy>
    2e78:	4604      	mov	r4, r0
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d15c      	bne.n	2f38 <usb_transfer+0xd0>
    2e7e:	f04f 0320 	mov.w	r3, #32
    2e82:	f3ef 8a11 	mrs	sl, BASEPRI
    2e86:	f383 8812 	msr	BASEPRI_MAX, r3
    2e8a:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e8e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2f40 <usb_transfer+0xd8>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2e92:	01a7      	lsls	r7, r4, #6
	return z_impl_k_sem_take(sem, timeout);
    2e94:	2200      	movs	r2, #0
    2e96:	2300      	movs	r3, #0
    2e98:	4658      	mov	r0, fp
    2e9a:	f004 ffe3 	bl	7e64 <z_impl_k_sem_take>
    2e9e:	b968      	cbnz	r0, 2ebc <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2ea0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2f44 <usb_transfer+0xdc>
    2ea4:	eb09 0407 	add.w	r4, r9, r7
    2ea8:	6863      	ldr	r3, [r4, #4]
    2eaa:	f113 0f10 	cmn.w	r3, #16
    2eae:	d114      	bne.n	2eda <usb_transfer+0x72>
    2eb0:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2eb2:	4658      	mov	r0, fp
    2eb4:	f004 ffb6 	bl	7e24 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	e006      	b.n	2eca <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ebc:	3401      	adds	r4, #1
    2ebe:	2c04      	cmp	r4, #4
    2ec0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2ec4:	d1e5      	bne.n	2e92 <usb_transfer+0x2a>
		ret = -ENOMEM;
    2ec6:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2eca:	f38a 8811 	msr	BASEPRI, sl
    2ece:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	b003      	add	sp, #12
    2ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2eda:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2edc:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2ede:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ee4:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2ee8:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2eea:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
    2eee:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2ef2:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2ef4:	4630      	mov	r0, r6
	trans->ep = ep;
    2ef6:	f809 6007 	strb.w	r6, [r9, r7]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2efa:	f001 fcc9 	bl	4890 <usb_dc_ep_mps>
    2efe:	b158      	cbz	r0, 2f18 <usb_transfer+0xb0>
    2f00:	4630      	mov	r0, r6
    2f02:	f001 fcc5 	bl	4890 <usb_dc_ep_mps>
    2f06:	fbb5 f2f0 	udiv	r2, r5, r0
    2f0a:	fb02 5510 	mls	r5, r2, r0, r5
    2f0e:	b11d      	cbz	r5, 2f18 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2f10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2f12:	f043 0304 	orr.w	r3, r3, #4
    2f16:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2f18:	f018 0f02 	tst.w	r8, #2
    2f1c:	d007      	beq.n	2f2e <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f1e:	372c      	adds	r7, #44	; 0x2c
    2f20:	4809      	ldr	r0, [pc, #36]	; (2f48 <usb_transfer+0xe0>)
    2f22:	eb09 0107 	add.w	r1, r9, r7
    2f26:	f007 fb81 	bl	a62c <k_work_submit_to_queue>
	int i, key, ret = 0;
    2f2a:	2300      	movs	r3, #0
    2f2c:	e7cd      	b.n	2eca <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2f2e:	4630      	mov	r0, r6
    2f30:	f001 fc52 	bl	47d8 <usb_dc_ep_read_continue>
    2f34:	4603      	mov	r3, r0
    2f36:	e7c8      	b.n	2eca <usb_transfer+0x62>
		return -EBUSY;
    2f38:	f06f 030f 	mvn.w	r3, #15
    2f3c:	e7c9      	b.n	2ed2 <usb_transfer+0x6a>
    2f3e:	bf00      	nop
    2f40:	20002e5c 	.word	0x20002e5c
    2f44:	20002e40 	.word	0x20002e40
    2f48:	20000368 	.word	0x20000368

00002f4c <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2f4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2f4e:	f04f 0320 	mov.w	r3, #32
    2f52:	f3ef 8411 	mrs	r4, BASEPRI
    2f56:	f383 8812 	msr	BASEPRI_MAX, r3
    2f5a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2f5e:	f7ff feb7 	bl	2cd0 <usb_ep_get_transfer>
	if (!trans) {
    2f62:	b150      	cbz	r0, 2f7a <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2f64:	6843      	ldr	r3, [r0, #4]
    2f66:	3310      	adds	r3, #16
    2f68:	d107      	bne.n	2f7a <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2f6a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    2f6e:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f70:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2f74:	4803      	ldr	r0, [pc, #12]	; (2f84 <usb_cancel_transfer+0x38>)
    2f76:	f007 fb59 	bl	a62c <k_work_submit_to_queue>
	__asm__ volatile(
    2f7a:	f384 8811 	msr	BASEPRI, r4
    2f7e:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2f82:	bd10      	pop	{r4, pc}
    2f84:	20000368 	.word	0x20000368

00002f88 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f8c:	4c10      	ldr	r4, [pc, #64]	; (2fd0 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f8e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2fd4 <usb_cancel_transfers+0x4c>
{
    2f92:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    2f94:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    2f98:	f04f 0320 	mov.w	r3, #32
    2f9c:	f3ef 8611 	mrs	r6, BASEPRI
    2fa0:	f383 8812 	msr	BASEPRI_MAX, r3
    2fa4:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    2fa8:	6863      	ldr	r3, [r4, #4]
    2faa:	3310      	adds	r3, #16
    2fac:	d105      	bne.n	2fba <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fae:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2fb2:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    2fb4:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fb6:	f007 fb39 	bl	a62c <k_work_submit_to_queue>
	__asm__ volatile(
    2fba:	f386 8811 	msr	BASEPRI, r6
    2fbe:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2fc2:	3d01      	subs	r5, #1
    2fc4:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2fc8:	d1e6      	bne.n	2f98 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fce:	bf00      	nop
    2fd0:	20002e40 	.word	0x20002e40
    2fd4:	20000368 	.word	0x20000368

00002fd8 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2fd8:	b570      	push	{r4, r5, r6, lr}
    2fda:	4c0a      	ldr	r4, [pc, #40]	; (3004 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2fdc:	4e0a      	ldr	r6, [pc, #40]	; (3008 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2fde:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2fe0:	4631      	mov	r1, r6
    2fe2:	4620      	mov	r0, r4
    2fe4:	f007 fb19 	bl	a61a <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2fe8:	2201      	movs	r2, #1
    2fea:	f1a4 0010 	sub.w	r0, r4, #16
    2fee:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ff0:	3501      	adds	r5, #1
    2ff2:	f007 faf4 	bl	a5de <z_impl_k_sem_init>
    2ff6:	2d04      	cmp	r5, #4
    2ff8:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2ffc:	d1f0      	bne.n	2fe0 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2ffe:	2000      	movs	r0, #0
    3000:	bd70      	pop	{r4, r5, r6, pc}
    3002:	bf00      	nop
    3004:	20002e6c 	.word	0x20002e6c
    3008:	00002cfd 	.word	0x00002cfd

0000300c <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    300c:	b508      	push	{r3, lr}
    300e:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3010:	4803      	ldr	r0, [pc, #12]	; (3020 <cdc_acm_int_in+0x14>)
    3012:	f006 fb35 	bl	9680 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3016:	b110      	cbz	r0, 301e <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    3018:	2301      	movs	r3, #1
    301a:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    301e:	bd08      	pop	{r3, pc}
    3020:	20002f40 	.word	0x20002f40

00003024 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3024:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    3026:	2301      	movs	r3, #1
    3028:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    302c:	680b      	ldr	r3, [r1, #0]
    302e:	b133      	cbz	r3, 303e <cdc_acm_irq_rx_enable+0x1a>
    3030:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    3034:	b11b      	cbz	r3, 303e <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3036:	4802      	ldr	r0, [pc, #8]	; (3040 <cdc_acm_irq_rx_enable+0x1c>)
    3038:	3108      	adds	r1, #8
    303a:	f007 baf7 	b.w	a62c <k_work_submit_to_queue>
	}
}
    303e:	4770      	bx	lr
    3040:	20000368 	.word	0x20000368

00003044 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3044:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    3046:	2301      	movs	r3, #1
    3048:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    304c:	680b      	ldr	r3, [r1, #0]
    304e:	b133      	cbz	r3, 305e <cdc_acm_irq_tx_enable+0x1a>
    3050:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    3054:	b11b      	cbz	r3, 305e <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3056:	4802      	ldr	r0, [pc, #8]	; (3060 <cdc_acm_irq_tx_enable+0x1c>)
    3058:	3108      	adds	r1, #8
    305a:	f007 bae7 	b.w	a62c <k_work_submit_to_queue>
}
    305e:	4770      	bx	lr
    3060:	20000368 	.word	0x20000368

00003064 <cdc_acm_fifo_fill>:
{
    3064:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3066:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    3068:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    306c:	b170      	cbz	r0, 308c <cdc_acm_fifo_fill+0x28>
    306e:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    3072:	b963      	cbnz	r3, 308e <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    3074:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3078:	6f28      	ldr	r0, [r5, #112]	; 0x70
    307a:	f006 fa46 	bl	950a <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    307e:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3082:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3084:	4803      	ldr	r0, [pc, #12]	; (3094 <cdc_acm_fifo_fill+0x30>)
    3086:	f007 fad1 	bl	a62c <k_work_submit_to_queue>
	return wrote;
    308a:	4620      	mov	r0, r4
}
    308c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    308e:	2000      	movs	r0, #0
    3090:	e7fc      	b.n	308c <cdc_acm_fifo_fill+0x28>
    3092:	bf00      	nop
    3094:	20000368 	.word	0x20000368

00003098 <cdc_acm_read_cb>:
{
    3098:	b573      	push	{r0, r1, r4, r5, r6, lr}
    309a:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    309c:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    30a0:	1e0a      	subs	r2, r1, #0
{
    30a2:	4605      	mov	r5, r0
	if (size <= 0) {
    30a4:	dd10      	ble.n	30c8 <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    30a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    30a8:	4631      	mov	r1, r6
    30aa:	f006 fa2e 	bl	950a <ring_buf_put>
	dev_data->rx_ready = true;
    30ae:	2301      	movs	r3, #1
    30b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    30b4:	6823      	ldr	r3, [r4, #0]
    30b6:	b13b      	cbz	r3, 30c8 <cdc_acm_read_cb+0x30>
    30b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    30bc:	b123      	cbz	r3, 30c8 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    30be:	4808      	ldr	r0, [pc, #32]	; (30e0 <cdc_acm_read_cb+0x48>)
    30c0:	f104 0108 	add.w	r1, r4, #8
    30c4:	f007 fab2 	bl	a62c <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    30c8:	4b06      	ldr	r3, [pc, #24]	; (30e4 <cdc_acm_read_cb+0x4c>)
    30ca:	9300      	str	r3, [sp, #0]
    30cc:	9401      	str	r4, [sp, #4]
    30ce:	2301      	movs	r3, #1
    30d0:	2240      	movs	r2, #64	; 0x40
    30d2:	4631      	mov	r1, r6
    30d4:	4628      	mov	r0, r5
    30d6:	f7ff fec7 	bl	2e68 <usb_transfer>
}
    30da:	b002      	add	sp, #8
    30dc:	bd70      	pop	{r4, r5, r6, pc}
    30de:	bf00      	nop
    30e0:	20000368 	.word	0x20000368
    30e4:	00003099 	.word	0x00003099

000030e8 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    30e8:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    30ea:	6904      	ldr	r4, [r0, #16]
{
    30ec:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    30f0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    30f4:	b18b      	cbz	r3, 311a <cdc_acm_poll_out+0x32>
    30f6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    30fa:	b973      	cbnz	r3, 311a <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    30fc:	f10d 0107 	add.w	r1, sp, #7
    3100:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    3102:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3106:	2201      	movs	r2, #1
    3108:	f006 f9ff 	bl	950a <ring_buf_put>
    310c:	4601      	mov	r1, r0
    310e:	b130      	cbz	r0, 311e <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3110:	480a      	ldr	r0, [pc, #40]	; (313c <cdc_acm_poll_out+0x54>)
    3112:	f104 0118 	add.w	r1, r4, #24
    3116:	f007 fa89 	bl	a62c <k_work_submit_to_queue>
}
    311a:	b002      	add	sp, #8
    311c:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    311e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3120:	2201      	movs	r2, #1
    3122:	f006 fa5a 	bl	95da <ring_buf_get>
    3126:	2800      	cmp	r0, #0
    3128:	d0f7      	beq.n	311a <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    312a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    312c:	2201      	movs	r2, #1
    312e:	f10d 0107 	add.w	r1, sp, #7
    3132:	f006 f9ea 	bl	950a <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3136:	2800      	cmp	r0, #0
    3138:	d1ea      	bne.n	3110 <cdc_acm_poll_out+0x28>
    313a:	e7ee      	b.n	311a <cdc_acm_poll_out+0x32>
    313c:	20000368 	.word	0x20000368

00003140 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    3140:	2301      	movs	r3, #1
    3142:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3146:	6813      	ldr	r3, [r2, #0]
{
    3148:	b510      	push	{r4, lr}
    314a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    314c:	b13b      	cbz	r3, 315e <cdc_acm_write_cb+0x1e>
    314e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    3152:	b123      	cbz	r3, 315e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3154:	4808      	ldr	r0, [pc, #32]	; (3178 <cdc_acm_write_cb+0x38>)
    3156:	f102 0108 	add.w	r1, r2, #8
    315a:	f007 fa67 	bl	a62c <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    315e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3160:	f006 f979 	bl	9456 <ring_buf_is_empty>
    3164:	b930      	cbnz	r0, 3174 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3166:	f104 0118 	add.w	r1, r4, #24
    316a:	4803      	ldr	r0, [pc, #12]	; (3178 <cdc_acm_write_cb+0x38>)
}
    316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3170:	f007 ba5c 	b.w	a62c <k_work_submit_to_queue>
}
    3174:	bd10      	pop	{r4, pc}
    3176:	bf00      	nop
    3178:	20000368 	.word	0x20000368

0000317c <tx_work_handler>:
{
    317c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    317e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    3180:	685b      	ldr	r3, [r3, #4]
    3182:	6a1b      	ldr	r3, [r3, #32]
    3184:	7d1e      	ldrb	r6, [r3, #20]
{
    3186:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    3188:	4630      	mov	r0, r6
    318a:	f006 fa8f 	bl	96ac <usb_transfer_is_busy>
    318e:	b9d0      	cbnz	r0, 31c6 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    3190:	6da8      	ldr	r0, [r5, #88]	; 0x58
    3192:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3196:	a903      	add	r1, sp, #12
    3198:	f006 f9d6 	bl	9548 <ring_buf_get_claim>
	if (!len) {
    319c:	4604      	mov	r4, r0
    319e:	b190      	cbz	r0, 31c6 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    31a0:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    31a2:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    31a6:	bf08      	it	eq
    31a8:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    31ac:	9301      	str	r3, [sp, #4]
    31ae:	4b07      	ldr	r3, [pc, #28]	; (31cc <tx_work_handler+0x50>)
    31b0:	9903      	ldr	r1, [sp, #12]
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	4622      	mov	r2, r4
    31b6:	2302      	movs	r3, #2
    31b8:	4630      	mov	r0, r6
    31ba:	f7ff fe55 	bl	2e68 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    31be:	6da8      	ldr	r0, [r5, #88]	; 0x58
    31c0:	4621      	mov	r1, r4
    31c2:	f006 f9ec 	bl	959e <ring_buf_get_finish>
}
    31c6:	b004      	add	sp, #16
    31c8:	bd70      	pop	{r4, r5, r6, pc}
    31ca:	bf00      	nop
    31cc:	00003141 	.word	0x00003141

000031d0 <cdc_acm_class_handle_req>:
{
    31d0:	b570      	push	{r4, r5, r6, lr}
    31d2:	4604      	mov	r4, r0
    31d4:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    31d6:	7901      	ldrb	r1, [r0, #4]
    31d8:	4815      	ldr	r0, [pc, #84]	; (3230 <cdc_acm_class_handle_req+0x60>)
{
    31da:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    31dc:	f006 fa42 	bl	9664 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    31e0:	b310      	cbz	r0, 3228 <cdc_acm_class_handle_req+0x58>
	if (usb_reqtype_is_to_device(setup)) {
    31e2:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    31e6:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    31e8:	2a00      	cmp	r2, #0
    31ea:	db16      	blt.n	321a <cdc_acm_class_handle_req+0x4a>
		switch (setup->bRequest) {
    31ec:	2b20      	cmp	r3, #32
    31ee:	d004      	beq.n	31fa <cdc_acm_class_handle_req+0x2a>
    31f0:	2b22      	cmp	r3, #34	; 0x22
    31f2:	d00e      	beq.n	3212 <cdc_acm_class_handle_req+0x42>
	return -ENOTSUP;
    31f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    31f8:	e00a      	b.n	3210 <cdc_acm_class_handle_req+0x40>
    31fa:	682b      	ldr	r3, [r5, #0]
    31fc:	681a      	ldr	r2, [r3, #0]
    31fe:	f840 2c0c 	str.w	r2, [r0, #-12]
    3202:	889a      	ldrh	r2, [r3, #4]
    3204:	f820 2c08 	strh.w	r2, [r0, #-8]
    3208:	799b      	ldrb	r3, [r3, #6]
    320a:	f800 3c06 	strb.w	r3, [r0, #-6]
			return 0;
    320e:	2000      	movs	r0, #0
}
    3210:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    3212:	8863      	ldrh	r3, [r4, #2]
    3214:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    3218:	e7f9      	b.n	320e <cdc_acm_class_handle_req+0x3e>
		if (setup->bRequest == GET_LINE_CODING) {
    321a:	2b21      	cmp	r3, #33	; 0x21
    321c:	d1ea      	bne.n	31f4 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    321e:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    3220:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    3222:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    3224:	6033      	str	r3, [r6, #0]
    3226:	e7f2      	b.n	320e <cdc_acm_class_handle_req+0x3e>
		return -ENODEV;
    3228:	f06f 0012 	mvn.w	r0, #18
    322c:	e7f0      	b.n	3210 <cdc_acm_class_handle_req+0x40>
    322e:	bf00      	nop
    3230:	20002f40 	.word	0x20002f40

00003234 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3234:	4a0b      	ldr	r2, [pc, #44]	; (3264 <cdc_acm_reset_port+0x30>)
{
    3236:	4603      	mov	r3, r0
	dev_data->configured = false;
    3238:	2100      	movs	r1, #0
    323a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    323e:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3240:	6810      	ldr	r0, [r2, #0]
    3242:	6758      	str	r0, [r3, #116]	; 0x74
    3244:	8890      	ldrh	r0, [r2, #4]
    3246:	7992      	ldrb	r2, [r2, #6]
    3248:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    324c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    3250:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    3254:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3258:	2240      	movs	r2, #64	; 0x40
    325a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    325e:	f007 bbe6 	b.w	aa2e <memset>
    3262:	bf00      	nop
    3264:	0000ad70 	.word	0x0000ad70

00003268 <cdc_acm_dev_status_cb>:
{
    3268:	b538      	push	{r3, r4, r5, lr}
    326a:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    326c:	4601      	mov	r1, r0
    326e:	4824      	ldr	r0, [pc, #144]	; (3300 <cdc_acm_dev_status_cb+0x98>)
    3270:	f006 f9ec 	bl	964c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3274:	4604      	mov	r4, r0
    3276:	b380      	cbz	r0, 32da <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    3278:	4602      	mov	r2, r0
	switch (status) {
    327a:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    327c:	f852 3980 	ldr.w	r3, [r2], #-128
    3280:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    3282:	2905      	cmp	r1, #5
    3284:	d829      	bhi.n	32da <cdc_acm_dev_status_cb+0x72>
    3286:	e8df f001 	tbb	[pc, r1]
    328a:	2820      	.short	0x2820
    328c:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    3290:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    3294:	b931      	cbnz	r1, 32a4 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    3296:	6a1b      	ldr	r3, [r3, #32]
    3298:	7b18      	ldrb	r0, [r3, #12]
    329a:	f7ff fefd 	bl	3098 <cdc_acm_read_cb>
			dev_data->configured = true;
    329e:	2301      	movs	r3, #1
    32a0:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    32a4:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    32a8:	b9bb      	cbnz	r3, 32da <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    32aa:	2301      	movs	r3, #1
    32ac:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    32b0:	f854 3c80 	ldr.w	r3, [r4, #-128]
    32b4:	b18b      	cbz	r3, 32da <cdc_acm_dev_status_cb+0x72>
    32b6:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    32ba:	b173      	cbz	r3, 32da <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    32bc:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    32c0:	4810      	ldr	r0, [pc, #64]	; (3304 <cdc_acm_dev_status_cb+0x9c>)
}
    32c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    32c6:	f007 b9b1 	b.w	a62c <k_work_submit_to_queue>
}
    32ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    32ce:	4610      	mov	r0, r2
    32d0:	f7ff bfb0 	b.w	3234 <cdc_acm_reset_port>
		dev_data->suspended = true;
    32d4:	2301      	movs	r3, #1
    32d6:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    32da:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    32dc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    32e0:	2900      	cmp	r1, #0
    32e2:	d0fa      	beq.n	32da <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
    32e4:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    32e8:	2100      	movs	r1, #0
    32ea:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    32ee:	2800      	cmp	r0, #0
    32f0:	d0f3      	beq.n	32da <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    32f2:	6a1b      	ldr	r3, [r3, #32]
    32f4:	7b18      	ldrb	r0, [r3, #12]
}
    32f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    32fa:	f7ff becd 	b.w	3098 <cdc_acm_read_cb>
    32fe:	bf00      	nop
    3300:	20002f40 	.word	0x20002f40
    3304:	20000368 	.word	0x20000368

00003308 <cdc_acm_init>:
{
    3308:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    330a:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    330c:	2300      	movs	r3, #0
    330e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3312:	4b0c      	ldr	r3, [pc, #48]	; (3344 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    3314:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    3318:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    331a:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    331e:	b969      	cbnz	r1, 333c <cdc_acm_init+0x34>
	list->head = node;
    3320:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    3324:	f104 0008 	add.w	r0, r4, #8
    3328:	4907      	ldr	r1, [pc, #28]	; (3348 <cdc_acm_init+0x40>)
    332a:	f007 f976 	bl	a61a <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    332e:	f104 0018 	add.w	r0, r4, #24
    3332:	4906      	ldr	r1, [pc, #24]	; (334c <cdc_acm_init+0x44>)
    3334:	f007 f971 	bl	a61a <k_work_init>
}
    3338:	2000      	movs	r0, #0
    333a:	bd10      	pop	{r4, pc}
	parent->next = child;
    333c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    333e:	605a      	str	r2, [r3, #4]
}
    3340:	e7f0      	b.n	3324 <cdc_acm_init+0x1c>
    3342:	bf00      	nop
    3344:	20002f40 	.word	0x20002f40
    3348:	000096d7 	.word	0x000096d7
    334c:	0000317d 	.word	0x0000317d

00003350 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    3350:	b530      	push	{r4, r5, lr}
    3352:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    3354:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3356:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    3358:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    335c:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    335e:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    3360:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    3364:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    3366:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    336a:	2002      	movs	r0, #2
    336c:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3370:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    3372:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    3376:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    337a:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    337c:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3380:	220a      	movs	r2, #10
    3382:	a901      	add	r1, sp, #4
    3384:	f006 f94a 	bl	961c <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3388:	4c05      	ldr	r4, [pc, #20]	; (33a0 <cdc_acm_send_notification.isra.0+0x50>)
    338a:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    338e:	b923      	cbnz	r3, 339a <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    3390:	2001      	movs	r0, #1
    3392:	f007 fa8f 	bl	a8b4 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3396:	3c01      	subs	r4, #1
    3398:	d1f7      	bne.n	338a <cdc_acm_send_notification.isra.0+0x3a>
}
    339a:	b005      	add	sp, #20
    339c:	bd30      	pop	{r4, r5, pc}
    339e:	bf00      	nop
    33a0:	000186a1 	.word	0x000186a1

000033a4 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    33a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    33a6:	4d09      	ldr	r5, [pc, #36]	; (33cc <z_usb_work_q_init+0x28>)
    33a8:	4909      	ldr	r1, [pc, #36]	; (33d0 <z_usb_work_q_init+0x2c>)
    33aa:	2400      	movs	r4, #0
    33ac:	9400      	str	r4, [sp, #0]
    33ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    33b6:	4628      	mov	r0, r5
    33b8:	f004 fe62 	bl	8080 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    33bc:	4905      	ldr	r1, [pc, #20]	; (33d4 <z_usb_work_q_init+0x30>)
    33be:	4628      	mov	r0, r5
    33c0:	f007 f87b 	bl	a4ba <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    33c4:	4620      	mov	r0, r4
    33c6:	b003      	add	sp, #12
    33c8:	bd30      	pop	{r4, r5, pc}
    33ca:	bf00      	nop
    33cc:	20000368 	.word	0x20000368
    33d0:	20003c10 	.word	0x20003c10
    33d4:	0000b14f 	.word	0x0000b14f

000033d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    33d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    33dc:	4605      	mov	r5, r0
	__asm__ volatile(
    33de:	f04f 0320 	mov.w	r3, #32
    33e2:	f3ef 8611 	mrs	r6, BASEPRI
    33e6:	f383 8812 	msr	BASEPRI_MAX, r3
    33ea:	f3bf 8f6f 	isb	sy
	return list->head;
    33ee:	4b0e      	ldr	r3, [pc, #56]	; (3428 <pm_state_notify+0x50>)
    33f0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    33f2:	b19c      	cbz	r4, 341c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    33f4:	4f0d      	ldr	r7, [pc, #52]	; (342c <pm_state_notify+0x54>)
    33f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3430 <pm_state_notify+0x58>
    33fa:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    33fe:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3402:	2d00      	cmp	r5, #0
    3404:	bf08      	it	eq
    3406:	4613      	moveq	r3, r2
		if (callback) {
    3408:	b12b      	cbz	r3, 3416 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    340a:	f898 2014 	ldrb.w	r2, [r8, #20]
    340e:	fb09 f202 	mul.w	r2, r9, r2
    3412:	5cb8      	ldrb	r0, [r7, r2]
    3414:	4798      	blx	r3
	return node->next;
    3416:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3418:	2c00      	cmp	r4, #0
    341a:	d1f0      	bne.n	33fe <pm_state_notify+0x26>
	__asm__ volatile(
    341c:	f386 8811 	msr	BASEPRI, r6
    3420:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3428:	20002f48 	.word	0x20002f48
    342c:	20002f50 	.word	0x20002f50
    3430:	20003b70 	.word	0x20003b70

00003434 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3434:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    3436:	2301      	movs	r3, #1
    3438:	f000 001f 	and.w	r0, r0, #31
    343c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3440:	4b07      	ldr	r3, [pc, #28]	; (3460 <atomic_clear_bit.constprop.0+0x2c>)
    3442:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3446:	43c0      	mvns	r0, r0
    3448:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    344c:	e853 2f00 	ldrex	r2, [r3]
    3450:	4002      	ands	r2, r0
    3452:	e843 2100 	strex	r1, r2, [r3]
    3456:	2900      	cmp	r1, #0
    3458:	d1f8      	bne.n	344c <atomic_clear_bit.constprop.0+0x18>
    345a:	f3bf 8f5b 	dmb	ish
}
    345e:	4770      	bx	lr
    3460:	20002f5c 	.word	0x20002f5c

00003464 <pm_system_resume>:

void pm_system_resume(void)
{
    3464:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    3466:	4b1d      	ldr	r3, [pc, #116]	; (34dc <pm_system_resume+0x78>)
    3468:	7d1c      	ldrb	r4, [r3, #20]
    346a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    346e:	f004 031f 	and.w	r3, r4, #31
    3472:	2201      	movs	r2, #1
    3474:	409a      	lsls	r2, r3
    3476:	4b1a      	ldr	r3, [pc, #104]	; (34e0 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3478:	0961      	lsrs	r1, r4, #5
{
    347a:	b085      	sub	sp, #20
    347c:	43d0      	mvns	r0, r2
    347e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3482:	e853 1f00 	ldrex	r1, [r3]
    3486:	ea01 0500 	and.w	r5, r1, r0
    348a:	e843 5c00 	strex	ip, r5, [r3]
    348e:	f1bc 0f00 	cmp.w	ip, #0
    3492:	d1f6      	bne.n	3482 <pm_system_resume+0x1e>
    3494:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3498:	4211      	tst	r1, r2
    349a:	d017      	beq.n	34cc <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    349c:	4d11      	ldr	r5, [pc, #68]	; (34e4 <pm_system_resume+0x80>)
    349e:	220c      	movs	r2, #12
    34a0:	fb02 5204 	mla	r2, r2, r4, r5
    34a4:	ca07      	ldmia	r2, {r0, r1, r2}
    34a6:	ab01      	add	r3, sp, #4
    34a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    34ac:	4a0e      	ldr	r2, [pc, #56]	; (34e8 <pm_system_resume+0x84>)
    34ae:	b17a      	cbz	r2, 34d0 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    34b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    34b4:	f006 f9f8 	bl	98a8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    34b8:	2000      	movs	r0, #0
    34ba:	f7ff ff8d 	bl	33d8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    34be:	230c      	movs	r3, #12
    34c0:	435c      	muls	r4, r3
    34c2:	192a      	adds	r2, r5, r4
    34c4:	2300      	movs	r3, #0
    34c6:	512b      	str	r3, [r5, r4]
    34c8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    34cc:	b005      	add	sp, #20
    34ce:	bd30      	pop	{r4, r5, pc}
    34d0:	f382 8811 	msr	BASEPRI, r2
    34d4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    34d8:	e7ee      	b.n	34b8 <pm_system_resume+0x54>
    34da:	bf00      	nop
    34dc:	20003b70 	.word	0x20003b70
    34e0:	20002f60 	.word	0x20002f60
    34e4:	20002f50 	.word	0x20002f50
    34e8:	000098a9 	.word	0x000098a9

000034ec <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    34ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    34f0:	4b35      	ldr	r3, [pc, #212]	; (35c8 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    34f2:	4a36      	ldr	r2, [pc, #216]	; (35cc <pm_system_suspend+0xe0>)
    34f4:	7d1c      	ldrb	r4, [r3, #20]
    34f6:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    34fa:	0963      	lsrs	r3, r4, #5
    34fc:	ea4f 0983 	mov.w	r9, r3, lsl #2
    3500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3504:	4d32      	ldr	r5, [pc, #200]	; (35d0 <pm_system_suspend+0xe4>)
    3506:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    350a:	f004 081f 	and.w	r8, r4, #31
    350e:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3512:	f013 0f01 	tst.w	r3, #1
{
    3516:	b085      	sub	sp, #20
    3518:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    351a:	d10a      	bne.n	3532 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    351c:	4601      	mov	r1, r0
    351e:	4620      	mov	r0, r4
    3520:	f000 f876 	bl	3610 <pm_policy_next_state>
		if (info != NULL) {
    3524:	b128      	cbz	r0, 3532 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    3526:	c807      	ldmia	r0, {r0, r1, r2}
    3528:	230c      	movs	r3, #12
    352a:	fb03 5304 	mla	r3, r3, r4, r5
    352e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3532:	230c      	movs	r3, #12
    3534:	4363      	muls	r3, r4
    3536:	18ea      	adds	r2, r5, r3
    3538:	5cee      	ldrb	r6, [r5, r3]
    353a:	b936      	cbnz	r6, 354a <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    353c:	4620      	mov	r0, r4
    353e:	f7ff ff79 	bl	3434 <atomic_clear_bit.constprop.0>
		ret = false;
    3542:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    3544:	b005      	add	sp, #20
    3546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    354a:	1c7b      	adds	r3, r7, #1
    354c:	d00f      	beq.n	356e <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    354e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3552:	4820      	ldr	r0, [pc, #128]	; (35d4 <pm_system_suspend+0xe8>)
    3554:	4a20      	ldr	r2, [pc, #128]	; (35d8 <pm_system_suspend+0xec>)
    3556:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    355a:	2100      	movs	r1, #0
    355c:	2300      	movs	r3, #0
    355e:	fbec 0106 	umlal	r0, r1, ip, r6
    3562:	f7fd f9c3 	bl	8ec <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3566:	2101      	movs	r1, #1
    3568:	1a38      	subs	r0, r7, r0
    356a:	f007 f985 	bl	a878 <z_set_timeout_expiry>
	k_sched_lock();
    356e:	f004 fe17 	bl	81a0 <k_sched_lock>
	pm_state_notify(true);
    3572:	2001      	movs	r0, #1
    3574:	f7ff ff30 	bl	33d8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3578:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    357c:	2301      	movs	r3, #1
    357e:	fa03 f808 	lsl.w	r8, r3, r8
    3582:	4b16      	ldr	r3, [pc, #88]	; (35dc <pm_system_suspend+0xf0>)
    3584:	4499      	add	r9, r3
    3586:	e859 3f00 	ldrex	r3, [r9]
    358a:	ea43 0308 	orr.w	r3, r3, r8
    358e:	e849 3200 	strex	r2, r3, [r9]
    3592:	2a00      	cmp	r2, #0
    3594:	d1f7      	bne.n	3586 <pm_system_suspend+0x9a>
    3596:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    359a:	230c      	movs	r3, #12
    359c:	fb03 5504 	mla	r5, r3, r4, r5
    35a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    35a4:	ab01      	add	r3, sp, #4
    35a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    35aa:	4a0d      	ldr	r2, [pc, #52]	; (35e0 <pm_system_suspend+0xf4>)
    35ac:	b11a      	cbz	r2, 35b6 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    35ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    35b2:	f006 f966 	bl	9882 <pm_power_state_set>
	pm_system_resume();
    35b6:	f7ff ff55 	bl	3464 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    35ba:	4620      	mov	r0, r4
    35bc:	f7ff ff3a 	bl	3434 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    35c0:	f004 ffbc 	bl	853c <k_sched_unlock>
	bool ret = true;
    35c4:	2001      	movs	r0, #1
    35c6:	e7bd      	b.n	3544 <pm_system_suspend+0x58>
    35c8:	20003b70 	.word	0x20003b70
    35cc:	20002f5c 	.word	0x20002f5c
    35d0:	20002f50 	.word	0x20002f50
    35d4:	000f423f 	.word	0x000f423f
    35d8:	000f4240 	.word	0x000f4240
    35dc:	20002f60 	.word	0x20002f60
    35e0:	00009883 	.word	0x00009883

000035e4 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    35e4:	4b05      	ldr	r3, [pc, #20]	; (35fc <pm_constraint_get+0x18>)
    35e6:	f3bf 8f5b 	dmb	ish
    35ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    35ee:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    35f2:	fab0 f080 	clz	r0, r0
    35f6:	0940      	lsrs	r0, r0, #5
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop
    35fc:	20002f64 	.word	0x20002f64

00003600 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3600:	b908      	cbnz	r0, 3606 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3602:	4b02      	ldr	r3, [pc, #8]	; (360c <pm_state_cpu_get_all+0xc>)
    3604:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3606:	2000      	movs	r0, #0
    3608:	4770      	bx	lr
    360a:	bf00      	nop
    360c:	0000addc 	.word	0x0000addc

00003610 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3614:	b085      	sub	sp, #20
    3616:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3618:	a903      	add	r1, sp, #12
    361a:	f7ff fff1 	bl	3600 <pm_state_cpu_get_all>
    361e:	f8df a074 	ldr.w	sl, [pc, #116]	; 3694 <pm_policy_next_state+0x84>
    3622:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3698 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3626:	1e44      	subs	r4, r0, #1
    3628:	b224      	sxth	r4, r4
    362a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    362e:	f04f 0900 	mov.w	r9, #0
    3632:	1c63      	adds	r3, r4, #1
    3634:	d104      	bne.n	3640 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    3636:	2500      	movs	r5, #0
}
    3638:	4628      	mov	r0, r5
    363a:	b005      	add	sp, #20
    363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3640:	9a03      	ldr	r2, [sp, #12]
    3642:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3646:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    364a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    364e:	f7ff ffc9 	bl	35e4 <pm_constraint_get>
    3652:	b1e0      	cbz	r0, 368e <pm_policy_next_state+0x7e>
    3654:	6868      	ldr	r0, [r5, #4]
    3656:	f04f 0b00 	mov.w	fp, #0
    365a:	46d4      	mov	ip, sl
    365c:	4659      	mov	r1, fp
    365e:	fbe0 c107 	umlal	ip, r1, r0, r7
    3662:	4642      	mov	r2, r8
    3664:	464b      	mov	r3, r9
    3666:	4660      	mov	r0, ip
    3668:	f7fd f940 	bl	8ec <__aeabi_uldivmod>
    366c:	9001      	str	r0, [sp, #4]
    366e:	68a8      	ldr	r0, [r5, #8]
    3670:	46d4      	mov	ip, sl
    3672:	4659      	mov	r1, fp
    3674:	fbe0 c107 	umlal	ip, r1, r0, r7
    3678:	4642      	mov	r2, r8
    367a:	464b      	mov	r3, r9
    367c:	4660      	mov	r0, ip
    367e:	f7fd f935 	bl	8ec <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    3682:	1c72      	adds	r2, r6, #1
    3684:	d0d8      	beq.n	3638 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    368a:	42b0      	cmp	r0, r6
    368c:	d9d4      	bls.n	3638 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    368e:	3c01      	subs	r4, #1
    3690:	b224      	sxth	r4, r4
    3692:	e7ce      	b.n	3632 <pm_policy_next_state+0x22>
    3694:	000f423f 	.word	0x000f423f
    3698:	000f4240 	.word	0x000f4240

0000369c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    369c:	4901      	ldr	r1, [pc, #4]	; (36a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    369e:	2210      	movs	r2, #16
	str	r2, [r1]
    36a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    36a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    36a4:	e000ed10 	.word	0xe000ed10

000036a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    36a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    36aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    36ac:	f380 8811 	msr	BASEPRI, r0
	isb
    36b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    36b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    36b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    36ba:	b662      	cpsie	i
	isb
    36bc:	f3bf 8f6f 	isb	sy

	bx	lr
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop

000036c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    36c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    36c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    36c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    36cc:	bf20      	wfe

	msr	BASEPRI, r0
    36ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    36d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop

000036d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    36d8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    36da:	2b00      	cmp	r3, #0
    36dc:	db08      	blt.n	36f0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36de:	2201      	movs	r2, #1
    36e0:	f000 001f 	and.w	r0, r0, #31
    36e4:	fa02 f000 	lsl.w	r0, r2, r0
    36e8:	095b      	lsrs	r3, r3, #5
    36ea:	4a02      	ldr	r2, [pc, #8]	; (36f4 <arch_irq_enable+0x1c>)
    36ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	e000e100 	.word	0xe000e100

000036f8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    36f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    36fa:	2b00      	cmp	r3, #0
    36fc:	db0d      	blt.n	371a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36fe:	2201      	movs	r2, #1
    3700:	095b      	lsrs	r3, r3, #5
    3702:	f000 001f 	and.w	r0, r0, #31
    3706:	fa02 f000 	lsl.w	r0, r2, r0
    370a:	3320      	adds	r3, #32
    370c:	4a03      	ldr	r2, [pc, #12]	; (371c <arch_irq_disable+0x24>)
    370e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3712:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3716:	f3bf 8f6f 	isb	sy
}
    371a:	4770      	bx	lr
    371c:	e000e100 	.word	0xe000e100

00003720 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3720:	4b05      	ldr	r3, [pc, #20]	; (3738 <arch_irq_is_enabled+0x18>)
    3722:	0942      	lsrs	r2, r0, #5
    3724:	f000 001f 	and.w	r0, r0, #31
    3728:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    372c:	2301      	movs	r3, #1
    372e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3732:	4010      	ands	r0, r2
    3734:	4770      	bx	lr
    3736:	bf00      	nop
    3738:	e000e100 	.word	0xe000e100

0000373c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    373c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    373e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3740:	bfa8      	it	ge
    3742:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3746:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    374a:	bfb8      	it	lt
    374c:	4b06      	ldrlt	r3, [pc, #24]	; (3768 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    374e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3752:	bfac      	ite	ge
    3754:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3758:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    375c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    375e:	bfb4      	ite	lt
    3760:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3762:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3766:	4770      	bx	lr
    3768:	e000ed14 	.word	0xe000ed14

0000376c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    376c:	bf30      	wfi
    b z_SysNmiOnReset
    376e:	f7ff bffd 	b.w	376c <z_SysNmiOnReset>
    3772:	bf00      	nop

00003774 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3774:	4a0f      	ldr	r2, [pc, #60]	; (37b4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3776:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3778:	4b0f      	ldr	r3, [pc, #60]	; (37b8 <z_arm_prep_c+0x44>)
    377a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    377e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3784:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3788:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    378c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3794:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3798:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    379c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    37a0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    37a4:	f004 f8ae 	bl	7904 <z_bss_zero>
	z_data_copy();
    37a8:	f005 f80c 	bl	87c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    37ac:	f000 f99a 	bl	3ae4 <z_arm_interrupt_init>
	z_cstart();
    37b0:	f004 f8b2 	bl	7918 <z_cstart>
    37b4:	00000000 	.word	0x00000000
    37b8:	e000ed00 	.word	0xe000ed00

000037bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    37bc:	4a09      	ldr	r2, [pc, #36]	; (37e4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    37be:	490a      	ldr	r1, [pc, #40]	; (37e8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    37c0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    37c2:	6809      	ldr	r1, [r1, #0]
    37c4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37c6:	4909      	ldr	r1, [pc, #36]	; (37ec <arch_swap+0x30>)
	_current->arch.basepri = key;
    37c8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37ca:	684b      	ldr	r3, [r1, #4]
    37cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    37d0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    37d2:	2300      	movs	r3, #0
    37d4:	f383 8811 	msr	BASEPRI, r3
    37d8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    37dc:	6893      	ldr	r3, [r2, #8]
}
    37de:	6f98      	ldr	r0, [r3, #120]	; 0x78
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	20003b70 	.word	0x20003b70
    37e8:	0000afd8 	.word	0x0000afd8
    37ec:	e000ed00 	.word	0xe000ed00

000037f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    37f0:	490f      	ldr	r1, [pc, #60]	; (3830 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    37f2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    37f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    37f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    37fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    37fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3802:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3804:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3808:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    380c:	4f09      	ldr	r7, [pc, #36]	; (3834 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    380e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3812:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3814:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3816:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3818:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    381a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    381c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    381e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3822:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3826:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    382a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    382e:	4770      	bx	lr
    ldr r1, =_kernel
    3830:	20003b70 	.word	0x20003b70
    ldr v4, =_SCS_ICSR
    3834:	e000ed04 	.word	0xe000ed04

00003838 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3838:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    383c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    383e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3842:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3846:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3848:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    384c:	2902      	cmp	r1, #2
    beq _oops
    384e:	d0ff      	beq.n	3850 <_oops>

00003850 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3850:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3852:	f006 f802 	bl	985a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3856:	bd01      	pop	{r0, pc}

00003858 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3858:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    385c:	9b00      	ldr	r3, [sp, #0]
    385e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3862:	490a      	ldr	r1, [pc, #40]	; (388c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    386a:	9b02      	ldr	r3, [sp, #8]
    386c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3870:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3878:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    387c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3880:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3882:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3884:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3886:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3888:	4770      	bx	lr
    388a:	bf00      	nop
    388c:	00009027 	.word	0x00009027

00003890 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3890:	4b07      	ldr	r3, [pc, #28]	; (38b0 <arch_switch_to_main_thread+0x20>)
    3892:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3894:	4610      	mov	r0, r2
    3896:	f381 8809 	msr	PSP, r1
    389a:	2100      	movs	r1, #0
    389c:	b663      	cpsie	if
    389e:	f381 8811 	msr	BASEPRI, r1
    38a2:	f3bf 8f6f 	isb	sy
    38a6:	2200      	movs	r2, #0
    38a8:	2300      	movs	r3, #0
    38aa:	f005 fbbc 	bl	9026 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    38ae:	bf00      	nop
    38b0:	20003b70 	.word	0x20003b70

000038b4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    38b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    38b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    38b8:	4a0b      	ldr	r2, [pc, #44]	; (38e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    38ba:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    38bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    38be:	bf1e      	ittt	ne
	movne	r1, #0
    38c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    38c2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    38c4:	f006 fdfe 	blne	a4c4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    38c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    38ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    38ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    38d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    38d6:	4905      	ldr	r1, [pc, #20]	; (38ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    38d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    38da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    38dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    38de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    38e2:	4903      	ldr	r1, [pc, #12]	; (38f0 <_isr_wrapper+0x3c>)
	bx r1
    38e4:	4708      	bx	r1
    38e6:	0000      	.short	0x0000
	ldr r2, =_kernel
    38e8:	20003b70 	.word	0x20003b70
	ldr r1, =_sw_isr_table
    38ec:	0000abbc 	.word	0x0000abbc
	ldr r1, =z_arm_int_exit
    38f0:	000038f5 	.word	0x000038f5

000038f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    38f4:	4b04      	ldr	r3, [pc, #16]	; (3908 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    38f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    38f8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    38fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    38fc:	d003      	beq.n	3906 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    38fe:	4903      	ldr	r1, [pc, #12]	; (390c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3904:	600a      	str	r2, [r1, #0]

00003906 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3906:	4770      	bx	lr
	ldr r3, =_kernel
    3908:	20003b70 	.word	0x20003b70
	ldr r1, =_SCS_ICSR
    390c:	e000ed04 	.word	0xe000ed04

00003910 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3910:	4b0d      	ldr	r3, [pc, #52]	; (3948 <bus_fault.constprop.0+0x38>)
    3912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3918:	0592      	lsls	r2, r2, #22
    391a:	d508      	bpl.n	392e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3920:	0412      	lsls	r2, r2, #16
    3922:	d504      	bpl.n	392e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3924:	b118      	cbz	r0, 392e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    392c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    392e:	4b06      	ldr	r3, [pc, #24]	; (3948 <bus_fault.constprop.0+0x38>)
    3930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3934:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3936:	bf58      	it	pl
    3938:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    393a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    393c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    393e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3942:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3944:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3946:	4770      	bx	lr
    3948:	e000ed00 	.word	0xe000ed00

0000394c <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    394c:	4b0e      	ldr	r3, [pc, #56]	; (3988 <mem_manage_fault.constprop.0+0x3c>)
    394e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3954:	0792      	lsls	r2, r2, #30
    3956:	d508      	bpl.n	396a <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    3958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    395c:	0612      	lsls	r2, r2, #24
    395e:	d504      	bpl.n	396a <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    3960:	b118      	cbz	r0, 396a <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3968:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    396a:	4b07      	ldr	r3, [pc, #28]	; (3988 <mem_manage_fault.constprop.0+0x3c>)
    396c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3972:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3974:	bf58      	it	pl
    3976:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    397a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    397c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3980:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3982:	7008      	strb	r0, [r1, #0]
}
    3984:	4770      	bx	lr
    3986:	bf00      	nop
    3988:	e000ed00 	.word	0xe000ed00

0000398c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    398c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    398e:	4b4b      	ldr	r3, [pc, #300]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3990:	685b      	ldr	r3, [r3, #4]
{
    3992:	b08b      	sub	sp, #44	; 0x2c
    3994:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3996:	f3c3 0308 	ubfx	r3, r3, #0, #9
    399a:	2500      	movs	r5, #0
    399c:	f385 8811 	msr	BASEPRI, r5
    39a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    39a4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    39a8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    39ac:	d111      	bne.n	39d2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    39ae:	f002 010c 	and.w	r1, r2, #12
    39b2:	2908      	cmp	r1, #8
    39b4:	d00d      	beq.n	39d2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    39b6:	0716      	lsls	r6, r2, #28
    39b8:	d401      	bmi.n	39be <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    39ba:	4604      	mov	r4, r0
			*nested_exc = true;
    39bc:	2501      	movs	r5, #1
	*recoverable = false;
    39be:	2200      	movs	r2, #0
	switch (fault) {
    39c0:	3b03      	subs	r3, #3
	*recoverable = false;
    39c2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    39c6:	2b03      	cmp	r3, #3
    39c8:	d870      	bhi.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    39ca:	e8df f003 	tbb	[pc, r3]
    39ce:	5a04      	.short	0x5a04
    39d0:	625e      	.short	0x625e
		return NULL;
    39d2:	462c      	mov	r4, r5
    39d4:	e7f3      	b.n	39be <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    39d6:	4a39      	ldr	r2, [pc, #228]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    39d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    39da:	f013 0302 	ands.w	r3, r3, #2
    39de:	d165      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    39e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    39e2:	2900      	cmp	r1, #0
    39e4:	db14      	blt.n	3a10 <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    39e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    39e8:	0049      	lsls	r1, r1, #1
    39ea:	d511      	bpl.n	3a10 <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
    39ec:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    39ee:	f831 0c02 	ldrh.w	r0, [r1, #-2]
    39f2:	f64d 7102 	movw	r1, #57090	; 0xdf02
    39f6:	4288      	cmp	r0, r1
    39f8:	d009      	beq.n	3a0e <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    39fa:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
    39fe:	b331      	cbz	r1, 3a4e <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    3a00:	f10d 0107 	add.w	r1, sp, #7
    3a04:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3a06:	f7ff ffa1 	bl	394c <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    3a0a:	4603      	mov	r3, r0
		break;
    3a0c:	e000      	b.n	3a10 <z_arm_fault+0x84>
			reason = esf->basic.r0;
    3a0e:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3a10:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3a14:	b9ca      	cbnz	r2, 3a4a <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3a16:	ae02      	add	r6, sp, #8
    3a18:	f104 0720 	add.w	r7, r4, #32
    3a1c:	6820      	ldr	r0, [r4, #0]
    3a1e:	6861      	ldr	r1, [r4, #4]
    3a20:	4632      	mov	r2, r6
    3a22:	c203      	stmia	r2!, {r0, r1}
    3a24:	3408      	adds	r4, #8
    3a26:	42bc      	cmp	r4, r7
    3a28:	4616      	mov	r6, r2
    3a2a:	d1f7      	bne.n	3a1c <z_arm_fault+0x90>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a2e:	2d00      	cmp	r5, #0
    3a30:	d03e      	beq.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3a32:	f3c2 0108 	ubfx	r1, r2, #0, #9
    3a36:	b921      	cbnz	r1, 3a42 <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3a38:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    3a3c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3a40:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3a42:	a902      	add	r1, sp, #8
    3a44:	4618      	mov	r0, r3
    3a46:	f005 ff06 	bl	9856 <z_arm_fatal_error>
}
    3a4a:	b00b      	add	sp, #44	; 0x2c
    3a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    3a4e:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    3a52:	b129      	cbz	r1, 3a60 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    3a54:	f10d 0107 	add.w	r1, sp, #7
    3a58:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3a5a:	f7ff ff59 	bl	3910 <bus_fault.constprop.0>
    3a5e:	e7d4      	b.n	3a0a <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    3a60:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
    3a62:	b289      	uxth	r1, r1
    3a64:	2900      	cmp	r1, #0
    3a66:	d0d3      	beq.n	3a10 <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3a68:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3a6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3a6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3a6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3a70:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3a72:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3a74:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3a76:	ea6f 4101 	mvn.w	r1, r1, lsl #16
    3a7a:	ea6f 4111 	mvn.w	r1, r1, lsr #16
    3a7e:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
    3a80:	e7c6      	b.n	3a10 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    3a82:	f10d 0107 	add.w	r1, sp, #7
    3a86:	2000      	movs	r0, #0
    3a88:	e7bd      	b.n	3a06 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    3a8a:	f10d 0107 	add.w	r1, sp, #7
    3a8e:	2000      	movs	r0, #0
    3a90:	e7e3      	b.n	3a5a <z_arm_fault+0xce>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3a92:	4b0a      	ldr	r3, [pc, #40]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3aa2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3aa6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3aaa:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3aac:	2300      	movs	r3, #0
    3aae:	e7af      	b.n	3a10 <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ab0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    3ab4:	f022 0201 	bic.w	r2, r2, #1
    3ab8:	e7c2      	b.n	3a40 <z_arm_fault+0xb4>
    3aba:	bf00      	nop
    3abc:	e000ed00 	.word	0xe000ed00

00003ac0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3ac0:	4a02      	ldr	r2, [pc, #8]	; (3acc <z_arm_fault_init+0xc>)
    3ac2:	6953      	ldr	r3, [r2, #20]
    3ac4:	f043 0310 	orr.w	r3, r3, #16
    3ac8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3aca:	4770      	bx	lr
    3acc:	e000ed00 	.word	0xe000ed00

00003ad0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3ad0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3ad4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3ad8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3ada:	4672      	mov	r2, lr
	bl z_arm_fault
    3adc:	f7ff ff56 	bl	398c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3ae0:	bd01      	pop	{r0, pc}
    3ae2:	bf00      	nop

00003ae4 <z_arm_interrupt_init>:
    3ae4:	4804      	ldr	r0, [pc, #16]	; (3af8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3ae6:	2300      	movs	r3, #0
    3ae8:	2120      	movs	r1, #32
    3aea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3aec:	3301      	adds	r3, #1
    3aee:	2b30      	cmp	r3, #48	; 0x30
    3af0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3af4:	d1f9      	bne.n	3aea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3af6:	4770      	bx	lr
    3af8:	e000e100 	.word	0xe000e100

00003afc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3afc:	f006 ffac 	bl	aa58 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3b00:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3b02:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3b06:	4808      	ldr	r0, [pc, #32]	; (3b28 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3b0c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3b0e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3b12:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3b16:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3b18:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3b1a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3b1e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3b22:	f7ff fe27 	bl	3774 <z_arm_prep_c>
    3b26:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3b28:	20004950 	.word	0x20004950

00003b2c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3b2c:	4b06      	ldr	r3, [pc, #24]	; (3b48 <z_impl_k_thread_abort+0x1c>)
    3b2e:	689b      	ldr	r3, [r3, #8]
    3b30:	4283      	cmp	r3, r0
    3b32:	d107      	bne.n	3b44 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3b34:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3b38:	b123      	cbz	r3, 3b44 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3b3a:	4a04      	ldr	r2, [pc, #16]	; (3b4c <z_impl_k_thread_abort+0x20>)
    3b3c:	6853      	ldr	r3, [r2, #4]
    3b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3b42:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3b44:	f004 bdda 	b.w	86fc <z_thread_abort>
    3b48:	20003b70 	.word	0x20003b70
    3b4c:	e000ed00 	.word	0xe000ed00

00003b50 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3b50:	4b02      	ldr	r3, [pc, #8]	; (3b5c <z_arm_configure_static_mpu_regions+0xc>)
    3b52:	4a03      	ldr	r2, [pc, #12]	; (3b60 <z_arm_configure_static_mpu_regions+0x10>)
    3b54:	4803      	ldr	r0, [pc, #12]	; (3b64 <z_arm_configure_static_mpu_regions+0x14>)
    3b56:	2101      	movs	r1, #1
    3b58:	f000 b85e 	b.w	3c18 <arm_core_mpu_configure_static_mpu_regions>
    3b5c:	20040000 	.word	0x20040000
    3b60:	20000000 	.word	0x20000000
    3b64:	0000addc 	.word	0x0000addc

00003b68 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3b68:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3b6a:	4f1f      	ldr	r7, [pc, #124]	; (3be8 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3b6c:	2600      	movs	r6, #0
    3b6e:	428e      	cmp	r6, r1
    3b70:	db01      	blt.n	3b76 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3b72:	4610      	mov	r0, r2
    3b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    3b76:	6844      	ldr	r4, [r0, #4]
    3b78:	b39c      	cbz	r4, 3be2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    3b7a:	b153      	cbz	r3, 3b92 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3b7c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3b80:	ea14 0f0c 	tst.w	r4, ip
    3b84:	d118      	bne.n	3bb8 <mpu_configure_regions+0x50>
		&&
    3b86:	2c1f      	cmp	r4, #31
    3b88:	d916      	bls.n	3bb8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    3b8a:	6805      	ldr	r5, [r0, #0]
		&&
    3b8c:	ea1c 0f05 	tst.w	ip, r5
    3b90:	d112      	bne.n	3bb8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3b92:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3b94:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b96:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b9a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3b9c:	d90f      	bls.n	3bbe <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    3b9e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3ba2:	d80e      	bhi.n	3bc2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3ba4:	3c01      	subs	r4, #1
    3ba6:	fab4 f484 	clz	r4, r4
    3baa:	f1c4 041f 	rsb	r4, r4, #31
    3bae:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3bb0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3bb2:	ea4c 0404 	orr.w	r4, ip, r4
    3bb6:	d906      	bls.n	3bc6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    3bb8:	f06f 0215 	mvn.w	r2, #21
    3bbc:	e7d9      	b.n	3b72 <mpu_configure_regions+0xa>
		return REGION_32B;
    3bbe:	2408      	movs	r4, #8
    3bc0:	e7f6      	b.n	3bb0 <mpu_configure_regions+0x48>
		return REGION_4G;
    3bc2:	243e      	movs	r4, #62	; 0x3e
    3bc4:	e7f4      	b.n	3bb0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bc6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3bca:	4315      	orrs	r5, r2
    3bcc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3bd0:	f044 0401 	orr.w	r4, r4, #1
    3bd4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bd8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    3bdc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3bde:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    3be2:	3601      	adds	r6, #1
    3be4:	300c      	adds	r0, #12
    3be6:	e7c2      	b.n	3b6e <mpu_configure_regions+0x6>
    3be8:	e000ed00 	.word	0xe000ed00

00003bec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3bec:	4b04      	ldr	r3, [pc, #16]	; (3c00 <arm_core_mpu_enable+0x14>)
    3bee:	2205      	movs	r2, #5
    3bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bf8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3bfc:	4770      	bx	lr
    3bfe:	bf00      	nop
    3c00:	e000ed00 	.word	0xe000ed00

00003c04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3c04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3c08:	4b02      	ldr	r3, [pc, #8]	; (3c14 <arm_core_mpu_disable+0x10>)
    3c0a:	2200      	movs	r2, #0
    3c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3c10:	4770      	bx	lr
    3c12:	bf00      	nop
    3c14:	e000ed00 	.word	0xe000ed00

00003c18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3c18:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3c1a:	4c03      	ldr	r4, [pc, #12]	; (3c28 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3c1c:	2301      	movs	r3, #1
    3c1e:	7822      	ldrb	r2, [r4, #0]
    3c20:	f7ff ffa2 	bl	3b68 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3c24:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3c26:	bd10      	pop	{r4, pc}
    3c28:	20003bc4 	.word	0x20003bc4

00003c2c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3c2c:	4914      	ldr	r1, [pc, #80]	; (3c80 <z_arm_mpu_init+0x54>)
    3c2e:	6808      	ldr	r0, [r1, #0]
    3c30:	2808      	cmp	r0, #8
{
    3c32:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3c34:	d821      	bhi.n	3c7a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3c36:	f7ff ffe5 	bl	3c04 <arm_core_mpu_disable>
    3c3a:	4c12      	ldr	r4, [pc, #72]	; (3c84 <z_arm_mpu_init+0x58>)
    3c3c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3c3e:	2200      	movs	r2, #0
    3c40:	4290      	cmp	r0, r2
    3c42:	f101 010c 	add.w	r1, r1, #12
    3c46:	d105      	bne.n	3c54 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3c48:	4b0f      	ldr	r3, [pc, #60]	; (3c88 <z_arm_mpu_init+0x5c>)
    3c4a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3c4c:	f7ff ffce 	bl	3bec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3c50:	2000      	movs	r0, #0
}
    3c52:	bd10      	pop	{r4, pc}
    3c54:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3c58:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3c5c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3c60:	4313      	orrs	r3, r2
    3c62:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3c66:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3c6e:	f043 0301 	orr.w	r3, r3, #1
    3c72:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3c76:	3201      	adds	r2, #1
    3c78:	e7e2      	b.n	3c40 <z_arm_mpu_init+0x14>
		return -1;
    3c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c7e:	e7e8      	b.n	3c52 <z_arm_mpu_init+0x26>
    3c80:	0000ade8 	.word	0x0000ade8
    3c84:	e000ed00 	.word	0xe000ed00
    3c88:	20003bc4 	.word	0x20003bc4

00003c8c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3c8c:	4b01      	ldr	r3, [pc, #4]	; (3c94 <__stdout_hook_install+0x8>)
    3c8e:	6018      	str	r0, [r3, #0]
}
    3c90:	4770      	bx	lr
    3c92:	bf00      	nop
    3c94:	200000e0 	.word	0x200000e0

00003c98 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    3c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9a:	4f0a      	ldr	r7, [pc, #40]	; (3cc4 <z_impl_zephyr_write_stdout+0x2c>)
    3c9c:	460d      	mov	r5, r1
    3c9e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    3ca0:	f1c0 0401 	rsb	r4, r0, #1
    3ca4:	19a3      	adds	r3, r4, r6
    3ca6:	429d      	cmp	r5, r3
    3ca8:	dc01      	bgt.n	3cae <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    3caa:	4628      	mov	r0, r5
    3cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    3cae:	7873      	ldrb	r3, [r6, #1]
    3cb0:	2b0a      	cmp	r3, #10
    3cb2:	d102      	bne.n	3cba <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    3cb4:	683b      	ldr	r3, [r7, #0]
    3cb6:	200d      	movs	r0, #13
    3cb8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    3cba:	683b      	ldr	r3, [r7, #0]
    3cbc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3cc0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    3cc2:	e7ef      	b.n	3ca4 <z_impl_zephyr_write_stdout+0xc>
    3cc4:	200000e0 	.word	0x200000e0

00003cc8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    3cc8:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    3cca:	211d      	movs	r1, #29
    3ccc:	4804      	ldr	r0, [pc, #16]	; (3ce0 <__chk_fail+0x18>)
    3cce:	f7ff ffe3 	bl	3c98 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    3cd2:	4040      	eors	r0, r0
    3cd4:	f380 8811 	msr	BASEPRI, r0
    3cd8:	f04f 0003 	mov.w	r0, #3
    3cdc:	df02      	svc	2
	CODE_UNREACHABLE;
    3cde:	bf00      	nop
    3ce0:	0000b158 	.word	0x0000b158

00003ce4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3ce4:	f04f 0320 	mov.w	r3, #32
    3ce8:	f3ef 8211 	mrs	r2, BASEPRI
    3cec:	f383 8812 	msr	BASEPRI_MAX, r3
    3cf0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3cf4:	4906      	ldr	r1, [pc, #24]	; (3d10 <nordicsemi_nrf52_init+0x2c>)
    3cf6:	2301      	movs	r3, #1
    3cf8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3cfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3d00:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3d04:	f382 8811 	msr	BASEPRI, r2
    3d08:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3d0c:	2000      	movs	r0, #0
    3d0e:	4770      	bx	lr
    3d10:	4001e000 	.word	0x4001e000

00003d14 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3d14:	b120      	cbz	r0, 3d20 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3d16:	4b03      	ldr	r3, [pc, #12]	; (3d24 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3d18:	0180      	lsls	r0, r0, #6
    3d1a:	f043 0301 	orr.w	r3, r3, #1
    3d1e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop
    3d24:	0000ad80 	.word	0x0000ad80

00003d28 <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    3d28:	b538      	push	{r3, r4, r5, lr}
    3d2a:	480c      	ldr	r0, [pc, #48]	; (3d5c <board_particle_argon_init+0x34>)
    3d2c:	f003 fd7c 	bl	7828 <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    3d30:	4605      	mov	r5, r0
    3d32:	b180      	cbz	r0, 3d56 <board_particle_argon_init+0x2e>
    3d34:	4809      	ldr	r0, [pc, #36]	; (3d5c <board_particle_argon_init+0x34>)
    3d36:	f003 fd77 	bl	7828 <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    3d3a:	4604      	mov	r4, r0
    3d3c:	b158      	cbz	r0, 3d56 <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    3d3e:	f241 6201 	movw	r2, #5633	; 0x1601
    3d42:	2119      	movs	r1, #25
    3d44:	4628      	mov	r0, r5
    3d46:	f005 fdba 	bl	98be <z_impl_gpio_pin_configure.isra.0>
    3d4a:	f641 2201 	movw	r2, #6657	; 0x1a01
    3d4e:	2102      	movs	r1, #2
    3d50:	4620      	mov	r0, r4
    3d52:	f005 fdb4 	bl	98be <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    3d56:	2000      	movs	r0, #0
    3d58:	bd38      	pop	{r3, r4, r5, pc}
    3d5a:	bf00      	nop
    3d5c:	0000b185 	.word	0x0000b185

00003d60 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3d60:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3d64:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3d66:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3d68:	d004      	beq.n	3d74 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    3d6a:	f010 0f78 	tst.w	r0, #120	; 0x78
    3d6e:	d001      	beq.n	3d74 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    3d70:	2000      	movs	r0, #0
    3d72:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3d74:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3d76:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3d7a:	f000 0008 	and.w	r0, r0, #8
    3d7e:	da05      	bge.n	3d8c <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3d80:	b958      	cbnz	r0, 3d9a <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    3d82:	4808      	ldr	r0, [pc, #32]	; (3da4 <endpoint_ctx+0x44>)
    3d84:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3d88:	304c      	adds	r0, #76	; 0x4c
    3d8a:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3d8c:	b938      	cbnz	r0, 3d9e <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3d8e:	4805      	ldr	r0, [pc, #20]	; (3da4 <endpoint_ctx+0x44>)
    3d90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3d94:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    3d98:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3d9a:	4803      	ldr	r0, [pc, #12]	; (3da8 <endpoint_ctx+0x48>)
    3d9c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3d9e:	4803      	ldr	r0, [pc, #12]	; (3dac <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    3da0:	4770      	bx	lr
    3da2:	bf00      	nop
    3da4:	20003580 	.word	0x20003580
    3da8:	200036cc 	.word	0x200036cc
    3dac:	200037ec 	.word	0x200037ec

00003db0 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3db0:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    3db2:	4801      	ldr	r0, [pc, #4]	; (3db8 <usbd_evt_put+0x8>)
    3db4:	f006 bc08 	b.w	a5c8 <k_queue_append>
    3db8:	20000268 	.word	0x20000268

00003dbc <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3dbc:	4901      	ldr	r1, [pc, #4]	; (3dc4 <usbd_work_schedule+0x8>)
    3dbe:	4802      	ldr	r0, [pc, #8]	; (3dc8 <usbd_work_schedule+0xc>)
    3dc0:	f006 bc34 	b.w	a62c <k_work_submit_to_queue>
    3dc4:	200035a8 	.word	0x200035a8
    3dc8:	20000408 	.word	0x20000408

00003dcc <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    3dcc:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3dce:	480b      	ldr	r0, [pc, #44]	; (3dfc <usb_init+0x30>)
    3dd0:	f002 fa8c 	bl	62ec <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    3dd4:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    3dd6:	480a      	ldr	r0, [pc, #40]	; (3e00 <usb_init+0x34>)
    3dd8:	f002 face 	bl	6378 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3de4:	4907      	ldr	r1, [pc, #28]	; (3e04 <usb_init+0x38>)
    3de6:	4808      	ldr	r0, [pc, #32]	; (3e08 <usb_init+0x3c>)
    3de8:	9400      	str	r4, [sp, #0]
    3dea:	f004 f949 	bl	8080 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    3dee:	4907      	ldr	r1, [pc, #28]	; (3e0c <usb_init+0x40>)
    3df0:	4807      	ldr	r0, [pc, #28]	; (3e10 <usb_init+0x44>)
    3df2:	f006 fc12 	bl	a61a <k_work_init>

	return 0;
}
    3df6:	4620      	mov	r0, r4
    3df8:	b002      	add	sp, #8
    3dfa:	bd10      	pop	{r4, pc}
    3dfc:	0000b18f 	.word	0x0000b18f
    3e00:	0000ae08 	.word	0x0000ae08
    3e04:	20004010 	.word	0x20004010
    3e08:	20000408 	.word	0x20000408
    3e0c:	00004129 	.word	0x00004129
    3e10:	200035a8 	.word	0x200035a8

00003e14 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    3e14:	4802      	ldr	r0, [pc, #8]	; (3e20 <usbd_evt_get+0xc>)
    3e16:	2200      	movs	r2, #0
    3e18:	2300      	movs	r3, #0
    3e1a:	f003 bfcf 	b.w	7dbc <z_impl_k_queue_get>
    3e1e:	bf00      	nop
    3e20:	20000268 	.word	0x20000268

00003e24 <usbd_evt_flush>:
{
    3e24:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3e26:	4c05      	ldr	r4, [pc, #20]	; (3e3c <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    3e28:	f7ff fff4 	bl	3e14 <usbd_evt_get>
		if (ev) {
    3e2c:	b120      	cbz	r0, 3e38 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3e2e:	1d01      	adds	r1, r0, #4
    3e30:	4620      	mov	r0, r4
    3e32:	f006 fb13 	bl	a45c <k_mem_slab_free>
	} while (ev != NULL);
    3e36:	e7f7      	b.n	3e28 <usbd_evt_flush+0x4>
}
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	bf00      	nop
    3e3c:	20000238 	.word	0x20000238

00003e40 <usbd_evt_alloc>:
{
    3e40:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3e42:	2300      	movs	r3, #0
    3e44:	480e      	ldr	r0, [pc, #56]	; (3e80 <usbd_evt_alloc+0x40>)
    3e46:	2200      	movs	r2, #0
    3e48:	a901      	add	r1, sp, #4
    3e4a:	f003 fdfb 	bl	7a44 <k_mem_slab_alloc>
    3e4e:	b190      	cbz	r0, 3e76 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
    3e50:	f7ff ffe8 	bl	3e24 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3e54:	480a      	ldr	r0, [pc, #40]	; (3e80 <usbd_evt_alloc+0x40>)
    3e56:	2200      	movs	r2, #0
    3e58:	2300      	movs	r3, #0
    3e5a:	a901      	add	r1, sp, #4
    3e5c:	f003 fdf2 	bl	7a44 <k_mem_slab_alloc>
    3e60:	b938      	cbnz	r0, 3e72 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
    3e62:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3e64:	2304      	movs	r3, #4
		ev->block = block;
    3e66:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3e68:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3e6a:	f7ff ffa1 	bl	3db0 <usbd_evt_put>
		usbd_work_schedule();
    3e6e:	f7ff ffa5 	bl	3dbc <usbd_work_schedule>
		return NULL;
    3e72:	2000      	movs	r0, #0
    3e74:	e001      	b.n	3e7a <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
    3e76:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3e78:	6040      	str	r0, [r0, #4]
}
    3e7a:	b003      	add	sp, #12
    3e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    3e80:	20000238 	.word	0x20000238

00003e84 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
    3e84:	7881      	ldrb	r1, [r0, #2]
{
    3e86:	b570      	push	{r4, r5, r6, lr}
    3e88:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3e8a:	4608      	mov	r0, r1
    3e8c:	f7ff ff68 	bl	3d60 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3e90:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    3e92:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3e94:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3e96:	d512      	bpl.n	3ebe <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    3e98:	2d00      	cmp	r5, #0
    3e9a:	d143      	bne.n	3f24 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3e9c:	f7ff ffd0 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    3ea0:	4603      	mov	r3, r0
    3ea2:	2800      	cmp	r0, #0
    3ea4:	d03e      	beq.n	3f24 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
    3ea6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3ea8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3eaa:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3eac:	2203      	movs	r2, #3
    3eae:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3eb0:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
    3eb2:	f7ff ff7d 	bl	3db0 <usbd_evt_put>
}
    3eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
    3eba:	f7ff bf7f 	b.w	3dbc <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3ebe:	b14d      	cbz	r5, 3ed4 <usbd_event_transfer_data+0x50>
    3ec0:	2d01      	cmp	r5, #1
    3ec2:	d12f      	bne.n	3f24 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3ec4:	f7ff ffbc 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    3ec8:	4603      	mov	r3, r0
    3eca:	b358      	cbz	r0, 3f24 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    3ecc:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3ece:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3ed0:	7305      	strb	r5, [r0, #12]
    3ed2:	e7ed      	b.n	3eb0 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    3ed4:	f7ff ffb4 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    3ed8:	b320      	cbz	r0, 3f24 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    3eda:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3edc:	4b12      	ldr	r3, [pc, #72]	; (3f28 <usbd_event_transfer_data+0xa4>)
    3ede:	f012 0f80 	tst.w	r2, #128	; 0x80
    3ee2:	f002 0108 	and.w	r1, r2, #8
    3ee6:	d011      	beq.n	3f0c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3ee8:	b141      	cbz	r1, 3efc <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3eea:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3eee:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    3ef0:	2301      	movs	r3, #1
    3ef2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3ef4:	2302      	movs	r3, #2
    3ef6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3ef8:	6084      	str	r4, [r0, #8]
    3efa:	e7da      	b.n	3eb2 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3efc:	f002 020f 	and.w	r2, r2, #15
    3f00:	2114      	movs	r1, #20
    3f02:	fb01 3302 	mla	r3, r1, r2, r3
    3f06:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f0a:	e7f0      	b.n	3eee <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3f0c:	b111      	cbz	r1, 3f14 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3f0e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3f12:	e7ec      	b.n	3eee <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3f14:	f002 020f 	and.w	r2, r2, #15
    3f18:	2114      	movs	r1, #20
    3f1a:	fb01 3302 	mla	r3, r1, r2, r3
    3f1e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    3f22:	e7e4      	b.n	3eee <usbd_event_transfer_data+0x6a>
}
    3f24:	bd70      	pop	{r4, r5, r6, pc}
    3f26:	bf00      	nop
    3f28:	40027000 	.word	0x40027000

00003f2c <usb_dc_power_event_handler>:
	switch (event) {
    3f2c:	2802      	cmp	r0, #2
{
    3f2e:	b510      	push	{r4, lr}
    3f30:	d811      	bhi.n	3f56 <usb_dc_power_event_handler+0x2a>
    3f32:	4b09      	ldr	r3, [pc, #36]	; (3f58 <usb_dc_power_event_handler+0x2c>)
    3f34:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3f36:	f7ff ff83 	bl	3e40 <usbd_evt_alloc>
	if (!ev) {
    3f3a:	b160      	cbz	r0, 3f56 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    3f3c:	2200      	movs	r2, #0
    3f3e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    3f40:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    3f42:	f7ff ff35 	bl	3db0 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3f46:	4b05      	ldr	r3, [pc, #20]	; (3f5c <usb_dc_power_event_handler+0x30>)
    3f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3f4c:	b11b      	cbz	r3, 3f56 <usb_dc_power_event_handler+0x2a>
}
    3f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    3f52:	f7ff bf33 	b.w	3dbc <usbd_work_schedule>
}
    3f56:	bd10      	pop	{r4, pc}
    3f58:	0000b18c 	.word	0x0000b18c
    3f5c:	20003580 	.word	0x20003580

00003f60 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    3f60:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f62:	490f      	ldr	r1, [pc, #60]	; (3fa0 <hfxo_stop.constprop.0.isra.0+0x40>)
    3f64:	f3bf 8f5b 	dmb	ish
    3f68:	f101 0320 	add.w	r3, r1, #32
    3f6c:	2200      	movs	r2, #0
    3f6e:	e853 0f00 	ldrex	r0, [r3]
    3f72:	2801      	cmp	r0, #1
    3f74:	d103      	bne.n	3f7e <hfxo_stop.constprop.0.isra.0+0x1e>
    3f76:	e843 2400 	strex	r4, r2, [r3]
    3f7a:	2c00      	cmp	r4, #0
    3f7c:	d1f7      	bne.n	3f6e <hfxo_stop.constprop.0.isra.0+0xe>
    3f7e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    3f82:	d10b      	bne.n	3f9c <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3f84:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    3f86:	310c      	adds	r1, #12
    3f88:	4620      	mov	r0, r4
    3f8a:	f005 f830 	bl	8fee <onoff_cancel>

	if (rv == -EALREADY) {
    3f8e:	3078      	adds	r0, #120	; 0x78
    3f90:	d104      	bne.n	3f9c <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    3f92:	4620      	mov	r0, r4
}
    3f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f98:	f005 b804 	b.w	8fa4 <onoff_release>
    3f9c:	bd10      	pop	{r4, pc}
    3f9e:	bf00      	nop
    3fa0:	20003580 	.word	0x20003580

00003fa4 <usbd_event_handler>:
{
    3fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa6:	4606      	mov	r6, r0
    3fa8:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    3faa:	2214      	movs	r2, #20
    3fac:	2100      	movs	r1, #0
    3fae:	a803      	add	r0, sp, #12
    3fb0:	f006 fd3d 	bl	aa2e <memset>
	switch (p_event->type) {
    3fb4:	7833      	ldrb	r3, [r6, #0]
    3fb6:	3b01      	subs	r3, #1
    3fb8:	2b05      	cmp	r3, #5
    3fba:	d821      	bhi.n	4000 <usbd_event_handler+0x5c>
    3fbc:	e8df f003 	tbb	[pc, r3]
    3fc0:	1414037a 	.word	0x1414037a
    3fc4:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    3fc6:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3fc8:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    3fcc:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3fce:	f7ff ff37 	bl	3e40 <usbd_evt_alloc>
		if (!ev) {
    3fd2:	4603      	mov	r3, r0
    3fd4:	b1a0      	cbz	r0, 4000 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    3fd6:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3fd8:	f100 0208 	add.w	r2, r0, #8
    3fdc:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    3fe0:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3fe4:	4618      	mov	r0, r3
    3fe6:	e01d      	b.n	4024 <CONFIG_USB_DEVICE_PID+0x13>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3fe8:	2304      	movs	r3, #4
    3fea:	e7ed      	b.n	3fc8 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3fec:	78b1      	ldrb	r1, [r6, #2]
    3fee:	4608      	mov	r0, r1
    3ff0:	f7ff feb6 	bl	3d60 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3ff4:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3ff6:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    3ff8:	b123      	cbz	r3, 4004 <usbd_event_handler+0x60>
    3ffa:	3b01      	subs	r3, #1
    3ffc:	2b02      	cmp	r3, #2
    3ffe:	d943      	bls.n	4088 <CONFIG_USB_DEVICE_PID+0x77>
}
    4000:	b009      	add	sp, #36	; 0x24
    4002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4004:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    4006:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4008:	d513      	bpl.n	4032 <CONFIG_USB_DEVICE_PID+0x21>
		switch (p_event->data.eptransfer.status) {
    400a:	2d00      	cmp	r5, #0
    400c:	d1f8      	bne.n	4000 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    400e:	f7ff ff17 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    4012:	4603      	mov	r3, r0
    4014:	2800      	cmp	r0, #0
    4016:	d0f3      	beq.n	4000 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4018:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    401a:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    401c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    401e:	2203      	movs	r2, #3
    4020:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4022:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    4024:	f7ff fec4 	bl	3db0 <usbd_evt_put>
}
    4028:	b009      	add	sp, #36	; 0x24
    402a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    402e:	f7ff bec5 	b.w	3dbc <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    4032:	b155      	cbz	r5, 404a <CONFIG_USB_DEVICE_PID+0x39>
    4034:	2d01      	cmp	r5, #1
    4036:	d1e3      	bne.n	4000 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    4038:	f7ff ff02 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    403c:	4603      	mov	r3, r0
    403e:	2800      	cmp	r0, #0
    4040:	d0de      	beq.n	4000 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    4042:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    4044:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4046:	7305      	strb	r5, [r0, #12]
    4048:	e7eb      	b.n	4022 <CONFIG_USB_DEVICE_PID+0x11>
			struct usbd_event *ev = usbd_evt_alloc();
    404a:	f7ff fef9 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    404e:	4607      	mov	r7, r0
    4050:	2800      	cmp	r0, #0
    4052:	d0d5      	beq.n	4000 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4054:	2301      	movs	r3, #1
    4056:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4058:	2302      	movs	r3, #2
    405a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    405c:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    405e:	f104 010c 	add.w	r1, r4, #12
    4062:	78b0      	ldrb	r0, [r6, #2]
    4064:	f006 f98d 	bl	a382 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4068:	4a13      	ldr	r2, [pc, #76]	; (40b8 <CONFIG_USB_DEVICE_PID+0xa7>)
    406a:	68e1      	ldr	r1, [r4, #12]
    406c:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4070:	428b      	cmp	r3, r1
    4072:	d906      	bls.n	4082 <CONFIG_USB_DEVICE_PID+0x71>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4074:	1a5b      	subs	r3, r3, r1
    4076:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    407a:	f003 f8c5 	bl	7208 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    407e:	4638      	mov	r0, r7
    4080:	e7d0      	b.n	4024 <CONFIG_USB_DEVICE_PID+0x13>
				ctx->ctrl_read_len = 0U;
    4082:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    4086:	e7fa      	b.n	407e <CONFIG_USB_DEVICE_PID+0x6d>
			usbd_event_transfer_data(p_event);
    4088:	4630      	mov	r0, r6
}
    408a:	b009      	add	sp, #36	; 0x24
    408c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    4090:	f7ff bef8 	b.w	3e84 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    4094:	a801      	add	r0, sp, #4
    4096:	f003 f895 	bl	71c4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    409a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    409e:	2b05      	cmp	r3, #5
    40a0:	d104      	bne.n	40ac <CONFIG_USB_DEVICE_PID+0x9b>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    40a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    40a6:	f013 0f60 	tst.w	r3, #96	; 0x60
    40aa:	d0a9      	beq.n	4000 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    40ac:	4b03      	ldr	r3, [pc, #12]	; (40bc <CONFIG_USB_DEVICE_PID+0xab>)
    40ae:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    40b0:	2401      	movs	r4, #1
    40b2:	e78c      	b.n	3fce <usbd_event_handler+0x2a>
	switch (p_event->type) {
    40b4:	2402      	movs	r4, #2
    40b6:	e78a      	b.n	3fce <usbd_event_handler+0x2a>
    40b8:	20003580 	.word	0x20003580
    40bc:	200036ec 	.word	0x200036ec

000040c0 <eps_ctx_init>:
{
    40c0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    40c2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    40c4:	f064 007f 	orn	r0, r4, #127	; 0x7f
    40c8:	b2c0      	uxtb	r0, r0
    40ca:	f7ff fe49 	bl	3d60 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    40ce:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    40d0:	f005 fc0a 	bl	98e8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    40d4:	2c08      	cmp	r4, #8
    40d6:	d1f5      	bne.n	40c4 <eps_ctx_init+0x4>
    40d8:	4d0f      	ldr	r5, [pc, #60]	; (4118 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    40da:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    40dc:	b2e0      	uxtb	r0, r4
    40de:	f7ff fe3f 	bl	3d60 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    40e2:	6903      	ldr	r3, [r0, #16]
    40e4:	b903      	cbnz	r3, 40e8 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    40e6:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    40e8:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    40ea:	f005 fbfd 	bl	98e8 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    40ee:	2c08      	cmp	r4, #8
    40f0:	f105 0540 	add.w	r5, r5, #64	; 0x40
    40f4:	d1f2      	bne.n	40dc <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    40f6:	4c09      	ldr	r4, [pc, #36]	; (411c <eps_ctx_init+0x5c>)
    40f8:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    40fc:	f005 fbf4 	bl	98e8 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4100:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    4104:	b913      	cbnz	r3, 410c <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4106:	4b06      	ldr	r3, [pc, #24]	; (4120 <eps_ctx_init+0x60>)
    4108:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    410c:	4805      	ldr	r0, [pc, #20]	; (4124 <eps_ctx_init+0x64>)
    410e:	f005 fbeb 	bl	98e8 <ep_ctx_reset>
}
    4112:	2000      	movs	r0, #0
    4114:	bd38      	pop	{r3, r4, r5, pc}
    4116:	bf00      	nop
    4118:	20003380 	.word	0x20003380
    411c:	20003580 	.word	0x20003580
    4120:	20002f80 	.word	0x20002f80
    4124:	200037ec 	.word	0x200037ec

00004128 <usbd_work_handler>:
{
    4128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    412c:	4ca7      	ldr	r4, [pc, #668]	; (43cc <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    412e:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 43d0 <usbd_work_handler+0x2a8>
{
    4132:	b085      	sub	sp, #20
    4134:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    4136:	f7ff fe6d 	bl	3e14 <usbd_evt_get>
    413a:	b910      	cbnz	r0, 4142 <usbd_work_handler+0x1a>
}
    413c:	b005      	add	sp, #20
    413e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    4142:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4146:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4148:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    414c:	b93b      	cbnz	r3, 415e <usbd_work_handler+0x36>
    414e:	2a00      	cmp	r2, #0
    4150:	f000 8084 	beq.w	425c <usbd_work_handler+0x134>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4154:	4649      	mov	r1, r9
    4156:	4640      	mov	r0, r8
    4158:	f006 f980 	bl	a45c <k_mem_slab_free>
}
    415c:	e7eb      	b.n	4136 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    415e:	2a04      	cmp	r2, #4
    4160:	d8f8      	bhi.n	4154 <usbd_work_handler+0x2c>
    4162:	e8df f012 	tbh	[pc, r2, lsl #1]
    4166:	007b      	.short	0x007b
    4168:	01010005 	.word	0x01010005
    416c:	01410117 	.word	0x01410117
	switch (ep_evt->evt_type) {
    4170:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4172:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    4174:	2b03      	cmp	r3, #3
    4176:	d8ed      	bhi.n	4154 <usbd_work_handler+0x2c>
    4178:	e8df f003 	tbb	[pc, r3]
    417c:	5d583b02 	.word	0x5d583b02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4180:	696e      	ldr	r6, [r5, #20]
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4182:	4b94      	ldr	r3, [pc, #592]	; (43d4 <usbd_work_handler+0x2ac>)
    4184:	2200      	movs	r2, #0
    4186:	6032      	str	r2, [r6, #0]
    4188:	6072      	str	r2, [r6, #4]
    418a:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    418e:	7031      	strb	r1, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    4190:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    4194:	7071      	strb	r1, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4196:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    419a:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
    419e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    41a2:	8071      	strh	r1, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    41a4:	f8d3 1490 	ldr.w	r1, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    41a8:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
    41ac:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    41b0:	80b1      	strh	r1, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    41b2:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    41b6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    41ba:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    41be:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    41c0:	2308      	movs	r3, #8
    41c2:	60eb      	str	r3, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    41c4:	6830      	ldr	r0, [r6, #0]
    41c6:	6871      	ldr	r1, [r6, #4]
    41c8:	4b83      	ldr	r3, [pc, #524]	; (43d8 <usbd_work_handler+0x2b0>)
    41ca:	c303      	stmia	r3!, {r0, r1}
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    41cc:	4611      	mov	r1, r2
    41ce:	682b      	ldr	r3, [r5, #0]
    41d0:	7a68      	ldrb	r0, [r5, #9]
    41d2:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    41d4:	f996 3000 	ldrsb.w	r3, [r6]
    41d8:	2b00      	cmp	r3, #0
    41da:	db06      	blt.n	41ea <usbd_work_handler+0xc2>
    41dc:	88f3      	ldrh	r3, [r6, #6]
    41de:	b123      	cbz	r3, 41ea <usbd_work_handler+0xc2>
		ctx->ctrl_read_len = usbd_setup->wLength;
    41e0:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    41e4:	f003 f810 	bl	7208 <nrfx_usbd_setup_data_clear>
    41e8:	e7b4      	b.n	4154 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
    41ea:	2300      	movs	r3, #0
    41ec:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    41f0:	e7b0      	b.n	4154 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
    41f2:	7f6b      	ldrb	r3, [r5, #29]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d0ad      	beq.n	4154 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
    41f8:	7f2b      	ldrb	r3, [r5, #28]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d0aa      	beq.n	4154 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
    41fe:	2600      	movs	r6, #0
    4200:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4206:	4875      	ldr	r0, [pc, #468]	; (43dc <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
    4208:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    420a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    420e:	f005 fb7e 	bl	990e <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4212:	696b      	ldr	r3, [r5, #20]
    4214:	9301      	str	r3, [sp, #4]
    4216:	686b      	ldr	r3, [r5, #4]
    4218:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    421c:	a901      	add	r1, sp, #4
    421e:	7a68      	ldrb	r0, [r5, #9]
    4220:	f002 fe00 	bl	6e24 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    4224:	486d      	ldr	r0, [pc, #436]	; (43dc <usbd_work_handler+0x2b4>)
    4226:	f005 fb74 	bl	9912 <k_mutex_unlock.isra.0>
    422a:	e793      	b.n	4154 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    422c:	682b      	ldr	r3, [r5, #0]
    422e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4230:	7a68      	ldrb	r0, [r5, #9]
    4232:	4798      	blx	r3
		break;
    4234:	e78e      	b.n	4154 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4236:	7aab      	ldrb	r3, [r5, #10]
    4238:	b96b      	cbnz	r3, 4256 <usbd_work_handler+0x12e>
    423a:	7feb      	ldrb	r3, [r5, #31]
    423c:	b95b      	cbnz	r3, 4256 <usbd_work_handler+0x12e>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    423e:	4867      	ldr	r0, [pc, #412]	; (43dc <usbd_work_handler+0x2b4>)
    4240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4248:	f005 fb61 	bl	990e <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    424c:	f003 f80c 	bl	7268 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4250:	4862      	ldr	r0, [pc, #392]	; (43dc <usbd_work_handler+0x2b4>)
    4252:	f005 fb5e 	bl	9912 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4256:	682b      	ldr	r3, [r5, #0]
    4258:	2102      	movs	r1, #2
    425a:	e7e9      	b.n	4230 <usbd_work_handler+0x108>
	switch (pwr_evt->state) {
    425c:	7a02      	ldrb	r2, [r0, #8]
    425e:	2a04      	cmp	r2, #4
    4260:	f63f af78 	bhi.w	4154 <usbd_work_handler+0x2c>
    4264:	e8df f002 	tbb	[pc, r2]
    4268:	6925035b 	.word	0x6925035b
    426c:	75          	.byte	0x75
    426d:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    426e:	f002 fd89 	bl	6d84 <nrfx_usbd_is_enabled>
    4272:	4605      	mov	r5, r0
    4274:	2800      	cmp	r0, #0
    4276:	f47f af6d 	bne.w	4154 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
    427a:	f002 fcc7 	bl	6c0c <nrfx_usbd_enable>
    427e:	f3bf 8f5b 	dmb	ish
    4282:	4957      	ldr	r1, [pc, #348]	; (43e0 <usbd_work_handler+0x2b8>)
    4284:	2301      	movs	r3, #1
    4286:	e851 2f00 	ldrex	r2, [r1]
    428a:	2a00      	cmp	r2, #0
    428c:	d103      	bne.n	4296 <usbd_work_handler+0x16e>
    428e:	e841 3000 	strex	r0, r3, [r1]
    4292:	2800      	cmp	r0, #0
    4294:	d1f7      	bne.n	4286 <usbd_work_handler+0x15e>
    4296:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    429a:	f47f af5b 	bne.w	4154 <usbd_work_handler+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    429e:	f841 5c10 	str.w	r5, [r1, #-16]
    42a2:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    42a6:	69e0      	ldr	r0, [r4, #28]
    42a8:	6163      	str	r3, [r4, #20]
    42aa:	3914      	subs	r1, #20
    42ac:	f004 fe31 	bl	8f12 <onoff_request>
    42b0:	e750      	b.n	4154 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
    42b2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    42b4:	f065 007f 	orn	r0, r5, #127	; 0x7f
    42b8:	b2c0      	uxtb	r0, r0
    42ba:	f7ff fd51 	bl	3d60 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    42be:	7a03      	ldrb	r3, [r0, #8]
    42c0:	b113      	cbz	r3, 42c8 <usbd_work_handler+0x1a0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    42c2:	7a40      	ldrb	r0, [r0, #9]
    42c4:	f003 f9bc 	bl	7640 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    42c8:	3501      	adds	r5, #1
    42ca:	2d08      	cmp	r5, #8
    42cc:	d1f2      	bne.n	42b4 <usbd_work_handler+0x18c>
		if (ep_ctx->cfg.en) {
    42ce:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    42d2:	b11b      	cbz	r3, 42dc <usbd_work_handler+0x1b4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    42d4:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    42d8:	f003 f9b2 	bl	7640 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    42dc:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    42de:	b2e8      	uxtb	r0, r5
    42e0:	f7ff fd3e 	bl	3d60 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    42e4:	7a03      	ldrb	r3, [r0, #8]
    42e6:	b113      	cbz	r3, 42ee <usbd_work_handler+0x1c6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    42e8:	7a40      	ldrb	r0, [r0, #9]
    42ea:	f003 f9a9 	bl	7640 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    42ee:	3501      	adds	r5, #1
    42f0:	2d08      	cmp	r5, #8
    42f2:	d1f4      	bne.n	42de <usbd_work_handler+0x1b6>
		if (ep_ctx->cfg.en) {
    42f4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    42f8:	b11b      	cbz	r3, 4302 <usbd_work_handler+0x1da>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    42fa:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    42fe:	f003 f99f 	bl	7640 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4302:	2001      	movs	r0, #1
    4304:	f002 fd20 	bl	6d48 <nrfx_usbd_start>
		ctx->ready = true;
    4308:	2301      	movs	r3, #1
    430a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    430e:	6823      	ldr	r3, [r4, #0]
    4310:	2b00      	cmp	r3, #0
    4312:	f43f af1f 	beq.w	4154 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4316:	2100      	movs	r1, #0
    4318:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    431a:	4798      	blx	r3
    431c:	e71a      	b.n	4154 <usbd_work_handler+0x2c>
		ctx->ready = false;
    431e:	2500      	movs	r5, #0
    4320:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4324:	f003 f918 	bl	7558 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4328:	f7ff fe1a 	bl	3f60 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    432c:	6823      	ldr	r3, [r4, #0]
    432e:	2b00      	cmp	r3, #0
    4330:	f43f af10 	beq.w	4154 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4334:	4629      	mov	r1, r5
    4336:	2004      	movs	r0, #4
    4338:	e7ef      	b.n	431a <usbd_work_handler+0x1f2>
		if (dev_ready()) {
    433a:	2b00      	cmp	r3, #0
    433c:	f43f af0a 	beq.w	4154 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
    4340:	f003 f922 	bl	7588 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4344:	6823      	ldr	r3, [r4, #0]
    4346:	2b00      	cmp	r3, #0
    4348:	f43f af04 	beq.w	4154 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    434c:	2100      	movs	r1, #0
    434e:	2005      	movs	r0, #5
    4350:	e7e3      	b.n	431a <usbd_work_handler+0x1f2>
		if (ctx->status_cb && dev_ready()) {
    4352:	6822      	ldr	r2, [r4, #0]
    4354:	2a00      	cmp	r2, #0
    4356:	f43f aefd 	beq.w	4154 <usbd_work_handler+0x2c>
    435a:	2b00      	cmp	r3, #0
    435c:	f43f aefa 	beq.w	4154 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4360:	2100      	movs	r1, #0
    4362:	2006      	movs	r0, #6
    4364:	4790      	blx	r2
    4366:	e6f5      	b.n	4154 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4368:	f107 0510 	add.w	r5, r7, #16
    436c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4374:	4628      	mov	r0, r5
    4376:	f005 faca 	bl	990e <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    437a:	f7ff fea1 	bl	40c0 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    437e:	4628      	mov	r0, r5
    4380:	f005 fac7 	bl	9912 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4384:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4388:	2b00      	cmp	r3, #0
    438a:	f43f aee3 	beq.w	4154 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
    438e:	2100      	movs	r1, #0
    4390:	2001      	movs	r0, #1
    4392:	e7c2      	b.n	431a <usbd_work_handler+0x1f2>
	if (ep_ctx->cfg.en) {
    4394:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4398:	b17b      	cbz	r3, 43ba <usbd_work_handler+0x292>
		ep_ctx->read_pending = true;
    439a:	2501      	movs	r5, #1
    439c:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    43a0:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    43a4:	f7ff fd4c 	bl	3e40 <usbd_evt_alloc>
		if (!ev) {
    43a8:	b138      	cbz	r0, 43ba <usbd_work_handler+0x292>
		ev->evt.ep_evt.ep = ep_ctx;
    43aa:	4a0e      	ldr	r2, [pc, #56]	; (43e4 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
    43ac:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    43ae:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    43b0:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    43b2:	f7ff fcfd 	bl	3db0 <usbd_evt_put>
		usbd_work_schedule();
    43b6:	f7ff fd01 	bl	3dbc <usbd_work_schedule>
			if (ctx->status_cb) {
    43ba:	f857 3c28 	ldr.w	r3, [r7, #-40]
    43be:	2b00      	cmp	r3, #0
    43c0:	f43f aec8 	beq.w	4154 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
    43c4:	2100      	movs	r1, #0
    43c6:	200a      	movs	r0, #10
    43c8:	e7a7      	b.n	431a <usbd_work_handler+0x1f2>
    43ca:	bf00      	nop
    43cc:	20003580 	.word	0x20003580
    43d0:	20000238 	.word	0x20000238
    43d4:	40027000 	.word	0x40027000
    43d8:	20003584 	.word	0x20003584
    43dc:	200035b8 	.word	0x200035b8
    43e0:	200035a0 	.word	0x200035a0
    43e4:	200037ec 	.word	0x200037ec
	nrfx_power_usbevt_disable();
    43e8:	f005 fe32 	bl	a050 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    43ec:	f003 f8b4 	bl	7558 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    43f0:	f002 fc02 	bl	6bf8 <nrfx_usbd_uninit>
	usbd_evt_flush();
    43f4:	f7ff fd16 	bl	3e24 <usbd_evt_flush>
	ret = eps_ctx_init();
    43f8:	f7ff fe62 	bl	40c0 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    43fc:	f005 fe21 	bl	a042 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4400:	4801      	ldr	r0, [pc, #4]	; (4408 <usbd_work_handler+0x2e0>)
    4402:	f002 fcc9 	bl	6d98 <nrfx_usbd_init>
}
    4406:	e6a5      	b.n	4154 <usbd_work_handler+0x2c>
    4408:	00003fa5 	.word	0x00003fa5

0000440c <usb_dc_attach>:
{
    440c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    440e:	4d1a      	ldr	r5, [pc, #104]	; (4478 <usb_dc_attach+0x6c>)
    4410:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4414:	bb5c      	cbnz	r4, 446e <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    4416:	f105 0038 	add.w	r0, r5, #56	; 0x38
    441a:	f006 f862 	bl	a4e2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    441e:	4620      	mov	r0, r4
    4420:	f000 fb3c 	bl	4a9c <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4424:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    4426:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4428:	2101      	movs	r1, #1
    442a:	2027      	movs	r0, #39	; 0x27
    442c:	f7ff f986 	bl	373c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    4430:	4812      	ldr	r0, [pc, #72]	; (447c <usb_dc_attach+0x70>)
    4432:	f002 fcb1 	bl	6d98 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4436:	4b12      	ldr	r3, [pc, #72]	; (4480 <usb_dc_attach+0x74>)
    4438:	4298      	cmp	r0, r3
    443a:	d11a      	bne.n	4472 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    443c:	f005 fe01 	bl	a042 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4440:	f7ff fe3e 	bl	40c0 <eps_ctx_init>
	if (ret == 0) {
    4444:	4604      	mov	r4, r0
    4446:	b910      	cbnz	r0, 444e <usb_dc_attach+0x42>
		ctx->attached = true;
    4448:	2301      	movs	r3, #1
    444a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    444e:	4b0d      	ldr	r3, [pc, #52]	; (4484 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	b10b      	cbz	r3, 4458 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    4454:	f7ff fcb2 	bl	3dbc <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    445c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    4460:	07db      	lsls	r3, r3, #31
    4462:	d502      	bpl.n	446a <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4464:	2000      	movs	r0, #0
    4466:	f7ff fd61 	bl	3f2c <usb_dc_power_event_handler>
}
    446a:	4620      	mov	r0, r4
    446c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    446e:	2400      	movs	r4, #0
    4470:	e7fb      	b.n	446a <usb_dc_attach+0x5e>
		return -EIO;
    4472:	f06f 0404 	mvn.w	r4, #4
    4476:	e7f8      	b.n	446a <usb_dc_attach+0x5e>
    4478:	20003580 	.word	0x20003580
    447c:	00003fa5 	.word	0x00003fa5
    4480:	0bad0000 	.word	0x0bad0000
    4484:	20000268 	.word	0x20000268

00004488 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4488:	4b07      	ldr	r3, [pc, #28]	; (44a8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    448a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    448e:	b13a      	cbz	r2, 44a0 <usb_dc_set_address+0x18>
    4490:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    4494:	2b00      	cmp	r3, #0
    4496:	bf0c      	ite	eq
    4498:	f06f 0012 	mvneq.w	r0, #18
    449c:	2000      	movne	r0, #0
    449e:	4770      	bx	lr
		return -ENODEV;
    44a0:	f06f 0012 	mvn.w	r0, #18
}
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	20003580 	.word	0x20003580

000044ac <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
    44ac:	4b0f      	ldr	r3, [pc, #60]	; (44ec <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
    44ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    44b2:	b510      	push	{r4, lr}
    44b4:	4601      	mov	r1, r0
	if (!dev_attached()) {
    44b6:	b1b3      	cbz	r3, 44e6 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    44b8:	7804      	ldrb	r4, [r0, #0]
    44ba:	4620      	mov	r0, r4
    44bc:	f7ff fc50 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    44c0:	b910      	cbnz	r0, 44c8 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    44c2:	f06f 0015 	mvn.w	r0, #21
}
    44c6:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    44c8:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    44ca:	790b      	ldrb	r3, [r1, #4]
    44cc:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    44ce:	8849      	ldrh	r1, [r1, #2]
    44d0:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    44d2:	0723      	lsls	r3, r4, #28
    44d4:	d402      	bmi.n	44dc <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    44d6:	1e4b      	subs	r3, r1, #1
    44d8:	420b      	tst	r3, r1
    44da:	d1f2      	bne.n	44c2 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    44dc:	4620      	mov	r0, r4
    44de:	f005 ff4b 	bl	a378 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    44e2:	2000      	movs	r0, #0
    44e4:	e7ef      	b.n	44c6 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    44e6:	f06f 0012 	mvn.w	r0, #18
    44ea:	e7ec      	b.n	44c6 <usb_dc_ep_configure+0x1a>
    44ec:	20003580 	.word	0x20003580

000044f0 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
    44f0:	4b12      	ldr	r3, [pc, #72]	; (453c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    44f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    44f6:	b510      	push	{r4, lr}
    44f8:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    44fa:	b1ca      	cbz	r2, 4530 <usb_dc_ep_set_stall+0x40>
    44fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4500:	b1b3      	cbz	r3, 4530 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4502:	f7ff fc2d 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    4506:	4604      	mov	r4, r0
    4508:	b1a8      	cbz	r0, 4536 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    450a:	7a83      	ldrb	r3, [r0, #10]
    450c:	2b01      	cmp	r3, #1
    450e:	d012      	beq.n	4536 <usb_dc_ep_set_stall+0x46>
    4510:	d907      	bls.n	4522 <usb_dc_ep_set_stall+0x32>
    4512:	3b02      	subs	r3, #2
    4514:	2b01      	cmp	r3, #1
    4516:	d907      	bls.n	4528 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4518:	6963      	ldr	r3, [r4, #20]
    451a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    451c:	2000      	movs	r0, #0
    451e:	60e0      	str	r0, [r4, #12]
}
    4520:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    4522:	f002 fea9 	bl	7278 <nrfx_usbd_setup_stall>
		break;
    4526:	e7f7      	b.n	4518 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4528:	4608      	mov	r0, r1
    452a:	f002 fe1d 	bl	7168 <nrfx_usbd_ep_stall>
		break;
    452e:	e7f3      	b.n	4518 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4530:	f06f 0012 	mvn.w	r0, #18
    4534:	e7f4      	b.n	4520 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    4536:	f06f 0015 	mvn.w	r0, #21
    453a:	e7f1      	b.n	4520 <usb_dc_ep_set_stall+0x30>
    453c:	20003580 	.word	0x20003580

00004540 <usb_dc_ep_clear_stall>:
{
    4540:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4542:	4b0e      	ldr	r3, [pc, #56]	; (457c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    4544:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4548:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    454a:	b182      	cbz	r2, 456e <usb_dc_ep_clear_stall+0x2e>
    454c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4550:	b16b      	cbz	r3, 456e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4552:	f7ff fc05 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    4556:	b168      	cbz	r0, 4574 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4558:	f015 0408 	ands.w	r4, r5, #8
    455c:	d10a      	bne.n	4574 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    455e:	4628      	mov	r0, r5
    4560:	f002 fe24 	bl	71ac <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4564:	4628      	mov	r0, r5
    4566:	f003 f8bd 	bl	76e4 <nrfx_usbd_ep_stall_clear>
	return 0;
    456a:	4620      	mov	r0, r4
}
    456c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    456e:	f06f 0012 	mvn.w	r0, #18
    4572:	e7fb      	b.n	456c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4574:	f06f 0015 	mvn.w	r0, #21
    4578:	e7f8      	b.n	456c <usb_dc_ep_clear_stall+0x2c>
    457a:	bf00      	nop
    457c:	20003580 	.word	0x20003580

00004580 <usb_dc_ep_is_stalled>:
{
    4580:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4582:	4b0c      	ldr	r3, [pc, #48]	; (45b4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4584:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4588:	4605      	mov	r5, r0
    458a:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    458c:	b162      	cbz	r2, 45a8 <usb_dc_ep_is_stalled+0x28>
    458e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4592:	b14b      	cbz	r3, 45a8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4594:	f7ff fbe4 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    4598:	b148      	cbz	r0, 45ae <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    459a:	b141      	cbz	r1, 45ae <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    459c:	4628      	mov	r0, r5
    459e:	f002 fdeb 	bl	7178 <nrfx_usbd_ep_stall_check>
    45a2:	7020      	strb	r0, [r4, #0]
	return 0;
    45a4:	2000      	movs	r0, #0
}
    45a6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    45a8:	f06f 0012 	mvn.w	r0, #18
    45ac:	e7fb      	b.n	45a6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    45ae:	f06f 0015 	mvn.w	r0, #21
    45b2:	e7f8      	b.n	45a6 <usb_dc_ep_is_stalled+0x26>
    45b4:	20003580 	.word	0x20003580

000045b8 <usb_dc_ep_enable>:
{
    45b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    45ba:	4f13      	ldr	r7, [pc, #76]	; (4608 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    45bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    45c0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    45c2:	b1bb      	cbz	r3, 45f4 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    45c4:	f7ff fbcc 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    45c8:	4605      	mov	r5, r0
    45ca:	b1b0      	cbz	r0, 45fa <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    45cc:	0723      	lsls	r3, r4, #28
    45ce:	d405      	bmi.n	45dc <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    45d0:	4620      	mov	r0, r4
    45d2:	f002 fdeb 	bl	71ac <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    45d6:	4620      	mov	r0, r4
    45d8:	f003 f884 	bl	76e4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    45dc:	7a2e      	ldrb	r6, [r5, #8]
    45de:	b97e      	cbnz	r6, 4600 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    45e0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    45e4:	2301      	movs	r3, #1
    45e6:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    45e8:	b118      	cbz	r0, 45f2 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    45ea:	4620      	mov	r0, r4
    45ec:	f003 f828 	bl	7640 <nrfx_usbd_ep_enable>
	return 0;
    45f0:	4630      	mov	r0, r6
}
    45f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    45f4:	f06f 0012 	mvn.w	r0, #18
    45f8:	e7fb      	b.n	45f2 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    45fa:	f06f 0015 	mvn.w	r0, #21
    45fe:	e7f8      	b.n	45f2 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    4600:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4604:	e7f5      	b.n	45f2 <usb_dc_ep_enable+0x3a>
    4606:	bf00      	nop
    4608:	20003580 	.word	0x20003580

0000460c <usb_dc_ep_disable>:
{
    460c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    460e:	4b11      	ldr	r3, [pc, #68]	; (4654 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    4610:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4614:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4616:	b19a      	cbz	r2, 4640 <usb_dc_ep_disable+0x34>
    4618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    461c:	b183      	cbz	r3, 4640 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    461e:	f7ff fb9f 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    4622:	4605      	mov	r5, r0
    4624:	b178      	cbz	r0, 4646 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    4626:	7a03      	ldrb	r3, [r0, #8]
    4628:	b183      	cbz	r3, 464c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    462a:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    462c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    462e:	f002 ffdb 	bl	75e8 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    4632:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    4634:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    4636:	f005 f957 	bl	98e8 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    463a:	722c      	strb	r4, [r5, #8]
	return 0;
    463c:	4620      	mov	r0, r4
}
    463e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4640:	f06f 0012 	mvn.w	r0, #18
    4644:	e7fb      	b.n	463e <usb_dc_ep_disable+0x32>
		return -EINVAL;
    4646:	f06f 0015 	mvn.w	r0, #21
    464a:	e7f8      	b.n	463e <usb_dc_ep_disable+0x32>
		return -EALREADY;
    464c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4650:	e7f5      	b.n	463e <usb_dc_ep_disable+0x32>
    4652:	bf00      	nop
    4654:	20003580 	.word	0x20003580

00004658 <usb_dc_ep_write>:
{
    4658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    465c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 473c <usb_dc_ep_write+0xe4>
{
    4660:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    4662:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4666:	b085      	sub	sp, #20
    4668:	4607      	mov	r7, r0
    466a:	4689      	mov	r9, r1
    466c:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    466e:	2b00      	cmp	r3, #0
    4670:	d05d      	beq.n	472e <usb_dc_ep_write+0xd6>
    4672:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4676:	2b00      	cmp	r3, #0
    4678:	d059      	beq.n	472e <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    467a:	0603      	lsls	r3, r0, #24
    467c:	d55a      	bpl.n	4734 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
    467e:	f7ff fb6f 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    4682:	4605      	mov	r5, r0
    4684:	2800      	cmp	r0, #0
    4686:	d055      	beq.n	4734 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
    4688:	7a03      	ldrb	r3, [r0, #8]
    468a:	2b00      	cmp	r3, #0
    468c:	d052      	beq.n	4734 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    468e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4696:	f108 0038 	add.w	r0, r8, #56	; 0x38
    469a:	f005 f938 	bl	990e <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    469e:	7fab      	ldrb	r3, [r5, #30]
    46a0:	b14b      	cbz	r3, 46b6 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    46a2:	f108 0038 	add.w	r0, r8, #56	; 0x38
    46a6:	f005 f934 	bl	9912 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    46aa:	f06f 040a 	mvn.w	r4, #10
}
    46ae:	4620      	mov	r0, r4
    46b0:	b005      	add	sp, #20
    46b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    46b6:	b916      	cbnz	r6, 46be <usb_dc_ep_write+0x66>
    46b8:	7feb      	ldrb	r3, [r5, #31]
    46ba:	b103      	cbz	r3, 46be <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
    46bc:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    46be:	7aab      	ldrb	r3, [r5, #10]
    46c0:	b9bb      	cbnz	r3, 46f2 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    46c2:	b15e      	cbz	r6, 46dc <usb_dc_ep_write+0x84>
    46c4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    46c8:	42b3      	cmp	r3, r6
    46ca:	d907      	bls.n	46dc <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    46cc:	686a      	ldr	r2, [r5, #4]
    46ce:	fbb6 f3f2 	udiv	r3, r6, r2
    46d2:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    46d6:	b90b      	cbnz	r3, 46dc <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
    46d8:	2301      	movs	r3, #1
    46da:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    46dc:	f002 fdd4 	bl	7288 <nrfx_usbd_last_setup_dir_get>
    46e0:	42b8      	cmp	r0, r7
    46e2:	d006      	beq.n	46f2 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
    46e4:	f002 fdc0 	bl	7268 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    46e8:	4815      	ldr	r0, [pc, #84]	; (4740 <usb_dc_ep_write+0xe8>)
    46ea:	f005 f912 	bl	9912 <k_mutex_unlock.isra.0>
		return 0;
    46ee:	2400      	movs	r4, #0
    46f0:	e7dd      	b.n	46ae <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
    46f2:	2301      	movs	r3, #1
    46f4:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    46f6:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    46fa:	a901      	add	r1, sp, #4
    46fc:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    46fe:	e9cd 9601 	strd	r9, r6, [sp, #4]
    4702:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4706:	f002 fb8d 	bl	6e24 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    470a:	4b0e      	ldr	r3, [pc, #56]	; (4744 <usb_dc_ep_write+0xec>)
    470c:	4298      	cmp	r0, r3
    470e:	d007      	beq.n	4720 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
    4710:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    4714:	b10c      	cbz	r4, 471a <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
    4716:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
    471a:	f06f 0404 	mvn.w	r4, #4
    471e:	e002      	b.n	4726 <usb_dc_ep_write+0xce>
		if (ret_bytes) {
    4720:	b10c      	cbz	r4, 4726 <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
    4722:	6026      	str	r6, [r4, #0]
	int result = 0;
    4724:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    4726:	4806      	ldr	r0, [pc, #24]	; (4740 <usb_dc_ep_write+0xe8>)
    4728:	f005 f8f3 	bl	9912 <k_mutex_unlock.isra.0>
	return result;
    472c:	e7bf      	b.n	46ae <usb_dc_ep_write+0x56>
		return -ENODEV;
    472e:	f06f 0412 	mvn.w	r4, #18
    4732:	e7bc      	b.n	46ae <usb_dc_ep_write+0x56>
		return -EINVAL;
    4734:	f06f 0415 	mvn.w	r4, #21
    4738:	e7b9      	b.n	46ae <usb_dc_ep_write+0x56>
    473a:	bf00      	nop
    473c:	20003580 	.word	0x20003580
    4740:	200035b8 	.word	0x200035b8
    4744:	0bad0000 	.word	0x0bad0000

00004748 <usb_dc_ep_read_wait>:
{
    4748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    474c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    474e:	4b20      	ldr	r3, [pc, #128]	; (47d0 <usb_dc_ep_read_wait+0x88>)
{
    4750:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4752:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4756:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4758:	2a00      	cmp	r2, #0
    475a:	d033      	beq.n	47c4 <usb_dc_ep_read_wait+0x7c>
    475c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4760:	b383      	cbz	r3, 47c4 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4762:	0603      	lsls	r3, r0, #24
    4764:	d431      	bmi.n	47ca <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4766:	b901      	cbnz	r1, 476a <usb_dc_ep_read_wait+0x22>
    4768:	bb7f      	cbnz	r7, 47ca <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    476a:	f7ff faf9 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    476e:	4604      	mov	r4, r0
    4770:	b358      	cbz	r0, 47ca <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4772:	7a03      	ldrb	r3, [r0, #8]
    4774:	b34b      	cbz	r3, 47ca <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    477a:	4816      	ldr	r0, [pc, #88]	; (47d4 <usb_dc_ep_read_wait+0x8c>)
    477c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4780:	f005 f8c5 	bl	990e <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4784:	68e3      	ldr	r3, [r4, #12]
    4786:	429f      	cmp	r7, r3
    4788:	46b8      	mov	r8, r7
    478a:	bf28      	it	cs
    478c:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    478e:	b946      	cbnz	r6, 47a2 <usb_dc_ep_read_wait+0x5a>
    4790:	b93f      	cbnz	r7, 47a2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    4792:	b105      	cbz	r5, 4796 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4794:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4796:	480f      	ldr	r0, [pc, #60]	; (47d4 <usb_dc_ep_read_wait+0x8c>)
    4798:	f005 f8bb 	bl	9912 <k_mutex_unlock.isra.0>
		return 0;
    479c:	2000      	movs	r0, #0
}
    479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    47a2:	69a1      	ldr	r1, [r4, #24]
    47a4:	4642      	mov	r2, r8
    47a6:	4630      	mov	r0, r6
    47a8:	f006 f920 	bl	a9ec <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    47ac:	69a3      	ldr	r3, [r4, #24]
    47ae:	4443      	add	r3, r8
    47b0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    47b2:	68e3      	ldr	r3, [r4, #12]
    47b4:	eba3 0308 	sub.w	r3, r3, r8
    47b8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    47ba:	2d00      	cmp	r5, #0
    47bc:	d0eb      	beq.n	4796 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    47be:	f8c5 8000 	str.w	r8, [r5]
    47c2:	e7e8      	b.n	4796 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    47c4:	f06f 0012 	mvn.w	r0, #18
    47c8:	e7e9      	b.n	479e <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    47ca:	f06f 0015 	mvn.w	r0, #21
    47ce:	e7e6      	b.n	479e <usb_dc_ep_read_wait+0x56>
    47d0:	20003580 	.word	0x20003580
    47d4:	200035b8 	.word	0x200035b8

000047d8 <usb_dc_ep_read_continue>:
{
    47d8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    47da:	4d1e      	ldr	r5, [pc, #120]	; (4854 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    47dc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    47e0:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    47e2:	b382      	cbz	r2, 4846 <usb_dc_ep_read_continue+0x6e>
    47e4:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    47e8:	b36a      	cbz	r2, 4846 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    47ea:	061b      	lsls	r3, r3, #24
    47ec:	d42e      	bmi.n	484c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    47ee:	f7ff fab7 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    47f2:	4604      	mov	r4, r0
    47f4:	b350      	cbz	r0, 484c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    47f6:	7a03      	ldrb	r3, [r0, #8]
    47f8:	b343      	cbz	r3, 484c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    47fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4802:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4806:	f005 f882 	bl	990e <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    480a:	68e3      	ldr	r3, [r4, #12]
    480c:	b9b3      	cbnz	r3, 483c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    480e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4810:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4812:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4814:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4816:	7f63      	ldrb	r3, [r4, #29]
    4818:	b183      	cbz	r3, 483c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    481a:	f7ff fb11 	bl	3e40 <usbd_evt_alloc>
			if (!ev) {
    481e:	b930      	cbnz	r0, 482e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4820:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4824:	f005 f875 	bl	9912 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4828:	f06f 000b 	mvn.w	r0, #11
}
    482c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    482e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4830:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4832:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4834:	f7ff fabc 	bl	3db0 <usbd_evt_put>
			usbd_work_schedule();
    4838:	f7ff fac0 	bl	3dbc <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    483c:	4806      	ldr	r0, [pc, #24]	; (4858 <usb_dc_ep_read_continue+0x80>)
    483e:	f005 f868 	bl	9912 <k_mutex_unlock.isra.0>
	return 0;
    4842:	2000      	movs	r0, #0
    4844:	e7f2      	b.n	482c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4846:	f06f 0012 	mvn.w	r0, #18
    484a:	e7ef      	b.n	482c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    484c:	f06f 0015 	mvn.w	r0, #21
    4850:	e7ec      	b.n	482c <usb_dc_ep_read_continue+0x54>
    4852:	bf00      	nop
    4854:	20003580 	.word	0x20003580
    4858:	200035b8 	.word	0x200035b8

0000485c <usb_dc_ep_set_callback>:
{
    485c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    4860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4864:	b12b      	cbz	r3, 4872 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    4866:	f7ff fa7b 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    486a:	b128      	cbz	r0, 4878 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    486c:	6001      	str	r1, [r0, #0]
	return 0;
    486e:	2000      	movs	r0, #0
}
    4870:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4872:	f06f 0012 	mvn.w	r0, #18
    4876:	e7fb      	b.n	4870 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    4878:	f06f 0015 	mvn.w	r0, #21
    487c:	e7f8      	b.n	4870 <usb_dc_ep_set_callback+0x14>
    487e:	bf00      	nop
    4880:	20003580 	.word	0x20003580

00004884 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4884:	4b01      	ldr	r3, [pc, #4]	; (488c <usb_dc_set_status_callback+0x8>)
    4886:	6018      	str	r0, [r3, #0]
}
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	20003580 	.word	0x20003580

00004890 <usb_dc_ep_mps>:
{
    4890:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4892:	4b07      	ldr	r3, [pc, #28]	; (48b0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4898:	b123      	cbz	r3, 48a4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    489a:	f7ff fa61 	bl	3d60 <endpoint_ctx>
	if (!ep_ctx) {
    489e:	b120      	cbz	r0, 48aa <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    48a0:	6840      	ldr	r0, [r0, #4]
}
    48a2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    48a4:	f06f 0012 	mvn.w	r0, #18
    48a8:	e7fb      	b.n	48a2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    48aa:	f06f 0015 	mvn.w	r0, #21
    48ae:	e7f8      	b.n	48a2 <usb_dc_ep_mps+0x12>
    48b0:	20003580 	.word	0x20003580

000048b4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    48b4:	4b08      	ldr	r3, [pc, #32]	; (48d8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    48b6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    48b8:	1ac3      	subs	r3, r0, r3
{
    48ba:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    48bc:	4907      	ldr	r1, [pc, #28]	; (48dc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    48be:	109b      	asrs	r3, r3, #2
{
    48c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    48c2:	4359      	muls	r1, r3
    48c4:	4806      	ldr	r0, [pc, #24]	; (48e0 <onoff_stop+0x2c>)
    48c6:	2240      	movs	r2, #64	; 0x40
    48c8:	f005 f868 	bl	999c <stop>
	notify(mgr, res);
    48cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    48ce:	4601      	mov	r1, r0
	notify(mgr, res);
    48d0:	4620      	mov	r0, r4
}
    48d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    48d6:	4718      	bx	r3
    48d8:	20003820 	.word	0x20003820
    48dc:	b6db6db7 	.word	0xb6db6db7
    48e0:	0000aafc 	.word	0x0000aafc

000048e4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    48e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    48e6:	4c0c      	ldr	r4, [pc, #48]	; (4918 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    48e8:	4a0c      	ldr	r2, [pc, #48]	; (491c <onoff_start+0x38>)
    48ea:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    48ec:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    48ee:	9300      	str	r3, [sp, #0]
{
    48f0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    48f2:	460b      	mov	r3, r1
    48f4:	490a      	ldr	r1, [pc, #40]	; (4920 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    48f6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    48f8:	4361      	muls	r1, r4
{
    48fa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    48fc:	4809      	ldr	r0, [pc, #36]	; (4924 <onoff_start+0x40>)
    48fe:	f005 f879 	bl	99f4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4902:	1e01      	subs	r1, r0, #0
    4904:	da05      	bge.n	4912 <onoff_start+0x2e>
		notify(mgr, err);
    4906:	4630      	mov	r0, r6
    4908:	462b      	mov	r3, r5
	}
}
    490a:	b002      	add	sp, #8
    490c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4910:	4718      	bx	r3
}
    4912:	b002      	add	sp, #8
    4914:	bd70      	pop	{r4, r5, r6, pc}
    4916:	bf00      	nop
    4918:	20003820 	.word	0x20003820
    491c:	00009a65 	.word	0x00009a65
    4920:	b6db6db7 	.word	0xb6db6db7
    4924:	0000aafc 	.word	0x0000aafc

00004928 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4928:	2200      	movs	r2, #0
{
    492a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    492c:	2101      	movs	r1, #1
{
    492e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4930:	4610      	mov	r0, r2
    4932:	f7fe ff03 	bl	373c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4936:	2000      	movs	r0, #0
    4938:	f7fe fece 	bl	36d8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    493c:	480f      	ldr	r0, [pc, #60]	; (497c <clk_init+0x54>)
    493e:	f001 f8e7 	bl	5b10 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4942:	4b0f      	ldr	r3, [pc, #60]	; (4980 <clk_init+0x58>)
    4944:	4298      	cmp	r0, r3
    4946:	d115      	bne.n	4974 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4948:	f001 f8f2 	bl	5b30 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    494c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    494e:	490d      	ldr	r1, [pc, #52]	; (4984 <clk_init+0x5c>)
    4950:	4630      	mov	r0, r6
    4952:	f004 facb 	bl	8eec <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4956:	2800      	cmp	r0, #0
    4958:	db0b      	blt.n	4972 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    495a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    495c:	4909      	ldr	r1, [pc, #36]	; (4984 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    495e:	2501      	movs	r5, #1
    4960:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4962:	f104 001c 	add.w	r0, r4, #28
    4966:	f004 fac1 	bl	8eec <onoff_manager_init>
		if (err < 0) {
    496a:	2800      	cmp	r0, #0
    496c:	db01      	blt.n	4972 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    496e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4970:	2000      	movs	r0, #0
}
    4972:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4974:	f06f 0004 	mvn.w	r0, #4
    4978:	e7fb      	b.n	4972 <clk_init+0x4a>
    497a:	bf00      	nop
    497c:	000049bd 	.word	0x000049bd
    4980:	0bad0000 	.word	0x0bad0000
    4984:	0000ae34 	.word	0x0000ae34

00004988 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4988:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    498a:	230c      	movs	r3, #12
    498c:	4809      	ldr	r0, [pc, #36]	; (49b4 <clkstarted_handle.constprop.0+0x2c>)
    498e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4990:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4992:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4994:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4998:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    499a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    499c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    499e:	4418      	add	r0, r3
    49a0:	f004 ffe9 	bl	9976 <set_on_state>
	if (callback) {
    49a4:	b12d      	cbz	r5, 49b2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    49a6:	4632      	mov	r2, r6
    49a8:	462b      	mov	r3, r5
    49aa:	4803      	ldr	r0, [pc, #12]	; (49b8 <clkstarted_handle.constprop.0+0x30>)
}
    49ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    49b0:	4718      	bx	r3
}
    49b2:	bd70      	pop	{r4, r5, r6, pc}
    49b4:	20003820 	.word	0x20003820
    49b8:	0000aafc 	.word	0x0000aafc

000049bc <clock_event_handler>:
	switch (event) {
    49bc:	b110      	cbz	r0, 49c4 <clock_event_handler+0x8>
    49be:	2801      	cmp	r0, #1
    49c0:	d004      	beq.n	49cc <clock_event_handler+0x10>
    49c2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    49c4:	4b03      	ldr	r3, [pc, #12]	; (49d4 <clock_event_handler+0x18>)
    49c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    49c8:	075b      	lsls	r3, r3, #29
    49ca:	d101      	bne.n	49d0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    49cc:	f7ff bfdc 	b.w	4988 <clkstarted_handle.constprop.0>
}
    49d0:	4770      	bx	lr
    49d2:	bf00      	nop
    49d4:	20003820 	.word	0x20003820

000049d8 <generic_hfclk_start>:
{
    49d8:	b508      	push	{r3, lr}
	__asm__ volatile(
    49da:	f04f 0320 	mov.w	r3, #32
    49de:	f3ef 8111 	mrs	r1, BASEPRI
    49e2:	f383 8812 	msr	BASEPRI_MAX, r3
    49e6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    49ea:	4a12      	ldr	r2, [pc, #72]	; (4a34 <generic_hfclk_start+0x5c>)
    49ec:	6813      	ldr	r3, [r2, #0]
    49ee:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    49f2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    49f6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    49f8:	d00c      	beq.n	4a14 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    49fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    49fe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a02:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4a06:	f013 0301 	ands.w	r3, r3, #1
    4a0a:	d003      	beq.n	4a14 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4a0c:	480a      	ldr	r0, [pc, #40]	; (4a38 <generic_hfclk_start+0x60>)
    4a0e:	f004 ffb2 	bl	9976 <set_on_state>
			already_started = true;
    4a12:	2301      	movs	r3, #1
	__asm__ volatile(
    4a14:	f381 8811 	msr	BASEPRI, r1
    4a18:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4a1c:	b123      	cbz	r3, 4a28 <generic_hfclk_start+0x50>
}
    4a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4a22:	2000      	movs	r0, #0
    4a24:	f7ff bfb0 	b.w	4988 <clkstarted_handle.constprop.0>
}
    4a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4a2c:	2001      	movs	r0, #1
    4a2e:	f005 ba7a 	b.w	9f26 <nrfx_clock_start>
    4a32:	bf00      	nop
    4a34:	20003870 	.word	0x20003870
    4a38:	20003860 	.word	0x20003860

00004a3c <api_blocking_start>:
{
    4a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4a3e:	2200      	movs	r2, #0
    4a40:	2301      	movs	r3, #1
    4a42:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4a46:	4a09      	ldr	r2, [pc, #36]	; (4a6c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4a48:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4a4c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4a4e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4a52:	f005 f800 	bl	9a56 <api_start>
	if (err < 0) {
    4a56:	2800      	cmp	r0, #0
    4a58:	db05      	blt.n	4a66 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4a5e:	2300      	movs	r3, #0
    4a60:	4668      	mov	r0, sp
    4a62:	f003 f9ff 	bl	7e64 <z_impl_k_sem_take>
}
    4a66:	b005      	add	sp, #20
    4a68:	f85d fb04 	ldr.w	pc, [sp], #4
    4a6c:	00009a83 	.word	0x00009a83

00004a70 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a70:	4b09      	ldr	r3, [pc, #36]	; (4a98 <generic_hfclk_stop+0x28>)
    4a72:	f3bf 8f5b 	dmb	ish
    4a76:	e853 2f00 	ldrex	r2, [r3]
    4a7a:	f022 0102 	bic.w	r1, r2, #2
    4a7e:	e843 1000 	strex	r0, r1, [r3]
    4a82:	2800      	cmp	r0, #0
    4a84:	d1f7      	bne.n	4a76 <generic_hfclk_stop+0x6>
    4a86:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4a8a:	07d3      	lsls	r3, r2, #31
    4a8c:	d402      	bmi.n	4a94 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4a8e:	2001      	movs	r0, #1
    4a90:	f001 b85c 	b.w	5b4c <nrfx_clock_stop>
}
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop
    4a98:	20003870 	.word	0x20003870

00004a9c <z_nrf_clock_control_get_onoff>:
}
    4a9c:	4a02      	ldr	r2, [pc, #8]	; (4aa8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    4a9e:	b2c3      	uxtb	r3, r0
}
    4aa0:	201c      	movs	r0, #28
    4aa2:	fb03 2000 	mla	r0, r3, r0, r2
    4aa6:	4770      	bx	lr
    4aa8:	20003820 	.word	0x20003820

00004aac <z_nrf_clock_control_lf_on>:
{
    4aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4ab0:	4939      	ldr	r1, [pc, #228]	; (4b98 <z_nrf_clock_control_lf_on+0xec>)
    4ab2:	f3bf 8f5b 	dmb	ish
    4ab6:	4607      	mov	r7, r0
    4ab8:	2201      	movs	r2, #1
    4aba:	e851 3f00 	ldrex	r3, [r1]
    4abe:	e841 2000 	strex	r0, r2, [r1]
    4ac2:	2800      	cmp	r0, #0
    4ac4:	d1f9      	bne.n	4aba <z_nrf_clock_control_lf_on+0xe>
    4ac6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4aca:	b933      	cbnz	r3, 4ada <z_nrf_clock_control_lf_on+0x2e>
    4acc:	4933      	ldr	r1, [pc, #204]	; (4b9c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    4ace:	4834      	ldr	r0, [pc, #208]	; (4ba0 <z_nrf_clock_control_lf_on+0xf4>)
    4ad0:	604b      	str	r3, [r1, #4]
    4ad2:	60cb      	str	r3, [r1, #12]
    4ad4:	608a      	str	r2, [r1, #8]
    4ad6:	f004 fa1c 	bl	8f12 <onoff_request>
	switch (start_mode) {
    4ada:	1e7b      	subs	r3, r7, #1
    4adc:	2b01      	cmp	r3, #1
    4ade:	d82f      	bhi.n	4b40 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4ae0:	2f01      	cmp	r7, #1
    4ae2:	d107      	bne.n	4af4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ae8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4aec:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4af0:	2b01      	cmp	r3, #1
    4af2:	d025      	beq.n	4b40 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4af4:	f005 fcdb 	bl	a4ae <k_is_in_isr>
    4af8:	4604      	mov	r4, r0
    4afa:	b918      	cbnz	r0, 4b04 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4afc:	4b29      	ldr	r3, [pc, #164]	; (4ba4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	2b00      	cmp	r3, #0
    4b02:	d141      	bne.n	4b88 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    4b04:	f04f 0320 	mov.w	r3, #32
    4b08:	f3ef 8611 	mrs	r6, BASEPRI
    4b0c:	f383 8812 	msr	BASEPRI_MAX, r3
    4b10:	f3bf 8f6f 	isb	sy
    4b14:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b16:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4ba8 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4b1a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4b1e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b22:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    4b26:	03d2      	lsls	r2, r2, #15
    4b28:	d50c      	bpl.n	4b44 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4b2a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4b2e:	2b01      	cmp	r3, #1
    4b30:	d001      	beq.n	4b36 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4b32:	2f01      	cmp	r7, #1
    4b34:	d106      	bne.n	4b44 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    4b36:	b30c      	cbz	r4, 4b7c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    4b38:	f386 8811 	msr	BASEPRI, r6
    4b3c:	f3bf 8f6f 	isb	sy
}
    4b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b44:	b1ac      	cbz	r4, 4b72 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4b46:	4630      	mov	r0, r6
    4b48:	f7fe fdbc 	bl	36c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4b4c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4b50:	2b00      	cmp	r3, #0
    4b52:	d1e4      	bne.n	4b1e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4b54:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4b58:	2a00      	cmp	r2, #0
    4b5a:	d0e0      	beq.n	4b1e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b5c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4b60:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b64:	2301      	movs	r3, #1
    4b66:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    4b6a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b6e:	60ab      	str	r3, [r5, #8]
}
    4b70:	e7d5      	b.n	4b1e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    4b72:	2100      	movs	r1, #0
    4b74:	2021      	movs	r0, #33	; 0x21
    4b76:	f003 fd91 	bl	869c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b7a:	e7e7      	b.n	4b4c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    4b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b80:	2202      	movs	r2, #2
    4b82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4b86:	e7db      	b.n	4b40 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    4b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b8c:	2202      	movs	r2, #2
    4b8e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4b92:	4606      	mov	r6, r0
}
    4b94:	e7bf      	b.n	4b16 <z_nrf_clock_control_lf_on+0x6a>
    4b96:	bf00      	nop
    4b98:	20003874 	.word	0x20003874
    4b9c:	20003810 	.word	0x20003810
    4ba0:	2000383c 	.word	0x2000383c
    4ba4:	20003c0b 	.word	0x20003c0b
    4ba8:	e000e100 	.word	0xe000e100

00004bac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4bac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4bae:	4b08      	ldr	r3, [pc, #32]	; (4bd0 <uart_console_init+0x24>)
    4bb0:	4808      	ldr	r0, [pc, #32]	; (4bd4 <uart_console_init+0x28>)
    4bb2:	6018      	str	r0, [r3, #0]
    4bb4:	f005 fc21 	bl	a3fa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4bb8:	b138      	cbz	r0, 4bca <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4bba:	4807      	ldr	r0, [pc, #28]	; (4bd8 <uart_console_init+0x2c>)
    4bbc:	f7ff f866 	bl	3c8c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4bc0:	4805      	ldr	r0, [pc, #20]	; (4bd8 <uart_console_init+0x2c>)
    4bc2:	f7fc fb97 	bl	12f4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4bc6:	2000      	movs	r0, #0
}
    4bc8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4bca:	f06f 0012 	mvn.w	r0, #18
    4bce:	e7fb      	b.n	4bc8 <uart_console_init+0x1c>
    4bd0:	20003878 	.word	0x20003878
    4bd4:	0000ab44 	.word	0x0000ab44
    4bd8:	00004bdd 	.word	0x00004bdd

00004bdc <console_out>:
	if ('\n' == c) {
    4bdc:	280a      	cmp	r0, #10
{
    4bde:	b538      	push	{r3, r4, r5, lr}
    4be0:	4d07      	ldr	r5, [pc, #28]	; (4c00 <console_out+0x24>)
    4be2:	4604      	mov	r4, r0
	if ('\n' == c) {
    4be4:	d104      	bne.n	4bf0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    4be6:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    4be8:	6883      	ldr	r3, [r0, #8]
    4bea:	210d      	movs	r1, #13
    4bec:	685b      	ldr	r3, [r3, #4]
    4bee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4bf0:	6828      	ldr	r0, [r5, #0]
    4bf2:	6883      	ldr	r3, [r0, #8]
    4bf4:	b2e1      	uxtb	r1, r4
    4bf6:	685b      	ldr	r3, [r3, #4]
    4bf8:	4798      	blx	r3
}
    4bfa:	4620      	mov	r0, r4
    4bfc:	bd38      	pop	{r3, r4, r5, pc}
    4bfe:	bf00      	nop
    4c00:	20003878 	.word	0x20003878

00004c04 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4c04:	b530      	push	{r4, r5, lr}
	return port->config;
    4c06:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c08:	7b04      	ldrb	r4, [r0, #12]
    4c0a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4c0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c12:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    4c16:	b085      	sub	sp, #20
    4c18:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c1c:	d104      	bne.n	4c28 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    4c1e:	4628      	mov	r0, r5
    4c20:	f001 fa42 	bl	60a8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    4c24:	2000      	movs	r0, #0
    4c26:	e032      	b.n	4c8e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c28:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c2c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c30:	d12f      	bne.n	4c92 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4c36:	bf0c      	ite	eq
    4c38:	2304      	moveq	r3, #4
    4c3a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c3c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4c40:	6883      	ldr	r3, [r0, #8]
    4c42:	fa23 f101 	lsr.w	r1, r3, r1
    4c46:	07c9      	lsls	r1, r1, #31
    4c48:	d42f      	bmi.n	4caa <gpio_nrfx_pin_interrupt_configure+0xa6>
    4c4a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4c4e:	d12c      	bne.n	4caa <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4c50:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    4c52:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4c54:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    4c58:	4a1c      	ldr	r2, [pc, #112]	; (4ccc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4c5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4c5e:	bf18      	it	ne
    4c60:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4c68:	07db      	lsls	r3, r3, #31
    4c6a:	d41e      	bmi.n	4caa <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4c6c:	f10d 0407 	add.w	r4, sp, #7
    4c70:	4621      	mov	r1, r4
    4c72:	4628      	mov	r0, r5
    4c74:	f001 f97c 	bl	5f70 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4c78:	4b15      	ldr	r3, [pc, #84]	; (4cd0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    4c7a:	4298      	cmp	r0, r3
    4c7c:	d114      	bne.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    4c7e:	4620      	mov	r0, r4
    4c80:	f001 f9c4 	bl	600c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4c84:	4b13      	ldr	r3, [pc, #76]	; (4cd4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4c86:	4298      	cmp	r0, r3
    4c88:	d00e      	beq.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    4c8a:	f06f 000b 	mvn.w	r0, #11
}
    4c8e:	b005      	add	sp, #20
    4c90:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4c92:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4c96:	d005      	beq.n	4ca4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    4c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4c9c:	bf0c      	ite	eq
    4c9e:	2302      	moveq	r3, #2
    4ca0:	2301      	movne	r3, #1
    4ca2:	e7cb      	b.n	4c3c <gpio_nrfx_pin_interrupt_configure+0x38>
    4ca4:	2303      	movs	r3, #3
    4ca6:	e7c9      	b.n	4c3c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    4ca8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4caa:	2300      	movs	r3, #0
    4cac:	4619      	mov	r1, r3
    4cae:	aa02      	add	r2, sp, #8
    4cb0:	4628      	mov	r0, r5
    4cb2:	f001 f837 	bl	5d24 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4cb6:	4b07      	ldr	r3, [pc, #28]	; (4cd4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4cb8:	4298      	cmp	r0, r3
    4cba:	d104      	bne.n	4cc6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4cbc:	2101      	movs	r1, #1
    4cbe:	4628      	mov	r0, r5
    4cc0:	f001 f9aa 	bl	6018 <nrfx_gpiote_trigger_enable>
    4cc4:	e7ae      	b.n	4c24 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    4cc6:	f06f 0004 	mvn.w	r0, #4
    4cca:	e7e0      	b.n	4c8e <gpio_nrfx_pin_interrupt_configure+0x8a>
    4ccc:	50000300 	.word	0x50000300
    4cd0:	0bad0004 	.word	0x0bad0004
    4cd4:	0bad0000 	.word	0x0bad0000

00004cd8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4cd8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4cda:	f001 f987 	bl	5fec <nrfx_gpiote_is_init>
    4cde:	4604      	mov	r4, r0
    4ce0:	b968      	cbnz	r0, 4cfe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4ce2:	f001 f95b 	bl	5f9c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4ce6:	4b08      	ldr	r3, [pc, #32]	; (4d08 <gpio_nrfx_init+0x30>)
    4ce8:	4298      	cmp	r0, r3
    4cea:	d10a      	bne.n	4d02 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4cec:	4807      	ldr	r0, [pc, #28]	; (4d0c <gpio_nrfx_init+0x34>)
    4cee:	4621      	mov	r1, r4
    4cf0:	f001 f938 	bl	5f64 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4cf4:	4622      	mov	r2, r4
    4cf6:	2105      	movs	r1, #5
    4cf8:	2006      	movs	r0, #6
    4cfa:	f7fe fd1f 	bl	373c <z_arm_irq_priority_set>
		return 0;
    4cfe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4d00:	bd10      	pop	{r4, pc}
		return -EIO;
    4d02:	f06f 0004 	mvn.w	r0, #4
    4d06:	e7fb      	b.n	4d00 <gpio_nrfx_init+0x28>
    4d08:	0bad0000 	.word	0x0bad0000
    4d0c:	00004d11 	.word	0x00004d11

00004d10 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d10:	0942      	lsrs	r2, r0, #5
{
    4d12:	b570      	push	{r4, r5, r6, lr}
    4d14:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d16:	d002      	beq.n	4d1e <nrfx_gpio_handler+0xe>
    4d18:	2a01      	cmp	r2, #1
    4d1a:	d015      	beq.n	4d48 <nrfx_gpio_handler+0x38>
}
    4d1c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d1e:	4e0b      	ldr	r6, [pc, #44]	; (4d4c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4d20:	6932      	ldr	r2, [r6, #16]
    4d22:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d24:	2900      	cmp	r1, #0
    4d26:	d0f9      	beq.n	4d1c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    4d28:	f003 031f 	and.w	r3, r3, #31
    4d2c:	2501      	movs	r5, #1
    4d2e:	680c      	ldr	r4, [r1, #0]
    4d30:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    4d32:	688a      	ldr	r2, [r1, #8]
    4d34:	402a      	ands	r2, r5
    4d36:	d002      	beq.n	4d3e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4d38:	684b      	ldr	r3, [r1, #4]
    4d3a:	4630      	mov	r0, r6
    4d3c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d3e:	2c00      	cmp	r4, #0
    4d40:	d0ec      	beq.n	4d1c <nrfx_gpio_handler+0xc>
    4d42:	4621      	mov	r1, r4
    4d44:	6824      	ldr	r4, [r4, #0]
    4d46:	e7f4      	b.n	4d32 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d48:	4e01      	ldr	r6, [pc, #4]	; (4d50 <nrfx_gpio_handler+0x40>)
    4d4a:	e7e9      	b.n	4d20 <nrfx_gpio_handler+0x10>
    4d4c:	0000ab14 	.word	0x0000ab14
    4d50:	0000ab2c 	.word	0x0000ab2c

00004d54 <gpio_nrfx_pin_configure>:
{
    4d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4d58:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4d5a:	7b3b      	ldrb	r3, [r7, #12]
    4d5c:	f001 051f 	and.w	r5, r1, #31
{
    4d60:	b085      	sub	sp, #20
    4d62:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4d64:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4d68:	4614      	mov	r4, r2
    4d6a:	b9ca      	cbnz	r2, 4da0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4d6c:	a902      	add	r1, sp, #8
    4d6e:	4628      	mov	r0, r5
    4d70:	f001 f8fe 	bl	5f70 <nrfx_gpiote_channel_get>
    4d74:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4d76:	4628      	mov	r0, r5
    4d78:	f001 f9be 	bl	60f8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4d7c:	4b48      	ldr	r3, [pc, #288]	; (4ea0 <gpio_nrfx_pin_configure+0x14c>)
    4d7e:	4298      	cmp	r0, r3
    4d80:	d004      	beq.n	4d8c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4d82:	f06f 0004 	mvn.w	r0, #4
}
    4d86:	b005      	add	sp, #20
    4d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4d8c:	4284      	cmp	r4, r0
    4d8e:	d105      	bne.n	4d9c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4d90:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4d94:	f001 f934 	bl	6000 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4d98:	42a0      	cmp	r0, r4
    4d9a:	d1f2      	bne.n	4d82 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4d9c:	2000      	movs	r0, #0
    4d9e:	e7f2      	b.n	4d86 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4da0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4da4:	f10d 0103 	add.w	r1, sp, #3
    4da8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4daa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4dae:	f001 f8df 	bl	5f70 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4db2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4db4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4db6:	aa02      	add	r2, sp, #8
    4db8:	4649      	mov	r1, r9
    4dba:	4628      	mov	r0, r5
    4dbc:	f000 ffb2 	bl	5d24 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4dc0:	4b37      	ldr	r3, [pc, #220]	; (4ea0 <gpio_nrfx_pin_configure+0x14c>)
    4dc2:	4298      	cmp	r0, r3
    4dc4:	d002      	beq.n	4dcc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4dc6:	f06f 0015 	mvn.w	r0, #21
    4dca:	e7dc      	b.n	4d86 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4dcc:	4580      	cmp	r8, r0
    4dce:	d103      	bne.n	4dd8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    4dd0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4dd4:	f001 f914 	bl	6000 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4dd8:	05a3      	lsls	r3, r4, #22
    4dda:	d54e      	bpl.n	4e7a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ddc:	4b31      	ldr	r3, [pc, #196]	; (4ea4 <gpio_nrfx_pin_configure+0x150>)
    4dde:	4a32      	ldr	r2, [pc, #200]	; (4ea8 <gpio_nrfx_pin_configure+0x154>)
    4de0:	4023      	ands	r3, r4
    4de2:	4293      	cmp	r3, r2
    4de4:	d03a      	beq.n	4e5c <gpio_nrfx_pin_configure+0x108>
    4de6:	d80c      	bhi.n	4e02 <gpio_nrfx_pin_configure+0xae>
    4de8:	2b06      	cmp	r3, #6
    4dea:	d014      	beq.n	4e16 <gpio_nrfx_pin_configure+0xc2>
    4dec:	d804      	bhi.n	4df8 <gpio_nrfx_pin_configure+0xa4>
    4dee:	b193      	cbz	r3, 4e16 <gpio_nrfx_pin_configure+0xc2>
    4df0:	2b02      	cmp	r3, #2
    4df2:	d1e8      	bne.n	4dc6 <gpio_nrfx_pin_configure+0x72>
    4df4:	2304      	movs	r3, #4
    4df6:	e00e      	b.n	4e16 <gpio_nrfx_pin_configure+0xc2>
    4df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4dfc:	d1e3      	bne.n	4dc6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    4dfe:	2301      	movs	r3, #1
    4e00:	e009      	b.n	4e16 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4e02:	4a2a      	ldr	r2, [pc, #168]	; (4eac <gpio_nrfx_pin_configure+0x158>)
    4e04:	4293      	cmp	r3, r2
    4e06:	d02b      	beq.n	4e60 <gpio_nrfx_pin_configure+0x10c>
    4e08:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4e0c:	d02a      	beq.n	4e64 <gpio_nrfx_pin_configure+0x110>
    4e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4e12:	d1d8      	bne.n	4dc6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4e14:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4e16:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4e1a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    4e1e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    4e22:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4e24:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4e28:	bf54      	ite	pl
    4e2a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4e2e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4e30:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    4e32:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4e36:	d517      	bpl.n	4e68 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2101      	movs	r1, #1
    4e3c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    4e40:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4e44:	2200      	movs	r2, #0
    4e46:	a901      	add	r1, sp, #4
    4e48:	4628      	mov	r0, r5
    4e4a:	f001 f819 	bl	5e80 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4e4e:	4b14      	ldr	r3, [pc, #80]	; (4ea0 <gpio_nrfx_pin_configure+0x14c>)
    4e50:	4298      	cmp	r0, r3
    4e52:	bf14      	ite	ne
    4e54:	f06f 0015 	mvnne.w	r0, #21
    4e58:	2000      	moveq	r0, #0
    4e5a:	e794      	b.n	4d86 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4e5c:	2307      	movs	r3, #7
    4e5e:	e7da      	b.n	4e16 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    4e60:	2305      	movs	r3, #5
    4e62:	e7d8      	b.n	4e16 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    4e64:	2303      	movs	r3, #3
    4e66:	e7d6      	b.n	4e16 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4e68:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4e6a:	bf41      	itttt	mi
    4e6c:	687b      	ldrmi	r3, [r7, #4]
    4e6e:	2101      	movmi	r1, #1
    4e70:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    4e74:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    4e78:	e7e4      	b.n	4e44 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    4e7a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4e7c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4e80:	bf54      	ite	pl
    4e82:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    4e86:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4e88:	461a      	mov	r2, r3
    4e8a:	a901      	add	r1, sp, #4
    4e8c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4e8e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4e92:	f000 ff47 	bl	5d24 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4e96:	4b02      	ldr	r3, [pc, #8]	; (4ea0 <gpio_nrfx_pin_configure+0x14c>)
    4e98:	4298      	cmp	r0, r3
    4e9a:	f43f af7f 	beq.w	4d9c <gpio_nrfx_pin_configure+0x48>
    4e9e:	e792      	b.n	4dc6 <gpio_nrfx_pin_configure+0x72>
    4ea0:	0bad0000 	.word	0x0bad0000
    4ea4:	00f00006 	.word	0x00f00006
    4ea8:	00100006 	.word	0x00100006
    4eac:	00400002 	.word	0x00400002

00004eb0 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    4eb0:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    4eb2:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    4eb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    4eb8:	f002 fc32 	bl	7720 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4ebc:	4b03      	ldr	r3, [pc, #12]	; (4ecc <i2c_nrfx_twi_recover_bus+0x1c>)
    4ebe:	4298      	cmp	r0, r3
}
    4ec0:	bf14      	ite	ne
    4ec2:	f06f 000f 	mvnne.w	r0, #15
    4ec6:	2000      	moveq	r0, #0
    4ec8:	bd08      	pop	{r3, pc}
    4eca:	bf00      	nop
    4ecc:	0bad0000 	.word	0x0bad0000

00004ed0 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    4ed0:	b510      	push	{r4, lr}
    4ed2:	4604      	mov	r4, r0
    4ed4:	2200      	movs	r2, #0
    4ed6:	2101      	movs	r1, #1
    4ed8:	2003      	movs	r0, #3
    4eda:	f7fe fc2f 	bl	373c <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
    4ede:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    4ee0:	6923      	ldr	r3, [r4, #16]
    4ee2:	4a06      	ldr	r2, [pc, #24]	; (4efc <twi_0_init+0x2c>)
    4ee4:	f100 0108 	add.w	r1, r0, #8
    4ee8:	f001 fb86 	bl	65f8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    4eec:	4b04      	ldr	r3, [pc, #16]	; (4f00 <twi_0_init+0x30>)
		return -EBUSY;
    4eee:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    4ef0:	bf14      	ite	ne
    4ef2:	f06f 000f 	mvnne.w	r0, #15
    4ef6:	2000      	moveq	r0, #0
    4ef8:	bd10      	pop	{r4, pc}
    4efa:	bf00      	nop
    4efc:	00004f05 	.word	0x00004f05
    4f00:	0bad0000 	.word	0x0bad0000

00004f04 <event_handler>:
	switch (p_event->type) {
    4f04:	7803      	ldrb	r3, [r0, #0]
    4f06:	2b01      	cmp	r3, #1
    4f08:	d008      	beq.n	4f1c <event_handler+0x18>
    4f0a:	2b02      	cmp	r3, #2
    4f0c:	d008      	beq.n	4f20 <event_handler+0x1c>
    4f0e:	b94b      	cbnz	r3, 4f24 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    4f10:	4b05      	ldr	r3, [pc, #20]	; (4f28 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    4f12:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    4f14:	f101 0010 	add.w	r0, r1, #16
    4f18:	f002 bf84 	b.w	7e24 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4f1c:	4b03      	ldr	r3, [pc, #12]	; (4f2c <event_handler+0x28>)
    4f1e:	e7f8      	b.n	4f12 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4f20:	4b03      	ldr	r3, [pc, #12]	; (4f30 <event_handler+0x2c>)
    4f22:	e7f6      	b.n	4f12 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    4f24:	4b03      	ldr	r3, [pc, #12]	; (4f34 <event_handler+0x30>)
    4f26:	e7f4      	b.n	4f12 <event_handler+0xe>
    4f28:	0bad0000 	.word	0x0bad0000
    4f2c:	0bae0001 	.word	0x0bae0001
    4f30:	0bae0002 	.word	0x0bae0002
    4f34:	0bad0001 	.word	0x0bad0001

00004f38 <twi_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
    4f38:	b510      	push	{r4, lr}
    4f3a:	4604      	mov	r4, r0
    4f3c:	2200      	movs	r2, #0
    4f3e:	2101      	movs	r1, #1
    4f40:	2004      	movs	r0, #4
    4f42:	f7fe fbfb 	bl	373c <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
    4f46:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    4f48:	6923      	ldr	r3, [r4, #16]
    4f4a:	4a06      	ldr	r2, [pc, #24]	; (4f64 <twi_1_init+0x2c>)
    4f4c:	f100 0108 	add.w	r1, r0, #8
    4f50:	f001 fb52 	bl	65f8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    4f54:	4b04      	ldr	r3, [pc, #16]	; (4f68 <twi_1_init+0x30>)
		return -EBUSY;
    4f56:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(1);
    4f58:	bf14      	ite	ne
    4f5a:	f06f 000f 	mvnne.w	r0, #15
    4f5e:	2000      	moveq	r0, #0
    4f60:	bd10      	pop	{r4, pc}
    4f62:	bf00      	nop
    4f64:	00004f05 	.word	0x00004f05
    4f68:	0bad0000 	.word	0x0bad0000

00004f6c <i2c_nrfx_twi_transfer>:
{
    4f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f70:	460c      	mov	r4, r1
    4f72:	b089      	sub	sp, #36	; 0x24
    4f74:	4617      	mov	r7, r2
    4f76:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    4f78:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    4f7a:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    4f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f84:	4630      	mov	r0, r6
    4f86:	f002 ff6d 	bl	7e64 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    4f8a:	f106 0a10 	add.w	sl, r6, #16
    4f8e:	2200      	movs	r2, #0
    4f90:	2300      	movs	r3, #0
    4f92:	4650      	mov	r0, sl
    4f94:	f002 ff66 	bl	7e64 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    4f98:	4628      	mov	r0, r5
    4f9a:	f001 fb8b 	bl	66b4 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    4f9e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 505c <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
    4fa2:	f04f 0800 	mov.w	r8, #0
    4fa6:	45b8      	cmp	r8, r7
    4fa8:	d301      	bcc.n	4fae <i2c_nrfx_twi_transfer+0x42>
    4faa:	2400      	movs	r4, #0
    4fac:	e02b      	b.n	5006 <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    4fae:	7a23      	ldrb	r3, [r4, #8]
    4fb0:	9301      	str	r3, [sp, #4]
    4fb2:	f013 0108 	ands.w	r1, r3, #8
    4fb6:	d14b      	bne.n	5050 <i2c_nrfx_twi_transfer+0xe4>
		nrfx_twi_xfer_desc_t cur_xfer = {
    4fb8:	2214      	movs	r2, #20
    4fba:	a803      	add	r0, sp, #12
    4fbc:	9100      	str	r1, [sp, #0]
    4fbe:	f005 fd36 	bl	aa2e <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    4fc2:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    4fc4:	6860      	ldr	r0, [r4, #4]
    4fc6:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    4fc8:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    4fcc:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    4fce:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    4fd0:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    4fd4:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    4fd8:	f88d 900d 	strb.w	r9, [sp, #13]
    4fdc:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    4fde:	d11c      	bne.n	501a <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
    4fe0:	1e7b      	subs	r3, r7, #1
    4fe2:	4543      	cmp	r3, r8
    4fe4:	d902      	bls.n	4fec <i2c_nrfx_twi_transfer+0x80>
    4fe6:	7d23      	ldrb	r3, [r4, #20]
    4fe8:	075b      	lsls	r3, r3, #29
    4fea:	d518      	bpl.n	501e <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    4fec:	bb82      	cbnz	r2, 5050 <i2c_nrfx_twi_transfer+0xe4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    4fee:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    4ff0:	a903      	add	r1, sp, #12
    4ff2:	4628      	mov	r0, r5
    4ff4:	f001 fb8c 	bl	6710 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    4ff8:	4558      	cmp	r0, fp
    4ffa:	d012      	beq.n	5022 <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
    4ffc:	4b18      	ldr	r3, [pc, #96]	; (5060 <i2c_nrfx_twi_transfer+0xf4>)
    4ffe:	4298      	cmp	r0, r3
    5000:	d029      	beq.n	5056 <i2c_nrfx_twi_transfer+0xea>
			ret = -EIO;
    5002:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    5006:	4628      	mov	r0, r5
    5008:	f001 fb64 	bl	66d4 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    500c:	4630      	mov	r0, r6
    500e:	f002 ff09 	bl	7e24 <z_impl_k_sem_give>
}
    5012:	4620      	mov	r0, r4
    5014:	b009      	add	sp, #36	; 0x24
    5016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    501a:	460a      	mov	r2, r1
    501c:	e7e8      	b.n	4ff0 <i2c_nrfx_twi_transfer+0x84>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    501e:	2240      	movs	r2, #64	; 0x40
    5020:	e7e6      	b.n	4ff0 <i2c_nrfx_twi_transfer+0x84>
	return z_impl_k_sem_take(sem, timeout);
    5022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5026:	2300      	movs	r3, #0
    5028:	4650      	mov	r0, sl
    502a:	f002 ff1b 	bl	7e64 <z_impl_k_sem_take>
		if (ret != 0) {
    502e:	b138      	cbz	r0, 5040 <i2c_nrfx_twi_transfer+0xd4>
			nrfx_twi_disable(&config->twi);
    5030:	4628      	mov	r0, r5
    5032:	f001 fb4f 	bl	66d4 <nrfx_twi_disable>
    5036:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    503a:	f002 fb71 	bl	7720 <nrfx_twi_twim_bus_recover>
    503e:	e7e0      	b.n	5002 <i2c_nrfx_twi_transfer+0x96>
		res = data->res;
    5040:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    5042:	455b      	cmp	r3, fp
    5044:	f104 040c 	add.w	r4, r4, #12
    5048:	d1db      	bne.n	5002 <i2c_nrfx_twi_transfer+0x96>
	for (size_t i = 0; i < num_msgs; i++) {
    504a:	f108 0801 	add.w	r8, r8, #1
    504e:	e7aa      	b.n	4fa6 <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
    5050:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5054:	e7d7      	b.n	5006 <i2c_nrfx_twi_transfer+0x9a>
				ret = -EBUSY;
    5056:	f06f 040f 	mvn.w	r4, #15
    505a:	e7d4      	b.n	5006 <i2c_nrfx_twi_transfer+0x9a>
    505c:	0bad0000 	.word	0x0bad0000
    5060:	0bad000b 	.word	0x0bad000b

00005064 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5064:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    5066:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    506a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    506c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    506e:	6002      	str	r2, [r0, #0]
}
    5070:	4802      	ldr	r0, [pc, #8]	; (507c <nrf_gpio_pin_port_decode+0x18>)
    5072:	bf18      	it	ne
    5074:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    5078:	4770      	bx	lr
    507a:	bf00      	nop
    507c:	50000300 	.word	0x50000300

00005080 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    5080:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5082:	794b      	ldrb	r3, [r1, #5]
    5084:	2b01      	cmp	r3, #1
    5086:	d026      	beq.n	50d6 <uarte_nrfx_configure+0x56>
    5088:	2b03      	cmp	r3, #3
    508a:	d121      	bne.n	50d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    508c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    508e:	798b      	ldrb	r3, [r1, #6]
    5090:	2b03      	cmp	r3, #3
    5092:	d11d      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5094:	79cc      	ldrb	r4, [r1, #7]
    5096:	b10c      	cbz	r4, 509c <uarte_nrfx_configure+0x1c>
    5098:	2c01      	cmp	r4, #1
    509a:	d119      	bne.n	50d0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    509c:	790a      	ldrb	r2, [r1, #4]
    509e:	b112      	cbz	r2, 50a6 <uarte_nrfx_configure+0x26>
    50a0:	2a02      	cmp	r2, #2
    50a2:	d115      	bne.n	50d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    50a4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    50a6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    50a8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    50aa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    50ae:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    50b0:	d065      	beq.n	517e <uarte_nrfx_configure+0xfe>
    50b2:	d82d      	bhi.n	5110 <uarte_nrfx_configure+0x90>
    50b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    50b8:	d064      	beq.n	5184 <uarte_nrfx_configure+0x104>
    50ba:	d816      	bhi.n	50ea <uarte_nrfx_configure+0x6a>
    50bc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    50c0:	d062      	beq.n	5188 <uarte_nrfx_configure+0x108>
    50c2:	d80a      	bhi.n	50da <uarte_nrfx_configure+0x5a>
    50c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    50c8:	d061      	beq.n	518e <uarte_nrfx_configure+0x10e>
    50ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    50ce:	d061      	beq.n	5194 <uarte_nrfx_configure+0x114>
    50d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    50d4:	e052      	b.n	517c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    50d6:	2600      	movs	r6, #0
    50d8:	e7d9      	b.n	508e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    50da:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    50de:	d05c      	beq.n	519a <uarte_nrfx_configure+0x11a>
    50e0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    50e4:	d1f4      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    50e6:	4b37      	ldr	r3, [pc, #220]	; (51c4 <uarte_nrfx_configure+0x144>)
    50e8:	e03c      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50ea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    50ee:	d057      	beq.n	51a0 <uarte_nrfx_configure+0x120>
    50f0:	d807      	bhi.n	5102 <uarte_nrfx_configure+0x82>
    50f2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    50f6:	d055      	beq.n	51a4 <uarte_nrfx_configure+0x124>
    50f8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    50fc:	d1e8      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    50fe:	4b32      	ldr	r3, [pc, #200]	; (51c8 <uarte_nrfx_configure+0x148>)
    5100:	e030      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5102:	f647 2712 	movw	r7, #31250	; 0x7a12
    5106:	42bb      	cmp	r3, r7
    5108:	d1e2      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    510a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    510e:	e029      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5110:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5114:	d048      	beq.n	51a8 <uarte_nrfx_configure+0x128>
    5116:	d813      	bhi.n	5140 <uarte_nrfx_configure+0xc0>
    5118:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    511c:	d047      	beq.n	51ae <uarte_nrfx_configure+0x12e>
    511e:	d809      	bhi.n	5134 <uarte_nrfx_configure+0xb4>
    5120:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5124:	42bb      	cmp	r3, r7
    5126:	d044      	beq.n	51b2 <uarte_nrfx_configure+0x132>
    5128:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    512c:	d1d0      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    512e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5132:	e017      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5134:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5138:	d1ca      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    513a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    513e:	e011      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5140:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5144:	d038      	beq.n	51b8 <uarte_nrfx_configure+0x138>
    5146:	d808      	bhi.n	515a <uarte_nrfx_configure+0xda>
    5148:	4f20      	ldr	r7, [pc, #128]	; (51cc <uarte_nrfx_configure+0x14c>)
    514a:	42bb      	cmp	r3, r7
    514c:	d037      	beq.n	51be <uarte_nrfx_configure+0x13e>
    514e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5152:	d1bd      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5154:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5158:	e004      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    515a:	4f1d      	ldr	r7, [pc, #116]	; (51d0 <uarte_nrfx_configure+0x150>)
    515c:	42bb      	cmp	r3, r7
    515e:	d1b7      	bne.n	50d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5164:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5166:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    516a:	1d03      	adds	r3, r0, #4
    516c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    516e:	4334      	orrs	r4, r6
    5170:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5172:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5176:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    517a:	2000      	movs	r0, #0
}
    517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    517e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5182:	e7ef      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5184:	4b13      	ldr	r3, [pc, #76]	; (51d4 <uarte_nrfx_configure+0x154>)
    5186:	e7ed      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5188:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    518c:	e7ea      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    518e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5192:	e7e7      	b.n	5164 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5194:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5198:	e7e4      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    519a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    519e:	e7e1      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    51a0:	4b0d      	ldr	r3, [pc, #52]	; (51d8 <uarte_nrfx_configure+0x158>)
    51a2:	e7df      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    51a4:	4b0d      	ldr	r3, [pc, #52]	; (51dc <uarte_nrfx_configure+0x15c>)
    51a6:	e7dd      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    51a8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    51ac:	e7da      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    51ae:	4b0c      	ldr	r3, [pc, #48]	; (51e0 <uarte_nrfx_configure+0x160>)
    51b0:	e7d8      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    51b2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    51b6:	e7d5      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    51b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    51bc:	e7d2      	b.n	5164 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    51be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    51c2:	e7cf      	b.n	5164 <uarte_nrfx_configure+0xe4>
    51c4:	0013b000 	.word	0x0013b000
    51c8:	004ea000 	.word	0x004ea000
    51cc:	0003d090 	.word	0x0003d090
    51d0:	000f4240 	.word	0x000f4240
    51d4:	00275000 	.word	0x00275000
    51d8:	0075c000 	.word	0x0075c000
    51dc:	003af000 	.word	0x003af000
    51e0:	013a9000 	.word	0x013a9000

000051e4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    51e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    51e6:	6906      	ldr	r6, [r0, #16]
{
    51e8:	4605      	mov	r5, r0
    51ea:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    51ec:	f005 f95f 	bl	a4ae <k_is_in_isr>
    51f0:	b910      	cbnz	r0, 51f8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    51f2:	4b20      	ldr	r3, [pc, #128]	; (5274 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    51f4:	781b      	ldrb	r3, [r3, #0]
    51f6:	b983      	cbnz	r3, 521a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    51f8:	f04f 0320 	mov.w	r3, #32
    51fc:	f3ef 8411 	mrs	r4, BASEPRI
    5200:	f383 8812 	msr	BASEPRI_MAX, r3
    5204:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    5208:	6868      	ldr	r0, [r5, #4]
    520a:	f004 fdb4 	bl	9d76 <is_tx_ready.isra.0>
    520e:	bb28      	cbnz	r0, 525c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    5210:	f384 8811 	msr	BASEPRI, r4
    5214:	f3bf 8f6f 	isb	sy
}
    5218:	e7ee      	b.n	51f8 <uarte_nrfx_poll_out+0x14>
{
    521a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    521c:	6868      	ldr	r0, [r5, #4]
    521e:	f004 fdaa 	bl	9d76 <is_tx_ready.isra.0>
    5222:	b970      	cbnz	r0, 5242 <uarte_nrfx_poll_out+0x5e>
    5224:	2001      	movs	r0, #1
    5226:	f004 fe7c 	bl	9f22 <nrfx_busy_wait>
    522a:	3c01      	subs	r4, #1
    522c:	d1f6      	bne.n	521c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    522e:	2100      	movs	r1, #0
    5230:	2021      	movs	r0, #33	; 0x21
    5232:	f003 fa33 	bl	869c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5236:	e7f0      	b.n	521a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    5238:	f384 8811 	msr	BASEPRI, r4
    523c:	f3bf 8f6f 	isb	sy
}
    5240:	e7f5      	b.n	522e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    5242:	f04f 0320 	mov.w	r3, #32
    5246:	f3ef 8411 	mrs	r4, BASEPRI
    524a:	f383 8812 	msr	BASEPRI_MAX, r3
    524e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5252:	6868      	ldr	r0, [r5, #4]
    5254:	f004 fd8f 	bl	9d76 <is_tx_ready.isra.0>
    5258:	2800      	cmp	r0, #0
    525a:	d0ed      	beq.n	5238 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    525c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    525e:	2201      	movs	r2, #1
	data->char_out = c;
    5260:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    5264:	6868      	ldr	r0, [r5, #4]
    5266:	f004 fd6b 	bl	9d40 <tx_start.isra.0>
	__asm__ volatile(
    526a:	f384 8811 	msr	BASEPRI, r4
    526e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5274:	20003c0b 	.word	0x20003c0b

00005278 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
    527c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5280:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    5282:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5286:	2300      	movs	r3, #0
    5288:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    528c:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    528e:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5290:	68eb      	ldr	r3, [r5, #12]
    5292:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
    5294:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5296:	d013      	beq.n	52c0 <uarte_instance_init.constprop.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5298:	a801      	add	r0, sp, #4
    529a:	9301      	str	r3, [sp, #4]
    529c:	f7ff fee2 	bl	5064 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    52a0:	9a01      	ldr	r2, [sp, #4]
    52a2:	2301      	movs	r3, #1
    52a4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    52a6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    52aa:	68eb      	ldr	r3, [r5, #12]
    52ac:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    52ae:	a801      	add	r0, sp, #4
    52b0:	f7ff fed8 	bl	5064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    52b4:	9b01      	ldr	r3, [sp, #4]
    52b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    52ba:	2203      	movs	r2, #3
    52bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    52c0:	6928      	ldr	r0, [r5, #16]
    52c2:	1c43      	adds	r3, r0, #1
    52c4:	d006      	beq.n	52d4 <uarte_instance_init.constprop.0+0x5c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    52c6:	7f2b      	ldrb	r3, [r5, #28]
    52c8:	2b00      	cmp	r3, #0
    52ca:	bf14      	ite	ne
    52cc:	2103      	movne	r1, #3
    52ce:	2100      	moveq	r1, #0
    52d0:	f004 fd28 	bl	9d24 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    52d4:	696b      	ldr	r3, [r5, #20]
    52d6:	1c5a      	adds	r2, r3, #1
    52d8:	d013      	beq.n	5302 <uarte_instance_init.constprop.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    52da:	a801      	add	r0, sp, #4
    52dc:	9301      	str	r3, [sp, #4]
    52de:	f7ff fec1 	bl	5064 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    52e2:	9a01      	ldr	r2, [sp, #4]
    52e4:	2301      	movs	r3, #1
    52e6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    52e8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    52ec:	696b      	ldr	r3, [r5, #20]
    52ee:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    52f0:	a801      	add	r0, sp, #4
    52f2:	f7ff feb7 	bl	5064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    52f6:	9b01      	ldr	r3, [sp, #4]
    52f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    52fc:	2203      	movs	r2, #3
    52fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5302:	69a8      	ldr	r0, [r5, #24]
    5304:	1c43      	adds	r3, r0, #1
    5306:	d006      	beq.n	5316 <uarte_instance_init.constprop.0+0x9e>
			nrf_gpio_cfg_input(cfg->cts_pin,
    5308:	7f6b      	ldrb	r3, [r5, #29]
    530a:	2b00      	cmp	r3, #0
    530c:	bf14      	ite	ne
    530e:	2103      	movne	r1, #3
    5310:	2100      	moveq	r1, #0
    5312:	f004 fd07 	bl	9d24 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    5316:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    531a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    531c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    5320:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    5324:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5328:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    532a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    532e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    5332:	1d31      	adds	r1, r6, #4
    5334:	f7ff fea4 	bl	5080 <uarte_nrfx_configure>
	if (err) {
    5338:	4605      	mov	r5, r0
    533a:	2800      	cmp	r0, #0
    533c:	d146      	bne.n	53cc <uarte_instance_init.constprop.0+0x154>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    533e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5342:	0799      	lsls	r1, r3, #30
    5344:	d519      	bpl.n	537a <uarte_instance_init.constprop.0+0x102>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5346:	f106 0016 	add.w	r0, r6, #22
    534a:	f001 f86f 	bl	642c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    534e:	4b23      	ldr	r3, [pc, #140]	; (53dc <uarte_instance_init.constprop.0+0x164>)
    5350:	4298      	cmp	r0, r3
    5352:	d13f      	bne.n	53d4 <uarte_instance_init.constprop.0+0x15c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5354:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5356:	00c3      	lsls	r3, r0, #3
    5358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    535c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5360:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5364:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5368:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    536c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    5370:	4a1b      	ldr	r2, [pc, #108]	; (53e0 <uarte_instance_init.constprop.0+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5372:	2301      	movs	r3, #1
    5374:	4083      	lsls	r3, r0
    5376:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    537a:	2308      	movs	r3, #8
    537c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5380:	f898 3008 	ldrb.w	r3, [r8, #8]
    5384:	b95b      	cbnz	r3, 539e <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5386:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    538a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    538e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5392:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5396:	2301      	movs	r3, #1
    5398:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    539c:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    539e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    53a2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    53a4:	bf5c      	itt	pl
    53a6:	f44f 7280 	movpl.w	r2, #256	; 0x100
    53aa:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    53ae:	06db      	lsls	r3, r3, #27
    53b0:	bf44      	itt	mi
    53b2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    53b6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    53ba:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    53bc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    53be:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    53c2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53c6:	2301      	movs	r3, #1
    53c8:	60a3      	str	r3, [r4, #8]
    53ca:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    53cc:	4628      	mov	r0, r5
    53ce:	b002      	add	sp, #8
    53d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    53d4:	f06f 0504 	mvn.w	r5, #4
    53d8:	e7f8      	b.n	53cc <uarte_instance_init.constprop.0+0x154>
    53da:	bf00      	nop
    53dc:	0bad0000 	.word	0x0bad0000
    53e0:	4001f000 	.word	0x4001f000

000053e4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    53e4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    53e6:	2301      	movs	r3, #1
    53e8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53ea:	4a11      	ldr	r2, [pc, #68]	; (5430 <compare_int_lock+0x4c>)
    53ec:	f3bf 8f5b 	dmb	ish
    53f0:	43dc      	mvns	r4, r3
    53f2:	e852 1f00 	ldrex	r1, [r2]
    53f6:	ea01 0c04 	and.w	ip, r1, r4
    53fa:	e842 ce00 	strex	lr, ip, [r2]
    53fe:	f1be 0f00 	cmp.w	lr, #0
    5402:	d1f6      	bne.n	53f2 <compare_int_lock+0xe>
    5404:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5408:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    540c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5410:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5418:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    541c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5420:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5424:	420b      	tst	r3, r1
}
    5426:	bf14      	ite	ne
    5428:	2001      	movne	r0, #1
    542a:	2000      	moveq	r0, #0
    542c:	bd10      	pop	{r4, pc}
    542e:	bf00      	nop
    5430:	20003898 	.word	0x20003898

00005434 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5434:	4919      	ldr	r1, [pc, #100]	; (549c <sys_clock_timeout_handler+0x68>)
{
    5436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5438:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    543a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    543e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5440:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5444:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5448:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    544a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    544e:	d222      	bcs.n	5496 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5450:	4b13      	ldr	r3, [pc, #76]	; (54a0 <sys_clock_timeout_handler+0x6c>)
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	0a1a      	lsrs	r2, r3, #8
    5456:	061b      	lsls	r3, r3, #24
    5458:	195e      	adds	r6, r3, r5
    545a:	4b12      	ldr	r3, [pc, #72]	; (54a4 <sys_clock_timeout_handler+0x70>)
    545c:	f142 0700 	adc.w	r7, r2, #0
    5460:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    5464:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5466:	f003 fa8b 	bl	8980 <sys_clock_announce>
    return p_reg->CC[ch];
    546a:	00a3      	lsls	r3, r4, #2
    546c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5470:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5474:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5478:	42aa      	cmp	r2, r5
    547a:	d10b      	bne.n	5494 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    547c:	b91e      	cbnz	r6, 5486 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    547e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5482:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5486:	4b08      	ldr	r3, [pc, #32]	; (54a8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5488:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    548c:	fa00 f404 	lsl.w	r4, r0, r4
    5490:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    5496:	2600      	movs	r6, #0
    5498:	e7e5      	b.n	5466 <sys_clock_timeout_handler+0x32>
    549a:	bf00      	nop
    549c:	200004c0 	.word	0x200004c0
    54a0:	2000389c 	.word	0x2000389c
    54a4:	200004a8 	.word	0x200004a8
    54a8:	40011000 	.word	0x40011000

000054ac <compare_int_unlock>:
	if (key) {
    54ac:	b319      	cbz	r1, 54f6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54ae:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    54b2:	2301      	movs	r3, #1
    54b4:	4a10      	ldr	r2, [pc, #64]	; (54f8 <compare_int_unlock+0x4c>)
    54b6:	4083      	lsls	r3, r0
    54b8:	e852 1f00 	ldrex	r1, [r2]
    54bc:	4319      	orrs	r1, r3
    54be:	e842 1c00 	strex	ip, r1, [r2]
    54c2:	f1bc 0f00 	cmp.w	ip, #0
    54c6:	d1f7      	bne.n	54b8 <compare_int_unlock+0xc>
    54c8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    54cc:	4a0b      	ldr	r2, [pc, #44]	; (54fc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    54ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    54d2:	4083      	lsls	r3, r0
    54d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    54d8:	4b09      	ldr	r3, [pc, #36]	; (5500 <compare_int_unlock+0x54>)
    54da:	f3bf 8f5b 	dmb	ish
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    54e4:	fa23 f000 	lsr.w	r0, r3, r0
    54e8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54ea:	bf42      	ittt	mi
    54ec:	4b05      	ldrmi	r3, [pc, #20]	; (5504 <compare_int_unlock+0x58>)
    54ee:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    54f2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    54f6:	4770      	bx	lr
    54f8:	20003898 	.word	0x20003898
    54fc:	40011000 	.word	0x40011000
    5500:	20003894 	.word	0x20003894
    5504:	e000e100 	.word	0xe000e100

00005508 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5508:	4b0d      	ldr	r3, [pc, #52]	; (5540 <z_nrf_rtc_timer_read+0x38>)
    550a:	6818      	ldr	r0, [r3, #0]
    550c:	0a01      	lsrs	r1, r0, #8
    550e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5510:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5514:	4b0b      	ldr	r3, [pc, #44]	; (5544 <z_nrf_rtc_timer_read+0x3c>)
    5516:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    551a:	1818      	adds	r0, r3, r0
    551c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5524:	d20a      	bcs.n	553c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5526:	4b08      	ldr	r3, [pc, #32]	; (5548 <z_nrf_rtc_timer_read+0x40>)
    5528:	e9d3 2300 	ldrd	r2, r3, [r3]
    552c:	4290      	cmp	r0, r2
    552e:	eb71 0303 	sbcs.w	r3, r1, r3
    5532:	d203      	bcs.n	553c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5534:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5538:	f141 0100 	adc.w	r1, r1, #0
}
    553c:	4770      	bx	lr
    553e:	bf00      	nop
    5540:	2000389c 	.word	0x2000389c
    5544:	40011000 	.word	0x40011000
    5548:	200004a8 	.word	0x200004a8

0000554c <compare_set>:
{
    554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5550:	b085      	sub	sp, #20
    5552:	4616      	mov	r6, r2
    5554:	4698      	mov	r8, r3
    5556:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5558:	f7ff ff44 	bl	53e4 <compare_int_lock>
    555c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    555e:	f7ff ffd3 	bl	5508 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5562:	42b0      	cmp	r0, r6
    5564:	eb71 0308 	sbcs.w	r3, r1, r8
    5568:	d278      	bcs.n	565c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    556a:	4b46      	ldr	r3, [pc, #280]	; (5684 <compare_set+0x138>)
    556c:	1a30      	subs	r0, r6, r0
    556e:	eb68 0101 	sbc.w	r1, r8, r1
    5572:	4298      	cmp	r0, r3
    5574:	f171 0300 	sbcs.w	r3, r1, #0
    5578:	f080 8081 	bcs.w	567e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    557c:	4b42      	ldr	r3, [pc, #264]	; (5688 <compare_set+0x13c>)
    557e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5582:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    5586:	45d8      	cmp	r8, fp
    5588:	bf08      	it	eq
    558a:	4556      	cmpeq	r6, sl
    558c:	d051      	beq.n	5632 <compare_set+0xe6>
    558e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    5592:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5596:	f105 0750 	add.w	r7, r5, #80	; 0x50
    559a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    559e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    55a4:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    55a8:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    55aa:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    55ae:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55b2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    55b4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    55b8:	4b34      	ldr	r3, [pc, #208]	; (568c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    55ba:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    55be:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    55c0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    55c4:	1a40      	subs	r0, r0, r1
    55c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    55ca:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    55ce:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    55d0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    55d4:	d107      	bne.n	55e6 <compare_set+0x9a>
    55d6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    55da:	2013      	movs	r0, #19
    55dc:	f005 f96a 	bl	a8b4 <z_impl_k_busy_wait>
    55e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    55e4:	4b29      	ldr	r3, [pc, #164]	; (568c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    55e6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    55ea:	eba4 000c 	sub.w	r0, r4, ip
    55ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    55f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    55f6:	bf88      	it	hi
    55f8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    55fa:	2000      	movs	r0, #0
    55fc:	6038      	str	r0, [r7, #0]
    55fe:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    5600:	9801      	ldr	r0, [sp, #4]
    5602:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5606:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    560a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    560e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5612:	4281      	cmp	r1, r0
    5614:	d006      	beq.n	5624 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    5616:	1a20      	subs	r0, r4, r0
    5618:	3802      	subs	r0, #2
    561a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    561e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5622:	d819      	bhi.n	5658 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    5624:	1aa4      	subs	r4, r4, r2
    5626:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    562a:	eb14 0a06 	adds.w	sl, r4, r6
    562e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    5632:	4915      	ldr	r1, [pc, #84]	; (5688 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5634:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    5636:	012b      	lsls	r3, r5, #4
    5638:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    563c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    5640:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5644:	6053      	str	r3, [r2, #4]
	return ret;
    5646:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5648:	4628      	mov	r0, r5
    564a:	9900      	ldr	r1, [sp, #0]
    564c:	f7ff ff2e 	bl	54ac <compare_int_unlock>
}
    5650:	4620      	mov	r0, r4
    5652:	b005      	add	sp, #20
    5654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5658:	4620      	mov	r0, r4
    565a:	e7b1      	b.n	55c0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    565c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    565e:	4a0c      	ldr	r2, [pc, #48]	; (5690 <compare_set+0x144>)
    5660:	f3bf 8f5b 	dmb	ish
    5664:	40ab      	lsls	r3, r5
    5666:	e852 1f00 	ldrex	r1, [r2]
    566a:	4319      	orrs	r1, r3
    566c:	e842 1000 	strex	r0, r1, [r2]
    5670:	2800      	cmp	r0, #0
    5672:	d1f8      	bne.n	5666 <compare_set+0x11a>
    5674:	f3bf 8f5b 	dmb	ish
    5678:	46b2      	mov	sl, r6
    567a:	46c3      	mov	fp, r8
    567c:	e7d9      	b.n	5632 <compare_set+0xe6>
			return -EINVAL;
    567e:	f06f 0415 	mvn.w	r4, #21
    5682:	e7e1      	b.n	5648 <compare_set+0xfc>
    5684:	01000001 	.word	0x01000001
    5688:	200004b0 	.word	0x200004b0
    568c:	40011000 	.word	0x40011000
    5690:	20003894 	.word	0x20003894

00005694 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5694:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5696:	4b19      	ldr	r3, [pc, #100]	; (56fc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5698:	4d19      	ldr	r5, [pc, #100]	; (5700 <sys_clock_driver_init+0x6c>)
    569a:	2400      	movs	r4, #0
    569c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    56a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    56a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    56a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    56ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    56b0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56b4:	4b13      	ldr	r3, [pc, #76]	; (5704 <sys_clock_driver_init+0x70>)
    56b6:	2602      	movs	r6, #2
    56b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    56bc:	2101      	movs	r1, #1
    56be:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    56c2:	2011      	movs	r0, #17
    56c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    56c8:	4622      	mov	r2, r4
    56ca:	f7fe f837 	bl	373c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    56ce:	2011      	movs	r0, #17
    56d0:	f7fe f802 	bl	36d8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    56d4:	4a0c      	ldr	r2, [pc, #48]	; (5708 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    56d6:	2301      	movs	r3, #1
    56d8:	60ab      	str	r3, [r5, #8]
    56da:	602b      	str	r3, [r5, #0]
    56dc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    56de:	4b0b      	ldr	r3, [pc, #44]	; (570c <sys_clock_driver_init+0x78>)
    56e0:	4a0b      	ldr	r2, [pc, #44]	; (5710 <sys_clock_driver_init+0x7c>)
    56e2:	9300      	str	r3, [sp, #0]
    56e4:	9401      	str	r4, [sp, #4]
    56e6:	2300      	movs	r3, #0
    56e8:	4620      	mov	r0, r4
    56ea:	f7ff ff2f 	bl	554c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    56ee:	4630      	mov	r0, r6
    56f0:	f7ff f9dc 	bl	4aac <z_nrf_clock_control_lf_on>

	return 0;
}
    56f4:	4620      	mov	r0, r4
    56f6:	b002      	add	sp, #8
    56f8:	bd70      	pop	{r4, r5, r6, pc}
    56fa:	bf00      	nop
    56fc:	200004b0 	.word	0x200004b0
    5700:	40011000 	.word	0x40011000
    5704:	e000e100 	.word	0xe000e100
    5708:	20003898 	.word	0x20003898
    570c:	00005435 	.word	0x00005435
    5710:	007fffff 	.word	0x007fffff

00005714 <rtc_nrf_isr>:
{
    5714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5718:	4c35      	ldr	r4, [pc, #212]	; (57f0 <rtc_nrf_isr+0xdc>)
    571a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    571e:	079a      	lsls	r2, r3, #30
    5720:	d50b      	bpl.n	573a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5722:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5726:	b143      	cbz	r3, 573a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5728:	4a32      	ldr	r2, [pc, #200]	; (57f4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    572a:	2300      	movs	r3, #0
    572c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5730:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5734:	6813      	ldr	r3, [r2, #0]
    5736:	3301      	adds	r3, #1
    5738:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    573a:	f04f 0320 	mov.w	r3, #32
    573e:	f3ef 8211 	mrs	r2, BASEPRI
    5742:	f383 8812 	msr	BASEPRI_MAX, r3
    5746:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    574a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    574e:	03db      	lsls	r3, r3, #15
    5750:	d512      	bpl.n	5778 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5752:	f3bf 8f5b 	dmb	ish
    5756:	4b28      	ldr	r3, [pc, #160]	; (57f8 <rtc_nrf_isr+0xe4>)
    5758:	e853 1f00 	ldrex	r1, [r3]
    575c:	f021 0001 	bic.w	r0, r1, #1
    5760:	e843 0600 	strex	r6, r0, [r3]
    5764:	2e00      	cmp	r6, #0
    5766:	d1f7      	bne.n	5758 <rtc_nrf_isr+0x44>
    5768:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    576c:	2900      	cmp	r1, #0
    576e:	d136      	bne.n	57de <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5770:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    5774:	2b00      	cmp	r3, #0
    5776:	d132      	bne.n	57de <rtc_nrf_isr+0xca>
{
    5778:	2300      	movs	r3, #0
	__asm__ volatile(
    577a:	f382 8811 	msr	BASEPRI, r2
    577e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5782:	b34b      	cbz	r3, 57d8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    5784:	f7ff fec0 	bl	5508 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5788:	f04f 0320 	mov.w	r3, #32
    578c:	f3ef 8c11 	mrs	ip, BASEPRI
    5790:	f383 8812 	msr	BASEPRI_MAX, r3
    5794:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5798:	4b18      	ldr	r3, [pc, #96]	; (57fc <rtc_nrf_isr+0xe8>)
    579a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    579e:	42b0      	cmp	r0, r6
    57a0:	eb71 0207 	sbcs.w	r2, r1, r7
    57a4:	f04f 0200 	mov.w	r2, #0
    57a8:	d320      	bcc.n	57ec <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    57aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    57ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    57b2:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    57b6:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    57ba:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    57bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57c0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    57c4:	f38c 8811 	msr	BASEPRI, ip
    57c8:	f3bf 8f6f 	isb	sy
		if (handler) {
    57cc:	b121      	cbz	r1, 57d8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    57ce:	9500      	str	r5, [sp, #0]
    57d0:	4632      	mov	r2, r6
    57d2:	463b      	mov	r3, r7
    57d4:	2000      	movs	r0, #0
    57d6:	4788      	blx	r1
}
    57d8:	b003      	add	sp, #12
    57da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    57de:	2300      	movs	r3, #0
    57e0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    57e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    57e8:	2301      	movs	r3, #1
}
    57ea:	e7c6      	b.n	577a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    57ec:	4611      	mov	r1, r2
    57ee:	e7e9      	b.n	57c4 <rtc_nrf_isr+0xb0>
    57f0:	40011000 	.word	0x40011000
    57f4:	2000389c 	.word	0x2000389c
    57f8:	20003894 	.word	0x20003894
    57fc:	200004b0 	.word	0x200004b0

00005800 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5800:	1c43      	adds	r3, r0, #1
{
    5802:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5804:	d021      	beq.n	584a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5806:	2801      	cmp	r0, #1
    5808:	dd21      	ble.n	584e <sys_clock_set_timeout+0x4e>
    580a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    580e:	da20      	bge.n	5852 <sys_clock_set_timeout+0x52>
    5810:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5812:	f7ff fe79 	bl	5508 <z_nrf_rtc_timer_read>
    5816:	4b10      	ldr	r3, [pc, #64]	; (5858 <sys_clock_set_timeout+0x58>)
    5818:	e9d3 1300 	ldrd	r1, r3, [r3]
    581c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    581e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5822:	bf28      	it	cs
    5824:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5826:	3001      	adds	r0, #1
    5828:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    582a:	480c      	ldr	r0, [pc, #48]	; (585c <sys_clock_set_timeout+0x5c>)
    582c:	4282      	cmp	r2, r0
    582e:	bf28      	it	cs
    5830:	4602      	movcs	r2, r0
    5832:	1852      	adds	r2, r2, r1
    5834:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5838:	4909      	ldr	r1, [pc, #36]	; (5860 <sys_clock_set_timeout+0x60>)
    583a:	9001      	str	r0, [sp, #4]
    583c:	9100      	str	r1, [sp, #0]
    583e:	f143 0300 	adc.w	r3, r3, #0
    5842:	f7ff fe83 	bl	554c <compare_set>
}
    5846:	b002      	add	sp, #8
    5848:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    584a:	4804      	ldr	r0, [pc, #16]	; (585c <sys_clock_set_timeout+0x5c>)
    584c:	e7e0      	b.n	5810 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    584e:	2400      	movs	r4, #0
    5850:	e7df      	b.n	5812 <sys_clock_set_timeout+0x12>
    5852:	4c02      	ldr	r4, [pc, #8]	; (585c <sys_clock_set_timeout+0x5c>)
    5854:	e7dd      	b.n	5812 <sys_clock_set_timeout+0x12>
    5856:	bf00      	nop
    5858:	200004c0 	.word	0x200004c0
    585c:	007fffff 	.word	0x007fffff
    5860:	00005435 	.word	0x00005435

00005864 <sys_clock_elapsed>:
{
    5864:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5866:	f7ff fe4f 	bl	5508 <z_nrf_rtc_timer_read>
    586a:	4b02      	ldr	r3, [pc, #8]	; (5874 <sys_clock_elapsed+0x10>)
    586c:	681b      	ldr	r3, [r3, #0]
}
    586e:	1ac0      	subs	r0, r0, r3
    5870:	bd08      	pop	{r3, pc}
    5872:	bf00      	nop
    5874:	200004c0 	.word	0x200004c0

00005878 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    587c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5880:	2a08      	cmp	r2, #8
    5882:	d106      	bne.n	5892 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5884:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    5888:	2b05      	cmp	r3, #5
    588a:	d802      	bhi.n	5892 <nrf52_errata_103+0x1a>
    588c:	4a02      	ldr	r2, [pc, #8]	; (5898 <nrf52_errata_103+0x20>)
    588e:	5cd0      	ldrb	r0, [r2, r3]
    5890:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5892:	2000      	movs	r0, #0
    #endif
}
    5894:	4770      	bx	lr
    5896:	bf00      	nop
    5898:	0000b1b6 	.word	0x0000b1b6

0000589c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    589c:	4a02      	ldr	r2, [pc, #8]	; (58a8 <nvmc_wait+0xc>)
    589e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    58a2:	2b00      	cmp	r3, #0
    58a4:	d0fb      	beq.n	589e <nvmc_wait+0x2>
}
    58a6:	4770      	bx	lr
    58a8:	4001e000 	.word	0x4001e000

000058ac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    58ac:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    58ae:	f004 fb2e 	bl	9f0e <nrf52_errata_136>
    58b2:	b140      	cbz	r0, 58c6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    58b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58b8:	2200      	movs	r2, #0
    58ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    58be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    58c2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    58c6:	f004 fb22 	bl	9f0e <nrf52_errata_136>
    58ca:	2800      	cmp	r0, #0
    58cc:	d046      	beq.n	595c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    58ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    58d2:	4b60      	ldr	r3, [pc, #384]	; (5a54 <SystemInit+0x1a8>)
    58d4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    58d8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    58dc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    58e0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    58e4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    58e8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    58ec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    58f0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    58f4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    58f8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    58fc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5900:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5904:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5908:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    590c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5910:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5914:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5918:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    591c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5920:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5924:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5928:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    592c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5930:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5934:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5938:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    593c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5940:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5944:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5948:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    594c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5950:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5954:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5958:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    595c:	f7ff ff8c 	bl	5878 <nrf52_errata_103>
    5960:	b118      	cbz	r0, 596a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5962:	4b3d      	ldr	r3, [pc, #244]	; (5a58 <SystemInit+0x1ac>)
    5964:	4a3d      	ldr	r2, [pc, #244]	; (5a5c <SystemInit+0x1b0>)
    5966:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    596a:	f7ff ff85 	bl	5878 <nrf52_errata_103>
    596e:	b118      	cbz	r0, 5978 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5970:	4b3b      	ldr	r3, [pc, #236]	; (5a60 <SystemInit+0x1b4>)
    5972:	22fb      	movs	r2, #251	; 0xfb
    5974:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5978:	f7ff ff7e 	bl	5878 <nrf52_errata_103>
    597c:	b170      	cbz	r0, 599c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    597e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5982:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5986:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    598a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    598e:	f022 020f 	bic.w	r2, r2, #15
    5992:	f003 030f 	and.w	r3, r3, #15
    5996:	4313      	orrs	r3, r2
    5998:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    599c:	f7ff ff6c 	bl	5878 <nrf52_errata_103>
    59a0:	b120      	cbz	r0, 59ac <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    59a2:	4b30      	ldr	r3, [pc, #192]	; (5a64 <SystemInit+0x1b8>)
    59a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    59a8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    59ac:	f004 faaf 	bl	9f0e <nrf52_errata_136>
    59b0:	b148      	cbz	r0, 59c6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    59b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    59ba:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    59bc:	bf44      	itt	mi
    59be:	f06f 0201 	mvnmi.w	r2, #1
    59c2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    59c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    59ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    59ce:	2a08      	cmp	r2, #8
    59d0:	d10e      	bne.n	59f0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    59d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    59d6:	2b05      	cmp	r3, #5
    59d8:	d802      	bhi.n	59e0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    59da:	4a23      	ldr	r2, [pc, #140]	; (5a68 <SystemInit+0x1bc>)
    59dc:	5cd3      	ldrb	r3, [r2, r3]
    59de:	b13b      	cbz	r3, 59f0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    59e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    59e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    59e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59ec:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    59f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    59f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    59f8:	2a00      	cmp	r2, #0
    59fa:	db03      	blt.n	5a04 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    59fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5a00:	2b00      	cmp	r3, #0
    5a02:	da22      	bge.n	5a4a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a04:	4919      	ldr	r1, [pc, #100]	; (5a6c <SystemInit+0x1c0>)
    5a06:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a08:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a0c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a10:	2412      	movs	r4, #18
    nvmc_wait();
    5a12:	f7ff ff43 	bl	589c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a16:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5a1a:	f7ff ff3f 	bl	589c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5a1e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5a22:	f7ff ff3b 	bl	589c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a26:	2300      	movs	r3, #0
    5a28:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5a2c:	f7ff ff36 	bl	589c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5a30:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5a34:	490e      	ldr	r1, [pc, #56]	; (5a70 <SystemInit+0x1c4>)
    5a36:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <SystemInit+0x1c8>)
    5a38:	68ca      	ldr	r2, [r1, #12]
    5a3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5a3e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5a40:	60cb      	str	r3, [r1, #12]
    5a42:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5a46:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5a48:	e7fd      	b.n	5a46 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5a4a:	4b0b      	ldr	r3, [pc, #44]	; (5a78 <SystemInit+0x1cc>)
    5a4c:	4a0b      	ldr	r2, [pc, #44]	; (5a7c <SystemInit+0x1d0>)
    5a4e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5a50:	bd10      	pop	{r4, pc}
    5a52:	bf00      	nop
    5a54:	4000c000 	.word	0x4000c000
    5a58:	40005000 	.word	0x40005000
    5a5c:	00038148 	.word	0x00038148
    5a60:	4000f000 	.word	0x4000f000
    5a64:	40029000 	.word	0x40029000
    5a68:	0000b1b0 	.word	0x0000b1b0
    5a6c:	4001e000 	.word	0x4001e000
    5a70:	e000ed00 	.word	0xe000ed00
    5a74:	05fa0004 	.word	0x05fa0004
    5a78:	2000018c 	.word	0x2000018c
    5a7c:	03d09000 	.word	0x03d09000

00005a80 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5a80:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5a82:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5a84:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5a86:	fab2 f382 	clz	r3, r2
    5a8a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    5a8e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    5a90:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    5a92:	d014      	beq.n	5abe <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5a94:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5a98:	fa05 f303 	lsl.w	r3, r5, r3
    5a9c:	ea22 0303 	bic.w	r3, r2, r3
    5aa0:	e850 6f00 	ldrex	r6, [r0]
    5aa4:	4296      	cmp	r6, r2
    5aa6:	d104      	bne.n	5ab2 <nrfx_flag32_alloc+0x32>
    5aa8:	e840 3c00 	strex	ip, r3, [r0]
    5aac:	f1bc 0f00 	cmp.w	ip, #0
    5ab0:	d1f6      	bne.n	5aa0 <nrfx_flag32_alloc+0x20>
    5ab2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5ab6:	d1e5      	bne.n	5a84 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    5ab8:	4802      	ldr	r0, [pc, #8]	; (5ac4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    5aba:	700c      	strb	r4, [r1, #0]
}
    5abc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    5abe:	4802      	ldr	r0, [pc, #8]	; (5ac8 <nrfx_flag32_alloc+0x48>)
    5ac0:	e7fc      	b.n	5abc <nrfx_flag32_alloc+0x3c>
    5ac2:	bf00      	nop
    5ac4:	0bad0000 	.word	0x0bad0000
    5ac8:	0bad0002 	.word	0x0bad0002

00005acc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5acc:	6803      	ldr	r3, [r0, #0]
    5ace:	40cb      	lsrs	r3, r1
    5ad0:	07db      	lsls	r3, r3, #31
{
    5ad2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5ad4:	d415      	bmi.n	5b02 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5ad6:	2301      	movs	r3, #1
    5ad8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    5adc:	6803      	ldr	r3, [r0, #0]
    5ade:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5ae2:	ea41 0203 	orr.w	r2, r1, r3
    5ae6:	e850 4f00 	ldrex	r4, [r0]
    5aea:	429c      	cmp	r4, r3
    5aec:	d104      	bne.n	5af8 <nrfx_flag32_free+0x2c>
    5aee:	e840 2c00 	strex	ip, r2, [r0]
    5af2:	f1bc 0f00 	cmp.w	ip, #0
    5af6:	d1f6      	bne.n	5ae6 <nrfx_flag32_free+0x1a>
    5af8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5afc:	d1ee      	bne.n	5adc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    5afe:	4802      	ldr	r0, [pc, #8]	; (5b08 <nrfx_flag32_free+0x3c>)
}
    5b00:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5b02:	4802      	ldr	r0, [pc, #8]	; (5b0c <nrfx_flag32_free+0x40>)
    5b04:	e7fc      	b.n	5b00 <nrfx_flag32_free+0x34>
    5b06:	bf00      	nop
    5b08:	0bad0000 	.word	0x0bad0000
    5b0c:	0bad0004 	.word	0x0bad0004

00005b10 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5b10:	4b04      	ldr	r3, [pc, #16]	; (5b24 <nrfx_clock_init+0x14>)
    5b12:	791a      	ldrb	r2, [r3, #4]
    5b14:	b922      	cbnz	r2, 5b20 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5b16:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    5b18:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5b1a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5b1c:	4802      	ldr	r0, [pc, #8]	; (5b28 <nrfx_clock_init+0x18>)
    5b1e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5b20:	4802      	ldr	r0, [pc, #8]	; (5b2c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5b22:	4770      	bx	lr
    5b24:	200038a0 	.word	0x200038a0
    5b28:	0bad0000 	.word	0x0bad0000
    5b2c:	0bad000c 	.word	0x0bad000c

00005b30 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5b30:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5b32:	2000      	movs	r0, #0
    5b34:	f7fd fdf4 	bl	3720 <arch_irq_is_enabled>
    5b38:	b908      	cbnz	r0, 5b3e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5b3a:	f7fd fdcd 	bl	36d8 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    5b3e:	4b02      	ldr	r3, [pc, #8]	; (5b48 <nrfx_clock_enable+0x18>)
    5b40:	2201      	movs	r2, #1
    5b42:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5b44:	bd08      	pop	{r3, pc}
    5b46:	bf00      	nop
    5b48:	20003c05 	.word	0x20003c05

00005b4c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5b4c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5b4e:	b110      	cbz	r0, 5b56 <nrfx_clock_stop+0xa>
    5b50:	2801      	cmp	r0, #1
    5b52:	d017      	beq.n	5b84 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5b54:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    5b56:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    5b5a:	2302      	movs	r3, #2
    5b5c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b60:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    5b64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b68:	2301      	movs	r3, #1
    5b6a:	60e3      	str	r3, [r4, #12]
    5b6c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b70:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    5b74:	03db      	lsls	r3, r3, #15
    5b76:	d5ed      	bpl.n	5b54 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5b78:	2001      	movs	r0, #1
    5b7a:	f004 f9d2 	bl	9f22 <nrfx_busy_wait>
    5b7e:	3d01      	subs	r5, #1
    5b80:	d1f6      	bne.n	5b70 <nrfx_clock_stop+0x24>
    5b82:	e7e7      	b.n	5b54 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    5b84:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b88:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    5b8a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5b92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b96:	6060      	str	r0, [r4, #4]
    5b98:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5b9c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5ba0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    5ba4:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5ba6:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5baa:	d505      	bpl.n	5bb8 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5bac:	b123      	cbz	r3, 5bb8 <nrfx_clock_stop+0x6c>
    5bae:	2001      	movs	r0, #1
    5bb0:	f004 f9b7 	bl	9f22 <nrfx_busy_wait>
    5bb4:	3d01      	subs	r5, #1
    5bb6:	d1f1      	bne.n	5b9c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    5bb8:	4b01      	ldr	r3, [pc, #4]	; (5bc0 <nrfx_clock_stop+0x74>)
    5bba:	2200      	movs	r2, #0
    5bbc:	715a      	strb	r2, [r3, #5]
    5bbe:	e7c9      	b.n	5b54 <nrfx_clock_stop+0x8>
    5bc0:	200038a0 	.word	0x200038a0

00005bc4 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5bc8:	b510      	push	{r4, lr}
    5bca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5bce:	b16a      	cbz	r2, 5bec <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bd0:	2200      	movs	r2, #0
    5bd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5bd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5bda:	2201      	movs	r2, #1
    5bdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5be0:	4b11      	ldr	r3, [pc, #68]	; (5c28 <nrfx_clock_irq_handler+0x64>)
    5be2:	7958      	ldrb	r0, [r3, #5]
    5be4:	b910      	cbnz	r0, 5bec <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5be6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bf0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5bf4:	b172      	cbz	r2, 5c14 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bf6:	2200      	movs	r2, #0
    5bf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5bfc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c00:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c04:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5c08:	0792      	lsls	r2, r2, #30
    5c0a:	d104      	bne.n	5c16 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5c0c:	2201      	movs	r2, #1
    5c0e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c12:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5c14:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5c16:	2202      	movs	r2, #2
    5c18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5c1c:	4b02      	ldr	r3, [pc, #8]	; (5c28 <nrfx_clock_irq_handler+0x64>)
}
    5c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	2001      	movs	r0, #1
    5c26:	4718      	bx	r3
    5c28:	200038a0 	.word	0x200038a0

00005c2c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5c2c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    5c2e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5c32:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    5c34:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5c36:	6002      	str	r2, [r0, #0]
}
    5c38:	4802      	ldr	r0, [pc, #8]	; (5c44 <nrf_gpio_pin_port_decode+0x18>)
    5c3a:	bf18      	it	ne
    5c3c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    5c40:	4770      	bx	lr
    5c42:	bf00      	nop
    5c44:	50000300 	.word	0x50000300

00005c48 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5c48:	4b03      	ldr	r3, [pc, #12]	; (5c58 <pin_in_use_by_te+0x10>)
    5c4a:	3008      	adds	r0, #8
    5c4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5c50:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5c54:	4770      	bx	lr
    5c56:	bf00      	nop
    5c58:	20000190 	.word	0x20000190

00005c5c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5c5c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5c5e:	f100 0308 	add.w	r3, r0, #8
    5c62:	4c0c      	ldr	r4, [pc, #48]	; (5c94 <call_handler+0x38>)
    5c64:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5c68:	05da      	lsls	r2, r3, #23
{
    5c6a:	4605      	mov	r5, r0
    5c6c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5c6e:	d507      	bpl.n	5c80 <call_handler+0x24>
    5c70:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5c74:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5c78:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5c7c:	6852      	ldr	r2, [r2, #4]
    5c7e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5c80:	68a3      	ldr	r3, [r4, #8]
    5c82:	b12b      	cbz	r3, 5c90 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5c84:	68e2      	ldr	r2, [r4, #12]
    5c86:	4631      	mov	r1, r6
    5c88:	4628      	mov	r0, r5
    }
}
    5c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5c8e:	4718      	bx	r3
}
    5c90:	bd70      	pop	{r4, r5, r6, pc}
    5c92:	bf00      	nop
    5c94:	20000190 	.word	0x20000190

00005c98 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5c98:	4a12      	ldr	r2, [pc, #72]	; (5ce4 <release_handler+0x4c>)
    5c9a:	3008      	adds	r0, #8
{
    5c9c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5c9e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5ca2:	05d9      	lsls	r1, r3, #23
    5ca4:	d51b      	bpl.n	5cde <release_handler+0x46>
    5ca6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5caa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5cae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5cb2:	f102 0410 	add.w	r4, r2, #16
    5cb6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5cb8:	f834 3b02 	ldrh.w	r3, [r4], #2
    5cbc:	f413 7f80 	tst.w	r3, #256	; 0x100
    5cc0:	d003      	beq.n	5cca <release_handler+0x32>
    5cc2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5cc6:	4299      	cmp	r1, r3
    5cc8:	d009      	beq.n	5cde <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5cca:	3001      	adds	r0, #1
    5ccc:	2830      	cmp	r0, #48	; 0x30
    5cce:	d1f3      	bne.n	5cb8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5cd0:	2300      	movs	r3, #0
    5cd2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5cd6:	4804      	ldr	r0, [pc, #16]	; (5ce8 <release_handler+0x50>)
}
    5cd8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5cda:	f7ff bef7 	b.w	5acc <nrfx_flag32_free>
}
    5cde:	bc10      	pop	{r4}
    5ce0:	4770      	bx	lr
    5ce2:	bf00      	nop
    5ce4:	20000190 	.word	0x20000190
    5ce8:	20000204 	.word	0x20000204

00005cec <pin_handler_trigger_uninit>:
{
    5cec:	b538      	push	{r3, r4, r5, lr}
    5cee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5cf0:	f7ff ffaa 	bl	5c48 <pin_in_use_by_te>
    5cf4:	4c09      	ldr	r4, [pc, #36]	; (5d1c <pin_handler_trigger_uninit+0x30>)
    5cf6:	f102 0508 	add.w	r5, r2, #8
    5cfa:	b140      	cbz	r0, 5d0e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cfc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5d00:	4907      	ldr	r1, [pc, #28]	; (5d20 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5d02:	0b5b      	lsrs	r3, r3, #13
    5d04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5d08:	2000      	movs	r0, #0
    5d0a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    5d0e:	4610      	mov	r0, r2
    5d10:	f7ff ffc2 	bl	5c98 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5d14:	2300      	movs	r3, #0
    5d16:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5d1a:	bd38      	pop	{r3, r4, r5, pc}
    5d1c:	20000190 	.word	0x20000190
    5d20:	40006000 	.word	0x40006000

00005d24 <nrfx_gpiote_input_configure>:
{
    5d24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5d28:	4604      	mov	r4, r0
    5d2a:	4617      	mov	r7, r2
    5d2c:	461d      	mov	r5, r3
    if (p_input_config)
    5d2e:	b321      	cbz	r1, 5d7a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d30:	4e4e      	ldr	r6, [pc, #312]	; (5e6c <nrfx_gpiote_input_configure+0x148>)
    5d32:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5d36:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    5d3a:	079b      	lsls	r3, r3, #30
    5d3c:	d506      	bpl.n	5d4c <nrfx_gpiote_input_configure+0x28>
    5d3e:	f7ff ff83 	bl	5c48 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    5d42:	b118      	cbz	r0, 5d4c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    5d44:	484a      	ldr	r0, [pc, #296]	; (5e70 <nrfx_gpiote_input_configure+0x14c>)
}
    5d46:	b004      	add	sp, #16
    5d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5d4c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5d4e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5d52:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5d56:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5d5a:	f10d 020f 	add.w	r2, sp, #15
    5d5e:	460b      	mov	r3, r1
    5d60:	4620      	mov	r0, r4
    5d62:	f10d 010e 	add.w	r1, sp, #14
    5d66:	f004 f90a 	bl	9f7e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5d6a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    5d6e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5d72:	f043 0301 	orr.w	r3, r3, #1
    5d76:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    5d7a:	b197      	cbz	r7, 5da2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d7c:	4b3b      	ldr	r3, [pc, #236]	; (5e6c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5d7e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5d80:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d82:	f104 0008 	add.w	r0, r4, #8
    5d86:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    5d8a:	078f      	lsls	r7, r1, #30
    5d8c:	d50c      	bpl.n	5da8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    5d8e:	2a00      	cmp	r2, #0
    5d90:	d1d8      	bne.n	5d44 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5d92:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    5d96:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5d9a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    5d9e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    5da2:	bbcd      	cbnz	r5, 5e18 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    5da4:	4833      	ldr	r0, [pc, #204]	; (5e74 <nrfx_gpiote_input_configure+0x150>)
    5da6:	e7ce      	b.n	5d46 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5da8:	f021 0120 	bic.w	r1, r1, #32
    5dac:	04c9      	lsls	r1, r1, #19
    5dae:	0cc9      	lsrs	r1, r1, #19
    5db0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    5db4:	2a00      	cmp	r2, #0
    5db6:	d0ec      	beq.n	5d92 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    5db8:	2e03      	cmp	r6, #3
    5dba:	d8c3      	bhi.n	5d44 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5dbc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5dbe:	b92e      	cbnz	r6, 5dcc <nrfx_gpiote_input_configure+0xa8>
    5dc0:	4a2d      	ldr	r2, [pc, #180]	; (5e78 <nrfx_gpiote_input_configure+0x154>)
    5dc2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    5dc6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5dca:	e7e2      	b.n	5d92 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5dcc:	00ba      	lsls	r2, r7, #2
    5dce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5dd2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5dd6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    5dda:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5dde:	f02c 0c03 	bic.w	ip, ip, #3
    5de2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5de6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5dea:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    5dee:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    5df2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5df6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5dfa:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    5dfe:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    5e02:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5e06:	ea4c 0c0e 	orr.w	ip, ip, lr
    5e0a:	f041 0120 	orr.w	r1, r1, #32
    5e0e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    5e12:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    5e16:	e7bc      	b.n	5d92 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5e18:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5e1c:	4620      	mov	r0, r4
    5e1e:	f7ff ff3b 	bl	5c98 <release_handler>
    if (!handler)
    5e22:	2e00      	cmp	r6, #0
    5e24:	d0be      	beq.n	5da4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5e26:	4d11      	ldr	r5, [pc, #68]	; (5e6c <nrfx_gpiote_input_configure+0x148>)
    5e28:	682b      	ldr	r3, [r5, #0]
    5e2a:	429e      	cmp	r6, r3
    5e2c:	d104      	bne.n	5e38 <nrfx_gpiote_input_configure+0x114>
    5e2e:	686b      	ldr	r3, [r5, #4]
    5e30:	429f      	cmp	r7, r3
    5e32:	d101      	bne.n	5e38 <nrfx_gpiote_input_configure+0x114>
    5e34:	2200      	movs	r2, #0
    5e36:	e00a      	b.n	5e4e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5e38:	4810      	ldr	r0, [pc, #64]	; (5e7c <nrfx_gpiote_input_configure+0x158>)
    5e3a:	f10d 010f 	add.w	r1, sp, #15
    5e3e:	f7ff fe1f 	bl	5a80 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5e42:	4b0c      	ldr	r3, [pc, #48]	; (5e74 <nrfx_gpiote_input_configure+0x150>)
    5e44:	4298      	cmp	r0, r3
    5e46:	f47f af7e 	bne.w	5d46 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    5e4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5e4e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5e52:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5e56:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5e58:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5e5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5e5e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5e66:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5e6a:	e79b      	b.n	5da4 <nrfx_gpiote_input_configure+0x80>
    5e6c:	20000190 	.word	0x20000190
    5e70:	0bad0004 	.word	0x0bad0004
    5e74:	0bad0000 	.word	0x0bad0000
    5e78:	40006000 	.word	0x40006000
    5e7c:	20000204 	.word	0x20000204

00005e80 <nrfx_gpiote_output_configure>:
{
    5e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e82:	4604      	mov	r4, r0
    5e84:	b085      	sub	sp, #20
    5e86:	4615      	mov	r5, r2
    if (p_config)
    5e88:	b319      	cbz	r1, 5ed2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5e8a:	4e33      	ldr	r6, [pc, #204]	; (5f58 <nrfx_gpiote_output_configure+0xd8>)
    5e8c:	f100 0708 	add.w	r7, r0, #8
    5e90:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5e94:	0793      	lsls	r3, r2, #30
    5e96:	d403      	bmi.n	5ea0 <nrfx_gpiote_output_configure+0x20>
    5e98:	f7ff fed6 	bl	5c48 <pin_in_use_by_te>
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d158      	bne.n	5f52 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5ea0:	f012 0f1c 	tst.w	r2, #28
    5ea4:	d002      	beq.n	5eac <nrfx_gpiote_output_configure+0x2c>
    5ea6:	784b      	ldrb	r3, [r1, #1]
    5ea8:	2b01      	cmp	r3, #1
    5eaa:	d052      	beq.n	5f52 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5eac:	2301      	movs	r3, #1
    5eae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5eb2:	2300      	movs	r3, #0
    5eb4:	e9cd 1300 	strd	r1, r3, [sp]
    5eb8:	1c4a      	adds	r2, r1, #1
    5eba:	1c8b      	adds	r3, r1, #2
    5ebc:	4620      	mov	r0, r4
    5ebe:	f10d 010f 	add.w	r1, sp, #15
    5ec2:	f004 f85c 	bl	9f7e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5ec6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5eca:	f043 0303 	orr.w	r3, r3, #3
    5ece:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5ed2:	b915      	cbnz	r5, 5eda <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    5ed4:	4821      	ldr	r0, [pc, #132]	; (5f5c <nrfx_gpiote_output_configure+0xdc>)
}
    5ed6:	b005      	add	sp, #20
    5ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5eda:	4e1f      	ldr	r6, [pc, #124]	; (5f58 <nrfx_gpiote_output_configure+0xd8>)
    5edc:	f104 0708 	add.w	r7, r4, #8
    5ee0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5ee4:	0783      	lsls	r3, r0, #30
    5ee6:	d534      	bpl.n	5f52 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    5ee8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5eec:	4661      	mov	r1, ip
    5eee:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5ef0:	f020 0020 	bic.w	r0, r0, #32
    5ef4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5ef8:	04c0      	lsls	r0, r0, #19
    5efa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5efe:	0cc0      	lsrs	r0, r0, #19
    5f00:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5f04:	2300      	movs	r3, #0
    5f06:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5f0a:	786a      	ldrb	r2, [r5, #1]
    5f0c:	2a00      	cmp	r2, #0
    5f0e:	d0e1      	beq.n	5ed4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5f10:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5f14:	78ad      	ldrb	r5, [r5, #2]
    5f16:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5f1a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5f1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5f22:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5f26:	0223      	lsls	r3, r4, #8
    5f28:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5f2c:	0412      	lsls	r2, r2, #16
    5f2e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5f32:	ea43 030e 	orr.w	r3, r3, lr
    5f36:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5f38:	052a      	lsls	r2, r5, #20
    5f3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5f3e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5f42:	4313      	orrs	r3, r2
    5f44:	f040 0020 	orr.w	r0, r0, #32
    5f48:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5f4c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5f50:	e7c0      	b.n	5ed4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    5f52:	4803      	ldr	r0, [pc, #12]	; (5f60 <nrfx_gpiote_output_configure+0xe0>)
    5f54:	e7bf      	b.n	5ed6 <nrfx_gpiote_output_configure+0x56>
    5f56:	bf00      	nop
    5f58:	20000190 	.word	0x20000190
    5f5c:	0bad0000 	.word	0x0bad0000
    5f60:	0bad0004 	.word	0x0bad0004

00005f64 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5f64:	4b01      	ldr	r3, [pc, #4]	; (5f6c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5f66:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5f6a:	4770      	bx	lr
    5f6c:	20000190 	.word	0x20000190

00005f70 <nrfx_gpiote_channel_get>:
{
    5f70:	b508      	push	{r3, lr}
    5f72:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5f74:	f7ff fe68 	bl	5c48 <pin_in_use_by_te>
    5f78:	b138      	cbz	r0, 5f8a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5f7a:	4b05      	ldr	r3, [pc, #20]	; (5f90 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5f7c:	4805      	ldr	r0, [pc, #20]	; (5f94 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5f7e:	3208      	adds	r2, #8
    5f80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5f84:	0b5b      	lsrs	r3, r3, #13
    5f86:	700b      	strb	r3, [r1, #0]
}
    5f88:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5f8a:	4803      	ldr	r0, [pc, #12]	; (5f98 <nrfx_gpiote_channel_get+0x28>)
    5f8c:	e7fc      	b.n	5f88 <nrfx_gpiote_channel_get+0x18>
    5f8e:	bf00      	nop
    5f90:	20000190 	.word	0x20000190
    5f94:	0bad0000 	.word	0x0bad0000
    5f98:	0bad0004 	.word	0x0bad0004

00005f9c <nrfx_gpiote_init>:
{
    5f9c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5f9e:	4c0f      	ldr	r4, [pc, #60]	; (5fdc <nrfx_gpiote_init+0x40>)
    5fa0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5fa4:	b9bd      	cbnz	r5, 5fd6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5fa6:	2260      	movs	r2, #96	; 0x60
    5fa8:	4629      	mov	r1, r5
    5faa:	f104 0010 	add.w	r0, r4, #16
    5fae:	f004 fd3e 	bl	aa2e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5fb2:	2006      	movs	r0, #6
    5fb4:	f7fd fb90 	bl	36d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5fb8:	4b09      	ldr	r3, [pc, #36]	; (5fe0 <nrfx_gpiote_init+0x44>)
    return err_code;
    5fba:	480a      	ldr	r0, [pc, #40]	; (5fe4 <nrfx_gpiote_init+0x48>)
    5fbc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5fc0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5fc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5fc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5fcc:	2301      	movs	r3, #1
    5fce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5fd2:	6763      	str	r3, [r4, #116]	; 0x74
}
    5fd4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5fd6:	4804      	ldr	r0, [pc, #16]	; (5fe8 <nrfx_gpiote_init+0x4c>)
    5fd8:	e7fc      	b.n	5fd4 <nrfx_gpiote_init+0x38>
    5fda:	bf00      	nop
    5fdc:	20000190 	.word	0x20000190
    5fe0:	40006000 	.word	0x40006000
    5fe4:	0bad0000 	.word	0x0bad0000
    5fe8:	0bad0005 	.word	0x0bad0005

00005fec <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5fec:	4b03      	ldr	r3, [pc, #12]	; (5ffc <nrfx_gpiote_is_init+0x10>)
    5fee:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5ff2:	3800      	subs	r0, #0
    5ff4:	bf18      	it	ne
    5ff6:	2001      	movne	r0, #1
    5ff8:	4770      	bx	lr
    5ffa:	bf00      	nop
    5ffc:	20000190 	.word	0x20000190

00006000 <nrfx_gpiote_channel_free>:
{
    6000:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6002:	4801      	ldr	r0, [pc, #4]	; (6008 <nrfx_gpiote_channel_free+0x8>)
    6004:	f7ff bd62 	b.w	5acc <nrfx_flag32_free>
    6008:	20000200 	.word	0x20000200

0000600c <nrfx_gpiote_channel_alloc>:
{
    600c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    600e:	4801      	ldr	r0, [pc, #4]	; (6014 <nrfx_gpiote_channel_alloc+0x8>)
    6010:	f7ff bd36 	b.w	5a80 <nrfx_flag32_alloc>
    6014:	20000200 	.word	0x20000200

00006018 <nrfx_gpiote_trigger_enable>:
{
    6018:	b537      	push	{r0, r1, r2, r4, r5, lr}
    601a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    601c:	f7ff fe14 	bl	5c48 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6020:	f104 0208 	add.w	r2, r4, #8
    6024:	4b1e      	ldr	r3, [pc, #120]	; (60a0 <nrfx_gpiote_trigger_enable+0x88>)
    6026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    602a:	b1e8      	cbz	r0, 6068 <nrfx_gpiote_trigger_enable+0x50>
    602c:	f013 0502 	ands.w	r5, r3, #2
    6030:	d11a      	bne.n	6068 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6032:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6034:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6036:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    603a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    603e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6042:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6046:	6005      	str	r5, [r0, #0]
    6048:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    604a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    604e:	f040 0001 	orr.w	r0, r0, #1
    6052:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6056:	b129      	cbz	r1, 6064 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6058:	2201      	movs	r2, #1
    605a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    605e:	4a11      	ldr	r2, [pc, #68]	; (60a4 <nrfx_gpiote_trigger_enable+0x8c>)
    6060:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6064:	b003      	add	sp, #12
    6066:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6068:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    606c:	2b04      	cmp	r3, #4
    606e:	d012      	beq.n	6096 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6070:	2b05      	cmp	r3, #5
    6072:	d012      	beq.n	609a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6074:	a801      	add	r0, sp, #4
    6076:	9401      	str	r4, [sp, #4]
    6078:	f7ff fdd8 	bl	5c2c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    607c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    607e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6082:	40d9      	lsrs	r1, r3
    6084:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6088:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    608a:	4620      	mov	r0, r4
}
    608c:	b003      	add	sp, #12
    608e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6092:	f003 bfbb 	b.w	a00c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6096:	2103      	movs	r1, #3
    6098:	e7f7      	b.n	608a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    609a:	2102      	movs	r1, #2
    609c:	e7f5      	b.n	608a <nrfx_gpiote_trigger_enable+0x72>
    609e:	bf00      	nop
    60a0:	20000190 	.word	0x20000190
    60a4:	40006000 	.word	0x40006000

000060a8 <nrfx_gpiote_trigger_disable>:
{
    60a8:	b508      	push	{r3, lr}
    60aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    60ac:	f7ff fdcc 	bl	5c48 <pin_in_use_by_te>
    60b0:	b1c0      	cbz	r0, 60e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    60b2:	f102 0108 	add.w	r1, r2, #8
    60b6:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <nrfx_gpiote_trigger_disable+0x48>)
    60b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    60bc:	0799      	lsls	r1, r3, #30
    60be:	d411      	bmi.n	60e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    60c0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    60c2:	2201      	movs	r2, #1
    60c4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    60c6:	009b      	lsls	r3, r3, #2
    60c8:	490a      	ldr	r1, [pc, #40]	; (60f4 <nrfx_gpiote_trigger_disable+0x4c>)
    60ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    60ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    60d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    60d6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    60da:	f022 0203 	bic.w	r2, r2, #3
    60de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    60e2:	bd08      	pop	{r3, pc}
    60e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    60e8:	2100      	movs	r1, #0
    60ea:	4610      	mov	r0, r2
    60ec:	f003 bf8e 	b.w	a00c <nrf_gpio_cfg_sense_set>
    60f0:	20000190 	.word	0x20000190
    60f4:	40006000 	.word	0x40006000

000060f8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    60f8:	4b0e      	ldr	r3, [pc, #56]	; (6134 <nrfx_gpiote_pin_uninit+0x3c>)
    60fa:	f100 0208 	add.w	r2, r0, #8
{
    60fe:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6100:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6104:	07db      	lsls	r3, r3, #31
{
    6106:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6108:	d511      	bpl.n	612e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    610a:	f7ff ffcd 	bl	60a8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    610e:	4620      	mov	r0, r4
    6110:	f7ff fdec 	bl	5cec <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6114:	a801      	add	r0, sp, #4
    6116:	9401      	str	r4, [sp, #4]
    6118:	f7ff fd88 	bl	5c2c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    611c:	9b01      	ldr	r3, [sp, #4]
    611e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6122:	2202      	movs	r2, #2
    6124:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6128:	4803      	ldr	r0, [pc, #12]	; (6138 <nrfx_gpiote_pin_uninit+0x40>)
}
    612a:	b002      	add	sp, #8
    612c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    612e:	4803      	ldr	r0, [pc, #12]	; (613c <nrfx_gpiote_pin_uninit+0x44>)
    6130:	e7fb      	b.n	612a <nrfx_gpiote_pin_uninit+0x32>
    6132:	bf00      	nop
    6134:	20000190 	.word	0x20000190
    6138:	0bad0000 	.word	0x0bad0000
    613c:	0bad0004 	.word	0x0bad0004

00006140 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6144:	4b64      	ldr	r3, [pc, #400]	; (62d8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    6146:	4865      	ldr	r0, [pc, #404]	; (62dc <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6148:	4965      	ldr	r1, [pc, #404]	; (62e0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    614a:	2600      	movs	r6, #0
{
    614c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    614e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6150:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6152:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6154:	b135      	cbz	r5, 6164 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6156:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    615a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    615c:	bf1e      	ittt	ne
    615e:	601c      	strne	r4, [r3, #0]
    6160:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6162:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6164:	3304      	adds	r3, #4
    6166:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6168:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    616c:	d1f1      	bne.n	6152 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    616e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 62dc <nrfx_gpiote_irq_handler+0x19c>
    6172:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6176:	2b00      	cmp	r3, #0
    6178:	f000 8091 	beq.w	629e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    617c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6180:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6184:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6186:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    618a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    618e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6190:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6194:	2700      	movs	r7, #0
            while (latch[i])
    6196:	f10d 0910 	add.w	r9, sp, #16
    619a:	017b      	lsls	r3, r7, #5
    619c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    619e:	f04f 0a01 	mov.w	sl, #1
    61a2:	e049      	b.n	6238 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    61a4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    61a6:	4a4f      	ldr	r2, [pc, #316]	; (62e4 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    61a8:	fa94 f4a4 	rbit	r4, r4
    61ac:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    61b0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    61b2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    61b6:	08e0      	lsrs	r0, r4, #3
    61b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    61bc:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    61be:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    61c2:	fa0a fc02 	lsl.w	ip, sl, r2
    61c6:	f819 2000 	ldrb.w	r2, [r9, r0]
    61ca:	ea22 020c 	bic.w	r2, r2, ip
    61ce:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    61d2:	a803      	add	r0, sp, #12
    61d4:	f3c3 0582 	ubfx	r5, r3, #2, #3
    61d8:	0899      	lsrs	r1, r3, #2
    61da:	f7ff fd27 	bl	5c2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    61de:	9a03      	ldr	r2, [sp, #12]
    61e0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    61e4:	074b      	lsls	r3, r1, #29
    61e6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    61ea:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    61ec:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    61f0:	d529      	bpl.n	6246 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    61f2:	4620      	mov	r0, r4
    61f4:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    61f6:	b2d5      	uxtb	r5, r2
    61f8:	f7ff fd30 	bl	5c5c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    61fc:	a803      	add	r0, sp, #12
    61fe:	9403      	str	r4, [sp, #12]
    6200:	f7ff fd14 	bl	5c2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6204:	9b03      	ldr	r3, [sp, #12]
    6206:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    620a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    620e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6212:	429d      	cmp	r5, r3
    6214:	d107      	bne.n	6226 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6216:	2100      	movs	r1, #0
    6218:	4620      	mov	r0, r4
    621a:	f003 fef7 	bl	a00c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    621e:	4629      	mov	r1, r5
    6220:	4620      	mov	r0, r4
    6222:	f003 fef3 	bl	a00c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6226:	a803      	add	r0, sp, #12
    6228:	9403      	str	r4, [sp, #12]
    622a:	f7ff fcff 	bl	5c2c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    622e:	9b03      	ldr	r3, [sp, #12]
    6230:	fa0a f303 	lsl.w	r3, sl, r3
    6234:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6238:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    623c:	2c00      	cmp	r4, #0
    623e:	d1b1      	bne.n	61a4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6240:	b9cf      	cbnz	r7, 6276 <nrfx_gpiote_irq_handler+0x136>
    6242:	2701      	movs	r7, #1
    6244:	e7a9      	b.n	619a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6246:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6248:	bf0c      	ite	eq
    624a:	2103      	moveq	r1, #3
    624c:	2102      	movne	r1, #2
    624e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6250:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6252:	f003 fedb 	bl	a00c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6256:	2d03      	cmp	r5, #3
    6258:	d004      	beq.n	6264 <nrfx_gpiote_irq_handler+0x124>
    625a:	9a01      	ldr	r2, [sp, #4]
    625c:	2a02      	cmp	r2, #2
    625e:	d106      	bne.n	626e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6260:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6262:	d1e0      	bne.n	6226 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    6264:	4659      	mov	r1, fp
    6266:	4620      	mov	r0, r4
    6268:	f7ff fcf8 	bl	5c5c <call_handler>
    626c:	e7db      	b.n	6226 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    626e:	2a03      	cmp	r2, #3
    6270:	d1d9      	bne.n	6226 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6272:	2d02      	cmp	r5, #2
    6274:	e7f5      	b.n	6262 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6276:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    627a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    627e:	491a      	ldr	r1, [pc, #104]	; (62e8 <nrfx_gpiote_irq_handler+0x1a8>)
    6280:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6284:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6288:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    628a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    628e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    6292:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6294:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    6298:	4313      	orrs	r3, r2
    629a:	f47f af7b 	bne.w	6194 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    629e:	2401      	movs	r4, #1
    while (mask)
    62a0:	b916      	cbnz	r6, 62a8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    62a2:	b007      	add	sp, #28
    62a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    62a8:	fa96 f3a6 	rbit	r3, r6
    62ac:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    62b0:	fa04 f203 	lsl.w	r2, r4, r3
    62b4:	009b      	lsls	r3, r3, #2
    62b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    62ba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    62be:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    62c2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    62c6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    62ca:	f3c0 2005 	ubfx	r0, r0, #8, #6
    62ce:	f3c1 4101 	ubfx	r1, r1, #16, #2
    62d2:	f7ff fcc3 	bl	5c5c <call_handler>
    62d6:	e7e3      	b.n	62a0 <nrfx_gpiote_irq_handler+0x160>
    62d8:	40006100 	.word	0x40006100
    62dc:	40006000 	.word	0x40006000
    62e0:	40006120 	.word	0x40006120
    62e4:	20000190 	.word	0x20000190
    62e8:	50000300 	.word	0x50000300

000062ec <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    62ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    62ee:	4c18      	ldr	r4, [pc, #96]	; (6350 <nrfx_power_init+0x64>)
    62f0:	7823      	ldrb	r3, [r4, #0]
    62f2:	bb53      	cbnz	r3, 634a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    62f4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    62f6:	0791      	lsls	r1, r2, #30
    62f8:	f3c2 0340 	ubfx	r3, r2, #1, #1
    62fc:	d511      	bpl.n	6322 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    62fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6302:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    6306:	2908      	cmp	r1, #8
    6308:	d11d      	bne.n	6346 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    630a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    630e:	2b05      	cmp	r3, #5
    6310:	d819      	bhi.n	6346 <nrfx_power_init+0x5a>
    6312:	4910      	ldr	r1, [pc, #64]	; (6354 <nrfx_power_init+0x68>)
    6314:	5cc9      	ldrb	r1, [r1, r3]
    6316:	2301      	movs	r3, #1
    6318:	b119      	cbz	r1, 6322 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    631a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    631e:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6322:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6326:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    632a:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    632e:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6330:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    6334:	f7fd f9f4 	bl	3720 <arch_irq_is_enabled>
    6338:	b908      	cbnz	r0, 633e <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    633a:	f7fd f9cd 	bl	36d8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    633e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6340:	4805      	ldr	r0, [pc, #20]	; (6358 <nrfx_power_init+0x6c>)
    m_initialized = true;
    6342:	7023      	strb	r3, [r4, #0]
}
    6344:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6346:	2301      	movs	r3, #1
    6348:	e7eb      	b.n	6322 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    634a:	4804      	ldr	r0, [pc, #16]	; (635c <nrfx_power_init+0x70>)
    634c:	e7fa      	b.n	6344 <nrfx_power_init+0x58>
    634e:	bf00      	nop
    6350:	20003c06 	.word	0x20003c06
    6354:	0000b1bc 	.word	0x0000b1bc
    6358:	0bad0000 	.word	0x0bad0000
    635c:	0bad000c 	.word	0x0bad000c

00006360 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6364:	f44f 7260 	mov.w	r2, #896	; 0x380
    6368:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    636c:	4b01      	ldr	r3, [pc, #4]	; (6374 <nrfx_power_usbevt_uninit+0x14>)
    636e:	2200      	movs	r2, #0
    6370:	601a      	str	r2, [r3, #0]
}
    6372:	4770      	bx	lr
    6374:	200038b0 	.word	0x200038b0

00006378 <nrfx_power_usbevt_init>:
{
    6378:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    637a:	f7ff fff1 	bl	6360 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    637e:	6803      	ldr	r3, [r0, #0]
    6380:	b10b      	cbz	r3, 6386 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    6382:	4a01      	ldr	r2, [pc, #4]	; (6388 <nrfx_power_usbevt_init+0x10>)
    6384:	6013      	str	r3, [r2, #0]
}
    6386:	bd08      	pop	{r3, pc}
    6388:	200038b0 	.word	0x200038b0

0000638c <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    638c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    6390:	b510      	push	{r4, lr}
    6392:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6396:	0762      	lsls	r2, r4, #29
    6398:	d507      	bpl.n	63aa <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    639a:	f44f 7084 	mov.w	r0, #264	; 0x108
    639e:	f003 fe44 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    63a2:	b110      	cbz	r0, 63aa <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    63a4:	4b1e      	ldr	r3, [pc, #120]	; (6420 <nrfx_power_irq_handler+0x94>)
    63a6:	681b      	ldr	r3, [r3, #0]
    63a8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    63aa:	06a3      	lsls	r3, r4, #26
    63ac:	d508      	bpl.n	63c0 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    63ae:	f44f 708a 	mov.w	r0, #276	; 0x114
    63b2:	f003 fe3a 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    63b6:	b118      	cbz	r0, 63c0 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    63b8:	4b1a      	ldr	r3, [pc, #104]	; (6424 <nrfx_power_irq_handler+0x98>)
    63ba:	2000      	movs	r0, #0
    63bc:	681b      	ldr	r3, [r3, #0]
    63be:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    63c0:	0660      	lsls	r0, r4, #25
    63c2:	d508      	bpl.n	63d6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    63c4:	f44f 708c 	mov.w	r0, #280	; 0x118
    63c8:	f003 fe2f 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    63cc:	b118      	cbz	r0, 63d6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    63ce:	4b15      	ldr	r3, [pc, #84]	; (6424 <nrfx_power_irq_handler+0x98>)
    63d0:	2001      	movs	r0, #1
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    63d6:	0621      	lsls	r1, r4, #24
    63d8:	d508      	bpl.n	63ec <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    63da:	f44f 708e 	mov.w	r0, #284	; 0x11c
    63de:	f003 fe24 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    63e2:	b118      	cbz	r0, 63ec <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    63e4:	4b10      	ldr	r3, [pc, #64]	; (6428 <nrfx_power_irq_handler+0x9c>)
    63e6:	2000      	movs	r0, #0
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    63ec:	05e2      	lsls	r2, r4, #23
    63ee:	d508      	bpl.n	6402 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    63f0:	f44f 7090 	mov.w	r0, #288	; 0x120
    63f4:	f003 fe19 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    63f8:	b118      	cbz	r0, 6402 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    63fa:	4b0b      	ldr	r3, [pc, #44]	; (6428 <nrfx_power_irq_handler+0x9c>)
    63fc:	2001      	movs	r0, #1
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6402:	05a3      	lsls	r3, r4, #22
    6404:	d50a      	bpl.n	641c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6406:	f44f 7092 	mov.w	r0, #292	; 0x124
    640a:	f003 fe0e 	bl	a02a <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    640e:	b128      	cbz	r0, 641c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6410:	4b05      	ldr	r3, [pc, #20]	; (6428 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    6412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	2002      	movs	r0, #2
    641a:	4718      	bx	r3
}
    641c:	bd10      	pop	{r4, pc}
    641e:	bf00      	nop
    6420:	200038a8 	.word	0x200038a8
    6424:	200038ac 	.word	0x200038ac
    6428:	200038b0 	.word	0x200038b0

0000642c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    642c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    642e:	4801      	ldr	r0, [pc, #4]	; (6434 <nrfx_ppi_channel_alloc+0x8>)
    6430:	f7ff bb26 	b.w	5a80 <nrfx_flag32_alloc>
    6434:	2000020c 	.word	0x2000020c

00006438 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    6438:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    643a:	4b30      	ldr	r3, [pc, #192]	; (64fc <twi_tx_start_transfer+0xc4>)
    643c:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    643e:	2300      	movs	r3, #0
    6440:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6444:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6448:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    644c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    6450:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    6454:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    6458:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    645c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    6460:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    6464:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    6466:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    646a:	2301      	movs	r3, #1
    646c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    646e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    6472:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    6474:	429a      	cmp	r2, r3
    6476:	bf18      	it	ne
    6478:	6083      	strne	r3, [r0, #8]
{
    647a:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    647c:	f003 fdf6 	bl	a06c <twi_send_byte>

    if (p_cb->handler)
    6480:	682b      	ldr	r3, [r5, #0]
    6482:	b183      	cbz	r3, 64a6 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    6484:	f240 2386 	movw	r3, #646	; 0x286
    6488:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    648a:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    648c:	481c      	ldr	r0, [pc, #112]	; (6500 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    648e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    6492:	b003      	add	sp, #12
    6494:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    6496:	4629      	mov	r1, r5
    6498:	4620      	mov	r0, r4
    649a:	f003 fe04 	bl	a0a6 <twi_transfer>
        while ((hw_timeout > 0) &&
    649e:	b128      	cbz	r0, 64ac <twi_tx_start_transfer+0x74>
            hw_timeout--;
    64a0:	9b01      	ldr	r3, [sp, #4]
    64a2:	3b01      	subs	r3, #1
    64a4:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	2b00      	cmp	r3, #0
    64aa:	dcf4      	bgt.n	6496 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    64ac:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    64b0:	b95b      	cbnz	r3, 64ca <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    64b2:	4813      	ldr	r0, [pc, #76]	; (6500 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    64b4:	9b01      	ldr	r3, [sp, #4]
    64b6:	2b00      	cmp	r3, #0
    64b8:	dceb      	bgt.n	6492 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    64ba:	2300      	movs	r3, #0
    64bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    64c0:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    64c2:	4810      	ldr	r0, [pc, #64]	; (6504 <twi_tx_start_transfer+0xcc>)
    64c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    64c8:	e7e3      	b.n	6492 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    64ca:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    64ce:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    64d2:	b18b      	cbz	r3, 64f8 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    64d4:	4a0c      	ldr	r2, [pc, #48]	; (6508 <twi_tx_start_transfer+0xd0>)
    64d6:	480b      	ldr	r0, [pc, #44]	; (6504 <twi_tx_start_transfer+0xcc>)
    64d8:	f013 0f01 	tst.w	r3, #1
    64dc:	bf18      	it	ne
    64de:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    64e0:	f013 0f02 	tst.w	r3, #2
    64e4:	f102 0201 	add.w	r2, r2, #1
    64e8:	bf18      	it	ne
    64ea:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    64ec:	f013 0f04 	tst.w	r3, #4
    64f0:	4b06      	ldr	r3, [pc, #24]	; (650c <twi_tx_start_transfer+0xd4>)
    64f2:	bf18      	it	ne
    64f4:	4618      	movne	r0, r3
    64f6:	e7dd      	b.n	64b4 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    64f8:	4802      	ldr	r0, [pc, #8]	; (6504 <twi_tx_start_transfer+0xcc>)
    64fa:	e7db      	b.n	64b4 <twi_tx_start_transfer+0x7c>
    64fc:	000186a0 	.word	0x000186a0
    6500:	0bad0000 	.word	0x0bad0000
    6504:	0bad0001 	.word	0x0bad0001
    6508:	0bae0000 	.word	0x0bae0000
    650c:	0bae0002 	.word	0x0bae0002

00006510 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    6510:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    6512:	4b34      	ldr	r3, [pc, #208]	; (65e4 <twi_rx_start_transfer+0xd4>)
    6514:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6516:	2300      	movs	r3, #0
    6518:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    651c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6520:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    6524:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    6528:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    652c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    6530:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    6534:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    6538:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    653a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    653e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6540:	2b01      	cmp	r3, #1
{
    6542:	4604      	mov	r4, r0
    6544:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6546:	d117      	bne.n	6578 <twi_rx_start_transfer+0x68>
    6548:	6a0b      	ldr	r3, [r1, #32]
    654a:	065b      	lsls	r3, r3, #25
    654c:	d414      	bmi.n	6578 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    654e:	2302      	movs	r3, #2
    6550:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6554:	2301      	movs	r3, #1
    6556:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    6558:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    655c:	2a02      	cmp	r2, #2
    655e:	bf18      	it	ne
    6560:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    6562:	682b      	ldr	r3, [r5, #0]
    6564:	b193      	cbz	r3, 658c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    6566:	f240 2386 	movw	r3, #646	; 0x286
    656a:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    656c:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    656e:	481e      	ldr	r0, [pc, #120]	; (65e8 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    6570:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    6574:	b003      	add	sp, #12
    6576:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    6578:	2301      	movs	r3, #1
    657a:	e7e9      	b.n	6550 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    657c:	4629      	mov	r1, r5
    657e:	4620      	mov	r0, r4
    6580:	f003 fd91 	bl	a0a6 <twi_transfer>
        while ((hw_timeout > 0) &&
    6584:	b128      	cbz	r0, 6592 <twi_rx_start_transfer+0x82>
               hw_timeout--;
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	3b01      	subs	r3, #1
    658a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    658c:	9b01      	ldr	r3, [sp, #4]
    658e:	2b00      	cmp	r3, #0
    6590:	dcf4      	bgt.n	657c <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    6592:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    6596:	b95b      	cbnz	r3, 65b0 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    6598:	4813      	ldr	r0, [pc, #76]	; (65e8 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	2b00      	cmp	r3, #0
    659e:	dce9      	bgt.n	6574 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    65a0:	2300      	movs	r3, #0
    65a2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    65a6:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    65a8:	4810      	ldr	r0, [pc, #64]	; (65ec <twi_rx_start_transfer+0xdc>)
    65aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    65ae:	e7e1      	b.n	6574 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    65b0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    65b4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    65b8:	b18b      	cbz	r3, 65de <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    65ba:	4a0d      	ldr	r2, [pc, #52]	; (65f0 <twi_rx_start_transfer+0xe0>)
    65bc:	480b      	ldr	r0, [pc, #44]	; (65ec <twi_rx_start_transfer+0xdc>)
    65be:	f013 0f01 	tst.w	r3, #1
    65c2:	bf18      	it	ne
    65c4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    65c6:	f013 0f02 	tst.w	r3, #2
    65ca:	f102 0201 	add.w	r2, r2, #1
    65ce:	bf18      	it	ne
    65d0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    65d2:	f013 0f04 	tst.w	r3, #4
    65d6:	4b07      	ldr	r3, [pc, #28]	; (65f4 <twi_rx_start_transfer+0xe4>)
    65d8:	bf18      	it	ne
    65da:	4618      	movne	r0, r3
    65dc:	e7dd      	b.n	659a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    65de:	4803      	ldr	r0, [pc, #12]	; (65ec <twi_rx_start_transfer+0xdc>)
    65e0:	e7db      	b.n	659a <twi_rx_start_transfer+0x8a>
    65e2:	bf00      	nop
    65e4:	000186a0 	.word	0x000186a0
    65e8:	0bad0000 	.word	0x0bad0000
    65ec:	0bad0001 	.word	0x0bad0001
    65f0:	0bae0000 	.word	0x0bae0000
    65f4:	0bae0002 	.word	0x0bae0002

000065f8 <nrfx_twi_init>:
{
    65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    65fa:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    65fc:	4d29      	ldr	r5, [pc, #164]	; (66a4 <nrfx_twi_init+0xac>)
    65fe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    6602:	fb0c fc07 	mul.w	ip, ip, r7
    6606:	eb05 040c 	add.w	r4, r5, ip
    660a:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    660e:	2e00      	cmp	r6, #0
    6610:	d146      	bne.n	66a0 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    6612:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    6614:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    6616:	7b4b      	ldrb	r3, [r1, #13]
    6618:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    661c:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    661e:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    6620:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    6624:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    6628:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    662c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    6630:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    6634:	b9e3      	cbnz	r3, 6670 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    6636:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    6638:	4b1b      	ldr	r3, [pc, #108]	; (66a8 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    663a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    663e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    6640:	2c01      	cmp	r4, #1
    6642:	bf18      	it	ne
    6644:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6648:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
    664c:	bf08      	it	eq
    664e:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    6650:	f240 6c0c 	movw	ip, #1548	; 0x60c
    6654:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    6658:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    665a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    665e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    6660:	2c01      	cmp	r4, #1
    6662:	bf18      	it	ne
    6664:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6668:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    666c:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    6670:	7bcb      	ldrb	r3, [r1, #15]
    6672:	b92b      	cbnz	r3, 6680 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    6674:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    6678:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    667c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    6680:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    6682:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    6686:	b11a      	cbz	r2, 6690 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    6688:	f340 3007 	sbfx	r0, r0, #12, #8
    668c:	f7fd f824 	bl	36d8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6690:	233c      	movs	r3, #60	; 0x3c
    6692:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    6696:	4805      	ldr	r0, [pc, #20]	; (66ac <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6698:	2301      	movs	r3, #1
    669a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    66a0:	4803      	ldr	r0, [pc, #12]	; (66b0 <nrfx_twi_init+0xb8>)
    66a2:	e7fc      	b.n	669e <nrfx_twi_init+0xa6>
    66a4:	200038b4 	.word	0x200038b4
    66a8:	50000300 	.word	0x50000300
    66ac:	0bad0000 	.word	0x0bad0000
    66b0:	0bad0005 	.word	0x0bad0005

000066b4 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    66b4:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    66b6:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    66b8:	2105      	movs	r1, #5
    66ba:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    66be:	4b04      	ldr	r3, [pc, #16]	; (66d0 <nrfx_twi_enable+0x1c>)
    66c0:	213c      	movs	r1, #60	; 0x3c
    66c2:	fb01 3302 	mla	r3, r1, r2, r3
    66c6:	2202      	movs	r2, #2
    66c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    66cc:	4770      	bx	lr
    66ce:	bf00      	nop
    66d0:	200038b4 	.word	0x200038b4

000066d4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    66d4:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    66d6:	4b0c      	ldr	r3, [pc, #48]	; (6708 <nrfx_twi_disable+0x34>)
{
    66d8:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    66da:	7904      	ldrb	r4, [r0, #4]
    66dc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    66e0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    66e4:	4b09      	ldr	r3, [pc, #36]	; (670c <nrfx_twi_disable+0x38>)
    66e6:	f021 0103 	bic.w	r1, r1, #3
    66ea:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    66ee:	2100      	movs	r1, #0
    66f0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    66f4:	223c      	movs	r2, #60	; 0x3c
    66f6:	fb02 3304 	mla	r3, r2, r4, r3
    66fa:	2201      	movs	r2, #1
    66fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    6700:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    6704:	bd10      	pop	{r4, pc}
    6706:	bf00      	nop
    6708:	00044286 	.word	0x00044286
    670c:	200038b4 	.word	0x200038b4

00006710 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    6710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6714:	4f31      	ldr	r7, [pc, #196]	; (67dc <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6716:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    6718:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    671c:	233c      	movs	r3, #60	; 0x3c
    671e:	fb03 7304 	mla	r3, r3, r4, r7
{
    6722:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    6728:	2b01      	cmp	r3, #1
{
    672a:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    672c:	d104      	bne.n	6738 <nrfx_twi_xfer+0x28>
    672e:	780b      	ldrb	r3, [r1, #0]
    6730:	2b01      	cmp	r3, #1
    6732:	d106      	bne.n	6742 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    6734:	482a      	ldr	r0, [pc, #168]	; (67e0 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6736:	e011      	b.n	675c <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    6738:	2b02      	cmp	r3, #2
    673a:	d102      	bne.n	6742 <nrfx_twi_xfer+0x32>
    673c:	780b      	ldrb	r3, [r1, #0]
    673e:	2b01      	cmp	r3, #1
    6740:	d1f8      	bne.n	6734 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    6742:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    6744:	4b27      	ldr	r3, [pc, #156]	; (67e4 <nrfx_twi_xfer+0xd4>)
    6746:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    674a:	fb06 7604 	mla	r6, r6, r4, r7
    674e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    6752:	b12b      	cbz	r3, 6760 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    6754:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    6756:	4824      	ldr	r0, [pc, #144]	; (67e8 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    6758:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    6760:	f08c 0304 	eor.w	r3, ip, #4
    6764:	f3c3 0380 	ubfx	r3, r3, #2, #1
    6768:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    676c:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    6770:	46a8      	mov	r8, r5
    6772:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    6776:	f106 0e0c 	add.w	lr, r6, #12
    677a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    677e:	f8d8 3000 	ldr.w	r3, [r8]
    6782:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    6786:	686b      	ldr	r3, [r5, #4]
    6788:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    678a:	68eb      	ldr	r3, [r5, #12]
    678c:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    678e:	786b      	ldrb	r3, [r5, #1]
    6790:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    6794:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6796:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    679a:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    679c:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    67a0:	d017      	beq.n	67d2 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    67a2:	b99b      	cbnz	r3, 67cc <nrfx_twi_xfer+0xbc>
    67a4:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    67a8:	233c      	movs	r3, #60	; 0x3c
    67aa:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    67ae:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    67b0:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    67b4:	4648      	mov	r0, r9
    67b6:	f7ff fe3f 	bl	6438 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    67ba:	233c      	movs	r3, #60	; 0x3c
    67bc:	435c      	muls	r4, r3
    67be:	193a      	adds	r2, r7, r4
    67c0:	593b      	ldr	r3, [r7, r4]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d1ca      	bne.n	675c <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    67c6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    67ca:	e7c7      	b.n	675c <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    67cc:	f04f 0c01 	mov.w	ip, #1
    67d0:	e7ea      	b.n	67a8 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    67d2:	4651      	mov	r1, sl
    67d4:	4648      	mov	r0, r9
    67d6:	f7ff fe9b 	bl	6510 <twi_rx_start_transfer>
    67da:	e7ee      	b.n	67ba <nrfx_twi_xfer+0xaa>
    67dc:	200038b4 	.word	0x200038b4
    67e0:	0bad0005 	.word	0x0bad0005
    67e4:	00044286 	.word	0x00044286
    67e8:	0bad000b 	.word	0x0bad000b

000067ec <nrfx_twi_0_irq_handler>:
}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
    67ec:	4901      	ldr	r1, [pc, #4]	; (67f4 <nrfx_twi_0_irq_handler+0x8>)
    67ee:	4802      	ldr	r0, [pc, #8]	; (67f8 <nrfx_twi_0_irq_handler+0xc>)
    67f0:	f003 bce5 	b.w	a1be <twi_irq_handler>
    67f4:	200038b4 	.word	0x200038b4
    67f8:	40003000 	.word	0x40003000

000067fc <nrfx_twi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
    67fc:	4902      	ldr	r1, [pc, #8]	; (6808 <nrfx_twi_1_irq_handler+0xc>)
    67fe:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    6802:	f003 bcdc 	b.w	a1be <twi_irq_handler>
    6806:	bf00      	nop
    6808:	200038f0 	.word	0x200038f0

0000680c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    680c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6810:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6814:	2a08      	cmp	r2, #8
    6816:	d106      	bne.n	6826 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6818:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    681c:	2b05      	cmp	r3, #5
    681e:	d804      	bhi.n	682a <nrf52_errata_187+0x1e>
    6820:	4a03      	ldr	r2, [pc, #12]	; (6830 <nrf52_errata_187+0x24>)
    6822:	5cd0      	ldrb	r0, [r2, r3]
    6824:	4770      	bx	lr
        return false;
    6826:	2000      	movs	r0, #0
    6828:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    682a:	2001      	movs	r0, #1
}
    682c:	4770      	bx	lr
    682e:	bf00      	nop
    6830:	0000b1c2 	.word	0x0000b1c2

00006834 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6834:	4b05      	ldr	r3, [pc, #20]	; (684c <ep_state_access+0x18>)
    6836:	f010 0f80 	tst.w	r0, #128	; 0x80
    683a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    683e:	bf08      	it	eq
    6840:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    6842:	f000 000f 	and.w	r0, r0, #15
}
    6846:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    684a:	4770      	bx	lr
    684c:	20003a9c 	.word	0x20003a9c

00006850 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    6850:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    6852:	f003 fd11 	bl	a278 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    6856:	b118      	cbz	r0, 6860 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6858:	4b03      	ldr	r3, [pc, #12]	; (6868 <usbd_dma_pending_clear+0x18>)
    685a:	2200      	movs	r2, #0
    685c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
    6860:	4b02      	ldr	r3, [pc, #8]	; (686c <usbd_dma_pending_clear+0x1c>)
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
}
    6866:	bd08      	pop	{r3, pc}
    6868:	40027000 	.word	0x40027000
    686c:	20003c08 	.word	0x20003c08

00006870 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    6870:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    6872:	4a09      	ldr	r2, [pc, #36]	; (6898 <ev_usbreset_handler+0x28>)
    6874:	2300      	movs	r3, #0
    6876:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6878:	4a08      	ldr	r2, [pc, #32]	; (689c <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    687a:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    687e:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    6880:	f88d 3007 	strb.w	r3, [sp, #7]
    6884:	2301      	movs	r3, #1
    6886:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    688a:	4b05      	ldr	r3, [pc, #20]	; (68a0 <ev_usbreset_handler+0x30>)
    688c:	a801      	add	r0, sp, #4
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	4798      	blx	r3
}
    6892:	b003      	add	sp, #12
    6894:	f85d fb04 	ldr.w	pc, [sp], #4
    6898:	20003c07 	.word	0x20003c07
    689c:	20003c0a 	.word	0x20003c0a
    68a0:	20003b2c 	.word	0x20003b2c

000068a4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    68a4:	4b21      	ldr	r3, [pc, #132]	; (692c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    68a6:	b513      	push	{r0, r1, r4, lr}
    68a8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    68ac:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    68b0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    68b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    68b6:	d50e      	bpl.n	68d6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    68b8:	4b1d      	ldr	r3, [pc, #116]	; (6930 <ev_usbevent_handler+0x8c>)
    68ba:	2201      	movs	r2, #1
    68bc:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    68be:	2300      	movs	r3, #0
    68c0:	f8ad 3005 	strh.w	r3, [sp, #5]
    68c4:	f88d 3007 	strb.w	r3, [sp, #7]
    68c8:	2302      	movs	r3, #2
    68ca:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    68ce:	4b19      	ldr	r3, [pc, #100]	; (6934 <ev_usbevent_handler+0x90>)
    68d0:	a801      	add	r0, sp, #4
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    68d6:	05a2      	lsls	r2, r4, #22
    68d8:	d50d      	bpl.n	68f6 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    68da:	4a15      	ldr	r2, [pc, #84]	; (6930 <ev_usbevent_handler+0x8c>)
    68dc:	2300      	movs	r3, #0
    68de:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    68e0:	f8ad 3005 	strh.w	r3, [sp, #5]
    68e4:	f88d 3007 	strb.w	r3, [sp, #7]
    68e8:	2303      	movs	r3, #3
    68ea:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    68ee:	4b11      	ldr	r3, [pc, #68]	; (6934 <ev_usbevent_handler+0x90>)
    68f0:	a801      	add	r0, sp, #4
    68f2:	681b      	ldr	r3, [r3, #0]
    68f4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    68f6:	0563      	lsls	r3, r4, #21
    68f8:	d515      	bpl.n	6926 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    68fa:	4a0d      	ldr	r2, [pc, #52]	; (6930 <ev_usbevent_handler+0x8c>)
    68fc:	7813      	ldrb	r3, [r2, #0]
    68fe:	b193      	cbz	r3, 6926 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    6900:	2300      	movs	r3, #0
    6902:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    6904:	4a09      	ldr	r2, [pc, #36]	; (692c <ev_usbevent_handler+0x88>)
    6906:	2101      	movs	r1, #1
    6908:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    690c:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    690e:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    6910:	f8ad 3005 	strh.w	r3, [sp, #5]
    6914:	f88d 3007 	strb.w	r3, [sp, #7]
    6918:	2304      	movs	r3, #4
    691a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    691e:	4b05      	ldr	r3, [pc, #20]	; (6934 <ev_usbevent_handler+0x90>)
    6920:	a801      	add	r0, sp, #4
    6922:	681b      	ldr	r3, [r3, #0]
    6924:	4798      	blx	r3
        }
    }
}
    6926:	b002      	add	sp, #8
    6928:	bd10      	pop	{r4, pc}
    692a:	bf00      	nop
    692c:	40027000 	.word	0x40027000
    6930:	20003c07 	.word	0x20003c07
    6934:	20003b2c 	.word	0x20003b2c

00006938 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    6938:	f04f 0320 	mov.w	r3, #32
    693c:	f3ef 8011 	mrs	r0, BASEPRI
    6940:	f383 8812 	msr	BASEPRI_MAX, r3
    6944:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6948:	4b0a      	ldr	r3, [pc, #40]	; (6974 <usbd_errata_187_211_begin+0x3c>)
    694a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    694e:	2203      	movs	r2, #3
    6950:	b961      	cbnz	r1, 696c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6952:	f249 3175 	movw	r1, #37749	; 0x9375
    6956:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    695a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    695e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6962:	f380 8811 	msr	BASEPRI, r0
    6966:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    696a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    696c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6970:	e7f7      	b.n	6962 <usbd_errata_187_211_begin+0x2a>
    6972:	bf00      	nop
    6974:	4006e000 	.word	0x4006e000

00006978 <usbd_errata_187_211_end>:
	__asm__ volatile(
    6978:	f04f 0320 	mov.w	r3, #32
    697c:	f3ef 8011 	mrs	r0, BASEPRI
    6980:	f383 8812 	msr	BASEPRI_MAX, r3
    6984:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6988:	4b0a      	ldr	r3, [pc, #40]	; (69b4 <usbd_errata_187_211_end+0x3c>)
    698a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    698e:	b961      	cbnz	r1, 69aa <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6990:	f249 3275 	movw	r2, #37749	; 0x9375
    6994:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6998:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    699c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    69a0:	f380 8811 	msr	BASEPRI, r0
    69a4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    69a8:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    69aa:	2200      	movs	r2, #0
    69ac:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    69b0:	e7f6      	b.n	69a0 <usbd_errata_187_211_end+0x28>
    69b2:	bf00      	nop
    69b4:	4006e000 	.word	0x4006e000

000069b8 <nrfx_usbd_feeder_flash>:
{
    69b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    69ba:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    69bc:	4f0b      	ldr	r7, [pc, #44]	; (69ec <nrfx_usbd_feeder_flash+0x34>)
    69be:	4295      	cmp	r5, r2
    69c0:	bf28      	it	cs
    69c2:	4615      	movcs	r5, r2
{
    69c4:	460c      	mov	r4, r1
    69c6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    69c8:	462a      	mov	r2, r5
    69ca:	6809      	ldr	r1, [r1, #0]
    69cc:	2340      	movs	r3, #64	; 0x40
    69ce:	4638      	mov	r0, r7
    69d0:	f004 f81a 	bl	aa08 <__memcpy_chk>
    p_transfer->size -= tx_size;
    69d4:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    69d6:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    69d8:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    69da:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    69de:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    69e0:	6060      	str	r0, [r4, #4]
}
    69e2:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    69e4:	6022      	str	r2, [r4, #0]
}
    69e6:	bf18      	it	ne
    69e8:	2001      	movne	r0, #1
    69ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ec:	20003b30 	.word	0x20003b30

000069f0 <nrfx_usbd_feeder_flash_zlp>:
{
    69f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    69f2:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    69f4:	4294      	cmp	r4, r2
    69f6:	bf28      	it	cs
    69f8:	4614      	movcs	r4, r2
{
    69fa:	4606      	mov	r6, r0
    69fc:	460d      	mov	r5, r1
    if (tx_size != 0)
    69fe:	b194      	cbz	r4, 6a26 <nrfx_usbd_feeder_flash_zlp+0x36>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6a00:	4f0a      	ldr	r7, [pc, #40]	; (6a2c <nrfx_usbd_feeder_flash_zlp+0x3c>)
    6a02:	6809      	ldr	r1, [r1, #0]
    6a04:	2340      	movs	r3, #64	; 0x40
    6a06:	4622      	mov	r2, r4
    6a08:	4638      	mov	r0, r7
    6a0a:	f003 fffd 	bl	aa08 <__memcpy_chk>
        p_next->p_data.tx = p_buffer;
    6a0e:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    6a10:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    6a12:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    6a14:	1b1b      	subs	r3, r3, r4
    6a16:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    6a18:	682b      	ldr	r3, [r5, #0]
}
    6a1a:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    6a1c:	4423      	add	r3, r4
    6a1e:	602b      	str	r3, [r5, #0]
}
    6a20:	bf18      	it	ne
    6a22:	2001      	movne	r0, #1
    6a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    6a26:	6004      	str	r4, [r0, #0]
    6a28:	e7f2      	b.n	6a10 <nrfx_usbd_feeder_flash_zlp+0x20>
    6a2a:	bf00      	nop
    6a2c:	20003b30 	.word	0x20003b30

00006a30 <ev_sof_handler>:
{
    6a30:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    6a32:	2300      	movs	r3, #0
    6a34:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    6a38:	4b0b      	ldr	r3, [pc, #44]	; (6a68 <ev_sof_handler+0x38>)
    6a3a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    6a3e:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6a42:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    6a46:	4a09      	ldr	r2, [pc, #36]	; (6a6c <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    6a48:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    6a4a:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    6a4c:	bf0c      	ite	eq
    6a4e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    6a52:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    6a56:	430b      	orrs	r3, r1
    6a58:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    6a5a:	4b05      	ldr	r3, [pc, #20]	; (6a70 <ev_sof_handler+0x40>)
    6a5c:	a801      	add	r0, sp, #4
    6a5e:	681b      	ldr	r3, [r3, #0]
    6a60:	4798      	blx	r3
}
    6a62:	b003      	add	sp, #12
    6a64:	f85d fb04 	ldr.w	pc, [sp], #4
    6a68:	40027000 	.word	0x40027000
    6a6c:	20003a08 	.word	0x20003a08
    6a70:	20003b2c 	.word	0x20003b2c

00006a74 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a74:	4b06      	ldr	r3, [pc, #24]	; (6a90 <atomic_and.constprop.0.isra.0+0x1c>)
    6a76:	f3bf 8f5b 	dmb	ish
    6a7a:	e853 2f00 	ldrex	r2, [r3]
    6a7e:	4002      	ands	r2, r0
    6a80:	e843 2100 	strex	r1, r2, [r3]
    6a84:	2900      	cmp	r1, #0
    6a86:	d1f8      	bne.n	6a7a <atomic_and.constprop.0.isra.0+0x6>
    6a88:	f3bf 8f5b 	dmb	ish
}
    6a8c:	4770      	bx	lr
    6a8e:	bf00      	nop
    6a90:	20003998 	.word	0x20003998

00006a94 <nrf_usbd_ep0in_dma_handler>:
{
    6a94:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    6a96:	f7ff fedb 	bl	6850 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6a9a:	4b08      	ldr	r3, [pc, #32]	; (6abc <nrf_usbd_ep0in_dma_handler+0x28>)
    6a9c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    6aa0:	2a03      	cmp	r2, #3
    6aa2:	d105      	bne.n	6ab0 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    6aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6aa8:	f06f 0001 	mvn.w	r0, #1
    6aac:	f7ff bfe2 	b.w	6a74 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d0f5      	beq.n	6aa4 <nrf_usbd_ep0in_dma_handler+0x10>
}
    6ab8:	bd08      	pop	{r3, pc}
    6aba:	bf00      	nop
    6abc:	20003a0c 	.word	0x20003a0c

00006ac0 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    6ac0:	2201      	movs	r2, #1
{
    6ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    6ac4:	fa02 f501 	lsl.w	r5, r2, r1
    6ac8:	491c      	ldr	r1, [pc, #112]	; (6b3c <usbd_ep_data_handler+0x7c>)
    6aca:	4e1d      	ldr	r6, [pc, #116]	; (6b40 <usbd_ep_data_handler+0x80>)
    6acc:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    6ace:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    6ad2:	ea43 0305 	orr.w	r3, r3, r5
{
    6ad6:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    6ad8:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    6ada:	d024      	beq.n	6b26 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6adc:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6ae0:	4b18      	ldr	r3, [pc, #96]	; (6b44 <usbd_ep_data_handler+0x84>)
    6ae2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6ae6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6aea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6aee:	681a      	ldr	r2, [r3, #0]
    if (ret)
    6af0:	b132      	cbz	r2, 6b00 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6af2:	2200      	movs	r2, #0
    6af4:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    6af6:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    6af8:	681b      	ldr	r3, [r3, #0]
    6afa:	d011      	beq.n	6b20 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    6afc:	f003 fc0c 	bl	a318 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6b00:	6831      	ldr	r1, [r6, #0]
    6b02:	4029      	ands	r1, r5
    6b04:	d10a      	bne.n	6b1c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6b06:	2306      	movs	r3, #6
    6b08:	f88d 3004 	strb.w	r3, [sp, #4]
    6b0c:	f88d 4006 	strb.w	r4, [sp, #6]
    6b10:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    6b14:	4b0c      	ldr	r3, [pc, #48]	; (6b48 <usbd_ep_data_handler+0x88>)
    6b16:	a801      	add	r0, sp, #4
    6b18:	681b      	ldr	r3, [r3, #0]
    6b1a:	4798      	blx	r3
}
    6b1c:	b002      	add	sp, #8
    6b1e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    6b20:	f7ff ffb8 	bl	6a94 <nrf_usbd_ep0in_dma_handler>
    6b24:	e7ec      	b.n	6b00 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6b26:	6833      	ldr	r3, [r6, #0]
    6b28:	421d      	tst	r5, r3
    6b2a:	d1f7      	bne.n	6b1c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    6b2c:	2306      	movs	r3, #6
    6b2e:	f88d 3004 	strb.w	r3, [sp, #4]
    6b32:	f88d 0006 	strb.w	r0, [sp, #6]
    6b36:	f88d 2007 	strb.w	r2, [sp, #7]
    6b3a:	e7eb      	b.n	6b14 <usbd_ep_data_handler+0x54>
    6b3c:	20003a08 	.word	0x20003a08
    6b40:	20003998 	.word	0x20003998
    6b44:	0000b01a 	.word	0x0000b01a
    6b48:	20003b2c 	.word	0x20003b2c

00006b4c <ev_setup_data_handler>:
{
    6b4c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6b4e:	4b05      	ldr	r3, [pc, #20]	; (6b64 <ev_setup_data_handler+0x18>)
    6b50:	781a      	ldrb	r2, [r3, #0]
    6b52:	4610      	mov	r0, r2
    6b54:	f003 fbd6 	bl	a304 <ep2bit>
}
    6b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6b5c:	4601      	mov	r1, r0
    6b5e:	4610      	mov	r0, r2
    6b60:	f7ff bfae 	b.w	6ac0 <usbd_ep_data_handler>
    6b64:	20003c0a 	.word	0x20003c0a

00006b68 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6b68:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6b6a:	f7ff fe71 	bl	6850 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6b6e:	4b0c      	ldr	r3, [pc, #48]	; (6ba0 <ev_dma_epout8_handler+0x38>)
    6b70:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6b74:	2a03      	cmp	r2, #3
    6b76:	d010      	beq.n	6b9a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    6b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6b7c:	b96b      	cbnz	r3, 6b9a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6b7e:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    6b82:	f7ff ff77 	bl	6a74 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6b86:	2306      	movs	r3, #6
    6b88:	f88d 3004 	strb.w	r3, [sp, #4]
    6b8c:	2308      	movs	r3, #8
    6b8e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6b92:	4b04      	ldr	r3, [pc, #16]	; (6ba4 <ev_dma_epout8_handler+0x3c>)
    6b94:	a801      	add	r0, sp, #4
    6b96:	681b      	ldr	r3, [r3, #0]
    6b98:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6b9a:	b003      	add	sp, #12
    6b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ba0:	20003a0c 	.word	0x20003a0c
    6ba4:	20003b2c 	.word	0x20003b2c

00006ba8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6ba8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6baa:	f7ff fe51 	bl	6850 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6bae:	4b10      	ldr	r3, [pc, #64]	; (6bf0 <ev_dma_epin8_handler+0x48>)
    6bb0:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    6bb4:	2a03      	cmp	r2, #3
    6bb6:	d106      	bne.n	6bc6 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6bb8:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6bbc:	b003      	add	sp, #12
    6bbe:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6bc2:	f7ff bf57 	b.w	6a74 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6bc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6bca:	b96b      	cbnz	r3, 6be8 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6bcc:	f46f 7080 	mvn.w	r0, #256	; 0x100
    6bd0:	f7ff ff50 	bl	6a74 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6bd4:	2306      	movs	r3, #6
    6bd6:	f88d 3004 	strb.w	r3, [sp, #4]
    6bda:	2388      	movs	r3, #136	; 0x88
    6bdc:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6be0:	4b04      	ldr	r3, [pc, #16]	; (6bf4 <ev_dma_epin8_handler+0x4c>)
    6be2:	a801      	add	r0, sp, #4
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6be8:	b003      	add	sp, #12
    6bea:	f85d fb04 	ldr.w	pc, [sp], #4
    6bee:	bf00      	nop
    6bf0:	20003a0c 	.word	0x20003a0c
    6bf4:	20003b2c 	.word	0x20003b2c

00006bf8 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    6bf8:	4a02      	ldr	r2, [pc, #8]	; (6c04 <nrfx_usbd_uninit+0xc>)
    6bfa:	2300      	movs	r3, #0
    6bfc:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    6bfe:	4a02      	ldr	r2, [pc, #8]	; (6c08 <nrfx_usbd_uninit+0x10>)
    6c00:	7013      	strb	r3, [r2, #0]
    return;
}
    6c02:	4770      	bx	lr
    6c04:	20003b2c 	.word	0x20003b2c
    6c08:	20003c09 	.word	0x20003c09

00006c0c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    6c0c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    6c0e:	4b48      	ldr	r3, [pc, #288]	; (6d30 <nrfx_usbd_enable+0x124>)
    6c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6c14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6c18:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6c1c:	f7ff fdf6 	bl	680c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6c20:	b108      	cbz	r0, 6c26 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    6c22:	f7ff fe89 	bl	6938 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    6c26:	f003 fb27 	bl	a278 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    6c2a:	b1c8      	cbz	r0, 6c60 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
    6c2c:	f04f 0320 	mov.w	r3, #32
    6c30:	f3ef 8011 	mrs	r0, BASEPRI
    6c34:	f383 8812 	msr	BASEPRI_MAX, r3
    6c38:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6c3c:	4b3d      	ldr	r3, [pc, #244]	; (6d34 <nrfx_usbd_enable+0x128>)
    6c3e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6c42:	22c0      	movs	r2, #192	; 0xc0
    6c44:	2900      	cmp	r1, #0
    6c46:	d16a      	bne.n	6d1e <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6c48:	f249 3175 	movw	r1, #37749	; 0x9375
    6c4c:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6c50:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6c54:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6c58:	f380 8811 	msr	BASEPRI, r0
    6c5c:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    6c60:	4b33      	ldr	r3, [pc, #204]	; (6d30 <nrfx_usbd_enable+0x124>)
    6c62:	2201      	movs	r2, #1
    6c64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6c68:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    6c6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    6c70:	0512      	lsls	r2, r2, #20
    6c72:	d5fb      	bpl.n	6c6c <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
    6c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6c78:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6c7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6c80:	f003 fafa 	bl	a278 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    6c84:	b1c0      	cbz	r0, 6cb8 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
    6c86:	f04f 0320 	mov.w	r3, #32
    6c8a:	f3ef 8011 	mrs	r0, BASEPRI
    6c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    6c92:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6c96:	4b27      	ldr	r3, [pc, #156]	; (6d34 <nrfx_usbd_enable+0x128>)
    6c98:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6c9c:	2900      	cmp	r1, #0
    6c9e:	d141      	bne.n	6d24 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6ca0:	f249 3275 	movw	r2, #37749	; 0x9375
    6ca4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6ca8:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6cac:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6cb0:	f380 8811 	msr	BASEPRI, r0
    6cb4:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6cb8:	f7ff fda8 	bl	680c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6cbc:	b130      	cbz	r0, 6ccc <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
    6cbe:	f7ff fe5b 	bl	6978 <usbd_errata_187_211_end>
    6cc2:	f7ff fda3 	bl	680c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6cc6:	b108      	cbz	r0, 6ccc <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
    6cc8:	f7ff fe36 	bl	6938 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    6ccc:	f003 fad4 	bl	a278 <nrf52_errata_166>
    6cd0:	4b17      	ldr	r3, [pc, #92]	; (6d30 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
    6cd2:	b150      	cbz	r0, 6cea <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    6cd4:	f240 72e3 	movw	r2, #2019	; 0x7e3
    6cd8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    6cdc:	2240      	movs	r2, #64	; 0x40
    6cde:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    6ce2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6ce6:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6cea:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    6cec:	2280      	movs	r2, #128	; 0x80
    6cee:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6cf2:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6cf6:	4b10      	ldr	r3, [pc, #64]	; (6d38 <nrfx_usbd_enable+0x12c>)
    6cf8:	f240 12ff 	movw	r2, #511	; 0x1ff
    6cfc:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6cfe:	4b0f      	ldr	r3, [pc, #60]	; (6d3c <nrfx_usbd_enable+0x130>)
    6d00:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    6d02:	f7ff fda5 	bl	6850 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6d06:	4b0e      	ldr	r3, [pc, #56]	; (6d40 <nrfx_usbd_enable+0x134>)
    6d08:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    6d0a:	4b0e      	ldr	r3, [pc, #56]	; (6d44 <nrfx_usbd_enable+0x138>)
    6d0c:	2202      	movs	r2, #2
    6d0e:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6d10:	f7ff fd7c 	bl	680c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6d14:	b150      	cbz	r0, 6d2c <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    6d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    6d1a:	f7ff be2d 	b.w	6978 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6d1e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6d22:	e799      	b.n	6c58 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6d24:	2200      	movs	r2, #0
    6d26:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6d2a:	e7c1      	b.n	6cb0 <nrfx_usbd_enable+0xa4>
}
    6d2c:	bd08      	pop	{r3, pc}
    6d2e:	bf00      	nop
    6d30:	40027000 	.word	0x40027000
    6d34:	4006e000 	.word	0x4006e000
    6d38:	20003a08 	.word	0x20003a08
    6d3c:	20003998 	.word	0x20003998
    6d40:	20003c0a 	.word	0x20003c0a
    6d44:	20003c09 	.word	0x20003c09

00006d48 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    6d48:	4b0a      	ldr	r3, [pc, #40]	; (6d74 <nrfx_usbd_start+0x2c>)
    6d4a:	2200      	movs	r2, #0
{
    6d4c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    6d4e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    6d50:	4a09      	ldr	r2, [pc, #36]	; (6d78 <nrfx_usbd_start+0x30>)
    6d52:	4b0a      	ldr	r3, [pc, #40]	; (6d7c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    6d54:	4c0a      	ldr	r4, [pc, #40]	; (6d80 <nrfx_usbd_start+0x38>)
    6d56:	2800      	cmp	r0, #0
    6d58:	bf18      	it	ne
    6d5a:	4613      	movne	r3, r2
    6d5c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    6d60:	2027      	movs	r0, #39	; 0x27
    6d62:	f7fc fcb9 	bl	36d8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6d66:	2301      	movs	r3, #1
    6d68:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6d6c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    6d70:	bd10      	pop	{r4, pc}
    6d72:	bf00      	nop
    6d74:	20003c07 	.word	0x20003c07
    6d78:	01e01407 	.word	0x01e01407
    6d7c:	01c01407 	.word	0x01c01407
    6d80:	40027000 	.word	0x40027000

00006d84 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6d84:	4b03      	ldr	r3, [pc, #12]	; (6d94 <nrfx_usbd_is_enabled+0x10>)
    6d86:	7818      	ldrb	r0, [r3, #0]
}
    6d88:	2801      	cmp	r0, #1
    6d8a:	bf94      	ite	ls
    6d8c:	2000      	movls	r0, #0
    6d8e:	2001      	movhi	r0, #1
    6d90:	4770      	bx	lr
    6d92:	bf00      	nop
    6d94:	20003c09 	.word	0x20003c09

00006d98 <nrfx_usbd_init>:
{
    6d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6d9c:	4b1d      	ldr	r3, [pc, #116]	; (6e14 <nrfx_usbd_init+0x7c>)
    6d9e:	781c      	ldrb	r4, [r3, #0]
    6da0:	2c00      	cmp	r4, #0
    6da2:	d135      	bne.n	6e10 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    6da4:	4a1c      	ldr	r2, [pc, #112]	; (6e18 <nrfx_usbd_init+0x80>)
    6da6:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6da8:	2201      	movs	r2, #1
    6daa:	701a      	strb	r2, [r3, #0]
    6dac:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6dae:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    6db2:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6db4:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6db8:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6dbc:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6dbe:	bf14      	ite	ne
    6dc0:	4641      	movne	r1, r8
    6dc2:	2140      	moveq	r1, #64	; 0x40
    6dc4:	4630      	mov	r0, r6
    6dc6:	f003 fad7 	bl	a378 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6dca:	4630      	mov	r0, r6
    6dcc:	f7ff fd32 	bl	6834 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6dd0:	3501      	adds	r5, #1
    6dd2:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    6dd4:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    6dd6:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    6dd8:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6dda:	d1eb      	bne.n	6db4 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6ddc:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    6dde:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6de0:	f240 16ff 	movw	r6, #511	; 0x1ff
    6de4:	4620      	mov	r0, r4
    6de6:	f003 fac7 	bl	a378 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6dea:	4620      	mov	r0, r4
    6dec:	f7ff fd22 	bl	6834 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6df0:	3401      	adds	r4, #1
    6df2:	b2e4      	uxtb	r4, r4
    6df4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    6df6:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    6df8:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    6dfa:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6dfc:	d102      	bne.n	6e04 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    6dfe:	4807      	ldr	r0, [pc, #28]	; (6e1c <nrfx_usbd_init+0x84>)
}
    6e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6e04:	f014 0f08 	tst.w	r4, #8
    6e08:	bf14      	ite	ne
    6e0a:	4631      	movne	r1, r6
    6e0c:	2140      	moveq	r1, #64	; 0x40
    6e0e:	e7e9      	b.n	6de4 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    6e10:	4803      	ldr	r0, [pc, #12]	; (6e20 <nrfx_usbd_init+0x88>)
    6e12:	e7f5      	b.n	6e00 <nrfx_usbd_init+0x68>
    6e14:	20003c09 	.word	0x20003c09
    6e18:	20003b2c 	.word	0x20003b2c
    6e1c:	0bad0000 	.word	0x0bad0000
    6e20:	0bad0005 	.word	0x0bad0005

00006e24 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    6e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e28:	4605      	mov	r5, r0
	__asm__ volatile(
    6e2a:	f04f 0320 	mov.w	r3, #32
    6e2e:	f3ef 8811 	mrs	r8, BASEPRI
    6e32:	f383 8812 	msr	BASEPRI_MAX, r3
    6e36:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    6e3a:	f010 040f 	ands.w	r4, r0, #15
    6e3e:	d103      	bne.n	6e48 <nrfx_usbd_ep_transfer+0x24>
    6e40:	4b27      	ldr	r3, [pc, #156]	; (6ee0 <nrfx_usbd_ep_transfer+0xbc>)
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	4283      	cmp	r3, r0
    6e46:	d146      	bne.n	6ed6 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6e48:	4b26      	ldr	r3, [pc, #152]	; (6ee4 <nrfx_usbd_ep_transfer+0xc0>)
    6e4a:	4f27      	ldr	r7, [pc, #156]	; (6ee8 <nrfx_usbd_ep_transfer+0xc4>)
    6e4c:	681a      	ldr	r2, [r3, #0]
    6e4e:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    6e50:	4628      	mov	r0, r5
    6e52:	f003 fa57 	bl	a304 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6e56:	43d2      	mvns	r2, r2
    6e58:	b292      	uxth	r2, r2
    6e5a:	f04f 0901 	mov.w	r9, #1
    6e5e:	4332      	orrs	r2, r6
    6e60:	fa09 f900 	lsl.w	r9, r9, r0
    6e64:	ea12 0f09 	tst.w	r2, r9
    6e68:	d137      	bne.n	6eda <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6e6a:	4628      	mov	r0, r5
    6e6c:	f7ff fce2 	bl	6834 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6e70:	220c      	movs	r2, #12
    6e72:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    6e74:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6e76:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    6e78:	d529      	bpl.n	6ece <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6e7a:	4a1c      	ldr	r2, [pc, #112]	; (6eec <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6e7c:	6808      	ldr	r0, [r1, #0]
    6e7e:	4414      	add	r4, r2
    6e80:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6e84:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6e86:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6e8a:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6e8e:	d119      	bne.n	6ec4 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6e90:	b9b2      	cbnz	r2, 6ec0 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    6e92:	4a17      	ldr	r2, [pc, #92]	; (6ef0 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6e94:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    6e96:	c907      	ldmia	r1, {r0, r1, r2}
    6e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    6e9c:	2200      	movs	r2, #0
    6e9e:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    6ea0:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    6ea2:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ea4:	4b13      	ldr	r3, [pc, #76]	; (6ef4 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    6ea6:	4814      	ldr	r0, [pc, #80]	; (6ef8 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6ea8:	ea46 0609 	orr.w	r6, r6, r9
    6eac:	2280      	movs	r2, #128	; 0x80
    6eae:	603e      	str	r6, [r7, #0]
    6eb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    6eb4:	f388 8811 	msr	BASEPRI, r8
    6eb8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    6ec0:	4a0e      	ldr	r2, [pc, #56]	; (6efc <nrfx_usbd_ep_transfer+0xd8>)
    6ec2:	e7e7      	b.n	6e94 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6ec4:	b90a      	cbnz	r2, 6eca <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    6ec6:	4a0e      	ldr	r2, [pc, #56]	; (6f00 <nrfx_usbd_ep_transfer+0xdc>)
    6ec8:	e7e4      	b.n	6e94 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    6eca:	4a0e      	ldr	r2, [pc, #56]	; (6f04 <nrfx_usbd_ep_transfer+0xe0>)
    6ecc:	e7e2      	b.n	6e94 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    6ece:	4a0e      	ldr	r2, [pc, #56]	; (6f08 <nrfx_usbd_ep_transfer+0xe4>)
    6ed0:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    6ed2:	4a0e      	ldr	r2, [pc, #56]	; (6f0c <nrfx_usbd_ep_transfer+0xe8>)
    6ed4:	e7de      	b.n	6e94 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    6ed6:	480e      	ldr	r0, [pc, #56]	; (6f10 <nrfx_usbd_ep_transfer+0xec>)
    6ed8:	e7ec      	b.n	6eb4 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    6eda:	480e      	ldr	r0, [pc, #56]	; (6f14 <nrfx_usbd_ep_transfer+0xf0>)
    6edc:	e7ea      	b.n	6eb4 <nrfx_usbd_ep_transfer+0x90>
    6ede:	bf00      	nop
    6ee0:	20003c0a 	.word	0x20003c0a
    6ee4:	20003a08 	.word	0x20003a08
    6ee8:	20003998 	.word	0x20003998
    6eec:	2000399c 	.word	0x2000399c
    6ef0:	0000a2b9 	.word	0x0000a2b9
    6ef4:	e000e100 	.word	0xe000e100
    6ef8:	0bad0000 	.word	0x0bad0000
    6efc:	0000a2db 	.word	0x0000a2db
    6f00:	000069b9 	.word	0x000069b9
    6f04:	000069f1 	.word	0x000069f1
    6f08:	2000392c 	.word	0x2000392c
    6f0c:	0000a28b 	.word	0x0000a28b
    6f10:	0bad000a 	.word	0x0bad000a
    6f14:	0bad000b 	.word	0x0bad000b

00006f18 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6f18:	f010 0f08 	tst.w	r0, #8
    6f1c:	4b07      	ldr	r3, [pc, #28]	; (6f3c <nrfx_usbd_epout_size_get+0x24>)
    6f1e:	d006      	beq.n	6f2e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    6f20:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    6f24:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6f28:	bf18      	it	ne
    6f2a:	2000      	movne	r0, #0
    6f2c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6f2e:	f000 000f 	and.w	r0, r0, #15
    6f32:	f500 7094 	add.w	r0, r0, #296	; 0x128
    6f36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    6f3a:	4770      	bx	lr
    6f3c:	40027000 	.word	0x40027000

00006f40 <usbd_dmareq_process>:
{
    6f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    6f44:	f8df 815c 	ldr.w	r8, [pc, #348]	; 70a4 <usbd_dmareq_process+0x164>
    6f48:	f898 3000 	ldrb.w	r3, [r8]
{
    6f4c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d16b      	bne.n	702a <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    6f52:	f8df 9154 	ldr.w	r9, [pc, #340]	; 70a8 <usbd_dmareq_process+0x168>
    6f56:	4e55      	ldr	r6, [pc, #340]	; (70ac <usbd_dmareq_process+0x16c>)
    6f58:	f8d9 1000 	ldr.w	r1, [r9]
    6f5c:	6833      	ldr	r3, [r6, #0]
    6f5e:	4019      	ands	r1, r3
    6f60:	d063      	beq.n	702a <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    6f62:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    6f66:	bf14      	ite	ne
    6f68:	fa93 f1a3 	rbitne	r1, r3
    6f6c:	fa91 f1a1 	rbiteq	r1, r1
    6f70:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6f74:	290f      	cmp	r1, #15
    6f76:	bf8a      	itet	hi
    6f78:	f1a1 0410 	subhi.w	r4, r1, #16
    6f7c:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    6f80:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6f82:	4620      	mov	r0, r4
    6f84:	f7ff fc56 	bl	6834 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6f88:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    6f8c:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6f90:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    6f94:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6f98:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6f9a:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    6f9e:	da47      	bge.n	7030 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    6fa0:	6803      	ldr	r3, [r0, #0]
    6fa2:	8982      	ldrh	r2, [r0, #12]
    6fa4:	6841      	ldr	r1, [r0, #4]
    6fa6:	a802      	add	r0, sp, #8
    6fa8:	4798      	blx	r3
                if (!continue_transfer)
    6faa:	b900      	cbnz	r0, 6fae <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    6fac:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    6fae:	f003 f963 	bl	a278 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    6fb2:	b118      	cbz	r0, 6fbc <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    6fb4:	4b3e      	ldr	r3, [pc, #248]	; (70b0 <usbd_dmareq_process+0x170>)
    6fb6:	2282      	movs	r2, #130	; 0x82
    6fb8:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    6fbc:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    6fbe:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    6fc0:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    6fc2:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    6fc6:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    6fc8:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    6fcc:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    6fce:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    6fd2:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    6fd4:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    6fd6:	f004 0008 	and.w	r0, r4, #8
    6fda:	9902      	ldr	r1, [sp, #8]
    6fdc:	4b34      	ldr	r3, [pc, #208]	; (70b0 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6fde:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    6fe2:	da4f      	bge.n	7084 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
    6fe4:	2800      	cmp	r0, #0
    6fe6:	d045      	beq.n	7074 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
    6fe8:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    6fec:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    6ff0:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6ff2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6ffa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6ffe:	2201      	movs	r2, #1
    7000:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7002:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7004:	4a2b      	ldr	r2, [pc, #172]	; (70b4 <usbd_dmareq_process+0x174>)
    7006:	4b2c      	ldr	r3, [pc, #176]	; (70b8 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7008:	4929      	ldr	r1, [pc, #164]	; (70b0 <usbd_dmareq_process+0x170>)
    700a:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    700e:	bf38      	it	cc
    7010:	4613      	movcc	r3, r2
    7012:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    701a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    701e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    7020:	b91a      	cbnz	r2, 702a <usbd_dmareq_process+0xea>
    7022:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    7026:	2a00      	cmp	r2, #0
    7028:	d0f9      	beq.n	701e <usbd_dmareq_process+0xde>
}
    702a:	b005      	add	sp, #20
    702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7030:	4620      	mov	r0, r4
    7032:	f7ff ff71 	bl	6f18 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    7036:	89aa      	ldrh	r2, [r5, #12]
    7038:	6869      	ldr	r1, [r5, #4]
    703a:	f8d5 c000 	ldr.w	ip, [r5]
    703e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7040:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    7042:	a802      	add	r0, sp, #8
    7044:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    7046:	9a02      	ldr	r2, [sp, #8]
    7048:	2a00      	cmp	r2, #0
    704a:	d0ae      	beq.n	6faa <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    704c:	9a03      	ldr	r2, [sp, #12]
    704e:	4297      	cmp	r7, r2
    7050:	d9ab      	bls.n	6faa <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7052:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7054:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7056:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7058:	f7ff fd0c 	bl	6a74 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    705c:	2306      	movs	r3, #6
    705e:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    7062:	4b16      	ldr	r3, [pc, #88]	; (70bc <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7064:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    7068:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    706a:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    706e:	a801      	add	r0, sp, #4
    7070:	4798      	blx	r3
                    continue;
    7072:	e771      	b.n	6f58 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    7074:	2014      	movs	r0, #20
    7076:	fb00 3304 	mla	r3, r0, r4, r3
    707a:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    707e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    7082:	e7b5      	b.n	6ff0 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
    7084:	b128      	cbz	r0, 7092 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
    7086:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    708a:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    708e:	2328      	movs	r3, #40	; 0x28
    7090:	e7af      	b.n	6ff2 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
    7092:	2014      	movs	r0, #20
    7094:	fb00 3304 	mla	r3, r0, r4, r3
    7098:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    709c:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    70a0:	e7f5      	b.n	708e <usbd_dmareq_process+0x14e>
    70a2:	bf00      	nop
    70a4:	20003c08 	.word	0x20003c08
    70a8:	20003998 	.word	0x20003998
    70ac:	20003a08 	.word	0x20003a08
    70b0:	40027000 	.word	0x40027000
    70b4:	0000b02c 	.word	0x0000b02c
    70b8:	0000b01a 	.word	0x0000b01a
    70bc:	20003b2c 	.word	0x20003b2c

000070c0 <ev_epdata_handler>:
{
    70c0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    70c2:	4b0f      	ldr	r3, [pc, #60]	; (7100 <ev_epdata_handler+0x40>)
    70c4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    70c8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    70cc:	2501      	movs	r5, #1
    while (dataepstatus)
    70ce:	b91c      	cbnz	r4, 70d8 <ev_epdata_handler+0x18>
}
    70d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    70d4:	f7ff bf34 	b.w	6f40 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    70d8:	fa94 f3a4 	rbit	r3, r4
    70dc:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    70e0:	2b0f      	cmp	r3, #15
    70e2:	bfc8      	it	gt
    70e4:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    70e8:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    70ea:	bfd4      	ite	le
    70ec:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    70f0:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    70f2:	fa05 f303 	lsl.w	r3, r5, r3
    70f6:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    70fa:	f7ff fce1 	bl	6ac0 <usbd_ep_data_handler>
    70fe:	e7e6      	b.n	70ce <ev_epdata_handler+0xe>
    7100:	40027000 	.word	0x40027000

00007104 <nrf_usbd_epout_dma_handler>:
{
    7104:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7106:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    7108:	f7ff fba2 	bl	6850 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    710c:	4620      	mov	r0, r4
    710e:	f7ff fb91 	bl	6834 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7112:	7b83      	ldrb	r3, [r0, #14]
    7114:	2b03      	cmp	r3, #3
    7116:	d10d      	bne.n	7134 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7118:	4620      	mov	r0, r4
    711a:	f003 f8f3 	bl	a304 <ep2bit>
    711e:	2301      	movs	r3, #1
    7120:	fa03 f000 	lsl.w	r0, r3, r0
    7124:	43c0      	mvns	r0, r0
    7126:	f7ff fca5 	bl	6a74 <atomic_and.constprop.0.isra.0>
}
    712a:	b003      	add	sp, #12
    712c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    7130:	f7ff bf06 	b.w	6f40 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    7134:	6805      	ldr	r5, [r0, #0]
    7136:	2d00      	cmp	r5, #0
    7138:	d1f7      	bne.n	712a <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    713a:	4620      	mov	r0, r4
    713c:	f003 f8e2 	bl	a304 <ep2bit>
    7140:	2301      	movs	r3, #1
    7142:	fa03 f000 	lsl.w	r0, r3, r0
    7146:	43c0      	mvns	r0, r0
    7148:	f7ff fc94 	bl	6a74 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    714c:	2306      	movs	r3, #6
    714e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7152:	4b04      	ldr	r3, [pc, #16]	; (7164 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7154:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    7158:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    715a:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    715e:	a801      	add	r0, sp, #4
    7160:	4798      	blx	r3
    7162:	e7e2      	b.n	712a <nrf_usbd_epout_dma_handler+0x26>
    7164:	20003b2c 	.word	0x20003b2c

00007168 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    7168:	4b02      	ldr	r3, [pc, #8]	; (7174 <nrfx_usbd_ep_stall+0xc>)
    716a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    716e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    7172:	4770      	bx	lr
    7174:	40027000 	.word	0x40027000

00007178 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7178:	0702      	lsls	r2, r0, #28
    717a:	d413      	bmi.n	71a4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    717c:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7180:	f010 0f80 	tst.w	r0, #128	; 0x80
    7184:	4a08      	ldr	r2, [pc, #32]	; (71a8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    7186:	bf0b      	itete	eq
    7188:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    718c:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    7190:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    7194:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    7198:	bf08      	it	eq
    719a:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    719c:	1e43      	subs	r3, r0, #1
    719e:	4258      	negs	r0, r3
    71a0:	4158      	adcs	r0, r3
    71a2:	4770      	bx	lr
        return false;
    71a4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    71a6:	4770      	bx	lr
    71a8:	40027000 	.word	0x40027000

000071ac <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    71ac:	4b04      	ldr	r3, [pc, #16]	; (71c0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    71ae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    71b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    71b6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    71ba:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    71be:	4770      	bx	lr
    71c0:	40027000 	.word	0x40027000

000071c4 <nrfx_usbd_setup_get>:
__ssp_bos_icheck3(memset, void *, int)
    71c4:	2300      	movs	r3, #0
    71c6:	6003      	str	r3, [r0, #0]
    71c8:	6043      	str	r3, [r0, #4]
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    71ca:	4b0e      	ldr	r3, [pc, #56]	; (7204 <nrfx_usbd_setup_get+0x40>)
    71cc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    71d0:	7002      	strb	r2, [r0, #0]
    return (uint8_t)(p_reg->BREQUEST);
    71d2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    71d6:	7042      	strb	r2, [r0, #1]
    const uint16_t val = p_reg->WVALUEL;
    71d8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    71dc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    71e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    71e4:	8042      	strh	r2, [r0, #2]
    const uint16_t val = p_reg->WINDEXL;
    71e6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    71ea:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    71ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    71f2:	8082      	strh	r2, [r0, #4]
    const uint16_t val = p_reg->WLENGTHL;
    71f4:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    71f8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    71fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    7200:	80c3      	strh	r3, [r0, #6]
}
    7202:	4770      	bx	lr
    7204:	40027000 	.word	0x40027000

00007208 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7208:	4b02      	ldr	r3, [pc, #8]	; (7214 <nrfx_usbd_setup_data_clear+0xc>)
    720a:	2201      	movs	r2, #1
    720c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    720e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    7210:	4770      	bx	lr
    7212:	bf00      	nop
    7214:	40027000 	.word	0x40027000

00007218 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7218:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    721a:	f7ff fb19 	bl	6850 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    721e:	4b10      	ldr	r3, [pc, #64]	; (7260 <ev_dma_epout0_handler+0x48>)
    7220:	7b9a      	ldrb	r2, [r3, #14]
    7222:	2a03      	cmp	r2, #3
    7224:	d106      	bne.n	7234 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7226:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    722a:	b002      	add	sp, #8
    722c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7230:	f7ff bc20 	b.w	6a74 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    7234:	681c      	ldr	r4, [r3, #0]
    7236:	b974      	cbnz	r4, 7256 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7238:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    723c:	f7ff fc1a 	bl	6a74 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7240:	2306      	movs	r3, #6
    7242:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7246:	4b07      	ldr	r3, [pc, #28]	; (7264 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7248:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	a801      	add	r0, sp, #4
    7250:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7252:	b002      	add	sp, #8
    7254:	bd10      	pop	{r4, pc}
    7256:	b002      	add	sp, #8
    7258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    725c:	f7ff bfd4 	b.w	7208 <nrfx_usbd_setup_data_clear>
    7260:	20003a0c 	.word	0x20003a0c
    7264:	20003b2c 	.word	0x20003b2c

00007268 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7268:	4b02      	ldr	r3, [pc, #8]	; (7274 <nrfx_usbd_setup_clear+0xc>)
    726a:	2201      	movs	r2, #1
    726c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    7270:	4770      	bx	lr
    7272:	bf00      	nop
    7274:	40027000 	.word	0x40027000

00007278 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7278:	4b02      	ldr	r3, [pc, #8]	; (7284 <nrfx_usbd_setup_stall+0xc>)
    727a:	2201      	movs	r2, #1
    727c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    7280:	4770      	bx	lr
    7282:	bf00      	nop
    7284:	40027000 	.word	0x40027000

00007288 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    7288:	4b01      	ldr	r3, [pc, #4]	; (7290 <nrfx_usbd_last_setup_dir_get+0x8>)
    728a:	7818      	ldrb	r0, [r3, #0]
    728c:	4770      	bx	lr
    728e:	bf00      	nop
    7290:	20003c0a 	.word	0x20003c0a

00007294 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    7294:	b510      	push	{r4, lr}
    7296:	4602      	mov	r2, r0
	__asm__ volatile(
    7298:	f04f 0320 	mov.w	r3, #32
    729c:	f3ef 8411 	mrs	r4, BASEPRI
    72a0:	f383 8812 	msr	BASEPRI_MAX, r3
    72a4:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    72a8:	f003 f82c 	bl	a304 <ep2bit>
    72ac:	490d      	ldr	r1, [pc, #52]	; (72e4 <nrfx_usbd_transfer_out_drop+0x50>)
    72ae:	2301      	movs	r3, #1
    72b0:	fa03 f000 	lsl.w	r0, r3, r0
    72b4:	680b      	ldr	r3, [r1, #0]
    72b6:	ea23 0300 	bic.w	r3, r3, r0
    72ba:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    72bc:	f012 0108 	ands.w	r1, r2, #8
    72c0:	d10a      	bne.n	72d8 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    72c2:	f002 030f 	and.w	r3, r2, #15
    72c6:	009b      	lsls	r3, r3, #2
    72c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    72cc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    72d0:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    72d4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    72d8:	f384 8811 	msr	BASEPRI, r4
    72dc:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    72e0:	bd10      	pop	{r4, pc}
    72e2:	bf00      	nop
    72e4:	20003a08 	.word	0x20003a08

000072e8 <usbd_ep_abort>:
{
    72e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    72ea:	4601      	mov	r1, r0
	__asm__ volatile(
    72ec:	f04f 0320 	mov.w	r3, #32
    72f0:	f3ef 8511 	mrs	r5, BASEPRI
    72f4:	f383 8812 	msr	BASEPRI_MAX, r3
    72f8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    72fc:	f7ff fa9a 	bl	6834 <ep_state_access>
    7300:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7302:	4608      	mov	r0, r1
    7304:	f002 fffe 	bl	a304 <ep2bit>
    7308:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    730a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    730e:	fa02 f200 	lsl.w	r2, r2, r0
    7312:	482e      	ldr	r0, [pc, #184]	; (73cc <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    7314:	d118      	bne.n	7348 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7316:	6803      	ldr	r3, [r0, #0]
    7318:	ea32 0403 	bics.w	r4, r2, r3
    731c:	d00a      	beq.n	7334 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    731e:	4608      	mov	r0, r1
    7320:	f7ff ffb8 	bl	7294 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    7324:	2303      	movs	r3, #3
    7326:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    7328:	f385 8811 	msr	BASEPRI, r5
    732c:	f3bf 8f6f 	isb	sy
}
    7330:	b003      	add	sp, #12
    7332:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7334:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    7338:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    733a:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    733c:	4b24      	ldr	r3, [pc, #144]	; (73d0 <usbd_ep_abort+0xe8>)
    733e:	6818      	ldr	r0, [r3, #0]
    7340:	ea20 0002 	bic.w	r0, r0, r2
    7344:	6018      	str	r0, [r3, #0]
    7346:	e7ed      	b.n	7324 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7348:	070b      	lsls	r3, r1, #28
    734a:	d415      	bmi.n	7378 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    734c:	2980      	cmp	r1, #128	; 0x80
    734e:	4b21      	ldr	r3, [pc, #132]	; (73d4 <usbd_ep_abort+0xec>)
    7350:	d02f      	beq.n	73b2 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7352:	f001 040f 	and.w	r4, r1, #15
    7356:	f204 34da 	addw	r4, r4, #986	; 0x3da
    735a:	0064      	lsls	r4, r4, #1
    735c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7360:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7364:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7368:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    736a:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    736e:	433c      	orrs	r4, r7
    7370:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7374:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7378:	4f15      	ldr	r7, [pc, #84]	; (73d0 <usbd_ep_abort+0xe8>)
    737a:	6804      	ldr	r4, [r0, #0]
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	ea64 0c03 	orn	ip, r4, r3
    7382:	ea1c 0f02 	tst.w	ip, r2
    7386:	d0cf      	beq.n	7328 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7388:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    738a:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    738e:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    7390:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7392:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    7394:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7396:	2303      	movs	r3, #3
    7398:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    739a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    739e:	4b0e      	ldr	r3, [pc, #56]	; (73d8 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    73a0:	f88d 1006 	strb.w	r1, [sp, #6]
    73a4:	2206      	movs	r2, #6
            m_event_handler(&evt);
    73a6:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    73a8:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    73ac:	a801      	add	r0, sp, #4
    73ae:	4798      	blx	r3
    73b0:	e7ba      	b.n	7328 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    73b2:	f240 74b4 	movw	r4, #1972	; 0x7b4
    73b6:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    73ba:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    73be:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    73c2:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    73c4:	f044 0404 	orr.w	r4, r4, #4
    73c8:	e7d1      	b.n	736e <usbd_ep_abort+0x86>
    73ca:	bf00      	nop
    73cc:	20003998 	.word	0x20003998
    73d0:	20003a08 	.word	0x20003a08
    73d4:	40027000 	.word	0x40027000
    73d8:	20003b2c 	.word	0x20003b2c

000073dc <ev_setup_handler>:
{
    73dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    73de:	4b17      	ldr	r3, [pc, #92]	; (743c <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    73e0:	4c17      	ldr	r4, [pc, #92]	; (7440 <ev_setup_handler+0x64>)
    73e2:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    73e6:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    73e8:	4e16      	ldr	r6, [pc, #88]	; (7444 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    73ea:	43da      	mvns	r2, r3
    73ec:	4b16      	ldr	r3, [pc, #88]	; (7448 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    73ee:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    73f0:	681b      	ldr	r3, [r3, #0]
    73f2:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    73f4:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    73f6:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    73f8:	f002 ff84 	bl	a304 <ep2bit>
    73fc:	2301      	movs	r3, #1
    73fe:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7400:	4213      	tst	r3, r2
    7402:	d002      	beq.n	740a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    7404:	4608      	mov	r0, r1
    7406:	f7ff ff6f 	bl	72e8 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    740a:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    740e:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    7412:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    7414:	f7ff fb2e 	bl	6a74 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    7418:	6823      	ldr	r3, [r4, #0]
    741a:	f043 0301 	orr.w	r3, r3, #1
    741e:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    7420:	2300      	movs	r3, #0
    7422:	f8ad 3005 	strh.w	r3, [sp, #5]
    7426:	f88d 3007 	strb.w	r3, [sp, #7]
    742a:	2305      	movs	r3, #5
    742c:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    7430:	4b06      	ldr	r3, [pc, #24]	; (744c <ev_setup_handler+0x70>)
    7432:	a801      	add	r0, sp, #4
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	4798      	blx	r3
}
    7438:	b002      	add	sp, #8
    743a:	bd70      	pop	{r4, r5, r6, pc}
    743c:	40027000 	.word	0x40027000
    7440:	20003a08 	.word	0x20003a08
    7444:	20003c0a 	.word	0x20003c0a
    7448:	20003998 	.word	0x20003998
    744c:	20003b2c 	.word	0x20003b2c

00007450 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    7450:	4b1b      	ldr	r3, [pc, #108]	; (74c0 <nrfx_usbd_irq_handler+0x70>)
    7452:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    7456:	2300      	movs	r3, #0
{
    7458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    745c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    745e:	461d      	mov	r5, r3
    while (to_process)
    7460:	b970      	cbnz	r0, 7480 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    7462:	4f18      	ldr	r7, [pc, #96]	; (74c4 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    7464:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    7468:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    746c:	f04f 0801 	mov.w	r8, #1
    while (active)
    7470:	b9bc      	cbnz	r4, 74a2 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    7472:	f7ff fd65 	bl	6f40 <usbd_dmareq_process>
    if (setup_active)
    7476:	b306      	cbz	r6, 74ba <nrfx_usbd_irq_handler+0x6a>
}
    7478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    747c:	f7ff bfae 	b.w	73dc <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    7480:	fa90 f2a0 	rbit	r2, r0
    7484:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7488:	490f      	ldr	r1, [pc, #60]	; (74c8 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    748a:	0096      	lsls	r6, r2, #2
    748c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    748e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7492:	680e      	ldr	r6, [r1, #0]
    if (ret)
    7494:	b116      	cbz	r6, 749c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7496:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7498:	6809      	ldr	r1, [r1, #0]
    749a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    749c:	ea20 0002 	bic.w	r0, r0, r2
    74a0:	e7de      	b.n	7460 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    74a2:	fa94 f5a4 	rbit	r5, r4
    74a6:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    74aa:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    74ae:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    74b2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    74b4:	ea24 0405 	bic.w	r4, r4, r5
    74b8:	e7da      	b.n	7470 <nrfx_usbd_irq_handler+0x20>
}
    74ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74be:	bf00      	nop
    74c0:	40027000 	.word	0x40027000
    74c4:	0000af60 	.word	0x0000af60
    74c8:	40027100 	.word	0x40027100

000074cc <usbd_ep_abort_all>:
{
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    74ce:	4e11      	ldr	r6, [pc, #68]	; (7514 <usbd_ep_abort_all+0x48>)
    74d0:	4b11      	ldr	r3, [pc, #68]	; (7518 <usbd_ep_abort_all+0x4c>)
    74d2:	6834      	ldr	r4, [r6, #0]
    74d4:	681b      	ldr	r3, [r3, #0]
    74d6:	0c24      	lsrs	r4, r4, #16
    74d8:	0424      	lsls	r4, r4, #16
    74da:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    74dc:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    74de:	b91c      	cbnz	r4, 74e8 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    74e0:	f240 13ff 	movw	r3, #511	; 0x1ff
    74e4:	6033      	str	r3, [r6, #0]
}
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    74e8:	fa94 f5a4 	rbit	r5, r4
    74ec:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    74f0:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    74f2:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    74f4:	bfc6      	itte	gt
    74f6:	f1a5 0010 	subgt.w	r0, r5, #16
    74fa:	b2c0      	uxtbgt	r0, r0
    74fc:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    7500:	0703      	lsls	r3, r0, #28
    7502:	d401      	bmi.n	7508 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    7504:	f7ff fef0 	bl	72e8 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    7508:	fa07 f505 	lsl.w	r5, r7, r5
    750c:	ea24 0405 	bic.w	r4, r4, r5
    7510:	e7e5      	b.n	74de <usbd_ep_abort_all+0x12>
    7512:	bf00      	nop
    7514:	20003a08 	.word	0x20003a08
    7518:	20003998 	.word	0x20003998

0000751c <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    751c:	4b0c      	ldr	r3, [pc, #48]	; (7550 <nrfx_usbd_stop+0x34>)
    751e:	2280      	movs	r2, #128	; 0x80
{
    7520:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    7522:	2027      	movs	r0, #39	; 0x27
    7524:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    7528:	f7fc f8fa 	bl	3720 <arch_irq_is_enabled>
    752c:	b170      	cbz	r0, 754c <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    752e:	4c09      	ldr	r4, [pc, #36]	; (7554 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    7530:	f7ff ffcc 	bl	74cc <usbd_ep_abort_all>
    7534:	2300      	movs	r3, #0
    7536:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    753a:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    753c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    7540:	f7fc f8da 	bl	36f8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7548:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    754c:	bd10      	pop	{r4, pc}
    754e:	bf00      	nop
    7550:	e000e100 	.word	0xe000e100
    7554:	40027000 	.word	0x40027000

00007558 <nrfx_usbd_disable>:
{
    7558:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    755a:	f7ff ffdf 	bl	751c <nrfx_usbd_stop>
    return p_reg->INTENSET;
    755e:	4b08      	ldr	r3, [pc, #32]	; (7580 <nrfx_usbd_disable+0x28>)
    7560:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    7564:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7568:	2200      	movs	r2, #0
    756a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    756e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    7572:	f7ff f96d 	bl	6850 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7576:	4b03      	ldr	r3, [pc, #12]	; (7584 <nrfx_usbd_disable+0x2c>)
    7578:	2201      	movs	r2, #1
    757a:	701a      	strb	r2, [r3, #0]
}
    757c:	bd08      	pop	{r3, pc}
    757e:	bf00      	nop
    7580:	40027000 	.word	0x40027000
    7584:	20003c09 	.word	0x20003c09

00007588 <nrfx_usbd_suspend>:
{
    7588:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    758a:	f04f 0320 	mov.w	r3, #32
    758e:	f3ef 8511 	mrs	r5, BASEPRI
    7592:	f383 8812 	msr	BASEPRI_MAX, r3
    7596:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    759a:	4b11      	ldr	r3, [pc, #68]	; (75e0 <nrfx_usbd_suspend+0x58>)
    759c:	781b      	ldrb	r3, [r3, #0]
    759e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    75a2:	b933      	cbnz	r3, 75b2 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    75a4:	2400      	movs	r4, #0
	__asm__ volatile(
    75a6:	f385 8811 	msr	BASEPRI, r5
    75aa:	f3bf 8f6f 	isb	sy
}
    75ae:	4620      	mov	r0, r4
    75b0:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    75b2:	f7ff ff8b 	bl	74cc <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    75b6:	4b0b      	ldr	r3, [pc, #44]	; (75e4 <nrfx_usbd_suspend+0x5c>)
    75b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    75bc:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    75c0:	d1f0      	bne.n	75a4 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    75c2:	2101      	movs	r1, #1
    75c4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    75c8:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    75cc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    75d0:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    75d2:	bf42      	ittt	mi
    75d4:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    75d8:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    75dc:	4614      	movmi	r4, r2
}
    75de:	e7e2      	b.n	75a6 <nrfx_usbd_suspend+0x1e>
    75e0:	20003c07 	.word	0x20003c07
    75e4:	40027000 	.word	0x40027000

000075e8 <nrfx_usbd_ep_disable>:
{
    75e8:	b510      	push	{r4, lr}
    75ea:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    75ec:	f7ff fe7c 	bl	72e8 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    75f0:	4a10      	ldr	r2, [pc, #64]	; (7634 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    75f2:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    75f6:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    75fa:	f04f 0301 	mov.w	r3, #1
    75fe:	bf14      	ite	ne
    7600:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7604:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    7608:	fa03 f300 	lsl.w	r3, r3, r0
    760c:	ea6f 0303 	mvn.w	r3, r3
    7610:	bf15      	itete	ne
    7612:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7614:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    7616:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    761a:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    761e:	bf14      	ite	ne
    7620:	4b05      	ldrne	r3, [pc, #20]	; (7638 <nrfx_usbd_ep_disable+0x50>)
    7622:	4b06      	ldreq	r3, [pc, #24]	; (763c <nrfx_usbd_ep_disable+0x54>)
    7624:	5c1a      	ldrb	r2, [r3, r0]
    7626:	2301      	movs	r3, #1
    7628:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    762a:	4a02      	ldr	r2, [pc, #8]	; (7634 <nrfx_usbd_ep_disable+0x4c>)
    762c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7630:	bd10      	pop	{r4, pc}
    7632:	bf00      	nop
    7634:	40027000 	.word	0x40027000
    7638:	0000b1c8 	.word	0x0000b1c8
    763c:	0000b1d1 	.word	0x0000b1d1

00007640 <nrfx_usbd_ep_enable>:
{
    7640:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7642:	b243      	sxtb	r3, r0
    7644:	2b00      	cmp	r3, #0
    7646:	4b23      	ldr	r3, [pc, #140]	; (76d4 <nrfx_usbd_ep_enable+0x94>)
    7648:	4a23      	ldr	r2, [pc, #140]	; (76d8 <nrfx_usbd_ep_enable+0x98>)
    764a:	bfa8      	it	ge
    764c:	461a      	movge	r2, r3
    764e:	f000 030f 	and.w	r3, r0, #15
    7652:	f04f 0401 	mov.w	r4, #1
    7656:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    7658:	4a20      	ldr	r2, [pc, #128]	; (76dc <nrfx_usbd_ep_enable+0x9c>)
    765a:	fa04 f101 	lsl.w	r1, r4, r1
{
    765e:	4605      	mov	r5, r0
    7660:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    7664:	da0c      	bge.n	7680 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7666:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    766a:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    766c:	07c8      	lsls	r0, r1, #31
    766e:	d406      	bmi.n	767e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    7670:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7674:	fa04 f303 	lsl.w	r3, r4, r3
    7678:	4303      	orrs	r3, r0
    767a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    767e:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7680:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    7684:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7686:	07c9      	lsls	r1, r1, #31
    7688:	d4f9      	bmi.n	767e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    768a:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    768e:	fa04 f103 	lsl.w	r1, r4, r3
    7692:	4331      	orrs	r1, r6
    7694:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    7698:	2b00      	cmp	r3, #0
    769a:	d0f0      	beq.n	767e <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    769c:	0703      	lsls	r3, r0, #28
    769e:	d4ee      	bmi.n	767e <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    76a0:	f04f 0320 	mov.w	r3, #32
    76a4:	f3ef 8611 	mrs	r6, BASEPRI
    76a8:	f383 8812 	msr	BASEPRI_MAX, r3
    76ac:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    76b0:	f7ff fdf0 	bl	7294 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    76b4:	4628      	mov	r0, r5
    76b6:	f002 fe25 	bl	a304 <ep2bit>
    76ba:	4a09      	ldr	r2, [pc, #36]	; (76e0 <nrfx_usbd_ep_enable+0xa0>)
    76bc:	6813      	ldr	r3, [r2, #0]
    76be:	fa04 f000 	lsl.w	r0, r4, r0
    76c2:	ea23 0000 	bic.w	r0, r3, r0
    76c6:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    76c8:	f386 8811 	msr	BASEPRI, r6
    76cc:	f3bf 8f6f 	isb	sy
}
    76d0:	e7d5      	b.n	767e <nrfx_usbd_ep_enable+0x3e>
    76d2:	bf00      	nop
    76d4:	0000b1d1 	.word	0x0000b1d1
    76d8:	0000b1c8 	.word	0x0000b1c8
    76dc:	40027000 	.word	0x40027000
    76e0:	20003998 	.word	0x20003998

000076e4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    76e4:	0603      	lsls	r3, r0, #24
{
    76e6:	b510      	push	{r4, lr}
    76e8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    76ea:	d405      	bmi.n	76f8 <nrfx_usbd_ep_stall_clear+0x14>
    76ec:	f7ff fd44 	bl	7178 <nrfx_usbd_ep_stall_check>
    76f0:	b110      	cbz	r0, 76f8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    76f2:	4620      	mov	r0, r4
    76f4:	f7ff fdce 	bl	7294 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    76f8:	4b01      	ldr	r3, [pc, #4]	; (7700 <nrfx_usbd_ep_stall_clear+0x1c>)
    76fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    76fe:	bd10      	pop	{r4, pc}
    7700:	40027000 	.word	0x40027000

00007704 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7704:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7706:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    770a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    770c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    770e:	6002      	str	r2, [r0, #0]
}
    7710:	4802      	ldr	r0, [pc, #8]	; (771c <nrf_gpio_pin_port_decode+0x18>)
    7712:	bf18      	it	ne
    7714:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7718:	4770      	bx	lr
    771a:	bf00      	nop
    771c:	50000300 	.word	0x50000300

00007720 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    7720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7722:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    7724:	f002 fe5b 	bl	a3de <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    7728:	4608      	mov	r0, r1
    772a:	f002 fe58 	bl	a3de <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    772e:	a801      	add	r0, sp, #4
    7730:	9601      	str	r6, [sp, #4]
    7732:	f7ff ffe7 	bl	7704 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    773c:	460c      	mov	r4, r1
    773e:	f240 610d 	movw	r1, #1549	; 0x60d
    7742:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7746:	a801      	add	r0, sp, #4
    7748:	9401      	str	r4, [sp, #4]
    774a:	f7ff ffdb 	bl	7704 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7754:	2509      	movs	r5, #9
    7756:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    775a:	2004      	movs	r0, #4
    775c:	f002 fbe1 	bl	9f22 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7760:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7762:	a801      	add	r0, sp, #4
    7764:	9401      	str	r4, [sp, #4]
    7766:	f7ff ffcd 	bl	7704 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    776a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    776c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7770:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    7772:	07db      	lsls	r3, r3, #31
    7774:	d415      	bmi.n	77a2 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7776:	a801      	add	r0, sp, #4
    7778:	9601      	str	r6, [sp, #4]
    777a:	f7ff ffc3 	bl	7704 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7784:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    7788:	2004      	movs	r0, #4
    778a:	f002 fbca 	bl	9f22 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    778e:	4630      	mov	r0, r6
    7790:	f002 fe25 	bl	a3de <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    7794:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    7796:	2004      	movs	r0, #4
    7798:	f002 fbc3 	bl	9f22 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    779c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    77a0:	d1df      	bne.n	7762 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77a2:	a801      	add	r0, sp, #4
    77a4:	9401      	str	r4, [sp, #4]
    77a6:	f7ff ffad 	bl	7704 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    77aa:	9a01      	ldr	r2, [sp, #4]
    77ac:	2301      	movs	r3, #1
    77ae:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    77b0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    77b4:	2004      	movs	r0, #4
    77b6:	f002 fbb4 	bl	9f22 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    77ba:	4620      	mov	r0, r4
    77bc:	f002 fe0f 	bl	a3de <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    77c0:	2004      	movs	r0, #4
    77c2:	f002 fbae 	bl	9f22 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77c6:	a801      	add	r0, sp, #4
    77c8:	9401      	str	r4, [sp, #4]
    77ca:	f7ff ff9b 	bl	7704 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    77ce:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    77d0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    77d4:	4803      	ldr	r0, [pc, #12]	; (77e4 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    77d6:	40d3      	lsrs	r3, r2
    77d8:	f003 0301 	and.w	r3, r3, #1
    77dc:	1ac0      	subs	r0, r0, r3
    77de:	b003      	add	sp, #12
    77e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77e2:	bf00      	nop
    77e4:	0bad0001 	.word	0x0bad0001

000077e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    77e8:	4b0e      	ldr	r3, [pc, #56]	; (7824 <z_sys_init_run_level+0x3c>)
{
    77ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    77ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    77f0:	3001      	adds	r0, #1
    77f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    77f6:	42a6      	cmp	r6, r4
    77f8:	d800      	bhi.n	77fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    77fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    77fc:	e9d4 3500 	ldrd	r3, r5, [r4]
    7800:	4628      	mov	r0, r5
    7802:	4798      	blx	r3
		if (dev != NULL) {
    7804:	b165      	cbz	r5, 7820 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    7806:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    7808:	b130      	cbz	r0, 7818 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    780a:	2800      	cmp	r0, #0
    780c:	bfb8      	it	lt
    780e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7810:	28ff      	cmp	r0, #255	; 0xff
    7812:	bfa8      	it	ge
    7814:	20ff      	movge	r0, #255	; 0xff
    7816:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7818:	785a      	ldrb	r2, [r3, #1]
    781a:	f042 0201 	orr.w	r2, r2, #1
    781e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7820:	3408      	adds	r4, #8
    7822:	e7e8      	b.n	77f6 <z_sys_init_run_level+0xe>
    7824:	0000afc4 	.word	0x0000afc4

00007828 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7828:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    782a:	4605      	mov	r5, r0
    782c:	b910      	cbnz	r0, 7834 <z_impl_device_get_binding+0xc>
		return NULL;
    782e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7830:	4620      	mov	r0, r4
    7832:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7834:	7803      	ldrb	r3, [r0, #0]
    7836:	2b00      	cmp	r3, #0
    7838:	d0f9      	beq.n	782e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    783a:	4c0e      	ldr	r4, [pc, #56]	; (7874 <z_impl_device_get_binding+0x4c>)
    783c:	4e0e      	ldr	r6, [pc, #56]	; (7878 <z_impl_device_get_binding+0x50>)
    783e:	42b4      	cmp	r4, r6
    7840:	d108      	bne.n	7854 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7842:	4c0c      	ldr	r4, [pc, #48]	; (7874 <z_impl_device_get_binding+0x4c>)
    7844:	42b4      	cmp	r4, r6
    7846:	d0f2      	beq.n	782e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7848:	4620      	mov	r0, r4
    784a:	f002 fdd6 	bl	a3fa <z_device_is_ready>
    784e:	b950      	cbnz	r0, 7866 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7850:	3418      	adds	r4, #24
    7852:	e7f7      	b.n	7844 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    7854:	4620      	mov	r0, r4
    7856:	f002 fdd0 	bl	a3fa <z_device_is_ready>
    785a:	b110      	cbz	r0, 7862 <z_impl_device_get_binding+0x3a>
    785c:	6823      	ldr	r3, [r4, #0]
    785e:	42ab      	cmp	r3, r5
    7860:	d0e6      	beq.n	7830 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7862:	3418      	adds	r4, #24
    7864:	e7eb      	b.n	783e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7866:	6821      	ldr	r1, [r4, #0]
    7868:	4628      	mov	r0, r5
    786a:	f7f9 f9c1 	bl	bf0 <strcmp>
    786e:	2800      	cmp	r0, #0
    7870:	d1ee      	bne.n	7850 <z_impl_device_get_binding+0x28>
    7872:	e7dd      	b.n	7830 <z_impl_device_get_binding+0x8>
    7874:	0000aafc 	.word	0x0000aafc
    7878:	0000abbc 	.word	0x0000abbc

0000787c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    787c:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    787e:	2300      	movs	r3, #0
{
    7880:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    7882:	2201      	movs	r2, #1
    7884:	e9cd 2304 	strd	r2, r3, [sp, #16]
    7888:	220f      	movs	r2, #15
    788a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    788e:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    7890:	4c0b      	ldr	r4, [pc, #44]	; (78c0 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7892:	4b0c      	ldr	r3, [pc, #48]	; (78c4 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
    7894:	490c      	ldr	r1, [pc, #48]	; (78c8 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7896:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    7898:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    789c:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    78a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    78a4:	9300      	str	r3, [sp, #0]
    78a6:	fb02 1100 	mla	r1, r2, r0, r1
    78aa:	4b08      	ldr	r3, [pc, #32]	; (78cc <init_idle_thread+0x50>)
    78ac:	4620      	mov	r0, r4
    78ae:	f000 f8f7 	bl	7aa0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    78b2:	7b63      	ldrb	r3, [r4, #13]
    78b4:	f023 0304 	bic.w	r3, r3, #4
    78b8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    78ba:	b006      	add	sp, #24
    78bc:	bd10      	pop	{r4, pc}
    78be:	bf00      	nop
    78c0:	200004c8 	.word	0x200004c8
    78c4:	20003b70 	.word	0x20003b70
    78c8:	20004810 	.word	0x20004810
    78cc:	00007c11 	.word	0x00007c11

000078d0 <bg_thread_main>:
{
    78d0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    78d2:	4b0a      	ldr	r3, [pc, #40]	; (78fc <bg_thread_main+0x2c>)
    78d4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    78d6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    78d8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    78da:	f7ff ff85 	bl	77e8 <z_sys_init_run_level>
	boot_banner();
    78de:	f001 f8e3 	bl	8aa8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    78e2:	2003      	movs	r0, #3
    78e4:	f7ff ff80 	bl	77e8 <z_sys_init_run_level>
	z_init_static_threads();
    78e8:	f000 f936 	bl	7b58 <z_init_static_threads>
	main();
    78ec:	f7f9 fb76 	bl	fdc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    78f0:	4a03      	ldr	r2, [pc, #12]	; (7900 <bg_thread_main+0x30>)
    78f2:	7b13      	ldrb	r3, [r2, #12]
    78f4:	f023 0301 	bic.w	r3, r3, #1
    78f8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    78fa:	bd08      	pop	{r3, pc}
    78fc:	20003c0b 	.word	0x20003c0b
    7900:	20000548 	.word	0x20000548

00007904 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7904:	4802      	ldr	r0, [pc, #8]	; (7910 <z_bss_zero+0xc>)
    7906:	4a03      	ldr	r2, [pc, #12]	; (7914 <z_bss_zero+0x10>)
    7908:	2100      	movs	r1, #0
    790a:	1a12      	subs	r2, r2, r0
    790c:	f003 b88f 	b.w	aa2e <memset>
    7910:	20000368 	.word	0x20000368
    7914:	20003c0c 	.word	0x20003c0c

00007918 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7918:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    791a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 79e0 <z_cstart+0xc8>
    791e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7920:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7924:	4d2f      	ldr	r5, [pc, #188]	; (79e4 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7926:	4e30      	ldr	r6, [pc, #192]	; (79e8 <z_cstart+0xd0>)
    7928:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    792a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 79ec <z_cstart+0xd4>
    792e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7932:	2400      	movs	r4, #0
    7934:	616b      	str	r3, [r5, #20]
    7936:	23e0      	movs	r3, #224	; 0xe0
    7938:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    793c:	77ec      	strb	r4, [r5, #31]
    793e:	762c      	strb	r4, [r5, #24]
    7940:	766c      	strb	r4, [r5, #25]
    7942:	76ac      	strb	r4, [r5, #26]
    7944:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7948:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    794a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    794e:	626b      	str	r3, [r5, #36]	; 0x24
    7950:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7954:	f7fc f8b4 	bl	3ac0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7958:	f7fb fea0 	bl	369c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    795c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7960:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7962:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7964:	f7fc f962 	bl	3c2c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7968:	f7fc f8f2 	bl	3b50 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    796c:	f240 1301 	movw	r3, #257	; 0x101
    7970:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7974:	ab06      	add	r3, sp, #24
    7976:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7978:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    797c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    797e:	f002 fd3b 	bl	a3f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7982:	4620      	mov	r0, r4
    7984:	f7ff ff30 	bl	77e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7988:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    798a:	4d19      	ldr	r5, [pc, #100]	; (79f0 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    798c:	f7ff ff2c 	bl	77e8 <z_sys_init_run_level>
	z_sched_init();
    7990:	f000 fdf0 	bl	8574 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7994:	4b17      	ldr	r3, [pc, #92]	; (79f4 <z_cstart+0xdc>)
    7996:	9305      	str	r3, [sp, #20]
    7998:	2301      	movs	r3, #1
    799a:	4917      	ldr	r1, [pc, #92]	; (79f8 <z_cstart+0xe0>)
    799c:	9400      	str	r4, [sp, #0]
    799e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    79a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    79a6:	464b      	mov	r3, r9
    79a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    79ac:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    79ae:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    79b0:	f000 f876 	bl	7aa0 <z_setup_new_thread>
    79b4:	7b6a      	ldrb	r2, [r5, #13]
    79b6:	4607      	mov	r7, r0
    79b8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    79bc:	4628      	mov	r0, r5
    79be:	736a      	strb	r2, [r5, #13]
    79c0:	f002 fe93 	bl	a6ea <z_ready_thread>
		init_idle_thread(i);
    79c4:	4620      	mov	r0, r4
    79c6:	f7ff ff59 	bl	787c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    79ca:	4b0c      	ldr	r3, [pc, #48]	; (79fc <z_cstart+0xe4>)
    79cc:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    79ce:	464a      	mov	r2, r9
    79d0:	4639      	mov	r1, r7
    79d2:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    79d4:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    79d6:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    79da:	f7fb ff59 	bl	3890 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    79de:	bf00      	nop
    79e0:	20005150 	.word	0x20005150
    79e4:	e000ed00 	.word	0xe000ed00
    79e8:	20003b70 	.word	0x20003b70
    79ec:	000078d1 	.word	0x000078d1
    79f0:	20000548 	.word	0x20000548
    79f4:	0000b1da 	.word	0x0000b1da
    79f8:	20004410 	.word	0x20004410
    79fc:	200004c8 	.word	0x200004c8

00007a00 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    7a00:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7a02:	4b0e      	ldr	r3, [pc, #56]	; (7a3c <init_mem_slab_module+0x3c>)
    7a04:	4c0e      	ldr	r4, [pc, #56]	; (7a40 <init_mem_slab_module+0x40>)
    7a06:	42a3      	cmp	r3, r4
    7a08:	d301      	bcc.n	7a0e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    7a0a:	2000      	movs	r0, #0
	return rc;
}
    7a0c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7a0e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    7a12:	ea41 0200 	orr.w	r2, r1, r0
    7a16:	f012 0203 	ands.w	r2, r2, #3
    7a1a:	d10b      	bne.n	7a34 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    7a1c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    7a1e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7a20:	42aa      	cmp	r2, r5
    7a22:	d101      	bne.n	7a28 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7a24:	331c      	adds	r3, #28
    7a26:	e7ee      	b.n	7a06 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    7a28:	695e      	ldr	r6, [r3, #20]
    7a2a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7a2c:	3201      	adds	r2, #1
		slab->free_list = p;
    7a2e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    7a30:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    7a32:	e7f5      	b.n	7a20 <init_mem_slab_module+0x20>
	return rc;
    7a34:	f06f 0015 	mvn.w	r0, #21
    7a38:	e7e8      	b.n	7a0c <init_mem_slab_module+0xc>
    7a3a:	bf00      	nop
    7a3c:	20000238 	.word	0x20000238
    7a40:	20000254 	.word	0x20000254

00007a44 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7a46:	460c      	mov	r4, r1
	__asm__ volatile(
    7a48:	f04f 0520 	mov.w	r5, #32
    7a4c:	f3ef 8111 	mrs	r1, BASEPRI
    7a50:	f385 8812 	msr	BASEPRI_MAX, r5
    7a54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7a58:	6945      	ldr	r5, [r0, #20]
    7a5a:	b15d      	cbz	r5, 7a74 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    7a5c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7a5e:	682b      	ldr	r3, [r5, #0]
    7a60:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    7a62:	6983      	ldr	r3, [r0, #24]
    7a64:	3301      	adds	r3, #1
    7a66:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7a68:	2000      	movs	r0, #0
	__asm__ volatile(
    7a6a:	f381 8811 	msr	BASEPRI, r1
    7a6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    7a72:	e011      	b.n	7a98 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7a74:	ea52 0c03 	orrs.w	ip, r2, r3
    7a78:	d103      	bne.n	7a82 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7a7a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7a7c:	f06f 000b 	mvn.w	r0, #11
    7a80:	e7f3      	b.n	7a6a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7a82:	e9cd 2300 	strd	r2, r3, [sp]
    7a86:	4602      	mov	r2, r0
    7a88:	3008      	adds	r0, #8
    7a8a:	f000 fcc9 	bl	8420 <z_pend_curr>
		if (result == 0) {
    7a8e:	b918      	cbnz	r0, 7a98 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7a90:	4b02      	ldr	r3, [pc, #8]	; (7a9c <k_mem_slab_alloc+0x58>)
    7a92:	689b      	ldr	r3, [r3, #8]
    7a94:	695b      	ldr	r3, [r3, #20]
    7a96:	6023      	str	r3, [r4, #0]
}
    7a98:	b003      	add	sp, #12
    7a9a:	bd30      	pop	{r4, r5, pc}
    7a9c:	20003b70 	.word	0x20003b70

00007aa0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7aa0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7aa4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7aa6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7aa8:	2604      	movs	r6, #4
    7aaa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7aac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7aae:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7ab0:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7ab4:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7ab6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    7abc:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7abe:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7ac2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7ac6:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    7aca:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7acc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    7ace:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7ad0:	9202      	str	r2, [sp, #8]
    7ad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7ad4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7ad6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7adc:	9200      	str	r2, [sp, #0]
    7ade:	4642      	mov	r2, r8
{
    7ae0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7ae2:	f7fb feb9 	bl	3858 <arch_new_thread>
	if (!_current) {
    7ae6:	4b05      	ldr	r3, [pc, #20]	; (7afc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    7ae8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    7aea:	689b      	ldr	r3, [r3, #8]
    7aec:	b103      	cbz	r3, 7af0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    7aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7af0:	6723      	str	r3, [r4, #112]	; 0x70
}
    7af2:	4640      	mov	r0, r8
    7af4:	b004      	add	sp, #16
    7af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7afa:	bf00      	nop
    7afc:	20003b70 	.word	0x20003b70

00007b00 <z_impl_k_thread_create>:
{
    7b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b02:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7b04:	2700      	movs	r7, #0
    7b06:	9705      	str	r7, [sp, #20]
    7b08:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7b0a:	9704      	str	r7, [sp, #16]
    7b0c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7b0e:	9703      	str	r7, [sp, #12]
    7b10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7b12:	9702      	str	r7, [sp, #8]
{
    7b14:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7b18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7b1a:	9701      	str	r7, [sp, #4]
    7b1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7b1e:	9700      	str	r7, [sp, #0]
{
    7b20:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7b22:	f7ff ffbd 	bl	7aa0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7b26:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7b2a:	bf08      	it	eq
    7b2c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7b30:	d005      	beq.n	7b3e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7b32:	ea55 0306 	orrs.w	r3, r5, r6
    7b36:	d105      	bne.n	7b44 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    7b38:	4620      	mov	r0, r4
    7b3a:	f000 fc15 	bl	8368 <z_sched_start>
}
    7b3e:	4620      	mov	r0, r4
    7b40:	b007      	add	sp, #28
    7b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7b44:	4903      	ldr	r1, [pc, #12]	; (7b54 <z_impl_k_thread_create+0x54>)
    7b46:	4632      	mov	r2, r6
    7b48:	462b      	mov	r3, r5
    7b4a:	f104 0018 	add.w	r0, r4, #24
    7b4e:	f000 fe9d 	bl	888c <z_add_timeout>
    7b52:	e7f4      	b.n	7b3e <z_impl_k_thread_create+0x3e>
    7b54:	0000a70b 	.word	0x0000a70b

00007b58 <z_init_static_threads>:
{
    7b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7b5c:	4c29      	ldr	r4, [pc, #164]	; (7c04 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7b5e:	4d2a      	ldr	r5, [pc, #168]	; (7c08 <z_init_static_threads+0xb0>)
{
    7b60:	b087      	sub	sp, #28
    7b62:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7b64:	42ae      	cmp	r6, r5
    7b66:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7b6a:	d30f      	bcc.n	7b8c <z_init_static_threads+0x34>
	k_sched_lock();
    7b6c:	f000 fb18 	bl	81a0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7b70:	4c24      	ldr	r4, [pc, #144]	; (7c04 <z_init_static_threads+0xac>)
    7b72:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7c0c <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7b76:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7b7a:	f240 37e7 	movw	r7, #999	; 0x3e7
    7b7e:	42ac      	cmp	r4, r5
    7b80:	d320      	bcc.n	7bc4 <z_init_static_threads+0x6c>
}
    7b82:	b007      	add	sp, #28
    7b84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7b88:	f000 bcd8 	b.w	853c <k_sched_unlock>
		z_setup_new_thread(
    7b8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7b90:	9305      	str	r3, [sp, #20]
    7b92:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7b96:	9304      	str	r3, [sp, #16]
    7b98:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7b9c:	9303      	str	r3, [sp, #12]
    7b9e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7ba2:	9302      	str	r3, [sp, #8]
    7ba4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7ba8:	9301      	str	r3, [sp, #4]
    7baa:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7bae:	9300      	str	r3, [sp, #0]
    7bb0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7bb4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7bb8:	f7ff ff72 	bl	7aa0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7bbc:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7bc0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7bc2:	e7ce      	b.n	7b62 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7bc6:	1c5a      	adds	r2, r3, #1
    7bc8:	d00d      	beq.n	7be6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7bca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7bce:	2100      	movs	r1, #0
    7bd0:	4638      	mov	r0, r7
    7bd2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7bd6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7bda:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7bde:	d104      	bne.n	7bea <z_init_static_threads+0x92>
	z_sched_start(thread);
    7be0:	4640      	mov	r0, r8
    7be2:	f000 fbc1 	bl	8368 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7be6:	3430      	adds	r4, #48	; 0x30
    7be8:	e7c9      	b.n	7b7e <z_init_static_threads+0x26>
    7bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7bee:	2300      	movs	r3, #0
    7bf0:	f7f8 fe7c 	bl	8ec <__aeabi_uldivmod>
    7bf4:	4602      	mov	r2, r0
    7bf6:	460b      	mov	r3, r1
    7bf8:	f108 0018 	add.w	r0, r8, #24
    7bfc:	4649      	mov	r1, r9
    7bfe:	f000 fe45 	bl	888c <z_add_timeout>
    7c02:	e7f0      	b.n	7be6 <z_init_static_threads+0x8e>
    7c04:	20000238 	.word	0x20000238
    7c08:	20000238 	.word	0x20000238
    7c0c:	0000a70b 	.word	0x0000a70b

00007c10 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7c10:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7c12:	4c0b      	ldr	r4, [pc, #44]	; (7c40 <idle+0x30>)
	return !z_sys_post_kernel;
    7c14:	4d0b      	ldr	r5, [pc, #44]	; (7c44 <idle+0x34>)
	__asm__ volatile(
    7c16:	f04f 0220 	mov.w	r2, #32
    7c1a:	f3ef 8311 	mrs	r3, BASEPRI
    7c1e:	f382 8812 	msr	BASEPRI_MAX, r2
    7c22:	f3bf 8f6f 	isb	sy
    7c26:	f002 fe17 	bl	a858 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7c2a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7c2c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7c2e:	b913      	cbnz	r3, 7c36 <idle+0x26>
	arch_cpu_idle();
    7c30:	f7fb fd3a 	bl	36a8 <arch_cpu_idle>
}
    7c34:	e7ef      	b.n	7c16 <idle+0x6>
    7c36:	f7fb fc59 	bl	34ec <pm_system_suspend>
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d1eb      	bne.n	7c16 <idle+0x6>
    7c3e:	e7f7      	b.n	7c30 <idle+0x20>
    7c40:	20003b70 	.word	0x20003b70
    7c44:	20003c0b 	.word	0x20003c0b

00007c48 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7c4c:	4604      	mov	r4, r0
    7c4e:	4617      	mov	r7, r2
    7c50:	461e      	mov	r6, r3
    7c52:	f04f 0320 	mov.w	r3, #32
    7c56:	f3ef 8811 	mrs	r8, BASEPRI
    7c5a:	f383 8812 	msr	BASEPRI_MAX, r3
    7c5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7c62:	68c3      	ldr	r3, [r0, #12]
    7c64:	4a32      	ldr	r2, [pc, #200]	; (7d30 <z_impl_k_mutex_lock+0xe8>)
    7c66:	b16b      	cbz	r3, 7c84 <z_impl_k_mutex_lock+0x3c>
    7c68:	6880      	ldr	r0, [r0, #8]
    7c6a:	6891      	ldr	r1, [r2, #8]
    7c6c:	4288      	cmp	r0, r1
    7c6e:	d019      	beq.n	7ca4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7c70:	ea57 0306 	orrs.w	r3, r7, r6
    7c74:	d118      	bne.n	7ca8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7c76:	f388 8811 	msr	BASEPRI, r8
    7c7a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7c7e:	f06f 000f 	mvn.w	r0, #15
    7c82:	e00c      	b.n	7c9e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    7c84:	6891      	ldr	r1, [r2, #8]
    7c86:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7c8a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7c8c:	3301      	adds	r3, #1
    7c8e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7c90:	6893      	ldr	r3, [r2, #8]
    7c92:	60a3      	str	r3, [r4, #8]
    7c94:	f388 8811 	msr	BASEPRI, r8
    7c98:	f3bf 8f6f 	isb	sy
		return 0;
    7c9c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7c9e:	b002      	add	sp, #8
    7ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7ca4:	6921      	ldr	r1, [r4, #16]
    7ca6:	e7f0      	b.n	7c8a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7ca8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7cac:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    7cb0:	4299      	cmp	r1, r3
    7cb2:	bfa8      	it	ge
    7cb4:	4619      	movge	r1, r3
    7cb6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7cba:	4291      	cmp	r1, r2
    7cbc:	bfb8      	it	lt
    7cbe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7cc0:	428b      	cmp	r3, r1
    7cc2:	dd2e      	ble.n	7d22 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7cc4:	f002 fc05 	bl	a4d2 <adjust_owner_prio.isra.0>
    7cc8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7cca:	e9cd 7600 	strd	r7, r6, [sp]
    7cce:	4819      	ldr	r0, [pc, #100]	; (7d34 <z_impl_k_mutex_lock+0xec>)
    7cd0:	4622      	mov	r2, r4
    7cd2:	4641      	mov	r1, r8
    7cd4:	f000 fba4 	bl	8420 <z_pend_curr>
	if (got_mutex == 0) {
    7cd8:	2800      	cmp	r0, #0
    7cda:	d0e0      	beq.n	7c9e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    7cdc:	f04f 0320 	mov.w	r3, #32
    7ce0:	f3ef 8611 	mrs	r6, BASEPRI
    7ce4:	f383 8812 	msr	BASEPRI_MAX, r3
    7ce8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7cec:	6823      	ldr	r3, [r4, #0]
    7cee:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf0:	429c      	cmp	r4, r3
    7cf2:	d00a      	beq.n	7d0a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7cf4:	b14b      	cbz	r3, 7d0a <z_impl_k_mutex_lock+0xc2>
    7cf6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7cfa:	4299      	cmp	r1, r3
    7cfc:	bfa8      	it	ge
    7cfe:	4619      	movge	r1, r3
    7d00:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7d04:	4299      	cmp	r1, r3
    7d06:	bfb8      	it	lt
    7d08:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7d0a:	68a0      	ldr	r0, [r4, #8]
    7d0c:	f002 fbe1 	bl	a4d2 <adjust_owner_prio.isra.0>
    7d10:	b900      	cbnz	r0, 7d14 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    7d12:	b145      	cbz	r5, 7d26 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7d14:	4807      	ldr	r0, [pc, #28]	; (7d34 <z_impl_k_mutex_lock+0xec>)
    7d16:	4631      	mov	r1, r6
    7d18:	f000 fa30 	bl	817c <z_reschedule>
	return -EAGAIN;
    7d1c:	f06f 000a 	mvn.w	r0, #10
    7d20:	e7bd      	b.n	7c9e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    7d22:	2500      	movs	r5, #0
    7d24:	e7d1      	b.n	7cca <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    7d26:	f386 8811 	msr	BASEPRI, r6
    7d2a:	f3bf 8f6f 	isb	sy
    7d2e:	e7f5      	b.n	7d1c <z_impl_k_mutex_lock+0xd4>
    7d30:	20003b70 	.word	0x20003b70
    7d34:	20003c0c 	.word	0x20003c0c

00007d38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7d38:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7d3a:	6883      	ldr	r3, [r0, #8]
{
    7d3c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d032      	beq.n	7da8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7d42:	4a1c      	ldr	r2, [pc, #112]	; (7db4 <z_impl_k_mutex_unlock+0x7c>)
    7d44:	6892      	ldr	r2, [r2, #8]
    7d46:	4293      	cmp	r3, r2
    7d48:	d131      	bne.n	7dae <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7d4a:	7bda      	ldrb	r2, [r3, #15]
    7d4c:	3a01      	subs	r2, #1
    7d4e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7d50:	68c3      	ldr	r3, [r0, #12]
    7d52:	2b01      	cmp	r3, #1
    7d54:	d905      	bls.n	7d62 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    7d56:	3b01      	subs	r3, #1
    7d58:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7d5a:	f000 fbef 	bl	853c <k_sched_unlock>

	return 0;
    7d5e:	2000      	movs	r0, #0
}
    7d60:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7d62:	f04f 0320 	mov.w	r3, #32
    7d66:	f3ef 8511 	mrs	r5, BASEPRI
    7d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    7d6e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7d72:	6901      	ldr	r1, [r0, #16]
    7d74:	6880      	ldr	r0, [r0, #8]
    7d76:	f002 fbac 	bl	a4d2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7d7a:	4620      	mov	r0, r4
    7d7c:	f002 fd11 	bl	a7a2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7d80:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7d82:	b158      	cbz	r0, 7d9c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    7d84:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7d88:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7d8a:	2200      	movs	r2, #0
    7d8c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7d8e:	f002 fcac 	bl	a6ea <z_ready_thread>
		z_reschedule(&lock, key);
    7d92:	4809      	ldr	r0, [pc, #36]	; (7db8 <z_impl_k_mutex_unlock+0x80>)
    7d94:	4629      	mov	r1, r5
    7d96:	f000 f9f1 	bl	817c <z_reschedule>
    7d9a:	e7de      	b.n	7d5a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    7d9c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7d9e:	f385 8811 	msr	BASEPRI, r5
    7da2:	f3bf 8f6f 	isb	sy
    7da6:	e7d8      	b.n	7d5a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    7da8:	f06f 0015 	mvn.w	r0, #21
    7dac:	e7d8      	b.n	7d60 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    7dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7db2:	e7d5      	b.n	7d60 <z_impl_k_mutex_unlock+0x28>
    7db4:	20003b70 	.word	0x20003b70
    7db8:	20003c0c 	.word	0x20003c0c

00007dbc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    7dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7dbe:	4611      	mov	r1, r2
	__asm__ volatile(
    7dc0:	f04f 0220 	mov.w	r2, #32
    7dc4:	f3ef 8511 	mrs	r5, BASEPRI
    7dc8:	f382 8812 	msr	BASEPRI_MAX, r2
    7dcc:	f3bf 8f6f 	isb	sy
    7dd0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7dd2:	b19c      	cbz	r4, 7dfc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7dd4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7dd6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7dd8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7ddc:	4294      	cmp	r4, r2
	list->head = node;
    7dde:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7de0:	bf08      	it	eq
    7de2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7de4:	2101      	movs	r1, #1
    7de6:	4620      	mov	r0, r4
    7de8:	f002 fbe2 	bl	a5b0 <z_queue_node_peek>
    7dec:	4604      	mov	r4, r0
	__asm__ volatile(
    7dee:	f385 8811 	msr	BASEPRI, r5
    7df2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    7df6:	4620      	mov	r0, r4
    7df8:	b003      	add	sp, #12
    7dfa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7dfc:	ea51 0203 	orrs.w	r2, r1, r3
    7e00:	d0f5      	beq.n	7dee <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    7e02:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    7e06:	e9cd 1300 	strd	r1, r3, [sp]
    7e0a:	4610      	mov	r0, r2
    7e0c:	4629      	mov	r1, r5
    7e0e:	f000 fb07 	bl	8420 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    7e12:	2800      	cmp	r0, #0
    7e14:	d1ef      	bne.n	7df6 <z_impl_k_queue_get+0x3a>
    7e16:	4b02      	ldr	r3, [pc, #8]	; (7e20 <z_impl_k_queue_get+0x64>)
    7e18:	689b      	ldr	r3, [r3, #8]
    7e1a:	695c      	ldr	r4, [r3, #20]
    7e1c:	e7eb      	b.n	7df6 <z_impl_k_queue_get+0x3a>
    7e1e:	bf00      	nop
    7e20:	20003b70 	.word	0x20003b70

00007e24 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7e24:	b538      	push	{r3, r4, r5, lr}
    7e26:	4604      	mov	r4, r0
	__asm__ volatile(
    7e28:	f04f 0320 	mov.w	r3, #32
    7e2c:	f3ef 8511 	mrs	r5, BASEPRI
    7e30:	f383 8812 	msr	BASEPRI_MAX, r3
    7e34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7e38:	f002 fcb3 	bl	a7a2 <z_unpend_first_thread>

	if (thread != NULL) {
    7e3c:	b148      	cbz	r0, 7e52 <z_impl_k_sem_give+0x2e>
    7e3e:	2200      	movs	r2, #0
    7e40:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7e42:	f002 fc52 	bl	a6ea <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7e46:	4629      	mov	r1, r5
    7e48:	4805      	ldr	r0, [pc, #20]	; (7e60 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7e4e:	f000 b995 	b.w	817c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7e52:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7e56:	429a      	cmp	r2, r3
    7e58:	bf18      	it	ne
    7e5a:	3301      	addne	r3, #1
    7e5c:	60a3      	str	r3, [r4, #8]
}
    7e5e:	e7f2      	b.n	7e46 <z_impl_k_sem_give+0x22>
    7e60:	20003c0c 	.word	0x20003c0c

00007e64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7e64:	b513      	push	{r0, r1, r4, lr}
    7e66:	f04f 0420 	mov.w	r4, #32
    7e6a:	f3ef 8111 	mrs	r1, BASEPRI
    7e6e:	f384 8812 	msr	BASEPRI_MAX, r4
    7e72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7e76:	6884      	ldr	r4, [r0, #8]
    7e78:	b144      	cbz	r4, 7e8c <z_impl_k_sem_take+0x28>
		sem->count--;
    7e7a:	3c01      	subs	r4, #1
    7e7c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7e7e:	f381 8811 	msr	BASEPRI, r1
    7e82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7e86:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7e88:	b002      	add	sp, #8
    7e8a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7e8c:	ea52 0403 	orrs.w	r4, r2, r3
    7e90:	d106      	bne.n	7ea0 <z_impl_k_sem_take+0x3c>
    7e92:	f381 8811 	msr	BASEPRI, r1
    7e96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7e9a:	f06f 000f 	mvn.w	r0, #15
    7e9e:	e7f3      	b.n	7e88 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7ea0:	e9cd 2300 	strd	r2, r3, [sp]
    7ea4:	4602      	mov	r2, r0
    7ea6:	4802      	ldr	r0, [pc, #8]	; (7eb0 <z_impl_k_sem_take+0x4c>)
    7ea8:	f000 faba 	bl	8420 <z_pend_curr>
	return ret;
    7eac:	e7ec      	b.n	7e88 <z_impl_k_sem_take+0x24>
    7eae:	bf00      	nop
    7eb0:	20003c0c 	.word	0x20003c0c

00007eb4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    7eb8:	4e47      	ldr	r6, [pc, #284]	; (7fd8 <work_queue_main+0x124>)
    7eba:	b085      	sub	sp, #20
    7ebc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    7ebe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    7ec2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    7ec6:	f04f 0320 	mov.w	r3, #32
    7eca:	f3ef 8711 	mrs	r7, BASEPRI
    7ece:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed2:	f3bf 8f6f 	isb	sy
    7ed6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7eda:	b98d      	cbnz	r5, 7f00 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    7edc:	2102      	movs	r1, #2
    7ede:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7ee2:	f002 fb88 	bl	a5f6 <flag_test_and_clear>
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d135      	bne.n	7f56 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7eea:	2300      	movs	r3, #0
    7eec:	e9cd 8900 	strd	r8, r9, [sp]
    7ef0:	9302      	str	r3, [sp, #8]
    7ef2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    7ef6:	4639      	mov	r1, r7
    7ef8:	4838      	ldr	r0, [pc, #224]	; (7fdc <work_queue_main+0x128>)
    7efa:	f000 fc51 	bl	87a0 <z_sched_wait>
			continue;
    7efe:	e7e2      	b.n	7ec6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7f00:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    7f04:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7f06:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7f0a:	4295      	cmp	r5, r2
    7f0c:	d101      	bne.n	7f12 <work_queue_main+0x5e>
	list->tail = node;
    7f0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7f12:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7f16:	f043 0302 	orr.w	r3, r3, #2
    7f1a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7f1e:	68eb      	ldr	r3, [r5, #12]
    7f20:	f023 0304 	bic.w	r3, r3, #4
    7f24:	f043 0301 	orr.w	r3, r3, #1
    7f28:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    7f2a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    7f2c:	f387 8811 	msr	BASEPRI, r7
    7f30:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    7f34:	4628      	mov	r0, r5
    7f36:	4798      	blx	r3
	__asm__ volatile(
    7f38:	f04f 0320 	mov.w	r3, #32
    7f3c:	f3ef 8b11 	mrs	fp, BASEPRI
    7f40:	f383 8812 	msr	BASEPRI_MAX, r3
    7f44:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7f48:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7f4a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7f4c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7f50:	d40b      	bmi.n	7f6a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    7f52:	60ea      	str	r2, [r5, #12]
    7f54:	e00e      	b.n	7f74 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    7f56:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    7f5a:	2200      	movs	r2, #0
    7f5c:	2101      	movs	r1, #1
    7f5e:	4628      	mov	r0, r5
    7f60:	f002 fc47 	bl	a7f2 <z_sched_wake>
    7f64:	2800      	cmp	r0, #0
    7f66:	d1f8      	bne.n	7f5a <work_queue_main+0xa6>
    7f68:	e7bf      	b.n	7eea <work_queue_main+0x36>
	return list->head;
    7f6a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    7f6c:	f023 0303 	bic.w	r3, r3, #3
    7f70:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7f72:	b970      	cbnz	r0, 7f92 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    7f74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7f78:	f023 0302 	bic.w	r3, r3, #2
    7f7c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    7f80:	f38b 8811 	msr	BASEPRI, fp
    7f84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7f88:	05d8      	lsls	r0, r3, #23
    7f8a:	d49c      	bmi.n	7ec6 <work_queue_main+0x12>
	z_impl_k_yield();
    7f8c:	f000 fafe 	bl	858c <z_impl_k_yield>
}
    7f90:	e799      	b.n	7ec6 <work_queue_main+0x12>
	return node->next;
    7f92:	2700      	movs	r7, #0
    7f94:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    7f98:	463b      	mov	r3, r7
		if (wc->work == work) {
    7f9a:	6842      	ldr	r2, [r0, #4]
    7f9c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    7f9e:	4601      	mov	r1, r0
		if (wc->work == work) {
    7fa0:	d10c      	bne.n	7fbc <work_queue_main+0x108>
	return node->next;
    7fa2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7fa4:	b997      	cbnz	r7, 7fcc <work_queue_main+0x118>
    7fa6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    7fa8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7faa:	4282      	cmp	r2, r0
    7fac:	d100      	bne.n	7fb0 <work_queue_main+0xfc>
	list->tail = node;
    7fae:	6071      	str	r1, [r6, #4]
	parent->next = child;
    7fb0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    7fb4:	f7ff ff36 	bl	7e24 <z_impl_k_sem_give>
}
    7fb8:	4639      	mov	r1, r7
    7fba:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7fbc:	f1ba 0f00 	cmp.w	sl, #0
    7fc0:	d0d8      	beq.n	7f74 <work_queue_main+0xc0>
	return node->next;
    7fc2:	4650      	mov	r0, sl
    7fc4:	460f      	mov	r7, r1
    7fc6:	f8da a000 	ldr.w	sl, [sl]
    7fca:	e7e6      	b.n	7f9a <work_queue_main+0xe6>
	return list->tail;
    7fcc:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    7fce:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7fd0:	4290      	cmp	r0, r2
	list->tail = node;
    7fd2:	bf08      	it	eq
    7fd4:	6077      	streq	r7, [r6, #4]
}
    7fd6:	e7eb      	b.n	7fb0 <work_queue_main+0xfc>
    7fd8:	20003b98 	.word	0x20003b98
    7fdc:	20003c0c 	.word	0x20003c0c

00007fe0 <submit_to_queue_locked>:
{
    7fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    7fe2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7fe4:	079a      	lsls	r2, r3, #30
{
    7fe6:	4604      	mov	r4, r0
    7fe8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7fea:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7fee:	d41f      	bmi.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7ff0:	075f      	lsls	r7, r3, #29
    7ff2:	d41f      	bmi.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
		if (*queuep == NULL) {
    7ff4:	680a      	ldr	r2, [r1, #0]
    7ff6:	b90a      	cbnz	r2, 7ffc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7ff8:	6882      	ldr	r2, [r0, #8]
    7ffa:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7ffc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    7ffe:	bf44      	itt	mi
    8000:	68a3      	ldrmi	r3, [r4, #8]
    8002:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8004:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    8006:	bf4c      	ite	mi
    8008:	2502      	movmi	r5, #2
		ret = 1;
    800a:	2501      	movpl	r5, #1
	if (queue == NULL) {
    800c:	b37f      	cbz	r7, 806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    800e:	4b1b      	ldr	r3, [pc, #108]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    8010:	689b      	ldr	r3, [r3, #8]
    8012:	42bb      	cmp	r3, r7
    8014:	d111      	bne.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8016:	f002 fa4a 	bl	a4ae <k_is_in_isr>
    801a:	f080 0001 	eor.w	r0, r0, #1
    801e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    8020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8024:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8026:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    802a:	d523      	bpl.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
	} else if (draining && !chained) {
    802c:	b13a      	cbz	r2, 803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
    802e:	b940      	cbnz	r0, 8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
		ret = -EBUSY;
    8030:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8034:	2300      	movs	r3, #0
    8036:	6033      	str	r3, [r6, #0]
	return ret;
    8038:	e013      	b.n	8062 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    803a:	2000      	movs	r0, #0
    803c:	e7f0      	b.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
	} else if (plugged && !draining) {
    803e:	071b      	lsls	r3, r3, #28
    8040:	d4f6      	bmi.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
	parent->next = child;
    8042:	2300      	movs	r3, #0
    8044:	6023      	str	r3, [r4, #0]
	return list->tail;
    8046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    804a:	b963      	cbnz	r3, 8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
	list->head = node;
    804c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8050:	4638      	mov	r0, r7
    8052:	f002 fadb 	bl	a60c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    8056:	68e3      	ldr	r3, [r4, #12]
    8058:	f043 0304 	orr.w	r3, r3, #4
    805c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    805e:	6833      	ldr	r3, [r6, #0]
    8060:	60a3      	str	r3, [r4, #8]
}
    8062:	4628      	mov	r0, r5
    8064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    8066:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8068:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    806c:	e7f0      	b.n	8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
		return -EINVAL;
    806e:	f06f 0515 	mvn.w	r5, #21
    8072:	e7df      	b.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
		ret = -ENODEV;
    8074:	f06f 0512 	mvn.w	r5, #18
    8078:	e7dc      	b.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    807a:	bf00      	nop
    807c:	20003b70 	.word	0x20003b70

00008080 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8080:	b5f0      	push	{r4, r5, r6, r7, lr}
    8082:	b089      	sub	sp, #36	; 0x24
    8084:	4604      	mov	r4, r0
	list->head = NULL;
    8086:	2000      	movs	r0, #0
	list->tail = NULL;
    8088:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    808c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    808e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    8092:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    8096:	f104 0090 	add.w	r0, r4, #144	; 0x90
    809a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    809e:	b31d      	cbz	r5, 80e8 <k_work_queue_start+0x68>
    80a0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    80a2:	2800      	cmp	r0, #0
    80a4:	f240 1001 	movw	r0, #257	; 0x101
    80a8:	bf08      	it	eq
    80aa:	2001      	moveq	r0, #1
	*flagp = flags;
    80ac:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    80b0:	2000      	movs	r0, #0
    80b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    80b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    80ba:	e9cd 3003 	strd	r3, r0, [sp, #12]
    80be:	e9cd 0001 	strd	r0, r0, [sp, #4]
    80c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    80c6:	4b09      	ldr	r3, [pc, #36]	; (80ec <k_work_queue_start+0x6c>)
    80c8:	9400      	str	r4, [sp, #0]
    80ca:	4620      	mov	r0, r4
    80cc:	f7ff fd18 	bl	7b00 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    80d0:	b125      	cbz	r5, 80dc <k_work_queue_start+0x5c>
    80d2:	6829      	ldr	r1, [r5, #0]
    80d4:	b111      	cbz	r1, 80dc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    80d6:	4620      	mov	r0, r4
    80d8:	f002 f9ef 	bl	a4ba <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    80dc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    80de:	b009      	add	sp, #36	; 0x24
    80e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    80e4:	f002 b9ec 	b.w	a4c0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    80e8:	2001      	movs	r0, #1
    80ea:	e7df      	b.n	80ac <k_work_queue_start+0x2c>
    80ec:	00007eb5 	.word	0x00007eb5

000080f0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    80f0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    80f2:	4c08      	ldr	r4, [pc, #32]	; (8114 <z_reset_time_slice+0x24>)
    80f4:	6823      	ldr	r3, [r4, #0]
    80f6:	b15b      	cbz	r3, 8110 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    80f8:	f7fd fbb4 	bl	5864 <sys_clock_elapsed>
    80fc:	4603      	mov	r3, r0
    80fe:	6820      	ldr	r0, [r4, #0]
    8100:	4a05      	ldr	r2, [pc, #20]	; (8118 <z_reset_time_slice+0x28>)
    8102:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    8104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8108:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    810a:	2100      	movs	r1, #0
    810c:	f002 bbb4 	b.w	a878 <z_set_timeout_expiry>
}
    8110:	bd10      	pop	{r4, pc}
    8112:	bf00      	nop
    8114:	20003ba8 	.word	0x20003ba8
    8118:	20003b70 	.word	0x20003b70

0000811c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    811e:	4604      	mov	r4, r0
    8120:	460d      	mov	r5, r1
	__asm__ volatile(
    8122:	f04f 0320 	mov.w	r3, #32
    8126:	f3ef 8611 	mrs	r6, BASEPRI
    812a:	f383 8812 	msr	BASEPRI_MAX, r3
    812e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    8132:	4b0f      	ldr	r3, [pc, #60]	; (8170 <k_sched_time_slice_set+0x54>)
    8134:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    8136:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    813a:	f240 30e7 	movw	r0, #999	; 0x3e7
    813e:	6119      	str	r1, [r3, #16]
    8140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8144:	2300      	movs	r3, #0
    8146:	fbe4 0107 	umlal	r0, r1, r4, r7
    814a:	f7f8 fbcf 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    814e:	2c00      	cmp	r4, #0
    8150:	4b08      	ldr	r3, [pc, #32]	; (8174 <k_sched_time_slice_set+0x58>)
    8152:	dc09      	bgt.n	8168 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    8154:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    8156:	4b08      	ldr	r3, [pc, #32]	; (8178 <k_sched_time_slice_set+0x5c>)
    8158:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    815a:	f7ff ffc9 	bl	80f0 <z_reset_time_slice>
	__asm__ volatile(
    815e:	f386 8811 	msr	BASEPRI, r6
    8162:	f3bf 8f6f 	isb	sy
	}
}
    8166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    8168:	2802      	cmp	r0, #2
    816a:	bfb8      	it	lt
    816c:	2002      	movlt	r0, #2
    816e:	e7f1      	b.n	8154 <k_sched_time_slice_set+0x38>
    8170:	20003b70 	.word	0x20003b70
    8174:	20003ba8 	.word	0x20003ba8
    8178:	20003ba4 	.word	0x20003ba4

0000817c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    817c:	b949      	cbnz	r1, 8192 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    817e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    8182:	b930      	cbnz	r0, 8192 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8184:	4b05      	ldr	r3, [pc, #20]	; (819c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    8186:	69da      	ldr	r2, [r3, #28]
    8188:	689b      	ldr	r3, [r3, #8]
    818a:	429a      	cmp	r2, r3
    818c:	d001      	beq.n	8192 <z_reschedule+0x16>
	ret = arch_swap(key);
    818e:	f7fb bb15 	b.w	37bc <arch_swap>
    8192:	f381 8811 	msr	BASEPRI, r1
    8196:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    819a:	4770      	bx	lr
    819c:	20003b70 	.word	0x20003b70

000081a0 <k_sched_lock>:
	__asm__ volatile(
    81a0:	f04f 0320 	mov.w	r3, #32
    81a4:	f3ef 8111 	mrs	r1, BASEPRI
    81a8:	f383 8812 	msr	BASEPRI_MAX, r3
    81ac:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    81b0:	4b04      	ldr	r3, [pc, #16]	; (81c4 <k_sched_lock+0x24>)
    81b2:	689a      	ldr	r2, [r3, #8]
    81b4:	7bd3      	ldrb	r3, [r2, #15]
    81b6:	3b01      	subs	r3, #1
    81b8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    81ba:	f381 8811 	msr	BASEPRI, r1
    81be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    81c2:	4770      	bx	lr
    81c4:	20003b70 	.word	0x20003b70

000081c8 <update_cache>:
{
    81c8:	b538      	push	{r3, r4, r5, lr}
    81ca:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    81cc:	480c      	ldr	r0, [pc, #48]	; (8200 <update_cache+0x38>)
    81ce:	4d0d      	ldr	r5, [pc, #52]	; (8204 <update_cache+0x3c>)
    81d0:	f002 fa85 	bl	a6de <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    81d4:	4604      	mov	r4, r0
    81d6:	b900      	cbnz	r0, 81da <update_cache+0x12>
    81d8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    81da:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    81dc:	b94a      	cbnz	r2, 81f2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    81de:	7b5a      	ldrb	r2, [r3, #13]
    81e0:	06d2      	lsls	r2, r2, #27
    81e2:	d106      	bne.n	81f2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    81e4:	69a2      	ldr	r2, [r4, #24]
    81e6:	b922      	cbnz	r2, 81f2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    81e8:	89da      	ldrh	r2, [r3, #14]
    81ea:	2a7f      	cmp	r2, #127	; 0x7f
    81ec:	d901      	bls.n	81f2 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    81ee:	61eb      	str	r3, [r5, #28]
}
    81f0:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    81f2:	429c      	cmp	r4, r3
    81f4:	d001      	beq.n	81fa <update_cache+0x32>
			z_reset_time_slice();
    81f6:	f7ff ff7b 	bl	80f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    81fa:	61ec      	str	r4, [r5, #28]
}
    81fc:	e7f8      	b.n	81f0 <update_cache+0x28>
    81fe:	bf00      	nop
    8200:	20003b90 	.word	0x20003b90
    8204:	20003b70 	.word	0x20003b70

00008208 <move_thread_to_end_of_prio_q>:
{
    8208:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    820a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    820e:	7b43      	ldrb	r3, [r0, #13]
    8210:	2a00      	cmp	r2, #0
{
    8212:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8214:	da04      	bge.n	8220 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    821a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    821c:	f002 fa23 	bl	a666 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8220:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8222:	4a15      	ldr	r2, [pc, #84]	; (8278 <move_thread_to_end_of_prio_q+0x70>)
    8224:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8228:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    822a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    822e:	f102 0520 	add.w	r5, r2, #32
    8232:	42ab      	cmp	r3, r5
    8234:	d01b      	beq.n	826e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8236:	b1d3      	cbz	r3, 826e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    8238:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    823c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    8240:	4286      	cmp	r6, r0
    8242:	d00f      	beq.n	8264 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    8244:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8246:	2800      	cmp	r0, #0
    8248:	dd0c      	ble.n	8264 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    824a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    824c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8250:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8252:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8254:	6890      	ldr	r0, [r2, #8]
    8256:	1a43      	subs	r3, r0, r1
    8258:	4258      	negs	r0, r3
}
    825a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    825e:	4158      	adcs	r0, r3
    8260:	f7ff bfb2 	b.w	81c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8264:	42a3      	cmp	r3, r4
    8266:	d002      	beq.n	826e <move_thread_to_end_of_prio_q+0x66>
    8268:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    826a:	2b00      	cmp	r3, #0
    826c:	d1e6      	bne.n	823c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    826e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    8272:	6021      	str	r1, [r4, #0]
	list->tail = node;
    8274:	6251      	str	r1, [r2, #36]	; 0x24
}
    8276:	e7ed      	b.n	8254 <move_thread_to_end_of_prio_q+0x4c>
    8278:	20003b70 	.word	0x20003b70

0000827c <z_time_slice>:
{
    827c:	b538      	push	{r3, r4, r5, lr}
    827e:	4601      	mov	r1, r0
	__asm__ volatile(
    8280:	f04f 0320 	mov.w	r3, #32
    8284:	f3ef 8411 	mrs	r4, BASEPRI
    8288:	f383 8812 	msr	BASEPRI_MAX, r3
    828c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8290:	4b15      	ldr	r3, [pc, #84]	; (82e8 <z_time_slice+0x6c>)
    8292:	4a16      	ldr	r2, [pc, #88]	; (82ec <z_time_slice+0x70>)
    8294:	6898      	ldr	r0, [r3, #8]
    8296:	6815      	ldr	r5, [r2, #0]
    8298:	42a8      	cmp	r0, r5
    829a:	d106      	bne.n	82aa <z_time_slice+0x2e>
			z_reset_time_slice();
    829c:	f7ff ff28 	bl	80f0 <z_reset_time_slice>
	__asm__ volatile(
    82a0:	f384 8811 	msr	BASEPRI, r4
    82a4:	f3bf 8f6f 	isb	sy
}
    82a8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    82aa:	2500      	movs	r5, #0
    82ac:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    82ae:	4a10      	ldr	r2, [pc, #64]	; (82f0 <z_time_slice+0x74>)
    82b0:	6812      	ldr	r2, [r2, #0]
    82b2:	b1ba      	cbz	r2, 82e4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    82b4:	89c2      	ldrh	r2, [r0, #14]
    82b6:	2a7f      	cmp	r2, #127	; 0x7f
    82b8:	d814      	bhi.n	82e4 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    82ba:	7b42      	ldrb	r2, [r0, #13]
    82bc:	06d2      	lsls	r2, r2, #27
    82be:	d111      	bne.n	82e4 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    82c0:	4a0c      	ldr	r2, [pc, #48]	; (82f4 <z_time_slice+0x78>)
    82c2:	f990 500e 	ldrsb.w	r5, [r0, #14]
    82c6:	6812      	ldr	r2, [r2, #0]
    82c8:	4295      	cmp	r5, r2
    82ca:	db0b      	blt.n	82e4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    82cc:	4a0a      	ldr	r2, [pc, #40]	; (82f8 <z_time_slice+0x7c>)
    82ce:	4290      	cmp	r0, r2
    82d0:	d008      	beq.n	82e4 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    82d2:	691a      	ldr	r2, [r3, #16]
    82d4:	428a      	cmp	r2, r1
    82d6:	dc02      	bgt.n	82de <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    82d8:	f7ff ff96 	bl	8208 <move_thread_to_end_of_prio_q>
    82dc:	e7de      	b.n	829c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    82de:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    82e0:	611a      	str	r2, [r3, #16]
    82e2:	e7dd      	b.n	82a0 <z_time_slice+0x24>
    82e4:	2200      	movs	r2, #0
    82e6:	e7fb      	b.n	82e0 <z_time_slice+0x64>
    82e8:	20003b70 	.word	0x20003b70
    82ec:	20003ba0 	.word	0x20003ba0
    82f0:	20003ba8 	.word	0x20003ba8
    82f4:	20003ba4 	.word	0x20003ba4
    82f8:	200004c8 	.word	0x200004c8

000082fc <ready_thread>:
{
    82fc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    82fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8302:	7b43      	ldrb	r3, [r0, #13]
    8304:	2a00      	cmp	r2, #0
    8306:	db2a      	blt.n	835e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8308:	06da      	lsls	r2, r3, #27
    830a:	d128      	bne.n	835e <ready_thread+0x62>
    830c:	6982      	ldr	r2, [r0, #24]
    830e:	bb32      	cbnz	r2, 835e <ready_thread+0x62>
	return list->head == list;
    8310:	4a14      	ldr	r2, [pc, #80]	; (8364 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    8312:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8316:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    8318:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    831c:	f102 0520 	add.w	r5, r2, #32
    8320:	42ab      	cmp	r3, r5
    8322:	d017      	beq.n	8354 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8324:	b1b3      	cbz	r3, 8354 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    8326:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    832a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    832e:	428e      	cmp	r6, r1
    8330:	d00b      	beq.n	834a <ready_thread+0x4e>
		return b2 - b1;
    8332:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8334:	2900      	cmp	r1, #0
    8336:	dd08      	ble.n	834a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8338:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    833a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    833e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8340:	6058      	str	r0, [r3, #4]
}
    8342:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8344:	2000      	movs	r0, #0
    8346:	f7ff bf3f 	b.w	81c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    834a:	42a3      	cmp	r3, r4
    834c:	d002      	beq.n	8354 <ready_thread+0x58>
    834e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8350:	2b00      	cmp	r3, #0
    8352:	d1ea      	bne.n	832a <ready_thread+0x2e>
	node->prev = tail;
    8354:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    8358:	6020      	str	r0, [r4, #0]
	list->tail = node;
    835a:	6250      	str	r0, [r2, #36]	; 0x24
}
    835c:	e7f1      	b.n	8342 <ready_thread+0x46>
}
    835e:	bc70      	pop	{r4, r5, r6}
    8360:	4770      	bx	lr
    8362:	bf00      	nop
    8364:	20003b70 	.word	0x20003b70

00008368 <z_sched_start>:
{
    8368:	b510      	push	{r4, lr}
	__asm__ volatile(
    836a:	f04f 0220 	mov.w	r2, #32
    836e:	f3ef 8411 	mrs	r4, BASEPRI
    8372:	f382 8812 	msr	BASEPRI_MAX, r2
    8376:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    837a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    837c:	0751      	lsls	r1, r2, #29
    837e:	d404      	bmi.n	838a <z_sched_start+0x22>
	__asm__ volatile(
    8380:	f384 8811 	msr	BASEPRI, r4
    8384:	f3bf 8f6f 	isb	sy
}
    8388:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    838a:	f022 0204 	bic.w	r2, r2, #4
    838e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8390:	f7ff ffb4 	bl	82fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8394:	4621      	mov	r1, r4
    8396:	4802      	ldr	r0, [pc, #8]	; (83a0 <z_sched_start+0x38>)
}
    8398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    839c:	f7ff beee 	b.w	817c <z_reschedule>
    83a0:	20003c0c 	.word	0x20003c0c

000083a4 <unready_thread>:
{
    83a4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    83a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    83aa:	7b43      	ldrb	r3, [r0, #13]
    83ac:	2a00      	cmp	r2, #0
{
    83ae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    83b0:	da04      	bge.n	83bc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    83b8:	f002 f955 	bl	a666 <sys_dlist_remove>
	update_cache(thread == _current);
    83bc:	4b04      	ldr	r3, [pc, #16]	; (83d0 <unready_thread+0x2c>)
    83be:	6898      	ldr	r0, [r3, #8]
    83c0:	1a43      	subs	r3, r0, r1
    83c2:	4258      	negs	r0, r3
    83c4:	4158      	adcs	r0, r3
}
    83c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    83ca:	f7ff befd 	b.w	81c8 <update_cache>
    83ce:	bf00      	nop
    83d0:	20003b70 	.word	0x20003b70

000083d4 <pend>:
{
    83d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83d8:	4606      	mov	r6, r0
    83da:	4615      	mov	r5, r2
    83dc:	461c      	mov	r4, r3
	__asm__ volatile(
    83de:	f04f 0320 	mov.w	r3, #32
    83e2:	f3ef 8711 	mrs	r7, BASEPRI
    83e6:	f383 8812 	msr	BASEPRI_MAX, r3
    83ea:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    83ee:	f002 f9ae 	bl	a74e <add_to_waitq_locked>
	__asm__ volatile(
    83f2:	f387 8811 	msr	BASEPRI, r7
    83f6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    83fa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    83fe:	bf08      	it	eq
    8400:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8404:	d008      	beq.n	8418 <pend+0x44>
    8406:	462a      	mov	r2, r5
    8408:	4623      	mov	r3, r4
    840a:	f106 0018 	add.w	r0, r6, #24
    840e:	4903      	ldr	r1, [pc, #12]	; (841c <pend+0x48>)
}
    8410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8414:	f000 ba3a 	b.w	888c <z_add_timeout>
    8418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    841c:	0000a70b 	.word	0x0000a70b

00008420 <z_pend_curr>:
{
    8420:	b510      	push	{r4, lr}
	pending_current = _current;
    8422:	4b07      	ldr	r3, [pc, #28]	; (8440 <z_pend_curr+0x20>)
    8424:	6898      	ldr	r0, [r3, #8]
    8426:	4b07      	ldr	r3, [pc, #28]	; (8444 <z_pend_curr+0x24>)
{
    8428:	460c      	mov	r4, r1
	pending_current = _current;
    842a:	6018      	str	r0, [r3, #0]
{
    842c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    842e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8432:	f7ff ffcf 	bl	83d4 <pend>
    8436:	4620      	mov	r0, r4
}
    8438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    843c:	f7fb b9be 	b.w	37bc <arch_swap>
    8440:	20003b70 	.word	0x20003b70
    8444:	20003ba0 	.word	0x20003ba0

00008448 <z_set_prio>:
{
    8448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    844a:	4604      	mov	r4, r0
	__asm__ volatile(
    844c:	f04f 0320 	mov.w	r3, #32
    8450:	f3ef 8611 	mrs	r6, BASEPRI
    8454:	f383 8812 	msr	BASEPRI_MAX, r3
    8458:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    845c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    845e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8460:	b249      	sxtb	r1, r1
    8462:	d133      	bne.n	84cc <z_set_prio+0x84>
		if (need_sched) {
    8464:	6982      	ldr	r2, [r0, #24]
    8466:	bb8a      	cbnz	r2, 84cc <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    846c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    846e:	f002 f8fa 	bl	a666 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8472:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8474:	4a17      	ldr	r2, [pc, #92]	; (84d4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    8476:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8478:	f063 037f 	orn	r3, r3, #127	; 0x7f
    847c:	7343      	strb	r3, [r0, #13]
    847e:	4610      	mov	r0, r2
    8480:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8484:	4283      	cmp	r3, r0
    8486:	d01b      	beq.n	84c0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8488:	b1d3      	cbz	r3, 84c0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    848a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    848c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    8490:	42a9      	cmp	r1, r5
    8492:	d010      	beq.n	84b6 <z_set_prio+0x6e>
		return b2 - b1;
    8494:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8496:	2d00      	cmp	r5, #0
    8498:	dd0d      	ble.n	84b6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    849a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    849c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    84a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    84a2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    84a4:	2001      	movs	r0, #1
    84a6:	f7ff fe8f 	bl	81c8 <update_cache>
    84aa:	2001      	movs	r0, #1
	__asm__ volatile(
    84ac:	f386 8811 	msr	BASEPRI, r6
    84b0:	f3bf 8f6f 	isb	sy
}
    84b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    84b6:	42bb      	cmp	r3, r7
    84b8:	d002      	beq.n	84c0 <z_set_prio+0x78>
    84ba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84bc:	2b00      	cmp	r3, #0
    84be:	d1e5      	bne.n	848c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    84c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    84c2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    84c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    84c8:	6254      	str	r4, [r2, #36]	; 0x24
}
    84ca:	e7eb      	b.n	84a4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    84cc:	73a1      	strb	r1, [r4, #14]
    84ce:	2000      	movs	r0, #0
    84d0:	e7ec      	b.n	84ac <z_set_prio+0x64>
    84d2:	bf00      	nop
    84d4:	20003b70 	.word	0x20003b70

000084d8 <z_impl_k_thread_suspend>:
{
    84d8:	b570      	push	{r4, r5, r6, lr}
    84da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    84dc:	3018      	adds	r0, #24
    84de:	f002 f9a5 	bl	a82c <z_abort_timeout>
	__asm__ volatile(
    84e2:	f04f 0320 	mov.w	r3, #32
    84e6:	f3ef 8611 	mrs	r6, BASEPRI
    84ea:	f383 8812 	msr	BASEPRI_MAX, r3
    84ee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    84f2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    84f6:	7b63      	ldrb	r3, [r4, #13]
    84f8:	2a00      	cmp	r2, #0
    84fa:	da05      	bge.n	8508 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    84fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8500:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8502:	4620      	mov	r0, r4
    8504:	f002 f8af 	bl	a666 <sys_dlist_remove>
		update_cache(thread == _current);
    8508:	4d0b      	ldr	r5, [pc, #44]	; (8538 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    850a:	7b63      	ldrb	r3, [r4, #13]
    850c:	68a8      	ldr	r0, [r5, #8]
    850e:	f043 0310 	orr.w	r3, r3, #16
    8512:	7363      	strb	r3, [r4, #13]
    8514:	1b03      	subs	r3, r0, r4
    8516:	4258      	negs	r0, r3
    8518:	4158      	adcs	r0, r3
    851a:	f7ff fe55 	bl	81c8 <update_cache>
	__asm__ volatile(
    851e:	f386 8811 	msr	BASEPRI, r6
    8522:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8526:	68ab      	ldr	r3, [r5, #8]
    8528:	42a3      	cmp	r3, r4
    852a:	d103      	bne.n	8534 <z_impl_k_thread_suspend+0x5c>
}
    852c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8530:	f002 b8cb 	b.w	a6ca <z_reschedule_unlocked>
}
    8534:	bd70      	pop	{r4, r5, r6, pc}
    8536:	bf00      	nop
    8538:	20003b70 	.word	0x20003b70

0000853c <k_sched_unlock>:
{
    853c:	b510      	push	{r4, lr}
	__asm__ volatile(
    853e:	f04f 0320 	mov.w	r3, #32
    8542:	f3ef 8411 	mrs	r4, BASEPRI
    8546:	f383 8812 	msr	BASEPRI_MAX, r3
    854a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    854e:	4b08      	ldr	r3, [pc, #32]	; (8570 <k_sched_unlock+0x34>)
    8550:	689a      	ldr	r2, [r3, #8]
    8552:	7bd3      	ldrb	r3, [r2, #15]
    8554:	3301      	adds	r3, #1
    8556:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8558:	2000      	movs	r0, #0
    855a:	f7ff fe35 	bl	81c8 <update_cache>
	__asm__ volatile(
    855e:	f384 8811 	msr	BASEPRI, r4
    8562:	f3bf 8f6f 	isb	sy
}
    8566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    856a:	f002 b8ae 	b.w	a6ca <z_reschedule_unlocked>
    856e:	bf00      	nop
    8570:	20003b70 	.word	0x20003b70

00008574 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8574:	4b04      	ldr	r3, [pc, #16]	; (8588 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8576:	2100      	movs	r1, #0
    8578:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    857c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8580:	4608      	mov	r0, r1
    8582:	f7ff bdcb 	b.w	811c <k_sched_time_slice_set>
    8586:	bf00      	nop
    8588:	20003b70 	.word	0x20003b70

0000858c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    858e:	f04f 0320 	mov.w	r3, #32
    8592:	f3ef 8511 	mrs	r5, BASEPRI
    8596:	f383 8812 	msr	BASEPRI_MAX, r3
    859a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    859e:	491a      	ldr	r1, [pc, #104]	; (8608 <z_impl_k_yield+0x7c>)
    85a0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    85a2:	7b43      	ldrb	r3, [r0, #13]
    85a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    85a8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    85aa:	f002 f85c 	bl	a666 <sys_dlist_remove>
	}
	queue_thread(_current);
    85ae:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    85b0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    85b2:	4608      	mov	r0, r1
    85b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    85b8:	735a      	strb	r2, [r3, #13]
    85ba:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85be:	4282      	cmp	r2, r0
    85c0:	d01c      	beq.n	85fc <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85c2:	b1da      	cbz	r2, 85fc <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    85c4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    85c6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    85ca:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    85ce:	42a6      	cmp	r6, r4
    85d0:	d00f      	beq.n	85f2 <z_impl_k_yield+0x66>
		return b2 - b1;
    85d2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    85d4:	2c00      	cmp	r4, #0
    85d6:	dd0c      	ble.n	85f2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    85d8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    85da:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    85de:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    85e0:	6053      	str	r3, [r2, #4]
	update_cache(1);
    85e2:	2001      	movs	r0, #1
    85e4:	f7ff fdf0 	bl	81c8 <update_cache>
    85e8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    85ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    85ee:	f7fb b8e5 	b.w	37bc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    85f2:	42ba      	cmp	r2, r7
    85f4:	d002      	beq.n	85fc <z_impl_k_yield+0x70>
    85f6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85f8:	2a00      	cmp	r2, #0
    85fa:	d1e6      	bne.n	85ca <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    85fc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    85fe:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    8602:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8604:	624b      	str	r3, [r1, #36]	; 0x24
}
    8606:	e7ec      	b.n	85e2 <z_impl_k_yield+0x56>
    8608:	20003b70 	.word	0x20003b70

0000860c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    860c:	ea50 0301 	orrs.w	r3, r0, r1
{
    8610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8614:	4605      	mov	r5, r0
    8616:	460e      	mov	r6, r1
	if (ticks == 0) {
    8618:	d103      	bne.n	8622 <z_tick_sleep+0x16>
	z_impl_k_yield();
    861a:	f7ff ffb7 	bl	858c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    861e:	2000      	movs	r0, #0
    8620:	e033      	b.n	868a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    8622:	f06f 0401 	mvn.w	r4, #1
    8626:	1a24      	subs	r4, r4, r0
    8628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    862c:	eb63 0301 	sbc.w	r3, r3, r1
    8630:	2c01      	cmp	r4, #1
    8632:	f173 0300 	sbcs.w	r3, r3, #0
    8636:	da02      	bge.n	863e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8638:	f002 f938 	bl	a8ac <sys_clock_tick_get_32>
    863c:	1944      	adds	r4, r0, r5
    863e:	f04f 0320 	mov.w	r3, #32
    8642:	f3ef 8811 	mrs	r8, BASEPRI
    8646:	f383 8812 	msr	BASEPRI_MAX, r3
    864a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    864e:	4f10      	ldr	r7, [pc, #64]	; (8690 <z_tick_sleep+0x84>)
    8650:	4b10      	ldr	r3, [pc, #64]	; (8694 <z_tick_sleep+0x88>)
    8652:	68b8      	ldr	r0, [r7, #8]
    8654:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8656:	f7ff fea5 	bl	83a4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    865a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    865c:	490e      	ldr	r1, [pc, #56]	; (8698 <z_tick_sleep+0x8c>)
    865e:	462a      	mov	r2, r5
    8660:	4633      	mov	r3, r6
    8662:	3018      	adds	r0, #24
    8664:	f000 f912 	bl	888c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8668:	68ba      	ldr	r2, [r7, #8]
    866a:	7b53      	ldrb	r3, [r2, #13]
    866c:	f043 0310 	orr.w	r3, r3, #16
    8670:	7353      	strb	r3, [r2, #13]
    8672:	4640      	mov	r0, r8
    8674:	f7fb f8a2 	bl	37bc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8678:	f002 f918 	bl	a8ac <sys_clock_tick_get_32>
    867c:	1a20      	subs	r0, r4, r0
    867e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8682:	2801      	cmp	r0, #1
    8684:	f173 0300 	sbcs.w	r3, r3, #0
    8688:	dbc9      	blt.n	861e <z_tick_sleep+0x12>
}
    868a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    868e:	bf00      	nop
    8690:	20003b70 	.word	0x20003b70
    8694:	20003ba0 	.word	0x20003ba0
    8698:	0000a70b 	.word	0x0000a70b

0000869c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    869c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    86a0:	bf08      	it	eq
    86a2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    86a6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    86a8:	d106      	bne.n	86b8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    86aa:	4b08      	ldr	r3, [pc, #32]	; (86cc <z_impl_k_sleep+0x30>)
    86ac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    86ae:	f7ff ff13 	bl	84d8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    86b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    86b6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    86b8:	f7ff ffa8 	bl	860c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    86bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    86c0:	fb80 0303 	smull	r0, r3, r0, r3
    86c4:	0bc0      	lsrs	r0, r0, #15
    86c6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    86ca:	e7f4      	b.n	86b6 <z_impl_k_sleep+0x1a>
    86cc:	20003b70 	.word	0x20003b70

000086d0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    86d0:	4b01      	ldr	r3, [pc, #4]	; (86d8 <z_impl_z_current_get+0x8>)
    86d2:	6898      	ldr	r0, [r3, #8]
    86d4:	4770      	bx	lr
    86d6:	bf00      	nop
    86d8:	20003b70 	.word	0x20003b70

000086dc <z_impl_k_is_preempt_thread>:
    86dc:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    86e0:	b93b      	cbnz	r3, 86f2 <z_impl_k_is_preempt_thread+0x16>
    86e2:	4b05      	ldr	r3, [pc, #20]	; (86f8 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    86e4:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    86e6:	89d8      	ldrh	r0, [r3, #14]
    86e8:	287f      	cmp	r0, #127	; 0x7f
    86ea:	bf8c      	ite	hi
    86ec:	2000      	movhi	r0, #0
    86ee:	2001      	movls	r0, #1
    86f0:	4770      	bx	lr
    86f2:	2000      	movs	r0, #0
}
    86f4:	4770      	bx	lr
    86f6:	bf00      	nop
    86f8:	20003b70 	.word	0x20003b70

000086fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    86fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8700:	4604      	mov	r4, r0
    8702:	f04f 0320 	mov.w	r3, #32
    8706:	f3ef 8611 	mrs	r6, BASEPRI
    870a:	f383 8812 	msr	BASEPRI_MAX, r3
    870e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8712:	7b43      	ldrb	r3, [r0, #13]
    8714:	071a      	lsls	r2, r3, #28
    8716:	d505      	bpl.n	8724 <z_thread_abort+0x28>
	__asm__ volatile(
    8718:	f386 8811 	msr	BASEPRI, r6
    871c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8724:	f023 0220 	bic.w	r2, r3, #32
    8728:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    872c:	09d2      	lsrs	r2, r2, #7
    872e:	d120      	bne.n	8772 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8730:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8732:	68a3      	ldr	r3, [r4, #8]
    8734:	b113      	cbz	r3, 873c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8736:	4620      	mov	r0, r4
    8738:	f001 ff9d 	bl	a676 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    873c:	f104 0018 	add.w	r0, r4, #24
    8740:	f002 f874 	bl	a82c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8744:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8748:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    874c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    874e:	42bd      	cmp	r5, r7
    8750:	d000      	beq.n	8754 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8752:	b9b5      	cbnz	r5, 8782 <z_thread_abort+0x86>
		update_cache(1);
    8754:	2001      	movs	r0, #1
    8756:	f7ff fd37 	bl	81c8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    875a:	4b10      	ldr	r3, [pc, #64]	; (879c <z_thread_abort+0xa0>)
    875c:	689b      	ldr	r3, [r3, #8]
    875e:	42a3      	cmp	r3, r4
    8760:	d1da      	bne.n	8718 <z_thread_abort+0x1c>
    8762:	f3ef 8305 	mrs	r3, IPSR
    8766:	2b00      	cmp	r3, #0
    8768:	d1d6      	bne.n	8718 <z_thread_abort+0x1c>
    876a:	4630      	mov	r0, r6
    876c:	f7fb f826 	bl	37bc <arch_swap>
	return ret;
    8770:	e7d2      	b.n	8718 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8772:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8776:	f043 0308 	orr.w	r3, r3, #8
    877a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    877c:	f001 ff73 	bl	a666 <sys_dlist_remove>
}
    8780:	e7d7      	b.n	8732 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8782:	4628      	mov	r0, r5
    8784:	f001 ff77 	bl	a676 <unpend_thread_no_timeout>
    8788:	f105 0018 	add.w	r0, r5, #24
    878c:	f002 f84e 	bl	a82c <z_abort_timeout>
    8790:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8794:	4628      	mov	r0, r5
    8796:	f7ff fdb1 	bl	82fc <ready_thread>
    879a:	e7d7      	b.n	874c <z_thread_abort+0x50>
    879c:	20003b70 	.word	0x20003b70

000087a0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    87a0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    87a2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    87a6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    87a8:	e9cd 6700 	strd	r6, r7, [sp]
    87ac:	f7ff fe38 	bl	8420 <z_pend_curr>

	if (data != NULL) {
    87b0:	b11c      	cbz	r4, 87ba <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    87b2:	4b03      	ldr	r3, [pc, #12]	; (87c0 <z_sched_wait+0x20>)
    87b4:	689b      	ldr	r3, [r3, #8]
    87b6:	695b      	ldr	r3, [r3, #20]
    87b8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    87ba:	b002      	add	sp, #8
    87bc:	bdd0      	pop	{r4, r6, r7, pc}
    87be:	bf00      	nop
    87c0:	20003b70 	.word	0x20003b70

000087c4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    87c4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    87c6:	4806      	ldr	r0, [pc, #24]	; (87e0 <z_data_copy+0x1c>)
    87c8:	4a06      	ldr	r2, [pc, #24]	; (87e4 <z_data_copy+0x20>)
    87ca:	4907      	ldr	r1, [pc, #28]	; (87e8 <z_data_copy+0x24>)
    87cc:	1a12      	subs	r2, r2, r0
    87ce:	f002 f90d 	bl	a9ec <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    87d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    87d6:	4a05      	ldr	r2, [pc, #20]	; (87ec <z_data_copy+0x28>)
    87d8:	4905      	ldr	r1, [pc, #20]	; (87f0 <z_data_copy+0x2c>)
    87da:	4806      	ldr	r0, [pc, #24]	; (87f4 <z_data_copy+0x30>)
    87dc:	f002 b906 	b.w	a9ec <memcpy>
    87e0:	20000000 	.word	0x20000000
    87e4:	20000364 	.word	0x20000364
    87e8:	0000b320 	.word	0x0000b320
    87ec:	00000000 	.word	0x00000000
    87f0:	0000b320 	.word	0x0000b320
    87f4:	20000000 	.word	0x20000000

000087f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    87f8:	4b03      	ldr	r3, [pc, #12]	; (8808 <elapsed+0x10>)
    87fa:	681b      	ldr	r3, [r3, #0]
    87fc:	b90b      	cbnz	r3, 8802 <elapsed+0xa>
    87fe:	f7fd b831 	b.w	5864 <sys_clock_elapsed>
}
    8802:	2000      	movs	r0, #0
    8804:	4770      	bx	lr
    8806:	bf00      	nop
    8808:	20003bac 	.word	0x20003bac

0000880c <next_timeout>:
	return list->head == list;
    880c:	4b10      	ldr	r3, [pc, #64]	; (8850 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    880e:	b510      	push	{r4, lr}
    8810:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8812:	429c      	cmp	r4, r3
    8814:	bf08      	it	eq
    8816:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8818:	f7ff ffee 	bl	87f8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    881c:	b1a4      	cbz	r4, 8848 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    881e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8822:	1a1b      	subs	r3, r3, r0
    8824:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    8828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    882c:	f170 0200 	sbcs.w	r2, r0, #0
    8830:	da0a      	bge.n	8848 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    8832:	2800      	cmp	r0, #0
    8834:	bfac      	ite	ge
    8836:	4618      	movge	r0, r3
    8838:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    883a:	4b06      	ldr	r3, [pc, #24]	; (8854 <next_timeout+0x48>)
    883c:	691b      	ldr	r3, [r3, #16]
    883e:	b113      	cbz	r3, 8846 <next_timeout+0x3a>
    8840:	4298      	cmp	r0, r3
    8842:	bfa8      	it	ge
    8844:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8846:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    8848:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    884c:	e7f5      	b.n	883a <next_timeout+0x2e>
    884e:	bf00      	nop
    8850:	20000210 	.word	0x20000210
    8854:	20003b70 	.word	0x20003b70

00008858 <remove_timeout>:
{
    8858:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    885a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    885c:	b168      	cbz	r0, 887a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    885e:	4a0a      	ldr	r2, [pc, #40]	; (8888 <remove_timeout+0x30>)
    8860:	6852      	ldr	r2, [r2, #4]
    8862:	4290      	cmp	r0, r2
    8864:	d009      	beq.n	887a <remove_timeout+0x22>
	if (next(t) != NULL) {
    8866:	b143      	cbz	r3, 887a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8868:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    886c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8870:	1912      	adds	r2, r2, r4
    8872:	eb41 0105 	adc.w	r1, r1, r5
    8876:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    887a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    887c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    887e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8880:	2300      	movs	r3, #0
	node->prev = NULL;
    8882:	e9c0 3300 	strd	r3, r3, [r0]
}
    8886:	bd30      	pop	{r4, r5, pc}
    8888:	20000210 	.word	0x20000210

0000888c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    888c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8890:	bf08      	it	eq
    8892:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8898:	4604      	mov	r4, r0
    889a:	461f      	mov	r7, r3
    889c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    889e:	d067      	beq.n	8970 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    88a0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    88a2:	f04f 0320 	mov.w	r3, #32
    88a6:	f3ef 8611 	mrs	r6, BASEPRI
    88aa:	f383 8812 	msr	BASEPRI_MAX, r3
    88ae:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    88b2:	f06f 0201 	mvn.w	r2, #1
    88b6:	1b53      	subs	r3, r2, r5
    88b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    88bc:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    88c0:	2b00      	cmp	r3, #0
    88c2:	db1b      	blt.n	88fc <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    88c4:	4b2b      	ldr	r3, [pc, #172]	; (8974 <z_add_timeout+0xe8>)
    88c6:	e9d3 1300 	ldrd	r1, r3, [r3]
    88ca:	1a52      	subs	r2, r2, r1
    88cc:	eb6c 0303 	sbc.w	r3, ip, r3
    88d0:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    88d2:	eb63 0307 	sbc.w	r3, r3, r7
    88d6:	2d01      	cmp	r5, #1
    88d8:	f173 0200 	sbcs.w	r2, r3, #0
    88dc:	bfbc      	itt	lt
    88de:	2501      	movlt	r5, #1
    88e0:	2300      	movlt	r3, #0
    88e2:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    88e6:	4824      	ldr	r0, [pc, #144]	; (8978 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    88e8:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88ec:	4283      	cmp	r3, r0
    88ee:	d118      	bne.n	8922 <z_add_timeout+0x96>
	node->prev = tail;
    88f0:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    88f4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    88f8:	6044      	str	r4, [r0, #4]
}
    88fa:	e026      	b.n	894a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    88fc:	f7ff ff7c 	bl	87f8 <elapsed>
    8900:	3501      	adds	r5, #1
    8902:	f147 0700 	adc.w	r7, r7, #0
    8906:	182d      	adds	r5, r5, r0
    8908:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    890c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    8910:	e7e9      	b.n	88e6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8912:	1a52      	subs	r2, r2, r1
    8914:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8918:	459c      	cmp	ip, r3
    891a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    891e:	d0e7      	beq.n	88f0 <z_add_timeout+0x64>
    8920:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8922:	2b00      	cmp	r3, #0
    8924:	d0e4      	beq.n	88f0 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    8926:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    892a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    892e:	428a      	cmp	r2, r1
    8930:	eb75 0e07 	sbcs.w	lr, r5, r7
    8934:	daed      	bge.n	8912 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    8936:	1a8a      	subs	r2, r1, r2
    8938:	eb67 0505 	sbc.w	r5, r7, r5
    893c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8940:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8942:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8946:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8948:	605c      	str	r4, [r3, #4]
	return list->head == list;
    894a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    894c:	4283      	cmp	r3, r0
    894e:	d00b      	beq.n	8968 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8950:	429c      	cmp	r4, r3
    8952:	d109      	bne.n	8968 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8954:	f7ff ff5a 	bl	880c <next_timeout>

			if (next_time == 0 ||
    8958:	b118      	cbz	r0, 8962 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    895a:	4b08      	ldr	r3, [pc, #32]	; (897c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    895c:	691b      	ldr	r3, [r3, #16]
    895e:	4283      	cmp	r3, r0
    8960:	d002      	beq.n	8968 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    8962:	2100      	movs	r1, #0
    8964:	f7fc ff4c 	bl	5800 <sys_clock_set_timeout>
	__asm__ volatile(
    8968:	f386 8811 	msr	BASEPRI, r6
    896c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8972:	bf00      	nop
    8974:	200005c8 	.word	0x200005c8
    8978:	20000210 	.word	0x20000210
    897c:	20003b70 	.word	0x20003b70

00008980 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8984:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8986:	f7ff fc79 	bl	827c <z_time_slice>
	__asm__ volatile(
    898a:	f04f 0320 	mov.w	r3, #32
    898e:	f3ef 8411 	mrs	r4, BASEPRI
    8992:	f383 8812 	msr	BASEPRI_MAX, r3
    8996:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    899a:	4e24      	ldr	r6, [pc, #144]	; (8a2c <sys_clock_announce+0xac>)
	return list->head == list;
    899c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8a30 <sys_clock_announce+0xb0>
    89a0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    89a2:	4d24      	ldr	r5, [pc, #144]	; (8a34 <sys_clock_announce+0xb4>)
    89a4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    89a8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89aa:	4540      	cmp	r0, r8
		curr_tick += dt;
    89ac:	e9d5 1e00 	ldrd	r1, lr, [r5]
    89b0:	ea4f 77e2 	mov.w	r7, r2, asr #31
    89b4:	d00b      	beq.n	89ce <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    89b6:	b150      	cbz	r0, 89ce <sys_clock_announce+0x4e>
    89b8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    89bc:	429a      	cmp	r2, r3
    89be:	eb77 090c 	sbcs.w	r9, r7, ip
    89c2:	da16      	bge.n	89f2 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    89c4:	1a9b      	subs	r3, r3, r2
    89c6:	eb6c 0c07 	sbc.w	ip, ip, r7
    89ca:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    89ce:	1852      	adds	r2, r2, r1
    89d0:	eb4e 0707 	adc.w	r7, lr, r7
    89d4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    89d8:	2500      	movs	r5, #0
    89da:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    89dc:	f7ff ff16 	bl	880c <next_timeout>
    89e0:	4629      	mov	r1, r5
    89e2:	f7fc ff0d 	bl	5800 <sys_clock_set_timeout>
	__asm__ volatile(
    89e6:	f384 8811 	msr	BASEPRI, r4
    89ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    89ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    89f2:	1859      	adds	r1, r3, r1
    89f4:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    89f8:	1ad3      	subs	r3, r2, r3
    89fa:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    89fc:	2200      	movs	r2, #0
    89fe:	2300      	movs	r3, #0
    8a00:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    8a04:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    8a08:	f7ff ff26 	bl	8858 <remove_timeout>
    8a0c:	f384 8811 	msr	BASEPRI, r4
    8a10:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8a14:	6883      	ldr	r3, [r0, #8]
    8a16:	4798      	blx	r3
	__asm__ volatile(
    8a18:	f04f 0320 	mov.w	r3, #32
    8a1c:	f3ef 8411 	mrs	r4, BASEPRI
    8a20:	f383 8812 	msr	BASEPRI_MAX, r3
    8a24:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8a28:	e7bc      	b.n	89a4 <sys_clock_announce+0x24>
    8a2a:	bf00      	nop
    8a2c:	20003bac 	.word	0x20003bac
    8a30:	20000210 	.word	0x20000210
    8a34:	200005c8 	.word	0x200005c8

00008a38 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8a38:	b510      	push	{r4, lr}
    8a3a:	f04f 0320 	mov.w	r3, #32
    8a3e:	f3ef 8411 	mrs	r4, BASEPRI
    8a42:	f383 8812 	msr	BASEPRI_MAX, r3
    8a46:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8a4a:	f7fc ff0b 	bl	5864 <sys_clock_elapsed>
    8a4e:	4a05      	ldr	r2, [pc, #20]	; (8a64 <sys_clock_tick_get+0x2c>)
    8a50:	e9d2 3100 	ldrd	r3, r1, [r2]
    8a54:	18c0      	adds	r0, r0, r3
    8a56:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    8a5a:	f384 8811 	msr	BASEPRI, r4
    8a5e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8a62:	bd10      	pop	{r4, pc}
    8a64:	200005c8 	.word	0x200005c8

00008a68 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    8a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a6a:	4606      	mov	r6, r0
    8a6c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    8a6e:	f001 fd1e 	bl	a4ae <k_is_in_isr>
    8a72:	b978      	cbnz	r0, 8a94 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8a74:	4b0b      	ldr	r3, [pc, #44]	; (8aa4 <z_thread_aligned_alloc+0x3c>)
    8a76:	689b      	ldr	r3, [r3, #8]
    8a78:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    8a7a:	b17c      	cbz	r4, 8a9c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    8a7c:	1d2a      	adds	r2, r5, #4
    8a7e:	d209      	bcs.n	8a94 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    8a80:	2000      	movs	r0, #0
    8a82:	2100      	movs	r1, #0
    8a84:	e9cd 0100 	strd	r0, r1, [sp]
    8a88:	f046 0104 	orr.w	r1, r6, #4
    8a8c:	4620      	mov	r0, r4
    8a8e:	f001 ff4f 	bl	a930 <k_heap_aligned_alloc>
	if (mem == NULL) {
    8a92:	b908      	cbnz	r0, 8a98 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    8a94:	2400      	movs	r4, #0
	}

	return ret;
    8a96:	e001      	b.n	8a9c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    8a98:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    8a9a:	1d04      	adds	r4, r0, #4
}
    8a9c:	4620      	mov	r0, r4
    8a9e:	b002      	add	sp, #8
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    8aa2:	bf00      	nop
    8aa4:	20003b70 	.word	0x20003b70

00008aa8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8aa8:	4a02      	ldr	r2, [pc, #8]	; (8ab4 <boot_banner+0xc>)
    8aaa:	4903      	ldr	r1, [pc, #12]	; (8ab8 <boot_banner+0x10>)
    8aac:	4803      	ldr	r0, [pc, #12]	; (8abc <boot_banner+0x14>)
    8aae:	f000 b9a7 	b.w	8e00 <printk>
    8ab2:	bf00      	nop
    8ab4:	0000b109 	.word	0x0000b109
    8ab8:	0000b1df 	.word	0x0000b1df
    8abc:	0000b1ed 	.word	0x0000b1ed

00008ac0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8ac0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8ac2:	4c06      	ldr	r4, [pc, #24]	; (8adc <statics_init+0x1c>)
    8ac4:	4d06      	ldr	r5, [pc, #24]	; (8ae0 <statics_init+0x20>)
    8ac6:	42ac      	cmp	r4, r5
    8ac8:	d301      	bcc.n	8ace <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8aca:	2000      	movs	r0, #0
    8acc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8ace:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8ad2:	4620      	mov	r0, r4
    8ad4:	f001 ff24 	bl	a920 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8ad8:	3414      	adds	r4, #20
    8ada:	e7f4      	b.n	8ac6 <statics_init+0x6>
    8adc:	20000254 	.word	0x20000254
    8ae0:	20000254 	.word	0x20000254

00008ae4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8ae6:	4b09      	ldr	r3, [pc, #36]	; (8b0c <k_sys_work_q_init+0x28>)
    8ae8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8aea:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8aec:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8aee:	9300      	str	r3, [sp, #0]
    8af0:	4907      	ldr	r1, [pc, #28]	; (8b10 <k_sys_work_q_init+0x2c>)
    8af2:	4808      	ldr	r0, [pc, #32]	; (8b14 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8af4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8b00:	f7ff fabe 	bl	8080 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8b04:	4620      	mov	r0, r4
    8b06:	b004      	add	sp, #16
    8b08:	bd10      	pop	{r4, pc}
    8b0a:	bf00      	nop
    8b0c:	0000b214 	.word	0x0000b214
    8b10:	20005150 	.word	0x20005150
    8b14:	200005d0 	.word	0x200005d0

00008b18 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8b18:	4770      	bx	lr

00008b1a <gpio_pin_get.constprop.0>:
 * @retval 1 If pin logical value is 1 / active.
 * @retval 0 If pin logical value is 0 / inactive.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
    8b1a:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
    8b1c:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    8b1e:	6883      	ldr	r3, [r0, #8]
    8b20:	a901      	add	r1, sp, #4
    8b22:	685b      	ldr	r3, [r3, #4]
    8b24:	4798      	blx	r3
	if (ret == 0) {
    8b26:	b920      	cbnz	r0, 8b32 <gpio_pin_get.constprop.0+0x18>
		*value ^= data->invert;
    8b28:	6823      	ldr	r3, [r4, #0]
    8b2a:	9801      	ldr	r0, [sp, #4]
    8b2c:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    8b2e:	f3c0 2080 	ubfx	r0, r0, #10, #1
	}

	return ret;
}
    8b32:	b002      	add	sp, #8
    8b34:	bd10      	pop	{r4, pc}

00008b36 <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
    8b36:	b510      	push	{r4, lr}
    8b38:	b086      	sub	sp, #24
	msg[1].len = num_read;
    8b3a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
    8b3e:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
    8b40:	2101      	movs	r1, #1
    8b42:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    8b44:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    8b46:	2100      	movs	r1, #0
    8b48:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    8b4c:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    8b50:	6883      	ldr	r3, [r0, #8]
    8b52:	2202      	movs	r2, #2
    8b54:	689c      	ldr	r4, [r3, #8]
    8b56:	4669      	mov	r1, sp
    8b58:	2357      	movs	r3, #87	; 0x57
    8b5a:	47a0      	blx	r4
}
    8b5c:	b006      	add	sp, #24
    8b5e:	bd10      	pop	{r4, pc}

00008b60 <i2c_reg_read_byte.constprop.0>:
 * @param value Memory pool that stores the retrieved register value.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_read_byte(const struct device *dev,
    8b60:	b507      	push	{r0, r1, r2, lr}
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
    8b62:	2301      	movs	r3, #1
static inline int i2c_reg_read_byte(const struct device *dev,
    8b64:	f88d 1007 	strb.w	r1, [sp, #7]
	return i2c_write_read(dev, dev_addr,
    8b68:	f10d 0107 	add.w	r1, sp, #7
    8b6c:	f7ff ffe3 	bl	8b36 <i2c_write_read.constprop.0>
			      &reg_addr, sizeof(reg_addr),
			      value, sizeof(*value));
}
    8b70:	b003      	add	sp, #12
    8b72:	f85d fb04 	ldr.w	pc, [sp], #4

00008b76 <i2c_reg_write_byte.constprop.0>:
 * @param value Value to be written to internal register.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(const struct device *dev,
    8b76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    8b78:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    8b7c:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    8b7e:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
    8b82:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    8b86:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    8b88:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    8b8c:	6883      	ldr	r3, [r0, #8]
    8b8e:	2201      	movs	r2, #1
    8b90:	689c      	ldr	r4, [r3, #8]
    8b92:	a901      	add	r1, sp, #4
    8b94:	2357      	movs	r3, #87	; 0x57
    8b96:	47a0      	blx	r4

	return i2c_write(dev, tx_buf, 2, dev_addr);
}
    8b98:	b004      	add	sp, #16
    8b9a:	bd10      	pop	{r4, pc}

00008b9c <maxim_max30102_init>:
{
    8b9c:	b510      	push	{r4, lr}
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_1, 0xc0)) // INTR setting
    8b9e:	22c0      	movs	r2, #192	; 0xc0
    8ba0:	2102      	movs	r1, #2
{
    8ba2:	4604      	mov	r4, r0
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_1, 0xc0)) // INTR setting
    8ba4:	f7ff ffe7 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8ba8:	4602      	mov	r2, r0
    8baa:	b108      	cbz	r0, 8bb0 <maxim_max30102_init+0x14>
        return false;
    8bac:	2000      	movs	r0, #0
}
    8bae:	bd10      	pop	{r4, pc}
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_2, 0x00))
    8bb0:	2103      	movs	r1, #3
    8bb2:	4620      	mov	r0, r4
    8bb4:	f7ff ffdf 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8bb8:	4602      	mov	r2, r0
    8bba:	2800      	cmp	r0, #0
    8bbc:	d1f6      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_FIFO_WR_PTR, 0x00))  //FIFO_WR_PTR[4:0]
    8bbe:	2104      	movs	r1, #4
    8bc0:	4620      	mov	r0, r4
    8bc2:	f7ff ffd8 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8bc6:	4602      	mov	r2, r0
    8bc8:	2800      	cmp	r0, #0
    8bca:	d1ef      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_OVF_COUNTER, 0x00))  //OVF_COUNTER[4:0]
    8bcc:	2105      	movs	r1, #5
    8bce:	4620      	mov	r0, r4
    8bd0:	f7ff ffd1 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8bd4:	4602      	mov	r2, r0
    8bd6:	2800      	cmp	r0, #0
    8bd8:	d1e8      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_FIFO_RD_PTR, 0x00))  //FIFO_RD_PTR[4:0]
    8bda:	2106      	movs	r1, #6
    8bdc:	4620      	mov	r0, r4
    8bde:	f7ff ffca 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8be2:	2800      	cmp	r0, #0
    8be4:	d1e2      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_FIFO_CONFIG, 0x0f))  //sample avg = 1, fifo rollover=false, fifo almost full = 17
    8be6:	220f      	movs	r2, #15
    8be8:	2108      	movs	r1, #8
    8bea:	4620      	mov	r0, r4
    8bec:	f7ff ffc3 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8bf0:	2800      	cmp	r0, #0
    8bf2:	d1db      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_MODE_CONFIG, 0x03))   //0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
    8bf4:	2203      	movs	r2, #3
    8bf6:	2109      	movs	r1, #9
    8bf8:	4620      	mov	r0, r4
    8bfa:	f7ff ffbc 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8bfe:	2800      	cmp	r0, #0
    8c00:	d1d4      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_SPO2_CONFIG, 0x27))  // SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
    8c02:	2227      	movs	r2, #39	; 0x27
    8c04:	210a      	movs	r1, #10
    8c06:	4620      	mov	r0, r4
    8c08:	f7ff ffb5 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8c0c:	2800      	cmp	r0, #0
    8c0e:	d1cd      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_LED1_PA, 0x24))   //Choose value for ~ 7mA for LED1
    8c10:	2224      	movs	r2, #36	; 0x24
    8c12:	210c      	movs	r1, #12
    8c14:	4620      	mov	r0, r4
    8c16:	f7ff ffae 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8c1a:	2800      	cmp	r0, #0
    8c1c:	d1c6      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_LED2_PA, 0x24))   // Choose value for ~ 7mA for LED2
    8c1e:	2224      	movs	r2, #36	; 0x24
    8c20:	210d      	movs	r1, #13
    8c22:	4620      	mov	r0, r4
    8c24:	f7ff ffa7 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8c28:	2800      	cmp	r0, #0
    8c2a:	d1bf      	bne.n	8bac <maxim_max30102_init+0x10>
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_PILOT_PA, 0x7f))   // Choose value for ~ 25mA for Pilot LED
    8c2c:	227f      	movs	r2, #127	; 0x7f
    8c2e:	2110      	movs	r1, #16
    8c30:	4620      	mov	r0, r4
    8c32:	f7ff ffa0 	bl	8b76 <i2c_reg_write_byte.constprop.0>
    8c36:	fab0 f080 	clz	r0, r0
    8c3a:	0940      	lsrs	r0, r0, #5
    8c3c:	e7b7      	b.n	8bae <maxim_max30102_init+0x12>

00008c3e <MAX30102_setup>:
void MAX30102_setup(const struct device* dev) {
    8c3e:	b513      	push	{r0, r1, r4, lr}
    8c40:	4604      	mov	r4, r0
    i2c_reg_read_byte(dev, MAX30102_ADDRESS, 0, &dummyVal);
    8c42:	f10d 0207 	add.w	r2, sp, #7
    8c46:	2100      	movs	r1, #0
    8c48:	f7ff ff8a 	bl	8b60 <i2c_reg_read_byte.constprop.0>
    maxim_max30102_init(dev);
    8c4c:	4620      	mov	r0, r4
    8c4e:	f7ff ffa5 	bl	8b9c <maxim_max30102_init>
}
    8c52:	b002      	add	sp, #8
    8c54:	bd10      	pop	{r4, pc}

00008c56 <reset>:

void reset(const struct device* dev) {
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_MODE_CONFIG, 0x40);
    8c56:	2240      	movs	r2, #64	; 0x40
    8c58:	2109      	movs	r1, #9
    8c5a:	f7ff bf8c 	b.w	8b76 <i2c_reg_write_byte.constprop.0>

00008c5e <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
    8c5e:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
    8c60:	2000      	movs	r0, #0
{
    8c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *pn_npks = 0;
    8c66:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
    8c68:	2401      	movs	r4, #1

    while (i < n_size - 1) {
    8c6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    8c6e:	45a0      	cmp	r8, r4
    8c70:	dc01      	bgt.n	8c76 <maxim_peaks_above_min_height+0x18>
                i += n_width;
        }
        else
            i++;
    }
}
    8c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1]) {            // find left edge of potential peaks
    8c76:	9d06      	ldr	r5, [sp, #24]
    8c78:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    8c7c:	42a8      	cmp	r0, r5
    8c7e:	ea4f 0684 	mov.w	r6, r4, lsl #2
    8c82:	f104 0501 	add.w	r5, r4, #1
    8c86:	dd1c      	ble.n	8cc2 <maxim_peaks_above_min_height+0x64>
    8c88:	4416      	add	r6, r2
    8c8a:	f856 6c04 	ldr.w	r6, [r6, #-4]
    8c8e:	42b0      	cmp	r0, r6
    8c90:	dd17      	ble.n	8cc2 <maxim_peaks_above_min_height+0x64>
    8c92:	462e      	mov	r6, r5
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width])    // find flat peaks
    8c94:	429e      	cmp	r6, r3
    8c96:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
    8c9a:	eba6 0e04 	sub.w	lr, r6, r4
    8c9e:	4635      	mov	r5, r6
    8ca0:	d003      	beq.n	8caa <maxim_peaks_above_min_height+0x4c>
    8ca2:	42b8      	cmp	r0, r7
    8ca4:	f106 0601 	add.w	r6, r6, #1
    8ca8:	d0f4      	beq.n	8c94 <maxim_peaks_above_min_height+0x36>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15) {                            // find right edge of peaks
    8caa:	42b8      	cmp	r0, r7
    8cac:	dd09      	ble.n	8cc2 <maxim_peaks_above_min_height+0x64>
    8cae:	6808      	ldr	r0, [r1, #0]
    8cb0:	280e      	cmp	r0, #14
    8cb2:	dc06      	bgt.n	8cc2 <maxim_peaks_above_min_height+0x64>
                pn_locs[(*pn_npks)++] = i;
    8cb4:	1c45      	adds	r5, r0, #1
    8cb6:	600d      	str	r5, [r1, #0]
                i += n_width + 1;
    8cb8:	f10e 0501 	add.w	r5, lr, #1
                pn_locs[(*pn_npks)++] = i;
    8cbc:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
                i += n_width + 1;
    8cc0:	4425      	add	r5, r4
{
    8cc2:	462c      	mov	r4, r5
    8cc4:	e7d3      	b.n	8c6e <maxim_peaks_above_min_height+0x10>

00008cc6 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
    8cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
    8cc8:	2301      	movs	r3, #1
    8cca:	4604      	mov	r4, r0
    8ccc:	428b      	cmp	r3, r1
    8cce:	db00      	blt.n	8cd2 <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
    8cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
    8cd2:	f854 6f04 	ldr.w	r6, [r4, #4]!
    8cd6:	461a      	mov	r2, r3
    8cd8:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
    8cda:	f855 7c04 	ldr.w	r7, [r5, #-4]
    8cde:	42b7      	cmp	r7, r6
    8ce0:	dd03      	ble.n	8cea <maxim_sort_ascend+0x24>
    8ce2:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
    8ce4:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
    8ce8:	d1f7      	bne.n	8cda <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
    8cea:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++) {
    8cee:	3301      	adds	r3, #1
    8cf0:	e7ec      	b.n	8ccc <maxim_sort_ascend+0x6>

00008cf2 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
    8cf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
    8cf6:	2301      	movs	r3, #1
    8cf8:	460d      	mov	r5, r1
    8cfa:	4293      	cmp	r3, r2
    8cfc:	db01      	blt.n	8d02 <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
    8cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
    8d02:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
    8d06:	461c      	mov	r4, r3
    8d08:	eb00 0986 	add.w	r9, r0, r6, lsl #2
    8d0c:	46ac      	mov	ip, r5
    8d0e:	f85c 7c04 	ldr.w	r7, [ip, #-4]
    8d12:	f8d9 e000 	ldr.w	lr, [r9]
    8d16:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
    8d1a:	45c6      	cmp	lr, r8
    8d1c:	dd03      	ble.n	8d26 <maxim_sort_indices_descend+0x34>
    8d1e:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
    8d20:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
    8d24:	d1f3      	bne.n	8d0e <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
    8d26:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++) {
    8d2a:	3301      	adds	r3, #1
    8d2c:	e7e5      	b.n	8cfa <maxim_sort_indices_descend+0x8>

00008d2e <maxim_remove_close_peaks>:
{
    8d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d30:	4604      	mov	r4, r0
    8d32:	461e      	mov	r6, r3
    8d34:	4610      	mov	r0, r2
    8d36:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
    8d38:	680a      	ldr	r2, [r1, #0]
    8d3a:	4621      	mov	r1, r4
    8d3c:	f7ff ffd9 	bl	8cf2 <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++) {
    8d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
    8d44:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++) {
    8d48:	6829      	ldr	r1, [r5, #0]
    8d4a:	4291      	cmp	r1, r2
    8d4c:	dc04      	bgt.n	8d58 <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
    8d4e:	4620      	mov	r0, r4
}
    8d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
    8d54:	f7ff bfb7 	b.w	8cc6 <maxim_sort_ascend>
        *pn_npks = i + 1;
    8d58:	1c57      	adds	r7, r2, #1
    8d5a:	4638      	mov	r0, r7
    8d5c:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++) {
    8d5e:	4281      	cmp	r1, r0
    8d60:	d101      	bne.n	8d66 <maxim_remove_close_peaks+0x38>
    8d62:	463a      	mov	r2, r7
    8d64:	e7f0      	b.n	8d48 <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
    8d66:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    8d6a:	bf18      	it	ne
    8d6c:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
    8d70:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
    8d74:	bf08      	it	eq
    8d76:	4694      	moveq	ip, r2
    8d78:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
    8d7c:	42b3      	cmp	r3, r6
    8d7e:	dc01      	bgt.n	8d84 <maxim_remove_close_peaks+0x56>
    8d80:	459e      	cmp	lr, r3
    8d82:	dd08      	ble.n	8d96 <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
    8d84:	f8d5 c000 	ldr.w	ip, [r5]
    8d88:	f10c 0301 	add.w	r3, ip, #1
    8d8c:	602b      	str	r3, [r5, #0]
    8d8e:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
    8d92:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++) {
    8d96:	3001      	adds	r0, #1
    8d98:	e7e1      	b.n	8d5e <maxim_remove_close_peaks+0x30>

00008d9a <maxim_find_peaks>:
{
    8d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
    8d9c:	9e06      	ldr	r6, [sp, #24]
    8d9e:	9600      	str	r6, [sp, #0]
{
    8da0:	4605      	mov	r5, r0
    8da2:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
    8da4:	f7ff ff5b 	bl	8c5e <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
    8da8:	9b07      	ldr	r3, [sp, #28]
    8daa:	4628      	mov	r0, r5
    8dac:	f7ff ffbf 	bl	8d2e <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
    8db0:	6822      	ldr	r2, [r4, #0]
    8db2:	9b08      	ldr	r3, [sp, #32]
    8db4:	429a      	cmp	r2, r3
    8db6:	bfd4      	ite	le
    8db8:	6022      	strle	r2, [r4, #0]
    8dba:	6023      	strgt	r3, [r4, #0]
}
    8dbc:	b002      	add	sp, #8
    8dbe:	bd70      	pop	{r4, r5, r6, pc}

00008dc0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    8dc0:	4603      	mov	r3, r0
    8dc2:	b158      	cbz	r0, 8ddc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8dc4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8dc6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    8dca:	2a01      	cmp	r2, #1
    8dcc:	d003      	beq.n	8dd6 <sys_notify_validate+0x16>
    8dce:	2a03      	cmp	r2, #3
    8dd0:	d104      	bne.n	8ddc <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    8dd2:	6802      	ldr	r2, [r0, #0]
    8dd4:	b112      	cbz	r2, 8ddc <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    8dd6:	2000      	movs	r0, #0
    8dd8:	6098      	str	r0, [r3, #8]
    8dda:	4770      	bx	lr
		return -EINVAL;
    8ddc:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    8de0:	4770      	bx	lr

00008de2 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8de2:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    8de4:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    8de6:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    8dea:	2a03      	cmp	r2, #3
    8dec:	f04f 0200 	mov.w	r2, #0
{
    8df0:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    8df2:	bf0c      	ite	eq
    8df4:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    8df6:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8df8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8dfa:	4770      	bx	lr

00008dfc <arch_printk_char_out>:
}
    8dfc:	2000      	movs	r0, #0
    8dfe:	4770      	bx	lr

00008e00 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8e00:	b40f      	push	{r0, r1, r2, r3}
    8e02:	b507      	push	{r0, r1, r2, lr}
    8e04:	a904      	add	r1, sp, #16
    8e06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8e0a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8e0c:	f7f8 fa78 	bl	1300 <vprintk>

	va_end(ap);
}
    8e10:	b003      	add	sp, #12
    8e12:	f85d eb04 	ldr.w	lr, [sp], #4
    8e16:	b004      	add	sp, #16
    8e18:	4770      	bx	lr

00008e1a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e1a:	b510      	push	{r4, lr}
    8e1c:	4603      	mov	r3, r0
	return list->head;
    8e1e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e20:	2200      	movs	r2, #0
    8e22:	b158      	cbz	r0, 8e3c <sys_slist_find_and_remove+0x22>
    8e24:	4288      	cmp	r0, r1
    8e26:	d10f      	bne.n	8e48 <sys_slist_find_and_remove+0x2e>
	return node->next;
    8e28:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    8e2a:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    8e2c:	b93a      	cbnz	r2, 8e3e <sys_slist_find_and_remove+0x24>
    8e2e:	42a1      	cmp	r1, r4
	list->head = node;
    8e30:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    8e32:	d100      	bne.n	8e36 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    8e34:	6058      	str	r0, [r3, #4]
	parent->next = child;
    8e36:	2300      	movs	r3, #0
    8e38:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e3a:	2001      	movs	r0, #1
    8e3c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    8e3e:	42a1      	cmp	r1, r4
	parent->next = child;
    8e40:	6010      	str	r0, [r2, #0]
	list->tail = node;
    8e42:	bf08      	it	eq
    8e44:	605a      	streq	r2, [r3, #4]
}
    8e46:	e7f6      	b.n	8e36 <sys_slist_find_and_remove+0x1c>
	return node->next;
    8e48:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e4a:	6800      	ldr	r0, [r0, #0]
    8e4c:	e7e9      	b.n	8e22 <sys_slist_find_and_remove+0x8>

00008e4e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8e4e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    8e50:	f013 0307 	ands.w	r3, r3, #7
    8e54:	d105      	bne.n	8e62 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8e56:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8e58:	2b00      	cmp	r3, #0
    8e5a:	bf0c      	ite	eq
    8e5c:	2000      	moveq	r0, #0
    8e5e:	2003      	movne	r0, #3
    8e60:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8e62:	2b02      	cmp	r3, #2
    8e64:	d105      	bne.n	8e72 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8e66:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    8e68:	2b00      	cmp	r3, #0
    8e6a:	bf14      	ite	ne
    8e6c:	2000      	movne	r0, #0
    8e6e:	2004      	moveq	r0, #4
    8e70:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8e72:	2b01      	cmp	r3, #1
    8e74:	d105      	bne.n	8e82 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8e76:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8e78:	2b00      	cmp	r3, #0
    8e7a:	bf0c      	ite	eq
    8e7c:	2000      	moveq	r0, #0
    8e7e:	2005      	movne	r0, #5
    8e80:	4770      	bx	lr
	int evt = EVT_NOP;
    8e82:	2000      	movs	r0, #0
}
    8e84:	4770      	bx	lr

00008e86 <notify_one>:
{
    8e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e8a:	460d      	mov	r5, r1
    8e8c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8e8e:	4619      	mov	r1, r3
    8e90:	1d28      	adds	r0, r5, #4
{
    8e92:	4690      	mov	r8, r2
    8e94:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8e96:	f7ff ffa4 	bl	8de2 <sys_notify_finalize>
	if (cb) {
    8e9a:	4604      	mov	r4, r0
    8e9c:	b138      	cbz	r0, 8eae <notify_one+0x28>
		cb(mgr, cli, state, res);
    8e9e:	4633      	mov	r3, r6
    8ea0:	4642      	mov	r2, r8
    8ea2:	4629      	mov	r1, r5
    8ea4:	4638      	mov	r0, r7
    8ea6:	46a4      	mov	ip, r4
}
    8ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8eac:	4760      	bx	ip
}
    8eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008eb2 <transition_complete>:
{
    8eb2:	b410      	push	{r4}
	__asm__ volatile(
    8eb4:	f04f 0420 	mov.w	r4, #32
    8eb8:	f3ef 8211 	mrs	r2, BASEPRI
    8ebc:	f384 8812 	msr	BASEPRI_MAX, r4
    8ec0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    8ec4:	6141      	str	r1, [r0, #20]
}
    8ec6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    8ec8:	2101      	movs	r1, #1
    8eca:	f7f8 ba27 	b.w	131c <process_event>

00008ece <validate_args>:
{
    8ece:	b510      	push	{r4, lr}
    8ed0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8ed2:	b140      	cbz	r0, 8ee6 <validate_args+0x18>
    8ed4:	b139      	cbz	r1, 8ee6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8ed6:	1d08      	adds	r0, r1, #4
    8ed8:	f7ff ff72 	bl	8dc0 <sys_notify_validate>
	if ((rv == 0)
    8edc:	b928      	cbnz	r0, 8eea <validate_args+0x1c>
	    && ((cli->notify.flags
    8ede:	68a3      	ldr	r3, [r4, #8]
    8ee0:	f033 0303 	bics.w	r3, r3, #3
    8ee4:	d001      	beq.n	8eea <validate_args+0x1c>
		rv = -EINVAL;
    8ee6:	f06f 0015 	mvn.w	r0, #21
}
    8eea:	bd10      	pop	{r4, pc}

00008eec <onoff_manager_init>:
{
    8eec:	b538      	push	{r3, r4, r5, lr}
    8eee:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8ef0:	4605      	mov	r5, r0
    8ef2:	b158      	cbz	r0, 8f0c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8ef4:	b151      	cbz	r1, 8f0c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8ef6:	680b      	ldr	r3, [r1, #0]
    8ef8:	b143      	cbz	r3, 8f0c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8efa:	684b      	ldr	r3, [r1, #4]
    8efc:	b133      	cbz	r3, 8f0c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8efe:	221c      	movs	r2, #28
    8f00:	2100      	movs	r1, #0
    8f02:	f001 fd94 	bl	aa2e <memset>
    8f06:	612c      	str	r4, [r5, #16]
	return 0;
    8f08:	2000      	movs	r0, #0
}
    8f0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8f0c:	f06f 0015 	mvn.w	r0, #21
    8f10:	e7fb      	b.n	8f0a <onoff_manager_init+0x1e>

00008f12 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8f12:	b570      	push	{r4, r5, r6, lr}
    8f14:	4604      	mov	r4, r0
    8f16:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8f18:	f7ff ffd9 	bl	8ece <validate_args>

	if (rv < 0) {
    8f1c:	1e05      	subs	r5, r0, #0
    8f1e:	db31      	blt.n	8f84 <onoff_request+0x72>
    8f20:	f04f 0320 	mov.w	r3, #32
    8f24:	f3ef 8111 	mrs	r1, BASEPRI
    8f28:	f383 8812 	msr	BASEPRI_MAX, r3
    8f2c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    8f30:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8f32:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    8f34:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8f38:	42ab      	cmp	r3, r5
    8f3a:	f000 0207 	and.w	r2, r0, #7
    8f3e:	d02e      	beq.n	8f9e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    8f40:	2a02      	cmp	r2, #2
    8f42:	d10e      	bne.n	8f62 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    8f44:	3301      	adds	r3, #1
    8f46:	8363      	strh	r3, [r4, #26]
	rv = state;
    8f48:	4615      	mov	r5, r2
		notify = true;
    8f4a:	2301      	movs	r3, #1
	__asm__ volatile(
    8f4c:	f381 8811 	msr	BASEPRI, r1
    8f50:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    8f54:	b1b3      	cbz	r3, 8f84 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    8f56:	2300      	movs	r3, #0
    8f58:	4631      	mov	r1, r6
    8f5a:	4620      	mov	r0, r4
    8f5c:	f7ff ff93 	bl	8e86 <notify_one>
    8f60:	e010      	b.n	8f84 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    8f62:	0783      	lsls	r3, r0, #30
    8f64:	d001      	beq.n	8f6a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    8f66:	2a06      	cmp	r2, #6
    8f68:	d10e      	bne.n	8f88 <onoff_request+0x76>
	parent->next = child;
    8f6a:	2300      	movs	r3, #0
    8f6c:	6033      	str	r3, [r6, #0]
	return list->tail;
    8f6e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    8f70:	b993      	cbnz	r3, 8f98 <onoff_request+0x86>
	list->head = node;
    8f72:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    8f76:	4615      	mov	r5, r2
    8f78:	b962      	cbnz	r2, 8f94 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    8f7a:	460a      	mov	r2, r1
    8f7c:	4620      	mov	r0, r4
    8f7e:	2102      	movs	r1, #2
    8f80:	f7f8 f9cc 	bl	131c <process_event>
		}
	}

	return rv;
}
    8f84:	4628      	mov	r0, r5
    8f86:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    8f88:	2a05      	cmp	r2, #5
    8f8a:	bf0c      	ite	eq
    8f8c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    8f90:	f06f 0504 	mvnne.w	r5, #4
    8f94:	2300      	movs	r3, #0
    8f96:	e7d9      	b.n	8f4c <onoff_request+0x3a>
	parent->next = child;
    8f98:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8f9a:	6066      	str	r6, [r4, #4]
}
    8f9c:	e7eb      	b.n	8f76 <onoff_request+0x64>
		rv = -EAGAIN;
    8f9e:	f06f 050a 	mvn.w	r5, #10
    8fa2:	e7f7      	b.n	8f94 <onoff_request+0x82>

00008fa4 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    8fa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    8fa6:	f04f 0320 	mov.w	r3, #32
    8faa:	f3ef 8211 	mrs	r2, BASEPRI
    8fae:	f383 8812 	msr	BASEPRI_MAX, r3
    8fb2:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8fb6:	8b04      	ldrh	r4, [r0, #24]
    8fb8:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    8fbc:	2c02      	cmp	r4, #2
    8fbe:	d00a      	beq.n	8fd6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    8fc0:	2c01      	cmp	r4, #1
    8fc2:	bf0c      	ite	eq
    8fc4:	f06f 0004 	mvneq.w	r0, #4
    8fc8:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    8fcc:	f382 8811 	msr	BASEPRI, r2
    8fd0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    8fd4:	e008      	b.n	8fe8 <onoff_release+0x44>
	mgr->refs -= 1U;
    8fd6:	8b43      	ldrh	r3, [r0, #26]
    8fd8:	3b01      	subs	r3, #1
    8fda:	b29b      	uxth	r3, r3
    8fdc:	8343      	strh	r3, [r0, #26]
	if (stop) {
    8fde:	b923      	cbnz	r3, 8fea <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    8fe0:	4621      	mov	r1, r4
    8fe2:	f7f8 f99b 	bl	131c <process_event>
	int rv = state;
    8fe6:	4620      	mov	r0, r4
}
    8fe8:	bd10      	pop	{r4, pc}
	int rv = state;
    8fea:	4620      	mov	r0, r4
    8fec:	e7ee      	b.n	8fcc <onoff_release+0x28>

00008fee <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    8fee:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    8ff0:	b1b0      	cbz	r0, 9020 <onoff_cancel+0x32>
    8ff2:	b1a9      	cbz	r1, 9020 <onoff_cancel+0x32>
	__asm__ volatile(
    8ff4:	f04f 0220 	mov.w	r2, #32
    8ff8:	f3ef 8511 	mrs	r5, BASEPRI
    8ffc:	f382 8812 	msr	BASEPRI_MAX, r2
    9000:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9004:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    9006:	f7ff ff08 	bl	8e1a <sys_slist_find_and_remove>
    900a:	b130      	cbz	r0, 901a <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    900c:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    9010:	f385 8811 	msr	BASEPRI, r5
    9014:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9018:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    901a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    901e:	e7f7      	b.n	9010 <onoff_cancel+0x22>
		return -EINVAL;
    9020:	f06f 0015 	mvn.w	r0, #21
    9024:	e7f8      	b.n	9018 <onoff_cancel+0x2a>

00009026 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9026:	4604      	mov	r4, r0
    9028:	b508      	push	{r3, lr}
    902a:	4608      	mov	r0, r1
    902c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    902e:	461a      	mov	r2, r3
    9030:	47a0      	blx	r4
	return z_impl_z_current_get();
    9032:	f7ff fb4d 	bl	86d0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9036:	f7fa fd79 	bl	3b2c <z_impl_k_thread_abort>

0000903a <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    903a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    903e:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    9040:	0840      	lsrs	r0, r0, #1
    9042:	4770      	bx	lr

00009044 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    9044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9046:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    9048:	f7ff fff7 	bl	903a <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    904c:	fab0 f080 	clz	r0, r0
    9050:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    9054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9058:	00ca      	lsls	r2, r1, #3
    905a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    905e:	1d17      	adds	r7, r2, #4
{
    9060:	460c      	mov	r4, r1
    9062:	3206      	adds	r2, #6
    9064:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    9066:	b956      	cbnz	r6, 907e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    9068:	2101      	movs	r1, #1
    906a:	fa01 f000 	lsl.w	r0, r1, r0
    906e:	68d9      	ldr	r1, [r3, #12]
    9070:	4301      	orrs	r1, r0
    9072:	60d9      	str	r1, [r3, #12]
		b->next = c;
    9074:	f8cc 4010 	str.w	r4, [ip, #16]
    9078:	53dd      	strh	r5, [r3, r7]
    907a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    907e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    9080:	3104      	adds	r1, #4
    9082:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9084:	53d8      	strh	r0, [r3, r7]
    9086:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    908a:	529e      	strh	r6, [r3, r2]
    908c:	80c5      	strh	r5, [r0, #6]
    908e:	525d      	strh	r5, [r3, r1]
    9090:	e7f4      	b.n	907c <free_list_add+0x38>

00009092 <free_list_remove_bidx>:
{
    9092:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    9094:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    9098:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    909a:	4299      	cmp	r1, r3
    909c:	f102 0104 	add.w	r1, r2, #4
    90a0:	d10a      	bne.n	90b8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    90a2:	2301      	movs	r3, #1
    90a4:	fa03 f202 	lsl.w	r2, r3, r2
    90a8:	68c3      	ldr	r3, [r0, #12]
    90aa:	ea23 0302 	bic.w	r3, r3, r2
    90ae:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    90b0:	2300      	movs	r3, #0
    90b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    90b6:	bd10      	pop	{r4, pc}
    90b8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    90ba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    90be:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    90c2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    90c6:	80cb      	strh	r3, [r1, #6]
    90c8:	8082      	strh	r2, [r0, #4]
}
    90ca:	e7f4      	b.n	90b6 <free_list_remove_bidx+0x24>

000090cc <free_list_remove>:
{
    90cc:	b508      	push	{r3, lr}
    90ce:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    90d0:	f7ff ffb3 	bl	903a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    90d4:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    90d8:	f1c2 021f 	rsb	r2, r2, #31
    90dc:	4618      	mov	r0, r3
}
    90de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    90e2:	f7ff bfd6 	b.w	9092 <free_list_remove_bidx>

000090e6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    90e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    90ea:	fab1 f581 	clz	r5, r1
    90ee:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    90f2:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    90f6:	4603      	mov	r3, r0
	if (b->next) {
    90f8:	693a      	ldr	r2, [r7, #16]
{
    90fa:	460e      	mov	r6, r1
	if (b->next) {
    90fc:	b1c2      	cbz	r2, 9130 <alloc_chunk+0x4a>
    90fe:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    9102:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    9104:	4618      	mov	r0, r3
    9106:	4621      	mov	r1, r4
    9108:	f7ff ff97 	bl	903a <chunk_size>
    910c:	42b0      	cmp	r0, r6
    910e:	d306      	bcc.n	911e <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    9110:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    9112:	4618      	mov	r0, r3
    9114:	f7ff ffbd 	bl	9092 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    9118:	4620      	mov	r0, r4
    911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    911e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    9122:	f1b8 0801 	subs.w	r8, r8, #1
    9126:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    9128:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    912a:	d001      	beq.n	9130 <alloc_chunk+0x4a>
    912c:	4282      	cmp	r2, r0
    912e:	d1e8      	bne.n	9102 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    9130:	f1c5 0220 	rsb	r2, r5, #32
    9134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    9138:	4094      	lsls	r4, r2
    913a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    913c:	4014      	ands	r4, r2
    913e:	d0eb      	beq.n	9118 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    9140:	fa94 f2a4 	rbit	r2, r4
    9144:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9148:	1d11      	adds	r1, r2, #4
    914a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    914e:	4621      	mov	r1, r4
    9150:	e7df      	b.n	9112 <alloc_chunk+0x2c>

00009152 <merge_chunks>:
{
    9152:	b538      	push	{r3, r4, r5, lr}
    9154:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9156:	f7ff ff70 	bl	903a <chunk_size>
{
    915a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    915c:	4604      	mov	r4, r0
    915e:	4611      	mov	r1, r2
    9160:	4618      	mov	r0, r3
    9162:	f7ff ff6a 	bl	903a <chunk_size>
		((uint16_t *)cmem)[f] = val;
    9166:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    916a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    916c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    916e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    9170:	4618      	mov	r0, r3
    9172:	f7ff ff62 	bl	903a <chunk_size>
	void *cmem = &buf[c];
    9176:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    9178:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    917c:	bd38      	pop	{r3, r4, r5, pc}

0000917e <split_chunks>:
{
    917e:	b538      	push	{r3, r4, r5, lr}
    9180:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    9182:	f7ff ff5a 	bl	903a <chunk_size>
{
    9186:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    9188:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    918a:	1a51      	subs	r1, r2, r1
    918c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    9190:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9192:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    9194:	8060      	strh	r0, [r4, #2]
    9196:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    919a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    919c:	8044      	strh	r4, [r0, #2]
    919e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    91a2:	4618      	mov	r0, r3
    91a4:	4611      	mov	r1, r2
    91a6:	f7ff ff48 	bl	903a <chunk_size>
	void *cmem = &buf[c];
    91aa:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    91ac:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    91b0:	bd38      	pop	{r3, r4, r5, pc}

000091b2 <free_chunk>:
{
    91b2:	b538      	push	{r3, r4, r5, lr}
    91b4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    91b6:	f7ff ff40 	bl	903a <chunk_size>
    91ba:	460c      	mov	r4, r1
    91bc:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    91be:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    91c2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    91c4:	07da      	lsls	r2, r3, #31
    91c6:	d40a      	bmi.n	91de <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    91c8:	4628      	mov	r0, r5
    91ca:	f7ff ff7f 	bl	90cc <free_list_remove>
	return c + chunk_size(h, c);
    91ce:	4621      	mov	r1, r4
    91d0:	4628      	mov	r0, r5
    91d2:	f7ff ff32 	bl	903a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    91d6:	1822      	adds	r2, r4, r0
    91d8:	4628      	mov	r0, r5
    91da:	f7ff ffba 	bl	9152 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    91de:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    91e2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    91e4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    91e8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    91ea:	07db      	lsls	r3, r3, #31
    91ec:	d40c      	bmi.n	9208 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    91ee:	4628      	mov	r0, r5
    91f0:	f7ff ff6c 	bl	90cc <free_list_remove>
		return ((uint16_t *)cmem)[f];
    91f4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    91f8:	4622      	mov	r2, r4
    91fa:	1a61      	subs	r1, r4, r1
    91fc:	4628      	mov	r0, r5
    91fe:	f7ff ffa8 	bl	9152 <merge_chunks>
    9202:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9206:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    9208:	4621      	mov	r1, r4
    920a:	4628      	mov	r0, r5
}
    920c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    9210:	f7ff bf18 	b.w	9044 <free_list_add>

00009214 <sys_heap_free>:
	if (mem == NULL) {
    9214:	b161      	cbz	r1, 9230 <sys_heap_free+0x1c>
    9216:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9218:	3904      	subs	r1, #4
    921a:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    921c:	f021 0307 	bic.w	r3, r1, #7
    9220:	4403      	add	r3, r0
	free_chunk(h, c);
    9222:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9224:	885a      	ldrh	r2, [r3, #2]
    9226:	f022 0201 	bic.w	r2, r2, #1
    922a:	805a      	strh	r2, [r3, #2]
    922c:	f7ff bfc1 	b.w	91b2 <free_chunk>
}
    9230:	4770      	bx	lr

00009232 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    9232:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    9234:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    9236:	b909      	cbnz	r1, 923c <sys_heap_alloc+0xa>
		return NULL;
    9238:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    923a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    923c:	68ab      	ldr	r3, [r5, #8]
    923e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    9242:	d9f9      	bls.n	9238 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9244:	310b      	adds	r1, #11
    9246:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9248:	4621      	mov	r1, r4
    924a:	4628      	mov	r0, r5
    924c:	f7ff ff4b 	bl	90e6 <alloc_chunk>
	if (c == 0U) {
    9250:	4606      	mov	r6, r0
    9252:	2800      	cmp	r0, #0
    9254:	d0f0      	beq.n	9238 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    9256:	4601      	mov	r1, r0
    9258:	4628      	mov	r0, r5
    925a:	f7ff feee 	bl	903a <chunk_size>
    925e:	42a0      	cmp	r0, r4
    9260:	d907      	bls.n	9272 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    9262:	1932      	adds	r2, r6, r4
    9264:	4628      	mov	r0, r5
    9266:	f7ff ff8a 	bl	917e <split_chunks>
		free_list_add(h, c + chunk_sz);
    926a:	4611      	mov	r1, r2
    926c:	4628      	mov	r0, r5
    926e:	f7ff fee9 	bl	9044 <free_list_add>
	void *cmem = &buf[c];
    9272:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    9276:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9278:	8853      	ldrh	r3, [r2, #2]
    927a:	f043 0301 	orr.w	r3, r3, #1
    927e:	8053      	strh	r3, [r2, #2]
    9280:	3004      	adds	r0, #4
	return mem;
    9282:	e7da      	b.n	923a <sys_heap_alloc+0x8>

00009284 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9288:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    928a:	424a      	negs	r2, r1
    928c:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    9290:	ea31 0202 	bics.w	r2, r1, r2
{
    9294:	4603      	mov	r3, r0
	if (align != rew) {
    9296:	d00a      	beq.n	92ae <sys_heap_aligned_alloc+0x2a>
		return false;
    9298:	2f04      	cmp	r7, #4
    929a:	463a      	mov	r2, r7
    929c:	46b9      	mov	r9, r7
    929e:	bf28      	it	cs
    92a0:	2204      	movcs	r2, #4
		align -= rew;
    92a2:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    92a4:	b974      	cbnz	r4, 92c4 <sys_heap_aligned_alloc+0x40>
		return NULL;
    92a6:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    92a8:	4628      	mov	r0, r5
    92aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    92ae:	2904      	cmp	r1, #4
    92b0:	d804      	bhi.n	92bc <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    92b2:	4621      	mov	r1, r4
}
    92b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    92b8:	f7ff bfbb 	b.w	9232 <sys_heap_alloc>
		rew = 0;
    92bc:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    92c0:	2204      	movs	r2, #4
    92c2:	e7ef      	b.n	92a4 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    92c4:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    92c6:	68b3      	ldr	r3, [r6, #8]
    92c8:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    92cc:	d9eb      	bls.n	92a6 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    92ce:	f104 010b 	add.w	r1, r4, #11
    92d2:	4439      	add	r1, r7
    92d4:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    92d6:	08c9      	lsrs	r1, r1, #3
    92d8:	4630      	mov	r0, r6
    92da:	f7ff ff04 	bl	90e6 <alloc_chunk>
	if (c0 == 0) {
    92de:	4680      	mov	r8, r0
    92e0:	2800      	cmp	r0, #0
    92e2:	d0e0      	beq.n	92a6 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    92e4:	f109 0504 	add.w	r5, r9, #4
    92e8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    92ec:	1e7b      	subs	r3, r7, #1
    92ee:	4435      	add	r5, r6
    92f0:	441d      	add	r5, r3
    92f2:	427f      	negs	r7, r7
    92f4:	403d      	ands	r5, r7
    92f6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    92fa:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    92fc:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    92fe:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9300:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9302:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9306:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9308:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    930c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9310:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9314:	d208      	bcs.n	9328 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    9316:	4601      	mov	r1, r0
    9318:	463a      	mov	r2, r7
    931a:	4630      	mov	r0, r6
    931c:	f7ff ff2f 	bl	917e <split_chunks>
		free_list_add(h, c0);
    9320:	4641      	mov	r1, r8
    9322:	4630      	mov	r0, r6
    9324:	f7ff fe8e 	bl	9044 <free_list_add>
	return c + chunk_size(h, c);
    9328:	4639      	mov	r1, r7
    932a:	4630      	mov	r0, r6
    932c:	f7ff fe85 	bl	903a <chunk_size>
    9330:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9332:	4284      	cmp	r4, r0
    9334:	d207      	bcs.n	9346 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    9336:	4630      	mov	r0, r6
    9338:	4622      	mov	r2, r4
    933a:	f7ff ff20 	bl	917e <split_chunks>
		free_list_add(h, c_end);
    933e:	4621      	mov	r1, r4
    9340:	4630      	mov	r0, r6
    9342:	f7ff fe7f 	bl	9044 <free_list_add>
	void *cmem = &buf[c];
    9346:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    934a:	8873      	ldrh	r3, [r6, #2]
    934c:	f043 0301 	orr.w	r3, r3, #1
    9350:	8073      	strh	r3, [r6, #2]
    9352:	e7a9      	b.n	92a8 <sys_heap_aligned_alloc+0x24>

00009354 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    9354:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9356:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9358:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    935a:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    935e:	f021 0107 	bic.w	r1, r1, #7
{
    9362:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9364:	1acd      	subs	r5, r1, r3
    9366:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    9368:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    936a:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    936e:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    9372:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9374:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    9376:	2600      	movs	r6, #0
    9378:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    937a:	f1c0 0020 	rsb	r0, r0, #32
    937e:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    9382:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    9384:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    9386:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    938a:	4284      	cmp	r4, r0
    938c:	d118      	bne.n	93c0 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    938e:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9390:	f040 0001 	orr.w	r0, r0, #1
    9394:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    9396:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    939a:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    939c:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    939e:	801e      	strh	r6, [r3, #0]
    93a0:	8067      	strh	r7, [r4, #2]
    93a2:	195c      	adds	r4, r3, r5
    93a4:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    93a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    93ac:	8066      	strh	r6, [r4, #2]
    93ae:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    93b0:	8850      	ldrh	r0, [r2, #2]
    93b2:	f040 0001 	orr.w	r0, r0, #1
    93b6:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    93b8:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    93ba:	4618      	mov	r0, r3
    93bc:	f7ff be42 	b.w	9044 <free_list_add>
		h->buckets[i].next = 0;
    93c0:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    93c4:	e7e1      	b.n	938a <sys_heap_init+0x36>

000093c6 <_ldiv5>:
	uint32_t v_lo = *v;
    93c6:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    93ca:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    93cc:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    93d0:	fba2 2403 	umull	r2, r4, r2, r3
    93d4:	18d5      	adds	r5, r2, r3
    93d6:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    93da:	fba1 1303 	umull	r1, r3, r1, r3
    93de:	1852      	adds	r2, r2, r1
    93e0:	eb44 0403 	adc.w	r4, r4, r3
    93e4:	1952      	adds	r2, r2, r5
    93e6:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    93ea:	1889      	adds	r1, r1, r2
    93ec:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    93f0:	e9c0 1300 	strd	r1, r3, [r0]
}
    93f4:	bd30      	pop	{r4, r5, pc}

000093f6 <_get_digit>:
	if (*digit_count > 0) {
    93f6:	680a      	ldr	r2, [r1, #0]
    93f8:	2a00      	cmp	r2, #0
{
    93fa:	b510      	push	{r4, lr}
    93fc:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    93fe:	dd0f      	ble.n	9420 <_get_digit+0x2a>
		--*digit_count;
    9400:	3a01      	subs	r2, #1
    9402:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    9404:	681a      	ldr	r2, [r3, #0]
    9406:	6844      	ldr	r4, [r0, #4]
    9408:	200a      	movs	r0, #10
    940a:	fba2 1200 	umull	r1, r2, r2, r0
    940e:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    9412:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    9414:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    9418:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    941c:	3030      	adds	r0, #48	; 0x30
}
    941e:	bd10      	pop	{r4, pc}
		rval = '0';
    9420:	2030      	movs	r0, #48	; 0x30
    9422:	e7fc      	b.n	941e <_get_digit+0x28>

00009424 <outs>:
{
    9424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9428:	4607      	mov	r7, r0
    942a:	4688      	mov	r8, r1
    942c:	4615      	mov	r5, r2
    942e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9430:	4614      	mov	r4, r2
    9432:	42b4      	cmp	r4, r6
    9434:	eba4 0005 	sub.w	r0, r4, r5
    9438:	d302      	bcc.n	9440 <outs+0x1c>
    943a:	b93e      	cbnz	r6, 944c <outs+0x28>
    943c:	7823      	ldrb	r3, [r4, #0]
    943e:	b12b      	cbz	r3, 944c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    9440:	f814 0b01 	ldrb.w	r0, [r4], #1
    9444:	4641      	mov	r1, r8
    9446:	47b8      	blx	r7
		if (rc < 0) {
    9448:	2800      	cmp	r0, #0
    944a:	daf2      	bge.n	9432 <outs+0xe>
}
    944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009450 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    9450:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    9454:	4770      	bx	lr

00009456 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    9456:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    9458:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    945c:	42ac      	cmp	r4, r5
    945e:	d207      	bcs.n	9470 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
    9460:	6906      	ldr	r6, [r0, #16]
    9462:	f7ff fff5 	bl	9450 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    9466:	fbb0 f0f6 	udiv	r0, r0, r6
    946a:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
    946c:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    9470:	1b63      	subs	r3, r4, r5
    9472:	4258      	negs	r0, r3
    9474:	4158      	adcs	r0, r3
    9476:	bd70      	pop	{r4, r5, r6, pc}

00009478 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    947c:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    947e:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    9482:	454c      	cmp	r4, r9
{
    9484:	4605      	mov	r5, r0
    9486:	460e      	mov	r6, r1
    9488:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    948a:	d907      	bls.n	949c <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    948c:	6907      	ldr	r7, [r0, #16]
    948e:	f7ff ffdf 	bl	9450 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    9492:	fbb0 f0f7 	udiv	r0, r0, r7
    9496:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    9498:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    949c:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    949e:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    94a0:	692f      	ldr	r7, [r5, #16]
    94a2:	b18b      	cbz	r3, 94c8 <ring_buf_put_claim+0x50>
    94a4:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    94a6:	443c      	add	r4, r7
    94a8:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    94ac:	4540      	cmp	r0, r8
    94ae:	bf28      	it	cs
    94b0:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    94b2:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    94b4:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    94b6:	42b8      	cmp	r0, r7
    94b8:	bf28      	it	cs
    94ba:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    94bc:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    94be:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    94c0:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    94c2:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    94c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    94c8:	fbb1 f3f7 	udiv	r3, r1, r7
    94cc:	fb07 1313 	mls	r3, r7, r3, r1
    94d0:	e7e9      	b.n	94a6 <ring_buf_put_claim+0x2e>

000094d2 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    94d2:	b570      	push	{r4, r5, r6, lr}
    94d4:	4605      	mov	r5, r0
    94d6:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    94d8:	f7ff ffba 	bl	9450 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    94dc:	686e      	ldr	r6, [r5, #4]
    94de:	692a      	ldr	r2, [r5, #16]
    94e0:	682b      	ldr	r3, [r5, #0]
    94e2:	1931      	adds	r1, r6, r4
    94e4:	4413      	add	r3, r2
    94e6:	4299      	cmp	r1, r3
    94e8:	d80c      	bhi.n	9504 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    94ea:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    94ec:	bf83      	ittte	hi
    94ee:	fbb0 f3f2 	udivhi	r3, r0, r2
    94f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    94f6:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    94f8:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    94fa:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    94fc:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    9500:	2000      	movs	r0, #0
}
    9502:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    9504:	f06f 0015 	mvn.w	r0, #21
    9508:	e7fb      	b.n	9502 <ring_buf_put_finish+0x30>

0000950a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    950a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    950e:	4680      	mov	r8, r0
    9510:	460e      	mov	r6, r1
    9512:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    9514:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    9516:	462a      	mov	r2, r5
    9518:	a901      	add	r1, sp, #4
    951a:	4640      	mov	r0, r8
    951c:	f7ff ffac 	bl	9478 <ring_buf_put_claim>
    9520:	4631      	mov	r1, r6
    9522:	4604      	mov	r4, r0
    9524:	4602      	mov	r2, r0
    9526:	9801      	ldr	r0, [sp, #4]
    9528:	f001 fa60 	bl	a9ec <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    952c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    952e:	4427      	add	r7, r4
		data += partial_size;
    9530:	4426      	add	r6, r4
	} while (size && partial_size);
    9532:	d001      	beq.n	9538 <ring_buf_put+0x2e>
    9534:	2c00      	cmp	r4, #0
    9536:	d1ee      	bne.n	9516 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    9538:	4639      	mov	r1, r7
    953a:	4640      	mov	r0, r8
    953c:	f7ff ffc9 	bl	94d2 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    9540:	4638      	mov	r0, r7
    9542:	b002      	add	sp, #8
    9544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009548 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    954c:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    954e:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    9550:	42b3      	cmp	r3, r6
{
    9552:	4604      	mov	r4, r0
    9554:	460f      	mov	r7, r1
    9556:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    9558:	d907      	bls.n	956a <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    955a:	6905      	ldr	r5, [r0, #16]
    955c:	f7ff ff78 	bl	9450 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    9560:	fbb0 f1f5 	udiv	r1, r0, r5
    9564:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    9566:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    956a:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    956c:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    956e:	6923      	ldr	r3, [r4, #16]
    9570:	b185      	cbz	r5, 9594 <ring_buf_get_claim+0x4c>
    9572:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    9574:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    9576:	4540      	cmp	r0, r8
    9578:	bf28      	it	cs
    957a:	4640      	movcs	r0, r8
    957c:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    957e:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    9580:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    9582:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    9584:	bf28      	it	cs
    9586:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    9588:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    958a:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    958c:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    958e:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    9590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9594:	fbb1 f5f3 	udiv	r5, r1, r3
    9598:	fb03 1515 	mls	r5, r3, r5, r1
    959c:	e7ea      	b.n	9574 <ring_buf_get_claim+0x2c>

0000959e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    95a0:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    95a2:	68c3      	ldr	r3, [r0, #12]
    95a4:	42b3      	cmp	r3, r6
{
    95a6:	4605      	mov	r5, r0
    95a8:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    95aa:	d914      	bls.n	95d6 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    95ac:	6907      	ldr	r7, [r0, #16]
    95ae:	f7ff ff4f 	bl	9450 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    95b2:	fbb0 f1f7 	udiv	r1, r0, r7
    95b6:	3901      	subs	r1, #1
    95b8:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    95bc:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    95be:	6829      	ldr	r1, [r5, #0]
    95c0:	4421      	add	r1, r4
    95c2:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    95c4:	bf9f      	itttt	ls
    95c6:	1ac9      	subls	r1, r1, r3
    95c8:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    95ca:	60e9      	strls	r1, [r5, #12]

	return 0;
    95cc:	2000      	movls	r0, #0
		return -EINVAL;
    95ce:	bf88      	it	hi
    95d0:	f06f 0015 	mvnhi.w	r0, #21
}
    95d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    95d6:	2300      	movs	r3, #0
    95d8:	e7f1      	b.n	95be <ring_buf_get_finish+0x20>

000095da <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    95da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    95de:	4680      	mov	r8, r0
    95e0:	460d      	mov	r5, r1
    95e2:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    95e4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    95e6:	4632      	mov	r2, r6
    95e8:	a901      	add	r1, sp, #4
    95ea:	4640      	mov	r0, r8
    95ec:	f7ff ffac 	bl	9548 <ring_buf_get_claim>
    95f0:	4604      	mov	r4, r0
		if (data) {
    95f2:	b12d      	cbz	r5, 9600 <ring_buf_get+0x26>
    95f4:	4602      	mov	r2, r0
    95f6:	9901      	ldr	r1, [sp, #4]
    95f8:	4628      	mov	r0, r5
    95fa:	f001 f9f7 	bl	a9ec <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
    95fe:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    9600:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    9602:	4427      	add	r7, r4
	} while (size && partial_size);
    9604:	d001      	beq.n	960a <ring_buf_get+0x30>
    9606:	2c00      	cmp	r4, #0
    9608:	d1ed      	bne.n	95e6 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    960a:	4639      	mov	r1, r7
    960c:	4640      	mov	r0, r8
    960e:	f7ff ffc6 	bl	959e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    9612:	4638      	mov	r0, r7
    9614:	b002      	add	sp, #8
    9616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000961a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    961a:	4770      	bx	lr

0000961c <usb_write>:
{
    961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9620:	4606      	mov	r6, r0
    9622:	460f      	mov	r7, r1
    9624:	4690      	mov	r8, r2
    9626:	4699      	mov	r9, r3
    9628:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    962a:	464b      	mov	r3, r9
    962c:	4642      	mov	r2, r8
    962e:	4639      	mov	r1, r7
    9630:	4630      	mov	r0, r6
    9632:	f7fb f811 	bl	4658 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    9636:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    963a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    963c:	d103      	bne.n	9646 <usb_write+0x2a>
	z_impl_k_yield();
    963e:	f7fe ffa5 	bl	858c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    9642:	3d01      	subs	r5, #1
    9644:	d1f1      	bne.n	962a <usb_write+0xe>
}
    9646:	4620      	mov	r0, r4
    9648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000964c <usb_get_dev_data_by_cfg>:
	return list->head;
    964c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    964e:	b140      	cbz	r0, 9662 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    9650:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    9654:	685b      	ldr	r3, [r3, #4]
    9656:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9658:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    965c:	d001      	beq.n	9662 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    965e:	6840      	ldr	r0, [r0, #4]
    9660:	e7f5      	b.n	964e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    9662:	4770      	bx	lr

00009664 <usb_get_dev_data_by_iface>:
	return list->head;
    9664:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9666:	b150      	cbz	r0, 967e <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9668:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    966c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    966e:	685b      	ldr	r3, [r3, #4]
    9670:	789b      	ldrb	r3, [r3, #2]
    9672:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9674:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    9678:	d001      	beq.n	967e <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    967a:	6840      	ldr	r0, [r0, #4]
    967c:	e7f3      	b.n	9666 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    967e:	4770      	bx	lr

00009680 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    9680:	b530      	push	{r4, r5, lr}
	return list->head;
    9682:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9684:	b188      	cbz	r0, 96aa <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9686:	f850 3c04 	ldr.w	r3, [r0, #-4]
    968a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    968c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    968e:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9690:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9692:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    9694:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9696:	b2dc      	uxtb	r4, r3
    9698:	42a5      	cmp	r5, r4
    969a:	d801      	bhi.n	96a0 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    969c:	6840      	ldr	r0, [r0, #4]
    969e:	e7f1      	b.n	9684 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    96a0:	3301      	adds	r3, #1
    96a2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    96a6:	428c      	cmp	r4, r1
    96a8:	d1f5      	bne.n	9696 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    96aa:	bd30      	pop	{r4, r5, pc}

000096ac <usb_transfer_is_busy>:
{
    96ac:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    96ae:	f7f9 fb0f 	bl	2cd0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    96b2:	b128      	cbz	r0, 96c0 <usb_transfer_is_busy+0x14>
    96b4:	6840      	ldr	r0, [r0, #4]
    96b6:	f110 0f10 	cmn.w	r0, #16
    96ba:	bf14      	ite	ne
    96bc:	2000      	movne	r0, #0
    96be:	2001      	moveq	r0, #1
}
    96c0:	bd08      	pop	{r3, pc}

000096c2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    96c2:	1c4b      	adds	r3, r1, #1
    96c4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    96c6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    96c8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    96ca:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    96ce:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    96d0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    96d4:	4770      	bx	lr

000096d6 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    96d6:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    96da:	6f80      	ldr	r0, [r0, #120]	; 0x78
    96dc:	4718      	bx	r3

000096de <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    96de:	6903      	ldr	r3, [r0, #16]
    96e0:	2200      	movs	r2, #0
    96e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    96e6:	4770      	bx	lr

000096e8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    96e8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    96ea:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    96ee:	b108      	cbz	r0, 96f4 <cdc_acm_irq_tx_ready+0xc>
		return 1;
    96f0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    96f4:	4770      	bx	lr

000096f6 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    96f6:	6903      	ldr	r3, [r0, #16]
    96f8:	2200      	movs	r2, #0
    96fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    96fe:	4770      	bx	lr

00009700 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    9700:	6903      	ldr	r3, [r0, #16]
}
    9702:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    9706:	4770      	bx	lr

00009708 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9708:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    970a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    970e:	b112      	cbz	r2, 9716 <cdc_acm_irq_is_pending+0xe>
    9710:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    9714:	b92a      	cbnz	r2, 9722 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    9716:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    971a:	b118      	cbz	r0, 9724 <cdc_acm_irq_is_pending+0x1c>
		return 0;
    971c:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    9720:	4770      	bx	lr
		return 1;
    9722:	2001      	movs	r0, #1
}
    9724:	4770      	bx	lr

00009726 <cdc_acm_irq_update>:
}
    9726:	2001      	movs	r0, #1
    9728:	4770      	bx	lr

0000972a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    972a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    972c:	e9c3 1200 	strd	r1, r2, [r3]
}
    9730:	4770      	bx	lr

00009732 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    9732:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9734:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    9736:	d007      	beq.n	9748 <cdc_acm_line_ctrl_get+0x16>
    9738:	2904      	cmp	r1, #4
    973a:	d00a      	beq.n	9752 <cdc_acm_line_ctrl_get+0x20>
    973c:	2901      	cmp	r1, #1
    973e:	d10d      	bne.n	975c <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    9740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    9742:	6013      	str	r3, [r2, #0]
		return 0;
    9744:	2000      	movs	r0, #0
    9746:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    9748:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    974c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    9750:	e7f7      	b.n	9742 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    9752:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    9756:	f003 0301 	and.w	r3, r3, #1
    975a:	e7f2      	b.n	9742 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    975c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    9760:	4770      	bx	lr

00009762 <cdc_acm_fifo_read>:
{
    9762:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9764:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    9766:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    9768:	f7ff ff37 	bl	95da <ring_buf_get>
    976c:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    976e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    9770:	f7ff fe71 	bl	9456 <ring_buf_is_empty>
    9774:	b110      	cbz	r0, 977c <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    9776:	2300      	movs	r3, #0
    9778:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    977c:	4620      	mov	r0, r4
    977e:	bd38      	pop	{r3, r4, r5, pc}

00009780 <cdc_acm_poll_in>:
{
    9780:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    9782:	2201      	movs	r2, #1
    9784:	f7ff ffed 	bl	9762 <cdc_acm_fifo_read>
}
    9788:	3801      	subs	r0, #1
    978a:	bf18      	it	ne
    978c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9790:	bd08      	pop	{r3, pc}

00009792 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    9792:	2940      	cmp	r1, #64	; 0x40
{
    9794:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9796:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    9798:	d042      	beq.n	9820 <cdc_acm_line_ctrl_set+0x8e>
    979a:	d813      	bhi.n	97c4 <cdc_acm_line_ctrl_set+0x32>
    979c:	2910      	cmp	r1, #16
    979e:	d032      	beq.n	9806 <cdc_acm_line_ctrl_set+0x74>
    97a0:	d806      	bhi.n	97b0 <cdc_acm_line_ctrl_set+0x1e>
    97a2:	2901      	cmp	r1, #1
    97a4:	d01e      	beq.n	97e4 <cdc_acm_line_ctrl_set+0x52>
    97a6:	2908      	cmp	r1, #8
    97a8:	d01f      	beq.n	97ea <cdc_acm_line_ctrl_set+0x58>
    97aa:	f06f 0012 	mvn.w	r0, #18
}
    97ae:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    97b0:	2920      	cmp	r1, #32
    97b2:	d1fa      	bne.n	97aa <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    97b4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    97b8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    97bc:	b342      	cbz	r2, 9810 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    97be:	f041 0104 	orr.w	r1, r1, #4
    97c2:	e025      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    97c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    97c8:	d033      	beq.n	9832 <cdc_acm_line_ctrl_set+0xa0>
    97ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    97ce:	d039      	beq.n	9844 <cdc_acm_line_ctrl_set+0xb2>
    97d0:	2980      	cmp	r1, #128	; 0x80
    97d2:	d1ea      	bne.n	97aa <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    97d4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    97d8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    97dc:	b1c2      	cbz	r2, 9810 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    97de:	f041 0110 	orr.w	r1, r1, #16
    97e2:	e015      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    97e4:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    97e6:	2000      	movs	r0, #0
    97e8:	e7e1      	b.n	97ae <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    97ea:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    97ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    97f2:	b92a      	cbnz	r2, 9800 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    97f4:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    97f8:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    97fa:	f7f9 fda9 	bl	3350 <cdc_acm_send_notification.isra.0>
    97fe:	e7f2      	b.n	97e6 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    9800:	f041 0101 	orr.w	r1, r1, #1
    9804:	e7f6      	b.n	97f4 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    9806:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    980a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    980e:	b922      	cbnz	r2, 981a <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    9810:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    9814:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    9818:	e7ef      	b.n	97fa <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    981a:	f041 0102 	orr.w	r1, r1, #2
    981e:	e7f7      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    9820:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    9824:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    9828:	2a00      	cmp	r2, #0
    982a:	d0f1      	beq.n	9810 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    982c:	f041 0108 	orr.w	r1, r1, #8
    9830:	e7ee      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    9832:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    9836:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    983a:	2a00      	cmp	r2, #0
    983c:	d0e8      	beq.n	9810 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    983e:	f041 0120 	orr.w	r1, r1, #32
    9842:	e7e5      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    9844:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    9848:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    984c:	2a00      	cmp	r2, #0
    984e:	d0df      	beq.n	9810 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    9850:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9854:	e7dc      	b.n	9810 <cdc_acm_line_ctrl_set+0x7e>

00009856 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9856:	f000 bde6 	b.w	a426 <z_fatal_error>

0000985a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    985a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    985c:	6800      	ldr	r0, [r0, #0]
    985e:	f000 bde2 	b.w	a426 <z_fatal_error>

00009862 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9862:	2100      	movs	r1, #0
    9864:	2001      	movs	r0, #1
    9866:	f7ff bff6 	b.w	9856 <z_arm_fatal_error>

0000986a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    986a:	b508      	push	{r3, lr}
	handler();
    986c:	f7f9 ff7e 	bl	376c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9874:	f7fa b83e 	b.w	38f4 <z_arm_exc_exit>

00009878 <malloc_prepare>:
}
    9878:	2000      	movs	r0, #0
    987a:	4770      	bx	lr

0000987c <_stdout_hook_default>:
}
    987c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9880:	4770      	bx	lr

00009882 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9882:	b084      	sub	sp, #16
    9884:	ab04      	add	r3, sp, #16
    9886:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    988a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    988e:	2b06      	cmp	r3, #6
    9890:	d108      	bne.n	98a4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9896:	2201      	movs	r2, #1
    9898:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    989c:	f3bf 8f4f 	dsb	sy
        __WFE();
    98a0:	bf20      	wfe
    while (true)
    98a2:	e7fd      	b.n	98a0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    98a4:	b004      	add	sp, #16
    98a6:	4770      	bx	lr

000098a8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    98a8:	b084      	sub	sp, #16
    98aa:	ab04      	add	r3, sp, #16
    98ac:	e903 0007 	stmdb	r3, {r0, r1, r2}
    98b0:	2300      	movs	r3, #0
    98b2:	f383 8811 	msr	BASEPRI, r3
    98b6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    98ba:	b004      	add	sp, #16
    98bc:	4770      	bx	lr

000098be <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
    98be:	b4f0      	push	{r4, r5, r6, r7}
    98c0:	4613      	mov	r3, r2
	struct gpio_driver_data *data =
    98c2:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    98c4:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    98c6:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    98c8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    98ca:	bf48      	it	mi
    98cc:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    98d0:	2501      	movs	r5, #1
    98d2:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    98d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    98d8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    98da:	bf4c      	ite	mi
    98dc:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    98de:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    98e0:	683b      	ldr	r3, [r7, #0]
    98e2:	6034      	str	r4, [r6, #0]
}
    98e4:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    98e6:	4718      	bx	r3

000098e8 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    98e8:	6903      	ldr	r3, [r0, #16]
{
    98ea:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    98ec:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    98f0:	2300      	movs	r3, #0
    98f2:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    98f4:	7f83      	ldrb	r3, [r0, #30]
{
    98f6:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    98f8:	b113      	cbz	r3, 9900 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    98fa:	7a40      	ldrb	r0, [r0, #9]
    98fc:	f000 fd6d 	bl	a3da <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    9900:	2301      	movs	r3, #1
    9902:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    9904:	2300      	movs	r3, #0
    9906:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    9908:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    990a:	77a3      	strb	r3, [r4, #30]
}
    990c:	bd10      	pop	{r4, pc}

0000990e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    990e:	f7fe b99b 	b.w	7c48 <z_impl_k_mutex_lock>

00009912 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9912:	f7fe ba11 	b.w	7d38 <z_impl_k_mutex_unlock>

00009916 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    9916:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    9918:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    991a:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    991e:	b921      	cbnz	r1, 992a <usb_dc_ep_check_cap+0x14>
    9920:	1e10      	subs	r0, r2, #0
    9922:	bf18      	it	ne
    9924:	2001      	movne	r0, #1
    9926:	4240      	negs	r0, r0
    9928:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    992a:	2a08      	cmp	r2, #8
    992c:	d806      	bhi.n	993c <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    992e:	2901      	cmp	r1, #1
    9930:	d107      	bne.n	9942 <usb_dc_ep_check_cap+0x2c>
    9932:	f083 0008 	eor.w	r0, r3, #8
    9936:	f340 00c0 	sbfx	r0, r0, #3, #1
    993a:	4770      	bx	lr
		return -1;
    993c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9940:	4770      	bx	lr
	return 0;
    9942:	2000      	movs	r0, #0
}
    9944:	4770      	bx	lr

00009946 <usb_dc_ep_read>:
{
    9946:	b570      	push	{r4, r5, r6, lr}
    9948:	4604      	mov	r4, r0
    994a:	460e      	mov	r6, r1
    994c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    994e:	f7fa fefb 	bl	4748 <usb_dc_ep_read_wait>
	if (ret) {
    9952:	b930      	cbnz	r0, 9962 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    9954:	b906      	cbnz	r6, 9958 <usb_dc_ep_read+0x12>
    9956:	b125      	cbz	r5, 9962 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    9958:	4620      	mov	r0, r4
}
    995a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    995e:	f7fa bf3b 	b.w	47d8 <usb_dc_ep_read_continue>
}
    9962:	bd70      	pop	{r4, r5, r6, pc}

00009964 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9964:	6903      	ldr	r3, [r0, #16]
    9966:	b2c9      	uxtb	r1, r1
    9968:	220c      	movs	r2, #12
    996a:	fb01 3302 	mla	r3, r1, r2, r3
    996e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9970:	f000 0007 	and.w	r0, r0, #7
    9974:	4770      	bx	lr

00009976 <set_on_state>:
	__asm__ volatile(
    9976:	f04f 0320 	mov.w	r3, #32
    997a:	f3ef 8211 	mrs	r2, BASEPRI
    997e:	f383 8812 	msr	BASEPRI_MAX, r3
    9982:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9986:	6803      	ldr	r3, [r0, #0]
    9988:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    998c:	f043 0302 	orr.w	r3, r3, #2
    9990:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9992:	f382 8811 	msr	BASEPRI, r2
    9996:	f3bf 8f6f 	isb	sy
}
    999a:	4770      	bx	lr

0000999c <stop>:
{
    999c:	4603      	mov	r3, r0
    999e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    99a0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    99a2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    99a4:	f04f 0420 	mov.w	r4, #32
    99a8:	f3ef 8611 	mrs	r6, BASEPRI
    99ac:	f384 8812 	msr	BASEPRI_MAX, r4
    99b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    99b4:	250c      	movs	r5, #12
    99b6:	fb05 0401 	mla	r4, r5, r1, r0
    99ba:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    99bc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    99c0:	d001      	beq.n	99c6 <stop+0x2a>
    99c2:	42a2      	cmp	r2, r4
    99c4:	d110      	bne.n	99e8 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    99c6:	fb05 0001 	mla	r0, r5, r1, r0
    99ca:	2201      	movs	r2, #1
    99cc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    99ce:	2000      	movs	r0, #0
	__asm__ volatile(
    99d0:	f386 8811 	msr	BASEPRI, r6
    99d4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    99d8:	b928      	cbnz	r0, 99e6 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    99da:	685b      	ldr	r3, [r3, #4]
    99dc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    99e0:	684b      	ldr	r3, [r1, #4]
    99e2:	4798      	blx	r3
	return 0;
    99e4:	2000      	movs	r0, #0
}
    99e6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    99e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99ec:	e7f0      	b.n	99d0 <stop+0x34>

000099ee <api_stop>:
	return stop(dev, subsys, CTX_API);
    99ee:	2280      	movs	r2, #128	; 0x80
    99f0:	f7ff bfd4 	b.w	999c <stop>

000099f4 <async_start>:
{
    99f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99f6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    99f8:	6904      	ldr	r4, [r0, #16]
{
    99fa:	4605      	mov	r5, r0
    99fc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    99fe:	f04f 0020 	mov.w	r0, #32
    9a02:	f3ef 8c11 	mrs	ip, BASEPRI
    9a06:	f380 8812 	msr	BASEPRI_MAX, r0
    9a0a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9a0e:	260c      	movs	r6, #12
    9a10:	fb06 4601 	mla	r6, r6, r1, r4
    9a14:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9a16:	f000 0e07 	and.w	lr, r0, #7
    9a1a:	f1be 0f01 	cmp.w	lr, #1
    9a1e:	d111      	bne.n	9a44 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9a20:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    9a22:	2600      	movs	r6, #0
	__asm__ volatile(
    9a24:	f38c 8811 	msr	BASEPRI, ip
    9a28:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    9a2c:	b946      	cbnz	r6, 9a40 <async_start+0x4c>
	subdata->cb = cb;
    9a2e:	200c      	movs	r0, #12
    9a30:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    9a34:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    9a38:	686b      	ldr	r3, [r5, #4]
    9a3a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    9a3e:	4798      	blx	r3
}
    9a40:	4630      	mov	r0, r6
    9a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9a44:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    9a48:	4287      	cmp	r7, r0
    9a4a:	bf14      	ite	ne
    9a4c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    9a50:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    9a54:	e7e6      	b.n	9a24 <async_start+0x30>

00009a56 <api_start>:
{
    9a56:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9a58:	2480      	movs	r4, #128	; 0x80
    9a5a:	9400      	str	r4, [sp, #0]
    9a5c:	f7ff ffca 	bl	99f4 <async_start>
}
    9a60:	b002      	add	sp, #8
    9a62:	bd10      	pop	{r4, pc}

00009a64 <onoff_started_callback>:
	return &data->mgr[type];
    9a64:	6900      	ldr	r0, [r0, #16]
{
    9a66:	b410      	push	{r4}
	return &data->mgr[type];
    9a68:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9a6a:	241c      	movs	r4, #28
    9a6c:	fb03 0004 	mla	r0, r3, r4, r0
    9a70:	2100      	movs	r1, #0
}
    9a72:	bc10      	pop	{r4}
	notify(mgr, 0);
    9a74:	4710      	bx	r2

00009a76 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9a76:	2000      	movs	r0, #0
    9a78:	f000 ba55 	b.w	9f26 <nrfx_clock_start>

00009a7c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9a7c:	2000      	movs	r0, #0
    9a7e:	f7fc b865 	b.w	5b4c <nrfx_clock_stop>

00009a82 <blocking_start_callback>:
{
    9a82:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9a84:	f7fe b9ce 	b.w	7e24 <z_impl_k_sem_give>

00009a88 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9a88:	6843      	ldr	r3, [r0, #4]
    9a8a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9a8c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9a90:	600b      	str	r3, [r1, #0]
}
    9a92:	2000      	movs	r0, #0
    9a94:	4770      	bx	lr

00009a96 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9a96:	6843      	ldr	r3, [r0, #4]
    9a98:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9a9a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9a9e:	4042      	eors	r2, r0
    9aa0:	400a      	ands	r2, r1
    9aa2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9aa4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9aa8:	2000      	movs	r0, #0
    9aaa:	4770      	bx	lr

00009aac <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9aac:	6843      	ldr	r3, [r0, #4]
    9aae:	685b      	ldr	r3, [r3, #4]
}
    9ab0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9ab2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9ab6:	4770      	bx	lr

00009ab8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9ab8:	6843      	ldr	r3, [r0, #4]
    9aba:	685b      	ldr	r3, [r3, #4]
}
    9abc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9abe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9ac2:	4770      	bx	lr

00009ac4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9ac4:	6843      	ldr	r3, [r0, #4]
    9ac6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9ac8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9acc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9ace:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9ad2:	2000      	movs	r0, #0
    9ad4:	4770      	bx	lr

00009ad6 <gpio_nrfx_manage_callback>:
	return port->data;
    9ad6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9ad8:	6858      	ldr	r0, [r3, #4]
{
    9ada:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    9adc:	b158      	cbz	r0, 9af6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ade:	2400      	movs	r4, #0
    9ae0:	4281      	cmp	r1, r0
    9ae2:	d112      	bne.n	9b0a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    9ae4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    9ae6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    9ae8:	b954      	cbnz	r4, 9b00 <gpio_nrfx_manage_callback+0x2a>
    9aea:	428d      	cmp	r5, r1
	list->head = node;
    9aec:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9aee:	d100      	bne.n	9af2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    9af0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9af2:	2000      	movs	r0, #0
    9af4:	6008      	str	r0, [r1, #0]
	if (set) {
    9af6:	b96a      	cbnz	r2, 9b14 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    9af8:	2000      	movs	r0, #0
}
    9afa:	bd30      	pop	{r4, r5, pc}
    9afc:	4628      	mov	r0, r5
    9afe:	e7ef      	b.n	9ae0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    9b00:	428d      	cmp	r5, r1
	parent->next = child;
    9b02:	6020      	str	r0, [r4, #0]
	list->tail = node;
    9b04:	bf08      	it	eq
    9b06:	609c      	streq	r4, [r3, #8]
}
    9b08:	e7f3      	b.n	9af2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    9b0a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9b0c:	4604      	mov	r4, r0
    9b0e:	2d00      	cmp	r5, #0
    9b10:	d1f4      	bne.n	9afc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    9b12:	b13a      	cbz	r2, 9b24 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    9b14:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    9b16:	685a      	ldr	r2, [r3, #4]
    9b18:	600a      	str	r2, [r1, #0]
	list->head = node;
    9b1a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d1eb      	bne.n	9af8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    9b20:	6099      	str	r1, [r3, #8]
}
    9b22:	e7ea      	b.n	9afa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    9b24:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9b28:	e7e7      	b.n	9afa <gpio_nrfx_manage_callback+0x24>

00009b2a <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    9b2a:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    9b2c:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    9b2e:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    9b30:	d405      	bmi.n	9b3e <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    9b32:	f3c1 0242 	ubfx	r2, r1, #1, #3
    9b36:	2a01      	cmp	r2, #1
    9b38:	d004      	beq.n	9b44 <i2c_nrfx_twi_configure+0x1a>
    9b3a:	2a02      	cmp	r2, #2
    9b3c:	d00a      	beq.n	9b54 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    9b3e:	f06f 0015 	mvn.w	r0, #21
}
    9b42:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    9b44:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    9b46:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    9b4a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    9b4e:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    9b50:	2000      	movs	r0, #0
    9b52:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    9b54:	681b      	ldr	r3, [r3, #0]
    9b56:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    9b5a:	e7f6      	b.n	9b4a <i2c_nrfx_twi_configure+0x20>

00009b5c <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    9b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    9b5e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    9b62:	2908      	cmp	r1, #8
    9b64:	6e66      	ldr	r6, [r4, #100]	; 0x64
    9b66:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9b68:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    9b6c:	ea4f 2515 	mov.w	r5, r5, lsr #8
    9b70:	ea4f 6303 	mov.w	r3, r3, lsl #24
    9b74:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    9b78:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    9b7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    9b80:	ea43 0305 	orr.w	r3, r3, r5
    9b84:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    9b88:	ea43 0302 	orr.w	r3, r3, r2
    9b8c:	9300      	str	r3, [sp, #0]
    9b8e:	6e26      	ldr	r6, [r4, #96]	; 0x60
    9b90:	6e25      	ldr	r5, [r4, #96]	; 0x60
    9b92:	6e22      	ldr	r2, [r4, #96]	; 0x60
    9b94:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    9b96:	ea4f 2415 	mov.w	r4, r5, lsr #8
    9b9a:	ea4f 6303 	mov.w	r3, r3, lsl #24
    9b9e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    9ba2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    9ba6:	ea43 0304 	orr.w	r3, r3, r4
    9baa:	ea4f 2402 	mov.w	r4, r2, lsl #8
    9bae:	bf28      	it	cs
    9bb0:	2108      	movcs	r1, #8
    9bb2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    9bb6:	4323      	orrs	r3, r4
    9bb8:	460a      	mov	r2, r1
    9bba:	460c      	mov	r4, r1
    9bbc:	4669      	mov	r1, sp
    9bbe:	9301      	str	r3, [sp, #4]
    9bc0:	f000 ff14 	bl	a9ec <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
    9bc4:	4620      	mov	r0, r4
    9bc6:	b002      	add	sp, #8
    9bc8:	bd70      	pop	{r4, r5, r6, pc}

00009bca <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    9bca:	6902      	ldr	r2, [r0, #16]
{
    9bcc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    9bce:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9bd2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9bd6:	2000      	movs	r0, #0
    9bd8:	4770      	bx	lr

00009bda <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9bda:	6843      	ldr	r3, [r0, #4]
    9bdc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9bde:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9be2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9be6:	4770      	bx	lr

00009be8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9be8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    9bea:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9bec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9bee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9bf2:	b148      	cbz	r0, 9c08 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    9bf4:	7d52      	ldrb	r2, [r2, #21]
    9bf6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bf8:	2000      	movs	r0, #0
    9bfa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9bfe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9c02:	2201      	movs	r2, #1
    9c04:	601a      	str	r2, [r3, #0]
	return 0;
    9c06:	4770      	bx	lr
		return -1;
    9c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9c0c:	4770      	bx	lr

00009c0e <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9c0e:	2a00      	cmp	r2, #0
{
    9c10:	b510      	push	{r4, lr}
    9c12:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9c14:	dd0f      	ble.n	9c36 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    9c16:	6843      	ldr	r3, [r0, #4]
    9c18:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9c1a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9c1e:	b148      	cbz	r0, 9c34 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    9c20:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c22:	2000      	movs	r0, #0
    9c24:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9c28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    9c2c:	7d52      	ldrb	r2, [r2, #21]
    9c2e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9c30:	2001      	movs	r0, #1
    9c32:	6018      	str	r0, [r3, #0]
}
    9c34:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    9c36:	2000      	movs	r0, #0
    9c38:	e7fc      	b.n	9c34 <uarte_nrfx_fifo_read+0x26>

00009c3a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    9c3a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    9c3c:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    9c3e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    9c40:	f04f 0020 	mov.w	r0, #32
    9c44:	f3ef 8311 	mrs	r3, BASEPRI
    9c48:	f380 8812 	msr	BASEPRI_MAX, r0
    9c4c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    9c50:	68c9      	ldr	r1, [r1, #12]
    9c52:	2000      	movs	r0, #0
    9c54:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    9c56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9c5a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    9c5e:	f383 8811 	msr	BASEPRI, r3
    9c62:	f3bf 8f6f 	isb	sy
}
    9c66:	4770      	bx	lr

00009c68 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    9c68:	6903      	ldr	r3, [r0, #16]
    9c6a:	68db      	ldr	r3, [r3, #12]
    9c6c:	2201      	movs	r2, #1
    9c6e:	739a      	strb	r2, [r3, #14]
}
    9c70:	4770      	bx	lr

00009c72 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    9c72:	6903      	ldr	r3, [r0, #16]
    9c74:	68db      	ldr	r3, [r3, #12]
    9c76:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    9c78:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    9c7c:	b962      	cbnz	r2, 9c98 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    9c7e:	6842      	ldr	r2, [r0, #4]
    9c80:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9c82:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    9c86:	b140      	cbz	r0, 9c9a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    9c88:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    9c8c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    9c90:	d003      	beq.n	9c9a <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    9c92:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    9c94:	2001      	movs	r0, #1
    9c96:	4770      	bx	lr
    9c98:	2000      	movs	r0, #0
}
    9c9a:	4770      	bx	lr

00009c9c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    9c9c:	6843      	ldr	r3, [r0, #4]
    9c9e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ca0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    9ca4:	3800      	subs	r0, #0
    9ca6:	bf18      	it	ne
    9ca8:	2001      	movne	r0, #1
    9caa:	4770      	bx	lr

00009cac <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    9cac:	6843      	ldr	r3, [r0, #4]
    9cae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9cb0:	2210      	movs	r2, #16
    9cb2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9cb6:	4770      	bx	lr

00009cb8 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    9cb8:	6843      	ldr	r3, [r0, #4]
    9cba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9cbc:	2210      	movs	r2, #16
    9cbe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9cc2:	4770      	bx	lr

00009cc4 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    9cc4:	6843      	ldr	r3, [r0, #4]
    9cc6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    9ccc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9cd0:	4770      	bx	lr

00009cd2 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    9cd2:	6843      	ldr	r3, [r0, #4]
    9cd4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
    9cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9cde:	4770      	bx	lr

00009ce0 <uarte_nrfx_irq_update>:
}
    9ce0:	2001      	movs	r0, #1
    9ce2:	4770      	bx	lr

00009ce4 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    9ce4:	6903      	ldr	r3, [r0, #16]
    9ce6:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    9ce8:	e9c3 1200 	strd	r1, r2, [r3]
}
    9cec:	4770      	bx	lr

00009cee <uarte_nrfx_irq_is_pending>:
{
    9cee:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    9cf0:	6843      	ldr	r3, [r0, #4]
    9cf2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    9cf4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    9cf8:	025b      	lsls	r3, r3, #9
{
    9cfa:	4604      	mov	r4, r0
		||
    9cfc:	d405      	bmi.n	9d0a <uarte_nrfx_irq_is_pending+0x1c>
    9cfe:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    9d02:	f010 0010 	ands.w	r0, r0, #16
    9d06:	d106      	bne.n	9d16 <uarte_nrfx_irq_is_pending+0x28>
}
    9d08:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    9d0a:	f7ff ffb2 	bl	9c72 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    9d0e:	2800      	cmp	r0, #0
    9d10:	d0f5      	beq.n	9cfe <uarte_nrfx_irq_is_pending+0x10>
		||
    9d12:	2001      	movs	r0, #1
    9d14:	e7f8      	b.n	9d08 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    9d16:	4620      	mov	r0, r4
    9d18:	f7ff ffc0 	bl	9c9c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    9d1c:	3800      	subs	r0, #0
    9d1e:	bf18      	it	ne
    9d20:	2001      	movne	r0, #1
    9d22:	e7f1      	b.n	9d08 <uarte_nrfx_irq_is_pending+0x1a>

00009d24 <nrf_gpio_cfg_input>:
{
    9d24:	b507      	push	{r0, r1, r2, lr}
    9d26:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9d28:	a801      	add	r0, sp, #4
    9d2a:	f7fb f99b 	bl	5064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9d2e:	9b01      	ldr	r3, [sp, #4]
    9d30:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9d34:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9d36:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    9d3a:	b003      	add	sp, #12
    9d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00009d40 <tx_start.isra.0>:
	return config->uarte_regs;
    9d40:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9d42:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9d46:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d4a:	2200      	movs	r2, #0
    9d4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9d50:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9d54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    9d58:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9d5c:	6842      	ldr	r2, [r0, #4]
    9d5e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9d60:	bf41      	itttt	mi
    9d62:	2208      	movmi	r2, #8
    9d64:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    9d68:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    9d6c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d70:	2201      	movs	r2, #1
    9d72:	609a      	str	r2, [r3, #8]
}
    9d74:	4770      	bx	lr

00009d76 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9d76:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9d78:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9d7a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9d7e:	b940      	cbnz	r0, 9d92 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9d80:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9d82:	079b      	lsls	r3, r3, #30
    9d84:	d406      	bmi.n	9d94 <is_tx_ready.isra.0+0x1e>
    9d86:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9d8a:	3800      	subs	r0, #0
    9d8c:	bf18      	it	ne
    9d8e:	2001      	movne	r0, #1
    9d90:	4770      	bx	lr
    9d92:	2001      	movs	r0, #1
}
    9d94:	4770      	bx	lr

00009d96 <uarte_nrfx_fifo_fill>:
{
    9d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    9d98:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    9d9a:	68f3      	ldr	r3, [r6, #12]
    9d9c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9d9e:	f3bf 8f5b 	dmb	ish
    9da2:	4294      	cmp	r4, r2
    9da4:	bfa8      	it	ge
    9da6:	4614      	movge	r4, r2
{
    9da8:	4605      	mov	r5, r0
    9daa:	3310      	adds	r3, #16
    9dac:	2201      	movs	r2, #1
    9dae:	e853 0f00 	ldrex	r0, [r3]
    9db2:	2800      	cmp	r0, #0
    9db4:	d103      	bne.n	9dbe <uarte_nrfx_fifo_fill+0x28>
    9db6:	e843 2700 	strex	r7, r2, [r3]
    9dba:	2f00      	cmp	r7, #0
    9dbc:	d1f7      	bne.n	9dae <uarte_nrfx_fifo_fill+0x18>
    9dbe:	f3bf 8f5b 	dmb	ish
    9dc2:	bf0c      	ite	eq
    9dc4:	4613      	moveq	r3, r2
    9dc6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    9dc8:	d01d      	beq.n	9e06 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    9dca:	461c      	mov	r4, r3
}
    9dcc:	4620      	mov	r0, r4
    9dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    9dd0:	68f2      	ldr	r2, [r6, #12]
    9dd2:	5cc8      	ldrb	r0, [r1, r3]
    9dd4:	6892      	ldr	r2, [r2, #8]
    9dd6:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    9dd8:	3301      	adds	r3, #1
    9dda:	42a3      	cmp	r3, r4
    9ddc:	dbf8      	blt.n	9dd0 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    9dde:	f04f 0320 	mov.w	r3, #32
    9de2:	f3ef 8711 	mrs	r7, BASEPRI
    9de6:	f383 8812 	msr	BASEPRI_MAX, r3
    9dea:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    9dee:	6868      	ldr	r0, [r5, #4]
    9df0:	f7ff ffc1 	bl	9d76 <is_tx_ready.isra.0>
    9df4:	68f3      	ldr	r3, [r6, #12]
    9df6:	b940      	cbnz	r0, 9e0a <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    9df8:	6118      	str	r0, [r3, #16]
		len = 0;
    9dfa:	4604      	mov	r4, r0
	__asm__ volatile(
    9dfc:	f387 8811 	msr	BASEPRI, r7
    9e00:	f3bf 8f6f 	isb	sy
	return len;
    9e04:	e7e2      	b.n	9dcc <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    9e06:	2300      	movs	r3, #0
    9e08:	e7e7      	b.n	9dda <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    9e0a:	6899      	ldr	r1, [r3, #8]
    9e0c:	6868      	ldr	r0, [r5, #4]
    9e0e:	4622      	mov	r2, r4
    9e10:	f7ff ff96 	bl	9d40 <tx_start.isra.0>
    9e14:	e7f2      	b.n	9dfc <uarte_nrfx_fifo_fill+0x66>

00009e16 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9e16:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9e18:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9e1a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9e1e:	05c9      	lsls	r1, r1, #23
{
    9e20:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9e22:	d518      	bpl.n	9e56 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e24:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9e28:	b1a9      	cbz	r1, 9e56 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    9e2a:	f04f 0420 	mov.w	r4, #32
    9e2e:	f3ef 8111 	mrs	r1, BASEPRI
    9e32:	f384 8812 	msr	BASEPRI_MAX, r4
    9e36:	f3bf 8f6f 	isb	sy
    9e3a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9e3e:	b134      	cbz	r4, 9e4e <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e40:	2400      	movs	r4, #0
    9e42:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    9e46:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e4a:	2401      	movs	r4, #1
    9e4c:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    9e4e:	f381 8811 	msr	BASEPRI, r1
    9e52:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9e56:	6852      	ldr	r2, [r2, #4]
    9e58:	06d2      	lsls	r2, r2, #27
    9e5a:	d51a      	bpl.n	9e92 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    9e5c:	f04f 0220 	mov.w	r2, #32
    9e60:	f3ef 8111 	mrs	r1, BASEPRI
    9e64:	f382 8812 	msr	BASEPRI_MAX, r2
    9e68:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e6c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9e70:	b112      	cbz	r2, 9e78 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9e72:	2200      	movs	r2, #0
    9e74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    9e78:	6902      	ldr	r2, [r0, #16]
    9e7a:	68d2      	ldr	r2, [r2, #12]
    9e7c:	b10a      	cbz	r2, 9e82 <uarte_nrfx_isr_int+0x6c>
    9e7e:	6912      	ldr	r2, [r2, #16]
    9e80:	b91a      	cbnz	r2, 9e8a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    9e82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    9e86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    9e8a:	f381 8811 	msr	BASEPRI, r1
    9e8e:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    9e92:	6902      	ldr	r2, [r0, #16]
    9e94:	68d2      	ldr	r2, [r2, #12]
    9e96:	b15a      	cbz	r2, 9eb0 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e98:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9e9c:	b151      	cbz	r1, 9eb4 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    9e9e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    9ea0:	2100      	movs	r1, #0
    9ea2:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    9ea4:	b134      	cbz	r4, 9eb4 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    9ea6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    9eaa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    9eae:	7391      	strb	r1, [r2, #14]
}
    9eb0:	bc10      	pop	{r4}
    9eb2:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9eb4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    9eb8:	b121      	cbz	r1, 9ec4 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9eba:	2100      	movs	r1, #0
    9ebc:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    9ec0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    9ec4:	6813      	ldr	r3, [r2, #0]
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d0f2      	beq.n	9eb0 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    9eca:	6851      	ldr	r1, [r2, #4]
}
    9ecc:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    9ece:	4718      	bx	r3

00009ed0 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9ed0:	b510      	push	{r4, lr}
    9ed2:	2200      	movs	r2, #0
    9ed4:	4604      	mov	r4, r0
    9ed6:	2101      	movs	r1, #1
    9ed8:	2028      	movs	r0, #40	; 0x28
    9eda:	f7f9 fc2f 	bl	373c <z_arm_irq_priority_set>
    9ede:	2028      	movs	r0, #40	; 0x28
    9ee0:	f7f9 fbfa 	bl	36d8 <arch_irq_enable>
    9ee4:	4620      	mov	r0, r4
    9ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9eea:	f7fb b9c5 	b.w	5278 <uarte_instance_init.constprop.0>

00009eee <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    9eee:	b510      	push	{r4, lr}
    9ef0:	2200      	movs	r2, #0
    9ef2:	4604      	mov	r4, r0
    9ef4:	2101      	movs	r1, #1
    9ef6:	2002      	movs	r0, #2
    9ef8:	f7f9 fc20 	bl	373c <z_arm_irq_priority_set>
    9efc:	2002      	movs	r0, #2
    9efe:	f7f9 fbeb 	bl	36d8 <arch_irq_enable>
    9f02:	4620      	mov	r0, r4
    9f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f08:	f7fb b9b6 	b.w	5278 <uarte_instance_init.constprop.0>

00009f0c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9f0c:	4770      	bx	lr

00009f0e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9f0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9f12:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    9f16:	f1a0 0308 	sub.w	r3, r0, #8
    9f1a:	4258      	negs	r0, r3
    9f1c:	4158      	adcs	r0, r3
    9f1e:	4770      	bx	lr

00009f20 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9f20:	4700      	bx	r0

00009f22 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9f22:	f000 bcc7 	b.w	a8b4 <z_impl_k_busy_wait>

00009f26 <nrfx_clock_start>:
    switch (domain)
    9f26:	b110      	cbz	r0, 9f2e <nrfx_clock_start+0x8>
    9f28:	2801      	cmp	r0, #1
    9f2a:	d01d      	beq.n	9f68 <nrfx_clock_start+0x42>
    9f2c:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9f32:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9f36:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    9f3a:	03c9      	lsls	r1, r1, #15
    9f3c:	d512      	bpl.n	9f64 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9f3e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9f42:	2a01      	cmp	r2, #1
    9f44:	d10e      	bne.n	9f64 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9f46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9f4e:	2200      	movs	r2, #0
    9f50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9f54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    9f58:	2202      	movs	r2, #2
    9f5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f5e:	2201      	movs	r2, #1
    9f60:	609a      	str	r2, [r3, #8]
}
    9f62:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    9f64:	2200      	movs	r2, #0
    9f66:	e7ee      	b.n	9f46 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9f6c:	2200      	movs	r2, #0
    9f6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9f72:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9f76:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f7a:	6018      	str	r0, [r3, #0]
}
    9f7c:	4770      	bx	lr

00009f7e <nrf_gpio_reconfigure>:
{
    9f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9f80:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9f82:	a801      	add	r0, sp, #4
{
    9f84:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    9f88:	4617      	mov	r7, r2
    9f8a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9f8c:	f7fb fe4e 	bl	5c2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9f90:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9f92:	2f00      	cmp	r7, #0
    9f94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9f98:	bf14      	ite	ne
    9f9a:	2302      	movne	r3, #2
    9f9c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9f9e:	2900      	cmp	r1, #0
    9fa0:	bf18      	it	ne
    9fa2:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9fa6:	2d00      	cmp	r5, #0
    9fa8:	bf14      	ite	ne
    9faa:	f04f 0c0c 	movne.w	ip, #12
    9fae:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9fb2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9fb4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9fb8:	bf14      	ite	ne
    9fba:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    9fbe:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9fc2:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9fc4:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9fc8:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9fcc:	bf14      	ite	ne
    9fce:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    9fd2:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9fd6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9fda:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9fde:	b101      	cbz	r1, 9fe2 <nrf_gpio_reconfigure+0x64>
    9fe0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9fe2:	b10f      	cbz	r7, 9fe8 <nrf_gpio_reconfigure+0x6a>
    9fe4:	783f      	ldrb	r7, [r7, #0]
    9fe6:	007f      	lsls	r7, r7, #1
    9fe8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9fea:	b10d      	cbz	r5, 9ff0 <nrf_gpio_reconfigure+0x72>
    9fec:	782d      	ldrb	r5, [r5, #0]
    9fee:	00ad      	lsls	r5, r5, #2
    9ff0:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9ff2:	b10c      	cbz	r4, 9ff8 <nrf_gpio_reconfigure+0x7a>
    9ff4:	7822      	ldrb	r2, [r4, #0]
    9ff6:	0214      	lsls	r4, r2, #8
    9ff8:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9ffa:	b10e      	cbz	r6, a000 <nrf_gpio_reconfigure+0x82>
    9ffc:	7836      	ldrb	r6, [r6, #0]
    9ffe:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a000:	432c      	orrs	r4, r5
    a002:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    a004:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    a008:	b003      	add	sp, #12
    a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a00c <nrf_gpio_cfg_sense_set>:
{
    a00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a00e:	f10d 030f 	add.w	r3, sp, #15
    a012:	9301      	str	r3, [sp, #4]
    a014:	2300      	movs	r3, #0
{
    a016:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a01a:	9300      	str	r3, [sp, #0]
    a01c:	461a      	mov	r2, r3
    a01e:	4619      	mov	r1, r3
    a020:	f7ff ffad 	bl	9f7e <nrf_gpio_reconfigure>
}
    a024:	b005      	add	sp, #20
    a026:	f85d fb04 	ldr.w	pc, [sp], #4

0000a02a <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a02a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    a02e:	681a      	ldr	r2, [r3, #0]
    a030:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a032:	bf1f      	itttt	ne
    a034:	2200      	movne	r2, #0
    a036:	601a      	strne	r2, [r3, #0]
    a038:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a03a:	2001      	movne	r0, #1
    a03c:	bf08      	it	eq
    a03e:	2000      	moveq	r0, #0
}
    a040:	4770      	bx	lr

0000a042 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    a042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a046:	f44f 7260 	mov.w	r2, #896	; 0x380
    a04a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a04e:	4770      	bx	lr

0000a050 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    a050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a054:	f44f 7260 	mov.w	r2, #896	; 0x380
    a058:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    a05c:	4770      	bx	lr

0000a05e <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    a05e:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    a060:	f7fc f994 	bl	638c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    a064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    a068:	f7fb bdac 	b.w	5bc4 <nrfx_clock_irq_handler>

0000a06c <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    a06c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    a06e:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    a070:	6b48      	ldr	r0, [r1, #52]	; 0x34
    a072:	4298      	cmp	r0, r3
{
    a074:	b510      	push	{r4, lr}
    a076:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    a07a:	d205      	bcs.n	a088 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    a07c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    a07e:	5c09      	ldrb	r1, [r1, r0]
    a080:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    a084:	4618      	mov	r0, r3
}
    a086:	e004      	b.n	a092 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    a088:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    a08c:	b110      	cbz	r0, a094 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a08e:	61d3      	str	r3, [r2, #28]
            return false;
    a090:	2000      	movs	r0, #0
}
    a092:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    a094:	6a0c      	ldr	r4, [r1, #32]
    a096:	0664      	lsls	r4, r4, #25
    a098:	d503      	bpl.n	a0a2 <twi_send_byte+0x36>
    a09a:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    a09c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    a0a0:	e7f7      	b.n	a092 <twi_send_byte+0x26>
    a0a2:	6153      	str	r3, [r2, #20]
    a0a4:	e7ee      	b.n	a084 <twi_send_byte+0x18>

0000a0a6 <twi_transfer>:
{
    a0a6:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a0a8:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    a0ac:	4604      	mov	r4, r0
    a0ae:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    a0b0:	b12e      	cbz	r6, a0be <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a0b2:	2300      	movs	r3, #0
    a0b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    a0b8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    a0bc:	2601      	movs	r6, #1
    if (p_cb->error)
    a0be:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    a0c2:	b320      	cbz	r0, a10e <twi_transfer+0x68>
    a0c4:	2300      	movs	r3, #0
    a0c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    a0ca:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    a0ce:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a0d2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    a0d6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    a0da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    a0de:	2e00      	cmp	r6, #0
    a0e0:	d068      	beq.n	a1b4 <twi_transfer+0x10e>
        if (!p_cb->error)
    a0e2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    a0e6:	2300      	movs	r3, #0
    a0e8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    a0ec:	bb88      	cbnz	r0, a152 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    a0ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    a0f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    a0f2:	429a      	cmp	r2, r3
        return false;
    a0f4:	bf1c      	itt	ne
    a0f6:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    a0f8:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    a0fa:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    a0fe:	bf1c      	itt	ne
    a100:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    a104:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    a108:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    a10c:	e022      	b.n	a154 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a10e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    a112:	b142      	cbz	r2, a126 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a114:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    a118:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a11c:	2301      	movs	r3, #1
    a11e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    a120:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    a124:	e7db      	b.n	a0de <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a126:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    a12a:	b1a3      	cbz	r3, a156 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a12c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    a130:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    a134:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    a136:	3301      	adds	r3, #1
    a138:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a13a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    a13e:	b113      	cbz	r3, a146 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a140:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    a144:	e7e8      	b.n	a118 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    a146:	4629      	mov	r1, r5
    a148:	4620      	mov	r0, r4
    a14a:	f7ff ff8f 	bl	a06c <twi_send_byte>
    a14e:	2800      	cmp	r0, #0
    a150:	d1c5      	bne.n	a0de <twi_transfer+0x38>
                    return false;
    a152:	2000      	movs	r0, #0
}
    a154:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a156:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    a15a:	2a00      	cmp	r2, #0
    a15c:	d0bf      	beq.n	a0de <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a15e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    a162:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a166:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    a16a:	b112      	cbz	r2, a172 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a16c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    a170:	e7d2      	b.n	a118 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    a172:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    a174:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    a176:	4293      	cmp	r3, r2
    a178:	d2b1      	bcs.n	a0de <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    a17a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    a17c:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    a180:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    a182:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a184:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    a186:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a188:	1e51      	subs	r1, r2, #1
    a18a:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    a18c:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a18e:	d108      	bne.n	a1a2 <twi_transfer+0xfc>
    a190:	6a29      	ldr	r1, [r5, #32]
    a192:	0649      	lsls	r1, r1, #25
    a194:	d410      	bmi.n	a1b8 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    a196:	2302      	movs	r3, #2
    a198:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a19c:	2301      	movs	r3, #1
    a19e:	6223      	str	r3, [r4, #32]
    a1a0:	e79d      	b.n	a0de <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a1a2:	4293      	cmp	r3, r2
    a1a4:	d1fa      	bne.n	a19c <twi_transfer+0xf6>
    a1a6:	6a2b      	ldr	r3, [r5, #32]
    a1a8:	065b      	lsls	r3, r3, #25
    a1aa:	d598      	bpl.n	a0de <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    a1ac:	2302      	movs	r3, #2
    a1ae:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    a1b2:	e7cf      	b.n	a154 <twi_transfer+0xae>
    return true;
    a1b4:	2001      	movs	r0, #1
    a1b6:	e7cd      	b.n	a154 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a1b8:	4293      	cmp	r3, r2
    a1ba:	d1ef      	bne.n	a19c <twi_transfer+0xf6>
    a1bc:	e7f6      	b.n	a1ac <twi_transfer+0x106>

0000a1be <twi_irq_handler>:
{
    a1be:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1c0:	b087      	sub	sp, #28
    a1c2:	4607      	mov	r7, r0
    a1c4:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
    a1c6:	f7ff ff6e 	bl	a0a6 <twi_transfer>
    a1ca:	2800      	cmp	r0, #0
    a1cc:	d146      	bne.n	a25c <twi_irq_handler+0x9e>
    if (!p_cb->error &&
    a1ce:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    a1d2:	f8d4 e020 	ldr.w	lr, [r4, #32]
    if (!p_cb->error &&
    a1d6:	f1bc 0f00 	cmp.w	ip, #0
    a1da:	d11f      	bne.n	a21c <twi_irq_handler+0x5e>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    a1dc:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    a1de:	1e9a      	subs	r2, r3, #2
    a1e0:	2a01      	cmp	r2, #1
    a1e2:	d81b      	bhi.n	a21c <twi_irq_handler+0x5e>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    a1e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a1e6:	69a2      	ldr	r2, [r4, #24]
    a1e8:	4291      	cmp	r1, r2
    a1ea:	d117      	bne.n	a21c <twi_irq_handler+0x5e>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    a1ec:	69e2      	ldr	r2, [r4, #28]
    a1ee:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    a1f0:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    a1f4:	6962      	ldr	r2, [r4, #20]
    a1f6:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    a1f8:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    a1fa:	f884 e02c 	strb.w	lr, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    a1fe:	f884 c02d 	strb.w	ip, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    a202:	4621      	mov	r1, r4
    a204:	4638      	mov	r0, r7
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    a206:	d104      	bne.n	a212 <twi_irq_handler+0x54>
}
    a208:	b007      	add	sp, #28
    a20a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    a20e:	f7fc b913 	b.w	6438 <twi_tx_start_transfer>
}
    a212:	b007      	add	sp, #28
    a214:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    a218:	f7fc b97a 	b.w	6510 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    a21c:	f104 060c 	add.w	r6, r4, #12
    a220:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a222:	ad01      	add	r5, sp, #4
    a224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a226:	6833      	ldr	r3, [r6, #0]
    a228:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    a22a:	f1bc 0f00 	cmp.w	ip, #0
    a22e:	d020      	beq.n	a272 <twi_irq_handler+0xb4>
    uint32_t error_source = p_reg->ERRORSRC;
    a230:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    a234:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    a238:	0799      	lsls	r1, r3, #30
    a23a:	d511      	bpl.n	a260 <twi_irq_handler+0xa2>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    a23c:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    a23e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    a242:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    a244:	f01e 0f04 	tst.w	lr, #4
        p_cb->busy = false;
    a248:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    a24c:	d002      	beq.n	a254 <twi_irq_handler+0x96>
    a24e:	f1bc 0f00 	cmp.w	ip, #0
    a252:	d003      	beq.n	a25c <twi_irq_handler+0x9e>
            p_cb->handler(&event, p_cb->p_context);
    a254:	e9d4 3100 	ldrd	r3, r1, [r4]
    a258:	4668      	mov	r0, sp
    a25a:	4798      	blx	r3
}
    a25c:	b007      	add	sp, #28
    a25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    a260:	075a      	lsls	r2, r3, #29
    a262:	d501      	bpl.n	a268 <twi_irq_handler+0xaa>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    a264:	2302      	movs	r3, #2
    a266:	e7ea      	b.n	a23e <twi_irq_handler+0x80>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    a268:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    a26a:	bf4c      	ite	mi
    a26c:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    a26e:	2304      	movpl	r3, #4
    a270:	e7e5      	b.n	a23e <twi_irq_handler+0x80>
            event.type = NRFX_TWI_EVT_DONE;
    a272:	f88d c000 	strb.w	ip, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    a276:	e7e4      	b.n	a242 <twi_irq_handler+0x84>

0000a278 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    a27c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    a280:	f1a0 0308 	sub.w	r3, r0, #8
    a284:	4258      	negs	r0, r3
    a286:	4158      	adcs	r0, r3
    a288:	4770      	bx	lr

0000a28a <nrfx_usbd_consumer>:
{
    a28a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    a28c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    a28e:	680d      	ldr	r5, [r1, #0]
    a290:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    a292:	bf97      	itett	ls
    a294:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    a298:	2100      	movhi	r1, #0
        size -= data_size;
    a29a:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    a29c:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    a29e:	bf8e      	itee	hi
    a2a0:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    a2a4:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    a2a6:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    a2a8:	429a      	cmp	r2, r3
    a2aa:	d103      	bne.n	a2b4 <nrfx_usbd_consumer+0x2a>
    a2ac:	1e20      	subs	r0, r4, #0
    a2ae:	bf18      	it	ne
    a2b0:	2001      	movne	r0, #1
}
    a2b2:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    a2b4:	2000      	movs	r0, #0
    a2b6:	e7fc      	b.n	a2b2 <nrfx_usbd_consumer+0x28>

0000a2b8 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    a2b8:	684b      	ldr	r3, [r1, #4]
{
    a2ba:	b510      	push	{r4, lr}
    a2bc:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    a2be:	680c      	ldr	r4, [r1, #0]
    a2c0:	bf28      	it	cs
    a2c2:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    a2c4:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    a2c8:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    a2ca:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    a2cc:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    a2ce:	441a      	add	r2, r3
}
    a2d0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    a2d2:	600a      	str	r2, [r1, #0]
}
    a2d4:	bf18      	it	ne
    a2d6:	2001      	movne	r0, #1
    a2d8:	bd10      	pop	{r4, pc}

0000a2da <nrfx_usbd_feeder_ram_zlp>:
{
    a2da:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    a2dc:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    a2de:	680b      	ldr	r3, [r1, #0]
    a2e0:	42a2      	cmp	r2, r4
    a2e2:	bf28      	it	cs
    a2e4:	4622      	movcs	r2, r4
    a2e6:	2a00      	cmp	r2, #0
    a2e8:	bf14      	ite	ne
    a2ea:	461d      	movne	r5, r3
    a2ec:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    a2ee:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    a2f2:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    a2f6:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    a2f8:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    a2fa:	600a      	str	r2, [r1, #0]
}
    a2fc:	bf14      	ite	ne
    a2fe:	2001      	movne	r0, #1
    a300:	2000      	moveq	r0, #0
    a302:	bd30      	pop	{r4, r5, pc}

0000a304 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    a304:	f010 0f80 	tst.w	r0, #128	; 0x80
    a308:	bf14      	ite	ne
    a30a:	2300      	movne	r3, #0
    a30c:	2310      	moveq	r3, #16
    a30e:	f000 000f 	and.w	r0, r0, #15
}
    a312:	4418      	add	r0, r3
    a314:	4770      	bx	lr

0000a316 <ev_started_handler>:
}
    a316:	4770      	bx	lr

0000a318 <nrf_usbd_epin_dma_handler>:
{
    a318:	b508      	push	{r3, lr}
    a31a:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    a31c:	f7fc fa98 	bl	6850 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a320:	4608      	mov	r0, r1
    a322:	f7fc fa87 	bl	6834 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a326:	7b83      	ldrb	r3, [r0, #14]
    a328:	2b03      	cmp	r3, #3
    a32a:	d10a      	bne.n	a342 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a32c:	4608      	mov	r0, r1
    a32e:	f7ff ffe9 	bl	a304 <ep2bit>
    a332:	2301      	movs	r3, #1
    a334:	fa03 f000 	lsl.w	r0, r3, r0
    a338:	43c0      	mvns	r0, r0
}
    a33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a33e:	f7fc bb99 	b.w	6a74 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a342:	6803      	ldr	r3, [r0, #0]
    a344:	2b00      	cmp	r3, #0
    a346:	d0f1      	beq.n	a32c <nrf_usbd_epin_dma_handler+0x14>
}
    a348:	bd08      	pop	{r3, pc}

0000a34a <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    a34a:	2087      	movs	r0, #135	; 0x87
    a34c:	f7ff bfe4 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a350 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    a350:	2086      	movs	r0, #134	; 0x86
    a352:	f7ff bfe1 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a356 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    a356:	2085      	movs	r0, #133	; 0x85
    a358:	f7ff bfde 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a35c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    a35c:	2084      	movs	r0, #132	; 0x84
    a35e:	f7ff bfdb 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a362 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    a362:	2083      	movs	r0, #131	; 0x83
    a364:	f7ff bfd8 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a368 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    a368:	2082      	movs	r0, #130	; 0x82
    a36a:	f7ff bfd5 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a36e <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    a36e:	2081      	movs	r0, #129	; 0x81
    a370:	f7ff bfd2 	b.w	a318 <nrf_usbd_epin_dma_handler>

0000a374 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    a374:	f7fc bb8e 	b.w	6a94 <nrf_usbd_ep0in_dma_handler>

0000a378 <nrfx_usbd_ep_max_packet_size_set>:
{
    a378:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a37a:	f7fc fa5b 	bl	6834 <ep_state_access>
    p_state->max_packet_size = size;
    a37e:	8181      	strh	r1, [r0, #12]
}
    a380:	bd08      	pop	{r3, pc}

0000a382 <nrfx_usbd_ep_status_get>:
{
    a382:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    a384:	f7fc fa56 	bl	6834 <ep_state_access>
	__asm__ volatile(
    a388:	f04f 0220 	mov.w	r2, #32
    a38c:	f3ef 8311 	mrs	r3, BASEPRI
    a390:	f382 8812 	msr	BASEPRI_MAX, r2
    a394:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    a398:	6882      	ldr	r2, [r0, #8]
    a39a:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a39c:	6802      	ldr	r2, [r0, #0]
    a39e:	b92a      	cbnz	r2, a3ac <nrfx_usbd_ep_status_get+0x2a>
    a3a0:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    a3a2:	f383 8811 	msr	BASEPRI, r3
    a3a6:	f3bf 8f6f 	isb	sy
}
    a3aa:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a3ac:	2004      	movs	r0, #4
    a3ae:	e7f8      	b.n	a3a2 <nrfx_usbd_ep_status_get+0x20>

0000a3b0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    a3b0:	2007      	movs	r0, #7
    a3b2:	f7fc bea7 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3b6 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a3b6:	2006      	movs	r0, #6
    a3b8:	f7fc bea4 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3bc <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a3bc:	2005      	movs	r0, #5
    a3be:	f7fc bea1 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3c2 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a3c2:	2004      	movs	r0, #4
    a3c4:	f7fc be9e 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3c8 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a3c8:	2003      	movs	r0, #3
    a3ca:	f7fc be9b 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3ce <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    a3ce:	2002      	movs	r0, #2
    a3d0:	f7fc be98 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3d4 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    a3d4:	2001      	movs	r0, #1
    a3d6:	f7fc be95 	b.w	7104 <nrf_usbd_epout_dma_handler>

0000a3da <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    a3da:	f7fc bf85 	b.w	72e8 <usbd_ep_abort>

0000a3de <nrf_gpio_pin_set>:
{
    a3de:	b507      	push	{r0, r1, r2, lr}
    a3e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a3e2:	a801      	add	r0, sp, #4
    a3e4:	f7fd f98e 	bl	7704 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a3e8:	9a01      	ldr	r2, [sp, #4]
    a3ea:	2301      	movs	r3, #1
    a3ec:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    a3ee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    a3f2:	b003      	add	sp, #12
    a3f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a3f8 <z_device_state_init>:
}
    a3f8:	4770      	bx	lr

0000a3fa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a3fa:	b138      	cbz	r0, a40c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a3fc:	68c3      	ldr	r3, [r0, #12]
    a3fe:	8818      	ldrh	r0, [r3, #0]
    a400:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a404:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    a408:	4258      	negs	r0, r3
    a40a:	4158      	adcs	r0, r3
}
    a40c:	4770      	bx	lr

0000a40e <arch_system_halt>:
	__asm__ volatile(
    a40e:	f04f 0220 	mov.w	r2, #32
    a412:	f3ef 8311 	mrs	r3, BASEPRI
    a416:	f382 8812 	msr	BASEPRI_MAX, r2
    a41a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    a41e:	e7fe      	b.n	a41e <arch_system_halt+0x10>

0000a420 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    a420:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    a422:	f7ff fff4 	bl	a40e <arch_system_halt>

0000a426 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a428:	4605      	mov	r5, r0
    a42a:	460e      	mov	r6, r1
    a42c:	f04f 0320 	mov.w	r3, #32
    a430:	f3ef 8711 	mrs	r7, BASEPRI
    a434:	f383 8812 	msr	BASEPRI_MAX, r3
    a438:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a43c:	f7fe f948 	bl	86d0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a440:	4631      	mov	r1, r6
    a442:	4604      	mov	r4, r0
    a444:	4628      	mov	r0, r5
    a446:	f7ff ffeb 	bl	a420 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a44a:	f387 8811 	msr	BASEPRI, r7
    a44e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a452:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a458:	f7f9 bb68 	b.w	3b2c <z_impl_k_thread_abort>

0000a45c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a45e:	4604      	mov	r4, r0
    a460:	460d      	mov	r5, r1
	__asm__ volatile(
    a462:	f04f 0320 	mov.w	r3, #32
    a466:	f3ef 8611 	mrs	r6, BASEPRI
    a46a:	f383 8812 	msr	BASEPRI_MAX, r3
    a46e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a472:	6947      	ldr	r7, [r0, #20]
    a474:	b977      	cbnz	r7, a494 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a476:	f000 f994 	bl	a7a2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    a47a:	b158      	cbz	r0, a494 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a47c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a47e:	6142      	str	r2, [r0, #20]
    a480:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    a482:	f000 f932 	bl	a6ea <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a486:	4631      	mov	r1, r6
    a488:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a48c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    a490:	f7fd be74 	b.w	817c <z_reschedule>
	**(char ***) mem = slab->free_list;
    a494:	682b      	ldr	r3, [r5, #0]
    a496:	6962      	ldr	r2, [r4, #20]
    a498:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a49a:	682b      	ldr	r3, [r5, #0]
    a49c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a49e:	69a3      	ldr	r3, [r4, #24]
    a4a0:	3b01      	subs	r3, #1
    a4a2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a4a4:	f386 8811 	msr	BASEPRI, r6
    a4a8:	f3bf 8f6f 	isb	sy
}
    a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a4ae <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a4ae:	f3ef 8005 	mrs	r0, IPSR
}
    a4b2:	3800      	subs	r0, #0
    a4b4:	bf18      	it	ne
    a4b6:	2001      	movne	r0, #1
    a4b8:	4770      	bx	lr

0000a4ba <z_impl_k_thread_name_set>:
}
    a4ba:	f06f 0057 	mvn.w	r0, #87	; 0x57
    a4be:	4770      	bx	lr

0000a4c0 <z_impl_k_thread_start>:
	z_sched_start(thread);
    a4c0:	f7fd bf52 	b.w	8368 <z_sched_start>

0000a4c4 <z_pm_save_idle_exit>:
{
    a4c4:	b508      	push	{r3, lr}
	pm_system_resume();
    a4c6:	f7f8 ffcd 	bl	3464 <pm_system_resume>
}
    a4ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a4ce:	f7ff bd1d 	b.w	9f0c <sys_clock_idle_exit>

0000a4d2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    a4d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a4d6:	428b      	cmp	r3, r1
    a4d8:	d001      	beq.n	a4de <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    a4da:	f7fd bfb5 	b.w	8448 <z_set_prio>
}
    a4de:	2000      	movs	r0, #0
    a4e0:	4770      	bx	lr

0000a4e2 <z_impl_k_mutex_init>:
{
    a4e2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a4e4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a4e6:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    a4ea:	e9c3 3300 	strd	r3, r3, [r3]
}
    a4ee:	4770      	bx	lr

0000a4f0 <queue_insert>:
{
    a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4f4:	4699      	mov	r9, r3
    a4f6:	4604      	mov	r4, r0
    a4f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a4fc:	460d      	mov	r5, r1
    a4fe:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a500:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    a504:	f04f 0220 	mov.w	r2, #32
    a508:	f3ef 8611 	mrs	r6, BASEPRI
    a50c:	f382 8812 	msr	BASEPRI_MAX, r2
    a510:	f3bf 8f6f 	isb	sy
	if (is_append) {
    a514:	b103      	cbz	r3, a518 <queue_insert+0x28>
	return list->tail;
    a516:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    a518:	4638      	mov	r0, r7
    a51a:	f000 f942 	bl	a7a2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    a51e:	b158      	cbz	r0, a538 <queue_insert+0x48>
    a520:	2400      	movs	r4, #0
    a522:	6784      	str	r4, [r0, #120]	; 0x78
    a524:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    a528:	f000 f8df 	bl	a6ea <z_ready_thread>
	z_reschedule(&queue->lock, key);
    a52c:	4638      	mov	r0, r7
    a52e:	4631      	mov	r1, r6
    a530:	f7fd fe24 	bl	817c <z_reschedule>
	return 0;
    a534:	2000      	movs	r0, #0
    a536:	e00c      	b.n	a552 <queue_insert+0x62>
	if (alloc) {
    a538:	f1b9 0f00 	cmp.w	r9, #0
    a53c:	d01c      	beq.n	a578 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    a53e:	2108      	movs	r1, #8
    a540:	f7fe fa92 	bl	8a68 <z_thread_aligned_alloc>
		if (anode == NULL) {
    a544:	b938      	cbnz	r0, a556 <queue_insert+0x66>
	__asm__ volatile(
    a546:	f386 8811 	msr	BASEPRI, r6
    a54a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    a54e:	f06f 000b 	mvn.w	r0, #11
}
    a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    a556:	2301      	movs	r3, #1
		anode->data = data;
    a558:	f8c0 8004 	str.w	r8, [r0, #4]
    a55c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a55e:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a560:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    a564:	b965      	cbnz	r5, a580 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a566:	6823      	ldr	r3, [r4, #0]
    a568:	4313      	orrs	r3, r2
    a56a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a56c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    a56e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a570:	2b00      	cmp	r3, #0
    a572:	d1db      	bne.n	a52c <queue_insert+0x3c>
	list->tail = node;
    a574:	6060      	str	r0, [r4, #4]
}
    a576:	e7d9      	b.n	a52c <queue_insert+0x3c>
	node->next_and_flags = flags;
    a578:	f8c8 9000 	str.w	r9, [r8]
}
    a57c:	4640      	mov	r0, r8
    a57e:	e7ee      	b.n	a55e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a580:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    a582:	f033 0303 	bics.w	r3, r3, #3
    a586:	d10b      	bne.n	a5a0 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a588:	6002      	str	r2, [r0, #0]
	return list->tail;
    a58a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    a58c:	b912      	cbnz	r2, a594 <queue_insert+0xa4>
	list->head = node;
    a58e:	e9c4 0000 	strd	r0, r0, [r4]
}
    a592:	e7cb      	b.n	a52c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a594:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a596:	f003 0303 	and.w	r3, r3, #3
    a59a:	4303      	orrs	r3, r0
    a59c:	6013      	str	r3, [r2, #0]
    a59e:	e7e9      	b.n	a574 <queue_insert+0x84>
    a5a0:	4313      	orrs	r3, r2
    a5a2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a5a4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a5a6:	f003 0303 	and.w	r3, r3, #3
    a5aa:	4318      	orrs	r0, r3
    a5ac:	6028      	str	r0, [r5, #0]
}
    a5ae:	e7bd      	b.n	a52c <queue_insert+0x3c>

0000a5b0 <z_queue_node_peek>:
{
    a5b0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    a5b2:	4604      	mov	r4, r0
    a5b4:	b130      	cbz	r0, a5c4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a5b6:	6802      	ldr	r2, [r0, #0]
    a5b8:	0793      	lsls	r3, r2, #30
    a5ba:	d003      	beq.n	a5c4 <z_queue_node_peek+0x14>
		ret = anode->data;
    a5bc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    a5be:	b109      	cbz	r1, a5c4 <z_queue_node_peek+0x14>
			k_free(anode);
    a5c0:	f000 f9a7 	bl	a912 <k_free>
}
    a5c4:	4620      	mov	r0, r4
    a5c6:	bd10      	pop	{r4, pc}

0000a5c8 <k_queue_append>:
{
    a5c8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    a5ca:	2301      	movs	r3, #1
    a5cc:	9300      	str	r3, [sp, #0]
    a5ce:	2300      	movs	r3, #0
{
    a5d0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    a5d2:	4619      	mov	r1, r3
    a5d4:	f7ff ff8c 	bl	a4f0 <queue_insert>
}
    a5d8:	b003      	add	sp, #12
    a5da:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5de <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a5de:	b13a      	cbz	r2, a5f0 <z_impl_k_sem_init+0x12>
    a5e0:	428a      	cmp	r2, r1
    a5e2:	d305      	bcc.n	a5f0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    a5e4:	e9c0 1202 	strd	r1, r2, [r0, #8]
    a5e8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    a5ec:	2000      	movs	r0, #0
    a5ee:	4770      	bx	lr
		return -EINVAL;
    a5f0:	f06f 0015 	mvn.w	r0, #21
}
    a5f4:	4770      	bx	lr

0000a5f6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    a5f6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    a5f8:	2301      	movs	r3, #1
    a5fa:	408b      	lsls	r3, r1
    a5fc:	ea22 0303 	bic.w	r3, r2, r3
    a600:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    a602:	fa22 f001 	lsr.w	r0, r2, r1
}
    a606:	f000 0001 	and.w	r0, r0, #1
    a60a:	4770      	bx	lr

0000a60c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    a60c:	b120      	cbz	r0, a618 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a60e:	2200      	movs	r2, #0
    a610:	4611      	mov	r1, r2
    a612:	3088      	adds	r0, #136	; 0x88
    a614:	f000 b8ed 	b.w	a7f2 <z_sched_wake>
}
    a618:	4770      	bx	lr

0000a61a <k_work_init>:
{
    a61a:	b538      	push	{r3, r4, r5, lr}
    a61c:	4604      	mov	r4, r0
    a61e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a620:	2210      	movs	r2, #16
    a622:	2100      	movs	r1, #0
    a624:	f000 fa03 	bl	aa2e <memset>
    a628:	6065      	str	r5, [r4, #4]
}
    a62a:	bd38      	pop	{r3, r4, r5, pc}

0000a62c <k_work_submit_to_queue>:
{
    a62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a62e:	9001      	str	r0, [sp, #4]
    a630:	4608      	mov	r0, r1
	__asm__ volatile(
    a632:	f04f 0320 	mov.w	r3, #32
    a636:	f3ef 8511 	mrs	r5, BASEPRI
    a63a:	f383 8812 	msr	BASEPRI_MAX, r3
    a63e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    a642:	a901      	add	r1, sp, #4
    a644:	f7fd fccc 	bl	7fe0 <submit_to_queue_locked>
    a648:	4604      	mov	r4, r0
	__asm__ volatile(
    a64a:	f385 8811 	msr	BASEPRI, r5
    a64e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    a652:	2800      	cmp	r0, #0
    a654:	dd04      	ble.n	a660 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    a656:	f7fe f841 	bl	86dc <z_impl_k_is_preempt_thread>
    a65a:	b108      	cbz	r0, a660 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    a65c:	f7fd ff96 	bl	858c <z_impl_k_yield>
}
    a660:	4620      	mov	r0, r4
    a662:	b003      	add	sp, #12
    a664:	bd30      	pop	{r4, r5, pc}

0000a666 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    a666:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a66a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a66c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a66e:	2300      	movs	r3, #0
	node->prev = NULL;
    a670:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    a674:	4770      	bx	lr

0000a676 <unpend_thread_no_timeout>:
{
    a676:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    a678:	f7ff fff5 	bl	a666 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a67c:	7b43      	ldrb	r3, [r0, #13]
    a67e:	f023 0302 	bic.w	r3, r3, #2
    a682:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    a684:	2300      	movs	r3, #0
    a686:	6083      	str	r3, [r0, #8]
}
    a688:	bd08      	pop	{r3, pc}

0000a68a <z_unpend_thread>:
{
    a68a:	b510      	push	{r4, lr}
	__asm__ volatile(
    a68c:	f04f 0320 	mov.w	r3, #32
    a690:	f3ef 8411 	mrs	r4, BASEPRI
    a694:	f383 8812 	msr	BASEPRI_MAX, r3
    a698:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    a69c:	f7ff ffeb 	bl	a676 <unpend_thread_no_timeout>
	__asm__ volatile(
    a6a0:	f384 8811 	msr	BASEPRI, r4
    a6a4:	f3bf 8f6f 	isb	sy
}
    a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a6ac:	3018      	adds	r0, #24
    a6ae:	f000 b8bd 	b.w	a82c <z_abort_timeout>

0000a6b2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a6b2:	4603      	mov	r3, r0
    a6b4:	b920      	cbnz	r0, a6c0 <z_reschedule_irqlock+0xe>
    a6b6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    a6ba:	b90a      	cbnz	r2, a6c0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    a6bc:	f7f9 b87e 	b.w	37bc <arch_swap>
    a6c0:	f383 8811 	msr	BASEPRI, r3
    a6c4:	f3bf 8f6f 	isb	sy
}
    a6c8:	4770      	bx	lr

0000a6ca <z_reschedule_unlocked>:
	__asm__ volatile(
    a6ca:	f04f 0320 	mov.w	r3, #32
    a6ce:	f3ef 8011 	mrs	r0, BASEPRI
    a6d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6d6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a6da:	f7ff bfea 	b.w	a6b2 <z_reschedule_irqlock>

0000a6de <z_priq_dumb_best>:
{
    a6de:	4603      	mov	r3, r0
	return list->head == list;
    a6e0:	6800      	ldr	r0, [r0, #0]
}
    a6e2:	4283      	cmp	r3, r0
    a6e4:	bf08      	it	eq
    a6e6:	2000      	moveq	r0, #0
    a6e8:	4770      	bx	lr

0000a6ea <z_ready_thread>:
{
    a6ea:	b510      	push	{r4, lr}
    a6ec:	f04f 0320 	mov.w	r3, #32
    a6f0:	f3ef 8411 	mrs	r4, BASEPRI
    a6f4:	f383 8812 	msr	BASEPRI_MAX, r3
    a6f8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    a6fc:	f7fd fdfe 	bl	82fc <ready_thread>
	__asm__ volatile(
    a700:	f384 8811 	msr	BASEPRI, r4
    a704:	f3bf 8f6f 	isb	sy
}
    a708:	bd10      	pop	{r4, pc}

0000a70a <z_thread_timeout>:
{
    a70a:	b510      	push	{r4, lr}
    a70c:	4601      	mov	r1, r0
	__asm__ volatile(
    a70e:	f04f 0320 	mov.w	r3, #32
    a712:	f3ef 8411 	mrs	r4, BASEPRI
    a716:	f383 8812 	msr	BASEPRI_MAX, r3
    a71a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    a71e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    a722:	f013 0f28 	tst.w	r3, #40	; 0x28
    a726:	d10d      	bne.n	a744 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    a728:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    a72c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    a72e:	b10b      	cbz	r3, a734 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    a730:	f7ff ffa1 	bl	a676 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a734:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    a738:	f023 0314 	bic.w	r3, r3, #20
    a73c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    a740:	f7fd fddc 	bl	82fc <ready_thread>
	__asm__ volatile(
    a744:	f384 8811 	msr	BASEPRI, r4
    a748:	f3bf 8f6f 	isb	sy
}
    a74c:	bd10      	pop	{r4, pc}

0000a74e <add_to_waitq_locked>:
{
    a74e:	b538      	push	{r3, r4, r5, lr}
    a750:	4604      	mov	r4, r0
    a752:	460d      	mov	r5, r1
	unready_thread(thread);
    a754:	f7fd fe26 	bl	83a4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a758:	7b63      	ldrb	r3, [r4, #13]
    a75a:	f043 0302 	orr.w	r3, r3, #2
    a75e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a760:	b195      	cbz	r5, a788 <add_to_waitq_locked+0x3a>
    a762:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    a764:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a766:	429d      	cmp	r5, r3
    a768:	d015      	beq.n	a796 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a76a:	b1a3      	cbz	r3, a796 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    a76c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    a770:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    a774:	4291      	cmp	r1, r2
    a776:	d008      	beq.n	a78a <add_to_waitq_locked+0x3c>
		return b2 - b1;
    a778:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    a77a:	2a00      	cmp	r2, #0
    a77c:	dd05      	ble.n	a78a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    a77e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a780:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a784:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a786:	605c      	str	r4, [r3, #4]
}
    a788:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    a78a:	686a      	ldr	r2, [r5, #4]
    a78c:	4293      	cmp	r3, r2
    a78e:	d002      	beq.n	a796 <add_to_waitq_locked+0x48>
    a790:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a792:	2b00      	cmp	r3, #0
    a794:	d1ec      	bne.n	a770 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    a796:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    a798:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    a79c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a79e:	606c      	str	r4, [r5, #4]
}
    a7a0:	e7f2      	b.n	a788 <add_to_waitq_locked+0x3a>

0000a7a2 <z_unpend_first_thread>:
{
    a7a2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a7a4:	f04f 0320 	mov.w	r3, #32
    a7a8:	f3ef 8511 	mrs	r5, BASEPRI
    a7ac:	f383 8812 	msr	BASEPRI_MAX, r3
    a7b0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    a7b4:	f7ff ff93 	bl	a6de <z_priq_dumb_best>
		if (thread != NULL) {
    a7b8:	4604      	mov	r4, r0
    a7ba:	b120      	cbz	r0, a7c6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    a7bc:	f7ff ff5b 	bl	a676 <unpend_thread_no_timeout>
    a7c0:	3018      	adds	r0, #24
    a7c2:	f000 f833 	bl	a82c <z_abort_timeout>
	__asm__ volatile(
    a7c6:	f385 8811 	msr	BASEPRI, r5
    a7ca:	f3bf 8f6f 	isb	sy
}
    a7ce:	4620      	mov	r0, r4
    a7d0:	bd38      	pop	{r3, r4, r5, pc}

0000a7d2 <z_unpend_all>:
{
    a7d2:	b538      	push	{r3, r4, r5, lr}
    a7d4:	4605      	mov	r5, r0
	int need_sched = 0;
    a7d6:	2000      	movs	r0, #0
	return list->head == list;
    a7d8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7da:	42a5      	cmp	r5, r4
    a7dc:	d000      	beq.n	a7e0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a7de:	b904      	cbnz	r4, a7e2 <z_unpend_all+0x10>
}
    a7e0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    a7e2:	4620      	mov	r0, r4
    a7e4:	f7ff ff51 	bl	a68a <z_unpend_thread>
		z_ready_thread(thread);
    a7e8:	4620      	mov	r0, r4
    a7ea:	f7ff ff7e 	bl	a6ea <z_ready_thread>
		need_sched = 1;
    a7ee:	2001      	movs	r0, #1
    a7f0:	e7f2      	b.n	a7d8 <z_unpend_all+0x6>

0000a7f2 <z_sched_wake>:
{
    a7f2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a7f4:	f04f 0320 	mov.w	r3, #32
    a7f8:	f3ef 8511 	mrs	r5, BASEPRI
    a7fc:	f383 8812 	msr	BASEPRI_MAX, r3
    a800:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    a804:	f7ff ff6b 	bl	a6de <z_priq_dumb_best>
		if (thread != NULL) {
    a808:	4604      	mov	r4, r0
    a80a:	b150      	cbz	r0, a822 <z_sched_wake+0x30>
    a80c:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    a80e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    a810:	f7ff ff31 	bl	a676 <unpend_thread_no_timeout>
    a814:	3018      	adds	r0, #24
    a816:	f000 f809 	bl	a82c <z_abort_timeout>
			ready_thread(thread);
    a81a:	4620      	mov	r0, r4
    a81c:	f7fd fd6e 	bl	82fc <ready_thread>
			ret = true;
    a820:	2001      	movs	r0, #1
	__asm__ volatile(
    a822:	f385 8811 	msr	BASEPRI, r5
    a826:	f3bf 8f6f 	isb	sy
}
    a82a:	bd38      	pop	{r3, r4, r5, pc}

0000a82c <z_abort_timeout>:
{
    a82c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a82e:	f04f 0220 	mov.w	r2, #32
    a832:	f3ef 8411 	mrs	r4, BASEPRI
    a836:	f382 8812 	msr	BASEPRI_MAX, r2
    a83a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a83e:	6803      	ldr	r3, [r0, #0]
    a840:	b13b      	cbz	r3, a852 <z_abort_timeout+0x26>
			remove_timeout(to);
    a842:	f7fe f809 	bl	8858 <remove_timeout>
			ret = 0;
    a846:	2000      	movs	r0, #0
	__asm__ volatile(
    a848:	f384 8811 	msr	BASEPRI, r4
    a84c:	f3bf 8f6f 	isb	sy
}
    a850:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a852:	f06f 0015 	mvn.w	r0, #21
    a856:	e7f7      	b.n	a848 <z_abort_timeout+0x1c>

0000a858 <z_get_next_timeout_expiry>:
{
    a858:	b510      	push	{r4, lr}
	__asm__ volatile(
    a85a:	f04f 0320 	mov.w	r3, #32
    a85e:	f3ef 8411 	mrs	r4, BASEPRI
    a862:	f383 8812 	msr	BASEPRI_MAX, r3
    a866:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a86a:	f7fd ffcf 	bl	880c <next_timeout>
	__asm__ volatile(
    a86e:	f384 8811 	msr	BASEPRI, r4
    a872:	f3bf 8f6f 	isb	sy
}
    a876:	bd10      	pop	{r4, pc}

0000a878 <z_set_timeout_expiry>:
{
    a878:	b570      	push	{r4, r5, r6, lr}
    a87a:	4604      	mov	r4, r0
    a87c:	460d      	mov	r5, r1
	__asm__ volatile(
    a87e:	f04f 0320 	mov.w	r3, #32
    a882:	f3ef 8611 	mrs	r6, BASEPRI
    a886:	f383 8812 	msr	BASEPRI_MAX, r3
    a88a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    a88e:	f7fd ffbd 	bl	880c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a892:	2801      	cmp	r0, #1
    a894:	dd05      	ble.n	a8a2 <z_set_timeout_expiry+0x2a>
    a896:	42a0      	cmp	r0, r4
    a898:	db03      	blt.n	a8a2 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a89a:	4629      	mov	r1, r5
    a89c:	4620      	mov	r0, r4
    a89e:	f7fa ffaf 	bl	5800 <sys_clock_set_timeout>
	__asm__ volatile(
    a8a2:	f386 8811 	msr	BASEPRI, r6
    a8a6:	f3bf 8f6f 	isb	sy
}
    a8aa:	bd70      	pop	{r4, r5, r6, pc}

0000a8ac <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a8ac:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a8ae:	f7fe f8c3 	bl	8a38 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a8b2:	bd08      	pop	{r3, pc}

0000a8b4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a8b4:	b108      	cbz	r0, a8ba <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a8b6:	f7f9 ba2d 	b.w	3d14 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a8ba:	4770      	bx	lr

0000a8bc <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a8bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a8c0:	bf08      	it	eq
    a8c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a8c6:	b538      	push	{r3, r4, r5, lr}
    a8c8:	4605      	mov	r5, r0
    a8ca:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a8cc:	d01d      	beq.n	a90a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a8ce:	ea51 0300 	orrs.w	r3, r1, r0
    a8d2:	d103      	bne.n	a8dc <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    a8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    a8d8:	f7fe b8ae 	b.w	8a38 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a8dc:	f06f 0301 	mvn.w	r3, #1
    a8e0:	1a18      	subs	r0, r3, r0
    a8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8e6:	eb63 0101 	sbc.w	r1, r3, r1
    a8ea:	2900      	cmp	r1, #0
    a8ec:	da0c      	bge.n	a908 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    a8ee:	f7fe f8a3 	bl	8a38 <sys_clock_tick_get>
    a8f2:	2d01      	cmp	r5, #1
    a8f4:	4622      	mov	r2, r4
    a8f6:	f174 0400 	sbcs.w	r4, r4, #0
    a8fa:	462b      	mov	r3, r5
    a8fc:	bfbc      	itt	lt
    a8fe:	2301      	movlt	r3, #1
    a900:	2200      	movlt	r2, #0
    a902:	1818      	adds	r0, r3, r0
    a904:	eb41 0102 	adc.w	r1, r1, r2
}
    a908:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    a90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a90e:	4601      	mov	r1, r0
    a910:	e7fa      	b.n	a908 <sys_clock_timeout_end_calc+0x4c>

0000a912 <k_free>:
	if (ptr != NULL) {
    a912:	b120      	cbz	r0, a91e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    a914:	1f01      	subs	r1, r0, #4
    a916:	f850 0c04 	ldr.w	r0, [r0, #-4]
    a91a:	f000 b84a 	b.w	a9b2 <k_heap_free>
}
    a91e:	4770      	bx	lr

0000a920 <k_heap_init>:
{
    a920:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    a922:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    a926:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a92a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a92c:	f7fe bd12 	b.w	9354 <sys_heap_init>

0000a930 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a934:	b085      	sub	sp, #20
    a936:	4606      	mov	r6, r0
    a938:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a93a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    a93e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a940:	f7ff ffbc 	bl	a8bc <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    a944:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a948:	4605      	mov	r5, r0
    a94a:	460f      	mov	r7, r1
	__asm__ volatile(
    a94c:	f04f 0320 	mov.w	r3, #32
    a950:	f3ef 8411 	mrs	r4, BASEPRI
    a954:	f383 8812 	msr	BASEPRI_MAX, r3
    a958:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a95c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    a960:	464a      	mov	r2, r9
    a962:	4641      	mov	r1, r8
    a964:	4630      	mov	r0, r6
    a966:	f7fe fc8d 	bl	9284 <sys_heap_aligned_alloc>
    a96a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    a96c:	f7fe f864 	bl	8a38 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    a970:	9b03      	ldr	r3, [sp, #12]
    a972:	b13b      	cbz	r3, a984 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    a974:	f384 8811 	msr	BASEPRI, r4
    a978:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    a97c:	4618      	mov	r0, r3
    a97e:	b005      	add	sp, #20
    a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    a984:	1a28      	subs	r0, r5, r0
    a986:	eb67 0101 	sbc.w	r1, r7, r1
    a98a:	2801      	cmp	r0, #1
    a98c:	f171 0200 	sbcs.w	r2, r1, #0
    a990:	dbf0      	blt.n	a974 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a992:	e9cd 0100 	strd	r0, r1, [sp]
    a996:	465a      	mov	r2, fp
    a998:	4621      	mov	r1, r4
    a99a:	4650      	mov	r0, sl
    a99c:	f7fd fd40 	bl	8420 <z_pend_curr>
	__asm__ volatile(
    a9a0:	f04f 0320 	mov.w	r3, #32
    a9a4:	f3ef 8411 	mrs	r4, BASEPRI
    a9a8:	f383 8812 	msr	BASEPRI_MAX, r3
    a9ac:	f3bf 8f6f 	isb	sy
    a9b0:	e7d6      	b.n	a960 <k_heap_aligned_alloc+0x30>

0000a9b2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    a9b2:	b538      	push	{r3, r4, r5, lr}
    a9b4:	4604      	mov	r4, r0
    a9b6:	f04f 0320 	mov.w	r3, #32
    a9ba:	f3ef 8511 	mrs	r5, BASEPRI
    a9be:	f383 8812 	msr	BASEPRI_MAX, r3
    a9c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    a9c6:	f7fe fc25 	bl	9214 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    a9ca:	f104 000c 	add.w	r0, r4, #12
    a9ce:	f7ff ff00 	bl	a7d2 <z_unpend_all>
    a9d2:	b130      	cbz	r0, a9e2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    a9d4:	4629      	mov	r1, r5
    a9d6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    a9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    a9de:	f7fd bbcd 	b.w	817c <z_reschedule>
	__asm__ volatile(
    a9e2:	f385 8811 	msr	BASEPRI, r5
    a9e6:	f3bf 8f6f 	isb	sy
}
    a9ea:	bd38      	pop	{r3, r4, r5, pc}

0000a9ec <memcpy>:
    a9ec:	440a      	add	r2, r1
    a9ee:	4291      	cmp	r1, r2
    a9f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a9f4:	d100      	bne.n	a9f8 <memcpy+0xc>
    a9f6:	4770      	bx	lr
    a9f8:	b510      	push	{r4, lr}
    a9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
    a9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
    aa02:	4291      	cmp	r1, r2
    aa04:	d1f9      	bne.n	a9fa <memcpy+0xe>
    aa06:	bd10      	pop	{r4, pc}

0000aa08 <__memcpy_chk>:
    aa08:	429a      	cmp	r2, r3
    aa0a:	b508      	push	{r3, lr}
    aa0c:	d901      	bls.n	aa12 <__memcpy_chk+0xa>
    aa0e:	f7f9 f95b 	bl	3cc8 <__chk_fail>
    aa12:	4281      	cmp	r1, r0
    aa14:	d804      	bhi.n	aa20 <__memcpy_chk+0x18>
    aa16:	188b      	adds	r3, r1, r2
    aa18:	4298      	cmp	r0, r3
    aa1a:	d3f8      	bcc.n	aa0e <__memcpy_chk+0x6>
    aa1c:	4281      	cmp	r1, r0
    aa1e:	d102      	bne.n	aa26 <__memcpy_chk+0x1e>
    aa20:	1883      	adds	r3, r0, r2
    aa22:	4299      	cmp	r1, r3
    aa24:	d3f3      	bcc.n	aa0e <__memcpy_chk+0x6>
    aa26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa2a:	f7ff bfdf 	b.w	a9ec <memcpy>

0000aa2e <memset>:
    aa2e:	4402      	add	r2, r0
    aa30:	4603      	mov	r3, r0
    aa32:	4293      	cmp	r3, r2
    aa34:	d100      	bne.n	aa38 <memset+0xa>
    aa36:	4770      	bx	lr
    aa38:	f803 1b01 	strb.w	r1, [r3], #1
    aa3c:	e7f9      	b.n	aa32 <memset+0x4>

0000aa3e <strnlen>:
    aa3e:	b510      	push	{r4, lr}
    aa40:	4602      	mov	r2, r0
    aa42:	4401      	add	r1, r0
    aa44:	428a      	cmp	r2, r1
    aa46:	4613      	mov	r3, r2
    aa48:	d003      	beq.n	aa52 <strnlen+0x14>
    aa4a:	781c      	ldrb	r4, [r3, #0]
    aa4c:	3201      	adds	r2, #1
    aa4e:	2c00      	cmp	r4, #0
    aa50:	d1f8      	bne.n	aa44 <strnlen+0x6>
    aa52:	1a18      	subs	r0, r3, r0
    aa54:	bd10      	pop	{r4, pc}
	...

0000aa58 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    aa58:	f7fa bf28 	b.w	58ac <SystemInit>
