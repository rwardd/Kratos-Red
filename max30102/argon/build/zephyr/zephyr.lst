
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 84 00 20 b1 61 00 00 9d 06 02 00 85 61 00 00     @.. .a.......a..
  10:	85 61 00 00 85 61 00 00 85 61 00 00 00 00 00 00     .a...a...a......
	...
  2c:	f9 5e 00 00 85 61 00 00 00 00 00 00 b1 5e 00 00     .^...a.......^..
  3c:	85 61 00 00                                         .a..

00000040 <_irq_vector_table>:
  40:	75 5f 00 00 fd 65 01 00 75 5f 00 00 75 5f 00 00     u_...e..u_..u_..
  50:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  60:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  70:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  80:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  90:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  a0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  b0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  c0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  d0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  e0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..
  f0:	75 5f 00 00 75 5f 00 00 75 5f 00 00 75 5f 00 00     u_..u_..u_..u_..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x13a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x126>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd0>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x11e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x106>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x15e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x17c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     8fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     900:	f000 b974 	b.w	bec <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	4688      	mov	r8, r1
     928:	2b00      	cmp	r3, #0
     92a:	d14d      	bne.n	9c8 <__udivmoddi4+0xac>
     92c:	428a      	cmp	r2, r1
     92e:	4694      	mov	ip, r2
     930:	d968      	bls.n	a04 <__data_size+0x3>
     932:	fab2 f282 	clz	r2, r2
     936:	b152      	cbz	r2, 94e <__udivmoddi4+0x32>
     938:	fa01 f302 	lsl.w	r3, r1, r2
     93c:	f1c2 0120 	rsb	r1, r2, #32
     940:	fa20 f101 	lsr.w	r1, r0, r1
     944:	fa0c fc02 	lsl.w	ip, ip, r2
     948:	ea41 0803 	orr.w	r8, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     952:	0c21      	lsrs	r1, r4, #16
     954:	fbb8 fef5 	udiv	lr, r8, r5
     958:	fa1f f78c 	uxth.w	r7, ip
     95c:	fb05 831e 	mls	r3, r5, lr, r8
     960:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     964:	fb0e f107 	mul.w	r1, lr, r7
     968:	4299      	cmp	r1, r3
     96a:	d90b      	bls.n	984 <__udivmoddi4+0x68>
     96c:	eb1c 0303 	adds.w	r3, ip, r3
     970:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     974:	f080 811e 	bcs.w	bb4 <__data_size+0x1b3>
     978:	4299      	cmp	r1, r3
     97a:	f240 811b 	bls.w	bb4 <__data_size+0x1b3>
     97e:	f1ae 0e02 	sub.w	lr, lr, #2
     982:	4463      	add	r3, ip
     984:	1a5b      	subs	r3, r3, r1
     986:	b2a4      	uxth	r4, r4
     988:	fbb3 f0f5 	udiv	r0, r3, r5
     98c:	fb05 3310 	mls	r3, r5, r0, r3
     990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     994:	fb00 f707 	mul.w	r7, r0, r7
     998:	42a7      	cmp	r7, r4
     99a:	d90a      	bls.n	9b2 <__udivmoddi4+0x96>
     99c:	eb1c 0404 	adds.w	r4, ip, r4
     9a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     9a4:	f080 8108 	bcs.w	bb8 <__data_size+0x1b7>
     9a8:	42a7      	cmp	r7, r4
     9aa:	f240 8105 	bls.w	bb8 <__data_size+0x1b7>
     9ae:	4464      	add	r4, ip
     9b0:	3802      	subs	r0, #2
     9b2:	1be4      	subs	r4, r4, r7
     9b4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     9b8:	2100      	movs	r1, #0
     9ba:	b11e      	cbz	r6, 9c4 <__udivmoddi4+0xa8>
     9bc:	40d4      	lsrs	r4, r2
     9be:	2300      	movs	r3, #0
     9c0:	e9c6 4300 	strd	r4, r3, [r6]
     9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c8:	428b      	cmp	r3, r1
     9ca:	d908      	bls.n	9de <__udivmoddi4+0xc2>
     9cc:	2e00      	cmp	r6, #0
     9ce:	f000 80ee 	beq.w	bae <__data_size+0x1ad>
     9d2:	2100      	movs	r1, #0
     9d4:	e9c6 0500 	strd	r0, r5, [r6]
     9d8:	4608      	mov	r0, r1
     9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9de:	fab3 f183 	clz	r1, r3
     9e2:	2900      	cmp	r1, #0
     9e4:	d14a      	bne.n	a7c <__data_size+0x7b>
     9e6:	42ab      	cmp	r3, r5
     9e8:	d302      	bcc.n	9f0 <__udivmoddi4+0xd4>
     9ea:	4282      	cmp	r2, r0
     9ec:	f200 80f9 	bhi.w	be2 <__data_size+0x1e1>
     9f0:	1a84      	subs	r4, r0, r2
     9f2:	eb65 0303 	sbc.w	r3, r5, r3
     9f6:	2001      	movs	r0, #1
     9f8:	4698      	mov	r8, r3
     9fa:	2e00      	cmp	r6, #0
     9fc:	d0e2      	beq.n	9c4 <__udivmoddi4+0xa8>
     9fe:	e9c6 4800 	strd	r4, r8, [r6]
     a02:	e7df      	b.n	9c4 <__udivmoddi4+0xa8>
     a04:	b902      	cbnz	r2, a08 <__data_size+0x7>
     a06:	deff      	udf	#255	; 0xff
     a08:	fab2 f282 	clz	r2, r2
     a0c:	2a00      	cmp	r2, #0
     a0e:	f040 8091 	bne.w	b34 <__data_size+0x133>
     a12:	eba1 050c 	sub.w	r5, r1, ip
     a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
     a1a:	fa1f fe8c 	uxth.w	lr, ip
     a1e:	2101      	movs	r1, #1
     a20:	fbb5 f3f7 	udiv	r3, r5, r7
     a24:	fb07 5013 	mls	r0, r7, r3, r5
     a28:	0c25      	lsrs	r5, r4, #16
     a2a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     a2e:	fb0e f003 	mul.w	r0, lr, r3
     a32:	42a8      	cmp	r0, r5
     a34:	d908      	bls.n	a48 <__data_size+0x47>
     a36:	eb1c 0505 	adds.w	r5, ip, r5
     a3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     a3e:	d202      	bcs.n	a46 <__data_size+0x45>
     a40:	42a8      	cmp	r0, r5
     a42:	f200 80cb 	bhi.w	bdc <__data_size+0x1db>
     a46:	4643      	mov	r3, r8
     a48:	1a2d      	subs	r5, r5, r0
     a4a:	b2a4      	uxth	r4, r4
     a4c:	fbb5 f0f7 	udiv	r0, r5, r7
     a50:	fb07 5510 	mls	r5, r7, r0, r5
     a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     a58:	fb0e fe00 	mul.w	lr, lr, r0
     a5c:	45a6      	cmp	lr, r4
     a5e:	d908      	bls.n	a72 <__data_size+0x71>
     a60:	eb1c 0404 	adds.w	r4, ip, r4
     a64:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     a68:	d202      	bcs.n	a70 <__data_size+0x6f>
     a6a:	45a6      	cmp	lr, r4
     a6c:	f200 80bb 	bhi.w	be6 <__data_size+0x1e5>
     a70:	4628      	mov	r0, r5
     a72:	eba4 040e 	sub.w	r4, r4, lr
     a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     a7a:	e79e      	b.n	9ba <__udivmoddi4+0x9e>
     a7c:	f1c1 0720 	rsb	r7, r1, #32
     a80:	408b      	lsls	r3, r1
     a82:	fa22 fc07 	lsr.w	ip, r2, r7
     a86:	ea4c 0c03 	orr.w	ip, ip, r3
     a8a:	fa20 f407 	lsr.w	r4, r0, r7
     a8e:	fa05 f301 	lsl.w	r3, r5, r1
     a92:	431c      	orrs	r4, r3
     a94:	40fd      	lsrs	r5, r7
     a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
     a9a:	fa00 f301 	lsl.w	r3, r0, r1
     a9e:	fbb5 f8f9 	udiv	r8, r5, r9
     aa2:	0c20      	lsrs	r0, r4, #16
     aa4:	fa1f fe8c 	uxth.w	lr, ip
     aa8:	fb09 5518 	mls	r5, r9, r8, r5
     aac:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     ab0:	fb08 f00e 	mul.w	r0, r8, lr
     ab4:	42a8      	cmp	r0, r5
     ab6:	fa02 f201 	lsl.w	r2, r2, r1
     aba:	d90b      	bls.n	ad4 <__data_size+0xd3>
     abc:	eb1c 0505 	adds.w	r5, ip, r5
     ac0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     ac4:	f080 8088 	bcs.w	bd8 <__data_size+0x1d7>
     ac8:	42a8      	cmp	r0, r5
     aca:	f240 8085 	bls.w	bd8 <__data_size+0x1d7>
     ace:	f1a8 0802 	sub.w	r8, r8, #2
     ad2:	4465      	add	r5, ip
     ad4:	1a2d      	subs	r5, r5, r0
     ad6:	b2a4      	uxth	r4, r4
     ad8:	fbb5 f0f9 	udiv	r0, r5, r9
     adc:	fb09 5510 	mls	r5, r9, r0, r5
     ae0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     ae4:	fb00 fe0e 	mul.w	lr, r0, lr
     ae8:	45ae      	cmp	lr, r5
     aea:	d908      	bls.n	afe <__data_size+0xfd>
     aec:	eb1c 0505 	adds.w	r5, ip, r5
     af0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     af4:	d26c      	bcs.n	bd0 <__data_size+0x1cf>
     af6:	45ae      	cmp	lr, r5
     af8:	d96a      	bls.n	bd0 <__data_size+0x1cf>
     afa:	3802      	subs	r0, #2
     afc:	4465      	add	r5, ip
     afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     b02:	fba0 9402 	umull	r9, r4, r0, r2
     b06:	eba5 050e 	sub.w	r5, r5, lr
     b0a:	42a5      	cmp	r5, r4
     b0c:	46c8      	mov	r8, r9
     b0e:	46a6      	mov	lr, r4
     b10:	d356      	bcc.n	bc0 <__data_size+0x1bf>
     b12:	d053      	beq.n	bbc <__data_size+0x1bb>
     b14:	b15e      	cbz	r6, b2e <__data_size+0x12d>
     b16:	ebb3 0208 	subs.w	r2, r3, r8
     b1a:	eb65 050e 	sbc.w	r5, r5, lr
     b1e:	fa05 f707 	lsl.w	r7, r5, r7
     b22:	fa22 f301 	lsr.w	r3, r2, r1
     b26:	40cd      	lsrs	r5, r1
     b28:	431f      	orrs	r7, r3
     b2a:	e9c6 7500 	strd	r7, r5, [r6]
     b2e:	2100      	movs	r1, #0
     b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b34:	f1c2 0320 	rsb	r3, r2, #32
     b38:	fa20 f103 	lsr.w	r1, r0, r3
     b3c:	fa0c fc02 	lsl.w	ip, ip, r2
     b40:	fa25 f303 	lsr.w	r3, r5, r3
     b44:	4095      	lsls	r5, r2
     b46:	430d      	orrs	r5, r1
     b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
     b4c:	fa1f fe8c 	uxth.w	lr, ip
     b50:	fbb3 f1f7 	udiv	r1, r3, r7
     b54:	fb07 3011 	mls	r0, r7, r1, r3
     b58:	0c2b      	lsrs	r3, r5, #16
     b5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b5e:	fb01 f00e 	mul.w	r0, r1, lr
     b62:	4298      	cmp	r0, r3
     b64:	fa04 f402 	lsl.w	r4, r4, r2
     b68:	d908      	bls.n	b7c <__data_size+0x17b>
     b6a:	eb1c 0303 	adds.w	r3, ip, r3
     b6e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     b72:	d22f      	bcs.n	bd4 <__data_size+0x1d3>
     b74:	4298      	cmp	r0, r3
     b76:	d92d      	bls.n	bd4 <__data_size+0x1d3>
     b78:	3902      	subs	r1, #2
     b7a:	4463      	add	r3, ip
     b7c:	1a1b      	subs	r3, r3, r0
     b7e:	b2ad      	uxth	r5, r5
     b80:	fbb3 f0f7 	udiv	r0, r3, r7
     b84:	fb07 3310 	mls	r3, r7, r0, r3
     b88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b8c:	fb00 f30e 	mul.w	r3, r0, lr
     b90:	42ab      	cmp	r3, r5
     b92:	d908      	bls.n	ba6 <__data_size+0x1a5>
     b94:	eb1c 0505 	adds.w	r5, ip, r5
     b98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     b9c:	d216      	bcs.n	bcc <__data_size+0x1cb>
     b9e:	42ab      	cmp	r3, r5
     ba0:	d914      	bls.n	bcc <__data_size+0x1cb>
     ba2:	3802      	subs	r0, #2
     ba4:	4465      	add	r5, ip
     ba6:	1aed      	subs	r5, r5, r3
     ba8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bac:	e738      	b.n	a20 <__data_size+0x1f>
     bae:	4631      	mov	r1, r6
     bb0:	4630      	mov	r0, r6
     bb2:	e707      	b.n	9c4 <__udivmoddi4+0xa8>
     bb4:	4686      	mov	lr, r0
     bb6:	e6e5      	b.n	984 <__udivmoddi4+0x68>
     bb8:	4618      	mov	r0, r3
     bba:	e6fa      	b.n	9b2 <__udivmoddi4+0x96>
     bbc:	454b      	cmp	r3, r9
     bbe:	d2a9      	bcs.n	b14 <__data_size+0x113>
     bc0:	ebb9 0802 	subs.w	r8, r9, r2
     bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
     bc8:	3801      	subs	r0, #1
     bca:	e7a3      	b.n	b14 <__data_size+0x113>
     bcc:	4640      	mov	r0, r8
     bce:	e7ea      	b.n	ba6 <__data_size+0x1a5>
     bd0:	4620      	mov	r0, r4
     bd2:	e794      	b.n	afe <__data_size+0xfd>
     bd4:	4641      	mov	r1, r8
     bd6:	e7d1      	b.n	b7c <__data_size+0x17b>
     bd8:	46d0      	mov	r8, sl
     bda:	e77b      	b.n	ad4 <__data_size+0xd3>
     bdc:	3b02      	subs	r3, #2
     bde:	4465      	add	r5, ip
     be0:	e732      	b.n	a48 <__data_size+0x47>
     be2:	4608      	mov	r0, r1
     be4:	e709      	b.n	9fa <__udivmoddi4+0xde>
     be6:	4464      	add	r4, ip
     be8:	3802      	subs	r0, #2
     bea:	e742      	b.n	a72 <__data_size+0x71>

00000bec <__aeabi_idiv0>:
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <maxim_heart_rate_and_oxygen_saturation>:
    * \param[out]    *pn_heart_rate          - Calculated heart rate value
    * \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
    *
    * \retval       None
    */
{
     bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf4:	b0bd      	sub	sp, #244	; 0xf4
     bf6:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal    
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     bf8:	2200      	movs	r2, #0
{
     bfa:	9305      	str	r3, [sp, #20]
     bfc:	4606      	mov	r6, r0
     bfe:	460d      	mov	r5, r1
    un_ir_mean = 0;
     c00:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     c02:	42aa      	cmp	r2, r5
     c04:	db41      	blt.n	c8a <maxim_heart_rate_and_oxygen_saturation+0x9a>
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
     c06:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)  an_x[k] = pun_ir_buffer[k] - un_ir_mean;
     c0a:	4c97      	ldr	r4, [pc, #604]	; (e68 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     c0c:	2200      	movs	r2, #0
     c0e:	4620      	mov	r0, r4
     c10:	42aa      	cmp	r2, r5
     c12:	db3f      	blt.n	c94 <maxim_heart_rate_and_oxygen_saturation+0xa4>
     c14:	4a94      	ldr	r2, [pc, #592]	; (e68 <maxim_heart_rate_and_oxygen_saturation+0x278>)

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c16:	2100      	movs	r1, #0
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
     c18:	6813      	ldr	r3, [r2, #0]
     c1a:	f852 0f04 	ldr.w	r0, [r2, #4]!
     c1e:	4403      	add	r3, r0
     c20:	6850      	ldr	r0, [r2, #4]
     c22:	4403      	add	r3, r0
     c24:	6890      	ldr	r0, [r2, #8]
        an_x[k] = n_denom / (int32_t)4;
     c26:	181b      	adds	r3, r3, r0
     c28:	bf48      	it	mi
     c2a:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
     c2c:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
     c2e:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c30:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
     c34:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     c38:	d1ee      	bne.n	c18 <maxim_heart_rate_and_oxygen_saturation+0x28>
     c3a:	498c      	ldr	r1, [pc, #560]	; (e6c <maxim_heart_rate_and_oxygen_saturation+0x27c>)
     c3c:	4f8a      	ldr	r7, [pc, #552]	; (e68 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     c3e:	468c      	mov	ip, r1
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c40:	2200      	movs	r2, #0
     c42:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
     c46:	463b      	mov	r3, r7
     c48:	6878      	ldr	r0, [r7, #4]
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	3201      	adds	r2, #1
     c4e:	1ac3      	subs	r3, r0, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c50:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
     c52:	f84c 3b04 	str.w	r3, [ip], #4
     c56:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
     c5a:	d1f4      	bne.n	c46 <maxim_heart_rate_and_oxygen_saturation+0x56>
     c5c:	4a83      	ldr	r2, [pc, #524]	; (e6c <maxim_heart_rate_and_oxygen_saturation+0x27c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c5e:	2000      	movs	r0, #0
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
     c60:	6813      	ldr	r3, [r2, #0]
     c62:	f852 7f04 	ldr.w	r7, [r2, #4]!
     c66:	443b      	add	r3, r7
     c68:	3001      	adds	r0, #1
     c6a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     c6e:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c70:	f5b0 7ff7 	cmp.w	r0, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
     c74:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c78:	d1f2      	bne.n	c60 <maxim_heart_rate_and_oxygen_saturation+0x70>
     c7a:	487c      	ldr	r0, [pc, #496]	; (e6c <maxim_heart_rate_and_oxygen_saturation+0x27c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     c7c:	2700      	movs	r7, #0
     c7e:	f8df e1f0 	ldr.w	lr, [pc, #496]	; e70 <maxim_heart_rate_and_oxygen_saturation+0x280>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
     c82:	4684      	mov	ip, r0
     c84:	2306      	movs	r3, #6
        s = 0;
     c86:	2200      	movs	r2, #0
     c88:	e012      	b.n	cb0 <maxim_heart_rate_and_oxygen_saturation+0xc0>
    for (k = 0; k < n_ir_buffer_length; k++) un_ir_mean += pun_ir_buffer[k];
     c8a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
     c8e:	3201      	adds	r2, #1
     c90:	440b      	add	r3, r1
     c92:	e7b6      	b.n	c02 <maxim_heart_rate_and_oxygen_saturation+0x12>
    for (k = 0; k < n_ir_buffer_length; k++)  an_x[k] = pun_ir_buffer[k] - un_ir_mean;
     c94:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
     c98:	1ac9      	subs	r1, r1, r3
     c9a:	f840 1b04 	str.w	r1, [r0], #4
     c9e:	3201      	adds	r2, #1
     ca0:	e7b6      	b.n	c10 <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE;k++) {
            s -= an_dx[k] * auw_hamm[k - i];
     ca2:	f85c ab04 	ldr.w	sl, [ip], #4
     ca6:	46d1      	mov	r9, sl
     ca8:	f83e ab02 	ldrh.w	sl, [lr], #2
     cac:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE;k++) {
     cb0:	3b01      	subs	r3, #1
     cb2:	d1f6      	bne.n	ca2 <maxim_heart_rate_and_oxygen_saturation+0xb2>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm 
     cb4:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     cb8:	3701      	adds	r7, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm 
     cba:	fb92 f2fc 	sdiv	r2, r2, ip
     cbe:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2;i++) {
     cc2:	f240 12e9 	movw	r2, #489	; 0x1e9
     cc6:	4297      	cmp	r7, r2
     cc8:	d1d9      	bne.n	c7e <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }


    n_th1 = 0; // threshold calculation
     cca:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     ccc:	f240 17ef 	movw	r7, #495	; 0x1ef
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     cd0:	f851 0b04 	ldr.w	r0, [r1], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     cd4:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     cd6:	2800      	cmp	r0, #0
     cd8:	bfb8      	it	lt
     cda:	4240      	neglt	r0, r0
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     cdc:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
     cde:	4402      	add	r2, r0
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE;k++) {
     ce0:	d1f6      	bne.n	cd0 <maxim_heart_rate_and_oxygen_saturation+0xe0>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5);//peak_height, peak_distance, max_num_peaks 
     ce2:	2108      	movs	r1, #8
     ce4:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
     ce6:	fbb2 f2f3 	udiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5);//peak_height, peak_distance, max_num_peaks 
     cea:	e9cd 1001 	strd	r1, r0, [sp, #4]
     cee:	9200      	str	r2, [sp, #0]
     cf0:	a909      	add	r1, sp, #36	; 0x24
     cf2:	4a5e      	ldr	r2, [pc, #376]	; (e6c <maxim_heart_rate_and_oxygen_saturation+0x27c>)
     cf4:	a82d      	add	r0, sp, #180	; 0xb4
     cf6:	f01e fcb6 	bl	1f666 <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2) {
     cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
     cfc:	2901      	cmp	r1, #1
     cfe:	f04f 0300 	mov.w	r3, #0
     d02:	dd38      	ble.n	d76 <maxim_heart_rate_and_oxygen_saturation+0x186>
     d04:	aa2d      	add	r2, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
     d06:	2701      	movs	r7, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d08:	4610      	mov	r0, r2
     d0a:	f8d2 c004 	ldr.w	ip, [r2, #4]
     d0e:	6800      	ldr	r0, [r0, #0]
        for (k = 1; k < n_npks; k++)
     d10:	3701      	adds	r7, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d12:	ebac 0000 	sub.w	r0, ip, r0
        for (k = 1; k < n_npks; k++)
     d16:	42b9      	cmp	r1, r7
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
     d18:	f102 0204 	add.w	r2, r2, #4
     d1c:	4403      	add	r3, r0
        for (k = 1; k < n_npks; k++)
     d1e:	d1f3      	bne.n	d08 <maxim_heart_rate_and_oxygen_saturation+0x118>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
     d20:	1e4a      	subs	r2, r1, #1
     d22:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum);// beats per minutes
     d26:	f241 7270 	movw	r2, #6000	; 0x1770
     d2a:	fb92 f3f3 	sdiv	r3, r2, r3
     d2e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
     d30:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
     d32:	2301      	movs	r3, #1
     d34:	9a48      	ldr	r2, [sp, #288]	; 0x120
     d36:	af0f      	add	r7, sp, #60	; 0x3c
     d38:	7013      	strb	r3, [r2, #0]
     d3a:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
     d3e:	4638      	mov	r0, r7
     d40:	2300      	movs	r3, #0
    else {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks;k++)
     d42:	4299      	cmp	r1, r3
     d44:	dc1b      	bgt.n	d7e <maxim_heart_rate_and_oxygen_saturation+0x18e>
     d46:	4b4b      	ldr	r3, [pc, #300]	; (e74 <maxim_heart_rate_and_oxygen_saturation+0x284>)
     d48:	4847      	ldr	r0, [pc, #284]	; (e68 <maxim_heart_rate_and_oxygen_saturation+0x278>)
     d4a:	469c      	mov	ip, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG. 
    for (k = 0; k < n_ir_buffer_length; k++) {
     d4c:	2200      	movs	r2, #0
     d4e:	4686      	mov	lr, r0
     d50:	42aa      	cmp	r2, r5
     d52:	db1b      	blt.n	d8c <maxim_heart_rate_and_oxygen_saturation+0x19c>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
     d54:	2200      	movs	r2, #0
    for (k = 0; k < n_npks;k++) {
     d56:	4616      	mov	r6, r2
                if (an_x[i] < n_c_min) {
                    if (un_only_once > 0) {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
     d58:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks;k++) {
     d5c:	42b1      	cmp	r1, r6
     d5e:	dc1f      	bgt.n	da0 <maxim_heart_rate_and_oxygen_saturation+0x1b0>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2) {
     d60:	2a01      	cmp	r2, #1
     d62:	dc3c      	bgt.n	dde <maxim_heart_rate_and_oxygen_saturation+0x1ee>
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
     d64:	9a05      	ldr	r2, [sp, #20]
     d66:	4b44      	ldr	r3, [pc, #272]	; (e78 <maxim_heart_rate_and_oxygen_saturation+0x288>)
     d68:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
     d6a:	2300      	movs	r3, #0
        n_ratio_average = an_ratio[n_middle_idx];

    if (n_ratio_average > 2 && n_ratio_average < 184) {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = (int32_t)-45.060 * n_ratio_average * n_ratio_average / 10000 + 30.354 * n_ratio_average / 100 + 94.845;
        *pch_spo2_valid = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
     d6c:	9a46      	ldr	r2, [sp, #280]	; 0x118
     d6e:	7013      	strb	r3, [r2, #0]
    }
    else {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
     d70:	b03d      	add	sp, #244	; 0xf4
     d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
     d76:	9847      	ldr	r0, [sp, #284]	; 0x11c
     d78:	4a3f      	ldr	r2, [pc, #252]	; (e78 <maxim_heart_rate_and_oxygen_saturation+0x288>)
     d7a:	6002      	str	r2, [r0, #0]
        *pch_hr_valid = 0;
     d7c:	e7da      	b.n	d34 <maxim_heart_rate_and_oxygen_saturation+0x144>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
     d7e:	f85c 2b04 	ldr.w	r2, [ip], #4
     d82:	3202      	adds	r2, #2
     d84:	f840 2b04 	str.w	r2, [r0], #4
    for (k = 0; k < n_npks;k++)
     d88:	3301      	adds	r3, #1
     d8a:	e7da      	b.n	d42 <maxim_heart_rate_and_oxygen_saturation+0x152>
        an_x[k] = pun_ir_buffer[k];
     d8c:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
     d90:	f840 9b04 	str.w	r9, [r0], #4
        an_y[k] = pun_red_buffer[k];
     d94:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
     d98:	f84c 9b04 	str.w	r9, [ip], #4
    for (k = 0; k < n_ir_buffer_length; k++) {
     d9c:	3201      	adds	r2, #1
     d9e:	e7d7      	b.n	d50 <maxim_heart_rate_and_oxygen_saturation+0x160>
        m = an_ir_valley_locs[k];
     da0:	f857 0b04 	ldr.w	r0, [r7], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0) {
     da4:	1f85      	subs	r5, r0, #6
     da6:	f5b5 7ff2 	cmp.w	r5, #484	; 0x1e4
     daa:	d20b      	bcs.n	dc4 <maxim_heart_rate_and_oxygen_saturation+0x1d4>
            for (i = m - 5;i < m + 5; i++)
     dac:	1f45      	subs	r5, r0, #5
        n_c_min = 16777216;//2^24;
     dae:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
     db2:	3005      	adds	r0, #5
        un_only_once = 1;
     db4:	f04f 0c01 	mov.w	ip, #1
            for (i = m - 5;i < m + 5; i++)
     db8:	4285      	cmp	r5, r0
     dba:	d105      	bne.n	dc8 <maxim_heart_rate_and_oxygen_saturation+0x1d8>
            if (un_only_once == 0)
     dbc:	f1bc 0f00 	cmp.w	ip, #0
     dc0:	d100      	bne.n	dc4 <maxim_heart_rate_and_oxygen_saturation+0x1d4>
                n_exact_ir_valley_locs_count++;
     dc2:	3201      	adds	r2, #1
    for (k = 0; k < n_npks;k++) {
     dc4:	3601      	adds	r6, #1
     dc6:	e7c9      	b.n	d5c <maxim_heart_rate_and_oxygen_saturation+0x16c>
                if (an_x[i] < n_c_min) {
     dc8:	f85e 9025 	ldr.w	r9, [lr, r5, lsl #2]
     dcc:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
     dce:	bfbe      	ittt	lt
     dd0:	f84a 5026 	strlt.w	r5, [sl, r6, lsl #2]
     dd4:	46c8      	movlt	r8, r9
     dd6:	f04f 0c00 	movlt.w	ip, #0
            for (i = m - 5;i < m + 5; i++)
     dda:	3501      	adds	r5, #1
     ddc:	e7ec      	b.n	db8 <maxim_heart_rate_and_oxygen_saturation+0x1c8>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     dde:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
     de0:	6821      	ldr	r1, [r4, #0]
     de2:	f854 0f04 	ldr.w	r0, [r4, #4]!
     de6:	4401      	add	r1, r0
     de8:	6860      	ldr	r0, [r4, #4]
     dea:	4408      	add	r0, r1
     dec:	68a1      	ldr	r1, [r4, #8]
     dee:	1841      	adds	r1, r0, r1
     df0:	bf48      	it	mi
     df2:	3103      	addmi	r1, #3
     df4:	1089      	asrs	r1, r1, #2
     df6:	f844 1c04 	str.w	r1, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     dfa:	6819      	ldr	r1, [r3, #0]
     dfc:	f853 0f04 	ldr.w	r0, [r3, #4]!
     e00:	4401      	add	r1, r0
     e02:	6858      	ldr	r0, [r3, #4]
     e04:	4401      	add	r1, r0
     e06:	6898      	ldr	r0, [r3, #8]
     e08:	1809      	adds	r1, r1, r0
     e0a:	bf48      	it	mi
     e0c:	3103      	addmi	r1, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
     e0e:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     e10:	1089      	asrs	r1, r1, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     e12:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
     e16:	f843 1c04 	str.w	r1, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
     e1a:	d1e1      	bne.n	de0 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
    for (k = 0; k < 5; k++) an_ratio[k] = 0;
     e1c:	2300      	movs	r3, #0
     e1e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
     e22:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
     e26:	ac1e      	add	r4, sp, #120	; 0x78
     e28:	930e      	str	r3, [sp, #56]	; 0x38
     e2a:	4621      	mov	r1, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE) {
     e2c:	f851 0b04 	ldr.w	r0, [r1], #4
     e30:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     e34:	dc96      	bgt.n	d64 <maxim_heart_rate_and_oxygen_saturation+0x174>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++) {
     e36:	3301      	adds	r3, #1
     e38:	429a      	cmp	r2, r3
     e3a:	d1f7      	bne.n	e2c <maxim_heart_rate_and_oxygen_saturation+0x23c>
    n_i_ratio_count = 0;
     e3c:	2100      	movs	r1, #0
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     e3e:	1e53      	subs	r3, r2, #1
     e40:	4d09      	ldr	r5, [pc, #36]	; (e68 <maxim_heart_rate_and_oxygen_saturation+0x278>)
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     e42:	4e0c      	ldr	r6, [pc, #48]	; (e74 <maxim_heart_rate_and_oxygen_saturation+0x284>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     e44:	9307      	str	r3, [sp, #28]
     e46:	468e      	mov	lr, r1
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10) {
     e48:	f8d4 c004 	ldr.w	ip, [r4, #4]
     e4c:	f854 0b04 	ldr.w	r0, [r4], #4
     e50:	ebac 0800 	sub.w	r8, ip, r0
     e54:	f1b8 0f0a 	cmp.w	r8, #10
     e58:	f10e 0e01 	add.w	lr, lr, #1
     e5c:	dd54      	ble.n	f08 <maxim_heart_rate_and_oxygen_saturation+0x318>
        n_x_dc_max = -16777216;
     e5e:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++) {
     e62:	4603      	mov	r3, r0
        n_y_dc_max = -16777216;
     e64:	46b9      	mov	r9, r7
     e66:	e017      	b.n	e98 <maxim_heart_rate_and_oxygen_saturation+0x2a8>
     e68:	20002018 	.word	0x20002018
     e6c:	20001858 	.word	0x20001858
     e70:	000261a4 	.word	0x000261a4
     e74:	200027e8 	.word	0x200027e8
     e78:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max) { n_x_dc_max = an_x[i];n_x_dc_max_idx = i; }
     e7c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
     e80:	42ba      	cmp	r2, r7
     e82:	bfc8      	it	gt
     e84:	4617      	movgt	r7, r2
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     e86:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max) { n_x_dc_max = an_x[i];n_x_dc_max_idx = i; }
     e8a:	bfc8      	it	gt
     e8c:	9306      	strgt	r3, [sp, #24]
                if (an_y[i] > n_y_dc_max) { n_y_dc_max = an_y[i];n_y_dc_max_idx = i; }
     e8e:	454a      	cmp	r2, r9
     e90:	bfc4      	itt	gt
     e92:	469b      	movgt	fp, r3
     e94:	4691      	movgt	r9, r2
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++) {
     e96:	3301      	adds	r3, #1
     e98:	459c      	cmp	ip, r3
     e9a:	dcef      	bgt.n	e7c <maxim_heart_rate_and_oxygen_saturation+0x28c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
     e9c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
     ea0:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
     ea4:	f8dd a018 	ldr.w	sl, [sp, #24]
     ea8:	1a9b      	subs	r3, r3, r2
     eaa:	ebaa 0a00 	sub.w	sl, sl, r0
     eae:	fb0a f303 	mul.w	r3, sl, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
     eb2:	fb93 f3f8 	sdiv	r3, r3, r8
     eb6:	4413      	add	r3, r2
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
     eb8:	f855 202b 	ldr.w	r2, [r5, fp, lsl #2]
     ebc:	1ad2      	subs	r2, r2, r3
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
     ebe:	fb09 f202 	mul.w	r2, r9, r2
     ec2:	ea4f 19e2 	mov.w	r9, r2, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
     ec6:	f1b9 0f00 	cmp.w	r9, #0
     eca:	dd1d      	ble.n	f08 <maxim_heart_rate_and_oxygen_saturation+0x318>
     ecc:	2904      	cmp	r1, #4
     ece:	dc1b      	bgt.n	f08 <maxim_heart_rate_and_oxygen_saturation+0x318>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
     ed0:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
     ed4:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
     ed8:	ebab 0000 	sub.w	r0, fp, r0
     edc:	1ad2      	subs	r2, r2, r3
     ede:	4350      	muls	r0, r2
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
     ee0:	fb90 f0f8 	sdiv	r0, r0, r8
     ee4:	4418      	add	r0, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
     ee6:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
     eea:	1a1b      	subs	r3, r3, r0
            n_nume = (n_y_ac * n_x_dc_max) >> 7; //prepare X100 to preserve floating value
     eec:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
     eee:	11ff      	asrs	r7, r7, #7
     ef0:	d00a      	beq.n	f08 <maxim_heart_rate_and_oxygen_saturation+0x318>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
     ef2:	ab3c      	add	r3, sp, #240	; 0xf0
     ef4:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
     ef8:	2364      	movs	r3, #100	; 0x64
     efa:	fb03 f207 	mul.w	r2, r3, r7
                n_i_ratio_count++;
     efe:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
     f00:	fb92 f2f9 	sdiv	r2, r2, r9
     f04:	f84c 2cc8 	str.w	r2, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
     f08:	9b07      	ldr	r3, [sp, #28]
     f0a:	459e      	cmp	lr, r3
     f0c:	db9c      	blt.n	e48 <maxim_heart_rate_and_oxygen_saturation+0x258>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
     f0e:	a80a      	add	r0, sp, #40	; 0x28
     f10:	f01e fb3f 	bl	1f592 <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
     f14:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
     f16:	2903      	cmp	r1, #3
     f18:	ea4f 0382 	mov.w	r3, r2, lsl #2
     f1c:	dd3a      	ble.n	f94 <maxim_heart_rate_and_oxygen_saturation+0x3a4>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
     f1e:	a93c      	add	r1, sp, #240	; 0xf0
     f20:	33f0      	adds	r3, #240	; 0xf0
     f22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     f26:	446b      	add	r3, sp
     f28:	f852 4ccc 	ldr.w	r4, [r2, #-204]
     f2c:	f853 3cc8 	ldr.w	r3, [r3, #-200]
     f30:	441c      	add	r4, r3
     f32:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
     f36:	1064      	asrs	r4, r4, #1
    if (n_ratio_average > 2 && n_ratio_average < 184) {
     f38:	1ee3      	subs	r3, r4, #3
     f3a:	2bb4      	cmp	r3, #180	; 0xb4
     f3c:	f63f af12 	bhi.w	d64 <maxim_heart_rate_and_oxygen_saturation+0x174>
        *pn_spo2 = (int32_t)-45.060 * n_ratio_average * n_ratio_average / 10000 + 30.354 * n_ratio_average / 100 + 94.845;
     f40:	f06f 002c 	mvn.w	r0, #44	; 0x2c
     f44:	fb04 f304 	mul.w	r3, r4, r4
     f48:	4343      	muls	r3, r0
     f4a:	f242 7010 	movw	r0, #10000	; 0x2710
     f4e:	fb93 f0f0 	sdiv	r0, r3, r0
     f52:	f7ff fa27 	bl	3a4 <__aeabi_i2d>
     f56:	4606      	mov	r6, r0
     f58:	4620      	mov	r0, r4
     f5a:	460f      	mov	r7, r1
     f5c:	f7ff fa22 	bl	3a4 <__aeabi_i2d>
     f60:	a30f      	add	r3, pc, #60	; (adr r3, fa0 <maxim_heart_rate_and_oxygen_saturation+0x3b0>)
     f62:	e9d3 2300 	ldrd	r2, r3, [r3]
     f66:	f7ff fa87 	bl	478 <__aeabi_dmul>
     f6a:	4b11      	ldr	r3, [pc, #68]	; (fb0 <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
     f6c:	2200      	movs	r2, #0
     f6e:	f7ff fbad 	bl	6cc <__aeabi_ddiv>
     f72:	4602      	mov	r2, r0
     f74:	460b      	mov	r3, r1
     f76:	4630      	mov	r0, r6
     f78:	4639      	mov	r1, r7
     f7a:	f7ff f8c7 	bl	10c <__adddf3>
     f7e:	a30a      	add	r3, pc, #40	; (adr r3, fa8 <maxim_heart_rate_and_oxygen_saturation+0x3b8>)
     f80:	e9d3 2300 	ldrd	r2, r3, [r3]
     f84:	f7ff f8c2 	bl	10c <__adddf3>
     f88:	f7ff fc88 	bl	89c <__aeabi_d2iz>
     f8c:	9b05      	ldr	r3, [sp, #20]
     f8e:	6018      	str	r0, [r3, #0]
        *pch_spo2_valid = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
     f90:	2301      	movs	r3, #1
     f92:	e6eb      	b.n	d6c <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_ratio_average = an_ratio[n_middle_idx];
     f94:	33f0      	adds	r3, #240	; 0xf0
     f96:	446b      	add	r3, sp
     f98:	f853 4cc8 	ldr.w	r4, [r3, #-200]
     f9c:	e7cc      	b.n	f38 <maxim_heart_rate_and_oxygen_saturation+0x348>
     f9e:	bf00      	nop
     fa0:	be76c8b4 	.word	0xbe76c8b4
     fa4:	403e5a9f 	.word	0x403e5a9f
     fa8:	7ae147ae 	.word	0x7ae147ae
     fac:	4057b614 	.word	0x4057b614
     fb0:	40590000 	.word	0x40590000
     fb4:	00000000 	.word	0x00000000

00000fb8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     fbc:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     fc0:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     fc2:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     fc4:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     fc6:	42a6      	cmp	r6, r4
{
     fc8:	4688      	mov	r8, r1
     fca:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     fcc:	d818      	bhi.n	1000 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     fce:	4d1c      	ldr	r5, [pc, #112]	; (1040 <ull_drift_ticks_get+0x88>)
     fd0:	fba3 0105 	umull	r0, r1, r3, r5
     fd4:	a318      	add	r3, pc, #96	; (adr r3, 1038 <ull_drift_ticks_get+0x80>)
     fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
     fda:	f7ff fc87 	bl	8ec <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     fde:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     fe0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     fe4:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     fe8:	a313      	add	r3, pc, #76	; (adr r3, 1038 <ull_drift_ticks_get+0x80>)
     fea:	e9d3 2300 	ldrd	r2, r3, [r3]
     fee:	fba4 0105 	umull	r0, r1, r4, r5
     ff2:	f7ff fc7b 	bl	8ec <__aeabi_uldivmod>
     ff6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     ffa:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1000:	4c0f      	ldr	r4, [pc, #60]	; (1040 <ull_drift_ticks_get+0x88>)
    1002:	a30d      	add	r3, pc, #52	; (adr r3, 1038 <ull_drift_ticks_get+0x80>)
    1004:	e9d3 2300 	ldrd	r2, r3, [r3]
    1008:	fba6 0104 	umull	r0, r1, r6, r4
    100c:	f7ff fc6e 	bl	8ec <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1010:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1014:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1018:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    101c:	a306      	add	r3, pc, #24	; (adr r3, 1038 <ull_drift_ticks_get+0x80>)
    101e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1022:	fba1 0104 	umull	r0, r1, r1, r4
    1026:	f7ff fc61 	bl	8ec <__aeabi_uldivmod>
    102a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    102e:	6038      	str	r0, [r7, #0]
}
    1030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1034:	f3af 8000 	nop.w
    1038:	1afd498d 	.word	0x1afd498d
    103c:	00000007 	.word	0x00000007
    1040:	3b9aca00 	.word	0x3b9aca00
    1044:	00000000 	.word	0x00000000

00001048 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    104c:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
    104e:	2800      	cmp	r0, #0
    1050:	f000 813c 	beq.w	12cc <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1054:	4cac      	ldr	r4, [pc, #688]	; (1308 <ll_adv_enable+0x2c0>)
    1056:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
    105a:	f016 0601 	ands.w	r6, r6, #1
    105e:	f040 813a 	bne.w	12d6 <ll_adv_enable+0x28e>
	ull_filter_adv_update(lll->filter_policy);
    1062:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
    1066:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1068:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    106c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    1070:	f014 fe5e 	bl	15d30 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1074:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1078:	0741      	lsls	r1, r0, #29
    107a:	d42d      	bmi.n	10d8 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    107c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1080:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1084:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1088:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    108c:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1090:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    1094:	f1b8 0f00 	cmp.w	r8, #0
    1098:	d011      	beq.n	10be <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    109a:	489b      	ldr	r0, [pc, #620]	; (1308 <ll_adv_enable+0x2c0>)
    109c:	4641      	mov	r1, r8
    109e:	f00e fa31 	bl	f504 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    10a2:	f898 3000 	ldrb.w	r3, [r8]
    10a6:	065a      	lsls	r2, r3, #25
    10a8:	d505      	bpl.n	10b6 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    10aa:	2106      	movs	r1, #6
    10ac:	f009 fa9c 	bl	a5e8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    10b0:	2800      	cmp	r0, #0
    10b2:	f000 81d3 	beq.w	145c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    10b6:	4894      	ldr	r0, [pc, #592]	; (1308 <ll_adv_enable+0x2c0>)
    10b8:	4649      	mov	r1, r9
    10ba:	f00e fa23 	bl	f504 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    10be:	f898 3000 	ldrb.w	r3, [r8]
    10c2:	f013 0f0e 	tst.w	r3, #14
    10c6:	f040 80ee 	bne.w	12a6 <ll_adv_enable+0x25e>
		if (lll->conn) {
    10ca:	6a23      	ldr	r3, [r4, #32]
    10cc:	b19b      	cbz	r3, 10f6 <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
    10ce:	260c      	movs	r6, #12
}
    10d0:	4630      	mov	r0, r6
    10d2:	b00f      	add	sp, #60	; 0x3c
    10d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    10d8:	4632      	mov	r2, r6
    10da:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    10de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    10e2:	f014 ffb7 	bl	16054 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    10e6:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    10e8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    10ec:	d0c6      	beq.n	107c <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
    10ee:	4630      	mov	r0, r6
    10f0:	f014 fe64 	bl	15dbc <ull_filter_rpa_update>
    10f4:	e7c2      	b.n	107c <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
    10f6:	f00d f8b5 	bl	e264 <ll_rx_link_alloc>
		if (!link) {
    10fa:	4682      	mov	sl, r0
    10fc:	2800      	cmp	r0, #0
    10fe:	f000 81b7 	beq.w	1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>
		node_rx = ll_rx_alloc();
    1102:	f00d f8bb 	bl	e27c <ll_rx_alloc>
		if (!node_rx) {
    1106:	4683      	mov	fp, r0
    1108:	2800      	cmp	r0, #0
    110a:	f000 81b6 	beq.w	147a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf2>
		conn = ll_conn_acquire();
    110e:	f00f faa9 	bl	10664 <ll_conn_acquire>
		if (!conn) {
    1112:	4605      	mov	r5, r0
    1114:	2800      	cmp	r0, #0
    1116:	f000 81ad 	beq.w	1474 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec>
		if (!conn_lll->link_tx_free) {
    111a:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1120:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    1122:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1126:	2800      	cmp	r0, #0
    1128:	f000 819e 	beq.w	1468 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    112c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1130:	f105 0164 	add.w	r1, r5, #100	; 0x64
    1134:	930b      	str	r3, [sp, #44]	; 0x2c
    1136:	f009 fa63 	bl	a600 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    113a:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    113e:	4b73      	ldr	r3, [pc, #460]	; (130c <ll_adv_enable+0x2c4>)
			conn_lll->phy_tx = PHY_1M;
    1140:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    1144:	f022 0207 	bic.w	r2, r2, #7
    1148:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    114c:	f042 0201 	orr.w	r2, r2, #1
    1150:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    1154:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    1158:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    115c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1160:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    1164:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    1168:	f022 0207 	bic.w	r2, r2, #7
    116c:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
    1170:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    1174:	f022 0207 	bic.w	r2, r2, #7
    1178:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
    117c:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
    1180:	f022 0207 	bic.w	r2, r2, #7
    1184:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1188:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
    118c:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    118e:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
    1192:	2206      	movs	r2, #6
    1194:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
    1198:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    119c:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    119e:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
    11a2:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    11a4:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    11a6:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    11aa:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    11ac:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    11b0:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
    11b4:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
    11b8:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    11bc:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
    11c0:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
    11c4:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    11c8:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    11cc:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
    11d0:	f00c fb06 	bl	d7e0 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    11d4:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    11d8:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    11dc:	f022 0203 	bic.w	r2, r2, #3
    11e0:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    11e4:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    11e8:	f8a5 7140 	strh.w	r7, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    11ec:	f022 0218 	bic.w	r2, r2, #24
    11f0:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    11f4:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
    11f8:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    11fc:	f022 0207 	bic.w	r2, r2, #7
    1200:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    1204:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
    1208:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
    120c:	f367 1245 	bfi	r2, r7, #5, #1
    1210:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    1214:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    1218:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
    121c:	f367 02c3 	bfi	r2, r7, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
    1220:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
    1224:	2100      	movs	r1, #0
    1226:	2000      	movs	r0, #0
    1228:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
    122c:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
    1230:	f885 70d9 	strb.w	r7, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
    1234:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
    1238:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    123c:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    1240:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1244:	f00f fd56 	bl	10cf4 <ull_conn_default_tx_octets_get>
    1248:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    124c:	f00f fd58 	bl	10d00 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1250:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    1254:	4a2e      	ldr	r2, [pc, #184]	; (1310 <ll_adv_enable+0x2c8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1256:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    125a:	400a      	ands	r2, r1
    125c:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1260:	f00f fd54 	bl	10d0c <ull_conn_default_phy_tx_get>
    1264:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    1268:	f360 0202 	bfi	r2, r0, #0, #3
    126c:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1270:	f00f fd52 	bl	10d18 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1276:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1278:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    127c:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1280:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    1284:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    1288:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    128c:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1290:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
    1294:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1296:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1298:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    129c:	f015 ff0c 	bl	170b8 <lll_clock_wait>
		if (err) {
    12a0:	2800      	cmp	r0, #0
    12a2:	f040 80dd 	bne.w	1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>
	uint8_t ch_map = lll->chan_map;
    12a6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    12aa:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    12ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    12b0:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    12b4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    12b8:	f009 fb22 	bl	a900 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    12bc:	bb50      	cbnz	r0, 1314 <ll_adv_enable+0x2cc>
	if (adv->lll.conn) {
    12be:	6a23      	ldr	r3, [r4, #32]
    12c0:	2b00      	cmp	r3, #0
    12c2:	f43f af04 	beq.w	10ce <ll_adv_enable+0x86>
		conn_release(adv);
    12c6:	f00d fddf 	bl	ee88 <conn_release.constprop.0>
    12ca:	e700      	b.n	10ce <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
    12cc:	4b0e      	ldr	r3, [pc, #56]	; (1308 <ll_adv_enable+0x2c0>)
    12ce:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    12d2:	07d4      	lsls	r4, r2, #31
    12d4:	d404      	bmi.n	12e0 <ll_adv_enable+0x298>
			return 0;
    12d6:	2600      	movs	r6, #0
}
    12d8:	4630      	mov	r0, r6
    12da:	b00f      	add	sp, #60	; 0x3c
    12dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (adv->lll.conn) {
    12e0:	6a1a      	ldr	r2, [r3, #32]
    12e2:	b15a      	cbz	r2, 12fc <ll_adv_enable+0x2b4>
		adv->lll.conn->periph.cancelled = 1U;
    12e4:	f892 1020 	ldrb.w	r1, [r2, #32]
    12e8:	f041 0102 	orr.w	r1, r1, #2
    12ec:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    12f0:	6a1b      	ldr	r3, [r3, #32]
    12f2:	f893 3020 	ldrb.w	r3, [r3, #32]
    12f6:	07d8      	lsls	r0, r3, #31
    12f8:	f53f aee9 	bmi.w	10ce <ll_adv_enable+0x86>
}
    12fc:	b00f      	add	sp, #60	; 0x3c
    12fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1302:	f00d be03 	b.w	ef0c <disable.part.0>
    1306:	bf00      	nop
    1308:	20004b7c 	.word	0x20004b7c
    130c:	01480148 	.word	0x01480148
    1310:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    1314:	f899 1001 	ldrb.w	r1, [r9, #1]
    1318:	4602      	mov	r2, r0
    131a:	4640      	mov	r0, r8
    131c:	f00d fea6 	bl	f06c <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1320:	495b      	ldr	r1, [pc, #364]	; (1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>)
	uint16_t interval = adv->interval;
    1322:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
    1326:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
    1328:	2331      	movs	r3, #49	; 0x31
    132a:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    132c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1330:	a355      	add	r3, pc, #340	; (adr r3, 1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>)
    1332:	e9d3 2300 	ldrd	r2, r3, [r3]
    1336:	fba0 0101 	umull	r0, r1, r0, r1
	hdr->ref = 0U;
    133a:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    133c:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    133e:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1340:	f7ff fad4 	bl	8ec <__aeabi_uldivmod>
    1344:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    1346:	f00a fce5 	bl	bd14 <ticker_ticks_now_get>
    134a:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    134c:	f1b9 0f00 	cmp.w	r9, #0
    1350:	d108      	bne.n	1364 <ll_adv_enable+0x31c>
    1352:	f898 5000 	ldrb.w	r5, [r8]
    1356:	f005 050f 	and.w	r5, r5, #15
    135a:	f1a5 0501 	sub.w	r5, r5, #1
    135e:	fab5 f585 	clz	r5, r5
    1362:	096d      	lsrs	r5, r5, #5
    1364:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1368:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    136c:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1370:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    1374:	d032      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    1376:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1378:	4a46      	ldr	r2, [pc, #280]	; (1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>)
    137a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>
    137e:	9304      	str	r3, [sp, #16]
    1380:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1382:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1384:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    1388:	9301      	str	r3, [sp, #4]
    138a:	9205      	str	r2, [sp, #20]
    138c:	2103      	movs	r1, #3
    138e:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1392:	9406      	str	r4, [sp, #24]
    1394:	463b      	mov	r3, r7
    1396:	9000      	str	r0, [sp, #0]
    1398:	f8cd 8020 	str.w	r8, [sp, #32]
    139c:	f8cd 901c 	str.w	r9, [sp, #28]
    13a0:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    13a2:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13a4:	f00a fb8c 	bl	bac0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    13a8:	4641      	mov	r1, r8
    13aa:	f00c ffeb 	bl	e384 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    13ae:	2800      	cmp	r0, #0
    13b0:	d185      	bne.n	12be <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13b2:	4a3a      	ldr	r2, [pc, #232]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    13b4:	9205      	str	r2, [sp, #20]
    13b6:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    13ba:	9200      	str	r2, [sp, #0]
    13bc:	e9cd 0003 	strd	r0, r0, [sp, #12]
    13c0:	e9cd 0001 	strd	r0, r0, [sp, #4]
    13c4:	f8cd 901c 	str.w	r9, [sp, #28]
    13c8:	f8cd 8020 	str.w	r8, [sp, #32]
    13cc:	9406      	str	r4, [sp, #24]
    13ce:	463b      	mov	r3, r7
    13d0:	2201      	movs	r2, #1
    13d2:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    13d4:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13d6:	f00a fb73 	bl	bac0 <ticker_start>
    13da:	e02a      	b.n	1432 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa>
		ret = ticker_start_ext(
    13dc:	9406      	str	r4, [sp, #24]
    13de:	9502      	str	r5, [sp, #8]
		const uint32_t ticks_slot = adv->ull.ticks_slot +
    13e0:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    13e2:	4a2f      	ldr	r2, [pc, #188]	; (14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    13e4:	482f      	ldr	r0, [pc, #188]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
		ret = ticker_start_ext(
    13e6:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    13e8:	f203 1347 	addw	r3, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    13ec:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    13ee:	fba9 0100 	umull	r0, r1, r9, r0
    13f2:	2391      	movs	r3, #145	; 0x91
    13f4:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    13f8:	4b27      	ldr	r3, [pc, #156]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    13fa:	9307      	str	r3, [sp, #28]
    13fc:	4b25      	ldr	r3, [pc, #148]	; (1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>)
    13fe:	9305      	str	r3, [sp, #20]
    1400:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1404:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1406:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    140a:	9303      	str	r3, [sp, #12]
    140c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1410:	a31d      	add	r3, pc, #116	; (adr r3, 1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>)
    1412:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1416:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    141a:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    141e:	f7ff fa65 	bl	8ec <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1422:	463b      	mov	r3, r7
    1424:	e9cd 5000 	strd	r5, r0, [sp]
    1428:	464a      	mov	r2, r9
    142a:	4628      	mov	r0, r5
    142c:	2103      	movs	r1, #3
    142e:	f00a faf1 	bl	ba14 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1432:	4641      	mov	r1, r8
    1434:	f00c ffa6 	bl	e384 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1438:	2800      	cmp	r0, #0
    143a:	f47f af40 	bne.w	12be <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    143e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1442:	f043 0301 	orr.w	r3, r3, #1
    1446:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    144a:	f00e fa3f 	bl	f8cc <ull_scan_is_enabled_get>
    144e:	2800      	cmp	r0, #0
    1450:	f47f af41 	bne.w	12d6 <ll_adv_enable+0x28e>
		ull_filter_adv_scan_state_cb(BIT(0));
    1454:	2001      	movs	r0, #1
    1456:	f014 fc4d 	bl	15cf4 <ull_filter_adv_scan_state_cb>
    145a:	e639      	b.n	10d0 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
    145c:	2612      	movs	r6, #18
    145e:	e637      	b.n	10d0 <ll_adv_enable+0x88>
			conn_release(adv);
    1460:	f00d fd12 	bl	ee88 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1464:	2603      	movs	r6, #3
    1466:	e633      	b.n	10d0 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1468:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    146c:	6768      	str	r0, [r5, #116]	; 0x74
    146e:	e65d      	b.n	112c <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1470:	2607      	movs	r6, #7
    1472:	e62d      	b.n	10d0 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1474:	4658      	mov	r0, fp
    1476:	f00c ff07 	bl	e288 <ll_rx_release>
			ll_rx_link_release(link);
    147a:	4650      	mov	r0, sl
    147c:	f00c fef8 	bl	e270 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1480:	2607      	movs	r6, #7
    1482:	e625      	b.n	10d0 <ll_adv_enable+0x88>
    1484:	f3af 8000 	nop.w
    1488:	1afd498d 	.word	0x1afd498d
    148c:	00000007 	.word	0x00000007
    1490:	3b9aca00 	.word	0x3b9aca00
    1494:	0000f0e5 	.word	0x0000f0e5
    1498:	0000d8ad 	.word	0x0000d8ad
    149c:	0000ec11 	.word	0x0000ec11
    14a0:	20004bf0 	.word	0x20004bf0
    14a4:	84e72a00 	.word	0x84e72a00

000014a8 <ull_adv_time_update>:
{
    14a8:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    14aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    14ae:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    14b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    14b4:	460d      	mov	r5, r1
    14b6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    14b8:	2101      	movs	r1, #1
    14ba:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    14be:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    14c0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    14c4:	f009 fa1c 	bl	a900 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    14c8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    14ca:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    14cc:	4628      	mov	r0, r5
    14ce:	f00d fdcd 	bl	f06c <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    14d2:	491d      	ldr	r1, [pc, #116]	; (1548 <ull_adv_time_update+0xa0>)
    14d4:	a31a      	add	r3, pc, #104	; (adr r3, 1540 <ull_adv_time_update+0x98>)
    14d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14da:	fba0 0101 	umull	r0, r1, r0, r1
    14de:	f7ff fa05 	bl	8ec <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    14e2:	6923      	ldr	r3, [r4, #16]
    14e4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    14e6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    14e8:	d220      	bcs.n	152c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    14ea:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    14ec:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    14ee:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    14f0:	4a16      	ldr	r2, [pc, #88]	; (154c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    14f2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    14f4:	4b16      	ldr	r3, [pc, #88]	; (1550 <ull_adv_time_update+0xa8>)
    14f6:	1aa2      	subs	r2, r4, r2
    14f8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    14fc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    14fe:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1500:	2300      	movs	r3, #0
    1502:	440a      	add	r2, r1
    1504:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    1506:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1508:	4912      	ldr	r1, [pc, #72]	; (1554 <ull_adv_time_update+0xac>)
    150a:	9105      	str	r1, [sp, #20]
    150c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1510:	2103      	movs	r1, #3
    1512:	b2d2      	uxtb	r2, r2
    1514:	9606      	str	r6, [sp, #24]
    1516:	9300      	str	r3, [sp, #0]
    1518:	4618      	mov	r0, r3
    151a:	f00a fb43 	bl	bba4 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    151e:	4631      	mov	r1, r6
    1520:	f00c ff30 	bl	e384 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1524:	b948      	cbnz	r0, 153a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    1526:	6125      	str	r5, [r4, #16]
}
    1528:	b00a      	add	sp, #40	; 0x28
    152a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    152c:	d902      	bls.n	1534 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    152e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    1530:	2300      	movs	r3, #0
    1532:	e7dc      	b.n	14ee <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    1534:	2000      	movs	r0, #0
}
    1536:	b00a      	add	sp, #40	; 0x28
    1538:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    153a:	200c      	movs	r0, #12
}
    153c:	b00a      	add	sp, #40	; 0x28
    153e:	bd70      	pop	{r4, r5, r6, pc}
    1540:	1afd498d 	.word	0x1afd498d
    1544:	00000007 	.word	0x00000007
    1548:	3b9aca00 	.word	0x3b9aca00
    154c:	20004b7c 	.word	0x20004b7c
    1550:	8d3dcb09 	.word	0x8d3dcb09
    1554:	0000d8ad 	.word	0x0000d8ad

00001558 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1558:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    155a:	4c19      	ldr	r4, [pc, #100]	; (15c0 <ll_scan_params_set+0x68>)
{
    155c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1560:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    1564:	f01c 0501 	ands.w	r5, ip, #1
    1568:	d122      	bne.n	15b0 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    156a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    156e:	0140      	lsls	r0, r0, #5
    1570:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    1574:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    1576:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    157a:	f00e 0e18 	and.w	lr, lr, #24
    157e:	f000 0020 	and.w	r0, r0, #32
    1582:	ea40 000e 	orr.w	r0, r0, lr
    1586:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    158a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    158c:	480d      	ldr	r0, [pc, #52]	; (15c4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    158e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1592:	fba2 0100 	umull	r0, r1, r2, r0
    1596:	2391      	movs	r3, #145	; 0x91
    1598:	fb03 1102 	mla	r1, r3, r2, r1
    159c:	a306      	add	r3, pc, #24	; (adr r3, 15b8 <ll_scan_params_set+0x60>)
    159e:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    15a2:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    15a6:	f7ff f9a1 	bl	8ec <__aeabi_uldivmod>
    15aa:	6420      	str	r0, [r4, #64]	; 0x40
}
    15ac:	4628      	mov	r0, r5
    15ae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    15b0:	250c      	movs	r5, #12
}
    15b2:	4628      	mov	r0, r5
    15b4:	bd38      	pop	{r3, r4, r5, pc}
    15b6:	bf00      	nop
    15b8:	1afd498d 	.word	0x1afd498d
    15bc:	00000007 	.word	0x00000007
    15c0:	20004c14 	.word	0x20004c14
    15c4:	84e72a00 	.word	0x84e72a00

000015c8 <ull_scan_params_set>:
{
    15c8:	b510      	push	{r4, lr}
    15ca:	f89d c008 	ldrb.w	ip, [sp, #8]
    15ce:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    15d0:	0149      	lsls	r1, r1, #5
    15d2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    15d6:	f000 0018 	and.w	r0, r0, #24
    15da:	f001 0c20 	and.w	ip, r1, #32
    15de:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    15e0:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    15e2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    15e6:	480c      	ldr	r0, [pc, #48]	; (1618 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    15e8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    15ec:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    15f0:	2291      	movs	r2, #145	; 0x91
    15f2:	fba3 0100 	umull	r0, r1, r3, r0
    15f6:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    15fa:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    15fe:	a304      	add	r3, pc, #16	; (adr r3, 1610 <ull_scan_params_set+0x48>)
    1600:	e9d3 2300 	ldrd	r2, r3, [r3]
    1604:	f7ff f972 	bl	8ec <__aeabi_uldivmod>
    1608:	6260      	str	r0, [r4, #36]	; 0x24
}
    160a:	bd10      	pop	{r4, pc}
    160c:	f3af 8000 	nop.w
    1610:	1afd498d 	.word	0x1afd498d
    1614:	00000007 	.word	0x00000007
    1618:	84e72a00 	.word	0x84e72a00
    161c:	00000000 	.word	0x00000000

00001620 <ull_scan_enable>:
{
    1620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1624:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1626:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    162a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    162e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    1632:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1636:	f360 1386 	bfi	r3, r0, #6, #1
{
    163a:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    163c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1640:	f00a fba0 	bl	bd84 <ll_addr_read>
	lll->chan = 0U;
    1644:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1648:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    164a:	484d      	ldr	r0, [pc, #308]	; (1780 <ull_scan_enable+0x160>)
    164c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    164e:	f002 0279 	and.w	r2, r2, #121	; 0x79
    1652:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1654:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1658:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    165c:	2291      	movs	r2, #145	; 0x91
    165e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1662:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1666:	a344      	add	r3, pc, #272	; (adr r3, 1778 <ull_scan_enable+0x158>)
    1668:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    166c:	7025      	strb	r5, [r4, #0]
    166e:	f7ff f93d 	bl	8ec <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1672:	2331      	movs	r3, #49	; 0x31
    1674:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1678:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    167a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    167c:	3309      	adds	r3, #9
	    (ticks_interval -
    167e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1682:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1684:	bf32      	itee	cc
    1686:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1688:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    168a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    168c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    168e:	f00a fb41 	bl	bd14 <ticker_ticks_now_get>
	if (!lll->conn) {
    1692:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1694:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1696:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    169a:	2b00      	cmp	r3, #0
    169c:	d04c      	beq.n	1738 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    169e:	4d39      	ldr	r5, [pc, #228]	; (1784 <ull_scan_enable+0x164>)
    16a0:	4b39      	ldr	r3, [pc, #228]	; (1788 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16a2:	f8cd 8020 	str.w	r8, [sp, #32]
    16a6:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    16a8:	1b65      	subs	r5, r4, r5
    16aa:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    16ae:	4834      	ldr	r0, [pc, #208]	; (1780 <ull_scan_enable+0x160>)
    16b0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16b2:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    16b6:	fba3 0100 	umull	r0, r1, r3, r0
    16ba:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16bc:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    16c0:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16c4:	6923      	ldr	r3, [r4, #16]
    16c6:	9304      	str	r3, [sp, #16]
    16c8:	4b30      	ldr	r3, [pc, #192]	; (178c <ull_scan_enable+0x16c>)
    16ca:	9307      	str	r3, [sp, #28]
    16cc:	4b30      	ldr	r3, [pc, #192]	; (1790 <ull_scan_enable+0x170>)
    16ce:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    16d0:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    16d4:	a328      	add	r3, pc, #160	; (adr r3, 1778 <ull_scan_enable+0x158>)
    16d6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    16da:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    16de:	f7ff f905 	bl	8ec <__aeabi_uldivmod>
    16e2:	4610      	mov	r0, r2
    16e4:	4619      	mov	r1, r3
    16e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16ea:	2300      	movs	r3, #0
    16ec:	f7ff f8fe 	bl	8ec <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    16f0:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16f2:	3504      	adds	r5, #4
    16f4:	b2ed      	uxtb	r5, r5
    16f6:	462a      	mov	r2, r5
    16f8:	e9cd 6001 	strd	r6, r0, [sp, #4]
    16fc:	463b      	mov	r3, r7
    16fe:	2103      	movs	r1, #3
    1700:	f8cd a000 	str.w	sl, [sp]
    1704:	4650      	mov	r0, sl
    1706:	f00a f9db 	bl	bac0 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    170a:	4641      	mov	r1, r8
    170c:	f00c fe3a 	bl	e384 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1710:	4605      	mov	r5, r0
    1712:	b968      	cbnz	r0, 1730 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
    1714:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1718:	f043 0301 	orr.w	r3, r3, #1
    171c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    1720:	f00d fec6 	bl	f4b0 <ull_adv_is_enabled_get>
    1724:	4604      	mov	r4, r0
    1726:	b1f8      	cbz	r0, 1768 <ull_scan_enable+0x148>
	return 0;
    1728:	4628      	mov	r0, r5
}
    172a:	b00c      	add	sp, #48	; 0x30
    172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1730:	200c      	movs	r0, #12
}
    1732:	b00c      	add	sp, #48	; 0x30
    1734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1738:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    173c:	6921      	ldr	r1, [r4, #16]
    173e:	4643      	mov	r3, r8
    1740:	aa0a      	add	r2, sp, #40	; 0x28
    1742:	2003      	movs	r0, #3
    1744:	f001 f99c 	bl	2a80 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1748:	990b      	ldr	r1, [sp, #44]	; 0x2c
    174a:	2900      	cmp	r1, #0
    174c:	d0a7      	beq.n	169e <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    174e:	4811      	ldr	r0, [pc, #68]	; (1794 <ull_scan_enable+0x174>)
    1750:	a309      	add	r3, pc, #36	; (adr r3, 1778 <ull_scan_enable+0x158>)
    1752:	e9d3 2300 	ldrd	r2, r3, [r3]
    1756:	fba1 0100 	umull	r0, r1, r1, r0
    175a:	f7ff f8c7 	bl	8ec <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    175e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1760:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1764:	4407      	add	r7, r0
    1766:	e79a      	b.n	169e <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
    1768:	4648      	mov	r0, r9
    176a:	f014 fac3 	bl	15cf4 <ull_filter_adv_scan_state_cb>
	return 0;
    176e:	4620      	mov	r0, r4
}
    1770:	b00c      	add	sp, #48	; 0x30
    1772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1776:	bf00      	nop
    1778:	1afd498d 	.word	0x1afd498d
    177c:	00000007 	.word	0x00000007
    1780:	84e72a00 	.word	0x84e72a00
    1784:	20004c14 	.word	0x20004c14
    1788:	38e38e39 	.word	0x38e38e39
    178c:	0000d8ad 	.word	0x0000d8ad
    1790:	0000f6c5 	.word	0x0000f6c5
    1794:	3b9aca00 	.word	0x3b9aca00

00001798 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    179c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    179e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
    17a0:	441d      	add	r5, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    17a2:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    17a6:	b2ad      	uxth	r5, r5
    17a8:	4429      	add	r1, r5
{
    17aa:	4616      	mov	r6, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    17ac:	f013 0207 	ands.w	r2, r3, #7
{
    17b0:	b08b      	sub	sp, #44	; 0x2c
    17b2:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    17b4:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    17b6:	d00a      	beq.n	17ce <event_conn_upd_prep+0x36>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
    17b8:	1e53      	subs	r3, r2, #1
    17ba:	2b04      	cmp	r3, #4
    17bc:	f200 8378 	bhi.w	1eb0 <event_conn_upd_prep+0x718>
    17c0:	e8df f013 	tbh	[pc, r3, lsl #1]
    17c4:	023701c6 	.word	0x023701c6
    17c8:	014f01a0 	.word	0x014f01a0
    17cc:	023a      	.short	0x023a
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    17ce:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    17d2:	1bc9      	subs	r1, r1, r7
    17d4:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    17d8:	0409      	lsls	r1, r1, #16
    17da:	f100 816d 	bmi.w	1ab8 <event_conn_upd_prep+0x320>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    17de:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    17e2:	2b00      	cmp	r3, #0
    17e4:	f2c0 826c 	blt.w	1cc0 <event_conn_upd_prep+0x528>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    17e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    17ec:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    17f0:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    17f4:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    17f8:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    17fc:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1800:	4293      	cmp	r3, r2
    1802:	d00a      	beq.n	181a <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1804:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1808:	f003 030f 	and.w	r3, r3, #15
    180c:	2b06      	cmp	r3, #6
    180e:	d104      	bne.n	181a <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1810:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1812:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1816:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
    181a:	4bbf      	ldr	r3, [pc, #764]	; (1b18 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    181c:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    1820:	681a      	ldr	r2, [r3, #0]
    1822:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1824:	bf04      	itt	eq
    1826:	2200      	moveq	r2, #0
    1828:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    182a:	f1b9 0f00 	cmp.w	r9, #0
    182e:	f000 8159 	beq.w	1ae4 <event_conn_upd_prep+0x34c>
    1832:	f8d9 0000 	ldr.w	r0, [r9]
    1836:	2800      	cmp	r0, #0
    1838:	f000 8154 	beq.w	1ae4 <event_conn_upd_prep+0x34c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    183c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    183e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		conn->llcp_rx = rx->hdr.link->mem;
    1842:	6841      	ldr	r1, [r0, #4]
    1844:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1848:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    184a:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		if ((conn->llcp_cu.interval != lll->interval) ||
    184e:	f000 823f 	beq.w	1cd0 <event_conn_upd_prep+0x538>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1852:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1856:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    185a:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    185e:	2318      	movs	r3, #24
    1860:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
    1864:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1866:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
    186a:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
    186e:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
    1872:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1876:	4649      	mov	r1, r9
    1878:	f00c fd0c 	bl	e294 <ll_rx_put>
		ll_rx_sched();
    187c:	f00c fd14 	bl	e2a8 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1880:	68a3      	ldr	r3, [r4, #8]
    1882:	2b00      	cmp	r3, #0
    1884:	da09      	bge.n	189a <event_conn_upd_prep+0x102>
			uint32_t ticks_prepare_to_start =
    1886:	68e1      	ldr	r1, [r4, #12]
    1888:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    188a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    188e:	4291      	cmp	r1, r2
    1890:	bf2c      	ite	cs
    1892:	1876      	addcs	r6, r6, r1
    1894:	18b6      	addcc	r6, r6, r2
    1896:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1898:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    189a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    189c:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    18a0:	fb10 f008 	smulbb	r0, r0, r8
    18a4:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    18a6:	fbb0 f1f9 	udiv	r1, r0, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
    18aa:	fb19 f301 	smulbb	r3, r9, r1
    18ae:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    18b0:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    18b2:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    18b6:	f080 8104 	bcs.w	1ac2 <event_conn_upd_prep+0x32a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    18ba:	1a1b      	subs	r3, r3, r0
    18bc:	f240 41e2 	movw	r1, #1250	; 0x4e2
    18c0:	4896      	ldr	r0, [pc, #600]	; (1b1c <event_conn_upd_prep+0x384>)
    18c2:	fb03 f101 	mul.w	r1, r3, r1
    18c6:	fba1 0100 	umull	r0, r1, r1, r0
    18ca:	a391      	add	r3, pc, #580	; (adr r3, 1b10 <event_conn_upd_prep+0x378>)
    18cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    18d0:	f7ff f80c 	bl	8ec <__aeabi_uldivmod>
    18d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18d8:	4406      	add	r6, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    18da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    18dc:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    18de:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    18e2:	1b7d      	subs	r5, r7, r5
    18e4:	4455      	add	r5, sl
		conn_interval_us = conn->llcp_cu.interval *
    18e6:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
    18ea:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    18ec:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    18ee:	fb0b f709 	mul.w	r7, fp, r9
		} else if (lll->role) {
    18f2:	f2c0 8210 	blt.w	1d16 <event_conn_upd_prep+0x57e>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    18f6:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    18fa:	4888      	ldr	r0, [pc, #544]	; (1b1c <event_conn_upd_prep+0x384>)
    18fc:	a384      	add	r3, pc, #528	; (adr r3, 1b10 <event_conn_upd_prep+0x378>)
    18fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1902:	fba1 0100 	umull	r0, r1, r1, r0
    1906:	f7fe fff1 	bl	8ec <__aeabi_uldivmod>
    190a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
    190e:	463d      	mov	r5, r7

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1910:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1914:	4a82      	ldr	r2, [pc, #520]	; (1b20 <event_conn_upd_prep+0x388>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1916:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    191a:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    191e:	4981      	ldr	r1, [pc, #516]	; (1b24 <event_conn_upd_prep+0x38c>)
		lll->interval = conn->llcp_cu.interval;
    1920:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1924:	443a      	add	r2, r7
    1926:	fbb2 f2f7 	udiv	r2, r2, r7
    192a:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    192e:	f242 7210 	movw	r2, #10000	; 0x2710
    1932:	fb02 7303 	mla	r3, r2, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1936:	4439      	add	r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1938:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    193a:	fbb1 f1f7 	udiv	r1, r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    193e:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1942:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1944:	1d83      	adds	r3, r0, #6
    1946:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
    1948:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    194a:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    194e:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1952:	dd04      	ble.n	195e <event_conn_upd_prep+0x1c6>
    1954:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    1958:	33fa      	adds	r3, #250	; 0xfa
    195a:	441a      	add	r2, r3
    195c:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    195e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1962:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1966:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1968:	bf44      	itt	mi
    196a:	2300      	movmi	r3, #0
    196c:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1970:	2102      	movs	r1, #2
    1972:	2001      	movs	r0, #1
    1974:	f018 f8e8 	bl	19b48 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1978:	2200      	movs	r2, #0
    197a:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    197c:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    197e:	2001      	movs	r0, #1
    1980:	f008 fe8e 	bl	a6a0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1984:	4968      	ldr	r1, [pc, #416]	; (1b28 <event_conn_upd_prep+0x390>)
    1986:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    198a:	4620      	mov	r0, r4
    198c:	f008 fe18 	bl	a5c0 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1990:	f100 0a05 	add.w	sl, r0, #5
    1994:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1998:	4b64      	ldr	r3, [pc, #400]	; (1b2c <event_conn_upd_prep+0x394>)
    199a:	9400      	str	r4, [sp, #0]
    199c:	4652      	mov	r2, sl
    199e:	2101      	movs	r1, #1
    19a0:	2000      	movs	r0, #0
    19a2:	f00a f917 	bl	bbd4 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    19a6:	f030 0302 	bics.w	r3, r0, #2
    19aa:	d00c      	beq.n	19c6 <event_conn_upd_prep+0x22e>
    19ac:	4a60      	ldr	r2, [pc, #384]	; (1b30 <event_conn_upd_prep+0x398>)
    19ae:	4961      	ldr	r1, [pc, #388]	; (1b34 <event_conn_upd_prep+0x39c>)
    19b0:	4861      	ldr	r0, [pc, #388]	; (1b38 <event_conn_upd_prep+0x3a0>)
    19b2:	f640 43cb 	movw	r3, #3275	; 0xccb
    19b6:	f01d feb2 	bl	1f71e <printk>
    19ba:	4040      	eors	r0, r0
    19bc:	f380 8811 	msr	BASEPRI, r0
    19c0:	f04f 0003 	mov.w	r0, #3
    19c4:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    19c6:	4f55      	ldr	r7, [pc, #340]	; (1b1c <event_conn_upd_prep+0x384>)
    19c8:	fba5 7b07 	umull	r7, fp, r5, r7
    19cc:	a350      	add	r3, pc, #320	; (adr r3, 1b10 <event_conn_upd_prep+0x378>)
    19ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    19d2:	4638      	mov	r0, r7
    19d4:	4659      	mov	r1, fp
    19d6:	f7fe ff89 	bl	8ec <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    19da:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    19de:	4857      	ldr	r0, [pc, #348]	; (1b3c <event_conn_upd_prep+0x3a4>)
    19e0:	2307      	movs	r3, #7
    19e2:	fba5 0100 	umull	r0, r1, r5, r0
    19e6:	1a38      	subs	r0, r7, r0
    19e8:	fb03 1105 	mla	r1, r3, r5, r1
    19ec:	eb6b 0101 	sbc.w	r1, fp, r1
    19f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    19f4:	2300      	movs	r3, #0
    19f6:	f7fe ff79 	bl	8ec <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    19fa:	e9cd 5001 	strd	r5, r0, [sp, #4]
    19fe:	9408      	str	r4, [sp, #32]
    1a00:	9406      	str	r4, [sp, #24]
    1a02:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
    1a06:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a08:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
    1a0c:	484c      	ldr	r0, [pc, #304]	; (1b40 <event_conn_upd_prep+0x3a8>)
    1a0e:	9104      	str	r1, [sp, #16]
    1a10:	494c      	ldr	r1, [pc, #304]	; (1b44 <event_conn_upd_prep+0x3ac>)
    1a12:	4c4d      	ldr	r4, [pc, #308]	; (1b48 <event_conn_upd_prep+0x3b0>)
    1a14:	9407      	str	r4, [sp, #28]
    1a16:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    1a1a:	bf38      	it	cc
    1a1c:	4601      	movcc	r1, r0
    1a1e:	9105      	str	r1, [sp, #20]
    1a20:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1a24:	4633      	mov	r3, r6
    1a26:	9103      	str	r1, [sp, #12]
    1a28:	4652      	mov	r2, sl
    1a2a:	2101      	movs	r1, #1
    1a2c:	2000      	movs	r0, #0
    1a2e:	f00a f847 	bl	bac0 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a32:	f030 0302 	bics.w	r3, r0, #2
    1a36:	d00c      	beq.n	1a52 <event_conn_upd_prep+0x2ba>
    1a38:	4a3d      	ldr	r2, [pc, #244]	; (1b30 <event_conn_upd_prep+0x398>)
    1a3a:	493e      	ldr	r1, [pc, #248]	; (1b34 <event_conn_upd_prep+0x39c>)
    1a3c:	483e      	ldr	r0, [pc, #248]	; (1b38 <event_conn_upd_prep+0x3a0>)
    1a3e:	f640 43e5 	movw	r3, #3301	; 0xce5
    1a42:	f01d fe6c 	bl	1f71e <printk>
    1a46:	4040      	eors	r0, r0
    1a48:	f380 8811 	msr	BASEPRI, r0
    1a4c:	f04f 0003 	mov.w	r0, #3
    1a50:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1a52:	f1b9 0f00 	cmp.w	r9, #0
    1a56:	f040 8158 	bne.w	1d0a <event_conn_upd_prep+0x572>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1a5a:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1a5c:	b00b      	add	sp, #44	; 0x2c
    1a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						      conn->lll.latency + 6;
    1a62:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a64:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1a68:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
						      conn->lll.latency + 6;
    1a6c:	3206      	adds	r2, #6
    1a6e:	4411      	add	r1, r2
	    conn->tx_head &&
    1a70:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
						      conn->lll.latency + 6;
    1a74:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a76:	f36f 0502 	bfc	r5, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    1a7a:	f8a0 10e8 	strh.w	r1, [r0, #232]	; 0xe8
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1a7e:	8119      	strh	r1, [r3, #8]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1a80:	f1a3 0009 	sub.w	r0, r3, #9
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a84:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
	if (
    1a88:	b122      	cbz	r2, 1a94 <event_conn_upd_prep+0x2fc>
	    !conn->llcp_enc.pause_tx &&
    1a8a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    1a8e:	078e      	lsls	r6, r1, #30
    1a90:	f140 818f 	bpl.w	1db2 <event_conn_upd_prep+0x61a>
		if (!conn->tx_ctrl) {
    1a94:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    1a98:	2900      	cmp	r1, #0
    1a9a:	f000 81a3 	beq.w	1de4 <event_conn_upd_prep+0x64c>
	tx->next = conn->tx_ctrl_last->next;
    1a9e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    1aa2:	6811      	ldr	r1, [r2, #0]
    1aa4:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
    1aa8:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    1aaa:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
    1aae:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	f000 8193 	beq.w	1dde <event_conn_upd_prep+0x646>
			return -EINPROGRESS;
    1ab8:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1abc:	b00b      	add	sp, #44	; 0x2c
    1abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ac2:	fb09 0111 	mls	r1, r9, r1, r0
    1ac6:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1aca:	4814      	ldr	r0, [pc, #80]	; (1b1c <event_conn_upd_prep+0x384>)
    1acc:	b289      	uxth	r1, r1
    1ace:	fb03 f101 	mul.w	r1, r3, r1
    1ad2:	fba1 0100 	umull	r0, r1, r1, r0
    1ad6:	a30e      	add	r3, pc, #56	; (adr r3, 1b10 <event_conn_upd_prep+0x378>)
    1ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1adc:	f7fe ff06 	bl	8ec <__aeabi_uldivmod>
    1ae0:	1a36      	subs	r6, r6, r0
    1ae2:	e6fa      	b.n	18da <event_conn_upd_prep+0x142>
		LL_ASSERT(rx && rx->hdr.link);
    1ae4:	4a12      	ldr	r2, [pc, #72]	; (1b30 <event_conn_upd_prep+0x398>)
    1ae6:	4919      	ldr	r1, [pc, #100]	; (1b4c <event_conn_upd_prep+0x3b4>)
    1ae8:	4813      	ldr	r0, [pc, #76]	; (1b38 <event_conn_upd_prep+0x3a0>)
    1aea:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    1aee:	f01d fe16 	bl	1f71e <printk>
    1af2:	4040      	eors	r0, r0
    1af4:	f380 8811 	msr	BASEPRI, r0
    1af8:	f04f 0003 	mov.w	r0, #3
    1afc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1afe:	f8d9 0000 	ldr.w	r0, [r9]
    1b02:	e69b      	b.n	183c <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
    1b04:	f06f 000f 	mvn.w	r0, #15
}
    1b08:	b00b      	add	sp, #44	; 0x2c
    1b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b0e:	bf00      	nop
    1b10:	1afd498d 	.word	0x1afd498d
    1b14:	00000007 	.word	0x00000007
    1b18:	20004c70 	.word	0x20004c70
    1b1c:	3b9aca00 	.word	0x3b9aca00
    1b20:	026259ff 	.word	0x026259ff
    1b24:	01c9c37f 	.word	0x01c9c37f
    1b28:	200013d8 	.word	0x200013d8
    1b2c:	0000fdc9 	.word	0x0000fdc9
    1b30:	00025600 	.word	0x00025600
    1b34:	000256e0 	.word	0x000256e0
    1b38:	000250f0 	.word	0x000250f0
    1b3c:	1afd498d 	.word	0x1afd498d
    1b40:	00014b79 	.word	0x00014b79
    1b44:	00014989 	.word	0x00014989
    1b48:	0000fd71 	.word	0x0000fd71
    1b4c:	000256cc 	.word	0x000256cc
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    1b50:	f8df 8324 	ldr.w	r8, [pc, #804]	; 1e78 <event_conn_upd_prep+0x6e0>
		rx = ll_pdu_rx_alloc_peek(1);
    1b54:	2001      	movs	r0, #1
    1b56:	f00c fbad 	bl	e2b4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1b5a:	4607      	mov	r7, r0
    1b5c:	2800      	cmp	r0, #0
    1b5e:	f000 8152 	beq.w	1e06 <event_conn_upd_prep+0x66e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b62:	48c6      	ldr	r0, [pc, #792]	; (1e7c <event_conn_upd_prep+0x6e4>)
    1b64:	f008 fcf6 	bl	a554 <mem_acquire>
		if (!tx) {
    1b68:	4605      	mov	r5, r0
    1b6a:	2800      	cmp	r0, #0
    1b6c:	f000 814b 	beq.w	1e06 <event_conn_upd_prep+0x66e>
	if (!conn_upd_curr) {
    1b70:	4bc3      	ldr	r3, [pc, #780]	; (1e80 <event_conn_upd_prep+0x6e8>)
    1b72:	681a      	ldr	r2, [r3, #0]
    1b74:	2a00      	cmp	r2, #0
    1b76:	f000 811a 	beq.w	1dae <event_conn_upd_prep+0x616>
		(void)ll_pdu_rx_alloc();
    1b7a:	f00c fbb9 	bl	e2f0 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1b7e:	683b      	ldr	r3, [r7, #0]
    1b80:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    1b84:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b86:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    1b88:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b8c:	f043 0303 	orr.w	r3, r3, #3
    1b90:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1b92:	230c      	movs	r3, #12
    1b94:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1b96:	2300      	movs	r3, #0
    1b98:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1b9a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1b9e:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1ba0:	4ab8      	ldr	r2, [pc, #736]	; (1e84 <event_conn_upd_prep+0x6ec>)
    1ba2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    1ba6:	fba2 2303 	umull	r2, r3, r2, r3
    1baa:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1bac:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1bb0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1bb4:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1bb8:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
    1bbc:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1bc0:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    1bc4:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1bc8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1bcc:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1bd0:	2203      	movs	r2, #3
    1bd2:	f362 0302 	bfi	r3, r2, #0, #3
    1bd6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1bda:	68a3      	ldr	r3, [r4, #8]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	da0a      	bge.n	1bf6 <event_conn_upd_prep+0x45e>
			uint32_t ticks_prepare_to_start =
    1be0:	68e1      	ldr	r1, [r4, #12]
    1be2:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    1be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1be8:	4291      	cmp	r1, r2
    1bea:	bf2c      	ite	cs
    1bec:	1876      	addcs	r6, r6, r1
    1bee:	18b6      	addcc	r6, r6, r2
    1bf0:	1af3      	subs	r3, r6, r3
    1bf2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1bf6:	4ba4      	ldr	r3, [pc, #656]	; (1e88 <event_conn_upd_prep+0x6f0>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1bf8:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    1bfa:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    1bfc:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1c00:	2102      	movs	r1, #2
    1c02:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    1c04:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1c08:	f008 fd7c 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1c0c:	2800      	cmp	r0, #0
    1c0e:	f43f af53 	beq.w	1ab8 <event_conn_upd_prep+0x320>
    1c12:	4a9e      	ldr	r2, [pc, #632]	; (1e8c <event_conn_upd_prep+0x6f4>)
    1c14:	499e      	ldr	r1, [pc, #632]	; (1e90 <event_conn_upd_prep+0x6f8>)
    1c16:	489f      	ldr	r0, [pc, #636]	; (1e94 <event_conn_upd_prep+0x6fc>)
    1c18:	f640 3373 	movw	r3, #2931	; 0xb73
    1c1c:	f01d fd7f 	bl	1f71e <printk>
    1c20:	4040      	eors	r0, r0
    1c22:	f380 8811 	msr	BASEPRI, r0
    1c26:	f04f 0003 	mov.w	r0, #3
    1c2a:	df02      	svc	2
	return -EINPROGRESS;
    1c2c:	f06f 0076 	mvn.w	r0, #118	; 0x76
    1c30:	e714      	b.n	1a5c <event_conn_upd_prep+0x2c4>
		switch (conn->llcp_cu.state) {
    1c32:	f8df 8264 	ldr.w	r8, [pc, #612]	; 1e98 <event_conn_upd_prep+0x700>
    1c36:	e78d      	b.n	1b54 <event_conn_upd_prep+0x3bc>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1c38:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
	    conn->tx_head &&
    1c3c:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
			conn->llcp_ack = conn->llcp_req;
    1c40:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    1c44:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1c48:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
	conn_upd_curr = NULL;
    1c4c:	498c      	ldr	r1, [pc, #560]	; (1e80 <event_conn_upd_prep+0x6e8>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1c4e:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1c52:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    1c56:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    1c5a:	2000      	movs	r0, #0
    1c5c:	6008      	str	r0, [r1, #0]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1c5e:	f1a2 0109 	sub.w	r1, r2, #9
	if (
    1c62:	b1c3      	cbz	r3, 1c96 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_enc.pause_tx &&
    1c64:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
    1c68:	0780      	lsls	r0, r0, #30
    1c6a:	d414      	bmi.n	1c96 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_phy.pause_tx &&
    1c6c:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    1c70:	07c7      	lsls	r7, r0, #31
    1c72:	d410      	bmi.n	1c96 <event_conn_upd_prep+0x4fe>
		if (conn->tx_head == conn->tx_data) {
    1c74:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    1c78:	4283      	cmp	r3, r0
    1c7a:	f000 80e0 	beq.w	1e3e <event_conn_upd_prep+0x6a6>
		} else if (!conn->tx_ctrl) {
    1c7e:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    1c82:	b968      	cbnz	r0, 1ca0 <event_conn_upd_prep+0x508>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1c84:	7918      	ldrb	r0, [r3, #4]
    1c86:	f000 0003 	and.w	r0, r0, #3
    1c8a:	2803      	cmp	r0, #3
    1c8c:	f000 80e8 	beq.w	1e60 <event_conn_upd_prep+0x6c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1c90:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1c94:	e006      	b.n	1ca4 <event_conn_upd_prep+0x50c>
		if (!conn->tx_ctrl) {
    1c96:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    1c9a:	2800      	cmp	r0, #0
    1c9c:	f000 80ac 	beq.w	1df8 <event_conn_upd_prep+0x660>
	tx->next = conn->tx_ctrl_last->next;
    1ca0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1ca4:	6818      	ldr	r0, [r3, #0]
    1ca6:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
    1caa:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    1cac:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
    1cb0:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	f000 80a9 	beq.w	1e0c <event_conn_upd_prep+0x674>
			return -ECANCELED;
    1cba:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1cbe:	e6cd      	b.n	1a5c <event_conn_upd_prep+0x2c4>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    1cc0:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	f43f ad8f 	beq.w	17e8 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
    1cca:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
    1cce:	e58f      	b.n	17f0 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1cd0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    1cd2:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1cd4:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    1cd8:	f47f adbd 	bne.w	1856 <event_conn_upd_prep+0xbe>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1cdc:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    1ce0:	fb0c fe03 	mul.w	lr, ip, r3
    1ce4:	f242 7c10 	movw	ip, #10000	; 0x2710
    1ce8:	fb0c ec01 	mla	ip, ip, r1, lr
    1cec:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1cf0:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    1cf4:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    1cf8:	fa1f fc8c 	uxth.w	ip, ip
    1cfc:	45e6      	cmp	lr, ip
    1cfe:	f47f adaa 	bne.w	1856 <event_conn_upd_prep+0xbe>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1d02:	2301      	movs	r3, #1
    1d04:	f889 3004 	strb.w	r3, [r9, #4]
    1d08:	e5b5      	b.n	1876 <event_conn_upd_prep+0xde>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1d0a:	2201      	movs	r2, #1
    1d0c:	2102      	movs	r1, #2
    1d0e:	4610      	mov	r0, r2
    1d10:	f008 fcc6 	bl	a6a0 <mayfly_enable>
    1d14:	e6a1      	b.n	1a5a <event_conn_upd_prep+0x2c2>
				lll->periph.window_widening_periodic_us *
    1d16:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1d18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d1a:	fb02 3318 	mls	r3, r2, r8, r3
    1d1e:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1d20:	f015 fa1e 	bl	17160 <lll_clock_ppm_local_get>
    1d24:	4605      	mov	r5, r0
    1d26:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d2a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 1e9c <event_conn_upd_prep+0x704>
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1d2e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1d32:	f015 fa17 	bl	17164 <lll_clock_ppm_get>
    1d36:	4405      	add	r5, r0
    1d38:	fb07 f505 	mul.w	r5, r7, r5
    1d3c:	4b58      	ldr	r3, [pc, #352]	; (1ea0 <event_conn_upd_prep+0x708>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1d3e:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1d42:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    1d46:	f205 253f 	addw	r5, r5, #575	; 0x23f
    1d4a:	fba3 3505 	umull	r3, r5, r3, r5
    1d4e:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
    1d50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
    1d52:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1d54:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
    1d58:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
    1d5c:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1d5e:	087a      	lsrs	r2, r7, #1
			lll->periph.window_widening_prepare_us +=
    1d60:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1d62:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1d64:	4293      	cmp	r3, r2
    1d66:	bf28      	it	cs
    1d68:	4613      	movcs	r3, r2
    1d6a:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    1d6e:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d70:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
    1d74:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d78:	a33d      	add	r3, pc, #244	; (adr r3, 1e70 <event_conn_upd_prep+0x6d8>)
    1d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d7e:	f7fe fdb5 	bl	8ec <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d82:	4b40      	ldr	r3, [pc, #256]	; (1e84 <event_conn_upd_prep+0x6ec>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d84:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d86:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    1d8a:	fba3 3000 	umull	r3, r0, r3, r0
    1d8e:	0a80      	lsrs	r0, r0, #10
    1d90:	fb0b f000 	mul.w	r0, fp, r0
    1d94:	fba0 0108 	umull	r0, r1, r0, r8
    1d98:	a335      	add	r3, pc, #212	; (adr r3, 1e70 <event_conn_upd_prep+0x6d8>)
    1d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d9e:	f7fe fda5 	bl	8ec <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    1da2:	1b7d      	subs	r5, r7, r5
		lll->interval = conn->llcp_cu.interval;
    1da4:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1da8:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    1dac:	e5b2      	b.n	1914 <event_conn_upd_prep+0x17c>
		conn_upd_curr = conn;
    1dae:	601c      	str	r4, [r3, #0]
    1db0:	e6e3      	b.n	1b7a <event_conn_upd_prep+0x3e2>
	    !conn->llcp_phy.pause_tx &&
    1db2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    1db6:	07cd      	lsls	r5, r1, #31
    1db8:	f53f ae6c 	bmi.w	1a94 <event_conn_upd_prep+0x2fc>
		if (conn->tx_head == conn->tx_data) {
    1dbc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    1dc0:	428a      	cmp	r2, r1
    1dc2:	d028      	beq.n	1e16 <event_conn_upd_prep+0x67e>
		} else if (!conn->tx_ctrl) {
    1dc4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    1dc8:	2900      	cmp	r1, #0
    1dca:	f47f ae68 	bne.w	1a9e <event_conn_upd_prep+0x306>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1dce:	7911      	ldrb	r1, [r2, #4]
    1dd0:	f001 0103 	and.w	r1, r1, #3
    1dd4:	2903      	cmp	r1, #3
    1dd6:	d065      	beq.n	1ea4 <event_conn_upd_prep+0x70c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1dd8:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    1ddc:	e661      	b.n	1aa2 <event_conn_upd_prep+0x30a>
		conn->tx_data_last = tx;
    1dde:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    1de2:	e669      	b.n	1ab8 <event_conn_upd_prep+0x320>
			tx->next = conn->tx_head;
    1de4:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
    1de8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1dec:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1df0:	2a00      	cmp	r2, #0
    1df2:	f47f ae61 	bne.w	1ab8 <event_conn_upd_prep+0x320>
    1df6:	e7f2      	b.n	1dde <event_conn_upd_prep+0x646>
			tx->next = conn->tx_head;
    1df8:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
    1dfc:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1e00:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
    1e04:	e756      	b.n	1cb4 <event_conn_upd_prep+0x51c>
			return -ENOBUFS;
    1e06:	f06f 0068 	mvn.w	r0, #104	; 0x68
    1e0a:	e627      	b.n	1a5c <event_conn_upd_prep+0x2c4>
		conn->tx_data_last = tx;
    1e0c:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			return -ECANCELED;
    1e10:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1e14:	e622      	b.n	1a5c <event_conn_upd_prep+0x2c4>
			conn->tx_data = conn->tx_data->next;
    1e16:	6811      	ldr	r1, [r2, #0]
    1e18:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1e1c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    1e20:	2900      	cmp	r1, #0
    1e22:	f47f ae3c 	bne.w	1a9e <event_conn_upd_prep+0x306>
			tx->next = conn->tx_head->next;
    1e26:	6811      	ldr	r1, [r2, #0]
    1e28:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
    1e2c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    1e2e:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
    1e32:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    1e36:	2a00      	cmp	r2, #0
    1e38:	f47f ae3e 	bne.w	1ab8 <event_conn_upd_prep+0x320>
    1e3c:	e7cf      	b.n	1dde <event_conn_upd_prep+0x646>
			conn->tx_data = conn->tx_data->next;
    1e3e:	6818      	ldr	r0, [r3, #0]
    1e40:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1e44:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
    1e48:	2800      	cmp	r0, #0
    1e4a:	f47f af29 	bne.w	1ca0 <event_conn_upd_prep+0x508>
			tx->next = conn->tx_head->next;
    1e4e:	6818      	ldr	r0, [r3, #0]
    1e50:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
    1e54:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    1e56:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
    1e5a:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
    1e5e:	e729      	b.n	1cb4 <event_conn_upd_prep+0x51c>
	    ((pdu_data_tx->llctrl.opcode !=
    1e60:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1e62:	2803      	cmp	r0, #3
    1e64:	d0f3      	beq.n	1e4e <event_conn_upd_prep+0x6b6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1e66:	280a      	cmp	r0, #10
    1e68:	f47f af12 	bne.w	1c90 <event_conn_upd_prep+0x4f8>
    1e6c:	e7ef      	b.n	1e4e <event_conn_upd_prep+0x6b6>
    1e6e:	bf00      	nop
    1e70:	1afd498d 	.word	0x1afd498d
    1e74:	00000007 	.word	0x00000007
    1e78:	000151cd 	.word	0x000151cd
    1e7c:	20004d04 	.word	0x20004d04
    1e80:	20004c70 	.word	0x20004c70
    1e84:	d1b71759 	.word	0xd1b71759
    1e88:	200006f0 	.word	0x200006f0
    1e8c:	00025600 	.word	0x00025600
    1e90:	000253f4 	.word	0x000253f4
    1e94:	000250f0 	.word	0x000250f0
    1e98:	00002c49 	.word	0x00002c49
    1e9c:	3b9aca00 	.word	0x3b9aca00
    1ea0:	431bde83 	.word	0x431bde83
	    ((pdu_data_tx->llctrl.opcode !=
    1ea4:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ea6:	2903      	cmp	r1, #3
    1ea8:	d0bd      	beq.n	1e26 <event_conn_upd_prep+0x68e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1eaa:	290a      	cmp	r1, #10
    1eac:	d194      	bne.n	1dd8 <event_conn_upd_prep+0x640>
    1eae:	e7ba      	b.n	1e26 <event_conn_upd_prep+0x68e>
			LL_ASSERT(0);
    1eb0:	4a07      	ldr	r2, [pc, #28]	; (1ed0 <event_conn_upd_prep+0x738>)
    1eb2:	4908      	ldr	r1, [pc, #32]	; (1ed4 <event_conn_upd_prep+0x73c>)
    1eb4:	4808      	ldr	r0, [pc, #32]	; (1ed8 <event_conn_upd_prep+0x740>)
    1eb6:	f640 33c7 	movw	r3, #3015	; 0xbc7
    1eba:	f01d fc30 	bl	1f71e <printk>
    1ebe:	4040      	eors	r0, r0
    1ec0:	f380 8811 	msr	BASEPRI, r0
    1ec4:	f04f 0003 	mov.w	r0, #3
    1ec8:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    1eca:	f04f 0800 	mov.w	r8, #0
			break;
    1ece:	e641      	b.n	1b54 <event_conn_upd_prep+0x3bc>
    1ed0:	00025600 	.word	0x00025600
    1ed4:	00025150 	.word	0x00025150
    1ed8:	000250f0 	.word	0x000250f0
    1edc:	00000000 	.word	0x00000000

00001ee0 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1ee4:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    1ee6:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1eea:	681b      	ldr	r3, [r3, #0]
{
    1eec:	b097      	sub	sp, #92	; 0x5c
    1eee:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1ef0:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1ef2:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1ef4:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    1ef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    1efc:	4605      	mov	r5, r0
    1efe:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1f00:	a814      	add	r0, sp, #80	; 0x50
    1f02:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    1f04:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1f08:	f01e fc0e 	bl	20728 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1f0c:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
    1f10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1f14:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    1f18:	d05b      	beq.n	1fd2 <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1f1a:	465a      	mov	r2, fp
    1f1c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    1f20:	4648      	mov	r0, r9
    1f22:	f013 fc03 	bl	1572c <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    1f26:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    1f2a:	3302      	adds	r3, #2
    1f2c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    1f30:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1f32:	2203      	movs	r2, #3
	link = rx->link;
    1f34:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1f38:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1f3c:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1f40:	f01e fbf2 	bl	20728 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1f44:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1f48:	2204      	movs	r2, #4
    1f4a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    1f4e:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1f50:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1f52:	f01e fbe9 	bl	20728 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f58:	2205      	movs	r2, #5
    1f5a:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    1f5e:	4618      	mov	r0, r3
    1f60:	f01e fbe2 	bl	20728 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f66:	2105      	movs	r1, #5
    1f68:	4618      	mov	r0, r3
    1f6a:	f008 fcc9 	bl	a900 <util_ones_count_get>
    1f6e:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1f70:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1f74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1f78:	f360 0305 	bfi	r3, r0, #0, #6
    1f7c:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1f7e:	f3c2 0304 	ubfx	r3, r2, #0, #5
    1f82:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1f84:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1f86:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1f88:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1f8a:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1f8c:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1f90:	d905      	bls.n	1f9e <ull_periph_setup+0xbe>
    1f92:	331b      	adds	r3, #27
    1f94:	f003 031f 	and.w	r3, r3, #31
    1f98:	2b0b      	cmp	r3, #11
    1f9a:	d800      	bhi.n	1f9e <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    1f9c:	b9f9      	cbnz	r1, 1fde <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    1f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    1fa0:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    1fa2:	2200      	movs	r2, #0
    1fa4:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    1fa6:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    1faa:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
    1fac:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
    1fb0:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    1fb2:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
    1fb6:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    1fb8:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    1fba:	f00c f96b 	bl	e294 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    1fbe:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    1fc0:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    1fc2:	4621      	mov	r1, r4
    1fc4:	f00c f966 	bl	e294 <ll_rx_put>
	ll_rx_sched();
    1fc8:	f00c f96e 	bl	e2a8 <ll_rx_sched>
}
    1fcc:	b017      	add	sp, #92	; 0x5c
    1fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1fd2:	2206      	movs	r2, #6
    1fd4:	a914      	add	r1, sp, #80	; 0x50
    1fd6:	4658      	mov	r0, fp
    1fd8:	f01e fba6 	bl	20728 <memcpy>
    1fdc:	e7a8      	b.n	1f30 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
    1fde:	6823      	ldr	r3, [r4, #0]
    1fe0:	2000      	movs	r0, #0
    1fe2:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1fe4:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    1fe8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    1fec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1ff0:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1ff2:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
    1ff6:	0952      	lsrs	r2, r2, #5
    1ff8:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1ffc:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    1ffe:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2000:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2004:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
    2008:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    200c:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    200e:	f015 f8a7 	bl	17160 <lll_clock_ppm_local_get>
    2012:	900c      	str	r0, [sp, #48]	; 0x30
    2014:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
    2018:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    201c:	f015 f8a2 	bl	17164 <lll_clock_ppm_get>
    2020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2022:	49c7      	ldr	r1, [pc, #796]	; (2340 <ull_periph_setup+0x460>)
    2024:	4403      	add	r3, r0
    2026:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2028:	fb00 f303 	mul.w	r3, r0, r3
    202c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    2030:	f203 233f 	addw	r3, r3, #575	; 0x23f
    2034:	fba1 2303 	umull	r2, r3, r1, r3
    2038:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    203a:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    203c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2040:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    2042:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2046:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    204a:	0843      	lsrs	r3, r0, #1
    204c:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    204e:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    2050:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2052:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2054:	4abb      	ldr	r2, [pc, #748]	; (2344 <ull_periph_setup+0x464>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2056:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    205a:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    205c:	4bba      	ldr	r3, [pc, #744]	; (2348 <ull_periph_setup+0x468>)
    205e:	4684      	mov	ip, r0
    2060:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2062:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2064:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2068:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    206c:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2070:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2074:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2078:	fb00 c202 	mla	r2, r0, r2, ip
    207c:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    207e:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2080:	fbb2 f2fc 	udiv	r2, r2, ip
    2084:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2088:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    208a:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    208c:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2090:	dd04      	ble.n	209c <ull_periph_setup+0x1bc>
    2092:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    2096:	31fa      	adds	r1, #250	; 0xfa
    2098:	440a      	add	r2, r1
    209a:	b292      	uxth	r2, r2
    209c:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    20a0:	4651      	mov	r1, sl
    20a2:	2204      	movs	r2, #4
    20a4:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    20a8:	f01e fb3e 	bl	20728 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    20ac:	462b      	mov	r3, r5
    20ae:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    20b2:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    20b6:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    20b8:	910f      	str	r1, [sp, #60]	; 0x3c
    20ba:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    20bc:	f100 811a 	bmi.w	22f4 <ull_periph_setup+0x414>
	cc->status = 0U;
    20c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    20c4:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    20c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    20c8:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    20cc:	f014 f8e0 	bl	16290 <ull_filter_lll_lrpa_used>
    20d0:	2800      	cmp	r0, #0
    20d2:	f000 80ee 	beq.w	22b2 <ull_periph_setup+0x3d2>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    20d6:	2206      	movs	r2, #6
    20d8:	f105 0124 	add.w	r1, r5, #36	; 0x24
    20dc:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    20e0:	f01e fb22 	bl	20728 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    20e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    20e8:	f000 80ea 	beq.w	22c0 <ull_periph_setup+0x3e0>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    20ec:	a914      	add	r1, sp, #80	; 0x50
    20ee:	2206      	movs	r2, #6
    20f0:	f105 0025 	add.w	r0, r5, #37	; 0x25
    20f4:	f01e fb18 	bl	20728 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    20f8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    20fc:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    20fe:	4659      	mov	r1, fp
    2100:	2206      	movs	r2, #6
    2102:	f105 001f 	add.w	r0, r5, #31
    2106:	f01e fb0f 	bl	20728 <memcpy>
	cc->sca = conn->periph.sca;
    210a:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    210e:	89fa      	ldrh	r2, [r7, #14]
    2110:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    2112:	8a3a      	ldrh	r2, [r7, #16]
    2114:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    2116:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    211a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    211e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    2122:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    2124:	4640      	mov	r0, r8
    2126:	f00e faa9 	bl	1067c <ll_conn_handle_get>
		ll_rx_put(link, rx);
    212a:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    212c:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    212e:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    2130:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    2132:	4630      	mov	r0, r6
    2134:	f00c f8ae 	bl	e294 <ll_rx_put>
		rx->handle = lll->handle;
    2138:	89bb      	ldrh	r3, [r7, #12]
    213a:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    213c:	231b      	movs	r3, #27
    213e:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    2140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    2142:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    2144:	2b00      	cmp	r3, #0
    2146:	f040 80c2 	bne.w	22ce <ull_periph_setup+0x3ee>
			cs->csa = 0x00;
    214a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    214e:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    2150:	4629      	mov	r1, r5
    2152:	4630      	mov	r0, r6
    2154:	f00c f89e 	bl	e294 <ll_rx_put>
	ll_rx_sched();
    2158:	f00c f8a6 	bl	e2a8 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    215c:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    2160:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    2164:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2168:	2101      	movs	r1, #1
    216a:	f000 0007 	and.w	r0, r0, #7
    216e:	f014 fe05 	bl	16d7c <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2172:	442e      	add	r6, r5
    2174:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    2178:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    217a:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    217c:	4873      	ldr	r0, [pc, #460]	; (234c <ull_periph_setup+0x46c>)
	conn->ull.ticks_active_to_start = 0U;
    217e:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    2182:	2331      	movs	r3, #49	; 0x31
    2184:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2188:	fba1 0100 	umull	r0, r1, r1, r0
    218c:	a36a      	add	r3, pc, #424	; (adr r3, 2338 <ull_periph_setup+0x458>)
    218e:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    2192:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
    2196:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    219a:	f7fe fba7 	bl	8ec <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    219e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21a0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    21a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    21a4:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    21a6:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    21a8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    21ac:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    21b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    21b4:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
    21b8:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    21bc:	464a      	mov	r2, r9
    21be:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
    21c0:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    21c4:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    21c6:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    21c8:	f008 fa6a 	bl	a6a0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    21cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    21ce:	4628      	mov	r0, r5
    21d0:	f00d f954 	bl	f47c <ull_adv_handle_get>
    21d4:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    21d6:	4b5e      	ldr	r3, [pc, #376]	; (2350 <ull_periph_setup+0x470>)
    21d8:	9500      	str	r5, [sp, #0]
    21da:	b2d2      	uxtb	r2, r2
    21dc:	4648      	mov	r0, r9
    21de:	2101      	movs	r1, #1
    21e0:	f009 fcf8 	bl	bbd4 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    21e4:	2801      	cmp	r0, #1
    21e6:	f000 8092 	beq.w	230e <ull_periph_setup+0x42e>
	if (adv->lll.is_hdcd) {
    21ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    21f0:	07db      	lsls	r3, r3, #31
    21f2:	d477      	bmi.n	22e4 <ull_periph_setup+0x404>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    21f4:	4640      	mov	r0, r8
    21f6:	f00e fa41 	bl	1067c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    21fa:	f8df 9150 	ldr.w	r9, [pc, #336]	; 234c <ull_periph_setup+0x46c>
    21fe:	fba6 5609 	umull	r5, r6, r6, r9
    2202:	a34d      	add	r3, pc, #308	; (adr r3, 2338 <ull_periph_setup+0x458>)
    2204:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2208:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    220a:	4631      	mov	r1, r6
    220c:	4628      	mov	r0, r5
    220e:	f7fe fb6d 	bl	8ec <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2212:	68a3      	ldr	r3, [r4, #8]
    2214:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2218:	f10b 0405 	add.w	r4, fp, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    221c:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    2220:	4b4c      	ldr	r3, [pc, #304]	; (2354 <ull_periph_setup+0x474>)
    2222:	9307      	str	r3, [sp, #28]
    2224:	4b4c      	ldr	r3, [pc, #304]	; (2358 <ull_periph_setup+0x478>)
    2226:	9305      	str	r3, [sp, #20]
    2228:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    222c:	9308      	str	r3, [sp, #32]
    222e:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2232:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    2236:	4849      	ldr	r0, [pc, #292]	; (235c <ull_periph_setup+0x47c>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2238:	f04f 0a00 	mov.w	sl, #0
    223c:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2240:	fba7 0100 	umull	r0, r1, r7, r0
    2244:	2307      	movs	r3, #7
    2246:	1a28      	subs	r0, r5, r0
    2248:	fb03 1107 	mla	r1, r3, r7, r1
    224c:	eb66 0101 	sbc.w	r1, r6, r1
    2250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2254:	2300      	movs	r3, #0
    2256:	f7fe fb49 	bl	8ec <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    225c:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2260:	fba3 0109 	umull	r0, r1, r3, r9
    2264:	a334      	add	r3, pc, #208	; (adr r3, 2338 <ull_periph_setup+0x458>)
    2266:	e9d3 2300 	ldrd	r2, r3, [r3]
    226a:	f7fe fb3f 	bl	8ec <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    226e:	b2e4      	uxtb	r4, r4
    2270:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2274:	9000      	str	r0, [sp, #0]
    2276:	465b      	mov	r3, fp
    2278:	4622      	mov	r2, r4
    227a:	2101      	movs	r1, #1
    227c:	4650      	mov	r0, sl
    227e:	f009 fc1f 	bl	bac0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2282:	f030 0302 	bics.w	r3, r0, #2
    2286:	d00c      	beq.n	22a2 <ull_periph_setup+0x3c2>
    2288:	4a35      	ldr	r2, [pc, #212]	; (2360 <ull_periph_setup+0x480>)
    228a:	4936      	ldr	r1, [pc, #216]	; (2364 <ull_periph_setup+0x484>)
    228c:	4836      	ldr	r0, [pc, #216]	; (2368 <ull_periph_setup+0x488>)
    228e:	f240 13c9 	movw	r3, #457	; 0x1c9
    2292:	f01d fa44 	bl	1f71e <printk>
    2296:	4040      	eors	r0, r0
    2298:	f380 8811 	msr	BASEPRI, r0
    229c:	f04f 0003 	mov.w	r0, #3
    22a0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    22a2:	2201      	movs	r2, #1
    22a4:	2102      	movs	r1, #2
    22a6:	4610      	mov	r0, r2
    22a8:	f008 f9fa 	bl	a6a0 <mayfly_enable>
}
    22ac:	b017      	add	sp, #92	; 0x5c
    22ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    22b2:	4601      	mov	r1, r0
    22b4:	2206      	movs	r2, #6
    22b6:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    22ba:	f01e fa40 	bl	2073e <memset>
    22be:	e711      	b.n	20e4 <ull_periph_setup+0x204>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    22c0:	2206      	movs	r2, #6
    22c2:	2100      	movs	r1, #0
    22c4:	f105 0025 	add.w	r0, r5, #37	; 0x25
    22c8:	f01e fa39 	bl	2073e <memset>
    22cc:	e714      	b.n	20f8 <ull_periph_setup+0x218>
			lll->data_chan_sel = 1;
    22ce:	7f7b      	ldrb	r3, [r7, #29]
    22d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    22d4:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    22d6:	4650      	mov	r0, sl
    22d8:	f013 f826 	bl	15328 <lll_chan_id>
			cs->csa = 0x01;
    22dc:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    22de:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    22e0:	772b      	strb	r3, [r5, #28]
    22e2:	e735      	b.n	2150 <ull_periph_setup+0x270>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    22e4:	2300      	movs	r3, #0
    22e6:	2201      	movs	r2, #1
    22e8:	9300      	str	r3, [sp, #0]
    22ea:	4618      	mov	r0, r3
    22ec:	4611      	mov	r1, r2
    22ee:	f009 fc71 	bl	bbd4 <ticker_stop>
    22f2:	e77f      	b.n	21f4 <ull_periph_setup+0x314>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    22f4:	4a1a      	ldr	r2, [pc, #104]	; (2360 <ull_periph_setup+0x480>)
    22f6:	491d      	ldr	r1, [pc, #116]	; (236c <ull_periph_setup+0x48c>)
    22f8:	481b      	ldr	r0, [pc, #108]	; (2368 <ull_periph_setup+0x488>)
    22fa:	23f1      	movs	r3, #241	; 0xf1
    22fc:	f01d fa0f 	bl	1f71e <printk>
    2300:	4040      	eors	r0, r0
    2302:	f380 8811 	msr	BASEPRI, r0
    2306:	f04f 0003 	mov.w	r0, #3
    230a:	df02      	svc	2
    230c:	e6d8      	b.n	20c0 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    230e:	f00c f877 	bl	e400 <ull_disable_mark_get>
    2312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2314:	4283      	cmp	r3, r0
    2316:	f43f af68 	beq.w	21ea <ull_periph_setup+0x30a>
    231a:	4a11      	ldr	r2, [pc, #68]	; (2360 <ull_periph_setup+0x480>)
    231c:	4914      	ldr	r1, [pc, #80]	; (2370 <ull_periph_setup+0x490>)
    231e:	4812      	ldr	r0, [pc, #72]	; (2368 <ull_periph_setup+0x488>)
    2320:	f240 239f 	movw	r3, #671	; 0x29f
    2324:	f01d f9fb 	bl	1f71e <printk>
    2328:	4040      	eors	r0, r0
    232a:	f380 8811 	msr	BASEPRI, r0
    232e:	f04f 0003 	mov.w	r0, #3
    2332:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    2334:	e759      	b.n	21ea <ull_periph_setup+0x30a>
    2336:	bf00      	nop
    2338:	1afd498d 	.word	0x1afd498d
    233c:	00000007 	.word	0x00000007
    2340:	431bde83 	.word	0x431bde83
    2344:	026259ff 	.word	0x026259ff
    2348:	01c9c37f 	.word	0x01c9c37f
    234c:	3b9aca00 	.word	0x3b9aca00
    2350:	0001494d 	.word	0x0001494d
    2354:	0001491d 	.word	0x0001491d
    2358:	00014989 	.word	0x00014989
    235c:	1afd498d 	.word	0x1afd498d
    2360:	000257e8 	.word	0x000257e8
    2364:	000256e0 	.word	0x000256e0
    2368:	000250f0 	.word	0x000250f0
    236c:	00025200 	.word	0x00025200
    2370:	00025844 	.word	0x00025844
    2374:	00000000 	.word	0x00000000

00002378 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    237c:	b08b      	sub	sp, #44	; 0x2c
    237e:	460f      	mov	r7, r1
    2380:	9304      	str	r3, [sp, #16]
    2382:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    2386:	9005      	str	r0, [sp, #20]
    2388:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    238a:	2000      	movs	r0, #0
{
    238c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    2390:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    2394:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    2398:	9303      	str	r3, [sp, #12]
    239a:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    239c:	f00d faa4 	bl	f8e8 <ull_scan_is_disabled_get>
	if (!scan) {
    23a0:	2800      	cmp	r0, #0
    23a2:	f000 819d 	beq.w	26e0 <ll_create_connection+0x368>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    23a6:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    23aa:	4605      	mov	r5, r0
    23ac:	4650      	mov	r0, sl
    23ae:	f009 fcd9 	bl	bd64 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    23b2:	f1ba 0f00 	cmp.w	sl, #0
    23b6:	d16a      	bne.n	248e <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    23b8:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    23ba:	f105 021c 	add.w	r2, r5, #28
    23be:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    23c0:	2b00      	cmp	r3, #0
    23c2:	d06b      	beq.n	249c <ll_create_connection+0x124>
		conn_lll = lll->conn;
    23c4:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    23c8:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    23cc:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    23d0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    23d4:	f000 0007 	and.w	r0, r0, #7
    23d8:	f014 fcce 	bl	16d78 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    23dc:	f8b8 1040 	ldrh.w	r1, [r8, #64]	; 0x40
    23e0:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    23e4:	4401      	add	r1, r0
    23e6:	f8b8 0042 	ldrh.w	r0, [r8, #66]	; 0x42
    23ea:	4401      	add	r1, r0
    23ec:	48c6      	ldr	r0, [pc, #792]	; (2708 <ll_create_connection+0x390>)
    23ee:	a3c4      	add	r3, pc, #784	; (adr r3, 2700 <ll_create_connection+0x388>)
    23f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    23f4:	fba1 0100 	umull	r0, r1, r1, r0
    23f8:	f7fe fa78 	bl	8ec <__aeabi_uldivmod>
    23fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    2400:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    2402:	4630      	mov	r0, r6
    2404:	f013 fcb6 	bl	15d74 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    2408:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    240c:	f36f 0341 	bfc	r3, #1, #1
    2410:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    2414:	23ff      	movs	r3, #255	; 0xff
    2416:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    241a:	b366      	cbz	r6, 2476 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    241c:	f1a9 0302 	sub.w	r3, r9, #2
    2420:	2b01      	cmp	r3, #1
    2422:	f240 8161 	bls.w	26e8 <ll_create_connection+0x370>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    2426:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    242a:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    242c:	f369 0342 	bfi	r3, r9, #1, #2
    2430:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    2434:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2438:	f362 0300 	bfi	r3, r2, #0, #1
    243c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    2440:	9914      	ldr	r1, [sp, #80]	; 0x50
    2442:	2206      	movs	r2, #6
    2444:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2448:	f01e f96e 	bl	20728 <memcpy>
	lll->conn_timeout = timeout;
    244c:	9b03      	ldr	r3, [sp, #12]
    244e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    2450:	9a05      	ldr	r2, [sp, #20]
    2452:	9600      	str	r6, [sp, #0]
    2454:	463b      	mov	r3, r7
    2456:	f105 001c 	add.w	r0, r5, #28
    245a:	2100      	movs	r1, #0
    245c:	f7ff f8b4 	bl	15c8 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    2460:	f014 fe2a 	bl	170b8 <lll_clock_wait>
	if (err) {
    2464:	2800      	cmp	r0, #0
    2466:	f040 815b 	bne.w	2720 <ll_create_connection+0x3a8>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    246a:	4628      	mov	r0, r5
    246c:	f7ff f8d8 	bl	1620 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    2470:	b00b      	add	sp, #44	; 0x2c
    2472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    2476:	f014 f8b9 	bl	165ec <ull_filter_lll_rl_enabled>
    247a:	2800      	cmp	r0, #0
    247c:	d0ce      	beq.n	241c <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    247e:	9914      	ldr	r1, [sp, #80]	; 0x50
    2480:	9804      	ldr	r0, [sp, #16]
    2482:	4632      	mov	r2, r6
    2484:	f013 fde6 	bl	16054 <ull_filter_rl_find>
    2488:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    248c:	e7c6      	b.n	241c <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    248e:	2106      	movs	r1, #6
    2490:	f008 f8aa 	bl	a5e8 <mem_nz>
    2494:	2800      	cmp	r0, #0
    2496:	d18f      	bne.n	23b8 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    2498:	2012      	movs	r0, #18
    249a:	e7e9      	b.n	2470 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    249c:	f00b fee2 	bl	e264 <ll_rx_link_alloc>
	if (!link) {
    24a0:	9007      	str	r0, [sp, #28]
    24a2:	2800      	cmp	r0, #0
    24a4:	f000 8173 	beq.w	278e <ll_create_connection+0x416>
	conn = ll_conn_acquire();
    24a8:	f00e f8dc 	bl	10664 <ll_conn_acquire>
	if (!conn) {
    24ac:	4604      	mov	r4, r0
    24ae:	2800      	cmp	r0, #0
    24b0:	f000 818f 	beq.w	27d2 <ll_create_connection+0x45a>
	err = util_aa_le32(conn_lll->access_addr);
    24b4:	3020      	adds	r0, #32
    24b6:	f008 fa37 	bl	a928 <util_aa_le32>
	conn_lll = &conn->lll;
    24ba:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    24be:	2800      	cmp	r0, #0
    24c0:	f040 8158 	bne.w	2774 <ll_create_connection+0x3fc>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    24c4:	2103      	movs	r1, #3
    24c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    24ca:	f014 fb03 	bl	16ad4 <lll_csrand_get>
	conn_lll->interval = interval;
    24ce:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    24d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
    24d2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    24d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    24d8:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    24dc:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    24de:	2800      	cmp	r0, #0
    24e0:	f000 8157 	beq.w	2792 <ll_create_connection+0x41a>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    24e4:	f104 0164 	add.w	r1, r4, #100	; 0x64
    24e8:	f104 0268 	add.w	r2, r4, #104	; 0x68
    24ec:	f008 f888 	bl	a600 <memq_init>
	conn_lll->phy_tx = PHY_1M;
    24f0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    24f4:	4a85      	ldr	r2, [pc, #532]	; (270c <ll_create_connection+0x394>)
	conn_lll->phy_tx = PHY_1M;
    24f6:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    24fa:	f023 0307 	bic.w	r3, r3, #7
    24fe:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    2502:	f043 0301 	orr.w	r3, r3, #1
    2506:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
    250a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    250e:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
    2512:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
    2516:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    251a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
    251e:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
    2522:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
    2526:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
    252a:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    252e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2532:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2536:	f012 feab 	bl	15290 <ull_chan_map_get>
    253a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    253e:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    2542:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2544:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    2548:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    254c:	f014 fac2 	bl	16ad4 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2550:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    2554:	4b6e      	ldr	r3, [pc, #440]	; (2710 <ll_create_connection+0x398>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2556:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    255a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    255c:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2560:	fba3 1302 	umull	r1, r3, r3, r2
    2564:	08db      	lsrs	r3, r3, #3
    2566:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    256a:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    256e:	3305      	adds	r3, #5
    2570:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    2574:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2578:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    257a:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
    257e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2582:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    2586:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    258a:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->central.initiated = 0;
    258e:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2592:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    2596:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    259a:	4b5e      	ldr	r3, [pc, #376]	; (2714 <ll_create_connection+0x39c>)
	conn->apto_expire = 0U;
    259c:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    25a0:	fb02 f101 	mul.w	r1, r2, r1
    25a4:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    25a6:	440b      	add	r3, r1
    25a8:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    25ac:	495a      	ldr	r1, [pc, #360]	; (2718 <ll_create_connection+0x3a0>)
	conn->appto_expire = 0U;
    25ae:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    25b2:	4411      	add	r1, r2
    25b4:	fbb1 f1f2 	udiv	r1, r1, r2
    25b8:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    25bc:	f242 7110 	movw	r1, #10000	; 0x2710
    25c0:	fb01 210c 	mla	r1, r1, ip, r2
    25c4:	3901      	subs	r1, #1
    25c6:	fbb1 f2f2 	udiv	r2, r1, r2
    25ca:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    25ce:	2206      	movs	r2, #6
    25d0:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    25d4:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    25d6:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    25d8:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    25da:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    25de:	dd02      	ble.n	25e6 <ll_create_connection+0x26e>
    25e0:	3a06      	subs	r2, #6
    25e2:	1a12      	subs	r2, r2, r0
    25e4:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    25e6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    25ea:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    25ee:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    25f2:	f023 0307 	bic.w	r3, r3, #7
    25f6:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    25fa:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
    25fe:	f884 b0e6 	strb.w	fp, [r4, #230]	; 0xe6
	conn->llcp_rx = NULL;
    2602:	f8c4 b108 	str.w	fp, [r4, #264]	; 0x108
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    2606:	f8a4 b10c 	strh.w	fp, [r4, #268]	; 0x10c
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    260a:	f8a4 b120 	strh.w	fp, [r4, #288]	; 0x120
	conn->llcp_feature.features_conn = ll_feat_get();
    260e:	f00b f8e7 	bl	d7e0 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    2612:	9b07      	ldr	r3, [sp, #28]
    2614:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2618:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    261c:	f8a4 b138 	strh.w	fp, [r4, #312]	; 0x138
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2620:	f023 0303 	bic.w	r3, r3, #3
    2624:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    2628:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    262c:	f8a4 b140 	strh.w	fp, [r4, #320]	; 0x140
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    2630:	f023 0318 	bic.w	r3, r3, #24
    2634:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2638:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_terminate.reason_final = 0U;
    263c:	f884 b143 	strb.w	fp, [r4, #323]	; 0x143
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2640:	f023 0307 	bic.w	r3, r3, #7
    2644:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->llcp_conn_param.disabled = 0U;
    2648:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    264c:	f8a4 b164 	strh.w	fp, [r4, #356]	; 0x164
	conn->llcp_conn_param.disabled = 0U;
    2650:	f36b 1345 	bfi	r3, fp, #5, #1
    2654:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_length.disabled = 0U;
    2658:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_conn_param.req = 0U;
    265c:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.disabled = 0U;
    2660:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    2664:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    2666:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_feature.features_peer = 0;
    266a:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    266c:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
	conn->llcp_feature.features_peer = 0;
    2670:	e9c4 234c 	strd	r2, r3, [r4, #304]	; 0x130
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    2674:	f8a4 b1ac 	strh.w	fp, [r4, #428]	; 0x1ac
	conn->llcp_length.cache.tx_octets = 0U;
    2678:	f8a4 b1b8 	strh.w	fp, [r4, #440]	; 0x1b8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    267c:	f00e fb3a 	bl	10cf4 <ull_conn_default_tx_octets_get>
    2680:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
    2684:	f00e fb3c 	bl	10d00 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    2688:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    268c:	4b23      	ldr	r3, [pc, #140]	; (271c <ll_create_connection+0x3a4>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    268e:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    2692:	4013      	ands	r3, r2
    2694:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    2698:	f00e fb38 	bl	10d0c <ull_conn_default_phy_tx_get>
    269c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    26a0:	f360 0302 	bfi	r3, r0, #0, #3
    26a4:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    26a8:	f00e fb36 	bl	10d18 <ull_conn_default_phy_rx_get>
    26ac:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    26b0:	f8c4 b1c4 	str.w	fp, [r4, #452]	; 0x1c4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    26b4:	f360 03c5 	bfi	r3, r0, #3, #3
    26b8:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->ull.ticks_prepare_to_start =
    26bc:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    26be:	e9c4 bb74 	strd	fp, fp, [r4, #464]	; 0x1d0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    26c2:	e9c4 bb72 	strd	fp, fp, [r4, #456]	; 0x1c8
	conn->ull.ticks_active_to_start = 0U;
    26c6:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    26ca:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    26ce:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    26d0:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    26d4:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    26d8:	f884 b000 	strb.w	fp, [r4]
    26dc:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    26de:	e675      	b.n	23cc <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    26e0:	200c      	movs	r0, #12
}
    26e2:	b00b      	add	sp, #44	; 0x2c
    26e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    26e8:	2000      	movs	r0, #0
    26ea:	f013 fb67 	bl	15dbc <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    26ee:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    26f2:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    26f6:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    26f8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    26fc:	e693      	b.n	2426 <ll_create_connection+0xae>
    26fe:	bf00      	nop
    2700:	1afd498d 	.word	0x1afd498d
    2704:	00000007 	.word	0x00000007
    2708:	3b9aca00 	.word	0x3b9aca00
    270c:	01480148 	.word	0x01480148
    2710:	aaaaaaab 	.word	0xaaaaaaab
    2714:	01c9c37f 	.word	0x01c9c37f
    2718:	026259ff 	.word	0x026259ff
    271c:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    2720:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    2722:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2724:	b163      	cbz	r3, 2740 <ll_create_connection+0x3c8>
    2726:	4a2d      	ldr	r2, [pc, #180]	; (27dc <ll_create_connection+0x464>)
    2728:	492d      	ldr	r1, [pc, #180]	; (27e0 <ll_create_connection+0x468>)
    272a:	482e      	ldr	r0, [pc, #184]	; (27e4 <ll_create_connection+0x46c>)
    272c:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    2730:	f01c fff5 	bl	1f71e <printk>
    2734:	4040      	eors	r0, r0
    2736:	f380 8811 	msr	BASEPRI, r0
    273a:	f04f 0003 	mov.w	r0, #3
    273e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    2740:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    2744:	f104 0048 	add.w	r0, r4, #72	; 0x48
    2748:	f007 ff5e 	bl	a608 <memq_deinit>
	LL_ASSERT(link);
    274c:	4606      	mov	r6, r0
    274e:	2800      	cmp	r0, #0
    2750:	d031      	beq.n	27b6 <ll_create_connection+0x43e>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    2752:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    2754:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    2756:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
	LL_ASSERT(link);
    275a:	b1f4      	cbz	r4, 279a <ll_create_connection+0x422>

	ll_rx_link_release(link);
    275c:	4620      	mov	r0, r4
    275e:	f00b fd87 	bl	e270 <ll_rx_link_release>

	ll_conn_release(conn);
    2762:	4638      	mov	r0, r7
    2764:	f00d ff84 	bl	10670 <ll_conn_release>
	scan->lll.conn = NULL;
    2768:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    276a:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    276c:	622b      	str	r3, [r5, #32]
}
    276e:	b00b      	add	sp, #44	; 0x2c
    2770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    2774:	4a19      	ldr	r2, [pc, #100]	; (27dc <ll_create_connection+0x464>)
    2776:	491c      	ldr	r1, [pc, #112]	; (27e8 <ll_create_connection+0x470>)
    2778:	481a      	ldr	r0, [pc, #104]	; (27e4 <ll_create_connection+0x46c>)
    277a:	23bf      	movs	r3, #191	; 0xbf
    277c:	f01c ffcf 	bl	1f71e <printk>
    2780:	4040      	eors	r0, r0
    2782:	f380 8811 	msr	BASEPRI, r0
    2786:	f04f 0003 	mov.w	r0, #3
    278a:	df02      	svc	2
    278c:	e69a      	b.n	24c4 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    278e:	2007      	movs	r0, #7
    2790:	e66e      	b.n	2470 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    2792:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2796:	6760      	str	r0, [r4, #116]	; 0x74
    2798:	e6a4      	b.n	24e4 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    279a:	4a10      	ldr	r2, [pc, #64]	; (27dc <ll_create_connection+0x464>)
    279c:	4913      	ldr	r1, [pc, #76]	; (27ec <ll_create_connection+0x474>)
    279e:	4811      	ldr	r0, [pc, #68]	; (27e4 <ll_create_connection+0x46c>)
    27a0:	f240 43c1 	movw	r3, #1217	; 0x4c1
    27a4:	f01c ffbb 	bl	1f71e <printk>
    27a8:	4040      	eors	r0, r0
    27aa:	f380 8811 	msr	BASEPRI, r0
    27ae:	f04f 0003 	mov.w	r0, #3
    27b2:	df02      	svc	2
    27b4:	e7d2      	b.n	275c <ll_create_connection+0x3e4>
	LL_ASSERT(link);
    27b6:	4a09      	ldr	r2, [pc, #36]	; (27dc <ll_create_connection+0x464>)
    27b8:	490c      	ldr	r1, [pc, #48]	; (27ec <ll_create_connection+0x474>)
    27ba:	480a      	ldr	r0, [pc, #40]	; (27e4 <ll_create_connection+0x46c>)
    27bc:	f240 43ba 	movw	r3, #1210	; 0x4ba
    27c0:	f01c ffad 	bl	1f71e <printk>
    27c4:	4040      	eors	r0, r0
    27c6:	f380 8811 	msr	BASEPRI, r0
    27ca:	f04f 0003 	mov.w	r0, #3
    27ce:	df02      	svc	2
    27d0:	e7bf      	b.n	2752 <ll_create_connection+0x3da>
		ll_rx_link_release(link);
    27d2:	9807      	ldr	r0, [sp, #28]
    27d4:	f00b fd4c 	bl	e270 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    27d8:	2007      	movs	r0, #7
    27da:	e649      	b.n	2470 <ll_create_connection+0xf8>
    27dc:	00025874 	.word	0x00025874
    27e0:	0002552c 	.word	0x0002552c
    27e4:	000250f0 	.word	0x000250f0
    27e8:	000252cc 	.word	0x000252cc
    27ec:	00025658 	.word	0x00025658

000027f0 <ull_central_setup>:
{
    27f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    27f4:	4680      	mov	r8, r0
{
    27f6:	b08d      	sub	sp, #52	; 0x34
    27f8:	4604      	mov	r4, r0
    27fa:	460f      	mov	r7, r1
    27fc:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    27fe:	f100 0124 	add.w	r1, r0, #36	; 0x24
    2802:	2206      	movs	r2, #6
    2804:	a80a      	add	r0, sp, #40	; 0x28
	peer_addr_type = pdu_tx->rx_addr;
    2806:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    280a:	f01d ff8d 	bl	20728 <memcpy>
	chan_sel = pdu_tx->chan_sel;
    280e:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2812:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    2816:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    281a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    281e:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2820:	f040 8100 	bne.w	2a24 <ull_central_setup+0x234>
	cc->status = 0U;
    2824:	2300      	movs	r3, #0
    2826:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    2828:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    282a:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    282e:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    2832:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    2836:	f000 80df 	beq.w	29f8 <ull_central_setup+0x208>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    283a:	f104 011e 	add.w	r1, r4, #30
    283e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    2842:	f01d ff71 	bl	20728 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    2846:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    284a:	f000 80dd 	beq.w	2a08 <ull_central_setup+0x218>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    284e:	4640      	mov	r0, r8
    2850:	f104 021f 	add.w	r2, r4, #31
    2854:	f104 011e 	add.w	r1, r4, #30
    2858:	f012 ff68 	bl	1572c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    285c:	7fa3      	ldrb	r3, [r4, #30]
    285e:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2860:	a90a      	add	r1, sp, #40	; 0x28
		cc->peer_addr_type += 2;
    2862:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2864:	2206      	movs	r2, #6
    2866:	f104 0025 	add.w	r0, r4, #37	; 0x25
    286a:	f01d ff5d 	bl	20728 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    2874:	89eb      	ldrh	r3, [r5, #14]
    2876:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    2878:	8a2b      	ldrh	r3, [r5, #16]
    287a:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    287c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    2880:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    2882:	f014 fc6b 	bl	1715c <lll_clock_sca_local_get>
    2886:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    288a:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    288e:	4640      	mov	r0, r8
    2890:	f00d fef4 	bl	1067c <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    2894:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    2896:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    2898:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    289a:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    289c:	6820      	ldr	r0, [r4, #0]
    289e:	f00b fcf9 	bl	e294 <ll_rx_put>
		rx->handle = lll->handle;
    28a2:	89ab      	ldrh	r3, [r5, #12]
    28a4:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    28a6:	231b      	movs	r3, #27
		link = rx->link;
    28a8:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    28aa:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    28ac:	f1b9 0f00 	cmp.w	r9, #0
    28b0:	f040 80c6 	bne.w	2a40 <ull_central_setup+0x250>
			cs->csa = 0x00;
    28b4:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    28b8:	4631      	mov	r1, r6
    28ba:	4620      	mov	r0, r4
    28bc:	f00b fcea 	bl	e294 <ll_rx_put>
	ll_rx_sched();
    28c0:	f00b fcf2 	bl	e2a8 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    28c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    28c8:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    28cc:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    28d0:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    28d4:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    28d6:	429e      	cmp	r6, r3
    28d8:	bf38      	it	cc
    28da:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    28dc:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    28e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    28e4:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    28e8:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    28ec:	f014 fa44 	bl	16d78 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    28f0:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28f2:	2200      	movs	r2, #0
    28f4:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    28f6:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28f8:	2001      	movs	r0, #1
    28fa:	f007 fed1 	bl	a6a0 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    28fe:	4650      	mov	r0, sl
    2900:	f00c ffca 	bl	f898 <ull_scan_handle_get>
    2904:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2906:	4b56      	ldr	r3, [pc, #344]	; (2a60 <ull_central_setup+0x270>)
    2908:	f8cd a000 	str.w	sl, [sp]
    290c:	b2d2      	uxtb	r2, r2
    290e:	2101      	movs	r1, #1
    2910:	2000      	movs	r0, #0
    2912:	f009 f95f 	bl	bbd4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2916:	f030 0302 	bics.w	r3, r0, #2
    291a:	d00c      	beq.n	2936 <ull_central_setup+0x146>
    291c:	4a51      	ldr	r2, [pc, #324]	; (2a64 <ull_central_setup+0x274>)
    291e:	4952      	ldr	r1, [pc, #328]	; (2a68 <ull_central_setup+0x278>)
    2920:	4852      	ldr	r0, [pc, #328]	; (2a6c <ull_central_setup+0x27c>)
    2922:	f240 33c9 	movw	r3, #969	; 0x3c9
    2926:	f01c fefa 	bl	1f71e <printk>
    292a:	4040      	eors	r0, r0
    292c:	f380 8811 	msr	BASEPRI, r0
    2930:	f04f 0003 	mov.w	r0, #3
    2934:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2936:	f04f 0a00 	mov.w	sl, #0
    293a:	4653      	mov	r3, sl
    293c:	2203      	movs	r2, #3
    293e:	2101      	movs	r1, #1
    2940:	f8cd a000 	str.w	sl, [sp]
    2944:	4650      	mov	r0, sl
    2946:	f009 f945 	bl	bbd4 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    294a:	4640      	mov	r0, r8
    294c:	f00d fe96 	bl	1067c <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2950:	68bb      	ldr	r3, [r7, #8]
    2952:	f8cd 8018 	str.w	r8, [sp, #24]
    2956:	3b09      	subs	r3, #9
    2958:	1b9e      	subs	r6, r3, r6
    295a:	4b45      	ldr	r3, [pc, #276]	; (2a70 <ull_central_setup+0x280>)
    295c:	9307      	str	r3, [sp, #28]
    295e:	4b45      	ldr	r3, [pc, #276]	; (2a74 <ull_central_setup+0x284>)
    2960:	9305      	str	r3, [sp, #20]
    2962:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2966:	4f44      	ldr	r7, [pc, #272]	; (2a78 <ull_central_setup+0x288>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2968:	9308      	str	r3, [sp, #32]
    296a:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    296e:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2972:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2976:	1d45      	adds	r5, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2978:	a337      	add	r3, pc, #220	; (adr r3, 2a58 <ull_central_setup+0x268>)
    297a:	e9d3 2300 	ldrd	r2, r3, [r3]
    297e:	4648      	mov	r0, r9
    2980:	4641      	mov	r1, r8
    2982:	f7fd ffb3 	bl	8ec <__aeabi_uldivmod>
    2986:	4610      	mov	r0, r2
    2988:	4619      	mov	r1, r3
    298a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    298e:	2300      	movs	r3, #0
    2990:	f7fd ffac 	bl	8ec <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2994:	a330      	add	r3, pc, #192	; (adr r3, 2a58 <ull_central_setup+0x268>)
    2996:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    299a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    299c:	4641      	mov	r1, r8
    299e:	4648      	mov	r0, r9
    29a0:	f7fd ffa4 	bl	8ec <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29a4:	a32c      	add	r3, pc, #176	; (adr r3, 2a58 <ull_central_setup+0x268>)
    29a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    29aa:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29ac:	fba4 0107 	umull	r0, r1, r4, r7
    29b0:	f7fd ff9c 	bl	8ec <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29b4:	b2ed      	uxtb	r5, r5
    29b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29ba:	9000      	str	r0, [sp, #0]
    29bc:	4633      	mov	r3, r6
    29be:	462a      	mov	r2, r5
    29c0:	2101      	movs	r1, #1
    29c2:	4650      	mov	r0, sl
    29c4:	f009 f87c 	bl	bac0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    29c8:	f030 0302 	bics.w	r3, r0, #2
    29cc:	d00c      	beq.n	29e8 <ull_central_setup+0x1f8>
    29ce:	4a25      	ldr	r2, [pc, #148]	; (2a64 <ull_central_setup+0x274>)
    29d0:	4925      	ldr	r1, [pc, #148]	; (2a68 <ull_central_setup+0x278>)
    29d2:	4826      	ldr	r0, [pc, #152]	; (2a6c <ull_central_setup+0x27c>)
    29d4:	f240 33fa 	movw	r3, #1018	; 0x3fa
    29d8:	f01c fea1 	bl	1f71e <printk>
    29dc:	4040      	eors	r0, r0
    29de:	f380 8811 	msr	BASEPRI, r0
    29e2:	f04f 0003 	mov.w	r0, #3
    29e6:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    29e8:	2201      	movs	r2, #1
    29ea:	2102      	movs	r1, #2
    29ec:	4610      	mov	r0, r2
    29ee:	f007 fe57 	bl	a6a0 <mayfly_enable>
}
    29f2:	b00d      	add	sp, #52	; 0x34
    29f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    29f8:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    29fc:	f01d fe9f 	bl	2073e <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2a00:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    2a04:	f47f af23 	bne.w	284e <ull_central_setup+0x5e>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2a08:	2206      	movs	r2, #6
    2a0a:	2100      	movs	r1, #0
    2a0c:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2a10:	f01d fe95 	bl	2073e <memset>
		cc->peer_addr_type = peer_addr_type;
    2a14:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    2a16:	a90a      	add	r1, sp, #40	; 0x28
    2a18:	2206      	movs	r2, #6
    2a1a:	f104 001f 	add.w	r0, r4, #31
    2a1e:	f01d fe83 	bl	20728 <memcpy>
    2a22:	e724      	b.n	286e <ull_central_setup+0x7e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2a24:	4a0f      	ldr	r2, [pc, #60]	; (2a64 <ull_central_setup+0x274>)
    2a26:	4915      	ldr	r1, [pc, #84]	; (2a7c <ull_central_setup+0x28c>)
    2a28:	4810      	ldr	r0, [pc, #64]	; (2a6c <ull_central_setup+0x27c>)
    2a2a:	f44f 7352 	mov.w	r3, #840	; 0x348
    2a2e:	f01c fe76 	bl	1f71e <printk>
    2a32:	4040      	eors	r0, r0
    2a34:	f380 8811 	msr	BASEPRI, r0
    2a38:	f04f 0003 	mov.w	r0, #3
    2a3c:	df02      	svc	2
    2a3e:	e6f1      	b.n	2824 <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    2a40:	7f6b      	ldrb	r3, [r5, #29]
    2a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a46:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2a48:	1d28      	adds	r0, r5, #4
    2a4a:	f012 fc6d 	bl	15328 <lll_chan_id>
			cs->csa = 0x01;
    2a4e:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2a50:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    2a52:	7733      	strb	r3, [r6, #28]
    2a54:	e730      	b.n	28b8 <ull_central_setup+0xc8>
    2a56:	bf00      	nop
    2a58:	1afd498d 	.word	0x1afd498d
    2a5c:	00000007 	.word	0x00000007
    2a60:	00014b45 	.word	0x00014b45
    2a64:	00025874 	.word	0x00025874
    2a68:	000256e0 	.word	0x000256e0
    2a6c:	000250f0 	.word	0x000250f0
    2a70:	00014b49 	.word	0x00014b49
    2a74:	00014b79 	.word	0x00014b79
    2a78:	3b9aca00 	.word	0x3b9aca00
    2a7c:	00025200 	.word	0x00025200

00002a80 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    2a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a84:	b08f      	sub	sp, #60	; 0x3c
    2a86:	461e      	mov	r6, r3
    2a88:	9309      	str	r3, [sp, #36]	; 0x24
    2a8a:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    2a8c:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    2a8e:	1d0a      	adds	r2, r1, #4
    2a90:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2b98 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    2a94:	f8df b104 	ldr.w	fp, [pc, #260]	; 2b9c <ull_sched_after_mstr_slot_get+0x11c>
    2a98:	f8df a104 	ldr.w	sl, [pc, #260]	; 2ba0 <ull_sched_after_mstr_slot_get+0x120>
    2a9c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2ba4 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    2aa0:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2aa2:	2100      	movs	r1, #0
    2aa4:	6031      	str	r1, [r6, #0]
{
    2aa6:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    2aa8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2aac:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2aae:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    2ab0:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2ab2:	9106      	str	r1, [sp, #24]
    2ab4:	af0d      	add	r7, sp, #52	; 0x34
    2ab6:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    2ab8:	2302      	movs	r3, #2
    2aba:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    2abc:	e9cd 8701 	strd	r8, r7, [sp, #4]
    2ac0:	9600      	str	r6, [sp, #0]
    2ac2:	462b      	mov	r3, r5
    2ac4:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    2ac8:	4621      	mov	r1, r4
    2aca:	2000      	movs	r0, #0
    2acc:	f009 f8c4 	bl	bc58 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    2ad0:	2802      	cmp	r0, #2
    2ad2:	d02d      	beq.n	2b30 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d130      	bne.n	2b3c <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    2ada:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2ade:	2bff      	cmp	r3, #255	; 0xff
    2ae0:	d03c      	beq.n	2b5c <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    2ae2:	2b05      	cmp	r3, #5
    2ae4:	d1e8      	bne.n	2ab8 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    2ae6:	2000      	movs	r0, #0
    2ae8:	f00d fdd0 	bl	1068c <ll_conn_get>
		if (conn && !conn->lll.role) {
    2aec:	2800      	cmp	r0, #0
    2aee:	d0e3      	beq.n	2ab8 <ull_sched_after_mstr_slot_get+0x38>
    2af0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    2af4:	2b00      	cmp	r3, #0
    2af6:	dbdf      	blt.n	2ab8 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    2af8:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    2afa:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    2afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    2afe:	29ff      	cmp	r1, #255	; 0xff
    2b00:	d00c      	beq.n	2b1c <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    2b02:	9906      	ldr	r1, [sp, #24]
    2b04:	9207      	str	r2, [sp, #28]
    2b06:	4618      	mov	r0, r3
    2b08:	9304      	str	r3, [sp, #16]
    2b0a:	f009 f905 	bl	bd18 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    2b0e:	9b05      	ldr	r3, [sp, #20]
    2b10:	9a08      	ldr	r2, [sp, #32]
    2b12:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    2b14:	4288      	cmp	r0, r1
    2b16:	9b04      	ldr	r3, [sp, #16]
    2b18:	9a07      	ldr	r2, [sp, #28]
    2b1a:	d822      	bhi.n	2b62 <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    2b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    2b20:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2b24:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    2b26:	e7c7      	b.n	2ab8 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    2b28:	4621      	mov	r1, r4
    2b2a:	2000      	movs	r0, #0
    2b2c:	f009 f8da 	bl	bce4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    2b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2b32:	2b02      	cmp	r3, #2
    2b34:	d0f8      	beq.n	2b28 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d0ce      	beq.n	2ada <ull_sched_after_mstr_slot_get+0x5a>
    2b3c:	2373      	movs	r3, #115	; 0x73
    2b3e:	465a      	mov	r2, fp
    2b40:	4651      	mov	r1, sl
    2b42:	4648      	mov	r0, r9
    2b44:	f01c fdeb 	bl	1f71e <printk>
    2b48:	4040      	eors	r0, r0
    2b4a:	f380 8811 	msr	BASEPRI, r0
    2b4e:	f04f 0003 	mov.w	r0, #3
    2b52:	df02      	svc	2
		if (ticker_id == 0xff) {
    2b54:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2b58:	2bff      	cmp	r3, #255	; 0xff
    2b5a:	d1c2      	bne.n	2ae2 <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    2b5c:	9b04      	ldr	r3, [sp, #16]
    2b5e:	2bff      	cmp	r3, #255	; 0xff
    2b60:	d010      	beq.n	2b84 <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2b62:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2b66:	4810      	ldr	r0, [pc, #64]	; (2ba8 <ull_sched_after_mstr_slot_get+0x128>)
    2b68:	4413      	add	r3, r2
    2b6a:	fba3 0100 	umull	r0, r1, r3, r0
    2b6e:	2207      	movs	r2, #7
    2b70:	fb02 1103 	mla	r1, r2, r3, r1
    2b74:	a306      	add	r3, pc, #24	; (adr r3, 2b90 <ull_sched_after_mstr_slot_get+0x110>)
    2b76:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b7a:	f7fd feb7 	bl	8ec <__aeabi_uldivmod>
    2b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    2b80:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2b82:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    2b84:	b00f      	add	sp, #60	; 0x3c
    2b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b8a:	bf00      	nop
    2b8c:	f3af 8000 	nop.w
    2b90:	3b9aca00 	.word	0x3b9aca00
    2b94:	00000000 	.word	0x00000000
    2b98:	00014f15 	.word	0x00014f15
    2b9c:	000258c0 	.word	0x000258c0
    2ba0:	00025904 	.word	0x00025904
    2ba4:	000250f0 	.word	0x000250f0
    2ba8:	1afd498d 	.word	0x1afd498d
    2bac:	00000000 	.word	0x00000000

00002bb0 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    2bb6:	9201      	str	r2, [sp, #4]
{
    2bb8:	4615      	mov	r5, r2
    2bba:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    2bbc:	aa01      	add	r2, sp, #4
    2bbe:	2002      	movs	r0, #2
    2bc0:	f7ff ff5e 	bl	2a80 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    2bc4:	6823      	ldr	r3, [r4, #0]
    2bc6:	b30b      	cbz	r3, 2c0c <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    2bc8:	9801      	ldr	r0, [sp, #4]
    2bca:	1b43      	subs	r3, r0, r5
    2bcc:	021b      	lsls	r3, r3, #8
    2bce:	d41f      	bmi.n	2c10 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    2bd0:	4629      	mov	r1, r5
    2bd2:	f009 f8a1 	bl	bd18 <ticker_ticks_diff_get>
    2bd6:	4a1a      	ldr	r2, [pc, #104]	; (2c40 <after_mstr_offset_get+0x90>)
    2bd8:	4603      	mov	r3, r0
    2bda:	2107      	movs	r1, #7
    2bdc:	fba0 0202 	umull	r0, r2, r0, r2
    2be0:	fb01 2103 	mla	r1, r1, r3, r2
    2be4:	a314      	add	r3, pc, #80	; (adr r3, 2c38 <after_mstr_offset_get+0x88>)
    2be6:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bea:	f7fd fe7f 	bl	8ec <__aeabi_uldivmod>
    2bee:	6822      	ldr	r2, [r4, #0]
    2bf0:	4402      	add	r2, r0
    2bf2:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    2bf4:	2a00      	cmp	r2, #0
    2bf6:	db09      	blt.n	2c0c <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    2bf8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2bfc:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    2c00:	4290      	cmp	r0, r2
    2c02:	d203      	bcs.n	2c0c <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    2c04:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    2c06:	4282      	cmp	r2, r0
    2c08:	d8fc      	bhi.n	2c04 <after_mstr_offset_get+0x54>
    2c0a:	6022      	str	r2, [r4, #0]
		}
	}
}
    2c0c:	b002      	add	sp, #8
    2c0e:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    2c10:	4601      	mov	r1, r0
    2c12:	4628      	mov	r0, r5
    2c14:	f009 f880 	bl	bd18 <ticker_ticks_diff_get>
    2c18:	4a09      	ldr	r2, [pc, #36]	; (2c40 <after_mstr_offset_get+0x90>)
    2c1a:	4603      	mov	r3, r0
    2c1c:	2107      	movs	r1, #7
    2c1e:	fba0 0202 	umull	r0, r2, r0, r2
    2c22:	fb01 2103 	mla	r1, r1, r3, r2
    2c26:	a304      	add	r3, pc, #16	; (adr r3, 2c38 <after_mstr_offset_get+0x88>)
    2c28:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c2c:	f7fd fe5e 	bl	8ec <__aeabi_uldivmod>
    2c30:	6822      	ldr	r2, [r4, #0]
    2c32:	1a12      	subs	r2, r2, r0
    2c34:	6022      	str	r2, [r4, #0]
    2c36:	e7dd      	b.n	2bf4 <after_mstr_offset_get+0x44>
    2c38:	3b9aca00 	.word	0x3b9aca00
    2c3c:	00000000 	.word	0x00000000
    2c40:	1afd498d 	.word	0x1afd498d
    2c44:	00000000 	.word	0x00000000

00002c48 <ull_sched_mfy_win_offset_select>:
{
    2c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c4c:	f8b0 1194 	ldrh.w	r1, [r0, #404]	; 0x194
{
    2c50:	b088      	sub	sp, #32
    2c52:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c54:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2c58:	4843      	ldr	r0, [pc, #268]	; (2d68 <ull_sched_mfy_win_offset_select+0x120>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2c5a:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c5c:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2c60:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    2c62:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2c64:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    2c68:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c6c:	fba1 0100 	umull	r0, r1, r1, r0
    2c70:	a33b      	add	r3, pc, #236	; (adr r3, 2d60 <ull_sched_mfy_win_offset_select+0x118>)
    2c72:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2c76:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c78:	f7fd fe38 	bl	8ec <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    2c7c:	f10d 030f 	add.w	r3, sp, #15
    2c80:	9501      	str	r5, [sp, #4]
    2c82:	9300      	str	r3, [sp, #0]
    2c84:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c88:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    2c8a:	aa04      	add	r2, sp, #16
    2c8c:	4620      	mov	r0, r4
    2c8e:	2101      	movs	r1, #1
    2c90:	f012 f942 	bl	14f18 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    2c94:	f89d 800f 	ldrb.w	r8, [sp, #15]
    2c98:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    2c9c:	fa5f fc8c 	uxtb.w	ip, ip
    2ca0:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    2ca4:	4630      	mov	r0, r6
    2ca6:	f504 77ca 	add.w	r7, r4, #404	; 0x194
    2caa:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    2cae:	f504 76d0 	add.w	r6, r4, #416	; 0x1a0
			if (win_offset_s != 0xffff) {
    2cb2:	f64f 7eff 	movw	lr, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    2cb6:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    2cb8:	f1b8 0f00 	cmp.w	r8, #0
    2cbc:	d00a      	beq.n	2cd4 <ull_sched_mfy_win_offset_select+0x8c>
    2cbe:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    2cc0:	4572      	cmp	r2, lr
    2cc2:	d004      	beq.n	2cce <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    2cc4:	8819      	ldrh	r1, [r3, #0]
    2cc6:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    2cc8:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    2ccc:	d013      	beq.n	2cf6 <ull_sched_mfy_win_offset_select+0xae>
		while (offset_index_m < offset_m_max) {
    2cce:	3302      	adds	r3, #2
    2cd0:	459c      	cmp	ip, r3
    2cd2:	d1f5      	bne.n	2cc0 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    2cd4:	3702      	adds	r7, #2
    2cd6:	42be      	cmp	r6, r7
    2cd8:	d1ed      	bne.n	2cb6 <ull_sched_mfy_win_offset_select+0x6e>
	} else if (!has_offset_s) {
    2cda:	bb08      	cbnz	r0, 2d20 <ull_sched_mfy_win_offset_select+0xd8>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    2cdc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2ce0:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    2ce4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2ce8:	fb03 f202 	mul.w	r2, r3, r2
    2cec:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
	dst[1] = val >> 8;
    2cf0:	0a18      	lsrs	r0, r3, #8
	dst[0] = val;
    2cf2:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    2cf4:	e009      	b.n	2d0a <ull_sched_mfy_win_offset_select+0xc2>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2cf6:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    2cfa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2cfe:	fb02 f303 	mul.w	r3, r2, r3
    2d02:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    2d06:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
    2d08:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    2d0a:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2d0c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    2d10:	2204      	movs	r2, #4
    2d12:	f362 0302 	bfi	r3, r2, #0, #3
    2d16:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    2d1a:	b008      	add	sp, #32
    2d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx = CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2d20:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		pdu_ctrl_tx->len =
    2d24:	2203      	movs	r2, #3
    2d26:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d2a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2d2e:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
    2d32:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d34:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    2d38:	2011      	movs	r0, #17
    2d3a:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d3e:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2d42:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2d46:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2d48:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2d4a:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2d4e:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2d50:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
}
    2d54:	b008      	add	sp, #32
    2d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d5a:	bf00      	nop
    2d5c:	f3af 8000 	nop.w
    2d60:	1afd498d 	.word	0x1afd498d
    2d64:	00000007 	.word	0x00000007
    2d68:	3b9aca00 	.word	0x3b9aca00
    2d6c:	00000000 	.word	0x00000000

00002d70 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    2d70:	b538      	push	{r3, r4, r5, lr}
    2d72:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    2d74:	f015 f882 	bl	17e7c <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    2d78:	7da2      	ldrb	r2, [r4, #22]
    2d7a:	f3c2 0341 	ubfx	r3, r2, #1, #2
    2d7e:	3301      	adds	r3, #1
    2d80:	f003 0303 	and.w	r3, r3, #3
    2d84:	2b03      	cmp	r3, #3
    2d86:	d034      	beq.n	2df2 <isr_window+0x82>
    2d88:	f363 0242 	bfi	r2, r3, #1, #2
    2d8c:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    2d8e:	f103 0025 	add.w	r0, r3, #37	; 0x25
    2d92:	f013 ffaf 	bl	16cf4 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    2d96:	6863      	ldr	r3, [r4, #4]
    2d98:	b30b      	cbz	r3, 2dde <isr_window+0x6e>
    2d9a:	6923      	ldr	r3, [r4, #16]
    2d9c:	b1fb      	cbz	r3, 2dde <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    2d9e:	f016 fd5d 	bl	1985c <radio_tmr_start_get>
    2da2:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    2da4:	f008 ffb6 	bl	bd14 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    2da8:	1cc1      	adds	r1, r0, #3
    2daa:	2000      	movs	r0, #0
    2dac:	f016 fd24 	bl	197f8 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    2db0:	f016 fda0 	bl	198f4 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    2db4:	f016 fd52 	bl	1985c <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2db8:	4629      	mov	r1, r5
    2dba:	f008 ffad 	bl	bd18 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    2dbe:	4912      	ldr	r1, [pc, #72]	; (2e08 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2dc0:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    2dc2:	2207      	movs	r2, #7
    2dc4:	fba0 0101 	umull	r0, r1, r0, r1
    2dc8:	fb02 1103 	mla	r1, r2, r3, r1
    2dcc:	a30c      	add	r3, pc, #48	; (adr r3, 2e00 <isr_window+0x90>)
    2dce:	e9d3 2300 	ldrd	r2, r3, [r3]
    2dd2:	f7fd fd8b 	bl	8ec <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    2dd6:	6923      	ldr	r3, [r4, #16]
    2dd8:	1a1b      	subs	r3, r3, r0
    2dda:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    2ddc:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    2dde:	f008 ff99 	bl	bd14 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    2de2:	1cc1      	adds	r1, r0, #3
    2de4:	2000      	movs	r0, #0
    2de6:	f016 fd07 	bl	197f8 <radio_tmr_start_tick>
}
    2dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    2dee:	f016 bd81 	b.w	198f4 <radio_tmr_end_capture>
		lll->chan = 0U;
    2df2:	f36f 0242 	bfc	r2, #1, #2
    2df6:	75a2      	strb	r2, [r4, #22]
    2df8:	2025      	movs	r0, #37	; 0x25
    2dfa:	e7ca      	b.n	2d92 <isr_window+0x22>
    2dfc:	f3af 8000 	nop.w
    2e00:	3b9aca00 	.word	0x3b9aca00
    2e04:	00000000 	.word	0x00000000
    2e08:	1afd498d 	.word	0x1afd498d
    2e0c:	00000000 	.word	0x00000000

00002e10 <isr_rx>:
{
    2e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e14:	b087      	sub	sp, #28
    2e16:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    2e18:	f016 fb02 	bl	19420 <radio_is_done>
	if (trx_done) {
    2e1c:	b2c0      	uxtb	r0, r0
    2e1e:	b950      	cbnz	r0, 2e36 <isr_rx+0x26>
	lll_isr_status_reset();
    2e20:	f013 ffc0 	bl	16da4 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    2e24:	48b8      	ldr	r0, [pc, #736]	; (3108 <isr_rx+0x2f8>)
    2e26:	4621      	mov	r1, r4
    2e28:	f016 f9d4 	bl	191d4 <radio_isr_set>
}
    2e2c:	b007      	add	sp, #28
    2e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    2e32:	f016 bacb 	b.w	193cc <radio_disable>
		crc_ok = radio_crc_is_valid();
    2e36:	f016 fb13 	bl	19460 <radio_crc_is_valid>
    2e3a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    2e3c:	f016 fc2e 	bl	1969c <radio_filter_has_match>
    2e40:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    2e42:	f016 fc35 	bl	196b0 <radio_filter_match_get>
    2e46:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    2e48:	f016 fe4a 	bl	19ae0 <radio_ar_has_match>
    2e4c:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    2e4e:	f016 fe2b 	bl	19aa8 <radio_ar_match_get>
    2e52:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    2e54:	f016 fbe6 	bl	19624 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    2e58:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    2e5a:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    2e5c:	f016 fbc8 	bl	195f0 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    2e60:	f013 ffa0 	bl	16da4 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    2e64:	2d00      	cmp	r5, #0
    2e66:	d0dd      	beq.n	2e24 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    2e68:	2001      	movs	r0, #1
    2e6a:	f00b fb6f 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    2e6e:	4605      	mov	r5, r0
    2e70:	2800      	cmp	r0, #0
    2e72:	f000 817c 	beq.w	316e <isr_rx+0x35e>
	rl_idx = devmatch_ok ?
    2e76:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    2e7a:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    2e7c:	f040 80d5 	bne.w	302a <isr_rx+0x21a>
    2e80:	2e00      	cmp	r6, #0
    2e82:	f040 80cc 	bne.w	301e <isr_rx+0x20e>
    2e86:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    2e88:	465a      	mov	r2, fp
    2e8a:	463b      	mov	r3, r7
    2e8c:	4631      	mov	r1, r6
    2e8e:	4620      	mov	r0, r4
    2e90:	f015 fa22 	bl	182d8 <lll_scan_isr_rx_check>
	if (has_adva &&
    2e94:	2800      	cmp	r0, #0
    2e96:	d0c5      	beq.n	2e24 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
    2e98:	6863      	ldr	r3, [r4, #4]
	bool dir_report = false;
    2e9a:	2200      	movs	r2, #0
		rssi_ready = radio_rssi_is_ready();
    2e9c:	fa5f f888 	uxtb.w	r8, r8
	bool dir_report = false;
    2ea0:	f88d 2013 	strb.w	r2, [sp, #19]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	f000 80dc 	beq.w	3062 <isr_rx+0x252>
    2eaa:	6863      	ldr	r3, [r4, #4]
    2eac:	f893 3020 	ldrb.w	r3, [r3, #32]
    2eb0:	0799      	lsls	r1, r3, #30
    2eb2:	f100 80d6 	bmi.w	3062 <isr_rx+0x252>
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    2eb6:	7f2b      	ldrb	r3, [r5, #28]
    2eb8:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    2ebc:	2907      	cmp	r1, #7
    2ebe:	d0b1      	beq.n	2e24 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    2ec0:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    2ec2:	0712      	lsls	r2, r2, #28
    2ec4:	f140 8161 	bpl.w	318a <isr_rx+0x37a>
    2ec8:	2900      	cmp	r1, #0
    2eca:	f040 80b7 	bne.w	303c <isr_rx+0x22c>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2ece:	7f6b      	ldrb	r3, [r5, #29]
    2ed0:	2b25      	cmp	r3, #37	; 0x25
    2ed2:	f200 812a 	bhi.w	312a <isr_rx+0x31a>
			rx = ull_pdu_rx_alloc_peek(4);
    2ed6:	2004      	movs	r0, #4
    2ed8:	f00b fb38 	bl	e54c <ull_pdu_rx_alloc_peek>
		if (!rx) {
    2edc:	2800      	cmp	r0, #0
    2ede:	d0a1      	beq.n	2e24 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    2ee0:	f016 fd10 	bl	19904 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    2ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    2ee6:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    2ee8:	b943      	cbnz	r3, 2efc <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    2eea:	8c23      	ldrh	r3, [r4, #32]
    2eec:	f240 2271 	movw	r2, #625	; 0x271
    2ef0:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    2ef4:	fbb0 f2f3 	udiv	r2, r0, r3
    2ef8:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2efc:	6823      	ldr	r3, [r4, #0]
    2efe:	691a      	ldr	r2, [r3, #16]
    2f00:	4b82      	ldr	r3, [pc, #520]	; (310c <isr_rx+0x2fc>)
    2f02:	2107      	movs	r1, #7
    2f04:	fba2 0303 	umull	r0, r3, r2, r3
    2f08:	fb01 3102 	mla	r1, r1, r2, r3
    2f0c:	a37c      	add	r3, pc, #496	; (adr r3, 3100 <isr_rx+0x2f0>)
    2f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f12:	f7fd fceb 	bl	8ec <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    2f16:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2f1a:	4543      	cmp	r3, r8
    2f1c:	d382      	bcc.n	2e24 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    2f1e:	f016 fb59 	bl	195d4 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2f22:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    2f24:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2f26:	f013 f9c1 	bl	162ac <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    2f2a:	7de3      	ldrb	r3, [r4, #23]
    2f2c:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2f2e:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    2f30:	f140 81ce 	bpl.w	32d0 <isr_rx+0x4c0>
    2f34:	2800      	cmp	r0, #0
    2f36:	f000 81cb 	beq.w	32d0 <isr_rx+0x4c0>
			init_addr = lrpa->val;
    2f3a:	4683      	mov	fp, r0
			init_tx_addr = 1;
    2f3c:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    2f40:	f016 fa9c 	bl	1947c <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    2f44:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2f46:	aa05      	add	r2, sp, #20
    2f48:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    2f4a:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2f4e:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    2f50:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2f52:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2f56:	9200      	str	r2, [sp, #0]
    2f58:	4620      	mov	r0, r4
    2f5a:	2200      	movs	r2, #0
    2f5c:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    2f60:	f015 f9d4 	bl	1830c <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    2f64:	4650      	mov	r0, sl
    2f66:	f016 fa0f 	bl	19388 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    2f6a:	f016 fa4f 	bl	1940c <radio_is_ready>
    2f6e:	2800      	cmp	r0, #0
    2f70:	f040 81c4 	bne.w	32fc <isr_rx+0x4ec>
		radio_isr_set(isr_done_cleanup, lll);
    2f74:	4866      	ldr	r0, [pc, #408]	; (3110 <isr_rx+0x300>)
    2f76:	4621      	mov	r1, r4
    2f78:	f016 f92c 	bl	191d4 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    2f7c:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    2f7e:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    2f80:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    2f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    2f88:	f042 0201 	orr.w	r2, r2, #1
    2f8c:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    2f90:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    2f92:	f00b faf9 	bl	e588 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    2f96:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    2f98:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    2f9a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    2f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2fa0:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    2fa2:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    2fa4:	4651      	mov	r1, sl
    2fa6:	2224      	movs	r2, #36	; 0x24
    2fa8:	301c      	adds	r0, #28
    2faa:	f01d fbbd 	bl	20728 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    2fae:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    2fb2:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2fb6:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    2fba:	f365 1345 	bfi	r3, r5, #5, #1
    2fbe:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    2fc2:	f016 fc4b 	bl	1985c <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2fc6:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    2fc8:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2fcc:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    2fce:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2fd0:	f016 f9ea 	bl	193a8 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    2fd4:	2e00      	cmp	r6, #0
    2fd6:	bf08      	it	eq
    2fd8:	27ff      	moveq	r7, #255	; 0xff
    2fda:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    2fde:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    2fe0:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    2fe2:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    2fe6:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    2fea:	d003      	beq.n	2ff4 <isr_rx+0x1e4>
    2fec:	f1b9 0300 	subs.w	r3, r9, #0
    2ff0:	bf18      	it	ne
    2ff2:	2301      	movne	r3, #1
    2ff4:	f898 201a 	ldrb.w	r2, [r8, #26]
    2ff8:	f363 0200 	bfi	r2, r3, #0, #1
    2ffc:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    3000:	f00b fac2 	bl	e588 <ull_pdu_rx_alloc>
    3004:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    3006:	4641      	mov	r1, r8
    3008:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    300c:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    3010:	f00b fad0 	bl	e5b4 <ull_rx_put>
		ull_rx_sched();
    3014:	f00b fade 	bl	e5d4 <ull_rx_sched>
}
    3018:	b007      	add	sp, #28
    301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    301e:	fa5f f08a 	uxtb.w	r0, sl
    3022:	f013 f9d1 	bl	163c8 <ull_filter_lll_rl_irk_idx>
    3026:	4607      	mov	r7, r0
    3028:	e72e      	b.n	2e88 <isr_rx+0x78>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    302a:	7da0      	ldrb	r0, [r4, #22]
    302c:	fa5f f189 	uxtb.w	r1, r9
    3030:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3034:	f013 f95e 	bl	162f4 <ull_filter_lll_rl_idx>
    3038:	4607      	mov	r7, r0
    303a:	e725      	b.n	2e88 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    303c:	2901      	cmp	r1, #1
    303e:	d115      	bne.n	306c <isr_rx+0x25c>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3040:	7f6b      	ldrb	r3, [r5, #29]
    3042:	2b0c      	cmp	r3, #12
    3044:	f47f aeee 	bne.w	2e24 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    3048:	7f2a      	ldrb	r2, [r5, #28]
    304a:	9700      	str	r7, [sp, #0]
    304c:	2300      	movs	r3, #0
    304e:	9301      	str	r3, [sp, #4]
    3050:	09d2      	lsrs	r2, r2, #7
    3052:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3056:	4620      	mov	r0, r4
    3058:	f015 f890 	bl	1817c <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    305c:	2800      	cmp	r0, #0
    305e:	f47f af3a 	bne.w	2ed6 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3062:	7f29      	ldrb	r1, [r5, #28]
    3064:	f001 010f 	and.w	r1, r1, #15
    3068:	2900      	cmp	r1, #0
    306a:	d053      	beq.n	3114 <isr_rx+0x304>
    306c:	2906      	cmp	r1, #6
    306e:	d051      	beq.n	3114 <isr_rx+0x304>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3070:	2902      	cmp	r1, #2
    3072:	f000 809d 	beq.w	31b0 <isr_rx+0x3a0>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3076:	2901      	cmp	r1, #1
    3078:	d157      	bne.n	312a <isr_rx+0x31a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    307a:	7f6b      	ldrb	r3, [r5, #29]
    307c:	2b0c      	cmp	r3, #12
    307e:	f47f aed1 	bne.w	2e24 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    3082:	7f2a      	ldrb	r2, [r5, #28]
    3084:	9700      	str	r7, [sp, #0]
    3086:	f10d 0313 	add.w	r3, sp, #19
    308a:	9301      	str	r3, [sp, #4]
    308c:	09d2      	lsrs	r2, r2, #7
    308e:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3092:	2100      	movs	r1, #0
    3094:	4620      	mov	r0, r4
    3096:	f015 f871 	bl	1817c <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    309a:	2800      	cmp	r0, #0
    309c:	d045      	beq.n	312a <isr_rx+0x31a>
		 (pdu_adv_rx->len != 0) &&
    309e:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    30a0:	2b00      	cmp	r3, #0
    30a2:	f43f aebf 	beq.w	2e24 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    30a6:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    30a8:	b12b      	cbz	r3, 30b6 <isr_rx+0x2a6>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    30aa:	7f2b      	ldrb	r3, [r5, #28]
    30ac:	f003 030f 	and.w	r3, r3, #15
    30b0:	2b07      	cmp	r3, #7
    30b2:	f47f aeb7 	bne.w	2e24 <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    30b6:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    30b8:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    30bc:	f00b fa46 	bl	e54c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    30c0:	4605      	mov	r5, r0
    30c2:	2800      	cmp	r0, #0
    30c4:	f43f aeae 	beq.w	2e24 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    30c8:	f00b fa5e 	bl	e588 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    30cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30d0:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    30d2:	2305      	movs	r3, #5
    30d4:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    30d6:	f1b8 0f00 	cmp.w	r8, #0
    30da:	d165      	bne.n	31a8 <isr_rx+0x398>
    30dc:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    30de:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    30e0:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    30e2:	2e00      	cmp	r6, #0
    30e4:	bf08      	it	eq
    30e6:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    30e8:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    30ec:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    30ee:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    30f0:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    30f2:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    30f4:	f00b fa5e 	bl	e5b4 <ull_rx_put>
	ull_rx_sched();
    30f8:	f00b fa6c 	bl	e5d4 <ull_rx_sched>
	if (!err) {
    30fc:	e692      	b.n	2e24 <isr_rx+0x14>
    30fe:	bf00      	nop
    3100:	3b9aca00 	.word	0x3b9aca00
    3104:	00000000 	.word	0x00000000
    3108:	00017f35 	.word	0x00017f35
    310c:	1afd498d 	.word	0x1afd498d
    3110:	0001812d 	.word	0x0001812d
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3114:	7f6b      	ldrb	r3, [r5, #29]
    3116:	2b25      	cmp	r3, #37	; 0x25
    3118:	d807      	bhi.n	312a <isr_rx+0x31a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    311a:	7da2      	ldrb	r2, [r4, #22]
    311c:	0692      	lsls	r2, r2, #26
    311e:	d502      	bpl.n	3126 <isr_rx+0x316>
		   !lll->conn) {
    3120:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    3122:	2a00      	cmp	r2, #0
    3124:	d046      	beq.n	31b4 <isr_rx+0x3a4>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3126:	2b25      	cmp	r3, #37	; 0x25
    3128:	d9ba      	bls.n	30a0 <isr_rx+0x290>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    312a:	7f2b      	ldrb	r3, [r5, #28]
    312c:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    3130:	2b04      	cmp	r3, #4
    3132:	f47f ae77 	bne.w	2e24 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    3136:	7f6b      	ldrb	r3, [r5, #29]
    3138:	2b25      	cmp	r3, #37	; 0x25
    313a:	f63f ae73 	bhi.w	2e24 <isr_rx+0x14>
		   (lll->state != 0U) &&
    313e:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    3140:	07d9      	lsls	r1, r3, #31
    3142:	f57f ae6f 	bpl.w	2e24 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    3146:	f016 f999 	bl	1947c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    314a:	7f2b      	ldrb	r3, [r5, #28]
    314c:	7802      	ldrb	r2, [r0, #0]
    314e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3152:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    3156:	f47f ae65 	bne.w	2e24 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    315a:	3008      	adds	r0, #8
    315c:	2206      	movs	r2, #6
    315e:	f105 011e 	add.w	r1, r5, #30
    3162:	f01d fad0 	bl	20706 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    3166:	2800      	cmp	r0, #0
    3168:	f47f ae5c 	bne.w	2e24 <isr_rx+0x14>
    316c:	e797      	b.n	309e <isr_rx+0x28e>
	LL_ASSERT(node_rx);
    316e:	4a71      	ldr	r2, [pc, #452]	; (3334 <isr_rx+0x524>)
    3170:	4971      	ldr	r1, [pc, #452]	; (3338 <isr_rx+0x528>)
    3172:	4872      	ldr	r0, [pc, #456]	; (333c <isr_rx+0x52c>)
    3174:	f240 23c3 	movw	r3, #707	; 0x2c3
    3178:	f01c fad1 	bl	1f71e <printk>
    317c:	4040      	eors	r0, r0
    317e:	f380 8811 	msr	BASEPRI, r0
    3182:	f04f 0003 	mov.w	r0, #3
    3186:	df02      	svc	2
    3188:	e675      	b.n	2e76 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    318a:	2fff      	cmp	r7, #255	; 0xff
    318c:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3190:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    3194:	d078      	beq.n	3288 <isr_rx+0x478>
		return (rl_idx == lll->rl_idx);
    3196:	7e23      	ldrb	r3, [r4, #24]
    3198:	1bdb      	subs	r3, r3, r7
    319a:	fab3 f383 	clz	r3, r3
    319e:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    31a0:	2b00      	cmp	r3, #0
    31a2:	f47f ae91 	bne.w	2ec8 <isr_rx+0xb8>
    31a6:	e75f      	b.n	3068 <isr_rx+0x258>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    31a8:	f016 fa2e 	bl	19608 <radio_rssi_get>
    31ac:	b2c0      	uxtb	r0, r0
    31ae:	e796      	b.n	30de <isr_rx+0x2ce>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    31b0:	7f6b      	ldrb	r3, [r5, #29]
    31b2:	e7b8      	b.n	3126 <isr_rx+0x316>
		radio_tmr_tifs_set(EVENT_IFS_US);
    31b4:	2096      	movs	r0, #150	; 0x96
    31b6:	f016 fa91 	bl	196dc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    31ba:	2000      	movs	r0, #0
    31bc:	f016 f962 	bl	19484 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    31c0:	2003      	movs	r0, #3
    31c2:	f00b f9c3 	bl	e54c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    31c6:	4681      	mov	r9, r0
    31c8:	2800      	cmp	r0, #0
    31ca:	f43f ae2b 	beq.w	2e24 <isr_rx+0x14>
	ull_pdu_rx_alloc();
    31ce:	f00b f9db 	bl	e588 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    31d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    31d6:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    31da:	2305      	movs	r3, #5
    31dc:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    31e0:	f1b8 0f00 	cmp.w	r8, #0
    31e4:	d170      	bne.n	32c8 <isr_rx+0x4b8>
    31e6:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    31e8:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    31ea:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    31ee:	bf14      	ite	ne
    31f0:	463b      	movne	r3, r7
    31f2:	23ff      	moveq	r3, #255	; 0xff
    31f4:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    31f8:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    31fc:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3200:	f36f 0341 	bfc	r3, #1, #1
    3204:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3208:	4649      	mov	r1, r9
    320a:	f00b f9d3 	bl	e5b4 <ull_rx_put>
	ull_rx_sched();
    320e:	f00b f9e1 	bl	e5d4 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    3212:	f016 f933 	bl	1947c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3216:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    3218:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    321a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    321e:	7832      	ldrb	r2, [r6, #0]
    3220:	01db      	lsls	r3, r3, #7
    3222:	f002 0270 	and.w	r2, r2, #112	; 0x70
    3226:	f043 0303 	orr.w	r3, r3, #3
    322a:	4313      	orrs	r3, r2
    322c:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    322e:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3230:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    3232:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3234:	f013 f83a 	bl	162ac <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    3238:	7de3      	ldrb	r3, [r4, #23]
    323a:	079f      	lsls	r7, r3, #30
    323c:	d54f      	bpl.n	32de <isr_rx+0x4ce>
    323e:	2800      	cmp	r0, #0
    3240:	d04d      	beq.n	32de <isr_rx+0x4ce>
			pdu_tx->tx_addr = 1;
    3242:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    3244:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    3246:	4630      	mov	r0, r6
    3248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    324c:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    3250:	2206      	movs	r2, #6
    3252:	f01d fa69 	bl	20728 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    3256:	2206      	movs	r2, #6
    3258:	f105 011e 	add.w	r1, r5, #30
    325c:	f106 0008 	add.w	r0, r6, #8
    3260:	f01d fa62 	bl	20728 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    3264:	4630      	mov	r0, r6
    3266:	f016 f88f 	bl	19388 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    326a:	f016 f8cf 	bl	1940c <radio_is_ready>
    326e:	2800      	cmp	r0, #0
    3270:	d152      	bne.n	3318 <isr_rx+0x508>
		radio_tmr_end_capture();
    3272:	f016 fb3f 	bl	198f4 <radio_tmr_end_capture>
		lll->state = 1U;
    3276:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3278:	4831      	ldr	r0, [pc, #196]	; (3340 <isr_rx+0x530>)
		lll->state = 1U;
    327a:	f043 0301 	orr.w	r3, r3, #1
    327e:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3280:	4621      	mov	r1, r4
    3282:	f015 ffa7 	bl	191d4 <radio_isr_set>
	if (!err) {
    3286:	e6c7      	b.n	3018 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3288:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    328c:	aa05      	add	r2, sp, #20
    328e:	4651      	mov	r1, sl
    3290:	4648      	mov	r0, r9
    3292:	f013 f94f 	bl	16534 <ull_filter_lll_rl_addr_allowed>
    3296:	2800      	cmp	r0, #0
    3298:	f43f aee3 	beq.w	3062 <isr_rx+0x252>
	return ((lll->adv_addr_type == addr_type) &&
    329c:	7de3      	ldrb	r3, [r4, #23]
    329e:	f003 0301 	and.w	r3, r3, #1
    32a2:	454b      	cmp	r3, r9
    32a4:	f47f aedd 	bne.w	3062 <isr_rx+0x252>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    32a8:	4651      	mov	r1, sl
    32aa:	2206      	movs	r2, #6
    32ac:	f104 0008 	add.w	r0, r4, #8
    32b0:	f01d fa29 	bl	20706 <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    32b4:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    32b6:	fab0 f380 	clz	r3, r0
    32ba:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    32bc:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    32c0:	2b00      	cmp	r3, #0
    32c2:	f47f ae01 	bne.w	2ec8 <isr_rx+0xb8>
    32c6:	e6cf      	b.n	3068 <isr_rx+0x258>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    32c8:	f016 f99e 	bl	19608 <radio_rssi_get>
    32cc:	b2c3      	uxtb	r3, r0
    32ce:	e78b      	b.n	31e8 <isr_rx+0x3d8>
			init_tx_addr = lll->init_addr_type;
    32d0:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    32d4:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    32d8:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    32dc:	e630      	b.n	2f40 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
    32de:	7da3      	ldrb	r3, [r4, #22]
    32e0:	7832      	ldrb	r2, [r6, #0]
    32e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    32e6:	4630      	mov	r0, r6
    32e8:	f363 1286 	bfi	r2, r3, #6, #1
    32ec:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    32f0:	f104 0119 	add.w	r1, r4, #25
    32f4:	2206      	movs	r2, #6
    32f6:	f01d fa17 	bl	20728 <memcpy>
    32fa:	e7ac      	b.n	3256 <isr_rx+0x446>
		LL_ASSERT(!radio_is_ready());
    32fc:	4a0d      	ldr	r2, [pc, #52]	; (3334 <isr_rx+0x524>)
    32fe:	4911      	ldr	r1, [pc, #68]	; (3344 <isr_rx+0x534>)
    3300:	480e      	ldr	r0, [pc, #56]	; (333c <isr_rx+0x52c>)
    3302:	f240 4391 	movw	r3, #1169	; 0x491
    3306:	f01c fa0a 	bl	1f71e <printk>
    330a:	4040      	eors	r0, r0
    330c:	f380 8811 	msr	BASEPRI, r0
    3310:	f04f 0003 	mov.w	r0, #3
    3314:	df02      	svc	2
    3316:	e62d      	b.n	2f74 <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    3318:	4a06      	ldr	r2, [pc, #24]	; (3334 <isr_rx+0x524>)
    331a:	490a      	ldr	r1, [pc, #40]	; (3344 <isr_rx+0x534>)
    331c:	4807      	ldr	r0, [pc, #28]	; (333c <isr_rx+0x52c>)
    331e:	f240 5316 	movw	r3, #1302	; 0x516
    3322:	f01c f9fc 	bl	1f71e <printk>
    3326:	4040      	eors	r0, r0
    3328:	f380 8811 	msr	BASEPRI, r0
    332c:	f04f 0003 	mov.w	r0, #3
    3330:	df02      	svc	2
    3332:	e79e      	b.n	3272 <isr_rx+0x462>
    3334:	00025d24 	.word	0x00025d24
    3338:	00025cd8 	.word	0x00025cd8
    333c:	000250f0 	.word	0x000250f0
    3340:	00017f49 	.word	0x00017f49
    3344:	00025ce0 	.word	0x00025ce0

00003348 <readPartID>:
    }

}

// Read Part ID
uint8_t readPartID(const struct device* dev) {
    3348:	b507      	push	{r0, r1, r2, lr}
    uint8_t partid = 0;
    334a:	2300      	movs	r3, #0
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_PARTID, &partid);
    334c:	f10d 0207 	add.w	r2, sp, #7
    3350:	21ff      	movs	r1, #255	; 0xff
    uint8_t partid = 0;
    3352:	f88d 3007 	strb.w	r3, [sp, #7]
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_PARTID, &partid);
    3356:	f01c f880 	bl	1f45a <i2c_reg_read_byte.constprop.0>
    if (ret) {
    335a:	b110      	cbz	r0, 3362 <readPartID+0x1a>
        printk("Unable to read deviceID register\n");
    335c:	4803      	ldr	r0, [pc, #12]	; (336c <readPartID+0x24>)
    335e:	f01c f9de 	bl	1f71e <printk>
    }
    return partid;
}
    3362:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3366:	b003      	add	sp, #12
    3368:	f85d fb04 	ldr.w	pc, [sp], #4
    336c:	00026219 	.word	0x00026219

00003370 <max30102_init>:
    i2c_configure(i2c_dev, i2c_cfg);
    3370:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <max30102_init+0x30>)
void max30102_init(const struct device* i2c_dev) {
    3372:	b510      	push	{r4, lr}
    i2c_configure(i2c_dev, i2c_cfg);
    3374:	6819      	ldr	r1, [r3, #0]
void max30102_init(const struct device* i2c_dev) {
    3376:	4604      	mov	r4, r0
				       uint32_t dev_config)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->configure(dev, dev_config);
    3378:	6883      	ldr	r3, [r0, #8]
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	4798      	blx	r3
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    337e:	4620      	mov	r0, r4
    3380:	f020 fce5 	bl	23d4e <z_device_is_ready>
    if (!device_is_ready(i2c_dev)) {
    3384:	b920      	cbnz	r0, 3390 <max30102_init+0x20>
        printk("Could not get I2C device\n");
    3386:	4807      	ldr	r0, [pc, #28]	; (33a4 <max30102_init+0x34>)
}
    3388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Device Found!\n");
    338c:	f01c b9c7 	b.w	1f71e <printk>
    if (readPartID(i2c_dev) != MAX30102_PARTID_VALUE) {
    3390:	4620      	mov	r0, r4
    3392:	f7ff ffd9 	bl	3348 <readPartID>
    3396:	2815      	cmp	r0, #21
        printk("Unable to find device\n");
    3398:	bf14      	ite	ne
    339a:	4803      	ldrne	r0, [pc, #12]	; (33a8 <max30102_init+0x38>)
        printk("Device Found!\n");
    339c:	4803      	ldreq	r0, [pc, #12]	; (33ac <max30102_init+0x3c>)
    339e:	e7f3      	b.n	3388 <max30102_init+0x18>
    33a0:	200001a8 	.word	0x200001a8
    33a4:	0002623b 	.word	0x0002623b
    33a8:	00026255 	.word	0x00026255
    33ac:	0002626c 	.word	0x0002626c

000033b0 <setPulseAmplitudeRed>:
void setPulseWidth(const struct device* dev, uint8_t pulseWidth) {
    bitMask(dev, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth);

}

void setPulseAmplitudeRed(const struct device* dev, uint8_t powerLevel) {
    33b0:	b508      	push	{r3, lr}
    33b2:	460a      	mov	r2, r1
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_LED1_PULSEAMP, powerLevel)) {
    33b4:	210c      	movs	r1, #12
    33b6:	f01c f85b 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    33ba:	b120      	cbz	r0, 33c6 <setPulseAmplitudeRed+0x16>
        printk("Write failed :( \n");
    }
}
    33bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Write failed :( \n");
    33c0:	4801      	ldr	r0, [pc, #4]	; (33c8 <setPulseAmplitudeRed+0x18>)
    33c2:	f01c b9ac 	b.w	1f71e <printk>
}
    33c6:	bd08      	pop	{r3, pc}
    33c8:	0002627b 	.word	0x0002627b

000033cc <setPulseAmplitudeIR>:

void setPulseAmplitudeIR(const struct device* dev, uint8_t powerLevel) {
    33cc:	b508      	push	{r3, lr}
    33ce:	460a      	mov	r2, r1
    if (i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_LED2_PULSEAMP, powerLevel)) {
    33d0:	210d      	movs	r1, #13
    33d2:	f01c f84d 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    33d6:	b120      	cbz	r0, 33e2 <setPulseAmplitudeIR+0x16>
        printk("Write failed :( \n");
    }
}
    33d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Write failed :( \n");
    33dc:	4801      	ldr	r0, [pc, #4]	; (33e4 <setPulseAmplitudeIR+0x18>)
    33de:	f01c b99e 	b.w	1f71e <printk>
}
    33e2:	bd08      	pop	{r3, pc}
    33e4:	0002627b 	.word	0x0002627b

000033e8 <configureFIFO>:
        break;
    }

}

void configureFIFO(const struct device* dev) {
    33e8:	b508      	push	{r3, lr}
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOCONFIG, 0x0f);
    33ea:	220f      	movs	r2, #15
    33ec:	2108      	movs	r1, #8
    33ee:	f01c f83f 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    33f2:	b120      	cbz	r0, 33fe <configureFIFO+0x16>
        printk("Error configuring FIFO\n");
    }
}
    33f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Error configuring FIFO\n");
    33f8:	4801      	ldr	r0, [pc, #4]	; (3400 <configureFIFO+0x18>)
    33fa:	f01c b990 	b.w	1f71e <printk>
}
    33fe:	bd08      	pop	{r3, pc}
    3400:	0002628d 	.word	0x0002628d

00003404 <clearFIFO>:

void clearFIFO(const struct device* dev) {
    3404:	b538      	push	{r3, r4, r5, lr}
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOWRITEPTR, 0);
    3406:	2200      	movs	r2, #0
    3408:	2104      	movs	r1, #4
void clearFIFO(const struct device* dev) {
    340a:	4605      	mov	r5, r0
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOWRITEPTR, 0);
    340c:	f01c f830 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    ret += i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOOVERFLOW, 0);
    3410:	2200      	movs	r2, #0
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOWRITEPTR, 0);
    3412:	4604      	mov	r4, r0
    ret += i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOOVERFLOW, 0);
    3414:	2105      	movs	r1, #5
    3416:	4628      	mov	r0, r5
    3418:	f01c f82a 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    ret += i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOREADPTR, 0);
    341c:	2106      	movs	r1, #6
    ret += i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOOVERFLOW, 0);
    341e:	4404      	add	r4, r0
    ret += i2c_reg_write_byte(dev, MAX30102_ADDRESS, MAX30102_FIFOREADPTR, 0);
    3420:	2200      	movs	r2, #0
    3422:	4628      	mov	r0, r5
    3424:	f01c f824 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    3428:	1821      	adds	r1, r4, r0
    342a:	d004      	beq.n	3436 <clearFIFO+0x32>
        printk("Error clearing FIFO r/w pointers (ERR: %i)\n", ret);

    }

}
    342c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("Error clearing FIFO r/w pointers (ERR: %i)\n", ret);
    3430:	4801      	ldr	r0, [pc, #4]	; (3438 <clearFIFO+0x34>)
    3432:	f01c b974 	b.w	1f71e <printk>
}
    3436:	bd38      	pop	{r3, r4, r5, pc}
    3438:	000262a5 	.word	0x000262a5

0000343c <setInterrupts>:

void setInterrupts(const struct device* dev) {
    343c:	b510      	push	{r4, lr}
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_1, 0xc0);
    343e:	22c0      	movs	r2, #192	; 0xc0
    3440:	2102      	movs	r1, #2
void setInterrupts(const struct device* dev) {
    3442:	4604      	mov	r4, r0
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_1, 0xc0);
    3444:	f01c f814 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    3448:	b110      	cbz	r0, 3450 <setInterrupts+0x14>
        printk("Error setting interrupt 1\n");
    344a:	4807      	ldr	r0, [pc, #28]	; (3468 <setInterrupts+0x2c>)
    344c:	f01c f967 	bl	1f71e <printk>
    }
    ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_2, 0x00);
    3450:	2200      	movs	r2, #0
    3452:	2103      	movs	r1, #3
    3454:	4620      	mov	r0, r4
    3456:	f01c f80b 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    345a:	b120      	cbz	r0, 3466 <setInterrupts+0x2a>
        printk("Error setting interrupt 2\n");
    }

}
    345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Error setting interrupt 2\n");
    3460:	4802      	ldr	r0, [pc, #8]	; (346c <setInterrupts+0x30>)
    3462:	f01c b95c 	b.w	1f71e <printk>
}
    3466:	bd10      	pop	{r4, pc}
    3468:	000262d1 	.word	0x000262d1
    346c:	000262ec 	.word	0x000262ec

00003470 <enableAFull>:

void enableAFull(const struct device* dev) {
    3470:	b508      	push	{r3, lr}
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_INTR_ENABLE_1, 0x40);
    3472:	2240      	movs	r2, #64	; 0x40
    3474:	2102      	movs	r1, #2
    3476:	f01b fffb 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    347a:	b120      	cbz	r0, 3486 <enableAFull+0x16>
        printk("Error setting interrupt 1\n");
    }
}
    347c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Error setting interrupt 1\n");
    3480:	4801      	ldr	r0, [pc, #4]	; (3488 <enableAFull+0x18>)
    3482:	f01c b94c 	b.w	1f71e <printk>
}
    3486:	bd08      	pop	{r3, pc}
    3488:	000262d1 	.word	0x000262d1

0000348c <readINT1>:
        printk("Failed to read device write pointer\n");
    }
    return wptr;
}

uint8_t readINT1(const struct device* dev) {
    348c:	b507      	push	{r0, r1, r2, lr}
    uint8_t status;
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_INTSTAT1, &status);
    348e:	2100      	movs	r1, #0
    3490:	f10d 0207 	add.w	r2, sp, #7
    3494:	f01b ffe1 	bl	1f45a <i2c_reg_read_byte.constprop.0>
    if (ret) {
    3498:	b110      	cbz	r0, 34a0 <readINT1+0x14>
        printk("Error reading INT1 Status \n");
    349a:	4804      	ldr	r0, [pc, #16]	; (34ac <readINT1+0x20>)
    349c:	f01c f93f 	bl	1f71e <printk>
    }
    return status;
}
    34a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    34a4:	b003      	add	sp, #12
    34a6:	f85d fb04 	ldr.w	pc, [sp], #4
    34aa:	bf00      	nop
    34ac:	00026307 	.word	0x00026307

000034b0 <readINT2>:

uint8_t readINT2(const struct device* dev) {
    34b0:	b507      	push	{r0, r1, r2, lr}
    uint8_t status;
    int ret = i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_INTSTAT2, &status);
    34b2:	2101      	movs	r1, #1
    34b4:	f10d 0207 	add.w	r2, sp, #7
    34b8:	f01b ffcf 	bl	1f45a <i2c_reg_read_byte.constprop.0>
    if (ret) {
    34bc:	b110      	cbz	r0, 34c4 <readINT2+0x14>
        printk("Error reading INT1 Status \n");
    34be:	4804      	ldr	r0, [pc, #16]	; (34d0 <readINT2+0x20>)
    34c0:	f01c f92d 	bl	1f71e <printk>
    }
    return status;
}
    34c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    34c8:	b003      	add	sp, #12
    34ca:	f85d fb04 	ldr.w	pc, [sp], #4
    34ce:	bf00      	nop
    34d0:	00026307 	.word	0x00026307

000034d4 <readFIFOv2>:
    sense.red[sense.head] = redLED;
    sense.IR[sense.head] = irLED;
    return true;
}

bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    34d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t un_temp;
    unsigned char uch_temp;
    *pun_red_led = 0;
    34d6:	2300      	movs	r3, #0
    34d8:	600b      	str	r3, [r1, #0]
bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    34da:	4606      	mov	r6, r0
    *pun_ir_led = 0;
    34dc:	6013      	str	r3, [r2, #0]
bool readFIFOv2(const struct device* dev, uint32_t* pun_red_led, uint32_t* pun_ir_led) {
    34de:	460d      	mov	r5, r1
    34e0:	4614      	mov	r4, r2
    char ach_i2c_data[6];

    //read and clear status register
    readINT1(dev);
    34e2:	f7ff ffd3 	bl	348c <readINT1>
    readINT2(dev);
    34e6:	4630      	mov	r0, r6
    34e8:	f7ff ffe2 	bl	34b0 <readINT2>
 * @param num_bytes Number of bytes being read.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_burst_read(const struct device *dev,
    34ec:	2307      	movs	r3, #7
    34ee:	f88d 3007 	strb.w	r3, [sp, #7]
				 uint16_t dev_addr,
				 uint8_t start_addr,
				 uint8_t *buf,
				 uint32_t num_bytes)
{
	return i2c_write_read(dev, dev_addr,
    34f2:	f10d 0107 	add.w	r1, sp, #7
    34f6:	2306      	movs	r3, #6
    34f8:	aa02      	add	r2, sp, #8
    34fa:	4630      	mov	r0, r6
    34fc:	f01b ff98 	bl	1f430 <i2c_write_read.constprop.0>

    int ret = i2c_burst_read(dev, MAX30102_ADDRESS, MAX30102_FIFODATA, ach_i2c_data, 6);
    if (ret) {
    3500:	4601      	mov	r1, r0
    3502:	b110      	cbz	r0, 350a <readFIFOv2+0x36>
        printk("Unable to read FIFO data (ERR: %i)\n", ret);
    3504:	4813      	ldr	r0, [pc, #76]	; (3554 <readFIFOv2+0x80>)
    3506:	f01c f90a 	bl	1f71e <printk>
    }
    un_temp = (unsigned char)ach_i2c_data[0];
    un_temp <<= 16;
    *pun_red_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[1];
    350a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    un_temp = (unsigned char)ach_i2c_data[0];
    350e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    un_temp <<= 8;
    3512:	021b      	lsls	r3, r3, #8
    *pun_red_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[2];
    *pun_red_led += un_temp;
    3514:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    un_temp = (unsigned char)ach_i2c_data[2];
    3518:	f89d 200a 	ldrb.w	r2, [sp, #10]
    *pun_red_led += un_temp;
    351c:	4413      	add	r3, r2
    351e:	682a      	ldr	r2, [r5, #0]
    3520:	4413      	add	r3, r2
    3522:	602b      	str	r3, [r5, #0]

    un_temp = (unsigned char)ach_i2c_data[3];
    un_temp <<= 16;
    *pun_ir_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[4];
    3524:	f89d 300c 	ldrb.w	r3, [sp, #12]
    un_temp = (unsigned char)ach_i2c_data[3];
    3528:	f89d 200b 	ldrb.w	r2, [sp, #11]
    un_temp <<= 8;
    352c:	021b      	lsls	r3, r3, #8
    *pun_ir_led += un_temp;
    un_temp = (unsigned char)ach_i2c_data[5];
    *pun_ir_led += un_temp;
    352e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    un_temp = (unsigned char)ach_i2c_data[5];
    3532:	f89d 200d 	ldrb.w	r2, [sp, #13]
    *pun_ir_led += un_temp;
    3536:	4413      	add	r3, r2
    3538:	6822      	ldr	r2, [r4, #0]
    353a:	4413      	add	r3, r2
    353c:	6023      	str	r3, [r4, #0]
    *pun_red_led &= 0x03FFFF;  //Mask MSB [23:18]
    353e:	682b      	ldr	r3, [r5, #0]
    3540:	f3c3 0311 	ubfx	r3, r3, #0, #18
    3544:	602b      	str	r3, [r5, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    3546:	6823      	ldr	r3, [r4, #0]


    return true;
}
    3548:	2001      	movs	r0, #1
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    354a:	f3c3 0311 	ubfx	r3, r3, #0, #18
    354e:	6023      	str	r3, [r4, #0]
}
    3550:	b004      	add	sp, #16
    3552:	bd70      	pop	{r4, r5, r6, pc}
    3554:	00026323 	.word	0x00026323

00003558 <bitMask>:

/*============== Begin Data fetch functions ==================*/



void bitMask(const struct device* dev_i2c, uint8_t reg, uint8_t mask, uint8_t thing) {
    3558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    355a:	4614      	mov	r4, r2
    355c:	461f      	mov	r7, r3
    // Grab current register context
    uint8_t originalContents = 0;
    int ret = i2c_reg_read_byte(dev_i2c, MAX30102_ADDRESS, reg, &originalContents);
    355e:	f10d 0207 	add.w	r2, sp, #7
    uint8_t originalContents = 0;
    3562:	2300      	movs	r3, #0
void bitMask(const struct device* dev_i2c, uint8_t reg, uint8_t mask, uint8_t thing) {
    3564:	460e      	mov	r6, r1
    3566:	4605      	mov	r5, r0
    uint8_t originalContents = 0;
    3568:	f88d 3007 	strb.w	r3, [sp, #7]
    int ret = i2c_reg_read_byte(dev_i2c, MAX30102_ADDRESS, reg, &originalContents);
    356c:	f01b ff75 	bl	1f45a <i2c_reg_read_byte.constprop.0>

    if (ret) {
    3570:	4601      	mov	r1, r0
    3572:	b118      	cbz	r0, 357c <bitMask+0x24>
        printk("Unable to get og contents (err %i), ID: (%x)\n", ret, mask);
    3574:	480a      	ldr	r0, [pc, #40]	; (35a0 <bitMask+0x48>)
    3576:	4622      	mov	r2, r4
    3578:	f01c f8d1 	bl	1f71e <printk>

    }
    // Zero-out the portions of the register we're interested in
    originalContents = originalContents & mask;
    357c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3580:	4022      	ands	r2, r4
    3582:	f88d 2007 	strb.w	r2, [sp, #7]

    // Change contents
    ret = i2c_reg_write_byte(dev_i2c, MAX30102_ADDRESS, reg, originalContents | thing);
    3586:	4631      	mov	r1, r6
    3588:	433a      	orrs	r2, r7
    358a:	4628      	mov	r0, r5
    358c:	f01b ff70 	bl	1f470 <i2c_reg_write_byte.constprop.0>
    if (ret) {
    3590:	4601      	mov	r1, r0
    3592:	b110      	cbz	r0, 359a <bitMask+0x42>
        printk("Unable to write (err %i)\n", ret);
    3594:	4803      	ldr	r0, [pc, #12]	; (35a4 <bitMask+0x4c>)
    3596:	f01c f8c2 	bl	1f71e <printk>
    }
    359a:	b003      	add	sp, #12
    359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    359e:	bf00      	nop
    35a0:	00026347 	.word	0x00026347
    35a4:	00026375 	.word	0x00026375

000035a8 <MAX30102_setup>:
void MAX30102_setup(const struct device* dev) {
    35a8:	b510      	push	{r4, lr}
    35aa:	4604      	mov	r4, r0
    softReset(dev);
    35ac:	f01b ff77 	bl	1f49e <softReset>
    setInterrupts(dev);
    35b0:	4620      	mov	r0, r4
    35b2:	f7ff ff43 	bl	343c <setInterrupts>
    configureFIFO(dev);
    35b6:	4620      	mov	r0, r4
    35b8:	f7ff ff16 	bl	33e8 <configureFIFO>
    setLEDMode(dev, MAX30102_MODE_REDIRONLY);
    35bc:	4620      	mov	r0, r4
    35be:	2103      	movs	r1, #3
    35c0:	f01b ff90 	bl	1f4e4 <setLEDMode>
    activeLEDS = 2;
    35c4:	4b14      	ldr	r3, [pc, #80]	; (3618 <MAX30102_setup+0x70>)
    35c6:	2202      	movs	r2, #2
    setADCRange(dev, MAX30102_ADCRANGE_4096);
    35c8:	4620      	mov	r0, r4
    35ca:	2120      	movs	r1, #32
    activeLEDS = 2;
    35cc:	701a      	strb	r2, [r3, #0]
    setADCRange(dev, MAX30102_ADCRANGE_4096);
    35ce:	f01b ff8e 	bl	1f4ee <setADCRange>
    setSampleRate(dev, MAX30102_SAMPLERATE_100);// < -SPO2
    35d2:	4620      	mov	r0, r4
    35d4:	2104      	movs	r1, #4
    35d6:	f01b ff8f 	bl	1f4f8 <setSampleRate>
    setPulseWidth(dev, MAX30102_PULSEWIDTH_411);
    35da:	4620      	mov	r0, r4
    35dc:	2103      	movs	r1, #3
    35de:	f01b ff90 	bl	1f502 <setPulseWidth>
    setPulseAmplitudeRed(dev, heartRateRedLED);
    35e2:	4620      	mov	r0, r4
    35e4:	2124      	movs	r1, #36	; 0x24
    35e6:	f7ff fee3 	bl	33b0 <setPulseAmplitudeRed>
    setPulseAmplitudeIR(dev, ledBrightness);
    35ea:	4620      	mov	r0, r4
    35ec:	2124      	movs	r1, #36	; 0x24
    35ee:	f7ff feed 	bl	33cc <setPulseAmplitudeIR>
    enableSlot(dev, 1, SLOT_RED_LED);
    35f2:	2201      	movs	r2, #1
    35f4:	4611      	mov	r1, r2
    35f6:	4620      	mov	r0, r4
    35f8:	f01b ff88 	bl	1f50c <enableSlot>
        bitMask(dev, MAX30102_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
    35fc:	4620      	mov	r0, r4
    35fe:	2320      	movs	r3, #32
    3600:	228f      	movs	r2, #143	; 0x8f
    3602:	2111      	movs	r1, #17
    3604:	f7ff ffa8 	bl	3558 <bitMask>
    clearFIFO(dev);
    3608:	4620      	mov	r0, r4
    360a:	f7ff fefb 	bl	3404 <clearFIFO>
    enableAFull(dev);
    360e:	4620      	mov	r0, r4
}
    3610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    enableAFull(dev);
    3614:	f7ff bf2c 	b.w	3470 <enableAFull>
    3618:	200060c4 	.word	0x200060c4

0000361c <bpm_spo2_thread_start>:
float beatsPerMinute;
int beatAvg;
float ratio;
float correl;
//mainloop
int bpm_spo2_thread_start() {
    361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct device* console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    if (usb_enable(NULL)) {
    3620:	2000      	movs	r0, #0
int bpm_spo2_thread_start() {
    3622:	b085      	sub	sp, #20
    if (usb_enable(NULL)) {
    3624:	f001 fcaa 	bl	4f7c <usb_enable>
    3628:	4680      	mov	r8, r0
    362a:	2800      	cmp	r0, #0
    362c:	d172      	bne.n	3714 <bpm_spo2_thread_start+0xf8>
        return 1;
    }
    const struct device* i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c1));
    max30102_init(i2c_dev);
    362e:	483b      	ldr	r0, [pc, #236]	; (371c <bpm_spo2_thread_start+0x100>)
    3630:	f7ff fe9e 	bl	3370 <max30102_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3634:	483a      	ldr	r0, [pc, #232]	; (3720 <bpm_spo2_thread_start+0x104>)
    3636:	f01a fc61 	bl	1defc <z_impl_device_get_binding>
    363a:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    363c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    363e:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3640:	6813      	ldr	r3, [r2, #0]
    MAX30102_setup(i2c_dev);

    uint32_t irValue = 0;
    uint32_t redValue = 0;

    n_ir_buffer_length = 500;
    3642:	4d38      	ldr	r5, [pc, #224]	; (3724 <bpm_spo2_thread_start+0x108>)
    3644:	4e38      	ldr	r6, [pc, #224]	; (3728 <bpm_spo2_thread_start+0x10c>)
    3646:	4f39      	ldr	r7, [pc, #228]	; (372c <bpm_spo2_thread_start+0x110>)
    int i = 0;

    for (i = 0; i < n_ir_buffer_length;i++)
    {
        while (gpio_pin_get(gpio_dev, INTPIN) == 1);   //wait until the interrupt pin asserts
        readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    3648:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 371c <bpm_spo2_thread_start+0x100>
    364c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3650:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
    3652:	680b      	ldr	r3, [r1, #0]
    3654:	4a36      	ldr	r2, [pc, #216]	; (3730 <bpm_spo2_thread_start+0x114>)
    3656:	210a      	movs	r1, #10
    3658:	4798      	blx	r3
    reset(i2c_dev);
    365a:	4830      	ldr	r0, [pc, #192]	; (371c <bpm_spo2_thread_start+0x100>)
    365c:	f01b ff1b 	bl	1f496 <reset>
    MAX30102_setup(i2c_dev);
    3660:	482e      	ldr	r0, [pc, #184]	; (371c <bpm_spo2_thread_start+0x100>)
    3662:	f7ff ffa1 	bl	35a8 <MAX30102_setup>
    n_ir_buffer_length = 500;
    3666:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    366a:	602b      	str	r3, [r5, #0]
    for (i = 0; i < n_ir_buffer_length;i++)
    366c:	46ba      	mov	sl, r7
    366e:	46b1      	mov	r9, r6
    3670:	6829      	ldr	r1, [r5, #0]
    3672:	4541      	cmp	r1, r8
    3674:	dc3d      	bgt.n	36f2 <bpm_spo2_thread_start+0xd6>
        // printk("red=");
        // printk("%i", aun_red_buffer[i]);
        // printk(", ir=");
        // printk("%i\n\r", aun_ir_buffer[i]);
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    3676:	4b2f      	ldr	r3, [pc, #188]	; (3734 <bpm_spo2_thread_start+0x118>)
    3678:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 3738 <bpm_spo2_thread_start+0x11c>
    367c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 373c <bpm_spo2_thread_start+0x120>
    3680:	9300      	str	r3, [sp, #0]
    3682:	4a2a      	ldr	r2, [pc, #168]	; (372c <bpm_spo2_thread_start+0x110>)
    3684:	4b2e      	ldr	r3, [pc, #184]	; (3740 <bpm_spo2_thread_start+0x124>)
    3686:	4828      	ldr	r0, [pc, #160]	; (3728 <bpm_spo2_thread_start+0x10c>)
    3688:	f8cd a008 	str.w	sl, [sp, #8]
    368c:	f8cd 9004 	str.w	r9, [sp, #4]
    3690:	f7fd faae 	bl	bf0 <maxim_heart_rate_and_oxygen_saturation>
        }
        //take 100 sets of samples before calculating the heart rate.
        for (i = 400;i < 500;i++)
        {
            while (gpio_pin_get(gpio_dev, INTPIN) == 1);
            readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    3694:	f8df b084 	ldr.w	fp, [pc, #132]	; 371c <bpm_spo2_thread_start+0x100>
    for (i = 0; i < n_ir_buffer_length;i++)
    3698:	4632      	mov	r2, r6
    369a:	4639      	mov	r1, r7
        for (i = 100;i < 500;i++)
    369c:	2364      	movs	r3, #100	; 0x64
            aun_red_buffer[i - 100] = aun_red_buffer[i];
    369e:	f8d1 0190 	ldr.w	r0, [r1, #400]	; 0x190
    36a2:	f841 0b04 	str.w	r0, [r1], #4
        for (i = 100;i < 500;i++)
    36a6:	3301      	adds	r3, #1
            aun_ir_buffer[i - 100] = aun_ir_buffer[i];
    36a8:	f8d2 0190 	ldr.w	r0, [r2, #400]	; 0x190
    36ac:	f842 0b04 	str.w	r0, [r2], #4
        for (i = 100;i < 500;i++)
    36b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    36b4:	d1f3      	bne.n	369e <bpm_spo2_thread_start+0x82>
    36b6:	f44f 68c8 	mov.w	r8, #1600	; 0x640
            while (gpio_pin_get(gpio_dev, INTPIN) == 1);
    36ba:	4620      	mov	r0, r4
    36bc:	f01b ffe6 	bl	1f68c <gpio_pin_get.constprop.0>
    36c0:	2801      	cmp	r0, #1
    36c2:	d0fa      	beq.n	36ba <bpm_spo2_thread_start+0x9e>
            readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    36c4:	eb07 0208 	add.w	r2, r7, r8
    36c8:	eb06 0108 	add.w	r1, r6, r8
    36cc:	4658      	mov	r0, fp
        for (i = 400;i < 500;i++)
    36ce:	f108 0804 	add.w	r8, r8, #4
            readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    36d2:	f7ff feff 	bl	34d4 <readFIFOv2>
        for (i = 400;i < 500;i++)
    36d6:	f5b8 6ffa 	cmp.w	r8, #2000	; 0x7d0
    36da:	d1ee      	bne.n	36ba <bpm_spo2_thread_start+0x9e>
            // printk(", HR=%i, ", n_heart_rate);
            // printk("HRvalid=%i, ", ch_hr_valid);
            // printk("SpO2=%i, ", n_sp02);
            // printk("SPO2Valid=%i\n\r", ch_spo2_valid);
        }
        maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    36dc:	4b15      	ldr	r3, [pc, #84]	; (3734 <bpm_spo2_thread_start+0x118>)
    36de:	9300      	str	r3, [sp, #0]
    36e0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
    36e4:	4b16      	ldr	r3, [pc, #88]	; (3740 <bpm_spo2_thread_start+0x124>)
    36e6:	4a11      	ldr	r2, [pc, #68]	; (372c <bpm_spo2_thread_start+0x110>)
    36e8:	6829      	ldr	r1, [r5, #0]
    36ea:	480f      	ldr	r0, [pc, #60]	; (3728 <bpm_spo2_thread_start+0x10c>)
    36ec:	f7fd fa80 	bl	bf0 <maxim_heart_rate_and_oxygen_saturation>
        i = 0;
    36f0:	e7d2      	b.n	3698 <bpm_spo2_thread_start+0x7c>
        while (gpio_pin_get(gpio_dev, INTPIN) == 1);   //wait until the interrupt pin asserts
    36f2:	4620      	mov	r0, r4
    36f4:	f01b ffca 	bl	1f68c <gpio_pin_get.constprop.0>
    36f8:	2801      	cmp	r0, #1
    36fa:	d0fa      	beq.n	36f2 <bpm_spo2_thread_start+0xd6>
        readFIFOv2(i2c_dev, (aun_ir_buffer + i), (aun_red_buffer + i));
    36fc:	4652      	mov	r2, sl
    36fe:	4649      	mov	r1, r9
    3700:	4658      	mov	r0, fp
    3702:	f7ff fee7 	bl	34d4 <readFIFOv2>
    for (i = 0; i < n_ir_buffer_length;i++)
    3706:	f108 0801 	add.w	r8, r8, #1
    370a:	f109 0904 	add.w	r9, r9, #4
    370e:	f10a 0a04 	add.w	sl, sl, #4
    3712:	e7ad      	b.n	3670 <bpm_spo2_thread_start+0x54>
    }
    return 1;
}
    3714:	2001      	movs	r0, #1
    3716:	b005      	add	sp, #20
    3718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    371c:	0002494c 	.word	0x0002494c
    3720:	0002638f 	.word	0x0002638f
    3724:	20003f5c 	.word	0x20003f5c
    3728:	20002fb8 	.word	0x20002fb8
    372c:	20003788 	.word	0x20003788
    3730:	00080100 	.word	0x00080100
    3734:	200060c6 	.word	0x200060c6
    3738:	200060c5 	.word	0x200060c5
    373c:	20003f58 	.word	0x20003f58
    3740:	20003f60 	.word	0x20003f60

00003744 <discover_func>:


static uint8_t discover_func(struct bt_conn* conn,
    const struct bt_gatt_attr* attr,
    struct bt_gatt_discover_params* params)
{
    3744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3746:	4607      	mov	r7, r0
    3748:	4614      	mov	r4, r2
    int err;

    if (attr == NULL) {
    374a:	460e      	mov	r6, r1
    374c:	b931      	cbnz	r1, 375c <discover_func+0x18>
        if (chrc_handle == 0 || long_chrc_handle == 0) {
            //FAIL("Did not discover chrc (%x) or long_chrc (%x)",
              //   chrc_handle, long_chrc_handle);
        }

        (void)memset(params, 0, sizeof(*params));
    374e:	2214      	movs	r2, #20
    3750:	4620      	mov	r0, r4
    3752:	f01c fff4 	bl	2073e <memset>

        //SET_FLAG(flag_discover_complete);

        return BT_GATT_ITER_STOP;
    3756:	4635      	mov	r5, r6
            long_chrc_handle = chrc->value_handle;
        }
    }

    return BT_GATT_ITER_CONTINUE;
}
    3758:	4628      	mov	r0, r5
    375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    printk("[ATTRIBUTE] handle %u\n", attr->handle);
    375c:	8a09      	ldrh	r1, [r1, #16]
    375e:	4817      	ldr	r0, [pc, #92]	; (37bc <discover_func+0x78>)
    3760:	f01b ffdd 	bl	1f71e <printk>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    3764:	7c25      	ldrb	r5, [r4, #16]
    3766:	b995      	cbnz	r5, 378e <discover_func+0x4a>
        bt_uuid_cmp(params->uuid, &scuUUID.uuid) == 0) {
    3768:	4915      	ldr	r1, [pc, #84]	; (37c0 <discover_func+0x7c>)
    376a:	6820      	ldr	r0, [r4, #0]
    376c:	f01d f86d 	bl	2084a <bt_uuid_cmp>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    3770:	b968      	cbnz	r0, 378e <discover_func+0x4a>
        printk("Found test service\n");
    3772:	4814      	ldr	r0, [pc, #80]	; (37c4 <discover_func+0x80>)
    3774:	f01b ffd3 	bl	1f71e <printk>
        params->start_handle = attr->handle + 1;
    3778:	8a33      	ldrh	r3, [r6, #16]
        params->uuid = NULL;
    377a:	6025      	str	r5, [r4, #0]
        params->start_handle = attr->handle + 1;
    377c:	3301      	adds	r3, #1
    377e:	8123      	strh	r3, [r4, #8]
        params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    3780:	2303      	movs	r3, #3
    3782:	7423      	strb	r3, [r4, #16]
        err = bt_gatt_discover(conn, params);
    3784:	4621      	mov	r1, r4
    3786:	4638      	mov	r0, r7
    3788:	f006 fbc2 	bl	9f10 <bt_gatt_discover>
        return BT_GATT_ITER_STOP;
    378c:	e7e4      	b.n	3758 <discover_func+0x14>
    else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
    378e:	7c23      	ldrb	r3, [r4, #16]
    3790:	2b03      	cmp	r3, #3
    3792:	d001      	beq.n	3798 <discover_func+0x54>
    return BT_GATT_ITER_CONTINUE;
    3794:	2501      	movs	r5, #1
    3796:	e7df      	b.n	3758 <discover_func+0x14>
        struct bt_gatt_chrc* chrc = (struct bt_gatt_chrc*)attr->user_data;
    3798:	68f4      	ldr	r4, [r6, #12]
        if (bt_uuid_cmp(chrc->uuid, &bpmSpoUUID.uuid) == 0) {
    379a:	490b      	ldr	r1, [pc, #44]	; (37c8 <discover_func+0x84>)
    379c:	6820      	ldr	r0, [r4, #0]
    379e:	f01d f854 	bl	2084a <bt_uuid_cmp>
    37a2:	b918      	cbnz	r0, 37ac <discover_func+0x68>
            printk("Found chrc\n");
    37a4:	4809      	ldr	r0, [pc, #36]	; (37cc <discover_func+0x88>)
            printk("Found long_chrc\n");
    37a6:	f01b ffba 	bl	1f71e <printk>
    37aa:	e7f3      	b.n	3794 <discover_func+0x50>
        else if (bt_uuid_cmp(chrc->uuid, &bpmSpoUUID.uuid) == 0) {
    37ac:	4906      	ldr	r1, [pc, #24]	; (37c8 <discover_func+0x84>)
    37ae:	6820      	ldr	r0, [r4, #0]
    37b0:	f01d f84b 	bl	2084a <bt_uuid_cmp>
    37b4:	2800      	cmp	r0, #0
    37b6:	d1ed      	bne.n	3794 <discover_func+0x50>
            printk("Found long_chrc\n");
    37b8:	4805      	ldr	r0, [pc, #20]	; (37d0 <discover_func+0x8c>)
    37ba:	e7f4      	b.n	37a6 <discover_func+0x62>
    37bc:	00026396 	.word	0x00026396
    37c0:	200009e8 	.word	0x200009e8
    37c4:	000263ad 	.word	0x000263ad
    37c8:	200009d5 	.word	0x200009d5
    37cc:	000263c1 	.word	0x000263c1
    37d0:	000263cd 	.word	0x000263cd

000037d4 <disconnected>:
        }
    }
}

static void disconnected(struct bt_conn* conn, uint8_t reason)
{
    37d4:	b510      	push	{r4, lr}

    if (conn != g_conn) {
    37d6:	4c07      	ldr	r4, [pc, #28]	; (37f4 <disconnected+0x20>)
    37d8:	6823      	ldr	r3, [r4, #0]
    37da:	4283      	cmp	r3, r0
    37dc:	d109      	bne.n	37f2 <disconnected+0x1e>
        return;
    }


    printk("Disconnected: (reason 0x%02x)\n", reason);
    37de:	4806      	ldr	r0, [pc, #24]	; (37f8 <disconnected+0x24>)
    37e0:	f01b ff9d 	bl	1f71e <printk>
    bt_conn_unref(g_conn);
    37e4:	6820      	ldr	r0, [r4, #0]
    37e6:	f01d fdb2 	bl	2134e <bt_conn_unref>
    g_conn = NULL;
    bleConnected = false;
    37ea:	4a04      	ldr	r2, [pc, #16]	; (37fc <disconnected+0x28>)
    g_conn = NULL;
    37ec:	2300      	movs	r3, #0
    37ee:	6023      	str	r3, [r4, #0]
    bleConnected = false;
    37f0:	7013      	strb	r3, [r2, #0]

}
    37f2:	bd10      	pop	{r4, pc}
    37f4:	20003f78 	.word	0x20003f78
    37f8:	000263de 	.word	0x000263de
    37fc:	200060c7 	.word	0x200060c7

00003800 <connected>:
{
    3800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3804:	4605      	mov	r5, r0
    3806:	460c      	mov	r4, r1
    g_conn = bt_conn_ref(conn);
    3808:	f01d fd86 	bl	21318 <bt_conn_ref>
    380c:	4e21      	ldr	r6, [pc, #132]	; (3894 <connected+0x94>)
    380e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3898 <connected+0x98>
    3812:	6030      	str	r0, [r6, #0]
    if (err)
    3814:	b14c      	cbz	r4, 382a <connected+0x2a>
        printk("Connection failed (err 0x%02x)\n", err);
    3816:	4821      	ldr	r0, [pc, #132]	; (389c <connected+0x9c>)
    3818:	4621      	mov	r1, r4
    381a:	f01b ff80 	bl	1f71e <printk>
        bleConnected = false;
    381e:	2300      	movs	r3, #0
    3820:	f888 3000 	strb.w	r3, [r8]
}
    3824:	b002      	add	sp, #8
    3826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("BLE Connected to Device\n");
    382a:	481d      	ldr	r0, [pc, #116]	; (38a0 <connected+0xa0>)
    382c:	f01b ff77 	bl	1f71e <printk>
        struct bt_le_conn_param* param = BT_LE_CONN_PARAM(6, 6, 0, 800);
    3830:	2306      	movs	r3, #6
    printk("Discovering services and characteristics\n");
    3832:	481c      	ldr	r0, [pc, #112]	; (38a4 <connected+0xa4>)
        struct bt_le_conn_param* param = BT_LE_CONN_PARAM(6, 6, 0, 800);
    3834:	f8ad 3000 	strh.w	r3, [sp]
        bleConnected = true;
    3838:	2701      	movs	r7, #1
        struct bt_le_conn_param* param = BT_LE_CONN_PARAM(6, 6, 0, 800);
    383a:	f8ad 3002 	strh.w	r3, [sp, #2]
    383e:	f44f 7348 	mov.w	r3, #800	; 0x320
    3842:	f8ad 3006 	strh.w	r3, [sp, #6]
        bleConnected = true;
    3846:	f888 7000 	strb.w	r7, [r8]
        struct bt_le_conn_param* param = BT_LE_CONN_PARAM(6, 6, 0, 800);
    384a:	f8ad 4004 	strh.w	r4, [sp, #4]
    printk("Discovering services and characteristics\n");
    384e:	f01b ff66 	bl	1f71e <printk>
    discover_params.uuid = &scuUUID.uuid;
    3852:	4915      	ldr	r1, [pc, #84]	; (38a8 <connected+0xa8>)
    3854:	4a15      	ldr	r2, [pc, #84]	; (38ac <connected+0xac>)
    3856:	600a      	str	r2, [r1, #0]
    discover_params.func = discover_func;
    3858:	4a15      	ldr	r2, [pc, #84]	; (38b0 <connected+0xb0>)
    385a:	604a      	str	r2, [r1, #4]
    err = bt_gatt_discover(g_conn, &discover_params);
    385c:	6830      	ldr	r0, [r6, #0]
    discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    385e:	810f      	strh	r7, [r1, #8]
    discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    3860:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3864:	81ca      	strh	r2, [r1, #14]
    discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    3866:	740c      	strb	r4, [r1, #16]
    err = bt_gatt_discover(g_conn, &discover_params);
    3868:	f006 fb52 	bl	9f10 <bt_gatt_discover>
    printk("Discover complete\n");
    386c:	4811      	ldr	r0, [pc, #68]	; (38b4 <connected+0xb4>)
    386e:	f01b ff56 	bl	1f71e <printk>
        if (bt_conn_le_param_update(conn, param) < 0)
    3872:	4669      	mov	r1, sp
    3874:	4628      	mov	r0, r5
    3876:	f01d fe00 	bl	2147a <bt_conn_le_param_update>
    387a:	2800      	cmp	r0, #0
    387c:	dad2      	bge.n	3824 <connected+0x24>
                printk("Connection Update Error\n");
    387e:	4c0e      	ldr	r4, [pc, #56]	; (38b8 <connected+0xb8>)
    3880:	4620      	mov	r0, r4
    3882:	f01b ff4c 	bl	1f71e <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    3886:	2100      	movs	r1, #0
    3888:	f44f 70a4 	mov.w	r0, #328	; 0x148
    388c:	f01b fb2a 	bl	1eee4 <z_impl_k_sleep>
    3890:	e7f6      	b.n	3880 <connected+0x80>
    3892:	bf00      	nop
    3894:	20003f78 	.word	0x20003f78
    3898:	200060c7 	.word	0x200060c7
    389c:	000263fd 	.word	0x000263fd
    38a0:	0002641d 	.word	0x0002641d
    38a4:	00026436 	.word	0x00026436
    38a8:	20003f64 	.word	0x20003f64
    38ac:	200009e8 	.word	0x200009e8
    38b0:	00003745 	.word	0x00003745
    38b4:	00026460 	.word	0x00026460
    38b8:	00026473 	.word	0x00026473

000038bc <scu_ble_connect_thread_entry>:
    //bt_passkey_set(0xAA289);
    printk("Advertising successfully started\n");
}

void scu_ble_connect_thread_entry(void)
{
    38bc:	b500      	push	{lr}
    err = bt_enable(NULL);
    38be:	2000      	movs	r0, #0
{
    38c0:	b089      	sub	sp, #36	; 0x24
    err = bt_enable(NULL);
    38c2:	f003 fd43 	bl	734c <bt_enable>
    if (err)
    38c6:	4606      	mov	r6, r0
    38c8:	b160      	cbz	r0, 38e4 <scu_ble_connect_thread_entry+0x28>
        printk("Bluetooth init failed (err %d)\n", err);
    38ca:	4601      	mov	r1, r0
    38cc:	4811      	ldr	r0, [pc, #68]	; (3914 <scu_ble_connect_thread_entry+0x58>)
        printk("Advertising failed to start (err %d)\n", err);
    38ce:	f01b ff26 	bl	1f71e <printk>
    bt_ready();

    bt_conn_cb_register(&connCallbacks);
    38d2:	4811      	ldr	r0, [pc, #68]	; (3918 <scu_ble_connect_thread_entry+0x5c>)
    38d4:	f004 fedc 	bl	8690 <bt_conn_cb_register>
    38d8:	2100      	movs	r1, #0
    38da:	f240 6067 	movw	r0, #1639	; 0x667
    38de:	f01b fb01 	bl	1eee4 <z_impl_k_sleep>
    38e2:	e7f9      	b.n	38d8 <scu_ble_connect_thread_entry+0x1c>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    38e4:	4d0d      	ldr	r5, [pc, #52]	; (391c <scu_ble_connect_thread_entry+0x60>)
    printk("Bluetooth initialized\n");
    38e6:	480e      	ldr	r0, [pc, #56]	; (3920 <scu_ble_connect_thread_entry+0x64>)
    38e8:	f01b ff19 	bl	1f71e <printk>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    38ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    38ee:	ac03      	add	r4, sp, #12
    38f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    38f2:	682b      	ldr	r3, [r5, #0]
    38f4:	6023      	str	r3, [r4, #0]
    38f6:	490b      	ldr	r1, [pc, #44]	; (3924 <scu_ble_connect_thread_entry+0x68>)
    38f8:	9600      	str	r6, [sp, #0]
    38fa:	4633      	mov	r3, r6
    38fc:	2202      	movs	r2, #2
    38fe:	a803      	add	r0, sp, #12
    3900:	f004 f956 	bl	7bb0 <bt_le_adv_start>
    if (err)
    3904:	4601      	mov	r1, r0
    3906:	b108      	cbz	r0, 390c <scu_ble_connect_thread_entry+0x50>
        printk("Advertising failed to start (err %d)\n", err);
    3908:	4807      	ldr	r0, [pc, #28]	; (3928 <scu_ble_connect_thread_entry+0x6c>)
    390a:	e7e0      	b.n	38ce <scu_ble_connect_thread_entry+0x12>
    printk("Advertising successfully started\n");
    390c:	4807      	ldr	r0, [pc, #28]	; (392c <scu_ble_connect_thread_entry+0x70>)
    390e:	f01b ff06 	bl	1f71e <printk>
    3912:	e7de      	b.n	38d2 <scu_ble_connect_thread_entry+0x16>
    3914:	0002648c 	.word	0x0002648c
    3918:	200001b4 	.word	0x200001b4
    391c:	00024b80 	.word	0x00024b80
    3920:	000264ac 	.word	0x000264ac
    3924:	00024c08 	.word	0x00024c08
    3928:	000264c3 	.word	0x000264c3
    392c:	000264e9 	.word	0x000264e9

00003930 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3930:	680b      	ldr	r3, [r1, #0]
    3932:	3301      	adds	r3, #1
    3934:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3936:	4b01      	ldr	r3, [pc, #4]	; (393c <char_out+0xc>)
    3938:	681b      	ldr	r3, [r3, #0]
    393a:	4718      	bx	r3
    393c:	200001c8 	.word	0x200001c8

00003940 <__printk_hook_install>:
	_char_out = fn;
    3940:	4b01      	ldr	r3, [pc, #4]	; (3948 <__printk_hook_install+0x8>)
    3942:	6018      	str	r0, [r3, #0]
}
    3944:	4770      	bx	lr
    3946:	bf00      	nop
    3948:	200001c8 	.word	0x200001c8

0000394c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    394c:	b507      	push	{r0, r1, r2, lr}
    394e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    3950:	2100      	movs	r1, #0
{
    3952:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    3954:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    3956:	4803      	ldr	r0, [pc, #12]	; (3964 <vprintk+0x18>)
    3958:	a901      	add	r1, sp, #4
    395a:	f000 f8e5 	bl	3b28 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    395e:	b003      	add	sp, #12
    3960:	f85d fb04 	ldr.w	pc, [sp], #4
    3964:	00003931 	.word	0x00003931

00003968 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    396c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3970:	f019 0808 	ands.w	r8, r9, #8
{
    3974:	4604      	mov	r4, r0
    3976:	4693      	mov	fp, r2
	if (processing) {
    3978:	d00d      	beq.n	3996 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    397a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    397c:	bf0c      	ite	eq
    397e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3982:	f049 0920 	orrne.w	r9, r9, #32
    3986:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    398a:	f38b 8811 	msr	BASEPRI, fp
    398e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3996:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    399a:	2902      	cmp	r1, #2
    399c:	d107      	bne.n	39ae <process_event+0x46>
			evt = process_recheck(mgr);
    399e:	4620      	mov	r0, r4
    39a0:	f01b fee4 	bl	1f76c <process_recheck>
		if (evt == EVT_NOP) {
    39a4:	2800      	cmp	r0, #0
    39a6:	d0f0      	beq.n	398a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    39a8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    39aa:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    39ac:	d14e      	bne.n	3a4c <process_event+0xe4>
			res = mgr->last_res;
    39ae:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    39b0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    39b2:	2f00      	cmp	r7, #0
    39b4:	da15      	bge.n	39e2 <process_event+0x7a>
		*clients = mgr->clients;
    39b6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    39b8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    39bc:	e9c4 8800 	strd	r8, r8, [r4]
    39c0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    39c4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    39c6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    39c8:	8b21      	ldrh	r1, [r4, #24]
    39ca:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    39ce:	45ca      	cmp	sl, r9
    39d0:	d002      	beq.n	39d8 <process_event+0x70>
		if (do_monitors
    39d2:	68a3      	ldr	r3, [r4, #8]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d15a      	bne.n	3a8e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    39d8:	b90d      	cbnz	r5, 39de <process_event+0x76>
		    || (transit != NULL)) {
    39da:	2e00      	cmp	r6, #0
    39dc:	d071      	beq.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    39de:	2300      	movs	r3, #0
    39e0:	e056      	b.n	3a90 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    39e2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    39e6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    39e8:	2a01      	cmp	r2, #1
    39ea:	d81e      	bhi.n	3a2a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    39ec:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    39f0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    39f2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    39f4:	b289      	uxth	r1, r1
    39f6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    39fa:	d10a      	bne.n	3a12 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    39fc:	b13d      	cbz	r5, 3a0e <process_event+0xa6>
    39fe:	8b63      	ldrh	r3, [r4, #26]
    3a00:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    3a02:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    3a04:	3301      	adds	r3, #1
    3a06:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3a08:	2a00      	cmp	r2, #0
    3a0a:	d1fa      	bne.n	3a02 <process_event+0x9a>
    3a0c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a0e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3a12:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3a14:	4620      	mov	r0, r4
    3a16:	f01b fea9 	bl	1f76c <process_recheck>
    3a1a:	4606      	mov	r6, r0
    3a1c:	2800      	cmp	r0, #0
    3a1e:	d0d3      	beq.n	39c8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3a20:	8b23      	ldrh	r3, [r4, #24]
    3a22:	f043 0320 	orr.w	r3, r3, #32
    3a26:	8323      	strh	r3, [r4, #24]
    3a28:	e7cd      	b.n	39c6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3a2a:	2b04      	cmp	r3, #4
    3a2c:	d10c      	bne.n	3a48 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a2e:	f021 0107 	bic.w	r1, r1, #7
    3a32:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3a34:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3a36:	4620      	mov	r0, r4
    3a38:	f01b fe98 	bl	1f76c <process_recheck>
    3a3c:	4605      	mov	r5, r0
    3a3e:	2800      	cmp	r0, #0
    3a40:	d0c1      	beq.n	39c6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3a42:	f041 0120 	orr.w	r1, r1, #32
    3a46:	8321      	strh	r1, [r4, #24]
    3a48:	2500      	movs	r5, #0
    3a4a:	e7bc      	b.n	39c6 <process_event+0x5e>
		} else if (evt == EVT_START) {
    3a4c:	2803      	cmp	r0, #3
    3a4e:	d109      	bne.n	3a64 <process_event+0xfc>
			transit = mgr->transitions->start;
    3a50:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a52:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3a56:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a58:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3a5c:	8323      	strh	r3, [r4, #24]
}
    3a5e:	2500      	movs	r5, #0
		res = 0;
    3a60:	462f      	mov	r7, r5
    3a62:	e7b1      	b.n	39c8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3a64:	2804      	cmp	r0, #4
    3a66:	d106      	bne.n	3a76 <process_event+0x10e>
			transit = mgr->transitions->stop;
    3a68:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a6a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    3a6e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a70:	f043 0304 	orr.w	r3, r3, #4
    3a74:	e7f2      	b.n	3a5c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    3a76:	2805      	cmp	r0, #5
    3a78:	d106      	bne.n	3a88 <process_event+0x120>
			transit = mgr->transitions->reset;
    3a7a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a7c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    3a80:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3a82:	f043 0305 	orr.w	r3, r3, #5
    3a86:	e7e9      	b.n	3a5c <process_event+0xf4>
    3a88:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    3a8a:	462e      	mov	r6, r5
    3a8c:	e7e8      	b.n	3a60 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    3a8e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3a90:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3a94:	8321      	strh	r1, [r4, #24]
    3a96:	f38b 8811 	msr	BASEPRI, fp
    3a9a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3a9e:	b9fb      	cbnz	r3, 3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
	while (!sys_slist_is_empty(list)) {
    3aa0:	bb85      	cbnz	r5, 3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
			if (transit != NULL) {
    3aa2:	b116      	cbz	r6, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
				transit(mgr, transition_complete);
    3aa4:	491f      	ldr	r1, [pc, #124]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3aa6:	4620      	mov	r0, r4
    3aa8:	47b0      	blx	r6
	__asm__ volatile(
    3aaa:	f04f 0320 	mov.w	r3, #32
    3aae:	f3ef 8b11 	mrs	fp, BASEPRI
    3ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ab6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3aba:	8b23      	ldrh	r3, [r4, #24]
    3abc:	f023 0308 	bic.w	r3, r3, #8
    3ac0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3ac2:	8b23      	ldrh	r3, [r4, #24]
    3ac4:	06da      	lsls	r2, r3, #27
    3ac6:	d525      	bpl.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3ac8:	f023 0310 	bic.w	r3, r3, #16
    3acc:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3ace:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3ad0:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3ad4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3ad8:	2900      	cmp	r1, #0
    3ada:	f47f af5e 	bne.w	399a <process_event+0x32>
out:
    3ade:	e754      	b.n	398a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3ae0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3ae2:	2900      	cmp	r1, #0
    3ae4:	d0dc      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	return node->next;
    3ae6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    3aea:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3aee:	463b      	mov	r3, r7
    3af0:	4652      	mov	r2, sl
    3af2:	4620      	mov	r0, r4
    3af4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3af6:	f1b9 0f00 	cmp.w	r9, #0
    3afa:	d0d1      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3afc:	4649      	mov	r1, r9
    3afe:	f8d9 9000 	ldr.w	r9, [r9]
    3b02:	e7f2      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3b04:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3b06:	463b      	mov	r3, r7
    3b08:	4652      	mov	r2, sl
    3b0a:	4620      	mov	r0, r4
    3b0c:	682d      	ldr	r5, [r5, #0]
    3b0e:	f01b fe49 	bl	1f7a4 <notify_one>
    3b12:	e7c5      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3b14:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3b18:	bf1e      	ittt	ne
    3b1a:	f023 0320 	bicne.w	r3, r3, #32
    3b1e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3b20:	2102      	movne	r1, #2
    3b22:	e7d5      	b.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3b24:	0001f7d1 	.word	0x0001f7d1

00003b28 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b2c:	4681      	mov	r9, r0
    3b2e:	b09b      	sub	sp, #108	; 0x6c
    3b30:	468a      	mov	sl, r1
    3b32:	4615      	mov	r5, r2
    3b34:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3b36:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3b38:	7828      	ldrb	r0, [r5, #0]
    3b3a:	b910      	cbnz	r0, 3b42 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3b3c:	4630      	mov	r0, r6
    3b3e:	f000 bdee 	b.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
			OUTC(*fp++);
    3b42:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    3b44:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    3b46:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    3b48:	d006      	beq.n	3b58 <cbvprintf+0x30>
			OUTC(*fp++);
    3b4a:	4651      	mov	r1, sl
			OUTC('%');
    3b4c:	47c8      	blx	r9
    3b4e:	2800      	cmp	r0, #0
    3b50:	f2c0 85e5 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
    3b54:	3601      	adds	r6, #1
		if (bps == NULL) {
    3b56:	e24c      	b.n	3ff2 <cbvprintf+0x4ca>
		} state = {
    3b58:	2218      	movs	r2, #24
    3b5a:	2100      	movs	r1, #0
    3b5c:	a80c      	add	r0, sp, #48	; 0x30
    3b5e:	f01c fdee 	bl	2073e <memset>
	if (*sp == '%') {
    3b62:	786b      	ldrb	r3, [r5, #1]
    3b64:	2b25      	cmp	r3, #37	; 0x25
    3b66:	d07c      	beq.n	3c62 <cbvprintf+0x13a>
    3b68:	2200      	movs	r2, #0
    3b6a:	1c68      	adds	r0, r5, #1
    3b6c:	4696      	mov	lr, r2
    3b6e:	4690      	mov	r8, r2
    3b70:	4694      	mov	ip, r2
    3b72:	4617      	mov	r7, r2
    3b74:	4601      	mov	r1, r0
		switch (*sp) {
    3b76:	f810 3b01 	ldrb.w	r3, [r0], #1
    3b7a:	2b2b      	cmp	r3, #43	; 0x2b
    3b7c:	f000 80a0 	beq.w	3cc0 <cbvprintf+0x198>
    3b80:	f200 8097 	bhi.w	3cb2 <cbvprintf+0x18a>
    3b84:	2b20      	cmp	r3, #32
    3b86:	f000 809e 	beq.w	3cc6 <cbvprintf+0x19e>
    3b8a:	2b23      	cmp	r3, #35	; 0x23
    3b8c:	f000 809e 	beq.w	3ccc <cbvprintf+0x1a4>
    3b90:	b12f      	cbz	r7, 3b9e <cbvprintf+0x76>
    3b92:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3b96:	f040 0004 	orr.w	r0, r0, #4
    3b9a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    3b9e:	f1bc 0f00 	cmp.w	ip, #0
    3ba2:	d005      	beq.n	3bb0 <cbvprintf+0x88>
    3ba4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3ba8:	f040 0008 	orr.w	r0, r0, #8
    3bac:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    3bb0:	f1b8 0f00 	cmp.w	r8, #0
    3bb4:	d005      	beq.n	3bc2 <cbvprintf+0x9a>
    3bb6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3bba:	f040 0010 	orr.w	r0, r0, #16
    3bbe:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    3bc2:	f1be 0f00 	cmp.w	lr, #0
    3bc6:	d005      	beq.n	3bd4 <cbvprintf+0xac>
    3bc8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    3bcc:	f040 0020 	orr.w	r0, r0, #32
    3bd0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    3bd4:	b12a      	cbz	r2, 3be2 <cbvprintf+0xba>
    3bd6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3bde:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    3be2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3be6:	f002 0044 	and.w	r0, r2, #68	; 0x44
    3bea:	2844      	cmp	r0, #68	; 0x44
    3bec:	d103      	bne.n	3bf6 <cbvprintf+0xce>
		conv->flag_zero = false;
    3bee:	f36f 1286 	bfc	r2, #6, #1
    3bf2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    3bf6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    3bfa:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    3bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3c00:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    3c04:	d17e      	bne.n	3d04 <cbvprintf+0x1dc>
		conv->width_star = true;
    3c06:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3c0a:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    3c0e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    3c10:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    3c14:	781a      	ldrb	r2, [r3, #0]
    3c16:	2a2e      	cmp	r2, #46	; 0x2e
    3c18:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3c1c:	bf0c      	ite	eq
    3c1e:	2101      	moveq	r1, #1
    3c20:	2100      	movne	r1, #0
    3c22:	f361 0241 	bfi	r2, r1, #1, #1
    3c26:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    3c2a:	d177      	bne.n	3d1c <cbvprintf+0x1f4>
	if (*sp == '*') {
    3c2c:	785a      	ldrb	r2, [r3, #1]
    3c2e:	2a2a      	cmp	r2, #42	; 0x2a
    3c30:	d06d      	beq.n	3d0e <cbvprintf+0x1e6>
	++sp;
    3c32:	3301      	adds	r3, #1
	size_t val = 0;
    3c34:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    3c36:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3c3a:	4618      	mov	r0, r3
    3c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
    3c40:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3c44:	2f09      	cmp	r7, #9
    3c46:	f240 80ab 	bls.w	3da0 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    3c4a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    3c4e:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    3c50:	f3c2 0040 	ubfx	r0, r2, #1, #1
    3c54:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    3c58:	f361 0241 	bfi	r2, r1, #1, #1
    3c5c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    3c60:	e05c      	b.n	3d1c <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    3c62:	1caa      	adds	r2, r5, #2
    3c64:	9202      	str	r2, [sp, #8]
    3c66:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    3c6a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3c6e:	07df      	lsls	r7, r3, #31
    3c70:	f140 8173 	bpl.w	3f5a <cbvprintf+0x432>
			width = va_arg(ap, int);
    3c74:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    3c78:	f1bb 0f00 	cmp.w	fp, #0
    3c7c:	da07      	bge.n	3c8e <cbvprintf+0x166>
				conv->flag_dash = true;
    3c7e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3c82:	f042 0204 	orr.w	r2, r2, #4
    3c86:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    3c8a:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    3c8e:	0758      	lsls	r0, r3, #29
    3c90:	f140 816c 	bpl.w	3f6c <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    3c94:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    3c98:	f1b8 0f00 	cmp.w	r8, #0
    3c9c:	f280 816b 	bge.w	3f76 <cbvprintf+0x44e>
				conv->prec_present = false;
    3ca0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3ca4:	f36f 0341 	bfc	r3, #1, #1
    3ca8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    3cac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3cb0:	e161      	b.n	3f76 <cbvprintf+0x44e>
		switch (*sp) {
    3cb2:	2b2d      	cmp	r3, #45	; 0x2d
    3cb4:	d00d      	beq.n	3cd2 <cbvprintf+0x1aa>
    3cb6:	2b30      	cmp	r3, #48	; 0x30
    3cb8:	f47f af6a 	bne.w	3b90 <cbvprintf+0x68>
			conv->flag_zero = true;
    3cbc:	2201      	movs	r2, #1
	} while (loop);
    3cbe:	e759      	b.n	3b74 <cbvprintf+0x4c>
			conv->flag_plus = true;
    3cc0:	f04f 0c01 	mov.w	ip, #1
    3cc4:	e756      	b.n	3b74 <cbvprintf+0x4c>
			conv->flag_space = true;
    3cc6:	f04f 0801 	mov.w	r8, #1
    3cca:	e753      	b.n	3b74 <cbvprintf+0x4c>
			conv->flag_hash = true;
    3ccc:	f04f 0e01 	mov.w	lr, #1
    3cd0:	e750      	b.n	3b74 <cbvprintf+0x4c>
		switch (*sp) {
    3cd2:	2701      	movs	r7, #1
    3cd4:	e74e      	b.n	3b74 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    3cd6:	fb0c 7202 	mla	r2, ip, r2, r7
    3cda:	3a30      	subs	r2, #48	; 0x30
    3cdc:	4603      	mov	r3, r0
    3cde:	4618      	mov	r0, r3
    3ce0:	f810 7b01 	ldrb.w	r7, [r0], #1
    3ce4:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3ce8:	f1be 0f09 	cmp.w	lr, #9
    3cec:	d9f3      	bls.n	3cd6 <cbvprintf+0x1ae>
	if (sp != wp) {
    3cee:	4299      	cmp	r1, r3
    3cf0:	d090      	beq.n	3c14 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    3cf2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    3cf6:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    3cf8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    3cfa:	f362 0141 	bfi	r1, r2, #1, #1
    3cfe:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    3d02:	e787      	b.n	3c14 <cbvprintf+0xec>
    3d04:	460b      	mov	r3, r1
	size_t val = 0;
    3d06:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    3d08:	f04f 0c0a 	mov.w	ip, #10
    3d0c:	e7e7      	b.n	3cde <cbvprintf+0x1b6>
		conv->prec_star = true;
    3d0e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3d12:	f042 0204 	orr.w	r2, r2, #4
    3d16:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    3d1a:	3302      	adds	r3, #2
	switch (*sp) {
    3d1c:	4619      	mov	r1, r3
    3d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
    3d22:	2a6c      	cmp	r2, #108	; 0x6c
    3d24:	d05c      	beq.n	3de0 <cbvprintf+0x2b8>
    3d26:	d840      	bhi.n	3daa <cbvprintf+0x282>
    3d28:	2a68      	cmp	r2, #104	; 0x68
    3d2a:	d046      	beq.n	3dba <cbvprintf+0x292>
    3d2c:	2a6a      	cmp	r2, #106	; 0x6a
    3d2e:	d061      	beq.n	3df4 <cbvprintf+0x2cc>
    3d30:	2a4c      	cmp	r2, #76	; 0x4c
    3d32:	d067      	beq.n	3e04 <cbvprintf+0x2dc>
    3d34:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    3d36:	460b      	mov	r3, r1
    3d38:	f813 2b01 	ldrb.w	r2, [r3], #1
    3d3c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    3d3e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    3d40:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    3d44:	f200 80df 	bhi.w	3f06 <cbvprintf+0x3de>
    3d48:	2a57      	cmp	r2, #87	; 0x57
    3d4a:	d868      	bhi.n	3e1e <cbvprintf+0x2f6>
    3d4c:	2a41      	cmp	r2, #65	; 0x41
    3d4e:	d004      	beq.n	3d5a <cbvprintf+0x232>
    3d50:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    3d54:	2b02      	cmp	r3, #2
    3d56:	f200 80d6 	bhi.w	3f06 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    3d5a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    3d5e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    3d62:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    3d64:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    3d68:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    3d6c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    3d70:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    3d74:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    3d78:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    3d7c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    3d80:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    3d82:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    3d86:	b2cb      	uxtb	r3, r1
    3d88:	f100 80e5 	bmi.w	3f56 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    3d8c:	f003 0278 	and.w	r2, r3, #120	; 0x78
    3d90:	2a18      	cmp	r2, #24
    3d92:	f040 80b5 	bne.w	3f00 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    3d96:	f36f 03c6 	bfc	r3, #3, #4
    3d9a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3d9e:	e09c      	b.n	3eda <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    3da0:	fb0c 2101 	mla	r1, ip, r1, r2
    3da4:	3930      	subs	r1, #48	; 0x30
    3da6:	4603      	mov	r3, r0
    3da8:	e747      	b.n	3c3a <cbvprintf+0x112>
	switch (*sp) {
    3daa:	2a74      	cmp	r2, #116	; 0x74
    3dac:	d026      	beq.n	3dfc <cbvprintf+0x2d4>
    3dae:	2a7a      	cmp	r2, #122	; 0x7a
    3db0:	d1c0      	bne.n	3d34 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    3db2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3db6:	2206      	movs	r2, #6
    3db8:	e00d      	b.n	3dd6 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    3dba:	785a      	ldrb	r2, [r3, #1]
    3dbc:	2a68      	cmp	r2, #104	; 0x68
    3dbe:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3dc2:	d106      	bne.n	3dd2 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    3dc4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3dc6:	f361 02c6 	bfi	r2, r1, #3, #4
    3dca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    3dce:	1c99      	adds	r1, r3, #2
    3dd0:	e7b1      	b.n	3d36 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    3dd2:	4613      	mov	r3, r2
    3dd4:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    3dd6:	f362 03c6 	bfi	r3, r2, #3, #4
    3dda:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    3dde:	e7aa      	b.n	3d36 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    3de0:	785a      	ldrb	r2, [r3, #1]
    3de2:	2a6c      	cmp	r2, #108	; 0x6c
    3de4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3de8:	d101      	bne.n	3dee <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    3dea:	2104      	movs	r1, #4
    3dec:	e7eb      	b.n	3dc6 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    3dee:	4613      	mov	r3, r2
    3df0:	2203      	movs	r2, #3
    3df2:	e7f0      	b.n	3dd6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    3df4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3df8:	2205      	movs	r2, #5
    3dfa:	e7ec      	b.n	3dd6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    3dfc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3e00:	2207      	movs	r2, #7
    3e02:	e7e8      	b.n	3dd6 <cbvprintf+0x2ae>
		conv->unsupported = true;
    3e04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    3e08:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3e0c:	f023 0302 	bic.w	r3, r3, #2
    3e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3e14:	f043 0302 	orr.w	r3, r3, #2
    3e18:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3e1c:	e78b      	b.n	3d36 <cbvprintf+0x20e>
	switch (conv->specifier) {
    3e1e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    3e22:	2b20      	cmp	r3, #32
    3e24:	d86f      	bhi.n	3f06 <cbvprintf+0x3de>
    3e26:	a101      	add	r1, pc, #4	; (adr r1, 3e2c <cbvprintf+0x304>)
    3e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3e2c:	00003edf 	.word	0x00003edf
    3e30:	00003f07 	.word	0x00003f07
    3e34:	00003f07 	.word	0x00003f07
    3e38:	00003f07 	.word	0x00003f07
    3e3c:	00003f07 	.word	0x00003f07
    3e40:	00003f07 	.word	0x00003f07
    3e44:	00003f07 	.word	0x00003f07
    3e48:	00003f07 	.word	0x00003f07
    3e4c:	00003f07 	.word	0x00003f07
    3e50:	00003d5b 	.word	0x00003d5b
    3e54:	00003f07 	.word	0x00003f07
    3e58:	00003edf 	.word	0x00003edf
    3e5c:	00003eb1 	.word	0x00003eb1
    3e60:	00003d5b 	.word	0x00003d5b
    3e64:	00003d5b 	.word	0x00003d5b
    3e68:	00003d5b 	.word	0x00003d5b
    3e6c:	00003f07 	.word	0x00003f07
    3e70:	00003eb1 	.word	0x00003eb1
    3e74:	00003f07 	.word	0x00003f07
    3e78:	00003f07 	.word	0x00003f07
    3e7c:	00003f07 	.word	0x00003f07
    3e80:	00003f07 	.word	0x00003f07
    3e84:	00003f15 	.word	0x00003f15
    3e88:	00003edf 	.word	0x00003edf
    3e8c:	00003f39 	.word	0x00003f39
    3e90:	00003f07 	.word	0x00003f07
    3e94:	00003f07 	.word	0x00003f07
    3e98:	00003f39 	.word	0x00003f39
    3e9c:	00003f07 	.word	0x00003f07
    3ea0:	00003edf 	.word	0x00003edf
    3ea4:	00003f07 	.word	0x00003f07
    3ea8:	00003f07 	.word	0x00003f07
    3eac:	00003edf 	.word	0x00003edf
		conv->specifier_cat = SPECIFIER_SINT;
    3eb0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3eb4:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    3eb6:	f361 0302 	bfi	r3, r1, #0, #3
    3eba:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3ebe:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3ec2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3ec6:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    3ec8:	bf02      	ittt	eq
    3eca:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    3ece:	f041 0101 	orreq.w	r1, r1, #1
    3ed2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    3ed6:	2a63      	cmp	r2, #99	; 0x63
    3ed8:	d005      	beq.n	3ee6 <cbvprintf+0x3be>
	bool unsupported = false;
    3eda:	2300      	movs	r3, #0
    3edc:	e006      	b.n	3eec <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    3ede:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3ee2:	2102      	movs	r1, #2
    3ee4:	e7e7      	b.n	3eb6 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3ee6:	3b00      	subs	r3, #0
    3ee8:	bf18      	it	ne
    3eea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3eec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3ef0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3ef4:	430b      	orrs	r3, r1
    3ef6:	f363 0241 	bfi	r2, r3, #1, #1
    3efa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    3efe:	e6b4      	b.n	3c6a <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    3f00:	f013 0f38 	tst.w	r3, #56	; 0x38
    3f04:	d0e9      	beq.n	3eda <cbvprintf+0x3b2>
			conv->invalid = true;
    3f06:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3f0a:	f043 0301 	orr.w	r3, r3, #1
    3f0e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3f12:	e7e2      	b.n	3eda <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    3f14:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3f18:	2203      	movs	r2, #3
    3f1a:	f362 0302 	bfi	r3, r2, #0, #3
    3f1e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3f22:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3f26:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3f2a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    3f2e:	f1dc 0300 	rsbs	r3, ip, #0
    3f32:	eb43 030c 	adc.w	r3, r3, ip
    3f36:	e7d9      	b.n	3eec <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    3f38:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3f3c:	2203      	movs	r2, #3
    3f3e:	f362 0302 	bfi	r3, r2, #0, #3
    3f42:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3f46:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3f4a:	f013 0f78 	tst.w	r3, #120	; 0x78
    3f4e:	bf14      	ite	ne
    3f50:	2301      	movne	r3, #1
    3f52:	2300      	moveq	r3, #0
    3f54:	e7ca      	b.n	3eec <cbvprintf+0x3c4>
			unsupported = true;
    3f56:	2301      	movs	r3, #1
    3f58:	e7c8      	b.n	3eec <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3f5a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    3f5e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3f60:	bfb4      	ite	lt
    3f62:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    3f66:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    3f6a:	e690      	b.n	3c8e <cbvprintf+0x166>
		} else if (conv->prec_present) {
    3f6c:	0799      	lsls	r1, r3, #30
    3f6e:	f57f ae9d 	bpl.w	3cac <cbvprintf+0x184>
			precision = conv->prec_value;
    3f72:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    3f76:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    3f7a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3f7c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    3f80:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    3f84:	f003 0207 	and.w	r2, r3, #7
    3f88:	2a04      	cmp	r2, #4
    3f8a:	d109      	bne.n	3fa0 <cbvprintf+0x478>
		    && !conv->prec_present) {
    3f8c:	078a      	lsls	r2, r1, #30
    3f8e:	d407      	bmi.n	3fa0 <cbvprintf+0x478>
			if (conv->specifier_a) {
    3f90:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    3f94:	2a00      	cmp	r2, #0
    3f96:	bfb4      	ite	lt
    3f98:	f04f 080d 	movlt.w	r8, #13
    3f9c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    3fa0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3fa4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3fa6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3faa:	d137      	bne.n	401c <CONFIG_USB_DEVICE_PID+0xb>
			switch (length_mod) {
    3fac:	1ecb      	subs	r3, r1, #3
    3fae:	2b04      	cmp	r3, #4
    3fb0:	d821      	bhi.n	3ff6 <cbvprintf+0x4ce>
    3fb2:	e8df f003 	tbb	[pc, r3]
    3fb6:	0903      	.short	0x0903
    3fb8:	2009      	.short	0x2009
    3fba:	20          	.byte	0x20
    3fbb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3fbc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    3fc0:	17da      	asrs	r2, r3, #31
    3fc2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    3fc6:	e006      	b.n	3fd6 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    3fc8:	3407      	adds	r4, #7
    3fca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3fce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    3fd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    3fd6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    3fda:	07bb      	lsls	r3, r7, #30
    3fdc:	d056      	beq.n	408c <CONFIG_USB_DEVICE_PID+0x7b>
			OUTS(sp, fp);
    3fde:	9b02      	ldr	r3, [sp, #8]
    3fe0:	462a      	mov	r2, r5
    3fe2:	4651      	mov	r1, sl
    3fe4:	4648      	mov	r0, r9
    3fe6:	f01b fef2 	bl	1fdce <outs>
    3fea:	2800      	cmp	r0, #0
    3fec:	f2c0 8397 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
    3ff0:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    3ff2:	9d02      	ldr	r5, [sp, #8]
    3ff4:	e5a0      	b.n	3b38 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3ff6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3ffa:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3ffc:	ea4f 72e3 	mov.w	r2, r3, asr #31
    4000:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4004:	d105      	bne.n	4012 <CONFIG_USB_DEVICE_PID+0x1>
				value->uint = (unsigned char)value->uint;
    4006:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    400a:	930c      	str	r3, [sp, #48]	; 0x30
    400c:	2300      	movs	r3, #0
    400e:	930d      	str	r3, [sp, #52]	; 0x34
    4010:	e7e1      	b.n	3fd6 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    4012:	2902      	cmp	r1, #2
    4014:	d1df      	bne.n	3fd6 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    4016:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    401a:	e7d1      	b.n	3fc0 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    401c:	2b02      	cmp	r3, #2
    401e:	d123      	bne.n	4068 <CONFIG_USB_DEVICE_PID+0x57>
			switch (length_mod) {
    4020:	1ecb      	subs	r3, r1, #3
    4022:	2b04      	cmp	r3, #4
    4024:	d813      	bhi.n	404e <CONFIG_USB_DEVICE_PID+0x3d>
    4026:	e8df f003 	tbb	[pc, r3]
    402a:	0a03      	.short	0x0a03
    402c:	120a      	.short	0x120a
    402e:	12          	.byte	0x12
    402f:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    4030:	6822      	ldr	r2, [r4, #0]
    4032:	920c      	str	r2, [sp, #48]	; 0x30
    4034:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    4036:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    4038:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    403a:	4604      	mov	r4, r0
    403c:	e7cb      	b.n	3fd6 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    403e:	1de0      	adds	r0, r4, #7
    4040:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    4044:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    4048:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    404c:	e7f5      	b.n	403a <CONFIG_USB_DEVICE_PID+0x29>
					(uint_value_type)va_arg(ap, size_t);
    404e:	f854 3b04 	ldr.w	r3, [r4], #4
    4052:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4054:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4056:	f04f 0300 	mov.w	r3, #0
    405a:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    405c:	d0d3      	beq.n	4006 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    405e:	2902      	cmp	r1, #2
    4060:	d1b9      	bne.n	3fd6 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    4062:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4066:	e7d0      	b.n	400a <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    4068:	2b04      	cmp	r3, #4
    406a:	d109      	bne.n	4080 <CONFIG_USB_DEVICE_PID+0x6f>
					(sint_value_type)va_arg(ap, long long);
    406c:	1de3      	adds	r3, r4, #7
    406e:	f023 0307 	bic.w	r3, r3, #7
    4072:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    4076:	e9d3 2300 	ldrd	r2, r3, [r3]
    407a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    407e:	e7aa      	b.n	3fd6 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4080:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4082:	bf04      	itt	eq
    4084:	f854 3b04 	ldreq.w	r3, [r4], #4
    4088:	930c      	streq	r3, [sp, #48]	; 0x30
    408a:	e7a4      	b.n	3fd6 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    408c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    4090:	2a78      	cmp	r2, #120	; 0x78
    4092:	d8ae      	bhi.n	3ff2 <cbvprintf+0x4ca>
    4094:	2a57      	cmp	r2, #87	; 0x57
    4096:	f200 808c 	bhi.w	41b2 <CONFIG_USB_DEVICE_PID+0x1a1>
    409a:	2a25      	cmp	r2, #37	; 0x25
    409c:	f000 80d4 	beq.w	4248 <CONFIG_USB_DEVICE_PID+0x237>
    40a0:	2a24      	cmp	r2, #36	; 0x24
    40a2:	d9a6      	bls.n	3ff2 <cbvprintf+0x4ca>
    40a4:	2a41      	cmp	r2, #65	; 0x41
    40a6:	d003      	beq.n	40b0 <CONFIG_USB_DEVICE_PID+0x9f>
    40a8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    40ac:	2b02      	cmp	r3, #2
    40ae:	d8a0      	bhi.n	3ff2 <cbvprintf+0x4ca>
	} u = {
    40b0:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    40b4:	2b00      	cmp	r3, #0
    40b6:	f2c0 81be 	blt.w	4436 <CONFIG_USB_DEVICE_PID+0x425>
	} else if (conv->flag_plus) {
    40ba:	0738      	lsls	r0, r7, #28
    40bc:	f100 81bd 	bmi.w	443a <CONFIG_USB_DEVICE_PID+0x429>
		*sign = ' ';
    40c0:	f017 0710 	ands.w	r7, r7, #16
    40c4:	bf18      	it	ne
    40c6:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    40c8:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    40cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    40d0:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    40d4:	2d00      	cmp	r5, #0
    40d6:	f040 81b2 	bne.w	443e <CONFIG_USB_DEVICE_PID+0x42d>
    40da:	ea51 0003 	orrs.w	r0, r1, r3
    40de:	bf14      	ite	ne
    40e0:	2001      	movne	r0, #1
    40e2:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    40e4:	02db      	lsls	r3, r3, #11
    40e6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    40ea:	02c9      	lsls	r1, r1, #11
		c = 'f';
    40ec:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    40ee:	ea45 0e01 	orr.w	lr, r5, r1
    40f2:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    40f6:	bf08      	it	eq
    40f8:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    40fa:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    40fe:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    4102:	f000 8206 	beq.w	4512 <CONFIG_USB_DEVICE_PID+0x501>
		if (is_subnormal) {
    4106:	2800      	cmp	r0, #0
    4108:	f040 81ce 	bne.w	44a8 <CONFIG_USB_DEVICE_PID+0x497>
		fract |= BIT_63;
    410c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4110:	f04f 0c00 	mov.w	ip, #0
    4114:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    4118:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    411c:	9109      	str	r1, [sp, #36]	; 0x24
    411e:	4663      	mov	r3, ip
		fract *= 5U;
    4120:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    4124:	f115 0f02 	cmn.w	r5, #2
    4128:	f2c0 81c5 	blt.w	44b6 <CONFIG_USB_DEVICE_PID+0x4a5>
    412c:	f1bc 0f00 	cmp.w	ip, #0
    4130:	d001      	beq.n	4136 <CONFIG_USB_DEVICE_PID+0x125>
    4132:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    4136:	2d00      	cmp	r5, #0
		fract += 2;
    4138:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    413c:	f300 81d0 	bgt.w	44e0 <CONFIG_USB_DEVICE_PID+0x4cf>
	fract >>= (4 - expo);
    4140:	9809      	ldr	r0, [sp, #36]	; 0x24
    4142:	9908      	ldr	r1, [sp, #32]
    4144:	f1c5 0c04 	rsb	ip, r5, #4
    4148:	351c      	adds	r5, #28
    414a:	fa00 f505 	lsl.w	r5, r0, r5
    414e:	f1ac 0e20 	sub.w	lr, ip, #32
    4152:	fa21 f10c 	lsr.w	r1, r1, ip
    4156:	fa20 fe0e 	lsr.w	lr, r0, lr
    415a:	4329      	orrs	r1, r5
    415c:	ea41 010e 	orr.w	r1, r1, lr
    4160:	fa20 f00c 	lsr.w	r0, r0, ip
    4164:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    4168:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    416c:	2947      	cmp	r1, #71	; 0x47
    416e:	f040 81d7 	bne.w	4520 <CONFIG_USB_DEVICE_PID+0x50f>
		if (decexp < (-4 + 1) || decexp > precision) {
    4172:	1cdd      	adds	r5, r3, #3
    4174:	db02      	blt.n	417c <CONFIG_USB_DEVICE_PID+0x16b>
    4176:	4598      	cmp	r8, r3
    4178:	f280 81ce 	bge.w	4518 <CONFIG_USB_DEVICE_PID+0x507>
			c += 'e' - 'g';  /* e or E */
    417c:	3a02      	subs	r2, #2
			if (precision > 0) {
    417e:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    4182:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    4184:	dd01      	ble.n	418a <CONFIG_USB_DEVICE_PID+0x179>
				precision--;
    4186:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    418a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    418e:	0688      	lsls	r0, r1, #26
    4190:	f100 81c6 	bmi.w	4520 <CONFIG_USB_DEVICE_PID+0x50f>
    4194:	f1b8 0f00 	cmp.w	r8, #0
    4198:	bfd4      	ite	le
    419a:	2100      	movle	r1, #0
    419c:	2101      	movgt	r1, #1
	if (c == 'f') {
    419e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    41a0:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    41a2:	f040 81bf 	bne.w	4524 <CONFIG_USB_DEVICE_PID+0x513>
		if (decimals < 0) {
    41a6:	eb18 0503 	adds.w	r5, r8, r3
    41aa:	f140 81bd 	bpl.w	4528 <CONFIG_USB_DEVICE_PID+0x517>
			decimals = 0;
    41ae:	2500      	movs	r5, #0
    41b0:	e1bd      	b.n	452e <CONFIG_USB_DEVICE_PID+0x51d>
		switch (conv->specifier) {
    41b2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    41b6:	2b20      	cmp	r3, #32
    41b8:	f63f af1b 	bhi.w	3ff2 <cbvprintf+0x4ca>
    41bc:	a001      	add	r0, pc, #4	; (adr r0, 41c4 <CONFIG_USB_DEVICE_PID+0x1b3>)
    41be:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    41c2:	bf00      	nop
    41c4:	000043d9 	.word	0x000043d9
    41c8:	00003ff3 	.word	0x00003ff3
    41cc:	00003ff3 	.word	0x00003ff3
    41d0:	00003ff3 	.word	0x00003ff3
    41d4:	00003ff3 	.word	0x00003ff3
    41d8:	00003ff3 	.word	0x00003ff3
    41dc:	00003ff3 	.word	0x00003ff3
    41e0:	00003ff3 	.word	0x00003ff3
    41e4:	00003ff3 	.word	0x00003ff3
    41e8:	000040b1 	.word	0x000040b1
    41ec:	00003ff3 	.word	0x00003ff3
    41f0:	00004275 	.word	0x00004275
    41f4:	00004379 	.word	0x00004379
    41f8:	000040b1 	.word	0x000040b1
    41fc:	000040b1 	.word	0x000040b1
    4200:	000040b1 	.word	0x000040b1
    4204:	00003ff3 	.word	0x00003ff3
    4208:	00004379 	.word	0x00004379
    420c:	00003ff3 	.word	0x00003ff3
    4210:	00003ff3 	.word	0x00003ff3
    4214:	00003ff3 	.word	0x00003ff3
    4218:	00003ff3 	.word	0x00003ff3
    421c:	0000440f 	.word	0x0000440f
    4220:	000043d9 	.word	0x000043d9
    4224:	000043dd 	.word	0x000043dd
    4228:	00003ff3 	.word	0x00003ff3
    422c:	00003ff3 	.word	0x00003ff3
    4230:	0000424f 	.word	0x0000424f
    4234:	00003ff3 	.word	0x00003ff3
    4238:	000043d9 	.word	0x000043d9
    423c:	00003ff3 	.word	0x00003ff3
    4240:	00003ff3 	.word	0x00003ff3
    4244:	000043d9 	.word	0x000043d9
			OUTC('%');
    4248:	4651      	mov	r1, sl
    424a:	4610      	mov	r0, r2
    424c:	e47e      	b.n	3b4c <cbvprintf+0x24>
			if (precision >= 0) {
    424e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    4252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    4254:	db09      	blt.n	426a <CONFIG_USB_DEVICE_PID+0x259>
				len = strnlen(bps, precision);
    4256:	4641      	mov	r1, r8
    4258:	4610      	mov	r0, r2
    425a:	9203      	str	r2, [sp, #12]
    425c:	f01c fa3e 	bl	206dc <strnlen>
				len = strlen(bps);
    4260:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    4262:	2700      	movs	r7, #0
			bpe = bps + len;
    4264:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    4266:	b962      	cbnz	r2, 4282 <CONFIG_USB_DEVICE_PID+0x271>
    4268:	e6c3      	b.n	3ff2 <cbvprintf+0x4ca>
				len = strlen(bps);
    426a:	4610      	mov	r0, r2
    426c:	9203      	str	r2, [sp, #12]
    426e:	f01c fa2e 	bl	206ce <strlen>
    4272:	e7f5      	b.n	4260 <CONFIG_USB_DEVICE_PID+0x24f>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4276:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    427a:	2700      	movs	r7, #0
			bpe = buf + 1;
    427c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    4280:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    4282:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    4284:	b107      	cbz	r7, 4288 <CONFIG_USB_DEVICE_PID+0x277>
			nj_len += 1U;
    4286:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4288:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    428c:	06c1      	lsls	r1, r0, #27
    428e:	f140 823a 	bpl.w	4706 <CONFIG_USB_DEVICE_PID+0x6f5>
			nj_len += 2U;
    4292:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    4294:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    4296:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    4298:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    429a:	bf44      	itt	mi
    429c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    429e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    42a0:	f1bb 0f00 	cmp.w	fp, #0
    42a4:	dd23      	ble.n	42ee <CONFIG_USB_DEVICE_PID+0x2dd>
			width -= (int)nj_len;
    42a6:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    42aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    42ae:	0759      	lsls	r1, r3, #29
    42b0:	f3c3 0880 	ubfx	r8, r3, #2, #1
    42b4:	d41b      	bmi.n	42ee <CONFIG_USB_DEVICE_PID+0x2dd>
				if (conv->flag_zero) {
    42b6:	0658      	lsls	r0, r3, #25
    42b8:	f140 8234 	bpl.w	4724 <CONFIG_USB_DEVICE_PID+0x713>
					if (sign != 0) {
    42bc:	2f00      	cmp	r7, #0
    42be:	f000 8234 	beq.w	472a <CONFIG_USB_DEVICE_PID+0x719>
						OUTC(sign);
    42c2:	4651      	mov	r1, sl
    42c4:	4638      	mov	r0, r7
    42c6:	9203      	str	r2, [sp, #12]
    42c8:	47c8      	blx	r9
    42ca:	2800      	cmp	r0, #0
    42cc:	f2c0 8227 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
    42d0:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    42d2:	4647      	mov	r7, r8
						OUTC(sign);
    42d4:	3601      	adds	r6, #1
					pad = '0';
    42d6:	f04f 0830 	mov.w	r8, #48	; 0x30
    42da:	445e      	add	r6, fp
    42dc:	465b      	mov	r3, fp
				while (width-- > 0) {
    42de:	2b00      	cmp	r3, #0
    42e0:	eba6 000b 	sub.w	r0, r6, fp
    42e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    42e8:	f300 8211 	bgt.w	470e <CONFIG_USB_DEVICE_PID+0x6fd>
    42ec:	4606      	mov	r6, r0
		if (sign != 0) {
    42ee:	b147      	cbz	r7, 4302 <CONFIG_USB_DEVICE_PID+0x2f1>
			OUTC(sign);
    42f0:	4651      	mov	r1, sl
    42f2:	4638      	mov	r0, r7
    42f4:	9203      	str	r2, [sp, #12]
    42f6:	47c8      	blx	r9
    42f8:	2800      	cmp	r0, #0
    42fa:	f2c0 8210 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
    42fe:	9a03      	ldr	r2, [sp, #12]
    4300:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    4302:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4306:	0659      	lsls	r1, r3, #25
    4308:	f140 8265 	bpl.w	47d6 <CONFIG_USB_DEVICE_PID+0x7c5>
			if (conv->specifier_a) {
    430c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    4310:	2b00      	cmp	r3, #0
    4312:	eba6 0302 	sub.w	r3, r6, r2
    4316:	9303      	str	r3, [sp, #12]
    4318:	f2c0 820a 	blt.w	4730 <CONFIG_USB_DEVICE_PID+0x71f>
    431c:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    431e:	7838      	ldrb	r0, [r7, #0]
    4320:	9b03      	ldr	r3, [sp, #12]
    4322:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4326:	2a09      	cmp	r2, #9
    4328:	46b8      	mov	r8, r7
    432a:	eb03 0607 	add.w	r6, r3, r7
    432e:	f107 0701 	add.w	r7, r7, #1
    4332:	f240 8229 	bls.w	4788 <CONFIG_USB_DEVICE_PID+0x777>
				if (!conv->pad_postdp) {
    4336:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    433a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    433c:	0693      	lsls	r3, r2, #26
    433e:	d408      	bmi.n	4352 <CONFIG_USB_DEVICE_PID+0x341>
    4340:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    4342:	2f00      	cmp	r7, #0
    4344:	eba6 0307 	sub.w	r3, r6, r7
    4348:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    434c:	f300 8222 	bgt.w	4794 <CONFIG_USB_DEVICE_PID+0x783>
    4350:	461e      	mov	r6, r3
				if (*cp == '.') {
    4352:	f898 0000 	ldrb.w	r0, [r8]
    4356:	282e      	cmp	r0, #46	; 0x2e
    4358:	d10b      	bne.n	4372 <CONFIG_USB_DEVICE_PID+0x361>
					OUTC(*cp++);
    435a:	4651      	mov	r1, sl
    435c:	47c8      	blx	r9
						OUTC('0');
    435e:	2800      	cmp	r0, #0
    4360:	f2c0 81dd 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
					while (pad_len-- > 0) {
    4364:	2f00      	cmp	r7, #0
						OUTC('0');
    4366:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    436a:	f300 821a 	bgt.w	47a2 <CONFIG_USB_DEVICE_PID+0x791>
					OUTC(*cp++);
    436e:	f108 0801 	add.w	r8, r8, #1
    4372:	eba6 0608 	sub.w	r6, r6, r8
    4376:	e21d      	b.n	47b4 <CONFIG_USB_DEVICE_PID+0x7a3>
			if (conv->flag_plus) {
    4378:	073d      	lsls	r5, r7, #28
    437a:	d42b      	bmi.n	43d4 <CONFIG_USB_DEVICE_PID+0x3c3>
				sign = ' ';
    437c:	f017 0710 	ands.w	r7, r7, #16
    4380:	bf18      	it	ne
    4382:	2720      	movne	r7, #32
			sint = value->sint;
    4384:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    4388:	2b00      	cmp	r3, #0
    438a:	da05      	bge.n	4398 <CONFIG_USB_DEVICE_PID+0x387>
				value->uint = (uint_value_type)-sint;
    438c:	4252      	negs	r2, r2
    438e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4392:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    4396:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    4398:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    439c:	9300      	str	r3, [sp, #0]
    439e:	aa0e      	add	r2, sp, #56	; 0x38
    43a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    43a4:	ab13      	add	r3, sp, #76	; 0x4c
    43a6:	f01b fccc 	bl	1fd42 <encode_uint>
    43aa:	4602      	mov	r2, r0
			if (precision >= 0) {
    43ac:	f1b8 0f00 	cmp.w	r8, #0
    43b0:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    43b4:	f6ff af57 	blt.w	4266 <CONFIG_USB_DEVICE_PID+0x255>
				conv->flag_zero = false;
    43b8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    43bc:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    43be:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    43c2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    43c4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    43c8:	f67f af4d 	bls.w	4266 <CONFIG_USB_DEVICE_PID+0x255>
					conv->pad0_value = precision - (int)len;
    43cc:	eba8 0303 	sub.w	r3, r8, r3
    43d0:	930f      	str	r3, [sp, #60]	; 0x3c
    43d2:	e748      	b.n	4266 <CONFIG_USB_DEVICE_PID+0x255>
				sign = '+';
    43d4:	272b      	movs	r7, #43	; 0x2b
    43d6:	e7d5      	b.n	4384 <CONFIG_USB_DEVICE_PID+0x373>
		switch (conv->specifier) {
    43d8:	2700      	movs	r7, #0
    43da:	e7dd      	b.n	4398 <CONFIG_USB_DEVICE_PID+0x387>
			if (value->ptr != NULL) {
    43dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    43de:	2800      	cmp	r0, #0
    43e0:	f000 818d 	beq.w	46fe <CONFIG_USB_DEVICE_PID+0x6ed>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    43e4:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    43e8:	9300      	str	r3, [sp, #0]
    43ea:	aa0e      	add	r2, sp, #56	; 0x38
    43ec:	ab13      	add	r3, sp, #76	; 0x4c
    43ee:	2100      	movs	r1, #0
    43f0:	f01b fca7 	bl	1fd42 <encode_uint>
				conv->altform_0c = true;
    43f4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    43f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    43fc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4400:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4404:	4602      	mov	r2, r0
				conv->altform_0c = true;
    4406:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    440a:	2700      	movs	r7, #0
				goto prec_int_pad0;
    440c:	e7ce      	b.n	43ac <CONFIG_USB_DEVICE_PID+0x39b>
				store_count(conv, value->ptr, count);
    440e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    4410:	2907      	cmp	r1, #7
    4412:	f63f adee 	bhi.w	3ff2 <cbvprintf+0x4ca>
    4416:	e8df f001 	tbb	[pc, r1]
    441a:	040c      	.short	0x040c
    441c:	08080c06 	.word	0x08080c06
    4420:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    4422:	701e      	strb	r6, [r3, #0]
		break;
    4424:	e5e5      	b.n	3ff2 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    4426:	801e      	strh	r6, [r3, #0]
		break;
    4428:	e5e3      	b.n	3ff2 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    442a:	17f2      	asrs	r2, r6, #31
    442c:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    4430:	e5df      	b.n	3ff2 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4432:	601e      	str	r6, [r3, #0]
		break;
    4434:	e5dd      	b.n	3ff2 <cbvprintf+0x4ca>
		*sign = '-';
    4436:	272d      	movs	r7, #45	; 0x2d
    4438:	e646      	b.n	40c8 <CONFIG_USB_DEVICE_PID+0xb7>
		*sign = '+';
    443a:	272b      	movs	r7, #43	; 0x2b
    443c:	e644      	b.n	40c8 <CONFIG_USB_DEVICE_PID+0xb7>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    443e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    4442:	4285      	cmp	r5, r0
    4444:	d12d      	bne.n	44a2 <CONFIG_USB_DEVICE_PID+0x491>
		if (fract == 0) {
    4446:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4448:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    444c:	d11b      	bne.n	4486 <CONFIG_USB_DEVICE_PID+0x475>
			if (isupper((int)c)) {
    444e:	2a19      	cmp	r2, #25
    4450:	d811      	bhi.n	4476 <CONFIG_USB_DEVICE_PID+0x465>
				*buf++ = 'I';
    4452:	2349      	movs	r3, #73	; 0x49
    4454:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    4458:	234e      	movs	r3, #78	; 0x4e
    445a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    445e:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    4460:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    4464:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4468:	f36f 1386 	bfc	r3, #6, #1
    446c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    4470:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    4474:	e704      	b.n	4280 <CONFIG_USB_DEVICE_PID+0x26f>
				*buf++ = 'i';
    4476:	2369      	movs	r3, #105	; 0x69
    4478:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    447c:	236e      	movs	r3, #110	; 0x6e
    447e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    4482:	2366      	movs	r3, #102	; 0x66
    4484:	e7ec      	b.n	4460 <CONFIG_USB_DEVICE_PID+0x44f>
			if (isupper((int)c)) {
    4486:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    4488:	bf99      	ittee	ls
    448a:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    448c:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    448e:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    4490:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    4492:	bf94      	ite	ls
    4494:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    4498:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    449c:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    44a0:	e7de      	b.n	4460 <CONFIG_USB_DEVICE_PID+0x44f>
	bool is_subnormal = (expo == 0) && (fract != 0);
    44a2:	2000      	movs	r0, #0
    44a4:	e61e      	b.n	40e4 <CONFIG_USB_DEVICE_PID+0xd3>
				expo--;
    44a6:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    44a8:	1849      	adds	r1, r1, r1
    44aa:	415b      	adcs	r3, r3
    44ac:	2b00      	cmp	r3, #0
    44ae:	dafa      	bge.n	44a6 <CONFIG_USB_DEVICE_PID+0x495>
    44b0:	e9cd 1308 	strd	r1, r3, [sp, #32]
    44b4:	e62a      	b.n	410c <CONFIG_USB_DEVICE_PID+0xfb>
			fract >>= 1;
    44b6:	0840      	lsrs	r0, r0, #1
    44b8:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    44bc:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    44be:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    44c2:	46ac      	mov	ip, r5
			expo++;
    44c4:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    44c8:	d2f5      	bcs.n	44b6 <CONFIG_USB_DEVICE_PID+0x4a5>
		fract *= 5U;
    44ca:	fb0e f501 	mul.w	r5, lr, r1
    44ce:	fba0 010e 	umull	r0, r1, r0, lr
    44d2:	4429      	add	r1, r5
		decexp--;
    44d4:	3b01      	subs	r3, #1
		expo++;
    44d6:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    44da:	f04f 0c01 	mov.w	ip, #1
    44de:	e621      	b.n	4124 <CONFIG_USB_DEVICE_PID+0x113>
		fract += 2;
    44e0:	3102      	adds	r1, #2
    44e2:	f140 0000 	adc.w	r0, r0, #0
    44e6:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    44ea:	a808      	add	r0, sp, #32
    44ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    44f0:	f01b fbf8 	bl	1fce4 <_ldiv5>
		decexp++;
    44f4:	9b04      	ldr	r3, [sp, #16]
    44f6:	9a03      	ldr	r2, [sp, #12]
    44f8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    44fc:	3d01      	subs	r5, #1
		decexp++;
    44fe:	3301      	adds	r3, #1
			fract <<= 1;
    4500:	1849      	adds	r1, r1, r1
    4502:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    4504:	2800      	cmp	r0, #0
			expo--;
    4506:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    450a:	daf9      	bge.n	4500 <CONFIG_USB_DEVICE_PID+0x4ef>
    450c:	e9cd 1008 	strd	r1, r0, [sp, #32]
    4510:	e611      	b.n	4136 <CONFIG_USB_DEVICE_PID+0x125>
    4512:	2300      	movs	r3, #0
    4514:	461d      	mov	r5, r3
    4516:	e613      	b.n	4140 <CONFIG_USB_DEVICE_PID+0x12f>
			precision -= decexp;
    4518:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    451c:	2266      	movs	r2, #102	; 0x66
    451e:	e634      	b.n	418a <CONFIG_USB_DEVICE_PID+0x179>
	bool prune_zero = false;
    4520:	2100      	movs	r1, #0
    4522:	e63c      	b.n	419e <CONFIG_USB_DEVICE_PID+0x18d>
		decimals = precision + 1;
    4524:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    4528:	2d10      	cmp	r5, #16
    452a:	bfa8      	it	ge
    452c:	2510      	movge	r5, #16
    452e:	2110      	movs	r1, #16
    4530:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    4532:	2000      	movs	r0, #0
    4534:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    4538:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    453c:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    4540:	b9a5      	cbnz	r5, 456c <CONFIG_USB_DEVICE_PID+0x55b>
	fract += round;
    4542:	9d08      	ldr	r5, [sp, #32]
    4544:	1949      	adds	r1, r1, r5
    4546:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4548:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    454c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    4550:	d21b      	bcs.n	458a <CONFIG_USB_DEVICE_PID+0x579>
	fract += round;
    4552:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    4556:	2a66      	cmp	r2, #102	; 0x66
    4558:	f040 8099 	bne.w	468e <CONFIG_USB_DEVICE_PID+0x67d>
		if (decexp > 0) {
    455c:	2b00      	cmp	r3, #0
    455e:	dc23      	bgt.n	45a8 <CONFIG_USB_DEVICE_PID+0x597>
			*buf++ = '0';
    4560:	2130      	movs	r1, #48	; 0x30
    4562:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    4566:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    456a:	e02f      	b.n	45cc <CONFIG_USB_DEVICE_PID+0x5bb>
	*v >>= 1;
    456c:	0849      	lsrs	r1, r1, #1
    456e:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    4572:	0840      	lsrs	r0, r0, #1
    4574:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    4578:	a80a      	add	r0, sp, #40	; 0x28
    457a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    457e:	3d01      	subs	r5, #1
    4580:	f01b fbb0 	bl	1fce4 <_ldiv5>
    4584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    4588:	e7d8      	b.n	453c <CONFIG_USB_DEVICE_PID+0x52b>
	*v >>= 1;
    458a:	0849      	lsrs	r1, r1, #1
    458c:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    4590:	a808      	add	r0, sp, #32
	*v >>= 1;
    4592:	086d      	lsrs	r5, r5, #1
    4594:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4598:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    459c:	f01b fba2 	bl	1fce4 <_ldiv5>
		decexp++;
    45a0:	9b05      	ldr	r3, [sp, #20]
    45a2:	9a04      	ldr	r2, [sp, #16]
    45a4:	3301      	adds	r3, #1
    45a6:	e7d6      	b.n	4556 <CONFIG_USB_DEVICE_PID+0x545>
	char *buf = bps;
    45a8:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    45aa:	9907      	ldr	r1, [sp, #28]
    45ac:	2900      	cmp	r1, #0
    45ae:	dd0b      	ble.n	45c8 <CONFIG_USB_DEVICE_PID+0x5b7>
				*buf++ = _get_digit(&fract, &digit_count);
    45b0:	a907      	add	r1, sp, #28
    45b2:	a808      	add	r0, sp, #32
    45b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    45b8:	f01b fbac 	bl	1fd14 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    45bc:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    45be:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    45c2:	3b01      	subs	r3, #1
    45c4:	9a04      	ldr	r2, [sp, #16]
    45c6:	d1f0      	bne.n	45aa <CONFIG_USB_DEVICE_PID+0x599>
			conv->pad0_value = decexp;
    45c8:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    45ca:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    45cc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    45d0:	0689      	lsls	r1, r1, #26
    45d2:	d402      	bmi.n	45da <CONFIG_USB_DEVICE_PID+0x5c9>
    45d4:	f1b8 0f00 	cmp.w	r8, #0
    45d8:	dd1d      	ble.n	4616 <CONFIG_USB_DEVICE_PID+0x605>
			*buf++ = '.';
    45da:	212e      	movs	r1, #46	; 0x2e
    45dc:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    45e0:	b19b      	cbz	r3, 460a <CONFIG_USB_DEVICE_PID+0x5f9>
    45e2:	f1b8 0f00 	cmp.w	r8, #0
    45e6:	dd16      	ble.n	4616 <CONFIG_USB_DEVICE_PID+0x605>
			conv->pad0_value = -decexp;
    45e8:	4259      	negs	r1, r3
    45ea:	4541      	cmp	r1, r8
    45ec:	bfa8      	it	ge
    45ee:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    45f0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    45f4:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    45f6:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    45f8:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    45fc:	bfd4      	ite	le
    45fe:	2100      	movle	r1, #0
    4600:	2101      	movgt	r1, #1
    4602:	f361 1045 	bfi	r0, r1, #5, #1
    4606:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    460a:	f1b8 0f00 	cmp.w	r8, #0
    460e:	dd02      	ble.n	4616 <CONFIG_USB_DEVICE_PID+0x605>
    4610:	9907      	ldr	r1, [sp, #28]
    4612:	2900      	cmp	r1, #0
    4614:	dc56      	bgt.n	46c4 <CONFIG_USB_DEVICE_PID+0x6b3>
	if (prune_zero) {
    4616:	9903      	ldr	r1, [sp, #12]
    4618:	2900      	cmp	r1, #0
    461a:	d163      	bne.n	46e4 <CONFIG_USB_DEVICE_PID+0x6d3>
	conv->pad0_pre_exp = precision;
    461c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    4620:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    4624:	2945      	cmp	r1, #69	; 0x45
    4626:	d121      	bne.n	466c <CONFIG_USB_DEVICE_PID+0x65b>
		if (decexp < 0) {
    4628:	2b00      	cmp	r3, #0
		*buf++ = c;
    462a:	4629      	mov	r1, r5
			decexp = -decexp;
    462c:	bfb8      	it	lt
    462e:	425b      	neglt	r3, r3
		*buf++ = c;
    4630:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    4634:	bfb4      	ite	lt
    4636:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    4638:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    463a:	2b63      	cmp	r3, #99	; 0x63
    463c:	706a      	strb	r2, [r5, #1]
    463e:	dd09      	ble.n	4654 <CONFIG_USB_DEVICE_PID+0x643>
			*buf++ = (decexp / 100) + '0';
    4640:	2064      	movs	r0, #100	; 0x64
    4642:	fbb3 f2f0 	udiv	r2, r3, r0
    4646:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    464a:	1ce9      	adds	r1, r5, #3
    464c:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    4650:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    4654:	200a      	movs	r0, #10
    4656:	460d      	mov	r5, r1
    4658:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    465c:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    4660:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    4664:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    4666:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    466a:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    466c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    466e:	2b00      	cmp	r3, #0
    4670:	dc43      	bgt.n	46fa <CONFIG_USB_DEVICE_PID+0x6e9>
    4672:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4674:	2b00      	cmp	r3, #0
    4676:	bfd4      	ite	le
    4678:	2300      	movle	r3, #0
    467a:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    467c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    4680:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    4684:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    4686:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    468a:	702b      	strb	r3, [r5, #0]
	return bps;
    468c:	e5f8      	b.n	4280 <CONFIG_USB_DEVICE_PID+0x26f>
		*buf = _get_digit(&fract, &digit_count);
    468e:	a907      	add	r1, sp, #28
    4690:	a808      	add	r0, sp, #32
    4692:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4696:	f01b fb3d 	bl	1fd14 <_get_digit>
		if (*buf++ != '0') {
    469a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    469e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    46a2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    46a6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    46a8:	bf18      	it	ne
    46aa:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    46ae:	0688      	lsls	r0, r1, #26
    46b0:	d402      	bmi.n	46b8 <CONFIG_USB_DEVICE_PID+0x6a7>
    46b2:	f1b8 0f00 	cmp.w	r8, #0
    46b6:	dd12      	ble.n	46de <CONFIG_USB_DEVICE_PID+0x6cd>
			*buf++ = '.';
    46b8:	212e      	movs	r1, #46	; 0x2e
    46ba:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    46be:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    46c2:	e7a2      	b.n	460a <CONFIG_USB_DEVICE_PID+0x5f9>
		*buf++ = _get_digit(&fract, &digit_count);
    46c4:	a907      	add	r1, sp, #28
    46c6:	a808      	add	r0, sp, #32
    46c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    46cc:	f01b fb22 	bl	1fd14 <_get_digit>
		precision--;
    46d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    46d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    46d8:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    46dc:	e795      	b.n	460a <CONFIG_USB_DEVICE_PID+0x5f9>
		if (*buf++ != '0') {
    46de:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    46e2:	e798      	b.n	4616 <CONFIG_USB_DEVICE_PID+0x605>
		conv->pad0_pre_exp = 0;
    46e4:	2100      	movs	r1, #0
    46e6:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    46e8:	4628      	mov	r0, r5
    46ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    46ee:	2930      	cmp	r1, #48	; 0x30
    46f0:	d0fa      	beq.n	46e8 <CONFIG_USB_DEVICE_PID+0x6d7>
		if (*buf != '.') {
    46f2:	292e      	cmp	r1, #46	; 0x2e
    46f4:	bf18      	it	ne
    46f6:	4605      	movne	r5, r0
    46f8:	e792      	b.n	4620 <CONFIG_USB_DEVICE_PID+0x60f>
		|| (conv->pad0_pre_exp > 0);
    46fa:	2301      	movs	r3, #1
    46fc:	e7be      	b.n	467c <CONFIG_USB_DEVICE_PID+0x66b>
			bpe = bps + 5;
    46fe:	4d4b      	ldr	r5, [pc, #300]	; (482c <CONFIG_USB_DEVICE_PID+0x81b>)
		char sign = 0;
    4700:	4607      	mov	r7, r0
			bps = "(nil)";
    4702:	1f6a      	subs	r2, r5, #5
    4704:	e5bd      	b.n	4282 <CONFIG_USB_DEVICE_PID+0x271>
		} else if (conv->altform_0) {
    4706:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    4708:	bf48      	it	mi
    470a:	3301      	addmi	r3, #1
    470c:	e5c2      	b.n	4294 <CONFIG_USB_DEVICE_PID+0x283>
					OUTC(pad);
    470e:	4651      	mov	r1, sl
    4710:	4640      	mov	r0, r8
    4712:	9203      	str	r2, [sp, #12]
    4714:	47c8      	blx	r9
    4716:	2800      	cmp	r0, #0
    4718:	9a03      	ldr	r2, [sp, #12]
    471a:	f6bf addf 	bge.w	42dc <CONFIG_USB_DEVICE_PID+0x2cb>
#undef OUTS
#undef OUTC
}
    471e:	b01b      	add	sp, #108	; 0x6c
    4720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    4724:	f04f 0820 	mov.w	r8, #32
    4728:	e5d7      	b.n	42da <CONFIG_USB_DEVICE_PID+0x2c9>
					pad = '0';
    472a:	f04f 0830 	mov.w	r8, #48	; 0x30
    472e:	e5d4      	b.n	42da <CONFIG_USB_DEVICE_PID+0x2c9>
			if (conv->specifier_a) {
    4730:	4690      	mov	r8, r2
    4732:	9b03      	ldr	r3, [sp, #12]
    4734:	4647      	mov	r7, r8
    4736:	4443      	add	r3, r8
				while (*cp != 'p') {
    4738:	f818 0b01 	ldrb.w	r0, [r8], #1
    473c:	2870      	cmp	r0, #112	; 0x70
    473e:	d11e      	bne.n	477e <CONFIG_USB_DEVICE_PID+0x76d>
			while (pad_len-- > 0) {
    4740:	461e      	mov	r6, r3
    4742:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4744:	eb03 0806 	add.w	r8, r3, r6
    4748:	eba8 0306 	sub.w	r3, r8, r6
    474c:	2b00      	cmp	r3, #0
    474e:	dc3b      	bgt.n	47c8 <CONFIG_USB_DEVICE_PID+0x7b7>
			OUTS(cp, bpe);
    4750:	462b      	mov	r3, r5
    4752:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    4754:	4651      	mov	r1, sl
    4756:	4648      	mov	r0, r9
    4758:	f01b fb39 	bl	1fdce <outs>
    475c:	2800      	cmp	r0, #0
    475e:	dbde      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    4760:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    4762:	4606      	mov	r6, r0
    4764:	4483      	add	fp, r0
		while (width > 0) {
    4766:	ebab 0306 	sub.w	r3, fp, r6
    476a:	2b00      	cmp	r3, #0
    476c:	f77f ac41 	ble.w	3ff2 <cbvprintf+0x4ca>
			OUTC(' ');
    4770:	4651      	mov	r1, sl
    4772:	2020      	movs	r0, #32
    4774:	47c8      	blx	r9
    4776:	2800      	cmp	r0, #0
    4778:	dbd1      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    477a:	3601      	adds	r6, #1
			--width;
    477c:	e7f3      	b.n	4766 <CONFIG_USB_DEVICE_PID+0x755>
					OUTC(*cp++);
    477e:	4651      	mov	r1, sl
    4780:	47c8      	blx	r9
    4782:	2800      	cmp	r0, #0
    4784:	dad5      	bge.n	4732 <CONFIG_USB_DEVICE_PID+0x721>
    4786:	e7ca      	b.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
					OUTC(*cp++);
    4788:	4651      	mov	r1, sl
    478a:	47c8      	blx	r9
    478c:	2800      	cmp	r0, #0
    478e:	f6bf adc6 	bge.w	431e <CONFIG_USB_DEVICE_PID+0x30d>
    4792:	e7c4      	b.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
						OUTC('0');
    4794:	4651      	mov	r1, sl
    4796:	2030      	movs	r0, #48	; 0x30
    4798:	47c8      	blx	r9
    479a:	2800      	cmp	r0, #0
    479c:	f6bf add1 	bge.w	4342 <CONFIG_USB_DEVICE_PID+0x331>
    47a0:	e7bd      	b.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
						OUTC('0');
    47a2:	4651      	mov	r1, sl
    47a4:	2030      	movs	r0, #48	; 0x30
    47a6:	47c8      	blx	r9
    47a8:	3f01      	subs	r7, #1
    47aa:	e5d8      	b.n	435e <CONFIG_USB_DEVICE_PID+0x34d>
					OUTC(*cp++);
    47ac:	4651      	mov	r1, sl
    47ae:	47c8      	blx	r9
    47b0:	2800      	cmp	r0, #0
    47b2:	dbb4      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    47b4:	4647      	mov	r7, r8
    47b6:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    47ba:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    47be:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    47c2:	2a09      	cmp	r2, #9
    47c4:	d9f2      	bls.n	47ac <CONFIG_USB_DEVICE_PID+0x79b>
    47c6:	e7bb      	b.n	4740 <CONFIG_USB_DEVICE_PID+0x72f>
				OUTC('0');
    47c8:	4651      	mov	r1, sl
    47ca:	2030      	movs	r0, #48	; 0x30
    47cc:	47c8      	blx	r9
    47ce:	2800      	cmp	r0, #0
    47d0:	dba5      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    47d2:	3601      	adds	r6, #1
    47d4:	e7b8      	b.n	4748 <CONFIG_USB_DEVICE_PID+0x737>
			if (conv->altform_0c | conv->altform_0) {
    47d6:	06d8      	lsls	r0, r3, #27
    47d8:	d401      	bmi.n	47de <CONFIG_USB_DEVICE_PID+0x7cd>
    47da:	0719      	lsls	r1, r3, #28
    47dc:	d507      	bpl.n	47ee <CONFIG_USB_DEVICE_PID+0x7dd>
				OUTC('0');
    47de:	4651      	mov	r1, sl
    47e0:	2030      	movs	r0, #48	; 0x30
    47e2:	9203      	str	r2, [sp, #12]
    47e4:	47c8      	blx	r9
    47e6:	2800      	cmp	r0, #0
    47e8:	db99      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    47ea:	9a03      	ldr	r2, [sp, #12]
    47ec:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    47ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    47f2:	06db      	lsls	r3, r3, #27
    47f4:	d508      	bpl.n	4808 <CONFIG_USB_DEVICE_PID+0x7f7>
				OUTC(conv->specifier);
    47f6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    47fa:	9203      	str	r2, [sp, #12]
    47fc:	4651      	mov	r1, sl
    47fe:	47c8      	blx	r9
    4800:	2800      	cmp	r0, #0
    4802:	db8c      	blt.n	471e <CONFIG_USB_DEVICE_PID+0x70d>
    4804:	9a03      	ldr	r2, [sp, #12]
    4806:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    4808:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    480a:	4437      	add	r7, r6
    480c:	1bbb      	subs	r3, r7, r6
    480e:	2b00      	cmp	r3, #0
    4810:	dc01      	bgt.n	4816 <CONFIG_USB_DEVICE_PID+0x805>
			OUTS(bps, bpe);
    4812:	462b      	mov	r3, r5
    4814:	e79e      	b.n	4754 <CONFIG_USB_DEVICE_PID+0x743>
				OUTC('0');
    4816:	4651      	mov	r1, sl
    4818:	2030      	movs	r0, #48	; 0x30
    481a:	9203      	str	r2, [sp, #12]
    481c:	47c8      	blx	r9
    481e:	2800      	cmp	r0, #0
    4820:	f6ff af7d 	blt.w	471e <CONFIG_USB_DEVICE_PID+0x70d>
    4824:	9a03      	ldr	r2, [sp, #12]
    4826:	3601      	adds	r6, #1
    4828:	e7f0      	b.n	480c <CONFIG_USB_DEVICE_PID+0x7fb>
    482a:	bf00      	nop
    482c:	00026510 	.word	0x00026510

00004830 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    4830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    4832:	2407      	movs	r4, #7
    4834:	9402      	str	r4, [sp, #8]
    4836:	4c04      	ldr	r4, [pc, #16]	; (4848 <read_pnp_id+0x18>)
    4838:	9401      	str	r4, [sp, #4]
    483a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    483e:	9400      	str	r4, [sp, #0]
    4840:	f01e f85b 	bl	228fa <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    4844:	b004      	add	sp, #16
    4846:	bd10      	pop	{r4, pc}
    4848:	200009f9 	.word	0x200009f9

0000484c <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    484c:	4b0c      	ldr	r3, [pc, #48]	; (4880 <class_handler+0x34>)
{
    484e:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4850:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4852:	4e0c      	ldr	r6, [pc, #48]	; (4884 <class_handler+0x38>)
    4854:	4b0c      	ldr	r3, [pc, #48]	; (4888 <class_handler+0x3c>)
    4856:	42b3      	cmp	r3, r6
    4858:	d303      	bcc.n	4862 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    485a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    485e:	bcf0      	pop	{r4, r5, r6, r7}
    4860:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    4862:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4864:	42bd      	cmp	r5, r7
    4866:	d309      	bcc.n	487c <class_handler+0x30>
		if (iface->class_handler &&
    4868:	691c      	ldr	r4, [r3, #16]
    486a:	b13c      	cbz	r4, 487c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    486c:	f895 c002 	ldrb.w	ip, [r5, #2]
    4870:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    4872:	45ac      	cmp	ip, r5
    4874:	d102      	bne.n	487c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    4876:	4623      	mov	r3, r4
}
    4878:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    487a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    487c:	3324      	adds	r3, #36	; 0x24
    487e:	e7ea      	b.n	4856 <class_handler+0xa>
    4880:	20003f7c 	.word	0x20003f7c
    4884:	20000d60 	.word	0x20000d60
    4888:	20000d3c 	.word	0x20000d3c

0000488c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4890:	4c13      	ldr	r4, [pc, #76]	; (48e0 <custom_handler+0x54>)
    4892:	f8df 8050 	ldr.w	r8, [pc, #80]	; 48e4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4896:	f8df 9050 	ldr.w	r9, [pc, #80]	; 48e8 <custom_handler+0x5c>
{
    489a:	4605      	mov	r5, r0
    489c:	460e      	mov	r6, r1
    489e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48a0:	4544      	cmp	r4, r8
    48a2:	d303      	bcc.n	48ac <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    48a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    48a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    48ac:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    48ae:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    48b2:	429a      	cmp	r2, r3
    48b4:	d312      	bcc.n	48dc <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    48b6:	69a3      	ldr	r3, [r4, #24]
    48b8:	b183      	cbz	r3, 48dc <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    48ba:	7890      	ldrb	r0, [r2, #2]
    48bc:	7929      	ldrb	r1, [r5, #4]
    48be:	4288      	cmp	r0, r1
    48c0:	d105      	bne.n	48ce <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    48c2:	463a      	mov	r2, r7
    48c4:	4631      	mov	r1, r6
    48c6:	4628      	mov	r0, r5
}
    48c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    48cc:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    48ce:	7952      	ldrb	r2, [r2, #5]
    48d0:	2a01      	cmp	r2, #1
    48d2:	d103      	bne.n	48dc <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    48d4:	463a      	mov	r2, r7
    48d6:	4631      	mov	r1, r6
    48d8:	4628      	mov	r0, r5
    48da:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48dc:	3424      	adds	r4, #36	; 0x24
    48de:	e7df      	b.n	48a0 <custom_handler+0x14>
    48e0:	20000d3c 	.word	0x20000d3c
    48e4:	20000d60 	.word	0x20000d60
    48e8:	20003f7c 	.word	0x20003f7c

000048ec <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48f0:	4c0b      	ldr	r4, [pc, #44]	; (4920 <vendor_handler+0x34>)
    48f2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 4924 <vendor_handler+0x38>
{
    48f6:	4605      	mov	r5, r0
    48f8:	460e      	mov	r6, r1
    48fa:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    48fc:	4544      	cmp	r4, r8
    48fe:	d302      	bcc.n	4906 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    4900:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4904:	e009      	b.n	491a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    4906:	6963      	ldr	r3, [r4, #20]
    4908:	b90b      	cbnz	r3, 490e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    490a:	3424      	adds	r4, #36	; 0x24
    490c:	e7f6      	b.n	48fc <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    490e:	463a      	mov	r2, r7
    4910:	4631      	mov	r1, r6
    4912:	4628      	mov	r0, r5
    4914:	4798      	blx	r3
    4916:	2800      	cmp	r0, #0
    4918:	d1f7      	bne.n	490a <vendor_handler+0x1e>
}
    491a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    491e:	bf00      	nop
    4920:	20000d3c 	.word	0x20000d3c
    4924:	20000d60 	.word	0x20000d60

00004928 <set_endpoint>:
{
    4928:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    492a:	7883      	ldrb	r3, [r0, #2]
    492c:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    4930:	7903      	ldrb	r3, [r0, #4]
    4932:	7942      	ldrb	r2, [r0, #5]
    4934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4938:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    493c:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    493e:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4940:	f003 0303 	and.w	r3, r3, #3
    4944:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    4948:	f015 ff94 	bl	1a874 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    494c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4950:	d004      	beq.n	495c <set_endpoint+0x34>
	} else if (ret) {
    4952:	b118      	cbz	r0, 495c <set_endpoint+0x34>
		return false;
    4954:	2000      	movs	r0, #0
}
    4956:	b003      	add	sp, #12
    4958:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    495c:	f89d 0000 	ldrb.w	r0, [sp]
    4960:	f016 f80e 	bl	1a980 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    4964:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4968:	d001      	beq.n	496e <set_endpoint+0x46>
	} else if (ret) {
    496a:	2800      	cmp	r0, #0
    496c:	d1f2      	bne.n	4954 <set_endpoint+0x2c>
	usb_dev.configured = true;
    496e:	4b02      	ldr	r3, [pc, #8]	; (4978 <set_endpoint+0x50>)
    4970:	2001      	movs	r0, #1
    4972:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    4976:	e7ee      	b.n	4956 <set_endpoint+0x2e>
    4978:	20003f7c 	.word	0x20003f7c

0000497c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    497c:	4802      	ldr	r0, [pc, #8]	; (4988 <usb_reset_alt_setting+0xc>)
    497e:	2208      	movs	r2, #8
    4980:	2100      	movs	r1, #0
    4982:	f01b bedc 	b.w	2073e <memset>
    4986:	bf00      	nop
    4988:	20004037 	.word	0x20004037

0000498c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    498c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    498e:	4b0b      	ldr	r3, [pc, #44]	; (49bc <is_ep_valid.part.0+0x30>)
    4990:	4c0b      	ldr	r4, [pc, #44]	; (49c0 <is_ep_valid.part.0+0x34>)
    4992:	42a3      	cmp	r3, r4
    4994:	d301      	bcc.n	499a <is_ep_valid.part.0+0xe>
	return false;
    4996:	2000      	movs	r0, #0
}
    4998:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    499a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    499c:	7f1e      	ldrb	r6, [r3, #28]
    499e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    49a0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    49a2:	b2d5      	uxtb	r5, r2
    49a4:	42ae      	cmp	r6, r5
    49a6:	d801      	bhi.n	49ac <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    49a8:	3324      	adds	r3, #36	; 0x24
    49aa:	e7f2      	b.n	4992 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    49ac:	3201      	adds	r2, #1
    49ae:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    49b2:	4285      	cmp	r5, r0
    49b4:	d1f5      	bne.n	49a2 <is_ep_valid.part.0+0x16>
				return true;
    49b6:	2001      	movs	r0, #1
    49b8:	e7ee      	b.n	4998 <is_ep_valid.part.0+0xc>
    49ba:	bf00      	nop
    49bc:	20000d3c 	.word	0x20000d3c
    49c0:	20000d60 	.word	0x20000d60

000049c4 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    49c4:	4809      	ldr	r0, [pc, #36]	; (49ec <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    49c6:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    49c8:	7803      	ldrb	r3, [r0, #0]
    49ca:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    49ce:	330a      	adds	r3, #10
    49d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    49d4:	b13b      	cbz	r3, 49e6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    49d6:	f100 0208 	add.w	r2, r0, #8
    49da:	f100 0110 	add.w	r1, r0, #16
    49de:	4798      	blx	r3
    49e0:	43c0      	mvns	r0, r0
    49e2:	0fc0      	lsrs	r0, r0, #31
}
    49e4:	bd08      	pop	{r3, pc}
		return false;
    49e6:	4618      	mov	r0, r3
    49e8:	e7fc      	b.n	49e4 <usb_handle_request.constprop.0+0x20>
    49ea:	bf00      	nop
    49ec:	20003f7c 	.word	0x20003f7c

000049f0 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    49f0:	2804      	cmp	r0, #4
{
    49f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4a80 <forward_status_cb+0x90>
    49fa:	4604      	mov	r4, r0
    49fc:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    49fe:	d10e      	bne.n	4a1e <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    4a00:	f7ff ffbc 	bl	497c <usb_reset_alt_setting>
		if (usb_dev.configured) {
    4a04:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4a84 <forward_status_cb+0x94>
    4a08:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    4a0c:	b15b      	cbz	r3, 4a26 <forward_status_cb+0x36>
			usb_cancel_transfers();
    4a0e:	f000 fdb5 	bl	557c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    4a12:	2c04      	cmp	r4, #4
    4a14:	d001      	beq.n	4a1a <forward_status_cb+0x2a>
    4a16:	2c01      	cmp	r4, #1
    4a18:	d105      	bne.n	4a26 <forward_status_cb+0x36>
    4a1a:	4d1b      	ldr	r5, [pc, #108]	; (4a88 <forward_status_cb+0x98>)
    4a1c:	e016      	b.n	4a4c <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    4a1e:	2805      	cmp	r0, #5
    4a20:	d0f0      	beq.n	4a04 <forward_status_cb+0x14>
    4a22:	2801      	cmp	r0, #1
    4a24:	d0ee      	beq.n	4a04 <forward_status_cb+0x14>
    4a26:	4d18      	ldr	r5, [pc, #96]	; (4a88 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4a28:	4545      	cmp	r5, r8
    4a2a:	d31e      	bcc.n	4a6a <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    4a2c:	4b15      	ldr	r3, [pc, #84]	; (4a84 <forward_status_cb+0x94>)
    4a2e:	6a1b      	ldr	r3, [r3, #32]
    4a30:	b31b      	cbz	r3, 4a7a <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    4a32:	4631      	mov	r1, r6
    4a34:	4620      	mov	r0, r4
}
    4a36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    4a3a:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    4a3c:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4a40:	2700      	movs	r7, #0
    4a42:	7f2a      	ldrb	r2, [r5, #28]
    4a44:	b2fb      	uxtb	r3, r7
    4a46:	429a      	cmp	r2, r3
    4a48:	d803      	bhi.n	4a52 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4a4a:	3524      	adds	r5, #36	; 0x24
    4a4c:	4545      	cmp	r5, r8
    4a4e:	d3f5      	bcc.n	4a3c <forward_status_cb+0x4c>
    4a50:	e007      	b.n	4a62 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4a52:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    4a56:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    4a58:	7918      	ldrb	r0, [r3, #4]
    4a5a:	f015 ffbb 	bl	1a9d4 <usb_dc_ep_disable>
			if (ret < 0) {
    4a5e:	2800      	cmp	r0, #0
    4a60:	daef      	bge.n	4a42 <forward_status_cb+0x52>
				usb_dev.configured = false;
    4a62:	2300      	movs	r3, #0
    4a64:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    4a68:	e7dd      	b.n	4a26 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    4a6a:	68eb      	ldr	r3, [r5, #12]
    4a6c:	b11b      	cbz	r3, 4a76 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    4a6e:	4632      	mov	r2, r6
    4a70:	4621      	mov	r1, r4
    4a72:	4628      	mov	r0, r5
    4a74:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4a76:	3524      	adds	r5, #36	; 0x24
    4a78:	e7d6      	b.n	4a28 <forward_status_cb+0x38>
}
    4a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a7e:	bf00      	nop
    4a80:	20000d60 	.word	0x20000d60
    4a84:	20003f7c 	.word	0x20003f7c
    4a88:	20000d3c 	.word	0x20000d3c

00004a8c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    4a8e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    4a90:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    4a92:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    4a94:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    4a98:	d007      	beq.n	4aaa <usb_halt_endpoint_req.isra.0+0x1e>
    4a9a:	4620      	mov	r0, r4
    4a9c:	f7ff ff76 	bl	498c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    4aa0:	b188      	cbz	r0, 4ac6 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    4aa2:	4b0f      	ldr	r3, [pc, #60]	; (4ae0 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4aa4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    4aa8:	b168      	cbz	r0, 4ac6 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    4aaa:	4e0d      	ldr	r6, [pc, #52]	; (4ae0 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    4aac:	4620      	mov	r0, r4
		if (halt) {
    4aae:	b165      	cbz	r5, 4aca <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    4ab0:	f015 ff02 	bl	1a8b8 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    4ab4:	69f3      	ldr	r3, [r6, #28]
    4ab6:	b90b      	cbnz	r3, 4abc <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    4ab8:	2001      	movs	r0, #1
    4aba:	e004      	b.n	4ac6 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    4abc:	2008      	movs	r0, #8
    4abe:	f10d 0107 	add.w	r1, sp, #7
    4ac2:	4798      	blx	r3
		return true;
    4ac4:	4628      	mov	r0, r5
}
    4ac6:	b002      	add	sp, #8
    4ac8:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    4aca:	f015 ff1d 	bl	1a908 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    4ace:	69f3      	ldr	r3, [r6, #28]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d0f1      	beq.n	4ab8 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    4ad4:	f10d 0107 	add.w	r1, sp, #7
    4ad8:	2009      	movs	r0, #9
    4ada:	4798      	blx	r3
    4adc:	e7ec      	b.n	4ab8 <usb_halt_endpoint_req.isra.0+0x2c>
    4ade:	bf00      	nop
    4ae0:	20003f7c 	.word	0x20003f7c

00004ae4 <usb_handle_standard_request>:
{
    4ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    4ae8:	4ea8      	ldr	r6, [pc, #672]	; (4d8c <usb_handle_standard_request+0x2a8>)
    4aea:	69b3      	ldr	r3, [r6, #24]
{
    4aec:	4605      	mov	r5, r0
    4aee:	460f      	mov	r7, r1
    4af0:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    4af2:	b963      	cbnz	r3, 4b0e <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
    4af4:	7828      	ldrb	r0, [r5, #0]
    4af6:	f000 001f 	and.w	r0, r0, #31
    4afa:	2801      	cmp	r0, #1
    4afc:	f000 80a6 	beq.w	4c4c <usb_handle_standard_request+0x168>
    4b00:	2802      	cmp	r0, #2
    4b02:	f000 810e 	beq.w	4d22 <usb_handle_standard_request+0x23e>
    4b06:	b138      	cbz	r0, 4b18 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
    4b08:	f06f 0015 	mvn.w	r0, #21
    4b0c:	e095      	b.n	4c3a <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    4b0e:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    4b10:	2800      	cmp	r0, #0
    4b12:	d1ef      	bne.n	4af4 <usb_handle_standard_request+0x10>
	int rc = 0;
    4b14:	2000      	movs	r0, #0
    4b16:	e090      	b.n	4c3a <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    4b18:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    4b1c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4b1e:	2a00      	cmp	r2, #0
    4b20:	da31      	bge.n	4b86 <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
    4b22:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    4b24:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    4b28:	d010      	beq.n	4b4c <usb_handle_standard_request+0x68>
    4b2a:	2b08      	cmp	r3, #8
    4b2c:	d025      	beq.n	4b7a <usb_handle_standard_request+0x96>
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d1ea      	bne.n	4b08 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4b32:	2101      	movs	r1, #1
	data[1] = 0U;
    4b34:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    4b36:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    4b38:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    4b3c:	2900      	cmp	r1, #0
    4b3e:	bf18      	it	ne
    4b40:	2302      	movne	r3, #2
    4b42:	f043 0301 	orr.w	r3, r3, #1
    4b46:	7013      	strb	r3, [r2, #0]
		*len = 2;
    4b48:	2302      	movs	r3, #2
    4b4a:	e01a      	b.n	4b82 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
    4b4c:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    4b4e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    4b50:	1f11      	subs	r1, r2, #4
    4b52:	2901      	cmp	r1, #1
    4b54:	d9d8      	bls.n	4b08 <usb_handle_standard_request+0x24>
    4b56:	2a07      	cmp	r2, #7
    4b58:	d8d6      	bhi.n	4b08 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    4b5a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    4b5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    4b5e:	781c      	ldrb	r4, [r3, #0]
    4b60:	2c00      	cmp	r4, #0
    4b62:	d0d1      	beq.n	4b08 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
    4b64:	785d      	ldrb	r5, [r3, #1]
    4b66:	4295      	cmp	r5, r2
    4b68:	d103      	bne.n	4b72 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
    4b6a:	4281      	cmp	r1, r0
    4b6c:	f000 8112 	beq.w	4d94 <usb_handle_standard_request+0x2b0>
			cur_index++;
    4b70:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    4b72:	4423      	add	r3, r4
    4b74:	e7f3      	b.n	4b5e <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
    4b76:	781b      	ldrb	r3, [r3, #0]
    4b78:	e112      	b.n	4da0 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
    4b7a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4b7e:	7013      	strb	r3, [r2, #0]
			*len = 1;
    4b80:	2301      	movs	r3, #1
		*len = 2;
    4b82:	603b      	str	r3, [r7, #0]
		return true;
    4b84:	e059      	b.n	4c3a <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    4b86:	3b01      	subs	r3, #1
    4b88:	2b08      	cmp	r3, #8
    4b8a:	d8bd      	bhi.n	4b08 <usb_handle_standard_request+0x24>
    4b8c:	a201      	add	r2, pc, #4	; (adr r2, 4b94 <usb_handle_standard_request+0xb0>)
    4b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b92:	bf00      	nop
    4b94:	00004c2d 	.word	0x00004c2d
    4b98:	00004b09 	.word	0x00004b09
    4b9c:	00004c3f 	.word	0x00004c3f
    4ba0:	00004b09 	.word	0x00004b09
    4ba4:	00004bb9 	.word	0x00004bb9
    4ba8:	00004b09 	.word	0x00004b09
    4bac:	00004b09 	.word	0x00004b09
    4bb0:	00004b09 	.word	0x00004b09
    4bb4:	00004bc5 	.word	0x00004bc5
			return !usb_dc_set_address(setup->wValue);
    4bb8:	78a8      	ldrb	r0, [r5, #2]
    4bba:	f015 fe49 	bl	1a850 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d0a8      	beq.n	4b14 <usb_handle_standard_request+0x30>
    4bc2:	e7a1      	b.n	4b08 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
    4bc4:	886c      	ldrh	r4, [r5, #2]
    4bc6:	b144      	cbz	r4, 4bda <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    4bc8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4bcc:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    4bce:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    4bd0:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    4bd2:	783c      	ldrb	r4, [r7, #0]
    4bd4:	b96c      	cbnz	r4, 4bf2 <usb_handle_standard_request+0x10e>
	if (found) {
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d096      	beq.n	4b08 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
    4bda:	f7ff fecf 	bl	497c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    4bde:	886b      	ldrh	r3, [r5, #2]
    4be0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    4be4:	69f3      	ldr	r3, [r6, #28]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d094      	beq.n	4b14 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    4bea:	4969      	ldr	r1, [pc, #420]	; (4d90 <usb_handle_standard_request+0x2ac>)
    4bec:	2003      	movs	r0, #3
    4bee:	4798      	blx	r3
    4bf0:	e790      	b.n	4b14 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
    4bf2:	787b      	ldrb	r3, [r7, #1]
    4bf4:	2b04      	cmp	r3, #4
    4bf6:	d00c      	beq.n	4c12 <usb_handle_standard_request+0x12e>
    4bf8:	2b05      	cmp	r3, #5
    4bfa:	d00d      	beq.n	4c18 <usb_handle_standard_request+0x134>
    4bfc:	2b02      	cmp	r3, #2
    4bfe:	d105      	bne.n	4c0c <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    4c00:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    4c04:	886a      	ldrh	r2, [r5, #2]
				found = true;
    4c06:	4542      	cmp	r2, r8
    4c08:	bf08      	it	eq
    4c0a:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    4c0c:	783b      	ldrb	r3, [r7, #0]
    4c0e:	441f      	add	r7, r3
    4c10:	e7df      	b.n	4bd2 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    4c12:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    4c16:	e7f9      	b.n	4c0c <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    4c18:	886b      	ldrh	r3, [r5, #2]
    4c1a:	4543      	cmp	r3, r8
    4c1c:	d1f6      	bne.n	4c0c <usb_handle_standard_request+0x128>
    4c1e:	f1b9 0f00 	cmp.w	r9, #0
    4c22:	d1f3      	bne.n	4c0c <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    4c24:	4638      	mov	r0, r7
    4c26:	f7ff fe7f 	bl	4928 <set_endpoint>
			break;
    4c2a:	e7ef      	b.n	4c0c <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    4c2c:	886b      	ldrh	r3, [r5, #2]
    4c2e:	2b01      	cmp	r3, #1
    4c30:	f47f af6a 	bne.w	4b08 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
    4c34:	2000      	movs	r0, #0
    4c36:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    4c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    4c3e:	886b      	ldrh	r3, [r5, #2]
    4c40:	2b01      	cmp	r3, #1
    4c42:	f47f af61 	bne.w	4b08 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
    4c46:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    4c4a:	e763      	b.n	4b14 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
    4c4c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4c50:	2b00      	cmp	r3, #0
    4c52:	f43f af59 	beq.w	4b08 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4c56:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    4c58:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    4c5c:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4c5e:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    4c60:	781a      	ldrb	r2, [r3, #0]
    4c62:	2a00      	cmp	r2, #0
    4c64:	f43f af50 	beq.w	4b08 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    4c68:	7859      	ldrb	r1, [r3, #1]
    4c6a:	2902      	cmp	r1, #2
    4c6c:	d104      	bne.n	4c78 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
    4c6e:	f893 e004 	ldrb.w	lr, [r3, #4]
    4c72:	4586      	cmp	lr, r0
    4c74:	f200 8096 	bhi.w	4da4 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
    4c78:	4413      	add	r3, r2
    4c7a:	e7f1      	b.n	4c60 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
    4c7c:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    4c7e:	7050      	strb	r0, [r2, #1]
			*len = 2;
    4c80:	6039      	str	r1, [r7, #0]
			return true;
    4c82:	e7da      	b.n	4c3a <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    4c84:	440c      	add	r4, r1
    4c86:	e09b      	b.n	4dc0 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    4c88:	280b      	cmp	r0, #11
    4c8a:	f47f af3d 	bne.w	4b08 <usb_handle_standard_request+0x24>
	bool ret = false;
    4c8e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    4c90:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    4c94:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    4c96:	46b9      	mov	r9, r7
    4c98:	e006      	b.n	4ca8 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
    4c9a:	7863      	ldrb	r3, [r4, #1]
    4c9c:	2b04      	cmp	r3, #4
    4c9e:	d00f      	beq.n	4cc0 <usb_handle_standard_request+0x1dc>
    4ca0:	2b05      	cmp	r3, #5
    4ca2:	d022      	beq.n	4cea <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
    4ca4:	7823      	ldrb	r3, [r4, #0]
    4ca6:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    4ca8:	7823      	ldrb	r3, [r4, #0]
    4caa:	2b00      	cmp	r3, #0
    4cac:	d1f5      	bne.n	4c9a <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
    4cae:	69f3      	ldr	r3, [r6, #28]
    4cb0:	b113      	cbz	r3, 4cb8 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    4cb2:	4649      	mov	r1, r9
    4cb4:	2007      	movs	r0, #7
    4cb6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    4cb8:	2f00      	cmp	r7, #0
    4cba:	f47f af2b 	bne.w	4b14 <usb_handle_standard_request+0x30>
    4cbe:	e723      	b.n	4b08 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    4cc0:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
    4cc4:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    4cc6:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
    4cca:	4592      	cmp	sl, r2
    4ccc:	4653      	mov	r3, sl
    4cce:	d1e9      	bne.n	4ca4 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
    4cd0:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
    4cd2:	4588      	cmp	r8, r1
    4cd4:	fa1f f288 	uxth.w	r2, r8
    4cd8:	d1e4      	bne.n	4ca4 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4cda:	2b07      	cmp	r3, #7
    4cdc:	d81e      	bhi.n	4d1c <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
    4cde:	4433      	add	r3, r6
		return true;
    4ce0:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
    4ce2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    4ce6:	2701      	movs	r7, #1
    4ce8:	e7dc      	b.n	4ca4 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
    4cea:	88ab      	ldrh	r3, [r5, #4]
    4cec:	4553      	cmp	r3, sl
    4cee:	d1d9      	bne.n	4ca4 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
    4cf0:	78ab      	ldrb	r3, [r5, #2]
    4cf2:	4543      	cmp	r3, r8
    4cf4:	d00d      	beq.n	4d12 <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
    4cf6:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    4cf8:	4638      	mov	r0, r7
    4cfa:	f000 fc21 	bl	5540 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    4cfe:	4638      	mov	r0, r7
    4d00:	f015 fe68 	bl	1a9d4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    4d04:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4d08:	d0ed      	beq.n	4ce6 <usb_handle_standard_request+0x202>
	} else if (ret) {
    4d0a:	fab0 f780 	clz	r7, r0
    4d0e:	097f      	lsrs	r7, r7, #5
    4d10:	e7c8      	b.n	4ca4 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
    4d12:	4620      	mov	r0, r4
    4d14:	f7ff fe08 	bl	4928 <set_endpoint>
    4d18:	4607      	mov	r7, r0
    4d1a:	e7c3      	b.n	4ca4 <usb_handle_standard_request+0x1c0>
    4d1c:	46a1      	mov	r9, r4
	return false;
    4d1e:	2700      	movs	r7, #0
    4d20:	e7c0      	b.n	4ca4 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
    4d22:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    4d26:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4d28:	2a00      	cmp	r2, #0
    4d2a:	da19      	bge.n	4d60 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	f47f aeeb 	bne.w	4b08 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
    4d32:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    4d34:	0663      	lsls	r3, r4, #25
    4d36:	d00a      	beq.n	4d4e <usb_handle_standard_request+0x26a>
    4d38:	4620      	mov	r0, r4
    4d3a:	f7ff fe27 	bl	498c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    4d3e:	2800      	cmp	r0, #0
    4d40:	f43f aee2 	beq.w	4b08 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4d44:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4d48:	2b00      	cmp	r3, #0
    4d4a:	f43f aedd 	beq.w	4b08 <usb_handle_standard_request+0x24>
    4d4e:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    4d52:	4620      	mov	r0, r4
    4d54:	4629      	mov	r1, r5
    4d56:	f015 fdf7 	bl	1a948 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    4d5a:	2000      	movs	r0, #0
    4d5c:	7068      	strb	r0, [r5, #1]
    4d5e:	e6f3      	b.n	4b48 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
    4d60:	2b01      	cmp	r3, #1
    4d62:	d008      	beq.n	4d76 <usb_handle_standard_request+0x292>
    4d64:	2b03      	cmp	r3, #3
    4d66:	f47f aecf 	bne.w	4b08 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    4d6a:	886b      	ldrh	r3, [r5, #2]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	f47f aecb 	bne.w	4b08 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    4d72:	2101      	movs	r1, #1
    4d74:	e003      	b.n	4d7e <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    4d76:	8869      	ldrh	r1, [r5, #2]
    4d78:	2900      	cmp	r1, #0
    4d7a:	f47f aec5 	bne.w	4b08 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    4d7e:	88a8      	ldrh	r0, [r5, #4]
    4d80:	f7ff fe84 	bl	4a8c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    4d84:	2800      	cmp	r0, #0
    4d86:	f47f aec5 	bne.w	4b14 <usb_handle_standard_request+0x30>
    4d8a:	e6bd      	b.n	4b08 <usb_handle_standard_request+0x24>
    4d8c:	20003f7c 	.word	0x20003f7c
    4d90:	20004036 	.word	0x20004036
		if (type == USB_DESC_CONFIGURATION) {
    4d94:	2a02      	cmp	r2, #2
		*data = p;
    4d96:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    4d9a:	f47f aeec 	bne.w	4b76 <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
    4d9e:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    4da0:	603b      	str	r3, [r7, #0]
    4da2:	e6b7      	b.n	4b14 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
    4da4:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    4da8:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4daa:	2b00      	cmp	r3, #0
    4dac:	f6bf af6c 	bge.w	4c88 <usb_handle_standard_request+0x1a4>
    4db0:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    4db4:	2800      	cmp	r0, #0
    4db6:	f43f af61 	beq.w	4c7c <usb_handle_standard_request+0x198>
    4dba:	280a      	cmp	r0, #10
    4dbc:	f47f aea4 	bne.w	4b08 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
    4dc0:	7821      	ldrb	r1, [r4, #0]
    4dc2:	2900      	cmp	r1, #0
    4dc4:	f43f aea0 	beq.w	4b08 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    4dc8:	7863      	ldrb	r3, [r4, #1]
    4dca:	2b04      	cmp	r3, #4
    4dcc:	f47f af5a 	bne.w	4c84 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    4dd0:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    4dd2:	459c      	cmp	ip, r3
    4dd4:	f47f af56 	bne.w	4c84 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4dd8:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    4dda:	bf96      	itet	ls
    4ddc:	199b      	addls	r3, r3, r6
	return 0;
    4dde:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    4de0:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    4de4:	7013      	strb	r3, [r2, #0]
				*len = 1;
    4de6:	2301      	movs	r3, #1
    4de8:	e7da      	b.n	4da0 <usb_handle_standard_request+0x2bc>
    4dea:	bf00      	nop

00004dec <usb_data_to_host>:
{
    4dec:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    4dee:	4c13      	ldr	r4, [pc, #76]	; (4e3c <usb_data_to_host+0x50>)
    4df0:	7d23      	ldrb	r3, [r4, #20]
    4df2:	b9cb      	cbnz	r3, 4e28 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    4df4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4df6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    4df8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4dfa:	ab01      	add	r3, sp, #4
    4dfc:	2080      	movs	r0, #128	; 0x80
    4dfe:	f01b f8fc 	bl	1fffa <usb_write>
		usb_dev.data_buf += chunk;
    4e02:	9a01      	ldr	r2, [sp, #4]
    4e04:	68a3      	ldr	r3, [r4, #8]
    4e06:	4413      	add	r3, r2
    4e08:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4e0a:	68e3      	ldr	r3, [r4, #12]
    4e0c:	1a9b      	subs	r3, r3, r2
    4e0e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    4e10:	b943      	cbnz	r3, 4e24 <usb_data_to_host+0x38>
    4e12:	b13a      	cbz	r2, 4e24 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4e14:	6923      	ldr	r3, [r4, #16]
    4e16:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    4e18:	429a      	cmp	r2, r3
    4e1a:	dd03      	ble.n	4e24 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    4e1c:	069b      	lsls	r3, r3, #26
    4e1e:	d101      	bne.n	4e24 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    4e20:	2301      	movs	r3, #1
    4e22:	7523      	strb	r3, [r4, #20]
}
    4e24:	b002      	add	sp, #8
    4e26:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    4e28:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4e2a:	461a      	mov	r2, r3
    4e2c:	4619      	mov	r1, r3
    4e2e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    4e30:	7523      	strb	r3, [r4, #20]
}
    4e32:	b002      	add	sp, #8
    4e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4e38:	f015 bdf2 	b.w	1aa20 <usb_dc_ep_write>
    4e3c:	20003f7c 	.word	0x20003f7c

00004e40 <usb_handle_control_transfer>:
{
    4e40:	b530      	push	{r4, r5, lr}
    4e42:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    4e44:	2300      	movs	r3, #0
{
    4e46:	4602      	mov	r2, r0
    4e48:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    4e4a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    4e4c:	2800      	cmp	r0, #0
    4e4e:	d15f      	bne.n	4f10 <usb_handle_control_transfer+0xd0>
    4e50:	2900      	cmp	r1, #0
    4e52:	d13c      	bne.n	4ece <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    4e54:	2208      	movs	r2, #8
    4e56:	460b      	mov	r3, r1
    4e58:	eb0d 0102 	add.w	r1, sp, r2
    4e5c:	f01e fa1d 	bl	2329a <usb_dc_ep_read>
    4e60:	2800      	cmp	r0, #0
    4e62:	da04      	bge.n	4e6e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4e64:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4e66:	f015 fd27 	bl	1a8b8 <usb_dc_ep_set_stall>
}
    4e6a:	b005      	add	sp, #20
    4e6c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    4e6e:	4c2d      	ldr	r4, [pc, #180]	; (4f24 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
    4e70:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    4e74:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    4e78:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    4e7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4e7e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    4e80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    4e84:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    4e86:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    4e88:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    4e8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4e90:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    4e92:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    4e94:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    4e98:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    4e9a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    4e9c:	d40a      	bmi.n	4eb4 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    4e9e:	2b80      	cmp	r3, #128	; 0x80
    4ea0:	d904      	bls.n	4eac <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4ea2:	2080      	movs	r0, #128	; 0x80
    4ea4:	f015 fd08 	bl	1a8b8 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4ea8:	2000      	movs	r0, #0
    4eaa:	e7dc      	b.n	4e66 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    4eac:	b113      	cbz	r3, 4eb4 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
    4eae:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    4eb2:	e7da      	b.n	4e6a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    4eb4:	f7ff fd86 	bl	49c4 <usb_handle_request.constprop.0>
    4eb8:	2800      	cmp	r0, #0
    4eba:	d0d3      	beq.n	4e64 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    4ebc:	88e2      	ldrh	r2, [r4, #6]
    4ebe:	6923      	ldr	r3, [r4, #16]
    4ec0:	429a      	cmp	r2, r3
    4ec2:	bfd4      	ite	le
    4ec4:	60e2      	strle	r2, [r4, #12]
    4ec6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    4ec8:	f7ff ff90 	bl	4dec <usb_data_to_host>
    4ecc:	e7cd      	b.n	4e6a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    4ece:	4c15      	ldr	r4, [pc, #84]	; (4f24 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4ed0:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    4ed4:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4ed6:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    4ed8:	dc04      	bgt.n	4ee4 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4eda:	f01e f9de 	bl	2329a <usb_dc_ep_read>
    4ede:	2800      	cmp	r0, #0
    4ee0:	dac3      	bge.n	4e6a <usb_handle_control_transfer+0x2a>
    4ee2:	e7bf      	b.n	4e64 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4ee4:	462a      	mov	r2, r5
    4ee6:	f01e f9d8 	bl	2329a <usb_dc_ep_read>
    4eea:	2800      	cmp	r0, #0
    4eec:	dbd9      	blt.n	4ea2 <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
    4eee:	9901      	ldr	r1, [sp, #4]
    4ef0:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4ef2:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    4ef4:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    4ef6:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    4ef8:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4efa:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    4efc:	2b00      	cmp	r3, #0
    4efe:	d1b4      	bne.n	4e6a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    4f00:	f104 0338 	add.w	r3, r4, #56	; 0x38
    4f04:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4f06:	f7ff fd5d 	bl	49c4 <usb_handle_request.constprop.0>
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d1dc      	bne.n	4ec8 <usb_handle_control_transfer+0x88>
    4f0e:	e7a9      	b.n	4e64 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    4f10:	2880      	cmp	r0, #128	; 0x80
    4f12:	d1aa      	bne.n	4e6a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    4f14:	4b03      	ldr	r3, [pc, #12]	; (4f24 <usb_handle_control_transfer+0xe4>)
    4f16:	68da      	ldr	r2, [r3, #12]
    4f18:	2a00      	cmp	r2, #0
    4f1a:	d1d5      	bne.n	4ec8 <usb_handle_control_transfer+0x88>
    4f1c:	7d1b      	ldrb	r3, [r3, #20]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d1d2      	bne.n	4ec8 <usb_handle_control_transfer+0x88>
    4f22:	e7a2      	b.n	4e6a <usb_handle_control_transfer+0x2a>
    4f24:	20003f7c 	.word	0x20003f7c

00004f28 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    4f28:	4b05      	ldr	r3, [pc, #20]	; (4f40 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    4f2a:	4a06      	ldr	r2, [pc, #24]	; (4f44 <usb_set_config+0x1c>)
    4f2c:	629a      	str	r2, [r3, #40]	; 0x28
    4f2e:	4a06      	ldr	r2, [pc, #24]	; (4f48 <usb_set_config+0x20>)
    4f30:	62da      	str	r2, [r3, #44]	; 0x2c
    4f32:	4a06      	ldr	r2, [pc, #24]	; (4f4c <usb_set_config+0x24>)
    4f34:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    4f36:	4a06      	ldr	r2, [pc, #24]	; (4f50 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    4f38:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    4f3a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    4f3c:	2000      	movs	r0, #0
    4f3e:	4770      	bx	lr
    4f40:	20003f7c 	.word	0x20003f7c
    4f44:	00004ae5 	.word	0x00004ae5
    4f48:	0000484d 	.word	0x0000484d
    4f4c:	000048ed 	.word	0x000048ed
    4f50:	0000488d 	.word	0x0000488d

00004f54 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    4f54:	4b08      	ldr	r3, [pc, #32]	; (4f78 <usb_device_init+0x24>)
{
    4f56:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    4f58:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    4f5c:	b934      	cbnz	r4, 4f6c <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    4f5e:	f000 f9a3 	bl	52a8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    4f62:	b130      	cbz	r0, 4f72 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    4f64:	f7ff ffe0 	bl	4f28 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    4f68:	4620      	mov	r0, r4
}
    4f6a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    4f6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4f70:	e7fb      	b.n	4f6a <usb_device_init+0x16>
		return -1;
    4f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f76:	e7f8      	b.n	4f6a <usb_device_init+0x16>
    4f78:	20003f7c 	.word	0x20003f7c

00004f7c <usb_enable>:
{
    4f7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f80:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    4f82:	4d35      	ldr	r5, [pc, #212]	; (5058 <usb_enable+0xdc>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    4f84:	4835      	ldr	r0, [pc, #212]	; (505c <usb_enable+0xe0>)
    4f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f8e:	f019 f9d7 	bl	1e340 <z_impl_k_mutex_lock>
    4f92:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    4f96:	2e00      	cmp	r6, #0
    4f98:	d15b      	bne.n	5052 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    4f9a:	4831      	ldr	r0, [pc, #196]	; (5060 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    4f9c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    4f9e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    4fa0:	f015 fe54 	bl	1ac4c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    4fa4:	f015 fc16 	bl	1a7d4 <usb_dc_attach>
	if (ret < 0) {
    4fa8:	1e04      	subs	r4, r0, #0
    4faa:	db36      	blt.n	501a <usb_enable+0x9e>
	ret = usb_transfer_init();
    4fac:	f000 fb0e 	bl	55cc <usb_transfer_init>
	if (ret < 0) {
    4fb0:	1e04      	subs	r4, r0, #0
    4fb2:	db32      	blt.n	501a <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4fb4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    4fb6:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4fb8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    4fbc:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    4fc0:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4fc4:	f015 fc56 	bl	1a874 <usb_dc_ep_configure>
	if (ret < 0) {
    4fc8:	1e04      	subs	r4, r0, #0
    4fca:	db26      	blt.n	501a <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4fcc:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    4fce:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4fd0:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4fd4:	f015 fc4e 	bl	1a874 <usb_dc_ep_configure>
	if (ret < 0) {
    4fd8:	1e04      	subs	r4, r0, #0
    4fda:	db1e      	blt.n	501a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    4fdc:	4921      	ldr	r1, [pc, #132]	; (5064 <usb_enable+0xe8>)
    4fde:	4630      	mov	r0, r6
    4fe0:	f015 fe20 	bl	1ac24 <usb_dc_ep_set_callback>
	if (ret < 0) {
    4fe4:	1e04      	subs	r4, r0, #0
    4fe6:	db18      	blt.n	501a <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    4fe8:	491e      	ldr	r1, [pc, #120]	; (5064 <usb_enable+0xe8>)
    4fea:	4638      	mov	r0, r7
    4fec:	f015 fe1a 	bl	1ac24 <usb_dc_ep_set_callback>
	if (ret < 0) {
    4ff0:	1e04      	subs	r4, r0, #0
    4ff2:	db12      	blt.n	501a <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4ff4:	4c1c      	ldr	r4, [pc, #112]	; (5068 <usb_enable+0xec>)
    4ff6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 506c <usb_enable+0xf0>
    4ffa:	4544      	cmp	r4, r8
    4ffc:	d314      	bcc.n	5028 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    4ffe:	2000      	movs	r0, #0
    5000:	f015 fcbe 	bl	1a980 <usb_dc_ep_enable>
	if (ret < 0) {
    5004:	1e04      	subs	r4, r0, #0
    5006:	db08      	blt.n	501a <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    5008:	2080      	movs	r0, #128	; 0x80
    500a:	f015 fcb9 	bl	1a980 <usb_dc_ep_enable>
	if (ret < 0) {
    500e:	1e04      	subs	r4, r0, #0
    5010:	db03      	blt.n	501a <usb_enable+0x9e>
	usb_dev.enabled = true;
    5012:	2301      	movs	r3, #1
    5014:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    5018:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    501a:	4810      	ldr	r0, [pc, #64]	; (505c <usb_enable+0xe0>)
    501c:	f019 fa08 	bl	1e430 <z_impl_k_mutex_unlock>
}
    5020:	4620      	mov	r0, r4
    5022:	b002      	add	sp, #8
    5024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    5028:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    502a:	2600      	movs	r6, #0
    502c:	7f22      	ldrb	r2, [r4, #28]
    502e:	b2f3      	uxtb	r3, r6
    5030:	429a      	cmp	r2, r3
    5032:	d801      	bhi.n	5038 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    5034:	3424      	adds	r4, #36	; 0x24
    5036:	e7e0      	b.n	4ffa <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    5038:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    503c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    5040:	7910      	ldrb	r0, [r2, #4]
    5042:	f015 fdef 	bl	1ac24 <usb_dc_ep_set_callback>
    5046:	3601      	adds	r6, #1
    5048:	2800      	cmp	r0, #0
    504a:	d0ef      	beq.n	502c <usb_enable+0xb0>
    504c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    5050:	e7e3      	b.n	501a <usb_enable+0x9e>
		ret = -EALREADY;
    5052:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5056:	e7e0      	b.n	501a <usb_enable+0x9e>
    5058:	20003f7c 	.word	0x20003f7c
    505c:	20000af8 	.word	0x20000af8
    5060:	000049f1 	.word	0x000049f1
    5064:	00004e41 	.word	0x00004e41
    5068:	20000d3c 	.word	0x20000d3c
    506c:	20000d60 	.word	0x20000d60

00005070 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    5070:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    5072:	4b1f      	ldr	r3, [pc, #124]	; (50f0 <usb_update_sn_string_descriptor+0x80>)
{
    5074:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    5076:	aa05      	add	r2, sp, #20
    5078:	f103 0510 	add.w	r5, r3, #16
    507c:	6818      	ldr	r0, [r3, #0]
    507e:	6859      	ldr	r1, [r3, #4]
    5080:	4614      	mov	r4, r2
    5082:	c403      	stmia	r4!, {r0, r1}
    5084:	3308      	adds	r3, #8
    5086:	42ab      	cmp	r3, r5
    5088:	4622      	mov	r2, r4
    508a:	d1f7      	bne.n	507c <usb_update_sn_string_descriptor+0xc>
    508c:	781b      	ldrb	r3, [r3, #0]
    508e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    5090:	2210      	movs	r2, #16
    5092:	2100      	movs	r1, #0
    5094:	a801      	add	r0, sp, #4
    5096:	f01b fb52 	bl	2073e <memset>
	memset(sn, 0, sizeof(sn));
    509a:	2212      	movs	r2, #18
    509c:	2100      	movs	r1, #0
    509e:	4815      	ldr	r0, [pc, #84]	; (50f4 <usb_update_sn_string_descriptor+0x84>)
    50a0:	f01b fb4d 	bl	2073e <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    50a4:	2110      	movs	r1, #16
    50a6:	a801      	add	r0, sp, #4
    50a8:	f01e fa02 	bl	234b0 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    50ac:	2800      	cmp	r0, #0
    50ae:	dd1b      	ble.n	50e8 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    50b0:	2808      	cmp	r0, #8
    50b2:	bfb8      	it	lt
    50b4:	2008      	movlt	r0, #8
    50b6:	3808      	subs	r0, #8
    50b8:	ab01      	add	r3, sp, #4
    50ba:	4a0e      	ldr	r2, [pc, #56]	; (50f4 <usb_update_sn_string_descriptor+0x84>)
    50bc:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    50be:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    50c0:	f810 3b01 	ldrb.w	r3, [r0], #1
    50c4:	ac0a      	add	r4, sp, #40	; 0x28
    50c6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    50ca:	f003 030f 	and.w	r3, r3, #15
    50ce:	3328      	adds	r3, #40	; 0x28
    50d0:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    50d2:	3101      	adds	r1, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    50d4:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    50d8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    50dc:	7014      	strb	r4, [r2, #0]
		for (int i = 0; i < usblen; i++) {
    50de:	2908      	cmp	r1, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    50e0:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    50e2:	f102 0202 	add.w	r2, r2, #2
    50e6:	d1eb      	bne.n	50c0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    50e8:	4802      	ldr	r0, [pc, #8]	; (50f4 <usb_update_sn_string_descriptor+0x84>)
    50ea:	b00b      	add	sp, #44	; 0x2c
    50ec:	bd30      	pop	{r4, r5, pc}
    50ee:	bf00      	nop
    50f0:	0002652c 	.word	0x0002652c
    50f4:	200060c8 	.word	0x200060c8

000050f8 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    50f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50fc:	4604      	mov	r4, r0
    50fe:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    5100:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    5102:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    5106:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    5108:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    510a:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
    510c:	7820      	ldrb	r0, [r4, #0]
    510e:	b920      	cbnz	r0, 511a <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    5110:	4b61      	ldr	r3, [pc, #388]	; (5298 <usb_fix_descriptor+0x1a0>)
    5112:	3402      	adds	r4, #2
    5114:	429c      	cmp	r4, r3
    5116:	d01f      	beq.n	5158 <usb_fix_descriptor+0x60>
    5118:	e7f2      	b.n	5100 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    511a:	7863      	ldrb	r3, [r4, #1]
    511c:	2b05      	cmp	r3, #5
    511e:	d805      	bhi.n	512c <usb_fix_descriptor+0x34>
    5120:	e8df f003 	tbb	[pc, r3]
    5124:	78030478 	.word	0x78030478
    5128:	2007      	.short	0x2007
    512a:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    512c:	7823      	ldrb	r3, [r4, #0]
    512e:	441c      	add	r4, r3
    5130:	e7ec      	b.n	510c <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    5132:	78e3      	ldrb	r3, [r4, #3]
    5134:	2b00      	cmp	r3, #0
    5136:	d1f9      	bne.n	512c <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    5138:	78a3      	ldrb	r3, [r4, #2]
    513a:	b183      	cbz	r3, 515e <usb_fix_descriptor+0x66>
			numof_ifaces++;
    513c:	f109 0901 	add.w	r9, r9, #1
    5140:	fa5f f989 	uxtb.w	r9, r9
			break;
    5144:	e7f2      	b.n	512c <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    5146:	6872      	ldr	r2, [r6, #4]
    5148:	4294      	cmp	r4, r2
    514a:	f000 809d 	beq.w	5288 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    514e:	3624      	adds	r6, #36	; 0x24
    5150:	429e      	cmp	r6, r3
    5152:	d3f8      	bcc.n	5146 <usb_fix_descriptor+0x4e>
					return -1;
    5154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    5158:	b005      	add	sp, #20
    515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    515e:	4e4f      	ldr	r6, [pc, #316]	; (529c <usb_fix_descriptor+0x1a4>)
    5160:	4b4f      	ldr	r3, [pc, #316]	; (52a0 <usb_fix_descriptor+0x1a8>)
    5162:	e7f5      	b.n	5150 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    5164:	2e00      	cmp	r6, #0
    5166:	d0f5      	beq.n	5154 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    5168:	2300      	movs	r3, #0
    516a:	2101      	movs	r1, #1
    516c:	7f32      	ldrb	r2, [r6, #28]
    516e:	4293      	cmp	r3, r2
    5170:	d2f0      	bcs.n	5154 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    5172:	6a32      	ldr	r2, [r6, #32]
    5174:	78a7      	ldrb	r7, [r4, #2]
    5176:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    517a:	7910      	ldrb	r0, [r2, #4]
    517c:	4287      	cmp	r7, r0
    517e:	d001      	beq.n	5184 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    5180:	3301      	adds	r3, #1
    5182:	e7f3      	b.n	516c <usb_fix_descriptor+0x74>
    5184:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    5186:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    5188:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    518c:	f000 0003 	and.w	r0, r0, #3
    5190:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    5194:	7920      	ldrb	r0, [r4, #4]
    5196:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    519a:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    519e:	f994 0002 	ldrsb.w	r0, [r4, #2]
    51a2:	2800      	cmp	r0, #0
    51a4:	fa5f f887 	uxtb.w	r8, r7
    51a8:	da28      	bge.n	51fc <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    51aa:	f107 0010 	add.w	r0, r7, #16
    51ae:	fa01 f000 	lsl.w	r0, r1, r0
    51b2:	ea10 0f0b 	tst.w	r0, fp
    51b6:	d129      	bne.n	520c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    51b8:	f068 007f 	orn	r0, r8, #127	; 0x7f
    51bc:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    51c0:	a802      	add	r0, sp, #8
    51c2:	e9cd 3200 	strd	r3, r2, [sp]
    51c6:	f01e f850 	bl	2326a <usb_dc_ep_check_cap>
    51ca:	e9dd 3200 	ldrd	r3, r2, [sp]
    51ce:	2101      	movs	r1, #1
    51d0:	b9e0      	cbnz	r0, 520c <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    51d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    51d6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    51d8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    51dc:	bf1c      	itt	ne
    51de:	f108 0810 	addne.w	r8, r8, #16
    51e2:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    51e6:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    51e8:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    51ea:	bf15      	itete	ne
    51ec:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
    51f0:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    51f2:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
    51f6:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    51fa:	e797      	b.n	512c <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    51fc:	fa01 f007 	lsl.w	r0, r1, r7
    5200:	ea10 0f0b 	tst.w	r0, fp
    5204:	d102      	bne.n	520c <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
    5206:	f88d 8008 	strb.w	r8, [sp, #8]
    520a:	e7d9      	b.n	51c0 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    520c:	3701      	adds	r7, #1
    520e:	2f10      	cmp	r7, #16
    5210:	d1b9      	bne.n	5186 <usb_fix_descriptor+0x8e>
    5212:	e7b5      	b.n	5180 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    5214:	2d03      	cmp	r5, #3
    5216:	d11d      	bne.n	5254 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    5218:	f7ff ff2a 	bl	5070 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    521c:	4607      	mov	r7, r0
    521e:	b168      	cbz	r0, 523c <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
    5220:	f01b fa55 	bl	206ce <strlen>
	if (!runtime_sn_len) {
    5224:	4680      	mov	r8, r0
    5226:	b148      	cbz	r0, 523c <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    5228:	481e      	ldr	r0, [pc, #120]	; (52a4 <usb_fix_descriptor+0x1ac>)
    522a:	f01b fa50 	bl	206ce <strlen>
	if (runtime_sn_len != default_sn_len) {
    522e:	4580      	cmp	r8, r0
    5230:	d104      	bne.n	523c <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    5232:	4642      	mov	r2, r8
    5234:	4639      	mov	r1, r7
    5236:	1ca0      	adds	r0, r4, #2
    5238:	f01b fa76 	bl	20728 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    523c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    523e:	f06f 0102 	mvn.w	r1, #2
    5242:	18e2      	adds	r2, r4, r3
    5244:	1b09      	subs	r1, r1, r4
    5246:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    524a:	42d1      	cmn	r1, r2
    524c:	d513      	bpl.n	5276 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
    524e:	3501      	adds	r5, #1
    5250:	b2ed      	uxtb	r5, r5
			break;
    5252:	e76b      	b.n	512c <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
    5254:	2d00      	cmp	r5, #0
    5256:	d1f1      	bne.n	523c <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
    5258:	f1ba 0f00 	cmp.w	sl, #0
    525c:	f43f af7a 	beq.w	5154 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    5260:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
    5264:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    5268:	f3c3 2307 	ubfx	r3, r3, #8, #8
    526c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    5270:	f88a 9004 	strb.w	r9, [sl, #4]
    5274:	e7eb      	b.n	524e <usb_fix_descriptor+0x156>
		buf[i] = 0U;
    5276:	f04f 0000 	mov.w	r0, #0
    527a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    527e:	f813 0901 	ldrb.w	r0, [r3], #-1
    5282:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    5286:	e7e0      	b.n	524a <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
    5288:	68b3      	ldr	r3, [r6, #8]
    528a:	2b00      	cmp	r3, #0
    528c:	f43f af56 	beq.w	513c <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    5290:	4649      	mov	r1, r9
    5292:	4620      	mov	r0, r4
    5294:	4798      	blx	r3
    5296:	e751      	b.n	513c <usb_fix_descriptor+0x44>
    5298:	20000d39 	.word	0x20000d39
    529c:	20000d3c 	.word	0x20000d3c
    52a0:	20000d60 	.word	0x20000d60
    52a4:	0002652c 	.word	0x0002652c

000052a8 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    52a8:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    52aa:	4804      	ldr	r0, [pc, #16]	; (52bc <usb_get_device_descriptor+0x14>)
    52ac:	f7ff ff24 	bl	50f8 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
    52b0:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    52b2:	4802      	ldr	r0, [pc, #8]	; (52bc <usb_get_device_descriptor+0x14>)
    52b4:	bf18      	it	ne
    52b6:	2000      	movne	r0, #0
    52b8:	bd08      	pop	{r3, pc}
    52ba:	bf00      	nop
    52bc:	20000c74 	.word	0x20000c74

000052c0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    52c0:	b510      	push	{r4, lr}
    52c2:	4b09      	ldr	r3, [pc, #36]	; (52e8 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    52c4:	2100      	movs	r1, #0
    52c6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    52c8:	781c      	ldrb	r4, [r3, #0]
    52ca:	4284      	cmp	r4, r0
    52cc:	d105      	bne.n	52da <usb_ep_get_transfer+0x1a>
    52ce:	685c      	ldr	r4, [r3, #4]
    52d0:	b11c      	cbz	r4, 52da <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    52d2:	2048      	movs	r0, #72	; 0x48
    52d4:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    52d8:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    52da:	3101      	adds	r1, #1
    52dc:	2904      	cmp	r1, #4
    52de:	f103 0348 	add.w	r3, r3, #72	; 0x48
    52e2:	d1f1      	bne.n	52c8 <usb_ep_get_transfer+0x8>
	return NULL;
    52e4:	2000      	movs	r0, #0
    52e6:	e7f7      	b.n	52d8 <usb_ep_get_transfer+0x18>
    52e8:	20004040 	.word	0x20004040

000052ec <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    52ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    52f0:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    52f4:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
    52f8:	3310      	adds	r3, #16
{
    52fa:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    52fc:	d110      	bne.n	5320 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    52fe:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    5300:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    5304:	0799      	lsls	r1, r3, #30
    5306:	d53c      	bpl.n	5382 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    5308:	bb02      	cbnz	r2, 534c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    530a:	f013 0304 	ands.w	r3, r3, #4
    530e:	d104      	bne.n	531a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    5310:	461a      	mov	r2, r3
    5312:	4619      	mov	r1, r3
    5314:	4630      	mov	r0, r6
    5316:	f01a fe70 	bl	1fffa <usb_write>
			}
			trans->status = 0;
    531a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    531c:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    5320:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5324:	3310      	adds	r3, #16
    5326:	d00e      	beq.n	5346 <usb_transfer_work+0x5a>
    5328:	f854 5c20 	ldr.w	r5, [r4, #-32]
    532c:	b15d      	cbz	r5, 5346 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    532e:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
    5332:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
    5336:	f01e fdca 	bl	23ece <k_is_in_isr>
    533a:	2800      	cmp	r0, #0
    533c:	d04c      	beq.n	53d8 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    533e:	482e      	ldr	r0, [pc, #184]	; (53f8 <usb_transfer_work+0x10c>)
    5340:	4621      	mov	r1, r4
    5342:	f01e ff3b 	bl	241bc <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    5346:	b002      	add	sp, #8
    5348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    534c:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    5350:	ab01      	add	r3, sp, #4
    5352:	4630      	mov	r0, r6
    5354:	f01a fe51 	bl	1fffa <usb_write>
		if (ret) {
    5358:	b110      	cbz	r0, 5360 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    535a:	f06f 0315 	mvn.w	r3, #21
    535e:	e7dd      	b.n	531c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    5360:	9a01      	ldr	r2, [sp, #4]
    5362:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5366:	4413      	add	r3, r2
    5368:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    536c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    5370:	1a9b      	subs	r3, r3, r2
    5372:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    5376:	f854 3c24 	ldr.w	r3, [r4, #-36]
    537a:	4413      	add	r3, r2
    537c:	f844 3c24 	str.w	r3, [r4, #-36]
    5380:	e7ce      	b.n	5320 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    5382:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    5386:	ab01      	add	r3, sp, #4
    5388:	4630      	mov	r0, r6
    538a:	f015 fbc1 	bl	1ab10 <usb_dc_ep_read_wait>
		if (ret) {
    538e:	2800      	cmp	r0, #0
    5390:	d1e3      	bne.n	535a <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    5392:	9d01      	ldr	r5, [sp, #4]
    5394:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5398:	442b      	add	r3, r5
    539a:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    539e:	f854 3c28 	ldr.w	r3, [r4, #-40]
    53a2:	1b5b      	subs	r3, r3, r5
    53a4:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    53a8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    53ac:	442b      	add	r3, r5
    53ae:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    53b2:	2d00      	cmp	r5, #0
    53b4:	d0b1      	beq.n	531a <usb_transfer_work+0x2e>
    53b6:	4630      	mov	r0, r6
    53b8:	f015 fc4e 	bl	1ac58 <usb_dc_ep_mps>
    53bc:	fbb5 f3f0 	udiv	r3, r5, r0
    53c0:	fb03 5510 	mls	r5, r3, r0, r5
    53c4:	2d00      	cmp	r5, #0
    53c6:	d1a8      	bne.n	531a <usb_transfer_work+0x2e>
    53c8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d0a4      	beq.n	531a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    53d0:	4630      	mov	r0, r6
    53d2:	f015 fbe5 	bl	1aba0 <usb_dc_ep_read_continue>
    53d6:	e7a3      	b.n	5320 <usb_transfer_work+0x34>
		trans->cb = NULL;
    53d8:	f844 0c20 	str.w	r0, [r4, #-32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    53dc:	f1a4 0018 	sub.w	r0, r4, #24
    53e0:	f019 f89c 	bl	1e51c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    53e4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    53e8:	338c      	adds	r3, #140	; 0x8c
    53ea:	d0ac      	beq.n	5346 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    53ec:	4642      	mov	r2, r8
    53ee:	4639      	mov	r1, r7
    53f0:	4630      	mov	r0, r6
    53f2:	47a8      	blx	r5
    53f4:	e7a7      	b.n	5346 <usb_transfer_work+0x5a>
    53f6:	bf00      	nop
    53f8:	20000e60 	.word	0x20000e60

000053fc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    53fc:	1e4b      	subs	r3, r1, #1
    53fe:	2b01      	cmp	r3, #1
{
    5400:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5402:	4606      	mov	r6, r0
    5404:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    5406:	d80f      	bhi.n	5428 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    5408:	f7ff ff5a 	bl	52c0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    540c:	4604      	mov	r4, r0
    540e:	b968      	cbnz	r0, 542c <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    5410:	2d01      	cmp	r5, #1
    5412:	d109      	bne.n	5428 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    5414:	ab01      	add	r3, sp, #4
    5416:	2201      	movs	r2, #1
    5418:	f10d 0103 	add.w	r1, sp, #3
    541c:	4630      	mov	r0, r6
    541e:	f015 fb77 	bl	1ab10 <usb_dc_ep_read_wait>
			} while (bytes);
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	2b00      	cmp	r3, #0
    5426:	d1f5      	bne.n	5414 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    5428:	b002      	add	sp, #8
    542a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    542c:	f01e fd4f 	bl	23ece <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5430:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    5434:	b108      	cbz	r0, 543a <usb_transfer_ep_callback+0x3e>
    5436:	2d01      	cmp	r5, #1
    5438:	d105      	bne.n	5446 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    543a:	4608      	mov	r0, r1
}
    543c:	b002      	add	sp, #8
    543e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    5442:	f7ff bf53 	b.w	52ec <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5446:	4803      	ldr	r0, [pc, #12]	; (5454 <usb_transfer_ep_callback+0x58>)
}
    5448:	b002      	add	sp, #8
    544a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    544e:	f01e beb5 	b.w	241bc <k_work_submit_to_queue>
    5452:	bf00      	nop
    5454:	20000e60 	.word	0x20000e60

00005458 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    5458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    545c:	4606      	mov	r6, r0
    545e:	9101      	str	r1, [sp, #4]
    5460:	4615      	mov	r5, r2
    5462:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    5464:	f01a fe11 	bl	2008a <usb_transfer_is_busy>
    5468:	4604      	mov	r4, r0
    546a:	2800      	cmp	r0, #0
    546c:	d15f      	bne.n	552e <usb_transfer+0xd6>
    546e:	f04f 0320 	mov.w	r3, #32
    5472:	f3ef 8a11 	mrs	sl, BASEPRI
    5476:	f383 8812 	msr	BASEPRI_MAX, r3
    547a:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    547e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 5534 <usb_transfer+0xdc>
    5482:	f04f 0948 	mov.w	r9, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    5486:	fb09 f704 	mul.w	r7, r9, r4
	return z_impl_k_sem_take(sem, timeout);
    548a:	2200      	movs	r2, #0
    548c:	2300      	movs	r3, #0
    548e:	4658      	mov	r0, fp
    5490:	f019 f86a 	bl	1e568 <z_impl_k_sem_take>
    5494:	b968      	cbnz	r0, 54b2 <usb_transfer+0x5a>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    5496:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 5538 <usb_transfer+0xe0>
    549a:	eb09 0407 	add.w	r4, r9, r7
    549e:	6863      	ldr	r3, [r4, #4]
    54a0:	f113 0f10 	cmn.w	r3, #16
    54a4:	d114      	bne.n	54d0 <usb_transfer+0x78>
    54a6:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    54a8:	4658      	mov	r0, fp
    54aa:	f019 f837 	bl	1e51c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    54ae:	9b01      	ldr	r3, [sp, #4]
    54b0:	e006      	b.n	54c0 <usb_transfer+0x68>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    54b2:	3401      	adds	r4, #1
    54b4:	2c04      	cmp	r4, #4
    54b6:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
    54ba:	d1e4      	bne.n	5486 <usb_transfer+0x2e>
		ret = -ENOMEM;
    54bc:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    54c0:	f38a 8811 	msr	BASEPRI, sl
    54c4:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    54c8:	4618      	mov	r0, r3
    54ca:	b003      	add	sp, #12
    54cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    54d0:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    54d2:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    54d4:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    54d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    54da:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    54dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    54de:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    54e0:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    54e4:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    54e8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	trans->status = -EBUSY;
    54ec:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    54ee:	4630      	mov	r0, r6
    54f0:	f015 fbb2 	bl	1ac58 <usb_dc_ep_mps>
    54f4:	b158      	cbz	r0, 550e <usb_transfer+0xb6>
    54f6:	4630      	mov	r0, r6
    54f8:	f015 fbae 	bl	1ac58 <usb_dc_ep_mps>
    54fc:	fbb5 f2f0 	udiv	r2, r5, r0
    5500:	fb02 5510 	mls	r5, r2, r0, r5
    5504:	b11d      	cbz	r5, 550e <usb_transfer+0xb6>
		trans->flags |= USB_TRANS_NO_ZLP;
    5506:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5508:	f043 0304 	orr.w	r3, r3, #4
    550c:	6463      	str	r3, [r4, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    550e:	f018 0f02 	tst.w	r8, #2
    5512:	d007      	beq.n	5524 <usb_transfer+0xcc>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5514:	3734      	adds	r7, #52	; 0x34
    5516:	4809      	ldr	r0, [pc, #36]	; (553c <usb_transfer+0xe4>)
    5518:	eb09 0107 	add.w	r1, r9, r7
    551c:	f01e fe4e 	bl	241bc <k_work_submit_to_queue>
	int i, key, ret = 0;
    5520:	2300      	movs	r3, #0
    5522:	e7cd      	b.n	54c0 <usb_transfer+0x68>
		ret = usb_dc_ep_read_continue(ep);
    5524:	4630      	mov	r0, r6
    5526:	f015 fb3b 	bl	1aba0 <usb_dc_ep_read_continue>
    552a:	4603      	mov	r3, r0
    552c:	e7c8      	b.n	54c0 <usb_transfer+0x68>
		return -EBUSY;
    552e:	f06f 030f 	mvn.w	r3, #15
    5532:	e7c9      	b.n	54c8 <usb_transfer+0x70>
    5534:	2000405c 	.word	0x2000405c
    5538:	20004040 	.word	0x20004040
    553c:	20000e60 	.word	0x20000e60

00005540 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    5540:	b510      	push	{r4, lr}
	__asm__ volatile(
    5542:	f04f 0320 	mov.w	r3, #32
    5546:	f3ef 8411 	mrs	r4, BASEPRI
    554a:	f383 8812 	msr	BASEPRI_MAX, r3
    554e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    5552:	f7ff feb5 	bl	52c0 <usb_ep_get_transfer>
	if (!trans) {
    5556:	b150      	cbz	r0, 556e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    5558:	6843      	ldr	r3, [r0, #4]
    555a:	3310      	adds	r3, #16
    555c:	d107      	bne.n	556e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    555e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    5562:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5564:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5568:	4803      	ldr	r0, [pc, #12]	; (5578 <usb_cancel_transfer+0x38>)
    556a:	f01e fe27 	bl	241bc <k_work_submit_to_queue>
	__asm__ volatile(
    556e:	f384 8811 	msr	BASEPRI, r4
    5572:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    5576:	bd10      	pop	{r4, pc}
    5578:	20000e60 	.word	0x20000e60

0000557c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5580:	4c10      	ldr	r4, [pc, #64]	; (55c4 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5582:	f8df 8044 	ldr.w	r8, [pc, #68]	; 55c8 <usb_cancel_transfers+0x4c>
{
    5586:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    5588:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    558c:	f04f 0320 	mov.w	r3, #32
    5590:	f3ef 8611 	mrs	r6, BASEPRI
    5594:	f383 8812 	msr	BASEPRI_MAX, r3
    5598:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    559c:	6863      	ldr	r3, [r4, #4]
    559e:	3310      	adds	r3, #16
    55a0:	d105      	bne.n	55ae <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    55a2:	f104 0134 	add.w	r1, r4, #52	; 0x34
    55a6:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    55a8:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    55aa:	f01e fe07 	bl	241bc <k_work_submit_to_queue>
	__asm__ volatile(
    55ae:	f386 8811 	msr	BASEPRI, r6
    55b2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    55b6:	3d01      	subs	r5, #1
    55b8:	f104 0448 	add.w	r4, r4, #72	; 0x48
    55bc:	d1e6      	bne.n	558c <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    55be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55c2:	bf00      	nop
    55c4:	20004040 	.word	0x20004040
    55c8:	20000e60 	.word	0x20000e60

000055cc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    55cc:	b570      	push	{r4, r5, r6, lr}
    55ce:	4c0a      	ldr	r4, [pc, #40]	; (55f8 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    55d0:	4e0a      	ldr	r6, [pc, #40]	; (55fc <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    55d2:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    55d4:	4631      	mov	r1, r6
    55d6:	4620      	mov	r0, r4
    55d8:	f01e fde7 	bl	241aa <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    55dc:	2201      	movs	r2, #1
    55de:	f1a4 0018 	sub.w	r0, r4, #24
    55e2:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    55e4:	3501      	adds	r5, #1
    55e6:	f01e fd60 	bl	240aa <z_impl_k_sem_init>
    55ea:	2d04      	cmp	r5, #4
    55ec:	f104 0448 	add.w	r4, r4, #72	; 0x48
    55f0:	d1f0      	bne.n	55d4 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    55f2:	2000      	movs	r0, #0
    55f4:	bd70      	pop	{r4, r5, r6, pc}
    55f6:	bf00      	nop
    55f8:	20004074 	.word	0x20004074
    55fc:	000052ed 	.word	0x000052ed

00005600 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	4604      	mov	r4, r0
    5604:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5606:	7901      	ldrb	r1, [r0, #4]
    5608:	4812      	ldr	r0, [pc, #72]	; (5654 <cdc_acm_class_handle_req+0x54>)
{
    560a:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    560c:	f01a fd19 	bl	20042 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    5610:	b1e8      	cbz	r0, 564e <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    5612:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    5616:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    5618:	2a00      	cmp	r2, #0
    561a:	db11      	blt.n	5640 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    561c:	2b20      	cmp	r3, #32
    561e:	d004      	beq.n	562a <cdc_acm_class_handle_req+0x2a>
    5620:	2b22      	cmp	r3, #34	; 0x22
    5622:	d009      	beq.n	5638 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    5624:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5628:	e005      	b.n	5636 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    562a:	6829      	ldr	r1, [r5, #0]
    562c:	2207      	movs	r2, #7
    562e:	380c      	subs	r0, #12
    5630:	f01b f87a 	bl	20728 <memcpy>
			return 0;
    5634:	2000      	movs	r0, #0
}
    5636:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    5638:	8863      	ldrh	r3, [r4, #2]
    563a:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    563e:	e7f9      	b.n	5634 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    5640:	2b21      	cmp	r3, #33	; 0x21
    5642:	d1ef      	bne.n	5624 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    5644:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    5646:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    5648:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    564a:	6033      	str	r3, [r6, #0]
    564c:	e7f2      	b.n	5634 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    564e:	f06f 0012 	mvn.w	r0, #18
    5652:	e7f0      	b.n	5636 <cdc_acm_class_handle_req+0x36>
    5654:	20004160 	.word	0x20004160

00005658 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    5658:	b508      	push	{r3, lr}
    565a:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    565c:	4803      	ldr	r0, [pc, #12]	; (566c <cdc_acm_int_in+0x14>)
    565e:	f01a fcfe 	bl	2005e <usb_get_dev_data_by_ep>
	if (common == NULL) {
    5662:	b110      	cbz	r0, 566a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    5664:	2301      	movs	r3, #1
    5666:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    566a:	bd08      	pop	{r3, pc}
    566c:	20004160 	.word	0x20004160

00005670 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5670:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    5672:	2301      	movs	r3, #1
    5674:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    5678:	680b      	ldr	r3, [r1, #0]
    567a:	b133      	cbz	r3, 568a <cdc_acm_irq_rx_enable+0x1a>
    567c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    5680:	b11b      	cbz	r3, 568a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5682:	4802      	ldr	r0, [pc, #8]	; (568c <cdc_acm_irq_rx_enable+0x1c>)
    5684:	3108      	adds	r1, #8
    5686:	f01e bd99 	b.w	241bc <k_work_submit_to_queue>
	}
}
    568a:	4770      	bx	lr
    568c:	20000e60 	.word	0x20000e60

00005690 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5690:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    5692:	2301      	movs	r3, #1
    5694:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    5698:	680b      	ldr	r3, [r1, #0]
    569a:	b133      	cbz	r3, 56aa <cdc_acm_irq_tx_enable+0x1a>
    569c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    56a0:	b11b      	cbz	r3, 56aa <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    56a2:	4802      	ldr	r0, [pc, #8]	; (56ac <cdc_acm_irq_tx_enable+0x1c>)
    56a4:	3108      	adds	r1, #8
    56a6:	f01e bd89 	b.w	241bc <k_work_submit_to_queue>
}
    56aa:	4770      	bx	lr
    56ac:	20000e60 	.word	0x20000e60

000056b0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    56b0:	4a0b      	ldr	r2, [pc, #44]	; (56e0 <cdc_acm_reset_port+0x30>)
{
    56b2:	4603      	mov	r3, r0
	dev_data->configured = false;
    56b4:	2100      	movs	r1, #0
    56b6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    56ba:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    56bc:	6810      	ldr	r0, [r2, #0]
    56be:	6758      	str	r0, [r3, #116]	; 0x74
    56c0:	8890      	ldrh	r0, [r2, #4]
    56c2:	7992      	ldrb	r2, [r2, #6]
    56c4:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    56c8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    56cc:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    56d0:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    56d4:	2240      	movs	r2, #64	; 0x40
    56d6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    56da:	f01b b830 	b.w	2073e <memset>
    56de:	bf00      	nop
    56e0:	00024bd6 	.word	0x00024bd6

000056e4 <cdc_acm_fifo_fill>:
{
    56e4:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    56e6:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    56e8:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    56ec:	b170      	cbz	r0, 570c <cdc_acm_fifo_fill+0x28>
    56ee:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    56f2:	b963      	cbnz	r3, 570e <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    56f4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    56f8:	6f28      	ldr	r0, [r5, #112]	; 0x70
    56fa:	f01a fbdb 	bl	1feb4 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    56fe:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    5702:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5704:	4803      	ldr	r0, [pc, #12]	; (5714 <cdc_acm_fifo_fill+0x30>)
    5706:	f01e fd59 	bl	241bc <k_work_submit_to_queue>
	return wrote;
    570a:	4620      	mov	r0, r4
}
    570c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    570e:	2000      	movs	r0, #0
    5710:	e7fc      	b.n	570c <cdc_acm_fifo_fill+0x28>
    5712:	bf00      	nop
    5714:	20000e60 	.word	0x20000e60

00005718 <cdc_acm_read_cb>:
{
    5718:	b573      	push	{r0, r1, r4, r5, r6, lr}
    571a:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    571c:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    5720:	1e0a      	subs	r2, r1, #0
{
    5722:	4605      	mov	r5, r0
	if (size <= 0) {
    5724:	dd10      	ble.n	5748 <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5726:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5728:	4631      	mov	r1, r6
    572a:	f01a fbc3 	bl	1feb4 <ring_buf_put>
	dev_data->rx_ready = true;
    572e:	2301      	movs	r3, #1
    5730:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    5734:	6823      	ldr	r3, [r4, #0]
    5736:	b13b      	cbz	r3, 5748 <cdc_acm_read_cb+0x30>
    5738:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    573c:	b123      	cbz	r3, 5748 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    573e:	4808      	ldr	r0, [pc, #32]	; (5760 <cdc_acm_read_cb+0x48>)
    5740:	f104 0108 	add.w	r1, r4, #8
    5744:	f01e fd3a 	bl	241bc <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    5748:	4b06      	ldr	r3, [pc, #24]	; (5764 <cdc_acm_read_cb+0x4c>)
    574a:	9300      	str	r3, [sp, #0]
    574c:	9401      	str	r4, [sp, #4]
    574e:	2301      	movs	r3, #1
    5750:	2240      	movs	r2, #64	; 0x40
    5752:	4631      	mov	r1, r6
    5754:	4628      	mov	r0, r5
    5756:	f7ff fe7f 	bl	5458 <usb_transfer>
}
    575a:	b002      	add	sp, #8
    575c:	bd70      	pop	{r4, r5, r6, pc}
    575e:	bf00      	nop
    5760:	20000e60 	.word	0x20000e60
    5764:	00005719 	.word	0x00005719

00005768 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    5768:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    576a:	6904      	ldr	r4, [r0, #16]
{
    576c:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    5770:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    5774:	b18b      	cbz	r3, 579a <cdc_acm_poll_out+0x32>
    5776:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    577a:	b973      	cbnz	r3, 579a <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    577c:	f10d 0107 	add.w	r1, sp, #7
    5780:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    5782:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5786:	2201      	movs	r2, #1
    5788:	f01a fb94 	bl	1feb4 <ring_buf_put>
    578c:	4601      	mov	r1, r0
    578e:	b130      	cbz	r0, 579e <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5790:	480a      	ldr	r0, [pc, #40]	; (57bc <cdc_acm_poll_out+0x54>)
    5792:	f104 0118 	add.w	r1, r4, #24
    5796:	f01e fd11 	bl	241bc <k_work_submit_to_queue>
}
    579a:	b002      	add	sp, #8
    579c:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    579e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    57a0:	2201      	movs	r2, #1
    57a2:	f01a fbef 	bl	1ff84 <ring_buf_get>
    57a6:	2800      	cmp	r0, #0
    57a8:	d0f7      	beq.n	579a <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    57aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
    57ac:	2201      	movs	r2, #1
    57ae:	f10d 0107 	add.w	r1, sp, #7
    57b2:	f01a fb7f 	bl	1feb4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    57b6:	2800      	cmp	r0, #0
    57b8:	d1ea      	bne.n	5790 <cdc_acm_poll_out+0x28>
    57ba:	e7ee      	b.n	579a <cdc_acm_poll_out+0x32>
    57bc:	20000e60 	.word	0x20000e60

000057c0 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    57c0:	2301      	movs	r3, #1
    57c2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    57c6:	6813      	ldr	r3, [r2, #0]
{
    57c8:	b510      	push	{r4, lr}
    57ca:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    57cc:	b13b      	cbz	r3, 57de <cdc_acm_write_cb+0x1e>
    57ce:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    57d2:	b123      	cbz	r3, 57de <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    57d4:	4808      	ldr	r0, [pc, #32]	; (57f8 <cdc_acm_write_cb+0x38>)
    57d6:	f102 0108 	add.w	r1, r2, #8
    57da:	f01e fcef 	bl	241bc <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    57de:	6f20      	ldr	r0, [r4, #112]	; 0x70
    57e0:	f01a fb0e 	bl	1fe00 <ring_buf_is_empty>
    57e4:	b930      	cbnz	r0, 57f4 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    57e6:	f104 0118 	add.w	r1, r4, #24
    57ea:	4803      	ldr	r0, [pc, #12]	; (57f8 <cdc_acm_write_cb+0x38>)
}
    57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    57f0:	f01e bce4 	b.w	241bc <k_work_submit_to_queue>
}
    57f4:	bd10      	pop	{r4, pc}
    57f6:	bf00      	nop
    57f8:	20000e60 	.word	0x20000e60

000057fc <tx_work_handler>:
{
    57fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    57fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    5800:	685b      	ldr	r3, [r3, #4]
    5802:	6a1b      	ldr	r3, [r3, #32]
    5804:	7d1e      	ldrb	r6, [r3, #20]
{
    5806:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    5808:	4630      	mov	r0, r6
    580a:	f01a fc3e 	bl	2008a <usb_transfer_is_busy>
    580e:	b9d0      	cbnz	r0, 5846 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    5810:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5812:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5816:	a903      	add	r1, sp, #12
    5818:	f01a fb6b 	bl	1fef2 <ring_buf_get_claim>
	if (!len) {
    581c:	4604      	mov	r4, r0
    581e:	b190      	cbz	r0, 5846 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    5820:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    5822:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    5826:	bf08      	it	eq
    5828:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    582c:	9301      	str	r3, [sp, #4]
    582e:	4b07      	ldr	r3, [pc, #28]	; (584c <tx_work_handler+0x50>)
    5830:	9903      	ldr	r1, [sp, #12]
    5832:	9300      	str	r3, [sp, #0]
    5834:	4622      	mov	r2, r4
    5836:	2302      	movs	r3, #2
    5838:	4630      	mov	r0, r6
    583a:	f7ff fe0d 	bl	5458 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    583e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5840:	4621      	mov	r1, r4
    5842:	f01a fb81 	bl	1ff48 <ring_buf_get_finish>
}
    5846:	b004      	add	sp, #16
    5848:	bd70      	pop	{r4, r5, r6, pc}
    584a:	bf00      	nop
    584c:	000057c1 	.word	0x000057c1

00005850 <cdc_acm_dev_status_cb>:
{
    5850:	b538      	push	{r3, r4, r5, lr}
    5852:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    5854:	4601      	mov	r1, r0
    5856:	4824      	ldr	r0, [pc, #144]	; (58e8 <cdc_acm_dev_status_cb+0x98>)
    5858:	f01a fbe7 	bl	2002a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    585c:	4604      	mov	r4, r0
    585e:	b380      	cbz	r0, 58c2 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    5860:	4602      	mov	r2, r0
	switch (status) {
    5862:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    5864:	f852 3980 	ldr.w	r3, [r2], #-128
    5868:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    586a:	2905      	cmp	r1, #5
    586c:	d829      	bhi.n	58c2 <cdc_acm_dev_status_cb+0x72>
    586e:	e8df f001 	tbb	[pc, r1]
    5872:	2820      	.short	0x2820
    5874:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    5878:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    587c:	b931      	cbnz	r1, 588c <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    587e:	6a1b      	ldr	r3, [r3, #32]
    5880:	7b18      	ldrb	r0, [r3, #12]
    5882:	f7ff ff49 	bl	5718 <cdc_acm_read_cb>
			dev_data->configured = true;
    5886:	2301      	movs	r3, #1
    5888:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    588c:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    5890:	b9bb      	cbnz	r3, 58c2 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    5892:	2301      	movs	r3, #1
    5894:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    5898:	f854 3c80 	ldr.w	r3, [r4, #-128]
    589c:	b18b      	cbz	r3, 58c2 <cdc_acm_dev_status_cb+0x72>
    589e:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    58a2:	b173      	cbz	r3, 58c2 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    58a4:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    58a8:	4810      	ldr	r0, [pc, #64]	; (58ec <cdc_acm_dev_status_cb+0x9c>)
}
    58aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    58ae:	f01e bc85 	b.w	241bc <k_work_submit_to_queue>
}
    58b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    58b6:	4610      	mov	r0, r2
    58b8:	f7ff befa 	b.w	56b0 <cdc_acm_reset_port>
		dev_data->suspended = true;
    58bc:	2301      	movs	r3, #1
    58be:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    58c2:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    58c4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    58c8:	2900      	cmp	r1, #0
    58ca:	d0fa      	beq.n	58c2 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
    58cc:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    58d0:	2100      	movs	r1, #0
    58d2:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    58d6:	2800      	cmp	r0, #0
    58d8:	d0f3      	beq.n	58c2 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    58da:	6a1b      	ldr	r3, [r3, #32]
    58dc:	7b18      	ldrb	r0, [r3, #12]
}
    58de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    58e2:	f7ff bf19 	b.w	5718 <cdc_acm_read_cb>
    58e6:	bf00      	nop
    58e8:	20004160 	.word	0x20004160
    58ec:	20000e60 	.word	0x20000e60

000058f0 <cdc_acm_init>:
{
    58f0:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    58f2:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    58f4:	2300      	movs	r3, #0
    58f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    58fa:	4b0c      	ldr	r3, [pc, #48]	; (592c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    58fc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    5900:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    5902:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5906:	b969      	cbnz	r1, 5924 <cdc_acm_init+0x34>
	list->head = node;
    5908:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    590c:	f104 0008 	add.w	r0, r4, #8
    5910:	4907      	ldr	r1, [pc, #28]	; (5930 <cdc_acm_init+0x40>)
    5912:	f01e fc4a 	bl	241aa <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    5916:	f104 0018 	add.w	r0, r4, #24
    591a:	4906      	ldr	r1, [pc, #24]	; (5934 <cdc_acm_init+0x44>)
    591c:	f01e fc45 	bl	241aa <k_work_init>
}
    5920:	2000      	movs	r0, #0
    5922:	bd10      	pop	{r4, pc}
	parent->next = child;
    5924:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5926:	605a      	str	r2, [r3, #4]
}
    5928:	e7f0      	b.n	590c <cdc_acm_init+0x1c>
    592a:	bf00      	nop
    592c:	20004160 	.word	0x20004160
    5930:	000200b5 	.word	0x000200b5
    5934:	000057fd 	.word	0x000057fd

00005938 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    5938:	b530      	push	{r4, r5, lr}
    593a:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    593c:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    593e:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    5940:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    5944:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    5946:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    5948:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    594c:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    594e:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    5952:	2002      	movs	r0, #2
    5954:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5958:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    595a:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    595e:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5962:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    5964:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5968:	220a      	movs	r2, #10
    596a:	a901      	add	r1, sp, #4
    596c:	f01a fb45 	bl	1fffa <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    5970:	4c05      	ldr	r4, [pc, #20]	; (5988 <cdc_acm_send_notification.isra.0+0x50>)
    5972:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    5976:	b923      	cbnz	r3, 5982 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    5978:	2001      	movs	r0, #1
    597a:	f01e fdba 	bl	244f2 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    597e:	3c01      	subs	r4, #1
    5980:	d1f7      	bne.n	5972 <cdc_acm_send_notification.isra.0+0x3a>
}
    5982:	b005      	add	sp, #20
    5984:	bd30      	pop	{r4, r5, pc}
    5986:	bf00      	nop
    5988:	000186a1 	.word	0x000186a1

0000598c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    598e:	4d09      	ldr	r5, [pc, #36]	; (59b4 <z_usb_work_q_init+0x28>)
    5990:	4909      	ldr	r1, [pc, #36]	; (59b8 <z_usb_work_q_init+0x2c>)
    5992:	2400      	movs	r4, #0
    5994:	9400      	str	r4, [sp, #0]
    5996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    599a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    599e:	4628      	mov	r0, r5
    59a0:	f018 ff2e 	bl	1e800 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    59a4:	4905      	ldr	r1, [pc, #20]	; (59bc <z_usb_work_q_init+0x30>)
    59a6:	4628      	mov	r0, r5
    59a8:	f01e fa97 	bl	23eda <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    59ac:	4620      	mov	r0, r4
    59ae:	b003      	add	sp, #12
    59b0:	bd30      	pop	{r4, r5, pc}
    59b2:	bf00      	nop
    59b4:	20000e60 	.word	0x20000e60
    59b8:	20006d38 	.word	0x20006d38
    59bc:	00026547 	.word	0x00026547

000059c0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    59c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59c4:	4605      	mov	r5, r0
	__asm__ volatile(
    59c6:	f04f 0320 	mov.w	r3, #32
    59ca:	f3ef 8611 	mrs	r6, BASEPRI
    59ce:	f383 8812 	msr	BASEPRI_MAX, r3
    59d2:	f3bf 8f6f 	isb	sy
	return list->head;
    59d6:	4b0e      	ldr	r3, [pc, #56]	; (5a10 <pm_state_notify+0x50>)
    59d8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    59da:	b19c      	cbz	r4, 5a04 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    59dc:	4f0d      	ldr	r7, [pc, #52]	; (5a14 <pm_state_notify+0x54>)
    59de:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5a18 <pm_state_notify+0x58>
    59e2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    59e6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    59ea:	2d00      	cmp	r5, #0
    59ec:	bf08      	it	eq
    59ee:	4613      	moveq	r3, r2
		if (callback) {
    59f0:	b12b      	cbz	r3, 59fe <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    59f2:	f898 2014 	ldrb.w	r2, [r8, #20]
    59f6:	fb09 f202 	mul.w	r2, r9, r2
    59fa:	5cb8      	ldrb	r0, [r7, r2]
    59fc:	4798      	blx	r3
	return node->next;
    59fe:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5a00:	2c00      	cmp	r4, #0
    5a02:	d1f0      	bne.n	59e6 <pm_state_notify+0x26>
	__asm__ volatile(
    5a04:	f386 8811 	msr	BASEPRI, r6
    5a08:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a10:	20004168 	.word	0x20004168
    5a14:	20004170 	.word	0x20004170
    5a18:	2000606c 	.word	0x2000606c

00005a1c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a1c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    5a1e:	2301      	movs	r3, #1
    5a20:	f000 001f 	and.w	r0, r0, #31
    5a24:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a28:	4b07      	ldr	r3, [pc, #28]	; (5a48 <atomic_clear_bit.constprop.0+0x2c>)
    5a2a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a2e:	43c0      	mvns	r0, r0
    5a30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5a34:	e853 2f00 	ldrex	r2, [r3]
    5a38:	4002      	ands	r2, r0
    5a3a:	e843 2100 	strex	r1, r2, [r3]
    5a3e:	2900      	cmp	r1, #0
    5a40:	d1f8      	bne.n	5a34 <atomic_clear_bit.constprop.0+0x18>
    5a42:	f3bf 8f5b 	dmb	ish
}
    5a46:	4770      	bx	lr
    5a48:	2000417c 	.word	0x2000417c

00005a4c <pm_system_resume>:

void pm_system_resume(void)
{
    5a4c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    5a4e:	4b1d      	ldr	r3, [pc, #116]	; (5ac4 <pm_system_resume+0x78>)
    5a50:	7d1c      	ldrb	r4, [r3, #20]
    5a52:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    5a56:	f004 031f 	and.w	r3, r4, #31
    5a5a:	2201      	movs	r2, #1
    5a5c:	409a      	lsls	r2, r3
    5a5e:	4b1a      	ldr	r3, [pc, #104]	; (5ac8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a60:	0961      	lsrs	r1, r4, #5
{
    5a62:	b085      	sub	sp, #20
    5a64:	43d0      	mvns	r0, r2
    5a66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5a6a:	e853 1f00 	ldrex	r1, [r3]
    5a6e:	ea01 0500 	and.w	r5, r1, r0
    5a72:	e843 5c00 	strex	ip, r5, [r3]
    5a76:	f1bc 0f00 	cmp.w	ip, #0
    5a7a:	d1f6      	bne.n	5a6a <pm_system_resume+0x1e>
    5a7c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5a80:	4211      	tst	r1, r2
    5a82:	d017      	beq.n	5ab4 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    5a84:	4d11      	ldr	r5, [pc, #68]	; (5acc <pm_system_resume+0x80>)
    5a86:	220c      	movs	r2, #12
    5a88:	fb02 5204 	mla	r2, r2, r4, r5
    5a8c:	ca07      	ldmia	r2, {r0, r1, r2}
    5a8e:	ab01      	add	r3, sp, #4
    5a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    5a94:	4a0e      	ldr	r2, [pc, #56]	; (5ad0 <pm_system_resume+0x84>)
    5a96:	b17a      	cbz	r2, 5ab8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    5a98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5a9c:	f01a fe6e 	bl	2077c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    5aa0:	2000      	movs	r0, #0
    5aa2:	f7ff ff8d 	bl	59c0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5aa6:	230c      	movs	r3, #12
    5aa8:	435c      	muls	r4, r3
    5aaa:	192a      	adds	r2, r5, r4
    5aac:	2300      	movs	r3, #0
    5aae:	512b      	str	r3, [r5, r4]
    5ab0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5ab4:	b005      	add	sp, #20
    5ab6:	bd30      	pop	{r4, r5, pc}
    5ab8:	f382 8811 	msr	BASEPRI, r2
    5abc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5ac0:	e7ee      	b.n	5aa0 <pm_system_resume+0x54>
    5ac2:	bf00      	nop
    5ac4:	2000606c 	.word	0x2000606c
    5ac8:	20004180 	.word	0x20004180
    5acc:	20004170 	.word	0x20004170
    5ad0:	0002077d 	.word	0x0002077d

00005ad4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5ad8:	4b35      	ldr	r3, [pc, #212]	; (5bb0 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ada:	4a36      	ldr	r2, [pc, #216]	; (5bb4 <pm_system_suspend+0xe0>)
    5adc:	7d1c      	ldrb	r4, [r3, #20]
    5ade:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5ae2:	0963      	lsrs	r3, r4, #5
    5ae4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    5ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5aec:	4d32      	ldr	r5, [pc, #200]	; (5bb8 <pm_system_suspend+0xe4>)
    5aee:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5af2:	f004 081f 	and.w	r8, r4, #31
    5af6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5afa:	f013 0f01 	tst.w	r3, #1
{
    5afe:	b085      	sub	sp, #20
    5b00:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5b02:	d10a      	bne.n	5b1a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    5b04:	4601      	mov	r1, r0
    5b06:	4620      	mov	r0, r4
    5b08:	f000 f876 	bl	5bf8 <pm_policy_next_state>
		if (info != NULL) {
    5b0c:	b128      	cbz	r0, 5b1a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    5b0e:	c807      	ldmia	r0, {r0, r1, r2}
    5b10:	230c      	movs	r3, #12
    5b12:	fb03 5304 	mla	r3, r3, r4, r5
    5b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    5b1a:	230c      	movs	r3, #12
    5b1c:	4363      	muls	r3, r4
    5b1e:	18ea      	adds	r2, r5, r3
    5b20:	5cee      	ldrb	r6, [r5, r3]
    5b22:	b936      	cbnz	r6, 5b32 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    5b24:	4620      	mov	r0, r4
    5b26:	f7ff ff79 	bl	5a1c <atomic_clear_bit.constprop.0>
		ret = false;
    5b2a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5b2c:	b005      	add	sp, #20
    5b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    5b32:	1c7b      	adds	r3, r7, #1
    5b34:	d00f      	beq.n	5b56 <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    5b36:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5b3a:	4820      	ldr	r0, [pc, #128]	; (5bbc <pm_system_suspend+0xe8>)
    5b3c:	4a20      	ldr	r2, [pc, #128]	; (5bc0 <pm_system_suspend+0xec>)
    5b3e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5b42:	2100      	movs	r1, #0
    5b44:	2300      	movs	r3, #0
    5b46:	fbec 0106 	umlal	r0, r1, ip, r6
    5b4a:	f7fa fecf 	bl	8ec <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5b4e:	2101      	movs	r1, #1
    5b50:	1a38      	subs	r0, r7, r0
    5b52:	f01e fcae 	bl	244b2 <z_set_timeout_expiry>
	k_sched_lock();
    5b56:	f018 ff47 	bl	1e9e8 <k_sched_lock>
	pm_state_notify(true);
    5b5a:	2001      	movs	r0, #1
    5b5c:	f7ff ff30 	bl	59c0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b60:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5b64:	2301      	movs	r3, #1
    5b66:	fa03 f808 	lsl.w	r8, r3, r8
    5b6a:	4b16      	ldr	r3, [pc, #88]	; (5bc4 <pm_system_suspend+0xf0>)
    5b6c:	4499      	add	r9, r3
    5b6e:	e859 3f00 	ldrex	r3, [r9]
    5b72:	ea43 0308 	orr.w	r3, r3, r8
    5b76:	e849 3200 	strex	r2, r3, [r9]
    5b7a:	2a00      	cmp	r2, #0
    5b7c:	d1f7      	bne.n	5b6e <pm_system_suspend+0x9a>
    5b7e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    5b82:	230c      	movs	r3, #12
    5b84:	fb03 5504 	mla	r5, r3, r4, r5
    5b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    5b8c:	ab01      	add	r3, sp, #4
    5b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5b92:	4a0d      	ldr	r2, [pc, #52]	; (5bc8 <pm_system_suspend+0xf4>)
    5b94:	b11a      	cbz	r2, 5b9e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    5b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5b9a:	f01a fddc 	bl	20756 <pm_power_state_set>
	pm_system_resume();
    5b9e:	f7ff ff55 	bl	5a4c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    5ba2:	4620      	mov	r0, r4
    5ba4:	f7ff ff3a 	bl	5a1c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    5ba8:	f019 f8ec 	bl	1ed84 <k_sched_unlock>
	bool ret = true;
    5bac:	2001      	movs	r0, #1
    5bae:	e7bd      	b.n	5b2c <pm_system_suspend+0x58>
    5bb0:	2000606c 	.word	0x2000606c
    5bb4:	2000417c 	.word	0x2000417c
    5bb8:	20004170 	.word	0x20004170
    5bbc:	000f423f 	.word	0x000f423f
    5bc0:	000f4240 	.word	0x000f4240
    5bc4:	20004180 	.word	0x20004180
    5bc8:	00020757 	.word	0x00020757

00005bcc <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bcc:	4b05      	ldr	r3, [pc, #20]	; (5be4 <pm_constraint_get+0x18>)
    5bce:	f3bf 8f5b 	dmb	ish
    5bd2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5bd6:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    5bda:	fab0 f080 	clz	r0, r0
    5bde:	0940      	lsrs	r0, r0, #5
    5be0:	4770      	bx	lr
    5be2:	bf00      	nop
    5be4:	20004184 	.word	0x20004184

00005be8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5be8:	b908      	cbnz	r0, 5bee <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5bea:	4b02      	ldr	r3, [pc, #8]	; (5bf4 <pm_state_cpu_get_all+0xc>)
    5bec:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5bee:	2000      	movs	r0, #0
    5bf0:	4770      	bx	lr
    5bf2:	bf00      	nop
    5bf4:	00024d34 	.word	0x00024d34

00005bf8 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    5bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bfc:	b085      	sub	sp, #20
    5bfe:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5c00:	a903      	add	r1, sp, #12
    5c02:	f7ff fff1 	bl	5be8 <pm_state_cpu_get_all>
    5c06:	f8df a074 	ldr.w	sl, [pc, #116]	; 5c7c <pm_policy_next_state+0x84>
    5c0a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5c80 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5c0e:	1e44      	subs	r4, r0, #1
    5c10:	b224      	sxth	r4, r4
    5c12:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5c16:	f04f 0900 	mov.w	r9, #0
    5c1a:	1c63      	adds	r3, r4, #1
    5c1c:	d104      	bne.n	5c28 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    5c1e:	2500      	movs	r5, #0
}
    5c20:	4628      	mov	r0, r5
    5c22:	b005      	add	sp, #20
    5c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    5c28:	9a03      	ldr	r2, [sp, #12]
    5c2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5c2e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    5c32:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    5c36:	f7ff ffc9 	bl	5bcc <pm_constraint_get>
    5c3a:	b1e0      	cbz	r0, 5c76 <pm_policy_next_state+0x7e>
    5c3c:	6868      	ldr	r0, [r5, #4]
    5c3e:	f04f 0b00 	mov.w	fp, #0
    5c42:	46d4      	mov	ip, sl
    5c44:	4659      	mov	r1, fp
    5c46:	fbe0 c107 	umlal	ip, r1, r0, r7
    5c4a:	4642      	mov	r2, r8
    5c4c:	464b      	mov	r3, r9
    5c4e:	4660      	mov	r0, ip
    5c50:	f7fa fe4c 	bl	8ec <__aeabi_uldivmod>
    5c54:	9001      	str	r0, [sp, #4]
    5c56:	68a8      	ldr	r0, [r5, #8]
    5c58:	46d4      	mov	ip, sl
    5c5a:	4659      	mov	r1, fp
    5c5c:	fbe0 c107 	umlal	ip, r1, r0, r7
    5c60:	4642      	mov	r2, r8
    5c62:	464b      	mov	r3, r9
    5c64:	4660      	mov	r0, ip
    5c66:	f7fa fe41 	bl	8ec <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    5c6a:	1c72      	adds	r2, r6, #1
    5c6c:	d0d8      	beq.n	5c20 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    5c6e:	9b01      	ldr	r3, [sp, #4]
    5c70:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    5c72:	42b0      	cmp	r0, r6
    5c74:	d9d4      	bls.n	5c20 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5c76:	3c01      	subs	r4, #1
    5c78:	b224      	sxth	r4, r4
    5c7a:	e7ce      	b.n	5c1a <pm_policy_next_state+0x22>
    5c7c:	000f423f 	.word	0x000f423f
    5c80:	000f4240 	.word	0x000f4240

00005c84 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    5c84:	4904      	ldr	r1, [pc, #16]	; (5c98 <sub_bytes+0x14>)
    5c86:	1e43      	subs	r3, r0, #1
    5c88:	300f      	adds	r0, #15
    5c8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5c8e:	5c8a      	ldrb	r2, [r1, r2]
    5c90:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5c92:	4283      	cmp	r3, r0
    5c94:	d1f9      	bne.n	5c8a <sub_bytes+0x6>
	}
}
    5c96:	4770      	bx	lr
    5c98:	00026550 	.word	0x00026550

00005c9c <tc_aes128_set_encrypt_key>:
{
    5c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5c9e:	4e26      	ldr	r6, [pc, #152]	; (5d38 <tc_aes128_set_encrypt_key+0x9c>)
{
    5ca0:	4607      	mov	r7, r0
    5ca2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5ca4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    5ca6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    5ca8:	ad01      	add	r5, sp, #4
    5caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5cac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5cb0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5cb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    5cb8:	4638      	mov	r0, r7
    5cba:	2f00      	cmp	r7, #0
    5cbc:	d038      	beq.n	5d30 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    5cbe:	2c00      	cmp	r4, #0
    5cc0:	d038      	beq.n	5d34 <tc_aes128_set_encrypt_key+0x98>
    5cc2:	1f38      	subs	r0, r7, #4
    5cc4:	4621      	mov	r1, r4
    5cc6:	4602      	mov	r2, r0
    5cc8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5cca:	784b      	ldrb	r3, [r1, #1]
    5ccc:	780d      	ldrb	r5, [r1, #0]
    5cce:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5cd0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5cd4:	78cd      	ldrb	r5, [r1, #3]
    5cd6:	432b      	orrs	r3, r5
    5cd8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    5cda:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5cdc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    5ce0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5ce2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    5ce6:	d1f0      	bne.n	5cca <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5ce8:	4c14      	ldr	r4, [pc, #80]	; (5d3c <tc_aes128_set_encrypt_key+0xa0>)
    5cea:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    5cec:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    5cee:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    5cf0:	d116      	bne.n	5d20 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5cf2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    5cf6:	5ca5      	ldrb	r5, [r4, r2]
    5cf8:	0e1a      	lsrs	r2, r3, #24
    5cfa:	5ca2      	ldrb	r2, [r4, r2]
    5cfc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    5d00:	f3c3 2507 	ubfx	r5, r3, #8, #8
    5d04:	b2db      	uxtb	r3, r3
    5d06:	5d65      	ldrb	r5, [r4, r5]
    5d08:	5ce3      	ldrb	r3, [r4, r3]
    5d0a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    5d0e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    5d12:	f021 0303 	bic.w	r3, r1, #3
    5d16:	3330      	adds	r3, #48	; 0x30
    5d18:	446b      	add	r3, sp
    5d1a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    5d1e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    5d20:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    5d24:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    5d26:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    5d28:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    5d2a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    5d2c:	d1de      	bne.n	5cec <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    5d2e:	2001      	movs	r0, #1
}
    5d30:	b00d      	add	sp, #52	; 0x34
    5d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    5d34:	4620      	mov	r0, r4
    5d36:	e7fb      	b.n	5d30 <tc_aes128_set_encrypt_key+0x94>
    5d38:	00024b94 	.word	0x00024b94
    5d3c:	00026550 	.word	0x00026550

00005d40 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5d40:	4901      	ldr	r1, [pc, #4]	; (5d48 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5d42:	2210      	movs	r2, #16
	str	r2, [r1]
    5d44:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5d46:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5d48:	e000ed10 	.word	0xe000ed10

00005d4c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5d4c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5d4e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5d50:	f380 8811 	msr	BASEPRI, r0
	isb
    5d54:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5d58:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5d5c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5d5e:	b662      	cpsie	i
	isb
    5d60:	f3bf 8f6f 	isb	sy

	bx	lr
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop

00005d68 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5d68:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5d6a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5d6c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5d70:	bf20      	wfe

	msr	BASEPRI, r0
    5d72:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5d76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5d78:	4770      	bx	lr
    5d7a:	bf00      	nop

00005d7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5d7c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5d7e:	2b00      	cmp	r3, #0
    5d80:	db08      	blt.n	5d94 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d82:	2201      	movs	r2, #1
    5d84:	f000 001f 	and.w	r0, r0, #31
    5d88:	fa02 f000 	lsl.w	r0, r2, r0
    5d8c:	095b      	lsrs	r3, r3, #5
    5d8e:	4a02      	ldr	r2, [pc, #8]	; (5d98 <arch_irq_enable+0x1c>)
    5d90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5d94:	4770      	bx	lr
    5d96:	bf00      	nop
    5d98:	e000e100 	.word	0xe000e100

00005d9c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5d9c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5d9e:	2b00      	cmp	r3, #0
    5da0:	db0d      	blt.n	5dbe <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5da2:	2201      	movs	r2, #1
    5da4:	095b      	lsrs	r3, r3, #5
    5da6:	f000 001f 	and.w	r0, r0, #31
    5daa:	fa02 f000 	lsl.w	r0, r2, r0
    5dae:	3320      	adds	r3, #32
    5db0:	4a03      	ldr	r2, [pc, #12]	; (5dc0 <arch_irq_disable+0x24>)
    5db2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dba:	f3bf 8f6f 	isb	sy
}
    5dbe:	4770      	bx	lr
    5dc0:	e000e100 	.word	0xe000e100

00005dc4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5dc4:	4b05      	ldr	r3, [pc, #20]	; (5ddc <arch_irq_is_enabled+0x18>)
    5dc6:	0942      	lsrs	r2, r0, #5
    5dc8:	f000 001f 	and.w	r0, r0, #31
    5dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5dd0:	2301      	movs	r3, #1
    5dd2:	fa03 f000 	lsl.w	r0, r3, r0
}
    5dd6:	4010      	ands	r0, r2
    5dd8:	4770      	bx	lr
    5dda:	bf00      	nop
    5ddc:	e000e100 	.word	0xe000e100

00005de0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5de0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5de2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5de4:	bfa8      	it	ge
    5de6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    5dea:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5dee:	bfb8      	it	lt
    5df0:	4b06      	ldrlt	r3, [pc, #24]	; (5e0c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5df2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    5df6:	bfac      	ite	ge
    5df8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5dfc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e00:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e02:	bfb4      	ite	lt
    5e04:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e06:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    5e0a:	4770      	bx	lr
    5e0c:	e000ed14 	.word	0xe000ed14

00005e10 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    5e10:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5e12:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5e14:	4b04      	ldr	r3, [pc, #16]	; (5e28 <_arch_isr_direct_pm+0x18>)
    5e16:	699a      	ldr	r2, [r3, #24]
    5e18:	b11a      	cbz	r2, 5e22 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    5e1a:	2200      	movs	r2, #0
    5e1c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    5e1e:	f01e f861 	bl	23ee4 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5e22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5e24:	bd08      	pop	{r3, pc}
    5e26:	bf00      	nop
    5e28:	2000606c 	.word	0x2000606c

00005e2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5e2c:	bf30      	wfi
    b z_SysNmiOnReset
    5e2e:	f7ff bffd 	b.w	5e2c <z_SysNmiOnReset>
    5e32:	bf00      	nop

00005e34 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5e34:	4a0f      	ldr	r2, [pc, #60]	; (5e74 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5e36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5e38:	4b0f      	ldr	r3, [pc, #60]	; (5e78 <z_arm_prep_c+0x44>)
    5e3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5e3e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5e4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5e54:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5e58:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5e5c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    5e60:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5e64:	f018 f8b8 	bl	1dfd8 <z_bss_zero>
	z_data_copy();
    5e68:	f019 f8d0 	bl	1f00c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5e6c:	f000 f994 	bl	6198 <z_arm_interrupt_init>
	z_cstart();
    5e70:	f018 f8bc 	bl	1dfec <z_cstart>
    5e74:	00000000 	.word	0x00000000
    5e78:	e000ed00 	.word	0xe000ed00

00005e7c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5e7c:	4a09      	ldr	r2, [pc, #36]	; (5ea4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5e7e:	490a      	ldr	r1, [pc, #40]	; (5ea8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    5e80:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5e82:	6809      	ldr	r1, [r1, #0]
    5e84:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5e86:	4909      	ldr	r1, [pc, #36]	; (5eac <arch_swap+0x30>)
	_current->arch.basepri = key;
    5e88:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5e8a:	684b      	ldr	r3, [r1, #4]
    5e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5e90:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    5e92:	2300      	movs	r3, #0
    5e94:	f383 8811 	msr	BASEPRI, r3
    5e98:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5e9c:	6893      	ldr	r3, [r2, #8]
}
    5e9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    5ea0:	4770      	bx	lr
    5ea2:	bf00      	nop
    5ea4:	2000606c 	.word	0x2000606c
    5ea8:	000261a0 	.word	0x000261a0
    5eac:	e000ed00 	.word	0xe000ed00

00005eb0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5eb0:	490f      	ldr	r1, [pc, #60]	; (5ef0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5eb2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5eb4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5eb8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5eba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5ebe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5ec2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5ec4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5ec8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5ecc:	4f09      	ldr	r7, [pc, #36]	; (5ef4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5ece:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5ed2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5ed4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5ed6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5ed8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    5eda:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5edc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5ede:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5ee2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5ee6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5eea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5eee:	4770      	bx	lr
    ldr r1, =_kernel
    5ef0:	2000606c 	.word	0x2000606c
    ldr v4, =_SCS_ICSR
    5ef4:	e000ed04 	.word	0xe000ed04

00005ef8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5ef8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5efc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5efe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5f02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5f06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5f08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5f0c:	2902      	cmp	r1, #2
    beq _oops
    5f0e:	d0ff      	beq.n	5f10 <_oops>

00005f10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5f10:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5f12:	f01a fbbb 	bl	2068c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5f16:	bd01      	pop	{r0, pc}

00005f18 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5f18:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5f1c:	9b00      	ldr	r3, [sp, #0]
    5f1e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5f22:	490a      	ldr	r1, [pc, #40]	; (5f4c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5f24:	9b01      	ldr	r3, [sp, #4]
    5f26:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5f2a:	9b02      	ldr	r3, [sp, #8]
    5f2c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5f30:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5f38:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5f3c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5f40:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5f42:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5f44:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5f46:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5f48:	4770      	bx	lr
    5f4a:	bf00      	nop
    5f4c:	0001f945 	.word	0x0001f945

00005f50 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5f50:	4b07      	ldr	r3, [pc, #28]	; (5f70 <arch_switch_to_main_thread+0x20>)
    5f52:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5f54:	4610      	mov	r0, r2
    5f56:	f381 8809 	msr	PSP, r1
    5f5a:	2100      	movs	r1, #0
    5f5c:	b663      	cpsie	if
    5f5e:	f381 8811 	msr	BASEPRI, r1
    5f62:	f3bf 8f6f 	isb	sy
    5f66:	2200      	movs	r2, #0
    5f68:	2300      	movs	r3, #0
    5f6a:	f019 fceb 	bl	1f944 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5f6e:	bf00      	nop
    5f70:	2000606c 	.word	0x2000606c

00005f74 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5f74:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5f76:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5f78:	4a0b      	ldr	r2, [pc, #44]	; (5fa8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5f7a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5f7c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5f7e:	bf1e      	ittt	ne
	movne	r1, #0
    5f80:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5f82:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5f84:	f01d ffae 	blne	23ee4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5f88:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5f8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5f8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5f92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5f96:	4905      	ldr	r1, [pc, #20]	; (5fac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5f98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5f9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5f9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5f9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5fa2:	4903      	ldr	r1, [pc, #12]	; (5fb0 <_isr_wrapper+0x3c>)
	bx r1
    5fa4:	4708      	bx	r1
    5fa6:	0000      	.short	0x0000
	ldr r2, =_kernel
    5fa8:	2000606c 	.word	0x2000606c
	ldr r1, =_sw_isr_table
    5fac:	0002497c 	.word	0x0002497c
	ldr r1, =z_arm_int_exit
    5fb0:	00005fb5 	.word	0x00005fb5

00005fb4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5fb4:	4b04      	ldr	r3, [pc, #16]	; (5fc8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5fb6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5fb8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5fba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5fbc:	d003      	beq.n	5fc6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5fbe:	4903      	ldr	r1, [pc, #12]	; (5fcc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5fc4:	600a      	str	r2, [r1, #0]

00005fc6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5fc6:	4770      	bx	lr
	ldr r3, =_kernel
    5fc8:	2000606c 	.word	0x2000606c
	ldr r1, =_SCS_ICSR
    5fcc:	e000ed04 	.word	0xe000ed04

00005fd0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5fd0:	4b0d      	ldr	r3, [pc, #52]	; (6008 <bus_fault.constprop.0+0x38>)
    5fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5fd8:	0592      	lsls	r2, r2, #22
    5fda:	d508      	bpl.n	5fee <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5fe0:	0412      	lsls	r2, r2, #16
    5fe2:	d504      	bpl.n	5fee <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    5fe4:	b118      	cbz	r0, 5fee <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5fec:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5fee:	4b06      	ldr	r3, [pc, #24]	; (6008 <bus_fault.constprop.0+0x38>)
    5ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5ff4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5ff6:	bf58      	it	pl
    5ff8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5ffc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5ffe:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    6002:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6004:	7008      	strb	r0, [r1, #0]

	return reason;
}
    6006:	4770      	bx	lr
    6008:	e000ed00 	.word	0xe000ed00

0000600c <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    600c:	4b0e      	ldr	r3, [pc, #56]	; (6048 <mem_manage_fault.constprop.0+0x3c>)
    600e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6014:	0792      	lsls	r2, r2, #30
    6016:	d508      	bpl.n	602a <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    6018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    601a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    601c:	0612      	lsls	r2, r2, #24
    601e:	d504      	bpl.n	602a <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    6020:	b118      	cbz	r0, 602a <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6028:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    602a:	4b07      	ldr	r3, [pc, #28]	; (6048 <mem_manage_fault.constprop.0+0x3c>)
    602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    602e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6032:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6034:	bf58      	it	pl
    6036:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    603a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    603c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6040:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6042:	7008      	strb	r0, [r1, #0]
}
    6044:	4770      	bx	lr
    6046:	bf00      	nop
    6048:	e000ed00 	.word	0xe000ed00

0000604c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    604c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    604e:	4b48      	ldr	r3, [pc, #288]	; (6170 <z_arm_fault+0x124>)
    6050:	685b      	ldr	r3, [r3, #4]
{
    6052:	b08a      	sub	sp, #40	; 0x28
    6054:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6056:	f3c3 0308 	ubfx	r3, r3, #0, #9
    605a:	2500      	movs	r5, #0
    605c:	f385 8811 	msr	BASEPRI, r5
    6060:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6064:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    6068:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    606c:	d111      	bne.n	6092 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    606e:	f002 010c 	and.w	r1, r2, #12
    6072:	2908      	cmp	r1, #8
    6074:	d00d      	beq.n	6092 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6076:	0711      	lsls	r1, r2, #28
    6078:	d401      	bmi.n	607e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    607a:	4606      	mov	r6, r0
			*nested_exc = true;
    607c:	2501      	movs	r5, #1
	*recoverable = false;
    607e:	2200      	movs	r2, #0
	switch (fault) {
    6080:	3b03      	subs	r3, #3
	*recoverable = false;
    6082:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    6086:	2b03      	cmp	r3, #3
    6088:	d86a      	bhi.n	6160 <z_arm_fault+0x114>
    608a:	e8df f003 	tbb	[pc, r3]
    608e:	5404      	.short	0x5404
    6090:	5c58      	.short	0x5c58
		return NULL;
    6092:	462e      	mov	r6, r5
    6094:	e7f3      	b.n	607e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6096:	4b36      	ldr	r3, [pc, #216]	; (6170 <z_arm_fault+0x124>)
    6098:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    609a:	f014 0402 	ands.w	r4, r4, #2
    609e:	d15f      	bne.n	6160 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    60a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60a2:	2a00      	cmp	r2, #0
    60a4:	db14      	blt.n	60d0 <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    60a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60a8:	0052      	lsls	r2, r2, #1
    60aa:	d511      	bpl.n	60d0 <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
    60ac:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    60ae:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    60b2:	f64d 7202 	movw	r2, #57090	; 0xdf02
    60b6:	4291      	cmp	r1, r2
    60b8:	d009      	beq.n	60ce <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    60ba:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    60be:	b302      	cbz	r2, 6102 <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
    60c0:	f10d 0107 	add.w	r1, sp, #7
    60c4:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    60c6:	f7ff ffa1 	bl	600c <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    60ca:	4604      	mov	r4, r0
		break;
    60cc:	e000      	b.n	60d0 <z_arm_fault+0x84>
			reason = esf->basic.r0;
    60ce:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    60d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60d4:	b99b      	cbnz	r3, 60fe <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    60d6:	2220      	movs	r2, #32
    60d8:	4631      	mov	r1, r6
    60da:	a802      	add	r0, sp, #8
    60dc:	f01a fb24 	bl	20728 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    60e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    60e2:	2d00      	cmp	r5, #0
    60e4:	d03e      	beq.n	6164 <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    60e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    60ea:	b922      	cbnz	r2, 60f6 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    60ec:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    60f0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    60f4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    60f6:	a902      	add	r1, sp, #8
    60f8:	4620      	mov	r0, r4
    60fa:	f01a fac5 	bl	20688 <z_arm_fatal_error>
}
    60fe:	b00a      	add	sp, #40	; 0x28
    6100:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    6102:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    6106:	b12a      	cbz	r2, 6114 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
    6108:	f10d 0107 	add.w	r1, sp, #7
    610c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    610e:	f7ff ff5f 	bl	5fd0 <bus_fault.constprop.0>
    6112:	e7da      	b.n	60ca <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    6114:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    6116:	b292      	uxth	r2, r2
    6118:	2a00      	cmp	r2, #0
    611a:	d0d9      	beq.n	60d0 <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    611c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    611e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    612a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    612e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    6132:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    6134:	e7cc      	b.n	60d0 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    6136:	f10d 0107 	add.w	r1, sp, #7
    613a:	2000      	movs	r0, #0
    613c:	e7c3      	b.n	60c6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    613e:	f10d 0107 	add.w	r1, sp, #7
    6142:	2000      	movs	r0, #0
    6144:	e7e3      	b.n	610e <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6146:	4b0a      	ldr	r3, [pc, #40]	; (6170 <z_arm_fault+0x124>)
    6148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    614a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    614e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6156:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    615a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    615e:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6160:	2400      	movs	r4, #0
    6162:	e7b5      	b.n	60d0 <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6164:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6168:	f023 0301 	bic.w	r3, r3, #1
    616c:	e7c2      	b.n	60f4 <z_arm_fault+0xa8>
    616e:	bf00      	nop
    6170:	e000ed00 	.word	0xe000ed00

00006174 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6174:	4a02      	ldr	r2, [pc, #8]	; (6180 <z_arm_fault_init+0xc>)
    6176:	6953      	ldr	r3, [r2, #20]
    6178:	f043 0310 	orr.w	r3, r3, #16
    617c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    617e:	4770      	bx	lr
    6180:	e000ed00 	.word	0xe000ed00

00006184 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6184:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6188:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    618c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    618e:	4672      	mov	r2, lr
	bl z_arm_fault
    6190:	f7ff ff5c 	bl	604c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6194:	bd01      	pop	{r0, pc}
    6196:	bf00      	nop

00006198 <z_arm_interrupt_init>:
    6198:	4804      	ldr	r0, [pc, #16]	; (61ac <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    619a:	2300      	movs	r3, #0
    619c:	2120      	movs	r1, #32
    619e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    61a0:	3301      	adds	r3, #1
    61a2:	2b30      	cmp	r3, #48	; 0x30
    61a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    61a8:	d1f9      	bne.n	619e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    61aa:	4770      	bx	lr
    61ac:	e000e100 	.word	0xe000e100

000061b0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    61b0:	f01e fb22 	bl	247f8 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    61b4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    61b6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    61ba:	4808      	ldr	r0, [pc, #32]	; (61dc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    61bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    61c0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    61c2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    61c6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    61ca:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    61cc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    61ce:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    61d2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    61d6:	f7ff fe2d 	bl	5e34 <z_arm_prep_c>
    61da:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    61dc:	20008580 	.word	0x20008580

000061e0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    61e0:	4b06      	ldr	r3, [pc, #24]	; (61fc <z_impl_k_thread_abort+0x1c>)
    61e2:	689b      	ldr	r3, [r3, #8]
    61e4:	4283      	cmp	r3, r0
    61e6:	d107      	bne.n	61f8 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    61e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    61ec:	b123      	cbz	r3, 61f8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    61ee:	4a04      	ldr	r2, [pc, #16]	; (6200 <z_impl_k_thread_abort+0x20>)
    61f0:	6853      	ldr	r3, [r2, #4]
    61f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    61f6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    61f8:	f018 bea4 	b.w	1ef44 <z_thread_abort>
    61fc:	2000606c 	.word	0x2000606c
    6200:	e000ed00 	.word	0xe000ed00

00006204 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6204:	4b02      	ldr	r3, [pc, #8]	; (6210 <z_arm_configure_static_mpu_regions+0xc>)
    6206:	4a03      	ldr	r2, [pc, #12]	; (6214 <z_arm_configure_static_mpu_regions+0x10>)
    6208:	4803      	ldr	r0, [pc, #12]	; (6218 <z_arm_configure_static_mpu_regions+0x14>)
    620a:	2101      	movs	r1, #1
    620c:	f000 b85e 	b.w	62cc <arm_core_mpu_configure_static_mpu_regions>
    6210:	20040000 	.word	0x20040000
    6214:	20000000 	.word	0x20000000
    6218:	00024d34 	.word	0x00024d34

0000621c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    621c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    621e:	4f1f      	ldr	r7, [pc, #124]	; (629c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6220:	2600      	movs	r6, #0
    6222:	428e      	cmp	r6, r1
    6224:	db01      	blt.n	622a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6226:	4610      	mov	r0, r2
    6228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    622a:	6844      	ldr	r4, [r0, #4]
    622c:	b39c      	cbz	r4, 6296 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    622e:	b153      	cbz	r3, 6246 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6230:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6234:	ea14 0f0c 	tst.w	r4, ip
    6238:	d118      	bne.n	626c <mpu_configure_regions+0x50>
		&&
    623a:	2c1f      	cmp	r4, #31
    623c:	d916      	bls.n	626c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    623e:	6805      	ldr	r5, [r0, #0]
		&&
    6240:	ea1c 0f05 	tst.w	ip, r5
    6244:	d112      	bne.n	626c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6246:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    6248:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    624a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    624e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    6250:	d90f      	bls.n	6272 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    6252:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6256:	d80e      	bhi.n	6276 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6258:	3c01      	subs	r4, #1
    625a:	fab4 f484 	clz	r4, r4
    625e:	f1c4 041f 	rsb	r4, r4, #31
    6262:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6264:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6266:	ea4c 0404 	orr.w	r4, ip, r4
    626a:	d906      	bls.n	627a <mpu_configure_regions+0x5e>
			return -EINVAL;
    626c:	f06f 0215 	mvn.w	r2, #21
    6270:	e7d9      	b.n	6226 <mpu_configure_regions+0xa>
		return REGION_32B;
    6272:	2408      	movs	r4, #8
    6274:	e7f6      	b.n	6264 <mpu_configure_regions+0x48>
		return REGION_4G;
    6276:	243e      	movs	r4, #62	; 0x3e
    6278:	e7f4      	b.n	6264 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    627a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    627e:	4315      	orrs	r5, r2
    6280:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6284:	f044 0401 	orr.w	r4, r4, #1
    6288:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    628c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    6290:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6292:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    6296:	3601      	adds	r6, #1
    6298:	300c      	adds	r0, #12
    629a:	e7c2      	b.n	6222 <mpu_configure_regions+0x6>
    629c:	e000ed00 	.word	0xe000ed00

000062a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    62a0:	4b04      	ldr	r3, [pc, #16]	; (62b4 <arm_core_mpu_enable+0x14>)
    62a2:	2205      	movs	r2, #5
    62a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    62a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62ac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    62b0:	4770      	bx	lr
    62b2:	bf00      	nop
    62b4:	e000ed00 	.word	0xe000ed00

000062b8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    62b8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    62bc:	4b02      	ldr	r3, [pc, #8]	; (62c8 <arm_core_mpu_disable+0x10>)
    62be:	2200      	movs	r2, #0
    62c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    62c4:	4770      	bx	lr
    62c6:	bf00      	nop
    62c8:	e000ed00 	.word	0xe000ed00

000062cc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    62cc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    62ce:	4c03      	ldr	r4, [pc, #12]	; (62dc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    62d0:	2301      	movs	r3, #1
    62d2:	7822      	ldrb	r2, [r4, #0]
    62d4:	f7ff ffa2 	bl	621c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    62d8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    62da:	bd10      	pop	{r4, pc}
    62dc:	200060da 	.word	0x200060da

000062e0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    62e0:	4914      	ldr	r1, [pc, #80]	; (6334 <z_arm_mpu_init+0x54>)
    62e2:	6808      	ldr	r0, [r1, #0]
    62e4:	2808      	cmp	r0, #8
{
    62e6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    62e8:	d821      	bhi.n	632e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    62ea:	f7ff ffe5 	bl	62b8 <arm_core_mpu_disable>
    62ee:	4c12      	ldr	r4, [pc, #72]	; (6338 <z_arm_mpu_init+0x58>)
    62f0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    62f2:	2200      	movs	r2, #0
    62f4:	4290      	cmp	r0, r2
    62f6:	f101 010c 	add.w	r1, r1, #12
    62fa:	d105      	bne.n	6308 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    62fc:	4b0f      	ldr	r3, [pc, #60]	; (633c <z_arm_mpu_init+0x5c>)
    62fe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6300:	f7ff ffce 	bl	62a0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6304:	2000      	movs	r0, #0
}
    6306:	bd10      	pop	{r4, pc}
    6308:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    630c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6310:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6314:	4313      	orrs	r3, r2
    6316:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    631a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    631e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6322:	f043 0301 	orr.w	r3, r3, #1
    6326:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    632a:	3201      	adds	r2, #1
    632c:	e7e2      	b.n	62f4 <z_arm_mpu_init+0x14>
		return -1;
    632e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6332:	e7e8      	b.n	6306 <z_arm_mpu_init+0x26>
    6334:	00024d40 	.word	0x00024d40
    6338:	e000ed00 	.word	0xe000ed00
    633c:	200060da 	.word	0x200060da

00006340 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6340:	4b01      	ldr	r3, [pc, #4]	; (6348 <__stdout_hook_install+0x8>)
    6342:	6018      	str	r0, [r3, #0]
}
    6344:	4770      	bx	lr
    6346:	bf00      	nop
    6348:	200002bc 	.word	0x200002bc

0000634c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    634c:	f04f 0320 	mov.w	r3, #32
    6350:	f3ef 8211 	mrs	r2, BASEPRI
    6354:	f383 8812 	msr	BASEPRI_MAX, r3
    6358:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    635c:	4906      	ldr	r1, [pc, #24]	; (6378 <nordicsemi_nrf52_init+0x2c>)
    635e:	2301      	movs	r3, #1
    6360:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6364:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6368:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    636c:	f382 8811 	msr	BASEPRI, r2
    6370:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6374:	2000      	movs	r0, #0
    6376:	4770      	bx	lr
    6378:	4001e000 	.word	0x4001e000

0000637c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    637c:	b120      	cbz	r0, 6388 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    637e:	4b03      	ldr	r3, [pc, #12]	; (638c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6380:	0180      	lsls	r0, r0, #6
    6382:	f043 0301 	orr.w	r3, r3, #1
    6386:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6388:	4770      	bx	lr
    638a:	bf00      	nop
    638c:	00024c00 	.word	0x00024c00

00006390 <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    6390:	b538      	push	{r3, r4, r5, lr}
    6392:	480c      	ldr	r0, [pc, #48]	; (63c4 <board_particle_argon_init+0x34>)
    6394:	f017 fdb2 	bl	1defc <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    6398:	4605      	mov	r5, r0
    639a:	b180      	cbz	r0, 63be <board_particle_argon_init+0x2e>
    639c:	4809      	ldr	r0, [pc, #36]	; (63c4 <board_particle_argon_init+0x34>)
    639e:	f017 fdad 	bl	1defc <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    63a2:	4604      	mov	r4, r0
    63a4:	b158      	cbz	r0, 63be <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    63a6:	f241 6201 	movw	r2, #5633	; 0x1601
    63aa:	2119      	movs	r1, #25
    63ac:	4628      	mov	r0, r5
    63ae:	f01a f9f0 	bl	20792 <z_impl_gpio_pin_configure.isra.0>
    63b2:	f641 2201 	movw	r2, #6657	; 0x1a01
    63b6:	2102      	movs	r1, #2
    63b8:	4620      	mov	r0, r4
    63ba:	f01a f9ea 	bl	20792 <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    63be:	2000      	movs	r0, #0
    63c0:	bd38      	pop	{r3, r4, r5, pc}
    63c2:	bf00      	nop
    63c4:	0002665f 	.word	0x0002665f

000063c8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    63c8:	b430      	push	{r4, r5}
    63ca:	4603      	mov	r3, r0
    63cc:	4608      	mov	r0, r1
	switch (src->type) {
    63ce:	781a      	ldrb	r2, [r3, #0]
    63d0:	2a01      	cmp	r2, #1
    63d2:	d013      	beq.n	63fc <uuid_to_uuid128+0x34>
    63d4:	2a02      	cmp	r2, #2
    63d6:	d026      	beq.n	6426 <uuid_to_uuid128+0x5e>
    63d8:	b972      	cbnz	r2, 63f8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    63da:	4a15      	ldr	r2, [pc, #84]	; (6430 <uuid_to_uuid128+0x68>)
    63dc:	f102 0410 	add.w	r4, r2, #16
    63e0:	f852 5b04 	ldr.w	r5, [r2], #4
    63e4:	f841 5b04 	str.w	r5, [r1], #4
    63e8:	42a2      	cmp	r2, r4
    63ea:	d1f9      	bne.n	63e0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    63ec:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    63ee:	7812      	ldrb	r2, [r2, #0]
    63f0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    63f2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    63f4:	0a1b      	lsrs	r3, r3, #8
    63f6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    63f8:	bc30      	pop	{r4, r5}
    63fa:	4770      	bx	lr
		*dst = uuid128_base;
    63fc:	4a0c      	ldr	r2, [pc, #48]	; (6430 <uuid_to_uuid128+0x68>)
    63fe:	f102 0410 	add.w	r4, r2, #16
    6402:	f852 5b04 	ldr.w	r5, [r2], #4
    6406:	f841 5b04 	str.w	r5, [r1], #4
    640a:	42a2      	cmp	r2, r4
    640c:	d1f9      	bne.n	6402 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    640e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    6410:	7812      	ldrb	r2, [r2, #0]
    6412:	700a      	strb	r2, [r1, #0]
    6414:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    6418:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    641a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    641c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    641e:	0a1b      	lsrs	r3, r3, #8
    6420:	7382      	strb	r2, [r0, #14]
    6422:	7403      	strb	r3, [r0, #16]
}
    6424:	e7e8      	b.n	63f8 <uuid_to_uuid128+0x30>
}
    6426:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    6428:	2211      	movs	r2, #17
    642a:	4619      	mov	r1, r3
    642c:	f01a b97c 	b.w	20728 <memcpy>
    6430:	00026666 	.word	0x00026666

00006434 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6434:	b538      	push	{r3, r4, r5, lr}
    6436:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    6438:	4805      	ldr	r0, [pc, #20]	; (6450 <bt_buf_get_rx+0x1c>)
    643a:	f01c fe42 	bl	230c2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    643e:	4604      	mov	r4, r0
    6440:	b120      	cbz	r0, 644c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    6442:	2100      	movs	r1, #0
    6444:	3008      	adds	r0, #8
    6446:	f01c fe61 	bl	2310c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    644a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    644c:	4620      	mov	r0, r4
    644e:	bd38      	pop	{r3, r4, r5, pc}
    6450:	20000c1c 	.word	0x20000c1c

00006454 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6454:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    6456:	490b      	ldr	r1, [pc, #44]	; (6484 <bt_buf_get_cmd_complete+0x30>)
{
    6458:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    645a:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    645e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    6460:	b920      	cbnz	r0, 646c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6466:	2001      	movs	r0, #1
    6468:	f7ff bfe4 	b.w	6434 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    646c:	f01c fe5f 	bl	2312e <net_buf_ref>
    6470:	2301      	movs	r3, #1
		buf->len = 0U;
    6472:	2100      	movs	r1, #0
    6474:	7503      	strb	r3, [r0, #20]
    6476:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    6478:	4604      	mov	r4, r0
    647a:	3008      	adds	r0, #8
    647c:	f01c fe46 	bl	2310c <net_buf_simple_reserve>
}
    6480:	4620      	mov	r0, r4
    6482:	bd10      	pop	{r4, pc}
    6484:	20000000 	.word	0x20000000

00006488 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    6488:	b570      	push	{r4, r5, r6, lr}
    648a:	4604      	mov	r4, r0
	switch (evt) {
    648c:	2c0f      	cmp	r4, #15
{
    648e:	460d      	mov	r5, r1
    6490:	4610      	mov	r0, r2
    6492:	4619      	mov	r1, r3
	switch (evt) {
    6494:	d805      	bhi.n	64a2 <bt_buf_get_evt+0x1a>
    6496:	2c0d      	cmp	r4, #13
    6498:	d912      	bls.n	64c0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    649a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    649e:	f7ff bfd9 	b.w	6454 <bt_buf_get_cmd_complete>
	switch (evt) {
    64a2:	2c13      	cmp	r4, #19
    64a4:	d10c      	bne.n	64c0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    64a6:	480b      	ldr	r0, [pc, #44]	; (64d4 <bt_buf_get_evt+0x4c>)
    64a8:	f01c fe0b 	bl	230c2 <net_buf_alloc_fixed>
			if (buf) {
    64ac:	4604      	mov	r4, r0
    64ae:	b128      	cbz	r0, 64bc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    64b0:	2100      	movs	r1, #0
    64b2:	3008      	adds	r0, #8
    64b4:	f01c fe2a 	bl	2310c <net_buf_simple_reserve>
    64b8:	2301      	movs	r3, #1
    64ba:	7523      	strb	r3, [r4, #20]
}
    64bc:	4620      	mov	r0, r4
    64be:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    64c0:	4602      	mov	r2, r0
    64c2:	460b      	mov	r3, r1
		if (discardable) {
    64c4:	b10d      	cbz	r5, 64ca <bt_buf_get_evt+0x42>
    64c6:	4804      	ldr	r0, [pc, #16]	; (64d8 <bt_buf_get_evt+0x50>)
    64c8:	e7ee      	b.n	64a8 <bt_buf_get_evt+0x20>
}
    64ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    64ce:	2001      	movs	r0, #1
    64d0:	f7ff bfb0 	b.w	6434 <bt_buf_get_rx>
    64d4:	20000c48 	.word	0x20000c48
    64d8:	20000b98 	.word	0x20000b98

000064dc <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    64dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    64de:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    64e0:	781a      	ldrb	r2, [r3, #0]
    64e2:	b972      	cbnz	r2, 6502 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    64e4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    64e8:	4620      	mov	r0, r4
    64ea:	f001 ff4f 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
    64ee:	4605      	mov	r5, r0
    64f0:	b940      	cbnz	r0, 6504 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    64f2:	4b08      	ldr	r3, [pc, #32]	; (6514 <hci_disconn_complete_prio+0x38>)
    64f4:	881a      	ldrh	r2, [r3, #0]
    64f6:	b922      	cbnz	r2, 6502 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    64f8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    64fc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    6500:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    6502:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6504:	2101      	movs	r1, #1
    6506:	f001 ff49 	bl	839c <bt_conn_set_state>
	bt_conn_unref(conn);
    650a:	4628      	mov	r0, r5
}
    650c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6510:	f01a bf1d 	b.w	2134e <bt_conn_unref>
    6514:	200060ac 	.word	0x200060ac

00006518 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    6518:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    651a:	2101      	movs	r1, #1
    651c:	4604      	mov	r4, r0
    651e:	3008      	adds	r0, #8
    6520:	f01c fe68 	bl	231f4 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6524:	4621      	mov	r1, r4
    6526:	4a03      	ldr	r2, [pc, #12]	; (6534 <hci_le_meta_event+0x1c>)
    6528:	7800      	ldrb	r0, [r0, #0]
}
    652a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    652e:	2308      	movs	r3, #8
    6530:	f01a b9f4 	b.w	2091c <handle_event>
    6534:	00024d90 	.word	0x00024d90

00006538 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6538:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    653a:	4c0c      	ldr	r4, [pc, #48]	; (656c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    653c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    653e:	2205      	movs	r2, #5
    6540:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    6544:	f002 f8e4 	bl	8710 <bt_conn_lookup_state_le>
		if (!conn) {
    6548:	b970      	cbnz	r0, 6568 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    654a:	4b09      	ldr	r3, [pc, #36]	; (6570 <find_pending_connect.part.0+0x38>)
    654c:	6818      	ldr	r0, [r3, #0]
    654e:	889a      	ldrh	r2, [r3, #4]
    6550:	9000      	str	r0, [sp, #0]
    6552:	799b      	ldrb	r3, [r3, #6]
    6554:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    6558:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    655c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    6560:	2204      	movs	r2, #4
    6562:	4669      	mov	r1, sp
    6564:	f002 f8d4 	bl	8710 <bt_conn_lookup_state_le>
}
    6568:	b002      	add	sp, #8
    656a:	bd10      	pop	{r4, pc}
    656c:	20000000 	.word	0x20000000
    6570:	00024bdd 	.word	0x00024bdd

00006574 <hci_cmd_done>:
{
    6574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6576:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6578:	7990      	ldrb	r0, [r2, #6]
{
    657a:	460e      	mov	r6, r1
    657c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    657e:	f013 fcdb 	bl	19f38 <net_buf_pool_get>
    6582:	4b28      	ldr	r3, [pc, #160]	; (6624 <hci_cmd_done+0xb0>)
    6584:	4283      	cmp	r3, r0
    6586:	d14b      	bne.n	6620 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    6588:	4620      	mov	r0, r4
    658a:	f013 fcdd 	bl	19f48 <net_buf_id>
    658e:	4d26      	ldr	r5, [pc, #152]	; (6628 <hci_cmd_done+0xb4>)
    6590:	230c      	movs	r3, #12
    6592:	fb03 5000 	mla	r0, r3, r0, r5
    6596:	8843      	ldrh	r3, [r0, #2]
    6598:	42bb      	cmp	r3, r7
    659a:	d141      	bne.n	6620 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    659c:	4f23      	ldr	r7, [pc, #140]	; (662c <hci_cmd_done+0xb8>)
    659e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    65a2:	b120      	cbz	r0, 65ae <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    65a4:	f013 fd8c 	bl	1a0c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    65a8:	2300      	movs	r3, #0
    65aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    65ae:	4620      	mov	r0, r4
    65b0:	f013 fcca 	bl	19f48 <net_buf_id>
    65b4:	270c      	movs	r7, #12
    65b6:	fb07 5000 	mla	r0, r7, r0, r5
    65ba:	6843      	ldr	r3, [r0, #4]
    65bc:	b19b      	cbz	r3, 65e6 <hci_cmd_done+0x72>
    65be:	b996      	cbnz	r6, 65e6 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    65c0:	4620      	mov	r0, r4
    65c2:	f013 fcc1 	bl	19f48 <net_buf_id>
    65c6:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    65ca:	2101      	movs	r1, #1
    65cc:	6842      	ldr	r2, [r0, #4]
    65ce:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    65d2:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    65d4:	f003 071f 	and.w	r7, r3, #31
    65d8:	40b9      	lsls	r1, r7
	if (val) {
    65da:	095b      	lsrs	r3, r3, #5
    65dc:	b1d2      	cbz	r2, 6614 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    65de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    65e2:	f01a f9c2 	bl	2096a <atomic_or>
	if (cmd(buf)->sync) {
    65e6:	4620      	mov	r0, r4
    65e8:	f013 fcae 	bl	19f48 <net_buf_id>
    65ec:	270c      	movs	r7, #12
    65ee:	fb07 5000 	mla	r0, r7, r0, r5
    65f2:	6883      	ldr	r3, [r0, #8]
    65f4:	b1a3      	cbz	r3, 6620 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    65f6:	4620      	mov	r0, r4
    65f8:	f013 fca6 	bl	19f48 <net_buf_id>
    65fc:	4378      	muls	r0, r7
    65fe:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    6600:	4620      	mov	r0, r4
    6602:	f013 fca1 	bl	19f48 <net_buf_id>
    6606:	fb07 5500 	mla	r5, r7, r0, r5
    660a:	68a8      	ldr	r0, [r5, #8]
}
    660c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    6610:	f017 bf84 	b.w	1e51c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6614:	43c9      	mvns	r1, r1
    6616:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    661a:	f01a f997 	bl	2094c <atomic_and>
    661e:	e7e2      	b.n	65e6 <hci_cmd_done+0x72>
    6620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6622:	bf00      	nop
    6624:	20000bf0 	.word	0x20000bf0
    6628:	200041a4 	.word	0x200041a4
    662c:	20000000 	.word	0x20000000

00006630 <hci_cmd_status>:
{
    6630:	b538      	push	{r3, r4, r5, lr}
    6632:	2104      	movs	r1, #4
    6634:	4604      	mov	r4, r0
    6636:	3008      	adds	r0, #8
    6638:	f01c fddc 	bl	231f4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    663c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    663e:	7801      	ldrb	r1, [r0, #0]
    6640:	8840      	ldrh	r0, [r0, #2]
    6642:	4622      	mov	r2, r4
    6644:	f7ff ff96 	bl	6574 <hci_cmd_done>
	if (ncmd) {
    6648:	b125      	cbz	r5, 6654 <hci_cmd_status+0x24>
    664a:	4803      	ldr	r0, [pc, #12]	; (6658 <hci_cmd_status+0x28>)
}
    664c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6650:	f017 bf64 	b.w	1e51c <z_impl_k_sem_give>
    6654:	bd38      	pop	{r3, r4, r5, pc}
    6656:	bf00      	nop
    6658:	20000118 	.word	0x20000118

0000665c <hci_cmd_complete>:
{
    665c:	b538      	push	{r3, r4, r5, lr}
    665e:	2103      	movs	r1, #3
    6660:	4604      	mov	r4, r0
    6662:	3008      	adds	r0, #8
    6664:	f01c fdc6 	bl	231f4 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6668:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    666a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    666c:	7819      	ldrb	r1, [r3, #0]
    666e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6672:	4622      	mov	r2, r4
    6674:	f7ff ff7e 	bl	6574 <hci_cmd_done>
	if (ncmd) {
    6678:	b125      	cbz	r5, 6684 <hci_cmd_complete+0x28>
    667a:	4803      	ldr	r0, [pc, #12]	; (6688 <hci_cmd_complete+0x2c>)
}
    667c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6680:	f017 bf4c 	b.w	1e51c <z_impl_k_sem_give>
    6684:	bd38      	pop	{r3, r4, r5, pc}
    6686:	bf00      	nop
    6688:	20000118 	.word	0x20000118

0000668c <bt_hci_cmd_state_set_init>:
{
    668c:	b510      	push	{r4, lr}
	state->bit = bit;
    668e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    6692:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6696:	720b      	strb	r3, [r1, #8]
{
    6698:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    669a:	f013 fc55 	bl	19f48 <net_buf_id>
    669e:	4b03      	ldr	r3, [pc, #12]	; (66ac <bt_hci_cmd_state_set_init+0x20>)
    66a0:	220c      	movs	r2, #12
    66a2:	fb02 3300 	mla	r3, r2, r0, r3
    66a6:	605c      	str	r4, [r3, #4]
}
    66a8:	bd10      	pop	{r4, pc}
    66aa:	bf00      	nop
    66ac:	200041a4 	.word	0x200041a4

000066b0 <bt_hci_cmd_create>:
{
    66b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    66b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66bc:	4606      	mov	r6, r0
    66be:	4817      	ldr	r0, [pc, #92]	; (671c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    66c0:	4d17      	ldr	r5, [pc, #92]	; (6720 <bt_hci_cmd_create+0x70>)
{
    66c2:	460f      	mov	r7, r1
    66c4:	f01c fcfd 	bl	230c2 <net_buf_alloc_fixed>
    66c8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    66ca:	f100 0a08 	add.w	sl, r0, #8
    66ce:	2100      	movs	r1, #0
    66d0:	f04f 0800 	mov.w	r8, #0
    66d4:	4650      	mov	r0, sl
    66d6:	f01c fd19 	bl	2310c <net_buf_simple_reserve>
    66da:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    66de:	4620      	mov	r0, r4
    66e0:	f013 fc32 	bl	19f48 <net_buf_id>
    66e4:	f04f 090c 	mov.w	r9, #12
    66e8:	fb09 5000 	mla	r0, r9, r0, r5
    66ec:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    66ee:	4620      	mov	r0, r4
    66f0:	f013 fc2a 	bl	19f48 <net_buf_id>
    66f4:	fb09 5000 	mla	r0, r9, r0, r5
    66f8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    66fc:	4620      	mov	r0, r4
    66fe:	f013 fc23 	bl	19f48 <net_buf_id>
    6702:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    6706:	2103      	movs	r1, #3
    6708:	f8c5 8004 	str.w	r8, [r5, #4]
    670c:	4650      	mov	r0, sl
    670e:	f01c fd40 	bl	23192 <net_buf_simple_add>
	hdr->param_len = param_len;
    6712:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6714:	8006      	strh	r6, [r0, #0]
}
    6716:	4620      	mov	r0, r4
    6718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    671c:	20000bf0 	.word	0x20000bf0
    6720:	200041a4 	.word	0x200041a4

00006724 <bt_hci_cmd_send_sync>:
{
    6724:	b5f0      	push	{r4, r5, r6, r7, lr}
    6726:	4615      	mov	r5, r2
    6728:	b087      	sub	sp, #28
	if (!buf) {
    672a:	460c      	mov	r4, r1
    672c:	b921      	cbnz	r1, 6738 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    672e:	f7ff ffbf 	bl	66b0 <bt_hci_cmd_create>
		if (!buf) {
    6732:	4604      	mov	r4, r0
    6734:	2800      	cmp	r0, #0
    6736:	d048      	beq.n	67ca <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6738:	2201      	movs	r2, #1
    673a:	2100      	movs	r1, #0
    673c:	4668      	mov	r0, sp
    673e:	f01d fcb4 	bl	240aa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    6742:	4620      	mov	r0, r4
    6744:	f013 fc00 	bl	19f48 <net_buf_id>
    6748:	4f21      	ldr	r7, [pc, #132]	; (67d0 <bt_hci_cmd_send_sync+0xac>)
    674a:	230c      	movs	r3, #12
    674c:	fb03 7000 	mla	r0, r3, r0, r7
    6750:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    6754:	4620      	mov	r0, r4
    6756:	f01c fcea 	bl	2312e <net_buf_ref>
    675a:	4601      	mov	r1, r0
    675c:	481d      	ldr	r0, [pc, #116]	; (67d4 <bt_hci_cmd_send_sync+0xb0>)
    675e:	f01c fcd9 	bl	23114 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    6762:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6766:	2300      	movs	r3, #0
    6768:	4668      	mov	r0, sp
    676a:	f017 fefd 	bl	1e568 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    676e:	4606      	mov	r6, r0
    6770:	b180      	cbz	r0, 6794 <bt_hci_cmd_send_sync+0x70>
    6772:	4a19      	ldr	r2, [pc, #100]	; (67d8 <bt_hci_cmd_send_sync+0xb4>)
    6774:	4919      	ldr	r1, [pc, #100]	; (67dc <bt_hci_cmd_send_sync+0xb8>)
    6776:	481a      	ldr	r0, [pc, #104]	; (67e0 <bt_hci_cmd_send_sync+0xbc>)
    6778:	f240 1331 	movw	r3, #305	; 0x131
    677c:	f018 ffcf 	bl	1f71e <printk>
    6780:	4818      	ldr	r0, [pc, #96]	; (67e4 <bt_hci_cmd_send_sync+0xc0>)
    6782:	4631      	mov	r1, r6
    6784:	f018 ffcb 	bl	1f71e <printk>
    6788:	4040      	eors	r0, r0
    678a:	f380 8811 	msr	BASEPRI, r0
    678e:	f04f 0003 	mov.w	r0, #3
    6792:	df02      	svc	2
	status = cmd(buf)->status;
    6794:	4620      	mov	r0, r4
    6796:	f013 fbd7 	bl	19f48 <net_buf_id>
    679a:	230c      	movs	r3, #12
    679c:	4358      	muls	r0, r3
    679e:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    67a0:	b156      	cbz	r6, 67b8 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    67a2:	4620      	mov	r0, r4
    67a4:	f013 fc8c 	bl	1a0c0 <net_buf_unref>
			return -EIO;
    67a8:	2e09      	cmp	r6, #9
    67aa:	bf0c      	ite	eq
    67ac:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    67b0:	f06f 0004 	mvnne.w	r0, #4
}
    67b4:	b007      	add	sp, #28
    67b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    67b8:	b115      	cbz	r5, 67c0 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    67ba:	602c      	str	r4, [r5, #0]
	return 0;
    67bc:	4630      	mov	r0, r6
    67be:	e7f9      	b.n	67b4 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    67c0:	4620      	mov	r0, r4
    67c2:	f013 fc7d 	bl	1a0c0 <net_buf_unref>
	return 0;
    67c6:	4628      	mov	r0, r5
    67c8:	e7f4      	b.n	67b4 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    67ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
    67ce:	e7f1      	b.n	67b4 <bt_hci_cmd_send_sync+0x90>
    67d0:	200041a4 	.word	0x200041a4
    67d4:	20000134 	.word	0x20000134
    67d8:	00026677 	.word	0x00026677
    67dc:	000266ab 	.word	0x000266ab
    67e0:	000266b4 	.word	0x000266b4
    67e4:	000266d1 	.word	0x000266d1

000067e8 <bt_le_create_conn_legacy>:
{
    67e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ea:	b087      	sub	sp, #28
    67ec:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    67ee:	f10d 010b 	add.w	r1, sp, #11
    67f2:	2000      	movs	r0, #0
    67f4:	f000 ff7c 	bl	76f0 <bt_id_set_create_conn_own_addr>
	if (err) {
    67f8:	4604      	mov	r4, r0
    67fa:	2800      	cmp	r0, #0
    67fc:	d13c      	bne.n	6878 <bt_le_create_conn_legacy+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    67fe:	2119      	movs	r1, #25
    6800:	f242 000d 	movw	r0, #8205	; 0x200d
    6804:	f7ff ff54 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    6808:	4607      	mov	r7, r0
    680a:	b3c0      	cbz	r0, 687e <bt_le_create_conn_legacy+0x96>
    680c:	2119      	movs	r1, #25
    680e:	3008      	adds	r0, #8
    6810:	f01c fcbf 	bl	23192 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    6814:	2219      	movs	r2, #25
    6816:	4605      	mov	r5, r0
    6818:	4621      	mov	r1, r4
    681a:	f019 ff90 	bl	2073e <memset>
	cp->own_addr_type = own_addr_type;
    681e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6822:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    6824:	f106 0188 	add.w	r1, r6, #136	; 0x88
    6828:	1d68      	adds	r0, r5, #5
    682a:	f01a f88c 	bl	20946 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    682e:	4a15      	ldr	r2, [pc, #84]	; (6884 <bt_le_create_conn_legacy+0x9c>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    6830:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    6832:	8993      	ldrh	r3, [r2, #12]
    6834:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    6836:	89d3      	ldrh	r3, [r2, #14]
    6838:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    683a:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    683e:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    6842:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    6846:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    684a:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    684e:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    6852:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    6856:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    685a:	2301      	movs	r3, #1
    685c:	9300      	str	r3, [sp, #0]
    685e:	32cc      	adds	r2, #204	; 0xcc
    6860:	230b      	movs	r3, #11
    6862:	a903      	add	r1, sp, #12
    6864:	4638      	mov	r0, r7
    6866:	f7ff ff11 	bl	668c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    686a:	4622      	mov	r2, r4
    686c:	4639      	mov	r1, r7
    686e:	f242 000d 	movw	r0, #8205	; 0x200d
    6872:	f7ff ff57 	bl	6724 <bt_hci_cmd_send_sync>
    6876:	4604      	mov	r4, r0
}
    6878:	4620      	mov	r0, r4
    687a:	b007      	add	sp, #28
    687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    687e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6882:	e7f9      	b.n	6878 <bt_le_create_conn_legacy+0x90>
    6884:	20000000 	.word	0x20000000

00006888 <bt_le_create_conn_cancel>:
{
    6888:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    688a:	2100      	movs	r1, #0
{
    688c:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    688e:	f242 000e 	movw	r0, #8206	; 0x200e
    6892:	f7ff ff0d 	bl	66b0 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    6896:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    6898:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    689a:	230b      	movs	r3, #11
    689c:	a903      	add	r1, sp, #12
    689e:	4a06      	ldr	r2, [pc, #24]	; (68b8 <bt_le_create_conn_cancel+0x30>)
    68a0:	9500      	str	r5, [sp, #0]
    68a2:	f7ff fef3 	bl	668c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    68a6:	462a      	mov	r2, r5
    68a8:	4621      	mov	r1, r4
    68aa:	f242 000e 	movw	r0, #8206	; 0x200e
    68ae:	f7ff ff39 	bl	6724 <bt_hci_cmd_send_sync>
}
    68b2:	b007      	add	sp, #28
    68b4:	bd30      	pop	{r4, r5, pc}
    68b6:	bf00      	nop
    68b8:	200000cc 	.word	0x200000cc

000068bc <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    68bc:	4b02      	ldr	r3, [pc, #8]	; (68c8 <bt_send+0xc>)
    68be:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    68c2:	691b      	ldr	r3, [r3, #16]
    68c4:	4718      	bx	r3
    68c6:	bf00      	nop
    68c8:	20000000 	.word	0x20000000

000068cc <bt_hci_cmd_send>:
{
    68cc:	b538      	push	{r3, r4, r5, lr}
    68ce:	4605      	mov	r5, r0
	if (!buf) {
    68d0:	460c      	mov	r4, r1
    68d2:	b919      	cbnz	r1, 68dc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    68d4:	f7ff feec 	bl	66b0 <bt_hci_cmd_create>
		if (!buf) {
    68d8:	4604      	mov	r4, r0
    68da:	b198      	cbz	r0, 6904 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    68dc:	f640 4335 	movw	r3, #3125	; 0xc35
    68e0:	429d      	cmp	r5, r3
    68e2:	d109      	bne.n	68f8 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    68e4:	4620      	mov	r0, r4
    68e6:	f7ff ffe9 	bl	68bc <bt_send>
		if (err) {
    68ea:	4605      	mov	r5, r0
    68ec:	b110      	cbz	r0, 68f4 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    68ee:	4620      	mov	r0, r4
    68f0:	f013 fbe6 	bl	1a0c0 <net_buf_unref>
}
    68f4:	4628      	mov	r0, r5
    68f6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    68f8:	4804      	ldr	r0, [pc, #16]	; (690c <bt_hci_cmd_send+0x40>)
    68fa:	4621      	mov	r1, r4
    68fc:	f01c fc0a 	bl	23114 <net_buf_put>
	return 0;
    6900:	2500      	movs	r5, #0
    6902:	e7f7      	b.n	68f4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    6904:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6908:	e7f4      	b.n	68f4 <bt_hci_cmd_send+0x28>
    690a:	bf00      	nop
    690c:	20000134 	.word	0x20000134

00006910 <conn_auto_initiate>:
{
    6910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6912:	7a83      	ldrb	r3, [r0, #10]
    6914:	2b07      	cmp	r3, #7
{
    6916:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6918:	d157      	bne.n	69ca <conn_auto_initiate+0xba>
    691a:	f3bf 8f5b 	dmb	ish
    691e:	6843      	ldr	r3, [r0, #4]
    6920:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    6924:	049b      	lsls	r3, r3, #18
    6926:	f100 0604 	add.w	r6, r0, #4
    692a:	d41b      	bmi.n	6964 <conn_auto_initiate+0x54>
    692c:	78c3      	ldrb	r3, [r0, #3]
    692e:	b123      	cbz	r3, 693a <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    6930:	4b27      	ldr	r3, [pc, #156]	; (69d0 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    6932:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    6936:	071d      	lsls	r5, r3, #28
    6938:	d514      	bpl.n	6964 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    693a:	2102      	movs	r1, #2
    693c:	f242 0016 	movw	r0, #8214	; 0x2016
    6940:	f7ff feb6 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    6944:	4605      	mov	r5, r0
    6946:	b168      	cbz	r0, 6964 <conn_auto_initiate+0x54>
    6948:	2102      	movs	r1, #2
    694a:	3008      	adds	r0, #8
    694c:	f01c fc21 	bl	23192 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6950:	8823      	ldrh	r3, [r4, #0]
    6952:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6954:	4629      	mov	r1, r5
    6956:	f242 0016 	movw	r0, #8214	; 0x2016
}
    695a:	b004      	add	sp, #16
    695c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6960:	f7ff bfb4 	b.w	68cc <bt_hci_cmd_send>
    6964:	f3bf 8f5b 	dmb	ish
    6968:	6863      	ldr	r3, [r4, #4]
    696a:	4d19      	ldr	r5, [pc, #100]	; (69d0 <conn_auto_initiate+0xc0>)
    696c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6970:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6974:	f3c3 3100 	ubfx	r1, r3, #12, #1
    6978:	d111      	bne.n	699e <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    697a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    697e:	07d8      	lsls	r0, r3, #31
    6980:	d50d      	bpl.n	699e <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    6982:	2302      	movs	r3, #2
    6984:	9100      	str	r1, [sp, #0]
    6986:	461a      	mov	r2, r3
    6988:	4620      	mov	r0, r4
    698a:	f01a f94d 	bl	20c28 <bt_le_set_phy>
		if (!err) {
    698e:	b930      	cbnz	r0, 699e <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6990:	2180      	movs	r1, #128	; 0x80
    6992:	4630      	mov	r0, r6
}
    6994:	b004      	add	sp, #16
    6996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    699a:	f019 bfe6 	b.w	2096a <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    699e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    69a2:	069a      	lsls	r2, r3, #26
    69a4:	d511      	bpl.n	69ca <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    69a6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    69aa:	689b      	ldr	r3, [r3, #8]
    69ac:	079b      	lsls	r3, r3, #30
    69ae:	d50c      	bpl.n	69ca <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    69b0:	f10d 010e 	add.w	r1, sp, #14
    69b4:	a803      	add	r0, sp, #12
    69b6:	f01a f8c4 	bl	20b42 <hci_le_read_max_data_len>
			if (!err) {
    69ba:	b930      	cbnz	r0, 69ca <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
    69bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    69c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    69c4:	4620      	mov	r0, r4
    69c6:	f01a f912 	bl	20bee <bt_le_set_data_len>
}
    69ca:	b004      	add	sp, #16
    69cc:	bd70      	pop	{r4, r5, r6, pc}
    69ce:	bf00      	nop
    69d0:	20000000 	.word	0x20000000

000069d4 <bt_hci_le_enh_conn_complete>:
{
    69d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    69d8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    69dc:	4a7e      	ldr	r2, [pc, #504]	; (6bd8 <bt_hci_le_enh_conn_complete+0x204>)
	if (evt->status) {
    69de:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    69e0:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    69e2:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    69e6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    69ea:	b29b      	uxth	r3, r3
    69ec:	4299      	cmp	r1, r3
    69ee:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    69f2:	bf08      	it	eq
    69f4:	8016      	strheq	r6, [r2, #0]
{
    69f6:	b085      	sub	sp, #20
    69f8:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    69fa:	fa1f f887 	uxth.w	r8, r7
			return true;
    69fe:	bf08      	it	eq
    6a00:	2601      	moveq	r6, #1
	if (evt->status) {
    6a02:	b3c4      	cbz	r4, 6a76 <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6a04:	2c3c      	cmp	r4, #60	; 0x3c
    6a06:	d115      	bne.n	6a34 <bt_hci_le_enh_conn_complete+0x60>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6a08:	f000 ffa8 	bl	795c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6a0c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6a10:	3010      	adds	r0, #16
    6a12:	f019 ff9b 	bl	2094c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    6a16:	2000      	movs	r0, #0
    6a18:	f7ff fd8e 	bl	6538 <find_pending_connect.part.0>
		if (!conn) {
    6a1c:	4605      	mov	r5, r0
    6a1e:	b338      	cbz	r0, 6a70 <bt_hci_le_enh_conn_complete+0x9c>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    6a20:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6a22:	2100      	movs	r1, #0
    6a24:	f001 fcba 	bl	839c <bt_conn_set_state>
		bt_conn_unref(conn);
    6a28:	4628      	mov	r0, r5
}
    6a2a:	b005      	add	sp, #20
    6a2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    6a30:	f01a bc8d 	b.w	2134e <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6a34:	2c02      	cmp	r4, #2
    6a36:	d11b      	bne.n	6a70 <bt_hci_le_enh_conn_complete+0x9c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6a38:	2100      	movs	r1, #0
    6a3a:	2206      	movs	r2, #6
    6a3c:	4608      	mov	r0, r1
    6a3e:	f001 fe67 	bl	8710 <bt_conn_lookup_state_le>
	if (!conn) {
    6a42:	4605      	mov	r5, r0
    6a44:	b188      	cbz	r0, 6a6a <bt_hci_le_enh_conn_complete+0x96>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    6a46:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6a48:	2100      	movs	r1, #0
    6a4a:	f001 fca7 	bl	839c <bt_conn_set_state>
    6a4e:	f3bf 8f5b 	dmb	ish
    6a52:	686b      	ldr	r3, [r5, #4]
    6a54:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    6a58:	07da      	lsls	r2, r3, #31
    6a5a:	d503      	bpl.n	6a64 <bt_hci_le_enh_conn_complete+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6a5c:	4621      	mov	r1, r4
    6a5e:	4628      	mov	r0, r5
    6a60:	f001 fc9c 	bl	839c <bt_conn_set_state>
	bt_conn_unref(conn);
    6a64:	4628      	mov	r0, r5
    6a66:	f01a fc72 	bl	2134e <bt_conn_unref>
			bt_le_scan_update(false);
    6a6a:	2000      	movs	r0, #0
    6a6c:	f001 fa06 	bl	7e7c <bt_le_scan_update>
}
    6a70:	b005      	add	sp, #20
    6a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6a76:	7903      	ldrb	r3, [r0, #4]
    6a78:	3b02      	subs	r3, #2
    6a7a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6a7c:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6a80:	d834      	bhi.n	6aec <bt_hci_le_enh_conn_complete+0x118>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6a82:	4649      	mov	r1, r9
    6a84:	a802      	add	r0, sp, #8
    6a86:	f019 ff5e 	bl	20946 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6a8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6a8e:	2206      	movs	r2, #6
    6a90:	3b02      	subs	r3, #2
    6a92:	f105 0111 	add.w	r1, r5, #17
    6a96:	f10d 0001 	add.w	r0, sp, #1
    6a9a:	f88d 3008 	strb.w	r3, [sp, #8]
    6a9e:	f019 fe43 	bl	20728 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    6aa2:	2301      	movs	r3, #1
    6aa4:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    6aa8:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    6aaa:	bb90      	cbnz	r0, 6b12 <bt_hci_le_enh_conn_complete+0x13e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6aac:	2206      	movs	r2, #6
    6aae:	a902      	add	r1, sp, #8
    6ab0:	f001 fe2e 	bl	8710 <bt_conn_lookup_state_le>
    6ab4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6ab6:	78eb      	ldrb	r3, [r5, #3]
    6ab8:	2b01      	cmp	r3, #1
    6aba:	d10a      	bne.n	6ad2 <bt_hci_le_enh_conn_complete+0xfe>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6abc:	f000 ff4e 	bl	795c <bt_le_adv_lookup_legacy>
    6ac0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6ac4:	4681      	mov	r9, r0
    6ac6:	3010      	adds	r0, #16
    6ac8:	f019 ff40 	bl	2094c <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    6acc:	4648      	mov	r0, r9
    6ace:	f01a fb6d 	bl	211ac <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6ad2:	78eb      	ldrb	r3, [r5, #3]
    6ad4:	b923      	cbnz	r3, 6ae0 <bt_hci_le_enh_conn_complete+0x10c>
    6ad6:	4841      	ldr	r0, [pc, #260]	; (6bdc <bt_hci_le_enh_conn_complete+0x208>)
    6ad8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    6adc:	f019 ff36 	bl	2094c <atomic_and>
	if (!conn) {
    6ae0:	b9fc      	cbnz	r4, 6b22 <bt_hci_le_enh_conn_complete+0x14e>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    6ae2:	211f      	movs	r1, #31
    6ae4:	4640      	mov	r0, r8
    6ae6:	f01a f846 	bl	20b76 <bt_hci_disconnect>
		return;
    6aea:	e7c1      	b.n	6a70 <bt_hci_le_enh_conn_complete+0x9c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    6aec:	78c3      	ldrb	r3, [r0, #3]
    6aee:	2b01      	cmp	r3, #1
    6af0:	bf04      	itt	eq
    6af2:	4b3b      	ldreq	r3, [pc, #236]	; (6be0 <bt_hci_le_enh_conn_complete+0x20c>)
    6af4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    6af8:	4649      	mov	r1, r9
    6afa:	4620      	mov	r0, r4
    6afc:	f01a f9e8 	bl	20ed0 <bt_lookup_id_addr>
    6b00:	4601      	mov	r1, r0
    6b02:	a802      	add	r0, sp, #8
    6b04:	f019 ff1f 	bl	20946 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    6b08:	4649      	mov	r1, r9
    6b0a:	4668      	mov	r0, sp
    6b0c:	f019 ff1b 	bl	20946 <bt_addr_le_copy>
    6b10:	e7ca      	b.n	6aa8 <bt_hci_le_enh_conn_complete+0xd4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    6b12:	2801      	cmp	r0, #1
    6b14:	d103      	bne.n	6b1e <bt_hci_le_enh_conn_complete+0x14a>
    6b16:	a802      	add	r0, sp, #8
    6b18:	f7ff fd0e 	bl	6538 <find_pending_connect.part.0>
    6b1c:	e7ca      	b.n	6ab4 <bt_hci_le_enh_conn_complete+0xe0>
	return NULL;
    6b1e:	2400      	movs	r4, #0
    6b20:	e7c9      	b.n	6ab6 <bt_hci_le_enh_conn_complete+0xe2>
	conn->handle = handle;
    6b22:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6b24:	a902      	add	r1, sp, #8
	conn->handle = handle;
    6b26:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6b2a:	f019 ff0c 	bl	20946 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    6b2e:	7e2a      	ldrb	r2, [r5, #24]
    6b30:	7deb      	ldrb	r3, [r5, #23]
    6b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b36:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    6b3a:	7eaa      	ldrb	r2, [r5, #26]
    6b3c:	7e6b      	ldrb	r3, [r5, #25]
    6b3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b42:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6b46:	7f2a      	ldrb	r2, [r5, #28]
    6b48:	7eeb      	ldrb	r3, [r5, #27]
    6b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6b4e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    6b52:	78eb      	ldrb	r3, [r5, #3]
    6b54:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    6b56:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6b58:	2b01      	cmp	r3, #1
	conn->err = 0U;
    6b5a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6b5c:	d115      	bne.n	6b8a <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    6b5e:	4669      	mov	r1, sp
    6b60:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6b64:	f019 feef 	bl	20946 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6b68:	f000 fef8 	bl	795c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    6b6c:	7a21      	ldrb	r1, [r4, #8]
    6b6e:	4d1c      	ldr	r5, [pc, #112]	; (6be0 <bt_hci_le_enh_conn_complete+0x20c>)
    6b70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    6b74:	4429      	add	r1, r5
    6b76:	f104 0096 	add.w	r0, r4, #150	; 0x96
    6b7a:	f019 fee4 	bl	20946 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    6b7e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    6b82:	065b      	lsls	r3, r3, #25
    6b84:	d501      	bpl.n	6b8a <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    6b86:	f001 f8a5 	bl	7cd4 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6b8a:	78e3      	ldrb	r3, [r4, #3]
    6b8c:	b96b      	cbnz	r3, 6baa <bt_hci_le_enh_conn_complete+0x1d6>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    6b8e:	4669      	mov	r1, sp
    6b90:	f104 0096 	add.w	r0, r4, #150	; 0x96
    6b94:	f019 fed7 	bl	20946 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    6b98:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    6b9a:	4b11      	ldr	r3, [pc, #68]	; (6be0 <bt_hci_le_enh_conn_complete+0x20c>)
					&bt_dev.id_addr[conn->id]);
    6b9c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    6ba0:	4419      	add	r1, r3
    6ba2:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6ba6:	f019 fece 	bl	20946 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6baa:	2107      	movs	r1, #7
    6bac:	4620      	mov	r0, r4
    6bae:	f001 fbf5 	bl	839c <bt_conn_set_state>
	if (is_disconnected) {
    6bb2:	b11e      	cbz	r6, 6bbc <bt_hci_le_enh_conn_complete+0x1e8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6bb4:	2101      	movs	r1, #1
    6bb6:	4620      	mov	r0, r4
    6bb8:	f001 fbf0 	bl	839c <bt_conn_set_state>
	bt_conn_connected(conn);
    6bbc:	4620      	mov	r0, r4
    6bbe:	f01a fc01 	bl	213c4 <bt_conn_connected>
	conn_auto_initiate(conn);
    6bc2:	4620      	mov	r0, r4
    6bc4:	f7ff fea4 	bl	6910 <conn_auto_initiate>
	bt_conn_unref(conn);
    6bc8:	4620      	mov	r0, r4
    6bca:	f01a fbc0 	bl	2134e <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6bce:	78e3      	ldrb	r3, [r4, #3]
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	f47f af4d 	bne.w	6a70 <bt_hci_le_enh_conn_complete+0x9c>
    6bd6:	e748      	b.n	6a6a <bt_hci_le_enh_conn_complete+0x96>
    6bd8:	200060ac 	.word	0x200060ac
    6bdc:	200000cc 	.word	0x200000cc
    6be0:	20000000 	.word	0x20000000

00006be4 <hci_tx_thread>:
{
    6be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    6be8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 6cf4 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    6bec:	f8df a108 	ldr.w	sl, [pc, #264]	; 6cf8 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    6bf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6bf4:	4841      	ldr	r0, [pc, #260]	; (6cfc <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6bf6:	f36f 3352 	bfc	r3, #13, #6
    6bfa:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6bfe:	f001 fb89 	bl	8314 <bt_conn_prepare_events>
    6c02:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6c04:	483b      	ldr	r0, [pc, #236]	; (6cf4 <hci_tx_thread+0x110>)
    6c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c0e:	4629      	mov	r1, r5
    6c10:	f018 fb4e 	bl	1f2b0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6c14:	b160      	cbz	r0, 6c30 <hci_tx_thread+0x4c>
    6c16:	493a      	ldr	r1, [pc, #232]	; (6d00 <hci_tx_thread+0x11c>)
    6c18:	483a      	ldr	r0, [pc, #232]	; (6d04 <hci_tx_thread+0x120>)
    6c1a:	f640 1393 	movw	r3, #2451	; 0x993
    6c1e:	4652      	mov	r2, sl
    6c20:	f018 fd7d 	bl	1f71e <printk>
    6c24:	4040      	eors	r0, r0
    6c26:	f380 8811 	msr	BASEPRI, r0
    6c2a:	f04f 0003 	mov.w	r0, #3
    6c2e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6c30:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 6d08 <hci_tx_thread+0x124>
{
    6c34:	4e2f      	ldr	r6, [pc, #188]	; (6cf4 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    6c36:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    6c3a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    6c3e:	b915      	cbnz	r5, 6c46 <hci_tx_thread+0x62>
	z_impl_k_yield();
    6c40:	f018 f8c8 	bl	1edd4 <z_impl_k_yield>
	while (1) {
    6c44:	e7d4      	b.n	6bf0 <hci_tx_thread+0xc>
		switch (ev->state) {
    6c46:	68f3      	ldr	r3, [r6, #12]
    6c48:	f3c3 3345 	ubfx	r3, r3, #13, #6
    6c4c:	2b04      	cmp	r3, #4
    6c4e:	d147      	bne.n	6ce0 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6c50:	7b33      	ldrb	r3, [r6, #12]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d147      	bne.n	6ce6 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6c56:	2200      	movs	r2, #0
    6c58:	2300      	movs	r3, #0
    6c5a:	4648      	mov	r0, r9
    6c5c:	f01c fa36 	bl	230cc <net_buf_get>
	BT_ASSERT(buf);
    6c60:	4604      	mov	r4, r0
    6c62:	b960      	cbnz	r0, 6c7e <hci_tx_thread+0x9a>
    6c64:	4929      	ldr	r1, [pc, #164]	; (6d0c <hci_tx_thread+0x128>)
    6c66:	4827      	ldr	r0, [pc, #156]	; (6d04 <hci_tx_thread+0x120>)
    6c68:	f640 132a 	movw	r3, #2346	; 0x92a
    6c6c:	4652      	mov	r2, sl
    6c6e:	f018 fd56 	bl	1f71e <printk>
    6c72:	4040      	eors	r0, r0
    6c74:	f380 8811 	msr	BASEPRI, r0
    6c78:	f04f 0003 	mov.w	r0, #3
    6c7c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c86:	4658      	mov	r0, fp
    6c88:	f017 fc6e 	bl	1e568 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6c8c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    6c90:	b120      	cbz	r0, 6c9c <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    6c92:	f013 fa15 	bl	1a0c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6c96:	2300      	movs	r3, #0
    6c98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    6c9c:	4620      	mov	r0, r4
    6c9e:	f01c fa46 	bl	2312e <net_buf_ref>
    6ca2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    6ca6:	4620      	mov	r0, r4
    6ca8:	f7ff fe08 	bl	68bc <bt_send>
	if (err) {
    6cac:	b1c0      	cbz	r0, 6ce0 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    6cae:	4818      	ldr	r0, [pc, #96]	; (6d10 <hci_tx_thread+0x12c>)
    6cb0:	f017 fc34 	bl	1e51c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6cb4:	4620      	mov	r0, r4
    6cb6:	f013 f947 	bl	19f48 <net_buf_id>
    6cba:	4b16      	ldr	r3, [pc, #88]	; (6d14 <hci_tx_thread+0x130>)
    6cbc:	220c      	movs	r2, #12
    6cbe:	fb02 3000 	mla	r0, r2, r0, r3
    6cc2:	211f      	movs	r1, #31
    6cc4:	8840      	ldrh	r0, [r0, #2]
    6cc6:	4622      	mov	r2, r4
    6cc8:	f7ff fc54 	bl	6574 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6ccc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    6cd0:	f013 f9f6 	bl	1a0c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6cd4:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6cd6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6cd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    6cdc:	f013 f9f0 	bl	1a0c0 <net_buf_unref>
	for (; count; ev++, count--) {
    6ce0:	3614      	adds	r6, #20
    6ce2:	3d01      	subs	r5, #1
    6ce4:	e7ab      	b.n	6c3e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6ce6:	2b01      	cmp	r3, #1
    6ce8:	d1fa      	bne.n	6ce0 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    6cea:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    6cec:	3838      	subs	r0, #56	; 0x38
    6cee:	f001 fe15 	bl	891c <bt_conn_process_tx>
    6cf2:	e7f5      	b.n	6ce0 <hci_tx_thread+0xfc>
    6cf4:	200002c0 	.word	0x200002c0
    6cf8:	00026677 	.word	0x00026677
    6cfc:	200002d4 	.word	0x200002d4
    6d00:	000266ab 	.word	0x000266ab
    6d04:	000266b4 	.word	0x000266b4
    6d08:	20000134 	.word	0x20000134
    6d0c:	000266f1 	.word	0x000266f1
    6d10:	20000118 	.word	0x20000118
    6d14:	200041a4 	.word	0x200041a4

00006d18 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    6d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d1c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    6d1e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6d22:	4630      	mov	r0, r6
    6d24:	f01c fa7e 	bl	23224 <net_buf_simple_headroom>
	state->len = buf->len;
    6d28:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    6d2c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    6d30:	4605      	mov	r5, r0
    6d32:	d80c      	bhi.n	6d4e <hci_event_prio+0x36>
    6d34:	4a1c      	ldr	r2, [pc, #112]	; (6da8 <hci_event_prio+0x90>)
    6d36:	491d      	ldr	r1, [pc, #116]	; (6dac <hci_event_prio+0x94>)
    6d38:	481d      	ldr	r0, [pc, #116]	; (6db0 <hci_event_prio+0x98>)
    6d3a:	f640 532f 	movw	r3, #3375	; 0xd2f
    6d3e:	f018 fcee 	bl	1f71e <printk>
    6d42:	4040      	eors	r0, r0
    6d44:	f380 8811 	msr	BASEPRI, r0
    6d48:	f04f 0003 	mov.w	r0, #3
    6d4c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6d4e:	4630      	mov	r0, r6
    6d50:	2102      	movs	r1, #2
    6d52:	f01c fa4f 	bl	231f4 <net_buf_simple_pull_mem>
    6d56:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6d58:	7800      	ldrb	r0, [r0, #0]
    6d5a:	f019 fdcd 	bl	208f8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6d5e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6d60:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6d62:	d40c      	bmi.n	6d7e <hci_event_prio+0x66>
    6d64:	4a10      	ldr	r2, [pc, #64]	; (6da8 <hci_event_prio+0x90>)
    6d66:	4913      	ldr	r1, [pc, #76]	; (6db4 <hci_event_prio+0x9c>)
    6d68:	4811      	ldr	r0, [pc, #68]	; (6db0 <hci_event_prio+0x98>)
    6d6a:	f640 5333 	movw	r3, #3379	; 0xd33
    6d6e:	f018 fcd6 	bl	1f71e <printk>
    6d72:	4040      	eors	r0, r0
    6d74:	f380 8811 	msr	BASEPRI, r0
    6d78:	f04f 0003 	mov.w	r0, #3
    6d7c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6d7e:	2305      	movs	r3, #5
    6d80:	4a0d      	ldr	r2, [pc, #52]	; (6db8 <hci_event_prio+0xa0>)
    6d82:	7838      	ldrb	r0, [r7, #0]
    6d84:	4621      	mov	r1, r4
    6d86:	f019 fdc9 	bl	2091c <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6d8a:	07b3      	lsls	r3, r6, #30
    6d8c:	d507      	bpl.n	6d9e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    6d8e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6d90:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6d94:	fa10 f585 	uxtah	r5, r0, r5
    6d98:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    6d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    6d9e:	4620      	mov	r0, r4
}
    6da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6da4:	f013 b98c 	b.w	1a0c0 <net_buf_unref>
    6da8:	00026677 	.word	0x00026677
    6dac:	000266f5 	.word	0x000266f5
    6db0:	000266b4 	.word	0x000266b4
    6db4:	0002670e 	.word	0x0002670e
    6db8:	00024e00 	.word	0x00024e00

00006dbc <bt_recv>:

k_tid_t bt_recv_thread_id;

int bt_recv(struct net_buf *buf)
{
    6dbc:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
    6dbe:	4d3b      	ldr	r5, [pc, #236]	; (6eac <bt_recv+0xf0>)
    6dc0:	682b      	ldr	r3, [r5, #0]
{
    6dc2:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    6dc4:	b913      	cbnz	r3, 6dcc <bt_recv+0x10>
	return z_impl_z_current_get();
    6dc6:	f018 f8a7 	bl	1ef18 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    6dca:	6028      	str	r0, [r5, #0]
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6dcc:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    6dce:	2b01      	cmp	r3, #1
    6dd0:	d036      	beq.n	6e40 <bt_recv+0x84>
    6dd2:	2b03      	cmp	r3, #3
    6dd4:	d163      	bne.n	6e9e <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6dd6:	89a3      	ldrh	r3, [r4, #12]
    6dd8:	2b03      	cmp	r3, #3
    6dda:	d80c      	bhi.n	6df6 <bt_recv+0x3a>
    6ddc:	4a34      	ldr	r2, [pc, #208]	; (6eb0 <bt_recv+0xf4>)
    6dde:	4935      	ldr	r1, [pc, #212]	; (6eb4 <bt_recv+0xf8>)
    6de0:	4835      	ldr	r0, [pc, #212]	; (6eb8 <bt_recv+0xfc>)
    6de2:	f240 13b5 	movw	r3, #437	; 0x1b5
    6de6:	f018 fc9a 	bl	1f71e <printk>
    6dea:	4040      	eors	r0, r0
    6dec:	f380 8811 	msr	BASEPRI, r0
    6df0:	f04f 0003 	mov.w	r0, #3
    6df4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6df6:	2104      	movs	r1, #4
    6df8:	f104 0008 	add.w	r0, r4, #8
    6dfc:	f01c f9fa 	bl	231f4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6e00:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    6e02:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    6e04:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6e06:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    6e08:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    6e0a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    6e0e:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    6e10:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    6e12:	d003      	beq.n	6e1c <bt_recv+0x60>
	net_buf_unref(buf);
    6e14:	4620      	mov	r0, r4
    6e16:	f013 f953 	bl	1a0c0 <net_buf_unref>
    6e1a:	e00f      	b.n	6e3c <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6e1c:	f001 fab6 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
    6e20:	4605      	mov	r5, r0
    6e22:	2800      	cmp	r0, #0
    6e24:	d0f6      	beq.n	6e14 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
    6e26:	f001 fb93 	bl	8550 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6e2a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    6e2c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    6e2e:	4621      	mov	r1, r4
    6e30:	4628      	mov	r0, r5
    6e32:	f01a fa24 	bl	2127e <bt_conn_recv>
	bt_conn_unref(conn);
    6e36:	4628      	mov	r0, r5
    6e38:	f01a fa89 	bl	2134e <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    6e3c:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    6e3e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6e40:	89a3      	ldrh	r3, [r4, #12]
    6e42:	2b01      	cmp	r3, #1
    6e44:	d80c      	bhi.n	6e60 <bt_recv+0xa4>
    6e46:	4a1a      	ldr	r2, [pc, #104]	; (6eb0 <bt_recv+0xf4>)
    6e48:	491a      	ldr	r1, [pc, #104]	; (6eb4 <bt_recv+0xf8>)
    6e4a:	481b      	ldr	r0, [pc, #108]	; (6eb8 <bt_recv+0xfc>)
    6e4c:	f640 1317 	movw	r3, #2327	; 0x917
    6e50:	f018 fc65 	bl	1f71e <printk>
    6e54:	4040      	eors	r0, r0
    6e56:	f380 8811 	msr	BASEPRI, r0
    6e5a:	f04f 0003 	mov.w	r0, #3
    6e5e:	df02      	svc	2
    6e60:	2102      	movs	r1, #2
    6e62:	f104 0008 	add.w	r0, r4, #8
    6e66:	f01c f9c5 	bl	231f4 <net_buf_simple_pull_mem>
    6e6a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    6e6c:	7800      	ldrb	r0, [r0, #0]
    6e6e:	f019 fd43 	bl	208f8 <bt_hci_evt_get_flags>
    6e72:	0783      	lsls	r3, r0, #30
    6e74:	d40c      	bmi.n	6e90 <bt_recv+0xd4>
    6e76:	4a0e      	ldr	r2, [pc, #56]	; (6eb0 <bt_recv+0xf4>)
    6e78:	4910      	ldr	r1, [pc, #64]	; (6ebc <bt_recv+0x100>)
    6e7a:	480f      	ldr	r0, [pc, #60]	; (6eb8 <bt_recv+0xfc>)
    6e7c:	f640 131b 	movw	r3, #2331	; 0x91b
    6e80:	f018 fc4d 	bl	1f71e <printk>
    6e84:	4040      	eors	r0, r0
    6e86:	f380 8811 	msr	BASEPRI, r0
    6e8a:	f04f 0003 	mov.w	r0, #3
    6e8e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6e90:	4a0b      	ldr	r2, [pc, #44]	; (6ec0 <bt_recv+0x104>)
    6e92:	7828      	ldrb	r0, [r5, #0]
    6e94:	2304      	movs	r3, #4
    6e96:	4621      	mov	r1, r4
    6e98:	f019 fd40 	bl	2091c <handle_event>
    6e9c:	e7ba      	b.n	6e14 <bt_recv+0x58>
		net_buf_unref(buf);
    6e9e:	4620      	mov	r0, r4
    6ea0:	f013 f90e 	bl	1a0c0 <net_buf_unref>
		return -EINVAL;
    6ea4:	f06f 0015 	mvn.w	r0, #21
    6ea8:	e7c9      	b.n	6e3e <bt_recv+0x82>
    6eaa:	bf00      	nop
    6eac:	200041a0 	.word	0x200041a0
    6eb0:	00026677 	.word	0x00026677
    6eb4:	000266f5 	.word	0x000266f5
    6eb8:	000266b4 	.word	0x000266b4
    6ebc:	00026727 	.word	0x00026727
    6ec0:	00024de0 	.word	0x00024de0

00006ec4 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    6ec4:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6ec6:	7d03      	ldrb	r3, [r0, #20]
    6ec8:	2b01      	cmp	r3, #1
{
    6eca:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6ecc:	d00c      	beq.n	6ee8 <bt_recv_prio+0x24>
    6ece:	4a09      	ldr	r2, [pc, #36]	; (6ef4 <bt_recv_prio+0x30>)
    6ed0:	4909      	ldr	r1, [pc, #36]	; (6ef8 <bt_recv_prio+0x34>)
    6ed2:	480a      	ldr	r0, [pc, #40]	; (6efc <bt_recv_prio+0x38>)
    6ed4:	f640 537c 	movw	r3, #3452	; 0xd7c
    6ed8:	f018 fc21 	bl	1f71e <printk>
    6edc:	4040      	eors	r0, r0
    6ede:	f380 8811 	msr	BASEPRI, r0
    6ee2:	f04f 0003 	mov.w	r0, #3
    6ee6:	df02      	svc	2

	hci_event_prio(buf);
    6ee8:	4620      	mov	r0, r4
    6eea:	f7ff ff15 	bl	6d18 <hci_event_prio>

	return 0;
}
    6eee:	2000      	movs	r0, #0
    6ef0:	bd10      	pop	{r4, pc}
    6ef2:	bf00      	nop
    6ef4:	00026677 	.word	0x00026677
    6ef8:	00026755 	.word	0x00026755
    6efc:	000266b4 	.word	0x000266b4

00006f00 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    6f00:	4a08      	ldr	r2, [pc, #32]	; (6f24 <bt_hci_driver_register+0x24>)
{
    6f02:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6f04:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    6f08:	b930      	cbnz	r0, 6f18 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    6f0a:	68d9      	ldr	r1, [r3, #12]
    6f0c:	b139      	cbz	r1, 6f1e <bt_hci_driver_register+0x1e>
    6f0e:	6919      	ldr	r1, [r3, #16]
    6f10:	b129      	cbz	r1, 6f1e <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    6f12:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    6f16:	4770      	bx	lr
		return -EALREADY;
    6f18:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6f1c:	4770      	bx	lr
		return -EINVAL;
    6f1e:	f06f 0015 	mvn.w	r0, #21
}
    6f22:	4770      	bx	lr
    6f24:	20000000 	.word	0x20000000

00006f28 <bt_finalize_init>:

void bt_finalize_init(void)
{
    6f28:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f2a:	4804      	ldr	r0, [pc, #16]	; (6f3c <bt_finalize_init+0x14>)
    6f2c:	2102      	movs	r1, #2
    6f2e:	f019 fd1c 	bl	2096a <atomic_or>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    6f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    6f36:	2000      	movs	r0, #0
    6f38:	f000 bfa0 	b.w	7e7c <bt_le_scan_update>
    6f3c:	200000cc 	.word	0x200000cc

00006f40 <bt_init>:

static int bt_init(void)
{
    6f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6f42:	4d3f      	ldr	r5, [pc, #252]	; (7040 <bt_init+0x100>)
    6f44:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6f48:	6899      	ldr	r1, [r3, #8]
    6f4a:	f011 0101 	ands.w	r1, r1, #1
    6f4e:	d123      	bne.n	6f98 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6f50:	aa01      	add	r2, sp, #4
    6f52:	f640 4003 	movw	r0, #3075	; 0xc03
    6f56:	f7ff fbe5 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    6f5a:	4604      	mov	r4, r0
    6f5c:	2800      	cmp	r0, #0
    6f5e:	d16b      	bne.n	7038 <bt_init+0xf8>
	uint8_t status = buf->data[0];
    6f60:	9b01      	ldr	r3, [sp, #4]
    6f62:	689b      	ldr	r3, [r3, #8]
	if (status) {
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	b9a3      	cbnz	r3, 6f92 <bt_init+0x52>
		bt_scan_reset();
    6f68:	f000 ff82 	bl	7e70 <bt_scan_reset>
    6f6c:	f3bf 8f5b 	dmb	ish
    6f70:	462b      	mov	r3, r5
    6f72:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    6f76:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    6f7a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6f7e:	f3bf 8f5b 	dmb	ish
    6f82:	e853 1f00 	ldrex	r1, [r3]
    6f86:	e843 2000 	strex	r0, r2, [r3]
    6f8a:	2800      	cmp	r0, #0
    6f8c:	d1f9      	bne.n	6f82 <bt_init+0x42>
    6f8e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    6f92:	9801      	ldr	r0, [sp, #4]
    6f94:	f013 f894 	bl	1a0c0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    6f98:	aa01      	add	r2, sp, #4
    6f9a:	2100      	movs	r1, #0
    6f9c:	f241 0003 	movw	r0, #4099	; 0x1003
    6fa0:	f7ff fbc0 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    6fa4:	4604      	mov	r4, r0
    6fa6:	2800      	cmp	r0, #0
    6fa8:	d146      	bne.n	7038 <bt_init+0xf8>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    6faa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    6fac:	4825      	ldr	r0, [pc, #148]	; (7044 <bt_init+0x104>)
    6fae:	6899      	ldr	r1, [r3, #8]
    6fb0:	2208      	movs	r2, #8
    6fb2:	3101      	adds	r1, #1
    6fb4:	f019 fbb8 	bl	20728 <memcpy>
	net_buf_unref(rsp);
    6fb8:	9801      	ldr	r0, [sp, #4]
    6fba:	f013 f881 	bl	1a0c0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6fbe:	4621      	mov	r1, r4
    6fc0:	aa01      	add	r2, sp, #4
    6fc2:	f241 0001 	movw	r0, #4097	; 0x1001
    6fc6:	f7ff fbad 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    6fca:	4604      	mov	r4, r0
    6fcc:	2800      	cmp	r0, #0
    6fce:	d133      	bne.n	7038 <bt_init+0xf8>
	read_local_ver_complete(rsp);
    6fd0:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    6fd2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    6fd4:	785a      	ldrb	r2, [r3, #1]
    6fd6:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    6fda:	78d9      	ldrb	r1, [r3, #3]
    6fdc:	789a      	ldrb	r2, [r3, #2]
    6fde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6fe2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    6fe6:	791a      	ldrb	r2, [r3, #4]
    6fe8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    6fec:	7a19      	ldrb	r1, [r3, #8]
    6fee:	79da      	ldrb	r2, [r3, #7]
    6ff0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6ff4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6ff8:	795a      	ldrb	r2, [r3, #5]
    6ffa:	799b      	ldrb	r3, [r3, #6]
    6ffc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7000:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    7004:	f013 f85c 	bl	1a0c0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    7008:	4621      	mov	r1, r4
    700a:	aa01      	add	r2, sp, #4
    700c:	f241 0002 	movw	r0, #4098	; 0x1002
    7010:	f7ff fb88 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7014:	4604      	mov	r4, r0
    7016:	b978      	cbnz	r0, 7038 <bt_init+0xf8>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    7018:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    701a:	480b      	ldr	r0, [pc, #44]	; (7048 <bt_init+0x108>)
    701c:	6899      	ldr	r1, [r3, #8]
    701e:	2240      	movs	r2, #64	; 0x40
    7020:	3101      	adds	r1, #1
    7022:	f019 fb81 	bl	20728 <memcpy>
	net_buf_unref(rsp);
    7026:	9801      	ldr	r0, [sp, #4]
    7028:	f013 f84a 	bl	1a0c0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    702c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    7030:	065e      	lsls	r6, r3, #25
    7032:	d40b      	bmi.n	704c <bt_init+0x10c>
		return -ENODEV;
    7034:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    7038:	4620      	mov	r0, r4
    703a:	b002      	add	sp, #8
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	bf00      	nop
    7040:	20000000 	.word	0x20000000
    7044:	20000070 	.word	0x20000070
    7048:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    704c:	4621      	mov	r1, r4
    704e:	aa01      	add	r2, sp, #4
    7050:	f242 0003 	movw	r0, #8195	; 0x2003
    7054:	f7ff fb66 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7058:	4604      	mov	r4, r0
    705a:	2800      	cmp	r0, #0
    705c:	d1ec      	bne.n	7038 <bt_init+0xf8>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    705e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    7060:	48a1      	ldr	r0, [pc, #644]	; (72e8 <bt_init+0x3a8>)
    7062:	6899      	ldr	r1, [r3, #8]
    7064:	2208      	movs	r2, #8
    7066:	3101      	adds	r1, #1
    7068:	f019 fb5e 	bl	20728 <memcpy>
	net_buf_unref(rsp);
    706c:	9801      	ldr	r0, [sp, #4]
    706e:	f013 f827 	bl	1a0c0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    7072:	4621      	mov	r1, r4
    7074:	aa01      	add	r2, sp, #4
    7076:	f242 0002 	movw	r0, #8194	; 0x2002
    707a:	f7ff fb53 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    707e:	4604      	mov	r4, r0
    7080:	2800      	cmp	r0, #0
    7082:	d1d9      	bne.n	7038 <bt_init+0xf8>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    7084:	9b01      	ldr	r3, [sp, #4]
    7086:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    7088:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    708c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    7090:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    7092:	b121      	cbz	r1, 709e <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    7094:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    7096:	4895      	ldr	r0, [pc, #596]	; (72ec <bt_init+0x3ac>)
    7098:	4611      	mov	r1, r2
    709a:	f01d f806 	bl	240aa <z_impl_k_sem_init>
		net_buf_unref(rsp);
    709e:	9801      	ldr	r0, [sp, #4]
    70a0:	f013 f80e 	bl	1a0c0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    70a4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    70a8:	f016 0620 	ands.w	r6, r6, #32
    70ac:	f000 80f9 	beq.w	72a2 <bt_init+0x362>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    70b0:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    70b4:	071c      	lsls	r4, r3, #28
    70b6:	d512      	bpl.n	70de <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    70b8:	aa01      	add	r2, sp, #4
    70ba:	2100      	movs	r1, #0
    70bc:	f242 001c 	movw	r0, #8220	; 0x201c
    70c0:	f7ff fb30 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    70c4:	4604      	mov	r4, r0
    70c6:	2800      	cmp	r0, #0
    70c8:	d1b6      	bne.n	7038 <bt_init+0xf8>
		le_read_supp_states_complete(rsp);
    70ca:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    70cc:	6883      	ldr	r3, [r0, #8]
    70ce:	f8d3 2001 	ldr.w	r2, [r3, #1]
    70d2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    70d6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    70da:	f012 fff1 	bl	1a0c0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    70de:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    70e2:	0698      	lsls	r0, r3, #26
    70e4:	d523      	bpl.n	712e <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    70e6:	f10d 0102 	add.w	r1, sp, #2
    70ea:	4668      	mov	r0, sp
    70ec:	f019 fd29 	bl	20b42 <hci_le_read_max_data_len>
		if (err) {
    70f0:	4604      	mov	r4, r0
    70f2:	2800      	cmp	r0, #0
    70f4:	d1a0      	bne.n	7038 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    70f6:	2104      	movs	r1, #4
    70f8:	f242 0024 	movw	r0, #8228	; 0x2024
    70fc:	f7ff fad8 	bl	66b0 <bt_hci_cmd_create>
		if (!buf) {
    7100:	4606      	mov	r6, r0
    7102:	2800      	cmp	r0, #0
    7104:	f000 80d4 	beq.w	72b0 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    7108:	2104      	movs	r1, #4
    710a:	3008      	adds	r0, #8
    710c:	f01c f841 	bl	23192 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    7110:	f8bd 3000 	ldrh.w	r3, [sp]
    7114:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    7116:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    711a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    711c:	4622      	mov	r2, r4
    711e:	4631      	mov	r1, r6
    7120:	f242 0024 	movw	r0, #8228	; 0x2024
    7124:	f7ff fafe 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    7128:	4604      	mov	r4, r0
    712a:	2800      	cmp	r0, #0
    712c:	d184      	bne.n	7038 <bt_init+0xf8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    712e:	2108      	movs	r1, #8
    7130:	f242 0001 	movw	r0, #8193	; 0x2001
    7134:	f7ff fabc 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    7138:	4604      	mov	r4, r0
    713a:	2800      	cmp	r0, #0
    713c:	f000 80b8 	beq.w	72b0 <bt_init+0x370>
    7140:	2108      	movs	r1, #8
    7142:	4408      	add	r0, r1
    7144:	f01c f825 	bl	23192 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    7148:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    714c:	f012 0f02 	tst.w	r2, #2
    7150:	bf14      	ite	ne
    7152:	232f      	movne	r3, #47	; 0x2f
    7154:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    7156:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    7158:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    715c:	bf48      	it	mi
    715e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    7162:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    7166:	bf18      	it	ne
    7168:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    716c:	2200      	movs	r2, #0
    716e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7170:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7174:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    7176:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    7178:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    717a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    717c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    717e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7180:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    7182:	4621      	mov	r1, r4
    7184:	f242 0001 	movw	r0, #8193	; 0x2001
    7188:	f7ff facc 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    718c:	4604      	mov	r4, r0
    718e:	2800      	cmp	r0, #0
    7190:	f47f af52 	bne.w	7038 <bt_init+0xf8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    7194:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    7198:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    719c:	069a      	lsls	r2, r3, #26
    719e:	f100 809c 	bmi.w	72da <bt_init+0x39a>
	if (bt_dev.le.acl_mtu) {
    71a2:	b9d9      	cbnz	r1, 71dc <bt_init+0x29c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    71a4:	aa01      	add	r2, sp, #4
    71a6:	f241 0005 	movw	r0, #4101	; 0x1005
    71aa:	f7ff fabb 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    71ae:	4604      	mov	r4, r0
    71b0:	2800      	cmp	r0, #0
    71b2:	f47f af41 	bne.w	7038 <bt_init+0xf8>
	if (bt_dev.le.acl_mtu) {
    71b6:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    71ba:	b963      	cbnz	r3, 71d6 <bt_init+0x296>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    71bc:	9b01      	ldr	r3, [sp, #4]
    71be:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    71c0:	785a      	ldrb	r2, [r3, #1]
    71c2:	7899      	ldrb	r1, [r3, #2]
    71c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    71c8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    71cc:	889a      	ldrh	r2, [r3, #4]
    71ce:	4847      	ldr	r0, [pc, #284]	; (72ec <bt_init+0x3ac>)
    71d0:	4611      	mov	r1, r2
    71d2:	f01c ff6a 	bl	240aa <z_impl_k_sem_init>
	net_buf_unref(rsp);
    71d6:	9801      	ldr	r0, [sp, #4]
    71d8:	f012 ff72 	bl	1a0c0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    71dc:	2108      	movs	r1, #8
    71de:	f640 4001 	movw	r0, #3073	; 0xc01
    71e2:	f7ff fa65 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    71e6:	4604      	mov	r4, r0
    71e8:	2800      	cmp	r0, #0
    71ea:	d061      	beq.n	72b0 <bt_init+0x370>
    71ec:	2108      	movs	r1, #8
    71ee:	4408      	add	r0, r1
    71f0:	f01b ffcf 	bl	23192 <net_buf_simple_add>
	dst[0] = val;
    71f4:	2310      	movs	r3, #16
    71f6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    71f8:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    71fa:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    71fc:	7043      	strb	r3, [r0, #1]
    71fe:	2602      	movs	r6, #2
    7200:	2320      	movs	r3, #32
	dst[0] = val;
    7202:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    7204:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    7206:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7208:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    720a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    720c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    720e:	4621      	mov	r1, r4
    7210:	f640 4001 	movw	r0, #3073	; 0xc01
    7214:	f7ff fa86 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7218:	4604      	mov	r4, r0
    721a:	2800      	cmp	r0, #0
    721c:	f47f af0c 	bne.w	7038 <bt_init+0xf8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    7220:	4601      	mov	r1, r0
    7222:	aa01      	add	r2, sp, #4
    7224:	f64f 4001 	movw	r0, #64513	; 0xfc01
    7228:	f7ff fa7c 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    722c:	4604      	mov	r4, r0
    722e:	bb48      	cbnz	r0, 7284 <bt_init+0x344>
	net_buf_unref(rsp);
    7230:	9801      	ldr	r0, [sp, #4]
    7232:	f012 ff45 	bl	1a0c0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    7236:	4621      	mov	r1, r4
    7238:	aa01      	add	r2, sp, #4
    723a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    723e:	f7ff fa71 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7242:	4604      	mov	r4, r0
    7244:	b9f0      	cbnz	r0, 7284 <bt_init+0x344>
	rp.cmds = (void *)rsp->data;
    7246:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    7248:	4829      	ldr	r0, [pc, #164]	; (72f0 <bt_init+0x3b0>)
    724a:	6899      	ldr	r1, [r3, #8]
    724c:	4632      	mov	r2, r6
    724e:	3101      	adds	r1, #1
    7250:	f019 fa6a 	bl	20728 <memcpy>
	net_buf_unref(rsp);
    7254:	9801      	ldr	r0, [sp, #4]
    7256:	f012 ff33 	bl	1a0c0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    725a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    725e:	075b      	lsls	r3, r3, #29
    7260:	d510      	bpl.n	7284 <bt_init+0x344>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    7262:	aa01      	add	r2, sp, #4
    7264:	4621      	mov	r1, r4
    7266:	f64f 4003 	movw	r0, #64515	; 0xfc03
    726a:	f7ff fa5b 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    726e:	b948      	cbnz	r0, 7284 <bt_init+0x344>
		rp.feat = (void *)rsp->data;
    7270:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    7272:	4820      	ldr	r0, [pc, #128]	; (72f4 <bt_init+0x3b4>)
    7274:	6899      	ldr	r1, [r3, #8]
    7276:	2201      	movs	r2, #1
    7278:	4411      	add	r1, r2
    727a:	f019 fa55 	bl	20728 <memcpy>
		net_buf_unref(rsp);
    727e:	9801      	ldr	r0, [sp, #4]
    7280:	f012 ff1e 	bl	1a0c0 <net_buf_unref>
	err = bt_id_init();
    7284:	f000 faca 	bl	781c <bt_id_init>
	if (err) {
    7288:	4604      	mov	r4, r0
    728a:	2800      	cmp	r0, #0
    728c:	f47f aed4 	bne.w	7038 <bt_init+0xf8>
		err = bt_conn_init();
    7290:	f001 fbaa 	bl	89e8 <bt_conn_init>
		if (err) {
    7294:	4604      	mov	r4, r0
    7296:	2800      	cmp	r0, #0
    7298:	f47f aece 	bne.w	7038 <bt_init+0xf8>
	bt_finalize_init();
    729c:	f7ff fe44 	bl	6f28 <bt_finalize_init>
	return 0;
    72a0:	e6ca      	b.n	7038 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    72a2:	2102      	movs	r1, #2
    72a4:	f640 406d 	movw	r0, #3181	; 0xc6d
    72a8:	f7ff fa02 	bl	66b0 <bt_hci_cmd_create>
		if (!buf) {
    72ac:	4604      	mov	r4, r0
    72ae:	b910      	cbnz	r0, 72b6 <bt_init+0x376>
		return -ENOBUFS;
    72b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    72b4:	e6c0      	b.n	7038 <bt_init+0xf8>
    72b6:	2102      	movs	r1, #2
    72b8:	3008      	adds	r0, #8
    72ba:	f01b ff6a 	bl	23192 <net_buf_simple_add>
		cp_le->le = 0x01;
    72be:	2301      	movs	r3, #1
    72c0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    72c2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    72c4:	4621      	mov	r1, r4
    72c6:	4632      	mov	r2, r6
    72c8:	f640 406d 	movw	r0, #3181	; 0xc6d
    72cc:	f7ff fa2a 	bl	6724 <bt_hci_cmd_send_sync>
		if (err) {
    72d0:	4604      	mov	r4, r0
    72d2:	2800      	cmp	r0, #0
    72d4:	f43f aeec 	beq.w	70b0 <bt_init+0x170>
    72d8:	e6ae      	b.n	7038 <bt_init+0xf8>
	else if (!bt_dev.le.acl_mtu) {
    72da:	2900      	cmp	r1, #0
    72dc:	f47f af7e 	bne.w	71dc <bt_init+0x29c>
		return -EIO;
    72e0:	f06f 0404 	mvn.w	r4, #4
    72e4:	e6a8      	b.n	7038 <bt_init+0xf8>
    72e6:	bf00      	nop
    72e8:	200000d0 	.word	0x200000d0
    72ec:	20000100 	.word	0x20000100
    72f0:	200000b9 	.word	0x200000b9
    72f4:	200000b8 	.word	0x200000b8

000072f8 <init_work>:

static void init_work(struct k_work *work)
{
    72f8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    72fa:	f7ff fe21 	bl	6f40 <bt_init>
	if (ready_cb) {
    72fe:	4b03      	ldr	r3, [pc, #12]	; (730c <init_work+0x14>)
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	b113      	cbz	r3, 730a <init_work+0x12>
		ready_cb(err);
	}
}
    7304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7308:	4718      	bx	r3
}
    730a:	bd10      	pop	{r4, pc}
    730c:	200041bc 	.word	0x200041bc

00007310 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
    7310:	b570      	push	{r4, r5, r6, lr}
    7312:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
    7314:	f019 f9db 	bl	206ce <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    7318:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    731a:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    731c:	d811      	bhi.n	7342 <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
    731e:	4c0a      	ldr	r4, [pc, #40]	; (7348 <bt_set_name+0x38>)
    7320:	4631      	mov	r1, r6
    7322:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    7326:	f019 f9e2 	bl	206ee <strcmp>
    732a:	b148      	cbz	r0, 7340 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
    732c:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    7330:	462a      	mov	r2, r5
    7332:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
    7334:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
    7336:	f019 f9b8 	bl	206aa <strncpy>
	bt_dev.name[len] = '\0';
    733a:	2000      	movs	r0, #0
    733c:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150

	return 0;
#else
	return -ENOMEM;
#endif
}
    7340:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    7342:	f06f 000b 	mvn.w	r0, #11
    7346:	e7fb      	b.n	7340 <bt_set_name+0x30>
    7348:	20000000 	.word	0x20000000

0000734c <bt_enable>:
{
    734c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    734e:	4d21      	ldr	r5, [pc, #132]	; (73d4 <bt_enable+0x88>)
    7350:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    7354:	b088      	sub	sp, #32
    7356:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7358:	2b00      	cmp	r3, #0
    735a:	d035      	beq.n	73c8 <bt_enable+0x7c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    735c:	2101      	movs	r1, #1
    735e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    7362:	f019 fb02 	bl	2096a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7366:	ea10 0401 	ands.w	r4, r0, r1
    736a:	d130      	bne.n	73ce <bt_enable+0x82>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
    736c:	481a      	ldr	r0, [pc, #104]	; (73d8 <bt_enable+0x8c>)
    736e:	f7ff ffcf 	bl	7310 <bt_set_name>
	ready_cb = cb;
    7372:	4b1a      	ldr	r3, [pc, #104]	; (73dc <bt_enable+0x90>)
    7374:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7376:	2200      	movs	r2, #0
    7378:	2300      	movs	r3, #0
    737a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    737e:	f06f 0308 	mvn.w	r3, #8
    7382:	e9cd 4302 	strd	r4, r3, [sp, #8]
    7386:	e9cd 4400 	strd	r4, r4, [sp]
    738a:	4b15      	ldr	r3, [pc, #84]	; (73e0 <bt_enable+0x94>)
    738c:	4915      	ldr	r1, [pc, #84]	; (73e4 <bt_enable+0x98>)
    738e:	9404      	str	r4, [sp, #16]
    7390:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7394:	4814      	ldr	r0, [pc, #80]	; (73e8 <bt_enable+0x9c>)
    7396:	f016 ff2f 	bl	1e1f8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    739a:	4914      	ldr	r1, [pc, #80]	; (73ec <bt_enable+0xa0>)
    739c:	4812      	ldr	r0, [pc, #72]	; (73e8 <bt_enable+0x9c>)
    739e:	f01c fd9c 	bl	23eda <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    73a2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    73a6:	68db      	ldr	r3, [r3, #12]
    73a8:	4798      	blx	r3
	if (err) {
    73aa:	4604      	mov	r4, r0
    73ac:	b948      	cbnz	r0, 73c2 <bt_enable+0x76>
	if (!cb) {
    73ae:	b926      	cbnz	r6, 73ba <bt_enable+0x6e>
}
    73b0:	b008      	add	sp, #32
    73b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    73b6:	f7ff bdc3 	b.w	6f40 <bt_init>
	k_work_submit(&bt_dev.init);
    73ba:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    73be:	f017 fa19 	bl	1e7f4 <k_work_submit>
}
    73c2:	4620      	mov	r0, r4
    73c4:	b008      	add	sp, #32
    73c6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    73c8:	f06f 0412 	mvn.w	r4, #18
    73cc:	e7f9      	b.n	73c2 <bt_enable+0x76>
		return -EALREADY;
    73ce:	f06f 0477 	mvn.w	r4, #119	; 0x77
    73d2:	e7f6      	b.n	73c2 <bt_enable+0x76>
    73d4:	20000000 	.word	0x20000000
    73d8:	00026778 	.word	0x00026778
    73dc:	200041bc 	.word	0x200041bc
    73e0:	00006be5 	.word	0x00006be5
    73e4:	20007138 	.word	0x20007138
    73e8:	20000f00 	.word	0x20000f00
    73ec:	00026781 	.word	0x00026781

000073f0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    73f0:	4800      	ldr	r0, [pc, #0]	; (73f4 <bt_get_name+0x4>)
    73f2:	4770      	bx	lr
    73f4:	20000150 	.word	0x20000150

000073f8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    73f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    73fa:	4f0b      	ldr	r7, [pc, #44]	; (7428 <id_find+0x30>)
{
    73fc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    73fe:	2500      	movs	r5, #0
    7400:	79fb      	ldrb	r3, [r7, #7]
    7402:	b2ec      	uxtb	r4, r5
    7404:	42a3      	cmp	r3, r4
    7406:	d802      	bhi.n	740e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7408:	f06f 0401 	mvn.w	r4, #1
    740c:	e009      	b.n	7422 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    740e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    7412:	2207      	movs	r2, #7
    7414:	4439      	add	r1, r7
    7416:	4630      	mov	r0, r6
    7418:	f019 f975 	bl	20706 <memcmp>
    741c:	3501      	adds	r5, #1
    741e:	2800      	cmp	r0, #0
    7420:	d1ee      	bne.n	7400 <id_find+0x8>
}
    7422:	4620      	mov	r0, r4
    7424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7426:	bf00      	nop
    7428:	20000000 	.word	0x20000000

0000742c <set_random_address>:
{
    742c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    742e:	4914      	ldr	r1, [pc, #80]	; (7480 <set_random_address+0x54>)
    7430:	2206      	movs	r2, #6
    7432:	4605      	mov	r5, r0
    7434:	f019 f967 	bl	20706 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7438:	4604      	mov	r4, r0
    743a:	b1e0      	cbz	r0, 7476 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    743c:	2106      	movs	r1, #6
    743e:	f242 0005 	movw	r0, #8197	; 0x2005
    7442:	f7ff f935 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    7446:	4604      	mov	r4, r0
    7448:	b1b8      	cbz	r0, 747a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    744a:	2206      	movs	r2, #6
    744c:	4629      	mov	r1, r5
    744e:	3008      	adds	r0, #8
    7450:	f01b fea5 	bl	2319e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7454:	4621      	mov	r1, r4
    7456:	2200      	movs	r2, #0
    7458:	f242 0005 	movw	r0, #8197	; 0x2005
    745c:	f7ff f962 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7460:	4604      	mov	r4, r0
    7462:	b940      	cbnz	r0, 7476 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    7464:	2206      	movs	r2, #6
    7466:	4806      	ldr	r0, [pc, #24]	; (7480 <set_random_address+0x54>)
    7468:	4629      	mov	r1, r5
    746a:	f019 f95d 	bl	20728 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    746e:	4b05      	ldr	r3, [pc, #20]	; (7484 <set_random_address+0x58>)
    7470:	2201      	movs	r2, #1
    7472:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    7476:	4620      	mov	r0, r4
    7478:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    747a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    747e:	e7fa      	b.n	7476 <set_random_address+0x4a>
    7480:	20000061 	.word	0x20000061
    7484:	20000000 	.word	0x20000000

00007488 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7488:	b530      	push	{r4, r5, lr}
    748a:	4604      	mov	r4, r0
    748c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    748e:	460d      	mov	r5, r1
    7490:	b1a1      	cbz	r1, 74bc <id_create.constprop.0+0x34>
    7492:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7494:	2207      	movs	r2, #7
    7496:	a902      	add	r1, sp, #8
    7498:	4628      	mov	r0, r5
    749a:	9302      	str	r3, [sp, #8]
    749c:	f8cd 300b 	str.w	r3, [sp, #11]
    74a0:	f019 f931 	bl	20706 <memcmp>
    74a4:	b150      	cbz	r0, 74bc <id_create.constprop.0+0x34>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    74a6:	4812      	ldr	r0, [pc, #72]	; (74f0 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    74a8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    74ac:	2207      	movs	r2, #7
    74ae:	4629      	mov	r1, r5
    74b0:	4420      	add	r0, r4
    74b2:	f019 f939 	bl	20728 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    74b6:	2000      	movs	r0, #0
}
    74b8:	b005      	add	sp, #20
    74ba:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    74bc:	4668      	mov	r0, sp
    74be:	f019 fa0d 	bl	208dc <bt_addr_le_create_static>
			if (err) {
    74c2:	2800      	cmp	r0, #0
    74c4:	d1f8      	bne.n	74b8 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    74c6:	4668      	mov	r0, sp
    74c8:	f7ff ff96 	bl	73f8 <id_find>
    74cc:	2800      	cmp	r0, #0
    74ce:	daf5      	bge.n	74bc <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    74d0:	4807      	ldr	r0, [pc, #28]	; (74f0 <id_create.constprop.0+0x68>)
    74d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    74d6:	4404      	add	r4, r0
    74d8:	2207      	movs	r2, #7
    74da:	4669      	mov	r1, sp
    74dc:	4620      	mov	r0, r4
    74de:	f019 f923 	bl	20728 <memcpy>
		if (addr) {
    74e2:	2d00      	cmp	r5, #0
    74e4:	d0e7      	beq.n	74b6 <id_create.constprop.0+0x2e>
    74e6:	2207      	movs	r2, #7
    74e8:	4621      	mov	r1, r4
    74ea:	4628      	mov	r0, r5
    74ec:	e7e1      	b.n	74b2 <id_create.constprop.0+0x2a>
    74ee:	bf00      	nop
    74f0:	20000000 	.word	0x20000000

000074f4 <bt_id_adv_random_addr_check>:
{
    74f4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    74f6:	4805      	ldr	r0, [pc, #20]	; (750c <bt_id_adv_random_addr_check+0x18>)
    74f8:	f019 fcda 	bl	20eb0 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    74fc:	0503      	lsls	r3, r0, #20
    74fe:	d402      	bmi.n	7506 <bt_id_adv_random_addr_check+0x12>
    7500:	4802      	ldr	r0, [pc, #8]	; (750c <bt_id_adv_random_addr_check+0x18>)
    7502:	f019 fcd5 	bl	20eb0 <atomic_get>
}
    7506:	2001      	movs	r0, #1
    7508:	bd08      	pop	{r3, pc}
    750a:	bf00      	nop
    750c:	200000cc 	.word	0x200000cc

00007510 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    7510:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7512:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7514:	4605      	mov	r5, r0
    7516:	b918      	cbnz	r0, 7520 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7518:	b1ec      	cbz	r4, 7556 <bt_id_create+0x46>
		return -EINVAL;
    751a:	f06f 0015 	mvn.w	r0, #21
    751e:	e018      	b.n	7552 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7520:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7522:	2207      	movs	r2, #7
    7524:	4669      	mov	r1, sp
    7526:	9300      	str	r3, [sp, #0]
    7528:	f8cd 3003 	str.w	r3, [sp, #3]
    752c:	f019 f8eb 	bl	20706 <memcmp>
    7530:	2800      	cmp	r0, #0
    7532:	d0f1      	beq.n	7518 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7534:	782b      	ldrb	r3, [r5, #0]
    7536:	2b01      	cmp	r3, #1
    7538:	d1ef      	bne.n	751a <bt_id_create+0xa>
    753a:	79ab      	ldrb	r3, [r5, #6]
    753c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7540:	2bc0      	cmp	r3, #192	; 0xc0
    7542:	d1ea      	bne.n	751a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7544:	4628      	mov	r0, r5
    7546:	f7ff ff57 	bl	73f8 <id_find>
    754a:	2800      	cmp	r0, #0
    754c:	dbe4      	blt.n	7518 <bt_id_create+0x8>
			return -EALREADY;
    754e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    7552:	b002      	add	sp, #8
    7554:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7556:	4e12      	ldr	r6, [pc, #72]	; (75a0 <bt_id_create+0x90>)
    7558:	79f3      	ldrb	r3, [r6, #7]
    755a:	2b01      	cmp	r3, #1
    755c:	d01c      	beq.n	7598 <bt_id_create+0x88>
    755e:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    7562:	f019 fca5 	bl	20eb0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7566:	07c3      	lsls	r3, r0, #31
    7568:	d40b      	bmi.n	7582 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    756a:	2d00      	cmp	r5, #0
    756c:	d0d5      	beq.n	751a <bt_id_create+0xa>
    756e:	2207      	movs	r2, #7
    7570:	4669      	mov	r1, sp
    7572:	4628      	mov	r0, r5
    7574:	9400      	str	r4, [sp, #0]
    7576:	f8cd 4003 	str.w	r4, [sp, #3]
    757a:	f019 f8c4 	bl	20706 <memcmp>
    757e:	2800      	cmp	r0, #0
    7580:	d0cb      	beq.n	751a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    7582:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    7584:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    7586:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    7588:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    758a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    758c:	f7ff ff7c 	bl	7488 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    7590:	2800      	cmp	r0, #0
    7592:	bf08      	it	eq
    7594:	4620      	moveq	r0, r4
    7596:	e7dc      	b.n	7552 <bt_id_create+0x42>
		return -ENOMEM;
    7598:	f06f 000b 	mvn.w	r0, #11
    759c:	e7d9      	b.n	7552 <bt_id_create+0x42>
    759e:	bf00      	nop
    75a0:	20000000 	.word	0x20000000

000075a4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    75a4:	b570      	push	{r4, r5, r6, lr}
    75a6:	b086      	sub	sp, #24
    75a8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    75aa:	aa01      	add	r2, sp, #4
    75ac:	2100      	movs	r1, #0
    75ae:	f241 0009 	movw	r0, #4105	; 0x1009
    75b2:	f7ff f8b7 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    75b6:	4604      	mov	r4, r0
    75b8:	b970      	cbnz	r0, 75d8 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    75ba:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    75bc:	9002      	str	r0, [sp, #8]
    75be:	689d      	ldr	r5, [r3, #8]
    75c0:	f8ad 000c 	strh.w	r0, [sp, #12]
    75c4:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    75c6:	2206      	movs	r2, #6
    75c8:	a902      	add	r1, sp, #8
    75ca:	4628      	mov	r0, r5
    75cc:	f019 f89b 	bl	20706 <memcmp>
    75d0:	b920      	cbnz	r0, 75dc <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    75d2:	9801      	ldr	r0, [sp, #4]
    75d4:	f012 fd74 	bl	1a0c0 <net_buf_unref>
		return 0U;
    75d8:	2000      	movs	r0, #0
    75da:	e016      	b.n	760a <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    75dc:	4b0c      	ldr	r3, [pc, #48]	; (7610 <bt_id_read_public_addr+0x6c>)
    75de:	6818      	ldr	r0, [r3, #0]
    75e0:	9004      	str	r0, [sp, #16]
    75e2:	889b      	ldrh	r3, [r3, #4]
    75e4:	f8ad 3014 	strh.w	r3, [sp, #20]
    75e8:	2206      	movs	r2, #6
    75ea:	a904      	add	r1, sp, #16
    75ec:	4628      	mov	r0, r5
    75ee:	f019 f88a 	bl	20706 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    75f2:	2800      	cmp	r0, #0
    75f4:	d0ed      	beq.n	75d2 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    75f6:	2206      	movs	r2, #6
    75f8:	4629      	mov	r1, r5
    75fa:	1c70      	adds	r0, r6, #1
    75fc:	f019 f894 	bl	20728 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    7600:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    7602:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    7604:	f012 fd5c 	bl	1a0c0 <net_buf_unref>
	return 1U;
    7608:	2001      	movs	r0, #1
}
    760a:	b006      	add	sp, #24
    760c:	bd70      	pop	{r4, r5, r6, pc}
    760e:	bf00      	nop
    7610:	00024be4 	.word	0x00024be4

00007614 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    7614:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    7616:	4668      	mov	r0, sp
    7618:	f7ff ffc4 	bl	75a4 <bt_id_read_public_addr>
    761c:	4b04      	ldr	r3, [pc, #16]	; (7630 <bt_setup_public_id_addr+0x1c>)
    761e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    7620:	b118      	cbz	r0, 762a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    7622:	4669      	mov	r1, sp
    7624:	2000      	movs	r0, #0
    7626:	f7ff ff2f 	bl	7488 <id_create.constprop.0>
}
    762a:	b003      	add	sp, #12
    762c:	f85d fb04 	ldr.w	pc, [sp], #4
    7630:	20000000 	.word	0x20000000

00007634 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    7634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7638:	4b15      	ldr	r3, [pc, #84]	; (7690 <bt_read_static_addr+0x5c>)
    763a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    763e:	f014 0401 	ands.w	r4, r4, #1
{
    7642:	4607      	mov	r7, r0
    7644:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7646:	d015      	beq.n	7674 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7648:	aa01      	add	r2, sp, #4
    764a:	2100      	movs	r1, #0
    764c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7650:	f7ff f868 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7654:	4605      	mov	r5, r0
    7656:	b9c8      	cbnz	r0, 768c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    7658:	9b01      	ldr	r3, [sp, #4]
    765a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    765c:	785c      	ldrb	r4, [r3, #1]
    765e:	42b4      	cmp	r4, r6
    7660:	bf28      	it	cs
    7662:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7664:	f04f 0816 	mov.w	r8, #22
    7668:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    766a:	42a5      	cmp	r5, r4
    766c:	db06      	blt.n	767c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    766e:	9801      	ldr	r0, [sp, #4]
    7670:	f012 fd26 	bl	1a0c0 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    7674:	4620      	mov	r0, r4
    7676:	b002      	add	sp, #8
    7678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    767c:	fb08 7005 	mla	r0, r8, r5, r7
    7680:	2216      	movs	r2, #22
    7682:	4631      	mov	r1, r6
    7684:	f019 f850 	bl	20728 <memcpy>
	for (i = 0; i < cnt; i++) {
    7688:	3501      	adds	r5, #1
    768a:	e7ee      	b.n	766a <bt_read_static_addr+0x36>
		return 0;
    768c:	2400      	movs	r4, #0
    768e:	e7f1      	b.n	7674 <bt_read_static_addr+0x40>
    7690:	20000000 	.word	0x20000000

00007694 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    7694:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    7696:	4e15      	ldr	r6, [pc, #84]	; (76ec <bt_setup_random_id_addr+0x58>)
    7698:	79f4      	ldrb	r4, [r6, #7]
{
    769a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    769c:	b9f4      	cbnz	r4, 76dc <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    769e:	2101      	movs	r1, #1
    76a0:	a802      	add	r0, sp, #8
    76a2:	f7ff ffc7 	bl	7634 <bt_read_static_addr>
    76a6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    76a8:	b1c0      	cbz	r0, 76dc <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    76aa:	2716      	movs	r7, #22
    76ac:	ab02      	add	r3, sp, #8
    76ae:	b2e5      	uxtb	r5, r4
    76b0:	fb07 3105 	mla	r1, r7, r5, r3
    76b4:	2206      	movs	r2, #6
    76b6:	f10d 0001 	add.w	r0, sp, #1
    76ba:	f019 f835 	bl	20728 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    76be:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    76c0:	4669      	mov	r1, sp
    76c2:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    76c4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    76c8:	f7ff fede 	bl	7488 <id_create.constprop.0>
				if (err) {
    76cc:	b920      	cbnz	r0, 76d8 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    76ce:	79f2      	ldrb	r2, [r6, #7]
    76d0:	3401      	adds	r4, #1
    76d2:	b2e3      	uxtb	r3, r4
    76d4:	429a      	cmp	r2, r3
    76d6:	d8e9      	bhi.n	76ac <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    76d8:	b009      	add	sp, #36	; 0x24
    76da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    76dc:	2100      	movs	r1, #0
    76de:	4608      	mov	r0, r1
}
    76e0:	b009      	add	sp, #36	; 0x24
    76e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    76e6:	f7ff bf13 	b.w	7510 <bt_id_create>
    76ea:	bf00      	nop
    76ec:	20000000 	.word	0x20000000

000076f0 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    76f0:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    76f2:	4c07      	ldr	r4, [pc, #28]	; (7710 <bt_id_set_create_conn_own_addr+0x20>)
    76f4:	7823      	ldrb	r3, [r4, #0]
    76f6:	2b01      	cmp	r3, #1
{
    76f8:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    76fa:	d003      	beq.n	7704 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    76fc:	7823      	ldrb	r3, [r4, #0]
    76fe:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    7700:	2000      	movs	r0, #0
}
    7702:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    7704:	1c60      	adds	r0, r4, #1
    7706:	f7ff fe91 	bl	742c <set_random_address>
			if (err) {
    770a:	2800      	cmp	r0, #0
    770c:	d0f6      	beq.n	76fc <bt_id_set_create_conn_own_addr+0xc>
    770e:	e7f8      	b.n	7702 <bt_id_set_create_conn_own_addr+0x12>
    7710:	20000000 	.word	0x20000000

00007714 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    7714:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    7716:	4b0b      	ldr	r3, [pc, #44]	; (7744 <bt_id_set_scan_own_addr+0x30>)
    7718:	781b      	ldrb	r3, [r3, #0]
    771a:	700b      	strb	r3, [r1, #0]
{
    771c:	4606      	mov	r6, r0
    771e:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    7720:	f019 fbcc 	bl	20ebc <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    7724:	b928      	cbnz	r0, 7732 <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    7726:	f019 fbd5 	bl	20ed4 <bt_id_set_private_addr>
			if (err) {
    772a:	4604      	mov	r4, r0
    772c:	b918      	cbnz	r0, 7736 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    772e:	2301      	movs	r3, #1
    7730:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    7732:	2400      	movs	r4, #0
    7734:	e004      	b.n	7740 <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
    7736:	b91e      	cbnz	r6, 7740 <bt_id_set_scan_own_addr+0x2c>
    7738:	f019 fbc0 	bl	20ebc <is_adv_using_rand_addr>
    773c:	2800      	cmp	r0, #0
    773e:	d1f6      	bne.n	772e <bt_id_set_scan_own_addr+0x1a>
}
    7740:	4620      	mov	r0, r4
    7742:	bd70      	pop	{r4, r5, r6, pc}
    7744:	20000000 	.word	0x20000000

00007748 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    7748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    774c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    7750:	7806      	ldrb	r6, [r0, #0]
{
    7752:	4680      	mov	r8, r0
    7754:	460d      	mov	r5, r1
    7756:	4691      	mov	r9, r2
    7758:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    775a:	d02b      	beq.n	77b4 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    775c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7814 <bt_id_set_adv_own_addr+0xcc>
    7760:	b12a      	cbz	r2, 776e <bt_id_set_adv_own_addr+0x26>
    7762:	0688      	lsls	r0, r1, #26
    7764:	d503      	bpl.n	776e <bt_id_set_adv_own_addr+0x26>
    7766:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    776a:	0659      	lsls	r1, r3, #25
    776c:	d54f      	bpl.n	780e <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    776e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    7772:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    7776:	f818 3003 	ldrb.w	r3, [r8, r3]
    777a:	2b01      	cmp	r3, #1
    777c:	d009      	beq.n	7792 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    777e:	ebaa 0606 	sub.w	r6, sl, r6
    7782:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    7786:	f1b9 0f00 	cmp.w	r9, #0
    778a:	d10e      	bne.n	77aa <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    778c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    778e:	2400      	movs	r4, #0
    7790:	e008      	b.n	77a4 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    7792:	2007      	movs	r0, #7
    7794:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    7798:	4440      	add	r0, r8
    779a:	f7ff fe47 	bl	742c <set_random_address>
				if (err) {
    779e:	4604      	mov	r4, r0
    77a0:	2800      	cmp	r0, #0
    77a2:	d0ec      	beq.n	777e <bt_id_set_adv_own_addr+0x36>
}
    77a4:	4620      	mov	r0, r4
    77a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    77aa:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    77ac:	bf48      	it	mi
    77ae:	f043 0302 	orrmi.w	r3, r3, #2
    77b2:	e7eb      	b.n	778c <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    77b4:	f011 0504 	ands.w	r5, r1, #4
    77b8:	d014      	beq.n	77e4 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    77ba:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7814 <bt_id_set_adv_own_addr+0xcc>
    77be:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    77c2:	00f5      	lsls	r5, r6, #3
    77c4:	f818 3003 	ldrb.w	r3, [r8, r3]
    77c8:	2b01      	cmp	r3, #1
    77ca:	d106      	bne.n	77da <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    77cc:	2007      	movs	r0, #7
    77ce:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    77d2:	4440      	add	r0, r8
    77d4:	f7ff fe2a 	bl	742c <set_random_address>
    77d8:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    77da:	1bad      	subs	r5, r5, r6
    77dc:	f818 3005 	ldrb.w	r3, [r8, r5]
    77e0:	703b      	strb	r3, [r7, #0]
    77e2:	e7df      	b.n	77a4 <bt_id_set_adv_own_addr+0x5c>
    77e4:	480c      	ldr	r0, [pc, #48]	; (7818 <bt_id_set_adv_own_addr+0xd0>)
    77e6:	f019 fb63 	bl	20eb0 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    77ea:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    77ec:	f3c0 1640 	ubfx	r6, r0, #5, #1
    77f0:	d502      	bpl.n	77f8 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    77f2:	4628      	mov	r0, r5
    77f4:	f019 fcee 	bl	211d4 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    77f8:	4640      	mov	r0, r8
    77fa:	f019 fb7d 	bl	20ef8 <bt_id_set_adv_private_addr>
    77fe:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7800:	2001      	movs	r0, #1
    7802:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    7804:	2e00      	cmp	r6, #0
    7806:	d0cd      	beq.n	77a4 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7808:	f019 fce4 	bl	211d4 <bt_le_scan_set_enable>
		if (err) {
    780c:	e7ca      	b.n	77a4 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    780e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7812:	e7c7      	b.n	77a4 <bt_id_set_adv_own_addr+0x5c>
    7814:	20000000 	.word	0x20000000
    7818:	200000cc 	.word	0x200000cc

0000781c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    781c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    781e:	4c0a      	ldr	r4, [pc, #40]	; (7848 <bt_id_init+0x2c>)
    7820:	79e3      	ldrb	r3, [r4, #7]
    7822:	b10b      	cbz	r3, 7828 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    7824:	2000      	movs	r0, #0
}
    7826:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    7828:	f7ff fef4 	bl	7614 <bt_setup_public_id_addr>
		if (err) {
    782c:	2800      	cmp	r0, #0
    782e:	d1fa      	bne.n	7826 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7830:	79e3      	ldrb	r3, [r4, #7]
    7832:	2b00      	cmp	r3, #0
    7834:	d1f6      	bne.n	7824 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    7836:	f7ff ff2d 	bl	7694 <bt_setup_random_id_addr>
		if (err) {
    783a:	2800      	cmp	r0, #0
    783c:	d1f3      	bne.n	7826 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    783e:	1c60      	adds	r0, r4, #1
}
    7840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    7844:	f7ff bdf2 	b.w	742c <set_random_address>
    7848:	20000000 	.word	0x20000000

0000784c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    784c:	6843      	ldr	r3, [r0, #4]
{
    784e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7850:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7852:	0558      	lsls	r0, r3, #21
    7854:	d502      	bpl.n	785c <valid_adv_param+0x10>
		return false;
    7856:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    7858:	b003      	add	sp, #12
    785a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    785c:	6922      	ldr	r2, [r4, #16]
    785e:	b10a      	cbz	r2, 7864 <valid_adv_param+0x18>
    7860:	07d9      	lsls	r1, r3, #31
    7862:	d5f8      	bpl.n	7856 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    7864:	4d1a      	ldr	r5, [pc, #104]	; (78d0 <valid_adv_param+0x84>)
    7866:	7820      	ldrb	r0, [r4, #0]
    7868:	79eb      	ldrb	r3, [r5, #7]
    786a:	4283      	cmp	r3, r0
    786c:	d9f3      	bls.n	7856 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    786e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7872:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7874:	2207      	movs	r2, #7
    7876:	4669      	mov	r1, sp
    7878:	4428      	add	r0, r5
    787a:	9300      	str	r3, [sp, #0]
    787c:	f8cd 3003 	str.w	r3, [sp, #3]
    7880:	f018 ff41 	bl	20706 <memcmp>
	if (param->id >= bt_dev.id_count ||
    7884:	2800      	cmp	r0, #0
    7886:	d0e6      	beq.n	7856 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7888:	6860      	ldr	r0, [r4, #4]
    788a:	07c2      	lsls	r2, r0, #31
    788c:	d406      	bmi.n	789c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    788e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    7892:	2b08      	cmp	r3, #8
    7894:	d802      	bhi.n	789c <valid_adv_param+0x50>
    7896:	68a3      	ldr	r3, [r4, #8]
    7898:	2b9f      	cmp	r3, #159	; 0x9f
    789a:	d9dc      	bls.n	7856 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    789c:	f010 0f30 	tst.w	r0, #48	; 0x30
    78a0:	d002      	beq.n	78a8 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    78a2:	6923      	ldr	r3, [r4, #16]
    78a4:	2b00      	cmp	r3, #0
    78a6:	d0d6      	beq.n	7856 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    78a8:	06c3      	lsls	r3, r0, #27
    78aa:	d401      	bmi.n	78b0 <valid_adv_param+0x64>
    78ac:	6923      	ldr	r3, [r4, #16]
    78ae:	b943      	cbnz	r3, 78c2 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    78b0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    78b4:	429a      	cmp	r2, r3
    78b6:	d8ce      	bhi.n	7856 <valid_adv_param+0xa>
    78b8:	2a1f      	cmp	r2, #31
    78ba:	d9cc      	bls.n	7856 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    78bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    78c0:	d8c9      	bhi.n	7856 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    78c2:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    78c6:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    78ca:	bf18      	it	ne
    78cc:	2001      	movne	r0, #1
    78ce:	e7c3      	b.n	7858 <valid_adv_param+0xc>
    78d0:	20000000 	.word	0x20000000

000078d4 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    78d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    78d6:	4606      	mov	r6, r0
    78d8:	4b1e      	ldr	r3, [pc, #120]	; (7954 <le_adv_start_add_conn+0x80>)
    78da:	f816 2b09 	ldrb.w	r2, [r6], #9
    78de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    78e2:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    78e4:	2300      	movs	r3, #0
{
    78e6:	4605      	mov	r5, r0
    78e8:	2207      	movs	r2, #7
    78ea:	460f      	mov	r7, r1
    78ec:	4630      	mov	r0, r6
    78ee:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    78f0:	9300      	str	r3, [sp, #0]
    78f2:	f8cd 3003 	str.w	r3, [sp, #3]
    78f6:	f018 ff06 	bl	20706 <memcmp>
    78fa:	782a      	ldrb	r2, [r5, #0]
    78fc:	4604      	mov	r4, r0
    78fe:	b9a8      	cbnz	r0, 792c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    7900:	4b15      	ldr	r3, [pc, #84]	; (7958 <le_adv_start_add_conn+0x84>)
    7902:	6818      	ldr	r0, [r3, #0]
    7904:	8899      	ldrh	r1, [r3, #4]
    7906:	9002      	str	r0, [sp, #8]
    7908:	799b      	ldrb	r3, [r3, #6]
    790a:	f8ad 100c 	strh.w	r1, [sp, #12]
    790e:	4610      	mov	r0, r2
    7910:	a902      	add	r1, sp, #8
    7912:	f88d 300e 	strb.w	r3, [sp, #14]
    7916:	f000 fec3 	bl	86a0 <bt_conn_add_le>
		if (!conn) {
    791a:	4605      	mov	r5, r0
    791c:	b1b8      	cbz	r0, 794e <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    791e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7920:	f000 fd3c 	bl	839c <bt_conn_set_state>
	*out_conn = conn;
    7924:	603d      	str	r5, [r7, #0]
	return 0;
}
    7926:	4620      	mov	r0, r4
    7928:	b005      	add	sp, #20
    792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    792c:	4631      	mov	r1, r6
    792e:	4610      	mov	r0, r2
    7930:	f019 fd73 	bl	2141a <bt_conn_exists_le>
    7934:	4604      	mov	r4, r0
    7936:	b938      	cbnz	r0, 7948 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7938:	7828      	ldrb	r0, [r5, #0]
    793a:	4631      	mov	r1, r6
    793c:	f000 feb0 	bl	86a0 <bt_conn_add_le>
	if (!conn) {
    7940:	4605      	mov	r5, r0
    7942:	b120      	cbz	r0, 794e <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7944:	2105      	movs	r1, #5
    7946:	e7eb      	b.n	7920 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    7948:	f06f 0415 	mvn.w	r4, #21
    794c:	e7eb      	b.n	7926 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    794e:	f06f 040b 	mvn.w	r4, #11
    7952:	e7e8      	b.n	7926 <le_adv_start_add_conn+0x52>
    7954:	20000000 	.word	0x20000000
    7958:	00024bea 	.word	0x00024bea

0000795c <bt_le_adv_lookup_legacy>:
}
    795c:	4800      	ldr	r0, [pc, #0]	; (7960 <bt_le_adv_lookup_legacy+0x4>)
    795e:	4770      	bx	lr
    7960:	20000018 	.word	0x20000018

00007964 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    7964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    7968:	690e      	ldr	r6, [r1, #16]
{
    796a:	b08f      	sub	sp, #60	; 0x3c
    796c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    796e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    7970:	ebb6 0903 	subs.w	r9, r6, r3
{
    7974:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7976:	488c      	ldr	r0, [pc, #560]	; (7ba8 <bt_le_adv_start_legacy+0x244>)
    7978:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    797a:	bf18      	it	ne
    797c:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    7980:	9307      	str	r3, [sp, #28]
    7982:	f019 fada 	bl	20f3a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7986:	0787      	lsls	r7, r0, #30
{
    7988:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    798a:	f140 8102 	bpl.w	7b92 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    798e:	4608      	mov	r0, r1
    7990:	f7ff ff5c 	bl	784c <valid_adv_param>
    7994:	b928      	cbnz	r0, 79a2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    7996:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    799a:	4658      	mov	r0, fp
    799c:	b00f      	add	sp, #60	; 0x3c
    799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    79a2:	4620      	mov	r0, r4
    79a4:	f7ff fda6 	bl	74f4 <bt_id_adv_random_addr_check>
    79a8:	4680      	mov	r8, r0
    79aa:	2800      	cmp	r0, #0
    79ac:	d0f3      	beq.n	7996 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    79ae:	f105 0710 	add.w	r7, r5, #16
    79b2:	4638      	mov	r0, r7
    79b4:	f019 fac1 	bl	20f3a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    79b8:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    79bc:	0640      	lsls	r0, r0, #25
    79be:	f100 80eb 	bmi.w	7b98 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    79c2:	220f      	movs	r2, #15
    79c4:	4659      	mov	r1, fp
    79c6:	a80a      	add	r0, sp, #40	; 0x28
    79c8:	f018 feb9 	bl	2073e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    79cc:	68a3      	ldr	r3, [r4, #8]
    79ce:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    79d2:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    79d4:	68e3      	ldr	r3, [r4, #12]
    79d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    79da:	f019 fa9f 	bl	20f1c <get_adv_channel_map>
	if (adv->id != param->id) {
    79de:	782a      	ldrb	r2, [r5, #0]
    79e0:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    79e2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    79e6:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    79e8:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    79ec:	d004      	beq.n	79f8 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    79ee:	486e      	ldr	r0, [pc, #440]	; (7ba8 <bt_le_adv_start_legacy+0x244>)
    79f0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    79f4:	f019 faa7 	bl	20f46 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    79f8:	4a6c      	ldr	r2, [pc, #432]	; (7bac <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    79fa:	7823      	ldrb	r3, [r4, #0]
    79fc:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    79fe:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    7a02:	6861      	ldr	r1, [r4, #4]
    7a04:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    7a08:	464a      	mov	r2, r9
    7a0a:	4628      	mov	r0, r5
    7a0c:	f7ff fe9c 	bl	7748 <bt_id_set_adv_own_addr>
	if (err) {
    7a10:	4683      	mov	fp, r0
    7a12:	2800      	cmp	r0, #0
    7a14:	d1c1      	bne.n	799a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    7a16:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    7a1a:	2e00      	cmp	r6, #0
    7a1c:	d049      	beq.n	7ab2 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    7a1e:	6921      	ldr	r1, [r4, #16]
    7a20:	2207      	movs	r2, #7
    7a22:	f018 fe81 	bl	20728 <memcpy>
	name_type = get_adv_name_type_param(param);
    7a26:	4620      	mov	r0, r4
    7a28:	f019 fb8b 	bl	21142 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7a2c:	6863      	ldr	r3, [r4, #4]
    7a2e:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    7a30:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7a32:	d547      	bpl.n	7ac4 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    7a34:	2e00      	cmp	r6, #0
    7a36:	d042      	beq.n	7abe <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7a38:	f013 0f10 	tst.w	r3, #16
    7a3c:	bf14      	ite	ne
    7a3e:	2304      	movne	r3, #4
    7a40:	2301      	moveq	r3, #1
    7a42:	6921      	ldr	r1, [r4, #16]
    7a44:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7a48:	2207      	movs	r2, #7
    7a4a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    7a4e:	f018 fe6b 	bl	20728 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    7a52:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7a56:	210f      	movs	r1, #15
    7a58:	f242 0006 	movw	r0, #8198	; 0x2006
    7a5c:	f7fe fe28 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    7a60:	4683      	mov	fp, r0
    7a62:	2800      	cmp	r0, #0
    7a64:	f000 809b 	beq.w	7b9e <bt_le_adv_start_legacy+0x23a>
    7a68:	220f      	movs	r2, #15
    7a6a:	a90a      	add	r1, sp, #40	; 0x28
    7a6c:	3008      	adds	r0, #8
    7a6e:	f01b fb96 	bl	2319e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    7a72:	2200      	movs	r2, #0
    7a74:	4659      	mov	r1, fp
    7a76:	f242 0006 	movw	r0, #8198	; 0x2006
    7a7a:	f7fe fe53 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7a7e:	2800      	cmp	r0, #0
    7a80:	f040 8090 	bne.w	7ba4 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    7a84:	b376      	cbz	r6, 7ae4 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7a86:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7a88:	07db      	lsls	r3, r3, #31
    7a8a:	d439      	bmi.n	7b00 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7a8c:	2101      	movs	r1, #1
    7a8e:	4628      	mov	r0, r5
    7a90:	f019 fb67 	bl	21162 <bt_le_adv_set_enable_legacy>
	if (err) {
    7a94:	4683      	mov	fp, r0
    7a96:	9807      	ldr	r0, [sp, #28]
    7a98:	f1bb 0f00 	cmp.w	fp, #0
    7a9c:	d073      	beq.n	7b86 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7a9e:	2800      	cmp	r0, #0
    7aa0:	f43f af7b 	beq.w	799a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7aa4:	2100      	movs	r1, #0
    7aa6:	f000 fc79 	bl	839c <bt_conn_set_state>
			bt_conn_unref(conn);
    7aaa:	9807      	ldr	r0, [sp, #28]
    7aac:	f019 fc4f 	bl	2134e <bt_conn_unref>
    7ab0:	e773      	b.n	799a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7ab2:	9608      	str	r6, [sp, #32]
    7ab4:	2207      	movs	r2, #7
    7ab6:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    7aba:	a908      	add	r1, sp, #32
    7abc:	e7b1      	b.n	7a22 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    7abe:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    7ac2:	e7c8      	b.n	7a56 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    7ac4:	059a      	lsls	r2, r3, #22
    7ac6:	d403      	bmi.n	7ad0 <bt_le_adv_start_legacy+0x16c>
    7ac8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7aca:	b90b      	cbnz	r3, 7ad0 <bt_le_adv_start_legacy+0x16c>
    7acc:	2802      	cmp	r0, #2
    7ace:	d103      	bne.n	7ad8 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    7ad0:	2302      	movs	r3, #2
    7ad2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7ad6:	e7be      	b.n	7a56 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7ad8:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    7ada:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7ade:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7ae2:	e7b8      	b.n	7a56 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    7ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7ae6:	9300      	str	r3, [sp, #0]
    7ae8:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7aec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7aee:	9905      	ldr	r1, [sp, #20]
    7af0:	4652      	mov	r2, sl
    7af2:	4628      	mov	r0, r5
    7af4:	f019 faae 	bl	21054 <le_adv_update.constprop.0>
		if (err) {
    7af8:	4683      	mov	fp, r0
    7afa:	2800      	cmp	r0, #0
    7afc:	d0c3      	beq.n	7a86 <bt_le_adv_start_legacy+0x122>
    7afe:	e74c      	b.n	799a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    7b00:	a907      	add	r1, sp, #28
    7b02:	4628      	mov	r0, r5
    7b04:	f7ff fee6 	bl	78d4 <le_adv_start_add_conn>
		if (err) {
    7b08:	4683      	mov	fp, r0
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d0be      	beq.n	7a8c <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    7b0e:	f110 0f0c 	cmn.w	r0, #12
    7b12:	f47f af42 	bne.w	799a <bt_le_adv_start_legacy+0x36>
    7b16:	2e00      	cmp	r6, #0
    7b18:	f47f af3f 	bne.w	799a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7b1c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    7b1e:	0798      	lsls	r0, r3, #30
    7b20:	f53f af3b 	bmi.w	799a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7b24:	6862      	ldr	r2, [r4, #4]
    7b26:	f082 0202 	eor.w	r2, r2, #2
    7b2a:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    7b2e:	f00b 0201 	and.w	r2, fp, #1
    7b32:	210d      	movs	r1, #13
    7b34:	4638      	mov	r0, r7
    7b36:	f019 fa76 	bl	21026 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    7b3a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    7b3e:	425a      	negs	r2, r3
    7b40:	415a      	adcs	r2, r3
    7b42:	2107      	movs	r1, #7
    7b44:	4638      	mov	r0, r7
    7b46:	f019 fa6e 	bl	21026 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    7b4a:	f1a9 0102 	sub.w	r1, r9, #2
    7b4e:	424a      	negs	r2, r1
    7b50:	414a      	adcs	r2, r1
    7b52:	4638      	mov	r0, r7
    7b54:	2108      	movs	r1, #8
    7b56:	f019 fa66 	bl	21026 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    7b5a:	6862      	ldr	r2, [r4, #4]
    7b5c:	2109      	movs	r1, #9
    7b5e:	f002 0201 	and.w	r2, r2, #1
    7b62:	4638      	mov	r0, r7
    7b64:	f019 fa5f 	bl	21026 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    7b68:	4642      	mov	r2, r8
    7b6a:	210a      	movs	r1, #10
    7b6c:	4638      	mov	r0, r7
    7b6e:	f019 fa5a 	bl	21026 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7b72:	6862      	ldr	r2, [r4, #4]
    7b74:	210c      	movs	r1, #12
    7b76:	f3c2 0280 	ubfx	r2, r2, #2, #1
    7b7a:	4638      	mov	r0, r7
    7b7c:	f019 fa53 	bl	21026 <atomic_set_bit_to>
	return 0;
    7b80:	f04f 0b00 	mov.w	fp, #0
    7b84:	e709      	b.n	799a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7b86:	b108      	cbz	r0, 7b8c <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    7b88:	f019 fbe1 	bl	2134e <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7b8c:	2e00      	cmp	r6, #0
    7b8e:	d1ce      	bne.n	7b2e <bt_le_adv_start_legacy+0x1ca>
    7b90:	e7c8      	b.n	7b24 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    7b92:	f06f 0b0a 	mvn.w	fp, #10
    7b96:	e700      	b.n	799a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    7b98:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    7b9c:	e6fd      	b.n	799a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    7b9e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    7ba2:	e6fa      	b.n	799a <bt_le_adv_start_legacy+0x36>
    7ba4:	4683      	mov	fp, r0
    7ba6:	e6f8      	b.n	799a <bt_le_adv_start_legacy+0x36>
    7ba8:	200000cc 	.word	0x200000cc
    7bac:	20000000 	.word	0x20000000

00007bb0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7bb2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7bb4:	9a06      	ldr	r2, [sp, #24]
{
    7bb6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7bb8:	e9cd 3200 	strd	r3, r2, [sp]
    7bbc:	462b      	mov	r3, r5
    7bbe:	460a      	mov	r2, r1
    7bc0:	4601      	mov	r1, r0
    7bc2:	4811      	ldr	r0, [pc, #68]	; (7c08 <bt_le_adv_start+0x58>)
    7bc4:	f7ff fece 	bl	7964 <bt_le_adv_start_legacy>
    7bc8:	4621      	mov	r1, r4
    7bca:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    7bcc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    7bce:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    7bd2:	429d      	cmp	r5, r3
    7bd4:	d102      	bne.n	7bdc <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    7bd6:	4630      	mov	r0, r6
    7bd8:	b002      	add	sp, #8
    7bda:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    7bdc:	880a      	ldrh	r2, [r1, #0]
    7bde:	4282      	cmp	r2, r0
    7be0:	d104      	bne.n	7bec <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    7be2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    7be4:	b112      	cbz	r2, 7bec <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    7be6:	7812      	ldrb	r2, [r2, #0]
    7be8:	07d2      	lsls	r2, r2, #31
    7bea:	d402      	bmi.n	7bf2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    7bec:	3301      	adds	r3, #1
    7bee:	3108      	adds	r1, #8
    7bf0:	e7ef      	b.n	7bd2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    7bf2:	4906      	ldr	r1, [pc, #24]	; (7c0c <bt_le_adv_start+0x5c>)
    7bf4:	4806      	ldr	r0, [pc, #24]	; (7c10 <bt_le_adv_start+0x60>)
    7bf6:	f01c fafe 	bl	241f6 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    7bfa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    7bfe:	2300      	movs	r3, #0
    7c00:	4803      	ldr	r0, [pc, #12]	; (7c10 <bt_le_adv_start+0x60>)
    7c02:	f016 fe93 	bl	1e92c <k_work_reschedule>
    7c06:	e7e6      	b.n	7bd6 <bt_le_adv_start+0x26>
    7c08:	20000018 	.word	0x20000018
    7c0c:	000211b3 	.word	0x000211b3
    7c10:	20000030 	.word	0x20000030

00007c14 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    7c16:	4829      	ldr	r0, [pc, #164]	; (7cbc <bt_le_adv_stop+0xa8>)
    7c18:	f019 fac8 	bl	211ac <bt_le_lim_adv_cancel_timeout>
    7c1c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7c20:	4827      	ldr	r0, [pc, #156]	; (7cc0 <bt_le_adv_stop+0xac>)
    7c22:	f019 f990 	bl	20f46 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7c26:	4826      	ldr	r0, [pc, #152]	; (7cc0 <bt_le_adv_stop+0xac>)
    7c28:	f019 f987 	bl	20f3a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7c2c:	0641      	lsls	r1, r0, #25
    7c2e:	d403      	bmi.n	7c38 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    7c30:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    7c32:	4620      	mov	r0, r4
    7c34:	b004      	add	sp, #16
    7c36:	bd10      	pop	{r4, pc}
    7c38:	4821      	ldr	r0, [pc, #132]	; (7cc0 <bt_le_adv_stop+0xac>)
    7c3a:	f019 f97e 	bl	20f3a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7c3e:	0582      	lsls	r2, r0, #22
    7c40:	d521      	bpl.n	7c86 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7c42:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7c44:	481f      	ldr	r0, [pc, #124]	; (7cc4 <bt_le_adv_stop+0xb0>)
    7c46:	9300      	str	r3, [sp, #0]
    7c48:	2207      	movs	r2, #7
    7c4a:	4669      	mov	r1, sp
    7c4c:	f8cd 3003 	str.w	r3, [sp, #3]
    7c50:	f018 fd59 	bl	20706 <memcmp>
    7c54:	4b1c      	ldr	r3, [pc, #112]	; (7cc8 <bt_le_adv_stop+0xb4>)
    7c56:	bb60      	cbnz	r0, 7cb2 <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7c58:	4a1c      	ldr	r2, [pc, #112]	; (7ccc <bt_le_adv_stop+0xb8>)
    7c5a:	8891      	ldrh	r1, [r2, #4]
    7c5c:	6810      	ldr	r0, [r2, #0]
    7c5e:	7992      	ldrb	r2, [r2, #6]
    7c60:	f8ad 100c 	strh.w	r1, [sp, #12]
    7c64:	f88d 200e 	strb.w	r2, [sp, #14]
    7c68:	9002      	str	r0, [sp, #8]
    7c6a:	2204      	movs	r2, #4
    7c6c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7c6e:	7e18      	ldrb	r0, [r3, #24]
    7c70:	f000 fd4e 	bl	8710 <bt_conn_lookup_state_le>
    7c74:	4604      	mov	r4, r0
	if (conn) {
    7c76:	b130      	cbz	r0, 7c86 <bt_le_adv_stop+0x72>
		conn->err = status;
    7c78:	2100      	movs	r1, #0
    7c7a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7c7c:	f000 fb8e 	bl	839c <bt_conn_set_state>
		bt_conn_unref(conn);
    7c80:	4620      	mov	r0, r4
    7c82:	f019 fb64 	bl	2134e <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    7c86:	480d      	ldr	r0, [pc, #52]	; (7cbc <bt_le_adv_stop+0xa8>)
    7c88:	2100      	movs	r1, #0
    7c8a:	f019 fa6a 	bl	21162 <bt_le_adv_set_enable_legacy>
		if (err) {
    7c8e:	4604      	mov	r4, r0
    7c90:	2800      	cmp	r0, #0
    7c92:	d1ce      	bne.n	7c32 <bt_le_adv_stop+0x1e>
    7c94:	480e      	ldr	r0, [pc, #56]	; (7cd0 <bt_le_adv_stop+0xbc>)
    7c96:	f019 f950 	bl	20f3a <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7c9a:	0683      	lsls	r3, r0, #26
    7c9c:	d5c8      	bpl.n	7c30 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    7c9e:	4620      	mov	r0, r4
    7ca0:	f019 fa98 	bl	211d4 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    7ca4:	4620      	mov	r0, r4
    7ca6:	f019 f915 	bl	20ed4 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7caa:	2001      	movs	r0, #1
    7cac:	f019 fa92 	bl	211d4 <bt_le_scan_set_enable>
    7cb0:	e7bf      	b.n	7c32 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7cb2:	2205      	movs	r2, #5
    7cb4:	f103 0121 	add.w	r1, r3, #33	; 0x21
    7cb8:	e7d9      	b.n	7c6e <bt_le_adv_stop+0x5a>
    7cba:	bf00      	nop
    7cbc:	20000018 	.word	0x20000018
    7cc0:	20000028 	.word	0x20000028
    7cc4:	20000021 	.word	0x20000021
    7cc8:	20000000 	.word	0x20000000
    7ccc:	00024bea 	.word	0x00024bea
    7cd0:	200000cc 	.word	0x200000cc

00007cd4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    7cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7cd6:	481e      	ldr	r0, [pc, #120]	; (7d50 <bt_le_adv_resume+0x7c>)
    7cd8:	4c1d      	ldr	r4, [pc, #116]	; (7d50 <bt_le_adv_resume+0x7c>)
    7cda:	f019 f92e 	bl	20f3a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    7cde:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    7ce2:	d032      	beq.n	7d4a <bt_le_adv_resume+0x76>
    7ce4:	4620      	mov	r0, r4
    7ce6:	f019 f928 	bl	20f3a <atomic_get>
    7cea:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7cec:	f3c0 1580 	ubfx	r5, r0, #6, #1
    7cf0:	d42b      	bmi.n	7d4a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7cf2:	4620      	mov	r0, r4
    7cf4:	f019 f921 	bl	20f3a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7cf8:	0583      	lsls	r3, r0, #22
    7cfa:	d526      	bpl.n	7d4a <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7cfc:	a901      	add	r1, sp, #4
    7cfe:	f1a4 0010 	sub.w	r0, r4, #16
    7d02:	f7ff fde7 	bl	78d4 <le_adv_start_add_conn>
	if (err) {
    7d06:	bb00      	cbnz	r0, 7d4a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7d08:	2101      	movs	r1, #1
    7d0a:	f1a4 0010 	sub.w	r0, r4, #16
    7d0e:	f019 fa28 	bl	21162 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    7d12:	b150      	cbz	r0, 7d2a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7d14:	4629      	mov	r1, r5
    7d16:	9801      	ldr	r0, [sp, #4]
    7d18:	f000 fb40 	bl	839c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7d1c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7d20:	4620      	mov	r0, r4
    7d22:	f019 f910 	bl	20f46 <atomic_and>
	return (old & mask) != 0;
    7d26:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    7d2a:	9801      	ldr	r0, [sp, #4]
    7d2c:	f019 fb0f 	bl	2134e <bt_conn_unref>
	if (persist_paused) {
    7d30:	b15d      	cbz	r5, 7d4a <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d32:	f3bf 8f5b 	dmb	ish
    7d36:	e854 3f00 	ldrex	r3, [r4]
    7d3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    7d3e:	e844 3200 	strex	r2, r3, [r4]
    7d42:	2a00      	cmp	r2, #0
    7d44:	d1f7      	bne.n	7d36 <bt_le_adv_resume+0x62>
    7d46:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    7d4a:	b003      	add	sp, #12
    7d4c:	bd30      	pop	{r4, r5, pc}
    7d4e:	bf00      	nop
    7d50:	20000028 	.word	0x20000028

00007d54 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d54:	4b03      	ldr	r3, [pc, #12]	; (7d64 <atomic_get.constprop.0+0x10>)
    7d56:	f3bf 8f5b 	dmb	ish
    7d5a:	6818      	ldr	r0, [r3, #0]
    7d5c:	f3bf 8f5b 	dmb	ish
}
    7d60:	4770      	bx	lr
    7d62:	bf00      	nop
    7d64:	200000cc 	.word	0x200000cc

00007d68 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    7d68:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7d6a:	2102      	movs	r1, #2
{
    7d6c:	b087      	sub	sp, #28
    7d6e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7d70:	f242 000c 	movw	r0, #8204	; 0x200c
    7d74:	f7fe fc9c 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    7d78:	4605      	mov	r5, r0
    7d7a:	b308      	cbz	r0, 7dc0 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    7d7c:	2102      	movs	r1, #2
    7d7e:	3008      	adds	r0, #8
    7d80:	f01b fa07 	bl	23192 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    7d84:	2c01      	cmp	r4, #1
    7d86:	4602      	mov	r2, r0
    7d88:	d117      	bne.n	7dba <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7d8a:	f7ff ffe3 	bl	7d54 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7d8e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    7d92:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    7d94:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    7d96:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    7d98:	425c      	negs	r4, r3
    7d9a:	415c      	adcs	r4, r3
    7d9c:	4a0a      	ldr	r2, [pc, #40]	; (7dc8 <bt_le_scan_set_enable_legacy+0x60>)
    7d9e:	9400      	str	r4, [sp, #0]
    7da0:	a903      	add	r1, sp, #12
    7da2:	4628      	mov	r0, r5
    7da4:	2305      	movs	r3, #5
    7da6:	f7fe fc71 	bl	668c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    7daa:	2200      	movs	r2, #0
    7dac:	4629      	mov	r1, r5
    7dae:	f242 000c 	movw	r0, #8204	; 0x200c
    7db2:	f7fe fcb7 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    7db6:	b007      	add	sp, #28
    7db8:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7dba:	2300      	movs	r3, #0
    7dbc:	7043      	strb	r3, [r0, #1]
    7dbe:	e7e9      	b.n	7d94 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    7dc0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7dc4:	e7f7      	b.n	7db6 <bt_le_scan_set_enable_legacy+0x4e>
    7dc6:	bf00      	nop
    7dc8:	200000cc 	.word	0x200000cc

00007dcc <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    7dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7dce:	4605      	mov	r5, r0
    7dd0:	4614      	mov	r4, r2
    7dd2:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    7dd4:	2207      	movs	r2, #7
    7dd6:	2100      	movs	r1, #0
    7dd8:	4668      	mov	r0, sp
    7dda:	f018 fcb0 	bl	2073e <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    7dde:	2300      	movs	r3, #0
    7de0:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    7de4:	1e6b      	subs	r3, r5, #1
    7de6:	4258      	negs	r0, r3
    7de8:	f10d 0105 	add.w	r1, sp, #5
    7dec:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    7dee:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    7df2:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    7df6:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    7dfa:	f7ff fc8b 	bl	7714 <bt_id_set_scan_own_addr>
	if (err) {
    7dfe:	4604      	mov	r4, r0
    7e00:	bb38      	cbnz	r0, 7e52 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    7e02:	2107      	movs	r1, #7
    7e04:	f242 000b 	movw	r0, #8203	; 0x200b
    7e08:	f7fe fc52 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
    7e0c:	4606      	mov	r6, r0
    7e0e:	b348      	cbz	r0, 7e64 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7e10:	2207      	movs	r2, #7
    7e12:	4669      	mov	r1, sp
    7e14:	3008      	adds	r0, #8
    7e16:	f01b f9c2 	bl	2319e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    7e1a:	4622      	mov	r2, r4
    7e1c:	4631      	mov	r1, r6
    7e1e:	f242 000b 	movw	r0, #8203	; 0x200b
    7e22:	f7fe fc7f 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
    7e26:	4604      	mov	r4, r0
    7e28:	b998      	cbnz	r0, 7e52 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    7e2a:	2001      	movs	r0, #1
    7e2c:	f7ff ff9c 	bl	7d68 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    7e30:	4604      	mov	r4, r0
    7e32:	b970      	cbnz	r0, 7e52 <start_le_scan_legacy+0x86>
	if (val) {
    7e34:	2d01      	cmp	r5, #1
    7e36:	d10f      	bne.n	7e58 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e38:	f3bf 8f5b 	dmb	ish
    7e3c:	4b0b      	ldr	r3, [pc, #44]	; (7e6c <start_le_scan_legacy+0xa0>)
    7e3e:	e853 2f00 	ldrex	r2, [r3]
    7e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7e46:	e843 2100 	strex	r1, r2, [r3]
    7e4a:	2900      	cmp	r1, #0
    7e4c:	d1f7      	bne.n	7e3e <start_le_scan_legacy+0x72>
    7e4e:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    7e52:	4620      	mov	r0, r4
    7e54:	b002      	add	sp, #8
    7e56:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7e58:	f06f 0180 	mvn.w	r1, #128	; 0x80
    7e5c:	4803      	ldr	r0, [pc, #12]	; (7e6c <start_le_scan_legacy+0xa0>)
    7e5e:	f019 f9aa 	bl	211b6 <atomic_and>
    7e62:	e7f6      	b.n	7e52 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    7e64:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7e68:	e7f3      	b.n	7e52 <start_le_scan_legacy+0x86>
    7e6a:	bf00      	nop
    7e6c:	200000cc 	.word	0x200000cc

00007e70 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    7e70:	4b01      	ldr	r3, [pc, #4]	; (7e78 <bt_scan_reset+0x8>)
    7e72:	2200      	movs	r2, #0
    7e74:	601a      	str	r2, [r3, #0]
}
    7e76:	4770      	bx	lr
    7e78:	200041c8 	.word	0x200041c8

00007e7c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    7e7c:	b538      	push	{r3, r4, r5, lr}
    7e7e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7e80:	f7ff ff68 	bl	7d54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7e84:	0641      	lsls	r1, r0, #25
    7e86:	f3c0 1280 	ubfx	r2, r0, #6, #1
    7e8a:	d501      	bpl.n	7e90 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    7e8c:	2000      	movs	r0, #0
    7e8e:	e031      	b.n	7ef4 <bt_le_scan_update+0x78>
    7e90:	f7ff ff60 	bl	7d54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7e94:	0683      	lsls	r3, r0, #26
    7e96:	d428      	bmi.n	7eea <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    7e98:	2100      	movs	r1, #0
    7e9a:	2206      	movs	r2, #6
    7e9c:	4608      	mov	r0, r1
    7e9e:	f000 fc37 	bl	8710 <bt_conn_lookup_state_le>
		if (conn) {
    7ea2:	4604      	mov	r4, r0
    7ea4:	bb38      	cbnz	r0, 7ef6 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    7ea6:	2202      	movs	r2, #2
    7ea8:	4601      	mov	r1, r0
    7eaa:	f000 fc31 	bl	8710 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    7eae:	2800      	cmp	r0, #0
    7eb0:	d0ec      	beq.n	7e8c <bt_le_scan_update+0x10>
    7eb2:	f3bf 8f5b 	dmb	ish
    7eb6:	4b11      	ldr	r3, [pc, #68]	; (7efc <bt_le_scan_update+0x80>)
    7eb8:	e853 2f00 	ldrex	r2, [r3]
    7ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    7ec0:	e843 2100 	strex	r1, r2, [r3]
    7ec4:	2900      	cmp	r1, #0
    7ec6:	d1f7      	bne.n	7eb8 <bt_le_scan_update+0x3c>
    7ec8:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    7ecc:	f019 fa3f 	bl	2134e <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    7ed0:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7ed2:	4620      	mov	r0, r4
    7ed4:	bf18      	it	ne
    7ed6:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    7ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7edc:	bf0a      	itet	eq
    7ede:	2212      	moveq	r2, #18
    7ee0:	2160      	movne	r1, #96	; 0x60
    7ee2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    7ee6:	f7ff bf71 	b.w	7dcc <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    7eea:	4610      	mov	r0, r2
    7eec:	f7ff ff3c 	bl	7d68 <bt_le_scan_set_enable_legacy>
		if (err) {
    7ef0:	2800      	cmp	r0, #0
    7ef2:	d0d1      	beq.n	7e98 <bt_le_scan_update+0x1c>
}
    7ef4:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7ef6:	f019 fa2a 	bl	2134e <bt_conn_unref>
    7efa:	e7c7      	b.n	7e8c <bt_le_scan_update+0x10>
    7efc:	200000cc 	.word	0x200000cc

00007f00 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    7f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    7f04:	f100 0808 	add.w	r8, r0, #8
    7f08:	b08d      	sub	sp, #52	; 0x34
    7f0a:	4604      	mov	r4, r0
    7f0c:	4640      	mov	r0, r8
    7f0e:	f01b f979 	bl	23204 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7f12:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    7f16:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    7f18:	b916      	cbnz	r6, 7f20 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    7f1a:	b00d      	add	sp, #52	; 0x34
    7f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    7f20:	89a3      	ldrh	r3, [r4, #12]
    7f22:	2b08      	cmp	r3, #8
    7f24:	d9f9      	bls.n	7f1a <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    7f26:	2109      	movs	r1, #9
    7f28:	4640      	mov	r0, r8
    7f2a:	f01b f963 	bl	231f4 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    7f2e:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    7f30:	237f      	movs	r3, #127	; 0x7f
    7f32:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    7f36:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7f38:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    7f3a:	7a5b      	ldrb	r3, [r3, #9]
    7f3c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    7f40:	23ff      	movs	r3, #255	; 0xff
    7f42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    7f46:	2300      	movs	r3, #0
    7f48:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7f4c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    7f50:	7802      	ldrb	r2, [r0, #0]
    7f52:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    7f56:	2a04      	cmp	r2, #4
    7f58:	bf9c      	itt	ls
    7f5a:	4b5a      	ldrls	r3, [pc, #360]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    7f5c:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    7f5e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    7f62:	b28b      	uxth	r3, r1
    7f64:	4605      	mov	r5, r0
    7f66:	f100 0901 	add.w	r9, r0, #1
    7f6a:	9301      	str	r3, [sp, #4]
    7f6c:	f7ff fef2 	bl	7d54 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7f70:	0647      	lsls	r7, r0, #25
    7f72:	d50b      	bpl.n	7f8c <bt_hci_le_adv_report+0x8c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    7f74:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7f78:	0758      	lsls	r0, r3, #29
    7f7a:	d507      	bpl.n	7f8c <bt_hci_le_adv_report+0x8c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    7f7c:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    7f7e:	4640      	mov	r0, r8
    7f80:	3101      	adds	r1, #1
    7f82:	3e01      	subs	r6, #1
    7f84:	f01b f92e 	bl	231e4 <net_buf_simple_pull>
    7f88:	b2f6      	uxtb	r6, r6
    7f8a:	e7c5      	b.n	7f18 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7f8c:	786b      	ldrb	r3, [r5, #1]
    7f8e:	1e9a      	subs	r2, r3, #2
    7f90:	2a01      	cmp	r2, #1
    7f92:	d848      	bhi.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
	memcpy(dst, src, sizeof(*dst));
    7f94:	2207      	movs	r2, #7
    7f96:	4649      	mov	r1, r9
    7f98:	a804      	add	r0, sp, #16
    7f9a:	f018 fbc5 	bl	20728 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7f9e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7fa2:	3b02      	subs	r3, #2
    7fa4:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    7fa8:	ab04      	add	r3, sp, #16
    7faa:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    7fac:	f8da 3000 	ldr.w	r3, [sl]
    7fb0:	b1a3      	cbz	r3, 7fdc <bt_hci_le_adv_report+0xdc>
	state->offset = net_buf_simple_headroom(buf);
    7fb2:	4640      	mov	r0, r8
    7fb4:	f01b f936 	bl	23224 <net_buf_simple_headroom>
		buf->len = len;
    7fb8:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    7fba:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    7fbc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    7fc0:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    7fc2:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    7fc4:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    7fc8:	f8da c000 	ldr.w	ip, [sl]
    7fcc:	a804      	add	r0, sp, #16
    7fce:	4643      	mov	r3, r8
    7fd0:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    7fd2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7fd4:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7fd6:	fa10 f08b 	uxtah	r0, r0, fp
    7fda:	60a0      	str	r0, [r4, #8]
	return list->head;
    7fdc:	4b3a      	ldr	r3, [pc, #232]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    7fde:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7fe0:	2a00      	cmp	r2, #0
    7fe2:	d033      	beq.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
	return node->next;
    7fe4:	f852 7908 	ldr.w	r7, [r2], #-8
    7fe8:	b107      	cbz	r7, 7fec <bt_hci_le_adv_report+0xec>
    7fea:	3f08      	subs	r7, #8
		if (listener->recv) {
    7fec:	6813      	ldr	r3, [r2, #0]
    7fee:	9203      	str	r2, [sp, #12]
    7ff0:	b193      	cbz	r3, 8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
	state->offset = net_buf_simple_headroom(buf);
    7ff2:	4640      	mov	r0, r8
    7ff4:	f01b f916 	bl	23224 <net_buf_simple_headroom>
	state->len = buf->len;
    7ff8:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    7ffa:	9a03      	ldr	r2, [sp, #12]
    7ffc:	9302      	str	r3, [sp, #8]
			buf->len = len;
    7ffe:	9b01      	ldr	r3, [sp, #4]
    8000:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8002:	4683      	mov	fp, r0
			listener->recv(info, buf);
    8004:	6812      	ldr	r2, [r2, #0]
    8006:	a808      	add	r0, sp, #32
    8008:	4641      	mov	r1, r8
    800a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    800c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    800e:	9b02      	ldr	r3, [sp, #8]
    8010:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8012:	fa10 f08b 	uxtah	r0, r0, fp
    8016:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    8018:	b1c7      	cbz	r7, 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    801a:	68bb      	ldr	r3, [r7, #8]
    801c:	b103      	cbz	r3, 8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    801e:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    8020:	463a      	mov	r2, r7
    8022:	461f      	mov	r7, r3
    8024:	e7e2      	b.n	7fec <bt_hci_le_adv_report+0xec>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    8026:	2bff      	cmp	r3, #255	; 0xff
    8028:	d109      	bne.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    802a:	2300      	movs	r3, #0
    802c:	9306      	str	r3, [sp, #24]
    802e:	2207      	movs	r2, #7
    8030:	f8cd 301b 	str.w	r3, [sp, #27]
    8034:	a906      	add	r1, sp, #24
    8036:	a804      	add	r0, sp, #16
    8038:	f018 fb76 	bl	20728 <memcpy>
}
    803c:	e7b4      	b.n	7fa8 <bt_hci_le_adv_report+0xa8>
		bt_addr_le_copy(&id_addr,
    803e:	4649      	mov	r1, r9
    8040:	2000      	movs	r0, #0
    8042:	f018 ff45 	bl	20ed0 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    8046:	2207      	movs	r2, #7
    8048:	4601      	mov	r1, r0
    804a:	e7f4      	b.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
	check_pending_conn(&id_addr, addr, info->adv_props);
    804c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    8050:	f7ff fe80 	bl	7d54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8054:	0641      	lsls	r1, r0, #25
    8056:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    805a:	d48f      	bmi.n	7f7c <bt_hci_le_adv_report+0x7c>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    805c:	07d2      	lsls	r2, r2, #31
    805e:	d58d      	bpl.n	7f7c <bt_hci_le_adv_report+0x7c>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    8060:	2202      	movs	r2, #2
    8062:	a904      	add	r1, sp, #16
    8064:	4658      	mov	r0, fp
    8066:	f000 fb53 	bl	8710 <bt_conn_lookup_state_le>
	if (!conn) {
    806a:	4607      	mov	r7, r0
    806c:	2800      	cmp	r0, #0
    806e:	d085      	beq.n	7f7c <bt_hci_le_adv_report+0x7c>
    8070:	f7ff fe70 	bl	7d54 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8074:	0683      	lsls	r3, r0, #26
    8076:	d411      	bmi.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    8078:	2207      	movs	r2, #7
    807a:	4649      	mov	r1, r9
    807c:	f107 0096 	add.w	r0, r7, #150	; 0x96
    8080:	f018 fb52 	bl	20728 <memcpy>
	if (bt_le_create_conn(conn)) {
    8084:	4638      	mov	r0, r7
    8086:	f018 fd74 	bl	20b72 <bt_le_create_conn>
    808a:	b960      	cbnz	r0, 80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    808c:	4638      	mov	r0, r7
    808e:	2106      	movs	r1, #6
    8090:	f000 f984 	bl	839c <bt_conn_set_state>
	bt_conn_unref(conn);
    8094:	4638      	mov	r0, r7
    8096:	f019 f95a 	bl	2134e <bt_conn_unref>
	return;
    809a:	e76f      	b.n	7f7c <bt_hci_le_adv_report+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
    809c:	4658      	mov	r0, fp
    809e:	f7ff fe63 	bl	7d68 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    80a2:	2800      	cmp	r0, #0
    80a4:	d0e8      	beq.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    80a6:	231f      	movs	r3, #31
    80a8:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    80aa:	2100      	movs	r1, #0
    80ac:	4638      	mov	r0, r7
    80ae:	f000 f975 	bl	839c <bt_conn_set_state>
	bt_conn_unref(conn);
    80b2:	4638      	mov	r0, r7
    80b4:	f019 f94b 	bl	2134e <bt_conn_unref>
	bt_le_scan_update(false);
    80b8:	2000      	movs	r0, #0
    80ba:	f7ff fedf 	bl	7e7c <bt_le_scan_update>
    80be:	e75d      	b.n	7f7c <bt_hci_le_adv_report+0x7c>
    80c0:	200041c8 	.word	0x200041c8
    80c4:	00026787 	.word	0x00026787
    80c8:	200041c0 	.word	0x200041c0

000080cc <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    80cc:	2300      	movs	r3, #0
	tx->user_data = NULL;
    80ce:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    80d2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    80d4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    80d6:	4801      	ldr	r0, [pc, #4]	; (80dc <tx_free+0x10>)
    80d8:	f01b bf96 	b.w	24008 <k_queue_append>
    80dc:	20000b24 	.word	0x20000b24

000080e0 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    80e0:	4b0e      	ldr	r3, [pc, #56]	; (811c <notify_connected+0x3c>)
{
    80e2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    80e4:	681d      	ldr	r5, [r3, #0]
{
    80e6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    80e8:	b955      	cbnz	r5, 8100 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    80ea:	4d0d      	ldr	r5, [pc, #52]	; (8120 <notify_connected+0x40>)
    80ec:	4e0d      	ldr	r6, [pc, #52]	; (8124 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    80ee:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    80f0:	42b5      	cmp	r5, r6
    80f2:	d30c      	bcc.n	810e <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    80f4:	b989      	cbnz	r1, 811a <notify_connected+0x3a>
		bt_gatt_connected(conn);
    80f6:	4620      	mov	r0, r4
	}
}
    80f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    80fc:	f002 b918 	b.w	a330 <bt_gatt_connected>
		if (cb->connected) {
    8100:	682b      	ldr	r3, [r5, #0]
    8102:	b113      	cbz	r3, 810a <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    8104:	7a61      	ldrb	r1, [r4, #9]
    8106:	4620      	mov	r0, r4
    8108:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    810a:	692d      	ldr	r5, [r5, #16]
    810c:	e7ec      	b.n	80e8 <notify_connected+0x8>
		if (cb->connected) {
    810e:	682b      	ldr	r3, [r5, #0]
    8110:	b10b      	cbz	r3, 8116 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    8112:	4620      	mov	r0, r4
    8114:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8116:	3514      	adds	r5, #20
    8118:	e7e9      	b.n	80ee <notify_connected+0xe>
}
    811a:	bd70      	pop	{r4, r5, r6, pc}
    811c:	200041cc 	.word	0x200041cc
    8120:	00024b20 	.word	0x00024b20
    8124:	00024b20 	.word	0x00024b20

00008128 <send_frag>:
{
    8128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    812c:	694d      	ldr	r5, [r1, #20]
{
    812e:	4604      	mov	r4, r0
    8130:	460e      	mov	r6, r1
    8132:	4690      	mov	r8, r2
    8134:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    8136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    813a:	483e      	ldr	r0, [pc, #248]	; (8234 <send_frag+0x10c>)
    813c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8140:	f016 fa12 	bl	1e568 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    8144:	7aa3      	ldrb	r3, [r4, #10]
    8146:	2b07      	cmp	r3, #7
    8148:	d146      	bne.n	81d8 <send_frag+0xb0>
	__asm__ volatile(
    814a:	f04f 0320 	mov.w	r3, #32
    814e:	f3ef 8211 	mrs	r2, BASEPRI
    8152:	f383 8812 	msr	BASEPRI_MAX, r3
    8156:	f3bf 8f6f 	isb	sy
	if (tx) {
    815a:	69a3      	ldr	r3, [r4, #24]
    815c:	2d00      	cmp	r5, #0
    815e:	d04d      	beq.n	81fc <send_frag+0xd4>
	parent->next = child;
    8160:	2100      	movs	r1, #0
    8162:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    8164:	2b00      	cmp	r3, #0
    8166:	d146      	bne.n	81f6 <send_frag+0xce>
	list->head = node;
    8168:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    816c:	f382 8811 	msr	BASEPRI, r2
    8170:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    8174:	2104      	movs	r1, #4
    8176:	f106 0008 	add.w	r0, r6, #8
    817a:	f01b f82b 	bl	231d4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    817e:	8823      	ldrh	r3, [r4, #0]
    8180:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    8184:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8188:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    818a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    818e:	3b04      	subs	r3, #4
    8190:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8192:	2302      	movs	r3, #2
    8194:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    8196:	4630      	mov	r0, r6
    8198:	f7fe fb90 	bl	68bc <bt_send>
	if (err) {
    819c:	2800      	cmp	r0, #0
    819e:	d047      	beq.n	8230 <send_frag+0x108>
	__asm__ volatile(
    81a0:	f04f 0320 	mov.w	r3, #32
    81a4:	f3ef 8011 	mrs	r0, BASEPRI
    81a8:	f383 8812 	msr	BASEPRI_MAX, r3
    81ac:	f3bf 8f6f 	isb	sy
		if (tx) {
    81b0:	2d00      	cmp	r5, #0
    81b2:	d037      	beq.n	8224 <send_frag+0xfc>
	return list->head;
    81b4:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    81b6:	2200      	movs	r2, #0
    81b8:	b153      	cbz	r3, 81d0 <send_frag+0xa8>
    81ba:	429d      	cmp	r5, r3
    81bc:	d12f      	bne.n	821e <send_frag+0xf6>
	return node->next;
    81be:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    81c0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    81c2:	bb3a      	cbnz	r2, 8214 <send_frag+0xec>
    81c4:	42a9      	cmp	r1, r5
	list->head = node;
    81c6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    81c8:	d100      	bne.n	81cc <send_frag+0xa4>
	list->tail = node;
    81ca:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    81cc:	2300      	movs	r3, #0
    81ce:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    81d0:	f380 8811 	msr	BASEPRI, r0
    81d4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    81d8:	4816      	ldr	r0, [pc, #88]	; (8234 <send_frag+0x10c>)
    81da:	f016 f99f 	bl	1e51c <z_impl_k_sem_give>
	if (tx) {
    81de:	b115      	cbz	r5, 81e6 <send_frag+0xbe>
		tx_free(tx);
    81e0:	4628      	mov	r0, r5
    81e2:	f7ff ff73 	bl	80cc <tx_free>
	if (always_consume) {
    81e6:	b11f      	cbz	r7, 81f0 <send_frag+0xc8>
		net_buf_unref(buf);
    81e8:	4630      	mov	r0, r6
    81ea:	f011 ff69 	bl	1a0c0 <net_buf_unref>
	return false;
    81ee:	2700      	movs	r7, #0
}
    81f0:	4638      	mov	r0, r7
    81f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81f6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    81f8:	61a5      	str	r5, [r4, #24]
}
    81fa:	e7b7      	b.n	816c <send_frag+0x44>
		if (tail_tx) {
    81fc:	b133      	cbz	r3, 820c <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    81fe:	f103 090c 	add.w	r9, r3, #12
    8202:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8204:	3301      	adds	r3, #1
    8206:	f8c9 3000 	str.w	r3, [r9]
    820a:	e7af      	b.n	816c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    820c:	69e3      	ldr	r3, [r4, #28]
    820e:	f104 091c 	add.w	r9, r4, #28
    8212:	e7f7      	b.n	8204 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    8214:	42a9      	cmp	r1, r5
	parent->next = child;
    8216:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8218:	bf08      	it	eq
    821a:	61a2      	streq	r2, [r4, #24]
}
    821c:	e7d6      	b.n	81cc <send_frag+0xa4>
	return node->next;
    821e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8220:	681b      	ldr	r3, [r3, #0]
    8222:	e7c9      	b.n	81b8 <send_frag+0x90>
			(*pending_no_cb)--;
    8224:	f8d9 3000 	ldr.w	r3, [r9]
    8228:	3b01      	subs	r3, #1
    822a:	f8c9 3000 	str.w	r3, [r9]
    822e:	e7cf      	b.n	81d0 <send_frag+0xa8>
	return true;
    8230:	2701      	movs	r7, #1
    8232:	e7dd      	b.n	81f0 <send_frag+0xc8>
    8234:	20000100 	.word	0x20000100

00008238 <bt_conn_get_pkts>:
}
    8238:	4800      	ldr	r0, [pc, #0]	; (823c <bt_conn_get_pkts+0x4>)
    823a:	4770      	bx	lr
    823c:	20000100 	.word	0x20000100

00008240 <bt_conn_new>:
{
    8240:	b538      	push	{r3, r4, r5, lr}
    8242:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    8244:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8246:	2501      	movs	r5, #1
    8248:	428b      	cmp	r3, r1
    824a:	d102      	bne.n	8252 <bt_conn_new+0x12>
		return NULL;
    824c:	2400      	movs	r4, #0
}
    824e:	4620      	mov	r0, r4
    8250:	bd38      	pop	{r3, r4, r5, pc}
    8252:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    8256:	f3bf 8f5b 	dmb	ish
    825a:	e852 0f00 	ldrex	r0, [r2]
    825e:	2800      	cmp	r0, #0
    8260:	d104      	bne.n	826c <bt_conn_new+0x2c>
    8262:	e842 5c00 	strex	ip, r5, [r2]
    8266:	f1bc 0f00 	cmp.w	ip, #0
    826a:	d1f6      	bne.n	825a <bt_conn_new+0x1a>
    826c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    8270:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8274:	d002      	beq.n	827c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    8276:	3301      	adds	r3, #1
    8278:	4604      	mov	r4, r0
    827a:	e7e5      	b.n	8248 <bt_conn_new+0x8>
	if (!conn) {
    827c:	2c00      	cmp	r4, #0
    827e:	d0e6      	beq.n	824e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    8280:	22b8      	movs	r2, #184	; 0xb8
    8282:	2100      	movs	r1, #0
    8284:	4620      	mov	r0, r4
    8286:	f018 fa5a 	bl	2073e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    828a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    828e:	4904      	ldr	r1, [pc, #16]	; (82a0 <bt_conn_new+0x60>)
    8290:	f01b ffb1 	bl	241f6 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    8294:	4903      	ldr	r1, [pc, #12]	; (82a4 <bt_conn_new+0x64>)
    8296:	f104 0028 	add.w	r0, r4, #40	; 0x28
    829a:	f01b ff86 	bl	241aa <k_work_init>
	return conn;
    829e:	e7d6      	b.n	824e <bt_conn_new+0xe>
    82a0:	000087bd 	.word	0x000087bd
    82a4:	0002122b 	.word	0x0002122b

000082a8 <bt_conn_send_cb>:
{
    82a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82aa:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    82ac:	7a83      	ldrb	r3, [r0, #10]
    82ae:	2b07      	cmp	r3, #7
{
    82b0:	4604      	mov	r4, r0
    82b2:	460d      	mov	r5, r1
    82b4:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    82b6:	d114      	bne.n	82e2 <bt_conn_send_cb+0x3a>
	if (cb) {
    82b8:	b312      	cbz	r2, 8300 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    82ba:	f016 fe2d 	bl	1ef18 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    82be:	4b13      	ldr	r3, [pc, #76]	; (830c <bt_conn_send_cb+0x64>)
    82c0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    82c2:	4813      	ldr	r0, [pc, #76]	; (8310 <bt_conn_send_cb+0x68>)
    82c4:	bf07      	ittee	eq
    82c6:	2200      	moveq	r2, #0
    82c8:	2300      	moveq	r3, #0
    82ca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    82ce:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    82d2:	f016 f8ef 	bl	1e4b4 <z_impl_k_queue_get>
		if (!tx) {
    82d6:	b1a8      	cbz	r0, 8304 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    82d8:	7aa3      	ldrb	r3, [r4, #10]
    82da:	2b07      	cmp	r3, #7
    82dc:	d004      	beq.n	82e8 <bt_conn_send_cb+0x40>
			tx_free(tx);
    82de:	f7ff fef5 	bl	80cc <tx_free>
		return -ENOTCONN;
    82e2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    82e6:	e00a      	b.n	82fe <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    82e8:	2300      	movs	r3, #0
		tx->user_data = user_data;
    82ea:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    82ee:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    82f0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    82f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    82f6:	4629      	mov	r1, r5
    82f8:	f01a ff0c 	bl	23114 <net_buf_put>
	return 0;
    82fc:	2000      	movs	r0, #0
}
    82fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    8300:	614a      	str	r2, [r1, #20]
    8302:	e7f6      	b.n	82f2 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    8304:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8308:	e7f9      	b.n	82fe <bt_conn_send_cb+0x56>
    830a:	bf00      	nop
    830c:	200017b0 	.word	0x200017b0
    8310:	20000b24 	.word	0x20000b24

00008314 <bt_conn_prepare_events>:
{
    8314:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
    8316:	4b1a      	ldr	r3, [pc, #104]	; (8380 <bt_conn_prepare_events+0x6c>)
    8318:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    831a:	2101      	movs	r1, #1
{
    831c:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    831e:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8320:	f01c fa45 	bl	247ae <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    8324:	4b17      	ldr	r3, [pc, #92]	; (8384 <bt_conn_prepare_events+0x70>)
    8326:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    832a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    832e:	f018 ff53 	bl	211d8 <atomic_get>
    8332:	b908      	cbnz	r0, 8338 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    8334:	2001      	movs	r0, #1
}
    8336:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8338:	7a9a      	ldrb	r2, [r3, #10]
    833a:	b99a      	cbnz	r2, 8364 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    833c:	f3bf 8f5b 	dmb	ish
    8340:	1d1a      	adds	r2, r3, #4
    8342:	e852 1f00 	ldrex	r1, [r2]
    8346:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    834a:	e842 0c00 	strex	ip, r0, [r2]
    834e:	f1bc 0f00 	cmp.w	ip, #0
    8352:	d1f6      	bne.n	8342 <bt_conn_prepare_events+0x2e>
    8354:	f3bf 8f5b 	dmb	ish
    8358:	064a      	lsls	r2, r1, #25
    835a:	d503      	bpl.n	8364 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
    835c:	4618      	mov	r0, r3
    835e:	f018 ff70 	bl	21242 <conn_cleanup>
    8362:	e7e7      	b.n	8334 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    8364:	7a9b      	ldrb	r3, [r3, #10]
    8366:	2b07      	cmp	r3, #7
    8368:	d1e4      	bne.n	8334 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    836a:	4b07      	ldr	r3, [pc, #28]	; (8388 <bt_conn_prepare_events+0x74>)
    836c:	4628      	mov	r0, r5
    836e:	2200      	movs	r2, #0
    8370:	2104      	movs	r1, #4
    8372:	f01c fa1c 	bl	247ae <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    8376:	2301      	movs	r3, #1
    8378:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    837c:	2002      	movs	r0, #2
	return ev_count;
    837e:	e7da      	b.n	8336 <bt_conn_prepare_events+0x22>
    8380:	200002fc 	.word	0x200002fc
    8384:	20000f80 	.word	0x20000f80
    8388:	20000fb8 	.word	0x20000fb8

0000838c <bt_conn_lookup_handle>:
{
    838c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    838e:	2101      	movs	r1, #1
    8390:	4801      	ldr	r0, [pc, #4]	; (8398 <bt_conn_lookup_handle+0xc>)
    8392:	f018 bff5 	b.w	21380 <conn_lookup_handle>
    8396:	bf00      	nop
    8398:	20000f80 	.word	0x20000f80

0000839c <bt_conn_set_state>:
{
    839c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    839e:	7a85      	ldrb	r5, [r0, #10]
    83a0:	428d      	cmp	r5, r1
{
    83a2:	4604      	mov	r4, r0
	if (conn->state == state) {
    83a4:	f000 80cc 	beq.w	8540 <bt_conn_set_state+0x1a4>
	conn->state = state;
    83a8:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    83aa:	b15d      	cbz	r5, 83c4 <bt_conn_set_state+0x28>
    83ac:	2d06      	cmp	r5, #6
    83ae:	d00f      	beq.n	83d0 <bt_conn_set_state+0x34>
	switch (conn->state) {
    83b0:	7aa3      	ldrb	r3, [r4, #10]
    83b2:	2b07      	cmp	r3, #7
    83b4:	f200 80c4 	bhi.w	8540 <bt_conn_set_state+0x1a4>
    83b8:	e8df f003 	tbb	[pc, r3]
    83bc:	c2c21145 	.word	0xc2c21145
    83c0:	2984c2c2 	.word	0x2984c2c2
		if (conn->type != BT_CONN_TYPE_ISO) {
    83c4:	7883      	ldrb	r3, [r0, #2]
    83c6:	2b08      	cmp	r3, #8
    83c8:	d0f2      	beq.n	83b0 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
    83ca:	f018 ffa5 	bl	21318 <bt_conn_ref>
    83ce:	e7ef      	b.n	83b0 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    83d0:	7883      	ldrb	r3, [r0, #2]
    83d2:	2b01      	cmp	r3, #1
    83d4:	d1ec      	bne.n	83b0 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
    83d6:	3058      	adds	r0, #88	; 0x58
    83d8:	f01b ff19 	bl	2420e <k_work_cancel_delayable>
    83dc:	e7e8      	b.n	83b0 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
    83de:	4d59      	ldr	r5, [pc, #356]	; (8544 <bt_conn_set_state+0x1a8>)
		tx->pending_no_cb = 0U;
    83e0:	2600      	movs	r6, #0
	__asm__ volatile(
    83e2:	f04f 0320 	mov.w	r3, #32
    83e6:	f3ef 8211 	mrs	r2, BASEPRI
    83ea:	f383 8812 	msr	BASEPRI_MAX, r3
    83ee:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    83f2:	69e3      	ldr	r3, [r4, #28]
    83f4:	2b00      	cmp	r3, #0
    83f6:	f000 8084 	beq.w	8502 <bt_conn_set_state+0x166>
			conn->pending_no_cb--;
    83fa:	3b01      	subs	r3, #1
    83fc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    83fe:	f382 8811 	msr	BASEPRI, r2
    8402:	f3bf 8f6f 	isb	sy
    8406:	4628      	mov	r0, r5
    8408:	f016 f888 	bl	1e51c <z_impl_k_sem_give>
}
    840c:	e7e9      	b.n	83e2 <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
    840e:	78a3      	ldrb	r3, [r4, #2]
    8410:	2b04      	cmp	r3, #4
    8412:	f000 8095 	beq.w	8540 <bt_conn_set_state+0x1a4>
	z_impl_k_queue_init(queue);
    8416:	f104 0038 	add.w	r0, r4, #56	; 0x38
    841a:	f01b fde9 	bl	23ff0 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    841e:	484a      	ldr	r0, [pc, #296]	; (8548 <bt_conn_set_state+0x1ac>)
    8420:	2100      	movs	r1, #0
    8422:	f016 ffa1 	bl	1f368 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8426:	2300      	movs	r3, #0
	list->tail = NULL;
    8428:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    842c:	78e3      	ldrb	r3, [r4, #3]
    842e:	2b01      	cmp	r3, #1
    8430:	f040 8086 	bne.w	8540 <bt_conn_set_state+0x1a4>
			k_work_schedule(&conn->deferred_work,
    8434:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    8438:	2300      	movs	r3, #0
    843a:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    843e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    8442:	f016 ba3f 	b.w	1e8c4 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8446:	78a3      	ldrb	r3, [r4, #2]
    8448:	2b04      	cmp	r3, #4
    844a:	d104      	bne.n	8456 <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
    844c:	4620      	mov	r0, r4
}
    844e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    8452:	f018 bf7c 	b.w	2134e <bt_conn_unref>
		switch (old_state) {
    8456:	3d01      	subs	r5, #1
    8458:	2d05      	cmp	r5, #5
    845a:	d871      	bhi.n	8540 <bt_conn_set_state+0x1a4>
    845c:	a301      	add	r3, pc, #4	; (adr r3, 8464 <bt_conn_set_state+0xc8>)
    845e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    8462:	bf00      	nop
    8464:	0000847d 	.word	0x0000847d
    8468:	000084b7 	.word	0x000084b7
    846c:	0000844d 	.word	0x0000844d
    8470:	0000844d 	.word	0x0000844d
    8474:	000084b7 	.word	0x000084b7
    8478:	000084b7 	.word	0x000084b7
			tx_notify(conn);
    847c:	4620      	mov	r0, r4
    847e:	f018 feb1 	bl	211e4 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    8482:	78a3      	ldrb	r3, [r4, #2]
    8484:	2b01      	cmp	r3, #1
    8486:	d103      	bne.n	8490 <bt_conn_set_state+0xf4>
				k_work_cancel_delayable(&conn->deferred_work);
    8488:	f104 0058 	add.w	r0, r4, #88	; 0x58
    848c:	f01b febf 	bl	2420e <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8490:	f3bf 8f5b 	dmb	ish
    8494:	3404      	adds	r4, #4
    8496:	e854 3f00 	ldrex	r3, [r4]
    849a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    849e:	e844 3200 	strex	r2, r3, [r4]
    84a2:	2a00      	cmp	r2, #0
    84a4:	d1f7      	bne.n	8496 <bt_conn_set_state+0xfa>
    84a6:	f3bf 8f5b 	dmb	ish
    84aa:	4827      	ldr	r0, [pc, #156]	; (8548 <bt_conn_set_state+0x1ac>)
}
    84ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84b0:	2100      	movs	r1, #0
    84b2:	f016 bf59 	b.w	1f368 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    84b6:	7a63      	ldrb	r3, [r4, #9]
    84b8:	2b00      	cmp	r3, #0
    84ba:	d0c7      	beq.n	844c <bt_conn_set_state+0xb0>
				notify_connected(conn);
    84bc:	4620      	mov	r0, r4
    84be:	f7ff fe0f 	bl	80e0 <notify_connected>
    84c2:	e7c3      	b.n	844c <bt_conn_set_state+0xb0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    84c4:	78a3      	ldrb	r3, [r4, #2]
    84c6:	2b01      	cmp	r3, #1
    84c8:	d13a      	bne.n	8540 <bt_conn_set_state+0x1a4>
					K_MSEC(10 * bt_dev.create_param.timeout));
    84ca:	4b20      	ldr	r3, [pc, #128]	; (854c <bt_conn_set_state+0x1b0>)
    84cc:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    84ce:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    84d0:	b1a8      	cbz	r0, 84fe <bt_conn_set_state+0x162>
    84d2:	230a      	movs	r3, #10
    84d4:	4358      	muls	r0, r3
    84d6:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    84d8:	03c9      	lsls	r1, r1, #15
    84da:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    84de:	f240 33e7 	movw	r3, #999	; 0x3e7
    84e2:	03c0      	lsls	r0, r0, #15
    84e4:	18c0      	adds	r0, r0, r3
    84e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    84ea:	f04f 0300 	mov.w	r3, #0
    84ee:	f141 0100 	adc.w	r1, r1, #0
    84f2:	f7f8 f9fb 	bl	8ec <__aeabi_uldivmod>
    84f6:	4602      	mov	r2, r0
    84f8:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    84fa:	4620      	mov	r0, r4
    84fc:	e79f      	b.n	843e <bt_conn_set_state+0xa2>
					K_MSEC(10 * bt_dev.create_param.timeout));
    84fe:	4601      	mov	r1, r0
    8500:	e7ea      	b.n	84d8 <bt_conn_set_state+0x13c>
	return list->head;
    8502:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8504:	b128      	cbz	r0, 8512 <bt_conn_set_state+0x176>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8506:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8508:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    850a:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    850c:	4288      	cmp	r0, r1
	list->tail = node;
    850e:	bf08      	it	eq
    8510:	61a3      	streq	r3, [r4, #24]
    8512:	f382 8811 	msr	BASEPRI, r2
    8516:	f3bf 8f6f 	isb	sy
		if (!node) {
    851a:	b188      	cbz	r0, 8540 <bt_conn_set_state+0x1a4>
	__asm__ volatile(
    851c:	f04f 0220 	mov.w	r2, #32
    8520:	f3ef 8311 	mrs	r3, BASEPRI
    8524:	f382 8812 	msr	BASEPRI_MAX, r2
    8528:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    852c:	68c2      	ldr	r2, [r0, #12]
    852e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8530:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8532:	f383 8811 	msr	BASEPRI, r3
    8536:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    853a:	f7ff fdc7 	bl	80cc <tx_free>
    853e:	e762      	b.n	8406 <bt_conn_set_state+0x6a>
}
    8540:	bd70      	pop	{r4, r5, r6, pc}
    8542:	bf00      	nop
    8544:	20000100 	.word	0x20000100
    8548:	200002fc 	.word	0x200002fc
    854c:	20000000 	.word	0x20000000

00008550 <bt_conn_index>:
		index = conn - acl_conns;
    8550:	4b03      	ldr	r3, [pc, #12]	; (8560 <bt_conn_index+0x10>)
    8552:	1ac0      	subs	r0, r0, r3
    8554:	4b03      	ldr	r3, [pc, #12]	; (8564 <bt_conn_index+0x14>)
    8556:	1180      	asrs	r0, r0, #6
    8558:	4358      	muls	r0, r3
}
    855a:	b2c0      	uxtb	r0, r0
    855c:	4770      	bx	lr
    855e:	bf00      	nop
    8560:	20000f80 	.word	0x20000f80
    8564:	aaaaaaab 	.word	0xaaaaaaab

00008568 <bt_conn_create_pdu_timeout>:
{
    8568:	b538      	push	{r3, r4, r5, lr}
    856a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    856c:	4906      	ldr	r1, [pc, #24]	; (8588 <bt_conn_create_pdu_timeout+0x20>)
    856e:	2800      	cmp	r0, #0
    8570:	bf08      	it	eq
    8572:	4608      	moveq	r0, r1
    8574:	f01a fda5 	bl	230c2 <net_buf_alloc_fixed>
	if (!buf) {
    8578:	4604      	mov	r4, r0
    857a:	b118      	cbz	r0, 8584 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    857c:	1d29      	adds	r1, r5, #4
    857e:	3008      	adds	r0, #8
    8580:	f01a fdc4 	bl	2310c <net_buf_simple_reserve>
}
    8584:	4620      	mov	r0, r4
    8586:	bd38      	pop	{r3, r4, r5, pc}
    8588:	20000b6c 	.word	0x20000b6c

0000858c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    858e:	1d03      	adds	r3, r0, #4
{
    8590:	4604      	mov	r4, r0
    8592:	4618      	mov	r0, r3
    8594:	f018 fe20 	bl	211d8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    8598:	0582      	lsls	r2, r0, #22
    859a:	d519      	bpl.n	85d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    859c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    85a0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    85a4:	4291      	cmp	r1, r2
    85a6:	d813      	bhi.n	85d0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    85a8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    85ac:	4291      	cmp	r1, r2
    85ae:	d30f      	bcc.n	85d0 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    85b0:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    85b4:	4291      	cmp	r1, r2
    85b6:	d10b      	bne.n	85d0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    85b8:	f3bf 8f5b 	dmb	ish
    85bc:	e853 2f00 	ldrex	r2, [r3]
    85c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    85c4:	e843 2100 	strex	r1, r2, [r3]
    85c8:	2900      	cmp	r1, #0
    85ca:	d1f7      	bne.n	85bc <notify_le_param_updated+0x30>
    85cc:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    85d0:	4b0f      	ldr	r3, [pc, #60]	; (8610 <notify_le_param_updated+0x84>)
    85d2:	681d      	ldr	r5, [r3, #0]
    85d4:	b925      	cbnz	r5, 85e0 <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    85d6:	4d0f      	ldr	r5, [pc, #60]	; (8614 <notify_le_param_updated+0x88>)
    85d8:	4f0f      	ldr	r7, [pc, #60]	; (8618 <notify_le_param_updated+0x8c>)
    85da:	42bd      	cmp	r5, r7
    85dc:	d30c      	bcc.n	85f8 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    85de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    85e0:	68ee      	ldr	r6, [r5, #12]
    85e2:	b13e      	cbz	r6, 85f4 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
    85e4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    85e8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    85ec:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    85f0:	4620      	mov	r0, r4
    85f2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    85f4:	692d      	ldr	r5, [r5, #16]
    85f6:	e7ed      	b.n	85d4 <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
    85f8:	68ee      	ldr	r6, [r5, #12]
    85fa:	b13e      	cbz	r6, 860c <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
    85fc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8600:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8604:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8608:	4620      	mov	r0, r4
    860a:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    860c:	3514      	adds	r5, #20
    860e:	e7e4      	b.n	85da <notify_le_param_updated+0x4e>
    8610:	200041cc 	.word	0x200041cc
    8614:	00024b20 	.word	0x00024b20
    8618:	00024b20 	.word	0x00024b20

0000861c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8620:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    8622:	4608      	mov	r0, r1
{
    8624:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    8626:	f018 fac1 	bl	20bac <bt_le_conn_params_valid>
    862a:	4605      	mov	r5, r0
    862c:	b918      	cbnz	r0, 8636 <le_param_req+0x1a>
		return false;
    862e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    8630:	4628      	mov	r0, r5
    8632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8636:	4b13      	ldr	r3, [pc, #76]	; (8684 <le_param_req+0x68>)
    8638:	681e      	ldr	r6, [r3, #0]
    863a:	b946      	cbnz	r6, 864e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    863c:	4e12      	ldr	r6, [pc, #72]	; (8688 <le_param_req+0x6c>)
    863e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 868c <le_param_req+0x70>
    8642:	4546      	cmp	r6, r8
    8644:	d2f4      	bcs.n	8630 <le_param_req+0x14>
		if (!cb->le_param_req) {
    8646:	68b3      	ldr	r3, [r6, #8]
    8648:	b983      	cbnz	r3, 866c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    864a:	3614      	adds	r6, #20
    864c:	e7f9      	b.n	8642 <le_param_req+0x26>
		if (!cb->le_param_req) {
    864e:	68b3      	ldr	r3, [r6, #8]
    8650:	b90b      	cbnz	r3, 8656 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    8652:	6936      	ldr	r6, [r6, #16]
    8654:	e7f1      	b.n	863a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    8656:	4621      	mov	r1, r4
    8658:	4638      	mov	r0, r7
    865a:	4798      	blx	r3
    865c:	2800      	cmp	r0, #0
    865e:	d0e6      	beq.n	862e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    8660:	4620      	mov	r0, r4
    8662:	f018 faa3 	bl	20bac <bt_le_conn_params_valid>
    8666:	2800      	cmp	r0, #0
    8668:	d1f3      	bne.n	8652 <le_param_req+0x36>
    866a:	e7e0      	b.n	862e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    866c:	4621      	mov	r1, r4
    866e:	4638      	mov	r0, r7
    8670:	4798      	blx	r3
    8672:	2800      	cmp	r0, #0
    8674:	d0db      	beq.n	862e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    8676:	4620      	mov	r0, r4
    8678:	f018 fa98 	bl	20bac <bt_le_conn_params_valid>
    867c:	2800      	cmp	r0, #0
    867e:	d1e4      	bne.n	864a <le_param_req+0x2e>
    8680:	e7d5      	b.n	862e <le_param_req+0x12>
    8682:	bf00      	nop
    8684:	200041cc 	.word	0x200041cc
    8688:	00024b20 	.word	0x00024b20
    868c:	00024b20 	.word	0x00024b20

00008690 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    8690:	4b02      	ldr	r3, [pc, #8]	; (869c <bt_conn_cb_register+0xc>)
    8692:	681a      	ldr	r2, [r3, #0]
    8694:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    8696:	6018      	str	r0, [r3, #0]
}
    8698:	4770      	bx	lr
    869a:	bf00      	nop
    869c:	200041cc 	.word	0x200041cc

000086a0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	4606      	mov	r6, r0
    86a4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    86a6:	4809      	ldr	r0, [pc, #36]	; (86cc <bt_conn_add_le+0x2c>)
    86a8:	2101      	movs	r1, #1
    86aa:	f7ff fdc9 	bl	8240 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    86ae:	4604      	mov	r4, r0
    86b0:	b150      	cbz	r0, 86c8 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    86b2:	7206      	strb	r6, [r0, #8]
    86b4:	2207      	movs	r2, #7
    86b6:	4629      	mov	r1, r5
    86b8:	3088      	adds	r0, #136	; 0x88
    86ba:	f018 f835 	bl	20728 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    86be:	2301      	movs	r3, #1
    86c0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    86c2:	4b03      	ldr	r3, [pc, #12]	; (86d0 <bt_conn_add_le+0x30>)
    86c4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    86c8:	4620      	mov	r0, r4
    86ca:	bd70      	pop	{r4, r5, r6, pc}
    86cc:	20000f80 	.word	0x20000f80
    86d0:	00280018 	.word	0x00280018

000086d4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    86d4:	b570      	push	{r4, r5, r6, lr}
    86d6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    86d8:	480c      	ldr	r0, [pc, #48]	; (870c <bt_conn_lookup_addr_le+0x38>)
{
    86da:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    86dc:	f018 fe1c 	bl	21318 <bt_conn_ref>

		if (!conn) {
    86e0:	4604      	mov	r4, r0
    86e2:	b128      	cbz	r0, 86f0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    86e4:	7883      	ldrb	r3, [r0, #2]
    86e6:	2b01      	cmp	r3, #1
    86e8:	d004      	beq.n	86f4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    86ea:	f018 fe30 	bl	2134e <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    86ee:	2400      	movs	r4, #0
}
    86f0:	4620      	mov	r0, r4
    86f2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    86f4:	4629      	mov	r1, r5
    86f6:	4632      	mov	r2, r6
    86f8:	f018 fe6f 	bl	213da <bt_conn_is_peer_addr_le>
    86fc:	4605      	mov	r5, r0
    86fe:	2800      	cmp	r0, #0
    8700:	d1f6      	bne.n	86f0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    8702:	4620      	mov	r0, r4
    8704:	f018 fe23 	bl	2134e <bt_conn_unref>
	return NULL;
    8708:	462c      	mov	r4, r5
			continue;
    870a:	e7f1      	b.n	86f0 <bt_conn_lookup_addr_le+0x1c>
    870c:	20000f80 	.word	0x20000f80

00008710 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    8710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8712:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8714:	480e      	ldr	r0, [pc, #56]	; (8750 <bt_conn_lookup_state_le+0x40>)
{
    8716:	460e      	mov	r6, r1
    8718:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    871a:	f018 fdfd 	bl	21318 <bt_conn_ref>

		if (!conn) {
    871e:	4604      	mov	r4, r0
    8720:	b1a0      	cbz	r0, 874c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    8722:	7883      	ldrb	r3, [r0, #2]
    8724:	2b01      	cmp	r3, #1
    8726:	d003      	beq.n	8730 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    8728:	f018 fe11 	bl	2134e <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    872c:	2400      	movs	r4, #0
			continue;
    872e:	e00d      	b.n	874c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    8730:	b136      	cbz	r6, 8740 <bt_conn_lookup_state_le+0x30>
    8732:	4632      	mov	r2, r6
    8734:	4629      	mov	r1, r5
    8736:	f018 fe50 	bl	213da <bt_conn_is_peer_addr_le>
    873a:	b908      	cbnz	r0, 8740 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    873c:	4620      	mov	r0, r4
    873e:	e7f3      	b.n	8728 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    8740:	7aa3      	ldrb	r3, [r4, #10]
    8742:	42bb      	cmp	r3, r7
    8744:	d1fa      	bne.n	873c <bt_conn_lookup_state_le+0x2c>
    8746:	7a23      	ldrb	r3, [r4, #8]
    8748:	42ab      	cmp	r3, r5
    874a:	d1f7      	bne.n	873c <bt_conn_lookup_state_le+0x2c>
}
    874c:	4620      	mov	r0, r4
    874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8750:	20000f80 	.word	0x20000f80

00008754 <send_conn_le_param_update>:
{
    8754:	b538      	push	{r3, r4, r5, lr}
    8756:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8758:	4608      	mov	r0, r1
{
    875a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    875c:	f018 fa26 	bl	20bac <bt_le_conn_params_valid>
    8760:	b338      	cbz	r0, 87b2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8762:	4b15      	ldr	r3, [pc, #84]	; (87b8 <send_conn_le_param_update+0x64>)
    8764:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    8768:	0799      	lsls	r1, r3, #30
    876a:	d407      	bmi.n	877c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    876c:	78e3      	ldrb	r3, [r4, #3]
    876e:	b173      	cbz	r3, 878e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    8770:	4629      	mov	r1, r5
    8772:	4620      	mov	r0, r4
}
    8774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8778:	f000 b9d4 	b.w	8b24 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    877c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    8780:	079a      	lsls	r2, r3, #30
    8782:	d5f3      	bpl.n	876c <send_conn_le_param_update+0x18>
    8784:	1d20      	adds	r0, r4, #4
    8786:	f018 fd27 	bl	211d8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    878a:	0543      	lsls	r3, r0, #21
    878c:	d4ee      	bmi.n	876c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    878e:	4629      	mov	r1, r5
    8790:	4620      	mov	r0, r4
    8792:	f018 fe4a 	bl	2142a <bt_conn_le_conn_update>
		if (rc == 0) {
    8796:	b958      	cbnz	r0, 87b0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    8798:	882b      	ldrh	r3, [r5, #0]
    879a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    879e:	886b      	ldrh	r3, [r5, #2]
    87a0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    87a4:	88ab      	ldrh	r3, [r5, #4]
    87a6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    87aa:	88eb      	ldrh	r3, [r5, #6]
    87ac:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    87b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    87b2:	f06f 0015 	mvn.w	r0, #21
    87b6:	e7fb      	b.n	87b0 <send_conn_le_param_update+0x5c>
    87b8:	20000000 	.word	0x20000000

000087bc <deferred_work>:
{
    87bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    87be:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    87c2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    87c4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    87c8:	b9fb      	cbnz	r3, 880a <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    87ca:	4628      	mov	r0, r5
    87cc:	f018 fefc 	bl	215c8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    87d0:	4b30      	ldr	r3, [pc, #192]	; (8894 <deferred_work+0xd8>)
    87d2:	681e      	ldr	r6, [r3, #0]
    87d4:	b94e      	cbnz	r6, 87ea <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    87d6:	4e30      	ldr	r6, [pc, #192]	; (8898 <deferred_work+0xdc>)
    87d8:	4f30      	ldr	r7, [pc, #192]	; (889c <deferred_work+0xe0>)
    87da:	42be      	cmp	r6, r7
    87dc:	d30d      	bcc.n	87fa <deferred_work+0x3e>
		bt_conn_unref(conn);
    87de:	4628      	mov	r0, r5
}
    87e0:	b003      	add	sp, #12
    87e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    87e6:	f018 bdb2 	b.w	2134e <bt_conn_unref>
		if (cb->disconnected) {
    87ea:	6873      	ldr	r3, [r6, #4]
    87ec:	b11b      	cbz	r3, 87f6 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    87ee:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    87f2:	4628      	mov	r0, r5
    87f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    87f6:	6936      	ldr	r6, [r6, #16]
    87f8:	e7ec      	b.n	87d4 <deferred_work+0x18>
		if (cb->disconnected) {
    87fa:	6873      	ldr	r3, [r6, #4]
    87fc:	b11b      	cbz	r3, 8806 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    87fe:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    8802:	4628      	mov	r0, r5
    8804:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8806:	3614      	adds	r6, #20
    8808:	e7e7      	b.n	87da <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    880a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    880e:	2b01      	cmp	r3, #1
    8810:	d137      	bne.n	8882 <deferred_work+0xc6>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8812:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    8816:	b923      	cbnz	r3, 8822 <deferred_work+0x66>
}
    8818:	b003      	add	sp, #12
    881a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    881e:	f7fe b833 	b.w	6888 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    8822:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    8826:	f3bf 8f5b 	dmb	ish
    882a:	e856 3f00 	ldrex	r3, [r6]
    882e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    8832:	e846 2100 	strex	r1, r2, [r6]
    8836:	2900      	cmp	r1, #0
    8838:	d1f7      	bne.n	882a <deferred_work+0x6e>
    883a:	f3bf 8f5b 	dmb	ish
    883e:	059b      	lsls	r3, r3, #22
    8840:	d521      	bpl.n	8886 <deferred_work+0xca>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    8842:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    8846:	f8ad 3000 	strh.w	r3, [sp]
    884a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    884e:	f8ad 3002 	strh.w	r3, [sp, #2]
    8852:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    8856:	f8ad 3004 	strh.w	r3, [sp, #4]
    885a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    885e:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    8862:	4669      	mov	r1, sp
    8864:	4628      	mov	r0, r5
    8866:	f7ff ff75 	bl	8754 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    886a:	f3bf 8f5b 	dmb	ish
    886e:	e856 3f00 	ldrex	r3, [r6]
    8872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8876:	e846 3200 	strex	r2, r3, [r6]
    887a:	2a00      	cmp	r2, #0
    887c:	d1f7      	bne.n	886e <deferred_work+0xb2>
    887e:	f3bf 8f5b 	dmb	ish
}
    8882:	b003      	add	sp, #12
    8884:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    8886:	4a06      	ldr	r2, [pc, #24]	; (88a0 <deferred_work+0xe4>)
    8888:	6810      	ldr	r0, [r2, #0]
    888a:	6851      	ldr	r1, [r2, #4]
    888c:	466b      	mov	r3, sp
    888e:	c303      	stmia	r3!, {r0, r1}
    8890:	e7e7      	b.n	8862 <deferred_work+0xa6>
    8892:	bf00      	nop
    8894:	200041cc 	.word	0x200041cc
    8898:	00024b20 	.word	0x00024b20
    889c:	00024b20 	.word	0x00024b20
    88a0:	00024bce 	.word	0x00024bce

000088a4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    88a4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    88a6:	4801      	ldr	r0, [pc, #4]	; (88ac <bt_conn_create_frag_timeout+0x8>)
    88a8:	f7ff be5e 	b.w	8568 <bt_conn_create_pdu_timeout>
    88ac:	20000bc4 	.word	0x20000bc4

000088b0 <create_frag>:
{
    88b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88b4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    88b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    88ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    88be:	2000      	movs	r0, #0
{
    88c0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    88c2:	f7ff ffef 	bl	88a4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    88c6:	7ab3      	ldrb	r3, [r6, #10]
    88c8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    88ca:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    88cc:	f04f 0600 	mov.w	r6, #0
    88d0:	d005      	beq.n	88de <create_frag+0x2e>
		net_buf_unref(frag);
    88d2:	f011 fbf5 	bl	1a0c0 <net_buf_unref>
		return NULL;
    88d6:	4635      	mov	r5, r6
}
    88d8:	4628      	mov	r0, r5
    88da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    88de:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    88e0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    88e4:	4e0c      	ldr	r6, [pc, #48]	; (8918 <create_frag+0x68>)
    88e6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    88e8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    88ec:	f01a fc9e 	bl	2322c <net_buf_simple_tailroom>
    88f0:	4580      	cmp	r8, r0
    88f2:	d20c      	bcs.n	890e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    88f4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    88f8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    88fc:	4632      	mov	r2, r6
    88fe:	4638      	mov	r0, r7
    8900:	f01a fc4d 	bl	2319e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    8904:	4631      	mov	r1, r6
    8906:	4620      	mov	r0, r4
    8908:	f01a fc6c 	bl	231e4 <net_buf_simple_pull>
    890c:	e7e4      	b.n	88d8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    890e:	4638      	mov	r0, r7
    8910:	f01a fc8c 	bl	2322c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8914:	b286      	uxth	r6, r0
    8916:	e7ef      	b.n	88f8 <create_frag+0x48>
    8918:	20000000 	.word	0x20000000

0000891c <bt_conn_process_tx>:
{
    891c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    891e:	7a83      	ldrb	r3, [r0, #10]
{
    8920:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    8922:	b993      	cbnz	r3, 894a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8924:	f3bf 8f5b 	dmb	ish
    8928:	1d03      	adds	r3, r0, #4
    892a:	e853 2f00 	ldrex	r2, [r3]
    892e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8932:	e843 1500 	strex	r5, r1, [r3]
    8936:	2d00      	cmp	r5, #0
    8938:	d1f7      	bne.n	892a <bt_conn_process_tx+0xe>
    893a:	f3bf 8f5b 	dmb	ish
    893e:	0653      	lsls	r3, r2, #25
    8940:	d503      	bpl.n	894a <bt_conn_process_tx+0x2e>
}
    8942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    8946:	f018 bc7c 	b.w	21242 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    894a:	2200      	movs	r2, #0
    894c:	2300      	movs	r3, #0
    894e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8952:	f01a fbbb 	bl	230cc <net_buf_get>
	BT_ASSERT(buf);
    8956:	4605      	mov	r5, r0
    8958:	b960      	cbnz	r0, 8974 <bt_conn_process_tx+0x58>
    895a:	4a1f      	ldr	r2, [pc, #124]	; (89d8 <bt_conn_process_tx+0xbc>)
    895c:	491f      	ldr	r1, [pc, #124]	; (89dc <bt_conn_process_tx+0xc0>)
    895e:	4820      	ldr	r0, [pc, #128]	; (89e0 <bt_conn_process_tx+0xc4>)
    8960:	f240 23e7 	movw	r3, #743	; 0x2e7
    8964:	f016 fedb 	bl	1f71e <printk>
    8968:	4040      	eors	r0, r0
    896a:	f380 8811 	msr	BASEPRI, r0
    896e:	f04f 0003 	mov.w	r0, #3
    8972:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8974:	4e1b      	ldr	r6, [pc, #108]	; (89e4 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    8976:	89aa      	ldrh	r2, [r5, #12]
    8978:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    897c:	429a      	cmp	r2, r3
    897e:	d807      	bhi.n	8990 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    8980:	2300      	movs	r3, #0
    8982:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8984:	4629      	mov	r1, r5
    8986:	4620      	mov	r0, r4
    8988:	f7ff fbce 	bl	8128 <send_frag>
	if (!send_buf(conn, buf)) {
    898c:	b130      	cbz	r0, 899c <bt_conn_process_tx+0x80>
}
    898e:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    8990:	4629      	mov	r1, r5
    8992:	4620      	mov	r0, r4
    8994:	f7ff ff8c 	bl	88b0 <create_frag>
	if (!frag) {
    8998:	4601      	mov	r1, r0
    899a:	b920      	cbnz	r0, 89a6 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    899c:	4628      	mov	r0, r5
}
    899e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    89a2:	f011 bb8d 	b.w	1a0c0 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    89a6:	2301      	movs	r3, #1
    89a8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    89aa:	4620      	mov	r0, r4
    89ac:	f7ff fbbc 	bl	8128 <send_frag>
    89b0:	2800      	cmp	r0, #0
    89b2:	d0f3      	beq.n	899c <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    89b4:	89aa      	ldrh	r2, [r5, #12]
    89b6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    89ba:	429a      	cmp	r2, r3
    89bc:	d802      	bhi.n	89c4 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    89be:	2300      	movs	r3, #0
    89c0:	2203      	movs	r2, #3
    89c2:	e7df      	b.n	8984 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    89c4:	4629      	mov	r1, r5
    89c6:	4620      	mov	r0, r4
    89c8:	f7ff ff72 	bl	88b0 <create_frag>
		if (!frag) {
    89cc:	4601      	mov	r1, r0
    89ce:	2800      	cmp	r0, #0
    89d0:	d0e4      	beq.n	899c <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    89d2:	2301      	movs	r3, #1
    89d4:	461a      	mov	r2, r3
    89d6:	e7e8      	b.n	89aa <bt_conn_process_tx+0x8e>
    89d8:	0002678c 	.word	0x0002678c
    89dc:	000266f1 	.word	0x000266f1
    89e0:	000266b4 	.word	0x000266b4
    89e4:	20000000 	.word	0x20000000

000089e8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    89e8:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    89ea:	4914      	ldr	r1, [pc, #80]	; (8a3c <bt_conn_init+0x54>)
    89ec:	4814      	ldr	r0, [pc, #80]	; (8a40 <bt_conn_init+0x58>)
    89ee:	f01b fb0b 	bl	24008 <k_queue_append>
    89f2:	4914      	ldr	r1, [pc, #80]	; (8a44 <bt_conn_init+0x5c>)
    89f4:	4812      	ldr	r0, [pc, #72]	; (8a40 <bt_conn_init+0x58>)
    89f6:	f01b fb07 	bl	24008 <k_queue_append>
    89fa:	4913      	ldr	r1, [pc, #76]	; (8a48 <bt_conn_init+0x60>)
    89fc:	4810      	ldr	r0, [pc, #64]	; (8a40 <bt_conn_init+0x58>)
    89fe:	f01b fb03 	bl	24008 <k_queue_append>
	}

	bt_att_init();
    8a02:	f019 faf8 	bl	21ff6 <bt_att_init>

	err = bt_smp_init();
    8a06:	f01a fb59 	bl	230bc <bt_smp_init>
	if (err) {
    8a0a:	4605      	mov	r5, r0
    8a0c:	b998      	cbnz	r0, 8a36 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
    8a0e:	f018 febe 	bl	2178e <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8a12:	480e      	ldr	r0, [pc, #56]	; (8a4c <bt_conn_init+0x64>)
    8a14:	f018 fc80 	bl	21318 <bt_conn_ref>

			if (!conn) {
    8a18:	4604      	mov	r4, r0
    8a1a:	b160      	cbz	r0, 8a36 <bt_conn_init+0x4e>
    8a1c:	3004      	adds	r0, #4
    8a1e:	f018 fbdb 	bl	211d8 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    8a22:	07c3      	lsls	r3, r0, #31
    8a24:	d504      	bpl.n	8a30 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    8a26:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8a28:	2102      	movs	r1, #2
    8a2a:	4620      	mov	r0, r4
    8a2c:	f7ff fcb6 	bl	839c <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
    8a30:	4620      	mov	r0, r4
    8a32:	f018 fc8c 	bl	2134e <bt_conn_unref>
		}
	}

	return 0;
}
    8a36:	4628      	mov	r0, r5
    8a38:	bd38      	pop	{r3, r4, r5, pc}
    8a3a:	bf00      	nop
    8a3c:	200041d0 	.word	0x200041d0
    8a40:	20000b24 	.word	0x20000b24
    8a44:	200041e0 	.word	0x200041e0
    8a48:	200041f0 	.word	0x200041f0
    8a4c:	20000f80 	.word	0x20000f80

00008a50 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    8a50:	4b04      	ldr	r3, [pc, #16]	; (8a64 <l2cap_accept+0x14>)
    8a52:	6818      	ldr	r0, [r3, #0]
    8a54:	b918      	cbnz	r0, 8a5e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    8a56:	4a04      	ldr	r2, [pc, #16]	; (8a68 <l2cap_accept+0x18>)
    8a58:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    8a5a:	600b      	str	r3, [r1, #0]

		return 0;
    8a5c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    8a5e:	f06f 000b 	mvn.w	r0, #11
}
    8a62:	4770      	bx	lr
    8a64:	20001040 	.word	0x20001040
    8a68:	00024e48 	.word	0x00024e48

00008a6c <bt_l2cap_connected>:
{
    8a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8a70:	4e29      	ldr	r6, [pc, #164]	; (8b18 <bt_l2cap_connected+0xac>)
    8a72:	4f2a      	ldr	r7, [pc, #168]	; (8b1c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8a74:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8b20 <bt_l2cap_connected+0xb4>
{
    8a78:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8a7a:	42be      	cmp	r6, r7
    8a7c:	d302      	bcc.n	8a84 <bt_l2cap_connected+0x18>
}
    8a7e:	b003      	add	sp, #12
    8a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8a84:	6873      	ldr	r3, [r6, #4]
    8a86:	a901      	add	r1, sp, #4
    8a88:	4620      	mov	r0, r4
    8a8a:	4798      	blx	r3
    8a8c:	2800      	cmp	r0, #0
    8a8e:	db3d      	blt.n	8b0c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    8a90:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    8a92:	8833      	ldrh	r3, [r6, #0]
    8a94:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    8a98:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8a9c:	4641      	mov	r1, r8
    8a9e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8aa2:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8aa6:	f01b fba6 	bl	241f6 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8aaa:	f3bf 8f5b 	dmb	ish
    8aae:	f105 0368 	add.w	r3, r5, #104	; 0x68
    8ab2:	2200      	movs	r2, #0
    8ab4:	e853 1f00 	ldrex	r1, [r3]
    8ab8:	e843 2000 	strex	r0, r2, [r3]
    8abc:	2800      	cmp	r0, #0
    8abe:	d1f9      	bne.n	8ab4 <bt_l2cap_connected+0x48>
    8ac0:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8ac4:	60aa      	str	r2, [r5, #8]
	return list->tail;
    8ac6:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    8ac8:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    8acc:	bb02      	cbnz	r2, 8b10 <bt_l2cap_connected+0xa4>
	list->head = node;
    8ace:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    8ad2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8ad4:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    8ad6:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8ad8:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    8adc:	681b      	ldr	r3, [r3, #0]
    8ade:	b103      	cbz	r3, 8ae2 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    8ae0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8ae2:	9b01      	ldr	r3, [sp, #4]
    8ae4:	f3bf 8f5b 	dmb	ish
    8ae8:	3368      	adds	r3, #104	; 0x68
    8aea:	e853 2f00 	ldrex	r2, [r3]
    8aee:	f042 0201 	orr.w	r2, r2, #1
    8af2:	e843 2100 	strex	r1, r2, [r3]
    8af6:	2900      	cmp	r1, #0
    8af8:	d1f7      	bne.n	8aea <bt_l2cap_connected+0x7e>
    8afa:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    8afe:	9801      	ldr	r0, [sp, #4]
    8b00:	6843      	ldr	r3, [r0, #4]
    8b02:	699b      	ldr	r3, [r3, #24]
    8b04:	b113      	cbz	r3, 8b0c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    8b06:	f100 0168 	add.w	r1, r0, #104	; 0x68
    8b0a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8b0c:	360c      	adds	r6, #12
    8b0e:	e7b4      	b.n	8a7a <bt_l2cap_connected+0xe>
	parent->next = child;
    8b10:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8b12:	6563      	str	r3, [r4, #84]	; 0x54
}
    8b14:	e7dd      	b.n	8ad2 <bt_l2cap_connected+0x66>
    8b16:	bf00      	nop
    8b18:	00024afc 	.word	0x00024afc
    8b1c:	00024b20 	.word	0x00024b20
    8b20:	000215af 	.word	0x000215af

00008b24 <bt_l2cap_update_conn_param>:
{
    8b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8b26:	460d      	mov	r5, r1
	ident++;
    8b28:	4916      	ldr	r1, [pc, #88]	; (8b84 <bt_l2cap_update_conn_param+0x60>)
    8b2a:	780b      	ldrb	r3, [r1, #0]
    8b2c:	3301      	adds	r3, #1
	if (!ident) {
    8b2e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    8b32:	bf08      	it	eq
    8b34:	2301      	moveq	r3, #1
    8b36:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8b38:	7809      	ldrb	r1, [r1, #0]
{
    8b3a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8b3c:	2208      	movs	r2, #8
    8b3e:	2012      	movs	r0, #18
    8b40:	f018 fcec 	bl	2151c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    8b44:	4604      	mov	r4, r0
    8b46:	b1d0      	cbz	r0, 8b7e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    8b48:	2108      	movs	r1, #8
    8b4a:	4408      	add	r0, r1
    8b4c:	f01a fb21 	bl	23192 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8b50:	882b      	ldrh	r3, [r5, #0]
    8b52:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8b54:	886b      	ldrh	r3, [r5, #2]
    8b56:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8b58:	88ab      	ldrh	r3, [r5, #4]
    8b5a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8b5c:	88eb      	ldrh	r3, [r5, #6]
    8b5e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8b60:	2300      	movs	r3, #0
    8b62:	9300      	str	r3, [sp, #0]
    8b64:	4622      	mov	r2, r4
    8b66:	2105      	movs	r1, #5
    8b68:	4630      	mov	r0, r6
    8b6a:	f018 fd41 	bl	215f0 <bt_l2cap_send_cb>
	if (err) {
    8b6e:	4605      	mov	r5, r0
    8b70:	b110      	cbz	r0, 8b78 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    8b72:	4620      	mov	r0, r4
    8b74:	f011 faa4 	bl	1a0c0 <net_buf_unref>
}
    8b78:	4628      	mov	r0, r5
    8b7a:	b002      	add	sp, #8
    8b7c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8b7e:	f06f 050b 	mvn.w	r5, #11
    8b82:	e7f9      	b.n	8b78 <bt_l2cap_update_conn_param+0x54>
    8b84:	200060db 	.word	0x200060db

00008b88 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8b88:	4b02      	ldr	r3, [pc, #8]	; (8b94 <att_cfm_sent+0xc>)
    8b8a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8b8e:	f018 be11 	b.w	217b4 <att_sent>
    8b92:	bf00      	nop
    8b94:	00021d67 	.word	0x00021d67

00008b98 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8b98:	4b02      	ldr	r3, [pc, #8]	; (8ba4 <att_rsp_sent+0xc>)
    8b9a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8b9e:	f018 be09 	b.w	217b4 <att_sent>
    8ba2:	bf00      	nop
    8ba4:	00021d4b 	.word	0x00021d4b

00008ba8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8ba8:	4b02      	ldr	r3, [pc, #8]	; (8bb4 <att_req_sent+0xc>)
    8baa:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8bae:	f018 be01 	b.w	217b4 <att_sent>
    8bb2:	bf00      	nop
    8bb4:	00021aff 	.word	0x00021aff

00008bb8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8bb8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    8bba:	3808      	subs	r0, #8
    8bbc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    8bbe:	a901      	add	r1, sp, #4
    8bc0:	4802      	ldr	r0, [pc, #8]	; (8bcc <bt_att_released+0x14>)
    8bc2:	f01b f95b 	bl	23e7c <k_mem_slab_free>
}
    8bc6:	b003      	add	sp, #12
    8bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bcc:	20000aa4 	.word	0x20000aa4

00008bd0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8bd2:	2300      	movs	r3, #0
{
    8bd4:	4607      	mov	r7, r0
    8bd6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8bd8:	481e      	ldr	r0, [pc, #120]	; (8c54 <bt_att_accept+0x84>)
    8bda:	2200      	movs	r2, #0
    8bdc:	4669      	mov	r1, sp
    8bde:	f015 faad 	bl	1e13c <k_mem_slab_alloc>
    8be2:	4604      	mov	r4, r0
    8be4:	b120      	cbz	r0, 8bf0 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8be6:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8bea:	4620      	mov	r0, r4
    8bec:	b003      	add	sp, #12
    8bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8bf0:	4601      	mov	r1, r0
    8bf2:	222c      	movs	r2, #44	; 0x2c
    8bf4:	9800      	ldr	r0, [sp, #0]
    8bf6:	f017 fda2 	bl	2073e <memset>
	att->conn = conn;
    8bfa:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8bfc:	4816      	ldr	r0, [pc, #88]	; (8c58 <bt_att_accept+0x88>)
	list->tail = NULL;
    8bfe:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    8c00:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    8c04:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    8c08:	2200      	movs	r2, #0
    8c0a:	2300      	movs	r3, #0
    8c0c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8c0e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8c10:	f015 fa94 	bl	1e13c <k_mem_slab_alloc>
    8c14:	4604      	mov	r4, r0
    8c16:	2800      	cmp	r0, #0
    8c18:	d1e5      	bne.n	8be6 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    8c1a:	4601      	mov	r1, r0
    8c1c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8c20:	9801      	ldr	r0, [sp, #4]
    8c22:	f017 fd8c 	bl	2073e <memset>
	chan->chan.chan.ops = &ops;
    8c26:	9801      	ldr	r0, [sp, #4]
    8c28:	4b0c      	ldr	r3, [pc, #48]	; (8c5c <bt_att_accept+0x8c>)
    8c2a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8c2c:	30f8      	adds	r0, #248	; 0xf8
    8c2e:	f01b f9df 	bl	23ff0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8c32:	9b01      	ldr	r3, [sp, #4]
    8c34:	f3bf 8f5b 	dmb	ish
    8c38:	33f0      	adds	r3, #240	; 0xf0
    8c3a:	e853 2f00 	ldrex	r2, [r3]
    8c3e:	e843 4100 	strex	r1, r4, [r3]
    8c42:	2900      	cmp	r1, #0
    8c44:	d1f9      	bne.n	8c3a <bt_att_accept+0x6a>
    8c46:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    8c4a:	9b01      	ldr	r3, [sp, #4]
    8c4c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8c50:	6033      	str	r3, [r6, #0]
	return 0;
    8c52:	e7ca      	b.n	8bea <bt_att_accept+0x1a>
    8c54:	20000a88 	.word	0x20000a88
    8c58:	20000aa4 	.word	0x20000aa4
    8c5c:	2000030c 	.word	0x2000030c

00008c60 <read_group_cb>:
{
    8c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8c64:	4605      	mov	r5, r0
    8c66:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8c68:	f04f 0800 	mov.w	r8, #0
    8c6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8c70:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8c72:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8c74:	f88d 8008 	strb.w	r8, [sp, #8]
    8c78:	a902      	add	r1, sp, #8
{
    8c7a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8c7c:	f8ad 300a 	strh.w	r3, [sp, #10]
    8c80:	f017 fde3 	bl	2084a <bt_uuid_cmp>
    8c84:	b1a0      	cbz	r0, 8cb0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8c86:	f642 0301 	movw	r3, #10241	; 0x2801
    8c8a:	6828      	ldr	r0, [r5, #0]
    8c8c:	f88d 800c 	strb.w	r8, [sp, #12]
    8c90:	a903      	add	r1, sp, #12
    8c92:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c96:	f017 fdd8 	bl	2084a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8c9a:	b148      	cbz	r0, 8cb0 <read_group_cb+0x50>
		if (data->group &&
    8c9c:	6923      	ldr	r3, [r4, #16]
    8c9e:	b11b      	cbz	r3, 8ca8 <read_group_cb+0x48>
    8ca0:	885a      	ldrh	r2, [r3, #2]
    8ca2:	42b2      	cmp	r2, r6
    8ca4:	d200      	bcs.n	8ca8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8ca6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8ca8:	2001      	movs	r0, #1
}
    8caa:	b004      	add	sp, #16
    8cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8cb0:	6861      	ldr	r1, [r4, #4]
    8cb2:	6828      	ldr	r0, [r5, #0]
    8cb4:	f017 fdc9 	bl	2084a <bt_uuid_cmp>
    8cb8:	b110      	cbz	r0, 8cc0 <read_group_cb+0x60>
		data->group = NULL;
    8cba:	2300      	movs	r3, #0
    8cbc:	6123      	str	r3, [r4, #16]
    8cbe:	e7f3      	b.n	8ca8 <read_group_cb+0x48>
	if (data->rsp->len &&
    8cc0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8cc2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    8cc4:	781a      	ldrb	r2, [r3, #0]
    8cc6:	b13a      	cbz	r2, 8cd8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    8ccc:	8981      	ldrh	r1, [r0, #12]
    8cce:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8cd0:	4293      	cmp	r3, r2
    8cd2:	da01      	bge.n	8cd8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8cd4:	2000      	movs	r0, #0
    8cd6:	e7e8      	b.n	8caa <read_group_cb+0x4a>
    8cd8:	2104      	movs	r1, #4
    8cda:	3008      	adds	r0, #8
    8cdc:	f01a fa59 	bl	23192 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8ce0:	4b09      	ldr	r3, [pc, #36]	; (8d08 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8ce2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8ce4:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8ce6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8ce8:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8cea:	4629      	mov	r1, r5
    8cec:	9300      	str	r3, [sp, #0]
    8cee:	9401      	str	r4, [sp, #4]
    8cf0:	2300      	movs	r3, #0
    8cf2:	4638      	mov	r0, r7
    8cf4:	f018 ff40 	bl	21b78 <att_chan_read>
	if (read < 0) {
    8cf8:	2800      	cmp	r0, #0
    8cfa:	dbeb      	blt.n	8cd4 <read_group_cb+0x74>
	if (!data->group) {
    8cfc:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8cfe:	3800      	subs	r0, #0
    8d00:	bf18      	it	ne
    8d02:	2001      	movne	r0, #1
    8d04:	e7d1      	b.n	8caa <read_group_cb+0x4a>
    8d06:	bf00      	nop
    8d08:	00021ab3 	.word	0x00021ab3

00008d0c <chan_send>:
{
    8d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8d10:	688b      	ldr	r3, [r1, #8]
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	2bd2      	cmp	r3, #210	; 0xd2
{
    8d16:	4606      	mov	r6, r0
    8d18:	460c      	mov	r4, r1
    8d1a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8d1c:	d10c      	bne.n	8d38 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    8d1e:	6803      	ldr	r3, [r0, #0]
    8d20:	6818      	ldr	r0, [r3, #0]
    8d22:	f01a f9c8 	bl	230b6 <bt_smp_sign>
		if (err) {
    8d26:	4605      	mov	r5, r0
    8d28:	b130      	cbz	r0, 8d38 <chan_send+0x2c>
			net_buf_unref(buf);
    8d2a:	4620      	mov	r0, r4
    8d2c:	f011 f9c8 	bl	1a0c0 <net_buf_unref>
}
    8d30:	4628      	mov	r0, r5
    8d32:	b003      	add	sp, #12
    8d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8d38:	f104 0008 	add.w	r0, r4, #8
    8d3c:	f01a fa72 	bl	23224 <net_buf_simple_headroom>
	state->len = buf->len;
    8d40:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8d44:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8d46:	b957      	cbnz	r7, 8d5e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    8d48:	68a3      	ldr	r3, [r4, #8]
    8d4a:	7818      	ldrb	r0, [r3, #0]
    8d4c:	f018 fd4a 	bl	217e4 <att_op_get_type>
    8d50:	3801      	subs	r0, #1
    8d52:	b2c0      	uxtb	r0, r0
    8d54:	2804      	cmp	r0, #4
    8d56:	bf9c      	itt	ls
    8d58:	4b13      	ldrls	r3, [pc, #76]	; (8da8 <chan_send+0x9c>)
    8d5a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8d5e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8d60:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8d64:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    8d66:	4b11      	ldr	r3, [pc, #68]	; (8dac <chan_send+0xa0>)
    8d68:	429f      	cmp	r7, r3
    8d6a:	d018      	beq.n	8d9e <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    8d6c:	4b10      	ldr	r3, [pc, #64]	; (8db0 <chan_send+0xa4>)
    8d6e:	429f      	cmp	r7, r3
    8d70:	d017      	beq.n	8da2 <chan_send+0x96>
		return att_sent;
    8d72:	4910      	ldr	r1, [pc, #64]	; (8db4 <chan_send+0xa8>)
    8d74:	4b10      	ldr	r3, [pc, #64]	; (8db8 <chan_send+0xac>)
    8d76:	4a11      	ldr	r2, [pc, #68]	; (8dbc <chan_send+0xb0>)
    8d78:	428f      	cmp	r7, r1
    8d7a:	bf18      	it	ne
    8d7c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    8d7e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8d80:	9600      	str	r6, [sp, #0]
    8d82:	4622      	mov	r2, r4
    8d84:	2104      	movs	r1, #4
    8d86:	f018 fc33 	bl	215f0 <bt_l2cap_send_cb>
	if (err) {
    8d8a:	4605      	mov	r5, r0
    8d8c:	2800      	cmp	r0, #0
    8d8e:	d0cf      	beq.n	8d30 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    8d90:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8d92:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8d96:	fa10 f088 	uxtah	r0, r0, r8
    8d9a:	60a0      	str	r0, [r4, #8]
}
    8d9c:	e7c8      	b.n	8d30 <chan_send+0x24>
		return att_rsp_sent;
    8d9e:	4b08      	ldr	r3, [pc, #32]	; (8dc0 <chan_send+0xb4>)
    8da0:	e7ed      	b.n	8d7e <chan_send+0x72>
		return att_cfm_sent;
    8da2:	4b08      	ldr	r3, [pc, #32]	; (8dc4 <chan_send+0xb8>)
    8da4:	e7eb      	b.n	8d7e <chan_send+0x72>
    8da6:	bf00      	nop
    8da8:	00024e6c 	.word	0x00024e6c
    8dac:	00021d4b 	.word	0x00021d4b
    8db0:	00021d67 	.word	0x00021d67
    8db4:	00021aff 	.word	0x00021aff
    8db8:	00008ba9 	.word	0x00008ba9
    8dbc:	000217b5 	.word	0x000217b5
    8dc0:	00008b99 	.word	0x00008b99
    8dc4:	00008b89 	.word	0x00008b89

00008dc8 <read_type_cb>:
{
    8dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8dcc:	f8d2 8000 	ldr.w	r8, [r2]
{
    8dd0:	4606      	mov	r6, r0
    8dd2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8dd4:	6800      	ldr	r0, [r0, #0]
    8dd6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8dd8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8ddc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8dde:	f017 fd34 	bl	2084a <bt_uuid_cmp>
    8de2:	4607      	mov	r7, r0
    8de4:	2800      	cmp	r0, #0
    8de6:	d13e      	bne.n	8e66 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8de8:	4628      	mov	r0, r5
    8dea:	2215      	movs	r2, #21
    8dec:	4631      	mov	r1, r6
    8dee:	f019 fdf6 	bl	229de <bt_gatt_check_perm>
    8df2:	4605      	mov	r5, r0
    8df4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8df6:	b148      	cbz	r0, 8e0c <read_type_cb+0x44>
		if (data->rsp->len) {
    8df8:	68e3      	ldr	r3, [r4, #12]
    8dfa:	781b      	ldrb	r3, [r3, #0]
    8dfc:	b923      	cbnz	r3, 8e08 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8dfe:	2500      	movs	r5, #0
}
    8e00:	4628      	mov	r0, r5
    8e02:	b003      	add	sp, #12
    8e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8e08:	7527      	strb	r7, [r4, #20]
    8e0a:	e7f8      	b.n	8dfe <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8e0c:	68a0      	ldr	r0, [r4, #8]
    8e0e:	f01a f992 	bl	23136 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    8e12:	2102      	movs	r1, #2
    8e14:	3008      	adds	r0, #8
    8e16:	f01a f9bc 	bl	23192 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8e1a:	4b14      	ldr	r3, [pc, #80]	; (8e6c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8e1c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8e1e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8e20:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8e24:	4631      	mov	r1, r6
    8e26:	9300      	str	r3, [sp, #0]
    8e28:	9401      	str	r4, [sp, #4]
    8e2a:	462b      	mov	r3, r5
    8e2c:	4640      	mov	r0, r8
    8e2e:	f018 fea3 	bl	21b78 <att_chan_read>
	if (read < 0) {
    8e32:	2800      	cmp	r0, #0
    8e34:	da07      	bge.n	8e46 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    8e36:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8e3a:	bf26      	itte	cs
    8e3c:	4240      	negcs	r0, r0
    8e3e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8e40:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8e42:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8e44:	e7dc      	b.n	8e00 <read_type_cb+0x38>
	if (!data->item) {
    8e46:	6923      	ldr	r3, [r4, #16]
    8e48:	2b00      	cmp	r3, #0
    8e4a:	d0d8      	beq.n	8dfe <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8e4c:	68a0      	ldr	r0, [r4, #8]
    8e4e:	f018 fca9 	bl	217a4 <net_buf_frags_len>
    8e52:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8e56:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8e58:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8e5a:	7818      	ldrb	r0, [r3, #0]
    8e5c:	4285      	cmp	r5, r0
    8e5e:	bf94      	ite	ls
    8e60:	2500      	movls	r5, #0
    8e62:	2501      	movhi	r5, #1
    8e64:	e7cc      	b.n	8e00 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    8e66:	2501      	movs	r5, #1
    8e68:	e7ca      	b.n	8e00 <read_type_cb+0x38>
    8e6a:	bf00      	nop
    8e6c:	000217c1 	.word	0x000217c1

00008e70 <bt_att_connected>:
{
    8e70:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8e72:	4606      	mov	r6, r0
{
    8e74:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8e76:	2104      	movs	r1, #4
    8e78:	f856 0908 	ldr.w	r0, [r6], #-8
    8e7c:	f018 fc56 	bl	2172c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8e80:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8e84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8e86:	b91b      	cbnz	r3, 8e90 <bt_att_connected+0x20>
    8e88:	f105 000c 	add.w	r0, r5, #12
    8e8c:	f01b f8b0 	bl	23ff0 <z_impl_k_queue_init>
	parent->next = child;
    8e90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8e92:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    8e96:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    8e98:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    8e9c:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    8e9e:	b902      	cbnz	r2, 8ea2 <bt_att_connected+0x32>
	list->tail = node;
    8ea0:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8ea2:	f3bf 8f5b 	dmb	ish
    8ea6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    8eaa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8eae:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8eb0:	bf58      	it	pl
    8eb2:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    8eb4:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8eb6:	bf5c      	itt	pl
    8eb8:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8ebc:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    8ec0:	f018 fcd6 	bl	21870 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8ec4:	f504 7084 	add.w	r0, r4, #264	; 0x108
    8ec8:	4902      	ldr	r1, [pc, #8]	; (8ed4 <bt_att_connected+0x64>)
}
    8eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8ece:	f01b b992 	b.w	241f6 <k_work_init_delayable>
    8ed2:	bf00      	nop
    8ed4:	00022061 	.word	0x00022061

00008ed8 <att_indicate>:
{
    8ed8:	b570      	push	{r4, r5, r6, lr}
    8eda:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    8edc:	f101 0008 	add.w	r0, r1, #8
    8ee0:	460d      	mov	r5, r1
    8ee2:	f01a f997 	bl	23214 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    8ee6:	6826      	ldr	r6, [r4, #0]
    8ee8:	89ab      	ldrh	r3, [r5, #12]
    8eea:	68aa      	ldr	r2, [r5, #8]
    8eec:	4601      	mov	r1, r0
    8eee:	6830      	ldr	r0, [r6, #0]
    8ef0:	f01a f81d 	bl	22f2e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    8ef4:	211e      	movs	r1, #30
    8ef6:	2200      	movs	r2, #0
    8ef8:	4620      	mov	r0, r4
    8efa:	f018 fff5 	bl	21ee8 <bt_att_chan_create_pdu>
	if (!buf) {
    8efe:	4601      	mov	r1, r0
    8f00:	b118      	cbz	r0, 8f0a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    8f02:	4a03      	ldr	r2, [pc, #12]	; (8f10 <att_indicate+0x38>)
    8f04:	4620      	mov	r0, r4
    8f06:	f018 fef8 	bl	21cfa <bt_att_chan_send_rsp>
}
    8f0a:	2000      	movs	r0, #0
    8f0c:	bd70      	pop	{r4, r5, r6, pc}
    8f0e:	bf00      	nop
    8f10:	00021d67 	.word	0x00021d67

00008f14 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f18:	4688      	mov	r8, r1
    8f1a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8f1c:	2101      	movs	r1, #1
    8f1e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8f20:	4605      	mov	r5, r0
    8f22:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8f24:	f018 ffe0 	bl	21ee8 <bt_att_chan_create_pdu>
	if (!buf) {
    8f28:	4604      	mov	r4, r0
    8f2a:	b178      	cbz	r0, 8f4c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    8f2c:	2104      	movs	r1, #4
    8f2e:	3008      	adds	r0, #8
    8f30:	f01a f92f 	bl	23192 <net_buf_simple_add>
	rsp->request = req;
    8f34:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    8f38:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    8f3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8f3e:	4621      	mov	r1, r4
    8f40:	4628      	mov	r0, r5
    8f42:	4a03      	ldr	r2, [pc, #12]	; (8f50 <send_err_rsp.part.0+0x3c>)
}
    8f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8f48:	f018 bed7 	b.w	21cfa <bt_att_chan_send_rsp>
}
    8f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f50:	00021d4b 	.word	0x00021d4b

00008f54 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8f54:	898b      	ldrh	r3, [r1, #12]
{
    8f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f5a:	4604      	mov	r4, r0
    8f5c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8f5e:	2b00      	cmp	r3, #0
    8f60:	d060      	beq.n	9024 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    8f62:	2101      	movs	r1, #1
    8f64:	f105 0008 	add.w	r0, r5, #8
    8f68:	f01a f944 	bl	231f4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8f6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8f70:	4607      	mov	r7, r0
    8f72:	2b00      	cmp	r3, #0
    8f74:	d056      	beq.n	9024 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    8f76:	7801      	ldrb	r1, [r0, #0]
    8f78:	4a2e      	ldr	r2, [pc, #184]	; (9034 <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8f7a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8f7e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    8f80:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8f84:	4288      	cmp	r0, r1
    8f86:	d11b      	bne.n	8fc0 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    8f88:	00d9      	lsls	r1, r3, #3
    8f8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8f8e:	f893 8002 	ldrb.w	r8, [r3, #2]
    8f92:	f1b8 0f01 	cmp.w	r8, #1
    8f96:	d023      	beq.n	8fe0 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    8f98:	f1b8 0f05 	cmp.w	r8, #5
    8f9c:	d131      	bne.n	9002 <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8f9e:	f3bf 8f5b 	dmb	ish
    8fa2:	34e8      	adds	r4, #232	; 0xe8
    8fa4:	e854 3f00 	ldrex	r3, [r4]
    8fa8:	f043 0002 	orr.w	r0, r3, #2
    8fac:	e844 0c00 	strex	ip, r0, [r4]
    8fb0:	f1bc 0f00 	cmp.w	ip, #0
    8fb4:	d1f6      	bne.n	8fa4 <bt_att_recv+0x50>
    8fb6:	f3bf 8f5b 	dmb	ish
    8fba:	f013 0f02 	tst.w	r3, #2
    8fbe:	e01f      	b.n	9000 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8fc0:	3301      	adds	r3, #1
    8fc2:	2b1c      	cmp	r3, #28
    8fc4:	d1dc      	bne.n	8f80 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    8fc6:	4608      	mov	r0, r1
    8fc8:	f018 fc0c 	bl	217e4 <att_op_get_type>
    8fcc:	b350      	cbz	r0, 9024 <bt_att_recv+0xd0>
    8fce:	2805      	cmp	r0, #5
    8fd0:	d028      	beq.n	9024 <bt_att_recv+0xd0>
	if (!req) {
    8fd2:	b339      	cbz	r1, 9024 <bt_att_recv+0xd0>
    8fd4:	2306      	movs	r3, #6
    8fd6:	2200      	movs	r2, #0
    8fd8:	4630      	mov	r0, r6
    8fda:	f7ff ff9b 	bl	8f14 <send_err_rsp.part.0>
    8fde:	e021      	b.n	9024 <bt_att_recv+0xd0>
    8fe0:	34e8      	adds	r4, #232	; 0xe8
    8fe2:	f3bf 8f5b 	dmb	ish
    8fe6:	e854 3f00 	ldrex	r3, [r4]
    8fea:	f043 0001 	orr.w	r0, r3, #1
    8fee:	e844 0c00 	strex	ip, r0, [r4]
    8ff2:	f1bc 0f00 	cmp.w	ip, #0
    8ff6:	d1f6      	bne.n	8fe6 <bt_att_recv+0x92>
    8ff8:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8ffc:	f013 0f01 	tst.w	r3, #1
    9000:	d110      	bne.n	9024 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    9002:	440a      	add	r2, r1
    9004:	89a9      	ldrh	r1, [r5, #12]
    9006:	7853      	ldrb	r3, [r2, #1]
    9008:	4299      	cmp	r1, r3
    900a:	d30e      	bcc.n	902a <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    900c:	6853      	ldr	r3, [r2, #4]
    900e:	4629      	mov	r1, r5
    9010:	4630      	mov	r0, r6
    9012:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9014:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    9018:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    901a:	d103      	bne.n	9024 <bt_att_recv+0xd0>
    901c:	b110      	cbz	r0, 9024 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    901e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    9020:	2900      	cmp	r1, #0
    9022:	d1d8      	bne.n	8fd6 <bt_att_recv+0x82>
}
    9024:	2000      	movs	r0, #0
    9026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    902a:	f1b8 0f01 	cmp.w	r8, #1
    902e:	d1f9      	bne.n	9024 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    9030:	2304      	movs	r3, #4
    9032:	e7f4      	b.n	901e <bt_att_recv+0xca>
    9034:	00024e80 	.word	0x00024e80

00009038 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    9038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    903c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    903e:	6803      	ldr	r3, [r0, #0]
    9040:	460e      	mov	r6, r1
    9042:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    9044:	b087      	sub	sp, #28
    9046:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9048:	bf18      	it	ne
    904a:	2101      	movne	r1, #1
    904c:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    904e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9050:	f019 ffdd 	bl	2300e <bt_gatt_change_aware>
    9054:	2800      	cmp	r0, #0
    9056:	d04b      	beq.n	90f0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    9058:	2f00      	cmp	r7, #0
    905a:	d04b      	beq.n	90f4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    905c:	2218      	movs	r2, #24
    905e:	2100      	movs	r1, #0
    9060:	4668      	mov	r0, sp
    9062:	f017 fb6c 	bl	2073e <memset>
	if (rsp) {
    9066:	f1b8 0f00 	cmp.w	r8, #0
    906a:	d122      	bne.n	90b2 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    906c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    906e:	4a22      	ldr	r2, [pc, #136]	; (90f8 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    9070:	681b      	ldr	r3, [r3, #0]
    9072:	9300      	str	r3, [sp, #0]
	data.value = value;
    9074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9076:	9303      	str	r3, [sp, #12]
	data.len = len;
    9078:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    907c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9080:	2301      	movs	r3, #1
    9082:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    9086:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    908a:	466b      	mov	r3, sp
    908c:	4639      	mov	r1, r7
    908e:	4638      	mov	r0, r7
	data.req = req;
    9090:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    9094:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9098:	f018 fc20 	bl	218dc <bt_gatt_foreach_attr>
	if (data.err) {
    909c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    90a0:	b1f4      	cbz	r4, 90e0 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    90a2:	f1b8 0f00 	cmp.w	r8, #0
    90a6:	d10e      	bne.n	90c6 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    90a8:	2400      	movs	r4, #0
}
    90aa:	4620      	mov	r0, r4
    90ac:	b007      	add	sp, #28
    90ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    90b2:	2200      	movs	r2, #0
    90b4:	4641      	mov	r1, r8
    90b6:	4628      	mov	r0, r5
    90b8:	f018 ff16 	bl	21ee8 <bt_att_chan_create_pdu>
    90bc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    90be:	2800      	cmp	r0, #0
    90c0:	d1d4      	bne.n	906c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    90c2:	240e      	movs	r4, #14
    90c4:	e7f1      	b.n	90aa <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    90c6:	9801      	ldr	r0, [sp, #4]
    90c8:	f010 fffa 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    90cc:	2e00      	cmp	r6, #0
    90ce:	d0eb      	beq.n	90a8 <att_write_rsp.constprop.0+0x70>
    90d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    90d4:	463a      	mov	r2, r7
    90d6:	4631      	mov	r1, r6
    90d8:	4628      	mov	r0, r5
    90da:	f7ff ff1b 	bl	8f14 <send_err_rsp.part.0>
    90de:	e7e3      	b.n	90a8 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    90e0:	9901      	ldr	r1, [sp, #4]
    90e2:	2900      	cmp	r1, #0
    90e4:	d0e0      	beq.n	90a8 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    90e6:	4a05      	ldr	r2, [pc, #20]	; (90fc <att_write_rsp.constprop.0+0xc4>)
    90e8:	4628      	mov	r0, r5
    90ea:	f018 fe06 	bl	21cfa <bt_att_chan_send_rsp>
    90ee:	e7dc      	b.n	90aa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    90f0:	2412      	movs	r4, #18
    90f2:	e7da      	b.n	90aa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    90f4:	2401      	movs	r4, #1
    90f6:	e7d8      	b.n	90aa <att_write_rsp.constprop.0+0x72>
    90f8:	00021b15 	.word	0x00021b15
    90fc:	00021d4b 	.word	0x00021d4b

00009100 <att_read_group_req>:
{
    9100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9104:	898c      	ldrh	r4, [r1, #12]
    9106:	3c04      	subs	r4, #4
    9108:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    910a:	2c02      	cmp	r4, #2
{
    910c:	4605      	mov	r5, r0
    910e:	b08c      	sub	sp, #48	; 0x30
    9110:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9112:	d001      	beq.n	9118 <att_read_group_req+0x18>
    9114:	2c10      	cmp	r4, #16
    9116:	d16f      	bne.n	91f8 <att_read_group_req+0xf8>
    9118:	2104      	movs	r1, #4
    911a:	3008      	adds	r0, #8
    911c:	f01a f86a 	bl	231f4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9120:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    9124:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9126:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9128:	1d01      	adds	r1, r0, #4
    912a:	4622      	mov	r2, r4
    912c:	4640      	mov	r0, r8
    912e:	f017 fbba 	bl	208a6 <bt_uuid_create>
    9132:	2800      	cmp	r0, #0
    9134:	d062      	beq.n	91fc <att_read_group_req+0xfc>
	if (!start || !end) {
    9136:	2e00      	cmp	r6, #0
    9138:	d03a      	beq.n	91b0 <att_read_group_req+0xb0>
    913a:	2400      	movs	r4, #0
    913c:	2f00      	cmp	r7, #0
    913e:	d036      	beq.n	91ae <att_read_group_req+0xae>
	if (start > end) {
    9140:	42be      	cmp	r6, r7
    9142:	d835      	bhi.n	91b0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9144:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9148:	a901      	add	r1, sp, #4
    914a:	4640      	mov	r0, r8
    914c:	f88d 4004 	strb.w	r4, [sp, #4]
    9150:	f8ad 3006 	strh.w	r3, [sp, #6]
    9154:	f017 fb79 	bl	2084a <bt_uuid_cmp>
    9158:	2800      	cmp	r0, #0
    915a:	d134      	bne.n	91c6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    915c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    915e:	2214      	movs	r2, #20
    9160:	2100      	movs	r1, #0
    9162:	a807      	add	r0, sp, #28
    9164:	f017 faeb 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9168:	2201      	movs	r2, #1
    916a:	2111      	movs	r1, #17
    916c:	4620      	mov	r0, r4
    916e:	f018 ff06 	bl	21f7e <bt_att_create_pdu>
    9172:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    9174:	2800      	cmp	r0, #0
    9176:	d041      	beq.n	91fc <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    9178:	2101      	movs	r1, #1
    917a:	3008      	adds	r0, #8
	data.uuid = uuid;
    917c:	e9cd 5807 	strd	r5, r8, [sp, #28]
    9180:	f01a f807 	bl	23192 <net_buf_simple_add>
	data.rsp->len = 0U;
    9184:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9188:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    918a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    918c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9190:	4a1b      	ldr	r2, [pc, #108]	; (9200 <att_read_group_req+0x100>)
	data.group = NULL;
    9192:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9196:	4639      	mov	r1, r7
    9198:	4630      	mov	r0, r6
    919a:	f018 fb9f 	bl	218dc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    919e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    91a0:	781c      	ldrb	r4, [r3, #0]
    91a2:	bb1c      	cbnz	r4, 91ec <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    91a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    91a6:	f010 ff8b 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    91aa:	230a      	movs	r3, #10
    91ac:	e018      	b.n	91e0 <att_read_group_req+0xe0>
			*err = 0U;
    91ae:	463e      	mov	r6, r7
	if (!req) {
    91b0:	2301      	movs	r3, #1
    91b2:	4632      	mov	r2, r6
    91b4:	2110      	movs	r1, #16
    91b6:	4628      	mov	r0, r5
    91b8:	f7ff feac 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    91bc:	2400      	movs	r4, #0
}
    91be:	4620      	mov	r0, r4
    91c0:	b00c      	add	sp, #48	; 0x30
    91c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    91c6:	f642 0301 	movw	r3, #10241	; 0x2801
    91ca:	a907      	add	r1, sp, #28
    91cc:	4640      	mov	r0, r8
    91ce:	f88d 401c 	strb.w	r4, [sp, #28]
    91d2:	f8ad 301e 	strh.w	r3, [sp, #30]
    91d6:	f017 fb38 	bl	2084a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    91da:	2800      	cmp	r0, #0
    91dc:	d0be      	beq.n	915c <att_read_group_req+0x5c>
	if (!req) {
    91de:	2310      	movs	r3, #16
    91e0:	4632      	mov	r2, r6
    91e2:	2110      	movs	r1, #16
    91e4:	4628      	mov	r0, r5
    91e6:	f7ff fe95 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    91ea:	e7e8      	b.n	91be <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    91ec:	4a05      	ldr	r2, [pc, #20]	; (9204 <att_read_group_req+0x104>)
    91ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    91f0:	4628      	mov	r0, r5
    91f2:	f018 fd82 	bl	21cfa <bt_att_chan_send_rsp>
	return 0;
    91f6:	e7e1      	b.n	91bc <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    91f8:	2404      	movs	r4, #4
    91fa:	e7e0      	b.n	91be <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    91fc:	240e      	movs	r4, #14
    91fe:	e7de      	b.n	91be <att_read_group_req+0xbe>
    9200:	00008c61 	.word	0x00008c61
    9204:	00021d4b 	.word	0x00021d4b

00009208 <att_read_mult_req>:
{
    9208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    920c:	6886      	ldr	r6, [r0, #8]
{
    920e:	b085      	sub	sp, #20
    9210:	4604      	mov	r4, r0
    9212:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    9214:	4630      	mov	r0, r6
    9216:	2101      	movs	r1, #1
    9218:	f019 fef9 	bl	2300e <bt_gatt_change_aware>
    921c:	2800      	cmp	r0, #0
    921e:	d038      	beq.n	9292 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
    9220:	2210      	movs	r2, #16
    9222:	2100      	movs	r1, #0
    9224:	4668      	mov	r0, sp
    9226:	f017 fa8a 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    922a:	2200      	movs	r2, #0
    922c:	210f      	movs	r1, #15
    922e:	4630      	mov	r0, r6
    9230:	f018 fea5 	bl	21f7e <bt_att_create_pdu>
    9234:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9236:	b370      	cbz	r0, 9296 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9238:	f8df 9060 	ldr.w	r9, [pc, #96]	; 929c <att_read_mult_req+0x94>
	data.chan = chan;
    923c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    923e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9242:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    9246:	89ab      	ldrh	r3, [r5, #12]
    9248:	2b01      	cmp	r3, #1
    924a:	d805      	bhi.n	9258 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    924c:	4a14      	ldr	r2, [pc, #80]	; (92a0 <att_read_mult_req+0x98>)
    924e:	9902      	ldr	r1, [sp, #8]
    9250:	4620      	mov	r0, r4
    9252:	f018 fd52 	bl	21cfa <bt_att_chan_send_rsp>
    9256:	e018      	b.n	928a <att_read_mult_req+0x82>
    9258:	4638      	mov	r0, r7
    925a:	f019 ffdb 	bl	23214 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    925e:	466b      	mov	r3, sp
    9260:	464a      	mov	r2, r9
    9262:	4601      	mov	r1, r0
    9264:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9266:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    926a:	f018 fb37 	bl	218dc <bt_gatt_foreach_attr>
		if (data.err) {
    926e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9272:	2b00      	cmp	r3, #0
    9274:	d0e7      	beq.n	9246 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
    9276:	9802      	ldr	r0, [sp, #8]
    9278:	f010 ff22 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    927c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9280:	4632      	mov	r2, r6
    9282:	210e      	movs	r1, #14
    9284:	4620      	mov	r0, r4
    9286:	f7ff fe45 	bl	8f14 <send_err_rsp.part.0>
	return 0;
    928a:	2000      	movs	r0, #0
}
    928c:	b005      	add	sp, #20
    928e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9292:	2012      	movs	r0, #18
    9294:	e7fa      	b.n	928c <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
    9296:	200e      	movs	r0, #14
    9298:	e7f8      	b.n	928c <att_read_mult_req+0x84>
    929a:	bf00      	nop
    929c:	00021d83 	.word	0x00021d83
    92a0:	00021d4b 	.word	0x00021d4b

000092a4 <att_read_rsp>:
{
    92a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    92a8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    92ac:	4605      	mov	r5, r0
    92ae:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    92b0:	4640      	mov	r0, r8
    92b2:	2101      	movs	r1, #1
{
    92b4:	4614      	mov	r4, r2
    92b6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    92b8:	f019 fea9 	bl	2300e <bt_gatt_change_aware>
    92bc:	b390      	cbz	r0, 9324 <att_read_rsp+0x80>
	if (!handle) {
    92be:	b39e      	cbz	r6, 9328 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    92c0:	2210      	movs	r2, #16
    92c2:	2100      	movs	r1, #0
    92c4:	4668      	mov	r0, sp
    92c6:	f017 fa3a 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    92ca:	2200      	movs	r2, #0
    92cc:	4621      	mov	r1, r4
    92ce:	4640      	mov	r0, r8
    92d0:	f018 fe55 	bl	21f7e <bt_att_create_pdu>
    92d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    92d6:	b348      	cbz	r0, 932c <att_read_rsp+0x88>
	data.offset = offset;
    92d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    92dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    92e0:	2301      	movs	r3, #1
    92e2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    92e6:	4a12      	ldr	r2, [pc, #72]	; (9330 <att_read_rsp+0x8c>)
	data.chan = chan;
    92e8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    92ea:	466b      	mov	r3, sp
    92ec:	4631      	mov	r1, r6
    92ee:	4630      	mov	r0, r6
    92f0:	f018 faf4 	bl	218dc <bt_gatt_foreach_attr>
	if (data.err) {
    92f4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    92f8:	b174      	cbz	r4, 9318 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    92fa:	9802      	ldr	r0, [sp, #8]
    92fc:	f010 fee0 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    9300:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9304:	4632      	mov	r2, r6
    9306:	4639      	mov	r1, r7
    9308:	4628      	mov	r0, r5
    930a:	f7ff fe03 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    930e:	2400      	movs	r4, #0
}
    9310:	4620      	mov	r0, r4
    9312:	b004      	add	sp, #16
    9314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9318:	4a06      	ldr	r2, [pc, #24]	; (9334 <att_read_rsp+0x90>)
    931a:	9902      	ldr	r1, [sp, #8]
    931c:	4628      	mov	r0, r5
    931e:	f018 fcec 	bl	21cfa <bt_att_chan_send_rsp>
	return 0;
    9322:	e7f5      	b.n	9310 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9324:	2412      	movs	r4, #18
    9326:	e7f3      	b.n	9310 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9328:	2401      	movs	r4, #1
    932a:	e7f1      	b.n	9310 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    932c:	240e      	movs	r4, #14
    932e:	e7ef      	b.n	9310 <att_read_rsp+0x6c>
    9330:	00021d83 	.word	0x00021d83
    9334:	00021d4b 	.word	0x00021d4b

00009338 <att_read_type_req>:
{
    9338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    933c:	898c      	ldrh	r4, [r1, #12]
    933e:	3c04      	subs	r4, #4
    9340:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9342:	2c02      	cmp	r4, #2
{
    9344:	4605      	mov	r5, r0
    9346:	b08c      	sub	sp, #48	; 0x30
    9348:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    934a:	d001      	beq.n	9350 <att_read_type_req+0x18>
    934c:	2c10      	cmp	r4, #16
    934e:	d150      	bne.n	93f2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    9350:	2104      	movs	r1, #4
    9352:	3008      	adds	r0, #8
    9354:	f019 ff4e 	bl	231f4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9358:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    935c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    935e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9360:	1d01      	adds	r1, r0, #4
    9362:	4622      	mov	r2, r4
    9364:	4640      	mov	r0, r8
    9366:	f017 fa9e 	bl	208a6 <bt_uuid_create>
    936a:	b188      	cbz	r0, 9390 <att_read_type_req+0x58>
	if (!start || !end) {
    936c:	b19e      	cbz	r6, 9396 <att_read_type_req+0x5e>
    936e:	b18f      	cbz	r7, 9394 <att_read_type_req+0x5c>
	if (start > end) {
    9370:	42b7      	cmp	r7, r6
    9372:	d310      	bcc.n	9396 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    9374:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    9376:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9378:	2100      	movs	r1, #0
    937a:	eb0d 0002 	add.w	r0, sp, r2
    937e:	f017 f9de 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9382:	2201      	movs	r2, #1
    9384:	2109      	movs	r1, #9
    9386:	4620      	mov	r0, r4
    9388:	f018 fdf9 	bl	21f7e <bt_att_create_pdu>
    938c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    938e:	b968      	cbnz	r0, 93ac <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9390:	240e      	movs	r4, #14
    9392:	e007      	b.n	93a4 <att_read_type_req+0x6c>
			*err = 0U;
    9394:	463e      	mov	r6, r7
	if (!req) {
    9396:	2301      	movs	r3, #1
    9398:	4632      	mov	r2, r6
    939a:	2108      	movs	r1, #8
    939c:	4628      	mov	r0, r5
    939e:	f7ff fdb9 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    93a2:	2400      	movs	r4, #0
}
    93a4:	4620      	mov	r0, r4
    93a6:	b00c      	add	sp, #48	; 0x30
    93a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    93ac:	2101      	movs	r1, #1
    93ae:	3008      	adds	r0, #8
	data.uuid = uuid;
    93b0:	e9cd 5806 	strd	r5, r8, [sp, #24]
    93b4:	f019 feed 	bl	23192 <net_buf_simple_add>
	data.rsp->len = 0U;
    93b8:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93bc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    93be:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93c0:	4a0d      	ldr	r2, [pc, #52]	; (93f8 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    93c2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93c6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    93cc:	4630      	mov	r0, r6
    93ce:	ab06      	add	r3, sp, #24
    93d0:	f018 fa84 	bl	218dc <bt_gatt_foreach_attr>
	if (data.err) {
    93d4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    93d8:	b12c      	cbz	r4, 93e6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    93da:	9808      	ldr	r0, [sp, #32]
    93dc:	f010 fe70 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    93e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    93e4:	e7d8      	b.n	9398 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    93e6:	4a05      	ldr	r2, [pc, #20]	; (93fc <att_read_type_req+0xc4>)
    93e8:	9908      	ldr	r1, [sp, #32]
    93ea:	4628      	mov	r0, r5
    93ec:	f018 fc85 	bl	21cfa <bt_att_chan_send_rsp>
	return 0;
    93f0:	e7d8      	b.n	93a4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    93f2:	2404      	movs	r4, #4
    93f4:	e7d6      	b.n	93a4 <att_read_type_req+0x6c>
    93f6:	bf00      	nop
    93f8:	00008dc9 	.word	0x00008dc9
    93fc:	00021d4b 	.word	0x00021d4b

00009400 <att_find_type_req>:
{
    9400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9404:	4688      	mov	r8, r1
    9406:	b086      	sub	sp, #24
    9408:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    940a:	2106      	movs	r1, #6
    940c:	f108 0008 	add.w	r0, r8, #8
    9410:	f019 fef0 	bl	231f4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9414:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9416:	b317      	cbz	r7, 945e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9418:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    941c:	f1b9 0f00 	cmp.w	r9, #0
    9420:	d01c      	beq.n	945c <att_find_type_req+0x5c>
	if (start > end) {
    9422:	454f      	cmp	r7, r9
    9424:	d81b      	bhi.n	945e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9426:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9428:	f8ad 3002 	strh.w	r3, [sp, #2]
    942c:	2400      	movs	r4, #0
    942e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9432:	a901      	add	r1, sp, #4
    9434:	4668      	mov	r0, sp
	value = buf->data;
    9436:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    943a:	f88d 4000 	strb.w	r4, [sp]
    943e:	f88d 4004 	strb.w	r4, [sp, #4]
    9442:	f8ad 3006 	strh.w	r3, [sp, #6]
    9446:	f017 fa00 	bl	2084a <bt_uuid_cmp>
    944a:	4606      	mov	r6, r0
    944c:	b190      	cbz	r0, 9474 <att_find_type_req+0x74>
	if (!req) {
    944e:	230a      	movs	r3, #10
    9450:	463a      	mov	r2, r7
    9452:	2106      	movs	r1, #6
    9454:	4628      	mov	r0, r5
    9456:	f7ff fd5d 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    945a:	e007      	b.n	946c <att_find_type_req+0x6c>
			*err = 0U;
    945c:	464f      	mov	r7, r9
	if (!req) {
    945e:	2301      	movs	r3, #1
    9460:	463a      	mov	r2, r7
    9462:	2106      	movs	r1, #6
    9464:	4628      	mov	r0, r5
    9466:	f7ff fd55 	bl	8f14 <send_err_rsp.part.0>
		return 0;
    946a:	2400      	movs	r4, #0
}
    946c:	4620      	mov	r0, r4
    946e:	b006      	add	sp, #24
    9470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9474:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    9478:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    947c:	4601      	mov	r1, r0
    947e:	2214      	movs	r2, #20
    9480:	a801      	add	r0, sp, #4
    9482:	f017 f95c 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9486:	4632      	mov	r2, r6
    9488:	2107      	movs	r1, #7
    948a:	4640      	mov	r0, r8
    948c:	f018 fd77 	bl	21f7e <bt_att_create_pdu>
    9490:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9492:	b1e0      	cbz	r0, 94ce <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9494:	230a      	movs	r3, #10
    9496:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    949a:	4a0e      	ldr	r2, [pc, #56]	; (94d4 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    949c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    94a0:	ab01      	add	r3, sp, #4
    94a2:	4649      	mov	r1, r9
    94a4:	4638      	mov	r0, r7
	data.value = value;
    94a6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    94aa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    94ac:	f018 fa16 	bl	218dc <bt_gatt_foreach_attr>
	if (data.err) {
    94b0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    94b4:	b12c      	cbz	r4, 94c2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    94b6:	9802      	ldr	r0, [sp, #8]
    94b8:	f010 fe02 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    94bc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    94c0:	e7ce      	b.n	9460 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    94c2:	4a05      	ldr	r2, [pc, #20]	; (94d8 <att_find_type_req+0xd8>)
    94c4:	9902      	ldr	r1, [sp, #8]
    94c6:	4628      	mov	r0, r5
    94c8:	f018 fc17 	bl	21cfa <bt_att_chan_send_rsp>
	return 0;
    94cc:	e7ce      	b.n	946c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    94ce:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    94d0:	e7cc      	b.n	946c <att_find_type_req+0x6c>
    94d2:	bf00      	nop
    94d4:	000218f3 	.word	0x000218f3
    94d8:	00021d4b 	.word	0x00021d4b

000094dc <att_find_info_req>:
{
    94dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    94de:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    94e0:	881e      	ldrh	r6, [r3, #0]
{
    94e2:	b085      	sub	sp, #20
    94e4:	4605      	mov	r5, r0
	if (!start || !end) {
    94e6:	b19e      	cbz	r6, 9510 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    94e8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    94ea:	b184      	cbz	r4, 950e <att_find_info_req+0x32>
	if (start > end) {
    94ec:	42b4      	cmp	r4, r6
    94ee:	d30f      	bcc.n	9510 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    94f0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    94f2:	2210      	movs	r2, #16
    94f4:	2100      	movs	r1, #0
    94f6:	4668      	mov	r0, sp
    94f8:	f017 f921 	bl	2073e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    94fc:	2200      	movs	r2, #0
    94fe:	2105      	movs	r1, #5
    9500:	4638      	mov	r0, r7
    9502:	f018 fd3c 	bl	21f7e <bt_att_create_pdu>
    9506:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9508:	b958      	cbnz	r0, 9522 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    950a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    950c:	e007      	b.n	951e <att_find_info_req+0x42>
			*err = 0U;
    950e:	4626      	mov	r6, r4
	if (!req) {
    9510:	2301      	movs	r3, #1
    9512:	4632      	mov	r2, r6
    9514:	2104      	movs	r1, #4
    9516:	4628      	mov	r0, r5
    9518:	f7ff fcfc 	bl	8f14 <send_err_rsp.part.0>
	return 0;
    951c:	2000      	movs	r0, #0
}
    951e:	b005      	add	sp, #20
    9520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9522:	4621      	mov	r1, r4
    9524:	4a09      	ldr	r2, [pc, #36]	; (954c <att_find_info_req+0x70>)
	data.chan = chan;
    9526:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9528:	466b      	mov	r3, sp
    952a:	4630      	mov	r0, r6
    952c:	f018 f9d6 	bl	218dc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9530:	9c02      	ldr	r4, [sp, #8]
    9532:	b924      	cbnz	r4, 953e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9534:	9801      	ldr	r0, [sp, #4]
    9536:	f010 fdc3 	bl	1a0c0 <net_buf_unref>
	if (!req) {
    953a:	230a      	movs	r3, #10
    953c:	e7e9      	b.n	9512 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    953e:	4a04      	ldr	r2, [pc, #16]	; (9550 <att_find_info_req+0x74>)
    9540:	9901      	ldr	r1, [sp, #4]
    9542:	4628      	mov	r0, r5
    9544:	f018 fbd9 	bl	21cfa <bt_att_chan_send_rsp>
    9548:	e7e8      	b.n	951c <att_find_info_req+0x40>
    954a:	bf00      	nop
    954c:	00021a1b 	.word	0x00021a1b
    9550:	00021d4b 	.word	0x00021d4b

00009554 <att_mtu_req>:
{
    9554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    9556:	6803      	ldr	r3, [r0, #0]
{
    9558:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
    955a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    955c:	f3bf 8f5b 	dmb	ish
    9560:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9564:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    9568:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    956c:	071b      	lsls	r3, r3, #28
    956e:	d41e      	bmi.n	95ae <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    9570:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9572:	881b      	ldrh	r3, [r3, #0]
    9574:	2b16      	cmp	r3, #22
    9576:	d91c      	bls.n	95b2 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9578:	2202      	movs	r2, #2
    957a:	2103      	movs	r1, #3
    957c:	f018 fcff 	bl	21f7e <bt_att_create_pdu>
	if (!pdu) {
    9580:	4606      	mov	r6, r0
    9582:	b1c0      	cbz	r0, 95b6 <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
    9584:	2102      	movs	r1, #2
    9586:	3008      	adds	r0, #8
    9588:	f019 fe03 	bl	23192 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    958c:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    958e:	4a0b      	ldr	r2, [pc, #44]	; (95bc <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9590:	7007      	strb	r7, [r0, #0]
    9592:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    9594:	4631      	mov	r1, r6
    9596:	4620      	mov	r0, r4
    9598:	f018 fbaf 	bl	21cfa <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
    959c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    959e:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    95a2:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
    95a6:	f018 f963 	bl	21870 <att_chan_mtu_updated>
	return 0;
    95aa:	4628      	mov	r0, r5
}
    95ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    95ae:	2006      	movs	r0, #6
    95b0:	e7fc      	b.n	95ac <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    95b2:	2004      	movs	r0, #4
    95b4:	e7fa      	b.n	95ac <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    95b6:	200e      	movs	r0, #14
    95b8:	e7f8      	b.n	95ac <att_mtu_req+0x58>
    95ba:	bf00      	nop
    95bc:	00021d4b 	.word	0x00021d4b

000095c0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    95c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    95c2:	2300      	movs	r3, #0
{
    95c4:	4605      	mov	r5, r0
    95c6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    95c8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    95ca:	f015 fca5 	bl	1ef18 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    95ce:	4b0b      	ldr	r3, [pc, #44]	; (95fc <bt_att_req_alloc+0x3c>)
    95d0:	681b      	ldr	r3, [r3, #0]
    95d2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    95d4:	bf04      	itt	eq
    95d6:	2500      	moveq	r5, #0
    95d8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    95da:	a901      	add	r1, sp, #4
    95dc:	4808      	ldr	r0, [pc, #32]	; (9600 <bt_att_req_alloc+0x40>)
    95de:	462a      	mov	r2, r5
    95e0:	4623      	mov	r3, r4
    95e2:	f014 fdab 	bl	1e13c <k_mem_slab_alloc>
    95e6:	4601      	mov	r1, r0
    95e8:	b930      	cbnz	r0, 95f8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    95ea:	9801      	ldr	r0, [sp, #4]
    95ec:	2210      	movs	r2, #16
    95ee:	f017 f8a6 	bl	2073e <memset>

	return req;
    95f2:	9801      	ldr	r0, [sp, #4]
}
    95f4:	b003      	add	sp, #12
    95f6:	bd30      	pop	{r4, r5, pc}
		return NULL;
    95f8:	2000      	movs	r0, #0
    95fa:	e7fb      	b.n	95f4 <bt_att_req_alloc+0x34>
    95fc:	200041a0 	.word	0x200041a0
    9600:	20000adc 	.word	0x20000adc

00009604 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9604:	b507      	push	{r0, r1, r2, lr}
    9606:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    9608:	6880      	ldr	r0, [r0, #8]
    960a:	b120      	cbz	r0, 9616 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    960c:	f010 fd58 	bl	1a0c0 <net_buf_unref>
		req->buf = NULL;
    9610:	9b01      	ldr	r3, [sp, #4]
    9612:	2200      	movs	r2, #0
    9614:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    9616:	4803      	ldr	r0, [pc, #12]	; (9624 <bt_att_req_free+0x20>)
    9618:	a901      	add	r1, sp, #4
    961a:	f01a fc2f 	bl	23e7c <k_mem_slab_free>
}
    961e:	b003      	add	sp, #12
    9620:	f85d fb04 	ldr.w	pc, [sp], #4
    9624:	20000adc 	.word	0x20000adc

00009628 <att_handle_rsp>:
{
    9628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    962c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    962e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    9632:	4688      	mov	r8, r1
    9634:	4691      	mov	r9, r2
    9636:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    9638:	f01a fde9 	bl	2420e <k_work_cancel_delayable>
	if (!chan->req) {
    963c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    9640:	2600      	movs	r6, #0
    9642:	b1f0      	cbz	r0, 9682 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    9644:	4b10      	ldr	r3, [pc, #64]	; (9688 <att_handle_rsp+0x60>)
    9646:	4298      	cmp	r0, r3
    9648:	d112      	bne.n	9670 <att_handle_rsp+0x48>
		chan->req = NULL;
    964a:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    964e:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    9650:	6820      	ldr	r0, [r4, #0]
    9652:	f018 fbfd 	bl	21e50 <att_req_send_process>
	if (func) {
    9656:	b13d      	cbz	r5, 9668 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    9658:	6820      	ldr	r0, [r4, #0]
    965a:	f8cd a000 	str.w	sl, [sp]
    965e:	6800      	ldr	r0, [r0, #0]
    9660:	464b      	mov	r3, r9
    9662:	4642      	mov	r2, r8
    9664:	4639      	mov	r1, r7
    9666:	47a8      	blx	r5
}
    9668:	2000      	movs	r0, #0
    966a:	b002      	add	sp, #8
    966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    9670:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    9672:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    9674:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    9678:	f7ff ffc4 	bl	9604 <bt_att_req_free>
	chan->req = NULL;
    967c:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    9680:	e7e6      	b.n	9650 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    9682:	4605      	mov	r5, r0
    9684:	e7e4      	b.n	9650 <att_handle_rsp+0x28>
    9686:	bf00      	nop
    9688:	20004200 	.word	0x20004200

0000968c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    968c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    9690:	b143      	cbz	r3, 96a4 <att_error_rsp+0x18>
    9692:	4a05      	ldr	r2, [pc, #20]	; (96a8 <att_error_rsp+0x1c>)
    9694:	4293      	cmp	r3, r2
    9696:	d005      	beq.n	96a4 <att_error_rsp+0x18>
	err = rsp->error;
    9698:	688b      	ldr	r3, [r1, #8]
    969a:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
    969c:	2200      	movs	r2, #0
    969e:	4611      	mov	r1, r2
    96a0:	f7ff bfc2 	b.w	9628 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    96a4:	230e      	movs	r3, #14
    96a6:	e7f9      	b.n	969c <att_error_rsp+0x10>
    96a8:	20004200 	.word	0x20004200

000096ac <bt_att_disconnected>:
{
    96ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    96ae:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    96b2:	b085      	sub	sp, #20
    96b4:	4604      	mov	r4, r0
	if (!att_chan->att) {
    96b6:	2d00      	cmp	r5, #0
    96b8:	d04d      	beq.n	9756 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    96ba:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    96be:	f105 0024 	add.w	r0, r5, #36	; 0x24
    96c2:	f018 fb28 	bl	21d16 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    96c6:	f1a4 0608 	sub.w	r6, r4, #8
    96ca:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    96ce:	2200      	movs	r2, #0
    96d0:	2300      	movs	r3, #0
    96d2:	4638      	mov	r0, r7
    96d4:	f019 fcfa 	bl	230cc <net_buf_get>
    96d8:	4602      	mov	r2, r0
    96da:	bb18      	cbnz	r0, 9724 <bt_att_disconnected+0x78>
	if (chan->req) {
    96dc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    96e0:	b123      	cbz	r3, 96ec <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    96e2:	4601      	mov	r1, r0
    96e4:	230e      	movs	r3, #14
    96e6:	4630      	mov	r0, r6
    96e8:	f7ff ff9e 	bl	9628 <att_handle_rsp>
	chan->att = NULL;
    96ec:	2300      	movs	r3, #0
    96ee:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    96f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    96f4:	2b00      	cmp	r3, #0
    96f6:	d12e      	bne.n	9756 <bt_att_disconnected+0xaa>
	att_reset(att);
    96f8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    96fa:	9803      	ldr	r0, [sp, #12]
    96fc:	2200      	movs	r2, #0
    96fe:	2300      	movs	r3, #0
    9700:	300c      	adds	r0, #12
    9702:	f019 fce3 	bl	230cc <net_buf_get>
    9706:	b980      	cbnz	r0, 972a <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    9708:	9803      	ldr	r0, [sp, #12]
	return list->head;
    970a:	6845      	ldr	r5, [r0, #4]
    970c:	b985      	cbnz	r5, 9730 <bt_att_disconnected+0x84>
	att->conn = NULL;
    970e:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    9710:	a903      	add	r1, sp, #12
    9712:	4812      	ldr	r0, [pc, #72]	; (975c <bt_att_disconnected+0xb0>)
    9714:	f01a fbb2 	bl	23e7c <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    9718:	6820      	ldr	r0, [r4, #0]
}
    971a:	b005      	add	sp, #20
    971c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    9720:	f000 be74 	b.w	a40c <bt_gatt_disconnected>
		net_buf_unref(buf);
    9724:	f010 fccc 	bl	1a0c0 <net_buf_unref>
    9728:	e7d1      	b.n	96ce <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    972a:	f010 fcc9 	bl	1a0c0 <net_buf_unref>
    972e:	e7e4      	b.n	96fa <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9730:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    9732:	686e      	ldr	r6, [r5, #4]
	return node->next;
    9734:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    9736:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9738:	4295      	cmp	r5, r2
	list->tail = node;
    973a:	bf08      	it	eq
    973c:	6083      	streq	r3, [r0, #8]
    973e:	b136      	cbz	r6, 974e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    9740:	68eb      	ldr	r3, [r5, #12]
    9742:	9300      	str	r3, [sp, #0]
    9744:	2300      	movs	r3, #0
    9746:	6800      	ldr	r0, [r0, #0]
    9748:	461a      	mov	r2, r3
    974a:	210e      	movs	r1, #14
    974c:	47b0      	blx	r6
		bt_att_req_free(req);
    974e:	4628      	mov	r0, r5
    9750:	f7ff ff58 	bl	9604 <bt_att_req_free>
    9754:	e7d8      	b.n	9708 <bt_att_disconnected+0x5c>
}
    9756:	b005      	add	sp, #20
    9758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    975a:	bf00      	nop
    975c:	20000a88 	.word	0x20000a88

00009760 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    9760:	b510      	push	{r4, lr}
    9762:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    9764:	b330      	cbz	r0, 97b4 <bt_att_req_cancel+0x54>
    9766:	b329      	cbz	r1, 97b4 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
    9768:	f018 f9b3 	bl	21ad2 <att_get>
	if (!att) {
    976c:	b310      	cbz	r0, 97b4 <bt_att_req_cancel+0x54>
	return list->head;
    976e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9770:	b153      	cbz	r3, 9788 <bt_att_req_cancel+0x28>
    9772:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
    9776:	681b      	ldr	r3, [r3, #0]
    9778:	b10b      	cbz	r3, 977e <bt_att_req_cancel+0x1e>
    977a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
    977e:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
    9782:	4294      	cmp	r4, r2
    9784:	d006      	beq.n	9794 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9786:	b96b      	cbnz	r3, 97a4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    9788:	3004      	adds	r0, #4
    978a:	4621      	mov	r1, r4
    978c:	f018 fac3 	bl	21d16 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
    9790:	4620      	mov	r0, r4
    9792:	e003      	b.n	979c <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
    9794:	4b08      	ldr	r3, [pc, #32]	; (97b8 <bt_att_req_cancel+0x58>)
    9796:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
    979a:	4620      	mov	r0, r4
}
    979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    97a0:	f7ff bf30 	b.w	9604 <bt_att_req_free>
    97a4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    97a8:	b10a      	cbz	r2, 97ae <bt_att_req_cancel+0x4e>
    97aa:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
    97ae:	4619      	mov	r1, r3
    97b0:	4613      	mov	r3, r2
    97b2:	e7e4      	b.n	977e <bt_att_req_cancel+0x1e>
}
    97b4:	bd10      	pop	{r4, pc}
    97b6:	bf00      	nop
    97b8:	20004200 	.word	0x20004200

000097bc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    97bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    97be:	4d0d      	ldr	r5, [pc, #52]	; (97f4 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    97c0:	4604      	mov	r4, r0
    97c2:	b960      	cbnz	r0, 97de <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    97c4:	9000      	str	r0, [sp, #0]
    97c6:	4669      	mov	r1, sp
    97c8:	f8cd 0003 	str.w	r0, [sp, #3]
    97cc:	1c68      	adds	r0, r5, #1
    97ce:	f018 fd8d 	bl	222ec <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    97d2:	2800      	cmp	r0, #0
    97d4:	bf08      	it	eq
    97d6:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    97d8:	4620      	mov	r0, r4
    97da:	b003      	add	sp, #12
    97dc:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    97de:	462a      	mov	r2, r5
    97e0:	f812 1b01 	ldrb.w	r1, [r2], #1
    97e4:	f017 fdf9 	bl	213da <bt_conn_is_peer_addr_le>
	return NULL;
    97e8:	2800      	cmp	r0, #0
    97ea:	bf14      	ite	ne
    97ec:	462c      	movne	r4, r5
    97ee:	2400      	moveq	r4, #0
    97f0:	e7f2      	b.n	97d8 <find_cf_cfg+0x1c>
    97f2:	bf00      	nop
    97f4:	20004218 	.word	0x20004218

000097f8 <find_sc_cfg>:
{
    97f8:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    97fa:	4c06      	ldr	r4, [pc, #24]	; (9814 <find_sc_cfg+0x1c>)
    97fc:	7823      	ldrb	r3, [r4, #0]
    97fe:	4283      	cmp	r3, r0
    9800:	d103      	bne.n	980a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    9802:	1c60      	adds	r0, r4, #1
    9804:	f018 fd72 	bl	222ec <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    9808:	b108      	cbz	r0, 980e <find_sc_cfg+0x16>
	return NULL;
    980a:	2000      	movs	r0, #0
}
    980c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    980e:	4620      	mov	r0, r4
    9810:	e7fc      	b.n	980c <find_sc_cfg+0x14>
    9812:	bf00      	nop
    9814:	200060b0 	.word	0x200060b0

00009818 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    9818:	b537      	push	{r0, r1, r2, r4, r5, lr}
    981a:	4d0d      	ldr	r5, [pc, #52]	; (9850 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    981c:	4604      	mov	r4, r0
    981e:	b960      	cbnz	r0, 983a <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    9820:	9000      	str	r0, [sp, #0]
    9822:	4669      	mov	r1, sp
    9824:	f8cd 0003 	str.w	r0, [sp, #3]
    9828:	1c68      	adds	r0, r5, #1
    982a:	f018 fd5f 	bl	222ec <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
    982e:	2800      	cmp	r0, #0
    9830:	bf08      	it	eq
    9832:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
    9834:	4620      	mov	r0, r4
    9836:	b003      	add	sp, #12
    9838:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    983a:	462a      	mov	r2, r5
    983c:	f812 1b01 	ldrb.w	r1, [r2], #1
    9840:	f017 fdcb 	bl	213da <bt_conn_is_peer_addr_le>
	return NULL;
    9844:	2800      	cmp	r0, #0
    9846:	bf14      	ite	ne
    9848:	462c      	movne	r4, r5
    984a:	2400      	moveq	r4, #0
    984c:	e7f2      	b.n	9834 <gatt_sub_find+0x1c>
    984e:	bf00      	nop
    9850:	20004248 	.word	0x20004248

00009854 <sc_indicate_rsp>:
{
    9854:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9856:	4913      	ldr	r1, [pc, #76]	; (98a4 <sc_indicate_rsp+0x50>)
    9858:	f3bf 8f5b 	dmb	ish
    985c:	4604      	mov	r4, r0
    985e:	e851 3f00 	ldrex	r3, [r1]
    9862:	f023 0302 	bic.w	r3, r3, #2
    9866:	e841 3200 	strex	r2, r3, [r1]
    986a:	2a00      	cmp	r2, #0
    986c:	d1f7      	bne.n	985e <sc_indicate_rsp+0xa>
    986e:	f3bf 8f5b 	dmb	ish
    9872:	4608      	mov	r0, r1
    9874:	f018 fcdf 	bl	22236 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9878:	07c2      	lsls	r2, r0, #31
    987a:	d505      	bpl.n	9888 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
    987c:	2200      	movs	r2, #0
    987e:	2300      	movs	r3, #0
    9880:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    9884:	f015 f852 	bl	1e92c <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    9888:	4620      	mov	r0, r4
    988a:	f7ff ff97 	bl	97bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    988e:	b140      	cbz	r0, 98a2 <sc_indicate_rsp+0x4e>
    9890:	7a03      	ldrb	r3, [r0, #8]
    9892:	07db      	lsls	r3, r3, #31
    9894:	d505      	bpl.n	98a2 <sc_indicate_rsp+0x4e>
}
    9896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    989a:	2100      	movs	r1, #0
    989c:	300c      	adds	r0, #12
    989e:	f018 be4c 	b.w	2253a <atomic_set_bit>
}
    98a2:	bd10      	pop	{r4, pc}
    98a4:	200011e0 	.word	0x200011e0

000098a8 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    98a8:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    98aa:	2312      	movs	r3, #18
{
    98ac:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    98ae:	2104      	movs	r1, #4
    98b0:	e9cd 3100 	strd	r3, r1, [sp]
    98b4:	4b03      	ldr	r3, [pc, #12]	; (98c4 <gatt_write_ccc+0x1c>)
    98b6:	4904      	ldr	r1, [pc, #16]	; (98c8 <gatt_write_ccc+0x20>)
    98b8:	f018 ff22 	bl	22700 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
    98bc:	b003      	add	sp, #12
    98be:	f85d fb04 	ldr.w	pc, [sp], #4
    98c2:	bf00      	nop
    98c4:	0002261b 	.word	0x0002261b
    98c8:	00022645 	.word	0x00022645

000098cc <disconnected_cb>:
{
    98cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    98d0:	4b23      	ldr	r3, [pc, #140]	; (9960 <disconnected_cb+0x94>)
{
    98d2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    98d4:	6882      	ldr	r2, [r0, #8]
    98d6:	429a      	cmp	r2, r3
{
    98d8:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    98da:	d102      	bne.n	98e2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    98dc:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    98de:	8963      	ldrh	r3, [r4, #10]
    98e0:	bb03      	cbnz	r3, 9924 <disconnected_cb+0x58>
}
    98e2:	2001      	movs	r0, #1
    98e4:	b002      	add	sp, #8
    98e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    98ea:	f105 0888 	add.w	r8, r5, #136	; 0x88
    98ee:	7a28      	ldrb	r0, [r5, #8]
    98f0:	4641      	mov	r1, r8
    98f2:	f017 faa4 	bl	20e3e <bt_addr_le_is_bonded>
    98f6:	b980      	cbnz	r0, 991a <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    98f8:	4b1a      	ldr	r3, [pc, #104]	; (9964 <disconnected_cb+0x98>)
    98fa:	429c      	cmp	r4, r3
    98fc:	d102      	bne.n	9904 <disconnected_cb+0x38>
					sc_clear(conn);
    98fe:	4628      	mov	r0, r5
    9900:	f018 fedb 	bl	226ba <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9904:	2500      	movs	r5, #0
    9906:	4669      	mov	r1, sp
    9908:	4630      	mov	r0, r6
    990a:	9500      	str	r5, [sp, #0]
    990c:	f8cd 5003 	str.w	r5, [sp, #3]
    9910:	f018 fc41 	bl	22196 <bt_addr_le_copy>
	cfg->id = 0U;
    9914:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    9916:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    9918:	e019      	b.n	994e <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    991a:	4641      	mov	r1, r8
    991c:	4630      	mov	r0, r6
    991e:	f018 fc3a 	bl	22196 <bt_addr_le_copy>
	if (!value_used) {
    9922:	e014      	b.n	994e <disconnected_cb+0x82>
		if (!cfg->value) {
    9924:	8923      	ldrh	r3, [r4, #8]
    9926:	b193      	cbz	r3, 994e <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9928:	4626      	mov	r6, r4
    992a:	4628      	mov	r0, r5
    992c:	f816 1b01 	ldrb.w	r1, [r6], #1
    9930:	4632      	mov	r2, r6
    9932:	f017 fd52 	bl	213da <bt_conn_is_peer_addr_le>
    9936:	2800      	cmp	r0, #0
    9938:	d1d7      	bne.n	98ea <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    993a:	7820      	ldrb	r0, [r4, #0]
    993c:	4631      	mov	r1, r6
    993e:	f7fe fec9 	bl	86d4 <bt_conn_lookup_addr_le>
			if (tmp) {
    9942:	b120      	cbz	r0, 994e <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    9944:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    9946:	f017 fd02 	bl	2134e <bt_conn_unref>
	if (!value_used) {
    994a:	2d07      	cmp	r5, #7
    994c:	d0c9      	beq.n	98e2 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    994e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    9950:	2100      	movs	r1, #0
    9952:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    9954:	2b00      	cmp	r3, #0
    9956:	d0c4      	beq.n	98e2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    9958:	4638      	mov	r0, r7
    995a:	4798      	blx	r3
    995c:	e7c1      	b.n	98e2 <disconnected_cb+0x16>
    995e:	bf00      	nop
    9960:	00022323 	.word	0x00022323
    9964:	20000360 	.word	0x20000360

00009968 <bt_gatt_init>:
{
    9968:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    996a:	4b20      	ldr	r3, [pc, #128]	; (99ec <bt_gatt_init+0x84>)
    996c:	f3bf 8f5b 	dmb	ish
    9970:	2201      	movs	r2, #1
    9972:	e853 1f00 	ldrex	r1, [r3]
    9976:	2900      	cmp	r1, #0
    9978:	d103      	bne.n	9982 <bt_gatt_init+0x1a>
    997a:	e843 2000 	strex	r0, r2, [r3]
    997e:	2800      	cmp	r0, #0
    9980:	d1f7      	bne.n	9972 <bt_gatt_init+0xa>
    9982:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    9986:	d130      	bne.n	99ea <bt_gatt_init+0x82>
    9988:	f3bf 8f5b 	dmb	ish
    998c:	4b18      	ldr	r3, [pc, #96]	; (99f0 <bt_gatt_init+0x88>)
    998e:	e853 1f00 	ldrex	r1, [r3]
    9992:	2900      	cmp	r1, #0
    9994:	d103      	bne.n	999e <bt_gatt_init+0x36>
    9996:	e843 2000 	strex	r0, r2, [r3]
    999a:	2800      	cmp	r0, #0
    999c:	d1f7      	bne.n	998e <bt_gatt_init+0x26>
    999e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    99a2:	d108      	bne.n	99b6 <bt_gatt_init+0x4e>
    99a4:	4913      	ldr	r1, [pc, #76]	; (99f4 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    99a6:	4a14      	ldr	r2, [pc, #80]	; (99f8 <bt_gatt_init+0x90>)
    99a8:	880b      	ldrh	r3, [r1, #0]
    99aa:	4c14      	ldr	r4, [pc, #80]	; (99fc <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    99ac:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    99ae:	42a2      	cmp	r2, r4
    99b0:	d315      	bcc.n	99de <bt_gatt_init+0x76>
    99b2:	b100      	cbz	r0, 99b6 <bt_gatt_init+0x4e>
    99b4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    99b6:	4b12      	ldr	r3, [pc, #72]	; (9a00 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    99b8:	4912      	ldr	r1, [pc, #72]	; (9a04 <bt_gatt_init+0x9c>)
    99ba:	4813      	ldr	r0, [pc, #76]	; (9a08 <bt_gatt_init+0xa0>)
    99bc:	2200      	movs	r2, #0
	list->tail = NULL;
    99be:	e9c3 2200 	strd	r2, r2, [r3]
    99c2:	f01a fc18 	bl	241f6 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    99c6:	4810      	ldr	r0, [pc, #64]	; (9a08 <bt_gatt_init+0xa0>)
    99c8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    99cc:	2300      	movs	r3, #0
    99ce:	f014 ff79 	bl	1e8c4 <k_work_schedule>
}
    99d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    99d6:	490d      	ldr	r1, [pc, #52]	; (9a0c <bt_gatt_init+0xa4>)
    99d8:	480d      	ldr	r0, [pc, #52]	; (9a10 <bt_gatt_init+0xa8>)
    99da:	f01a bc0c 	b.w	241f6 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    99de:	6850      	ldr	r0, [r2, #4]
    99e0:	4403      	add	r3, r0
    99e2:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    99e4:	3208      	adds	r2, #8
    99e6:	2001      	movs	r0, #1
    99e8:	e7e1      	b.n	99ae <bt_gatt_init+0x46>
}
    99ea:	bd10      	pop	{r4, pc}
    99ec:	20004228 	.word	0x20004228
    99f0:	20004244 	.word	0x20004244
    99f4:	200060ae 	.word	0x200060ae
    99f8:	00024b20 	.word	0x00024b20
    99fc:	00024b40 	.word	0x00024b40
    9a00:	20004210 	.word	0x20004210
    9a04:	000229db 	.word	0x000229db
    9a08:	20001138 	.word	0x20001138
    9a0c:	00009d21 	.word	0x00009d21
    9a10:	200011b0 	.word	0x200011b0

00009a14 <bt_gatt_attr_get_handle>:
{
    9a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    9a18:	4603      	mov	r3, r0
    9a1a:	b148      	cbz	r0, 9a30 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    9a1c:	8a00      	ldrh	r0, [r0, #16]
    9a1e:	b938      	cbnz	r0, 9a30 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9a20:	4912      	ldr	r1, [pc, #72]	; (9a6c <bt_gatt_attr_get_handle+0x58>)
    9a22:	f8df e04c 	ldr.w	lr, [pc, #76]	; 9a70 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    9a26:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9a28:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9a2c:	4571      	cmp	r1, lr
    9a2e:	d301      	bcc.n	9a34 <bt_gatt_attr_get_handle+0x20>
}
    9a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9a34:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    9a38:	42bb      	cmp	r3, r7
    9a3a:	d304      	bcc.n	9a46 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9a3c:	fb0c 7206 	mla	r2, ip, r6, r7
    9a40:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9a42:	4293      	cmp	r3, r2
    9a44:	d90e      	bls.n	9a64 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    9a46:	19a2      	adds	r2, r4, r6
    9a48:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9a4a:	3108      	adds	r1, #8
    9a4c:	4614      	mov	r4, r2
    9a4e:	e7ed      	b.n	9a2c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9a50:	fb0c 7805 	mla	r8, ip, r5, r7
    9a54:	4543      	cmp	r3, r8
    9a56:	d007      	beq.n	9a68 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9a58:	3501      	adds	r5, #1
    9a5a:	1962      	adds	r2, r4, r5
    9a5c:	42b5      	cmp	r5, r6
    9a5e:	b292      	uxth	r2, r2
    9a60:	d1f6      	bne.n	9a50 <bt_gatt_attr_get_handle+0x3c>
    9a62:	e7f2      	b.n	9a4a <bt_gatt_attr_get_handle+0x36>
    9a64:	2500      	movs	r5, #0
    9a66:	e7f8      	b.n	9a5a <bt_gatt_attr_get_handle+0x46>
    9a68:	4610      	mov	r0, r2
    9a6a:	e7e1      	b.n	9a30 <bt_gatt_attr_get_handle+0x1c>
    9a6c:	00024b20 	.word	0x00024b20
    9a70:	00024b40 	.word	0x00024b40

00009a74 <bt_gatt_foreach_attr_type>:
{
    9a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a78:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    9a7c:	9100      	str	r1, [sp, #0]
    9a7e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    9a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9a84:	2d00      	cmp	r5, #0
    9a86:	bf08      	it	eq
    9a88:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    9a8a:	4b24      	ldr	r3, [pc, #144]	; (9b1c <bt_gatt_foreach_attr_type+0xa8>)
    9a8c:	881b      	ldrh	r3, [r3, #0]
    9a8e:	4283      	cmp	r3, r0
{
    9a90:	4607      	mov	r7, r0
    9a92:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    9a94:	d23c      	bcs.n	9b10 <bt_gatt_foreach_attr_type+0x9c>
}
    9a96:	b003      	add	sp, #12
    9a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    9a9c:	6873      	ldr	r3, [r6, #4]
    9a9e:	4423      	add	r3, r4
    9aa0:	42bb      	cmp	r3, r7
    9aa2:	d232      	bcs.n	9b0a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    9aa4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9aa6:	3608      	adds	r6, #8
    9aa8:	4b1d      	ldr	r3, [pc, #116]	; (9b20 <bt_gatt_foreach_attr_type+0xac>)
    9aaa:	429e      	cmp	r6, r3
    9aac:	d3f6      	bcc.n	9a9c <bt_gatt_foreach_attr_type+0x28>
    9aae:	e7f2      	b.n	9a96 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9ab0:	5889      	ldr	r1, [r1, r2]
    9ab2:	9301      	str	r3, [sp, #4]
    9ab4:	4640      	mov	r0, r8
    9ab6:	f016 fec8 	bl	2084a <bt_uuid_cmp>
    9aba:	9b01      	ldr	r3, [sp, #4]
    9abc:	b190      	cbz	r0, 9ae4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9abe:	3401      	adds	r4, #1
    9ac0:	f10a 0a01 	add.w	sl, sl, #1
    9ac4:	b2a4      	uxth	r4, r4
    9ac6:	6873      	ldr	r3, [r6, #4]
    9ac8:	4553      	cmp	r3, sl
    9aca:	d9ec      	bls.n	9aa6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    9acc:	9b00      	ldr	r3, [sp, #0]
    9ace:	429c      	cmp	r4, r3
    9ad0:	d8e1      	bhi.n	9a96 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    9ad2:	42bc      	cmp	r4, r7
    9ad4:	d3f3      	bcc.n	9abe <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9ad6:	6831      	ldr	r1, [r6, #0]
    9ad8:	fb0b f20a 	mul.w	r2, fp, sl
    9adc:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9ade:	f1b8 0f00 	cmp.w	r8, #0
    9ae2:	d1e5      	bne.n	9ab0 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    9ae4:	f1b9 0f00 	cmp.w	r9, #0
    9ae8:	d10b      	bne.n	9b02 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    9aea:	3d01      	subs	r5, #1
    9aec:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    9aee:	4618      	mov	r0, r3
    9af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9af4:	4621      	mov	r1, r4
    9af6:	4798      	blx	r3
	if (!*num_matches) {
    9af8:	2d00      	cmp	r5, #0
    9afa:	d0cc      	beq.n	9a96 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9afc:	2800      	cmp	r0, #0
    9afe:	d1de      	bne.n	9abe <bt_gatt_foreach_attr_type+0x4a>
    9b00:	e7c9      	b.n	9a96 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    9b02:	68da      	ldr	r2, [r3, #12]
    9b04:	4591      	cmp	r9, r2
    9b06:	d1da      	bne.n	9abe <bt_gatt_foreach_attr_type+0x4a>
    9b08:	e7ef      	b.n	9aea <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9b0a:	f04f 0a00 	mov.w	sl, #0
    9b0e:	e7da      	b.n	9ac6 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9b10:	4e04      	ldr	r6, [pc, #16]	; (9b24 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    9b12:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9b14:	f04f 0b14 	mov.w	fp, #20
    9b18:	e7c6      	b.n	9aa8 <bt_gatt_foreach_attr_type+0x34>
    9b1a:	bf00      	nop
    9b1c:	200060ae 	.word	0x200060ae
    9b20:	00024b40 	.word	0x00024b40
    9b24:	00024b20 	.word	0x00024b20

00009b28 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    9b28:	b510      	push	{r4, lr}
    9b2a:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    9b2c:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9b2e:	aa1c      	add	r2, sp, #112	; 0x70
    9b30:	4669      	mov	r1, sp
    9b32:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    9b34:	e9cd 3300 	strd	r3, r3, [sp]
    9b38:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9b3c:	f016 fcd9 	bl	204f2 <tc_cmac_setup>
    9b40:	b320      	cbz	r0, 9b8c <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    9b42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b46:	2001      	movs	r0, #1
    9b48:	4a11      	ldr	r2, [pc, #68]	; (9b90 <db_hash_gen.constprop.0+0x68>)
    9b4a:	ab04      	add	r3, sp, #16
    9b4c:	f018 ff3a 	bl	229c4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    9b50:	4810      	ldr	r0, [pc, #64]	; (9b94 <db_hash_gen.constprop.0+0x6c>)
    9b52:	a904      	add	r1, sp, #16
    9b54:	f016 fd63 	bl	2061e <tc_cmac_final>
    9b58:	b1c0      	cbz	r0, 9b8c <db_hash_gen.constprop.0+0x64>
    9b5a:	4b0e      	ldr	r3, [pc, #56]	; (9b94 <db_hash_gen.constprop.0+0x6c>)
    9b5c:	2208      	movs	r2, #8
    9b5e:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    9b62:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    9b64:	780c      	ldrb	r4, [r1, #0]
    9b66:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    9b6a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    9b6c:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    9b70:	d1f7      	bne.n	9b62 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9b72:	f3bf 8f5b 	dmb	ish
    9b76:	4b08      	ldr	r3, [pc, #32]	; (9b98 <db_hash_gen.constprop.0+0x70>)
    9b78:	e853 2f00 	ldrex	r2, [r3]
    9b7c:	f042 0204 	orr.w	r2, r2, #4
    9b80:	e843 2100 	strex	r1, r2, [r3]
    9b84:	2900      	cmp	r1, #0
    9b86:	d1f7      	bne.n	9b78 <db_hash_gen.constprop.0+0x50>
    9b88:	f3bf 8f5b 	dmb	ish
}
    9b8c:	b048      	add	sp, #288	; 0x120
    9b8e:	bd10      	pop	{r4, pc}
    9b90:	00022243 	.word	0x00022243
    9b94:	20001128 	.word	0x20001128
    9b98:	200011e0 	.word	0x200011e0

00009b9c <gatt_indicate>:
{
    9b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ba0:	4615      	mov	r5, r2
    9ba2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9ba4:	2214      	movs	r2, #20
    9ba6:	6869      	ldr	r1, [r5, #4]
{
    9ba8:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    9baa:	f018 ff18 	bl	229de <bt_gatt_check_perm>
    9bae:	2800      	cmp	r0, #0
    9bb0:	d139      	bne.n	9c26 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9bb2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9bb6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    9bb8:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9bba:	f7ff fd01 	bl	95c0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    9bbe:	3602      	adds	r6, #2
	if (!req) {
    9bc0:	4604      	mov	r4, r0
    9bc2:	b920      	cbnz	r0, 9bce <gatt_indicate+0x32>
		return -ENOMEM;
    9bc4:	f06f 050b 	mvn.w	r5, #11
}
    9bc8:	4628      	mov	r0, r5
    9bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    9bce:	4b17      	ldr	r3, [pc, #92]	; (9c2c <gatt_indicate+0x90>)
    9bd0:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    9bd2:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    9bd4:	4632      	mov	r2, r6
    9bd6:	211d      	movs	r1, #29
    9bd8:	4640      	mov	r0, r8
    9bda:	f018 f9d0 	bl	21f7e <bt_att_create_pdu>
	if (!buf) {
    9bde:	4606      	mov	r6, r0
    9be0:	b918      	cbnz	r0, 9bea <gatt_indicate+0x4e>
		bt_att_req_free(req);
    9be2:	4620      	mov	r0, r4
    9be4:	f7ff fd0e 	bl	9604 <bt_att_req_free>
    9be8:	e7ec      	b.n	9bc4 <gatt_indicate+0x28>
    9bea:	f100 0a08 	add.w	sl, r0, #8
    9bee:	2102      	movs	r1, #2
    9bf0:	4650      	mov	r0, sl
    9bf2:	f019 face 	bl	23192 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9bf6:	4607      	mov	r7, r0
    9bf8:	8aa9      	ldrh	r1, [r5, #20]
    9bfa:	f827 9b02 	strh.w	r9, [r7], #2
    9bfe:	4650      	mov	r0, sl
    9c00:	f019 fac7 	bl	23192 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9c04:	8aaa      	ldrh	r2, [r5, #20]
    9c06:	6929      	ldr	r1, [r5, #16]
    9c08:	4638      	mov	r0, r7
    9c0a:	f016 fd8d 	bl	20728 <memcpy>
	req->buf = buf;
    9c0e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    9c10:	4621      	mov	r1, r4
    9c12:	4640      	mov	r0, r8
    9c14:	f018 fa6f 	bl	220f6 <bt_att_req_send>
	if (err) {
    9c18:	4605      	mov	r5, r0
    9c1a:	2800      	cmp	r0, #0
    9c1c:	d0d4      	beq.n	9bc8 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    9c1e:	4620      	mov	r0, r4
    9c20:	f7ff fcf0 	bl	9604 <bt_att_req_free>
    9c24:	e7d0      	b.n	9bc8 <gatt_indicate+0x2c>
		return -EPERM;
    9c26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    9c2a:	e7cd      	b.n	9bc8 <gatt_indicate+0x2c>
    9c2c:	00022169 	.word	0x00022169

00009c30 <bt_gatt_indicate>:
{
    9c30:	b530      	push	{r4, r5, lr}
    9c32:	4604      	mov	r4, r0
    9c34:	b08b      	sub	sp, #44	; 0x2c
    9c36:	4837      	ldr	r0, [pc, #220]	; (9d14 <bt_gatt_indicate+0xe4>)
    9c38:	f018 fafd 	bl	22236 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9c3c:	0782      	lsls	r2, r0, #30
{
    9c3e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9c40:	d561      	bpl.n	9d06 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9c42:	b114      	cbz	r4, 9c4a <bt_gatt_indicate+0x1a>
    9c44:	7aa3      	ldrb	r3, [r4, #10]
    9c46:	2b07      	cmp	r3, #7
    9c48:	d160      	bne.n	9d0c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    9c4a:	6868      	ldr	r0, [r5, #4]
    9c4c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9c4e:	f7ff fee1 	bl	9a14 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9c52:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9c54:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    9c58:	b33a      	cbz	r2, 9caa <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c5a:	a905      	add	r1, sp, #20
    9c5c:	9102      	str	r1, [sp, #8]
    9c5e:	492e      	ldr	r1, [pc, #184]	; (9d18 <bt_gatt_indicate+0xe8>)
    9c60:	9101      	str	r1, [sp, #4]
    9c62:	2101      	movs	r1, #1
	found->attr = NULL;
    9c64:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c66:	9100      	str	r1, [sp, #0]
    9c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9c6c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c6e:	f7ff ff01 	bl	9a74 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    9c72:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9c74:	b91b      	cbnz	r3, 9c7e <bt_gatt_indicate+0x4e>
			return -ENOENT;
    9c76:	f06f 0001 	mvn.w	r0, #1
}
    9c7a:	b00b      	add	sp, #44	; 0x2c
    9c7c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    9c7e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9c80:	9b05      	ldr	r3, [sp, #20]
    9c82:	6818      	ldr	r0, [r3, #0]
    9c84:	2300      	movs	r3, #0
    9c86:	f88d 3010 	strb.w	r3, [sp, #16]
    9c8a:	a904      	add	r1, sp, #16
    9c8c:	f642 0303 	movw	r3, #10243	; 0x2803
    9c90:	f8ad 3012 	strh.w	r3, [sp, #18]
    9c94:	f016 fdd9 	bl	2084a <bt_uuid_cmp>
    9c98:	b970      	cbnz	r0, 9cb8 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9c9a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9c9c:	68c3      	ldr	r3, [r0, #12]
    9c9e:	799b      	ldrb	r3, [r3, #6]
    9ca0:	069b      	lsls	r3, r3, #26
    9ca2:	d405      	bmi.n	9cb0 <bt_gatt_indicate+0x80>
			return -EINVAL;
    9ca4:	f06f 0015 	mvn.w	r0, #21
    9ca8:	e7e7      	b.n	9c7a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    9caa:	2800      	cmp	r0, #0
    9cac:	d1e8      	bne.n	9c80 <bt_gatt_indicate+0x50>
    9cae:	e7e2      	b.n	9c76 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9cb0:	f018 fe3a 	bl	22928 <bt_gatt_attr_value_handle>
    9cb4:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    9cb8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9cbc:	b13c      	cbz	r4, 9cce <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    9cbe:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    9cc0:	4601      	mov	r1, r0
		params->_ref = 1;
    9cc2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    9cc4:	462a      	mov	r2, r5
    9cc6:	4620      	mov	r0, r4
    9cc8:	f7ff ff68 	bl	9b9c <gatt_indicate>
    9ccc:	e7d5      	b.n	9c7a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    9cce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9cd2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9cd4:	2302      	movs	r3, #2
    9cd6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9cda:	f642 1302 	movw	r3, #10498	; 0x2902
    9cde:	f8ad 3012 	strh.w	r3, [sp, #18]
    9ce2:	ab05      	add	r3, sp, #20
    9ce4:	9302      	str	r3, [sp, #8]
    9ce6:	4b0d      	ldr	r3, [pc, #52]	; (9d1c <bt_gatt_indicate+0xec>)
    9ce8:	9301      	str	r3, [sp, #4]
    9cea:	2301      	movs	r3, #1
    9cec:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    9cee:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9cf0:	4623      	mov	r3, r4
    9cf2:	aa04      	add	r2, sp, #16
    9cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    9cf8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9cfa:	f88d 4010 	strb.w	r4, [sp, #16]
    9cfe:	f7ff feb9 	bl	9a74 <bt_gatt_foreach_attr_type>
	return data.err;
    9d02:	9807      	ldr	r0, [sp, #28]
    9d04:	e7b9      	b.n	9c7a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    9d06:	f06f 000a 	mvn.w	r0, #10
    9d0a:	e7b6      	b.n	9c7a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    9d0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9d10:	e7b3      	b.n	9c7a <bt_gatt_indicate+0x4a>
    9d12:	bf00      	nop
    9d14:	200000cc 	.word	0x200000cc
    9d18:	0002218f 	.word	0x0002218f
    9d1c:	00009d91 	.word	0x00009d91

00009d20 <sc_process>:
{
    9d20:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9d22:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    9d26:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9d2a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    9d2e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    9d32:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9d34:	f1a0 0120 	sub.w	r1, r0, #32
    9d38:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9d3c:	f3bf 8f5b 	dmb	ish
    9d40:	e854 2f00 	ldrex	r2, [r4]
    9d44:	f022 0201 	bic.w	r2, r2, #1
    9d48:	e844 2000 	strex	r0, r2, [r4]
    9d4c:	2800      	cmp	r0, #0
    9d4e:	d1f7      	bne.n	9d40 <sc_process+0x20>
    9d50:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9d54:	4a0c      	ldr	r2, [pc, #48]	; (9d88 <sc_process+0x68>)
    9d56:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    9d5a:	4a0c      	ldr	r2, [pc, #48]	; (9d8c <sc_process+0x6c>)
    9d5c:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    9d60:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    9d62:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9d64:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    9d68:	2204      	movs	r2, #4
	sc->start = 0U;
    9d6a:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    9d6e:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    9d72:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9d76:	f7ff ff5b 	bl	9c30 <bt_gatt_indicate>
    9d7a:	b918      	cbnz	r0, 9d84 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    9d7c:	2101      	movs	r1, #1
    9d7e:	4620      	mov	r0, r4
    9d80:	f018 fbdb 	bl	2253a <atomic_set_bit>
}
    9d84:	b002      	add	sp, #8
    9d86:	bd10      	pop	{r4, pc}
    9d88:	00024f88 	.word	0x00024f88
    9d8c:	00009855 	.word	0x00009855

00009d90 <notify_cb>:
{
    9d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d92:	4b32      	ldr	r3, [pc, #200]	; (9e5c <notify_cb+0xcc>)
{
    9d94:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d96:	6882      	ldr	r2, [r0, #8]
    9d98:	429a      	cmp	r2, r3
{
    9d9a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d9c:	d12d      	bne.n	9dfa <notify_cb+0x6a>
	ccc = attr->user_data;
    9d9e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9da0:	4b2f      	ldr	r3, [pc, #188]	; (9e60 <notify_cb+0xd0>)
    9da2:	429f      	cmp	r7, r3
    9da4:	d119      	bne.n	9dda <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9da6:	4d2f      	ldr	r5, [pc, #188]	; (9e64 <notify_cb+0xd4>)
    9da8:	2300      	movs	r3, #0
    9daa:	4669      	mov	r1, sp
    9dac:	1c68      	adds	r0, r5, #1
    9dae:	9300      	str	r3, [sp, #0]
    9db0:	f8cd 3003 	str.w	r3, [sp, #3]
    9db4:	f018 fa9a 	bl	222ec <bt_addr_le_cmp>
    9db8:	b178      	cbz	r0, 9dda <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9dba:	4629      	mov	r1, r5
    9dbc:	2207      	movs	r2, #7
    9dbe:	f811 0b01 	ldrb.w	r0, [r1], #1
    9dc2:	f7fe fca5 	bl	8710 <bt_conn_lookup_state_le>
			if (!conn) {
    9dc6:	b9e0      	cbnz	r0, 9e02 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    9dc8:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    9dca:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    9dcc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9dce:	f811 0b01 	ldrb.w	r0, [r1], #1
    9dd2:	8853      	ldrh	r3, [r2, #2]
    9dd4:	8812      	ldrh	r2, [r2, #0]
    9dd6:	f018 fb89 	bl	224ec <sc_save>
		if (cfg->value != data->type) {
    9dda:	893a      	ldrh	r2, [r7, #8]
    9ddc:	89a3      	ldrh	r3, [r4, #12]
    9dde:	429a      	cmp	r2, r3
    9de0:	d10b      	bne.n	9dfa <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9de2:	4639      	mov	r1, r7
    9de4:	f811 0b01 	ldrb.w	r0, [r1], #1
    9de8:	f7fe fc74 	bl	86d4 <bt_conn_lookup_addr_le>
		if (!conn) {
    9dec:	4605      	mov	r5, r0
    9dee:	b120      	cbz	r0, 9dfa <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    9df0:	7a83      	ldrb	r3, [r0, #10]
    9df2:	2b07      	cmp	r3, #7
    9df4:	d008      	beq.n	9e08 <notify_cb+0x78>
			bt_conn_unref(conn);
    9df6:	f017 faaa 	bl	2134e <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9dfa:	2701      	movs	r7, #1
}
    9dfc:	4638      	mov	r0, r7
    9dfe:	b003      	add	sp, #12
    9e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    9e02:	f017 faa4 	bl	2134e <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9e06:	e7e8      	b.n	9dda <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9e08:	697b      	ldr	r3, [r7, #20]
    9e0a:	b123      	cbz	r3, 9e16 <notify_cb+0x86>
    9e0c:	4631      	mov	r1, r6
    9e0e:	4798      	blx	r3
    9e10:	b908      	cbnz	r0, 9e16 <notify_cb+0x86>
			bt_conn_unref(conn);
    9e12:	4628      	mov	r0, r5
    9e14:	e7ef      	b.n	9df6 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
    9e16:	2214      	movs	r2, #20
    9e18:	4631      	mov	r1, r6
    9e1a:	4628      	mov	r0, r5
    9e1c:	f018 fddf 	bl	229de <bt_gatt_check_perm>
    9e20:	4607      	mov	r7, r0
    9e22:	2800      	cmp	r0, #0
    9e24:	d1e9      	bne.n	9dfa <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e26:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    9e28:	88a1      	ldrh	r1, [r4, #4]
    9e2a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e2c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    9e2e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e30:	d10f      	bne.n	9e52 <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
    9e32:	f7ff feb3 	bl	9b9c <gatt_indicate>
			if (err == 0) {
    9e36:	4606      	mov	r6, r0
    9e38:	b918      	cbnz	r0, 9e42 <notify_cb+0xb2>
				data->ind_params->_ref++;
    9e3a:	6922      	ldr	r2, [r4, #16]
    9e3c:	7d93      	ldrb	r3, [r2, #22]
    9e3e:	3301      	adds	r3, #1
    9e40:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    9e42:	4628      	mov	r0, r5
    9e44:	f017 fa83 	bl	2134e <bt_conn_unref>
		if (err < 0) {
    9e48:	2e00      	cmp	r6, #0
    9e4a:	dbd7      	blt.n	9dfc <notify_cb+0x6c>
		data->err = 0;
    9e4c:	2300      	movs	r3, #0
    9e4e:	60a3      	str	r3, [r4, #8]
    9e50:	e7d3      	b.n	9dfa <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    9e52:	f018 fde7 	bl	22a24 <gatt_notify>
    9e56:	4606      	mov	r6, r0
    9e58:	e7f3      	b.n	9e42 <notify_cb+0xb2>
    9e5a:	bf00      	nop
    9e5c:	00022323 	.word	0x00022323
    9e60:	20000360 	.word	0x20000360
    9e64:	200060b0 	.word	0x200060b0

00009e68 <update_ccc>:
{
    9e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e6a:	4b24      	ldr	r3, [pc, #144]	; (9efc <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
    9e6c:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e6e:	6882      	ldr	r2, [r0, #8]
    9e70:	429a      	cmp	r2, r3
{
    9e72:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e74:	d13f      	bne.n	9ef6 <update_ccc+0x8e>
	ccc = attr->user_data;
    9e76:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    9e78:	8933      	ldrh	r3, [r6, #8]
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d03b      	beq.n	9ef6 <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9e7e:	4632      	mov	r2, r6
    9e80:	4620      	mov	r0, r4
    9e82:	f812 1b01 	ldrb.w	r1, [r2], #1
    9e86:	f017 faa8 	bl	213da <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9e8a:	2800      	cmp	r0, #0
    9e8c:	d033      	beq.n	9ef6 <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    9e8e:	222a      	movs	r2, #42	; 0x2a
    9e90:	4629      	mov	r1, r5
    9e92:	4620      	mov	r0, r4
    9e94:	f018 fda3 	bl	229de <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    9e98:	2803      	cmp	r0, #3
    9e9a:	d02c      	beq.n	9ef6 <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    9e9c:	4631      	mov	r1, r6
    9e9e:	4628      	mov	r0, r5
    9ea0:	f018 f958 	bl	22154 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    9ea4:	4b16      	ldr	r3, [pc, #88]	; (9f00 <update_ccc+0x98>)
    9ea6:	429e      	cmp	r6, r3
    9ea8:	d125      	bne.n	9ef6 <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9eaa:	7a20      	ldrb	r0, [r4, #8]
    9eac:	f104 0188 	add.w	r1, r4, #136	; 0x88
    9eb0:	f7ff fca2 	bl	97f8 <find_sc_cfg>
	if (!cfg) {
    9eb4:	b1f8      	cbz	r0, 9ef6 <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
    9eb6:	8902      	ldrh	r2, [r0, #8]
    9eb8:	8943      	ldrh	r3, [r0, #10]
    9eba:	ea53 0102 	orrs.w	r1, r3, r2
    9ebe:	d01a      	beq.n	9ef6 <update_ccc+0x8e>
	index = bt_conn_index(conn);
    9ec0:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    9ec2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    9ec6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9eca:	f7fe fb41 	bl	8550 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9ece:	490d      	ldr	r1, [pc, #52]	; (9f04 <update_ccc+0x9c>)
    9ed0:	4a0d      	ldr	r2, [pc, #52]	; (9f08 <update_ccc+0xa0>)
    9ed2:	2318      	movs	r3, #24
    9ed4:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9ed8:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9eda:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9edc:	4a0b      	ldr	r2, [pc, #44]	; (9f0c <update_ccc+0xa4>)
    9ede:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9ee0:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9ee2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    9ee6:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    9ee8:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9eea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    9eee:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9ef0:	4620      	mov	r0, r4
    9ef2:	f7ff fe9d 	bl	9c30 <bt_gatt_indicate>
}
    9ef6:	2001      	movs	r0, #1
    9ef8:	b002      	add	sp, #8
    9efa:	bd70      	pop	{r4, r5, r6, pc}
    9efc:	00022323 	.word	0x00022323
    9f00:	20000360 	.word	0x20000360
    9f04:	2000422c 	.word	0x2000422c
    9f08:	00024f88 	.word	0x00024f88
    9f0c:	000225e3 	.word	0x000225e3

00009f10 <bt_gatt_discover>:
{
    9f10:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9f12:	7a83      	ldrb	r3, [r0, #10]
    9f14:	2b07      	cmp	r3, #7
{
    9f16:	b086      	sub	sp, #24
    9f18:	4605      	mov	r5, r0
    9f1a:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    9f1c:	f040 809a 	bne.w	a054 <bt_gatt_discover+0x144>
	switch (params->type) {
    9f20:	7c0b      	ldrb	r3, [r1, #16]
    9f22:	2b06      	cmp	r3, #6
    9f24:	d823      	bhi.n	9f6e <bt_gatt_discover+0x5e>
    9f26:	e8df f003 	tbb	[pc, r3]
    9f2a:	0404      	.short	0x0404
    9f2c:	8e5c5454 	.word	0x8e5c5454
    9f30:	20          	.byte	0x20
    9f31:	00          	.byte	0x00
		if (params->uuid) {
    9f32:	680b      	ldr	r3, [r1, #0]
    9f34:	b18b      	cbz	r3, 9f5a <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
    9f36:	781b      	ldrb	r3, [r3, #0]
    9f38:	b16b      	cbz	r3, 9f56 <bt_gatt_discover+0x46>
    9f3a:	2b02      	cmp	r3, #2
    9f3c:	d117      	bne.n	9f6e <bt_gatt_discover+0x5e>
    9f3e:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
    9f40:	9301      	str	r3, [sp, #4]
    9f42:	2306      	movs	r3, #6
    9f44:	9300      	str	r3, [sp, #0]
    9f46:	4945      	ldr	r1, [pc, #276]	; (a05c <bt_gatt_discover+0x14c>)
    9f48:	4b45      	ldr	r3, [pc, #276]	; (a060 <bt_gatt_discover+0x150>)
    9f4a:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
    9f4c:	4628      	mov	r0, r5
    9f4e:	f018 fbd7 	bl	22700 <gatt_req_send>
}
    9f52:	b006      	add	sp, #24
    9f54:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
    9f56:	2308      	movs	r3, #8
    9f58:	e7f2      	b.n	9f40 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
    9f5a:	2310      	movs	r3, #16
    9f5c:	2104      	movs	r1, #4
    9f5e:	e9cd 3100 	strd	r3, r1, [sp]
    9f62:	4622      	mov	r2, r4
    9f64:	4b3f      	ldr	r3, [pc, #252]	; (a064 <bt_gatt_discover+0x154>)
    9f66:	4940      	ldr	r1, [pc, #256]	; (a068 <bt_gatt_discover+0x158>)
    9f68:	e7f0      	b.n	9f4c <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    9f6a:	6808      	ldr	r0, [r1, #0]
    9f6c:	b910      	cbnz	r0, 9f74 <bt_gatt_discover+0x64>
	switch (params->uuid->type) {
    9f6e:	f06f 0015 	mvn.w	r0, #21
    9f72:	e7ee      	b.n	9f52 <bt_gatt_discover+0x42>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    9f74:	7806      	ldrb	r6, [r0, #0]
    9f76:	2e00      	cmp	r6, #0
    9f78:	d1f9      	bne.n	9f6e <bt_gatt_discover+0x5e>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    9f7a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
    9f7e:	a902      	add	r1, sp, #8
    9f80:	f88d 6008 	strb.w	r6, [sp, #8]
    9f84:	f8ad 300a 	strh.w	r3, [sp, #10]
    9f88:	f016 fc5f 	bl	2084a <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    9f8c:	b308      	cbz	r0, 9fd2 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    9f8e:	f642 1302 	movw	r3, #10498	; 0x2902
    9f92:	6820      	ldr	r0, [r4, #0]
    9f94:	f88d 600c 	strb.w	r6, [sp, #12]
    9f98:	a903      	add	r1, sp, #12
    9f9a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9f9e:	f016 fc54 	bl	2084a <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    9fa2:	b1b0      	cbz	r0, 9fd2 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    9fa4:	f642 1303 	movw	r3, #10499	; 0x2903
    9fa8:	6820      	ldr	r0, [r4, #0]
    9faa:	f88d 6010 	strb.w	r6, [sp, #16]
    9fae:	a904      	add	r1, sp, #16
    9fb0:	f8ad 3012 	strh.w	r3, [sp, #18]
    9fb4:	f016 fc49 	bl	2084a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    9fb8:	b158      	cbz	r0, 9fd2 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
    9fba:	f642 1304 	movw	r3, #10500	; 0x2904
    9fbe:	6820      	ldr	r0, [r4, #0]
    9fc0:	f88d 6014 	strb.w	r6, [sp, #20]
    9fc4:	a905      	add	r1, sp, #20
    9fc6:	f8ad 3016 	strh.w	r3, [sp, #22]
    9fca:	f016 fc3e 	bl	2084a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    9fce:	2800      	cmp	r0, #0
    9fd0:	d1cd      	bne.n	9f6e <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
    9fd2:	2308      	movs	r3, #8
    9fd4:	2204      	movs	r2, #4
    9fd6:	e9cd 3200 	strd	r3, r2, [sp]
    9fda:	4924      	ldr	r1, [pc, #144]	; (a06c <bt_gatt_discover+0x15c>)
    9fdc:	4b24      	ldr	r3, [pc, #144]	; (a070 <bt_gatt_discover+0x160>)
    9fde:	4622      	mov	r2, r4
    9fe0:	e7b4      	b.n	9f4c <bt_gatt_discover+0x3c>
		if (params->uuid &&
    9fe2:	6808      	ldr	r0, [r1, #0]
    9fe4:	b378      	cbz	r0, a046 <bt_gatt_discover+0x136>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    9fe6:	2600      	movs	r6, #0
    9fe8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9fec:	a902      	add	r1, sp, #8
    9fee:	f88d 6008 	strb.w	r6, [sp, #8]
    9ff2:	f8ad 300a 	strh.w	r3, [sp, #10]
    9ff6:	f016 fc28 	bl	2084a <bt_uuid_cmp>
		if (params->uuid &&
    9ffa:	2800      	cmp	r0, #0
    9ffc:	d0b7      	beq.n	9f6e <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    9ffe:	f642 0301 	movw	r3, #10241	; 0x2801
    a002:	6820      	ldr	r0, [r4, #0]
    a004:	f88d 600c 	strb.w	r6, [sp, #12]
    a008:	a903      	add	r1, sp, #12
    a00a:	f8ad 300e 	strh.w	r3, [sp, #14]
    a00e:	f016 fc1c 	bl	2084a <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a012:	2800      	cmp	r0, #0
    a014:	d0ab      	beq.n	9f6e <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a016:	f642 0302 	movw	r3, #10242	; 0x2802
    a01a:	6820      	ldr	r0, [r4, #0]
    a01c:	f88d 6010 	strb.w	r6, [sp, #16]
    a020:	a904      	add	r1, sp, #16
    a022:	f8ad 3012 	strh.w	r3, [sp, #18]
    a026:	f016 fc10 	bl	2084a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a02a:	2800      	cmp	r0, #0
    a02c:	d09f      	beq.n	9f6e <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    a02e:	f642 0303 	movw	r3, #10243	; 0x2803
    a032:	6820      	ldr	r0, [r4, #0]
    a034:	f88d 6014 	strb.w	r6, [sp, #20]
    a038:	a905      	add	r1, sp, #20
    a03a:	f8ad 3016 	strh.w	r3, [sp, #22]
    a03e:	f016 fc04 	bl	2084a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a042:	2800      	cmp	r0, #0
    a044:	d093      	beq.n	9f6e <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    a046:	2304      	movs	r3, #4
    a048:	e9cd 3300 	strd	r3, r3, [sp]
    a04c:	4909      	ldr	r1, [pc, #36]	; (a074 <bt_gatt_discover+0x164>)
    a04e:	4b0a      	ldr	r3, [pc, #40]	; (a078 <bt_gatt_discover+0x168>)
    a050:	4622      	mov	r2, r4
    a052:	e77b      	b.n	9f4c <bt_gatt_discover+0x3c>
		return -ENOTCONN;
    a054:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a058:	e77b      	b.n	9f52 <bt_gatt_discover+0x42>
    a05a:	bf00      	nop
    a05c:	00022ac5 	.word	0x00022ac5
    a060:	000224a1 	.word	0x000224a1
    a064:	000223fb 	.word	0x000223fb
    a068:	00022b63 	.word	0x00022b63
    a06c:	0000a07d 	.word	0x0000a07d
    a070:	0002242b 	.word	0x0002242b
    a074:	00022ce9 	.word	0x00022ce9
    a078:	000223e3 	.word	0x000223e3

0000a07c <gatt_read_type_rsp>:
{
    a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a080:	b093      	sub	sp, #76	; 0x4c
    a082:	4680      	mov	r8, r0
    a084:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    a086:	4617      	mov	r7, r2
	if (err) {
    a088:	b131      	cbz	r1, a098 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
    a08a:	686b      	ldr	r3, [r5, #4]
    a08c:	462a      	mov	r2, r5
    a08e:	2100      	movs	r1, #0
}
    a090:	b013      	add	sp, #76	; 0x4c
    a092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
    a096:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    a098:	7c2a      	ldrb	r2, [r5, #16]
    a09a:	2a02      	cmp	r2, #2
    a09c:	d177      	bne.n	a18e <gatt_read_type_rsp+0x112>
	switch (rsp->len) {
    a09e:	7838      	ldrb	r0, [r7, #0]
    a0a0:	2806      	cmp	r0, #6
    a0a2:	d01a      	beq.n	a0da <gatt_read_type_rsp+0x5e>
    a0a4:	2808      	cmp	r0, #8
    a0a6:	d179      	bne.n	a19c <gatt_read_type_rsp+0x120>
		u.uuid.type = BT_UUID_TYPE_16;
    a0a8:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a0ac:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    a0ae:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    a0b0:	b2a4      	uxth	r4, r4
    a0b2:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
    a0b6:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a0ba:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    a0bc:	783b      	ldrb	r3, [r7, #0]
    a0be:	42a3      	cmp	r3, r4
    a0c0:	d90e      	bls.n	a0e0 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    a0c2:	2c00      	cmp	r4, #0
    a0c4:	d16a      	bne.n	a19c <gatt_read_type_rsp+0x120>
    a0c6:	2e00      	cmp	r6, #0
    a0c8:	d068      	beq.n	a19c <gatt_read_type_rsp+0x120>
	gatt_discover_next(conn, handle, params);
    a0ca:	462a      	mov	r2, r5
    a0cc:	4631      	mov	r1, r6
    a0ce:	4640      	mov	r0, r8
}
    a0d0:	b013      	add	sp, #76	; 0x4c
    a0d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    a0d6:	f018 bcd8 	b.w	22a8a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    a0da:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
    a0de:	e7e5      	b.n	a0ac <gatt_read_type_rsp+0x30>
		handle = sys_le16_to_cpu(data->handle);
    a0e0:	f8b9 3000 	ldrh.w	r3, [r9]
    a0e4:	b29e      	uxth	r6, r3
		if (!handle) {
    a0e6:	2e00      	cmp	r6, #0
    a0e8:	d058      	beq.n	a19c <gatt_read_type_rsp+0x120>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    a0ea:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    a0ee:	f8ad 201c 	strh.w	r2, [sp, #28]
    a0f2:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    a0f4:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    a0f8:	f8ad 201e 	strh.w	r2, [sp, #30]
    a0fc:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
    a0fe:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a102:	b172      	cbz	r2, a122 <gatt_read_type_rsp+0xa6>
    a104:	2a02      	cmp	r2, #2
    a106:	d017      	beq.n	a138 <gatt_read_type_rsp+0xbc>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a108:	6829      	ldr	r1, [r5, #0]
    a10a:	b339      	cbz	r1, a15c <gatt_read_type_rsp+0xe0>
    a10c:	4650      	mov	r0, sl
    a10e:	9303      	str	r3, [sp, #12]
    a110:	f016 fb9b 	bl	2084a <bt_uuid_cmp>
    a114:	9b03      	ldr	r3, [sp, #12]
    a116:	b308      	cbz	r0, a15c <gatt_read_type_rsp+0xe0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a118:	783a      	ldrb	r2, [r7, #0]
    a11a:	1aa4      	subs	r4, r4, r2
    a11c:	b2a4      	uxth	r4, r4
    a11e:	4491      	add	r9, r2
    a120:	e7cc      	b.n	a0bc <gatt_read_type_rsp+0x40>
			value.uuid = &u.uuid;
    a122:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    a126:	f899 2006 	ldrb.w	r2, [r9, #6]
    a12a:	f899 1007 	ldrb.w	r1, [r9, #7]
    a12e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a132:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
    a136:	e7e7      	b.n	a108 <gatt_read_type_rsp+0x8c>
	return gatt_req_send(conn, read_included_uuid_cb, params,
    a138:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
    a13a:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
    a13c:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
    a13e:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
    a140:	4979      	ldr	r1, [pc, #484]	; (a328 <gatt_read_type_rsp+0x2ac>)
    a142:	9201      	str	r2, [sp, #4]
    a144:	9300      	str	r3, [sp, #0]
    a146:	462a      	mov	r2, r5
    a148:	4b78      	ldr	r3, [pc, #480]	; (a32c <gatt_read_type_rsp+0x2b0>)
    a14a:	4640      	mov	r0, r8
    a14c:	f018 fad8 	bl	22700 <gatt_req_send>
			return read_included_uuid(conn, params);
    a150:	b286      	uxth	r6, r0
	if (!handle) {
    a152:	2e00      	cmp	r6, #0
    a154:	d1b9      	bne.n	a0ca <gatt_read_type_rsp+0x4e>
}
    a156:	b013      	add	sp, #76	; 0x4c
    a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a15c:	f642 0202 	movw	r2, #10242	; 0x2802
    a160:	f8ad 2016 	strh.w	r2, [sp, #22]
    a164:	aa05      	add	r2, sp, #20
    a166:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
    a16a:	aa06      	add	r2, sp, #24
    a16c:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
    a16e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a172:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a176:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a178:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    a17c:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a180:	462a      	mov	r2, r5
    a182:	a90d      	add	r1, sp, #52	; 0x34
    a184:	4640      	mov	r0, r8
    a186:	4798      	blx	r3
    a188:	2800      	cmp	r0, #0
    a18a:	d1c5      	bne.n	a118 <gatt_read_type_rsp+0x9c>
    a18c:	e7e3      	b.n	a156 <gatt_read_type_rsp+0xda>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
    a18e:	2a03      	cmp	r2, #3
    a190:	d164      	bne.n	a25c <gatt_read_type_rsp+0x1e0>
	switch (rsp->len) {
    a192:	783a      	ldrb	r2, [r7, #0]
    a194:	2a07      	cmp	r2, #7
    a196:	d007      	beq.n	a1a8 <gatt_read_type_rsp+0x12c>
    a198:	2a15      	cmp	r2, #21
    a19a:	d027      	beq.n	a1ec <gatt_read_type_rsp+0x170>
	params->func(conn, NULL, params);
    a19c:	686b      	ldr	r3, [r5, #4]
    a19e:	462a      	mov	r2, r5
    a1a0:	2100      	movs	r1, #0
    a1a2:	4640      	mov	r0, r8
    a1a4:	4798      	blx	r3
	if (!handle) {
    a1a6:	e7d6      	b.n	a156 <gatt_read_type_rsp+0xda>
		u.uuid.type = BT_UUID_TYPE_16;
    a1a8:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a1ac:	1e5c      	subs	r4, r3, #1
    a1ae:	b2a4      	uxth	r4, r4
    a1b0:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
    a1b4:	2600      	movs	r6, #0
    a1b6:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
    a1ba:	783b      	ldrb	r3, [r7, #0]
    a1bc:	42a3      	cmp	r3, r4
    a1be:	d880      	bhi.n	a0c2 <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
    a1c0:	f8b9 b000 	ldrh.w	fp, [r9]
    a1c4:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    a1c8:	2e00      	cmp	r6, #0
    a1ca:	d0e7      	beq.n	a19c <gatt_read_type_rsp+0x120>
		switch (u.uuid.type) {
    a1cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a1d0:	b183      	cbz	r3, a1f4 <gatt_read_type_rsp+0x178>
    a1d2:	2b02      	cmp	r3, #2
    a1d4:	d017      	beq.n	a206 <gatt_read_type_rsp+0x18a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    a1d6:	6829      	ldr	r1, [r5, #0]
    a1d8:	b1e9      	cbz	r1, a216 <gatt_read_type_rsp+0x19a>
    a1da:	4650      	mov	r0, sl
    a1dc:	f016 fb35 	bl	2084a <bt_uuid_cmp>
    a1e0:	b1c8      	cbz	r0, a216 <gatt_read_type_rsp+0x19a>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a1e2:	783a      	ldrb	r2, [r7, #0]
    a1e4:	1aa4      	subs	r4, r4, r2
    a1e6:	b2a4      	uxth	r4, r4
    a1e8:	4491      	add	r9, r2
    a1ea:	e7e6      	b.n	a1ba <gatt_read_type_rsp+0x13e>
		u.uuid.type = BT_UUID_TYPE_128;
    a1ec:	2202      	movs	r2, #2
    a1ee:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
    a1f2:	e7db      	b.n	a1ac <gatt_read_type_rsp+0x130>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    a1f4:	f899 3005 	ldrb.w	r3, [r9, #5]
    a1f8:	f899 2006 	ldrb.w	r2, [r9, #6]
    a1fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a200:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
    a204:	e7e7      	b.n	a1d6 <gatt_read_type_rsp+0x15a>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    a206:	2210      	movs	r2, #16
    a208:	f109 0105 	add.w	r1, r9, #5
    a20c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    a210:	f016 fa8a 	bl	20728 <memcpy>
			break;
    a214:	e7df      	b.n	a1d6 <gatt_read_type_rsp+0x15a>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a216:	f8b9 2003 	ldrh.w	r2, [r9, #3]
    a21a:	f899 3002 	ldrb.w	r3, [r9, #2]
    a21e:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a222:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a226:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a22a:	f8ad 2016 	strh.w	r2, [sp, #22]
    a22e:	2300      	movs	r3, #0
    a230:	aa05      	add	r2, sp, #20
    a232:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    a236:	aa06      	add	r2, sp, #24
    a238:	f88d 3014 	strb.w	r3, [sp, #20]
    a23c:	930f      	str	r3, [sp, #60]	; 0x3c
    a23e:	9210      	str	r2, [sp, #64]	; 0x40
    a240:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    a244:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a248:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
    a24a:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a24e:	462a      	mov	r2, r5
    a250:	a90d      	add	r1, sp, #52	; 0x34
    a252:	4640      	mov	r0, r8
    a254:	4798      	blx	r3
    a256:	2800      	cmp	r0, #0
    a258:	d1c3      	bne.n	a1e2 <gatt_read_type_rsp+0x166>
    a25a:	e77c      	b.n	a156 <gatt_read_type_rsp+0xda>
	if (params->uuid->type != BT_UUID_TYPE_16) {
    a25c:	682a      	ldr	r2, [r5, #0]
    a25e:	7816      	ldrb	r6, [r2, #0]
    a260:	b976      	cbnz	r6, a280 <gatt_read_type_rsp+0x204>
	uuid_val = BT_UUID_16(params->uuid)->val;
    a262:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a264:	1e5c      	subs	r4, r3, #1
    a266:	b2a4      	uxth	r4, r4
    a268:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
    a26c:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a270:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    a272:	783b      	ldrb	r3, [r7, #0]
    a274:	42a3      	cmp	r3, r4
    a276:	d908      	bls.n	a28a <gatt_read_type_rsp+0x20e>
	if (length == 0U && handle) {
    a278:	b914      	cbnz	r4, a280 <gatt_read_type_rsp+0x204>
    a27a:	2e00      	cmp	r6, #0
    a27c:	f47f af25 	bne.w	a0ca <gatt_read_type_rsp+0x4e>
	params->func(conn, NULL, params);
    a280:	686b      	ldr	r3, [r5, #4]
    a282:	462a      	mov	r2, r5
    a284:	2100      	movs	r1, #0
    a286:	4640      	mov	r0, r8
    a288:	e702      	b.n	a090 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
    a28a:	f8b9 2000 	ldrh.w	r2, [r9]
    a28e:	b296      	uxth	r6, r2
		if (!handle) {
    a290:	2e00      	cmp	r6, #0
    a292:	d0f5      	beq.n	a280 <gatt_read_type_rsp+0x204>
		switch (uuid_val) {
    a294:	f1bb 0f04 	cmp.w	fp, #4
    a298:	d8f2      	bhi.n	a280 <gatt_read_type_rsp+0x204>
    a29a:	a301      	add	r3, pc, #4	; (adr r3, a2a0 <gatt_read_type_rsp+0x224>)
    a29c:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
    a2a0:	0000a2b5 	.word	0x0000a2b5
    a2a4:	0000a281 	.word	0x0000a281
    a2a8:	0000a2b5 	.word	0x0000a2b5
    a2ac:	0000a2b5 	.word	0x0000a2b5
    a2b0:	0000a2ed 	.word	0x0000a2ed
			value.scc.flags = sys_get_le16(data->value);
    a2b4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    a2b8:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a2bc:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
    a2be:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a2c2:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
    a2c6:	ab08      	add	r3, sp, #32
    a2c8:	9310      	str	r3, [sp, #64]	; 0x40
    a2ca:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a2ce:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    a2d0:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a2d4:	462a      	mov	r2, r5
    a2d6:	a90d      	add	r1, sp, #52	; 0x34
    a2d8:	4640      	mov	r0, r8
    a2da:	4798      	blx	r3
    a2dc:	2800      	cmp	r0, #0
    a2de:	f43f af3a 	beq.w	a156 <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a2e2:	783a      	ldrb	r2, [r7, #0]
    a2e4:	1aa4      	subs	r4, r4, r2
    a2e6:	b2a4      	uxth	r4, r4
    a2e8:	4491      	add	r9, r2
    a2ea:	e7c2      	b.n	a272 <gatt_read_type_rsp+0x1f6>
			value.cpf.format = cpf->format;
    a2ec:	f899 3002 	ldrb.w	r3, [r9, #2]
    a2f0:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
    a2f4:	f899 3003 	ldrb.w	r3, [r9, #3]
    a2f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
    a2fc:	f899 1005 	ldrb.w	r1, [r9, #5]
    a300:	f899 3004 	ldrb.w	r3, [r9, #4]
    a304:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a308:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
    a30c:	f899 3006 	ldrb.w	r3, [r9, #6]
    a310:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
    a314:	f899 3007 	ldrb.w	r3, [r9, #7]
    a318:	f899 1008 	ldrb.w	r1, [r9, #8]
    a31c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a320:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
    a324:	e7ca      	b.n	a2bc <gatt_read_type_rsp+0x240>
    a326:	bf00      	nop
    a328:	00022c5f 	.word	0x00022c5f
    a32c:	000223cf 	.word	0x000223cf

0000a330 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    a330:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a332:	4a14      	ldr	r2, [pc, #80]	; (a384 <bt_gatt_connected+0x54>)
	data.conn = conn;
    a334:	9000      	str	r0, [sp, #0]
{
    a336:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a338:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    a33a:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a33c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    a340:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    a344:	f018 fb3e 	bl	229c4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    a348:	4628      	mov	r0, r5
    a34a:	f7ff fa65 	bl	9818 <gatt_sub_find>
	if (!sub) {
    a34e:	b1b8      	cbz	r0, a380 <bt_gatt_connected+0x50>
	return list->head;
    a350:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    a352:	b1ac      	cbz	r4, a380 <bt_gatt_connected+0x50>
    a354:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    a356:	f105 0688 	add.w	r6, r5, #136	; 0x88
    a35a:	7a28      	ldrb	r0, [r5, #8]
    a35c:	4631      	mov	r1, r6
    a35e:	f016 fd6e 	bl	20e3e <bt_addr_le_is_bonded>
    a362:	b148      	cbz	r0, a378 <bt_gatt_connected+0x48>
    a364:	f104 0010 	add.w	r0, r4, #16
    a368:	f017 ff65 	bl	22236 <atomic_get>
    a36c:	0783      	lsls	r3, r0, #30
    a36e:	d403      	bmi.n	a378 <bt_gatt_connected+0x48>
			gatt_write_ccc(conn, params);
    a370:	4621      	mov	r1, r4
    a372:	4628      	mov	r0, r5
    a374:	f7ff fa98 	bl	98a8 <gatt_write_ccc>
	return node->next;
    a378:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    a37a:	b10c      	cbz	r4, a380 <bt_gatt_connected+0x50>
    a37c:	3c14      	subs	r4, #20
    a37e:	e7ec      	b.n	a35a <bt_gatt_connected+0x2a>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    a380:	b002      	add	sp, #8
    a382:	bd70      	pop	{r4, r5, r6, pc}
    a384:	00009e69 	.word	0x00009e69

0000a388 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    a38a:	4b08      	ldr	r3, [pc, #32]	; (a3ac <bt_gatt_att_max_mtu_changed+0x24>)
    a38c:	681c      	ldr	r4, [r3, #0]
    a38e:	4605      	mov	r5, r0
    a390:	460e      	mov	r6, r1
    a392:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    a394:	b14c      	cbz	r4, a3aa <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    a396:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    a39a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    a39c:	b11b      	cbz	r3, a3a6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    a39e:	463a      	mov	r2, r7
    a3a0:	4631      	mov	r1, r6
    a3a2:	4628      	mov	r0, r5
    a3a4:	4798      	blx	r3
	return node->next;
    a3a6:	6864      	ldr	r4, [r4, #4]
    a3a8:	e7f4      	b.n	a394 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3ac:	20004210 	.word	0x20004210

0000a3b0 <db_hash_read>:
{
    a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a3b2:	4913      	ldr	r1, [pc, #76]	; (a400 <db_hash_read+0x50>)
{
    a3b4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    a3b8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a3ba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    a3be:	461f      	mov	r7, r3
    a3c0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    a3c2:	f019 ff38 	bl	24236 <k_work_cancel_delayable_sync>
    a3c6:	480f      	ldr	r0, [pc, #60]	; (a404 <db_hash_read+0x54>)
    a3c8:	f017 ff35 	bl	22236 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    a3cc:	0743      	lsls	r3, r0, #29
    a3ce:	d401      	bmi.n	a3d4 <db_hash_read+0x24>
		db_hash_gen(true);
    a3d0:	f7ff fbaa 	bl	9b28 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    a3d4:	2101      	movs	r1, #1
    a3d6:	4620      	mov	r0, r4
    a3d8:	f018 fe19 	bl	2300e <bt_gatt_change_aware>
	if (offset > value_len) {
    a3dc:	2e10      	cmp	r6, #16
    a3de:	d80c      	bhi.n	a3fa <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
    a3e0:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    a3e4:	4908      	ldr	r1, [pc, #32]	; (a408 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
    a3e6:	42bc      	cmp	r4, r7
    a3e8:	bfa8      	it	ge
    a3ea:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    a3ec:	4622      	mov	r2, r4
    a3ee:	4431      	add	r1, r6
    a3f0:	4628      	mov	r0, r5
    a3f2:	f016 f999 	bl	20728 <memcpy>
}
    a3f6:	4620      	mov	r0, r4
    a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a3fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    a3fe:	e7fa      	b.n	a3f6 <db_hash_read+0x46>
    a400:	20001168 	.word	0x20001168
    a404:	200011e0 	.word	0x200011e0
    a408:	20001128 	.word	0x20001128

0000a40c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a40c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a410:	4a30      	ldr	r2, [pc, #192]	; (a4d4 <bt_gatt_disconnected+0xc8>)
    a412:	4603      	mov	r3, r0
{
    a414:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a41a:	2001      	movs	r0, #1
    a41c:	f018 fad2 	bl	229c4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    a420:	4620      	mov	r0, r4
    a422:	f7ff f9f9 	bl	9818 <gatt_sub_find>
	if (!sub) {
    a426:	4607      	mov	r7, r0
    a428:	b378      	cbz	r0, a48a <bt_gatt_disconnected+0x7e>
	return list->head;
    a42a:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    a42c:	b36d      	cbz	r5, a48a <bt_gatt_disconnected+0x7e>
	return node->next;
    a42e:	f855 6914 	ldr.w	r6, [r5], #-20
    a432:	b106      	cbz	r6, a436 <bt_gatt_disconnected+0x2a>
    a434:	3e14      	subs	r6, #20
{
    a436:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    a43a:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    a43e:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
    a442:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    a444:	7a20      	ldrb	r0, [r4, #8]
    a446:	4649      	mov	r1, r9
    a448:	f016 fcf9 	bl	20e3e <bt_addr_le_is_bonded>
    a44c:	b970      	cbnz	r0, a46c <bt_gatt_disconnected+0x60>
			params->value = 0U;
    a44e:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
    a452:	462b      	mov	r3, r5
    a454:	4642      	mov	r2, r8
    a456:	4639      	mov	r1, r7
    a458:	4620      	mov	r0, r4
    a45a:	f017 feab 	bl	221b4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    a45e:	b1a6      	cbz	r6, a48a <bt_gatt_disconnected+0x7e>
    a460:	6973      	ldr	r3, [r6, #20]
    a462:	b103      	cbz	r3, a466 <bt_gatt_disconnected+0x5a>
    a464:	3b14      	subs	r3, #20
{
    a466:	4635      	mov	r5, r6
    a468:	461e      	mov	r6, r3
    a46a:	e7eb      	b.n	a444 <bt_gatt_disconnected+0x38>
    a46c:	f105 0010 	add.w	r0, r5, #16
    a470:	f017 fee1 	bl	22236 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    a474:	07c3      	lsls	r3, r0, #31
    a476:	d4ea      	bmi.n	a44e <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    a478:	787b      	ldrb	r3, [r7, #1]
    a47a:	b11b      	cbz	r3, a484 <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    a47c:	4649      	mov	r1, r9
    a47e:	4650      	mov	r0, sl
    a480:	f017 fe89 	bl	22196 <bt_addr_le_copy>
			prev = &params->node;
    a484:	f105 0814 	add.w	r8, r5, #20
    a488:	e7e9      	b.n	a45e <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
    a48a:	4620      	mov	r0, r4
    a48c:	f7ff f996 	bl	97bc <find_cf_cfg>
	if (!cfg) {
    a490:	4605      	mov	r5, r0
    a492:	b1e0      	cbz	r0, a4ce <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a494:	f104 0688 	add.w	r6, r4, #136	; 0x88
    a498:	7a20      	ldrb	r0, [r4, #8]
    a49a:	4631      	mov	r1, r6
    a49c:	f016 fccf 	bl	20e3e <bt_addr_le_is_bonded>
    a4a0:	b920      	cbnz	r0, a4ac <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
    a4a2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    a4a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    a4a8:	f017 bfdd 	b.w	22466 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a4ac:	1c68      	adds	r0, r5, #1
    a4ae:	4631      	mov	r1, r6
    a4b0:	350c      	adds	r5, #12
    a4b2:	f017 fe70 	bl	22196 <bt_addr_le_copy>
    a4b6:	f3bf 8f5b 	dmb	ish
    a4ba:	e855 3f00 	ldrex	r3, [r5]
    a4be:	f023 0302 	bic.w	r3, r3, #2
    a4c2:	e845 3200 	strex	r2, r3, [r5]
    a4c6:	2a00      	cmp	r2, #0
    a4c8:	d1f7      	bne.n	a4ba <bt_gatt_disconnected+0xae>
    a4ca:	f3bf 8f5b 	dmb	ish
}
    a4ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4d2:	bf00      	nop
    a4d4:	000098cd 	.word	0x000098cd

0000a4d8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    a4d8:	4b04      	ldr	r3, [pc, #16]	; (a4ec <bt_smp_accept+0x14>)
    a4da:	6818      	ldr	r0, [r3, #0]
    a4dc:	b918      	cbnz	r0, a4e6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    a4de:	4a04      	ldr	r2, [pc, #16]	; (a4f0 <bt_smp_accept+0x18>)
    a4e0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    a4e2:	600b      	str	r3, [r1, #0]

		return 0;
    a4e4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    a4e6:	f06f 000b 	mvn.w	r0, #11
}
    a4ea:	4770      	bx	lr
    a4ec:	200011e8 	.word	0x200011e8
    a4f0:	0002508c 	.word	0x0002508c

0000a4f4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4f8:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a4fa:	1dc2      	adds	r2, r0, #7
    a4fc:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a500:	1e75      	subs	r5, r6, #1
{
    a502:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a504:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    a506:	6018      	str	r0, [r3, #0]
{
    a508:	b082      	sub	sp, #8
    a50a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a50c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a50e:	2100      	movs	r1, #0
    a510:	2204      	movs	r2, #4
    a512:	fb07 0005 	mla	r0, r7, r5, r0
    a516:	f016 f912 	bl	2073e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    a51a:	b1bd      	cbz	r5, a54c <mem_init+0x58>
    a51c:	3e02      	subs	r6, #2
    a51e:	b2b6      	uxth	r6, r6
    a520:	fb06 7307 	mla	r3, r6, r7, r7
    a524:	fb06 f807 	mul.w	r8, r6, r7
    a528:	441c      	add	r4, r3
    a52a:	eba8 0803 	sub.w	r8, r8, r3
    a52e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a530:	2204      	movs	r2, #4
    a532:	eb04 0008 	add.w	r0, r4, r8
    a536:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    a53a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a53c:	f016 f8f4 	bl	20728 <memcpy>
	while (mem_count--) {
    a540:	42b5      	cmp	r5, r6
    a542:	eba4 0407 	sub.w	r4, r4, r7
    a546:	f105 0501 	add.w	r5, r5, #1
    a54a:	d1f1      	bne.n	a530 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    a54c:	b002      	add	sp, #8
    a54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a552:	bf00      	nop

0000a554 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a554:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    a556:	6805      	ldr	r5, [r0, #0]
{
    a558:	b082      	sub	sp, #8
	if (*mem_head) {
    a55a:	b195      	cbz	r5, a582 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a55c:	1deb      	adds	r3, r5, #7
    a55e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a562:	2204      	movs	r2, #4
    a564:	4604      	mov	r4, r0
    a566:	4629      	mov	r1, r5
    a568:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a56c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    a56e:	f016 f8db 	bl	20728 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a572:	9b01      	ldr	r3, [sp, #4]
    a574:	b123      	cbz	r3, a580 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a576:	1dda      	adds	r2, r3, #7
    a578:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    a57c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a57e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a580:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    a582:	4628      	mov	r0, r5
    a584:	b002      	add	sp, #8
    a586:	bd70      	pop	{r4, r5, r6, pc}

0000a588 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a588:	680b      	ldr	r3, [r1, #0]
{
    a58a:	b570      	push	{r4, r5, r6, lr}
    a58c:	460c      	mov	r4, r1
    a58e:	4605      	mov	r5, r0
	if (*mem_head) {
    a590:	b183      	cbz	r3, a5b4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a592:	3307      	adds	r3, #7
    a594:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    a598:	881e      	ldrh	r6, [r3, #0]
    a59a:	3601      	adds	r6, #1
    a59c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    a59e:	2204      	movs	r2, #4
    a5a0:	4621      	mov	r1, r4
    a5a2:	4628      	mov	r0, r5
    a5a4:	f016 f8c0 	bl	20728 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    a5a8:	1deb      	adds	r3, r5, #7
    a5aa:	f023 0303 	bic.w	r3, r3, #3
    a5ae:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    a5b0:	6025      	str	r5, [r4, #0]
}
    a5b2:	bd70      	pop	{r4, r5, r6, pc}
    a5b4:	2601      	movs	r6, #1
    a5b6:	e7f2      	b.n	a59e <mem_release+0x16>

0000a5b8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    a5b8:	fb02 0001 	mla	r0, r2, r1, r0
    a5bc:	4770      	bx	lr
    a5be:	bf00      	nop

0000a5c0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    a5c0:	1a40      	subs	r0, r0, r1
    a5c2:	b280      	uxth	r0, r0
}
    a5c4:	fbb0 f0f2 	udiv	r0, r0, r2
    a5c8:	4770      	bx	lr
    a5ca:	bf00      	nop

0000a5cc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    a5cc:	1e53      	subs	r3, r2, #1
	src += len;
    a5ce:	4411      	add	r1, r2
	while (len--) {
    a5d0:	b29b      	uxth	r3, r3
    a5d2:	b142      	cbz	r2, a5e6 <mem_rcopy+0x1a>
    a5d4:	43db      	mvns	r3, r3
    a5d6:	3801      	subs	r0, #1
    a5d8:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    a5da:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a5de:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    a5e2:	4291      	cmp	r1, r2
    a5e4:	d1f9      	bne.n	a5da <mem_rcopy+0xe>
	}
}
    a5e6:	4770      	bx	lr

0000a5e8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    a5e8:	4401      	add	r1, r0
    a5ea:	e002      	b.n	a5f2 <mem_nz+0xa>
		if (*src++) {
    a5ec:	f810 3b01 	ldrb.w	r3, [r0], #1
    a5f0:	b91b      	cbnz	r3, a5fa <mem_nz+0x12>
	while (len--) {
    a5f2:	4288      	cmp	r0, r1
    a5f4:	d1fa      	bne.n	a5ec <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    a5f6:	2000      	movs	r0, #0
    a5f8:	4770      	bx	lr
			return 1;
    a5fa:	2001      	movs	r0, #1
}
    a5fc:	4770      	bx	lr
    a5fe:	bf00      	nop

0000a600 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    a600:	6010      	str	r0, [r2, #0]
    a602:	6008      	str	r0, [r1, #0]

	return link;
}
    a604:	4770      	bx	lr
    a606:	bf00      	nop

0000a608 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    a608:	680a      	ldr	r2, [r1, #0]
{
    a60a:	4603      	mov	r3, r0
	if (*head != *tail) {
    a60c:	6800      	ldr	r0, [r0, #0]
    a60e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    a610:	bf05      	ittet	eq
    a612:	2200      	moveq	r2, #0
    a614:	600a      	streq	r2, [r1, #0]
		return NULL;
    a616:	2000      	movne	r0, #0
	*head = *tail = NULL;
    a618:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    a61a:	4770      	bx	lr

0000a61c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    a61c:	f8d2 c000 	ldr.w	ip, [r2]
    a620:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    a624:	f8d2 c000 	ldr.w	ip, [r2]
    a628:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    a62c:	6010      	str	r0, [r2, #0]

	return link;
}
    a62e:	4770      	bx	lr

0000a630 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    a630:	4288      	cmp	r0, r1
    a632:	d003      	beq.n	a63c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    a634:	b11a      	cbz	r2, a63e <memq_peek+0xe>
		*mem = head->mem;
    a636:	6843      	ldr	r3, [r0, #4]
    a638:	6013      	str	r3, [r2, #0]
    a63a:	4770      	bx	lr
		return NULL;
    a63c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    a63e:	4770      	bx	lr

0000a640 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    a640:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    a642:	4283      	cmp	r3, r0
    a644:	d009      	beq.n	a65a <memq_dequeue+0x1a>
	if (mem) {
    a646:	b12a      	cbz	r2, a654 <memq_dequeue+0x14>
		*mem = head->mem;
    a648:	6858      	ldr	r0, [r3, #4]
    a64a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    a64c:	681a      	ldr	r2, [r3, #0]
    a64e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    a650:	4618      	mov	r0, r3
    a652:	4770      	bx	lr
	if (old_head == NULL) {
    a654:	2b00      	cmp	r3, #0
    a656:	d1f9      	bne.n	a64c <memq_dequeue+0xc>
    a658:	e7fa      	b.n	a650 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    a65a:	2300      	movs	r3, #0
    a65c:	e7f8      	b.n	a650 <memq_dequeue+0x10>
    a65e:	bf00      	nop

0000a660 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a664:	f8df 8030 	ldr.w	r8, [pc, #48]	; a698 <mayfly_init+0x38>
    a668:	4e0c      	ldr	r6, [pc, #48]	; (a69c <mayfly_init+0x3c>)
    a66a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    a66c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    a670:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    a672:	1d22      	adds	r2, r4, #4
    a674:	4621      	mov	r1, r4
    a676:	4628      	mov	r0, r5
		while (caller_id--) {
    a678:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    a67a:	f7ff ffc1 	bl	a600 <memq_init>
		while (caller_id--) {
    a67e:	42b4      	cmp	r4, r6
    a680:	f1a5 0508 	sub.w	r5, r5, #8
    a684:	d1f5      	bne.n	a672 <mayfly_init+0x12>
	while (callee_id--) {
    a686:	3f04      	subs	r7, #4
    a688:	1d3b      	adds	r3, r7, #4
    a68a:	f1a8 0820 	sub.w	r8, r8, #32
    a68e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    a692:	d1eb      	bne.n	a66c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a698:	200042d0 	.word	0x200042d0
    a69c:	20004360 	.word	0x20004360

0000a6a0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    a6a0:	b410      	push	{r4}
    a6a2:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    a6a4:	4c15      	ldr	r4, [pc, #84]	; (a6fc <mayfly_enable+0x5c>)
{
    a6a6:	468c      	mov	ip, r1
	if (enable) {
    a6a8:	b192      	cbz	r2, a6d0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    a6aa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    a6ae:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    a6b2:	0100      	lsls	r0, r0, #4
    a6b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a6b8:	4421      	add	r1, r4
    a6ba:	7a48      	ldrb	r0, [r1, #9]
    a6bc:	7a0c      	ldrb	r4, [r1, #8]
    a6be:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    a6c0:	bf04      	itt	eq
    a6c2:	3001      	addeq	r0, #1
    a6c4:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    a6c6:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    a6c8:	4661      	mov	r1, ip
    a6ca:	4618      	mov	r0, r3
    a6cc:	f00f ba1c 	b.w	19b08 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    a6d0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    a6d4:	0112      	lsls	r2, r2, #4
    a6d6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a6da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a6de:	4423      	add	r3, r4
    a6e0:	7a9c      	ldrb	r4, [r3, #10]
    a6e2:	7ada      	ldrb	r2, [r3, #11]
    a6e4:	42a2      	cmp	r2, r4
    a6e6:	d001      	beq.n	a6ec <mayfly_enable+0x4c>
}
    a6e8:	bc10      	pop	{r4}
    a6ea:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    a6ec:	3201      	adds	r2, #1
    a6ee:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    a6f0:	4b03      	ldr	r3, [pc, #12]	; (a700 <mayfly_enable+0x60>)
    a6f2:	2201      	movs	r2, #1
    a6f4:	545a      	strb	r2, [r3, r1]
}
    a6f6:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    a6f8:	f00f ba5c 	b.w	19bb4 <mayfly_pend>
    a6fc:	200042dc 	.word	0x200042dc
    a700:	200042d8 	.word	0x200042d8

0000a704 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    a704:	b570      	push	{r4, r5, r6, lr}
    a706:	b082      	sub	sp, #8
    a708:	4606      	mov	r6, r0
    a70a:	9301      	str	r3, [sp, #4]
    a70c:	460d      	mov	r5, r1
    a70e:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a710:	b32a      	cbz	r2, a75e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a712:	7823      	ldrb	r3, [r4, #0]
	ack = m->_ack;
    a714:	7861      	ldrb	r1, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a716:	1a5b      	subs	r3, r3, r1
	if (state != 0U) {
    a718:	f013 0303 	ands.w	r3, r3, #3
    a71c:	d005      	beq.n	a72a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    a71e:	2b01      	cmp	r3, #1
    a720:	d042      	beq.n	a7a8 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    a722:	3101      	adds	r1, #1
    a724:	b2c9      	uxtb	r1, r1
    a726:	7021      	strb	r1, [r4, #0]

				goto mayfly_enqueue_pend;
    a728:	e00f      	b.n	a74a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    a72a:	3101      	adds	r1, #1
    a72c:	b2c9      	uxtb	r1, r1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a72e:	2330      	movs	r3, #48	; 0x30
	m->_req = ack + 1;
    a730:	7021      	strb	r1, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a732:	2104      	movs	r1, #4
    a734:	fb13 1105 	smlabb	r1, r3, r5, r1
    a738:	4a1c      	ldr	r2, [pc, #112]	; (a7ac <mayfly_enqueue+0xa8>)
    a73a:	6860      	ldr	r0, [r4, #4]
    a73c:	230c      	movs	r3, #12
    a73e:	fb13 1306 	smlabb	r3, r3, r6, r1
    a742:	441a      	add	r2, r3
    a744:	4621      	mov	r1, r4
    a746:	f7ff ff69 	bl	a61c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    a74a:	4b19      	ldr	r3, [pc, #100]	; (a7b0 <mayfly_enqueue+0xac>)
    a74c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    a74e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    a750:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    a752:	4629      	mov	r1, r5
    a754:	f00f fa2e 	bl	19bb4 <mayfly_pend>

	return 0;
    a758:	2000      	movs	r0, #0
}
    a75a:	b002      	add	sp, #8
    a75c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a75e:	f00f fa13 	bl	19b88 <mayfly_prio_is_equal>
    a762:	2800      	cmp	r0, #0
    a764:	d0d5      	beq.n	a712 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    a766:	4629      	mov	r1, r5
    a768:	4630      	mov	r0, r6
    a76a:	f00f f9ed 	bl	19b48 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a76e:	2800      	cmp	r0, #0
    a770:	d0cf      	beq.n	a712 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    a772:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    a776:	0112      	lsls	r2, r2, #4
    a778:	490c      	ldr	r1, [pc, #48]	; (a7ac <mayfly_enqueue+0xa8>)
    a77a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a77e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a782:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    a784:	7a9a      	ldrb	r2, [r3, #10]
    a786:	7adb      	ldrb	r3, [r3, #11]
    a788:	429a      	cmp	r2, r3
    a78a:	d1c2      	bne.n	a712 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    a78c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    a78e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a790:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    a792:	0792      	lsls	r2, r2, #30
    a794:	d002      	beq.n	a79c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    a796:	3302      	adds	r3, #2
    a798:	b2db      	uxtb	r3, r3
    a79a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    a79c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    a7a0:	4798      	blx	r3
		return 0;
    a7a2:	2000      	movs	r0, #0
}
    a7a4:	b002      	add	sp, #8
    a7a6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    a7a8:	4618      	mov	r0, r3
    a7aa:	e7d6      	b.n	a75a <mayfly_enqueue+0x56>
    a7ac:	200042dc 	.word	0x200042dc
    a7b0:	200042d8 	.word	0x200042d8

0000a7b4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    a7b4:	4a50      	ldr	r2, [pc, #320]	; (a8f8 <mayfly_run+0x144>)
    a7b6:	5c13      	ldrb	r3, [r2, r0]
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	f000 809b 	beq.w	a8f4 <mayfly_run+0x140>
{
    a7be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    a7c2:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a7c4:	4f4d      	ldr	r7, [pc, #308]	; (a8fc <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    a7c6:	5413      	strb	r3, [r2, r0]
{
    a7c8:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    a7ca:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a7cc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    a7d0:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a7d4:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    a7d8:	9303      	str	r3, [sp, #12]
    a7da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a7de:	f10b 0804 	add.w	r8, fp, #4
    a7e2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    a7e6:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    a7ea:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    a7ec:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a7f0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    a7f2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    a7f4:	f7ff ff1c 	bl	a630 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    a7f8:	f107 0624 	add.w	r6, r7, #36	; 0x24
    a7fc:	4683      	mov	fp, r0
    a7fe:	2800      	cmp	r0, #0
    a800:	d034      	beq.n	a86c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    a802:	9c05      	ldr	r4, [sp, #20]
    a804:	7863      	ldrb	r3, [r4, #1]
    a806:	7825      	ldrb	r5, [r4, #0]
    a808:	1aed      	subs	r5, r5, r3
    a80a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    a80e:	2d01      	cmp	r5, #1
    a810:	d106      	bne.n	a820 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    a812:	3b01      	subs	r3, #1
    a814:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    a816:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    a81a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    a81c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    a81e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    a820:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    a822:	1ac3      	subs	r3, r0, r3
    a824:	f003 0303 	and.w	r3, r3, #3
    a828:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    a82a:	f04f 0200 	mov.w	r2, #0
    a82e:	4631      	mov	r1, r6
	req = m->_req;
    a830:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    a834:	d00f      	beq.n	a856 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    a836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a838:	f7ff ff02 	bl	a640 <memq_dequeue>
		ack = m->_ack;
    a83c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a840:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    a842:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    a846:	eba3 030c 	sub.w	r3, r3, ip
    a84a:	f003 0303 	and.w	r3, r3, #3
    a84e:	2b01      	cmp	r3, #1
		m->_ack = req;
    a850:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a854:	d046      	beq.n	a8e4 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    a856:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a85a:	aa05      	add	r2, sp, #20
    a85c:	f7ff fee8 	bl	a630 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    a860:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    a862:	9000      	str	r0, [sp, #0]
    a864:	4683      	mov	fp, r0
			if (state == 1U) {
    a866:	d02b      	beq.n	a8c0 <mayfly_run+0x10c>
		while (link) {
    a868:	2800      	cmp	r0, #0
    a86a:	d1ca      	bne.n	a802 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    a86c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    a870:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    a874:	429a      	cmp	r2, r3
    a876:	d003      	beq.n	a880 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    a878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    a87c:	2301      	movs	r3, #1
    a87e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    a880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    a884:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    a888:	429a      	cmp	r2, r3
    a88a:	d003      	beq.n	a894 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    a88c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    a890:	2301      	movs	r3, #1
    a892:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    a894:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a898:	fa5f f989 	uxtb.w	r9, r9
    a89c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a8a0:	f1a7 070c 	sub.w	r7, r7, #12
    a8a4:	d1a1      	bne.n	a7ea <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    a8a6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    a8aa:	b1c3      	cbz	r3, a8de <mayfly_run+0x12a>
    a8ac:	9b03      	ldr	r3, [sp, #12]
    a8ae:	b9b3      	cbnz	r3, a8de <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    a8b0:	461a      	mov	r2, r3
    a8b2:	4651      	mov	r1, sl
    a8b4:	4650      	mov	r0, sl
	}
}
    a8b6:	b007      	add	sp, #28
    a8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    a8bc:	f00f b924 	b.w	19b08 <mayfly_enable_cb>
				if (caller_id || link) {
    a8c0:	f1b9 0f00 	cmp.w	r9, #0
    a8c4:	d101      	bne.n	a8ca <mayfly_run+0x116>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	d0d0      	beq.n	a86c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    a8ca:	f8dd a008 	ldr.w	sl, [sp, #8]
    a8ce:	4a0a      	ldr	r2, [pc, #40]	; (a8f8 <mayfly_run+0x144>)
    a8d0:	2301      	movs	r3, #1
    a8d2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    a8d6:	4651      	mov	r1, sl
    a8d8:	4650      	mov	r0, sl
    a8da:	f00f f96b 	bl	19bb4 <mayfly_pend>
}
    a8de:	b007      	add	sp, #28
    a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a8e4:	4642      	mov	r2, r8
    a8e6:	4621      	mov	r1, r4
    a8e8:	4658      	mov	r0, fp
			m->_ack = ack;
    a8ea:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a8ee:	f7ff fe95 	bl	a61c <memq_enqueue>
    a8f2:	e7b0      	b.n	a856 <mayfly_run+0xa2>
    a8f4:	4770      	bx	lr
    a8f6:	bf00      	nop
    a8f8:	200042d8 	.word	0x200042d8
    a8fc:	200042dc 	.word	0x200042dc

0000a900 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    a900:	1e4b      	subs	r3, r1, #1
    a902:	b2db      	uxtb	r3, r3
    a904:	b171      	cbz	r1, a924 <util_ones_count_get+0x24>
    a906:	1e41      	subs	r1, r0, #1
    a908:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    a90c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    a90e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    a912:	b123      	cbz	r3, a91e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    a914:	1e5a      	subs	r2, r3, #1
			one_count++;
    a916:	3001      	adds	r0, #1
		while (bite) {
    a918:	4013      	ands	r3, r2
			one_count++;
    a91a:	b2c0      	uxtb	r0, r0
		while (bite) {
    a91c:	d1fa      	bne.n	a914 <util_ones_count_get+0x14>
	while (octets_len--) {
    a91e:	4561      	cmp	r1, ip
    a920:	d1f5      	bne.n	a90e <util_ones_count_get+0xe>
    a922:	4770      	bx	lr
	uint8_t one_count = 0U;
    a924:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    a926:	4770      	bx	lr

0000a928 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a92c:	4d49      	ldr	r5, [pc, #292]	; (aa54 <util_aa_le32+0x12c>)
{
    a92e:	b083      	sub	sp, #12
    a930:	4607      	mov	r7, r0
    a932:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
    a934:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    a936:	2104      	movs	r1, #4
    a938:	4638      	mov	r0, r7
    a93a:	f00c f8cb 	bl	16ad4 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    a93e:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
    a940:	231e      	movs	r3, #30
    a942:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
    a946:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
    a94a:	f04f 0901 	mov.w	r9, #1
    a94e:	e00c      	b.n	a96a <util_aa_le32+0x42>
			transitions++;
    a950:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a954:	2b1b      	cmp	r3, #27
			transitions++;
    a956:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a958:	d968      	bls.n	aa2c <util_aa_le32+0x104>
				consecutive_cnt = 1U;
    a95a:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
    a95e:	2919      	cmp	r1, #25
    a960:	d04f      	beq.n	aa02 <util_aa_le32+0xda>
    a962:	468e      	mov	lr, r1
    a964:	4694      	mov	ip, r2
	while (bit_idx--) {
    a966:	3b01      	subs	r3, #1
    a968:	d31e      	bcc.n	a9a8 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
    a96a:	fa20 f203 	lsr.w	r2, r0, r3
    a96e:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    a972:	4594      	cmp	ip, r2
    a974:	d1ec      	bne.n	a950 <util_aa_le32+0x28>
			consecutive_cnt++;
    a976:	f109 0801 	add.w	r8, r9, #1
    a97a:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
    a97e:	f1b8 0f06 	cmp.w	r8, #6
    a982:	d90d      	bls.n	a9a0 <util_aa_le32+0x78>
    a984:	4671      	mov	r1, lr
			if (consecutive_bit) {
    a986:	b3b2      	cbz	r2, a9f6 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
    a988:	fa04 f203 	lsl.w	r2, r4, r3
    a98c:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
    a990:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
    a994:	4571      	cmp	r1, lr
    a996:	d1e6      	bne.n	a966 <util_aa_le32+0x3e>
				transitions++;
    a998:	3101      	adds	r1, #1
    a99a:	b2c9      	uxtb	r1, r1
    a99c:	4662      	mov	r2, ip
    a99e:	e7dc      	b.n	a95a <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
    a9a0:	d14a      	bne.n	aa38 <util_aa_le32+0x110>
		     (((bit_idx < 29) && (transitions < 1)) ||
    a9a2:	46c1      	mov	r9, r8
	while (bit_idx--) {
    a9a4:	3b01      	subs	r3, #1
    a9a6:	d2e0      	bcs.n	a96a <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a9a8:	ea80 0305 	eor.w	r3, r0, r5
    a9ac:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    a9ae:	f10d 0c04 	add.w	ip, sp, #4
    a9b2:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    a9b6:	2200      	movs	r2, #0
		bite = *octets;
    a9b8:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    a9bc:	b123      	cbz	r3, a9c8 <util_aa_le32+0xa0>
			bite &= (bite - 1);
    a9be:	1e59      	subs	r1, r3, #1
			one_count++;
    a9c0:	3201      	adds	r2, #1
		while (bite) {
    a9c2:	400b      	ands	r3, r1
			one_count++;
    a9c4:	b2d2      	uxtb	r2, r2
		while (bite) {
    a9c6:	d1fa      	bne.n	a9be <util_aa_le32+0x96>
	while (octets_len--) {
    a9c8:	45e6      	cmp	lr, ip
    a9ca:	d1f5      	bne.n	a9b8 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    a9cc:	2a01      	cmp	r2, #1
    a9ce:	d909      	bls.n	a9e4 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a9d0:	b283      	uxth	r3, r0
    a9d2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    a9d6:	ea4f 4210 	mov.w	r2, r0, lsr #16
    a9da:	d11c      	bne.n	aa16 <util_aa_le32+0xee>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    a9dc:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a9de:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    a9e2:	d118      	bne.n	aa16 <util_aa_le32+0xee>
	if (!retry) {
    a9e4:	3e01      	subs	r6, #1
    a9e6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a9ea:	d1a4      	bne.n	a936 <util_aa_le32+0xe>
		return -EFAULT;
    a9ec:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    a9f0:	b003      	add	sp, #12
    a9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
    a9f6:	fa04 f203 	lsl.w	r2, r4, r3
    a9fa:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
    a9fc:	f04f 0c01 	mov.w	ip, #1
    aa00:	e7c8      	b.n	a994 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
    aa02:	3301      	adds	r3, #1
    aa04:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
    aa08:	b112      	cbz	r2, aa10 <util_aa_le32+0xe8>
				aa &= ~(BIT(bit_idx + 1) - 1);
    aa0a:	425b      	negs	r3, r3
    aa0c:	4018      	ands	r0, r3
    aa0e:	e7cb      	b.n	a9a8 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
    aa10:	3b01      	subs	r3, #1
    aa12:	4318      	orrs	r0, r3
    aa14:	e7c8      	b.n	a9a8 <util_aa_le32+0x80>
	dst[1] = val >> 8;
    aa16:	f3c0 2107 	ubfx	r1, r0, #8, #8
    aa1a:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    aa1c:	7038      	strb	r0, [r7, #0]
	return 0;
    aa1e:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    aa20:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
    aa22:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
    aa24:	70fb      	strb	r3, [r7, #3]
}
    aa26:	b003      	add	sp, #12
    aa28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
    aa2c:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    aa30:	2901      	cmp	r1, #1
    aa32:	d9a8      	bls.n	a986 <util_aa_le32+0x5e>
    aa34:	46c1      	mov	r9, r8
    aa36:	e792      	b.n	a95e <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
    aa38:	2b1c      	cmp	r3, #28
    aa3a:	d904      	bls.n	aa46 <util_aa_le32+0x11e>
		     (((bit_idx < 29) && (transitions < 1)) ||
    aa3c:	2b1b      	cmp	r3, #27
    aa3e:	d907      	bls.n	aa50 <util_aa_le32+0x128>
    aa40:	4694      	mov	ip, r2
    aa42:	46c1      	mov	r9, r8
    aa44:	e7ae      	b.n	a9a4 <util_aa_le32+0x7c>
    aa46:	f1be 0f00 	cmp.w	lr, #0
    aa4a:	d1f7      	bne.n	aa3c <util_aa_le32+0x114>
    aa4c:	4671      	mov	r1, lr
    aa4e:	e79a      	b.n	a986 <util_aa_le32+0x5e>
    aa50:	4671      	mov	r1, lr
    aa52:	e7ed      	b.n	aa30 <util_aa_le32+0x108>
    aa54:	8e89bed6 	.word	0x8e89bed6

0000aa58 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    aa58:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    aa5a:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    aa5c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    aa5e:	2bff      	cmp	r3, #255	; 0xff
    aa60:	d014      	beq.n	aa8c <ticker_dequeue+0x34>
		ticker_current = &node[current];
    aa62:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    aa66:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    aa68:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    aa6c:	d028      	beq.n	aac0 <ticker_dequeue+0x68>
	total = 0U;
    aa6e:	f04f 0c00 	mov.w	ip, #0
    aa72:	e001      	b.n	aa78 <ticker_dequeue+0x20>
		if (current == id) {
    aa74:	4299      	cmp	r1, r3
    aa76:	d00b      	beq.n	aa90 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    aa78:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    aa7a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    aa7c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    aa7e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    aa80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    aa84:	44a4      	add	ip, r4
		ticker_current = &node[current];
    aa86:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    aa8a:	d1f3      	bne.n	aa74 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    aa8c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    aa8e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    aa90:	4571      	cmp	r1, lr
    aa92:	d018      	beq.n	aac6 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    aa94:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    aa96:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    aa98:	fa0f fe8e 	sxth.w	lr, lr
    aa9c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    aaa0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    aaa4:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    aaa8:	7813      	ldrb	r3, [r2, #0]
    aaaa:	2bff      	cmp	r3, #255	; 0xff
    aaac:	d006      	beq.n	aabc <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    aaae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aab2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    aab6:	68ab      	ldr	r3, [r5, #8]
    aab8:	4403      	add	r3, r0
    aaba:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    aabc:	4460      	add	r0, ip
}
    aabe:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    aac0:	469e      	mov	lr, r3
	total = 0U;
    aac2:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    aac6:	7813      	ldrb	r3, [r2, #0]
    aac8:	7743      	strb	r3, [r0, #29]
    aaca:	e7e4      	b.n	aa96 <ticker_dequeue+0x3e>

0000aacc <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    aacc:	eba2 0c01 	sub.w	ip, r2, r1
    aad0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    aad4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    aad6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    aad8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    aada:	d10a      	bne.n	aaf2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aadc:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    aae0:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    aae2:	42a3      	cmp	r3, r4
    aae4:	d914      	bls.n	ab10 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    aae6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    aae8:	2100      	movs	r1, #0
}
    aaea:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    aaec:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    aaee:	6141      	str	r1, [r0, #20]
}
    aaf0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aaf2:	1a89      	subs	r1, r1, r2
    aaf4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    aaf8:	428b      	cmp	r3, r1
    aafa:	d806      	bhi.n	ab0a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    aafc:	4421      	add	r1, r4
    aafe:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    ab00:	2300      	movs	r3, #0
}
    ab02:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    ab04:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    ab06:	6141      	str	r1, [r0, #20]
}
    ab08:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    ab0a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    ab0c:	42a3      	cmp	r3, r4
    ab0e:	d8ea      	bhi.n	aae6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    ab10:	1ae1      	subs	r1, r4, r3
    ab12:	e7f5      	b.n	ab00 <ticks_to_expire_prep+0x34>

0000ab14 <ticker_job_list_insert>:
{
    ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab18:	b087      	sub	sp, #28
    ab1a:	4603      	mov	r3, r0
	count_user = instance->count_user;
    ab1c:	7a42      	ldrb	r2, [r0, #9]
{
    ab1e:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    ab20:	6800      	ldr	r0, [r0, #0]
    ab22:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    ab24:	6858      	ldr	r0, [r3, #4]
    ab26:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    ab28:	2a00      	cmp	r2, #0
    ab2a:	f000 80f6 	beq.w	ad1a <ticker_job_list_insert+0x206>
    ab2e:	1e53      	subs	r3, r2, #1
    ab30:	b2db      	uxtb	r3, r3
    ab32:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ab36:	460f      	mov	r7, r1
    ab38:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    ab3a:	9b03      	ldr	r3, [sp, #12]
    ab3c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    ab3e:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    ab40:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    ab42:	2fff      	cmp	r7, #255	; 0xff
    ab44:	d05e      	beq.n	ac04 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    ab46:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    ab4a:	9b02      	ldr	r3, [sp, #8]
    ab4c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    ab50:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    ab52:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    ab56:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    ab5a:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    ab5c:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    ab5e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    ab62:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    ab66:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    ab6a:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    ab6c:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    ab70:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    ab72:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    ab76:	d10f      	bne.n	ab98 <ticker_job_list_insert+0x84>
    ab78:	e0ca      	b.n	ad10 <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    ab7a:	1a09      	subs	r1, r1, r0
    ab7c:	d106      	bne.n	ab8c <ticker_job_list_insert+0x78>
    ab7e:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    ab82:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    ab86:	45e2      	cmp	sl, ip
    ab88:	f200 8086 	bhi.w	ac98 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    ab8c:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    ab90:	2bff      	cmp	r3, #255	; 0xff
    ab92:	4691      	mov	r9, r2
    ab94:	d072      	beq.n	ac7c <ticker_job_list_insert+0x168>
    ab96:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    ab98:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ab9c:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    aba0:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    aba2:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    aba6:	4288      	cmp	r0, r1
    aba8:	d9e7      	bls.n	ab7a <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    abaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    abae:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    abb2:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    abb6:	d166      	bne.n	ac86 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    abb8:	9b01      	ldr	r3, [sp, #4]
    abba:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    abbe:	2aff      	cmp	r2, #255	; 0xff
    abc0:	d008      	beq.n	abd4 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    abc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    abc6:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    abca:	f8de 3008 	ldr.w	r3, [lr, #8]
    abce:	1a5b      	subs	r3, r3, r1
    abd0:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    abd4:	78a3      	ldrb	r3, [r4, #2]
    abd6:	3301      	adds	r3, #1
    abd8:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    abda:	2d00      	cmp	r5, #0
    abdc:	d0b1      	beq.n	ab42 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    abde:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    abe2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    abe4:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    abe6:	2200      	movs	r2, #0
    abe8:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    abea:	b113      	cbz	r3, abf2 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    abec:	6b29      	ldr	r1, [r5, #48]	; 0x30
    abee:	4610      	mov	r0, r2
    abf0:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    abf2:	6863      	ldr	r3, [r4, #4]
    abf4:	2b00      	cmp	r3, #0
    abf6:	d1a4      	bne.n	ab42 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    abf8:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    abfc:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    abfe:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    ac02:	d1a0      	bne.n	ab46 <ticker_job_list_insert+0x32>
    ac04:	9b03      	ldr	r3, [sp, #12]
    ac06:	7898      	ldrb	r0, [r3, #2]
    ac08:	42b0      	cmp	r0, r6
    ac0a:	d02f      	beq.n	ac6c <ticker_job_list_insert+0x158>
    ac0c:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    ac10:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ac14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
    ac18:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    ac1c:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
    ac20:	3601      	adds	r6, #1
    ac22:	b2f6      	uxtb	r6, r6
					first = 0U;
    ac24:	42b1      	cmp	r1, r6
    ac26:	bf08      	it	eq
    ac28:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    ac2a:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
    ac2c:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    ac30:	d11a      	bne.n	ac68 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    ac32:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    ac36:	9902      	ldr	r1, [sp, #8]
    ac38:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    ac3c:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    ac40:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    ac44:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    ac46:	7862      	ldrb	r2, [r4, #1]
    ac48:	1a52      	subs	r2, r2, r1
    ac4a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    ac4e:	d025      	beq.n	ac9c <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ac50:	f04f 0200 	mov.w	r2, #0
    ac54:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
    ac58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ac5a:	2001      	movs	r0, #1
	user_op->status = status;
    ac5c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    ac5e:	b10b      	cbz	r3, ac64 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ac60:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ac62:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    ac64:	f89b 0002 	ldrb.w	r0, [fp, #2]
    ac68:	42b0      	cmp	r0, r6
    ac6a:	d1d1      	bne.n	ac10 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    ac6c:	9a03      	ldr	r2, [sp, #12]
    ac6e:	9905      	ldr	r1, [sp, #20]
    ac70:	4291      	cmp	r1, r2
    ac72:	f1a2 0308 	sub.w	r3, r2, #8
    ac76:	d050      	beq.n	ad1a <ticker_job_list_insert+0x206>
    ac78:	9303      	str	r3, [sp, #12]
    ac7a:	e75e      	b.n	ab3a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    ac7c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    ac80:	f88b 3000 	strb.w	r3, [fp]
    ac84:	461a      	mov	r2, r3
		node[previous].next = id;
    ac86:	fa0f f989 	sxth.w	r9, r9
    ac8a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    ac8e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    ac92:	f80e 8009 	strb.w	r8, [lr, r9]
    ac96:	e792      	b.n	abbe <ticker_job_list_insert+0xaa>
    ac98:	4601      	mov	r1, r0
    ac9a:	e786      	b.n	abaa <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    ac9c:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    ac9e:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    aca0:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    aca4:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
    aca6:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    aca8:	d02a      	beq.n	ad00 <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
    acaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    acae:	1a9a      	subs	r2, r3, r2
    acb0:	fab2 f282 	clz	r2, r2
    acb4:	0952      	lsrs	r2, r2, #5
    acb6:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    acba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    acbc:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    acbe:	68ea      	ldr	r2, [r5, #12]
    acc0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    acc2:	692a      	ldr	r2, [r5, #16]
    acc4:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    acc6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    acca:	4293      	cmp	r3, r2
    accc:	bf88      	it	hi
    acce:	2300      	movhi	r3, #0
    acd0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    acd2:	69ab      	ldr	r3, [r5, #24]
    acd4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    acd6:	69eb      	ldr	r3, [r5, #28]
    acd8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    acda:	6a2b      	ldr	r3, [r5, #32]
    acdc:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    acde:	68ab      	ldr	r3, [r5, #8]
    ace0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    ace2:	2300      	movs	r3, #0
    ace4:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    ace6:	686a      	ldr	r2, [r5, #4]
    ace8:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    acea:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    acec:	f7ff feee 	bl	aacc <ticks_to_expire_prep>
	ticker->force = 1U;
    acf0:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    acf4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    acf8:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    acfc:	70e3      	strb	r3, [r4, #3]
}
    acfe:	e72d      	b.n	ab5c <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    ad00:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
    ad02:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ad04:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    ad06:	68ea      	ldr	r2, [r5, #12]
    ad08:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    ad0a:	692a      	ldr	r2, [r5, #16]
    ad0c:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    ad0e:	e7df      	b.n	acd0 <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
    ad10:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    ad14:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    ad18:	e75c      	b.n	abd4 <ticker_job_list_insert+0xc0>
}
    ad1a:	b007      	add	sp, #28
    ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ad20 <ticker_worker>:
{
    ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    ad24:	7f82      	ldrb	r2, [r0, #30]
{
    ad26:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    ad28:	2301      	movs	r3, #1
	if (instance->job_guard) {
    ad2a:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    ad2c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    ad2e:	2a00      	cmp	r2, #0
    ad30:	d159      	bne.n	ade6 <ticker_worker+0xc6>
	if (instance->ticker_id_head == TICKER_NULL) {
    ad32:	7f43      	ldrb	r3, [r0, #29]
    ad34:	2bff      	cmp	r3, #255	; 0xff
    ad36:	4681      	mov	r9, r0
    ad38:	d054      	beq.n	ade4 <ticker_worker+0xc4>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    ad3a:	f00e f9e3 	bl	19104 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ad3e:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    ad42:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    ad46:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ad4a:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    ad4c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ad4e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    ad52:	f000 813f 	beq.w	afd4 <ticker_worker+0x2b4>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    ad56:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    ad5a:	455b      	cmp	r3, fp
    ad5c:	bf94      	ite	ls
    ad5e:	2300      	movls	r3, #0
    ad60:	2301      	movhi	r3, #1
    ad62:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    ad64:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    ad66:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    ad6a:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    ad6e:	d044      	beq.n	adfa <ticker_worker+0xda>
			must_expire_skip = 1U;
    ad70:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    ad74:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    ad78:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    ad7c:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    ad7e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ad80:	455b      	cmp	r3, fp
    ad82:	d838      	bhi.n	adf6 <ticker_worker+0xd6>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    ad84:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
    ad88:	5dbe      	ldrb	r6, [r7, r6]
		ticks_elapsed -= ticks_to_expire;
    ad8a:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
    ad8e:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    ad90:	7863      	ldrb	r3, [r4, #1]
    ad92:	eba3 030a 	sub.w	r3, r3, sl
    ad96:	b2db      	uxtb	r3, r3
    ad98:	2b01      	cmp	r3, #1
    ad9a:	d12a      	bne.n	adf2 <ticker_worker+0xd2>
		if (ticker->ticks_slot != 0U &&
    ad9c:	69a0      	ldr	r0, [r4, #24]
    ad9e:	2800      	cmp	r0, #0
    ada0:	d053      	beq.n	ae4a <ticker_worker+0x12a>
    ada2:	9b03      	ldr	r3, [sp, #12]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d04b      	beq.n	ae40 <ticker_worker+0x120>
		int32_t lazy_current = ticker->lazy_current;
    ada8:	8be3      	ldrh	r3, [r4, #30]
    adaa:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    adac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
    adae:	b13a      	cbz	r2, adc0 <ticker_worker+0xa0>
    adb0:	6813      	ldr	r3, [r2, #0]
    adb2:	b11b      	cbz	r3, adbc <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
    adb4:	7a13      	ldrb	r3, [r2, #8]
    adb6:	2b00      	cmp	r3, #0
    adb8:	f000 80f3 	beq.w	afa2 <ticker_worker+0x282>
				ext_data->reschedule_state =
    adbc:	2300      	movs	r3, #0
    adbe:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
    adc0:	9b05      	ldr	r3, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    adc2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    adc6:	3301      	adds	r3, #1
    adc8:	b29b      	uxth	r3, r3
    adca:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    adcc:	b171      	cbz	r1, adec <ticker_worker+0xcc>
    adce:	8ba1      	ldrh	r1, [r4, #28]
    add0:	4299      	cmp	r1, r3
    add2:	d20b      	bcs.n	adec <ticker_worker+0xcc>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    add4:	2a00      	cmp	r2, #0
    add6:	f000 8100 	beq.w	afda <ticker_worker+0x2ba>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    adda:	7a13      	ldrb	r3, [r2, #8]
    addc:	2b01      	cmp	r3, #1
    adde:	d005      	beq.n	adec <ticker_worker+0xcc>
			must_expire_skip = 1U;
    ade0:	2301      	movs	r3, #1
    ade2:	e035      	b.n	ae50 <ticker_worker+0x130>
		instance->worker_trigger = 0U;
    ade4:	77c2      	strb	r2, [r0, #31]
}
    ade6:	b00f      	add	sp, #60	; 0x3c
    ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    adec:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    adf0:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    adf2:	2eff      	cmp	r6, #255	; 0xff
    adf4:	d1be      	bne.n	ad74 <ticker_worker+0x54>
    adf6:	f8dd 9010 	ldr.w	r9, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    adfa:	f899 300b 	ldrb.w	r3, [r9, #11]
    adfe:	f899 200a 	ldrb.w	r2, [r9, #10]
    ae02:	429a      	cmp	r2, r3
    ae04:	d10a      	bne.n	ae1c <ticker_worker+0xfc>
	uint8_t idx = *ticks_elapsed_index + 1;
    ae06:	3201      	adds	r2, #1
    ae08:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    ae0a:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ae0c:	bf1c      	itt	ne
    ae0e:	4613      	movne	r3, r2
    ae10:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    ae12:	9a06      	ldr	r2, [sp, #24]
    ae14:	f889 200b 	strb.w	r2, [r9, #11]
    ae18:	bf08      	it	eq
    ae1a:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ae1c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ae20:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ae24:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    ae28:	2200      	movs	r2, #0
    ae2a:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ae2e:	464b      	mov	r3, r9
    ae30:	2201      	movs	r2, #1
    ae32:	2104      	movs	r1, #4
    ae34:	2003      	movs	r0, #3
    ae36:	46a4      	mov	ip, r4
}
    ae38:	b00f      	add	sp, #60	; 0x3c
    ae3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    ae3e:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    ae40:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    ae44:	9307      	str	r3, [sp, #28]
    ae46:	3380      	adds	r3, #128	; 0x80
    ae48:	d143      	bne.n	aed2 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    ae4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ae4c:	b1ea      	cbz	r2, ae8a <ticker_worker+0x16a>
    ae4e:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
    ae50:	2000      	movs	r0, #0
			ticker->ext_data->reschedule_state =
    ae52:	7210      	strb	r0, [r2, #8]
		if (ticker->timeout_func) {
    ae54:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
    ae56:	6851      	ldr	r1, [r2, #4]
			ticker->ext_data->ticks_drift = 0U;
    ae58:	6050      	str	r0, [r2, #4]
		ticker->ack--;
    ae5a:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
    ae5e:	f884 c002 	strb.w	ip, [r4, #2]
		if (ticker->timeout_func) {
    ae62:	2d00      	cmp	r5, #0
    ae64:	d0c5      	beq.n	adf2 <ticker_worker+0xd2>
					   ticks_expired -
    ae66:	9a04      	ldr	r2, [sp, #16]
    ae68:	6960      	ldr	r0, [r4, #20]
    ae6a:	6952      	ldr	r2, [r2, #20]
    ae6c:	eba8 0000 	sub.w	r0, r8, r0
    ae70:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    ae72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ae76:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ae78:	b1bb      	cbz	r3, aeaa <ticker_worker+0x18a>
    ae7a:	6923      	ldr	r3, [r4, #16]
    ae7c:	9301      	str	r3, [sp, #4]
    ae7e:	78e3      	ldrb	r3, [r4, #3]
    ae80:	9300      	str	r3, [sp, #0]
    ae82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ae86:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    ae88:	e7b3      	b.n	adf2 <ticker_worker+0xd2>
		if (ticker->timeout_func) {
    ae8a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    ae8c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ae90:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    ae92:	2d00      	cmp	r5, #0
    ae94:	d0ad      	beq.n	adf2 <ticker_worker+0xd2>
					   ticks_expired -
    ae96:	6963      	ldr	r3, [r4, #20]
    ae98:	eba8 0003 	sub.w	r0, r8, r3
    ae9c:	9b04      	ldr	r3, [sp, #16]
    ae9e:	695b      	ldr	r3, [r3, #20]
			ticks_drift = 0U;
    aea0:	4611      	mov	r1, r2
					   ticks_expired -
    aea2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    aea4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			ticks_at_expire = (instance->ticks_current +
    aea6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    aeaa:	f8d4 c010 	ldr.w	ip, [r4, #16]
    aeae:	8be3      	ldrh	r3, [r4, #30]
    aeb0:	f8cd c004 	str.w	ip, [sp, #4]
    aeb4:	f894 c003 	ldrb.w	ip, [r4, #3]
    aeb8:	f8cd c000 	str.w	ip, [sp]
    aebc:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    aebe:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    aec0:	2b00      	cmp	r3, #0
    aec2:	9b03      	ldr	r3, [sp, #12]
    aec4:	bf18      	it	ne
    aec6:	2301      	movne	r3, #1
    aec8:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    aeca:	2300      	movs	r3, #0
    aecc:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    aece:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    aed0:	e78f      	b.n	adf2 <ticker_worker+0xd2>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    aed2:	2eff      	cmp	r6, #255	; 0xff
    aed4:	d0b9      	beq.n	ae4a <ticker_worker+0x12a>
		int32_t lazy_current = ticker->lazy_current;
    aed6:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    aed8:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    aeda:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    aede:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    aee0:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    aee2:	bf28      	it	cs
    aee4:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    aee6:	fb02 c10c 	mla	r1, r2, ip, ip
    aeea:	9108      	str	r1, [sp, #32]
				(lazy_current - ticker->priority);
    aeec:	9907      	ldr	r1, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    aeee:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    aef2:	e9cd b80b 	strd	fp, r8, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    aef6:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
    aef8:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
    aefa:	4633      	mov	r3, r6
				(lazy_current - ticker->priority);
    aefc:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    aefe:	2500      	movs	r5, #0
    af00:	960d      	str	r6, [sp, #52]	; 0x34
    af02:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
    af04:	b21b      	sxth	r3, r3
    af06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    af0a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    af0e:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    af10:	f8d2 8008 	ldr.w	r8, [r2, #8]
    af14:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    af16:	42a8      	cmp	r0, r5
    af18:	d33c      	bcc.n	af94 <ticker_worker+0x274>
			if (ticker_next->ticks_slot == 0U) {
    af1a:	6991      	ldr	r1, [r2, #24]
    af1c:	2900      	cmp	r1, #0
    af1e:	d036      	beq.n	af8e <ticker_worker+0x26e>
			int32_t lazy_next = ticker_next->lazy_current;
    af20:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    af22:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    af24:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    af28:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    af2c:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    af2e:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    af30:	bf28      	it	cs
    af32:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    af36:	f1ba 0f00 	cmp.w	sl, #0
    af3a:	d03f      	beq.n	afbc <ticker_worker+0x29c>
    af3c:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    af40:	2c00      	cmp	r4, #0
    af42:	d037      	beq.n	afb4 <ticker_worker+0x294>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    af44:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    af48:	f8dd a020 	ldr.w	sl, [sp, #32]
    af4c:	45c2      	cmp	sl, r8
    af4e:	bf8c      	ite	hi
    af50:	f04f 0801 	movhi.w	r8, #1
    af54:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    af58:	bf34      	ite	cc
    af5a:	f04f 0a01 	movcc.w	sl, #1
    af5e:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    af62:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    af64:	f892 b003 	ldrb.w	fp, [r2, #3]
    af68:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    af6c:	d30f      	bcc.n	af8e <ticker_worker+0x26e>
    af6e:	4593      	cmp	fp, r2
    af70:	d829      	bhi.n	afc6 <ticker_worker+0x2a6>
			    (next_force ||
    af72:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    af76:	d026      	beq.n	afc6 <ticker_worker+0x2a6>
			     next_is_critical ||
    af78:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    af7a:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    af7e:	4594      	cmp	ip, r2
    af80:	dd02      	ble.n	af88 <ticker_worker+0x268>
			     (next_has_priority && !current_is_older) ||
    af82:	f1b8 0f00 	cmp.w	r8, #0
    af86:	d01e      	beq.n	afc6 <ticker_worker+0x2a6>
    af88:	9a07      	ldr	r2, [sp, #28]
    af8a:	4572      	cmp	r2, lr
    af8c:	d018      	beq.n	afc0 <ticker_worker+0x2a0>
			id_head = ticker_next->next;
    af8e:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    af90:	2bff      	cmp	r3, #255	; 0xff
    af92:	d1b7      	bne.n	af04 <ticker_worker+0x1e4>
    af94:	e9dd b80b 	ldrd	fp, r8, [sp, #44]	; 0x2c
    af98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    af9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    af9e:	464c      	mov	r4, r9
    afa0:	e753      	b.n	ae4a <ticker_worker+0x12a>
			    TICKER_RESCHEDULE_STATE_NONE &&
    afa2:	8ba3      	ldrh	r3, [r4, #28]
    afa4:	9905      	ldr	r1, [sp, #20]
    afa6:	428b      	cmp	r3, r1
    afa8:	f63f af08 	bhi.w	adbc <ticker_worker+0x9c>
				ext_data->reschedule_state =
    afac:	f04f 0301 	mov.w	r3, #1
    afb0:	7213      	strb	r3, [r2, #8]
    afb2:	e705      	b.n	adc0 <ticker_worker+0xa0>
				(ticker->ticks_periodic == 0U) ||
    afb4:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
    afb8:	46a2      	mov	sl, r4
    afba:	e7d2      	b.n	af62 <ticker_worker+0x242>
					  0U :
    afbc:	46d0      	mov	r8, sl
    afbe:	e7bf      	b.n	af40 <ticker_worker+0x220>
			     (equal_priority && next_is_older))) {
    afc0:	f1ba 0f00 	cmp.w	sl, #0
    afc4:	d0e3      	beq.n	af8e <ticker_worker+0x26e>
    afc6:	e9dd b80b 	ldrd	fp, r8, [sp, #44]	; 0x2c
    afca:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    afce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    afd0:	464c      	mov	r4, r9
    afd2:	e6eb      	b.n	adac <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
    afd4:	9b06      	ldr	r3, [sp, #24]
    afd6:	9303      	str	r3, [sp, #12]
    afd8:	e6c4      	b.n	ad64 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    afda:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    afdc:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    afe0:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    afe2:	2d00      	cmp	r5, #0
    afe4:	f43f af05 	beq.w	adf2 <ticker_worker+0xd2>
					   ticks_expired -
    afe8:	6963      	ldr	r3, [r4, #20]
    afea:	eba8 0003 	sub.w	r0, r8, r3
    afee:	9b04      	ldr	r3, [sp, #16]
    aff0:	695b      	ldr	r3, [r3, #20]
    aff2:	4418      	add	r0, r3
			ticks_drift = 0U;
    aff4:	4611      	mov	r1, r2
			ticks_at_expire = (instance->ticks_current +
    aff6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    affa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    affc:	e73d      	b.n	ae7a <ticker_worker+0x15a>
    affe:	bf00      	nop

0000b000 <ticker_job>:
	if (instance->worker_trigger) {
    b000:	7fc3      	ldrb	r3, [r0, #31]
    b002:	2b00      	cmp	r3, #0
    b004:	f040 8434 	bne.w	b870 <ticker_job+0x870>
{
    b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    b00c:	7f82      	ldrb	r2, [r0, #30]
{
    b00e:	b08d      	sub	sp, #52	; 0x34
    b010:	4683      	mov	fp, r0
	if (instance->job_guard) {
    b012:	2a00      	cmp	r2, #0
    b014:	f040 808c 	bne.w	b130 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b018:	7a83      	ldrb	r3, [r0, #10]
    b01a:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    b01c:	2001      	movs	r0, #1
    b01e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b022:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    b024:	f8db 0014 	ldr.w	r0, [fp, #20]
    b028:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b02a:	f000 8443 	beq.w	b8b4 <ticker_job+0x8b4>
	uint8_t idx = *ticks_elapsed_index + 1;
    b02e:	3301      	adds	r3, #1
    b030:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    b032:	2b02      	cmp	r3, #2
		idx = 0U;
    b034:	bf08      	it	eq
    b036:	4613      	moveq	r3, r2
		ticks_elapsed =
    b038:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    b03c:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    b040:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    b044:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    b046:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    b048:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    b04a:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    b04c:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    b04e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    b052:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    b056:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    b05a:	f8db 3000 	ldr.w	r3, [fp]
    b05e:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    b060:	f8db 3004 	ldr.w	r3, [fp, #4]
    b064:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    b066:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    b068:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    b06a:	b2db      	uxtb	r3, r3
    b06c:	2a00      	cmp	r2, #0
    b06e:	f000 81d5 	beq.w	b41c <ticker_job+0x41c>
		flag_elapsed = 1U;
    b072:	2201      	movs	r2, #1
    b074:	920b      	str	r2, [sp, #44]	; 0x2c
    b076:	9a05      	ldr	r2, [sp, #20]
    b078:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    b07c:	2300      	movs	r3, #0
    b07e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    b080:	23ff      	movs	r3, #255	; 0xff
    b082:	9301      	str	r3, [sp, #4]
    b084:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    b086:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    b08a:	f89a c003 	ldrb.w	ip, [sl, #3]
    b08e:	f89a 7002 	ldrb.w	r7, [sl, #2]
    b092:	4567      	cmp	r7, ip
    b094:	d044      	beq.n	b120 <ticker_job+0x120>
			if (middle == user->count_user_op) {
    b096:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    b09a:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    b09c:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    b09e:	b2db      	uxtb	r3, r3
				middle = 0U;
    b0a0:	429a      	cmp	r2, r3
    b0a2:	bf08      	it	eq
    b0a4:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    b0a6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    b0aa:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    b0ae:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b0b2:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    b0b6:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    b0b8:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b0bc:	d942      	bls.n	b144 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b0be:	2808      	cmp	r0, #8
    b0c0:	d842      	bhi.n	b148 <ticker_job+0x148>
			ticker = &node[user_op->id];
    b0c2:	7861      	ldrb	r1, [r4, #1]
    b0c4:	9a00      	ldr	r2, [sp, #0]
    b0c6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    b0ca:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    b0ce:	786a      	ldrb	r2, [r5, #1]
    b0d0:	f895 e002 	ldrb.w	lr, [r5, #2]
    b0d4:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b0d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    b0dc:	d034      	beq.n	b148 <ticker_job+0x148>
			    (state == 0U) ||
    b0de:	2805      	cmp	r0, #5
    b0e0:	d041      	beq.n	b166 <ticker_job+0x166>
			if (state == 1U) {
    b0e2:	2a01      	cmp	r2, #1
    b0e4:	f040 8118 	bne.w	b318 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    b0e8:	2806      	cmp	r0, #6
    b0ea:	d006      	beq.n	b0fa <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    b0ec:	4658      	mov	r0, fp
    b0ee:	f7ff fcb3 	bl	aa58 <ticker_dequeue>
			ticker->req = ticker->ack;
    b0f2:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    b0f4:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    b0f6:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    b0f8:	7861      	ldrb	r1, [r4, #1]
    b0fa:	f89b 301c 	ldrb.w	r3, [fp, #28]
    b0fe:	428b      	cmp	r3, r1
    b100:	f000 80d9 	beq.w	b2b6 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    b104:	2000      	movs	r0, #0
    b106:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    b10a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    b10c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    b10e:	b10b      	cbz	r3, b114 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    b110:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b112:	4798      	blx	r3
		while (user->middle != user->last) {
    b114:	f89a c003 	ldrb.w	ip, [sl, #3]
    b118:	f89a 7002 	ldrb.w	r7, [sl, #2]
    b11c:	4567      	cmp	r7, ip
    b11e:	d1ba      	bne.n	b096 <ticker_job+0x96>
	while (count_user--) {
    b120:	9a05      	ldr	r2, [sp, #20]
    b122:	4552      	cmp	r2, sl
    b124:	f1aa 0308 	sub.w	r3, sl, #8
    b128:	f000 8107 	beq.w	b33a <ticker_job+0x33a>
    b12c:	469a      	mov	sl, r3
    b12e:	e7aa      	b.n	b086 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    b130:	6a44      	ldr	r4, [r0, #36]	; 0x24
    b132:	2104      	movs	r1, #4
    b134:	4603      	mov	r3, r0
    b136:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b138:	2004      	movs	r0, #4
    b13a:	46a4      	mov	ip, r4
}
    b13c:	b00d      	add	sp, #52	; 0x34
    b13e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b142:	4760      	bx	ip
    b144:	461f      	mov	r7, r3
    b146:	e7a4      	b.n	b092 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    b148:	2200      	movs	r2, #0
    b14a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    b14e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    b150:	2001      	movs	r0, #1
    b152:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    b154:	2a00      	cmp	r2, #0
    b156:	d0f5      	beq.n	b144 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    b158:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b15a:	4790      	blx	r2
		while (user->middle != user->last) {
    b15c:	f89a c003 	ldrb.w	ip, [sl, #3]
    b160:	f89a 7002 	ldrb.w	r7, [sl, #2]
    b164:	e795      	b.n	b092 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    b166:	6860      	ldr	r0, [r4, #4]
    b168:	b948      	cbnz	r0, b17e <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    b16a:	68a0      	ldr	r0, [r4, #8]
    b16c:	b938      	cbnz	r0, b17e <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    b16e:	68e0      	ldr	r0, [r4, #12]
    b170:	b928      	cbnz	r0, b17e <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    b172:	6920      	ldr	r0, [r4, #16]
    b174:	b918      	cbnz	r0, b17e <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
    b176:	6960      	ldr	r0, [r4, #20]
    b178:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    b17c:	d0e4      	beq.n	b148 <ticker_job+0x148>
			if (state == 1U) {
    b17e:	2a01      	cmp	r2, #1
    b180:	f040 80ca 	bne.w	b318 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b184:	4658      	mov	r0, fp
    b186:	f7ff fc67 	bl	aa58 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b18a:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b18e:	60a8      	str	r0, [r5, #8]
    b190:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b192:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    b194:	f00d ffb6 	bl	19104 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b198:	9b02      	ldr	r3, [sp, #8]
    b19a:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b19c:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b19e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b1a2:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    b1a4:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    b1a6:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    b1a8:	f240 80af 	bls.w	b30a <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
    b1ac:	696b      	ldr	r3, [r5, #20]
    b1ae:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    b1b0:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    b1b2:	f8d5 c004 	ldr.w	ip, [r5, #4]
    b1b6:	f1bc 0f00 	cmp.w	ip, #0
    b1ba:	d051      	beq.n	b260 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
    b1bc:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d04e      	beq.n	b260 <ticker_job+0x260>
		user_op->params.update.lazy--;
    b1c2:	3b01      	subs	r3, #1
    b1c4:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b1c6:	4594      	cmp	ip, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    b1c8:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    b1ca:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b1cc:	d223      	bcs.n	b216 <ticker_job+0x216>
    b1ce:	f10c 0e01 	add.w	lr, ip, #1
    b1d2:	f8cd 8018 	str.w	r8, [sp, #24]
    b1d6:	940a      	str	r4, [sp, #40]	; 0x28
    b1d8:	e018      	b.n	b20c <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
    b1da:	6a69      	ldr	r1, [r5, #36]	; 0x24
    b1dc:	f8df 8228 	ldr.w	r8, [pc, #552]	; b408 <ticker_job+0x408>
    b1e0:	4c8a      	ldr	r4, [pc, #552]	; (b40c <ticker_job+0x40c>)
    b1e2:	4488      	add	r8, r1
    b1e4:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    b1e6:	bf84      	itt	hi
    b1e8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    b1ec:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    b1f0:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    b1f2:	6a2c      	ldr	r4, [r5, #32]
    b1f4:	bf94      	ite	ls
    b1f6:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    b1f8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    b1fc:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    b1fe:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    b200:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    b202:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b204:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    b206:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    b208:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b20a:	d201      	bcs.n	b210 <ticker_job+0x210>
    b20c:	429f      	cmp	r7, r3
    b20e:	d3e4      	bcc.n	b1da <ticker_job+0x1da>
    b210:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b216:	42bb      	cmp	r3, r7
    b218:	d221      	bcs.n	b25e <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
    b21a:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b21e:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    b222:	9006      	str	r0, [sp, #24]
    b224:	940a      	str	r4, [sp, #40]	; 0x28
    b226:	e005      	b.n	b234 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b228:	3301      	adds	r3, #1
    b22a:	b29b      	uxth	r3, r3
    b22c:	4660      	mov	r0, ip
    b22e:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    b230:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b232:	d011      	beq.n	b258 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
    b234:	4874      	ldr	r0, [pc, #464]	; (b408 <ticker_job+0x408>)
    b236:	4c75      	ldr	r4, [pc, #468]	; (b40c <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
    b238:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    b23a:	1808      	adds	r0, r1, r0
    b23c:	42a0      	cmp	r0, r4
    b23e:	d8f3      	bhi.n	b228 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b240:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    b242:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b244:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b248:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b24a:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b24e:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b250:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    b254:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b256:	d1ed      	bne.n	b234 <ticker_job+0x234>
    b258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b25a:	6269      	str	r1, [r5, #36]	; 0x24
    b25c:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    b25e:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    b260:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    b262:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    b264:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    b266:	440a      	add	r2, r1
    b268:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    b26a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    b26c:	4403      	add	r3, r0
    b26e:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    b270:	b11a      	cbz	r2, b27a <ticker_job+0x27a>
    b272:	6813      	ldr	r3, [r2, #0]
    b274:	b10b      	cbz	r3, b27a <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
    b276:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    b278:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b27a:	464a      	mov	r2, r9
    b27c:	9902      	ldr	r1, [sp, #8]
    b27e:	4628      	mov	r0, r5
    b280:	f7ff fc24 	bl	aacc <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b284:	68e2      	ldr	r2, [r4, #12]
    b286:	69ab      	ldr	r3, [r5, #24]
    b288:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b28a:	6922      	ldr	r2, [r4, #16]
    b28c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b28e:	bf8c      	ite	hi
    b290:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    b292:	2300      	movls	r3, #0
    b294:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    b296:	7da3      	ldrb	r3, [r4, #22]
    b298:	b103      	cbz	r3, b29c <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
    b29a:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    b29c:	7de3      	ldrb	r3, [r4, #23]
    b29e:	b113      	cbz	r3, b2a6 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    b2a0:	3b01      	subs	r3, #1
    b2a2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    b2a6:	9b01      	ldr	r3, [sp, #4]
    b2a8:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    b2aa:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    b2ac:	7862      	ldrb	r2, [r4, #1]
    b2ae:	9201      	str	r2, [sp, #4]
		ticker->req++;
    b2b0:	3301      	adds	r3, #1
    b2b2:	706b      	strb	r3, [r5, #1]
    b2b4:	e726      	b.n	b104 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
    b2b6:	23ff      	movs	r3, #255	; 0xff
    b2b8:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    b2bc:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    b2c0:	2b06      	cmp	r3, #6
    b2c2:	d013      	beq.n	b2ec <ticker_job+0x2ec>
    b2c4:	2b08      	cmp	r3, #8
    b2c6:	d011      	beq.n	b2ec <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
    b2c8:	f00d ff1c 	bl	19104 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    b2cc:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    b2d0:	1a83      	subs	r3, r0, r2
    b2d2:	021d      	lsls	r5, r3, #8
    b2d4:	d410      	bmi.n	b2f8 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
    b2d6:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b2d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    b2dc:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    b2de:	f8db 2018 	ldr.w	r2, [fp, #24]
    b2e2:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    b2e4:	bf88      	it	hi
    b2e6:	f8cb 3018 	strhi.w	r3, [fp, #24]
    b2ea:	e70b      	b.n	b104 <ticker_job+0x104>
				ticks_at_yield =
    b2ec:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    b2ee:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    b2f2:	1a83      	subs	r3, r0, r2
    b2f4:	021d      	lsls	r5, r3, #8
    b2f6:	d5ee      	bpl.n	b2d6 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b2f8:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    b2fa:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b2fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    b300:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    b302:	bf34      	ite	cc
    b304:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    b306:	2300      	movcs	r3, #0
    b308:	e7e9      	b.n	b2de <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b30a:	696b      	ldr	r3, [r5, #20]
    b30c:	1bda      	subs	r2, r3, r7
    b30e:	1853      	adds	r3, r2, r1
    b310:	9304      	str	r3, [sp, #16]
    b312:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    b314:	2200      	movs	r2, #0
    b316:	e74c      	b.n	b1b2 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b318:	2104      	movs	r1, #4
    b31a:	465b      	mov	r3, fp
    b31c:	2201      	movs	r2, #1
    b31e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b322:	4608      	mov	r0, r1
    b324:	47a0      	blx	r4
	while (count_user--) {
    b326:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    b328:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    b32c:	2301      	movs	r3, #1
	while (count_user--) {
    b32e:	4552      	cmp	r2, sl
				pending = 1U;
    b330:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    b332:	f1aa 0308 	sub.w	r3, sl, #8
    b336:	f47f aef9 	bne.w	b12c <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b33a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    b33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b340:	1a9b      	subs	r3, r3, r2
    b342:	bf18      	it	ne
    b344:	2301      	movne	r3, #1
    b346:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    b348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b34a:	2b00      	cmp	r3, #0
    b34c:	d16a      	bne.n	b424 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
    b34e:	9901      	ldr	r1, [sp, #4]
    b350:	4658      	mov	r0, fp
    b352:	f7ff fbdf 	bl	ab14 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b356:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b35a:	9300      	str	r3, [sp, #0]
    b35c:	9b00      	ldr	r3, [sp, #0]
    b35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b360:	4293      	cmp	r3, r2
    b362:	f000 826f 	beq.w	b844 <ticker_job+0x844>
	if (!pending) {
    b366:	9b08      	ldr	r3, [sp, #32]
    b368:	2b00      	cmp	r3, #0
    b36a:	f000 81e2 	beq.w	b732 <ticker_job+0x732>
	if (instance->ticker_id_head == TICKER_NULL) {
    b36e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b372:	9300      	str	r3, [sp, #0]
    b374:	9b00      	ldr	r3, [sp, #0]
    b376:	2bff      	cmp	r3, #255	; 0xff
    b378:	f000 82c7 	beq.w	b90a <ticker_job+0x90a>
	if (ticker_id_old_head == TICKER_NULL) {
    b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b37e:	2bff      	cmp	r3, #255	; 0xff
    b380:	f000 82da 	beq.w	b938 <ticker_job+0x938>
	ticker = &instance->nodes[instance->ticker_id_head];
    b384:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    b386:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    b38a:	f8df 9084 	ldr.w	r9, [pc, #132]	; b410 <ticker_job+0x410>
    b38e:	f8df 8084 	ldr.w	r8, [pc, #132]	; b414 <ticker_job+0x414>
    b392:	4f21      	ldr	r7, [pc, #132]	; (b418 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
    b394:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    b398:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    b39c:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    b39e:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    b3a0:	f00d feb0 	bl	19104 <cntr_cnt_get>
		cc = instance->ticks_current;
    b3a4:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b3a8:	1b03      	subs	r3, r0, r4
    b3aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    b3ae:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    b3b0:	42b3      	cmp	r3, r6
    b3b2:	bf2c      	ite	cs
    b3b4:	18e4      	addcs	r4, r4, r3
    b3b6:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    b3b8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    b3bc:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    b3c0:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    b3c2:	4620      	mov	r0, r4
    b3c4:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    b3c6:	f00d fe9d 	bl	19104 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b3ca:	eba0 030a 	sub.w	r3, r0, sl
    b3ce:	eba4 040a 	sub.w	r4, r4, sl
    b3d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    b3d6:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b3d8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    b3dc:	42a3      	cmp	r3, r4
		i--;
    b3de:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    b3e2:	f240 8236 	bls.w	b852 <ticker_job+0x852>
		LL_ASSERT(i);
    b3e6:	2d00      	cmp	r5, #0
    b3e8:	d1da      	bne.n	b3a0 <ticker_job+0x3a0>
    b3ea:	f640 133e 	movw	r3, #2366	; 0x93e
    b3ee:	464a      	mov	r2, r9
    b3f0:	4641      	mov	r1, r8
    b3f2:	4638      	mov	r0, r7
    b3f4:	f014 f993 	bl	1f71e <printk>
    b3f8:	4040      	eors	r0, r0
    b3fa:	f380 8811 	msr	BASEPRI, r0
    b3fe:	f04f 0003 	mov.w	r0, #3
    b402:	df02      	svc	2
    b404:	e7cc      	b.n	b3a0 <ticker_job+0x3a0>
    b406:	bf00      	nop
    b408:	ff172b5a 	.word	0xff172b5a
    b40c:	7f172b59 	.word	0x7f172b59
    b410:	000250b0 	.word	0x000250b0
    b414:	0002515c 	.word	0x0002515c
    b418:	000250f0 	.word	0x000250f0
	pending = 0U;
    b41c:	9b06      	ldr	r3, [sp, #24]
    b41e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    b420:	23ff      	movs	r3, #255	; 0xff
    b422:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    b424:	f00d fe6e 	bl	19104 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b428:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    b42a:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b42e:	1ac3      	subs	r3, r0, r3
    b430:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    b434:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    b436:	f8db 3000 	ldr.w	r3, [fp]
    b43a:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    b43c:	d04f      	beq.n	b4de <ticker_job+0x4de>
	ticks_expired = 0U;
    b43e:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
    b440:	f8df 8274 	ldr.w	r8, [pc, #628]	; b6b8 <ticker_job+0x6b8>
    b444:	f8df 9274 	ldr.w	r9, [pc, #628]	; b6bc <ticker_job+0x6bc>
	while (instance->ticker_id_head != TICKER_NULL) {
    b448:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    b44a:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
    b44c:	9a00      	ldr	r2, [sp, #0]
    b44e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b452:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    b456:	011b      	lsls	r3, r3, #4
    b458:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    b45a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b45c:	429f      	cmp	r7, r3
    b45e:	f0c0 8247 	bcc.w	b8f0 <ticker_job+0x8f0>
		ticks_expired += ticks_to_expire;
    b462:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    b464:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
    b468:	441a      	add	r2, r3
    b46a:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b46c:	f8db 2018 	ldr.w	r2, [fp, #24]
    b470:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    b472:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    b476:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b47a:	bf25      	ittet	cs
    b47c:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    b480:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    b484:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    b486:	2300      	movcs	r3, #0
    b488:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    b48c:	78a1      	ldrb	r1, [r4, #2]
    b48e:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b490:	69a2      	ldr	r2, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    b492:	1a5b      	subs	r3, r3, r1
    b494:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b496:	b112      	cbz	r2, b49e <ticker_job+0x49e>
    b498:	2b02      	cmp	r3, #2
    b49a:	f000 8138 	beq.w	b70e <ticker_job+0x70e>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b49e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
    b4a0:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
    b4a2:	2200      	movs	r2, #0
    b4a4:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b4a6:	9a00      	ldr	r2, [sp, #0]
    b4a8:	5d52      	ldrb	r2, [r2, r5]
    b4aa:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b4ae:	6865      	ldr	r5, [r4, #4]
    b4b0:	2d00      	cmp	r5, #0
    b4b2:	d151      	bne.n	b558 <ticker_job+0x558>
    b4b4:	b110      	cbz	r0, b4bc <ticker_job+0x4bc>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    b4b6:	7a02      	ldrb	r2, [r0, #8]
    b4b8:	2a01      	cmp	r2, #1
    b4ba:	d054      	beq.n	b566 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
    b4bc:	b153      	cbz	r3, b4d4 <ticker_job+0x4d4>
    b4be:	2b01      	cmp	r3, #1
    b4c0:	d002      	beq.n	b4c8 <ticker_job+0x4c8>
    b4c2:	f1be 0f00 	cmp.w	lr, #0
    b4c6:	d005      	beq.n	b4d4 <ticker_job+0x4d4>
			    ticker->fp_op_func) {
    b4c8:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    b4ca:	b11b      	cbz	r3, b4d4 <ticker_job+0x4d4>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    b4cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b4ce:	2001      	movs	r0, #1
    b4d0:	4798      	blx	r3
			ticker->req = ticker->ack;
    b4d2:	78a1      	ldrb	r1, [r4, #2]
    b4d4:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    b4d6:	f89b 601d 	ldrb.w	r6, [fp, #29]
    b4da:	2eff      	cmp	r6, #255	; 0xff
    b4dc:	d1b6      	bne.n	b44c <ticker_job+0x44c>
			flag_compare_update = 1U;
    b4de:	9b06      	ldr	r3, [sp, #24]
    b4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    b4e2:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    b4e4:	4296      	cmp	r6, r2
    b4e6:	bf18      	it	ne
    b4e8:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    b4ea:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    b4ec:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    b4ee:	f7ff fb11 	bl	ab14 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    b4f2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    b4f6:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    b4fa:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    b4fe:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    b500:	9b00      	ldr	r3, [sp, #0]
    b502:	2bff      	cmp	r3, #255	; 0xff
    b504:	d00f      	beq.n	b526 <ticker_job+0x526>
    b506:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    b508:	b233      	sxth	r3, r6
    b50a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b50e:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    b512:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    b514:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    b516:	b117      	cbz	r7, b51e <ticker_job+0x51e>
    b518:	7a39      	ldrb	r1, [r7, #8]
    b51a:	2901      	cmp	r1, #1
    b51c:	d03b      	beq.n	b596 <ticker_job+0x596>
			ticker_id_head = ticker->next;
    b51e:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    b522:	2eff      	cmp	r6, #255	; 0xff
    b524:	d1f0      	bne.n	b508 <ticker_job+0x508>
	return rescheduled;
    b526:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    b52a:	2a00      	cmp	r2, #0
    b52c:	f43f af16 	beq.w	b35c <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b530:	9b00      	ldr	r3, [sp, #0]
    b532:	9909      	ldr	r1, [sp, #36]	; 0x24
    b534:	428b      	cmp	r3, r1
    b536:	f47f af16 	bne.w	b366 <ticker_job+0x366>
	if (!pending) {
    b53a:	9b08      	ldr	r3, [sp, #32]
    b53c:	2b00      	cmp	r3, #0
    b53e:	f47f af19 	bne.w	b374 <ticker_job+0x374>
	count_user = instance->count_user;
    b542:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    b546:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    b54a:	1e5f      	subs	r7, r3, #1
    b54c:	b2ff      	uxtb	r7, r7
    b54e:	2b00      	cmp	r3, #0
    b550:	f43f af10 	beq.w	b374 <ticker_job+0x374>
			flag_compare_update = 1U;
    b554:	9206      	str	r2, [sp, #24]
    b556:	e0f7      	b.n	b748 <ticker_job+0x748>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    b558:	2800      	cmp	r0, #0
    b55a:	f000 80a0 	beq.w	b69e <ticker_job+0x69e>
    b55e:	7a03      	ldrb	r3, [r0, #8]
    b560:	2b01      	cmp	r3, #1
    b562:	f040 809c 	bne.w	b69e <ticker_job+0x69e>
				ticker->req = ticker->ack;
    b566:	7061      	strb	r1, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    b568:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b56a:	9b07      	ldr	r3, [sp, #28]
    b56c:	9a02      	ldr	r2, [sp, #8]
    b56e:	f8db 1014 	ldr.w	r1, [fp, #20]
    b572:	189a      	adds	r2, r3, r2
    b574:	4620      	mov	r0, r4
    b576:	f7ff faa9 	bl	aacc <ticks_to_expire_prep>
			ticker->next = *insert_head;
    b57a:	9a00      	ldr	r2, [sp, #0]
    b57c:	9904      	ldr	r1, [sp, #16]
    b57e:	9b01      	ldr	r3, [sp, #4]
    b580:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    b582:	7863      	ldrb	r3, [r4, #1]
    b584:	9601      	str	r6, [sp, #4]
    b586:	3301      	adds	r3, #1
    b588:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    b58a:	f89b 601d 	ldrb.w	r6, [fp, #29]
    b58e:	2eff      	cmp	r6, #255	; 0xff
    b590:	f47f af5c 	bne.w	b44c <ticker_job+0x44c>
    b594:	e7a3      	b.n	b4de <ticker_job+0x4de>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b596:	9b01      	ldr	r3, [sp, #4]
    b598:	7f1b      	ldrb	r3, [r3, #28]
    b59a:	2bff      	cmp	r3, #255	; 0xff
    b59c:	d04a      	beq.n	b634 <ticker_job+0x634>
			instance->ticks_slot_previous > ticks_elapsed) {
    b59e:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b5a0:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    b5a2:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b5a4:	4293      	cmp	r3, r2
    b5a6:	d945      	bls.n	b634 <ticker_job+0x634>
			window_start_ticks = instance->ticks_slot_previous -
    b5a8:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b5ac:	687b      	ldr	r3, [r7, #4]
    b5ae:	9302      	str	r3, [sp, #8]
    b5b0:	461a      	mov	r2, r3
    b5b2:	683b      	ldr	r3, [r7, #0]
		ticker_id_iter = nodes[ticker_id_head].next;
    b5b4:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b5b8:	429a      	cmp	r2, r3
    b5ba:	f080 80a1 	bcs.w	b700 <ticker_job+0x700>
		while (ticker_id_iter != TICKER_NULL &&
    b5be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    b5c2:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    b5c6:	f000 809b 	beq.w	b700 <ticker_job+0x700>
		       ticks_start_offset + ticker->ticks_slot <=
    b5ca:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    b5ce:	45f0      	cmp	r8, lr
    b5d0:	f04f 0300 	mov.w	r3, #0
    b5d4:	d331      	bcc.n	b63a <ticker_job+0x63a>
    b5d6:	46f1      	mov	r9, lr
    b5d8:	465a      	mov	r2, fp
    b5da:	461c      	mov	r4, r3
    b5dc:	e01c      	b.n	b618 <ticker_job+0x618>
			if (node->ticks_to_expire >
    b5de:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    b5e0:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    b5e2:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    b5e4:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    b5e6:	d909      	bls.n	b5fc <ticker_job+0x5fc>
				window_end_ticks =
    b5e8:	4543      	cmp	r3, r8
    b5ea:	bf28      	it	cs
    b5ec:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    b5ee:	4599      	cmp	r9, r3
    b5f0:	d204      	bcs.n	b5fc <ticker_job+0x5fc>
			if (ticks_to_expire != 0U &&
    b5f2:	ebb3 030e 	subs.w	r3, r3, lr
    b5f6:	d001      	beq.n	b5fc <ticker_job+0x5fc>
    b5f8:	459c      	cmp	ip, r3
    b5fa:	d91e      	bls.n	b63a <ticker_job+0x63a>
			window_start_ticks  = node->ticks_to_expire +
    b5fc:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    b5fe:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    b602:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    b606:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    b608:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    b60c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    b60e:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    b612:	d012      	beq.n	b63a <ticker_job+0x63a>
    b614:	45c8      	cmp	r8, r9
    b616:	d310      	bcc.n	b63a <ticker_job+0x63a>
			node = &nodes[ticker_id_iter];
    b618:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b61c:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    b620:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    b622:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b624:	2900      	cmp	r1, #0
    b626:	d0da      	beq.n	b5de <ticker_job+0x5de>
    b628:	7a09      	ldrb	r1, [r1, #8]
    b62a:	2901      	cmp	r1, #1
    b62c:	d1d7      	bne.n	b5de <ticker_job+0x5de>
				ticker_id_iter = node->next;
    b62e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    b632:	e7eb      	b.n	b60c <ticker_job+0x60c>
		window_start_ticks = 0U;
    b634:	f04f 0c00 	mov.w	ip, #0
    b638:	e7b8      	b.n	b5ac <ticker_job+0x5ac>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    b63a:	68aa      	ldr	r2, [r5, #8]
    b63c:	9902      	ldr	r1, [sp, #8]
    b63e:	1a8a      	subs	r2, r1, r2
    b640:	441a      	add	r2, r3
    b642:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    b644:	465c      	mov	r4, fp
    b646:	60ab      	str	r3, [r5, #8]
    b648:	f04f 0eff 	mov.w	lr, #255	; 0xff
    b64c:	e000      	b.n	b650 <ticker_job+0x650>
    b64e:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    b650:	b221      	sxth	r1, r4
    b652:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b656:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    b65a:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    b65c:	f8dc 0008 	ldr.w	r0, [ip, #8]
    b660:	4298      	cmp	r0, r3
    b662:	f080 813b 	bcs.w	b8dc <ticker_job+0x8dc>
				ticker->ticks_to_expire -=
    b666:	1a1b      	subs	r3, r3, r0
    b668:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    b66a:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    b66e:	2aff      	cmp	r2, #255	; 0xff
    b670:	46a6      	mov	lr, r4
    b672:	d1ec      	bne.n	b64e <ticker_job+0x64e>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b674:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    b676:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b67a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b67e:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b680:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b684:	f81a 3001 	ldrb.w	r3, [sl, r1]
    b688:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    b68a:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    b68e:	8beb      	ldrh	r3, [r5, #30]
    b690:	3b01      	subs	r3, #1
    b692:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    b694:	f04f 0302 	mov.w	r3, #2
    b698:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    b69a:	2201      	movs	r2, #1
    b69c:	e730      	b.n	b500 <ticker_job+0x500>
				if (!ticker->lazy_current) {
    b69e:	f1be 0f00 	cmp.w	lr, #0
    b6a2:	d143      	bne.n	b72c <ticker_job+0x72c>
					lazy_periodic = ticker->lazy_periodic;
    b6a4:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    b6a8:	4672      	mov	r2, lr
				while (count--) {
    b6aa:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b6ac:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    b6b0:	2100      	movs	r1, #0
    b6b2:	9005      	str	r0, [sp, #20]
    b6b4:	e009      	b.n	b6ca <ticker_job+0x6ca>
    b6b6:	bf00      	nop
    b6b8:	ff172b5a 	.word	0xff172b5a
    b6bc:	7f172b59 	.word	0x7f172b59
    b6c0:	4628      	mov	r0, r5
				while (count--) {
    b6c2:	3a01      	subs	r2, #1
					ticks_to_expire +=
    b6c4:	4401      	add	r1, r0
				while (count--) {
    b6c6:	1c50      	adds	r0, r2, #1
    b6c8:	d00f      	beq.n	b6ea <ticker_job+0x6ea>
	ticker->remainder_current += ticker->remainder_periodic;
    b6ca:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    b6cc:	eb03 0008 	add.w	r0, r3, r8
    b6d0:	4548      	cmp	r0, r9
    b6d2:	d8f5      	bhi.n	b6c0 <ticker_job+0x6c0>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b6d4:	9805      	ldr	r0, [sp, #20]
    b6d6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    b6da:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b6dc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    b6e0:	4401      	add	r1, r0
				while (count--) {
    b6e2:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b6e4:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    b6e8:	d1ef      	bne.n	b6ca <ticker_job+0x6ca>
				} else if (!ticker->must_expire) {
    b6ea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    b6ee:	6263      	str	r3, [r4, #36]	; 0x24
    b6f0:	2a00      	cmp	r2, #0
    b6f2:	f000 80be 	beq.w	b872 <ticker_job+0x872>
				lazy = 0U;
    b6f6:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    b6f8:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    b6fa:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    b6fc:	83e2      	strh	r2, [r4, #30]
    b6fe:	e734      	b.n	b56a <ticker_job+0x56a>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    b700:	68ab      	ldr	r3, [r5, #8]
    b702:	9a02      	ldr	r2, [sp, #8]
    b704:	1ad3      	subs	r3, r2, r3
    b706:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    b708:	2300      	movs	r3, #0
    b70a:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    b70c:	e7bf      	b.n	b68e <ticker_job+0x68e>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b70e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b710:	f1be 0f00 	cmp.w	lr, #0
    b714:	f47f aec4 	bne.w	b4a0 <ticker_job+0x4a0>
    b718:	b118      	cbz	r0, b722 <ticker_job+0x722>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b71a:	7a05      	ldrb	r5, [r0, #8]
    b71c:	2d01      	cmp	r5, #1
    b71e:	f000 80ff 	beq.w	b920 <ticker_job+0x920>
			instance->ticks_slot_previous = ticker->ticks_slot;
    b722:	f8cb 2018 	str.w	r2, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    b726:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b72a:	e6b9      	b.n	b4a0 <ticker_job+0x4a0>
					ticker->req = ticker->ack;
    b72c:	7061      	strb	r1, [r4, #1]
    b72e:	2200      	movs	r2, #0
    b730:	e7bb      	b.n	b6aa <ticker_job+0x6aa>
	count_user = instance->count_user;
    b732:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    b736:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    b73a:	1e5f      	subs	r7, r3, #1
    b73c:	b2ff      	uxtb	r7, r7
    b73e:	2b00      	cmp	r3, #0
    b740:	f43f ae15 	beq.w	b36e <ticker_job+0x36e>
		flag_compare_update = 1U;
    b744:	2301      	movs	r3, #1
    b746:	9306      	str	r3, [sp, #24]
    b748:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    b74c:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
    b74e:	f04f 0a01 	mov.w	sl, #1
    b752:	9600      	str	r6, [sp, #0]
		while (user->first != user->last) {
    b754:	787b      	ldrb	r3, [r7, #1]
    b756:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    b758:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
    b75a:	429a      	cmp	r2, r3
    b75c:	d10c      	bne.n	b778 <ticker_job+0x778>
    b75e:	e060      	b.n	b822 <ticker_job+0x822>
	switch (uop->op) {
    b760:	2b01      	cmp	r3, #1
    b762:	d058      	beq.n	b816 <ticker_job+0x816>
			first = user->first + 1;
    b764:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    b766:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    b768:	3301      	adds	r3, #1
    b76a:	b2db      	uxtb	r3, r3
				first = 0U;
    b76c:	4299      	cmp	r1, r3
    b76e:	bf08      	it	eq
    b770:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    b772:	429a      	cmp	r2, r3
			user->first = first;
    b774:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    b776:	d054      	beq.n	b822 <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b778:	b21b      	sxth	r3, r3
    b77a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b77e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b782:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
    b786:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    b78a:	2b02      	cmp	r3, #2
    b78c:	d017      	beq.n	b7be <ticker_job+0x7be>
    b78e:	2b03      	cmp	r3, #3
    b790:	d1e6      	bne.n	b760 <ticker_job+0x760>
		if (uop->id < instance->count_node) {
    b792:	7843      	ldrb	r3, [r0, #1]
    b794:	f89b 2008 	ldrb.w	r2, [fp, #8]
    b798:	429a      	cmp	r2, r3
    b79a:	d93f      	bls.n	b81c <ticker_job+0x81c>
			node[uop->id].priority =
    b79c:	f8db 2000 	ldr.w	r2, [fp]
    b7a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b7a4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    b7a8:	7902      	ldrb	r2, [r0, #4]
    b7aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    b7ae:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    b7b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    b7b2:	b113      	cbz	r3, b7ba <ticker_job+0x7ba>
		fp_op_func(uop->status, uop->op_context);
    b7b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b7b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    b7b8:	4798      	blx	r3
    b7ba:	78fa      	ldrb	r2, [r7, #3]
    b7bc:	e7d2      	b.n	b764 <ticker_job+0x764>
		ticker_by_next_slot_get(instance,
    b7be:	e9d0 e101 	ldrd	lr, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    b7c2:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
    b7c6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	node = instance->nodes;
    b7ca:	f8db c000 	ldr.w	ip, [fp]
	    (*ticks_current != instance->ticks_current)) {
    b7ce:	f8db 4014 	ldr.w	r4, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    b7d2:	2aff      	cmp	r2, #255	; 0xff
    b7d4:	d002      	beq.n	b7dc <ticker_job+0x7dc>
    b7d6:	680b      	ldr	r3, [r1, #0]
    b7d8:	42a3      	cmp	r3, r4
    b7da:	d02b      	beq.n	b834 <ticker_job+0x834>
		_ticker_id_head = instance->ticker_id_head;
    b7dc:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    b7e0:	600c      	str	r4, [r1, #0]
		_ticks_to_expire = 0U;
    b7e2:	2400      	movs	r4, #0
	while (_ticker_id_head != TICKER_NULL) {
    b7e4:	2aff      	cmp	r2, #255	; 0xff
    b7e6:	d012      	beq.n	b80e <ticker_job+0x80e>
    b7e8:	4681      	mov	r9, r0
    b7ea:	e005      	b.n	b7f8 <ticker_job+0x7f8>
		_ticker_id_head = ticker->next;
    b7ec:	f81c 2003 	ldrb.w	r2, [ip, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
    b7f0:	6889      	ldr	r1, [r1, #8]
	while (_ticker_id_head != TICKER_NULL) {
    b7f2:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
    b7f4:	440c      	add	r4, r1
	while (_ticker_id_head != TICKER_NULL) {
    b7f6:	d01b      	beq.n	b830 <ticker_job+0x830>
		ticker = &node[_ticker_id_head];
    b7f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    b7fc:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
    b800:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
    b802:	6988      	ldr	r0, [r1, #24]
    b804:	2800      	cmp	r0, #0
    b806:	d0f1      	beq.n	b7ec <ticker_job+0x7ec>
		_ticks_to_expire += ticker->ticks_to_expire;
    b808:	688b      	ldr	r3, [r1, #8]
    b80a:	4648      	mov	r0, r9
    b80c:	441c      	add	r4, r3
	*ticker_id_head = _ticker_id_head;
    b80e:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
    b812:	f8c8 4000 	str.w	r4, [r8]
		fp_op_func = uop->fp_op_func;
    b816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    b818:	6285      	str	r5, [r0, #40]	; 0x28
		break;
    b81a:	e7ca      	b.n	b7b2 <ticker_job+0x7b2>
			uop->status = TICKER_STATUS_FAILURE;
    b81c:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    b820:	e7c6      	b.n	b7b0 <ticker_job+0x7b0>
	while (count_user--) {
    b822:	9a00      	ldr	r2, [sp, #0]
    b824:	42ba      	cmp	r2, r7
    b826:	f1a7 0308 	sub.w	r3, r7, #8
    b82a:	d00e      	beq.n	b84a <ticker_job+0x84a>
    b82c:	461f      	mov	r7, r3
    b82e:	e791      	b.n	b754 <ticker_job+0x754>
    b830:	4648      	mov	r0, r9
    b832:	e7ec      	b.n	b80e <ticker_job+0x80e>
		ticker = &node[_ticker_id_head];
    b834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b838:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    b83a:	f8d8 4000 	ldr.w	r4, [r8]
		_ticker_id_head = ticker->next;
    b83e:	f81c 2003 	ldrb.w	r2, [ip, r3]
    b842:	e7cf      	b.n	b7e4 <ticker_job+0x7e4>
	if (!pending) {
    b844:	9b08      	ldr	r3, [sp, #32]
    b846:	2b00      	cmp	r3, #0
    b848:	d055      	beq.n	b8f6 <ticker_job+0x8f6>
	if (flag_compare_update) {
    b84a:	9b06      	ldr	r3, [sp, #24]
    b84c:	2b00      	cmp	r3, #0
    b84e:	f47f ad8e 	bne.w	b36e <ticker_job+0x36e>
	if (instance->worker_trigger) {
    b852:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    b856:	2200      	movs	r2, #0
    b858:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    b85c:	b12b      	cbz	r3, b86a <ticker_job+0x86a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b85e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b862:	465b      	mov	r3, fp
    b864:	2201      	movs	r2, #1
    b866:	2103      	movs	r1, #3
    b868:	e466      	b.n	b138 <ticker_job+0x138>
}
    b86a:	b00d      	add	sp, #52	; 0x34
    b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b870:	4770      	bx	lr
					while (ticks_to_expire <
    b872:	458a      	cmp	sl, r1
    b874:	f67f af40 	bls.w	b6f8 <ticker_job+0x6f8>
    b878:	1c68      	adds	r0, r5, #1
    b87a:	9405      	str	r4, [sp, #20]
    b87c:	4604      	mov	r4, r0
    b87e:	e005      	b.n	b88c <ticker_job+0x88c>
    b880:	4628      	mov	r0, r5
						ticks_to_expire +=
    b882:	4401      	add	r1, r0
						lazy++;
    b884:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b886:	458a      	cmp	sl, r1
						lazy++;
    b888:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b88a:	d910      	bls.n	b8ae <ticker_job+0x8ae>
	ticker->remainder_current += ticker->remainder_periodic;
    b88c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    b88e:	eb03 0008 	add.w	r0, r3, r8
    b892:	4548      	cmp	r0, r9
    b894:	d8f4      	bhi.n	b880 <ticker_job+0x880>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b896:	4620      	mov	r0, r4
    b898:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    b89c:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b89e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    b8a2:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b8a4:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b8a6:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    b8aa:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b8ac:	d8ee      	bhi.n	b88c <ticker_job+0x88c>
    b8ae:	9c05      	ldr	r4, [sp, #20]
    b8b0:	6263      	str	r3, [r4, #36]	; 0x24
    b8b2:	e721      	b.n	b6f8 <ticker_job+0x6f8>
	ticker_id_old_head = instance->ticker_id_head;
    b8b4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    b8b8:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    b8bc:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    b8be:	f8db 3000 	ldr.w	r3, [fp]
    b8c2:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    b8c4:	f8db 3004 	ldr.w	r3, [fp, #4]
    b8c8:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    b8ca:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    b8cc:	9108      	str	r1, [sp, #32]
	while (count_user--) {
    b8ce:	b2db      	uxtb	r3, r3
    b8d0:	2900      	cmp	r1, #0
    b8d2:	d03f      	beq.n	b954 <ticker_job+0x954>
		flag_elapsed = 0U;
    b8d4:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    b8d6:	9203      	str	r2, [sp, #12]
    b8d8:	f7ff bbcd 	b.w	b076 <ticker_job+0x76>
				node->ticks_to_expire -=
    b8dc:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    b8de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    b8e2:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    b8e6:	f43f aed2 	beq.w	b68e <ticker_job+0x68e>
    b8ea:	fa0f f18e 	sxth.w	r1, lr
    b8ee:	e6c1      	b.n	b674 <ticker_job+0x674>
			ticker->ticks_to_expire -= ticks_elapsed;
    b8f0:	1bdb      	subs	r3, r3, r7
    b8f2:	60a3      	str	r3, [r4, #8]
			break;
    b8f4:	e5f3      	b.n	b4de <ticker_job+0x4de>
	count_user = instance->count_user;
    b8f6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    b8fa:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    b8fe:	1e5f      	subs	r7, r3, #1
    b900:	b2ff      	uxtb	r7, r7
    b902:	2b00      	cmp	r3, #0
    b904:	f47f af20 	bne.w	b748 <ticker_job+0x748>
    b908:	e79f      	b.n	b84a <ticker_job+0x84a>
		if (cntr_stop() == 0) {
    b90a:	f00d fbd5 	bl	190b8 <cntr_stop>
    b90e:	2800      	cmp	r0, #0
    b910:	d19f      	bne.n	b852 <ticker_job+0x852>
			instance->ticks_slot_previous = 0U;
    b912:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    b916:	f00d fbf5 	bl	19104 <cntr_cnt_get>
    b91a:	f8cb 0014 	str.w	r0, [fp, #20]
    b91e:	e798      	b.n	b852 <ticker_job+0x852>
		instance->ticker_id_head = ticker->next;
    b920:	9a00      	ldr	r2, [sp, #0]
    b922:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
    b924:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b928:	5d52      	ldrb	r2, [r2, r5]
    b92a:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b92e:	6862      	ldr	r2, [r4, #4]
    b930:	2a00      	cmp	r2, #0
    b932:	f43f adc0 	beq.w	b4b6 <ticker_job+0x4b6>
    b936:	e616      	b.n	b566 <ticker_job+0x566>
		ticks_current = cntr_cnt_get();
    b938:	f00d fbe4 	bl	19104 <cntr_cnt_get>
    b93c:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    b93e:	f00d fbab 	bl	19098 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    b942:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b946:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    b948:	2800      	cmp	r0, #0
    b94a:	f47f ad1b 	bne.w	b384 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
    b94e:	f8cb 4014 	str.w	r4, [fp, #20]
    b952:	e517      	b.n	b384 <ticker_job+0x384>
	insert_head = TICKER_NULL;
    b954:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
    b956:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
    b958:	9301      	str	r3, [sp, #4]
    b95a:	e4f8      	b.n	b34e <ticker_job+0x34e>

0000b95c <ticker_init>:
{
    b95c:	b4f0      	push	{r4, r5, r6, r7}
    b95e:	9d04      	ldr	r5, [sp, #16]
    b960:	f89d 7014 	ldrb.w	r7, [sp, #20]
    b964:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    b966:	2800      	cmp	r0, #0
    b968:	d137      	bne.n	b9da <ticker_init+0x7e>
	instance->count_node = count_node;
    b96a:	4e1d      	ldr	r6, [pc, #116]	; (b9e0 <ticker_init+0x84>)
	while (count_node--) {
    b96c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    b970:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    b972:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    b974:	fa5f fc8c 	uxtb.w	ip, ip
    b978:	b149      	cbz	r1, b98e <ticker_init+0x32>
    b97a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    b97e:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    b982:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    b984:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    b988:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    b98c:	d1f9      	bne.n	b982 <ticker_init+0x26>
	while (count_user--) {
    b98e:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    b990:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    b992:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    b994:	b2d2      	uxtb	r2, r2
    b996:	b183      	cbz	r3, b9ba <ticker_init+0x5e>
    b998:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    b99c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    b99e:	4610      	mov	r0, r2
    b9a0:	f812 3908 	ldrb.w	r3, [r2], #-8
    b9a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b9a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    b9ac:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    b9ae:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    b9b2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    b9b6:	b2df      	uxtb	r7, r3
	while (count_user--) {
    b9b8:	d1f0      	bne.n	b99c <ticker_init+0x40>
	if (count_op) {
    b9ba:	b977      	cbnz	r7, b9da <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    b9bc:	9a07      	ldr	r2, [sp, #28]
    b9be:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    b9c0:	9a08      	ldr	r2, [sp, #32]
    b9c2:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    b9c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    b9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b9ca:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    b9cc:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    b9ce:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b9d2:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    b9d4:	8177      	strh	r7, [r6, #10]
}
    b9d6:	bcf0      	pop	{r4, r5, r6, r7}
    b9d8:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    b9da:	2001      	movs	r0, #1
}
    b9dc:	bcf0      	pop	{r4, r5, r6, r7}
    b9de:	4770      	bx	lr
    b9e0:	2000439c 	.word	0x2000439c

0000b9e4 <ticker_trigger>:
	if (instance->sched_cb) {
    b9e4:	4b0a      	ldr	r3, [pc, #40]	; (ba10 <ticker_trigger+0x2c>)
    b9e6:	222c      	movs	r2, #44	; 0x2c
    b9e8:	fb02 3200 	mla	r2, r2, r0, r3
{
    b9ec:	b410      	push	{r4}
	if (instance->sched_cb) {
    b9ee:	6a54      	ldr	r4, [r2, #36]	; 0x24
    b9f0:	b15c      	cbz	r4, ba0a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    b9f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    b9f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b9fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b9fe:	46a4      	mov	ip, r4
    ba00:	2201      	movs	r2, #1
}
    ba02:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ba04:	2103      	movs	r1, #3
    ba06:	2002      	movs	r0, #2
    ba08:	4760      	bx	ip
}
    ba0a:	bc10      	pop	{r4}
    ba0c:	4770      	bx	lr
    ba0e:	bf00      	nop
    ba10:	2000439c 	.word	0x2000439c

0000ba14 <ticker_start_ext>:
{
    ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ba18:	4e28      	ldr	r6, [pc, #160]	; (babc <ticker_start_ext+0xa8>)
{
    ba1a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    ba1e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    ba20:	252c      	movs	r5, #44	; 0x2c
    ba22:	fb05 6504 	mla	r5, r5, r4, r6
{
    ba26:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    ba28:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    ba2c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    ba30:	6869      	ldr	r1, [r5, #4]
    ba32:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    ba36:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    ba3a:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    ba3e:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    ba42:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    ba44:	f10e 0c01 	add.w	ip, lr, #1
    ba48:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    ba4c:	4564      	cmp	r4, ip
    ba4e:	bf98      	it	ls
    ba50:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    ba54:	4561      	cmp	r1, ip
    ba56:	d02e      	beq.n	bab6 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    ba58:	6879      	ldr	r1, [r7, #4]
    ba5a:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    ba5e:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    ba62:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    ba66:	f04f 0904 	mov.w	r9, #4
    ba6a:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    ba6e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    ba70:	9b08      	ldr	r3, [sp, #32]
    ba72:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba76:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    ba78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba7a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    ba7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ba7e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    ba80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba82:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    ba84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba86:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    ba88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba8a:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    ba8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ba8e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    ba90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ba92:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    ba94:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    ba96:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    ba98:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    ba9a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    ba9e:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    baa2:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    baa6:	4798      	blx	r3
    baa8:	4633      	mov	r3, r6
    baaa:	4649      	mov	r1, r9
    baac:	2200      	movs	r2, #0
    baae:	47a8      	blx	r5
	return user_op->status;
    bab0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    bab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    bab6:	2001      	movs	r0, #1
}
    bab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    babc:	2000439c 	.word	0x2000439c

0000bac0 <ticker_start>:
{
    bac0:	b510      	push	{r4, lr}
    bac2:	b08a      	sub	sp, #40	; 0x28
    bac4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bac6:	9400      	str	r4, [sp, #0]
{
    bac8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    baca:	9401      	str	r4, [sp, #4]
{
    bacc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bace:	9402      	str	r4, [sp, #8]
{
    bad0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bad4:	9403      	str	r4, [sp, #12]
{
    bad6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bad8:	9404      	str	r4, [sp, #16]
{
    bada:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    badc:	9405      	str	r4, [sp, #20]
{
    bade:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bae0:	9406      	str	r4, [sp, #24]
{
    bae2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bae4:	9407      	str	r4, [sp, #28]
{
    bae6:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    bae8:	9408      	str	r4, [sp, #32]
    baea:	2400      	movs	r4, #0
    baec:	9409      	str	r4, [sp, #36]	; 0x24
    baee:	f7ff ff91 	bl	ba14 <ticker_start_ext>
}
    baf2:	b00a      	add	sp, #40	; 0x28
    baf4:	bd10      	pop	{r4, pc}
    baf6:	bf00      	nop

0000baf8 <ticker_update_ext>:
{
    baf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    bafc:	4d28      	ldr	r5, [pc, #160]	; (bba0 <ticker_update_ext+0xa8>)
{
    bafe:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    bb02:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    bb06:	4604      	mov	r4, r0
    bb08:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    bb0a:	212c      	movs	r1, #44	; 0x2c
    bb0c:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    bb10:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    bb14:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    bb18:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    bb1c:	684c      	ldr	r4, [r1, #4]
    bb1e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    bb22:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    bb26:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    bb2a:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    bb2c:	f10e 0c01 	add.w	ip, lr, #1
    bb30:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    bb34:	45e1      	cmp	r9, ip
    bb36:	bf98      	it	ls
    bb38:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    bb3c:	4564      	cmp	r4, ip
{
    bb3e:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    bb42:	d02a      	beq.n	bb9a <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    bb44:	f8d6 a004 	ldr.w	sl, [r6, #4]
    bb48:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    bb4c:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    bb50:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    bb54:	f04f 0b05 	mov.w	fp, #5
    bb58:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    bb5c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    bb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bb60:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    bb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb64:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    bb66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb68:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    bb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb6c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    bb6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bb70:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    bb72:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    bb74:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    bb76:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    bb78:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    bb7a:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    bb7e:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    bb82:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bb86:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    bb8a:	4798      	blx	r3
    bb8c:	462b      	mov	r3, r5
    bb8e:	2200      	movs	r2, #0
    bb90:	2104      	movs	r1, #4
    bb92:	47b0      	blx	r6
	return user_op->status;
    bb94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    bb96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    bb9a:	2001      	movs	r0, #1
}
    bb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bba0:	2000439c 	.word	0x2000439c

0000bba4 <ticker_update>:
{
    bba4:	b510      	push	{r4, lr}
    bba6:	b088      	sub	sp, #32
    bba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbaa:	9400      	str	r4, [sp, #0]
{
    bbac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbae:	9401      	str	r4, [sp, #4]
{
    bbb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbb2:	9402      	str	r4, [sp, #8]
{
    bbb4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbb8:	9403      	str	r4, [sp, #12]
{
    bbba:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbbe:	9404      	str	r4, [sp, #16]
{
    bbc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbc2:	9405      	str	r4, [sp, #20]
{
    bbc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    bbc6:	9406      	str	r4, [sp, #24]
    bbc8:	2400      	movs	r4, #0
    bbca:	9407      	str	r4, [sp, #28]
    bbcc:	f7ff ff94 	bl	baf8 <ticker_update_ext>
}
    bbd0:	b008      	add	sp, #32
    bbd2:	bd10      	pop	{r4, pc}

0000bbd4 <ticker_stop>:
{
    bbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    bbd8:	4c1e      	ldr	r4, [pc, #120]	; (bc54 <ticker_stop+0x80>)
{
    bbda:	4684      	mov	ip, r0
    bbdc:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    bbde:	212c      	movs	r1, #44	; 0x2c
    bbe0:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    bbe4:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    bbe8:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    bbec:	684d      	ldr	r5, [r1, #4]
    bbee:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    bbf2:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    bbf6:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    bbfa:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    bbfc:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    bc00:	f10e 0c01 	add.w	ip, lr, #1
    bc04:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    bc08:	4567      	cmp	r7, ip
    bc0a:	bf98      	it	ls
    bc0c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    bc10:	4565      	cmp	r5, ip
    bc12:	d01c      	beq.n	bc4e <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    bc14:	6877      	ldr	r7, [r6, #4]
    bc16:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    bc1a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    bc1e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    bc22:	f04f 0807 	mov.w	r8, #7
    bc26:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    bc2a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    bc2c:	9b06      	ldr	r3, [sp, #24]
    bc2e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    bc30:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    bc32:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    bc34:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    bc36:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bc3a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    bc3e:	4798      	blx	r3
    bc40:	4623      	mov	r3, r4
    bc42:	2200      	movs	r2, #0
    bc44:	2104      	movs	r1, #4
    bc46:	47b0      	blx	r6
	return user_op->status;
    bc48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    bc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    bc4e:	2001      	movs	r0, #1
}
    bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc54:	2000439c 	.word	0x2000439c

0000bc58 <ticker_next_slot_get>:
{
    bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    bc5c:	4d20      	ldr	r5, [pc, #128]	; (bce0 <ticker_next_slot_get+0x88>)
{
    bc5e:	4684      	mov	ip, r0
    bc60:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    bc62:	212c      	movs	r1, #44	; 0x2c
    bc64:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
    bc68:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    bc6c:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
    bc70:	684c      	ldr	r4, [r1, #4]
    bc72:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    bc76:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    bc7a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    bc7e:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    bc80:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
    bc84:	f10e 0c01 	add.w	ip, lr, #1
    bc88:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    bc8c:	4567      	cmp	r7, ip
    bc8e:	bf98      	it	ls
    bc90:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    bc94:	4564      	cmp	r4, ip
    bc96:	d020      	beq.n	bcda <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
    bc98:	6877      	ldr	r7, [r6, #4]
    bc9a:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    bc9e:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    bca2:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    bca6:	f64f 7802 	movw	r8, #65282	; 0xff02
    bcaa:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
    bcae:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    bcb2:	9b06      	ldr	r3, [sp, #24]
    bcb4:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    bcb6:	9b07      	ldr	r3, [sp, #28]
    bcb8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    bcba:	9b08      	ldr	r3, [sp, #32]
    bcbc:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    bcbe:	2302      	movs	r3, #2
    bcc0:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
    bcc2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bcc6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    bcca:	4798      	blx	r3
    bccc:	462b      	mov	r3, r5
    bcce:	2200      	movs	r2, #0
    bcd0:	2104      	movs	r1, #4
    bcd2:	47b0      	blx	r6
	return user_op->status;
    bcd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    bcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    bcda:	2001      	movs	r0, #1
}
    bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bce0:	2000439c 	.word	0x2000439c

0000bce4 <ticker_job_sched>:
{
    bce4:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bce6:	4d0a      	ldr	r5, [pc, #40]	; (bd10 <ticker_job_sched+0x2c>)
    bce8:	222c      	movs	r2, #44	; 0x2c
    bcea:	fb02 5200 	mla	r2, r2, r0, r5
    bcee:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
    bcf2:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bcf4:	4608      	mov	r0, r1
    bcf6:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
    bcf8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    bcfc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bd00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    bd04:	46b4      	mov	ip, r6
    bd06:	2200      	movs	r2, #0
}
    bd08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bd0c:	2104      	movs	r1, #4
    bd0e:	4760      	bx	ip
    bd10:	2000439c 	.word	0x2000439c

0000bd14 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    bd14:	f00d b9f6 	b.w	19104 <cntr_cnt_get>

0000bd18 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bd18:	1a40      	subs	r0, r0, r1
}
    bd1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bd1e:	4770      	bx	lr

0000bd20 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    bd24:	2000      	movs	r0, #0
{
    bd26:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    bd28:	f003 fbd0 	bl	f4cc <ull_adv_is_enabled>
    bd2c:	b998      	cbnz	r0, bd56 <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    bd2e:	f003 fde7 	bl	f900 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    bd32:	f010 0606 	ands.w	r6, r0, #6
    bd36:	d10e      	bne.n	bd56 <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    bd38:	b134      	cbz	r4, bd48 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bd3a:	2206      	movs	r2, #6
    bd3c:	4629      	mov	r1, r5
    bd3e:	4807      	ldr	r0, [pc, #28]	; (bd5c <ll_addr_set+0x3c>)
    bd40:	f014 fcf2 	bl	20728 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    bd44:	4630      	mov	r0, r6
}
    bd46:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    bd48:	2206      	movs	r2, #6
    bd4a:	4629      	mov	r1, r5
    bd4c:	4804      	ldr	r0, [pc, #16]	; (bd60 <ll_addr_set+0x40>)
    bd4e:	f014 fceb 	bl	20728 <memcpy>
	return 0;
    bd52:	4620      	mov	r0, r4
}
    bd54:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    bd56:	200c      	movs	r0, #12
}
    bd58:	bd70      	pop	{r4, r5, r6, pc}
    bd5a:	bf00      	nop
    bd5c:	200043d0 	.word	0x200043d0
    bd60:	200043c8 	.word	0x200043c8

0000bd64 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bd64:	2801      	cmp	r0, #1
{
    bd66:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bd68:	d805      	bhi.n	bd76 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    bd6a:	4a04      	ldr	r2, [pc, #16]	; (bd7c <ll_addr_get+0x18>)
    bd6c:	4804      	ldr	r0, [pc, #16]	; (bd80 <ll_addr_get+0x1c>)
    bd6e:	2b00      	cmp	r3, #0
    bd70:	bf18      	it	ne
    bd72:	4610      	movne	r0, r2
    bd74:	4770      	bx	lr
		return NULL;
    bd76:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    bd78:	4770      	bx	lr
    bd7a:	bf00      	nop
    bd7c:	200043d0 	.word	0x200043d0
    bd80:	200043c8 	.word	0x200043c8

0000bd84 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bd84:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    bd86:	b510      	push	{r4, lr}
    bd88:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    bd8a:	d80b      	bhi.n	bda4 <ll_addr_read+0x20>
	if (addr_type) {
    bd8c:	4608      	mov	r0, r1
		return rnd_addr;
    bd8e:	4c07      	ldr	r4, [pc, #28]	; (bdac <ll_addr_read+0x28>)
    bd90:	4907      	ldr	r1, [pc, #28]	; (bdb0 <ll_addr_read+0x2c>)
    bd92:	2b00      	cmp	r3, #0
    bd94:	bf18      	it	ne
    bd96:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    bd98:	2206      	movs	r2, #6
    bd9a:	4621      	mov	r1, r4
    bd9c:	f014 fcc4 	bl	20728 <memcpy>
	}

	return addr;
}
    bda0:	4620      	mov	r0, r4
    bda2:	bd10      	pop	{r4, pc}
		return NULL;
    bda4:	2400      	movs	r4, #0
}
    bda6:	4620      	mov	r0, r4
    bda8:	bd10      	pop	{r4, pc}
    bdaa:	bf00      	nop
    bdac:	200043c8 	.word	0x200043c8
    bdb0:	200043d0 	.word	0x200043d0

0000bdb4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    bdb4:	2802      	cmp	r0, #2
    bdb6:	d001      	beq.n	bdbc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    bdb8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    bdba:	4770      	bx	lr
{
    bdbc:	b538      	push	{r3, r4, r5, lr}
    bdbe:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    bdc0:	4608      	mov	r0, r1
    bdc2:	461d      	mov	r5, r3
    bdc4:	f004 fc6a 	bl	1069c <ll_connected_get>
			if (!conn) {
    bdc8:	b110      	cbz	r0, bdd0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    bdca:	2000      	movs	r0, #0
    bdcc:	7028      	strb	r0, [r5, #0]
}
    bdce:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    bdd0:	4620      	mov	r0, r4
}
    bdd2:	bd38      	pop	{r3, r4, r5, pc}

0000bdd4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    bdd4:	2300      	movs	r3, #0
    bdd6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    bdd8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    bdda:	4770      	bx	lr

0000bddc <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    bddc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    bdde:	4802      	ldr	r0, [pc, #8]	; (bde8 <hci_driver_init+0xc>)
    bde0:	f7fb f88e 	bl	6f00 <bt_hci_driver_register>

	return 0;
}
    bde4:	2000      	movs	r0, #0
    bde6:	bd08      	pop	{r3, pc}
    bde8:	00025174 	.word	0x00025174

0000bdec <hci_driver_send>:
{
    bdec:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    bdee:	8983      	ldrh	r3, [r0, #12]
{
    bdf0:	b083      	sub	sp, #12
	if (!buf->len) {
    bdf2:	b123      	cbz	r3, bdfe <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    bdf4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    bdf6:	4604      	mov	r4, r0
    bdf8:	b1c3      	cbz	r3, be2c <hci_driver_send+0x40>
    bdfa:	2b02      	cmp	r3, #2
    bdfc:	d004      	beq.n	be08 <hci_driver_send+0x1c>
    bdfe:	f06f 0515 	mvn.w	r5, #21
}
    be02:	4628      	mov	r0, r5
    be04:	b003      	add	sp, #12
    be06:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    be08:	a901      	add	r1, sp, #4
    be0a:	f000 ffcb 	bl	cda4 <hci_acl_handle>
	if (evt) {
    be0e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    be10:	4605      	mov	r5, r0
	if (evt) {
    be12:	b113      	cbz	r3, be1a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    be14:	4618      	mov	r0, r3
    be16:	f7fb f855 	bl	6ec4 <bt_recv_prio>
	if (!err) {
    be1a:	2d00      	cmp	r5, #0
    be1c:	d1f1      	bne.n	be02 <hci_driver_send+0x16>
		net_buf_unref(buf);
    be1e:	4620      	mov	r0, r4
    be20:	f00e f94e 	bl	1a0c0 <net_buf_unref>
    be24:	2500      	movs	r5, #0
}
    be26:	4628      	mov	r0, r5
    be28:	b003      	add	sp, #12
    be2a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    be2c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    be2e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    be30:	f000 faa0 	bl	c374 <hci_cmd_handle>
	if (evt) {
    be34:	2800      	cmp	r0, #0
    be36:	d0f2      	beq.n	be1e <hci_driver_send+0x32>
		bt_recv_prio(evt);
    be38:	f7fb f844 	bl	6ec4 <bt_recv_prio>
		if (node_rx) {
    be3c:	9d01      	ldr	r5, [sp, #4]
    be3e:	2d00      	cmp	r5, #0
    be40:	d0ed      	beq.n	be1e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    be42:	4628      	mov	r0, r5
    be44:	f001 fc88 	bl	d758 <hci_get_class>
    be48:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    be4a:	9901      	ldr	r1, [sp, #4]
    be4c:	4801      	ldr	r0, [pc, #4]	; (be54 <hci_driver_send+0x68>)
    be4e:	f018 f8db 	bl	24008 <k_queue_append>
	if (!err) {
    be52:	e7e4      	b.n	be1e <hci_driver_send+0x32>
    be54:	20000b3c 	.word	0x20000b3c

0000be58 <recv_thread>:
{
    be58:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    be5a:	4e41      	ldr	r6, [pc, #260]	; (bf60 <recv_thread+0x108>)
		LL_ASSERT(0);
    be5c:	4f41      	ldr	r7, [pc, #260]	; (bf64 <recv_thread+0x10c>)
{
    be5e:	b083      	sub	sp, #12
    be60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    be64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be68:	4630      	mov	r0, r6
    be6a:	f012 fb23 	bl	1e4b4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    be6e:	2800      	cmp	r0, #0
    be70:	d0f6      	beq.n	be60 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    be72:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    be74:	9001      	str	r0, [sp, #4]
	switch (class) {
    be76:	2b04      	cmp	r3, #4
    be78:	d821      	bhi.n	bebe <recv_thread+0x66>
    be7a:	2b00      	cmp	r3, #0
    be7c:	d14b      	bne.n	bf16 <recv_thread+0xbe>
		LL_ASSERT(0);
    be7e:	493a      	ldr	r1, [pc, #232]	; (bf68 <recv_thread+0x110>)
    be80:	483a      	ldr	r0, [pc, #232]	; (bf6c <recv_thread+0x114>)
    be82:	f44f 73cd 	mov.w	r3, #410	; 0x19a
    be86:	463a      	mov	r2, r7
    be88:	f013 fc49 	bl	1f71e <printk>
    be8c:	4040      	eors	r0, r0
    be8e:	f380 8811 	msr	BASEPRI, r0
    be92:	f04f 0003 	mov.w	r0, #3
    be96:	df02      	svc	2
	node_rx->hdr.next = NULL;
    be98:	9b01      	ldr	r3, [sp, #4]
    be9a:	2200      	movs	r2, #0
    be9c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    be9e:	a801      	add	r0, sp, #4
    bea0:	f002 f908 	bl	e0b4 <ll_rx_mem_release>
    bea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    beac:	4630      	mov	r0, r6
    beae:	f012 fb01 	bl	1e4b4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    beb2:	2800      	cmp	r0, #0
    beb4:	d0d4      	beq.n	be60 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    beb6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    beb8:	9001      	str	r0, [sp, #4]
	switch (class) {
    beba:	2b04      	cmp	r3, #4
    bebc:	d9dd      	bls.n	be7a <recv_thread+0x22>
    bebe:	2b05      	cmp	r3, #5
    bec0:	d1dd      	bne.n	be7e <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    bec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    beca:	2003      	movs	r0, #3
    becc:	f7fa fab2 	bl	6434 <bt_buf_get_rx>
    bed0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    bed2:	4621      	mov	r1, r4
    bed4:	9801      	ldr	r0, [sp, #4]
    bed6:	f000 fff1 	bl	cebc <hci_acl_encode>
	node_rx->hdr.next = NULL;
    beda:	9b01      	ldr	r3, [sp, #4]
    bedc:	2200      	movs	r2, #0
    bede:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bee0:	a801      	add	r0, sp, #4
    bee2:	f002 f8e7 	bl	e0b4 <ll_rx_mem_release>
		while (buf) {
    bee6:	2c00      	cmp	r4, #0
    bee8:	d0ba      	beq.n	be60 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    beea:	4620      	mov	r0, r4
    beec:	f017 f91f 	bl	2312e <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    bef0:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    bef2:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    bef4:	2000      	movs	r0, #0
    bef6:	f017 f940 	bl	2317a <net_buf_frag_del>
			if (frag->len) {
    befa:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    befc:	4604      	mov	r4, r0
				bt_recv(frag);
    befe:	4628      	mov	r0, r5
			if (frag->len) {
    bf00:	b133      	cbz	r3, bf10 <recv_thread+0xb8>
				bt_recv(frag);
    bf02:	f7fa ff5b 	bl	6dbc <bt_recv>
	z_impl_k_yield();
    bf06:	f012 ff65 	bl	1edd4 <z_impl_k_yield>
		while (buf) {
    bf0a:	2c00      	cmp	r4, #0
    bf0c:	d1ed      	bne.n	beea <recv_thread+0x92>
    bf0e:	e7a7      	b.n	be60 <recv_thread+0x8>
				net_buf_unref(frag);
    bf10:	f00e f8d6 	bl	1a0c0 <net_buf_unref>
    bf14:	e7f7      	b.n	bf06 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    bf16:	2b02      	cmp	r3, #2
    bf18:	d013      	beq.n	bf42 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bf1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf22:	2001      	movs	r0, #1
    bf24:	f7fa fa86 	bl	6434 <bt_buf_get_rx>
    bf28:	4604      	mov	r4, r0
		if (buf) {
    bf2a:	b19c      	cbz	r4, bf54 <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
    bf2c:	9801      	ldr	r0, [sp, #4]
    bf2e:	4621      	mov	r1, r4
    bf30:	f000 fffe 	bl	cf30 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    bf34:	9b01      	ldr	r3, [sp, #4]
    bf36:	2200      	movs	r2, #0
    bf38:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bf3a:	a801      	add	r0, sp, #4
    bf3c:	f002 f8ba 	bl	e0b4 <ll_rx_mem_release>
		while (buf) {
    bf40:	e7d3      	b.n	beea <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    bf42:	2200      	movs	r2, #0
    bf44:	2300      	movs	r3, #0
    bf46:	2101      	movs	r1, #1
    bf48:	2000      	movs	r0, #0
    bf4a:	f7fa fa9d 	bl	6488 <bt_buf_get_evt>
    bf4e:	4604      	mov	r4, r0
		if (buf) {
    bf50:	2c00      	cmp	r4, #0
    bf52:	d1eb      	bne.n	bf2c <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
    bf54:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    bf56:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    bf58:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bf5a:	f002 f8ab 	bl	e0b4 <ll_rx_mem_release>
		while (buf) {
    bf5e:	e77f      	b.n	be60 <recv_thread+0x8>
    bf60:	20000b3c 	.word	0x20000b3c
    bf64:	00025110 	.word	0x00025110
    bf68:	00025150 	.word	0x00025150
    bf6c:	000250f0 	.word	0x000250f0

0000bf70 <prio_recv_thread>:
{
    bf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    bf74:	4f2e      	ldr	r7, [pc, #184]	; (c030 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    bf76:	4e2f      	ldr	r6, [pc, #188]	; (c034 <prio_recv_thread+0xc4>)
{
    bf78:	b082      	sub	sp, #8
    bf7a:	e00c      	b.n	bf96 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bf7c:	f7fa fa84 	bl	6488 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bf80:	4622      	mov	r2, r4
    bf82:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bf86:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bf88:	f001 fbce 	bl	d728 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    bf8c:	4620      	mov	r0, r4
    bf8e:	f7fa ff99 	bl	6ec4 <bt_recv_prio>
	z_impl_k_yield();
    bf92:	f012 ff1f 	bl	1edd4 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bf96:	f10d 0102 	add.w	r1, sp, #2
    bf9a:	a801      	add	r0, sp, #4
    bf9c:	f001 fed6 	bl	dd4c <ll_rx_get>
    bfa0:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    bfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bfa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bfaa:	2100      	movs	r1, #0
    bfac:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bfae:	2c00      	cmp	r4, #0
    bfb0:	d1e4      	bne.n	bf7c <prio_recv_thread+0xc>
		if (node_rx) {
    bfb2:	9b01      	ldr	r3, [sp, #4]
    bfb4:	b1b3      	cbz	r3, bfe4 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    bfb6:	f001 ffab 	bl	df10 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bfba:	f8dd 8004 	ldr.w	r8, [sp, #4]
    bfbe:	4640      	mov	r0, r8
    bfc0:	f001 fbca 	bl	d758 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    bfc4:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    bfc6:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    bfca:	796b      	ldrb	r3, [r5, #5]
    bfcc:	2b03      	cmp	r3, #3
    bfce:	d102      	bne.n	bfd6 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    bfd0:	792b      	ldrb	r3, [r5, #4]
    bfd2:	2b17      	cmp	r3, #23
    bfd4:	d00e      	beq.n	bff4 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    bfd6:	4629      	mov	r1, r5
    bfd8:	4630      	mov	r0, r6
    bfda:	f018 f815 	bl	24008 <k_queue_append>
		if (iso_received || node_rx) {
    bfde:	9b01      	ldr	r3, [sp, #4]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d1d8      	bne.n	bf96 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    bfe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bfe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bfec:	4638      	mov	r0, r7
    bfee:	f012 fabb 	bl	1e568 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bff2:	e7d0      	b.n	bf96 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bff8:	4621      	mov	r1, r4
    bffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bffe:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    c000:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    c004:	f7fa fa40 	bl	6488 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    c008:	4641      	mov	r1, r8
    c00a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    c00c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    c00e:	f105 001c 	add.w	r0, r5, #28
    c012:	f000 ff2b 	bl	ce6c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    c016:	4640      	mov	r0, r8
    c018:	f000 ff48 	bl	ceac <hci_disconn_complete_process>
				bt_recv_prio(buf);
    c01c:	4620      	mov	r0, r4
			if (buf) {
    c01e:	b124      	cbz	r4, c02a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    c020:	f7fa ff50 	bl	6ec4 <bt_recv_prio>
					net_buf_unref(buf);
    c024:	4620      	mov	r0, r4
    c026:	f00e f84b 	bl	1a0c0 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    c02a:	9d01      	ldr	r5, [sp, #4]
    c02c:	e7d3      	b.n	bfd6 <prio_recv_thread+0x66>
    c02e:	bf00      	nop
    c030:	20000b0c 	.word	0x20000b0c
    c034:	20000b3c 	.word	0x20000b3c

0000c038 <hci_driver_open>:
{
    c038:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    c03a:	481a      	ldr	r0, [pc, #104]	; (c0a4 <hci_driver_open+0x6c>)
{
    c03c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    c03e:	f002 fc97 	bl	e970 <ll_init>
	if (err) {
    c042:	4604      	mov	r4, r0
    c044:	bb58      	cbnz	r0, c09e <hci_driver_open+0x66>
	hci_init(NULL);
    c046:	f001 fb9d 	bl	d784 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    c04a:	2600      	movs	r6, #0
    c04c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c04e:	f06f 0209 	mvn.w	r2, #9
    c052:	e9cd 2403 	strd	r2, r4, [sp, #12]
    c056:	e9cd 6706 	strd	r6, r7, [sp, #24]
    c05a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    c05e:	4b12      	ldr	r3, [pc, #72]	; (c0a8 <hci_driver_open+0x70>)
    c060:	4912      	ldr	r1, [pc, #72]	; (c0ac <hci_driver_open+0x74>)
    c062:	9400      	str	r4, [sp, #0]
    c064:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    c068:	4811      	ldr	r0, [pc, #68]	; (c0b0 <hci_driver_open+0x78>)
    c06a:	f012 f8c5 	bl	1e1f8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c06e:	4911      	ldr	r1, [pc, #68]	; (c0b4 <hci_driver_open+0x7c>)
    c070:	480f      	ldr	r0, [pc, #60]	; (c0b0 <hci_driver_open+0x78>)
    c072:	f017 ff32 	bl	23eda <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c076:	f06f 0207 	mvn.w	r2, #7
    c07a:	e9cd 2403 	strd	r2, r4, [sp, #12]
    c07e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    c082:	e9cd 4401 	strd	r4, r4, [sp, #4]
    c086:	4b0c      	ldr	r3, [pc, #48]	; (c0b8 <hci_driver_open+0x80>)
    c088:	490c      	ldr	r1, [pc, #48]	; (c0bc <hci_driver_open+0x84>)
    c08a:	9400      	str	r4, [sp, #0]
    c08c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c090:	480b      	ldr	r0, [pc, #44]	; (c0c0 <hci_driver_open+0x88>)
    c092:	f012 f8b1 	bl	1e1f8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c096:	490b      	ldr	r1, [pc, #44]	; (c0c4 <hci_driver_open+0x8c>)
    c098:	4809      	ldr	r0, [pc, #36]	; (c0c0 <hci_driver_open+0x88>)
    c09a:	f017 ff1e 	bl	23eda <z_impl_k_thread_name_set>
}
    c09e:	4620      	mov	r0, r4
    c0a0:	b008      	add	sp, #32
    c0a2:	bdd0      	pop	{r4, r6, r7, pc}
    c0a4:	20000b0c 	.word	0x20000b0c
    c0a8:	0000bf71 	.word	0x0000bf71
    c0ac:	20007680 	.word	0x20007680
    c0b0:	200012d0 	.word	0x200012d0
    c0b4:	00025154 	.word	0x00025154
    c0b8:	0000be59 	.word	0x0000be59
    c0bc:	20007840 	.word	0x20007840
    c0c0:	20001350 	.word	0x20001350
    c0c4:	00025160 	.word	0x00025160

0000c0c8 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
    c0cc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; c178 <dup_found.part.0+0xb0>
    c0d0:	f8d9 3000 	ldr.w	r3, [r9]
    c0d4:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    c0d6:	4680      	mov	r8, r0
    c0d8:	460f      	mov	r7, r1
    c0da:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
    c0dc:	dd12      	ble.n	c104 <dup_found.part.0+0x3c>
    c0de:	4c27      	ldr	r4, [pc, #156]	; (c17c <dup_found.part.0+0xb4>)
    c0e0:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
    c0e2:	4621      	mov	r1, r4
    c0e4:	2206      	movs	r2, #6
    c0e6:	4630      	mov	r0, r6
    c0e8:	f014 fb0d 	bl	20706 <memcmp>
    c0ec:	b918      	cbnz	r0, c0f6 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
    c0ee:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    c0f2:	42bb      	cmp	r3, r7
    c0f4:	d029      	beq.n	c14a <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
    c0f6:	f8d9 3000 	ldr.w	r3, [r9]
    c0fa:	3501      	adds	r5, #1
    c0fc:	429d      	cmp	r5, r3
    c0fe:	f104 0408 	add.w	r4, r4, #8
    c102:	dbee      	blt.n	c0e2 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
    c104:	4d1e      	ldr	r5, [pc, #120]	; (c180 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    c106:	4c1f      	ldr	r4, [pc, #124]	; (c184 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
    c108:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    c10c:	4631      	mov	r1, r6
    c10e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    c112:	1c70      	adds	r0, r6, #1
    c114:	4420      	add	r0, r4
    c116:	2206      	movs	r2, #6
    c118:	f014 fb06 	bl	20728 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
    c11c:	2301      	movs	r3, #1
    c11e:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c122:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
    c126:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
    c12a:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c12c:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
    c12e:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c132:	dc1c      	bgt.n	c16e <dup_found.part.0+0xa6>
			dup_count++;
    c134:	3301      	adds	r3, #1
			dup_curr = dup_count;
    c136:	461a      	mov	r2, r3
			dup_count++;
    c138:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
    c13c:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
    c13e:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c140:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    c142:	bf08      	it	eq
    c144:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
    c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
    c14a:	4b0e      	ldr	r3, [pc, #56]	; (c184 <dup_found.part.0+0xbc>)
    c14c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
    c150:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
    c152:	79ea      	ldrb	r2, [r5, #7]
    c154:	fa22 f308 	lsr.w	r3, r2, r8
    c158:	f013 0301 	ands.w	r3, r3, #1
    c15c:	d1f3      	bne.n	c146 <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
    c15e:	fa00 f808 	lsl.w	r8, r0, r8
    c162:	ea42 0208 	orr.w	r2, r2, r8
    c166:	71ea      	strb	r2, [r5, #7]
		return false;
    c168:	4618      	mov	r0, r3
}
    c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    c16e:	682a      	ldr	r2, [r5, #0]
    c170:	3201      	adds	r2, #1
    c172:	602a      	str	r2, [r5, #0]
    c174:	e7e3      	b.n	c13e <dup_found.part.0+0x76>
    c176:	bf00      	nop
    c178:	200043dc 	.word	0x200043dc
    c17c:	200043e5 	.word	0x200043e5
    c180:	200043e0 	.word	0x200043e0
    c184:	200043e4 	.word	0x200043e4

0000c188 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c18a:	4c19      	ldr	r4, [pc, #100]	; (c1f0 <le_remote_feat_complete+0x68>)
    c18c:	6864      	ldr	r4, [r4, #4]
    c18e:	00a4      	lsls	r4, r4, #2
    c190:	d504      	bpl.n	c19c <le_remote_feat_complete+0x14>
    c192:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    c194:	4a17      	ldr	r2, [pc, #92]	; (c1f4 <le_remote_feat_complete+0x6c>)
    c196:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c198:	0712      	lsls	r2, r2, #28
    c19a:	d400      	bmi.n	c19e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c19e:	f103 0408 	add.w	r4, r3, #8
    c1a2:	4607      	mov	r7, r0
    c1a4:	460e      	mov	r6, r1
    c1a6:	4620      	mov	r0, r4
    c1a8:	2102      	movs	r1, #2
    c1aa:	f016 fff2 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    c1ae:	233e      	movs	r3, #62	; 0x3e
    c1b0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    c1b2:	230c      	movs	r3, #12
    c1b4:	7043      	strb	r3, [r0, #1]
    c1b6:	2101      	movs	r1, #1
    c1b8:	4620      	mov	r0, r4
    c1ba:	f016 ffea 	bl	23192 <net_buf_simple_add>
    c1be:	4603      	mov	r3, r0
	me->subevent = subevt;
    c1c0:	2204      	movs	r2, #4
    c1c2:	701a      	strb	r2, [r3, #0]
    c1c4:	4620      	mov	r0, r4
    c1c6:	210b      	movs	r1, #11
    c1c8:	f016 ffe3 	bl	23192 <net_buf_simple_add>
		memcpy(&sep->features[0],
    c1cc:	2208      	movs	r2, #8
	sep->status = status;
    c1ce:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    c1d0:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    c1d4:	b92f      	cbnz	r7, c1e2 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    c1d6:	1d31      	adds	r1, r6, #4
    c1d8:	3003      	adds	r0, #3
}
    c1da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    c1de:	f014 baa3 	b.w	20728 <memcpy>
}
    c1e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    c1e6:	2100      	movs	r1, #0
    c1e8:	3003      	adds	r0, #3
    c1ea:	f014 baa8 	b.w	2073e <memset>
    c1ee:	bf00      	nop
    c1f0:	20000198 	.word	0x20000198
    c1f4:	200001a0 	.word	0x200001a0

0000c1f8 <hci_vendor_cmd_handle_common>:
{
    c1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    c1fa:	3801      	subs	r0, #1
{
    c1fc:	b087      	sub	sp, #28
    c1fe:	4615      	mov	r5, r2
	switch (ocf) {
    c200:	2809      	cmp	r0, #9
    c202:	d806      	bhi.n	c212 <hci_vendor_cmd_handle_common+0x1a>
    c204:	e8df f000 	tbb	[pc, r0]
    c208:	05432609 	.word	0x05432609
    c20c:	6b055705 	.word	0x6b055705
    c210:	9d88      	.short	0x9d88
    c212:	f06f 0015 	mvn.w	r0, #21
}
    c216:	b007      	add	sp, #28
    c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c21a:	4b54      	ldr	r3, [pc, #336]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c21c:	210d      	movs	r1, #13
    c21e:	8818      	ldrh	r0, [r3, #0]
    c220:	f014 fe22 	bl	20e68 <bt_hci_cmd_complete_create>
    c224:	210d      	movs	r1, #13
    c226:	6028      	str	r0, [r5, #0]
    c228:	3008      	adds	r0, #8
    c22a:	f016 ffb2 	bl	23192 <net_buf_simple_add>
    c22e:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    c230:	2202      	movs	r2, #2
	rp->status = 0x00;
    c232:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c234:	2103      	movs	r1, #3
	rp->status = 0x00;
    c236:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    c238:	705a      	strb	r2, [r3, #1]
    c23a:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    c23c:	70da      	strb	r2, [r3, #3]
    c23e:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    c240:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c242:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    c244:	71d8      	strb	r0, [r3, #7]
    c246:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    c248:	7258      	strb	r0, [r3, #9]
    c24a:	7298      	strb	r0, [r3, #10]
    c24c:	72d8      	strb	r0, [r3, #11]
    c24e:	7318      	strb	r0, [r3, #12]
}
    c250:	b007      	add	sp, #28
    c252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c254:	4b45      	ldr	r3, [pc, #276]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c256:	2141      	movs	r1, #65	; 0x41
    c258:	8818      	ldrh	r0, [r3, #0]
    c25a:	f014 fe05 	bl	20e68 <bt_hci_cmd_complete_create>
    c25e:	2141      	movs	r1, #65	; 0x41
    c260:	6028      	str	r0, [r5, #0]
    c262:	3008      	adds	r0, #8
    c264:	f016 ff95 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c268:	2400      	movs	r4, #0
    c26a:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c26c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c26e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c272:	4621      	mov	r1, r4
    c274:	f014 fa63 	bl	2073e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    c278:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    c27a:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    c27c:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    c280:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    c284:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    c286:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    c288:	70ab      	strb	r3, [r5, #2]
}
    c28a:	b007      	add	sp, #28
    c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c28e:	4b37      	ldr	r3, [pc, #220]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c290:	2109      	movs	r1, #9
    c292:	8818      	ldrh	r0, [r3, #0]
    c294:	f014 fde8 	bl	20e68 <bt_hci_cmd_complete_create>
    c298:	2109      	movs	r1, #9
    c29a:	6028      	str	r0, [r5, #0]
    c29c:	3008      	adds	r0, #8
    c29e:	f016 ff78 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c2a2:	2400      	movs	r4, #0
    c2a4:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c2a8:	2208      	movs	r2, #8
    c2aa:	4621      	mov	r1, r4
    c2ac:	f014 fa47 	bl	2073e <memset>
	return 0;
    c2b0:	4620      	mov	r0, r4
}
    c2b2:	b007      	add	sp, #28
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    c2b6:	6889      	ldr	r1, [r1, #8]
    c2b8:	2000      	movs	r0, #0
    c2ba:	f7ff fd31 	bl	bd20 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c2be:	4b2b      	ldr	r3, [pc, #172]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c2c0:	2101      	movs	r1, #1
    c2c2:	8818      	ldrh	r0, [r3, #0]
    c2c4:	f014 fdd0 	bl	20e68 <bt_hci_cmd_complete_create>
    c2c8:	2101      	movs	r1, #1
    c2ca:	4604      	mov	r4, r0
    c2cc:	3008      	adds	r0, #8
    c2ce:	f016 ff60 	bl	23192 <net_buf_simple_add>
    c2d2:	4603      	mov	r3, r0
	ccst->status = status;
    c2d4:	2000      	movs	r0, #0
    c2d6:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    c2d8:	602c      	str	r4, [r5, #0]
}
    c2da:	b007      	add	sp, #28
    c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    c2de:	4e24      	ldr	r6, [pc, #144]	; (c370 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c2e0:	4f22      	ldr	r7, [pc, #136]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    c2e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c2e4:	f10d 0c04 	add.w	ip, sp, #4
    c2e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c2ec:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c2ee:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    c2f0:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c2f4:	2112      	movs	r1, #18
    c2f6:	f014 fdb7 	bl	20e68 <bt_hci_cmd_complete_create>
    c2fa:	2112      	movs	r1, #18
    c2fc:	6028      	str	r0, [r5, #0]
    c2fe:	3008      	adds	r0, #8
    c300:	f016 ff47 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c304:	2400      	movs	r4, #0
    c306:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    c30a:	2211      	movs	r2, #17
    c30c:	a901      	add	r1, sp, #4
    c30e:	f014 fa0b 	bl	20728 <memcpy>
	return 0;
    c312:	4620      	mov	r0, r4
}
    c314:	b007      	add	sp, #28
    c316:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c318:	4b14      	ldr	r3, [pc, #80]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c31a:	2118      	movs	r1, #24
    c31c:	8818      	ldrh	r0, [r3, #0]
    c31e:	f014 fda3 	bl	20e68 <bt_hci_cmd_complete_create>
    c322:	2118      	movs	r1, #24
    c324:	6028      	str	r0, [r5, #0]
    c326:	3008      	adds	r0, #8
    c328:	f016 ff33 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c32c:	2400      	movs	r4, #0
    c32e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    c330:	2101      	movs	r1, #1
	rp->status = 0x00;
    c332:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    c336:	f00d fd43 	bl	19dc0 <hci_vendor_read_static_addr>
    c33a:	7068      	strb	r0, [r5, #1]
	return 0;
    c33c:	4620      	mov	r0, r4
}
    c33e:	b007      	add	sp, #28
    c340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c342:	4b0a      	ldr	r3, [pc, #40]	; (c36c <hci_vendor_cmd_handle_common+0x174>)
    c344:	2121      	movs	r1, #33	; 0x21
    c346:	8818      	ldrh	r0, [r3, #0]
    c348:	f014 fd8e 	bl	20e68 <bt_hci_cmd_complete_create>
    c34c:	2121      	movs	r1, #33	; 0x21
    c34e:	6028      	str	r0, [r5, #0]
    c350:	3008      	adds	r0, #8
    c352:	f016 ff1e 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c356:	4601      	mov	r1, r0
    c358:	2400      	movs	r4, #0
    c35a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    c35e:	3001      	adds	r0, #1
    c360:	f00d fda2 	bl	19ea8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    c364:	4620      	mov	r0, r4
}
    c366:	b007      	add	sp, #28
    c368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c36a:	bf00      	nop
    c36c:	200060bc 	.word	0x200060bc
    c370:	00025188 	.word	0x00025188

0000c374 <hci_cmd_handle>:
{
    c374:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    c376:	8983      	ldrh	r3, [r0, #12]
{
    c378:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    c37a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    c37c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    c37e:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    c380:	d930      	bls.n	c3e4 <hci_cmd_handle+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
    c382:	4604      	mov	r4, r0
    c384:	460e      	mov	r6, r1
    c386:	3008      	adds	r0, #8
    c388:	2103      	movs	r1, #3
    c38a:	f016 ff33 	bl	231f4 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    c38e:	89a2      	ldrh	r2, [r4, #12]
    c390:	7883      	ldrb	r3, [r0, #2]
    c392:	429a      	cmp	r2, r3
    c394:	d326      	bcc.n	c3e4 <hci_cmd_handle+0x70>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c396:	8802      	ldrh	r2, [r0, #0]
    c398:	4fb5      	ldr	r7, [pc, #724]	; (c670 <CONFIG_USB_DEVICE_VID+0x11d>)
	switch (BT_OGF(_opcode)) {
    c39a:	f3c2 2385 	ubfx	r3, r2, #10, #6
    c39e:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c3a0:	b290      	uxth	r0, r2
    c3a2:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
    c3a4:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    c3a8:	d809      	bhi.n	c3be <hci_cmd_handle+0x4a>
    c3aa:	b1a3      	cbz	r3, c3d6 <hci_cmd_handle+0x62>
    c3ac:	3b01      	subs	r3, #1
    c3ae:	2b07      	cmp	r3, #7
    c3b0:	d811      	bhi.n	c3d6 <hci_cmd_handle+0x62>
    c3b2:	e8df f003 	tbb	[pc, r3]
    c3b6:	101b      	.short	0x101b
    c3b8:	10104d2a 	.word	0x10104d2a
    c3bc:	6510      	.short	0x6510
    c3be:	2b3f      	cmp	r3, #63	; 0x3f
    c3c0:	d109      	bne.n	c3d6 <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    c3c2:	4621      	mov	r1, r4
    c3c4:	aa09      	add	r2, sp, #36	; 0x24
    c3c6:	4628      	mov	r0, r5
    c3c8:	f7ff ff16 	bl	c1f8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    c3cc:	3016      	adds	r0, #22
	return evt;
    c3ce:	bf18      	it	ne
    c3d0:	9c09      	ldrne	r4, [sp, #36]	; 0x24
	if (err == -EINVAL) {
    c3d2:	d104      	bne.n	c3de <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
    c3d4:	8838      	ldrh	r0, [r7, #0]
    c3d6:	2101      	movs	r1, #1
    c3d8:	f014 fd58 	bl	20e8c <bt_hci_cmd_status_create>
    c3dc:	4604      	mov	r4, r0
}
    c3de:	4620      	mov	r0, r4
    c3e0:	b00f      	add	sp, #60	; 0x3c
    c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    c3e4:	2400      	movs	r4, #0
}
    c3e6:	4620      	mov	r0, r4
    c3e8:	b00f      	add	sp, #60	; 0x3c
    c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    c3ec:	2d06      	cmp	r5, #6
    c3ee:	f000 846b 	beq.w	ccc8 <CONFIG_USB_DEVICE_VID+0x775>
    c3f2:	2d1d      	cmp	r5, #29
    c3f4:	d1ef      	bne.n	c3d6 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    c3f6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    c3f8:	8818      	ldrh	r0, [r3, #0]
    c3fa:	f004 fadd 	bl	109b8 <ll_version_ind_send>
    c3fe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c400:	8838      	ldrh	r0, [r7, #0]
    c402:	f014 fd43 	bl	20e8c <bt_hci_cmd_status_create>
    c406:	4604      	mov	r4, r0
}
    c408:	e7e9      	b.n	c3de <hci_cmd_handle+0x6a>
	switch (ocf) {
    c40a:	2d63      	cmp	r5, #99	; 0x63
    c40c:	f000 848e 	beq.w	cd2c <CONFIG_USB_DEVICE_VID+0x7d9>
    c410:	f200 80ec 	bhi.w	c5ec <CONFIG_USB_DEVICE_VID+0x99>
    c414:	2d03      	cmp	r5, #3
    c416:	f000 8463 	beq.w	cce0 <CONFIG_USB_DEVICE_VID+0x78d>
    c41a:	2d2d      	cmp	r5, #45	; 0x2d
    c41c:	f040 80d2 	bne.w	c5c4 <CONFIG_USB_DEVICE_VID+0x71>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    c420:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c422:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    c424:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    c426:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c428:	f014 fd1e 	bl	20e68 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    c42c:	2104      	movs	r1, #4
    c42e:	9009      	str	r0, [sp, #36]	; 0x24
    c430:	3008      	adds	r0, #8
    c432:	f016 feae 	bl	23192 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    c436:	b2b4      	uxth	r4, r6
    c438:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    c43a:	1cc3      	adds	r3, r0, #3
    c43c:	4621      	mov	r1, r4
    c43e:	463a      	mov	r2, r7
    c440:	2002      	movs	r0, #2
    c442:	f7ff fcb7 	bl	bdb4 <ll_tx_pwr_lvl_get>
	rp->status = status;
    c446:	7028      	strb	r0, [r5, #0]
	return evt;
    c448:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c44a:	f8a5 6001 	strh.w	r6, [r5, #1]
}
    c44e:	e7c6      	b.n	c3de <hci_cmd_handle+0x6a>
	switch (ocf) {
    c450:	1e6a      	subs	r2, r5, #1
    c452:	2a08      	cmp	r2, #8
    c454:	d8bf      	bhi.n	c3d6 <hci_cmd_handle+0x62>
    c456:	a301      	add	r3, pc, #4	; (adr r3, c45c <hci_cmd_handle+0xe8>)
    c458:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c45c:	0000c72b 	.word	0x0000c72b
    c460:	0000c679 	.word	0x0000c679
    c464:	0000c647 	.word	0x0000c647
    c468:	0000c3d7 	.word	0x0000c3d7
    c46c:	0000c3d7 	.word	0x0000c3d7
    c470:	0000c3d7 	.word	0x0000c3d7
    c474:	0000c3d7 	.word	0x0000c3d7
    c478:	0000c3d7 	.word	0x0000c3d7
    c47c:	0000c625 	.word	0x0000c625
	switch (ocf) {
    c480:	1e6a      	subs	r2, r5, #1
    c482:	2a4d      	cmp	r2, #77	; 0x4d
    c484:	d8a7      	bhi.n	c3d6 <hci_cmd_handle+0x62>
    c486:	a301      	add	r3, pc, #4	; (adr r3, c48c <hci_cmd_handle+0x118>)
    c488:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c48c:	0000c9ab 	.word	0x0000c9ab
    c490:	0000c987 	.word	0x0000c987
    c494:	0000cadb 	.word	0x0000cadb
    c498:	0000c3d7 	.word	0x0000c3d7
    c49c:	0000cad1 	.word	0x0000cad1
    c4a0:	0000cab5 	.word	0x0000cab5
    c4a4:	0000ca99 	.word	0x0000ca99
    c4a8:	0000ca8d 	.word	0x0000ca8d
    c4ac:	0000ca81 	.word	0x0000ca81
    c4b0:	0000ca77 	.word	0x0000ca77
    c4b4:	0000ca5f 	.word	0x0000ca5f
    c4b8:	0000cc9d 	.word	0x0000cc9d
    c4bc:	0000cc63 	.word	0x0000cc63
    c4c0:	0000cc5b 	.word	0x0000cc5b
    c4c4:	0000cc37 	.word	0x0000cc37
    c4c8:	0000cc31 	.word	0x0000cc31
    c4cc:	0000cc29 	.word	0x0000cc29
    c4d0:	0000cc21 	.word	0x0000cc21
    c4d4:	0000cbf9 	.word	0x0000cbf9
    c4d8:	0000cbf1 	.word	0x0000cbf1
    c4dc:	0000cbc5 	.word	0x0000cbc5
    c4e0:	0000cbb1 	.word	0x0000cbb1
    c4e4:	0000cb7d 	.word	0x0000cb7d
    c4e8:	0000cb5b 	.word	0x0000cb5b
    c4ec:	0000cb3d 	.word	0x0000cb3d
    c4f0:	0000cb33 	.word	0x0000cb33
    c4f4:	0000cb23 	.word	0x0000cb23
    c4f8:	0000c957 	.word	0x0000c957
    c4fc:	0000c3d7 	.word	0x0000c3d7
    c500:	0000c3d7 	.word	0x0000c3d7
    c504:	0000c3d7 	.word	0x0000c3d7
    c508:	0000c939 	.word	0x0000c939
    c50c:	0000c921 	.word	0x0000c921
    c510:	0000c911 	.word	0x0000c911
    c514:	0000c8db 	.word	0x0000c8db
    c518:	0000c8cf 	.word	0x0000c8cf
    c51c:	0000c3d7 	.word	0x0000c3d7
    c520:	0000c3d7 	.word	0x0000c3d7
    c524:	0000c8c1 	.word	0x0000c8c1
    c528:	0000c8b9 	.word	0x0000c8b9
    c52c:	0000c8b3 	.word	0x0000c8b3
    c530:	0000c891 	.word	0x0000c891
    c534:	0000c863 	.word	0x0000c863
    c538:	0000c835 	.word	0x0000c835
    c53c:	0000c815 	.word	0x0000c815
    c540:	0000c807 	.word	0x0000c807
    c544:	0000c7bb 	.word	0x0000c7bb
    c548:	0000c761 	.word	0x0000c761
    c54c:	0000ca41 	.word	0x0000ca41
    c550:	0000c9e5 	.word	0x0000c9e5
    c554:	0000c3d7 	.word	0x0000c3d7
    c558:	0000c3d7 	.word	0x0000c3d7
    c55c:	0000c3d7 	.word	0x0000c3d7
    c560:	0000c3d7 	.word	0x0000c3d7
    c564:	0000c3d7 	.word	0x0000c3d7
    c568:	0000c3d7 	.word	0x0000c3d7
    c56c:	0000c3d7 	.word	0x0000c3d7
    c570:	0000c3d7 	.word	0x0000c3d7
    c574:	0000c3d7 	.word	0x0000c3d7
    c578:	0000c3d7 	.word	0x0000c3d7
    c57c:	0000c3d7 	.word	0x0000c3d7
    c580:	0000c3d7 	.word	0x0000c3d7
    c584:	0000c3d7 	.word	0x0000c3d7
    c588:	0000c3d7 	.word	0x0000c3d7
    c58c:	0000c3d7 	.word	0x0000c3d7
    c590:	0000c3d7 	.word	0x0000c3d7
    c594:	0000c3d7 	.word	0x0000c3d7
    c598:	0000c3d7 	.word	0x0000c3d7
    c59c:	0000c3d7 	.word	0x0000c3d7
    c5a0:	0000c3d7 	.word	0x0000c3d7
    c5a4:	0000c3d7 	.word	0x0000c3d7
    c5a8:	0000c3d7 	.word	0x0000c3d7
    c5ac:	0000c3d7 	.word	0x0000c3d7
    c5b0:	0000c3d7 	.word	0x0000c3d7
    c5b4:	0000c9c1 	.word	0x0000c9c1
    c5b8:	0000c3d7 	.word	0x0000c3d7
    c5bc:	0000c3d7 	.word	0x0000c3d7
    c5c0:	0000c9b7 	.word	0x0000c9b7
	switch (ocf) {
    c5c4:	2d01      	cmp	r5, #1
    c5c6:	f47f af06 	bne.w	c3d6 <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c5ca:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    c5cc:	4b29      	ldr	r3, [pc, #164]	; (c674 <CONFIG_USB_DEVICE_VID+0x121>)
    c5ce:	6811      	ldr	r1, [r2, #0]
    c5d0:	6852      	ldr	r2, [r2, #4]
    c5d2:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c5d4:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c5d6:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c5d8:	f014 fc46 	bl	20e68 <bt_hci_cmd_complete_create>
    c5dc:	2101      	movs	r1, #1
    c5de:	4604      	mov	r4, r0
    c5e0:	3008      	adds	r0, #8
    c5e2:	f016 fdd6 	bl	23192 <net_buf_simple_add>
	ccst->status = status;
    c5e6:	2300      	movs	r3, #0
    c5e8:	7003      	strb	r3, [r0, #0]
}
    c5ea:	e6f8      	b.n	c3de <hci_cmd_handle+0x6a>
	switch (ocf) {
    c5ec:	2d7b      	cmp	r5, #123	; 0x7b
    c5ee:	f000 83a0 	beq.w	cd32 <CONFIG_USB_DEVICE_VID+0x7df>
    c5f2:	2d7c      	cmp	r5, #124	; 0x7c
    c5f4:	f47f aeef 	bne.w	c3d6 <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    c5f8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c5fa:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c5fc:	8859      	ldrh	r1, [r3, #2]
    c5fe:	b2a8      	uxth	r0, r5
    c600:	f004 fb14 	bl	10c2c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    c604:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c606:	2103      	movs	r1, #3
    c608:	8838      	ldrh	r0, [r7, #0]
    c60a:	f014 fc2d 	bl	20e68 <bt_hci_cmd_complete_create>
    c60e:	2103      	movs	r1, #3
    c610:	4603      	mov	r3, r0
    c612:	3008      	adds	r0, #8
    c614:	9309      	str	r3, [sp, #36]	; 0x24
    c616:	f016 fdbc 	bl	23192 <net_buf_simple_add>
	rp->status = status;
    c61a:	7004      	strb	r4, [r0, #0]
	return evt;
    c61c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c61e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    c622:	e6dc      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c624:	2107      	movs	r1, #7
    c626:	f014 fc1f 	bl	20e68 <bt_hci_cmd_complete_create>
    c62a:	2107      	movs	r1, #7
    c62c:	4603      	mov	r3, r0
    c62e:	3008      	adds	r0, #8
    c630:	9309      	str	r3, [sp, #36]	; 0x24
    c632:	f016 fdae 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c636:	4601      	mov	r1, r0
    c638:	2000      	movs	r0, #0
    c63a:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    c63e:	f7ff fba1 	bl	bd84 <ll_addr_read>
	return evt;
    c642:	9c09      	ldr	r4, [sp, #36]	; 0x24
}
    c644:	e6cb      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c646:	2109      	movs	r1, #9
    c648:	f014 fc0e 	bl	20e68 <bt_hci_cmd_complete_create>
    c64c:	2109      	movs	r1, #9
    c64e:	4603      	mov	r3, r0
    c650:	3008      	adds	r0, #8
    c652:	9309      	str	r3, [sp, #36]	; 0x24
    c654:	f016 fd9d 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c658:	2100      	movs	r1, #0
    c65a:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c65c:	2208      	movs	r2, #8
	rp->status = 0x00;
    c65e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c662:	f014 f86c 	bl	2073e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c666:	2360      	movs	r3, #96	; 0x60
	return evt;
    c668:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
    c66a:	716b      	strb	r3, [r5, #5]
}
    c66c:	e6b7      	b.n	c3de <hci_cmd_handle+0x6a>
    c66e:	bf00      	nop
    c670:	200060bc 	.word	0x200060bc
    c674:	20000198 	.word	0x20000198
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c678:	2141      	movs	r1, #65	; 0x41
    c67a:	f014 fbf5 	bl	20e68 <bt_hci_cmd_complete_create>
    c67e:	2141      	movs	r1, #65	; 0x41
    c680:	4603      	mov	r3, r0
    c682:	3008      	adds	r0, #8
    c684:	9309      	str	r3, [sp, #36]	; 0x24
    c686:	f016 fd84 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c68a:	2100      	movs	r1, #0
    c68c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c68e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c690:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c694:	f014 f853 	bl	2073e <memset>
	rp->commands[0] |= BIT(5);
    c698:	7869      	ldrb	r1, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    c69a:	7beb      	ldrb	r3, [r5, #15]
	rp->commands[10] |= BIT(2);
    c69c:	7aea      	ldrb	r2, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    c69e:	79a8      	ldrb	r0, [r5, #6]
	rp->commands[0] |= BIT(5);
    c6a0:	f041 0120 	orr.w	r1, r1, #32
    c6a4:	7069      	strb	r1, [r5, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    c6a6:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
	return evt;
    c6aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->commands[14] |= BIT(3) | BIT(5);
    c6ac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    c6b0:	f061 010f 	orn	r1, r1, #15
    c6b4:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    c6b8:	73eb      	strb	r3, [r5, #15]
	rp->commands[35] |= BIT(3);
    c6ba:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	rp->commands[15] |= BIT(1);
    c6be:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[10] |= BIT(2);
    c6c0:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c6c4:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[15] |= BIT(1);
    c6c8:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c6cc:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[10] |= BIT(2);
    c6d0:	72ea      	strb	r2, [r5, #11]
	rp->commands[39] |= BIT(2);
    c6d2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c6d6:	7dea      	ldrb	r2, [r5, #23]
	rp->commands[15] |= BIT(1);
    c6d8:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c6da:	7eab      	ldrb	r3, [r5, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    c6dc:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[39] |= BIT(2);
    c6e0:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[22] |= BIT(2);
    c6e4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c6e8:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    c6ec:	71a8      	strb	r0, [r5, #6]
	rp->commands[38] |= BIT(7);
    c6ee:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
	rp->commands[39] |= BIT(2);
    c6f2:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c6f6:	75ea      	strb	r2, [r5, #23]
	rp->commands[28] |= BIT(3);
    c6f8:	7f69      	ldrb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c6fa:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c6fe:	76ab      	strb	r3, [r5, #26]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c700:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    c704:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c708:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
	rp->commands[28] |= BIT(1) | BIT(2);
    c70c:	f041 010f 	orr.w	r1, r1, #15
	rp->commands[26] |= BIT(4) | BIT(5);
    c710:	20ff      	movs	r0, #255	; 0xff
	rp->commands[32] |= BIT(4) | BIT(5);
    c712:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c716:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(1) | BIT(2);
    c71a:	7769      	strb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c71c:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
    c720:	76e8      	strb	r0, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c722:	7728      	strb	r0, [r5, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c724:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
    c728:	e659      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c72a:	2109      	movs	r1, #9
    c72c:	f014 fb9c 	bl	20e68 <bt_hci_cmd_complete_create>
    c730:	2109      	movs	r1, #9
    c732:	4603      	mov	r3, r0
    c734:	3008      	adds	r0, #8
    c736:	9309      	str	r3, [sp, #36]	; 0x24
    c738:	f016 fd2b 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c73c:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    c73e:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    c744:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c746:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    c74a:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    c74c:	7083      	strb	r3, [r0, #2]
    c74e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c750:	2305      	movs	r3, #5
    c752:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    c754:	7101      	strb	r1, [r0, #4]
	return evt;
    c756:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c758:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c75a:	71c2      	strb	r2, [r0, #7]
    c75c:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    c75e:	e63e      	b.n	c3de <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    c760:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c762:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    c764:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c766:	f014 fb7f 	bl	20e68 <bt_hci_cmd_complete_create>
    c76a:	2105      	movs	r1, #5
    c76c:	4603      	mov	r3, r0
    c76e:	3008      	adds	r0, #8
    c770:	9309      	str	r3, [sp, #36]	; 0x24
    c772:	f016 fd0e 	bl	23192 <net_buf_simple_add>
    c776:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c778:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    c77a:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c77c:	1ce9      	adds	r1, r5, #3
    c77e:	f004 f9b7 	bl	10af0 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    c782:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    c784:	7028      	strb	r0, [r5, #0]
    c786:	2b00      	cmp	r3, #0
    c788:	fa93 f2a3 	rbit	r2, r3
    c78c:	792b      	ldrb	r3, [r5, #4]
    c78e:	fab2 f282 	clz	r2, r2
    c792:	bf08      	it	eq
    c794:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    c798:	2b00      	cmp	r3, #0
    c79a:	fa93 f3a3 	rbit	r3, r3
    c79e:	fab3 f383 	clz	r3, r3
    c7a2:	f102 0201 	add.w	r2, r2, #1
    c7a6:	bf08      	it	eq
    c7a8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    c7ac:	70ea      	strb	r2, [r5, #3]
    c7ae:	3301      	adds	r3, #1
	return evt;
    c7b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    c7b2:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    c7b4:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    c7b8:	e611      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c7ba:	2109      	movs	r1, #9
    c7bc:	f014 fb54 	bl	20e68 <bt_hci_cmd_complete_create>
    c7c0:	2109      	movs	r1, #9
    c7c2:	4603      	mov	r3, r0
    c7c4:	3008      	adds	r0, #8
    c7c6:	9309      	str	r3, [sp, #36]	; 0x24
    c7c8:	f016 fce3 	bl	23192 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    c7cc:	ab0a      	add	r3, sp, #40	; 0x28
    c7ce:	4605      	mov	r5, r0
    c7d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    c7d4:	a908      	add	r1, sp, #32
    c7d6:	f10d 001e 	add.w	r0, sp, #30
    c7da:	f004 f97d 	bl	10ad8 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c7de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c7e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    c7e6:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c7ea:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    c7ee:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c7f2:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    c7f6:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c7f8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c7fc:	702a      	strb	r2, [r5, #0]
	return evt;
    c7fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c800:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    c804:	e5eb      	b.n	c3de <hci_cmd_handle+0x6a>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    c806:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    c808:	8818      	ldrh	r0, [r3, #0]
    c80a:	f009 f9a1 	bl	15b50 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c80e:	8838      	ldrh	r0, [r7, #0]
    c810:	2101      	movs	r1, #1
    c812:	e6e1      	b.n	c5d8 <CONFIG_USB_DEVICE_VID+0x85>
	status = ll_rl_enable(cmd->enable);
    c814:	68a3      	ldr	r3, [r4, #8]
    c816:	7818      	ldrb	r0, [r3, #0]
    c818:	f009 f97e 	bl	15b18 <ll_rl_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c81c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c81e:	8838      	ldrh	r0, [r7, #0]
    c820:	2101      	movs	r1, #1
    c822:	f014 fb21 	bl	20e68 <bt_hci_cmd_complete_create>
    c826:	2101      	movs	r1, #1
    c828:	4604      	mov	r4, r0
    c82a:	3008      	adds	r0, #8
    c82c:	f016 fcb1 	bl	23192 <net_buf_simple_add>
	ccst->status = status;
    c830:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    c832:	e5d4      	b.n	c3de <hci_cmd_handle+0x6a>
    c834:	2207      	movs	r2, #7
    c836:	68a1      	ldr	r1, [r4, #8]
    c838:	a80a      	add	r0, sp, #40	; 0x28
    c83a:	f013 ff75 	bl	20728 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c83e:	2107      	movs	r1, #7
    c840:	8838      	ldrh	r0, [r7, #0]
    c842:	f014 fb11 	bl	20e68 <bt_hci_cmd_complete_create>
    c846:	2107      	movs	r1, #7
    c848:	4603      	mov	r3, r0
    c84a:	3008      	adds	r0, #8
    c84c:	9309      	str	r3, [sp, #36]	; 0x24
    c84e:	f016 fca0 	bl	23192 <net_buf_simple_add>
    c852:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    c854:	1c41      	adds	r1, r0, #1
    c856:	a80a      	add	r0, sp, #40	; 0x28
    c858:	f009 f92c 	bl	15ab4 <ll_rl_lrpa_get>
    c85c:	7020      	strb	r0, [r4, #0]
	return evt;
    c85e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c860:	e5bd      	b.n	c3de <hci_cmd_handle+0x6a>
    c862:	2207      	movs	r2, #7
    c864:	68a1      	ldr	r1, [r4, #8]
    c866:	a80a      	add	r0, sp, #40	; 0x28
    c868:	f013 ff5e 	bl	20728 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c86c:	2107      	movs	r1, #7
    c86e:	8838      	ldrh	r0, [r7, #0]
    c870:	f014 fafa 	bl	20e68 <bt_hci_cmd_complete_create>
    c874:	2107      	movs	r1, #7
    c876:	4603      	mov	r3, r0
    c878:	3008      	adds	r0, #8
    c87a:	9309      	str	r3, [sp, #36]	; 0x24
    c87c:	f016 fc89 	bl	23192 <net_buf_simple_add>
    c880:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    c882:	1c41      	adds	r1, r0, #1
    c884:	a80a      	add	r0, sp, #40	; 0x28
    c886:	f009 f8db 	bl	15a40 <ll_rl_crpa_get>
    c88a:	7020      	strb	r0, [r4, #0]
	return evt;
    c88c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c88e:	e5a6      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c890:	2102      	movs	r1, #2
    c892:	f014 fae9 	bl	20e68 <bt_hci_cmd_complete_create>
    c896:	2102      	movs	r1, #2
    c898:	4603      	mov	r3, r0
    c89a:	3008      	adds	r0, #8
    c89c:	9309      	str	r3, [sp, #36]	; 0x24
    c89e:	f016 fc78 	bl	23192 <net_buf_simple_add>
    c8a2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    c8a4:	f008 ff88 	bl	157b8 <ll_rl_size_get>
	rp->status = 0x00;
    c8a8:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    c8aa:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    c8ac:	7023      	strb	r3, [r4, #0]
	return evt;
    c8ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c8b0:	e595      	b.n	c3de <hci_cmd_handle+0x6a>
	status = ll_rl_clear();
    c8b2:	f008 ff83 	bl	157bc <ll_rl_clear>
    c8b6:	e7b1      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_rl_remove(&cmd->peer_id_addr);
    c8b8:	68a0      	ldr	r0, [r4, #8]
    c8ba:	f008 ffc1 	bl	15840 <ll_rl_remove>
    c8be:	e7ad      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    c8c0:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    c8c2:	f100 0217 	add.w	r2, r0, #23
    c8c6:	1dc1      	adds	r1, r0, #7
    c8c8:	f009 fc04 	bl	160d4 <ll_rl_add>
    c8cc:	e7a6      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    c8ce:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    c8d0:	8859      	ldrh	r1, [r3, #2]
    c8d2:	8818      	ldrh	r0, [r3, #0]
    c8d4:	f004 f8f6 	bl	10ac4 <ll_length_default_set>
    c8d8:	e7a0      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c8da:	2105      	movs	r1, #5
    c8dc:	f014 fac4 	bl	20e68 <bt_hci_cmd_complete_create>
    c8e0:	2105      	movs	r1, #5
    c8e2:	4603      	mov	r3, r0
    c8e4:	3008      	adds	r0, #8
    c8e6:	9309      	str	r3, [sp, #36]	; 0x24
    c8e8:	f016 fc53 	bl	23192 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    c8ec:	a90a      	add	r1, sp, #40	; 0x28
    c8ee:	4605      	mov	r5, r0
    c8f0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    c8f4:	f004 f8da 	bl	10aac <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c8f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c8fc:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    c900:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c902:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c906:	702a      	strb	r2, [r5, #0]
	return evt;
    c908:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c90a:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    c90e:	e566      	b.n	c3de <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    c910:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c912:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c914:	889a      	ldrh	r2, [r3, #4]
    c916:	8859      	ldrh	r1, [r3, #2]
    c918:	b2a8      	uxth	r0, r5
    c91a:	f004 f873 	bl	10a04 <ll_length_req_send>
    c91e:	e671      	b.n	c604 <CONFIG_USB_DEVICE_VID+0xb1>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    c920:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c922:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c924:	7892      	ldrb	r2, [r2, #2]
    c926:	2300      	movs	r3, #0
    c928:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c92c:	9300      	str	r3, [sp, #0]
    c92e:	2102      	movs	r1, #2
    c930:	b2a8      	uxth	r0, r5
    c932:	f003 ff1d 	bl	10770 <ll_conn_update>
    c936:	e665      	b.n	c604 <CONFIG_USB_DEVICE_VID+0xb1>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    c938:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c93a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c93c:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c93e:	8853      	ldrh	r3, [r2, #2]
    c940:	9102      	str	r1, [sp, #8]
    c942:	88d1      	ldrh	r1, [r2, #6]
    c944:	9101      	str	r1, [sp, #4]
    c946:	8891      	ldrh	r1, [r2, #4]
    c948:	9100      	str	r1, [sp, #0]
    c94a:	2200      	movs	r2, #0
    c94c:	2102      	movs	r1, #2
    c94e:	b2a8      	uxth	r0, r5
    c950:	f003 ff0e 	bl	10770 <ll_conn_update>
    c954:	e656      	b.n	c604 <CONFIG_USB_DEVICE_VID+0xb1>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c956:	2109      	movs	r1, #9
    c958:	f014 fa86 	bl	20e68 <bt_hci_cmd_complete_create>
    c95c:	2109      	movs	r1, #9
    c95e:	4603      	mov	r3, r0
    c960:	3008      	adds	r0, #8
    c962:	9309      	str	r3, [sp, #36]	; 0x24
    c964:	f016 fc15 	bl	23192 <net_buf_simple_add>
	dst[0] = val;
    c968:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    c96a:	2200      	movs	r2, #0
    c96c:	213f      	movs	r1, #63	; 0x3f
    c96e:	70c1      	strb	r1, [r0, #3]
    c970:	7002      	strb	r2, [r0, #0]
    c972:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    c974:	7083      	strb	r3, [r0, #2]
    c976:	2103      	movs	r1, #3
	return evt;
    c978:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c97a:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    c97c:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    c97e:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
    c980:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    c982:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    c984:	e52b      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c986:	2104      	movs	r1, #4
    c988:	f014 fa6e 	bl	20e68 <bt_hci_cmd_complete_create>
    c98c:	2104      	movs	r1, #4
    c98e:	4603      	mov	r3, r0
    c990:	3008      	adds	r0, #8
    c992:	9309      	str	r3, [sp, #36]	; 0x24
    c994:	f016 fbfd 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c998:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c99a:	2103      	movs	r1, #3
	rp->status = 0x00;
    c99c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c99e:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c9a0:	70c1      	strb	r1, [r0, #3]
	return evt;
    c9a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c9a4:	7042      	strb	r2, [r0, #1]
    c9a6:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    c9a8:	e519      	b.n	c3de <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c9aa:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    c9ac:	4bba      	ldr	r3, [pc, #744]	; (cc98 <CONFIG_USB_DEVICE_VID+0x745>)
    c9ae:	6811      	ldr	r1, [r2, #0]
    c9b0:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c9b2:	6019      	str	r1, [r3, #0]
    c9b4:	e60e      	b.n	c5d4 <CONFIG_USB_DEVICE_VID+0x81>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    c9b6:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c9b8:	79c1      	ldrb	r1, [r0, #7]
    c9ba:	f009 f8d3 	bl	15b64 <ll_priv_mode_set>
    c9be:	e72d      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c9c0:	2103      	movs	r1, #3
    c9c2:	f014 fa51 	bl	20e68 <bt_hci_cmd_complete_create>
    c9c6:	2103      	movs	r1, #3
    c9c8:	4603      	mov	r3, r0
    c9ca:	3008      	adds	r0, #8
    c9cc:	9309      	str	r3, [sp, #36]	; 0x24
    c9ce:	f016 fbe0 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    c9d2:	4601      	mov	r1, r0
    c9d4:	2300      	movs	r3, #0
    c9d6:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    c9da:	3001      	adds	r0, #1
    c9dc:	f7ff f9fa 	bl	bdd4 <ll_tx_pwr_get>
	return evt;
    c9e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c9e2:	e4fc      	b.n	c3de <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    c9e4:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c9e6:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
    c9e8:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    c9ea:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    c9ec:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c9f0:	07de      	lsls	r6, r3, #31
		cmd->tx_phys |= mask_phys;
    c9f2:	bf44      	itt	mi
    c9f4:	f041 0103 	orrmi.w	r1, r1, #3
    c9f8:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c9fa:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
    c9fe:	7913      	ldrb	r3, [r2, #4]
    ca00:	bf1c      	itt	ne
    ca02:	f043 0303 	orrne.w	r3, r3, #3
    ca06:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    ca08:	ea41 0203 	orr.w	r2, r1, r3
    ca0c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    ca10:	f040 81b5 	bne.w	cd7e <CONFIG_USB_DEVICE_VID+0x82b>
	if (!(cmd->tx_phys & 0x07) ||
    ca14:	074e      	lsls	r6, r1, #29
    ca16:	f000 81ac 	beq.w	cd72 <CONFIG_USB_DEVICE_VID+0x81f>
    ca1a:	075a      	lsls	r2, r3, #29
    ca1c:	f000 81a9 	beq.w	cd72 <CONFIG_USB_DEVICE_VID+0x81f>
	if (phy_opts & 0x03) {
    ca20:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    ca24:	bf1c      	itt	ne
    ca26:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    ca2a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    ca2e:	4628      	mov	r0, r5
    ca30:	f004 f886 	bl	10b40 <ll_phy_req_send>
    ca34:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ca36:	8838      	ldrh	r0, [r7, #0]
    ca38:	f014 fa28 	bl	20e8c <bt_hci_cmd_status_create>
    ca3c:	4604      	mov	r4, r0
    ca3e:	e4ce      	b.n	c3de <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    ca40:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ca42:	781a      	ldrb	r2, [r3, #0]
    ca44:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    ca46:	bf4a      	itet	mi
    ca48:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ca4a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    ca4c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ca4e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ca50:	bf4a      	itet	mi
    ca52:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ca54:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    ca56:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ca58:	f004 f868 	bl	10b2c <ll_phy_default_set>
    ca5c:	e6de      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    ca5e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    ca60:	7963      	ldrb	r3, [r4, #5]
    ca62:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    ca66:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ca6a:	7820      	ldrb	r0, [r4, #0]
    ca6c:	79a4      	ldrb	r4, [r4, #6]
    ca6e:	9400      	str	r4, [sp, #0]
    ca70:	f7f4 fd72 	bl	1558 <ll_scan_params_set>
    ca74:	e6d2      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_adv_enable(cmd->enable);
    ca76:	68a3      	ldr	r3, [r4, #8]
    ca78:	7818      	ldrb	r0, [r3, #0]
    ca7a:	f7f4 fae5 	bl	1048 <ll_adv_enable>
    ca7e:	e6cd      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    ca80:	68a1      	ldr	r1, [r4, #8]
    ca82:	f811 0b01 	ldrb.w	r0, [r1], #1
    ca86:	f002 fe11 	bl	f6ac <ll_adv_scan_rsp_set>
    ca8a:	e6c7      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    ca8c:	68a1      	ldr	r1, [r4, #8]
    ca8e:	f811 0b01 	ldrb.w	r0, [r1], #1
    ca92:	f002 fdc1 	bl	f618 <ll_adv_data_set>
    ca96:	e6c1      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ca98:	2102      	movs	r1, #2
    ca9a:	f014 f9e5 	bl	20e68 <bt_hci_cmd_complete_create>
    ca9e:	2102      	movs	r1, #2
    caa0:	4603      	mov	r3, r0
    caa2:	3008      	adds	r0, #8
    caa4:	9309      	str	r3, [sp, #36]	; 0x24
    caa6:	f016 fb74 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    caaa:	2300      	movs	r3, #0
    caac:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    caae:	7043      	strb	r3, [r0, #1]
	return evt;
    cab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cab2:	e494      	b.n	c3de <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    cab4:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    cab6:	7ba5      	ldrb	r5, [r4, #14]
    cab8:	79a3      	ldrb	r3, [r4, #6]
    caba:	7962      	ldrb	r2, [r4, #5]
    cabc:	7921      	ldrb	r1, [r4, #4]
    cabe:	8820      	ldrh	r0, [r4, #0]
    cac0:	9502      	str	r5, [sp, #8]
    cac2:	7b65      	ldrb	r5, [r4, #13]
    cac4:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    cac6:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    cac8:	9400      	str	r4, [sp, #0]
    caca:	f002 fba5 	bl	f218 <ll_adv_params_set>
    cace:	e6a5      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    cad0:	68a1      	ldr	r1, [r4, #8]
    cad2:	2001      	movs	r0, #1
    cad4:	f7ff f924 	bl	bd20 <ll_addr_set>
    cad8:	e6a0      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cada:	2109      	movs	r1, #9
    cadc:	f014 f9c4 	bl	20e68 <bt_hci_cmd_complete_create>
    cae0:	2109      	movs	r1, #9
    cae2:	4603      	mov	r3, r0
    cae4:	3008      	adds	r0, #8
    cae6:	9309      	str	r3, [sp, #36]	; 0x24
    cae8:	f016 fb53 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    caec:	2100      	movs	r1, #0
    caee:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    caf0:	2208      	movs	r2, #8
	rp->status = 0x00;
    caf2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    caf6:	f013 fe22 	bl	2073e <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    cafa:	f000 fe71 	bl	d7e0 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    cafe:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    cb00:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    cb04:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    cb06:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    cb08:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    cb0a:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    cb0c:	70ac      	strb	r4, [r5, #2]
    cb0e:	f3c1 2007 	ubfx	r0, r1, #8, #8
    cb12:	712b      	strb	r3, [r5, #4]
    cb14:	0a13      	lsrs	r3, r2, #8
	return evt;
    cb16:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[0] = val;
    cb18:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    cb1a:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    cb1c:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    cb1e:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    cb20:	e45d      	b.n	c3de <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    cb22:	68a3      	ldr	r3, [r4, #8]
    cb24:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    cb26:	2200      	movs	r2, #0
    cb28:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    cb2a:	b2a8      	uxth	r0, r5
    cb2c:	f007 ffc0 	bl	14ab0 <ll_start_enc_req_send>
    cb30:	e568      	b.n	c604 <CONFIG_USB_DEVICE_VID+0xb1>
	handle = sys_le16_to_cpu(cmd->handle);
    cb32:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    cb34:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    cb36:	f832 5b02 	ldrh.w	r5, [r2], #2
    cb3a:	e7f6      	b.n	cb2a <CONFIG_USB_DEVICE_VID+0x5d7>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    cb3c:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
    cb3e:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    cb40:	f102 030c 	add.w	r3, r2, #12
    cb44:	f831 0b02 	ldrh.w	r0, [r1], #2
    cb48:	320a      	adds	r2, #10
    cb4a:	f008 f8c7 	bl	14cdc <ll_enc_req_send>
    cb4e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    cb50:	8838      	ldrh	r0, [r7, #0]
    cb52:	f014 f99b 	bl	20e8c <bt_hci_cmd_status_create>
    cb56:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    cb58:	e441      	b.n	c3de <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cb5a:	2109      	movs	r1, #9
    cb5c:	f014 f984 	bl	20e68 <bt_hci_cmd_complete_create>
    cb60:	2109      	movs	r1, #9
    cb62:	4603      	mov	r3, r0
    cb64:	3008      	adds	r0, #8
    cb66:	9309      	str	r3, [sp, #36]	; 0x24
    cb68:	f016 fb13 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    cb6c:	2300      	movs	r3, #0
    cb6e:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    cb72:	2108      	movs	r1, #8
    cb74:	f009 ffae 	bl	16ad4 <lll_csrand_get>
	return evt;
    cb78:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cb7a:	e430      	b.n	c3de <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    cb7c:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    cb7e:	aa0a      	add	r2, sp, #40	; 0x28
    cb80:	2300      	movs	r3, #0
    cb82:	f100 0110 	add.w	r1, r0, #16
    cb86:	f00c faf3 	bl	19170 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cb8a:	2111      	movs	r1, #17
    cb8c:	8838      	ldrh	r0, [r7, #0]
    cb8e:	f014 f96b 	bl	20e68 <bt_hci_cmd_complete_create>
    cb92:	2111      	movs	r1, #17
    cb94:	4603      	mov	r3, r0
    cb96:	3008      	adds	r0, #8
    cb98:	9309      	str	r3, [sp, #36]	; 0x24
    cb9a:	f016 fafa 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    cb9e:	2300      	movs	r3, #0
    cba0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    cba4:	2210      	movs	r2, #16
    cba6:	a90a      	add	r1, sp, #40	; 0x28
    cba8:	f013 fdbe 	bl	20728 <memcpy>
	return evt;
    cbac:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cbae:	e416      	b.n	c3de <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    cbb0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    cbb2:	8818      	ldrh	r0, [r3, #0]
    cbb4:	f003 feda 	bl	1096c <ll_feature_req_send>
    cbb8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    cbba:	8838      	ldrh	r0, [r7, #0]
    cbbc:	f014 f966 	bl	20e8c <bt_hci_cmd_status_create>
    cbc0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    cbc2:	e40c      	b.n	c3de <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    cbc4:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cbc6:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    cbc8:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cbca:	f014 f94d 	bl	20e68 <bt_hci_cmd_complete_create>
    cbce:	2108      	movs	r1, #8
    cbd0:	4603      	mov	r3, r0
    cbd2:	4408      	add	r0, r1
    cbd4:	9309      	str	r3, [sp, #36]	; 0x24
    cbd6:	f016 fadc 	bl	23192 <net_buf_simple_add>
    cbda:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    cbdc:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    cbde:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    cbe0:	f003 fe5a 	bl	10898 <ll_chm_get>
	rp->status = status;
    cbe4:	7028      	strb	r0, [r5, #0]
	return evt;
    cbe6:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
    cbe8:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    cbec:	f7ff bbf7 	b.w	c3de <hci_cmd_handle+0x6a>
	status = ll_chm_update(&cmd->ch_map[0]);
    cbf0:	68a0      	ldr	r0, [r4, #8]
    cbf2:	f008 fb37 	bl	15264 <ll_chm_update>
    cbf6:	e611      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    cbf8:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    cbfa:	890a      	ldrh	r2, [r1, #8]
    cbfc:	884b      	ldrh	r3, [r1, #2]
    cbfe:	8808      	ldrh	r0, [r1, #0]
    cc00:	9202      	str	r2, [sp, #8]
    cc02:	88ca      	ldrh	r2, [r1, #6]
    cc04:	9201      	str	r2, [sp, #4]
    cc06:	8889      	ldrh	r1, [r1, #4]
    cc08:	9100      	str	r1, [sp, #0]
    cc0a:	2200      	movs	r2, #0
    cc0c:	4611      	mov	r1, r2
    cc0e:	f003 fdaf 	bl	10770 <ll_conn_update>
    cc12:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    cc14:	8838      	ldrh	r0, [r7, #0]
    cc16:	f014 f939 	bl	20e8c <bt_hci_cmd_status_create>
    cc1a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    cc1c:	f7ff bbdf 	b.w	c3de <hci_cmd_handle+0x6a>
	status = ll_fal_remove(&cmd->addr);
    cc20:	68a0      	ldr	r0, [r4, #8]
    cc22:	f008 fd35 	bl	15690 <ll_fal_remove>
    cc26:	e5f9      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_fal_add(&cmd->addr);
    cc28:	68a0      	ldr	r0, [r4, #8]
    cc2a:	f008 fc97 	bl	1555c <ll_fal_add>
    cc2e:	e5f5      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	status = ll_fal_clear();
    cc30:	f008 fc6a 	bl	15508 <ll_fal_clear>
    cc34:	e5f2      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cc36:	2102      	movs	r1, #2
    cc38:	f014 f916 	bl	20e68 <bt_hci_cmd_complete_create>
    cc3c:	2102      	movs	r1, #2
    cc3e:	4603      	mov	r3, r0
    cc40:	3008      	adds	r0, #8
    cc42:	9309      	str	r3, [sp, #36]	; 0x24
    cc44:	f016 faa5 	bl	23192 <net_buf_simple_add>
	rp->status = 0x00;
    cc48:	2300      	movs	r3, #0
    cc4a:	7003      	strb	r3, [r0, #0]
    cc4c:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    cc4e:	f008 fc59 	bl	15504 <ll_fal_size_get>
    cc52:	7060      	strb	r0, [r4, #1]
	return evt;
    cc54:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cc56:	f7ff bbc2 	b.w	c3de <hci_cmd_handle+0x6a>
	status = ll_connect_disable(node_rx);
    cc5a:	4630      	mov	r0, r6
    cc5c:	f007 fff0 	bl	14c40 <ll_connect_disable>
    cc60:	e5dc      	b.n	c81c <CONFIG_USB_DEVICE_VID+0x2c9>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    cc62:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    cc64:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    cc68:	7963      	ldrb	r3, [r4, #5]
    cc6a:	7922      	ldrb	r2, [r4, #4]
    cc6c:	8861      	ldrh	r1, [r4, #2]
    cc6e:	8820      	ldrh	r0, [r4, #0]
    cc70:	9504      	str	r5, [sp, #16]
    cc72:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    cc76:	9503      	str	r5, [sp, #12]
    cc78:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    cc7c:	9502      	str	r5, [sp, #8]
    cc7e:	7b25      	ldrb	r5, [r4, #12]
    cc80:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
    cc82:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
    cc84:	9400      	str	r4, [sp, #0]
    cc86:	f7f5 fb77 	bl	2378 <ll_create_connection>
    cc8a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    cc8c:	8838      	ldrh	r0, [r7, #0]
    cc8e:	f014 f8fd 	bl	20e8c <bt_hci_cmd_status_create>
    cc92:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    cc94:	f7ff bba3 	b.w	c3de <hci_cmd_handle+0x6a>
    cc98:	200001a0 	.word	0x200001a0
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    cc9c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    cc9e:	7818      	ldrb	r0, [r3, #0]
    cca0:	2800      	cmp	r0, #0
    cca2:	d061      	beq.n	cd68 <CONFIG_USB_DEVICE_VID+0x815>
    cca4:	785b      	ldrb	r3, [r3, #1]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d05e      	beq.n	cd68 <CONFIG_USB_DEVICE_VID+0x815>
			dup_count = 0;
    ccaa:	4938      	ldr	r1, [pc, #224]	; (cd8c <CONFIG_USB_DEVICE_VID+0x839>)
			dup_curr = 0U;
    ccac:	4a38      	ldr	r2, [pc, #224]	; (cd90 <CONFIG_USB_DEVICE_VID+0x83d>)
			dup_count = 0;
    ccae:	2300      	movs	r3, #0
    ccb0:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
    ccb2:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    ccb4:	f002 fd74 	bl	f7a0 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    ccb8:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
    ccba:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ccbc:	f04f 0101 	mov.w	r1, #1
    ccc0:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
    ccc2:	bf08      	it	eq
    ccc4:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ccc6:	e5ac      	b.n	c822 <CONFIG_USB_DEVICE_VID+0x2cf>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    ccc8:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    ccca:	7899      	ldrb	r1, [r3, #2]
    cccc:	8818      	ldrh	r0, [r3, #0]
    ccce:	f003 fe03 	bl	108d8 <ll_terminate_ind_send>
    ccd2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ccd4:	8838      	ldrh	r0, [r7, #0]
    ccd6:	f014 f8d9 	bl	20e8c <bt_hci_cmd_status_create>
    ccda:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    ccdc:	f7ff bb7f 	b.w	c3de <hci_cmd_handle+0x6a>
	dup_count = DUP_FILTER_DISABLED;
    cce0:	482a      	ldr	r0, [pc, #168]	; (cd8c <CONFIG_USB_DEVICE_VID+0x839>)
	event_mask = DEFAULT_EVENT_MASK;
    cce2:	492c      	ldr	r1, [pc, #176]	; (cd94 <CONFIG_USB_DEVICE_VID+0x841>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cce4:	4a2c      	ldr	r2, [pc, #176]	; (cd98 <CONFIG_USB_DEVICE_VID+0x845>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cce6:	4b2d      	ldr	r3, [pc, #180]	; (cd9c <CONFIG_USB_DEVICE_VID+0x849>)
	dup_count = DUP_FILTER_DISABLED;
    cce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ccec:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    ccee:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ccf2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ccf6:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ccfa:	2000      	movs	r0, #0
    ccfc:	2100      	movs	r1, #0
    ccfe:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cd02:	201f      	movs	r0, #31
    cd04:	2100      	movs	r1, #0
    cd06:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    cd0a:	f001 fea9 	bl	ea60 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    cd0e:	2101      	movs	r1, #1
    cd10:	8838      	ldrh	r0, [r7, #0]
    cd12:	f014 f8a9 	bl	20e68 <bt_hci_cmd_complete_create>
    cd16:	2101      	movs	r1, #1
    cd18:	4604      	mov	r4, r0
    cd1a:	3008      	adds	r0, #8
    cd1c:	f016 fa39 	bl	23192 <net_buf_simple_add>
	conn_count = 0U;
    cd20:	4a1f      	ldr	r2, [pc, #124]	; (cda0 <CONFIG_USB_DEVICE_VID+0x84d>)
	ccst->status = status;
    cd22:	2300      	movs	r3, #0
    cd24:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    cd26:	6013      	str	r3, [r2, #0]
}
    cd28:	f7ff bb59 	b.w	c3de <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    cd2c:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    cd2e:	4b1a      	ldr	r3, [pc, #104]	; (cd98 <CONFIG_USB_DEVICE_VID+0x845>)
    cd30:	e63d      	b.n	c9ae <CONFIG_USB_DEVICE_VID+0x45b>
	handle = sys_le16_to_cpu(cmd->handle);
    cd32:	68a3      	ldr	r3, [r4, #8]
    cd34:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cd36:	a90a      	add	r1, sp, #40	; 0x28
    cd38:	b2a8      	uxth	r0, r5
    cd3a:	f003 ff53 	bl	10be4 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cd3e:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    cd40:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cd42:	8838      	ldrh	r0, [r7, #0]
    cd44:	f014 f890 	bl	20e68 <bt_hci_cmd_complete_create>
    cd48:	2105      	movs	r1, #5
    cd4a:	4603      	mov	r3, r0
    cd4c:	3008      	adds	r0, #8
    cd4e:	9309      	str	r3, [sp, #36]	; 0x24
    cd50:	f016 fa1f 	bl	23192 <net_buf_simple_add>
	rp->status = status;
    cd54:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cd56:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cd5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
    cd5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cd60:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cd64:	f7ff bb3b 	b.w	c3de <hci_cmd_handle+0x6a>
		dup_count = DUP_FILTER_DISABLED;
    cd68:	4b08      	ldr	r3, [pc, #32]	; (cd8c <CONFIG_USB_DEVICE_VID+0x839>)
    cd6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd6e:	601a      	str	r2, [r3, #0]
    cd70:	e7a0      	b.n	ccb4 <CONFIG_USB_DEVICE_VID+0x761>
	return bt_hci_cmd_status_create(_opcode, status);
    cd72:	2112      	movs	r1, #18
    cd74:	f014 f88a 	bl	20e8c <bt_hci_cmd_status_create>
    cd78:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    cd7a:	f7ff bb30 	b.w	c3de <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
    cd7e:	2111      	movs	r1, #17
    cd80:	f014 f884 	bl	20e8c <bt_hci_cmd_status_create>
    cd84:	4604      	mov	r4, r0
		return;
    cd86:	f7ff bb2a 	b.w	c3de <hci_cmd_handle+0x6a>
    cd8a:	bf00      	nop
    cd8c:	200043dc 	.word	0x200043dc
    cd90:	200043e0 	.word	0x200043e0
    cd94:	20000198 	.word	0x20000198
    cd98:	200013d0 	.word	0x200013d0
    cd9c:	200001a0 	.word	0x200001a0
    cda0:	200043d8 	.word	0x200043d8

0000cda4 <hci_acl_handle>:
{
    cda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    cda8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    cdaa:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    cdac:	2b03      	cmp	r3, #3
	*evt = NULL;
    cdae:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    cdb0:	d918      	bls.n	cde4 <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    cdb2:	4605      	mov	r5, r0
    cdb4:	4688      	mov	r8, r1
    cdb6:	3008      	adds	r0, #8
    cdb8:	2104      	movs	r1, #4
    cdba:	f016 fa1b 	bl	231f4 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    cdbe:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    cdc0:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    cdc2:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    cdc6:	42b3      	cmp	r3, r6
    cdc8:	d30c      	bcc.n	cde4 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    cdca:	2e1b      	cmp	r6, #27
    cdcc:	d80a      	bhi.n	cde4 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    cdce:	f003 fc77 	bl	106c0 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    cdd2:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    cdd6:	4604      	mov	r4, r0
    cdd8:	b318      	cbz	r0, ce22 <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    cdda:	08bb      	lsrs	r3, r7, #2
    cddc:	d102      	bne.n	cde4 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    cdde:	b1d7      	cbz	r7, ce16 <hci_acl_handle+0x72>
    cde0:	2f01      	cmp	r7, #1
    cde2:	d003      	beq.n	cdec <hci_acl_handle+0x48>
		return -EINVAL;
    cde4:	f06f 0015 	mvn.w	r0, #21
}
    cde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cdec:	7903      	ldrb	r3, [r0, #4]
    cdee:	f367 0301 	bfi	r3, r7, #0, #2
    cdf2:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    cdf4:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    cdf6:	68a9      	ldr	r1, [r5, #8]
    cdf8:	4632      	mov	r2, r6
    cdfa:	1de0      	adds	r0, r4, #7
    cdfc:	f013 fc94 	bl	20728 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    ce00:	4621      	mov	r1, r4
    ce02:	f3c9 000b 	ubfx	r0, r9, #0, #12
    ce06:	f003 fc67 	bl	106d8 <ll_tx_mem_enqueue>
    ce0a:	2800      	cmp	r0, #0
    ce0c:	d0ec      	beq.n	cde8 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    ce0e:	4620      	mov	r0, r4
    ce10:	f003 fc5c 	bl	106cc <ll_tx_mem_release>
    ce14:	e7e6      	b.n	cde4 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ce16:	7903      	ldrb	r3, [r0, #4]
    ce18:	2202      	movs	r2, #2
    ce1a:	f362 0301 	bfi	r3, r2, #0, #2
    ce1e:	7103      	strb	r3, [r0, #4]
		break;
    ce20:	e7e8      	b.n	cdf4 <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    ce22:	4b11      	ldr	r3, [pc, #68]	; (ce68 <hci_acl_handle+0xc4>)
    ce24:	681b      	ldr	r3, [r3, #0]
    ce26:	019b      	lsls	r3, r3, #6
    ce28:	d402      	bmi.n	ce30 <hci_acl_handle+0x8c>
		return -ENOBUFS;
    ce2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ce2e:	e7db      	b.n	cde8 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ce30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce38:	2001      	movs	r0, #1
    ce3a:	f7f9 fafb 	bl	6434 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    ce3e:	2102      	movs	r1, #2
    ce40:	f8c8 0000 	str.w	r0, [r8]
    ce44:	3008      	adds	r0, #8
    ce46:	f016 f9a4 	bl	23192 <net_buf_simple_add>
	hdr->len = len;
    ce4a:	2401      	movs	r4, #1
	hdr->evt = evt;
    ce4c:	221a      	movs	r2, #26
    ce4e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    ce50:	7044      	strb	r4, [r0, #1]
    ce52:	f8d8 0000 	ldr.w	r0, [r8]
    ce56:	4621      	mov	r1, r4
    ce58:	3008      	adds	r0, #8
    ce5a:	f016 f99a 	bl	23192 <net_buf_simple_add>
    ce5e:	4603      	mov	r3, r0
		return -ENOBUFS;
    ce60:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    ce64:	701c      	strb	r4, [r3, #0]
    ce66:	e7bf      	b.n	cde8 <hci_acl_handle+0x44>
    ce68:	20000198 	.word	0x20000198

0000ce6c <hci_disconn_complete_encode>:
{
    ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    ce6e:	4b0e      	ldr	r3, [pc, #56]	; (cea8 <hci_disconn_complete_encode+0x3c>)
    ce70:	681b      	ldr	r3, [r3, #0]
    ce72:	06db      	lsls	r3, r3, #27
    ce74:	d400      	bmi.n	ce78 <hci_disconn_complete_encode+0xc>
}
    ce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce78:	f102 0408 	add.w	r4, r2, #8
    ce7c:	4605      	mov	r5, r0
    ce7e:	460e      	mov	r6, r1
    ce80:	4620      	mov	r0, r4
    ce82:	2102      	movs	r1, #2
    ce84:	f016 f985 	bl	23192 <net_buf_simple_add>
    ce88:	4603      	mov	r3, r0
	hdr->len = len;
    ce8a:	2104      	movs	r1, #4
	hdr->evt = evt;
    ce8c:	2205      	movs	r2, #5
	hdr->len = len;
    ce8e:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    ce90:	701a      	strb	r2, [r3, #0]
    ce92:	4620      	mov	r0, r4
    ce94:	f016 f97d 	bl	23192 <net_buf_simple_add>
    ce98:	2700      	movs	r7, #0
	ep->status = 0x00;
    ce9a:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ce9c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    cea0:	782b      	ldrb	r3, [r5, #0]
    cea2:	70c3      	strb	r3, [r0, #3]
}
    cea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cea6:	bf00      	nop
    cea8:	20000198 	.word	0x20000198

0000ceac <hci_disconn_complete_process>:
	conn_count--;
    ceac:	4a02      	ldr	r2, [pc, #8]	; (ceb8 <hci_disconn_complete_process+0xc>)
    ceae:	6813      	ldr	r3, [r2, #0]
    ceb0:	3b01      	subs	r3, #1
    ceb2:	6013      	str	r3, [r2, #0]
}
    ceb4:	4770      	bx	lr
    ceb6:	bf00      	nop
    ceb8:	200043d8 	.word	0x200043d8

0000cebc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    cebc:	7f03      	ldrb	r3, [r0, #28]
    cebe:	f003 0303 	and.w	r3, r3, #3
    cec2:	3b01      	subs	r3, #1
    cec4:	2b01      	cmp	r3, #1
{
    cec6:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    cec8:	d90d      	bls.n	cee6 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    ceca:	4a16      	ldr	r2, [pc, #88]	; (cf24 <hci_acl_encode+0x68>)
    cecc:	4916      	ldr	r1, [pc, #88]	; (cf28 <hci_acl_encode+0x6c>)
    cece:	4817      	ldr	r0, [pc, #92]	; (cf2c <hci_acl_encode+0x70>)
    ced0:	f641 53bb 	movw	r3, #7611	; 0x1dbb
    ced4:	f012 fc23 	bl	1f71e <printk>
    ced8:	4040      	eors	r0, r0
    ceda:	f380 8811 	msr	BASEPRI, r0
    cede:	f04f 0003 	mov.w	r0, #3
    cee2:	df02      	svc	2
		break;
	}
}
    cee4:	bd70      	pop	{r4, r5, r6, pc}
    cee6:	4604      	mov	r4, r0
    cee8:	f101 0508 	add.w	r5, r1, #8
    ceec:	4628      	mov	r0, r5
    ceee:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    cef0:	88e6      	ldrh	r6, [r4, #6]
    cef2:	f016 f94e 	bl	23192 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    cef6:	7f23      	ldrb	r3, [r4, #28]
    cef8:	f003 0303 	and.w	r3, r3, #3
    cefc:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    cefe:	bf0c      	ite	eq
    cf00:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    cf04:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    cf08:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    cf0a:	7f61      	ldrb	r1, [r4, #29]
    cf0c:	8041      	strh	r1, [r0, #2]
    cf0e:	4628      	mov	r0, r5
    cf10:	f016 f93f 	bl	23192 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cf14:	7f62      	ldrb	r2, [r4, #29]
    cf16:	f104 011f 	add.w	r1, r4, #31
}
    cf1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cf1e:	f013 bc03 	b.w	20728 <memcpy>
    cf22:	bf00      	nop
    cf24:	0002519c 	.word	0x0002519c
    cf28:	00025150 	.word	0x00025150
    cf2c:	000250f0 	.word	0x000250f0

0000cf30 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cf34:	f890 c004 	ldrb.w	ip, [r0, #4]
    cf38:	f1bc 0f03 	cmp.w	ip, #3
{
    cf3c:	b089      	sub	sp, #36	; 0x24
    cf3e:	4604      	mov	r4, r0
    cf40:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    cf42:	f100 061c 	add.w	r6, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cf46:	d01f      	beq.n	cf88 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
    cf48:	f1ac 0c05 	sub.w	ip, ip, #5
	handle = node_rx->hdr.handle;
    cf4c:	88c7      	ldrh	r7, [r0, #6]
	switch (node_rx->hdr.type) {
    cf4e:	f1bc 0f17 	cmp.w	ip, #23
    cf52:	d834      	bhi.n	cfbe <hci_evt_encode+0x8e>
    cf54:	e8df f01c 	tbh	[pc, ip, lsl #1]
    cf58:	00330043 	.word	0x00330043
    cf5c:	00330033 	.word	0x00330033
    cf60:	00330033 	.word	0x00330033
    cf64:	00330033 	.word	0x00330033
    cf68:	00330033 	.word	0x00330033
    cf6c:	00330033 	.word	0x00330033
    cf70:	00330033 	.word	0x00330033
    cf74:	00330033 	.word	0x00330033
    cf78:	00be0033 	.word	0x00be0033
    cf7c:	0123011b 	.word	0x0123011b
    cf80:	016a0153 	.word	0x016a0153
    cf84:	01b0017d 	.word	0x01b0017d
	switch (pdu_data->llctrl.opcode) {
    cf88:	7fc3      	ldrb	r3, [r0, #31]
    cf8a:	88c7      	ldrh	r7, [r0, #6]
    cf8c:	3b03      	subs	r3, #3
    cf8e:	2b12      	cmp	r3, #18
    cf90:	f200 81ca 	bhi.w	d328 <hci_evt_encode+0x3f8>
    cf94:	e8df f013 	tbh	[pc, r3, lsl #1]
    cf98:	01c80248 	.word	0x01c80248
    cf9c:	027701c8 	.word	0x027701c8
    cfa0:	01c80290 	.word	0x01c80290
    cfa4:	01c801fd 	.word	0x01c801fd
    cfa8:	01c801c8 	.word	0x01c801c8
    cfac:	01c80206 	.word	0x01c80206
    cfb0:	01c80221 	.word	0x01c80221
    cfb4:	01c80020 	.word	0x01c80020
    cfb8:	01d601c8 	.word	0x01d601c8
    cfbc:	01d6      	.short	0x01d6
		LL_ASSERT(0);
    cfbe:	4ab5      	ldr	r2, [pc, #724]	; (d294 <hci_evt_encode+0x364>)
    cfc0:	49b5      	ldr	r1, [pc, #724]	; (d298 <hci_evt_encode+0x368>)
    cfc2:	48b6      	ldr	r0, [pc, #728]	; (d29c <hci_evt_encode+0x36c>)
    cfc4:	f641 43af 	movw	r3, #7343	; 0x1caf
    cfc8:	f012 fba9 	bl	1f71e <printk>
    cfcc:	4040      	eors	r0, r0
    cfce:	f380 8811 	msr	BASEPRI, r0
    cfd2:	f04f 0003 	mov.w	r0, #3
    cfd6:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    cfd8:	b009      	add	sp, #36	; 0x24
    cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cfde:	4ab0      	ldr	r2, [pc, #704]	; (d2a0 <hci_evt_encode+0x370>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    cfe0:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
    cfe2:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    cfe4:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cfe8:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    cfec:	425b      	negs	r3, r3
    cfee:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cff0:	0c0b      	lsrs	r3, r1, #16
    cff2:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
    cff6:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cff8:	9006      	str	r0, [sp, #24]
	if (adv->tx_addr) {
    cffa:	0658      	lsls	r0, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cffc:	f8ad 101c 	strh.w	r1, [sp, #28]
	direct_report = node_rx->hdr.rx_ftr.direct;
    d000:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
    d004:	f100 8279 	bmi.w	d4fa <hci_evt_encode+0x5ca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d008:	4ba6      	ldr	r3, [pc, #664]	; (d2a4 <hci_evt_encode+0x374>)
    d00a:	685b      	ldr	r3, [r3, #4]
	if (direct_report) {
    d00c:	2e00      	cmp	r6, #0
    d00e:	f040 82b1 	bne.w	d574 <hci_evt_encode+0x644>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d012:	009b      	lsls	r3, r3, #2
    d014:	d5e0      	bpl.n	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    d016:	4ba4      	ldr	r3, [pc, #656]	; (d2a8 <hci_evt_encode+0x378>)
    d018:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d01a:	079e      	lsls	r6, r3, #30
    d01c:	d5dc      	bpl.n	cfd8 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
    d01e:	4ba3      	ldr	r3, [pc, #652]	; (d2ac <hci_evt_encode+0x37c>)
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d024:	f104 0a1e 	add.w	sl, r4, #30
	if (dup_count >= 0) {
    d028:	db09      	blt.n	d03e <hci_evt_encode+0x10e>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d02a:	7f20      	ldrb	r0, [r4, #28]
    d02c:	4652      	mov	r2, sl
    d02e:	f3c0 1180 	ubfx	r1, r0, #6, #1
    d032:	f000 000f 	and.w	r0, r0, #15
    d036:	f7ff f847 	bl	c0c8 <dup_found.part.0>
	if (dup_scan &&
    d03a:	2800      	cmp	r0, #0
    d03c:	d1cc      	bne.n	cfd8 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    d03e:	7f23      	ldrb	r3, [r4, #28]
    d040:	f003 030f 	and.w	r3, r3, #15
    d044:	2b01      	cmp	r3, #1
    d046:	f000 8351 	beq.w	d6ec <hci_evt_encode+0x7bc>
		data_len = (adv->len - BDADDR_SIZE);
    d04a:	7f63      	ldrb	r3, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d04c:	f103 0b06 	add.w	fp, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
    d050:	f1a3 0906 	sub.w	r9, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d054:	fa5f f28b 	uxtb.w	r2, fp
		data_len = (adv->len - BDADDR_SIZE);
    d058:	fa5f f989 	uxtb.w	r9, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    d05c:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d05e:	9205      	str	r2, [sp, #20]
	return net_buf_add(buf, melen);
    d060:	fa5f fb83 	uxtb.w	fp, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    d064:	464e      	mov	r6, r9
    d066:	3508      	adds	r5, #8
    d068:	2102      	movs	r1, #2
    d06a:	4628      	mov	r0, r5
    d06c:	f016 f891 	bl	23192 <net_buf_simple_add>
	hdr->len = len;
    d070:	9b05      	ldr	r3, [sp, #20]
    d072:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
    d074:	223e      	movs	r2, #62	; 0x3e
    d076:	7002      	strb	r2, [r0, #0]
    d078:	2101      	movs	r1, #1
    d07a:	4628      	mov	r0, r5
    d07c:	f016 f889 	bl	23192 <net_buf_simple_add>
    d080:	4602      	mov	r2, r0
	me->subevent = subevt;
    d082:	2302      	movs	r3, #2
    d084:	7013      	strb	r3, [r2, #0]
    d086:	4659      	mov	r1, fp
    d088:	4628      	mov	r0, r5
    d08a:	f016 f882 	bl	23192 <net_buf_simple_add>
	sep->num_reports = 1U;
    d08e:	2301      	movs	r3, #1
    d090:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    d092:	7f23      	ldrb	r3, [r4, #28]
    d094:	f003 030f 	and.w	r3, r3, #15
    d098:	3320      	adds	r3, #32
    d09a:	446b      	add	r3, sp
    d09c:	4605      	mov	r5, r0
    d09e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    d0a2:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    d0a4:	f008 fb88 	bl	157b8 <ll_rl_size_get>
    d0a8:	4580      	cmp	r8, r0
    d0aa:	f080 82f0 	bcs.w	d68e <hci_evt_encode+0x75e>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    d0ae:	4640      	mov	r0, r8
    d0b0:	1cea      	adds	r2, r5, #3
    d0b2:	1ca9      	adds	r1, r5, #2
    d0b4:	f008 fb3a 	bl	1572c <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    d0b8:	78ab      	ldrb	r3, [r5, #2]
    d0ba:	3302      	adds	r3, #2
    d0bc:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    d0be:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    d0c2:	350a      	adds	r5, #10
    d0c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
    d0c8:	4632      	mov	r2, r6
    d0ca:	4628      	mov	r0, r5
    d0cc:	f013 fb2c 	bl	20728 <memcpy>
	*prssi = rssi;
    d0d0:	55af      	strb	r7, [r5, r6]
    d0d2:	e781      	b.n	cfd8 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d0d4:	07f0      	lsls	r0, r6, #31
    d0d6:	f100 8202 	bmi.w	d4de <hci_evt_encode+0x5ae>
	status = cc->status;
    d0da:	7f26      	ldrb	r6, [r4, #28]
	if (!status) {
    d0dc:	2e00      	cmp	r6, #0
    d0de:	f000 81f5 	beq.w	d4cc <hci_evt_encode+0x59c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0e2:	4b70      	ldr	r3, [pc, #448]	; (d2a4 <hci_evt_encode+0x374>)
    d0e4:	685b      	ldr	r3, [r3, #4]
    d0e6:	0099      	lsls	r1, r3, #2
    d0e8:	f57f af76 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    d0ec:	4b6e      	ldr	r3, [pc, #440]	; (d2a8 <hci_evt_encode+0x378>)
    d0ee:	681b      	ldr	r3, [r3, #0]
    d0f0:	f240 2201 	movw	r2, #513	; 0x201
    d0f4:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    d0f6:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    d0fa:	f43f af6d 	beq.w	cfd8 <hci_evt_encode+0xa8>
	if (!status) {
    d0fe:	2e00      	cmp	r6, #0
    d100:	f040 820d 	bne.w	d51e <hci_evt_encode+0x5ee>
		conn_count++;
    d104:	4a6a      	ldr	r2, [pc, #424]	; (d2b0 <hci_evt_encode+0x380>)
    d106:	6813      	ldr	r3, [r2, #0]
    d108:	3301      	adds	r3, #1
    d10a:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    d10c:	f1b8 0f00 	cmp.w	r8, #0
    d110:	f000 828c 	beq.w	d62c <hci_evt_encode+0x6fc>
    d114:	3508      	adds	r5, #8
    d116:	2102      	movs	r1, #2
    d118:	4628      	mov	r0, r5
    d11a:	f016 f83a 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d11e:	233e      	movs	r3, #62	; 0x3e
    d120:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d122:	231f      	movs	r3, #31
    d124:	7043      	strb	r3, [r0, #1]
    d126:	2101      	movs	r1, #1
    d128:	4628      	mov	r0, r5
    d12a:	f016 f832 	bl	23192 <net_buf_simple_add>
    d12e:	4603      	mov	r3, r0
	me->subevent = subevt;
    d130:	220a      	movs	r2, #10
    d132:	701a      	strb	r2, [r3, #0]
    d134:	4628      	mov	r0, r5
    d136:	211e      	movs	r1, #30
    d138:	f016 f82b 	bl	23192 <net_buf_simple_add>
		leecc->status = 0x00;
    d13c:	7006      	strb	r6, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    d13e:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    d142:	7f63      	ldrb	r3, [r4, #29]
    d144:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    d146:	7fa3      	ldrb	r3, [r4, #30]
    d148:	7103      	strb	r3, [r0, #4]
    d14a:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    d14c:	2206      	movs	r2, #6
    d14e:	f104 011f 	add.w	r1, r4, #31
    d152:	3005      	adds	r0, #5
    d154:	f013 fae8 	bl	20728 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    d158:	2206      	movs	r2, #6
    d15a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    d15e:	f105 000b 	add.w	r0, r5, #11
    d162:	f013 fae1 	bl	20728 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    d166:	2206      	movs	r2, #6
    d168:	f104 0125 	add.w	r1, r4, #37	; 0x25
    d16c:	f105 0011 	add.w	r0, r5, #17
    d170:	f013 fada 	bl	20728 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d174:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    d176:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    d178:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d17a:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    d17e:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d182:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    d186:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d18a:	776b      	strb	r3, [r5, #29]
		return;
    d18c:	e724      	b.n	cfd8 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    d18e:	460a      	mov	r2, r1
    d190:	4630      	mov	r0, r6
    d192:	4639      	mov	r1, r7
}
    d194:	b009      	add	sp, #36	; 0x24
    d196:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    d19a:	f7ff be67 	b.w	ce6c <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d19e:	4b41      	ldr	r3, [pc, #260]	; (d2a4 <hci_evt_encode+0x374>)
    d1a0:	685b      	ldr	r3, [r3, #4]
    d1a2:	009a      	lsls	r2, r3, #2
    d1a4:	f57f af18 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    d1a8:	4b3f      	ldr	r3, [pc, #252]	; (d2a8 <hci_evt_encode+0x378>)
    d1aa:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d1ac:	075b      	lsls	r3, r3, #29
    d1ae:	f57f af13 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d1b2:	3508      	adds	r5, #8
    d1b4:	2102      	movs	r1, #2
    d1b6:	4628      	mov	r0, r5
    d1b8:	f015 ffeb 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d1bc:	233e      	movs	r3, #62	; 0x3e
    d1be:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d1c0:	230a      	movs	r3, #10
    d1c2:	7043      	strb	r3, [r0, #1]
    d1c4:	2101      	movs	r1, #1
    d1c6:	4628      	mov	r0, r5
    d1c8:	f015 ffe3 	bl	23192 <net_buf_simple_add>
    d1cc:	4603      	mov	r3, r0
	me->subevent = subevt;
    d1ce:	2203      	movs	r2, #3
    d1d0:	4628      	mov	r0, r5
    d1d2:	701a      	strb	r2, [r3, #0]
    d1d4:	2109      	movs	r1, #9
    d1d6:	f015 ffdc 	bl	23192 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d1da:	07f6      	lsls	r6, r6, #31
    d1dc:	4605      	mov	r5, r0
    d1de:	f100 8277 	bmi.w	d6d0 <hci_evt_encode+0x7a0>
	sep->status = cu->status;
    d1e2:	7f23      	ldrb	r3, [r4, #28]
    d1e4:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    d1e6:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    d1e8:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    d1ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d1ec:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    d1f0:	f8a5 7001 	strh.w	r7, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    d1f4:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    d1f8:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    d1fc:	e6ec      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d1fe:	4b29      	ldr	r3, [pc, #164]	; (d2a4 <hci_evt_encode+0x374>)
    d200:	685b      	ldr	r3, [r3, #4]
    d202:	0418      	lsls	r0, r3, #16
    d204:	f04f 0400 	mov.w	r4, #0
    d208:	f57f aee6 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d20c:	3508      	adds	r5, #8
    d20e:	2102      	movs	r1, #2
    d210:	4628      	mov	r0, r5
    d212:	f015 ffbe 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d216:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    d218:	2103      	movs	r1, #3
	hdr->evt = evt;
    d21a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d21c:	7041      	strb	r1, [r0, #1]
    d21e:	4628      	mov	r0, r5
    d220:	f015 ffb7 	bl	23192 <net_buf_simple_add>
	ep->status = 0x00;
    d224:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d226:	f8a0 7001 	strh.w	r7, [r0, #1]
    d22a:	e6d5      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d22c:	4b21      	ldr	r3, [pc, #132]	; (d2b4 <hci_evt_encode+0x384>)
    d22e:	681b      	ldr	r3, [r3, #0]
    d230:	0219      	lsls	r1, r3, #8
    d232:	f57f aed1 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d236:	3508      	adds	r5, #8
    d238:	2102      	movs	r1, #2
    d23a:	4628      	mov	r0, r5
    d23c:	f015 ffa9 	bl	23192 <net_buf_simple_add>
	hdr->len = len;
    d240:	2102      	movs	r1, #2
	hdr->evt = evt;
    d242:	2357      	movs	r3, #87	; 0x57
    d244:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d246:	7041      	strb	r1, [r0, #1]
    d248:	4628      	mov	r0, r5
    d24a:	f015 ffa2 	bl	23192 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d24e:	8007      	strh	r7, [r0, #0]
    d250:	e6c2      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d252:	4b14      	ldr	r3, [pc, #80]	; (d2a4 <hci_evt_encode+0x374>)
    d254:	685b      	ldr	r3, [r3, #4]
    d256:	009a      	lsls	r2, r3, #2
    d258:	f57f aebe 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d25c:	4b12      	ldr	r3, [pc, #72]	; (d2a8 <hci_evt_encode+0x378>)
    d25e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d260:	031b      	lsls	r3, r3, #12
    d262:	f57f aeb9 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d266:	3508      	adds	r5, #8
    d268:	2102      	movs	r1, #2
    d26a:	4628      	mov	r0, r5
    d26c:	f015 ff91 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d270:	233e      	movs	r3, #62	; 0x3e
    d272:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d274:	2304      	movs	r3, #4
    d276:	7043      	strb	r3, [r0, #1]
    d278:	2101      	movs	r1, #1
    d27a:	4628      	mov	r0, r5
    d27c:	f015 ff89 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d280:	2314      	movs	r3, #20
    d282:	7003      	strb	r3, [r0, #0]
    d284:	2103      	movs	r1, #3
    d286:	4628      	mov	r0, r5
    d288:	f015 ff83 	bl	23192 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d28c:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    d28e:	7f23      	ldrb	r3, [r4, #28]
    d290:	7083      	strb	r3, [r0, #2]
    d292:	e6a1      	b.n	cfd8 <hci_evt_encode+0xa8>
    d294:	0002519c 	.word	0x0002519c
    d298:	00025150 	.word	0x00025150
    d29c:	000250f0 	.word	0x000250f0
    d2a0:	00024bc0 	.word	0x00024bc0
    d2a4:	20000198 	.word	0x20000198
    d2a8:	200001a0 	.word	0x200001a0
    d2ac:	200043dc 	.word	0x200043dc
    d2b0:	200043d8 	.word	0x200043d8
    d2b4:	200013d0 	.word	0x200013d0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2b8:	4ba8      	ldr	r3, [pc, #672]	; (d55c <hci_evt_encode+0x62c>)
    d2ba:	685b      	ldr	r3, [r3, #4]
    d2bc:	009e      	lsls	r6, r3, #2
    d2be:	f57f ae8b 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d2c2:	4ba7      	ldr	r3, [pc, #668]	; (d560 <hci_evt_encode+0x630>)
    d2c4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2c6:	0518      	lsls	r0, r3, #20
    d2c8:	f57f ae86 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d2cc:	3508      	adds	r5, #8
    d2ce:	2102      	movs	r1, #2
    d2d0:	4628      	mov	r0, r5
    d2d2:	f015 ff5e 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d2d6:	233e      	movs	r3, #62	; 0x3e
    d2d8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d2da:	2306      	movs	r3, #6
    d2dc:	7043      	strb	r3, [r0, #1]
    d2de:	2101      	movs	r1, #1
    d2e0:	4628      	mov	r0, r5
    d2e2:	f015 ff56 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d2e6:	230c      	movs	r3, #12
    d2e8:	7003      	strb	r3, [r0, #0]
    d2ea:	2105      	movs	r1, #5
    d2ec:	4628      	mov	r0, r5
    d2ee:	f015 ff50 	bl	23192 <net_buf_simple_add>
	sep->status = pu->status;
    d2f2:	7f23      	ldrb	r3, [r4, #28]
    d2f4:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d2f6:	f8a0 7001 	strh.w	r7, [r0, #1]
    d2fa:	7f62      	ldrb	r2, [r4, #29]
    d2fc:	2a00      	cmp	r2, #0
    d2fe:	fa92 f3a2 	rbit	r3, r2
    d302:	fab3 f383 	clz	r3, r3
    d306:	bf08      	it	eq
    d308:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d30c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    d30e:	70c3      	strb	r3, [r0, #3]
    d310:	7fa2      	ldrb	r2, [r4, #30]
    d312:	fa92 f3a2 	rbit	r3, r2
    d316:	2a00      	cmp	r2, #0
    d318:	fab3 f383 	clz	r3, r3
    d31c:	bf08      	it	eq
    d31e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d322:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    d324:	7103      	strb	r3, [r0, #4]
    d326:	e657      	b.n	cfd8 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
    d328:	4a8e      	ldr	r2, [pc, #568]	; (d564 <hci_evt_encode+0x634>)
    d32a:	498f      	ldr	r1, [pc, #572]	; (d568 <hci_evt_encode+0x638>)
    d32c:	488f      	ldr	r0, [pc, #572]	; (d56c <hci_evt_encode+0x63c>)
    d32e:	f641 538f 	movw	r3, #7567	; 0x1d8f
    d332:	f012 f9f4 	bl	1f71e <printk>
    d336:	4040      	eors	r0, r0
    d338:	f380 8811 	msr	BASEPRI, r0
    d33c:	f04f 0003 	mov.w	r0, #3
    d340:	df02      	svc	2
}
    d342:	e649      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d344:	4b85      	ldr	r3, [pc, #532]	; (d55c <hci_evt_encode+0x62c>)
    d346:	685b      	ldr	r3, [r3, #4]
    d348:	009a      	lsls	r2, r3, #2
    d34a:	f57f ae45 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    d34e:	4b84      	ldr	r3, [pc, #528]	; (d560 <hci_evt_encode+0x630>)
    d350:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d352:	065b      	lsls	r3, r3, #25
    d354:	f57f ae40 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d358:	3508      	adds	r5, #8
    d35a:	2102      	movs	r1, #2
    d35c:	4628      	mov	r0, r5
    d35e:	f015 ff18 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d362:	233e      	movs	r3, #62	; 0x3e
    d364:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d366:	230b      	movs	r3, #11
    d368:	7043      	strb	r3, [r0, #1]
    d36a:	2101      	movs	r1, #1
    d36c:	4628      	mov	r0, r5
    d36e:	f015 ff10 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d372:	2307      	movs	r3, #7
    d374:	7003      	strb	r3, [r0, #0]
    d376:	210a      	movs	r1, #10
    d378:	4628      	mov	r0, r5
    d37a:	f015 ff0a 	bl	23192 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d37e:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    d380:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d382:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    d384:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d386:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    d388:	8c23      	ldrh	r3, [r4, #32]
    d38a:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d38c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d38e:	8103      	strh	r3, [r0, #8]
    d390:	e622      	b.n	cfd8 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    d392:	460b      	mov	r3, r1
    d394:	463a      	mov	r2, r7
    d396:	4631      	mov	r1, r6
    d398:	2000      	movs	r0, #0
}
    d39a:	b009      	add	sp, #36	; 0x24
    d39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d3a0:	f7fe bef2 	b.w	c188 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d3a4:	4b6d      	ldr	r3, [pc, #436]	; (d55c <hci_evt_encode+0x62c>)
    d3a6:	681b      	ldr	r3, [r3, #0]
    d3a8:	061e      	lsls	r6, r3, #24
    d3aa:	f57f ae15 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d3ae:	3508      	adds	r5, #8
    d3b0:	2102      	movs	r1, #2
    d3b2:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d3b4:	f894 4020 	ldrb.w	r4, [r4, #32]
    d3b8:	f015 feeb 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d3bc:	2308      	movs	r3, #8
	hdr->len = len;
    d3be:	2104      	movs	r1, #4
	hdr->evt = evt;
    d3c0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d3c2:	7041      	strb	r1, [r0, #1]
    d3c4:	4628      	mov	r0, r5
    d3c6:	f015 fee4 	bl	23192 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    d3ca:	fab4 f384 	clz	r3, r4
    d3ce:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    d3d0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d3d2:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d3d6:	70c3      	strb	r3, [r0, #3]
    d3d8:	e5fe      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3da:	4b60      	ldr	r3, [pc, #384]	; (d55c <hci_evt_encode+0x62c>)
    d3dc:	685b      	ldr	r3, [r3, #4]
    d3de:	0098      	lsls	r0, r3, #2
    d3e0:	f140 8093 	bpl.w	d50a <hci_evt_encode+0x5da>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    d3e4:	4b5e      	ldr	r3, [pc, #376]	; (d560 <hci_evt_encode+0x630>)
    d3e6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3e8:	0699      	lsls	r1, r3, #26
    d3ea:	f140 808e 	bpl.w	d50a <hci_evt_encode+0x5da>
    d3ee:	3508      	adds	r5, #8
    d3f0:	2102      	movs	r1, #2
    d3f2:	4628      	mov	r0, r5
    d3f4:	f015 fecd 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d3f8:	233e      	movs	r3, #62	; 0x3e
    d3fa:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d3fc:	230b      	movs	r3, #11
    d3fe:	7043      	strb	r3, [r0, #1]
    d400:	2101      	movs	r1, #1
    d402:	4628      	mov	r0, r5
    d404:	f015 fec5 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d408:	2306      	movs	r3, #6
    d40a:	7003      	strb	r3, [r0, #0]
    d40c:	210a      	movs	r1, #10
    d40e:	4628      	mov	r0, r5
    d410:	f015 febf 	bl	23192 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    d414:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    d416:	8c23      	ldrh	r3, [r4, #32]
    d418:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    d41a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d41c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    d41e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d420:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    d422:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d424:	8103      	strh	r3, [r0, #8]
    d426:	e5d7      	b.n	cfd8 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d428:	4b4c      	ldr	r3, [pc, #304]	; (d55c <hci_evt_encode+0x62c>)
    d42a:	685b      	ldr	r3, [r3, #4]
    d42c:	0099      	lsls	r1, r3, #2
    d42e:	f57f add3 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    d432:	4b4b      	ldr	r3, [pc, #300]	; (d560 <hci_evt_encode+0x630>)
    d434:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d436:	06da      	lsls	r2, r3, #27
    d438:	f57f adce 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d43c:	3508      	adds	r5, #8
    d43e:	2102      	movs	r1, #2
    d440:	4628      	mov	r0, r5
    d442:	f015 fea6 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d446:	233e      	movs	r3, #62	; 0x3e
    d448:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d44a:	230d      	movs	r3, #13
    d44c:	7043      	strb	r3, [r0, #1]
    d44e:	2101      	movs	r1, #1
    d450:	4628      	mov	r0, r5
    d452:	f015 fe9e 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d456:	2305      	movs	r3, #5
    d458:	7003      	strb	r3, [r0, #0]
    d45a:	210c      	movs	r1, #12
    d45c:	4628      	mov	r0, r5
    d45e:	f015 fe98 	bl	23192 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    d462:	f104 0120 	add.w	r1, r4, #32
    d466:	4605      	mov	r5, r0
    d468:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    d46a:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    d46e:	f013 f95b 	bl	20728 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    d472:	2202      	movs	r2, #2
    d474:	f104 0128 	add.w	r1, r4, #40	; 0x28
    d478:	f105 000a 	add.w	r0, r5, #10
}
    d47c:	b009      	add	sp, #36	; 0x24
    d47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    d482:	f013 b951 	b.w	20728 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d486:	4b35      	ldr	r3, [pc, #212]	; (d55c <hci_evt_encode+0x62c>)
    d488:	681b      	ldr	r3, [r3, #0]
    d48a:	061b      	lsls	r3, r3, #24
    d48c:	f04f 0400 	mov.w	r4, #0
    d490:	f57f ada2 	bpl.w	cfd8 <hci_evt_encode+0xa8>
    d494:	3508      	adds	r5, #8
    d496:	2102      	movs	r1, #2
    d498:	4628      	mov	r0, r5
    d49a:	f015 fe7a 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d49e:	2308      	movs	r3, #8
	hdr->len = len;
    d4a0:	2104      	movs	r1, #4
	hdr->evt = evt;
    d4a2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d4a4:	7041      	strb	r1, [r0, #1]
    d4a6:	4628      	mov	r0, r5
    d4a8:	f015 fe73 	bl	23192 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    d4ac:	2301      	movs	r3, #1
	ep->status = err;
    d4ae:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d4b0:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d4b4:	70c3      	strb	r3, [r0, #3]
    d4b6:	e58f      	b.n	cfd8 <hci_evt_encode+0xa8>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    d4b8:	f890 3020 	ldrb.w	r3, [r0, #32]
    d4bc:	2b0e      	cmp	r3, #14
    d4be:	f47f ad8b 	bne.w	cfd8 <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d4c2:	460b      	mov	r3, r1
    d4c4:	463a      	mov	r2, r7
    d4c6:	2100      	movs	r1, #0
    d4c8:	201a      	movs	r0, #26
    d4ca:	e766      	b.n	d39a <hci_evt_encode+0x46a>
		ll_rl_crpa_set(cc->peer_addr_type,
    d4cc:	7fa0      	ldrb	r0, [r4, #30]
    d4ce:	f104 0325 	add.w	r3, r4, #37	; 0x25
    d4d2:	22ff      	movs	r2, #255	; 0xff
    d4d4:	f104 011f 	add.w	r1, r4, #31
    d4d8:	f008 fa6c 	bl	159b4 <ll_rl_crpa_set>
    d4dc:	e601      	b.n	d0e2 <hci_evt_encode+0x1b2>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    d4de:	4a21      	ldr	r2, [pc, #132]	; (d564 <hci_evt_encode+0x634>)
    d4e0:	4923      	ldr	r1, [pc, #140]	; (d570 <hci_evt_encode+0x640>)
    d4e2:	4822      	ldr	r0, [pc, #136]	; (d56c <hci_evt_encode+0x63c>)
    d4e4:	f641 23f5 	movw	r3, #6901	; 0x1af5
    d4e8:	f012 f919 	bl	1f71e <printk>
    d4ec:	4040      	eors	r0, r0
    d4ee:	f380 8811 	msr	BASEPRI, r0
    d4f2:	f04f 0003 	mov.w	r0, #3
    d4f6:	df02      	svc	2
    d4f8:	e5ef      	b.n	d0da <hci_evt_encode+0x1aa>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    d4fa:	2100      	movs	r1, #0
    d4fc:	f104 031e 	add.w	r3, r4, #30
    d500:	4642      	mov	r2, r8
    d502:	4608      	mov	r0, r1
    d504:	f008 fa56 	bl	159b4 <ll_rl_crpa_set>
    d508:	e57e      	b.n	d008 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    d50a:	2300      	movs	r3, #0
    d50c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d510:	9300      	str	r3, [sp, #0]
    d512:	221a      	movs	r2, #26
    d514:	2102      	movs	r1, #2
    d516:	4638      	mov	r0, r7
    d518:	f003 f92a 	bl	10770 <ll_conn_update>
		return;
    d51c:	e55c      	b.n	cfd8 <hci_evt_encode+0xa8>
    d51e:	3508      	adds	r5, #8
    d520:	2102      	movs	r1, #2
    d522:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    d524:	f1b8 0f00 	cmp.w	r8, #0
    d528:	f040 80bb 	bne.w	d6a2 <hci_evt_encode+0x772>
    d52c:	f015 fe31 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d530:	233e      	movs	r3, #62	; 0x3e
    d532:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d534:	2313      	movs	r3, #19
    d536:	7043      	strb	r3, [r0, #1]
    d538:	2101      	movs	r1, #1
    d53a:	4628      	mov	r0, r5
    d53c:	f015 fe29 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d540:	2301      	movs	r3, #1
    d542:	7003      	strb	r3, [r0, #0]
    d544:	2112      	movs	r1, #18
    d546:	4628      	mov	r0, r5
    d548:	f015 fe23 	bl	23192 <net_buf_simple_add>
    d54c:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    d54e:	2212      	movs	r2, #18
    d550:	4641      	mov	r1, r8
    d552:	f013 f8f4 	bl	2073e <memset>
		lecc->status = status;
    d556:	7026      	strb	r6, [r4, #0]
		return;
    d558:	e53e      	b.n	cfd8 <hci_evt_encode+0xa8>
    d55a:	bf00      	nop
    d55c:	20000198 	.word	0x20000198
    d560:	200001a0 	.word	0x200001a0
    d564:	0002519c 	.word	0x0002519c
    d568:	00025150 	.word	0x00025150
    d56c:	000250f0 	.word	0x000250f0
    d570:	00025200 	.word	0x00025200
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d574:	0099      	lsls	r1, r3, #2
    d576:	f57f ad2f 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    d57a:	4b65      	ldr	r3, [pc, #404]	; (d710 <hci_evt_encode+0x7e0>)
    d57c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d57e:	055a      	lsls	r2, r3, #21
    d580:	f57f ad2a 	bpl.w	cfd8 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    d584:	7f23      	ldrb	r3, [r4, #28]
    d586:	f003 030f 	and.w	r3, r3, #15
    d58a:	2b01      	cmp	r3, #1
    d58c:	d00c      	beq.n	d5a8 <hci_evt_encode+0x678>
    d58e:	4a61      	ldr	r2, [pc, #388]	; (d714 <hci_evt_encode+0x7e4>)
    d590:	4961      	ldr	r1, [pc, #388]	; (d718 <hci_evt_encode+0x7e8>)
    d592:	4862      	ldr	r0, [pc, #392]	; (d71c <hci_evt_encode+0x7ec>)
    d594:	f241 435a 	movw	r3, #5210	; 0x145a
    d598:	f012 f8c1 	bl	1f71e <printk>
    d59c:	4040      	eors	r0, r0
    d59e:	f380 8811 	msr	BASEPRI, r0
    d5a2:	f04f 0003 	mov.w	r0, #3
    d5a6:	df02      	svc	2
	if (dup_count >= 0) {
    d5a8:	4b5d      	ldr	r3, [pc, #372]	; (d720 <hci_evt_encode+0x7f0>)
    d5aa:	681b      	ldr	r3, [r3, #0]
    d5ac:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d5ae:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
    d5b2:	db0a      	blt.n	d5ca <hci_evt_encode+0x69a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d5b4:	7f20      	ldrb	r0, [r4, #28]
    d5b6:	4632      	mov	r2, r6
    d5b8:	f3c0 1180 	ubfx	r1, r0, #6, #1
    d5bc:	f000 000f 	and.w	r0, r0, #15
    d5c0:	f7fe fd82 	bl	c0c8 <dup_found.part.0>
	if (dup_scan &&
    d5c4:	2800      	cmp	r0, #0
    d5c6:	f47f ad07 	bne.w	cfd8 <hci_evt_encode+0xa8>
    d5ca:	3508      	adds	r5, #8
    d5cc:	2102      	movs	r1, #2
    d5ce:	4628      	mov	r0, r5
    d5d0:	f015 fddf 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d5d4:	233e      	movs	r3, #62	; 0x3e
    d5d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d5d8:	2312      	movs	r3, #18
    d5da:	7043      	strb	r3, [r0, #1]
    d5dc:	2101      	movs	r1, #1
    d5de:	4628      	mov	r0, r5
    d5e0:	f015 fdd7 	bl	23192 <net_buf_simple_add>
    d5e4:	4603      	mov	r3, r0
	me->subevent = subevt;
    d5e6:	220b      	movs	r2, #11
    d5e8:	701a      	strb	r2, [r3, #0]
    d5ea:	4628      	mov	r0, r5
    d5ec:	2111      	movs	r1, #17
    d5ee:	f015 fdd0 	bl	23192 <net_buf_simple_add>
	drp->num_reports = 1U;
    d5f2:	2301      	movs	r3, #1
    d5f4:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    d5f6:	7043      	strb	r3, [r0, #1]
    d5f8:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
    d5fa:	f008 f8dd 	bl	157b8 <ll_rl_size_get>
    d5fe:	4580      	cmp	r8, r0
    d600:	d27b      	bcs.n	d6fa <hci_evt_encode+0x7ca>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    d602:	1cea      	adds	r2, r5, #3
    d604:	4640      	mov	r0, r8
    d606:	1ca9      	adds	r1, r5, #2
    d608:	f008 f890 	bl	1572c <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    d60c:	78ab      	ldrb	r3, [r5, #2]
    d60e:	3302      	adds	r3, #2
    d610:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
    d612:	7f23      	ldrb	r3, [r4, #28]
    d614:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
    d618:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
    d61a:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    d61c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    d620:	f105 000a 	add.w	r0, r5, #10
    d624:	f013 f880 	bl	20728 <memcpy>
	dir_info->rssi = rssi;
    d628:	742f      	strb	r7, [r5, #16]
    d62a:	e4d5      	b.n	cfd8 <hci_evt_encode+0xa8>
    d62c:	3508      	adds	r5, #8
    d62e:	2102      	movs	r1, #2
    d630:	4628      	mov	r0, r5
    d632:	f015 fdae 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d636:	233e      	movs	r3, #62	; 0x3e
    d638:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d63a:	2313      	movs	r3, #19
    d63c:	7043      	strb	r3, [r0, #1]
    d63e:	2101      	movs	r1, #1
    d640:	4628      	mov	r0, r5
    d642:	f015 fda6 	bl	23192 <net_buf_simple_add>
    d646:	4603      	mov	r3, r0
	me->subevent = subevt;
    d648:	2201      	movs	r2, #1
    d64a:	701a      	strb	r2, [r3, #0]
    d64c:	4628      	mov	r0, r5
    d64e:	2112      	movs	r1, #18
    d650:	f015 fd9f 	bl	23192 <net_buf_simple_add>
	lecc->status = 0x00;
    d654:	7006      	strb	r6, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    d656:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    d65a:	7f63      	ldrb	r3, [r4, #29]
    d65c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    d65e:	7fa3      	ldrb	r3, [r4, #30]
    d660:	f003 0301 	and.w	r3, r3, #1
    d664:	4605      	mov	r5, r0
    d666:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    d668:	2206      	movs	r2, #6
    d66a:	f104 011f 	add.w	r1, r4, #31
    d66e:	3005      	adds	r0, #5
    d670:	f013 f85a 	bl	20728 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d674:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d676:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    d678:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d67a:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d67e:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d682:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    d686:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d68a:	746b      	strb	r3, [r5, #17]
    d68c:	e4a4      	b.n	cfd8 <hci_evt_encode+0xa8>
		adv_info->addr.type = adv->tx_addr;
    d68e:	7f23      	ldrb	r3, [r4, #28]
    d690:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d694:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
    d696:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d698:	2206      	movs	r2, #6
    d69a:	1ce8      	adds	r0, r5, #3
    d69c:	f013 f844 	bl	20728 <memcpy>
    d6a0:	e50d      	b.n	d0be <hci_evt_encode+0x18e>
    d6a2:	f015 fd76 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d6a6:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    d6a8:	231f      	movs	r3, #31
	hdr->evt = evt;
    d6aa:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d6ac:	7043      	strb	r3, [r0, #1]
    d6ae:	2101      	movs	r1, #1
    d6b0:	4628      	mov	r0, r5
    d6b2:	f015 fd6e 	bl	23192 <net_buf_simple_add>
	me->subevent = subevt;
    d6b6:	230a      	movs	r3, #10
    d6b8:	7003      	strb	r3, [r0, #0]
    d6ba:	211e      	movs	r1, #30
    d6bc:	4628      	mov	r0, r5
    d6be:	f015 fd68 	bl	23192 <net_buf_simple_add>
    d6c2:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    d6c4:	221e      	movs	r2, #30
    d6c6:	2100      	movs	r1, #0
    d6c8:	f013 f839 	bl	2073e <memset>
			leecc->status = status;
    d6cc:	7026      	strb	r6, [r4, #0]
			return;
    d6ce:	e483      	b.n	cfd8 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d6d0:	4a10      	ldr	r2, [pc, #64]	; (d714 <hci_evt_encode+0x7e4>)
    d6d2:	4914      	ldr	r1, [pc, #80]	; (d724 <hci_evt_encode+0x7f4>)
    d6d4:	4811      	ldr	r0, [pc, #68]	; (d71c <hci_evt_encode+0x7ec>)
    d6d6:	f641 337a 	movw	r3, #7034	; 0x1b7a
    d6da:	f012 f820 	bl	1f71e <printk>
    d6de:	4040      	eors	r0, r0
    d6e0:	f380 8811 	msr	BASEPRI, r0
    d6e4:	f04f 0003 	mov.w	r0, #3
    d6e8:	df02      	svc	2
    d6ea:	e57a      	b.n	d1e2 <hci_evt_encode+0x2b2>
    d6ec:	2600      	movs	r6, #0
    d6ee:	230c      	movs	r3, #12
    d6f0:	f04f 0b0b 	mov.w	fp, #11
    d6f4:	9305      	str	r3, [sp, #20]
		data_len = 0U;
    d6f6:	46b1      	mov	r9, r6
    d6f8:	e4b5      	b.n	d066 <hci_evt_encode+0x136>
		dir_info->addr.type = adv->tx_addr;
    d6fa:	7f23      	ldrb	r3, [r4, #28]
    d6fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d700:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
    d702:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d704:	2206      	movs	r2, #6
    d706:	1ce8      	adds	r0, r5, #3
    d708:	f013 f80e 	bl	20728 <memcpy>
    d70c:	e781      	b.n	d612 <hci_evt_encode+0x6e2>
    d70e:	bf00      	nop
    d710:	200001a0 	.word	0x200001a0
    d714:	0002519c 	.word	0x0002519c
    d718:	000251d8 	.word	0x000251d8
    d71c:	000250f0 	.word	0x000250f0
    d720:	200043dc 	.word	0x200043dc
    d724:	0002523c 	.word	0x0002523c

0000d728 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    d728:	b570      	push	{r4, r5, r6, lr}
    d72a:	f100 0408 	add.w	r4, r0, #8
    d72e:	460e      	mov	r6, r1
    d730:	4620      	mov	r0, r4
    d732:	2102      	movs	r1, #2
    d734:	4615      	mov	r5, r2
    d736:	f015 fd2c 	bl	23192 <net_buf_simple_add>
	hdr->evt = evt;
    d73a:	2313      	movs	r3, #19
	hdr->len = len;
    d73c:	2105      	movs	r1, #5
	hdr->evt = evt;
    d73e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d740:	7041      	strb	r1, [r0, #1]
    d742:	4620      	mov	r0, r4
    d744:	f015 fd25 	bl	23192 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    d748:	2301      	movs	r3, #1
    d74a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d74c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d750:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    d754:	bd70      	pop	{r4, r5, r6, pc}
    d756:	bf00      	nop

0000d758 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d758:	7903      	ldrb	r3, [r0, #4]
    d75a:	2b03      	cmp	r3, #3
    d75c:	d008      	beq.n	d770 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    d75e:	3b05      	subs	r3, #5
    d760:	b2db      	uxtb	r3, r3
    d762:	2b17      	cmp	r3, #23
    d764:	d901      	bls.n	d76a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d766:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    d768:	4770      	bx	lr
    d76a:	4a05      	ldr	r2, [pc, #20]	; (d780 <hci_get_class+0x28>)
    d76c:	5cd0      	ldrb	r0, [r2, r3]
    d76e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d770:	7f03      	ldrb	r3, [r0, #28]
    d772:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    d776:	2b03      	cmp	r3, #3
    d778:	bf0c      	ite	eq
    d77a:	2004      	moveq	r0, #4
    d77c:	2005      	movne	r0, #5
    d77e:	4770      	bx	lr
    d780:	00025278 	.word	0x00025278

0000d784 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    d784:	480d      	ldr	r0, [pc, #52]	; (d7bc <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d786:	4a0e      	ldr	r2, [pc, #56]	; (d7c0 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d788:	490e      	ldr	r1, [pc, #56]	; (d7c4 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
    d78a:	4b0f      	ldr	r3, [pc, #60]	; (d7c8 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    d78c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    d78e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d792:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d796:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d79a:	2400      	movs	r4, #0
    d79c:	2500      	movs	r5, #0
    d79e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
    d7a2:	4a0a      	ldr	r2, [pc, #40]	; (d7cc <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d7a4:	241f      	movs	r4, #31
    d7a6:	2500      	movs	r5, #0
    d7a8:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    d7ac:	2100      	movs	r1, #0
    d7ae:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
    d7b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    d7b4:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
    d7b6:	601a      	str	r2, [r3, #0]
}
    d7b8:	4770      	bx	lr
    d7ba:	bf00      	nop
    d7bc:	20000198 	.word	0x20000198
    d7c0:	200013d0 	.word	0x200013d0
    d7c4:	200001a0 	.word	0x200001a0
    d7c8:	200043dc 	.word	0x200043dc
    d7cc:	200043d8 	.word	0x200043d8

0000d7d0 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    d7d0:	f009 b980 	b.w	16ad4 <lll_csrand_get>

0000d7d4 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    d7d4:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    d7d6:	2300      	movs	r3, #0
    d7d8:	f00b fcca 	bl	19170 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    d7dc:	2000      	movs	r0, #0
    d7de:	bd08      	pop	{r3, pc}

0000d7e0 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    d7e0:	4801      	ldr	r0, [pc, #4]	; (d7e8 <ll_feat_get+0x8>)
    d7e2:	2100      	movs	r1, #0
    d7e4:	4770      	bx	lr
    d7e6:	bf00      	nop
    d7e8:	000141ff 	.word	0x000141ff

0000d7ec <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    d7ec:	b510      	push	{r4, lr}
    d7ee:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    d7f0:	f009 f9a6 	bl	16b40 <lll_reset>
	LL_ASSERT(!err);
    d7f4:	b970      	cbnz	r0, d814 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    d7f6:	f009 fdb5 	bl	17364 <lll_adv_reset>
	LL_ASSERT(!err);
    d7fa:	b9e0      	cbnz	r0, d836 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    d7fc:	f00a fd2e 	bl	1825c <lll_scan_reset>
	LL_ASSERT(!err);
    d800:	bb50      	cbnz	r0, d858 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    d802:	f00a fe69 	bl	184d8 <lll_conn_reset>
	LL_ASSERT(!err);
    d806:	2800      	cmp	r0, #0
    d808:	d137      	bne.n	d87a <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
    d80a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    d80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d810:	f010 be84 	b.w	1e51c <z_impl_k_sem_give>
	LL_ASSERT(!err);
    d814:	4a22      	ldr	r2, [pc, #136]	; (d8a0 <perform_lll_reset+0xb4>)
    d816:	4923      	ldr	r1, [pc, #140]	; (d8a4 <perform_lll_reset+0xb8>)
    d818:	4823      	ldr	r0, [pc, #140]	; (d8a8 <perform_lll_reset+0xbc>)
    d81a:	f640 0324 	movw	r3, #2084	; 0x824
    d81e:	f011 ff7e 	bl	1f71e <printk>
    d822:	4040      	eors	r0, r0
    d824:	f380 8811 	msr	BASEPRI, r0
    d828:	f04f 0003 	mov.w	r0, #3
    d82c:	df02      	svc	2
	err = lll_adv_reset();
    d82e:	f009 fd99 	bl	17364 <lll_adv_reset>
	LL_ASSERT(!err);
    d832:	2800      	cmp	r0, #0
    d834:	d0e2      	beq.n	d7fc <perform_lll_reset+0x10>
    d836:	4a1a      	ldr	r2, [pc, #104]	; (d8a0 <perform_lll_reset+0xb4>)
    d838:	491a      	ldr	r1, [pc, #104]	; (d8a4 <perform_lll_reset+0xb8>)
    d83a:	481b      	ldr	r0, [pc, #108]	; (d8a8 <perform_lll_reset+0xbc>)
    d83c:	f640 0329 	movw	r3, #2089	; 0x829
    d840:	f011 ff6d 	bl	1f71e <printk>
    d844:	4040      	eors	r0, r0
    d846:	f380 8811 	msr	BASEPRI, r0
    d84a:	f04f 0003 	mov.w	r0, #3
    d84e:	df02      	svc	2
	err = lll_scan_reset();
    d850:	f00a fd04 	bl	1825c <lll_scan_reset>
	LL_ASSERT(!err);
    d854:	2800      	cmp	r0, #0
    d856:	d0d4      	beq.n	d802 <perform_lll_reset+0x16>
    d858:	4a11      	ldr	r2, [pc, #68]	; (d8a0 <perform_lll_reset+0xb4>)
    d85a:	4912      	ldr	r1, [pc, #72]	; (d8a4 <perform_lll_reset+0xb8>)
    d85c:	4812      	ldr	r0, [pc, #72]	; (d8a8 <perform_lll_reset+0xbc>)
    d85e:	f640 032f 	movw	r3, #2095	; 0x82f
    d862:	f011 ff5c 	bl	1f71e <printk>
    d866:	4040      	eors	r0, r0
    d868:	f380 8811 	msr	BASEPRI, r0
    d86c:	f04f 0003 	mov.w	r0, #3
    d870:	df02      	svc	2
	err = lll_conn_reset();
    d872:	f00a fe31 	bl	184d8 <lll_conn_reset>
	LL_ASSERT(!err);
    d876:	2800      	cmp	r0, #0
    d878:	d0c7      	beq.n	d80a <perform_lll_reset+0x1e>
    d87a:	4a09      	ldr	r2, [pc, #36]	; (d8a0 <perform_lll_reset+0xb4>)
    d87c:	4909      	ldr	r1, [pc, #36]	; (d8a4 <perform_lll_reset+0xb8>)
    d87e:	480a      	ldr	r0, [pc, #40]	; (d8a8 <perform_lll_reset+0xbc>)
    d880:	f640 0335 	movw	r3, #2101	; 0x835
    d884:	f011 ff4b 	bl	1f71e <printk>
    d888:	4040      	eors	r0, r0
    d88a:	f380 8811 	msr	BASEPRI, r0
    d88e:	f04f 0003 	mov.w	r0, #3
    d892:	df02      	svc	2
    d894:	4620      	mov	r0, r4
}
    d896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d89a:	f010 be3f 	b.w	1e51c <z_impl_k_sem_give>
    d89e:	bf00      	nop
    d8a0:	00025290 	.word	0x00025290
    d8a4:	000252cc 	.word	0x000252cc
    d8a8:	000250f0 	.word	0x000250f0

0000d8ac <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    d8ac:	6008      	str	r0, [r1, #0]
    d8ae:	4801      	ldr	r0, [pc, #4]	; (d8b4 <ull_ticker_status_give+0x8>)
    d8b0:	f010 be34 	b.w	1e51c <z_impl_k_sem_give>
    d8b4:	2000479c 	.word	0x2000479c

0000d8b8 <disabled_cb>:
    d8b8:	f010 be30 	b.w	1e51c <z_impl_k_sem_give>

0000d8bc <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    d8bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d8c0:	4d2c      	ldr	r5, [pc, #176]	; (d974 <tx_cmplt_get+0xb8>)
{
    d8c2:	460c      	mov	r4, r1
    d8c4:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d8c6:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    d8c8:	7822      	ldrb	r2, [r4, #0]
    d8ca:	782b      	ldrb	r3, [r5, #0]
    d8cc:	4291      	cmp	r1, r2
    d8ce:	bf9c      	itt	ls
    d8d0:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
    d8d2:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    d8d4:	4591      	cmp	r9, r2
{
    d8d6:	4682      	mov	sl, r0
    d8d8:	d043      	beq.n	d962 <tx_cmplt_get+0xa6>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    d8da:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    d8de:	3201      	adds	r2, #1
    d8e0:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    d8e2:	4f25      	ldr	r7, [pc, #148]	; (d978 <tx_cmplt_get+0xbc>)
		i = 0U;
    d8e4:	4291      	cmp	r1, r2
    d8e6:	bf08      	it	eq
    d8e8:	2200      	moveq	r2, #0

	*idx = i;
    d8ea:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    d8ec:	5afa      	ldrh	r2, [r7, r3]
    d8ee:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    d8f0:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    d8f2:	443b      	add	r3, r7
    d8f4:	f04f 0802 	mov.w	r8, #2
    d8f8:	f04f 0b01 	mov.w	fp, #1
    d8fc:	e01d      	b.n	d93a <tx_cmplt_get+0x7e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    d8fe:	3601      	adds	r6, #1
    d900:	f8c3 b004 	str.w	fp, [r3, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
    d904:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
    d908:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
    d90a:	d124      	bne.n	d956 <tx_cmplt_get+0x9a>
	if (*idx >= count) {
    d90c:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d90e:	7869      	ldrb	r1, [r5, #1]
    d910:	7828      	ldrb	r0, [r5, #0]
    d912:	4299      	cmp	r1, r3
    d914:	bf9c      	itt	ls
    d916:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
    d918:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    d91a:	454b      	cmp	r3, r9
    d91c:	d022      	beq.n	d964 <tx_cmplt_get+0xa8>
	i = *idx + 1;
    d91e:	1c5a      	adds	r2, r3, #1
    d920:	b2d2      	uxtb	r2, r2
		i = 0U;
    d922:	4291      	cmp	r1, r2
    d924:	bf08      	it	eq
    d926:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    d928:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    d92c:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    d92e:	5af9      	ldrh	r1, [r7, r3]
    d930:	f8ba 2000 	ldrh.w	r2, [sl]
    d934:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    d936:	443b      	add	r3, r7
    d938:	d114      	bne.n	d964 <tx_cmplt_get+0xa8>
		node_tx = tx->node;
    d93a:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    d93c:	2801      	cmp	r0, #1
    d93e:	d9de      	bls.n	d8fe <tx_cmplt_get+0x42>
    d940:	f030 0203 	bics.w	r2, r0, #3
    d944:	d00a      	beq.n	d95c <tx_cmplt_get+0xa0>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    d946:	7902      	ldrb	r2, [r0, #4]
    d948:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
    d94c:	3a01      	subs	r2, #1
    d94e:	2a01      	cmp	r2, #1
    d950:	d90b      	bls.n	d96a <tx_cmplt_get+0xae>
    d952:	f8c3 8004 	str.w	r8, [r3, #4]
			ll_tx_mem_release(node_tx);
    d956:	f002 feb9 	bl	106cc <ll_tx_mem_release>
    d95a:	e7d7      	b.n	d90c <tx_cmplt_get+0x50>
    d95c:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
    d960:	e7d4      	b.n	d90c <tx_cmplt_get+0x50>
		return 0;
    d962:	2600      	movs	r6, #0

	return cmplt;
}
    d964:	4630      	mov	r0, r6
    d966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    d96a:	3601      	adds	r6, #1
    d96c:	f8c3 b004 	str.w	fp, [r3, #4]
    d970:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
    d972:	e7f0      	b.n	d956 <tx_cmplt_get+0x9a>
    d974:	20000594 	.word	0x20000594
    d978:	20000598 	.word	0x20000598

0000d97c <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d980:	4e3c      	ldr	r6, [pc, #240]	; (da74 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    d982:	f8df 80f4 	ldr.w	r8, [pc, #244]	; da78 <ull_done+0xfc>
    d986:	f8df 90f4 	ldr.w	r9, [pc, #244]	; da7c <ull_done+0x100>
{
    d98a:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d98c:	e9d6 0100 	ldrd	r0, r1, [r6]
    d990:	aa01      	add	r2, sp, #4
    d992:	f7fc fe4d 	bl	a630 <memq_peek>
		if (link) {
    d996:	4604      	mov	r4, r0
    d998:	2800      	cmp	r0, #0
    d99a:	d03e      	beq.n	da1a <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    d99c:	6870      	ldr	r0, [r6, #4]
    d99e:	2200      	movs	r2, #0
    d9a0:	4631      	mov	r1, r6
    d9a2:	f7fc fe4d 	bl	a640 <memq_dequeue>
			rx_demux_event_done(link, done);
    d9a6:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    d9a8:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    d9aa:	b135      	cbz	r5, d9ba <ull_done+0x3e>
	return hdr->ref;
    d9ac:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	d052      	beq.n	da58 <ull_done+0xdc>
	return hdr->ref--;
    d9b2:	782b      	ldrb	r3, [r5, #0]
    d9b4:	3b01      	subs	r3, #1
    d9b6:	b2db      	uxtb	r3, r3
    d9b8:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    d9ba:	f897 3020 	ldrb.w	r3, [r7, #32]
    d9be:	b123      	cbz	r3, d9ca <ull_done+0x4e>
    d9c0:	2b01      	cmp	r3, #1
    d9c2:	d13b      	bne.n	da3c <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    d9c4:	4638      	mov	r0, r7
    d9c6:	f006 fa01 	bl	13dcc <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    d9ca:	4a2d      	ldr	r2, [pc, #180]	; (da80 <ull_done+0x104>)
	last = last + 1;
    d9cc:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    d9ce:	f892 c001 	ldrb.w	ip, [r2, #1]
    d9d2:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    d9d4:	3301      	adds	r3, #1
	done->extra.type = 0U;
    d9d6:	2000      	movs	r0, #0
    d9d8:	b2db      	uxtb	r3, r3
		last = 0U;
    d9da:	459c      	cmp	ip, r3
    d9dc:	bf08      	it	eq
    d9de:	4603      	moveq	r3, r0
	if (last == first) {
    d9e0:	4299      	cmp	r1, r3
    d9e2:	f887 0020 	strb.w	r0, [r7, #32]
    d9e6:	d01b      	beq.n	da20 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
    d9e8:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    d9ea:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d9ec:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d9ee:	fb00 2101 	mla	r1, r0, r1, r2
    d9f2:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    d9f4:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    d9f6:	2d00      	cmp	r5, #0
    d9f8:	d0c8      	beq.n	d98c <ull_done+0x10>
	return hdr->ref;
    d9fa:	782b      	ldrb	r3, [r5, #0]
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d1c5      	bne.n	d98c <ull_done+0x10>
    da00:	696b      	ldr	r3, [r5, #20]
    da02:	2b00      	cmp	r3, #0
    da04:	d0c2      	beq.n	d98c <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    da06:	69a8      	ldr	r0, [r5, #24]
    da08:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    da0a:	e9d6 0100 	ldrd	r0, r1, [r6]
    da0e:	aa01      	add	r2, sp, #4
    da10:	f7fc fe0e 	bl	a630 <memq_peek>
		if (link) {
    da14:	4604      	mov	r4, r0
    da16:	2800      	cmp	r0, #0
    da18:	d1c0      	bne.n	d99c <ull_done+0x20>
}
    da1a:	b003      	add	sp, #12
    da1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    da20:	4918      	ldr	r1, [pc, #96]	; (da84 <ull_done+0x108>)
    da22:	4819      	ldr	r0, [pc, #100]	; (da88 <ull_done+0x10c>)
    da24:	f44f 6327 	mov.w	r3, #2672	; 0xa70
    da28:	4642      	mov	r2, r8
    da2a:	f011 fe78 	bl	1f71e <printk>
    da2e:	4040      	eors	r0, r0
    da30:	f380 8811 	msr	BASEPRI, r0
    da34:	f04f 0003 	mov.w	r0, #3
    da38:	df02      	svc	2
    da3a:	e7dc      	b.n	d9f6 <ull_done+0x7a>
		LL_ASSERT(0);
    da3c:	4913      	ldr	r1, [pc, #76]	; (da8c <ull_done+0x110>)
    da3e:	4812      	ldr	r0, [pc, #72]	; (da88 <ull_done+0x10c>)
    da40:	f640 2369 	movw	r3, #2665	; 0xa69
    da44:	4642      	mov	r2, r8
    da46:	f011 fe6a 	bl	1f71e <printk>
    da4a:	4040      	eors	r0, r0
    da4c:	f380 8811 	msr	BASEPRI, r0
    da50:	f04f 0003 	mov.w	r0, #3
    da54:	df02      	svc	2
		break;
    da56:	e7b8      	b.n	d9ca <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    da58:	480b      	ldr	r0, [pc, #44]	; (da88 <ull_done+0x10c>)
    da5a:	f640 2312 	movw	r3, #2578	; 0xa12
    da5e:	4642      	mov	r2, r8
    da60:	4649      	mov	r1, r9
    da62:	f011 fe5c 	bl	1f71e <printk>
    da66:	4040      	eors	r0, r0
    da68:	f380 8811 	msr	BASEPRI, r0
    da6c:	f04f 0003 	mov.w	r0, #3
    da70:	df02      	svc	2
    da72:	e79e      	b.n	d9b2 <ull_done+0x36>
    da74:	20004788 	.word	0x20004788
    da78:	00025290 	.word	0x00025290
    da7c:	000252d4 	.word	0x000252d4
    da80:	20000450 	.word	0x20000450
    da84:	000252ec 	.word	0x000252ec
    da88:	000250f0 	.word	0x000250f0
    da8c:	00025150 	.word	0x00025150

0000da90 <rx_alloc>:
{
    da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    da94:	4f33      	ldr	r7, [pc, #204]	; (db64 <rx_alloc+0xd4>)
    da96:	783e      	ldrb	r6, [r7, #0]
    da98:	4286      	cmp	r6, r0
    da9a:	bf28      	it	cs
    da9c:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    da9e:	b34e      	cbz	r6, daf4 <rx_alloc+0x64>
    daa0:	4d31      	ldr	r5, [pc, #196]	; (db68 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    daa2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; db6c <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    daa6:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
    daa8:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
    daac:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    daae:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    dab0:	3401      	adds	r4, #1
    dab2:	b2e4      	uxtb	r4, r4
		last = 0U;
    dab4:	42a2      	cmp	r2, r4
    dab6:	bf08      	it	eq
    dab8:	2400      	moveq	r4, #0
	if (last == first) {
    daba:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    dabc:	4640      	mov	r0, r8
    dabe:	d01b      	beq.n	daf8 <rx_alloc+0x68>
    dac0:	f7fc fd48 	bl	a554 <mem_acquire>
    dac4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    dac6:	4648      	mov	r0, r9
		if (!link) {
    dac8:	f1ba 0f00 	cmp.w	sl, #0
    dacc:	d012      	beq.n	daf4 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    dace:	f7fc fd41 	bl	a554 <mem_acquire>
		if (!rx) {
    dad2:	2800      	cmp	r0, #0
    dad4:	d03f      	beq.n	db56 <rx_alloc+0xc6>
		rx->link = link;
    dad6:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    dada:	78ea      	ldrb	r2, [r5, #3]
    dadc:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    dade:	fb02 5303 	mla	r3, r2, r3, r5
    dae2:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    dae4:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    dae6:	70ec      	strb	r4, [r5, #3]
		max--;
    dae8:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    daea:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    daec:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    daf0:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    daf2:	d1db      	bne.n	daac <rx_alloc+0x1c>
}
    daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    daf8:	783b      	ldrb	r3, [r7, #0]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d0fa      	beq.n	daf4 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    dafe:	4d1c      	ldr	r5, [pc, #112]	; (db70 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
    db00:	4e1c      	ldr	r6, [pc, #112]	; (db74 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    db02:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    db04:	f8df 8064 	ldr.w	r8, [pc, #100]	; db6c <rx_alloc+0xdc>
		link->mem = NULL;
    db08:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    db0c:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    db0e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    db10:	3401      	adds	r4, #1
    db12:	b2e4      	uxtb	r4, r4
		last = 0U;
    db14:	42a2      	cmp	r2, r4
    db16:	bf08      	it	eq
    db18:	2400      	moveq	r4, #0
	if (last == first) {
    db1a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    db1c:	4630      	mov	r0, r6
    db1e:	d0e9      	beq.n	daf4 <rx_alloc+0x64>
    db20:	f7fc fd18 	bl	a554 <mem_acquire>
    db24:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    db26:	4640      	mov	r0, r8
		if (!link) {
    db28:	f1ba 0f00 	cmp.w	sl, #0
    db2c:	d0e2      	beq.n	daf4 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    db2e:	f7fc fd11 	bl	a554 <mem_acquire>
		if (!rx) {
    db32:	b180      	cbz	r0, db56 <rx_alloc+0xc6>
		link->mem = NULL;
    db34:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    db38:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    db3c:	78ea      	ldrb	r2, [r5, #3]
    db3e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    db40:	fb02 5303 	mla	r3, r2, r3, r5
    db44:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    db46:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    db48:	70ec      	strb	r4, [r5, #3]
    db4a:	3b01      	subs	r3, #1
    db4c:	b2db      	uxtb	r3, r3
    db4e:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    db50:	2b00      	cmp	r3, #0
    db52:	d1db      	bne.n	db0c <rx_alloc+0x7c>
    db54:	e7ce      	b.n	daf4 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
    db56:	4650      	mov	r0, sl
    db58:	4906      	ldr	r1, [pc, #24]	; (db74 <rx_alloc+0xe4>)
}
    db5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    db5e:	f7fc bd13 	b.w	a588 <mem_release>
    db62:	bf00      	nop
    db64:	200044c0 	.word	0x200044c0
    db68:	20000478 	.word	0x20000478
    db6c:	20004518 	.word	0x20004518
    db70:	20000468 	.word	0x20000468
    db74:	200044c4 	.word	0x200044c4

0000db78 <rx_demux>:
{
    db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; dd2c <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    db80:	f8df 91ac 	ldr.w	r9, [pc, #428]	; dd30 <rx_demux+0x1b8>
		LL_ASSERT(0);
    db84:	f8df a1ac 	ldr.w	sl, [pc, #428]	; dd34 <rx_demux+0x1bc>
    db88:	f8df b1ac 	ldr.w	fp, [pc, #428]	; dd38 <rx_demux+0x1c0>
{
    db8c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    db8e:	e9d8 0100 	ldrd	r0, r1, [r8]
    db92:	aa03      	add	r2, sp, #12
    db94:	f7fc fd4c 	bl	a630 <memq_peek>
		if (link) {
    db98:	4605      	mov	r5, r0
    db9a:	2800      	cmp	r0, #0
    db9c:	d035      	beq.n	dc0a <rx_demux+0x92>
			LL_ASSERT(rx);
    db9e:	9b03      	ldr	r3, [sp, #12]
    dba0:	2b00      	cmp	r3, #0
    dba2:	f000 80a6 	beq.w	dcf2 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    dba6:	7818      	ldrb	r0, [r3, #0]
    dba8:	aa04      	add	r2, sp, #16
    dbaa:	a902      	add	r1, sp, #8
    dbac:	f006 fc0e 	bl	143cc <ull_conn_ack_by_last_peek>
			if (link_tx) {
    dbb0:	4604      	mov	r4, r0
    dbb2:	2800      	cmp	r0, #0
    dbb4:	d055      	beq.n	dc62 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    dbb6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    dbba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    dbbe:	780f      	ldrb	r7, [r1, #0]
    dbc0:	f8ad 200a 	strh.w	r2, [sp, #10]
    dbc4:	ae05      	add	r6, sp, #20
    dbc6:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    dbc8:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    dbcc:	f006 fc18 	bl	14400 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    dbd0:	4621      	mov	r1, r4
    dbd2:	9a05      	ldr	r2, [sp, #20]
    dbd4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    dbd8:	f006 fc5c 	bl	14494 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    dbdc:	4620      	mov	r0, r4
    dbde:	f006 fbcd 	bl	1437c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    dbe2:	4632      	mov	r2, r6
    dbe4:	4629      	mov	r1, r5
    dbe6:	4638      	mov	r0, r7
    dbe8:	f006 fbf0 	bl	143cc <ull_conn_ack_by_last_peek>
	} while (link);
    dbec:	4604      	mov	r4, r0
    dbee:	2800      	cmp	r0, #0
    dbf0:	d1ec      	bne.n	dbcc <rx_demux+0x54>
	k_sem_give(sem_recv);
    dbf2:	f8d9 0000 	ldr.w	r0, [r9]
    dbf6:	f010 fc91 	bl	1e51c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    dbfa:	e9d8 0100 	ldrd	r0, r1, [r8]
    dbfe:	aa03      	add	r2, sp, #12
    dc00:	f7fc fd16 	bl	a630 <memq_peek>
		if (link) {
    dc04:	4605      	mov	r5, r0
    dc06:	2800      	cmp	r0, #0
    dc08:	d1c9      	bne.n	db9e <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    dc0a:	aa04      	add	r2, sp, #16
    dc0c:	a902      	add	r1, sp, #8
    dc0e:	f10d 0007 	add.w	r0, sp, #7
    dc12:	f006 fbbf 	bl	14394 <ull_conn_ack_peek>
			if (link) {
    dc16:	4604      	mov	r4, r0
    dc18:	2800      	cmp	r0, #0
    dc1a:	d067      	beq.n	dcec <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    dc1c:	9b04      	ldr	r3, [sp, #16]
    dc1e:	9305      	str	r3, [sp, #20]
    dc20:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    dc24:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    dc28:	f8ad 300a 	strh.w	r3, [sp, #10]
    dc2c:	ae05      	add	r6, sp, #20
    dc2e:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    dc32:	f006 fbe5 	bl	14400 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    dc36:	4621      	mov	r1, r4
    dc38:	9a05      	ldr	r2, [sp, #20]
    dc3a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    dc3e:	f006 fc29 	bl	14494 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    dc42:	4620      	mov	r0, r4
    dc44:	f006 fb9a 	bl	1437c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    dc48:	4632      	mov	r2, r6
    dc4a:	4629      	mov	r1, r5
    dc4c:	4638      	mov	r0, r7
    dc4e:	f006 fbbd 	bl	143cc <ull_conn_ack_by_last_peek>
	} while (link);
    dc52:	4604      	mov	r4, r0
    dc54:	2800      	cmp	r0, #0
    dc56:	d1ec      	bne.n	dc32 <rx_demux+0xba>
	k_sem_give(sem_recv);
    dc58:	f8d9 0000 	ldr.w	r0, [r9]
    dc5c:	f010 fc5e 	bl	1e51c <z_impl_k_sem_give>
			if (nack) {
    dc60:	e7cb      	b.n	dbfa <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    dc62:	9b03      	ldr	r3, [sp, #12]
    dc64:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    dc66:	791b      	ldrb	r3, [r3, #4]
    dc68:	3b01      	subs	r3, #1
    dc6a:	2b16      	cmp	r3, #22
    dc6c:	d80d      	bhi.n	dc8a <rx_demux+0x112>
    dc6e:	e8df f003 	tbb	[pc, r3]
    dc72:	0c1a      	.short	0x0c1a
    dc74:	0c1a0c38 	.word	0x0c1a0c38
    dc78:	0c0c0c0c 	.word	0x0c0c0c0c
    dc7c:	0c0c0c0c 	.word	0x0c0c0c0c
    dc80:	0c0c0c0c 	.word	0x0c0c0c0c
    dc84:	2d0c0c0c 	.word	0x2d0c0c0c
    dc88:	1a          	.byte	0x1a
    dc89:	00          	.byte	0x00
		LL_ASSERT(0);
    dc8a:	482c      	ldr	r0, [pc, #176]	; (dd3c <rx_demux+0x1c4>)
    dc8c:	f640 13ff 	movw	r3, #2559	; 0x9ff
    dc90:	4652      	mov	r2, sl
    dc92:	4659      	mov	r1, fp
    dc94:	f011 fd43 	bl	1f71e <printk>
    dc98:	4040      	eors	r0, r0
    dc9a:	f380 8811 	msr	BASEPRI, r0
    dc9e:	f04f 0003 	mov.w	r0, #3
    dca2:	df02      	svc	2
			if (nack) {
    dca4:	e773      	b.n	db8e <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dca6:	4921      	ldr	r1, [pc, #132]	; (dd2c <rx_demux+0x1b4>)
    dca8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dcac:	2200      	movs	r2, #0
    dcae:	f7fc fcc7 	bl	a640 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dcb2:	4b23      	ldr	r3, [pc, #140]	; (dd40 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    dcb4:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dcb6:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dcb8:	4628      	mov	r0, r5
    dcba:	4a22      	ldr	r2, [pc, #136]	; (dd44 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dcbc:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dcbe:	f7fc fcad 	bl	a61c <memq_enqueue>
	k_sem_give(sem_recv);
    dcc2:	f8d9 0000 	ldr.w	r0, [r9]
    dcc6:	f010 fc29 	bl	1e51c <z_impl_k_sem_give>
			if (nack) {
    dcca:	e796      	b.n	dbfa <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dccc:	4917      	ldr	r1, [pc, #92]	; (dd2c <rx_demux+0x1b4>)
    dcce:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dcd2:	2200      	movs	r2, #0
    dcd4:	f7fc fcb4 	bl	a640 <memq_dequeue>
		ull_conn_setup(link, rx);
    dcd8:	9905      	ldr	r1, [sp, #20]
    dcda:	4628      	mov	r0, r5
    dcdc:	f003 f822 	bl	10d24 <ull_conn_setup>
			if (nack) {
    dce0:	e755      	b.n	db8e <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    dce2:	a905      	add	r1, sp, #20
    dce4:	4628      	mov	r0, r5
    dce6:	f003 f845 	bl	10d74 <ull_conn_rx>
		if (nack) {
    dcea:	b188      	cbz	r0, dd10 <rx_demux+0x198>
}
    dcec:	b007      	add	sp, #28
    dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    dcf2:	4915      	ldr	r1, [pc, #84]	; (dd48 <rx_demux+0x1d0>)
    dcf4:	4811      	ldr	r0, [pc, #68]	; (dd3c <rx_demux+0x1c4>)
    dcf6:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
    dcfa:	4652      	mov	r2, sl
    dcfc:	f011 fd0f 	bl	1f71e <printk>
    dd00:	4040      	eors	r0, r0
    dd02:	f380 8811 	msr	BASEPRI, r0
    dd06:	f04f 0003 	mov.w	r0, #3
    dd0a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    dd0c:	9b03      	ldr	r3, [sp, #12]
    dd0e:	e74a      	b.n	dba6 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    dd10:	4906      	ldr	r1, [pc, #24]	; (dd2c <rx_demux+0x1b4>)
    dd12:	4602      	mov	r2, r0
    dd14:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dd18:	f7fc fc92 	bl	a640 <memq_dequeue>
		if (rx) {
    dd1c:	9905      	ldr	r1, [sp, #20]
    dd1e:	2900      	cmp	r1, #0
    dd20:	f43f af35 	beq.w	db8e <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dd24:	4b06      	ldr	r3, [pc, #24]	; (dd40 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dd26:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dd28:	78db      	ldrb	r3, [r3, #3]
    dd2a:	e7c6      	b.n	dcba <rx_demux+0x142>
    dd2c:	20004790 	.word	0x20004790
    dd30:	20004798 	.word	0x20004798
    dd34:	00025290 	.word	0x00025290
    dd38:	00025150 	.word	0x00025150
    dd3c:	000250f0 	.word	0x000250f0
    dd40:	20000594 	.word	0x20000594
    dd44:	20004784 	.word	0x20004784
    dd48:	000252fc 	.word	0x000252fc

0000dd4c <ll_rx_get>:
{
    dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd50:	b085      	sub	sp, #20
    dd52:	e9cd 0100 	strd	r0, r1, [sp]
    dd56:	4c63      	ldr	r4, [pc, #396]	; (dee4 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
    dd58:	4d63      	ldr	r5, [pc, #396]	; (dee8 <ll_rx_get+0x19c>)
    dd5a:	4e64      	ldr	r6, [pc, #400]	; (deec <ll_rx_get+0x1a0>)
	*node_rx = NULL;
    dd5c:	9a00      	ldr	r2, [sp, #0]
    dd5e:	2300      	movs	r3, #0
    dd60:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    dd62:	e9d6 0100 	ldrd	r0, r1, [r6]
    dd66:	aa03      	add	r2, sp, #12
    dd68:	f7fc fc62 	bl	a630 <memq_peek>
	if (link) {
    dd6c:	4680      	mov	r8, r0
    dd6e:	2800      	cmp	r0, #0
    dd70:	f000 809f 	beq.w	deb2 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    dd74:	9b03      	ldr	r3, [sp, #12]
    dd76:	495e      	ldr	r1, [pc, #376]	; (def0 <ll_rx_get+0x1a4>)
    dd78:	781a      	ldrb	r2, [r3, #0]
    dd7a:	9801      	ldr	r0, [sp, #4]
    dd7c:	f7ff fd9e 	bl	d8bc <tx_cmplt_get>
		if (!cmplt) {
    dd80:	2800      	cmp	r0, #0
    dd82:	f040 809b 	bne.w	debc <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
    dd86:	78a3      	ldrb	r3, [r4, #2]
    dd88:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    dd8c:	78e2      	ldrb	r2, [r4, #3]
    dd8e:	4607      	mov	r7, r0
    dd90:	f10d 0109 	add.w	r1, sp, #9
    dd94:	f10d 000a 	add.w	r0, sp, #10
    dd98:	f7ff fd90 	bl	d8bc <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    dd9c:	ea47 0200 	orr.w	r2, r7, r0
    dda0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    dda4:	d1f2      	bne.n	dd8c <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    dda6:	9b03      	ldr	r3, [sp, #12]
    dda8:	7919      	ldrb	r1, [r3, #4]
    ddaa:	2901      	cmp	r1, #1
    ddac:	f040 8093 	bne.w	ded6 <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
    ddb0:	494e      	ldr	r1, [pc, #312]	; (deec <ll_rx_get+0x1a0>)
    ddb2:	6870      	ldr	r0, [r6, #4]
    ddb4:	f7fc fc44 	bl	a640 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ddb8:	494e      	ldr	r1, [pc, #312]	; (def4 <ll_rx_get+0x1a8>)
    ddba:	4640      	mov	r0, r8
    ddbc:	f7fc fbe4 	bl	a588 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ddc0:	782b      	ldrb	r3, [r5, #0]
    ddc2:	2b05      	cmp	r3, #5
    ddc4:	d866      	bhi.n	de94 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
    ddc6:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    ddc8:	494b      	ldr	r1, [pc, #300]	; (def8 <ll_rx_get+0x1ac>)
    ddca:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    ddcc:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    ddce:	f7fc fbdb 	bl	a588 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ddd2:	782b      	ldrb	r3, [r5, #0]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d0c1      	beq.n	dd5c <ll_rx_get+0x10>
    ddd8:	f8df 8120 	ldr.w	r8, [pc, #288]	; defc <ll_rx_get+0x1b0>
	last = last + 1;
    dddc:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    dde0:	f898 2001 	ldrb.w	r2, [r8, #1]
    dde4:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    dde8:	3701      	adds	r7, #1
    ddea:	b2ff      	uxtb	r7, r7
		last = 0U;
    ddec:	42ba      	cmp	r2, r7
    ddee:	bf08      	it	eq
    ddf0:	2700      	moveq	r7, #0
	if (last == first) {
    ddf2:	429f      	cmp	r7, r3
    ddf4:	d019      	beq.n	de2a <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
    ddf6:	483f      	ldr	r0, [pc, #252]	; (def4 <ll_rx_get+0x1a8>)
    ddf8:	f7fc fbac 	bl	a554 <mem_acquire>
		if (!link) {
    ddfc:	4681      	mov	r9, r0
    ddfe:	2800      	cmp	r0, #0
    de00:	d0ac      	beq.n	dd5c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    de02:	483d      	ldr	r0, [pc, #244]	; (def8 <ll_rx_get+0x1ac>)
    de04:	f7fc fba6 	bl	a554 <mem_acquire>
		if (!rx) {
    de08:	2800      	cmp	r0, #0
    de0a:	d05a      	beq.n	dec2 <ll_rx_get+0x176>
		rx->link = link;
    de0c:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    de10:	f898 2003 	ldrb.w	r2, [r8, #3]
    de14:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    de18:	fb02 8303 	mla	r3, r2, r3, r8
    de1c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    de1e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    de20:	f888 7003 	strb.w	r7, [r8, #3]
    de24:	3b01      	subs	r3, #1
    de26:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    de28:	e798      	b.n	dd5c <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    de2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; df00 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
    de2e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; def4 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    de32:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    de36:	f8df a0c0 	ldr.w	sl, [pc, #192]	; def8 <ll_rx_get+0x1ac>
	if (last == count) {
    de3a:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    de3e:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    de42:	3701      	adds	r7, #1
    de44:	b2ff      	uxtb	r7, r7
		last = 0U;
    de46:	42ba      	cmp	r2, r7
    de48:	bf08      	it	eq
    de4a:	2700      	moveq	r7, #0
	if (last == first) {
    de4c:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    de4e:	4648      	mov	r0, r9
    de50:	d084      	beq.n	dd5c <ll_rx_get+0x10>
    de52:	f7fc fb7f 	bl	a554 <mem_acquire>
    de56:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    de58:	4650      	mov	r0, sl
		if (!link) {
    de5a:	f1bb 0f00 	cmp.w	fp, #0
    de5e:	f43f af7d 	beq.w	dd5c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    de62:	f7fc fb77 	bl	a554 <mem_acquire>
		if (!rx) {
    de66:	2800      	cmp	r0, #0
    de68:	d030      	beq.n	decc <ll_rx_get+0x180>
		link->mem = NULL;
    de6a:	2300      	movs	r3, #0
    de6c:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    de70:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    de74:	f898 2003 	ldrb.w	r2, [r8, #3]
    de78:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    de7c:	fb02 8303 	mla	r3, r2, r3, r8
    de80:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    de82:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    de84:	f888 7003 	strb.w	r7, [r8, #3]
    de88:	3b01      	subs	r3, #1
    de8a:	b2db      	uxtb	r3, r3
    de8c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    de8e:	2b00      	cmp	r3, #0
    de90:	d1d3      	bne.n	de3a <ll_rx_get+0xee>
    de92:	e763      	b.n	dd5c <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    de94:	4a1b      	ldr	r2, [pc, #108]	; (df04 <ll_rx_get+0x1b8>)
    de96:	491c      	ldr	r1, [pc, #112]	; (df08 <ll_rx_get+0x1bc>)
    de98:	481c      	ldr	r0, [pc, #112]	; (df0c <ll_rx_get+0x1c0>)
    de9a:	f240 6306 	movw	r3, #1542	; 0x606
    de9e:	f011 fc3e 	bl	1f71e <printk>
    dea2:	4040      	eors	r0, r0
    dea4:	f380 8811 	msr	BASEPRI, r0
    dea8:	f04f 0003 	mov.w	r0, #3
    deac:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    deae:	782b      	ldrb	r3, [r5, #0]
    deb0:	e789      	b.n	ddc6 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    deb2:	78e2      	ldrb	r2, [r4, #3]
    deb4:	490e      	ldr	r1, [pc, #56]	; (def0 <ll_rx_get+0x1a4>)
    deb6:	9801      	ldr	r0, [sp, #4]
    deb8:	f7ff fd00 	bl	d8bc <tx_cmplt_get>
}
    debc:	b005      	add	sp, #20
    debe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    dec2:	490c      	ldr	r1, [pc, #48]	; (def4 <ll_rx_get+0x1a8>)
    dec4:	4648      	mov	r0, r9
    dec6:	f7fc fb5f 	bl	a588 <mem_release>
			return;
    deca:	e747      	b.n	dd5c <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
    decc:	4909      	ldr	r1, [pc, #36]	; (def4 <ll_rx_get+0x1a8>)
    dece:	4658      	mov	r0, fp
    ded0:	f7fc fb5a 	bl	a588 <mem_release>
			return;
    ded4:	e742      	b.n	dd5c <ll_rx_get+0x10>
			*node_rx = rx;
    ded6:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ded8:	4610      	mov	r0, r2
			*node_rx = rx;
    deda:	600b      	str	r3, [r1, #0]
}
    dedc:	b005      	add	sp, #20
    dede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dee2:	bf00      	nop
    dee4:	20000594 	.word	0x20000594
    dee8:	200044c0 	.word	0x200044c0
    deec:	20004780 	.word	0x20004780
    def0:	20000596 	.word	0x20000596
    def4:	200044c4 	.word	0x200044c4
    def8:	20004518 	.word	0x20004518
    defc:	20000478 	.word	0x20000478
    df00:	20000468 	.word	0x20000468
    df04:	00025290 	.word	0x00025290
    df08:	00025300 	.word	0x00025300
    df0c:	000250f0 	.word	0x000250f0

0000df10 <ll_rx_dequeue>:
{
    df10:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    df12:	495e      	ldr	r1, [pc, #376]	; (e08c <ll_rx_dequeue+0x17c>)
{
    df14:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    df16:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    df18:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    df1a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    df1c:	aa01      	add	r2, sp, #4
    df1e:	f7fc fb8f 	bl	a640 <memq_dequeue>
	LL_ASSERT(link);
    df22:	4604      	mov	r4, r0
    df24:	2800      	cmp	r0, #0
    df26:	d064      	beq.n	dff2 <ll_rx_dequeue+0xe2>
	mem_release(link, &mem_link_rx.free);
    df28:	4959      	ldr	r1, [pc, #356]	; (e090 <ll_rx_dequeue+0x180>)
    df2a:	4620      	mov	r0, r4
    df2c:	f7fc fb2c 	bl	a588 <mem_release>
	switch (rx->type) {
    df30:	9a01      	ldr	r2, [sp, #4]
    df32:	7913      	ldrb	r3, [r2, #4]
    df34:	2b1c      	cmp	r3, #28
    df36:	d810      	bhi.n	df5a <ll_rx_dequeue+0x4a>
    df38:	e8df f003 	tbb	[pc, r3]
    df3c:	1e0f0f1e 	.word	0x1e0f0f1e
    df40:	0f0f1e0f 	.word	0x0f0f1e0f
    df44:	0f0f0f0f 	.word	0x0f0f0f0f
    df48:	0f0f0f0f 	.word	0x0f0f0f0f
    df4c:	0f0f0f0f 	.word	0x0f0f0f0f
    df50:	1e2f0f0f 	.word	0x1e2f0f0f
    df54:	1e1e1e1e 	.word	0x1e1e1e1e
    df58:	1e          	.byte	0x1e
    df59:	00          	.byte	0x00
		LL_ASSERT(0);
    df5a:	4a4e      	ldr	r2, [pc, #312]	; (e094 <ll_rx_dequeue+0x184>)
    df5c:	494e      	ldr	r1, [pc, #312]	; (e098 <ll_rx_dequeue+0x188>)
    df5e:	484f      	ldr	r0, [pc, #316]	; (e09c <ll_rx_dequeue+0x18c>)
    df60:	f240 43c7 	movw	r3, #1223	; 0x4c7
    df64:	f011 fbdb 	bl	1f71e <printk>
    df68:	4040      	eors	r0, r0
    df6a:	f380 8811 	msr	BASEPRI, r0
    df6e:	f04f 0003 	mov.w	r0, #3
    df72:	df02      	svc	2
}
    df74:	b002      	add	sp, #8
    df76:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    df78:	2b00      	cmp	r3, #0
    df7a:	d1fb      	bne.n	df74 <ll_rx_dequeue+0x64>
    df7c:	4a45      	ldr	r2, [pc, #276]	; (e094 <ll_rx_dequeue+0x184>)
    df7e:	4948      	ldr	r1, [pc, #288]	; (e0a0 <ll_rx_dequeue+0x190>)
    df80:	4846      	ldr	r0, [pc, #280]	; (e09c <ll_rx_dequeue+0x18c>)
    df82:	f240 43c3 	movw	r3, #1219	; 0x4c3
    df86:	f011 fbca 	bl	1f71e <printk>
    df8a:	4040      	eors	r0, r0
    df8c:	f380 8811 	msr	BASEPRI, r0
    df90:	f04f 0003 	mov.w	r0, #3
    df94:	df02      	svc	2
}
    df96:	b002      	add	sp, #8
    df98:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    df9a:	7f13      	ldrb	r3, [r2, #28]
    df9c:	2b3c      	cmp	r3, #60	; 0x3c
    df9e:	d036      	beq.n	e00e <ll_rx_dequeue+0xfe>
    dfa0:	7f53      	ldrb	r3, [r2, #29]
    dfa2:	b1e3      	cbz	r3, dfde <ll_rx_dequeue+0xce>
			adv = HDR_LLL2ULL(lll);
    dfa4:	6893      	ldr	r3, [r2, #8]
    dfa6:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    dfa8:	6e60      	ldr	r0, [r4, #100]	; 0x64
    dfaa:	b120      	cbz	r0, dfb6 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    dfac:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    dfae:	493d      	ldr	r1, [pc, #244]	; (e0a4 <ll_rx_dequeue+0x194>)
					adv->node_rx_cc_free = NULL;
    dfb0:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
    dfb2:	f7fc fae9 	bl	a588 <mem_release>
			adv->is_enabled = 0U;
    dfb6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    dfba:	f36f 0300 	bfc	r3, #0, #1
    dfbe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
    dfc2:	2000      	movs	r0, #0
    dfc4:	f001 fc9c 	bl	f900 <ull_scan_is_enabled>
    dfc8:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
    dfca:	2000      	movs	r0, #0
    dfcc:	f001 fa7e 	bl	f4cc <ull_adv_is_enabled>
			if (!bm) {
    dfd0:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
    dfd4:	d1ce      	bne.n	df74 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
    dfd6:	f007 fe8d 	bl	15cf4 <ull_filter_adv_scan_state_cb>
}
    dfda:	b002      	add	sp, #8
    dfdc:	bd70      	pop	{r4, r5, r6, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
    dfde:	6892      	ldr	r2, [r2, #8]
    dfe0:	6812      	ldr	r2, [r2, #0]
			scan->is_enabled = 0U;
    dfe2:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
			scan->lll.conn = NULL;
    dfe6:	6213      	str	r3, [r2, #32]
			scan->is_enabled = 0U;
    dfe8:	f363 0100 	bfi	r1, r3, #0, #1
    dfec:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    dff0:	e7e7      	b.n	dfc2 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
    dff2:	4a28      	ldr	r2, [pc, #160]	; (e094 <ll_rx_dequeue+0x184>)
    dff4:	492c      	ldr	r1, [pc, #176]	; (e0a8 <ll_rx_dequeue+0x198>)
    dff6:	4829      	ldr	r0, [pc, #164]	; (e09c <ll_rx_dequeue+0x18c>)
    dff8:	f240 33a1 	movw	r3, #929	; 0x3a1
    dffc:	f011 fb8f 	bl	1f71e <printk>
    e000:	4040      	eors	r0, r0
    e002:	f380 8811 	msr	BASEPRI, r0
    e006:	f04f 0003 	mov.w	r0, #3
    e00a:	df02      	svc	2
    e00c:	e78c      	b.n	df28 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    e00e:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    e010:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    e014:	b1ed      	cbz	r5, e052 <ll_rx_dequeue+0x142>
				LL_ASSERT(!conn_lll->link_tx_free);
    e016:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    e018:	2200      	movs	r2, #0
    e01a:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    e01c:	b163      	cbz	r3, e038 <ll_rx_dequeue+0x128>
    e01e:	4a1d      	ldr	r2, [pc, #116]	; (e094 <ll_rx_dequeue+0x184>)
    e020:	4922      	ldr	r1, [pc, #136]	; (e0ac <ll_rx_dequeue+0x19c>)
    e022:	481e      	ldr	r0, [pc, #120]	; (e09c <ll_rx_dequeue+0x18c>)
    e024:	f240 431a 	movw	r3, #1050	; 0x41a
    e028:	f011 fb79 	bl	1f71e <printk>
    e02c:	4040      	eors	r0, r0
    e02e:	f380 8811 	msr	BASEPRI, r0
    e032:	f04f 0003 	mov.w	r0, #3
    e036:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    e038:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    e03c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e040:	f7fc fae2 	bl	a608 <memq_deinit>
				LL_ASSERT(link);
    e044:	4606      	mov	r6, r0
    e046:	b190      	cbz	r0, e06e <ll_rx_dequeue+0x15e>
				ll_conn_release(conn);
    e048:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    e04a:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    e04c:	f002 fb10 	bl	10670 <ll_conn_release>
    e050:	e7b1      	b.n	dfb6 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    e052:	4a10      	ldr	r2, [pc, #64]	; (e094 <ll_rx_dequeue+0x184>)
    e054:	4916      	ldr	r1, [pc, #88]	; (e0b0 <ll_rx_dequeue+0x1a0>)
    e056:	4811      	ldr	r0, [pc, #68]	; (e09c <ll_rx_dequeue+0x18c>)
    e058:	f240 4317 	movw	r3, #1047	; 0x417
    e05c:	f011 fb5f 	bl	1f71e <printk>
    e060:	4040      	eors	r0, r0
    e062:	f380 8811 	msr	BASEPRI, r0
    e066:	f04f 0003 	mov.w	r0, #3
    e06a:	df02      	svc	2
    e06c:	e7d3      	b.n	e016 <ll_rx_dequeue+0x106>
				LL_ASSERT(link);
    e06e:	4a09      	ldr	r2, [pc, #36]	; (e094 <ll_rx_dequeue+0x184>)
    e070:	490d      	ldr	r1, [pc, #52]	; (e0a8 <ll_rx_dequeue+0x198>)
    e072:	480a      	ldr	r0, [pc, #40]	; (e09c <ll_rx_dequeue+0x18c>)
    e074:	f240 431d 	movw	r3, #1053	; 0x41d
    e078:	f011 fb51 	bl	1f71e <printk>
    e07c:	4040      	eors	r0, r0
    e07e:	f380 8811 	msr	BASEPRI, r0
    e082:	f04f 0003 	mov.w	r0, #3
    e086:	df02      	svc	2
    e088:	e7de      	b.n	e048 <ll_rx_dequeue+0x138>
    e08a:	bf00      	nop
    e08c:	20004780 	.word	0x20004780
    e090:	200044c4 	.word	0x200044c4
    e094:	00025290 	.word	0x00025290
    e098:	00025150 	.word	0x00025150
    e09c:	000250f0 	.word	0x000250f0
    e0a0:	00025364 	.word	0x00025364
    e0a4:	20004518 	.word	0x20004518
    e0a8:	00025658 	.word	0x00025658
    e0ac:	0002534c 	.word	0x0002534c
    e0b0:	00025340 	.word	0x00025340

0000e0b4 <ll_rx_mem_release>:
{
    e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    e0b8:	6804      	ldr	r4, [r0, #0]
{
    e0ba:	4680      	mov	r8, r0
	while (rx) {
    e0bc:	b344      	cbz	r4, e110 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    e0be:	4f5f      	ldr	r7, [pc, #380]	; (e23c <ll_rx_mem_release+0x188>)
    e0c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; e240 <ll_rx_mem_release+0x18c>
    e0c4:	4e5f      	ldr	r6, [pc, #380]	; (e244 <ll_rx_mem_release+0x190>)
		rx = rx->next;
    e0c6:	4625      	mov	r5, r4
    e0c8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    e0ca:	792b      	ldrb	r3, [r5, #4]
    e0cc:	2b1c      	cmp	r3, #28
    e0ce:	d810      	bhi.n	e0f2 <ll_rx_mem_release+0x3e>
    e0d0:	e8df f003 	tbb	[pc, r3]
    e0d4:	3a0f0f3a 	.word	0x3a0f0f3a
    e0d8:	0f0f3a0f 	.word	0x0f0f3a0f
    e0dc:	0f0f0f0f 	.word	0x0f0f0f0f
    e0e0:	0f0f0f0f 	.word	0x0f0f0f0f
    e0e4:	0f0f0f0f 	.word	0x0f0f0f0f
    e0e8:	58260f0f 	.word	0x58260f0f
    e0ec:	3a3a3a3a 	.word	0x3a3a3a3a
    e0f0:	3a          	.byte	0x3a
    e0f1:	00          	.byte	0x00
			LL_ASSERT(0);
    e0f2:	f240 53fa 	movw	r3, #1530	; 0x5fa
    e0f6:	463a      	mov	r2, r7
    e0f8:	4649      	mov	r1, r9
    e0fa:	4630      	mov	r0, r6
    e0fc:	f011 fb0f 	bl	1f71e <printk>
    e100:	4040      	eors	r0, r0
    e102:	f380 8811 	msr	BASEPRI, r0
    e106:	f04f 0003 	mov.w	r0, #3
    e10a:	df02      	svc	2
	while (rx) {
    e10c:	2c00      	cmp	r4, #0
    e10e:	d1da      	bne.n	e0c6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
    e110:	2300      	movs	r3, #0
    e112:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    e116:	20ff      	movs	r0, #255	; 0xff
}
    e118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    e11c:	f7ff bcb8 	b.w	da90 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    e120:	7f2b      	ldrb	r3, [r5, #28]
    e122:	2b3c      	cmp	r3, #60	; 0x3c
    e124:	d064      	beq.n	e1f0 <ll_rx_mem_release+0x13c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    e126:	2b02      	cmp	r3, #2
    e128:	d06a      	beq.n	e200 <ll_rx_mem_release+0x14c>
				LL_ASSERT(!cc->status);
    e12a:	b1db      	cbz	r3, e164 <ll_rx_mem_release+0xb0>
    e12c:	4946      	ldr	r1, [pc, #280]	; (e248 <ll_rx_mem_release+0x194>)
    e12e:	f240 532b 	movw	r3, #1323	; 0x52b
    e132:	463a      	mov	r2, r7
    e134:	4630      	mov	r0, r6
    e136:	f011 faf2 	bl	1f71e <printk>
    e13a:	4040      	eors	r0, r0
    e13c:	f380 8811 	msr	BASEPRI, r0
    e140:	f04f 0003 	mov.w	r0, #3
    e144:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    e146:	792b      	ldrb	r3, [r5, #4]
    e148:	b963      	cbnz	r3, e164 <ll_rx_mem_release+0xb0>
    e14a:	4940      	ldr	r1, [pc, #256]	; (e24c <ll_rx_mem_release+0x198>)
    e14c:	f240 537d 	movw	r3, #1405	; 0x57d
    e150:	463a      	mov	r2, r7
    e152:	4630      	mov	r0, r6
    e154:	f011 fae3 	bl	1f71e <printk>
    e158:	4040      	eors	r0, r0
    e15a:	f380 8811 	msr	BASEPRI, r0
    e15e:	f04f 0003 	mov.w	r0, #3
    e162:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e164:	f8df a0e8 	ldr.w	sl, [pc, #232]	; e250 <ll_rx_mem_release+0x19c>
    e168:	f89a 3000 	ldrb.w	r3, [sl]
    e16c:	2b05      	cmp	r3, #5
    e16e:	d82f      	bhi.n	e1d0 <ll_rx_mem_release+0x11c>
	mem_link_rx.quota_pdu += delta;
    e170:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    e172:	4938      	ldr	r1, [pc, #224]	; (e254 <ll_rx_mem_release+0x1a0>)
	mem_link_rx.quota_pdu += delta;
    e174:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    e178:	4628      	mov	r0, r5
    e17a:	f7fc fa05 	bl	a588 <mem_release>
	while (rx) {
    e17e:	2c00      	cmp	r4, #0
    e180:	d1a1      	bne.n	e0c6 <ll_rx_mem_release+0x12>
    e182:	e7c5      	b.n	e110 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    e184:	88e8      	ldrh	r0, [r5, #6]
    e186:	2800      	cmp	r0, #0
    e188:	d1c0      	bne.n	e10c <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    e18a:	f002 fa7f 	bl	1068c <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    e18e:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
    e190:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    e192:	b163      	cbz	r3, e1ae <ll_rx_mem_release+0xfa>
    e194:	4930      	ldr	r1, [pc, #192]	; (e258 <ll_rx_mem_release+0x1a4>)
    e196:	f240 53ec 	movw	r3, #1516	; 0x5ec
    e19a:	463a      	mov	r2, r7
    e19c:	4630      	mov	r0, r6
    e19e:	f011 fabe 	bl	1f71e <printk>
    e1a2:	4040      	eors	r0, r0
    e1a4:	f380 8811 	msr	BASEPRI, r0
    e1a8:	f04f 0003 	mov.w	r0, #3
    e1ac:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    e1ae:	f105 0168 	add.w	r1, r5, #104	; 0x68
    e1b2:	f105 0064 	add.w	r0, r5, #100	; 0x64
    e1b6:	f7fc fa27 	bl	a608 <memq_deinit>
				LL_ASSERT(link);
    e1ba:	4682      	mov	sl, r0
    e1bc:	b378      	cbz	r0, e21e <ll_rx_mem_release+0x16a>
				conn->lll.link_tx_free = link;
    e1be:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
    e1c2:	4628      	mov	r0, r5
    e1c4:	f002 fa54 	bl	10670 <ll_conn_release>
	while (rx) {
    e1c8:	2c00      	cmp	r4, #0
    e1ca:	f47f af7c 	bne.w	e0c6 <ll_rx_mem_release+0x12>
    e1ce:	e79f      	b.n	e110 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e1d0:	4922      	ldr	r1, [pc, #136]	; (e25c <ll_rx_mem_release+0x1a8>)
    e1d2:	f240 6306 	movw	r3, #1542	; 0x606
    e1d6:	463a      	mov	r2, r7
    e1d8:	4630      	mov	r0, r6
    e1da:	f011 faa0 	bl	1f71e <printk>
    e1de:	4040      	eors	r0, r0
    e1e0:	f380 8811 	msr	BASEPRI, r0
    e1e4:	f04f 0003 	mov.w	r0, #3
    e1e8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    e1ea:	f89a 3000 	ldrb.w	r3, [sl]
    e1ee:	e7bf      	b.n	e170 <ll_rx_mem_release+0xbc>
				mem_release(rx_free, &mem_pdu_rx.free);
    e1f0:	4918      	ldr	r1, [pc, #96]	; (e254 <ll_rx_mem_release+0x1a0>)
    e1f2:	4628      	mov	r0, r5
    e1f4:	f7fc f9c8 	bl	a588 <mem_release>
	while (rx) {
    e1f8:	2c00      	cmp	r4, #0
    e1fa:	f47f af64 	bne.w	e0c6 <ll_rx_mem_release+0x12>
    e1fe:	e787      	b.n	e110 <ll_rx_mem_release+0x5c>
				ull_central_cleanup(rx_free);
    e200:	4628      	mov	r0, r5
    e202:	f006 fe11 	bl	14e28 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
    e206:	2000      	movs	r0, #0
    e208:	f001 f952 	bl	f4b0 <ull_adv_is_enabled_get>
    e20c:	2800      	cmp	r0, #0
    e20e:	f47f af7d 	bne.w	e10c <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
    e212:	f007 fd6f 	bl	15cf4 <ull_filter_adv_scan_state_cb>
	while (rx) {
    e216:	2c00      	cmp	r4, #0
    e218:	f47f af55 	bne.w	e0c6 <ll_rx_mem_release+0x12>
    e21c:	e778      	b.n	e110 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    e21e:	4910      	ldr	r1, [pc, #64]	; (e260 <ll_rx_mem_release+0x1ac>)
    e220:	f240 53ef 	movw	r3, #1519	; 0x5ef
    e224:	463a      	mov	r2, r7
    e226:	4630      	mov	r0, r6
    e228:	f011 fa79 	bl	1f71e <printk>
    e22c:	4040      	eors	r0, r0
    e22e:	f380 8811 	msr	BASEPRI, r0
    e232:	f04f 0003 	mov.w	r0, #3
    e236:	df02      	svc	2
    e238:	e7c1      	b.n	e1be <ll_rx_mem_release+0x10a>
    e23a:	bf00      	nop
    e23c:	00025290 	.word	0x00025290
    e240:	00025150 	.word	0x00025150
    e244:	000250f0 	.word	0x000250f0
    e248:	00025384 	.word	0x00025384
    e24c:	00025390 	.word	0x00025390
    e250:	200044c0 	.word	0x200044c0
    e254:	20004518 	.word	0x20004518
    e258:	000253b4 	.word	0x000253b4
    e25c:	00025300 	.word	0x00025300
    e260:	00025658 	.word	0x00025658

0000e264 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    e264:	4801      	ldr	r0, [pc, #4]	; (e26c <ll_rx_link_alloc+0x8>)
    e266:	f7fc b975 	b.w	a554 <mem_acquire>
    e26a:	bf00      	nop
    e26c:	200044c4 	.word	0x200044c4

0000e270 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    e270:	4901      	ldr	r1, [pc, #4]	; (e278 <ll_rx_link_release+0x8>)
    e272:	f7fc b989 	b.w	a588 <mem_release>
    e276:	bf00      	nop
    e278:	200044c4 	.word	0x200044c4

0000e27c <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    e27c:	4801      	ldr	r0, [pc, #4]	; (e284 <ll_rx_alloc+0x8>)
    e27e:	f7fc b969 	b.w	a554 <mem_acquire>
    e282:	bf00      	nop
    e284:	20004518 	.word	0x20004518

0000e288 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    e288:	4901      	ldr	r1, [pc, #4]	; (e290 <ll_rx_release+0x8>)
    e28a:	f7fc b97d 	b.w	a588 <mem_release>
    e28e:	bf00      	nop
    e290:	20004518 	.word	0x20004518

0000e294 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e294:	4b02      	ldr	r3, [pc, #8]	; (e2a0 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e296:	4a03      	ldr	r2, [pc, #12]	; (e2a4 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e298:	78db      	ldrb	r3, [r3, #3]
    e29a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e29c:	f7fc b9be 	b.w	a61c <memq_enqueue>
    e2a0:	20000594 	.word	0x20000594
    e2a4:	20004784 	.word	0x20004784

0000e2a8 <ll_rx_sched>:
	k_sem_give(sem_recv);
    e2a8:	4b01      	ldr	r3, [pc, #4]	; (e2b0 <ll_rx_sched+0x8>)
    e2aa:	6818      	ldr	r0, [r3, #0]
    e2ac:	f010 b936 	b.w	1e51c <z_impl_k_sem_give>
    e2b0:	20004798 	.word	0x20004798

0000e2b4 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    e2b4:	4b0d      	ldr	r3, [pc, #52]	; (e2ec <ll_pdu_rx_alloc_peek+0x38>)
    e2b6:	7899      	ldrb	r1, [r3, #2]
    e2b8:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    e2ba:	4291      	cmp	r1, r2
    e2bc:	d80a      	bhi.n	e2d4 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    e2be:	eba2 0c01 	sub.w	ip, r2, r1
    e2c2:	fa5f fc8c 	uxtb.w	ip, ip
    e2c6:	4560      	cmp	r0, ip
    e2c8:	d802      	bhi.n	e2d0 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    e2ca:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    e2cc:	7818      	ldrb	r0, [r3, #0]
    e2ce:	d109      	bne.n	e2e4 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
    e2d0:	2000      	movs	r0, #0
}
    e2d2:	4770      	bx	lr
		return count - first + last;
    e2d4:	f893 c001 	ldrb.w	ip, [r3, #1]
    e2d8:	4462      	add	r2, ip
    e2da:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    e2dc:	b2d2      	uxtb	r2, r2
    e2de:	4290      	cmp	r0, r2
    e2e0:	d8f6      	bhi.n	e2d0 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    e2e2:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    e2e4:	fb01 3300 	mla	r3, r1, r0, r3
    e2e8:	6858      	ldr	r0, [r3, #4]
    e2ea:	4770      	bx	lr
    e2ec:	20000468 	.word	0x20000468

0000e2f0 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    e2f0:	4b09      	ldr	r3, [pc, #36]	; (e318 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    e2f2:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    e2f4:	78da      	ldrb	r2, [r3, #3]
    e2f6:	7818      	ldrb	r0, [r3, #0]
    e2f8:	f893 c001 	ldrb.w	ip, [r3, #1]
    e2fc:	428a      	cmp	r2, r1
    e2fe:	d009      	beq.n	e314 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    e300:	1c4a      	adds	r2, r1, #1
    e302:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    e304:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    e308:	4594      	cmp	ip, r2
    e30a:	bf08      	it	eq
    e30c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    e30e:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    e310:	709a      	strb	r2, [r3, #2]

	return mem;
    e312:	4770      	bx	lr
		return NULL;
    e314:	2000      	movs	r0, #0
}
    e316:	4770      	bx	lr
    e318:	20000468 	.word	0x20000468

0000e31c <ll_tx_ack_put>:
{
    e31c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    e31e:	4a15      	ldr	r2, [pc, #84]	; (e374 <ll_tx_ack_put+0x58>)
    e320:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    e324:	7854      	ldrb	r4, [r2, #1]
    e326:	f892 e002 	ldrb.w	lr, [r2, #2]
    e32a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    e32c:	f10c 0301 	add.w	r3, ip, #1
    e330:	b2db      	uxtb	r3, r3
		last = 0U;
    e332:	429c      	cmp	r4, r3
    e334:	bf08      	it	eq
    e336:	2300      	moveq	r3, #0
	if (last == first) {
    e338:	459e      	cmp	lr, r3
    e33a:	d00a      	beq.n	e352 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e33c:	fb1c fc05 	smulbb	ip, ip, r5
    e340:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
    e344:	f82e 000c 	strh.w	r0, [lr, ip]
    e348:	44f4      	add	ip, lr
	tx->node = node_tx;
    e34a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    e34e:	70d3      	strb	r3, [r2, #3]
}
    e350:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    e352:	4a09      	ldr	r2, [pc, #36]	; (e378 <ll_tx_ack_put+0x5c>)
    e354:	4909      	ldr	r1, [pc, #36]	; (e37c <ll_tx_ack_put+0x60>)
    e356:	480a      	ldr	r0, [pc, #40]	; (e380 <ll_tx_ack_put+0x64>)
    e358:	f240 634e 	movw	r3, #1614	; 0x64e
    e35c:	f011 f9df 	bl	1f71e <printk>
    e360:	4040      	eors	r0, r0
    e362:	f380 8811 	msr	BASEPRI, r0
    e366:	f04f 0003 	mov.w	r0, #3
    e36a:	df02      	svc	2
	tx->handle = handle;
    e36c:	2300      	movs	r3, #0
    e36e:	801b      	strh	r3, [r3, #0]
    e370:	deff      	udf	#255	; 0xff
    e372:	bf00      	nop
    e374:	20000594 	.word	0x20000594
    e378:	00025290 	.word	0x00025290
    e37c:	0002564c 	.word	0x0002564c
    e380:	000250f0 	.word	0x000250f0

0000e384 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e384:	f030 0302 	bics.w	r3, r0, #2
{
    e388:	b510      	push	{r4, lr}
    e38a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e38c:	d002      	beq.n	e394 <ull_ticker_status_take+0x10>
    e38e:	680b      	ldr	r3, [r1, #0]
    e390:	2b02      	cmp	r3, #2
    e392:	d008      	beq.n	e3a6 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    e394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e39c:	4809      	ldr	r0, [pc, #36]	; (e3c4 <ull_ticker_status_take+0x40>)
    e39e:	f010 f8e3 	bl	1e568 <z_impl_k_sem_take>
	return *ret_cb;
    e3a2:	6820      	ldr	r0, [r4, #0]
}
    e3a4:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e3a6:	4a08      	ldr	r2, [pc, #32]	; (e3c8 <ull_ticker_status_take+0x44>)
    e3a8:	4908      	ldr	r1, [pc, #32]	; (e3cc <ull_ticker_status_take+0x48>)
    e3aa:	4809      	ldr	r0, [pc, #36]	; (e3d0 <ull_ticker_status_take+0x4c>)
    e3ac:	f240 6382 	movw	r3, #1666	; 0x682
    e3b0:	f011 f9b5 	bl	1f71e <printk>
    e3b4:	4040      	eors	r0, r0
    e3b6:	f380 8811 	msr	BASEPRI, r0
    e3ba:	f04f 0003 	mov.w	r0, #3
    e3be:	df02      	svc	2
    e3c0:	e7e8      	b.n	e394 <ull_ticker_status_take+0x10>
    e3c2:	bf00      	nop
    e3c4:	2000479c 	.word	0x2000479c
    e3c8:	00025290 	.word	0x00025290
    e3cc:	000253d4 	.word	0x000253d4
    e3d0:	000250f0 	.word	0x000250f0

0000e3d4 <ull_disable_mark>:
	if (!*m) {
    e3d4:	4a03      	ldr	r2, [pc, #12]	; (e3e4 <ull_disable_mark+0x10>)
{
    e3d6:	4603      	mov	r3, r0
	if (!*m) {
    e3d8:	6810      	ldr	r0, [r2, #0]
    e3da:	b100      	cbz	r0, e3de <ull_disable_mark+0xa>
}
    e3dc:	4770      	bx	lr
		*m = param;
    e3de:	6013      	str	r3, [r2, #0]
    e3e0:	4618      	mov	r0, r3
}
    e3e2:	4770      	bx	lr
    e3e4:	2000448c 	.word	0x2000448c

0000e3e8 <ull_disable_unmark>:
	if (*m && *m == param) {
    e3e8:	4a04      	ldr	r2, [pc, #16]	; (e3fc <ull_disable_unmark+0x14>)
    e3ea:	6813      	ldr	r3, [r2, #0]
    e3ec:	b123      	cbz	r3, e3f8 <ull_disable_unmark+0x10>
    e3ee:	4298      	cmp	r0, r3
		*m = NULL;
    e3f0:	bf06      	itte	eq
    e3f2:	2100      	moveq	r1, #0
    e3f4:	6011      	streq	r1, [r2, #0]
	return NULL;
    e3f6:	2300      	movne	r3, #0
}
    e3f8:	4618      	mov	r0, r3
    e3fa:	4770      	bx	lr
    e3fc:	2000448c 	.word	0x2000448c

0000e400 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    e400:	4b01      	ldr	r3, [pc, #4]	; (e408 <ull_disable_mark_get+0x8>)
}
    e402:	6818      	ldr	r0, [r3, #0]
    e404:	4770      	bx	lr
    e406:	bf00      	nop
    e408:	2000448c 	.word	0x2000448c

0000e40c <ull_update_mark>:
	if (!*m) {
    e40c:	4a03      	ldr	r2, [pc, #12]	; (e41c <ull_update_mark+0x10>)
{
    e40e:	4603      	mov	r3, r0
	if (!*m) {
    e410:	6810      	ldr	r0, [r2, #0]
    e412:	b100      	cbz	r0, e416 <ull_update_mark+0xa>
}
    e414:	4770      	bx	lr
		*m = param;
    e416:	6013      	str	r3, [r2, #0]
    e418:	4618      	mov	r0, r3
}
    e41a:	4770      	bx	lr
    e41c:	20004490 	.word	0x20004490

0000e420 <ull_update_unmark>:
	if (*m && *m == param) {
    e420:	4a04      	ldr	r2, [pc, #16]	; (e434 <ull_update_unmark+0x14>)
    e422:	6813      	ldr	r3, [r2, #0]
    e424:	b123      	cbz	r3, e430 <ull_update_unmark+0x10>
    e426:	4298      	cmp	r0, r3
		*m = NULL;
    e428:	bf06      	itte	eq
    e42a:	2100      	moveq	r1, #0
    e42c:	6011      	streq	r1, [r2, #0]
	return NULL;
    e42e:	2300      	movne	r3, #0
}
    e430:	4618      	mov	r0, r3
    e432:	4770      	bx	lr
    e434:	20004490 	.word	0x20004490

0000e438 <ull_update_mark_get>:
	return mark_get(mark_update);
    e438:	4b01      	ldr	r3, [pc, #4]	; (e440 <ull_update_mark_get+0x8>)
}
    e43a:	6818      	ldr	r0, [r3, #0]
    e43c:	4770      	bx	lr
    e43e:	bf00      	nop
    e440:	20004490 	.word	0x20004490

0000e444 <ull_disable>:
{
    e444:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    e446:	6805      	ldr	r5, [r0, #0]
    e448:	782b      	ldrb	r3, [r5, #0]
{
    e44a:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    e44c:	b353      	cbz	r3, e4a4 <ull_disable+0x60>
	compiler_barrier();
    e44e:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    e450:	2201      	movs	r2, #1
    e452:	2100      	movs	r1, #0
    e454:	4668      	mov	r0, sp
    e456:	f015 fe28 	bl	240aa <z_impl_k_sem_init>
    e45a:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    e45c:	4a13      	ldr	r2, [pc, #76]	; (e4ac <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    e45e:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    e462:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    e464:	b1f3      	cbz	r3, e4a4 <ull_disable+0x60>
	mfy.param = lll;
    e466:	4b12      	ldr	r3, [pc, #72]	; (e4b0 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    e468:	2200      	movs	r2, #0
    e46a:	4611      	mov	r1, r2
    e46c:	2003      	movs	r0, #3
	mfy.param = lll;
    e46e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    e470:	f7fc f948 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!ret);
    e474:	b940      	cbnz	r0, e488 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    e476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e47e:	4668      	mov	r0, sp
    e480:	f010 f872 	bl	1e568 <z_impl_k_sem_take>
}
    e484:	b007      	add	sp, #28
    e486:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    e488:	4a0a      	ldr	r2, [pc, #40]	; (e4b4 <ull_disable+0x70>)
    e48a:	490b      	ldr	r1, [pc, #44]	; (e4b8 <ull_disable+0x74>)
    e48c:	480b      	ldr	r0, [pc, #44]	; (e4bc <ull_disable+0x78>)
    e48e:	f240 63ff 	movw	r3, #1791	; 0x6ff
    e492:	f011 f944 	bl	1f71e <printk>
    e496:	4040      	eors	r0, r0
    e498:	f380 8811 	msr	BASEPRI, r0
    e49c:	f04f 0003 	mov.w	r0, #3
    e4a0:	df02      	svc	2
    e4a2:	e7e8      	b.n	e476 <ull_disable+0x32>
		return -EALREADY;
    e4a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e4a8:	e7ec      	b.n	e484 <ull_disable+0x40>
    e4aa:	bf00      	nop
    e4ac:	0000d8b9 	.word	0x0000d8b9
    e4b0:	200005f8 	.word	0x200005f8
    e4b4:	00025290 	.word	0x00025290
    e4b8:	000253cc 	.word	0x000253cc
    e4bc:	000250f0 	.word	0x000250f0

0000e4c0 <ull_ticker_stop_with_mark>:
{
    e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    e4c2:	4e20      	ldr	r6, [pc, #128]	; (e544 <ull_ticker_stop_with_mark+0x84>)
    e4c4:	6833      	ldr	r3, [r6, #0]
{
    e4c6:	b085      	sub	sp, #20
    e4c8:	460c      	mov	r4, r1
    e4ca:	4617      	mov	r7, r2
	if (!*m) {
    e4cc:	b353      	cbz	r3, e524 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    e4ce:	4299      	cmp	r1, r3
    e4d0:	d113      	bne.n	e4fa <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e4d2:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    e4d4:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e4d6:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    e4d8:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e4da:	9500      	str	r5, [sp, #0]
    e4dc:	4b1a      	ldr	r3, [pc, #104]	; (e548 <ull_ticker_stop_with_mark+0x88>)
    e4de:	2103      	movs	r1, #3
    e4e0:	2000      	movs	r0, #0
    e4e2:	f7fd fb77 	bl	bbd4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    e4e6:	4629      	mov	r1, r5
    e4e8:	f7ff ff4c 	bl	e384 <ull_ticker_status_take>
	if (ret) {
    e4ec:	4605      	mov	r5, r0
    e4ee:	b140      	cbz	r0, e502 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    e4f0:	6833      	ldr	r3, [r6, #0]
    e4f2:	b10b      	cbz	r3, e4f8 <ull_ticker_stop_with_mark+0x38>
    e4f4:	429c      	cmp	r4, r3
    e4f6:	d017      	beq.n	e528 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    e4f8:	b304      	cbz	r4, e53c <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
    e4fa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    e4fe:	b005      	add	sp, #20
    e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    e502:	4638      	mov	r0, r7
    e504:	f7ff ff9e 	bl	e444 <ull_disable>
	if (*m && *m == param) {
    e508:	6833      	ldr	r3, [r6, #0]
    e50a:	b10b      	cbz	r3, e510 <ull_ticker_stop_with_mark+0x50>
    e50c:	429c      	cmp	r4, r3
    e50e:	d011      	beq.n	e534 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    e510:	2c00      	cmp	r4, #0
    e512:	d1f2      	bne.n	e4fa <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    e514:	2800      	cmp	r0, #0
    e516:	d0f2      	beq.n	e4fe <ull_ticker_stop_with_mark+0x3e>
	return 0;
    e518:	f110 0f78 	cmn.w	r0, #120	; 0x78
    e51c:	bf08      	it	eq
    e51e:	2000      	moveq	r0, #0
}
    e520:	b005      	add	sp, #20
    e522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    e524:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    e526:	e7d4      	b.n	e4d2 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    e528:	2300      	movs	r3, #0
		return -EALREADY;
    e52a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    e52e:	6033      	str	r3, [r6, #0]
}
    e530:	b005      	add	sp, #20
    e532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    e534:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    e536:	2800      	cmp	r0, #0
    e538:	d0e1      	beq.n	e4fe <ull_ticker_stop_with_mark+0x3e>
    e53a:	e7ed      	b.n	e518 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
    e53c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e540:	e7dd      	b.n	e4fe <ull_ticker_stop_with_mark+0x3e>
    e542:	bf00      	nop
    e544:	2000448c 	.word	0x2000448c
    e548:	0000d8ad 	.word	0x0000d8ad

0000e54c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    e54c:	4b0d      	ldr	r3, [pc, #52]	; (e584 <ull_pdu_rx_alloc_peek+0x38>)
    e54e:	7899      	ldrb	r1, [r3, #2]
    e550:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    e552:	4291      	cmp	r1, r2
    e554:	d80a      	bhi.n	e56c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    e556:	eba2 0c01 	sub.w	ip, r2, r1
    e55a:	fa5f fc8c 	uxtb.w	ip, ip
    e55e:	4560      	cmp	r0, ip
    e560:	d802      	bhi.n	e568 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    e562:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    e564:	7818      	ldrb	r0, [r3, #0]
    e566:	d109      	bne.n	e57c <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
    e568:	2000      	movs	r0, #0
}
    e56a:	4770      	bx	lr
		return count - first + last;
    e56c:	f893 c001 	ldrb.w	ip, [r3, #1]
    e570:	4462      	add	r2, ip
    e572:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    e574:	b2d2      	uxtb	r2, r2
    e576:	4290      	cmp	r0, r2
    e578:	d8f6      	bhi.n	e568 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    e57a:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    e57c:	fb01 3300 	mla	r3, r1, r0, r3
    e580:	6858      	ldr	r0, [r3, #4]
    e582:	4770      	bx	lr
    e584:	20000478 	.word	0x20000478

0000e588 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    e588:	4b09      	ldr	r3, [pc, #36]	; (e5b0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    e58a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    e58c:	78da      	ldrb	r2, [r3, #3]
    e58e:	7818      	ldrb	r0, [r3, #0]
    e590:	f893 c001 	ldrb.w	ip, [r3, #1]
    e594:	428a      	cmp	r2, r1
    e596:	d009      	beq.n	e5ac <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    e598:	1c4a      	adds	r2, r1, #1
    e59a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    e59c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    e5a0:	4594      	cmp	ip, r2
    e5a2:	bf08      	it	eq
    e5a4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    e5a6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    e5a8:	709a      	strb	r2, [r3, #2]
	return mem;
    e5aa:	4770      	bx	lr
		return NULL;
    e5ac:	2000      	movs	r0, #0
}
    e5ae:	4770      	bx	lr
    e5b0:	20000478 	.word	0x20000478

0000e5b4 <ull_rx_put>:
{
    e5b4:	b538      	push	{r3, r4, r5, lr}
    e5b6:	460c      	mov	r4, r1
    e5b8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    e5ba:	f005 fee5 	bl	14388 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e5be:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    e5c0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e5c2:	4a03      	ldr	r2, [pc, #12]	; (e5d0 <ull_rx_put+0x1c>)
    e5c4:	4628      	mov	r0, r5
}
    e5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    e5ca:	f7fc b827 	b.w	a61c <memq_enqueue>
    e5ce:	bf00      	nop
    e5d0:	20004794 	.word	0x20004794

0000e5d4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    e5d4:	2201      	movs	r2, #1
    e5d6:	4b02      	ldr	r3, [pc, #8]	; (e5e0 <ull_rx_sched+0xc>)
    e5d8:	4611      	mov	r1, r2
    e5da:	2000      	movs	r0, #0
    e5dc:	f7fc b892 	b.w	a704 <mayfly_enqueue>
    e5e0:	200005e8 	.word	0x200005e8

0000e5e4 <ull_prepare_enqueue>:
{
    e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e5e8:	4e15      	ldr	r6, [pc, #84]	; (e640 <ull_prepare_enqueue+0x5c>)
{
    e5ea:	f89d a020 	ldrb.w	sl, [sp, #32]
    e5ee:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e5f0:	78f3      	ldrb	r3, [r6, #3]
{
    e5f2:	460f      	mov	r7, r1
	last = last + 1;
    e5f4:	1c5d      	adds	r5, r3, #1
    e5f6:	4611      	mov	r1, r2
	if (last == count) {
    e5f8:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
    e5fa:	b2ed      	uxtb	r5, r5
		last = 0U;
    e5fc:	42aa      	cmp	r2, r5
    e5fe:	bf08      	it	eq
    e600:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e602:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
    e604:	42aa      	cmp	r2, r5
{
    e606:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    e608:	7830      	ldrb	r0, [r6, #0]
    e60a:	d015      	beq.n	e638 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e60c:	1d34      	adds	r4, r6, #4
    e60e:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    e612:	2210      	movs	r2, #16
    e614:	4620      	mov	r0, r4
    e616:	f012 f887 	bl	20728 <memcpy>
	e->is_resume = is_resume;
    e61a:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    e61c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    e61e:	f00a 0a01 	and.w	sl, sl, #1
    e622:	f023 0303 	bic.w	r3, r3, #3
    e626:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    e62a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    e62e:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    e630:	70f5      	strb	r5, [r6, #3]
}
    e632:	4620      	mov	r0, r4
    e634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    e638:	2400      	movs	r4, #0
}
    e63a:	4620      	mov	r0, r4
    e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e640:	20000490 	.word	0x20000490

0000e644 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    e644:	4b05      	ldr	r3, [pc, #20]	; (e65c <ull_prepare_dequeue_get+0x18>)
    e646:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    e648:	78da      	ldrb	r2, [r3, #3]
    e64a:	7819      	ldrb	r1, [r3, #0]
    e64c:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    e64e:	bf1a      	itte	ne
    e650:	3304      	addne	r3, #4
    e652:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    e656:	2000      	moveq	r0, #0
}
    e658:	4770      	bx	lr
    e65a:	bf00      	nop
    e65c:	20000490 	.word	0x20000490

0000e660 <ull_prepare_dequeue_iter>:
{
    e660:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e662:	4b0d      	ldr	r3, [pc, #52]	; (e698 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    e664:	7802      	ldrb	r2, [r0, #0]
    e666:	7859      	ldrb	r1, [r3, #1]
    e668:	f893 c003 	ldrb.w	ip, [r3, #3]
    e66c:	f893 e000 	ldrb.w	lr, [r3]
    e670:	4291      	cmp	r1, r2
    e672:	bf9c      	itt	ls
    e674:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    e676:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    e678:	4594      	cmp	ip, r2
    e67a:	d00a      	beq.n	e692 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    e67c:	1c53      	adds	r3, r2, #1
    e67e:	b2db      	uxtb	r3, r3
		i = 0U;
    e680:	4299      	cmp	r1, r3
    e682:	bf08      	it	eq
    e684:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    e686:	4905      	ldr	r1, [pc, #20]	; (e69c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    e688:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    e68a:	fb02 100e 	mla	r0, r2, lr, r1
}
    e68e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    e692:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e694:	e7fb      	b.n	e68e <ull_prepare_dequeue_iter+0x2e>
    e696:	bf00      	nop
    e698:	20000490 	.word	0x20000490
    e69c:	20000494 	.word	0x20000494

0000e6a0 <ull_prepare_dequeue>:
{
    e6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    e6a4:	4c23      	ldr	r4, [pc, #140]	; (e734 <ull_prepare_dequeue+0x94>)
    e6a6:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    e6a8:	78e1      	ldrb	r1, [r4, #3]
    e6aa:	7823      	ldrb	r3, [r4, #0]
    e6ac:	4291      	cmp	r1, r2
    e6ae:	d027      	beq.n	e700 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e6b0:	1d27      	adds	r7, r4, #4
			mfy.param = next;
    e6b2:	f8df 9084 	ldr.w	r9, [pc, #132]	; e738 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
    e6b6:	f8df b084 	ldr.w	fp, [pc, #132]	; e73c <ull_prepare_dequeue+0x9c>
    e6ba:	f8df a084 	ldr.w	sl, [pc, #132]	; e740 <ull_prepare_dequeue+0xa0>
    e6be:	4680      	mov	r8, r0
    e6c0:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
    e6c4:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
    e6c6:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e6c8:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e6cc:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    e6d0:	d518      	bpl.n	e704 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
    e6d2:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
    e6d4:	78e1      	ldrb	r1, [r4, #3]
    e6d6:	7820      	ldrb	r0, [r4, #0]
    e6d8:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
    e6dc:	1c53      	adds	r3, r2, #1
	if (_first == last) {
    e6de:	4291      	cmp	r1, r2
	_first += 1U;
    e6e0:	b2db      	uxtb	r3, r3
	if (_first == last) {
    e6e2:	d00d      	beq.n	e700 <ull_prepare_dequeue+0x60>
		_first = 0U;
    e6e4:	459c      	cmp	ip, r3
    e6e6:	bf08      	it	eq
    e6e8:	2300      	moveq	r3, #0
	if (first == last) {
    e6ea:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    e6ec:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    e6ee:	d007      	beq.n	e700 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e6f0:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e6f4:	2d00      	cmp	r5, #0
    e6f6:	d1e5      	bne.n	e6c4 <ull_prepare_dequeue+0x24>
    e6f8:	b116      	cbz	r6, e700 <ull_prepare_dequeue+0x60>
    e6fa:	7f03      	ldrb	r3, [r0, #28]
    e6fc:	07db      	lsls	r3, r3, #31
    e6fe:	d5e1      	bpl.n	e6c4 <ull_prepare_dequeue+0x24>
}
    e700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    e704:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    e708:	4b0b      	ldr	r3, [pc, #44]	; (e738 <ull_prepare_dequeue+0x98>)
    e70a:	462a      	mov	r2, r5
    e70c:	4629      	mov	r1, r5
    e70e:	4640      	mov	r0, r8
    e710:	f7fb fff8 	bl	a704 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e714:	2800      	cmp	r0, #0
    e716:	d0dc      	beq.n	e6d2 <ull_prepare_dequeue+0x32>
    e718:	480a      	ldr	r0, [pc, #40]	; (e744 <ull_prepare_dequeue+0xa4>)
    e71a:	f240 7376 	movw	r3, #1910	; 0x776
    e71e:	465a      	mov	r2, fp
    e720:	4651      	mov	r1, sl
    e722:	f010 fffc 	bl	1f71e <printk>
    e726:	4040      	eors	r0, r0
    e728:	f380 8811 	msr	BASEPRI, r0
    e72c:	f04f 0003 	mov.w	r0, #3
    e730:	df02      	svc	2
    e732:	e7ce      	b.n	e6d2 <ull_prepare_dequeue+0x32>
    e734:	20000490 	.word	0x20000490
    e738:	200005b8 	.word	0x200005b8
    e73c:	00025290 	.word	0x00025290
    e740:	000253cc 	.word	0x000253cc
    e744:	000250f0 	.word	0x000250f0

0000e748 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    e748:	4b06      	ldr	r3, [pc, #24]	; (e764 <ull_event_done_extra_get+0x1c>)
    e74a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    e74c:	78d9      	ldrb	r1, [r3, #3]
    e74e:	7818      	ldrb	r0, [r3, #0]
    e750:	4291      	cmp	r1, r2
    e752:	d005      	beq.n	e760 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    e754:	fb02 3300 	mla	r3, r2, r0, r3
    e758:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    e75a:	b110      	cbz	r0, e762 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    e75c:	3020      	adds	r0, #32
    e75e:	4770      	bx	lr
		return NULL;
    e760:	2000      	movs	r0, #0
}
    e762:	4770      	bx	lr
    e764:	20000450 	.word	0x20000450

0000e768 <ull_event_done>:
{
    e768:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    e76a:	4a13      	ldr	r2, [pc, #76]	; (e7b8 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    e76c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    e76e:	78d4      	ldrb	r4, [r2, #3]
    e770:	7811      	ldrb	r1, [r2, #0]
    e772:	429c      	cmp	r4, r3
{
    e774:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    e776:	7850      	ldrb	r0, [r2, #1]
    e778:	d01b      	beq.n	e7b2 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    e77a:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    e77e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    e780:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    e782:	b2db      	uxtb	r3, r3
		_first = 0U;
    e784:	4298      	cmp	r0, r3
    e786:	bf08      	it	eq
    e788:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    e78a:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    e78c:	b17c      	cbz	r4, e7ae <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    e78e:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    e790:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    e792:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e794:	4a09      	ldr	r2, [pc, #36]	; (e7bc <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    e796:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e798:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    e79a:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    e79c:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e79e:	f7fb ff3d 	bl	a61c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    e7a2:	2201      	movs	r2, #1
    e7a4:	4b06      	ldr	r3, [pc, #24]	; (e7c0 <ull_event_done+0x58>)
    e7a6:	4611      	mov	r1, r2
    e7a8:	4628      	mov	r0, r5
    e7aa:	f7fb ffab 	bl	a704 <mayfly_enqueue>
}
    e7ae:	4620      	mov	r0, r4
    e7b0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    e7b2:	2400      	movs	r4, #0
    e7b4:	e7fb      	b.n	e7ae <ull_event_done+0x46>
    e7b6:	bf00      	nop
    e7b8:	20000450 	.word	0x20000450
    e7bc:	2000478c 	.word	0x2000478c
    e7c0:	200005d8 	.word	0x200005d8

0000e7c4 <ull_rxfifo_alloc>:
{
    e7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7c8:	b083      	sub	sp, #12
    e7ca:	461d      	mov	r5, r3
    e7cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e7ce:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    e7d2:	e9cd 0400 	strd	r0, r4, [sp]
    e7d6:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    e7da:	b33b      	cbz	r3, e82c <ull_rxfifo_alloc+0x68>
    e7dc:	1e5c      	subs	r4, r3, #1
    e7de:	f895 b000 	ldrb.w	fp, [r5]
    e7e2:	4688      	mov	r8, r1
    e7e4:	4617      	mov	r7, r2
    e7e6:	b2e4      	uxtb	r4, r4
	last = last + 1;
    e7e8:	f10b 0301 	add.w	r3, fp, #1
    e7ec:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    e7f0:	45d8      	cmp	r8, fp
    e7f2:	bf08      	it	eq
    e7f4:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    e7f8:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    e7fa:	4648      	mov	r0, r9
    e7fc:	d016      	beq.n	e82c <ull_rxfifo_alloc+0x68>
    e7fe:	f7fb fea9 	bl	a554 <mem_acquire>
    e802:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    e804:	4650      	mov	r0, sl
		if (!link) {
    e806:	b18e      	cbz	r6, e82c <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    e808:	f7fb fea4 	bl	a554 <mem_acquire>
		if (!rx) {
    e80c:	b188      	cbz	r0, e832 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    e80e:	2300      	movs	r3, #0
    e810:	6073      	str	r3, [r6, #4]
		rx->link = link;
    e812:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e814:	782a      	ldrb	r2, [r5, #0]
    e816:	9b00      	ldr	r3, [sp, #0]
    e818:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e81c:	9b01      	ldr	r3, [sp, #4]
    e81e:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    e820:	3c01      	subs	r4, #1
    e822:	b2e4      	uxtb	r4, r4
    e824:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    e826:	f885 b000 	strb.w	fp, [r5]
    e82a:	d1dd      	bne.n	e7e8 <ull_rxfifo_alloc+0x24>
}
    e82c:	b003      	add	sp, #12
    e82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    e832:	4649      	mov	r1, r9
    e834:	4630      	mov	r0, r6
}
    e836:	b003      	add	sp, #12
    e838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    e83c:	f7fb bea4 	b.w	a588 <mem_release>

0000e840 <init_reset>:
{
    e840:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    e842:	4c3f      	ldr	r4, [pc, #252]	; (e940 <init_reset+0x100>)
    e844:	4d3f      	ldr	r5, [pc, #252]	; (e944 <init_reset+0x104>)
    e846:	79a2      	ldrb	r2, [r4, #6]
    e848:	88a1      	ldrh	r1, [r4, #4]
    e84a:	4e3f      	ldr	r6, [pc, #252]	; (e948 <init_reset+0x108>)
    e84c:	2000      	movs	r0, #0
{
    e84e:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    e850:	4623      	mov	r3, r4
    e852:	8068      	strh	r0, [r5, #2]
    e854:	f104 0008 	add.w	r0, r4, #8
    e858:	f7fb fe4c 	bl	a4f4 <mem_init>
    e85c:	79e3      	ldrb	r3, [r4, #7]
    e85e:	79a2      	ldrb	r2, [r4, #6]
    e860:	1d30      	adds	r0, r6, #4
    e862:	441a      	add	r2, r3
    e864:	2108      	movs	r1, #8
    e866:	4633      	mov	r3, r6
    e868:	f7fb fe44 	bl	a4f4 <mem_init>
    e86c:	9602      	str	r6, [sp, #8]
    e86e:	462e      	mov	r6, r5
    e870:	79a3      	ldrb	r3, [r4, #6]
    e872:	f816 0b04 	ldrb.w	r0, [r6], #4
    e876:	78aa      	ldrb	r2, [r5, #2]
    e878:	7869      	ldrb	r1, [r5, #1]
    e87a:	9303      	str	r3, [sp, #12]
    e87c:	e9cd 6400 	strd	r6, r4, [sp]
    e880:	1ceb      	adds	r3, r5, #3
    e882:	f7ff ff9f 	bl	e7c4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e886:	4b31      	ldr	r3, [pc, #196]	; (e94c <init_reset+0x10c>)
    e888:	2209      	movs	r2, #9
    e88a:	1d18      	adds	r0, r3, #4
    e88c:	2144      	movs	r1, #68	; 0x44
    e88e:	f7fb fe31 	bl	a4f4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e892:	4b2f      	ldr	r3, [pc, #188]	; (e950 <init_reset+0x110>)
    e894:	220a      	movs	r2, #10
    e896:	1d18      	adds	r0, r3, #4
    e898:	2108      	movs	r1, #8
    e89a:	f7fb fe2b 	bl	a4f4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e89e:	482c      	ldr	r0, [pc, #176]	; (e950 <init_reset+0x110>)
    e8a0:	f7fb fe58 	bl	a554 <mem_acquire>
	LL_ASSERT(link);
    e8a4:	4604      	mov	r4, r0
    e8a6:	b308      	cbz	r0, e8ec <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    e8a8:	4a2a      	ldr	r2, [pc, #168]	; (e954 <init_reset+0x114>)
    e8aa:	4620      	mov	r0, r4
    e8ac:	1f11      	subs	r1, r2, #4
    e8ae:	f7fb fea7 	bl	a600 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    e8b2:	4825      	ldr	r0, [pc, #148]	; (e948 <init_reset+0x108>)
    e8b4:	f7fb fe4e 	bl	a554 <mem_acquire>
	LL_ASSERT(link);
    e8b8:	4604      	mov	r4, r0
    e8ba:	b328      	cbz	r0, e908 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    e8bc:	4a26      	ldr	r2, [pc, #152]	; (e958 <init_reset+0x118>)
    e8be:	4620      	mov	r0, r4
    e8c0:	1f11      	subs	r1, r2, #4
    e8c2:	f7fb fe9d 	bl	a600 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e8c6:	4822      	ldr	r0, [pc, #136]	; (e950 <init_reset+0x110>)
    e8c8:	f7fb fe44 	bl	a554 <mem_acquire>
	LL_ASSERT(link);
    e8cc:	4604      	mov	r4, r0
    e8ce:	b348      	cbz	r0, e924 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    e8d0:	4a22      	ldr	r2, [pc, #136]	; (e95c <init_reset+0x11c>)
    e8d2:	4620      	mov	r0, r4
    e8d4:	1f11      	subs	r1, r2, #4
    e8d6:	f7fb fe93 	bl	a600 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e8da:	4b21      	ldr	r3, [pc, #132]	; (e960 <init_reset+0x120>)
    e8dc:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
    e8de:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    e8e0:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    e8e2:	f7ff f8d5 	bl	da90 <rx_alloc>
}
    e8e6:	2000      	movs	r0, #0
    e8e8:	b004      	add	sp, #16
    e8ea:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    e8ec:	4a1d      	ldr	r2, [pc, #116]	; (e964 <init_reset+0x124>)
    e8ee:	491e      	ldr	r1, [pc, #120]	; (e968 <init_reset+0x128>)
    e8f0:	481e      	ldr	r0, [pc, #120]	; (e96c <init_reset+0x12c>)
    e8f2:	f640 0302 	movw	r3, #2050	; 0x802
    e8f6:	f010 ff12 	bl	1f71e <printk>
    e8fa:	4040      	eors	r0, r0
    e8fc:	f380 8811 	msr	BASEPRI, r0
    e900:	f04f 0003 	mov.w	r0, #3
    e904:	df02      	svc	2
    e906:	e7cf      	b.n	e8a8 <init_reset+0x68>
	LL_ASSERT(link);
    e908:	4a16      	ldr	r2, [pc, #88]	; (e964 <init_reset+0x124>)
    e90a:	4917      	ldr	r1, [pc, #92]	; (e968 <init_reset+0x128>)
    e90c:	4817      	ldr	r0, [pc, #92]	; (e96c <init_reset+0x12c>)
    e90e:	f640 030a 	movw	r3, #2058	; 0x80a
    e912:	f010 ff04 	bl	1f71e <printk>
    e916:	4040      	eors	r0, r0
    e918:	f380 8811 	msr	BASEPRI, r0
    e91c:	f04f 0003 	mov.w	r0, #3
    e920:	df02      	svc	2
    e922:	e7cb      	b.n	e8bc <init_reset+0x7c>
	LL_ASSERT(link);
    e924:	4a0f      	ldr	r2, [pc, #60]	; (e964 <init_reset+0x124>)
    e926:	4910      	ldr	r1, [pc, #64]	; (e968 <init_reset+0x128>)
    e928:	4810      	ldr	r0, [pc, #64]	; (e96c <init_reset+0x12c>)
    e92a:	f640 0312 	movw	r3, #2066	; 0x812
    e92e:	f010 fef6 	bl	1f71e <printk>
    e932:	4040      	eors	r0, r0
    e934:	f380 8811 	msr	BASEPRI, r0
    e938:	f04f 0003 	mov.w	r0, #3
    e93c:	df02      	svc	2
    e93e:	e7c7      	b.n	e8d0 <init_reset+0x90>
    e940:	20000378 	.word	0x20000378
    e944:	20000450 	.word	0x20000450
    e948:	20004494 	.word	0x20004494
    e94c:	20004518 	.word	0x20004518
    e950:	200044c4 	.word	0x200044c4
    e954:	20004794 	.word	0x20004794
    e958:	2000478c 	.word	0x2000478c
    e95c:	20004784 	.word	0x20004784
    e960:	200044c0 	.word	0x200044c0
    e964:	00025290 	.word	0x00025290
    e968:	00025658 	.word	0x00025658
    e96c:	000250f0 	.word	0x000250f0

0000e970 <ll_init>:
{
    e970:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    e972:	4b30      	ldr	r3, [pc, #192]	; (ea34 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e974:	4d30      	ldr	r5, [pc, #192]	; (ea38 <ll_init+0xc8>)
	sem_recv = sem_rx;
    e976:	6018      	str	r0, [r3, #0]
{
    e978:	b087      	sub	sp, #28
	cntr_init();
    e97a:	f00a fb7f 	bl	1907c <cntr_init>
	mayfly_init();
    e97e:	f7fb fe6f 	bl	a660 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e982:	4a2e      	ldr	r2, [pc, #184]	; (ea3c <ll_init+0xcc>)
    e984:	4c2e      	ldr	r4, [pc, #184]	; (ea40 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e986:	492f      	ldr	r1, [pc, #188]	; (ea44 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e988:	e9cd 2504 	strd	r2, r5, [sp, #16]
    e98c:	4a2e      	ldr	r2, [pc, #184]	; (ea48 <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e98e:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e990:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e994:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e996:	240c      	movs	r4, #12
    e998:	e9cd 1400 	strd	r1, r4, [sp]
    e99c:	4a2b      	ldr	r2, [pc, #172]	; (ea4c <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e99e:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    e9a0:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e9a2:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e9a4:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e9a6:	2000      	movs	r0, #0
    e9a8:	2106      	movs	r1, #6
    e9aa:	f7fc ffd7 	bl	b95c <ticker_init>
	LL_ASSERT(!err);
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d132      	bne.n	ea18 <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e9b2:	2201      	movs	r2, #1
    e9b4:	2100      	movs	r1, #0
    e9b6:	4826      	ldr	r0, [pc, #152]	; (ea50 <ll_init+0xe0>)
    e9b8:	f015 fb77 	bl	240aa <z_impl_k_sem_init>
	err = lll_init();
    e9bc:	f008 f856 	bl	16a6c <lll_init>
	if (err) {
    e9c0:	4604      	mov	r4, r0
    e9c2:	b110      	cbz	r0, e9ca <ll_init+0x5a>
}
    e9c4:	4620      	mov	r0, r4
    e9c6:	b007      	add	sp, #28
    e9c8:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    e9ca:	f7ff ff39 	bl	e840 <init_reset>
	if (err) {
    e9ce:	4604      	mov	r4, r0
    e9d0:	2800      	cmp	r0, #0
    e9d2:	d1f7      	bne.n	e9c4 <ll_init+0x54>
	err = lll_adv_init();
    e9d4:	f008 fcae 	bl	17334 <lll_adv_init>
	if (err) {
    e9d8:	4604      	mov	r4, r0
    e9da:	2800      	cmp	r0, #0
    e9dc:	d1f2      	bne.n	e9c4 <ll_init+0x54>
	err = ull_adv_init();
    e9de:	f000 fd0b 	bl	f3f8 <ull_adv_init>
	if (err) {
    e9e2:	4604      	mov	r4, r0
    e9e4:	2800      	cmp	r0, #0
    e9e6:	d1ed      	bne.n	e9c4 <ll_init+0x54>
	err = lll_scan_init();
    e9e8:	f009 fc36 	bl	18258 <lll_scan_init>
	if (err) {
    e9ec:	4604      	mov	r4, r0
    e9ee:	2800      	cmp	r0, #0
    e9f0:	d1e8      	bne.n	e9c4 <ll_init+0x54>
	err = ull_scan_init();
    e9f2:	f000 feb1 	bl	f758 <ull_scan_init>
	if (err) {
    e9f6:	4604      	mov	r4, r0
    e9f8:	2800      	cmp	r0, #0
    e9fa:	d1e3      	bne.n	e9c4 <ll_init+0x54>
	err = lll_conn_init();
    e9fc:	f009 fd60 	bl	184c0 <lll_conn_init>
	if (err) {
    ea00:	4604      	mov	r4, r0
    ea02:	2800      	cmp	r0, #0
    ea04:	d1de      	bne.n	e9c4 <ll_init+0x54>
	err = ull_conn_init();
    ea06:	f002 f933 	bl	10c70 <ull_conn_init>
	if (err) {
    ea0a:	4604      	mov	r4, r0
    ea0c:	2800      	cmp	r0, #0
    ea0e:	d1d9      	bne.n	e9c4 <ll_init+0x54>
		ull_filter_reset(true);
    ea10:	2001      	movs	r0, #1
    ea12:	f007 f8ef 	bl	15bf4 <ull_filter_reset>
	return  0;
    ea16:	e7d5      	b.n	e9c4 <ll_init+0x54>
	LL_ASSERT(!err);
    ea18:	4a0e      	ldr	r2, [pc, #56]	; (ea54 <ll_init+0xe4>)
    ea1a:	490f      	ldr	r1, [pc, #60]	; (ea58 <ll_init+0xe8>)
    ea1c:	480f      	ldr	r0, [pc, #60]	; (ea5c <ll_init+0xec>)
    ea1e:	f240 230d 	movw	r3, #525	; 0x20d
    ea22:	f010 fe7c 	bl	1f71e <printk>
    ea26:	4040      	eors	r0, r0
    ea28:	f380 8811 	msr	BASEPRI, r0
    ea2c:	f04f 0003 	mov.w	r0, #3
    ea30:	df02      	svc	2
    ea32:	e7be      	b.n	e9b2 <ll_init+0x42>
    ea34:	20004798 	.word	0x20004798
    ea38:	00019db9 	.word	0x00019db9
    ea3c:	00019c69 	.word	0x00019c69
    ea40:	00019c05 	.word	0x00019c05
    ea44:	20004b44 	.word	0x20004b44
    ea48:	200048d4 	.word	0x200048d4
    ea4c:	200047b4 	.word	0x200047b4
    ea50:	2000479c 	.word	0x2000479c
    ea54:	00025290 	.word	0x00025290
    ea58:	000252cc 	.word	0x000252cc
    ea5c:	000250f0 	.word	0x000250f0

0000ea60 <ll_reset>:
{
    ea60:	b510      	push	{r4, lr}
    ea62:	b086      	sub	sp, #24
	err = ull_adv_reset();
    ea64:	f000 fcd8 	bl	f418 <ull_adv_reset>
	LL_ASSERT(!err);
    ea68:	2800      	cmp	r0, #0
    ea6a:	d133      	bne.n	ead4 <ll_reset+0x74>
	err = ull_scan_reset();
    ea6c:	f000 fef6 	bl	f85c <ull_scan_reset>
	LL_ASSERT(!err);
    ea70:	2800      	cmp	r0, #0
    ea72:	d140      	bne.n	eaf6 <ll_reset+0x96>
	err = ull_conn_reset();
    ea74:	f002 f8fe 	bl	10c74 <ull_conn_reset>
	LL_ASSERT(!err);
    ea78:	2800      	cmp	r0, #0
    ea7a:	d14d      	bne.n	eb18 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
    ea7c:	4b43      	ldr	r3, [pc, #268]	; (eb8c <ll_reset+0x12c>)
    ea7e:	2400      	movs	r4, #0
    ea80:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    ea82:	4620      	mov	r0, r4
    ea84:	f007 f8b6 	bl	15bf4 <ull_filter_reset>
	MFIFO_INIT(prep);
    ea88:	4941      	ldr	r1, [pc, #260]	; (eb90 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
    ea8a:	4a42      	ldr	r2, [pc, #264]	; (eb94 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
    ea8c:	4b42      	ldr	r3, [pc, #264]	; (eb98 <ll_reset+0x138>)
	MFIFO_INIT(prep);
    ea8e:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    ea90:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    ea92:	805c      	strh	r4, [r3, #2]
    ea94:	2201      	movs	r2, #1
    ea96:	4621      	mov	r1, r4
    ea98:	4668      	mov	r0, sp
    ea9a:	f015 fb06 	bl	240aa <z_impl_k_sem_init>
		mfy.param = &sem;
    ea9e:	4b3f      	ldr	r3, [pc, #252]	; (eb9c <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    eaa0:	4622      	mov	r2, r4
    eaa2:	4621      	mov	r1, r4
    eaa4:	2003      	movs	r0, #3
		mfy.param = &sem;
    eaa6:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    eaaa:	f7fb fe2b 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!retval);
    eaae:	2800      	cmp	r0, #0
    eab0:	d15d      	bne.n	eb6e <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
    eab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eaba:	4668      	mov	r0, sp
    eabc:	f00f fd54 	bl	1e568 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    eac0:	f000 fcc4 	bl	f44c <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    eac4:	2800      	cmp	r0, #0
    eac6:	d144      	bne.n	eb52 <ll_reset+0xf2>
	err = init_reset();
    eac8:	f7ff feba 	bl	e840 <init_reset>
	LL_ASSERT(!err);
    eacc:	2800      	cmp	r0, #0
    eace:	d131      	bne.n	eb34 <ll_reset+0xd4>
}
    ead0:	b006      	add	sp, #24
    ead2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    ead4:	4a32      	ldr	r2, [pc, #200]	; (eba0 <ll_reset+0x140>)
    ead6:	4933      	ldr	r1, [pc, #204]	; (eba4 <ll_reset+0x144>)
    ead8:	4833      	ldr	r0, [pc, #204]	; (eba8 <ll_reset+0x148>)
    eada:	f240 23ad 	movw	r3, #685	; 0x2ad
    eade:	f010 fe1e 	bl	1f71e <printk>
    eae2:	4040      	eors	r0, r0
    eae4:	f380 8811 	msr	BASEPRI, r0
    eae8:	f04f 0003 	mov.w	r0, #3
    eaec:	df02      	svc	2
	err = ull_scan_reset();
    eaee:	f000 feb5 	bl	f85c <ull_scan_reset>
	LL_ASSERT(!err);
    eaf2:	2800      	cmp	r0, #0
    eaf4:	d0be      	beq.n	ea74 <ll_reset+0x14>
    eaf6:	4a2a      	ldr	r2, [pc, #168]	; (eba0 <ll_reset+0x140>)
    eaf8:	492a      	ldr	r1, [pc, #168]	; (eba4 <ll_reset+0x144>)
    eafa:	482b      	ldr	r0, [pc, #172]	; (eba8 <ll_reset+0x148>)
    eafc:	f240 23b3 	movw	r3, #691	; 0x2b3
    eb00:	f010 fe0d 	bl	1f71e <printk>
    eb04:	4040      	eors	r0, r0
    eb06:	f380 8811 	msr	BASEPRI, r0
    eb0a:	f04f 0003 	mov.w	r0, #3
    eb0e:	df02      	svc	2
	err = ull_conn_reset();
    eb10:	f002 f8b0 	bl	10c74 <ull_conn_reset>
	LL_ASSERT(!err);
    eb14:	2800      	cmp	r0, #0
    eb16:	d0b1      	beq.n	ea7c <ll_reset+0x1c>
    eb18:	4a21      	ldr	r2, [pc, #132]	; (eba0 <ll_reset+0x140>)
    eb1a:	4922      	ldr	r1, [pc, #136]	; (eba4 <ll_reset+0x144>)
    eb1c:	4822      	ldr	r0, [pc, #136]	; (eba8 <ll_reset+0x148>)
    eb1e:	f240 23de 	movw	r3, #734	; 0x2de
    eb22:	f010 fdfc 	bl	1f71e <printk>
    eb26:	4040      	eors	r0, r0
    eb28:	f380 8811 	msr	BASEPRI, r0
    eb2c:	f04f 0003 	mov.w	r0, #3
    eb30:	df02      	svc	2
    eb32:	e7a3      	b.n	ea7c <ll_reset+0x1c>
	LL_ASSERT(!err);
    eb34:	4a1a      	ldr	r2, [pc, #104]	; (eba0 <ll_reset+0x140>)
    eb36:	491b      	ldr	r1, [pc, #108]	; (eba4 <ll_reset+0x144>)
    eb38:	481b      	ldr	r0, [pc, #108]	; (eba8 <ll_reset+0x148>)
    eb3a:	f240 3327 	movw	r3, #807	; 0x327
    eb3e:	f010 fdee 	bl	1f71e <printk>
    eb42:	4040      	eors	r0, r0
    eb44:	f380 8811 	msr	BASEPRI, r0
    eb48:	f04f 0003 	mov.w	r0, #3
    eb4c:	df02      	svc	2
}
    eb4e:	b006      	add	sp, #24
    eb50:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    eb52:	4a13      	ldr	r2, [pc, #76]	; (eba0 <ll_reset+0x140>)
    eb54:	4913      	ldr	r1, [pc, #76]	; (eba4 <ll_reset+0x144>)
    eb56:	4814      	ldr	r0, [pc, #80]	; (eba8 <ll_reset+0x148>)
    eb58:	f240 331a 	movw	r3, #794	; 0x31a
    eb5c:	f010 fddf 	bl	1f71e <printk>
    eb60:	4040      	eors	r0, r0
    eb62:	f380 8811 	msr	BASEPRI, r0
    eb66:	f04f 0003 	mov.w	r0, #3
    eb6a:	df02      	svc	2
    eb6c:	e7ac      	b.n	eac8 <ll_reset+0x68>
		LL_ASSERT(!retval);
    eb6e:	4a0c      	ldr	r2, [pc, #48]	; (eba0 <ll_reset+0x140>)
    eb70:	490e      	ldr	r1, [pc, #56]	; (ebac <ll_reset+0x14c>)
    eb72:	480d      	ldr	r0, [pc, #52]	; (eba8 <ll_reset+0x148>)
    eb74:	f240 330d 	movw	r3, #781	; 0x30d
    eb78:	f010 fdd1 	bl	1f71e <printk>
    eb7c:	4040      	eors	r0, r0
    eb7e:	f380 8811 	msr	BASEPRI, r0
    eb82:	f04f 0003 	mov.w	r0, #3
    eb86:	df02      	svc	2
    eb88:	e793      	b.n	eab2 <ll_reset+0x52>
    eb8a:	bf00      	nop
    eb8c:	20000594 	.word	0x20000594
    eb90:	20000490 	.word	0x20000490
    eb94:	20000478 	.word	0x20000478
    eb98:	20000468 	.word	0x20000468
    eb9c:	200005c8 	.word	0x200005c8
    eba0:	00025290 	.word	0x00025290
    eba4:	000252cc 	.word	0x000252cc
    eba8:	000250f0 	.word	0x000250f0
    ebac:	000253f4 	.word	0x000253f4

0000ebb0 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    ebb0:	b510      	push	{r4, lr}
    ebb2:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    ebb4:	2400      	movs	r4, #0
    ebb6:	e9cd 4400 	strd	r4, r4, [sp]
    ebba:	9b04      	ldr	r3, [sp, #16]
    ebbc:	f008 f97a 	bl	16eb4 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    ebc0:	b002      	add	sp, #8
    ebc2:	bd10      	pop	{r4, pc}

0000ebc4 <lll_resume>:

void lll_resume(void *param)
{
    ebc4:	b510      	push	{r4, lr}
    ebc6:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    ebc8:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    ebca:	691a      	ldr	r2, [r3, #16]
    ebcc:	6999      	ldr	r1, [r3, #24]
    ebce:	2401      	movs	r4, #1
{
    ebd0:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    ebd2:	4020      	ands	r0, r4
    ebd4:	e9cd 0400 	strd	r0, r4, [sp]
    ebd8:	6958      	ldr	r0, [r3, #20]
    ebda:	f008 f96b 	bl	16eb4 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    ebde:	b108      	cbz	r0, ebe4 <lll_resume+0x20>
    ebe0:	3077      	adds	r0, #119	; 0x77
    ebe2:	d101      	bne.n	ebe8 <lll_resume+0x24>
}
    ebe4:	b002      	add	sp, #8
    ebe6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    ebe8:	4a06      	ldr	r2, [pc, #24]	; (ec04 <lll_resume+0x40>)
    ebea:	4907      	ldr	r1, [pc, #28]	; (ec08 <lll_resume+0x44>)
    ebec:	4807      	ldr	r0, [pc, #28]	; (ec0c <lll_resume+0x48>)
    ebee:	234f      	movs	r3, #79	; 0x4f
    ebf0:	f010 fd95 	bl	1f71e <printk>
    ebf4:	4040      	eors	r0, r0
    ebf6:	f380 8811 	msr	BASEPRI, r0
    ebfa:	f04f 0003 	mov.w	r0, #3
    ebfe:	df02      	svc	2
}
    ec00:	b002      	add	sp, #8
    ec02:	bd10      	pop	{r4, pc}
    ec04:	000253fc 	.word	0x000253fc
    ec08:	00025440 	.word	0x00025440
    ec0c:	000250f0 	.word	0x000250f0

0000ec10 <ticker_stop_cb>:
{
    ec10:	b530      	push	{r4, r5, lr}
    ec12:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ec14:	4b19      	ldr	r3, [pc, #100]	; (ec7c <ticker_stop_cb+0x6c>)
{
    ec16:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ec18:	4a19      	ldr	r2, [pc, #100]	; (ec80 <ticker_stop_cb+0x70>)
    ec1a:	1aeb      	subs	r3, r5, r3
    ec1c:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ec20:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
    ec24:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ec28:	d119      	bne.n	ec5e <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    ec2a:	1ca2      	adds	r2, r4, #2
    ec2c:	4b15      	ldr	r3, [pc, #84]	; (ec84 <ticker_stop_cb+0x74>)
    ec2e:	9500      	str	r5, [sp, #0]
    ec30:	b2d2      	uxtb	r2, r2
    ec32:	2101      	movs	r1, #1
    ec34:	2000      	movs	r0, #0
    ec36:	f7fc ffcd 	bl	bbd4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ec3a:	f030 0302 	bics.w	r3, r0, #2
    ec3e:	d00c      	beq.n	ec5a <ticker_stop_cb+0x4a>
    ec40:	4a11      	ldr	r2, [pc, #68]	; (ec88 <ticker_stop_cb+0x78>)
    ec42:	4912      	ldr	r1, [pc, #72]	; (ec8c <ticker_stop_cb+0x7c>)
    ec44:	4812      	ldr	r0, [pc, #72]	; (ec90 <ticker_stop_cb+0x80>)
    ec46:	f640 03d2 	movw	r3, #2258	; 0x8d2
    ec4a:	f010 fd68 	bl	1f71e <printk>
    ec4e:	4040      	eors	r0, r0
    ec50:	f380 8811 	msr	BASEPRI, r0
    ec54:	f04f 0003 	mov.w	r0, #3
    ec58:	df02      	svc	2
}
    ec5a:	b003      	add	sp, #12
    ec5c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ec5e:	4a0a      	ldr	r2, [pc, #40]	; (ec88 <ticker_stop_cb+0x78>)
    ec60:	490c      	ldr	r1, [pc, #48]	; (ec94 <ticker_stop_cb+0x84>)
    ec62:	480b      	ldr	r0, [pc, #44]	; (ec90 <ticker_stop_cb+0x80>)
    ec64:	f640 03cd 	movw	r3, #2253	; 0x8cd
    ec68:	f010 fd59 	bl	1f71e <printk>
    ec6c:	4040      	eors	r0, r0
    ec6e:	f380 8811 	msr	BASEPRI, r0
    ec72:	f04f 0003 	mov.w	r0, #3
    ec76:	df02      	svc	2
    ec78:	e7d7      	b.n	ec2a <ticker_stop_cb+0x1a>
    ec7a:	bf00      	nop
    ec7c:	20004b7c 	.word	0x20004b7c
    ec80:	8d3dcb09 	.word	0x8d3dcb09
    ec84:	0000ed2d 	.word	0x0000ed2d
    ec88:	00025454 	.word	0x00025454
    ec8c:	000254a0 	.word	0x000254a0
    ec90:	000250f0 	.word	0x000250f0
    ec94:	00025494 	.word	0x00025494

0000ec98 <disabled_cb>:
{
    ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    ec9a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    ec9c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    ec9e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    eca0:	b1d7      	cbz	r7, ecd8 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    eca2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    eca4:	2300      	movs	r3, #0
    eca6:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    eca8:	b34c      	cbz	r4, ecfe <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    ecaa:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ecac:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
    ecae:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ecb0:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    ecb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ecb6:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    ecb8:	221e      	movs	r2, #30
    ecba:	f104 001c 	add.w	r0, r4, #28
    ecbe:	f011 fd3e 	bl	2073e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    ecc2:	233c      	movs	r3, #60	; 0x3c
    ecc4:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    ecc6:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    ecc8:	4621      	mov	r1, r4
    ecca:	4638      	mov	r0, r7
    eccc:	f7ff fae2 	bl	e294 <ll_rx_put>
}
    ecd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    ecd4:	f7ff bae8 	b.w	e2a8 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    ecd8:	4a10      	ldr	r2, [pc, #64]	; (ed1c <disabled_cb+0x84>)
    ecda:	4911      	ldr	r1, [pc, #68]	; (ed20 <disabled_cb+0x88>)
    ecdc:	4811      	ldr	r0, [pc, #68]	; (ed24 <disabled_cb+0x8c>)
    ecde:	f640 131a 	movw	r3, #2330	; 0x91a
    ece2:	f010 fd1c 	bl	1f71e <printk>
    ece6:	4040      	eors	r0, r0
    ece8:	f380 8811 	msr	BASEPRI, r0
    ecec:	f04f 0003 	mov.w	r0, #3
    ecf0:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    ecf2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    ecf4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    ecf6:	2300      	movs	r3, #0
    ecf8:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    ecfa:	2c00      	cmp	r4, #0
    ecfc:	d1d5      	bne.n	ecaa <disabled_cb+0x12>
    ecfe:	4a07      	ldr	r2, [pc, #28]	; (ed1c <disabled_cb+0x84>)
    ed00:	4909      	ldr	r1, [pc, #36]	; (ed28 <disabled_cb+0x90>)
    ed02:	4808      	ldr	r0, [pc, #32]	; (ed24 <disabled_cb+0x8c>)
    ed04:	f640 131e 	movw	r3, #2334	; 0x91e
    ed08:	f010 fd09 	bl	1f71e <printk>
    ed0c:	4040      	eors	r0, r0
    ed0e:	f380 8811 	msr	BASEPRI, r0
    ed12:	f04f 0003 	mov.w	r0, #3
    ed16:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    ed18:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    ed1a:	e7c6      	b.n	ecaa <disabled_cb+0x12>
    ed1c:	00025454 	.word	0x00025454
    ed20:	000254bc 	.word	0x000254bc
    ed24:	000250f0 	.word	0x000250f0
    ed28:	000254d0 	.word	0x000254d0

0000ed2c <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    ed2c:	b100      	cbz	r0, ed30 <ticker_stop_op_cb+0x4>
    ed2e:	4770      	bx	lr
	mfy.param = param;
    ed30:	4b0c      	ldr	r3, [pc, #48]	; (ed64 <ticker_stop_op_cb+0x38>)
{
    ed32:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ed34:	4602      	mov	r2, r0
    ed36:	460c      	mov	r4, r1
    ed38:	2002      	movs	r0, #2
    ed3a:	2101      	movs	r1, #1
	mfy.param = param;
    ed3c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ed3e:	f7fb fce1 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ed42:	b900      	cbnz	r0, ed46 <ticker_stop_op_cb+0x1a>
}
    ed44:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    ed46:	4a08      	ldr	r2, [pc, #32]	; (ed68 <ticker_stop_op_cb+0x3c>)
    ed48:	4908      	ldr	r1, [pc, #32]	; (ed6c <ticker_stop_op_cb+0x40>)
    ed4a:	4809      	ldr	r0, [pc, #36]	; (ed70 <ticker_stop_op_cb+0x44>)
    ed4c:	f640 03ee 	movw	r3, #2286	; 0x8ee
    ed50:	f010 fce5 	bl	1f71e <printk>
    ed54:	4040      	eors	r0, r0
    ed56:	f380 8811 	msr	BASEPRI, r0
    ed5a:	f04f 0003 	mov.w	r0, #3
    ed5e:	df02      	svc	2
}
    ed60:	bd10      	pop	{r4, pc}
    ed62:	bf00      	nop
    ed64:	20000628 	.word	0x20000628
    ed68:	00025454 	.word	0x00025454
    ed6c:	000253cc 	.word	0x000253cc
    ed70:	000250f0 	.word	0x000250f0

0000ed74 <adv_disable>:
{
    ed74:	b538      	push	{r3, r4, r5, lr}
    ed76:	7803      	ldrb	r3, [r0, #0]
    ed78:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
    ed7a:	2b00      	cmp	r3, #0
    ed7c:	d02c      	beq.n	edd8 <adv_disable+0x64>
		mfy.param = &adv->lll;
    ed7e:	4d19      	ldr	r5, [pc, #100]	; (ede4 <adv_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
    ed80:	6943      	ldr	r3, [r0, #20]
		mfy.param = &adv->lll;
    ed82:	f100 011c 	add.w	r1, r0, #28
    ed86:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    ed88:	b16b      	cbz	r3, eda6 <adv_disable+0x32>
    ed8a:	4a17      	ldr	r2, [pc, #92]	; (ede8 <adv_disable+0x74>)
    ed8c:	4917      	ldr	r1, [pc, #92]	; (edec <adv_disable+0x78>)
    ed8e:	4818      	ldr	r0, [pc, #96]	; (edf0 <adv_disable+0x7c>)
    ed90:	f640 1303 	movw	r3, #2307	; 0x903
    ed94:	f010 fcc3 	bl	1f71e <printk>
    ed98:	4040      	eors	r0, r0
    ed9a:	f380 8811 	msr	BASEPRI, r0
    ed9e:	f04f 0003 	mov.w	r0, #3
    eda2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    eda4:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    eda6:	4813      	ldr	r0, [pc, #76]	; (edf4 <adv_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    eda8:	4b0e      	ldr	r3, [pc, #56]	; (ede4 <adv_disable+0x70>)
    edaa:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    edac:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    edb0:	4611      	mov	r1, r2
    edb2:	2001      	movs	r0, #1
    edb4:	f7fb fca6 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!ret);
    edb8:	b900      	cbnz	r0, edbc <adv_disable+0x48>
}
    edba:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    edbc:	4a0a      	ldr	r2, [pc, #40]	; (ede8 <adv_disable+0x74>)
    edbe:	490e      	ldr	r1, [pc, #56]	; (edf8 <adv_disable+0x84>)
    edc0:	480b      	ldr	r0, [pc, #44]	; (edf0 <adv_disable+0x7c>)
    edc2:	f640 130a 	movw	r3, #2314	; 0x90a
    edc6:	f010 fcaa 	bl	1f71e <printk>
    edca:	4040      	eors	r0, r0
    edcc:	f380 8811 	msr	BASEPRI, r0
    edd0:	f04f 0003 	mov.w	r0, #3
    edd4:	df02      	svc	2
}
    edd6:	bd38      	pop	{r3, r4, r5, pc}
    edd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    eddc:	301c      	adds	r0, #28
    edde:	f7ff bf5b 	b.w	ec98 <disabled_cb>
    ede2:	bf00      	nop
    ede4:	20000618 	.word	0x20000618
    ede8:	00025454 	.word	0x00025454
    edec:	000254e8 	.word	0x000254e8
    edf0:	000250f0 	.word	0x000250f0
    edf4:	0000ec99 	.word	0x0000ec99
    edf8:	000253cc 	.word	0x000253cc

0000edfc <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    edfc:	b900      	cbnz	r0, ee00 <ticker_update_op_cb+0x4>
    edfe:	4770      	bx	lr
{
    ee00:	b510      	push	{r4, lr}
    ee02:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ee04:	f7ff fafc 	bl	e400 <ull_disable_mark_get>
    ee08:	4284      	cmp	r4, r0
    ee0a:	d00c      	beq.n	ee26 <ticker_update_op_cb+0x2a>
    ee0c:	4a06      	ldr	r2, [pc, #24]	; (ee28 <ticker_update_op_cb+0x2c>)
    ee0e:	4907      	ldr	r1, [pc, #28]	; (ee2c <ticker_update_op_cb+0x30>)
    ee10:	4807      	ldr	r0, [pc, #28]	; (ee30 <ticker_update_op_cb+0x34>)
    ee12:	f640 03bf 	movw	r3, #2239	; 0x8bf
    ee16:	f010 fc82 	bl	1f71e <printk>
    ee1a:	4040      	eors	r0, r0
    ee1c:	f380 8811 	msr	BASEPRI, r0
    ee20:	f04f 0003 	mov.w	r0, #3
    ee24:	df02      	svc	2
}
    ee26:	bd10      	pop	{r4, pc}
    ee28:	00025454 	.word	0x00025454
    ee2c:	000254fc 	.word	0x000254fc
    ee30:	000250f0 	.word	0x000250f0

0000ee34 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    ee34:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee36:	4b13      	ldr	r3, [pc, #76]	; (ee84 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ee38:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ee3a:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee3e:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
    ee42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ee46:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    ee4a:	f022 0202 	bic.w	r2, r2, #2
    ee4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    ee50:	f042 020e 	orr.w	r2, r2, #14
    ee54:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    ee56:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    ee58:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee5a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee5e:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ee62:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ee66:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
    ee6a:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    ee6c:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ee6e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    ee72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ee76:	2204      	movs	r2, #4
    ee78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    ee7a:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    ee7c:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    ee7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ee82:	bf00      	nop
    ee84:	20004b7c 	.word	0x20004b7c

0000ee88 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    ee88:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    ee8a:	4c1b      	ldr	r4, [pc, #108]	; (eef8 <conn_release.constprop.0+0x70>)
    ee8c:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    ee8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ee90:	b163      	cbz	r3, eeac <conn_release.constprop.0+0x24>
    ee92:	4a1a      	ldr	r2, [pc, #104]	; (eefc <conn_release.constprop.0+0x74>)
    ee94:	491a      	ldr	r1, [pc, #104]	; (ef00 <conn_release.constprop.0+0x78>)
    ee96:	481b      	ldr	r0, [pc, #108]	; (ef04 <conn_release.constprop.0+0x7c>)
    ee98:	f640 1348 	movw	r3, #2376	; 0x948
    ee9c:	f010 fc3f 	bl	1f71e <printk>
    eea0:	4040      	eors	r0, r0
    eea2:	f380 8811 	msr	BASEPRI, r0
    eea6:	f04f 0003 	mov.w	r0, #3
    eeaa:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    eeac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    eeb0:	f105 0048 	add.w	r0, r5, #72	; 0x48
    eeb4:	f7fb fba8 	bl	a608 <memq_deinit>
	LL_ASSERT(link);
    eeb8:	4606      	mov	r6, r0
    eeba:	b170      	cbz	r0, eeda <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    eebc:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    eebe:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    eec0:	f001 fbd6 	bl	10670 <ll_conn_release>
	adv->lll.conn = NULL;
    eec4:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    eec6:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    eec8:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    eeca:	f7ff f9dd 	bl	e288 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    eece:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    eed0:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    eed2:	f7ff f9cd 	bl	e270 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    eed6:	6625      	str	r5, [r4, #96]	; 0x60
}
    eed8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    eeda:	4a08      	ldr	r2, [pc, #32]	; (eefc <conn_release.constprop.0+0x74>)
    eedc:	490a      	ldr	r1, [pc, #40]	; (ef08 <conn_release.constprop.0+0x80>)
    eede:	4809      	ldr	r0, [pc, #36]	; (ef04 <conn_release.constprop.0+0x7c>)
    eee0:	f640 134a 	movw	r3, #2378	; 0x94a
    eee4:	f010 fc1b 	bl	1f71e <printk>
    eee8:	4040      	eors	r0, r0
    eeea:	f380 8811 	msr	BASEPRI, r0
    eeee:	f04f 0003 	mov.w	r0, #3
    eef2:	df02      	svc	2
    eef4:	e7e2      	b.n	eebc <conn_release.constprop.0+0x34>
    eef6:	bf00      	nop
    eef8:	20004b7c 	.word	0x20004b7c
    eefc:	00025454 	.word	0x00025454
    ef00:	0002552c 	.word	0x0002552c
    ef04:	000250f0 	.word	0x000250f0
    ef08:	00025658 	.word	0x00025658

0000ef0c <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    ef0c:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    ef0e:	4c50      	ldr	r4, [pc, #320]	; (f050 <disable.part.0+0x144>)
static inline uint8_t disable(uint8_t handle)
    ef10:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    ef12:	4620      	mov	r0, r4
    ef14:	f7ff fa5e 	bl	e3d4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    ef18:	4284      	cmp	r4, r0
    ef1a:	d00c      	beq.n	ef36 <disable.part.0+0x2a>
    ef1c:	4a4d      	ldr	r2, [pc, #308]	; (f054 <disable.part.0+0x148>)
    ef1e:	494e      	ldr	r1, [pc, #312]	; (f058 <disable.part.0+0x14c>)
    ef20:	484e      	ldr	r0, [pc, #312]	; (f05c <disable.part.0+0x150>)
    ef22:	f640 13ff 	movw	r3, #2559	; 0x9ff
    ef26:	f010 fbfa 	bl	1f71e <printk>
    ef2a:	4040      	eors	r0, r0
    ef2c:	f380 8811 	msr	BASEPRI, r0
    ef30:	f04f 0003 	mov.w	r0, #3
    ef34:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    ef36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ef3a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    ef3c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    ef3e:	d50d      	bpl.n	ef5c <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    ef40:	2102      	movs	r1, #2
    ef42:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    ef44:	4b46      	ldr	r3, [pc, #280]	; (f060 <disable.part.0+0x154>)
    ef46:	9500      	str	r5, [sp, #0]
    ef48:	2103      	movs	r1, #3
    ef4a:	2201      	movs	r2, #1
    ef4c:	2000      	movs	r0, #0
    ef4e:	f7fc fe41 	bl	bbd4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    ef52:	4629      	mov	r1, r5
    ef54:	f7ff fa16 	bl	e384 <ull_ticker_status_take>
		if (ret) {
    ef58:	2800      	cmp	r0, #0
    ef5a:	d15e      	bne.n	f01a <disable.part.0+0x10e>
	ret_cb = TICKER_STATUS_BUSY;
    ef5c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ef5e:	2103      	movs	r1, #3
    ef60:	4b3f      	ldr	r3, [pc, #252]	; (f060 <disable.part.0+0x154>)
    ef62:	9500      	str	r5, [sp, #0]
    ef64:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    ef66:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ef68:	f7fc fe34 	bl	bbd4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    ef6c:	4629      	mov	r1, r5
    ef6e:	f7ff fa09 	bl	e384 <ull_ticker_status_take>
	if (ret) {
    ef72:	bb50      	cbnz	r0, efca <disable.part.0+0xbe>
	err = ull_disable(&adv->lll);
    ef74:	483b      	ldr	r0, [pc, #236]	; (f064 <disable.part.0+0x158>)
    ef76:	f7ff fa65 	bl	e444 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    ef7a:	b108      	cbz	r0, ef80 <disable.part.0+0x74>
    ef7c:	3078      	adds	r0, #120	; 0x78
    ef7e:	d139      	bne.n	eff4 <disable.part.0+0xe8>
	mark = ull_disable_unmark(adv);
    ef80:	4833      	ldr	r0, [pc, #204]	; (f050 <disable.part.0+0x144>)
    ef82:	f7ff fa31 	bl	e3e8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    ef86:	4284      	cmp	r4, r0
    ef88:	d00c      	beq.n	efa4 <disable.part.0+0x98>
    ef8a:	4a32      	ldr	r2, [pc, #200]	; (f054 <disable.part.0+0x148>)
    ef8c:	4932      	ldr	r1, [pc, #200]	; (f058 <disable.part.0+0x14c>)
    ef8e:	4833      	ldr	r0, [pc, #204]	; (f05c <disable.part.0+0x150>)
    ef90:	f640 2321 	movw	r3, #2593	; 0xa21
    ef94:	f010 fbc3 	bl	1f71e <printk>
    ef98:	4040      	eors	r0, r0
    ef9a:	f380 8811 	msr	BASEPRI, r0
    ef9e:	f04f 0003 	mov.w	r0, #3
    efa2:	df02      	svc	2
	if (adv->lll.conn) {
    efa4:	6a23      	ldr	r3, [r4, #32]
    efa6:	b10b      	cbz	r3, efac <disable.part.0+0xa0>
		conn_release(adv);
    efa8:	f7ff ff6e 	bl	ee88 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    efac:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    efb0:	f36f 0300 	bfc	r3, #0, #1
    efb4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    efb8:	2000      	movs	r0, #0
    efba:	f000 fc87 	bl	f8cc <ull_scan_is_enabled_get>
    efbe:	4604      	mov	r4, r0
    efc0:	2800      	cmp	r0, #0
    efc2:	d03f      	beq.n	f044 <disable.part.0+0x138>
	return 0;
    efc4:	2000      	movs	r0, #0
}
    efc6:	b005      	add	sp, #20
    efc8:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
    efca:	4821      	ldr	r0, [pc, #132]	; (f050 <disable.part.0+0x144>)
    efcc:	f7ff fa0c 	bl	e3e8 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    efd0:	4284      	cmp	r4, r0
    efd2:	d034      	beq.n	f03e <disable.part.0+0x132>
    efd4:	4a1f      	ldr	r2, [pc, #124]	; (f054 <disable.part.0+0x148>)
    efd6:	4920      	ldr	r1, [pc, #128]	; (f058 <disable.part.0+0x14c>)
    efd8:	4820      	ldr	r0, [pc, #128]	; (f05c <disable.part.0+0x150>)
    efda:	f640 2318 	movw	r3, #2584	; 0xa18
    efde:	f010 fb9e 	bl	1f71e <printk>
    efe2:	4040      	eors	r0, r0
    efe4:	f380 8811 	msr	BASEPRI, r0
    efe8:	f04f 0003 	mov.w	r0, #3
    efec:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    efee:	200c      	movs	r0, #12
}
    eff0:	b005      	add	sp, #20
    eff2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
    eff4:	4a17      	ldr	r2, [pc, #92]	; (f054 <disable.part.0+0x148>)
    eff6:	491c      	ldr	r1, [pc, #112]	; (f068 <disable.part.0+0x15c>)
    eff8:	4818      	ldr	r0, [pc, #96]	; (f05c <disable.part.0+0x150>)
    effa:	f640 231e 	movw	r3, #2590	; 0xa1e
    effe:	f010 fb8e 	bl	1f71e <printk>
    f002:	4040      	eors	r0, r0
    f004:	f380 8811 	msr	BASEPRI, r0
    f008:	f04f 0003 	mov.w	r0, #3
    f00c:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    f00e:	4810      	ldr	r0, [pc, #64]	; (f050 <disable.part.0+0x144>)
    f010:	f7ff f9ea 	bl	e3e8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    f014:	4284      	cmp	r4, r0
    f016:	d1b8      	bne.n	ef8a <disable.part.0+0x7e>
    f018:	e7c4      	b.n	efa4 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
    f01a:	480d      	ldr	r0, [pc, #52]	; (f050 <disable.part.0+0x144>)
    f01c:	f7ff f9e4 	bl	e3e8 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    f020:	4284      	cmp	r4, r0
    f022:	d00c      	beq.n	f03e <disable.part.0+0x132>
    f024:	4a0b      	ldr	r2, [pc, #44]	; (f054 <disable.part.0+0x148>)
    f026:	490c      	ldr	r1, [pc, #48]	; (f058 <disable.part.0+0x14c>)
    f028:	480c      	ldr	r0, [pc, #48]	; (f05c <disable.part.0+0x150>)
    f02a:	f640 230a 	movw	r3, #2570	; 0xa0a
    f02e:	f010 fb76 	bl	1f71e <printk>
    f032:	4040      	eors	r0, r0
    f034:	f380 8811 	msr	BASEPRI, r0
    f038:	f04f 0003 	mov.w	r0, #3
    f03c:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    f03e:	200c      	movs	r0, #12
}
    f040:	b005      	add	sp, #20
    f042:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
    f044:	f006 fe56 	bl	15cf4 <ull_filter_adv_scan_state_cb>
	return 0;
    f048:	4620      	mov	r0, r4
}
    f04a:	b005      	add	sp, #20
    f04c:	bd30      	pop	{r4, r5, pc}
    f04e:	bf00      	nop
    f050:	20004b7c 	.word	0x20004b7c
    f054:	00025454 	.word	0x00025454
    f058:	00025540 	.word	0x00025540
    f05c:	000250f0 	.word	0x000250f0
    f060:	0000d8ad 	.word	0x0000d8ad
    f064:	20004b98 	.word	0x20004b98
    f068:	0002554c 	.word	0x0002554c

0000f06c <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    f06c:	7803      	ldrb	r3, [r0, #0]
    f06e:	f003 030f 	and.w	r3, r3, #15
    f072:	2b02      	cmp	r3, #2
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    f074:	4684      	mov	ip, r0
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    f076:	d026      	beq.n	f0c6 <adv_time_get.constprop.0.isra.0+0x5a>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    f078:	2b01      	cmp	r3, #1
    f07a:	d00d      	beq.n	f098 <adv_time_get.constprop.0.isra.0+0x2c>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    f07c:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    f07e:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    f080:	b19b      	cbz	r3, f0aa <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    f082:	2b06      	cmp	r3, #6
    f084:	d011      	beq.n	f0aa <adv_time_get.constprop.0.isra.0+0x3e>
    f086:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    f08a:	3a01      	subs	r2, #1
    f08c:	f44f 702a 	mov.w	r0, #680	; 0x2a8
			time_us += (BYTES2US(adv_size, PHY_1M) +
    f090:	fb02 0003 	mla	r0, r2, r3, r0
    f094:	b280      	uxth	r0, r0
}
    f096:	4770      	bx	lr
			time_us += (BYTES2US(adv_size, PHY_1M) +
    f098:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    f09c:	3a01      	subs	r2, #1
    f09e:	f44f 6087 	mov.w	r0, #1080	; 0x438
			time_us += (BYTES2US(adv_size, PHY_1M) +
    f0a2:	fb02 0003 	mla	r0, r2, r3, r0
    f0a6:	b280      	uxth	r0, r0
}
    f0a8:	4770      	bx	lr
				adv_size += pdu->len;
    f0aa:	f89c 0001 	ldrb.w	r0, [ip, #1]
    f0ae:	3010      	adds	r0, #16
				time_us += scan_req_us + EVENT_IFS_MAX_US +
    f0b0:	f501 715c 	add.w	r1, r1, #880	; 0x370
			time_us += (BYTES2US(adv_size, PHY_1M) +
    f0b4:	00c0      	lsls	r0, r0, #3
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    f0b6:	f500 73b3 	add.w	r3, r0, #358	; 0x166
    f0ba:	3a01      	subs	r2, #1
    f0bc:	4408      	add	r0, r1
			time_us += (BYTES2US(adv_size, PHY_1M) +
    f0be:	fb02 0003 	mla	r0, r2, r3, r0
    f0c2:	b280      	uxth	r0, r0
}
    f0c4:	4770      	bx	lr
				   rxtx_turn_us * (adv_chn_cnt - 1);
    f0c6:	1e53      	subs	r3, r2, #1
			adv_size += pdu->len;
    f0c8:	7840      	ldrb	r0, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    f0ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f0ce:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    f0d2:	3010      	adds	r0, #16
    f0d4:	005b      	lsls	r3, r3, #1
    f0d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
    f0da:	00c0      	lsls	r0, r0, #3
    f0dc:	fb00 3002 	mla	r0, r0, r2, r3
    f0e0:	b280      	uxth	r0, r0
    f0e2:	4770      	bx	lr

0000f0e4 <ticker_cb>:
{
    f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0e8:	461d      	mov	r5, r3
    f0ea:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    f0ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0f0:	429d      	cmp	r5, r3
{
    f0f2:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    f0f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    f0f8:	d018      	beq.n	f12c <ticker_cb+0x48>
	return ++hdr->ref;
    f0fa:	7823      	ldrb	r3, [r4, #0]
    f0fc:	3301      	adds	r3, #1
    f0fe:	b2db      	uxtb	r3, r3
    f100:	4607      	mov	r7, r0
    f102:	4616      	mov	r6, r2
    f104:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    f106:	2b00      	cmp	r3, #0
    f108:	d061      	beq.n	f1ce <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
    f10a:	4938      	ldr	r1, [pc, #224]	; (f1ec <ticker_cb+0x108>)
		mfy.param = &p;
    f10c:	4b38      	ldr	r3, [pc, #224]	; (f1f0 <ticker_cb+0x10c>)
		p.lazy = lazy;
    f10e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    f110:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f114:	2200      	movs	r2, #0
		p.param = lll;
    f116:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    f118:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    f11c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    f120:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f122:	2001      	movs	r0, #1
    f124:	4611      	mov	r1, r2
    f126:	f7fb faed 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f12a:	b938      	cbnz	r0, f13c <ticker_cb+0x58>
	if (!lll->is_hdcd)
    f12c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    f130:	f010 0501 	ands.w	r5, r0, #1
    f134:	d014      	beq.n	f160 <ticker_cb+0x7c>
}
    f136:	b00a      	add	sp, #40	; 0x28
    f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    f13c:	4a2d      	ldr	r2, [pc, #180]	; (f1f4 <ticker_cb+0x110>)
    f13e:	492e      	ldr	r1, [pc, #184]	; (f1f8 <ticker_cb+0x114>)
    f140:	482e      	ldr	r0, [pc, #184]	; (f1fc <ticker_cb+0x118>)
    f142:	f640 0392 	movw	r3, #2194	; 0x892
    f146:	f010 faea 	bl	1f71e <printk>
    f14a:	4040      	eors	r0, r0
    f14c:	f380 8811 	msr	BASEPRI, r0
    f150:	f04f 0003 	mov.w	r0, #3
    f154:	df02      	svc	2
	if (!lll->is_hdcd)
    f156:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    f15a:	f010 0501 	ands.w	r5, r0, #1
    f15e:	d1ea      	bne.n	f136 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    f160:	2104      	movs	r1, #4
    f162:	a809      	add	r0, sp, #36	; 0x24
    f164:	f007 fcd8 	bl	16b18 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    f168:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f16a:	4a25      	ldr	r2, [pc, #148]	; (f200 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f16c:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    f16e:	fba2 1203 	umull	r1, r2, r2, r3
    f172:	1a99      	subs	r1, r3, r2
    f174:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    f178:	0a12      	lsrs	r2, r2, #8
    f17a:	f240 1147 	movw	r1, #327	; 0x147
    f17e:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f182:	4a20      	ldr	r2, [pc, #128]	; (f204 <ticker_cb+0x120>)
    f184:	4920      	ldr	r1, [pc, #128]	; (f208 <ticker_cb+0x124>)
    f186:	1aa2      	subs	r2, r4, r2
    f188:	fba1 1202 	umull	r1, r2, r1, r2
    f18c:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f18e:	491f      	ldr	r1, [pc, #124]	; (f20c <ticker_cb+0x128>)
    f190:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    f192:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f194:	e9cd 5104 	strd	r5, r1, [sp, #16]
    f198:	e9cd 5502 	strd	r5, r5, [sp, #8]
    f19c:	e9cd 5500 	strd	r5, r5, [sp]
    f1a0:	b2d2      	uxtb	r2, r2
    f1a2:	2101      	movs	r1, #1
    f1a4:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    f1a6:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f1a8:	f7fc fcfc 	bl	bba4 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f1ac:	f030 0302 	bics.w	r3, r0, #2
    f1b0:	d0c1      	beq.n	f136 <ticker_cb+0x52>
    f1b2:	4a10      	ldr	r2, [pc, #64]	; (f1f4 <ticker_cb+0x110>)
    f1b4:	4916      	ldr	r1, [pc, #88]	; (f210 <ticker_cb+0x12c>)
    f1b6:	4811      	ldr	r0, [pc, #68]	; (f1fc <ticker_cb+0x118>)
    f1b8:	f240 732c 	movw	r3, #1836	; 0x72c
    f1bc:	f010 faaf 	bl	1f71e <printk>
    f1c0:	4040      	eors	r0, r0
    f1c2:	f380 8811 	msr	BASEPRI, r0
    f1c6:	f04f 0003 	mov.w	r0, #3
    f1ca:	df02      	svc	2
}
    f1cc:	e7b3      	b.n	f136 <ticker_cb+0x52>
		LL_ASSERT(ref);
    f1ce:	4a09      	ldr	r2, [pc, #36]	; (f1f4 <ticker_cb+0x110>)
    f1d0:	4910      	ldr	r1, [pc, #64]	; (f214 <ticker_cb+0x130>)
    f1d2:	480a      	ldr	r0, [pc, #40]	; (f1fc <ticker_cb+0x118>)
    f1d4:	f640 0385 	movw	r3, #2181	; 0x885
    f1d8:	f010 faa1 	bl	1f71e <printk>
    f1dc:	4040      	eors	r0, r0
    f1de:	f380 8811 	msr	BASEPRI, r0
    f1e2:	f04f 0003 	mov.w	r0, #3
    f1e6:	df02      	svc	2
    f1e8:	e78f      	b.n	f10a <ticker_cb+0x26>
    f1ea:	bf00      	nop
    f1ec:	20004bfc 	.word	0x20004bfc
    f1f0:	20000608 	.word	0x20000608
    f1f4:	00025454 	.word	0x00025454
    f1f8:	000253cc 	.word	0x000253cc
    f1fc:	000250f0 	.word	0x000250f0
    f200:	90d4f121 	.word	0x90d4f121
    f204:	20004b7c 	.word	0x20004b7c
    f208:	8d3dcb09 	.word	0x8d3dcb09
    f20c:	0000edfd 	.word	0x0000edfd
    f210:	000254a0 	.word	0x000254a0
    f214:	00025564 	.word	0x00025564

0000f218 <ll_adv_params_set>:
{
    f218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    f21c:	4c6f      	ldr	r4, [pc, #444]	; (f3dc <ll_adv_params_set+0x1c4>)
{
    f21e:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f220:	4b6f      	ldr	r3, [pc, #444]	; (f3e0 <ll_adv_params_set+0x1c8>)
	if (!adv || adv->is_enabled) {
    f222:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    f226:	4680      	mov	r8, r0
    f228:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f22a:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    f22e:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    f230:	f016 0601 	ands.w	r6, r6, #1
{
    f234:	4615      	mov	r5, r2
    f236:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    f23a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f23e:	9000      	str	r0, [sp, #0]
    f240:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    f244:	f040 808b 	bne.w	f35e <ll_adv_params_set+0x146>
	adv->lll.chan_map = chan_map;
    f248:	f00c 0c07 	and.w	ip, ip, #7
    f24c:	f002 0203 	and.w	r2, r2, #3
    f250:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    f254:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    f258:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    f25c:	f1be 0f01 	cmp.w	lr, #1
    f260:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    f264:	bf08      	it	eq
    f266:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
    f26a:	f10e 0308 	add.w	r3, lr, #8
    f26e:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
    f272:	eb0d 0e03 	add.w	lr, sp, r3
    f276:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    f27a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    f27c:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
    f280:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    f284:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f288:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
    f28c:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    f290:	f029 011f 	bic.w	r1, r9, #31
    f294:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
    f298:	ea4c 0c02 	orr.w	ip, ip, r2
    f29c:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f2a0:	bf0c      	ite	eq
    f2a2:	2201      	moveq	r2, #1
    f2a4:	2200      	movne	r2, #0
    f2a6:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
    f2aa:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    f2ae:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    f2b2:	f003 030f 	and.w	r3, r3, #15
    f2b6:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    f2b8:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    f2bc:	d046      	beq.n	f34c <ll_adv_params_set+0x134>
	adv->own_addr_type = own_addr_type;
    f2be:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    f2c2:	f365 0342 	bfi	r3, r5, #1, #2
    f2c6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    f2ca:	b2da      	uxtb	r2, r3
    f2cc:	075b      	lsls	r3, r3, #29
    f2ce:	d508      	bpl.n	f2e2 <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
    f2d0:	f367 02c3 	bfi	r2, r7, #3, #1
    f2d4:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    f2d8:	4842      	ldr	r0, [pc, #264]	; (f3e4 <ll_adv_params_set+0x1cc>)
    f2da:	990a      	ldr	r1, [sp, #40]	; 0x28
    f2dc:	2206      	movs	r2, #6
    f2de:	f011 fa23 	bl	20728 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    f2e2:	f898 3000 	ldrb.w	r3, [r8]
    f2e6:	f003 020f 	and.w	r2, r3, #15
    f2ea:	2a01      	cmp	r2, #1
    f2ec:	d03c      	beq.n	f368 <ll_adv_params_set+0x150>
	} else if (pdu->len == 0) {
    f2ee:	f898 2001 	ldrb.w	r2, [r8, #1]
    f2f2:	b1fa      	cbz	r2, f334 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    f2f4:	f1b9 0f01 	cmp.w	r9, #1
    f2f8:	d053      	beq.n	f3a2 <ll_adv_params_set+0x18a>
		pdu->tx_addr = own_addr_type & 0x1;
    f2fa:	f898 3000 	ldrb.w	r3, [r8]
    f2fe:	f005 0501 	and.w	r5, r5, #1
    f302:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    f306:	f36f 13c7 	bfc	r3, #7, #1
    f30a:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    f30e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
    f312:	61e4      	str	r4, [r4, #28]
    f314:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f318:	01ad      	lsls	r5, r5, #6
    f31a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    f31c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f31e:	f045 0504 	orr.w	r5, r5, #4
    f322:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    f324:	b912      	cbnz	r2, f32c <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
    f326:	2106      	movs	r1, #6
    f328:	7059      	strb	r1, [r3, #1]
	return 0;
    f32a:	4616      	mov	r6, r2
}
    f32c:	4630      	mov	r0, r6
    f32e:	b003      	add	sp, #12
    f330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    f334:	f005 0501 	and.w	r5, r5, #1
    f338:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    f33c:	f362 13c7 	bfi	r3, r2, #7, #1
    f340:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    f344:	2306      	movs	r3, #6
    f346:	f888 3001 	strb.w	r3, [r8, #1]
    f34a:	e7e0      	b.n	f30e <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    f34c:	f1b9 0f01 	cmp.w	r9, #1
    f350:	d0b5      	beq.n	f2be <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
    f352:	f898 2001 	ldrb.w	r2, [r8, #1]
    f356:	b9c2      	cbnz	r2, f38a <ll_adv_params_set+0x172>
			adv->ad_data_backup.len = 0U;
    f358:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    f35c:	e7af      	b.n	f2be <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f35e:	260c      	movs	r6, #12
}
    f360:	4630      	mov	r0, r6
    f362:	b003      	add	sp, #12
    f364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    f368:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
    f36c:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
    f36e:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    f372:	f367 13c7 	bfi	r3, r7, #7, #1
    f376:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    f37a:	990a      	ldr	r1, [sp, #40]	; 0x28
    f37c:	2206      	movs	r2, #6
    f37e:	f011 f9d3 	bl	20728 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    f382:	230c      	movs	r3, #12
    f384:	f888 3001 	strb.w	r3, [r8, #1]
    f388:	e7c1      	b.n	f30e <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
    f38a:	2a05      	cmp	r2, #5
    f38c:	d916      	bls.n	f3bc <ll_adv_params_set+0x1a4>
			adv->ad_data_backup.len = pdu->len -
    f38e:	3a06      	subs	r2, #6
    f390:	b2d2      	uxtb	r2, r2
    f392:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    f396:	f108 0108 	add.w	r1, r8, #8
    f39a:	4813      	ldr	r0, [pc, #76]	; (f3e8 <ll_adv_params_set+0x1d0>)
    f39c:	f011 f9c4 	bl	20728 <memcpy>
    f3a0:	e78d      	b.n	f2be <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    f3a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    f3a6:	4910      	ldr	r1, [pc, #64]	; (f3e8 <ll_adv_params_set+0x1d0>)
    f3a8:	f108 0008 	add.w	r0, r8, #8
    f3ac:	f011 f9bc 	bl	20728 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    f3b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f3b4:	3306      	adds	r3, #6
    f3b6:	f888 3001 	strb.w	r3, [r8, #1]
    f3ba:	e79e      	b.n	f2fa <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
    f3bc:	4a0b      	ldr	r2, [pc, #44]	; (f3ec <ll_adv_params_set+0x1d4>)
    f3be:	490c      	ldr	r1, [pc, #48]	; (f3f0 <ll_adv_params_set+0x1d8>)
    f3c0:	480c      	ldr	r0, [pc, #48]	; (f3f4 <ll_adv_params_set+0x1dc>)
    f3c2:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    f3c6:	f010 f9aa 	bl	1f71e <printk>
    f3ca:	4040      	eors	r0, r0
    f3cc:	f380 8811 	msr	BASEPRI, r0
    f3d0:	f04f 0003 	mov.w	r0, #3
    f3d4:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    f3d6:	f898 2001 	ldrb.w	r2, [r8, #1]
    f3da:	e7d8      	b.n	f38e <ll_adv_params_set+0x176>
    f3dc:	20004b7c 	.word	0x20004b7c
    f3e0:	00024bc8 	.word	0x00024bc8
    f3e4:	20004be7 	.word	0x20004be7
    f3e8:	20004bbd 	.word	0x20004bbd
    f3ec:	00025454 	.word	0x00025454
    f3f0:	00025568 	.word	0x00025568
    f3f4:	000250f0 	.word	0x000250f0

0000f3f8 <ull_adv_init>:
{
    f3f8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    f3fa:	4c06      	ldr	r4, [pc, #24]	; (f414 <ull_adv_init+0x1c>)
    f3fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f400:	f007 ffc8 	bl	17394 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    f404:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f408:	f007 ffc4 	bl	17394 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    f40c:	f7ff fd12 	bl	ee34 <init_set.constprop.0>
}
    f410:	2000      	movs	r0, #0
    f412:	bd10      	pop	{r4, pc}
    f414:	20004b7c 	.word	0x20004b7c

0000f418 <ull_adv_reset>:
{
    f418:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
    f41a:	4b0b      	ldr	r3, [pc, #44]	; (f448 <ull_adv_reset+0x30>)
    f41c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    f420:	07d2      	lsls	r2, r2, #31
    f422:	d50e      	bpl.n	f442 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
    f424:	6a1a      	ldr	r2, [r3, #32]
    f426:	b152      	cbz	r2, f43e <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
    f428:	f892 1020 	ldrb.w	r1, [r2, #32]
    f42c:	f041 0102 	orr.w	r1, r1, #2
    f430:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    f434:	6a1b      	ldr	r3, [r3, #32]
    f436:	f893 3020 	ldrb.w	r3, [r3, #32]
    f43a:	07db      	lsls	r3, r3, #31
    f43c:	d401      	bmi.n	f442 <ull_adv_reset+0x2a>
    f43e:	f7ff fd65 	bl	ef0c <disable.part.0>
}
    f442:	2000      	movs	r0, #0
    f444:	bd08      	pop	{r3, pc}
    f446:	bf00      	nop
    f448:	20004b7c 	.word	0x20004b7c

0000f44c <ull_adv_reset_finalize>:
{
    f44c:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    f44e:	4c0a      	ldr	r4, [pc, #40]	; (f478 <ull_adv_reset_finalize+0x2c>)
    f450:	f104 0528 	add.w	r5, r4, #40	; 0x28
    f454:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    f456:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
    f458:	f007 ffac 	bl	173b4 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    f45c:	4620      	mov	r0, r4
    f45e:	f007 ffa9 	bl	173b4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    f462:	4628      	mov	r0, r5
    f464:	f007 ff96 	bl	17394 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    f468:	4620      	mov	r0, r4
    f46a:	f007 ff93 	bl	17394 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    f46e:	f7ff fce1 	bl	ee34 <init_set.constprop.0>
}
    f472:	2000      	movs	r0, #0
    f474:	bd38      	pop	{r3, r4, r5, pc}
    f476:	bf00      	nop
    f478:	20004b7c 	.word	0x20004b7c

0000f47c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f47c:	4a03      	ldr	r2, [pc, #12]	; (f48c <ull_adv_handle_get+0x10>)
    f47e:	4b04      	ldr	r3, [pc, #16]	; (f490 <ull_adv_handle_get+0x14>)
    f480:	1a80      	subs	r0, r0, r2
    f482:	fba3 3000 	umull	r3, r0, r3, r0
}
    f486:	f3c0 108f 	ubfx	r0, r0, #6, #16
    f48a:	4770      	bx	lr
    f48c:	20004b7c 	.word	0x20004b7c
    f490:	8d3dcb09 	.word	0x8d3dcb09

0000f494 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f494:	4a04      	ldr	r2, [pc, #16]	; (f4a8 <ull_adv_lll_handle_get+0x14>)
    f496:	6800      	ldr	r0, [r0, #0]
    f498:	4b04      	ldr	r3, [pc, #16]	; (f4ac <ull_adv_lll_handle_get+0x18>)
    f49a:	1a80      	subs	r0, r0, r2
    f49c:	fba3 3000 	umull	r3, r0, r3, r0
}
    f4a0:	f3c0 108f 	ubfx	r0, r0, #6, #16
    f4a4:	4770      	bx	lr
    f4a6:	bf00      	nop
    f4a8:	20004b7c 	.word	0x20004b7c
    f4ac:	8d3dcb09 	.word	0x8d3dcb09

0000f4b0 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f4b0:	b938      	cbnz	r0, f4c2 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    f4b2:	4805      	ldr	r0, [pc, #20]	; (f4c8 <ull_adv_is_enabled_get+0x18>)
    f4b4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
    f4b8:	f013 0f01 	tst.w	r3, #1
    f4bc:	bf08      	it	eq
    f4be:	2000      	moveq	r0, #0
    f4c0:	4770      	bx	lr
		return NULL;
    f4c2:	2000      	movs	r0, #0
}
    f4c4:	4770      	bx	lr
    f4c6:	bf00      	nop
    f4c8:	20004b7c 	.word	0x20004b7c

0000f4cc <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    f4cc:	b928      	cbnz	r0, f4da <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    f4ce:	4b04      	ldr	r3, [pc, #16]	; (f4e0 <ull_adv_is_enabled+0x14>)
    f4d0:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    f4d4:	f000 0001 	and.w	r0, r0, #1
    f4d8:	4770      	bx	lr
    f4da:	2000      	movs	r0, #0
}
    f4dc:	4770      	bx	lr
    f4de:	bf00      	nop
    f4e0:	20004b7c 	.word	0x20004b7c

0000f4e4 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f4e4:	b950      	cbnz	r0, f4fc <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    f4e6:	4b06      	ldr	r3, [pc, #24]	; (f500 <ull_adv_filter_pol_get+0x1c>)
    f4e8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    f4ec:	f010 0001 	ands.w	r0, r0, #1
    f4f0:	d005      	beq.n	f4fe <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    f4f2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    f4f6:	f000 0003 	and.w	r0, r0, #3
    f4fa:	4770      	bx	lr
		return 0;
    f4fc:	2000      	movs	r0, #0
}
    f4fe:	4770      	bx	lr
    f500:	20004b7c 	.word	0x20004b7c

0000f504 <ull_adv_pdu_update_addrs>:
{
    f504:	b570      	push	{r4, r5, r6, lr}
    f506:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    f508:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
    f50c:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    f50e:	f006 fd61 	bl	15fd4 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
    f512:	b310      	cbz	r0, f55a <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
    f514:	7823      	ldrb	r3, [r4, #0]
    f516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f51a:	4601      	mov	r1, r0
    f51c:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
    f51e:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    f520:	2206      	movs	r2, #6
    f522:	4630      	mov	r0, r6
    f524:	f011 f900 	bl	20728 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    f528:	7823      	ldrb	r3, [r4, #0]
    f52a:	f003 030f 	and.w	r3, r3, #15
    f52e:	2b01      	cmp	r3, #1
    f530:	d001      	beq.n	f536 <ull_adv_pdu_update_addrs+0x32>
}
    f532:	4630      	mov	r0, r6
    f534:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
    f536:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
    f53a:	f006 fd79 	bl	16030 <ull_filter_tgta_get>
	if (rx_addr) {
    f53e:	4601      	mov	r1, r0
    f540:	2800      	cmp	r0, #0
    f542:	d0f6      	beq.n	f532 <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
    f544:	7823      	ldrb	r3, [r4, #0]
    f546:	4620      	mov	r0, r4
    f548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f54c:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
    f550:	2206      	movs	r2, #6
    f552:	f011 f8e9 	bl	20728 <memcpy>
}
    f556:	4630      	mov	r0, r6
    f558:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
    f55a:	7820      	ldrb	r0, [r4, #0]
    f55c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f560:	f7fc fc00 	bl	bd64 <ll_addr_get>
    f564:	4601      	mov	r1, r0
	if (rpa) {
    f566:	e7da      	b.n	f51e <ull_adv_pdu_update_addrs+0x1a>

0000f568 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    f568:	291f      	cmp	r1, #31
    f56a:	d849      	bhi.n	f600 <ull_adv_data_set+0x98>
{
    f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    f56e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    f572:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    f576:	b083      	sub	sp, #12
    f578:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    f57a:	7833      	ldrb	r3, [r6, #0]
    f57c:	f003 030f 	and.w	r3, r3, #15
    f580:	2b01      	cmp	r3, #1
    f582:	460d      	mov	r5, r1
    f584:	4604      	mov	r4, r0
    f586:	4617      	mov	r7, r2
    f588:	d03c      	beq.n	f604 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    f58a:	f10d 0107 	add.w	r1, sp, #7
    f58e:	3028      	adds	r0, #40	; 0x28
    f590:	f007 ff90 	bl	174b4 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    f594:	4631      	mov	r1, r6
    f596:	4606      	mov	r6, r0
    f598:	f811 2b02 	ldrb.w	r2, [r1], #2
    f59c:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    f5a0:	f3c2 0303 	ubfx	r3, r2, #0, #4
    f5a4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    f5a8:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    f5ac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    f5b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
    f5b4:	4630      	mov	r0, r6
    f5b6:	4313      	orrs	r3, r2
    f5b8:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    f5bc:	2206      	movs	r2, #6
    f5be:	f011 f8b3 	bl	20728 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    f5c2:	462a      	mov	r2, r5
    f5c4:	4639      	mov	r1, r7
    f5c6:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    f5ca:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    f5cc:	f011 f8ac 	bl	20728 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    f5d0:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
    f5d2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    f5d6:	07db      	lsls	r3, r3, #31
    f5d8:	d406      	bmi.n	f5e8 <ull_adv_data_set+0x80>
	pdu->last = idx;
    f5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5de:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
    f5e2:	2000      	movs	r0, #0
}
    f5e4:	b003      	add	sp, #12
    f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    f5e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    f5ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    f5f0:	4631      	mov	r1, r6
    f5f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f5f4:	4620      	mov	r0, r4
    f5f6:	f7f1 ff57 	bl	14a8 <ull_adv_time_update>
		if (err) {
    f5fa:	2800      	cmp	r0, #0
    f5fc:	d0ed      	beq.n	f5da <ull_adv_data_set+0x72>
    f5fe:	e7f1      	b.n	f5e4 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    f600:	2012      	movs	r0, #18
}
    f602:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    f604:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    f608:	460a      	mov	r2, r1
    f60a:	3041      	adds	r0, #65	; 0x41
    f60c:	4639      	mov	r1, r7
    f60e:	f011 f88b 	bl	20728 <memcpy>
		return 0;
    f612:	2000      	movs	r0, #0
}
    f614:	b003      	add	sp, #12
    f616:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f618 <ll_adv_data_set>:
{
    f618:	4603      	mov	r3, r0
    f61a:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    f61c:	4801      	ldr	r0, [pc, #4]	; (f624 <ll_adv_data_set+0xc>)
    f61e:	4619      	mov	r1, r3
    f620:	f7ff bfa2 	b.w	f568 <ull_adv_data_set>
    f624:	20004b7c 	.word	0x20004b7c

0000f628 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
    f628:	b5f0      	push	{r4, r5, r6, r7, lr}
    f62a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    f62e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    f632:	b083      	sub	sp, #12
    f634:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    f636:	460e      	mov	r6, r1
    f638:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    f63a:	f10d 0107 	add.w	r1, sp, #7
    f63e:	3034      	adds	r0, #52	; 0x34
    f640:	4617      	mov	r7, r2
    f642:	f007 ff37 	bl	174b4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    f646:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    f648:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    f64a:	f811 3b02 	ldrb.w	r3, [r1], #2
    f64e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f652:	019b      	lsls	r3, r3, #6
    f654:	f043 0304 	orr.w	r3, r3, #4
    f658:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    f65a:	1db3      	adds	r3, r6, #6
    f65c:	7043      	strb	r3, [r0, #1]
    f65e:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    f660:	3002      	adds	r0, #2
    f662:	f011 f861 	bl	20728 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    f666:	4632      	mov	r2, r6
    f668:	4639      	mov	r1, r7
    f66a:	f105 0008 	add.w	r0, r5, #8
    f66e:	f011 f85b 	bl	20728 <memcpy>
	if (adv->is_enabled) {
    f672:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    f676:	07db      	lsls	r3, r3, #31
    f678:	d50a      	bpl.n	f690 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    f67a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    f67e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    f684:	780b      	ldrb	r3, [r1, #0]
    f686:	f013 030f 	ands.w	r3, r3, #15
    f68a:	d008      	beq.n	f69e <ull_scan_rsp_set.part.0+0x76>
    f68c:	2b06      	cmp	r3, #6
    f68e:	d006      	beq.n	f69e <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
    f690:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    f698:	2000      	movs	r0, #0
}
    f69a:	b003      	add	sp, #12
    f69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    f69e:	462a      	mov	r2, r5
    f6a0:	4620      	mov	r0, r4
    f6a2:	f7f1 ff01 	bl	14a8 <ull_adv_time_update>
			if (err) {
    f6a6:	2800      	cmp	r0, #0
    f6a8:	d0f2      	beq.n	f690 <ull_scan_rsp_set.part.0+0x68>
    f6aa:	e7f6      	b.n	f69a <ull_scan_rsp_set.part.0+0x72>

0000f6ac <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    f6ac:	281f      	cmp	r0, #31
{
    f6ae:	4603      	mov	r3, r0
    f6b0:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
    f6b2:	d803      	bhi.n	f6bc <ll_adv_scan_rsp_set+0x10>
    f6b4:	4802      	ldr	r0, [pc, #8]	; (f6c0 <ll_adv_scan_rsp_set+0x14>)
    f6b6:	4619      	mov	r1, r3
    f6b8:	f7ff bfb6 	b.w	f628 <ull_scan_rsp_set.part.0>
}
    f6bc:	2012      	movs	r0, #18
    f6be:	4770      	bx	lr
    f6c0:	20004b7c 	.word	0x20004b7c

0000f6c4 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
    f6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f6c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f6ca:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    f6ce:	4625      	mov	r5, r4
{
    f6d0:	4680      	mov	r8, r0
    f6d2:	f815 1b1c 	ldrb.w	r1, [r5], #28
    f6d6:	3101      	adds	r1, #1
    f6d8:	b2c9      	uxtb	r1, r1
    f6da:	4617      	mov	r7, r2
    f6dc:	461e      	mov	r6, r3
    f6de:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    f6e0:	b181      	cbz	r1, f704 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    f6e2:	4c17      	ldr	r4, [pc, #92]	; (f740 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    f6e4:	4b17      	ldr	r3, [pc, #92]	; (f744 <ticker_cb+0x80>)
	p.lazy = lazy;
    f6e6:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f6e8:	2200      	movs	r2, #0
    f6ea:	4611      	mov	r1, r2
    f6ec:	2001      	movs	r0, #1
	p.remainder = remainder;
    f6ee:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
    f6f2:	60e5      	str	r5, [r4, #12]
	p.force = force;
    f6f4:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
    f6f8:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f6fa:	f7fb f803 	bl	a704 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    f6fe:	b978      	cbnz	r0, f720 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
    f700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    f704:	4a10      	ldr	r2, [pc, #64]	; (f748 <ticker_cb+0x84>)
    f706:	4911      	ldr	r1, [pc, #68]	; (f74c <ticker_cb+0x88>)
    f708:	4811      	ldr	r0, [pc, #68]	; (f750 <ticker_cb+0x8c>)
    f70a:	f240 23db 	movw	r3, #731	; 0x2db
    f70e:	f010 f806 	bl	1f71e <printk>
    f712:	4040      	eors	r0, r0
    f714:	f380 8811 	msr	BASEPRI, r0
    f718:	f04f 0003 	mov.w	r0, #3
    f71c:	df02      	svc	2
    f71e:	e7e0      	b.n	f6e2 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
    f720:	4a09      	ldr	r2, [pc, #36]	; (f748 <ticker_cb+0x84>)
    f722:	490c      	ldr	r1, [pc, #48]	; (f754 <ticker_cb+0x90>)
    f724:	480a      	ldr	r0, [pc, #40]	; (f750 <ticker_cb+0x8c>)
    f726:	f44f 733a 	mov.w	r3, #744	; 0x2e8
    f72a:	f00f fff8 	bl	1f71e <printk>
    f72e:	4040      	eors	r0, r0
    f730:	f380 8811 	msr	BASEPRI, r0
    f734:	f04f 0003 	mov.w	r0, #3
    f738:	df02      	svc	2
}
    f73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f73e:	bf00      	nop
    f740:	20004c5c 	.word	0x20004c5c
    f744:	20000638 	.word	0x20000638
    f748:	000255a8 	.word	0x000255a8
    f74c:	00025564 	.word	0x00025564
    f750:	000250f0 	.word	0x000250f0
    f754:	000253cc 	.word	0x000253cc

0000f758 <ull_scan_init>:
}
    f758:	2000      	movs	r0, #0
    f75a:	4770      	bx	lr

0000f75c <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    f75c:	3004      	adds	r0, #4
{
    f75e:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    f760:	f101 021c 	add.w	r2, r1, #28
    f764:	b2c0      	uxtb	r0, r0
    f766:	f7fe feab 	bl	e4c0 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    f76a:	b110      	cbz	r0, f772 <ull_scan_disable+0x16>
    f76c:	3078      	adds	r0, #120	; 0x78
    f76e:	d101      	bne.n	f774 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f770:	200c      	movs	r0, #12
}
    f772:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    f774:	4a07      	ldr	r2, [pc, #28]	; (f794 <ull_scan_disable+0x38>)
    f776:	4908      	ldr	r1, [pc, #32]	; (f798 <ull_scan_disable+0x3c>)
    f778:	4808      	ldr	r0, [pc, #32]	; (f79c <ull_scan_disable+0x40>)
    f77a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    f77e:	f00f ffce 	bl	1f71e <printk>
    f782:	4040      	eors	r0, r0
    f784:	f380 8811 	msr	BASEPRI, r0
    f788:	f04f 0003 	mov.w	r0, #3
    f78c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    f78e:	200c      	movs	r0, #12
}
    f790:	bd08      	pop	{r3, pc}
    f792:	bf00      	nop
    f794:	000255a8 	.word	0x000255a8
    f798:	000255e8 	.word	0x000255e8
    f79c:	000250f0 	.word	0x000250f0

0000f7a0 <ll_scan_enable>:
{
    f7a0:	b538      	push	{r3, r4, r5, lr}
	if (!enable) {
    f7a2:	b378      	cbz	r0, f804 <ll_scan_enable+0x64>
	if (!scan || scan->is_enabled) {
    f7a4:	4c2c      	ldr	r4, [pc, #176]	; (f858 <ll_scan_enable+0xb8>)
    f7a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    f7aa:	07d9      	lsls	r1, r3, #31
    f7ac:	d42f      	bmi.n	f80e <ll_scan_enable+0x6e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    f7ae:	079a      	lsls	r2, r3, #30
    f7b0:	f3c3 0541 	ubfx	r5, r3, #1, #2
    f7b4:	d50b      	bpl.n	f7ce <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
    f7b6:	2001      	movs	r0, #1
    f7b8:	f7fc fad4 	bl	bd64 <ll_addr_get>
    f7bc:	2106      	movs	r1, #6
    f7be:	f7fa ff13 	bl	a5e8 <mem_nz>
    f7c2:	2800      	cmp	r0, #0
    f7c4:	d046      	beq.n	f854 <ll_scan_enable+0xb4>
		own_addr_type = scan->own_addr_type;
    f7c6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    f7ca:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
    f7ce:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    f7d2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    f7d6:	f006 facd 	bl	15d74 <ull_filter_scan_update>
	lll->rpa_gen = 0;
    f7da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    f7de:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
    f7e2:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
    f7e6:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
    f7e8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    f7ec:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
    f7ee:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
    f7f2:	d502      	bpl.n	f7fa <ll_scan_enable+0x5a>
    f7f4:	3d02      	subs	r5, #2
    f7f6:	2d01      	cmp	r5, #1
    f7f8:	d922      	bls.n	f840 <ll_scan_enable+0xa0>
}
    f7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
    f7fe:	4816      	ldr	r0, [pc, #88]	; (f858 <ll_scan_enable+0xb8>)
    f800:	f7f1 bf0e 	b.w	1620 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
    f804:	4d14      	ldr	r5, [pc, #80]	; (f858 <ll_scan_enable+0xb8>)
    f806:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    f80a:	07dc      	lsls	r4, r3, #31
    f80c:	d402      	bmi.n	f814 <ll_scan_enable+0x74>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    f80e:	240c      	movs	r4, #12
}
    f810:	4620      	mov	r0, r4
    f812:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    f814:	6a2b      	ldr	r3, [r5, #32]
    f816:	2b00      	cmp	r3, #0
    f818:	d1f9      	bne.n	f80e <ll_scan_enable+0x6e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
    f81a:	4629      	mov	r1, r5
    f81c:	f7ff ff9e 	bl	f75c <ull_scan_disable>
	if (ret) {
    f820:	4604      	mov	r4, r0
    f822:	2800      	cmp	r0, #0
    f824:	d1f4      	bne.n	f810 <ll_scan_enable+0x70>
		return ret;
	}

	scan->is_enabled = 0U;
    f826:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    f82a:	f360 0300 	bfi	r3, r0, #0, #1
    f82e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
    f832:	f7ff fe3d 	bl	f4b0 <ull_adv_is_enabled_get>
    f836:	2800      	cmp	r0, #0
    f838:	d1ea      	bne.n	f810 <ll_scan_enable+0x70>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
    f83a:	f006 fa5b 	bl	15cf4 <ull_filter_adv_scan_state_cb>
    f83e:	e7e7      	b.n	f810 <ll_scan_enable+0x70>
		ull_filter_rpa_update(false);
    f840:	2000      	movs	r0, #0
    f842:	f006 fabb 	bl	15dbc <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    f846:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f84a:	f043 0302 	orr.w	r3, r3, #2
    f84e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    f852:	e7d2      	b.n	f7fa <ll_scan_enable+0x5a>
			return BT_HCI_ERR_INVALID_PARAM;
    f854:	2412      	movs	r4, #18
    f856:	e7db      	b.n	f810 <ll_scan_enable+0x70>
    f858:	20004c14 	.word	0x20004c14

0000f85c <ull_scan_reset>:
{
    f85c:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    f85e:	4c0d      	ldr	r4, [pc, #52]	; (f894 <ull_scan_reset+0x38>)
    f860:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    f864:	07db      	lsls	r3, r3, #31
    f866:	d501      	bpl.n	f86c <ull_scan_reset+0x10>
	if (scan->lll.conn) {
    f868:	6a20      	ldr	r0, [r4, #32]
    f86a:	b108      	cbz	r0, f870 <ull_scan_reset+0x14>
}
    f86c:	2000      	movs	r0, #0
    f86e:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
    f870:	4621      	mov	r1, r4
    f872:	f7ff ff73 	bl	f75c <ull_scan_disable>
	if (ret) {
    f876:	2800      	cmp	r0, #0
    f878:	d1f8      	bne.n	f86c <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
    f87a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    f87e:	f360 0200 	bfi	r2, r0, #0, #1
    f882:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    f886:	f7ff fe13 	bl	f4b0 <ull_adv_is_enabled_get>
    f88a:	2800      	cmp	r0, #0
    f88c:	d1ee      	bne.n	f86c <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
    f88e:	f006 fa31 	bl	15cf4 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
    f892:	e7eb      	b.n	f86c <ull_scan_reset+0x10>
    f894:	20004c14 	.word	0x20004c14

0000f898 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    f898:	4a03      	ldr	r2, [pc, #12]	; (f8a8 <ull_scan_handle_get+0x10>)
    f89a:	4b04      	ldr	r3, [pc, #16]	; (f8ac <ull_scan_handle_get+0x14>)
    f89c:	1a80      	subs	r0, r0, r2
    f89e:	fba3 3000 	umull	r3, r0, r3, r0
}
    f8a2:	f3c0 1007 	ubfx	r0, r0, #4, #8
    f8a6:	4770      	bx	lr
    f8a8:	20004c14 	.word	0x20004c14
    f8ac:	38e38e39 	.word	0x38e38e39

0000f8b0 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    f8b0:	4a04      	ldr	r2, [pc, #16]	; (f8c4 <ull_scan_lll_handle_get+0x14>)
    f8b2:	6800      	ldr	r0, [r0, #0]
    f8b4:	4b04      	ldr	r3, [pc, #16]	; (f8c8 <ull_scan_lll_handle_get+0x18>)
    f8b6:	1a80      	subs	r0, r0, r2
    f8b8:	fba3 3000 	umull	r3, r0, r3, r0
}
    f8bc:	f3c0 1007 	ubfx	r0, r0, #4, #8
    f8c0:	4770      	bx	lr
    f8c2:	bf00      	nop
    f8c4:	20004c14 	.word	0x20004c14
    f8c8:	38e38e39 	.word	0x38e38e39

0000f8cc <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f8cc:	b938      	cbnz	r0, f8de <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    f8ce:	4805      	ldr	r0, [pc, #20]	; (f8e4 <ull_scan_is_enabled_get+0x18>)
    f8d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
    f8d4:	f013 0f01 	tst.w	r3, #1
    f8d8:	bf08      	it	eq
    f8da:	2000      	moveq	r0, #0
    f8dc:	4770      	bx	lr
		return NULL;
    f8de:	2000      	movs	r0, #0
}
    f8e0:	4770      	bx	lr
    f8e2:	bf00      	nop
    f8e4:	20004c14 	.word	0x20004c14

0000f8e8 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    f8e8:	4a04      	ldr	r2, [pc, #16]	; (f8fc <ull_scan_is_disabled_get+0x14>)
    f8ea:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    f8ee:	f003 0301 	and.w	r3, r3, #1
		return NULL;
    f8f2:	4303      	orrs	r3, r0
}
    f8f4:	bf0c      	ite	eq
    f8f6:	4610      	moveq	r0, r2
    f8f8:	2000      	movne	r0, #0
    f8fa:	4770      	bx	lr
    f8fc:	20004c14 	.word	0x20004c14

0000f900 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f900:	b990      	cbnz	r0, f928 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
    f902:	4a0a      	ldr	r2, [pc, #40]	; (f92c <ull_scan_is_enabled+0x2c>)
    f904:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    f908:	f013 0001 	ands.w	r0, r3, #1
    f90c:	d00d      	beq.n	f92a <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    f90e:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    f912:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    f914:	f003 0301 	and.w	r3, r3, #1
    f918:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f91c:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    f920:	b11a      	cbz	r2, f92a <ull_scan_is_enabled+0x2a>
    f922:	f040 0004 	orr.w	r0, r0, #4
    f926:	4770      	bx	lr
		return 0U;
    f928:	2000      	movs	r0, #0
}
    f92a:	4770      	bx	lr
    f92c:	20004c14 	.word	0x20004c14

0000f930 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    f930:	b950      	cbnz	r0, f948 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
    f932:	4b06      	ldr	r3, [pc, #24]	; (f94c <ull_scan_filter_pol_get+0x1c>)
    f934:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    f938:	f010 0001 	ands.w	r0, r0, #1
    f93c:	d005      	beq.n	f94a <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
    f93e:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    f942:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    f946:	4770      	bx	lr
		return 0;
    f948:	2000      	movs	r0, #0
}
    f94a:	4770      	bx	lr
    f94c:	20004c14 	.word	0x20004c14

0000f950 <init_reset>:
{
    f950:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    f952:	4b15      	ldr	r3, [pc, #84]	; (f9a8 <init_reset+0x58>)
    f954:	4815      	ldr	r0, [pc, #84]	; (f9ac <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    f956:	4c16      	ldr	r4, [pc, #88]	; (f9b0 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    f958:	2201      	movs	r2, #1
    f95a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    f95e:	f7fa fdc9 	bl	a4f4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    f962:	4b14      	ldr	r3, [pc, #80]	; (f9b4 <init_reset+0x64>)
    f964:	2203      	movs	r2, #3
    f966:	1d18      	adds	r0, r3, #4
    f968:	2124      	movs	r1, #36	; 0x24
    f96a:	f7fa fdc3 	bl	a4f4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    f96e:	4b12      	ldr	r3, [pc, #72]	; (f9b8 <init_reset+0x68>)
    f970:	2204      	movs	r2, #4
    f972:	1898      	adds	r0, r3, r2
    f974:	212c      	movs	r1, #44	; 0x2c
    f976:	f7fa fdbd 	bl	a4f4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    f97a:	4b10      	ldr	r3, [pc, #64]	; (f9bc <init_reset+0x6c>)
    f97c:	2207      	movs	r2, #7
    f97e:	1d18      	adds	r0, r3, #4
    f980:	2108      	movs	r1, #8
    f982:	f7fa fdb7 	bl	a4f4 <mem_init>
	default_phy_tx |= PHY_2M;
    f986:	490e      	ldr	r1, [pc, #56]	; (f9c0 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
    f988:	4a0e      	ldr	r2, [pc, #56]	; (f9c4 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f98a:	480f      	ldr	r0, [pc, #60]	; (f9c8 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
    f98c:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    f98e:	f04f 0c1b 	mov.w	ip, #27
    f992:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    f996:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f998:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
    f99c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    f99e:	f8a0 c000 	strh.w	ip, [r0]
}
    f9a2:	2000      	movs	r0, #0
    f9a4:	bd10      	pop	{r4, pc}
    f9a6:	bf00      	nop
    f9a8:	20004c6c 	.word	0x20004c6c
    f9ac:	200013d8 	.word	0x200013d8
    f9b0:	200060be 	.word	0x200060be
    f9b4:	20004c94 	.word	0x20004c94
    f9b8:	20004d04 	.word	0x20004d04
    f9bc:	20004db8 	.word	0x20004db8
    f9c0:	200060dd 	.word	0x200060dd
    f9c4:	200060dc 	.word	0x200060dc
    f9c8:	200060c0 	.word	0x200060c0

0000f9cc <ctrl_tx_pause_enqueue>:
{
    f9cc:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
    f9ce:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
{
    f9d2:	4604      	mov	r4, r0
    f9d4:	460d      	mov	r5, r1
	if (
    f9d6:	b11b      	cbz	r3, f9e0 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    f9d8:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
	    conn->tx_head &&
    f9dc:	0788      	lsls	r0, r1, #30
    f9de:	d50e      	bpl.n	f9fe <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
    f9e0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f9e4:	b351      	cbz	r1, fa3c <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
    f9e6:	2a00      	cmp	r2, #0
    f9e8:	d132      	bne.n	fa50 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
    f9ea:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    f9ee:	681a      	ldr	r2, [r3, #0]
    f9f0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    f9f2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    f9f4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    f9f6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f9fa:	b1e3      	cbz	r3, fa36 <ctrl_tx_pause_enqueue+0x6a>
}
    f9fc:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    f9fe:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    fa02:	07c9      	lsls	r1, r1, #31
    fa04:	d4ec      	bmi.n	f9e0 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    fa06:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    fa0a:	428b      	cmp	r3, r1
    fa0c:	d02e      	beq.n	fa6c <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
    fa0e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    fa12:	2900      	cmp	r1, #0
    fa14:	d038      	beq.n	fa88 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
    fa16:	2a00      	cmp	r2, #0
    fa18:	d0e7      	beq.n	f9ea <ctrl_tx_pause_enqueue+0x1e>
    fa1a:	4a23      	ldr	r2, [pc, #140]	; (faa8 <ctrl_tx_pause_enqueue+0xdc>)
    fa1c:	4923      	ldr	r1, [pc, #140]	; (faac <ctrl_tx_pause_enqueue+0xe0>)
    fa1e:	4824      	ldr	r0, [pc, #144]	; (fab0 <ctrl_tx_pause_enqueue+0xe4>)
    fa20:	f640 236e 	movw	r3, #2670	; 0xa6e
    fa24:	f00f fe7b 	bl	1f71e <printk>
    fa28:	4040      	eors	r0, r0
    fa2a:	f380 8811 	msr	BASEPRI, r0
    fa2e:	f04f 0003 	mov.w	r0, #3
    fa32:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    fa34:	e7d9      	b.n	f9ea <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
    fa36:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
    fa3a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    fa3c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    fa3e:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
    fa42:	2a00      	cmp	r2, #0
    fa44:	d1d9      	bne.n	f9fa <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
    fa46:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d1d6      	bne.n	f9fc <ctrl_tx_pause_enqueue+0x30>
    fa4e:	e7f2      	b.n	fa36 <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
    fa50:	4a15      	ldr	r2, [pc, #84]	; (faa8 <ctrl_tx_pause_enqueue+0xdc>)
    fa52:	4916      	ldr	r1, [pc, #88]	; (faac <ctrl_tx_pause_enqueue+0xe0>)
    fa54:	4816      	ldr	r0, [pc, #88]	; (fab0 <ctrl_tx_pause_enqueue+0xe4>)
    fa56:	f44f 6328 	mov.w	r3, #2688	; 0xa80
    fa5a:	f00f fe60 	bl	1f71e <printk>
    fa5e:	4040      	eors	r0, r0
    fa60:	f380 8811 	msr	BASEPRI, r0
    fa64:	f04f 0003 	mov.w	r0, #3
    fa68:	df02      	svc	2
    fa6a:	e7be      	b.n	f9ea <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
    fa6c:	6819      	ldr	r1, [r3, #0]
    fa6e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    fa72:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    fa76:	2900      	cmp	r1, #0
    fa78:	d1cd      	bne.n	fa16 <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
    fa7a:	6819      	ldr	r1, [r3, #0]
    fa7c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    fa7e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    fa80:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    fa82:	2a00      	cmp	r2, #0
    fa84:	d0df      	beq.n	fa46 <ctrl_tx_pause_enqueue+0x7a>
    fa86:	e7b8      	b.n	f9fa <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fa88:	7919      	ldrb	r1, [r3, #4]
    fa8a:	f001 0103 	and.w	r1, r1, #3
    fa8e:	2903      	cmp	r1, #3
    fa90:	d004      	beq.n	fa9c <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    fa92:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
    fa96:	2a00      	cmp	r2, #0
    fa98:	d0a7      	beq.n	f9ea <ctrl_tx_pause_enqueue+0x1e>
    fa9a:	e7be      	b.n	fa1a <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
    fa9c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fa9e:	2903      	cmp	r1, #3
    faa0:	d0eb      	beq.n	fa7a <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    faa2:	290a      	cmp	r1, #10
    faa4:	d1f5      	bne.n	fa92 <ctrl_tx_pause_enqueue+0xc6>
    faa6:	e7e8      	b.n	fa7a <ctrl_tx_pause_enqueue+0xae>
    faa8:	00025600 	.word	0x00025600
    faac:	00025640 	.word	0x00025640
    fab0:	000250f0 	.word	0x000250f0

0000fab4 <tx_lll_flush>:
{
    fab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    fab8:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    fabc:	4934      	ldr	r1, [pc, #208]	; (fb90 <tx_lll_flush+0xdc>)
{
    fabe:	b083      	sub	sp, #12
    fac0:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    fac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    fac6:	4640      	mov	r0, r8
    fac8:	f7fa fd7a 	bl	a5c0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    facc:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
    fad0:	4629      	mov	r1, r5
    fad2:	f008 fd03 	bl	184dc <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fad6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    fad8:	aa01      	add	r2, sp, #4
    fada:	4631      	mov	r1, r6
    fadc:	f7fa fdb0 	bl	a640 <memq_dequeue>
	while (link) {
    fae0:	b328      	cbz	r0, fb2e <tx_lll_flush+0x7a>
    fae2:	4c2c      	ldr	r4, [pc, #176]	; (fb94 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    fae4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    fae8:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    faec:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
    faee:	f894 c001 	ldrb.w	ip, [r4, #1]
    faf2:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
    faf4:	1c53      	adds	r3, r2, #1
    faf6:	b2db      	uxtb	r3, r3
		last = 0U;
    faf8:	459c      	cmp	ip, r3
    fafa:	bf08      	it	eq
    fafc:	2300      	moveq	r3, #0
	if (last == first) {
    fafe:	4299      	cmp	r1, r3
    fb00:	f894 c000 	ldrb.w	ip, [r4]
    fb04:	d033      	beq.n	fb6e <tx_lll_flush+0xba>
		lll_tx->node = tx;
    fb06:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    fb08:	fb12 f20c 	smulbb	r2, r2, ip
    fb0c:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    fb10:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    fb14:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    fb16:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    fb1a:	6002      	str	r2, [r0, #0]
		tx->next = link;
    fb1c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fb1e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
    fb20:	70e3      	strb	r3, [r4, #3]
    fb22:	aa01      	add	r2, sp, #4
    fb24:	4631      	mov	r1, r6
    fb26:	f7fa fd8b 	bl	a640 <memq_dequeue>
	while (link) {
    fb2a:	2800      	cmp	r0, #0
    fb2c:	d1de      	bne.n	faec <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    fb2e:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
    fb32:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
    fb36:	b150      	cbz	r0, fb4e <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    fb38:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    fb3a:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    fb3c:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
    fb40:	f7fe fd38 	bl	e5b4 <ull_rx_put>
	ull_rx_sched();
    fb44:	f7fe fd46 	bl	e5d4 <ull_rx_sched>
}
    fb48:	b003      	add	sp, #12
    fb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    fb4e:	4a12      	ldr	r2, [pc, #72]	; (fb98 <tx_lll_flush+0xe4>)
    fb50:	4912      	ldr	r1, [pc, #72]	; (fb9c <tx_lll_flush+0xe8>)
    fb52:	4813      	ldr	r0, [pc, #76]	; (fba0 <tx_lll_flush+0xec>)
    fb54:	f640 13da 	movw	r3, #2522	; 0x9da
    fb58:	f00f fde1 	bl	1f71e <printk>
    fb5c:	4040      	eors	r0, r0
    fb5e:	f380 8811 	msr	BASEPRI, r0
    fb62:	f04f 0003 	mov.w	r0, #3
    fb66:	df02      	svc	2
	link = rx->hdr.link;
    fb68:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
    fb6c:	e7e4      	b.n	fb38 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    fb6e:	4a0a      	ldr	r2, [pc, #40]	; (fb98 <tx_lll_flush+0xe4>)
    fb70:	490c      	ldr	r1, [pc, #48]	; (fba4 <tx_lll_flush+0xf0>)
    fb72:	480b      	ldr	r0, [pc, #44]	; (fba0 <tx_lll_flush+0xec>)
    fb74:	f640 13c6 	movw	r3, #2502	; 0x9c6
    fb78:	f00f fdd1 	bl	1f71e <printk>
    fb7c:	4040      	eors	r0, r0
    fb7e:	f380 8811 	msr	BASEPRI, r0
    fb82:	f04f 0003 	mov.w	r0, #3
    fb86:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    fb88:	2300      	movs	r3, #0
    fb8a:	801b      	strh	r3, [r3, #0]
    fb8c:	deff      	udf	#255	; 0xff
    fb8e:	bf00      	nop
    fb90:	200013d8 	.word	0x200013d8
    fb94:	20000648 	.word	0x20000648
    fb98:	00025600 	.word	0x00025600
    fb9c:	00025650 	.word	0x00025650
    fba0:	000250f0 	.word	0x000250f0
    fba4:	00025648 	.word	0x00025648

0000fba8 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    fba8:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    fbac:	f012 0202 	ands.w	r2, r2, #2
    fbb0:	d00a      	beq.n	fbc8 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    fbb2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
    fbb6:	b1d3      	cbz	r3, fbee <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    fbb8:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    fbbc:	681a      	ldr	r2, [r3, #0]
    fbbe:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    fbc0:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    fbc2:	680b      	ldr	r3, [r1, #0]
    fbc4:	b1d3      	cbz	r3, fbfc <ctrl_tx_sec_enqueue+0x54>
    fbc6:	4770      	bx	lr
		if (conn->tx_head) {
    fbc8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    fbcc:	b1cb      	cbz	r3, fc02 <ctrl_tx_sec_enqueue+0x5a>
{
    fbce:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    fbd0:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
    fbd4:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
    fbd8:	45e6      	cmp	lr, ip
    fbda:	d004      	beq.n	fbe6 <ctrl_tx_sec_enqueue+0x3e>
    fbdc:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
    fbe0:	f1bc 0f03 	cmp.w	ip, #3
    fbe4:	d010      	beq.n	fc08 <ctrl_tx_sec_enqueue+0x60>
}
    fbe6:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    fbea:	f7ff beef 	b.w	f9cc <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    fbee:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    fbf2:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    fbf4:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d1e4      	bne.n	fbc6 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    fbfc:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    fc00:	4770      	bx	lr
	bool pause = false;
    fc02:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    fc04:	f7ff bee2 	b.w	f9cc <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fc08:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    fc0c:	f00c 0c03 	and.w	ip, ip, #3
    fc10:	f1bc 0f03 	cmp.w	ip, #3
    fc14:	d1e7      	bne.n	fbe6 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    fc16:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fc18:	2a03      	cmp	r2, #3
    fc1a:	d005      	beq.n	fc28 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    fc1c:	f1a2 020a 	sub.w	r2, r2, #10
    fc20:	fab2 f282 	clz	r2, r2
    fc24:	0952      	lsrs	r2, r2, #5
    fc26:	e7de      	b.n	fbe6 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    fc28:	2201      	movs	r2, #1
    fc2a:	e7dc      	b.n	fbe6 <ctrl_tx_sec_enqueue+0x3e>

0000fc2c <ticker_stop_op_cb>:
{
    fc2c:	b510      	push	{r4, lr}
    fc2e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fc30:	b9b0      	cbnz	r0, fc60 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    fc32:	4b12      	ldr	r3, [pc, #72]	; (fc7c <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    fc34:	2200      	movs	r2, #0
    fc36:	2101      	movs	r1, #1
    fc38:	2002      	movs	r0, #2
	mfy.param = param;
    fc3a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    fc3c:	f7fa fd62 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!ret);
    fc40:	b900      	cbnz	r0, fc44 <ticker_stop_op_cb+0x18>
}
    fc42:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    fc44:	4a0e      	ldr	r2, [pc, #56]	; (fc80 <ticker_stop_op_cb+0x54>)
    fc46:	490f      	ldr	r1, [pc, #60]	; (fc84 <ticker_stop_op_cb+0x58>)
    fc48:	480f      	ldr	r0, [pc, #60]	; (fc88 <ticker_stop_op_cb+0x5c>)
    fc4a:	f44f 6318 	mov.w	r3, #2432	; 0x980
    fc4e:	f00f fd66 	bl	1f71e <printk>
    fc52:	4040      	eors	r0, r0
    fc54:	f380 8811 	msr	BASEPRI, r0
    fc58:	f04f 0003 	mov.w	r0, #3
    fc5c:	df02      	svc	2
}
    fc5e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fc60:	4a07      	ldr	r2, [pc, #28]	; (fc80 <ticker_stop_op_cb+0x54>)
    fc62:	490a      	ldr	r1, [pc, #40]	; (fc8c <ticker_stop_op_cb+0x60>)
    fc64:	4808      	ldr	r0, [pc, #32]	; (fc88 <ticker_stop_op_cb+0x5c>)
    fc66:	f640 137a 	movw	r3, #2426	; 0x97a
    fc6a:	f00f fd58 	bl	1f71e <printk>
    fc6e:	4040      	eors	r0, r0
    fc70:	f380 8811 	msr	BASEPRI, r0
    fc74:	f04f 0003 	mov.w	r0, #3
    fc78:	df02      	svc	2
    fc7a:	e7da      	b.n	fc32 <ticker_stop_op_cb+0x6>
    fc7c:	200006e0 	.word	0x200006e0
    fc80:	00025600 	.word	0x00025600
    fc84:	000253cc 	.word	0x000253cc
    fc88:	000250f0 	.word	0x000250f0
    fc8c:	00025660 	.word	0x00025660

0000fc90 <disabled_cb>:
{
    fc90:	b508      	push	{r3, lr}
	mfy.param = param;
    fc92:	4b0b      	ldr	r3, [pc, #44]	; (fcc0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fc94:	2200      	movs	r2, #0
	mfy.param = param;
    fc96:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fc98:	4611      	mov	r1, r2
    fc9a:	2001      	movs	r0, #1
    fc9c:	f7fa fd32 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!ret);
    fca0:	b900      	cbnz	r0, fca4 <disabled_cb+0x14>
}
    fca2:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    fca4:	4a07      	ldr	r2, [pc, #28]	; (fcc4 <disabled_cb+0x34>)
    fca6:	4908      	ldr	r1, [pc, #32]	; (fcc8 <disabled_cb+0x38>)
    fca8:	4808      	ldr	r0, [pc, #32]	; (fccc <disabled_cb+0x3c>)
    fcaa:	f640 13ac 	movw	r3, #2476	; 0x9ac
    fcae:	f00f fd36 	bl	1f71e <printk>
    fcb2:	4040      	eors	r0, r0
    fcb4:	f380 8811 	msr	BASEPRI, r0
    fcb8:	f04f 0003 	mov.w	r0, #3
    fcbc:	df02      	svc	2
}
    fcbe:	bd08      	pop	{r3, pc}
    fcc0:	200006b0 	.word	0x200006b0
    fcc4:	00025600 	.word	0x00025600
    fcc8:	000253cc 	.word	0x000253cc
    fccc:	000250f0 	.word	0x000250f0

0000fcd0 <conn_disable>:
{
    fcd0:	b538      	push	{r3, r4, r5, lr}
	return hdr->ref;
    fcd2:	7803      	ldrb	r3, [r0, #0]
    fcd4:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d02c      	beq.n	fd34 <conn_disable+0x64>
		mfy.param = &conn->lll;
    fcda:	4d19      	ldr	r5, [pc, #100]	; (fd40 <conn_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
    fcdc:	6943      	ldr	r3, [r0, #20]
		mfy.param = &conn->lll;
    fcde:	f100 011c 	add.w	r1, r0, #28
    fce2:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    fce4:	b16b      	cbz	r3, fd02 <conn_disable+0x32>
    fce6:	4a17      	ldr	r2, [pc, #92]	; (fd44 <conn_disable+0x74>)
    fce8:	4917      	ldr	r1, [pc, #92]	; (fd48 <conn_disable+0x78>)
    fcea:	4818      	ldr	r0, [pc, #96]	; (fd4c <conn_disable+0x7c>)
    fcec:	f640 1395 	movw	r3, #2453	; 0x995
    fcf0:	f00f fd15 	bl	1f71e <printk>
    fcf4:	4040      	eors	r0, r0
    fcf6:	f380 8811 	msr	BASEPRI, r0
    fcfa:	f04f 0003 	mov.w	r0, #3
    fcfe:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    fd00:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    fd02:	4813      	ldr	r0, [pc, #76]	; (fd50 <conn_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fd04:	4b0e      	ldr	r3, [pc, #56]	; (fd40 <conn_disable+0x70>)
    fd06:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    fd08:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    fd0c:	4611      	mov	r1, r2
    fd0e:	2001      	movs	r0, #1
    fd10:	f7fa fcf8 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!ret);
    fd14:	b900      	cbnz	r0, fd18 <conn_disable+0x48>
}
    fd16:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    fd18:	4a0a      	ldr	r2, [pc, #40]	; (fd44 <conn_disable+0x74>)
    fd1a:	490e      	ldr	r1, [pc, #56]	; (fd54 <conn_disable+0x84>)
    fd1c:	480b      	ldr	r0, [pc, #44]	; (fd4c <conn_disable+0x7c>)
    fd1e:	f640 139c 	movw	r3, #2460	; 0x99c
    fd22:	f00f fcfc 	bl	1f71e <printk>
    fd26:	4040      	eors	r0, r0
    fd28:	f380 8811 	msr	BASEPRI, r0
    fd2c:	f04f 0003 	mov.w	r0, #3
    fd30:	df02      	svc	2
}
    fd32:	bd38      	pop	{r3, r4, r5, pc}
    fd34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    fd38:	301c      	adds	r0, #28
    fd3a:	f7ff bfa9 	b.w	fc90 <disabled_cb>
    fd3e:	bf00      	nop
    fd40:	200006d0 	.word	0x200006d0
    fd44:	00025600 	.word	0x00025600
    fd48:	000254e8 	.word	0x000254e8
    fd4c:	000250f0 	.word	0x000250f0
    fd50:	0000fc91 	.word	0x0000fc91
    fd54:	000253cc 	.word	0x000253cc

0000fd58 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    fd58:	6883      	ldr	r3, [r0, #8]
    fd5a:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    fd5c:	7f53      	ldrb	r3, [r2, #29]
    fd5e:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
    fd60:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
    fd64:	d001      	beq.n	fd6a <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
    fd66:	f7f2 b8bb 	b.w	1ee0 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
    fd6a:	f7f2 bd41 	b.w	27f0 <ull_central_setup>
    fd6e:	bf00      	nop

0000fd70 <ticker_start_conn_op_cb>:
{
    fd70:	b510      	push	{r4, lr}
    fd72:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fd74:	b990      	cbnz	r0, fd9c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    fd76:	4620      	mov	r0, r4
    fd78:	f7fe fb52 	bl	e420 <ull_update_unmark>
	LL_ASSERT(p == param);
    fd7c:	4284      	cmp	r4, r0
    fd7e:	d00c      	beq.n	fd9a <ticker_start_conn_op_cb+0x2a>
    fd80:	4a0d      	ldr	r2, [pc, #52]	; (fdb8 <ticker_start_conn_op_cb+0x48>)
    fd82:	490e      	ldr	r1, [pc, #56]	; (fdbc <ticker_start_conn_op_cb+0x4c>)
    fd84:	480e      	ldr	r0, [pc, #56]	; (fdc0 <ticker_start_conn_op_cb+0x50>)
    fd86:	f640 03b7 	movw	r3, #2231	; 0x8b7
    fd8a:	f00f fcc8 	bl	1f71e <printk>
    fd8e:	4040      	eors	r0, r0
    fd90:	f380 8811 	msr	BASEPRI, r0
    fd94:	f04f 0003 	mov.w	r0, #3
    fd98:	df02      	svc	2
}
    fd9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fd9c:	4a06      	ldr	r2, [pc, #24]	; (fdb8 <ticker_start_conn_op_cb+0x48>)
    fd9e:	4909      	ldr	r1, [pc, #36]	; (fdc4 <ticker_start_conn_op_cb+0x54>)
    fda0:	4807      	ldr	r0, [pc, #28]	; (fdc0 <ticker_start_conn_op_cb+0x50>)
    fda2:	f640 03b4 	movw	r3, #2228	; 0x8b4
    fda6:	f00f fcba 	bl	1f71e <printk>
    fdaa:	4040      	eors	r0, r0
    fdac:	f380 8811 	msr	BASEPRI, r0
    fdb0:	f04f 0003 	mov.w	r0, #3
    fdb4:	df02      	svc	2
    fdb6:	e7de      	b.n	fd76 <ticker_start_conn_op_cb+0x6>
    fdb8:	00025600 	.word	0x00025600
    fdbc:	0002566c 	.word	0x0002566c
    fdc0:	000250f0 	.word	0x000250f0
    fdc4:	00025660 	.word	0x00025660

0000fdc8 <ticker_stop_conn_op_cb>:
{
    fdc8:	b510      	push	{r4, lr}
    fdca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fdcc:	b990      	cbnz	r0, fdf4 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    fdce:	4620      	mov	r0, r4
    fdd0:	f7fe fb1c 	bl	e40c <ull_update_mark>
	LL_ASSERT(p == param);
    fdd4:	4284      	cmp	r4, r0
    fdd6:	d00c      	beq.n	fdf2 <ticker_stop_conn_op_cb+0x2a>
    fdd8:	4a0d      	ldr	r2, [pc, #52]	; (fe10 <ticker_stop_conn_op_cb+0x48>)
    fdda:	490e      	ldr	r1, [pc, #56]	; (fe14 <ticker_stop_conn_op_cb+0x4c>)
    fddc:	480e      	ldr	r0, [pc, #56]	; (fe18 <ticker_stop_conn_op_cb+0x50>)
    fdde:	f640 03ad 	movw	r3, #2221	; 0x8ad
    fde2:	f00f fc9c 	bl	1f71e <printk>
    fde6:	4040      	eors	r0, r0
    fde8:	f380 8811 	msr	BASEPRI, r0
    fdec:	f04f 0003 	mov.w	r0, #3
    fdf0:	df02      	svc	2
}
    fdf2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fdf4:	4a06      	ldr	r2, [pc, #24]	; (fe10 <ticker_stop_conn_op_cb+0x48>)
    fdf6:	4909      	ldr	r1, [pc, #36]	; (fe1c <ticker_stop_conn_op_cb+0x54>)
    fdf8:	4807      	ldr	r0, [pc, #28]	; (fe18 <ticker_stop_conn_op_cb+0x50>)
    fdfa:	f640 03aa 	movw	r3, #2218	; 0x8aa
    fdfe:	f00f fc8e 	bl	1f71e <printk>
    fe02:	4040      	eors	r0, r0
    fe04:	f380 8811 	msr	BASEPRI, r0
    fe08:	f04f 0003 	mov.w	r0, #3
    fe0c:	df02      	svc	2
    fe0e:	e7de      	b.n	fdce <ticker_stop_conn_op_cb+0x6>
    fe10:	00025600 	.word	0x00025600
    fe14:	0002566c 	.word	0x0002566c
    fe18:	000250f0 	.word	0x000250f0
    fe1c:	00025660 	.word	0x00025660

0000fe20 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fe20:	b900      	cbnz	r0, fe24 <ticker_update_conn_op_cb+0x4>
    fe22:	4770      	bx	lr
{
    fe24:	b510      	push	{r4, lr}
    fe26:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fe28:	f7fe fb06 	bl	e438 <ull_update_mark_get>
    fe2c:	4284      	cmp	r4, r0
    fe2e:	d010      	beq.n	fe52 <ticker_update_conn_op_cb+0x32>
    fe30:	f7fe fae6 	bl	e400 <ull_disable_mark_get>
    fe34:	4284      	cmp	r4, r0
    fe36:	d00c      	beq.n	fe52 <ticker_update_conn_op_cb+0x32>
    fe38:	4a06      	ldr	r2, [pc, #24]	; (fe54 <ticker_update_conn_op_cb+0x34>)
    fe3a:	4907      	ldr	r1, [pc, #28]	; (fe58 <ticker_update_conn_op_cb+0x38>)
    fe3c:	4807      	ldr	r0, [pc, #28]	; (fe5c <ticker_update_conn_op_cb+0x3c>)
    fe3e:	f640 03a1 	movw	r3, #2209	; 0x8a1
    fe42:	f00f fc6c 	bl	1f71e <printk>
    fe46:	4040      	eors	r0, r0
    fe48:	f380 8811 	msr	BASEPRI, r0
    fe4c:	f04f 0003 	mov.w	r0, #3
    fe50:	df02      	svc	2
}
    fe52:	bd10      	pop	{r4, pc}
    fe54:	00025600 	.word	0x00025600
    fe58:	00025678 	.word	0x00025678
    fe5c:	000250f0 	.word	0x000250f0

0000fe60 <tx_ull_dequeue>:
{
    fe60:	4603      	mov	r3, r0
    fe62:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fe64:	f8d0 41c8 	ldr.w	r4, [r0, #456]	; 0x1c8
    fe68:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
    fe6c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fe6e:	b164      	cbz	r4, fe8a <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
    fe70:	4294      	cmp	r4, r2
    fe72:	d021      	beq.n	feb8 <tx_ull_dequeue+0x58>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fe74:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
    fe78:	428a      	cmp	r2, r1
    fe7a:	d00b      	beq.n	fe94 <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
    fe7c:	6811      	ldr	r1, [r2, #0]
    fe7e:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
    fe82:	2200      	movs	r2, #0
}
    fe84:	bc10      	pop	{r4}
		tx->next = NULL;
    fe86:	6002      	str	r2, [r0, #0]
}
    fe88:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fe8a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
    fe8e:	428a      	cmp	r2, r1
    fe90:	d104      	bne.n	fe9c <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
    fe92:	b18a      	cbz	r2, feb8 <tx_ull_dequeue+0x58>
			conn->tx_data = conn->tx_data->next;
    fe94:	6809      	ldr	r1, [r1, #0]
    fe96:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    fe9a:	e7ef      	b.n	fe7c <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fe9c:	7911      	ldrb	r1, [r2, #4]
    fe9e:	f001 0103 	and.w	r1, r1, #3
    fea2:	2903      	cmp	r1, #3
    fea4:	d013      	beq.n	fece <tx_ull_dequeue+0x6e>
		conn->tx_head = conn->tx_head->next;
    fea6:	6812      	ldr	r2, [r2, #0]
    fea8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
    feac:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    feae:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
    feb2:	bc10      	pop	{r4}
		tx->next = tx;
    feb4:	6000      	str	r0, [r0, #0]
}
    feb6:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    feb8:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
    febc:	6812      	ldr	r2, [r2, #0]
    febe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fec2:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    fec4:	bf18      	it	ne
    fec6:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    feca:	d1f2      	bne.n	feb2 <tx_ull_dequeue+0x52>
    fecc:	e7ee      	b.n	feac <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
    fece:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fed0:	2903      	cmp	r1, #3
    fed2:	d0d3      	beq.n	fe7c <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fed4:	290a      	cmp	r1, #10
    fed6:	d1e6      	bne.n	fea6 <tx_ull_dequeue+0x46>
    fed8:	e7d0      	b.n	fe7c <tx_ull_dequeue+0x1c>
    feda:	bf00      	nop

0000fedc <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
    fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
    fee0:	f890 60d8 	ldrb.w	r6, [r0, #216]	; 0xd8
    fee4:	f016 0602 	ands.w	r6, r6, #2
{
    fee8:	460f      	mov	r7, r1
	if (conn->common.txn_lock) {
    feea:	d16d      	bne.n	ffc8 <feature_rsp_send+0xec>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    feec:	4605      	mov	r5, r0
    feee:	483a      	ldr	r0, [pc, #232]	; (ffd8 <feature_rsp_send+0xfc>)
    fef0:	4691      	mov	r9, r2
    fef2:	f7fa fb2f 	bl	a554 <mem_acquire>
	if (!tx) {
    fef6:	4604      	mov	r4, r0
    fef8:	2800      	cmp	r0, #0
    fefa:	d06a      	beq.n	ffd2 <feature_rsp_send+0xf6>
	conn->common.txn_lock = 1U;
    fefc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    ff00:	4936      	ldr	r1, [pc, #216]	; (ffdc <feature_rsp_send+0x100>)
	conn->common.txn_lock = 1U;
    ff02:	f043 0302 	orr.w	r3, r3, #2
    ff06:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
    ff0a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ff0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	feat &= LL_FEAT_BIT_MASK;
    ff12:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    ff14:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
    ff18:	400a      	ands	r2, r1
    ff1a:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    ff1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    ff22:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
    ff26:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    ff2a:	4013      	ands	r3, r2
    ff2c:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
    ff30:	f8d9 8004 	ldr.w	r8, [r9, #4]
    ff34:	f8d9 9008 	ldr.w	r9, [r9, #8]
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    ff38:	f7fd fc52 	bl	d7e0 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
    ff3c:	4b27      	ldr	r3, [pc, #156]	; (ffdc <feature_rsp_send+0x100>)
    ff3e:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
    ff42:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    ff44:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    ff48:	f028 03ff 	bic.w	r3, r8, #255	; 0xff
    ff4c:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    ff4e:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    ff52:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    ff56:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	/* features exchanged */
	conn->common.fex_valid = 1U;
    ff5a:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    ff5e:	f043 0301 	orr.w	r3, r3, #1
    ff62:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff66:	7923      	ldrb	r3, [r4, #4]
    ff68:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    ff6c:	f049 0210 	orr.w	r2, r9, #16
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff70:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_feature.features_peer =
    ff74:	f8c5 2134 	str.w	r2, [r5, #308]	; 0x134
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    ff78:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff7a:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    ff7c:	2309      	movs	r3, #9
    ff7e:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    ff80:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    ff82:	18a0      	adds	r0, r4, r2
    ff84:	4631      	mov	r1, r6
    ff86:	f010 fbda 	bl	2073e <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
    ff8a:	f7fd fc29 	bl	d7e0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    ff8e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	dst[0] = val;
    ff92:	7321      	strb	r1, [r4, #12]
    ff94:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    ff96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    ff9a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    ff9e:	4303      	orrs	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
    ffa0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    ffa2:	7223      	strb	r3, [r4, #8]
    ffa4:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
    ffa6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ffaa:	0a12      	lsrs	r2, r2, #8
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
    ffac:	4628      	mov	r0, r5
    ffae:	7263      	strb	r3, [r4, #9]
    ffb0:	7366      	strb	r6, [r4, #13]
	dst[0] = val;
    ffb2:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
    ffb4:	73e6      	strb	r6, [r4, #15]
    ffb6:	72e2      	strb	r2, [r4, #11]
    ffb8:	4621      	mov	r1, r4
    ffba:	f7ff fdf5 	bl	fba8 <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ffbe:	2301      	movs	r3, #1
    ffc0:	713b      	strb	r3, [r7, #4]

	return 0;
    ffc2:	4630      	mov	r0, r6
}
    ffc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ffc8:	2301      	movs	r3, #1
    ffca:	710b      	strb	r3, [r1, #4]
		*err = 0U;
    ffcc:	2000      	movs	r0, #0
}
    ffce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
    ffd2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ffd6:	e7f5      	b.n	ffc4 <feature_rsp_send+0xe8>
    ffd8:	20004d04 	.word	0x20004d04
    ffdc:	087830d0 	.word	0x087830d0

0000ffe0 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffe2:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    ffe4:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    ffe8:	0780      	lsls	r0, r0, #30
{
    ffea:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    ffec:	d433      	bmi.n	10056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x57>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ffee:	4830      	ldr	r0, [pc, #192]	; (100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>)
    fff0:	4617      	mov	r7, r2
    fff2:	461e      	mov	r6, r3
    fff4:	f7fa faae 	bl	a554 <mem_acquire>
	if (!tx) {
    fff8:	2800      	cmp	r0, #0
    fffa:	d03a      	beq.n	10072 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73>
	conn->common.txn_lock = 1U;
    fffc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10000:	f043 0302 	orr.w	r3, r3, #2
   10004:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   10008:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1000a:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1000c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1000e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   10012:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10014:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   10016:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10018:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1001c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1001e:	7102      	strb	r2, [r0, #4]
	if (
   10020:	b1eb      	cbz	r3, 1005e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5f>
	    !conn->llcp_enc.pause_tx &&
   10022:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10026:	0791      	lsls	r1, r2, #30
   10028:	d419      	bmi.n	1005e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5f>
	    !conn->llcp_phy.pause_tx &&
   1002a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1002e:	07d2      	lsls	r2, r2, #31
   10030:	d415      	bmi.n	1005e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5f>
		if (conn->tx_head == conn->tx_data) {
   10032:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10036:	4293      	cmp	r3, r2
   10038:	d026      	beq.n	10088 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89>
		} else if (!conn->tx_ctrl) {
   1003a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1003e:	b1da      	cbz	r2, 10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>
	tx->next = conn->tx_ctrl_last->next;
   10040:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10044:	681a      	ldr	r2, [r3, #0]
   10046:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10048:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1004a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1004c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10050:	b90b      	cbnz	r3, 10056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x57>
		conn->tx_data_last = tx;
   10052:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10056:	2301      	movs	r3, #1
   10058:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   1005a:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   1005c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   1005e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10062:	2a00      	cmp	r2, #0
   10064:	d1ec      	bne.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
			tx->next = conn->tx_head;
   10066:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10068:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1006c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   10070:	e7ee      	b.n	10050 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51>
		*err = -ENOBUFS;
   10072:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10078:	791a      	ldrb	r2, [r3, #4]
   1007a:	f002 0203 	and.w	r2, r2, #3
   1007e:	2a03      	cmp	r2, #3
   10080:	d010      	beq.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10082:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   10086:	e7dd      	b.n	10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>
			conn->tx_data = conn->tx_data->next;
   10088:	681a      	ldr	r2, [r3, #0]
   1008a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1008e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10092:	2a00      	cmp	r2, #0
   10094:	d1d4      	bne.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
			tx->next = conn->tx_head->next;
   10096:	681a      	ldr	r2, [r3, #0]
   10098:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1009a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1009c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1009e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   100a2:	e7d5      	b.n	10050 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51>
	    ((pdu_data_tx->llctrl.opcode !=
   100a4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   100a6:	2a03      	cmp	r2, #3
   100a8:	d0f5      	beq.n	10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   100aa:	2a0a      	cmp	r2, #10
   100ac:	d1e9      	bne.n	10082 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x83>
   100ae:	e7f2      	b.n	10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
   100b0:	20004d04 	.word	0x20004d04

000100b4 <event_len_prep>:
{
   100b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   100b6:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   100ba:	f003 0207 	and.w	r2, r3, #7
{
   100be:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   100c0:	2a06      	cmp	r2, #6
   100c2:	f200 80d7 	bhi.w	10274 <event_len_prep+0x1c0>
   100c6:	e8df f002 	tbb	[pc, r2]
   100ca:	4804      	.short	0x4804
   100cc:	49494848 	.word	0x49494848
   100d0:	48          	.byte	0x48
   100d1:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   100d2:	486f      	ldr	r0, [pc, #444]	; (10290 <event_len_prep+0x1dc>)
   100d4:	f7fa fa3e 	bl	a554 <mem_acquire>
		if (!tx) {
   100d8:	2800      	cmp	r0, #0
   100da:	d03e      	beq.n	1015a <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   100dc:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   100e0:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   100e4:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   100e8:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   100ec:	2301      	movs	r3, #1
   100ee:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   100f2:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   100f6:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   100fa:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   100fc:	72c3      	strb	r3, [r0, #11]
   100fe:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   10100:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   10102:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   10104:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   10106:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   10108:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1010a:	2214      	movs	r2, #20
	    conn->tx_head &&
   1010c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   10110:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   10112:	221b      	movs	r2, #27
   10114:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10116:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   10118:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1011a:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1011e:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10120:	7102      	strb	r2, [r0, #4]
	if (
   10122:	b13b      	cbz	r3, 10134 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   10124:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10128:	0791      	lsls	r1, r2, #30
   1012a:	d403      	bmi.n	10134 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   1012c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10130:	07d2      	lsls	r2, r2, #31
   10132:	d576      	bpl.n	10222 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   10134:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10138:	2a00      	cmp	r2, #0
   1013a:	f000 8082 	beq.w	10242 <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   1013e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10142:	681a      	ldr	r2, [r3, #0]
   10144:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10146:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10148:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1014a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1014e:	2b00      	cmp	r3, #0
   10150:	d056      	beq.n	10200 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   10152:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   10156:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   1015a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1015c:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   10160:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   10164:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   10168:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   1016c:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   10170:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   10174:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   10176:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1017a:	d024      	beq.n	101c6 <event_len_prep+0x112>
			conn->llcp_length.state =
   1017c:	2206      	movs	r2, #6
   1017e:	f362 0302 	bfi	r3, r2, #0, #3
   10182:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   10186:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1018a:	b335      	cbz	r5, 101da <event_len_prep+0x126>
   1018c:	6828      	ldr	r0, [r5, #0]
   1018e:	b320      	cbz	r0, 101da <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10190:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   10192:	6842      	ldr	r2, [r0, #4]
   10194:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10198:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   1019c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1019e:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   101a0:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   101a2:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   101a4:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   101a6:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   101a8:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   101aa:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   101ac:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   101b0:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   101b2:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   101b4:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   101b6:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   101b8:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   101ba:	f7fe f86b 	bl	e294 <ll_rx_put>
}
   101be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   101c2:	f7fe b871 	b.w	e2a8 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   101c6:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   101ca:	b9e2      	cbnz	r2, 10206 <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   101cc:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   101d0:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   101d4:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   101d8:	e7d5      	b.n	10186 <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   101da:	4a2e      	ldr	r2, [pc, #184]	; (10294 <event_len_prep+0x1e0>)
   101dc:	492e      	ldr	r1, [pc, #184]	; (10298 <event_len_prep+0x1e4>)
   101de:	482f      	ldr	r0, [pc, #188]	; (1029c <event_len_prep+0x1e8>)
   101e0:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   101e4:	f00f fa9b 	bl	1f71e <printk>
   101e8:	4040      	eors	r0, r0
   101ea:	f380 8811 	msr	BASEPRI, r0
   101ee:	f04f 0003 	mov.w	r0, #3
   101f2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   101f4:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   101f6:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   101fa:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   101fe:	e7c7      	b.n	10190 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   10200:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   10204:	e7a5      	b.n	10152 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   10206:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1020a:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1020c:	f362 0302 	bfi	r3, r2, #0, #3
   10210:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   10214:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   10218:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1021c:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10220:	e7b1      	b.n	10186 <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   10222:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10226:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   10228:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1022c:	d00f      	beq.n	1024e <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   1022e:	2a00      	cmp	r2, #0
   10230:	d185      	bne.n	1013e <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10232:	791a      	ldrb	r2, [r3, #4]
   10234:	f002 0203 	and.w	r2, r2, #3
   10238:	2a03      	cmp	r2, #3
   1023a:	d015      	beq.n	10268 <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1023c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   10240:	e77f      	b.n	10142 <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   10242:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10244:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10248:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1024c:	e77f      	b.n	1014e <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   1024e:	6819      	ldr	r1, [r3, #0]
   10250:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10254:	2a00      	cmp	r2, #0
   10256:	f47f af72 	bne.w	1013e <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   1025a:	681a      	ldr	r2, [r3, #0]
   1025c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1025e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10260:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   10262:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   10266:	e772      	b.n	1014e <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   10268:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1026a:	2a03      	cmp	r2, #3
   1026c:	d0f5      	beq.n	1025a <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1026e:	2a0a      	cmp	r2, #10
   10270:	d1e4      	bne.n	1023c <event_len_prep+0x188>
   10272:	e7f2      	b.n	1025a <event_len_prep+0x1a6>
		LL_ASSERT(0);
   10274:	4a07      	ldr	r2, [pc, #28]	; (10294 <event_len_prep+0x1e0>)
   10276:	490a      	ldr	r1, [pc, #40]	; (102a0 <event_len_prep+0x1ec>)
   10278:	4808      	ldr	r0, [pc, #32]	; (1029c <event_len_prep+0x1e8>)
   1027a:	f241 03ea 	movw	r3, #4330	; 0x10ea
   1027e:	f00f fa4e 	bl	1f71e <printk>
   10282:	4040      	eors	r0, r0
   10284:	f380 8811 	msr	BASEPRI, r0
   10288:	f04f 0003 	mov.w	r0, #3
   1028c:	df02      	svc	2
}
   1028e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10290:	20004d04 	.word	0x20004d04
   10294:	00025600 	.word	0x00025600
   10298:	000256cc 	.word	0x000256cc
   1029c:	000250f0 	.word	0x000250f0
   102a0:	00025150 	.word	0x00025150

000102a4 <event_phy_upd_ind_prep>:
{
   102a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   102a8:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   102ac:	f013 0601 	ands.w	r6, r3, #1
{
   102b0:	4604      	mov	r4, r0
   102b2:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   102b4:	f040 808c 	bne.w	103d0 <event_phy_upd_ind_prep+0x12c>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   102b8:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   102bc:	1a69      	subs	r1, r5, r1
   102be:	040a      	lsls	r2, r1, #16
   102c0:	f100 808d 	bmi.w	103de <event_phy_upd_ind_prep+0x13a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   102c4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   102c8:	2900      	cmp	r1, #0
   102ca:	f2c0 810a 	blt.w	104e2 <event_phy_upd_ind_prep+0x23e>
		rx = conn->llcp_rx;
   102ce:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   102d2:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   102d4:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   102d8:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   102dc:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   102e0:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   102e4:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   102e8:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   102ec:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   102f0:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   102f4:	d175      	bne.n	103e2 <event_phy_upd_ind_prep+0x13e>
		uint16_t eff_tx_time = lll->max_tx_time;
   102f6:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   102fa:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   102fe:	d008      	beq.n	10312 <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   10300:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   10304:	095b      	lsrs	r3, r3, #5
   10306:	f363 0102 	bfi	r1, r3, #0, #3
   1030a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1030e:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   10312:	2d00      	cmp	r5, #0
   10314:	f000 80c5 	beq.w	104a2 <event_phy_upd_ind_prep+0x1fe>
   10318:	6828      	ldr	r0, [r5, #0]
   1031a:	2800      	cmp	r0, #0
   1031c:	f000 80c1 	beq.w	104a2 <event_phy_upd_ind_prep+0x1fe>
		conn->llcp_rx = rx->hdr.link->mem;
   10320:	6843      	ldr	r3, [r0, #4]
   10322:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10326:	f012 0f02 	tst.w	r2, #2
   1032a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   1032e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10332:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   10336:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1033a:	d102      	bne.n	10342 <event_phy_upd_ind_prep+0x9e>
   1033c:	4599      	cmp	r9, r3
   1033e:	f000 80e7 	beq.w	10510 <event_phy_upd_ind_prep+0x26c>
		rx->hdr.handle = lll->handle;
   10342:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   10344:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10346:	231c      	movs	r3, #28
   10348:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   1034a:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   1034c:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   1034e:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   10350:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   10352:	4629      	mov	r1, r5
   10354:	f7fd ff9e 	bl	e294 <ll_rx_put>
		rx = conn->llcp_rx;
   10358:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1035c:	2d00      	cmp	r5, #0
   1035e:	f000 80b1 	beq.w	104c4 <event_phy_upd_ind_prep+0x220>
   10362:	6828      	ldr	r0, [r5, #0]
   10364:	2800      	cmp	r0, #0
   10366:	f000 80ad 	beq.w	104c4 <event_phy_upd_ind_prep+0x220>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1036a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   1036e:	6842      	ldr	r2, [r0, #4]
   10370:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   10374:	42b3      	cmp	r3, r6
   10376:	d30a      	bcc.n	1038e <event_phy_upd_ind_prep+0xea>
   10378:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1037c:	d807      	bhi.n	1038e <event_phy_upd_ind_prep+0xea>
		    (eff_rx_time <= lll->max_rx_time) &&
   1037e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   10382:	42bb      	cmp	r3, r7
   10384:	d303      	bcc.n	1038e <event_phy_upd_ind_prep+0xea>
		    (eff_rx_time <= lll->max_rx_time) &&
   10386:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1038a:	f240 8100 	bls.w	1058e <event_phy_upd_ind_prep+0x2ea>
		lll->max_tx_time = eff_tx_time;
   1038e:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   10392:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10396:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   10398:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1039a:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1039c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   103a0:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   103a4:	2109      	movs	r1, #9
   103a6:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   103a8:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   103ac:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   103ae:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   103b2:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   103b4:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   103b8:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   103ba:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   103bc:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   103be:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   103c0:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   103c2:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   103c4:	f7fd ff66 	bl	e294 <ll_rx_put>
}
   103c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   103cc:	f7fd bf6c 	b.w	e2a8 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   103d0:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   103d4:	2200      	movs	r2, #0
   103d6:	f7fa f92b 	bl	a630 <memq_peek>
   103da:	4606      	mov	r6, r0
   103dc:	b150      	cbz	r0, 103f4 <event_phy_upd_ind_prep+0x150>
}
   103de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   103e2:	f3c3 0082 	ubfx	r0, r3, #2, #3
   103e6:	f360 0102 	bfi	r1, r0, #0, #3
   103ea:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   103ee:	f44f 76a4 	mov.w	r6, #328	; 0x148
   103f2:	e782      	b.n	102fa <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   103f4:	2002      	movs	r0, #2
   103f6:	f7fd ff5d 	bl	e2b4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   103fa:	4680      	mov	r8, r0
   103fc:	2800      	cmp	r0, #0
   103fe:	d0ee      	beq.n	103de <event_phy_upd_ind_prep+0x13a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10400:	4894      	ldr	r0, [pc, #592]	; (10654 <event_phy_upd_ind_prep+0x3b0>)
   10402:	f7fa f8a7 	bl	a554 <mem_acquire>
		if (!tx) {
   10406:	4607      	mov	r7, r0
   10408:	2800      	cmp	r0, #0
   1040a:	d0e8      	beq.n	103de <event_phy_upd_ind_prep+0x13a>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1040c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10410:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   10414:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   10418:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   1041c:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   10420:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   10424:	b2db      	uxtb	r3, r3
   10426:	f040 8094 	bne.w	10552 <event_phy_upd_ind_prep+0x2ae>
			conn->llcp_ack = conn->llcp_req;
   1042a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   1042e:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   10432:	079d      	lsls	r5, r3, #30
			conn->llcp_ack = conn->llcp_req;
   10434:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   10438:	f100 80bd 	bmi.w	105b6 <event_phy_upd_ind_prep+0x312>
   1043c:	4633      	mov	r3, r6
   1043e:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   10440:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   10442:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   10444:	723e      	strb	r6, [r7, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10446:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->len =
   10448:	717b      	strb	r3, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1044a:	2218      	movs	r2, #24
	    conn->tx_head &&
   1044c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   10450:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10452:	793a      	ldrb	r2, [r7, #4]
   10454:	f042 0203 	orr.w	r2, r2, #3
   10458:	713a      	strb	r2, [r7, #4]
	if (
   1045a:	2b00      	cmp	r3, #0
   1045c:	f000 80a0 	beq.w	105a0 <event_phy_upd_ind_prep+0x2fc>
	    !conn->llcp_enc.pause_tx &&
   10460:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10464:	0790      	lsls	r0, r2, #30
   10466:	f100 809b 	bmi.w	105a0 <event_phy_upd_ind_prep+0x2fc>
	    !conn->llcp_phy.pause_tx &&
   1046a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1046e:	07d1      	lsls	r1, r2, #31
   10470:	f100 8096 	bmi.w	105a0 <event_phy_upd_ind_prep+0x2fc>
		if (conn->tx_head == conn->tx_data) {
   10474:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10478:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1047a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1047e:	f000 80ce 	beq.w	1061e <event_phy_upd_ind_prep+0x37a>
		} else if (!conn->tx_ctrl) {
   10482:	2a00      	cmp	r2, #0
   10484:	f000 80d8 	beq.w	10638 <event_phy_upd_ind_prep+0x394>
	tx->next = conn->tx_ctrl_last->next;
   10488:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1048c:	681a      	ldr	r2, [r3, #0]
   1048e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   10490:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   10492:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   10494:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10498:	2b00      	cmp	r3, #0
   1049a:	d1a0      	bne.n	103de <event_phy_upd_ind_prep+0x13a>
		conn->tx_data_last = tx;
   1049c:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   104a0:	e79d      	b.n	103de <event_phy_upd_ind_prep+0x13a>
		LL_ASSERT(rx && rx->hdr.link);
   104a2:	4a6d      	ldr	r2, [pc, #436]	; (10658 <event_phy_upd_ind_prep+0x3b4>)
   104a4:	496d      	ldr	r1, [pc, #436]	; (1065c <event_phy_upd_ind_prep+0x3b8>)
   104a6:	486e      	ldr	r0, [pc, #440]	; (10660 <event_phy_upd_ind_prep+0x3bc>)
   104a8:	f241 231a 	movw	r3, #4634	; 0x121a
   104ac:	f00f f937 	bl	1f71e <printk>
   104b0:	4040      	eors	r0, r0
   104b2:	f380 8811 	msr	BASEPRI, r0
   104b6:	f04f 0003 	mov.w	r0, #3
   104ba:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   104bc:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   104be:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   104c2:	e72d      	b.n	10320 <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   104c4:	4a64      	ldr	r2, [pc, #400]	; (10658 <event_phy_upd_ind_prep+0x3b4>)
   104c6:	4965      	ldr	r1, [pc, #404]	; (1065c <event_phy_upd_ind_prep+0x3b8>)
   104c8:	4865      	ldr	r0, [pc, #404]	; (10660 <event_phy_upd_ind_prep+0x3bc>)
   104ca:	f241 2349 	movw	r3, #4681	; 0x1249
   104ce:	f00f f926 	bl	1f71e <printk>
   104d2:	4040      	eors	r0, r0
   104d4:	f380 8811 	msr	BASEPRI, r0
   104d8:	f04f 0003 	mov.w	r0, #3
   104dc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   104de:	6828      	ldr	r0, [r5, #0]
   104e0:	e743      	b.n	1036a <event_phy_upd_ind_prep+0xc6>
			rx = ll_pdu_rx_alloc();
   104e2:	f7fd ff05 	bl	e2f0 <ll_pdu_rx_alloc>
			if (!rx) {
   104e6:	4605      	mov	r5, r0
   104e8:	2800      	cmp	r0, #0
   104ea:	f43f af78 	beq.w	103de <event_phy_upd_ind_prep+0x13a>
			rx->hdr.link->mem = conn->llcp_rx;
   104ee:	6803      	ldr	r3, [r0, #0]
   104f0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   104f4:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   104f6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   104fa:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   104fe:	2b00      	cmp	r3, #0
   10500:	da02      	bge.n	10508 <event_phy_upd_ind_prep+0x264>
   10502:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   10506:	b9f3      	cbnz	r3, 10546 <event_phy_upd_ind_prep+0x2a2>
		if (conn->llcp.phy_upd_ind.tx) {
   10508:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1050c:	461a      	mov	r2, r3
   1050e:	e6e1      	b.n	102d4 <event_phy_upd_ind_prep+0x30>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10510:	4590      	cmp	r8, r2
   10512:	f47f af16 	bne.w	10342 <event_phy_upd_ind_prep+0x9e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10516:	2301      	movs	r3, #1
   10518:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1051a:	4629      	mov	r1, r5
   1051c:	f7fd feba 	bl	e294 <ll_rx_put>
				rx = conn->llcp_rx;
   10520:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   10524:	2d00      	cmp	r5, #0
   10526:	d06b      	beq.n	10600 <event_phy_upd_ind_prep+0x35c>
   10528:	6828      	ldr	r0, [r5, #0]
   1052a:	2800      	cmp	r0, #0
   1052c:	d068      	beq.n	10600 <event_phy_upd_ind_prep+0x35c>
				conn->llcp_rx = rx->hdr.link->mem;
   1052e:	6842      	ldr	r2, [r0, #4]
   10530:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10534:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   10536:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10538:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1053a:	f7fd feab 	bl	e294 <ll_rx_put>
}
   1053e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10542:	f7fd beb1 	b.w	e2a8 <ll_rx_sched>
		if (conn->llcp.phy_upd_ind.tx) {
   10546:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->periph.llcp_type = LLCP_NONE;
   1054a:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		if (conn->llcp.phy_upd_ind.tx) {
   1054e:	461a      	mov	r2, r3
			conn->periph.llcp_type = LLCP_NONE;
   10550:	e6c4      	b.n	102dc <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   10552:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10554:	1da9      	adds	r1, r5, #6
   10556:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   10558:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1055c:	f7fd fec8 	bl	e2f0 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   10560:	f8d8 3000 	ldr.w	r3, [r8]
   10564:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   10568:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1056a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   1056e:	f7fd febf 	bl	e2f0 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   10572:	6803      	ldr	r3, [r0, #0]
   10574:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   10578:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1057a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1057e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   10582:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   10586:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1058a:	095b      	lsrs	r3, r3, #5
   1058c:	e758      	b.n	10440 <event_phy_upd_ind_prep+0x19c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1058e:	2301      	movs	r3, #1
   10590:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   10592:	4629      	mov	r1, r5
   10594:	f7fd fe7e 	bl	e294 <ll_rx_put>
}
   10598:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1059c:	f7fd be84 	b.w	e2a8 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   105a0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   105a4:	2a00      	cmp	r2, #0
   105a6:	f47f af6f 	bne.w	10488 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head;
   105aa:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   105ac:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   105b0:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   105b4:	e770      	b.n	10498 <event_phy_upd_ind_prep+0x1f4>
				(void)ll_pdu_rx_alloc();
   105b6:	f7fd fe9b 	bl	e2f0 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   105ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   105bc:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   105c0:	231c      	movs	r3, #28
				upd->status = 0U;
   105c2:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   105c6:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   105ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   105ce:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   105d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   105d6:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   105da:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   105de:	f3c3 0302 	ubfx	r3, r3, #0, #3
   105e2:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   105e6:	4641      	mov	r1, r8
   105e8:	f7fd fe54 	bl	e294 <ll_rx_put>
				ll_rx_sched();
   105ec:	f7fd fe5c 	bl	e2a8 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   105f0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   105f4:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   105f8:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   105fc:	095b      	lsrs	r3, r3, #5
   105fe:	e71f      	b.n	10440 <event_phy_upd_ind_prep+0x19c>
				LL_ASSERT(rx && rx->hdr.link);
   10600:	4a15      	ldr	r2, [pc, #84]	; (10658 <event_phy_upd_ind_prep+0x3b4>)
   10602:	4916      	ldr	r1, [pc, #88]	; (1065c <event_phy_upd_ind_prep+0x3b8>)
   10604:	4816      	ldr	r0, [pc, #88]	; (10660 <event_phy_upd_ind_prep+0x3bc>)
   10606:	f241 232c 	movw	r3, #4652	; 0x122c
   1060a:	f00f f888 	bl	1f71e <printk>
   1060e:	4040      	eors	r0, r0
   10610:	f380 8811 	msr	BASEPRI, r0
   10614:	f04f 0003 	mov.w	r0, #3
   10618:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1061a:	6828      	ldr	r0, [r5, #0]
   1061c:	e787      	b.n	1052e <event_phy_upd_ind_prep+0x28a>
			conn->tx_data = conn->tx_data->next;
   1061e:	6819      	ldr	r1, [r3, #0]
   10620:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10624:	2a00      	cmp	r2, #0
   10626:	f47f af2f 	bne.w	10488 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head->next;
   1062a:	681a      	ldr	r2, [r3, #0]
   1062c:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1062e:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   10630:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   10632:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   10636:	e72f      	b.n	10498 <event_phy_upd_ind_prep+0x1f4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10638:	791a      	ldrb	r2, [r3, #4]
   1063a:	f002 0203 	and.w	r2, r2, #3
   1063e:	2a03      	cmp	r2, #3
   10640:	d002      	beq.n	10648 <event_phy_upd_ind_prep+0x3a4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10642:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   10646:	e71f      	b.n	10488 <event_phy_upd_ind_prep+0x1e4>
	    ((pdu_data_tx->llctrl.opcode !=
   10648:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1064a:	2a03      	cmp	r2, #3
   1064c:	d0ed      	beq.n	1062a <event_phy_upd_ind_prep+0x386>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1064e:	2a0a      	cmp	r2, #10
   10650:	d1f7      	bne.n	10642 <event_phy_upd_ind_prep+0x39e>
   10652:	e7ea      	b.n	1062a <event_phy_upd_ind_prep+0x386>
   10654:	20004d04 	.word	0x20004d04
   10658:	00025600 	.word	0x00025600
   1065c:	000256cc 	.word	0x000256cc
   10660:	000250f0 	.word	0x000250f0

00010664 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   10664:	4801      	ldr	r0, [pc, #4]	; (1066c <ll_conn_acquire+0x8>)
   10666:	f7f9 bf75 	b.w	a554 <mem_acquire>
   1066a:	bf00      	nop
   1066c:	20004c6c 	.word	0x20004c6c

00010670 <ll_conn_release>:
	mem_release(conn, &conn_free);
   10670:	4901      	ldr	r1, [pc, #4]	; (10678 <ll_conn_release+0x8>)
   10672:	f7f9 bf89 	b.w	a588 <mem_release>
   10676:	bf00      	nop
   10678:	20004c6c 	.word	0x20004c6c

0001067c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1067c:	4902      	ldr	r1, [pc, #8]	; (10688 <ll_conn_handle_get+0xc>)
   1067e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10682:	f7f9 bf9d 	b.w	a5c0 <mem_index_get>
   10686:	bf00      	nop
   10688:	200013d8 	.word	0x200013d8

0001068c <ll_conn_get>:
{
   1068c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1068e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10692:	4801      	ldr	r0, [pc, #4]	; (10698 <ll_conn_get+0xc>)
   10694:	f7f9 bf90 	b.w	a5b8 <mem_get>
   10698:	200013d8 	.word	0x200013d8

0001069c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1069c:	b958      	cbnz	r0, 106b6 <ll_connected_get+0x1a>
{
   1069e:	b508      	push	{r3, lr}
   106a0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   106a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   106a6:	4805      	ldr	r0, [pc, #20]	; (106bc <ll_connected_get+0x20>)
   106a8:	f7f9 ff86 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   106ac:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   106ae:	b903      	cbnz	r3, 106b2 <ll_connected_get+0x16>
}
   106b0:	bd08      	pop	{r3, pc}
		return NULL;
   106b2:	2000      	movs	r0, #0
}
   106b4:	bd08      	pop	{r3, pc}
		return NULL;
   106b6:	2000      	movs	r0, #0
}
   106b8:	4770      	bx	lr
   106ba:	bf00      	nop
   106bc:	200013d8 	.word	0x200013d8

000106c0 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   106c0:	4801      	ldr	r0, [pc, #4]	; (106c8 <ll_tx_mem_acquire+0x8>)
   106c2:	f7f9 bf47 	b.w	a554 <mem_acquire>
   106c6:	bf00      	nop
   106c8:	20004c94 	.word	0x20004c94

000106cc <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   106cc:	4901      	ldr	r1, [pc, #4]	; (106d4 <ll_tx_mem_release+0x8>)
   106ce:	f7f9 bf5b 	b.w	a588 <mem_release>
   106d2:	bf00      	nop
   106d4:	20004c94 	.word	0x20004c94

000106d8 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   106d8:	2800      	cmp	r0, #0
   106da:	d13f      	bne.n	1075c <ll_tx_mem_enqueue+0x84>
{
   106dc:	b570      	push	{r4, r5, r6, lr}
   106de:	4602      	mov	r2, r0
   106e0:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   106e2:	4820      	ldr	r0, [pc, #128]	; (10764 <ll_tx_mem_enqueue+0x8c>)
   106e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   106e8:	f7f9 ff66 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   106ec:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   106ee:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   106f0:	bb72      	cbnz	r2, 10750 <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   106f2:	4c1d      	ldr	r4, [pc, #116]	; (10768 <ll_tx_mem_enqueue+0x90>)
   106f4:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   106f8:	7861      	ldrb	r1, [r4, #1]
   106fa:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   106fc:	f10c 0301 	add.w	r3, ip, #1
   10700:	b2db      	uxtb	r3, r3
		last = 0U;
   10702:	4299      	cmp	r1, r3
   10704:	bf08      	it	eq
   10706:	2300      	moveq	r3, #0
   10708:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
   1070a:	4299      	cmp	r1, r3
   1070c:	d023      	beq.n	10756 <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1070e:	fb1c fc00 	smulbb	ip, ip, r0
   10712:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
   10714:	f820 200c 	strh.w	r2, [r0, ip]
   10718:	4484      	add	ip, r0
	lll_tx->node = tx;
   1071a:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1071e:	70e3      	strb	r3, [r4, #3]
   10720:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   10722:	b92b      	cbnz	r3, 10730 <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10724:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10728:	2b00      	cmp	r3, #0
   1072a:	db0b      	blt.n	10744 <ll_tx_mem_enqueue+0x6c>
	return 0;
   1072c:	2000      	movs	r0, #0
}
   1072e:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   10730:	4b0e      	ldr	r3, [pc, #56]	; (1076c <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10732:	2101      	movs	r1, #1
   10734:	2003      	movs	r0, #3
		mfy.param = conn;
   10736:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10738:	f7f9 ffe4 	bl	a704 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1073c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10740:	2b00      	cmp	r3, #0
   10742:	daf3      	bge.n	1072c <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
   10744:	4628      	mov	r0, r5
   10746:	2100      	movs	r1, #0
   10748:	f004 f97a 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   1074c:	2000      	movs	r0, #0
}
   1074e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10750:	f06f 0015 	mvn.w	r0, #21
}
   10754:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   10756:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1075a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1075c:	f06f 0015 	mvn.w	r0, #21
}
   10760:	4770      	bx	lr
   10762:	bf00      	nop
   10764:	200013d8 	.word	0x200013d8
   10768:	2000068c 	.word	0x2000068c
   1076c:	200006c0 	.word	0x200006c0

00010770 <ll_conn_update>:
{
   10770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10774:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   10778:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1077c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   10780:	2800      	cmp	r0, #0
   10782:	d155      	bne.n	10830 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10784:	460c      	mov	r4, r1
   10786:	4615      	mov	r5, r2
   10788:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1078c:	4602      	mov	r2, r0
   1078e:	4841      	ldr	r0, [pc, #260]	; (10894 <ll_conn_update+0x124>)
   10790:	461e      	mov	r6, r3
   10792:	f7f9 ff11 	bl	a5b8 <mem_get>
   10796:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   10798:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1079a:	2800      	cmp	r0, #0
   1079c:	d148      	bne.n	10830 <ll_conn_update+0xc0>
	if (!cmd) {
   1079e:	bb3c      	cbnz	r4, 107f0 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   107a0:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   107a4:	0699      	lsls	r1, r3, #26
   107a6:	d44a      	bmi.n	1083e <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   107a8:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   107ac:	07da      	lsls	r2, r3, #31
   107ae:	d442      	bmi.n	10836 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   107b0:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   107b4:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   107b8:	4293      	cmp	r3, r2
   107ba:	d136      	bne.n	1082a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   107bc:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107c0:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   107c4:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   107c8:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   107cc:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   107ce:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107d2:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   107d4:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   107d8:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   107dc:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   107e0:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   107e4:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107e8:	db4e      	blt.n	10888 <ll_conn_update+0x118>
	return 0;
   107ea:	2000      	movs	r0, #0
}
   107ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   107f0:	3c01      	subs	r4, #1
		if (cmd) {
   107f2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   107f6:	d0db      	beq.n	107b0 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   107f8:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   107fc:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   10800:	429a      	cmp	r2, r3
   10802:	d012      	beq.n	1082a <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   10804:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   10808:	f003 020f 	and.w	r2, r3, #15
   1080c:	2a03      	cmp	r2, #3
   1080e:	d10c      	bne.n	1082a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   10810:	f004 040f 	and.w	r4, r4, #15
   10814:	f023 031f 	bic.w	r3, r3, #31
   10818:	f044 0410 	orr.w	r4, r4, #16
   1081c:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1081e:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   10822:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   10826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1082a:	200c      	movs	r0, #12
}
   1082c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10830:	2002      	movs	r0, #2
}
   10832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   10836:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1083a:	079b      	lsls	r3, r3, #30
   1083c:	d4b8      	bmi.n	107b0 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1083e:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   10842:	2b00      	cmp	r3, #0
   10844:	db1e      	blt.n	10884 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   10846:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   1084a:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   1084e:	4293      	cmp	r3, r2
   10850:	d1eb      	bne.n	1082a <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10852:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   10856:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   1085a:	3301      	adds	r3, #1
   1085c:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10860:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   10864:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10866:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1086a:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1086c:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   10870:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   10874:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10878:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1087c:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   10880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10884:	201a      	movs	r0, #26
   10886:	e7d1      	b.n	1082c <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   10888:	4660      	mov	r0, ip
   1088a:	2100      	movs	r1, #0
   1088c:	f004 f8d8 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   10890:	2000      	movs	r0, #0
   10892:	e7cb      	b.n	1082c <ll_conn_update+0xbc>
   10894:	200013d8 	.word	0x200013d8

00010898 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10898:	b9d0      	cbnz	r0, 108d0 <ll_chm_get+0x38>
{
   1089a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1089c:	4602      	mov	r2, r0
   1089e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108a0:	480c      	ldr	r0, [pc, #48]	; (108d4 <ll_chm_get+0x3c>)
   108a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   108a6:	f7f9 fe87 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   108aa:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108ac:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   108ae:	b96e      	cbnz	r6, 108cc <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   108b0:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   108b4:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   108b8:	2205      	movs	r2, #5
   108ba:	4639      	mov	r1, r7
   108bc:	4628      	mov	r0, r5
   108be:	f00f ff33 	bl	20728 <memcpy>
	} while (conn->chm_updated);
   108c2:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   108c6:	2800      	cmp	r0, #0
   108c8:	d1f4      	bne.n	108b4 <ll_chm_get+0x1c>
}
   108ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   108cc:	2002      	movs	r0, #2
}
   108ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   108d0:	2002      	movs	r0, #2
}
   108d2:	4770      	bx	lr
   108d4:	200013d8 	.word	0x200013d8

000108d8 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   108d8:	2800      	cmp	r0, #0
   108da:	d13e      	bne.n	1095a <ll_terminate_ind_send+0x82>
{
   108dc:	b510      	push	{r4, lr}
   108de:	4602      	mov	r2, r0
   108e0:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108e2:	4821      	ldr	r0, [pc, #132]	; (10968 <ll_terminate_ind_send+0x90>)
   108e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   108e8:	f7f9 fe66 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   108ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   108ee:	bb93      	cbnz	r3, 10956 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   108f0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   108f4:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   108f8:	429a      	cmp	r2, r3
   108fa:	d12a      	bne.n	10952 <ll_terminate_ind_send+0x7a>
	switch (reason) {
   108fc:	2c29      	cmp	r4, #41	; 0x29
   108fe:	d819      	bhi.n	10934 <ll_terminate_ind_send+0x5c>
   10900:	2c04      	cmp	r4, #4
   10902:	d919      	bls.n	10938 <ll_terminate_ind_send+0x60>
   10904:	1f62      	subs	r2, r4, #5
   10906:	2a24      	cmp	r2, #36	; 0x24
   10908:	d816      	bhi.n	10938 <ll_terminate_ind_send+0x60>
   1090a:	e8df f002 	tbb	[pc, r2]
   1090e:	1517      	.short	0x1517
   10910:	15151515 	.word	0x15151515
   10914:	15151515 	.word	0x15151515
   10918:	15151515 	.word	0x15151515
   1091c:	15171717 	.word	0x15171717
   10920:	17151515 	.word	0x17151515
   10924:	15151515 	.word	0x15151515
   10928:	15151515 	.word	0x15151515
   1092c:	15151515 	.word	0x15151515
   10930:	1515      	.short	0x1515
   10932:	17          	.byte	0x17
   10933:	00          	.byte	0x00
   10934:	2c3b      	cmp	r4, #59	; 0x3b
   10936:	d001      	beq.n	1093c <ll_terminate_ind_send+0x64>
   10938:	2012      	movs	r0, #18
}
   1093a:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1093c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   10940:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   10944:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10946:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   10948:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1094c:	db07      	blt.n	1095e <ll_terminate_ind_send+0x86>
	return 0;
   1094e:	2000      	movs	r0, #0
}
   10950:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10952:	200c      	movs	r0, #12
}
   10954:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10956:	2002      	movs	r0, #2
}
   10958:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1095a:	2002      	movs	r0, #2
}
   1095c:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   1095e:	2100      	movs	r1, #0
   10960:	f004 f86e 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   10964:	2000      	movs	r0, #0
}
   10966:	bd10      	pop	{r4, pc}
   10968:	200013d8 	.word	0x200013d8

0001096c <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1096c:	bb00      	cbnz	r0, 109b0 <ll_feature_req_send+0x44>
{
   1096e:	b510      	push	{r4, lr}
   10970:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10972:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10976:	480f      	ldr	r0, [pc, #60]	; (109b4 <ll_feature_req_send+0x48>)
   10978:	f7f9 fe1e 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   1097c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1097e:	b984      	cbnz	r4, 109a2 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   10980:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   10984:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   10988:	428a      	cmp	r2, r1
   1098a:	d108      	bne.n	1099e <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1098c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   10990:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10992:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   10994:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10998:	db05      	blt.n	109a6 <ll_feature_req_send+0x3a>
	return 0;
   1099a:	4620      	mov	r0, r4
}
   1099c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1099e:	200c      	movs	r0, #12
}
   109a0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   109a2:	2002      	movs	r0, #2
}
   109a4:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   109a6:	4621      	mov	r1, r4
   109a8:	f004 f84a 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   109ac:	4620      	mov	r0, r4
}
   109ae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   109b0:	2002      	movs	r0, #2
}
   109b2:	4770      	bx	lr
   109b4:	200013d8 	.word	0x200013d8

000109b8 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   109b8:	bb00      	cbnz	r0, 109fc <ll_version_ind_send+0x44>
{
   109ba:	b510      	push	{r4, lr}
   109bc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   109be:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   109c2:	480f      	ldr	r0, [pc, #60]	; (10a00 <ll_version_ind_send+0x48>)
   109c4:	f7f9 fdf8 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   109c8:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   109ca:	b984      	cbnz	r4, 109ee <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   109cc:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   109d0:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   109d4:	428a      	cmp	r2, r1
   109d6:	d108      	bne.n	109ea <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   109d8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   109dc:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   109de:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   109e0:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   109e4:	db05      	blt.n	109f2 <ll_version_ind_send+0x3a>
	return 0;
   109e6:	4620      	mov	r0, r4
}
   109e8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   109ea:	200c      	movs	r0, #12
}
   109ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   109ee:	2002      	movs	r0, #2
}
   109f0:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   109f2:	4621      	mov	r1, r4
   109f4:	f004 f824 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   109f8:	4620      	mov	r0, r4
}
   109fa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   109fc:	2002      	movs	r0, #2
}
   109fe:	4770      	bx	lr
   10a00:	200013d8 	.word	0x200013d8

00010a04 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10a04:	2800      	cmp	r0, #0
   10a06:	d14c      	bne.n	10aa2 <ll_length_req_send+0x9e>
{
   10a08:	b538      	push	{r3, r4, r5, lr}
   10a0a:	460d      	mov	r5, r1
   10a0c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10a0e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10a12:	4602      	mov	r2, r0
   10a14:	4824      	ldr	r0, [pc, #144]	; (10aa8 <ll_length_req_send+0xa4>)
   10a16:	f7f9 fdcf 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   10a1a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   10a1c:	bbc3      	cbnz	r3, 10a90 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   10a1e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   10a22:	071a      	lsls	r2, r3, #28
   10a24:	d432      	bmi.n	10a8c <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   10a26:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   10a2a:	07d1      	lsls	r1, r2, #31
   10a2c:	d503      	bpl.n	10a36 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   10a2e:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   10a32:	0692      	lsls	r2, r2, #26
   10a34:	d52a      	bpl.n	10a8c <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   10a36:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   10a3a:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   10a3e:	428a      	cmp	r2, r1
   10a40:	d011      	beq.n	10a66 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   10a42:	f003 0307 	and.w	r3, r3, #7
   10a46:	2b03      	cmp	r3, #3
   10a48:	d004      	beq.n	10a54 <ll_length_req_send+0x50>
   10a4a:	3303      	adds	r3, #3
   10a4c:	f003 0307 	and.w	r3, r3, #7
   10a50:	2b01      	cmp	r3, #1
   10a52:	d824      	bhi.n	10a9e <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   10a54:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   10a58:	bb0b      	cbnz	r3, 10a9e <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   10a5a:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   10a5e:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   10a62:	4618      	mov	r0, r3
}
   10a64:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10a66:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   10a6a:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10a6e:	f36f 0302 	bfc	r3, #0, #3
   10a72:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a76:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   10a7a:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   10a7e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a80:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   10a82:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a86:	db05      	blt.n	10a94 <ll_length_req_send+0x90>
	return 0;
   10a88:	2000      	movs	r0, #0
}
   10a8a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10a8c:	201a      	movs	r0, #26
}
   10a8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10a90:	2002      	movs	r0, #2
}
   10a92:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   10a94:	2100      	movs	r1, #0
   10a96:	f003 ffd3 	bl	14a40 <ull_periph_latency_cancel>
	return 0;
   10a9a:	2000      	movs	r0, #0
}
   10a9c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10a9e:	200c      	movs	r0, #12
}
   10aa0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10aa2:	2002      	movs	r0, #2
}
   10aa4:	4770      	bx	lr
   10aa6:	bf00      	nop
   10aa8:	200013d8 	.word	0x200013d8

00010aac <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   10aac:	4a03      	ldr	r2, [pc, #12]	; (10abc <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   10aae:	4b04      	ldr	r3, [pc, #16]	; (10ac0 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   10ab0:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   10ab2:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   10ab4:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   10ab6:	800b      	strh	r3, [r1, #0]
}
   10ab8:	4770      	bx	lr
   10aba:	bf00      	nop
   10abc:	200060be 	.word	0x200060be
   10ac0:	200060c0 	.word	0x200060c0

00010ac4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   10ac4:	4a02      	ldr	r2, [pc, #8]	; (10ad0 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   10ac6:	4b03      	ldr	r3, [pc, #12]	; (10ad4 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   10ac8:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   10aca:	8019      	strh	r1, [r3, #0]
}
   10acc:	2000      	movs	r0, #0
   10ace:	4770      	bx	lr
   10ad0:	200060be 	.word	0x200060be
   10ad4:	200060c0 	.word	0x200060c0

00010ad8 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10ad8:	f04f 0c1b 	mov.w	ip, #27
   10adc:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   10ae0:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10ae4:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   10ae8:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   10aea:	8018      	strh	r0, [r3, #0]
}
   10aec:	4770      	bx	lr
   10aee:	bf00      	nop

00010af0 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10af0:	b9c0      	cbnz	r0, 10b24 <ll_phy_get+0x34>
{
   10af2:	b538      	push	{r3, r4, r5, lr}
   10af4:	460d      	mov	r5, r1
   10af6:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10af8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10afc:	4602      	mov	r2, r0
   10afe:	480a      	ldr	r0, [pc, #40]	; (10b28 <ll_phy_get+0x38>)
   10b00:	f7f9 fd5a 	bl	a5b8 <mem_get>
   10b04:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10b06:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10b08:	b950      	cbnz	r0, 10b20 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   10b0a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   10b0e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   10b12:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   10b14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   10b18:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b1c:	7023      	strb	r3, [r4, #0]
}
   10b1e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b20:	2002      	movs	r0, #2
}
   10b22:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b24:	2002      	movs	r0, #2
}
   10b26:	4770      	bx	lr
   10b28:	200013d8 	.word	0x200013d8

00010b2c <ll_phy_default_set>:
	default_phy_tx = tx;
   10b2c:	4a02      	ldr	r2, [pc, #8]	; (10b38 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   10b2e:	4b03      	ldr	r3, [pc, #12]	; (10b3c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   10b30:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   10b32:	7019      	strb	r1, [r3, #0]
}
   10b34:	2000      	movs	r0, #0
   10b36:	4770      	bx	lr
   10b38:	200060dd 	.word	0x200060dd
   10b3c:	200060dc 	.word	0x200060dc

00010b40 <ll_phy_req_send>:
{
   10b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10b42:	2800      	cmp	r0, #0
   10b44:	d143      	bne.n	10bce <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10b46:	460c      	mov	r4, r1
   10b48:	4616      	mov	r6, r2
   10b4a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10b4e:	4602      	mov	r2, r0
   10b50:	4823      	ldr	r0, [pc, #140]	; (10be0 <ll_phy_req_send+0xa0>)
   10b52:	461f      	mov	r7, r3
   10b54:	f7f9 fd30 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   10b58:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   10b5a:	bbc3      	cbnz	r3, 10bce <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   10b5c:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   10b60:	f015 0508 	ands.w	r5, r5, #8
   10b64:	d130      	bne.n	10bc8 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   10b66:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   10b6a:	07db      	lsls	r3, r3, #31
   10b6c:	d504      	bpl.n	10b78 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   10b6e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   10b72:	f413 6f10 	tst.w	r3, #2304	; 0x900
   10b76:	d027      	beq.n	10bc8 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   10b78:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   10b7c:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   10b80:	4299      	cmp	r1, r3
   10b82:	d11e      	bne.n	10bc2 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10b84:	f004 0407 	and.w	r4, r4, #7
   10b88:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   10b8c:	00a4      	lsls	r4, r4, #2
   10b8e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   10b92:	f007 0307 	and.w	r3, r7, #7
   10b96:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   10b9a:	f006 0601 	and.w	r6, r6, #1
   10b9e:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   10ba2:	f022 0207 	bic.w	r2, r2, #7
   10ba6:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   10baa:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10bac:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10bb0:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   10bb4:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10bb6:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   10bb8:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10bbc:	db0a      	blt.n	10bd4 <ll_phy_req_send+0x94>
}
   10bbe:	4628      	mov	r0, r5
   10bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10bc2:	250c      	movs	r5, #12
}
   10bc4:	4628      	mov	r0, r5
   10bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10bc8:	251a      	movs	r5, #26
}
   10bca:	4628      	mov	r0, r5
   10bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10bce:	2502      	movs	r5, #2
}
   10bd0:	4628      	mov	r0, r5
   10bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   10bd4:	2100      	movs	r1, #0
   10bd6:	f003 ff33 	bl	14a40 <ull_periph_latency_cancel>
}
   10bda:	4628      	mov	r0, r5
   10bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bde:	bf00      	nop
   10be0:	200013d8 	.word	0x200013d8

00010be4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10be4:	b9d8      	cbnz	r0, 10c1e <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10be6:	4602      	mov	r2, r0
{
   10be8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10bea:	480e      	ldr	r0, [pc, #56]	; (10c24 <ll_apto_get+0x40>)
   10bec:	460c      	mov	r4, r1
   10bee:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10bf2:	f7f9 fce1 	bl	a5b8 <mem_get>
   10bf6:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10bf8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10bfa:	b970      	cbnz	r0, 10c1a <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   10bfc:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   10c00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   10c02:	fb02 f303 	mul.w	r3, r2, r3
   10c06:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   10c0a:	4a07      	ldr	r2, [pc, #28]	; (10c28 <ll_apto_get+0x44>)
   10c0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10c10:	fba2 2303 	umull	r2, r3, r2, r3
   10c14:	099b      	lsrs	r3, r3, #6
   10c16:	8023      	strh	r3, [r4, #0]
}
   10c18:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c1a:	2002      	movs	r0, #2
}
   10c1c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c1e:	2002      	movs	r0, #2
}
   10c20:	4770      	bx	lr
   10c22:	bf00      	nop
   10c24:	200013d8 	.word	0x200013d8
   10c28:	10624dd3 	.word	0x10624dd3

00010c2c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10c2c:	b9e0      	cbnz	r0, 10c68 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c2e:	4602      	mov	r2, r0
{
   10c30:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c32:	480e      	ldr	r0, [pc, #56]	; (10c6c <ll_apto_set+0x40>)
   10c34:	460c      	mov	r4, r1
   10c36:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10c3a:	f7f9 fcbd 	bl	a5b8 <mem_get>
   10c3e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10c40:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10c42:	b978      	cbnz	r0, 10c64 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   10c44:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   10c48:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10c4c:	fb03 fc0c 	mul.w	ip, r3, ip
   10c50:	f242 7310 	movw	r3, #10000	; 0x2710
   10c54:	fb03 c304 	mla	r3, r3, r4, ip
   10c58:	3b01      	subs	r3, #1
   10c5a:	fbb3 f3fc 	udiv	r3, r3, ip
   10c5e:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   10c62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c64:	2002      	movs	r0, #2
}
   10c66:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c68:	2002      	movs	r0, #2
}
   10c6a:	4770      	bx	lr
   10c6c:	200013d8 	.word	0x200013d8

00010c70 <ull_conn_init>:
	err = init_reset();
   10c70:	f7fe be6e 	b.w	f950 <init_reset>

00010c74 <ull_conn_reset>:
{
   10c74:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   10c76:	f004 f8a9 	bl	14dcc <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c7a:	2200      	movs	r2, #0
   10c7c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10c80:	4815      	ldr	r0, [pc, #84]	; (10cd8 <ull_conn_reset+0x64>)
   10c82:	f7f9 fc99 	bl	a5b8 <mem_get>
   10c86:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   10c88:	f100 021c 	add.w	r2, r0, #28
   10c8c:	4601      	mov	r1, r0
   10c8e:	2005      	movs	r0, #5
   10c90:	f7fd fc16 	bl	e4c0 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10c94:	b108      	cbz	r0, 10c9a <ull_conn_reset+0x26>
   10c96:	3078      	adds	r0, #120	; 0x78
   10c98:	d10f      	bne.n	10cba <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   10c9a:	4810      	ldr	r0, [pc, #64]	; (10cdc <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   10c9c:	4910      	ldr	r1, [pc, #64]	; (10ce0 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   10c9e:	4a11      	ldr	r2, [pc, #68]	; (10ce4 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   10ca0:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   10ca2:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   10ca6:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   10ca8:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   10caa:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   10cae:	6763      	str	r3, [r4, #116]	; 0x74
}
   10cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   10cb4:	6013      	str	r3, [r2, #0]
	err = init_reset();
   10cb6:	f7fe be4b 	b.w	f950 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10cba:	4a0b      	ldr	r2, [pc, #44]	; (10ce8 <ull_conn_reset+0x74>)
   10cbc:	490b      	ldr	r1, [pc, #44]	; (10cec <ull_conn_reset+0x78>)
   10cbe:	480c      	ldr	r0, [pc, #48]	; (10cf0 <ull_conn_reset+0x7c>)
   10cc0:	f640 03e3 	movw	r3, #2275	; 0x8e3
   10cc4:	f00e fd2b 	bl	1f71e <printk>
   10cc8:	4040      	eors	r0, r0
   10cca:	f380 8811 	msr	BASEPRI, r0
   10cce:	f04f 0003 	mov.w	r0, #3
   10cd2:	df02      	svc	2
   10cd4:	e7e1      	b.n	10c9a <ull_conn_reset+0x26>
   10cd6:	bf00      	nop
   10cd8:	200013d8 	.word	0x200013d8
   10cdc:	2000068c 	.word	0x2000068c
   10ce0:	20000648 	.word	0x20000648
   10ce4:	20004c70 	.word	0x20004c70
   10ce8:	00025600 	.word	0x00025600
   10cec:	000255e8 	.word	0x000255e8
   10cf0:	000250f0 	.word	0x000250f0

00010cf4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   10cf4:	4b01      	ldr	r3, [pc, #4]	; (10cfc <ull_conn_default_tx_octets_get+0x8>)
}
   10cf6:	8818      	ldrh	r0, [r3, #0]
   10cf8:	4770      	bx	lr
   10cfa:	bf00      	nop
   10cfc:	200060be 	.word	0x200060be

00010d00 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   10d00:	4b01      	ldr	r3, [pc, #4]	; (10d08 <ull_conn_default_tx_time_get+0x8>)
}
   10d02:	8818      	ldrh	r0, [r3, #0]
   10d04:	4770      	bx	lr
   10d06:	bf00      	nop
   10d08:	200060c0 	.word	0x200060c0

00010d0c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   10d0c:	4b01      	ldr	r3, [pc, #4]	; (10d14 <ull_conn_default_phy_tx_get+0x8>)
}
   10d0e:	7818      	ldrb	r0, [r3, #0]
   10d10:	4770      	bx	lr
   10d12:	bf00      	nop
   10d14:	200060dd 	.word	0x200060dd

00010d18 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   10d18:	4b01      	ldr	r3, [pc, #4]	; (10d20 <ull_conn_default_phy_rx_get+0x8>)
}
   10d1a:	7818      	ldrb	r0, [r3, #0]
   10d1c:	4770      	bx	lr
   10d1e:	bf00      	nop
   10d20:	200060dc 	.word	0x200060dc

00010d24 <ull_conn_setup>:
{
   10d24:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   10d26:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   10d28:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   10d2a:	681d      	ldr	r5, [r3, #0]
   10d2c:	782b      	ldrb	r3, [r5, #0]
{
   10d2e:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   10d30:	b193      	cbz	r3, 10d58 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   10d32:	696b      	ldr	r3, [r5, #20]
   10d34:	b163      	cbz	r3, 10d50 <ull_conn_setup+0x2c>
   10d36:	4a0b      	ldr	r2, [pc, #44]	; (10d64 <ull_conn_setup+0x40>)
   10d38:	490b      	ldr	r1, [pc, #44]	; (10d68 <ull_conn_setup+0x44>)
   10d3a:	480c      	ldr	r0, [pc, #48]	; (10d6c <ull_conn_setup+0x48>)
   10d3c:	f240 33ed 	movw	r3, #1005	; 0x3ed
   10d40:	f00e fced 	bl	1f71e <printk>
   10d44:	4040      	eors	r0, r0
   10d46:	f380 8811 	msr	BASEPRI, r0
   10d4a:	f04f 0003 	mov.w	r0, #3
   10d4e:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   10d50:	4b07      	ldr	r3, [pc, #28]	; (10d70 <ull_conn_setup+0x4c>)
   10d52:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   10d56:	bd38      	pop	{r3, r4, r5, pc}
   10d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   10d5c:	4608      	mov	r0, r1
   10d5e:	f7fe bffb 	b.w	fd58 <conn_setup_adv_scan_disabled_cb>
   10d62:	bf00      	nop
   10d64:	00025600 	.word	0x00025600
   10d68:	000254e8 	.word	0x000254e8
   10d6c:	000250f0 	.word	0x000250f0
   10d70:	0000fd59 	.word	0x0000fd59

00010d74 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   10d74:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   10d76:	88da      	ldrh	r2, [r3, #6]
   10d78:	2a00      	cmp	r2, #0
   10d7a:	f040 80d3 	bne.w	10f24 <ull_conn_rx+0x1b0>
{
   10d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d82:	460e      	mov	r6, r1
   10d84:	b085      	sub	sp, #20
   10d86:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10d88:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10d8c:	48b0      	ldr	r0, [pc, #704]	; (11050 <ull_conn_rx+0x2dc>)
   10d8e:	f7f9 fc13 	bl	a5b8 <mem_get>
   10d92:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   10d94:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   10d96:	2800      	cmp	r0, #0
   10d98:	f040 80bd 	bne.w	10f16 <ull_conn_rx+0x1a2>
	pdu_rx = (void *)(*rx)->pdu;
   10d9c:	6835      	ldr	r5, [r6, #0]
	switch (pdu_rx->ll_id) {
   10d9e:	7f2a      	ldrb	r2, [r5, #28]
   10da0:	f002 0203 	and.w	r2, r2, #3
   10da4:	2a03      	cmp	r2, #3
   10da6:	d12c      	bne.n	10e02 <ull_conn_rx+0x8e>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10da8:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
	opcode = pdu_rx->llctrl.opcode;
   10dac:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10db0:	f01c 0f01 	tst.w	ip, #1
	pdu_rx = (void *)(*rx)->pdu;
   10db4:	f105 021c 	add.w	r2, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10db8:	d03d      	beq.n	10e36 <ull_conn_rx+0xc2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   10dba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10dbe:	2b00      	cmp	r3, #0
   10dc0:	f2c0 80b4 	blt.w	10f2c <ull_conn_rx+0x1b8>
	return (!conn->lll.role &&
   10dc4:	f01c 0f04 	tst.w	ip, #4
   10dc8:	f040 8105 	bne.w	10fd6 <ull_conn_rx+0x262>
		((!conn->llcp_enc.refresh &&
   10dcc:	f1b8 0f02 	cmp.w	r8, #2
   10dd0:	f000 8131 	beq.w	11036 <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10dd4:	f1b8 0f05 	cmp.w	r8, #5
   10dd8:	f000 8574 	beq.w	118c4 <ull_conn_rx+0xb50>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10ddc:	f1b8 0f06 	cmp.w	r8, #6
   10de0:	f000 83e2 	beq.w	115a8 <ull_conn_rx+0x834>
   10de4:	f1b8 0f0d 	cmp.w	r8, #13
   10de8:	f000 845f 	beq.w	116aa <ull_conn_rx+0x936>
   10dec:	f1b8 0f11 	cmp.w	r8, #17
   10df0:	f000 849f 	beq.w	11732 <ull_conn_rx+0x9be>
		conn->llcp_terminate.reason_final =
   10df4:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10df6:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   10df8:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   10dfc:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10dfe:	712b      	strb	r3, [r5, #4]
		return 0;
   10e00:	e00a      	b.n	10e18 <ull_conn_rx+0xa4>
	switch (pdu_rx->ll_id) {
   10e02:	b962      	cbnz	r2, 10e1e <ull_conn_rx+0xaa>
		if (conn->llcp_enc.pause_rx) {
   10e04:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   10e08:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   10e0a:	bf44      	itt	mi
   10e0c:	233d      	movmi	r3, #61	; 0x3d
   10e0e:	f884 3143 	strbmi.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10e12:	2301      	movs	r3, #1
   10e14:	712b      	strb	r3, [r5, #4]
	return 0;
   10e16:	2000      	movs	r0, #0
}
   10e18:	b005      	add	sp, #20
   10e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   10e1e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   10e22:	07d2      	lsls	r2, r2, #31
   10e24:	d5f7      	bpl.n	10e16 <ull_conn_rx+0xa2>
			conn->llcp_terminate.reason_final =
   10e26:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10e28:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   10e2a:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10e2e:	712a      	strb	r2, [r5, #4]
}
   10e30:	b005      	add	sp, #20
   10e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   10e36:	f1b8 0f19 	cmp.w	r8, #25
   10e3a:	d81f      	bhi.n	10e7c <ull_conn_rx+0x108>
   10e3c:	e8df f018 	tbh	[pc, r8, lsl #1]
   10e40:	014f0184 	.word	0x014f0184
   10e44:	001a00fb 	.word	0x001a00fb
   10e48:	053d0536 	.word	0x053d0536
   10e4c:	02af03b4 	.word	0x02af03b4
   10e50:	04f802aa 	.word	0x04f802aa
   10e54:	055c04ae 	.word	0x055c04ae
   10e58:	043503e0 	.word	0x043503e0
   10e5c:	0285029a 	.word	0x0285029a
   10e60:	047901f3 	.word	0x047901f3
   10e64:	01450410 	.word	0x01450410
   10e68:	010c010c 	.word	0x010c010c
   10e6c:	034c0389 	.word	0x034c0389
   10e70:	02da0310 	.word	0x02da0310
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   10e74:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10e78:	2b00      	cmp	r3, #0
   10e7a:	db65      	blt.n	10f48 <ull_conn_rx+0x1d4>
	if (conn->common.txn_lock) {
   10e7c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10e80:	079f      	lsls	r7, r3, #30
   10e82:	d4c6      	bmi.n	10e12 <ull_conn_rx+0x9e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10e84:	4873      	ldr	r0, [pc, #460]	; (11054 <ull_conn_rx+0x2e0>)
   10e86:	f7f9 fb65 	bl	a554 <mem_acquire>
	if (!tx) {
   10e8a:	2800      	cmp	r0, #0
   10e8c:	f000 85dd 	beq.w	11a4a <ull_conn_rx+0xcd6>
	conn->common.txn_lock = 1U;
   10e90:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10e94:	f043 0302 	orr.w	r3, r3, #2
   10e98:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10e9c:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   10e9e:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10ea2:	f043 0303 	orr.w	r3, r3, #3
   10ea6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   10ea8:	2302      	movs	r3, #2
   10eaa:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   10eac:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10eb0:	2307      	movs	r3, #7
   10eb2:	71c3      	strb	r3, [r0, #7]
	if (
   10eb4:	b1f2      	cbz	r2, 10ef4 <ull_conn_rx+0x180>
	    !conn->llcp_enc.pause_tx &&
   10eb6:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   10eba:	079e      	lsls	r6, r3, #30
   10ebc:	d41a      	bmi.n	10ef4 <ull_conn_rx+0x180>
	    !conn->llcp_phy.pause_tx &&
   10ebe:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   10ec2:	07d9      	lsls	r1, r3, #31
   10ec4:	d416      	bmi.n	10ef4 <ull_conn_rx+0x180>
		if (conn->tx_head == conn->tx_data) {
   10ec6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   10eca:	429a      	cmp	r2, r3
   10ecc:	f000 85da 	beq.w	11a84 <ull_conn_rx+0xd10>
		} else if (!conn->tx_ctrl) {
   10ed0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	f000 8623 	beq.w	11b20 <ull_conn_rx+0xdac>
	tx->next = conn->tx_ctrl_last->next;
   10eda:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   10ede:	6813      	ldr	r3, [r2, #0]
   10ee0:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10ee2:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   10ee4:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   10ee6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10eea:	2a00      	cmp	r2, #0
   10eec:	d191      	bne.n	10e12 <ull_conn_rx+0x9e>
		conn->tx_data_last = tx;
   10eee:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10ef2:	e78e      	b.n	10e12 <ull_conn_rx+0x9e>
		if (!conn->tx_ctrl) {
   10ef4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10ef8:	2b00      	cmp	r3, #0
   10efa:	f000 859c 	beq.w	11a36 <ull_conn_rx+0xcc2>
	tx->next = conn->tx_ctrl_last->next;
   10efe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10f02:	681a      	ldr	r2, [r3, #0]
   10f04:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10f06:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10f08:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   10f0a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10f0e:	2a00      	cmp	r2, #0
   10f10:	f47f af7f 	bne.w	10e12 <ull_conn_rx+0x9e>
   10f14:	e7eb      	b.n	10eee <ull_conn_rx+0x17a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f16:	6833      	ldr	r3, [r6, #0]
   10f18:	2201      	movs	r2, #1
		return 0;
   10f1a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f1c:	711a      	strb	r2, [r3, #4]
}
   10f1e:	b005      	add	sp, #20
   10f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f24:	2201      	movs	r2, #1
   10f26:	711a      	strb	r2, [r3, #4]
		return 0;
   10f28:	2000      	movs	r0, #0
}
   10f2a:	4770      	bx	lr
	       (conn->lll.role &&
   10f2c:	f01c 0f04 	tst.w	ip, #4
   10f30:	d079      	beq.n	11026 <ull_conn_rx+0x2b2>
		 (conn->llcp_enc.refresh &&
   10f32:	f1b8 0f02 	cmp.w	r8, #2
   10f36:	d07e      	beq.n	11036 <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10f38:	f1b8 0f0b 	cmp.w	r8, #11
   10f3c:	f000 85eb 	beq.w	11b16 <ull_conn_rx+0xda2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10f40:	f1b8 0f03 	cmp.w	r8, #3
   10f44:	f47f af4a 	bne.w	10ddc <ull_conn_rx+0x68>
		if (!conn->lll.role ||
   10f48:	7f6b      	ldrb	r3, [r5, #29]
   10f4a:	2b17      	cmp	r3, #23
   10f4c:	d196      	bne.n	10e7c <ull_conn_rx+0x108>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   10f4e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   10f52:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10f56:	1a9b      	subs	r3, r3, r2
   10f58:	f003 0303 	and.w	r3, r3, #3
   10f5c:	2b02      	cmp	r3, #2
   10f5e:	f001 8199 	beq.w	12294 <ull_conn_rx+0x1520>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   10f62:	2208      	movs	r2, #8
   10f64:	f105 0120 	add.w	r1, r5, #32
   10f68:	f204 1069 	addw	r0, r4, #361	; 0x169
   10f6c:	f00f fbdc 	bl	20728 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   10f70:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   10f74:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   10f78:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   10f7c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   10f80:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f84:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   10f86:	2301      	movs	r3, #1
   10f88:	f363 0201 	bfi	r2, r3, #0, #2
   10f8c:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f90:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   10f92:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   10f96:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   10f98:	3b02      	subs	r3, #2
   10f9a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   10f9e:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   10fa0:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   10fa4:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   10fa8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   10fac:	f00f fbbc 	bl	20728 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   10fb0:	2204      	movs	r2, #4
   10fb2:	f105 0132 	add.w	r1, r5, #50	; 0x32
   10fb6:	f104 0094 	add.w	r0, r4, #148	; 0x94
   10fba:	f00f fbb5 	bl	20728 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   10fbe:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   10fc2:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   10fc6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   10fca:	f043 0301 	orr.w	r3, r3, #1
   10fce:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   10fd2:	2000      	movs	r0, #0

		break;
   10fd4:	e720      	b.n	10e18 <ull_conn_rx+0xa4>
		 (conn->llcp_enc.refresh &&
   10fd6:	f1b8 0f02 	cmp.w	r8, #2
   10fda:	d02c      	beq.n	11036 <ull_conn_rx+0x2c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10fdc:	f1b8 0f0b 	cmp.w	r8, #11
   10fe0:	f000 8537 	beq.w	11a52 <ull_conn_rx+0xcde>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10fe4:	f1b8 0f04 	cmp.w	r8, #4
   10fe8:	f47f aef4 	bne.w	10dd4 <ull_conn_rx+0x60>
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		if (conn->lll.role ||
   10fec:	7f6b      	ldrb	r3, [r5, #29]
   10fee:	2b0d      	cmp	r3, #13
   10ff0:	f47f af44 	bne.w	10e7c <ull_conn_rx+0x108>
		    PDU_DATA_LLCTRL_LEN(enc_rsp) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		/* things sent by peripheral stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[8],
   10ff4:	2208      	movs	r2, #8
   10ff6:	f105 0120 	add.w	r1, r5, #32
   10ffa:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   10ffe:	f00f fb93 	bl	20728 <memcpy>
		       &pdu_rx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
   11002:	2204      	movs	r2, #4
   11004:	f105 0128 	add.w	r1, r5, #40	; 0x28
   11008:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1100c:	f00f fb8c 	bl	20728 <memcpy>
		       &pdu_rx->llctrl.enc_rsp.ivs[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   11010:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11014:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   11016:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1101a:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   1101c:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   11020:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11022:	7111      	strb	r1, [r2, #4]

		break;
   11024:	e6f8      	b.n	10e18 <ull_conn_rx+0xa4>
		((!conn->llcp_enc.refresh &&
   11026:	f1b8 0f07 	cmp.w	r8, #7
   1102a:	f000 81b8 	beq.w	1139e <ull_conn_rx+0x62a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1102e:	f1b8 0f02 	cmp.w	r8, #2
   11032:	f47f aed3 	bne.w	10ddc <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   11036:	7f6b      	ldrb	r3, [r5, #29]
   11038:	2b02      	cmp	r3, #2
   1103a:	f47f af1f 	bne.w	10e7c <ull_conn_rx+0x108>
	conn->llcp_terminate.reason_final =
   1103e:	f895 2020 	ldrb.w	r2, [r5, #32]
   11042:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11046:	2301      	movs	r3, #1
	int nack = 0;
   11048:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1104a:	712b      	strb	r3, [r5, #4]
}
   1104c:	e6e4      	b.n	10e18 <ull_conn_rx+0xa4>
   1104e:	bf00      	nop
   11050:	200013d8 	.word	0x200013d8
   11054:	20004d04 	.word	0x20004d04
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   11058:	7f6b      	ldrb	r3, [r5, #29]
   1105a:	2b09      	cmp	r3, #9
   1105c:	f47f af0e 	bne.w	10e7c <ull_conn_rx+0x108>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11060:	f1b8 0f14 	cmp.w	r8, #20
   11064:	f000 8566 	beq.w	11b34 <ull_conn_rx+0xdc0>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11068:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1106c:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   11070:	4293      	cmp	r3, r2
   11072:	f001 8133 	beq.w	122dc <ull_conn_rx+0x1568>
	eff_rx_octets = conn->lll.max_rx_octets;
   11076:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   1107a:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1107e:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   11082:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   11086:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   1108a:	2300      	movs	r3, #0
	       tx) ||
   1108c:	f001 0107 	and.w	r1, r1, #7
   11090:	2902      	cmp	r1, #2
   11092:	f000 8570 	beq.w	11b76 <ull_conn_rx+0xe02>
   11096:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1109a:	f1b8 0f15 	cmp.w	r8, #21
   1109e:	f43f aeba 	beq.w	10e16 <ull_conn_rx+0xa2>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   110a2:	4618      	mov	r0, r3
   110a4:	49d1      	ldr	r1, [pc, #836]	; (113ec <ull_conn_rx+0x678>)
   110a6:	f7f9 fa6f 	bl	a588 <mem_release>
			if (conn->llcp_length.state ==
   110aa:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   110ae:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   110b2:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   110b6:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   110ba:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   110bc:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   110c0:	f47f aea9 	bne.w	10e16 <ull_conn_rx+0xa2>
				return -EBUSY;
   110c4:	f06f 000f 	mvn.w	r0, #15
   110c8:	e6a6      	b.n	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   110ca:	7f6a      	ldrb	r2, [r5, #29]
   110cc:	2a01      	cmp	r2, #1
   110ce:	f47f aed5 	bne.w	10e7c <ull_conn_rx+0x108>
		conn->procedure_expire = 0U;
   110d2:	2300      	movs	r3, #0
   110d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   110d8:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110da:	712a      	strb	r2, [r5, #4]
		break;
   110dc:	e69c      	b.n	10e18 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
   110de:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   110e2:	2b00      	cmp	r3, #0
   110e4:	f6bf aeca 	bge.w	10e7c <ull_conn_rx+0x108>
   110e8:	7f6b      	ldrb	r3, [r5, #29]
   110ea:	2b08      	cmp	r3, #8
   110ec:	f47f aec6 	bne.w	10e7c <ull_conn_rx+0x108>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   110f0:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   110f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   110f6:	1af3      	subs	r3, r6, r3
   110f8:	041f      	lsls	r7, r3, #16
   110fa:	f101 80a1 	bmi.w	12240 <ull_conn_rx+0x14cc>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   110fe:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11102:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   11106:	1a9b      	subs	r3, r3, r2
   11108:	f003 0303 	and.w	r3, r3, #3
   1110c:	2b02      	cmp	r3, #2
   1110e:	f001 808f 	beq.w	12230 <ull_conn_rx+0x14bc>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   11112:	2205      	movs	r2, #5
   11114:	f105 0120 	add.w	r1, r5, #32
   11118:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1111c:	f00f fb04 	bl	20728 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   11120:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   11124:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   11128:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   1112c:	f36f 0200 	bfc	r2, #0, #1
   11130:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   11134:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   11136:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11138:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   1113a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   1113e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   11142:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11144:	712a      	strb	r2, [r5, #4]
		if (err) {
   11146:	e667      	b.n	10e18 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
   11148:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1114c:	2b00      	cmp	r3, #0
   1114e:	f6bf ae95 	bge.w	10e7c <ull_conn_rx+0x108>
   11152:	7f6b      	ldrb	r3, [r5, #29]
   11154:	2b0c      	cmp	r3, #12
   11156:	f47f ae91 	bne.w	10e7c <ull_conn_rx+0x108>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1115a:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1115e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11160:	1acb      	subs	r3, r1, r3
   11162:	041b      	lsls	r3, r3, #16
   11164:	f101 806c 	bmi.w	12240 <ull_conn_rx+0x14cc>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11168:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1116c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   11170:	1a9b      	subs	r3, r3, r2
   11172:	f003 0303 	and.w	r3, r3, #3
   11176:	2b02      	cmp	r3, #2
   11178:	f001 805a 	beq.w	12230 <ull_conn_rx+0x14bc>
	if (!conn_upd_curr) {
   1117c:	4b9c      	ldr	r3, [pc, #624]	; (113f0 <ull_conn_rx+0x67c>)
   1117e:	681a      	ldr	r2, [r3, #0]
   11180:	2a00      	cmp	r2, #0
   11182:	f001 8070 	beq.w	12266 <ull_conn_rx+0x14f2>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   11186:	f895 3020 	ldrb.w	r3, [r5, #32]
   1118a:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1118e:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   11192:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11196:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   1119a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1119e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   111a2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   111a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   111aa:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   111ae:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   111b2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   111b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   111ba:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   111be:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   111c2:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   111c6:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   111ca:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   111ce:	f023 030f 	bic.w	r3, r3, #15
   111d2:	f043 0308 	orr.w	r3, r3, #8
   111d6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   111da:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   111de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   111e2:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   111e6:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   111e8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   111ec:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   111f0:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   111f2:	6832      	ldr	r2, [r6, #0]
   111f4:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   111f6:	6832      	ldr	r2, [r6, #0]
   111f8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   111fc:	2300      	movs	r3, #0
   111fe:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11200:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   11204:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   11208:	4293      	cmp	r3, r2
   1120a:	d007      	beq.n	1121c <ull_conn_rx+0x4a8>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   1120c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11210:	f003 030e 	and.w	r3, r3, #14
   11214:	2b04      	cmp	r3, #4
   11216:	d101      	bne.n	1121c <ull_conn_rx+0x4a8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11218:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   1121c:	2300      	movs	r3, #0
   1121e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   11222:	4618      	mov	r0, r3
		break;
   11224:	e5f8      	b.n	10e18 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
   11226:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1122a:	2b00      	cmp	r3, #0
   1122c:	f6ff ae26 	blt.w	10e7c <ull_conn_rx+0x108>
   11230:	7f6b      	ldrb	r3, [r5, #29]
   11232:	2b18      	cmp	r3, #24
   11234:	f47f ae22 	bne.w	10e7c <ull_conn_rx+0x108>
		if (!conn->lll.role &&
   11238:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1123c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   11240:	429a      	cmp	r2, r3
   11242:	f43f ade6 	beq.w	10e12 <ull_conn_rx+0x9e>
		    (conn->llcp_conn_param.state ==
   11246:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		     conn->llcp_conn_param.ack) &&
   1124a:	f003 030f 	and.w	r3, r3, #15
   1124e:	2b04      	cmp	r3, #4
   11250:	f47f addf 	bne.w	10e12 <ull_conn_rx+0x9e>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11254:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   11258:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1125c:	2b05      	cmp	r3, #5
   1125e:	f240 86b7 	bls.w	11fd0 <ull_conn_rx+0x125c>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11262:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   11264:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11266:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1126a:	f200 86b1 	bhi.w	11fd0 <ull_conn_rx+0x125c>
			    (interval_max > 3200) ||
   1126e:	428b      	cmp	r3, r1
   11270:	f200 86ae 	bhi.w	11fd0 <ull_conn_rx+0x125c>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11274:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   11276:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   11278:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1127c:	f080 86a8 	bcs.w	11fd0 <ull_conn_rx+0x125c>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11280:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   11282:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   11286:	f1ae 020a 	sub.w	r2, lr, #10
   1128a:	f640 4876 	movw	r8, #3190	; 0xc76
   1128e:	b292      	uxth	r2, r2
   11290:	4542      	cmp	r2, r8
   11292:	f200 869d 	bhi.w	11fd0 <ull_conn_rx+0x125c>
			     ((latency + 1) * interval_max)) ||
   11296:	3301      	adds	r3, #1
   11298:	b29b      	uxth	r3, r3
   1129a:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   1129e:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   112a2:	f080 8695 	bcs.w	11fd0 <ull_conn_rx+0x125c>
			     ((latency + 1) * interval_max)) ||
   112a6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   112aa:	4291      	cmp	r1, r2
   112ac:	f0c0 8690 	bcc.w	11fd0 <ull_conn_rx+0x125c>
			conn->llcp_conn_param.preferred_periodicity =
   112b0:	f884 2190 	strb.w	r2, [r4, #400]	; 0x190
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   112b4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   112b8:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   112bc:	2301      	movs	r3, #1
   112be:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   112c2:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   112c4:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   112c8:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   112cc:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->procedure_expire = 0U;
   112d0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   112d4:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   112d8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   112dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   112e0:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   112e4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   112e8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   112ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   112f0:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   112f4:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   112f8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   112fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   11300:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   11304:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   11308:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1130c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   11310:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   11314:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   11318:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1131c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   11320:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   11324:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   11328:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1132c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   11330:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   11334:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   11338:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1133c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset5);
   11340:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   11344:	f8a4 319e 	strh.w	r3, [r4, #414]	; 0x19e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11348:	e563      	b.n	10e12 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1134a:	7f6b      	ldrb	r3, [r5, #29]
   1134c:	2b18      	cmp	r3, #24
   1134e:	f47f ad95 	bne.w	10e7c <ull_conn_rx+0x108>
	return conn_upd_curr && (conn_upd_curr != conn);
   11352:	4927      	ldr	r1, [pc, #156]	; (113f0 <ull_conn_rx+0x67c>)
   11354:	680b      	ldr	r3, [r1, #0]
   11356:	2b00      	cmp	r3, #0
   11358:	f000 83a7 	beq.w	11aaa <ull_conn_rx+0xd36>
   1135c:	429c      	cmp	r4, r3
   1135e:	f000 83a4 	beq.w	11aaa <ull_conn_rx+0xd36>
			nack = reject_ext_ind_send(conn, *rx,
   11362:	2320      	movs	r3, #32
   11364:	220f      	movs	r2, #15
   11366:	4629      	mov	r1, r5
   11368:	4620      	mov	r0, r4
}
   1136a:	b005      	add	sp, #20
   1136c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   11370:	f7fe be36 	b.w	ffe0 <reject_ext_ind_send>
		if (conn->lll.role ||
   11374:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11378:	2b00      	cmp	r3, #0
   1137a:	f6ff ad7f 	blt.w	10e7c <ull_conn_rx+0x108>
   1137e:	7f6b      	ldrb	r3, [r5, #29]
   11380:	2b09      	cmp	r3, #9
   11382:	f47f ad7b 	bne.w	10e7c <ull_conn_rx+0x108>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   11386:	4629      	mov	r1, r5
   11388:	4620      	mov	r0, r4
}
   1138a:	b005      	add	sp, #20
   1138c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   11390:	f7fe bda4 	b.w	fedc <feature_rsp_send>
		if (!conn->lll.role ||
   11394:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11398:	2b00      	cmp	r3, #0
   1139a:	dbf0      	blt.n	1137e <ull_conn_rx+0x60a>
   1139c:	e56e      	b.n	10e7c <ull_conn_rx+0x108>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1139e:	7f6b      	ldrb	r3, [r5, #29]
   113a0:	2b02      	cmp	r3, #2
   113a2:	f47f ad6b 	bne.w	10e7c <ull_conn_rx+0x108>
		} else if ((conn->llcp_conn_param.ack !=
   113a6:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
			    conn->llcp_conn_param.req) &&
   113aa:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   113ae:	428b      	cmp	r3, r1
			   (llctrl->unknown_rsp.type ==
   113b0:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   113b4:	d002      	beq.n	113bc <ull_conn_rx+0x648>
			    conn->llcp_conn_param.req) &&
   113b6:	2b0f      	cmp	r3, #15
   113b8:	f000 856f 	beq.w	11e9a <ull_conn_rx+0x1126>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   113bc:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   113c0:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   113c4:	4291      	cmp	r1, r2
   113c6:	d002      	beq.n	113ce <ull_conn_rx+0x65a>
   113c8:	2b14      	cmp	r3, #20
   113ca:	f000 85ec 	beq.w	11fa6 <ull_conn_rx+0x1232>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   113ce:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   113d2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   113d6:	428a      	cmp	r2, r1
   113d8:	d002      	beq.n	113e0 <ull_conn_rx+0x66c>
   113da:	2b16      	cmp	r3, #22
   113dc:	f000 864d 	beq.w	1207a <ull_conn_rx+0x1306>
			switch (llctrl->unknown_rsp.type) {
   113e0:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   113e2:	bf04      	itt	eq
   113e4:	2301      	moveq	r3, #1
   113e6:	712b      	strbeq	r3, [r5, #4]
				break;
   113e8:	e718      	b.n	1121c <ull_conn_rx+0x4a8>
   113ea:	bf00      	nop
   113ec:	20004d04 	.word	0x20004d04
   113f0:	20004c70 	.word	0x20004c70
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   113f4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   113f8:	2b00      	cmp	r3, #0
   113fa:	f6ff ad3f 	blt.w	10e7c <ull_conn_rx+0x108>
   113fe:	7f6b      	ldrb	r3, [r5, #29]
   11400:	2b03      	cmp	r3, #3
   11402:	f47f ad3b 	bne.w	10e7c <ull_conn_rx+0x108>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   11406:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   1140a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   1140e:	f895 2020 	ldrb.w	r2, [r5, #32]
   11412:	430b      	orrs	r3, r1
   11414:	f003 0307 	and.w	r3, r3, #7
   11418:	4213      	tst	r3, r2
   1141a:	f43f acfc 	beq.w	10e16 <ull_conn_rx+0xa2>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1141e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11422:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   11426:	1a9b      	subs	r3, r3, r2
   11428:	f003 0303 	and.w	r3, r3, #3
   1142c:	2b02      	cmp	r3, #2
   1142e:	f43f acf2 	beq.w	10e16 <ull_conn_rx+0xa2>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   11432:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   11436:	f003 ff2b 	bl	15290 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   1143a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.chan_map.initiate = 1U;
   1143e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->llcp_type = LLCP_CHAN_MAP;
   11442:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   11444:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   11446:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1144a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1144e:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   11450:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11454:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   11456:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	int nack = 0;
   1145a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1145c:	7111      	strb	r1, [r2, #4]

		break;
   1145e:	e4db      	b.n	10e18 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
   11460:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11464:	2b00      	cmp	r3, #0
   11466:	f6bf ad09 	bge.w	10e7c <ull_conn_rx+0x108>
   1146a:	7f6b      	ldrb	r3, [r5, #29]
   1146c:	2b05      	cmp	r3, #5
   1146e:	f47f ad05 	bne.w	10e7c <ull_conn_rx+0x108>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   11472:	f895 2020 	ldrb.w	r2, [r5, #32]
   11476:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1147a:	4313      	orrs	r3, r2
   1147c:	f013 0307 	ands.w	r3, r3, #7
   11480:	f040 8638 	bne.w	120f4 <ull_conn_rx+0x1380>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11484:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11488:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   1148c:	428a      	cmp	r2, r1
   1148e:	f43f acc0 	beq.w	10e12 <ull_conn_rx+0x9e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   11492:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11496:	f002 0203 	and.w	r2, r2, #3
   1149a:	2a02      	cmp	r2, #2
   1149c:	f47f acb9 	bne.w	10e12 <ull_conn_rx+0x9e>
		conn->llcp_phy.pause_tx = 0U;
   114a0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   114a4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   114a8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   114ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   114b0:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   114b4:	4608      	mov	r0, r1
   114b6:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   114ba:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   114be:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   114c2:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   114c6:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   114ca:	f040 8723 	bne.w	12314 <ull_conn_rx+0x15a0>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   114ce:	6833      	ldr	r3, [r6, #0]
   114d0:	2101      	movs	r1, #1
   114d2:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   114d4:	4610      	mov	r0, r2
   114d6:	e49f      	b.n	10e18 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
   114d8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   114dc:	2b00      	cmp	r3, #0
   114de:	f6ff accd 	blt.w	10e7c <ull_conn_rx+0x108>
   114e2:	7f6b      	ldrb	r3, [r5, #29]
   114e4:	2b03      	cmp	r3, #3
   114e6:	f47f acc9 	bne.w	10e7c <ull_conn_rx+0x108>
		if (!conn->lll.role &&
   114ea:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   114ee:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   114f2:	429a      	cmp	r2, r3
   114f4:	f43f ac8d 	beq.w	10e12 <ull_conn_rx+0x9e>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   114f8:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   114fc:	f002 0303 	and.w	r3, r2, #3
   11500:	2b02      	cmp	r3, #2
   11502:	f47f ac86 	bne.w	10e12 <ull_conn_rx+0x9e>
			conn->llcp_phy.tx &= p->rx_phys;
   11506:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1150a:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1150e:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   11510:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   11514:	009b      	lsls	r3, r3, #2
   11516:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   1151a:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1151e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11522:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   11526:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1152a:	d002      	beq.n	11532 <ull_conn_rx+0x7be>
   1152c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   11530:	d105      	bne.n	1153e <ull_conn_rx+0x7ca>
				conn->llcp_phy.tx = 0;
   11532:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11536:	f003 0303 	and.w	r3, r3, #3
   1153a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_phy.pause_tx = 1U;
   1153e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   11542:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   11544:	f043 0301 	orr.w	r3, r3, #1
   11548:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   1154c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11550:	e45f      	b.n	10e12 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   11552:	7f6b      	ldrb	r3, [r5, #29]
   11554:	2b03      	cmp	r3, #3
   11556:	f47f ac91 	bne.w	10e7c <ull_conn_rx+0x108>
		if (!conn->lll.role) {
   1155a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1155e:	2b00      	cmp	r3, #0
   11560:	f2c0 83f6 	blt.w	11d50 <ull_conn_rx+0xfdc>
			if ((conn->llcp_phy.ack !=
   11564:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   11568:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   1156c:	4291      	cmp	r1, r2
   1156e:	d007      	beq.n	11580 <ull_conn_rx+0x80c>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   11570:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11574:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   11578:	3b01      	subs	r3, #1
   1157a:	2b02      	cmp	r3, #2
   1157c:	f240 8579 	bls.w	12072 <ull_conn_rx+0x12fe>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11580:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11584:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   11588:	1a1b      	subs	r3, r3, r0
   1158a:	f003 0303 	and.w	r3, r3, #3
   1158e:	2b02      	cmp	r3, #2
   11590:	f000 84ce 	beq.w	11f30 <ull_conn_rx+0x11bc>
				     LLCP_ENCRYPTION)) ||
   11594:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
   11598:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1159c:	4298      	cmp	r0, r3
   1159e:	f000 851b 	beq.w	11fd8 <ull_conn_rx+0x1264>
				nack = reject_ext_ind_send(conn, *rx,
   115a2:	232a      	movs	r3, #42	; 0x2a
   115a4:	2216      	movs	r2, #22
   115a6:	e6de      	b.n	11366 <ull_conn_rx+0x5f2>
		if ((conn->llcp_req == conn->llcp_ack) ||
   115a8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   115ac:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   115b0:	429a      	cmp	r2, r3
   115b2:	f43f ac63 	beq.w	10e7c <ull_conn_rx+0x108>
   115b6:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   115ba:	2a03      	cmp	r2, #3
   115bc:	f47f ac5e 	bne.w	10e7c <ull_conn_rx+0x108>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   115c0:	7f6a      	ldrb	r2, [r5, #29]
   115c2:	2a01      	cmp	r2, #1
   115c4:	f47f ac5a 	bne.w	10e7c <ull_conn_rx+0x108>
		if (conn->lll.role) {
   115c8:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   115cc:	2a00      	cmp	r2, #0
   115ce:	f2c0 8548 	blt.w	12062 <ull_conn_rx+0x12ee>
			conn->llcp_enc.pause_rx = 0U;
   115d2:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   115d6:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   115da:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   115dc:	f02c 0c03 	bic.w	ip, ip, #3
   115e0:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   115e4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   115e8:	f01c 0f04 	tst.w	ip, #4
   115ec:	f43f ac13 	beq.w	10e16 <ull_conn_rx+0xa2>
			conn->llcp_enc.refresh = 0U;
   115f0:	f36f 0c82 	bfc	ip, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115f4:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   115f6:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
	int nack = 0;
   115fa:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115fc:	712b      	strb	r3, [r5, #4]
   115fe:	e40b      	b.n	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   11600:	7f6e      	ldrb	r6, [r5, #29]
   11602:	2e06      	cmp	r6, #6
   11604:	f47f ac3a 	bne.w	10e7c <ull_conn_rx+0x108>
	if (!conn->llcp_version.tx) {
   11608:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1160c:	07da      	lsls	r2, r3, #31
   1160e:	f140 849a 	bpl.w	11f46 <ull_conn_rx+0x11d2>
	} else if (!conn->llcp_version.rx) {
   11612:	f013 0302 	ands.w	r3, r3, #2
   11616:	f47f abfc 	bne.w	10e12 <ull_conn_rx+0x9e>
		conn->llcp_version.ack = conn->llcp_version.req;
   1161a:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   1161e:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   11622:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   11626:	f895 3020 	ldrb.w	r3, [r5, #32]
   1162a:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1162e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   11632:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   11636:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1163a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1163e:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   11642:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   11646:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1164a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1164e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   11652:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   11656:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1165a:	2000      	movs	r0, #0
   1165c:	f7ff bbdc 	b.w	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   11660:	7f6f      	ldrb	r7, [r5, #29]
   11662:	2f01      	cmp	r7, #1
   11664:	f47f ac0a 	bne.w	10e7c <ull_conn_rx+0x108>
	if (conn->common.txn_lock) {
   11668:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1166c:	f010 0602 	ands.w	r6, r0, #2
   11670:	f040 8465 	bne.w	11f3e <ull_conn_rx+0x11ca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11674:	48d6      	ldr	r0, [pc, #856]	; (119d0 <ull_conn_rx+0xc5c>)
   11676:	f7f8 ff6d 	bl	a554 <mem_acquire>
	if (!tx) {
   1167a:	4601      	mov	r1, r0
   1167c:	2800      	cmp	r0, #0
   1167e:	f000 81e4 	beq.w	11a4a <ull_conn_rx+0xcd6>
	conn->common.txn_lock = 1U;
   11682:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11686:	f043 0302 	orr.w	r3, r3, #2
   1168a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1168e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11690:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11692:	f043 0303 	orr.w	r3, r3, #3
   11696:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11698:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1169a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1169c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1169e:	f7fe fa83 	bl	fba8 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   116a2:	712f      	strb	r7, [r5, #4]
	return 0;
   116a4:	4630      	mov	r0, r6
   116a6:	f7ff bbb7 	b.w	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   116aa:	7f6b      	ldrb	r3, [r5, #29]
   116ac:	2b02      	cmp	r3, #2
   116ae:	f47f abe5 	bne.w	10e7c <ull_conn_rx+0x108>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   116b2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   116b6:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   116ba:	428b      	cmp	r3, r1
   116bc:	d004      	beq.n	116c8 <ull_conn_rx+0x954>
   116be:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   116c2:	2b03      	cmp	r3, #3
   116c4:	f000 84fd 	beq.w	120c2 <ull_conn_rx+0x134e>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   116c8:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   116cc:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   116d0:	428b      	cmp	r3, r1
   116d2:	f000 83be 	beq.w	11e52 <ull_conn_rx+0x10de>
		rej_ext_ind->error_code = rej_ind->error_code;
   116d6:	f895 2020 	ldrb.w	r2, [r5, #32]
   116da:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   116de:	2a23      	cmp	r2, #35	; 0x23
   116e0:	d012      	beq.n	11708 <ull_conn_rx+0x994>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   116e2:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   116e6:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   116ea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   116ee:	f36f 0100 	bfc	r1, #0, #1
   116f2:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   116f6:	2100      	movs	r1, #0
   116f8:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   116fc:	f3c3 0102 	ubfx	r1, r3, #0, #3
   11700:	f361 1306 	bfi	r3, r1, #4, #3
   11704:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   11708:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1170c:	075e      	lsls	r6, r3, #29
   1170e:	f57f ab80 	bpl.w	10e12 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11712:	231c      	movs	r3, #28
   11714:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   11716:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   11718:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1171c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11720:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   11722:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   11726:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1172a:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   1172c:	77ab      	strb	r3, [r5, #30]
	if (err) {
   1172e:	f7ff bb73 	b.w	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   11732:	7f6b      	ldrb	r3, [r5, #29]
   11734:	2b03      	cmp	r3, #3
   11736:	f47f aba1 	bne.w	10e7c <ull_conn_rx+0x108>
	switch (rej_ext_ind->reject_opcode) {
   1173a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1173e:	3b03      	subs	r3, #3
   11740:	2b13      	cmp	r3, #19
   11742:	f63f ab66 	bhi.w	10e12 <ull_conn_rx+0x9e>
   11746:	a101      	add	r1, pc, #4	; (adr r1, 1174c <ull_conn_rx+0x9d8>)
   11748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1174c:	000119dd 	.word	0x000119dd
   11750:	00010e13 	.word	0x00010e13
   11754:	00010e13 	.word	0x00010e13
   11758:	00010e13 	.word	0x00010e13
   1175c:	00010e13 	.word	0x00010e13
   11760:	00010e13 	.word	0x00010e13
   11764:	00010e13 	.word	0x00010e13
   11768:	00010e13 	.word	0x00010e13
   1176c:	00010e13 	.word	0x00010e13
   11770:	00010e13 	.word	0x00010e13
   11774:	00010e13 	.word	0x00010e13
   11778:	00010e13 	.word	0x00010e13
   1177c:	00011959 	.word	0x00011959
   11780:	00010e13 	.word	0x00010e13
   11784:	00010e13 	.word	0x00010e13
   11788:	00010e13 	.word	0x00010e13
   1178c:	00010e13 	.word	0x00010e13
   11790:	0001191b 	.word	0x0001191b
   11794:	00010e13 	.word	0x00010e13
   11798:	00011a1d 	.word	0x00011a1d
		if (!conn->lll.role ||
   1179c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   117a0:	2b00      	cmp	r3, #0
   117a2:	f6bf ab6b 	bge.w	10e7c <ull_conn_rx+0x108>
   117a6:	7f6e      	ldrb	r6, [r5, #29]
   117a8:	2e01      	cmp	r6, #1
   117aa:	f47f ab67 	bne.w	10e7c <ull_conn_rx+0x108>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   117ae:	4888      	ldr	r0, [pc, #544]	; (119d0 <ull_conn_rx+0xc5c>)
   117b0:	f7f8 fed0 	bl	a554 <mem_acquire>
		if (!tx) {
   117b4:	2800      	cmp	r0, #0
   117b6:	f000 8148 	beq.w	11a4a <ull_conn_rx+0xcd6>
	conn->llcp_enc.pause_rx = 1U;
   117ba:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   117be:	f022 0205 	bic.w	r2, r2, #5
   117c2:	f042 0205 	orr.w	r2, r2, #5
   117c6:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   117ca:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   117ce:	f36f 02c3 	bfc	r2, #3, #1
   117d2:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   117d6:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   117d8:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   117da:	f042 0203 	orr.w	r2, r2, #3
   117de:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   117e0:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   117e4:	210b      	movs	r1, #11
   117e6:	71c1      	strb	r1, [r0, #7]
	if (
   117e8:	2a00      	cmp	r2, #0
   117ea:	f000 8189 	beq.w	11b00 <ull_conn_rx+0xd8c>
	    !conn->llcp_enc.pause_tx &&
   117ee:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   117f2:	078e      	lsls	r6, r1, #30
   117f4:	f100 8184 	bmi.w	11b00 <ull_conn_rx+0xd8c>
	    !conn->llcp_phy.pause_tx &&
   117f8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   117fc:	07c9      	lsls	r1, r1, #31
   117fe:	f100 817f 	bmi.w	11b00 <ull_conn_rx+0xd8c>
		if (conn->tx_head == conn->tx_data) {
   11802:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11806:	428a      	cmp	r2, r1
   11808:	f000 8599 	beq.w	1233e <ull_conn_rx+0x15ca>
		} else if (!conn->tx_ctrl) {
   1180c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11810:	2900      	cmp	r1, #0
   11812:	f000 864e 	beq.w	124b2 <ull_conn_rx+0x173e>
	tx->next = conn->tx_ctrl_last->next;
   11816:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1181a:	6811      	ldr	r1, [r2, #0]
   1181c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1181e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   11820:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11824:	6802      	ldr	r2, [r0, #0]
   11826:	2a00      	cmp	r2, #0
   11828:	f47f aaf3 	bne.w	10e12 <ull_conn_rx+0x9e>
   1182c:	f7ff bb5f 	b.w	10eee <ull_conn_rx+0x17a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   11830:	7f6b      	ldrb	r3, [r5, #29]
   11832:	2b09      	cmp	r3, #9
   11834:	f47f ab22 	bne.w	10e7c <ull_conn_rx+0x108>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11838:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1183a:	4966      	ldr	r1, [pc, #408]	; (119d4 <ull_conn_rx+0xc60>)
   1183c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1183e:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11840:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   11844:	400a      	ands	r2, r1
   11846:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1184a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1184e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   11852:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11856:	4013      	ands	r3, r2
   11858:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1185c:	6a2e      	ldr	r6, [r5, #32]
   1185e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   11860:	f7fb ffbe 	bl	d7e0 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   11864:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11868:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   1186c:	4a59      	ldr	r2, [pc, #356]	; (119d4 <ull_conn_rx+0xc60>)
	conn->llcp_feature.features_peer =
   1186e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   11872:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   11876:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   11878:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   1187c:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   1187e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   11882:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   11886:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   1188a:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   1188e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   11892:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11894:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   11898:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1189a:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1189e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   118a2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   118a6:	4618      	mov	r0, r3
}
   118a8:	f7ff bab6 	b.w	10e18 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
   118ac:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   118b0:	2b00      	cmp	r3, #0
   118b2:	f6bf ab9b 	bge.w	10fec <ull_conn_rx+0x278>
   118b6:	f7ff bae1 	b.w	10e7c <ull_conn_rx+0x108>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   118ba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   118be:	2b00      	cmp	r3, #0
   118c0:	f6ff aadc 	blt.w	10e7c <ull_conn_rx+0x108>
   118c4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   118c8:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   118cc:	429a      	cmp	r2, r3
   118ce:	f43f aad5 	beq.w	10e7c <ull_conn_rx+0x108>
   118d2:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   118d6:	2b03      	cmp	r3, #3
   118d8:	f47f aad0 	bne.w	10e7c <ull_conn_rx+0x108>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   118dc:	7f6b      	ldrb	r3, [r5, #29]
   118de:	2b01      	cmp	r3, #1
   118e0:	f47f aacc 	bne.w	10e7c <ull_conn_rx+0x108>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   118e4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   118e8:	f36f 0201 	bfc	r2, #0, #2
   118ec:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	int nack = 0;
   118f0:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   118f2:	712b      	strb	r3, [r5, #4]
		break;
   118f4:	f7ff ba90 	b.w	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   118f8:	7f6b      	ldrb	r3, [r5, #29]
   118fa:	2b01      	cmp	r3, #1
   118fc:	f47f aabe 	bne.w	10e7c <ull_conn_rx+0x108>
	} else if (!conn->lll.role) {
   11900:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11904:	2b00      	cmp	r3, #0
   11906:	f280 80a8 	bge.w	11a5a <ull_conn_rx+0xce6>
		conn->lll.enc_tx = 0;
   1190a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1190e:	f36f 1304 	bfc	r3, #4, #1
   11912:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   11916:	f7ff ba7c 	b.w	10e12 <ull_conn_rx+0x9e>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1191a:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1191e:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   11922:	4293      	cmp	r3, r2
   11924:	f43f aa75 	beq.w	10e12 <ull_conn_rx+0x9e>
	conn->procedure_expire = 0U;
   11928:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1192a:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1192c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   11930:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11934:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11936:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1193a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1193e:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11940:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11942:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11946:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   11948:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1194c:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1194e:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11950:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   11952:	4618      	mov	r0, r3
   11954:	f7ff ba60 	b.w	10e18 <ull_conn_rx+0xa4>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11958:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1195c:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   11960:	4299      	cmp	r1, r3
   11962:	f43f aa56 	beq.w	10e12 <ull_conn_rx+0x9e>
	if (!lll->role && (rej_ext_ind->error_code ==
   11966:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1196a:	2900      	cmp	r1, #0
   1196c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   11970:	f2c0 85b6 	blt.w	124e0 <ull_conn_rx+0x176c>
   11974:	291a      	cmp	r1, #26
   11976:	f000 85db 	beq.w	12530 <ull_conn_rx+0x17bc>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1197a:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   1197e:	f001 000f 	and.w	r0, r1, #15
   11982:	2804      	cmp	r0, #4
   11984:	d106      	bne.n	11994 <ull_conn_rx+0xc20>
	conn_upd_curr = NULL;
   11986:	4814      	ldr	r0, [pc, #80]	; (119d8 <ull_conn_rx+0xc64>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11988:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1198c:	2300      	movs	r3, #0
   1198e:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   11990:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   11994:	06c8      	lsls	r0, r1, #27
   11996:	f57f aa3c 	bpl.w	10e12 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1199a:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1199c:	07d1      	lsls	r1, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1199e:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   119a0:	f100 8469 	bmi.w	12276 <ull_conn_rx+0x1502>
	cu->status = rej_ext_ind->error_code;
   119a4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   119a8:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   119aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   119ac:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   119b0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   119b2:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   119b4:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   119b6:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   119ba:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   119be:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   119c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   119c4:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   119c8:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   119ca:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   119cc:	f7ff ba24 	b.w	10e18 <ull_conn_rx+0xa4>
   119d0:	20004d04 	.word	0x20004d04
   119d4:	087830d0 	.word	0x087830d0
   119d8:	20004c70 	.word	0x20004c70
		if ((conn->llcp_ack != conn->llcp_req) &&
   119dc:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   119e0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   119e4:	428b      	cmp	r3, r1
   119e6:	f43f aa14 	beq.w	10e12 <ull_conn_rx+0x9e>
   119ea:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   119ee:	2b03      	cmp	r3, #3
   119f0:	f47f aa0f 	bne.w	10e12 <ull_conn_rx+0x9e>
	conn->llcp_enc.pause_rx = 0U;
   119f4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   119f8:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   119fc:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   119fe:	f022 0203 	bic.w	r2, r2, #3
   11a02:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   11a06:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   11a0a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   11a0e:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11a12:	210d      	movs	r1, #13
   11a14:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   11a16:	4618      	mov	r0, r3
   11a18:	f7ff b9fe 	b.w	10e18 <ull_conn_rx+0xa4>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11a1c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11a20:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   11a24:	428b      	cmp	r3, r1
   11a26:	f43f a9f4 	beq.w	10e12 <ull_conn_rx+0x9e>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11a2a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   11a2e:	2a23      	cmp	r2, #35	; 0x23
   11a30:	f47f ae57 	bne.w	116e2 <ull_conn_rx+0x96e>
   11a34:	e668      	b.n	11708 <ull_conn_rx+0x994>
			tx->next = conn->tx_head;
   11a36:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   11a38:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11a3c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11a40:	2a00      	cmp	r2, #0
   11a42:	f47f a9e6 	bne.w	10e12 <ull_conn_rx+0x9e>
   11a46:	f7ff ba52 	b.w	10eee <ull_conn_rx+0x17a>
			return -ENOBUFS;
   11a4a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11a4e:	f7ff b9e3 	b.w	10e18 <ull_conn_rx+0xa4>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   11a52:	7f6b      	ldrb	r3, [r5, #29]
   11a54:	2b01      	cmp	r3, #1
   11a56:	f47f aa11 	bne.w	10e7c <ull_conn_rx+0x108>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a5a:	48bc      	ldr	r0, [pc, #752]	; (11d4c <ull_conn_rx+0xfd8>)
   11a5c:	f7f8 fd7a 	bl	a554 <mem_acquire>
		if (!tx) {
   11a60:	2800      	cmp	r0, #0
   11a62:	d0f2      	beq.n	11a4a <ull_conn_rx+0xcd6>
	conn->llcp_enc.pause_rx = 1U;
   11a64:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   11a68:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   11a6c:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   11a70:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   11a74:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11a78:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   11a7a:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a7e:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11a80:	7141      	strb	r1, [r0, #5]
   11a82:	e6aa      	b.n	117da <ull_conn_rx+0xa66>
			conn->tx_data = conn->tx_data->next;
   11a84:	6813      	ldr	r3, [r2, #0]
   11a86:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11a8a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   11a8e:	2b00      	cmp	r3, #0
   11a90:	f47f aa23 	bne.w	10eda <ull_conn_rx+0x166>
			tx->next = conn->tx_head->next;
   11a94:	6813      	ldr	r3, [r2, #0]
   11a96:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   11a98:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   11a9a:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   11a9c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   11aa0:	2a00      	cmp	r2, #0
   11aa2:	f47f a9b6 	bne.w	10e12 <ull_conn_rx+0x9e>
   11aa6:	f7ff ba22 	b.w	10eee <ull_conn_rx+0x17a>
		if (!conn->lll.role) {
   11aaa:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   11aae:	2a00      	cmp	r2, #0
   11ab0:	f2c0 80b9 	blt.w	11c26 <ull_conn_rx+0xeb2>
					conn->llcp_conn_param.ack) &&
   11ab4:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   11ab8:	9201      	str	r2, [sp, #4]
   11aba:	4610      	mov	r0, r2
			if ((conn->llcp_conn_param.req !=
   11abc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   11ac0:	4282      	cmp	r2, r0
   11ac2:	d00a      	beq.n	11ada <ull_conn_rx+0xd66>
			    ((conn->llcp_conn_param.state ==
   11ac4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   11ac8:	f012 0f0b 	tst.w	r2, #11
   11acc:	f000 827d 	beq.w	11fca <ull_conn_rx+0x1256>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   11ad0:	f002 020f 	and.w	r2, r2, #15
   11ad4:	2a06      	cmp	r2, #6
   11ad6:	f000 8278 	beq.w	11fca <ull_conn_rx+0x1256>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11ada:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11ade:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   11ae2:	1a12      	subs	r2, r2, r0
   11ae4:	f002 0203 	and.w	r2, r2, #3
   11ae8:	2a02      	cmp	r2, #2
   11aea:	f000 83f1 	beq.w	122d0 <ull_conn_rx+0x155c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   11aee:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   11af2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   11af6:	4290      	cmp	r0, r2
   11af8:	f000 843a 	beq.w	12370 <ull_conn_rx+0x15fc>
				nack = reject_ext_ind_send(conn, *rx,
   11afc:	232a      	movs	r3, #42	; 0x2a
   11afe:	e431      	b.n	11364 <ull_conn_rx+0x5f0>
		if (!conn->tx_ctrl) {
   11b00:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11b04:	2900      	cmp	r1, #0
   11b06:	f47f ae86 	bne.w	11816 <ull_conn_rx+0xaa2>
			tx->next = conn->tx_head;
   11b0a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   11b0c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11b10:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   11b14:	e686      	b.n	11824 <ull_conn_rx+0xab0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   11b16:	7f6b      	ldrb	r3, [r5, #29]
   11b18:	2b01      	cmp	r3, #1
   11b1a:	f47f a9af 	bne.w	10e7c <ull_conn_rx+0x108>
   11b1e:	e6f4      	b.n	1190a <ull_conn_rx+0xb96>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11b20:	7913      	ldrb	r3, [r2, #4]
   11b22:	f003 0303 	and.w	r3, r3, #3
   11b26:	2b03      	cmp	r3, #3
   11b28:	f000 8247 	beq.w	11fba <ull_conn_rx+0x1246>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11b2c:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   11b30:	f7ff b9d5 	b.w	10ede <ull_conn_rx+0x16a>
	if (conn->common.txn_lock) {
   11b34:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11b38:	079b      	lsls	r3, r3, #30
   11b3a:	f53f a96a 	bmi.w	10e12 <ull_conn_rx+0x9e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11b3e:	4883      	ldr	r0, [pc, #524]	; (11d4c <ull_conn_rx+0xfd8>)
   11b40:	f7f8 fd08 	bl	a554 <mem_acquire>
	if (!tx) {
   11b44:	4603      	mov	r3, r0
   11b46:	2800      	cmp	r0, #0
   11b48:	f43f af7f 	beq.w	11a4a <ull_conn_rx+0xcd6>
	conn->common.txn_lock = 1U;
   11b4c:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11b50:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   11b54:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   11b58:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   11b5c:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   11b60:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   11b64:	f042 0202 	orr.w	r2, r2, #2
   11b68:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11b6c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   11b70:	428a      	cmp	r2, r1
   11b72:	f040 84be 	bne.w	124f2 <ull_conn_rx+0x177e>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   11b76:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11b78:	291a      	cmp	r1, #26
   11b7a:	f240 8270 	bls.w	1205e <ull_conn_rx+0x12ea>
			eff_tx_octets = MIN(max_rx_octets,
   11b7e:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   11b82:	4281      	cmp	r1, r0
   11b84:	bf28      	it	cs
   11b86:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11b88:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   11b8a:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   11b8e:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   11b90:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   11b92:	bf34      	ite	cc
   11b94:	46c6      	movcc	lr, r8
   11b96:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   11b9a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   11b9e:	bf34      	ite	cc
   11ba0:	4658      	movcc	r0, fp
   11ba2:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   11ba6:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11baa:	bf34      	ite	cc
   11bac:	46d4      	movcc	ip, sl
   11bae:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   11bb2:	45c6      	cmp	lr, r8
   11bb4:	f000 8316 	beq.w	121e4 <ull_conn_rx+0x1470>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11bb8:	3a01      	subs	r2, #1
   11bba:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   11bbe:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   11bc2:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   11bc6:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   11bca:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   11bce:	2b00      	cmp	r3, #0
   11bd0:	f000 836e 	beq.w	122b0 <ull_conn_rx+0x153c>
				conn->llcp_length.state =
   11bd4:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   11bd8:	2505      	movs	r5, #5
   11bda:	f365 0202 	bfi	r2, r5, #0, #3
   11bde:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   11be2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   11be6:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   11be8:	6832      	ldr	r2, [r6, #0]
   11bea:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   11bec:	6832      	ldr	r2, [r6, #0]
   11bee:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   11bf2:	2200      	movs	r2, #0
   11bf4:	6032      	str	r2, [r6, #0]
	if (tx) {
   11bf6:	2b00      	cmp	r3, #0
   11bf8:	f43f a90d 	beq.w	10e16 <ull_conn_rx+0xa2>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11bfc:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11bfe:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c00:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   11c04:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c06:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11c08:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11c0a:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   11c0c:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   11c0e:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11c12:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   11c16:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11c18:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11c1a:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11c1c:	f7fd ffc4 	bl	fba8 <ctrl_tx_sec_enqueue>
	return 0;
   11c20:	2000      	movs	r0, #0
}
   11c22:	f7ff b8f9 	b.w	10e18 <ull_conn_rx+0xa4>
			    conn->llcp_conn_param.ack) ||
   11c26:	f894 6185 	ldrb.w	r6, [r4, #389]	; 0x185
		} else if ((conn->llcp_conn_param.req ==
   11c2a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   11c2e:	42b2      	cmp	r2, r6
   11c30:	d005      	beq.n	11c3e <ull_conn_rx+0xeca>
			    conn->llcp_conn_param.ack) ||
   11c32:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11c36:	f012 0f0b 	tst.w	r2, #11
   11c3a:	f47f a8ea 	bne.w	10e12 <ull_conn_rx+0x9e>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11c3e:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   11c42:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11c46:	2a05      	cmp	r2, #5
   11c48:	d97d      	bls.n	11d46 <ull_conn_rx+0xfd2>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11c4a:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   11c4e:	fa1f f089 	uxth.w	r0, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11c52:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   11c56:	d876      	bhi.n	11d46 <ull_conn_rx+0xfd2>
			    (interval_max > 3200) ||
   11c58:	4282      	cmp	r2, r0
   11c5a:	d874      	bhi.n	11d46 <ull_conn_rx+0xfd2>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11c5c:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   11c60:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   11c64:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   11c68:	d26d      	bcs.n	11d46 <ull_conn_rx+0xfd2>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11c6a:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   11c6e:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   11c72:	f1a2 070a 	sub.w	r7, r2, #10
   11c76:	f640 4b76 	movw	fp, #3190	; 0xc76
   11c7a:	b2bf      	uxth	r7, r7
   11c7c:	455f      	cmp	r7, fp
   11c7e:	d862      	bhi.n	11d46 <ull_conn_rx+0xfd2>
			     ((latency + 1) * interval_max)) ||
   11c80:	f10c 0701 	add.w	r7, ip, #1
   11c84:	b2bf      	uxth	r7, r7
   11c86:	fb00 f707 	mul.w	r7, r0, r7
			    (timeout < 10) || (timeout > 3200) ||
   11c8a:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   11c8e:	d25a      	bcs.n	11d46 <ull_conn_rx+0xfd2>
			     ((latency + 1) * interval_max)) ||
   11c90:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   11c94:	4558      	cmp	r0, fp
   11c96:	d356      	bcc.n	11d46 <ull_conn_rx+0xfd2>
			conn->llcp_conn_param.interval_min = interval_min;
   11c98:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   11c9c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   11ca0:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   11ca4:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   11ca8:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11cac:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   11cb0:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   11cb4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11cb8:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   11cbc:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   11cc0:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   11cc4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   11cc8:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   11ccc:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   11cd0:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   11cd4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   11cd8:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   11cdc:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   11ce0:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   11ce4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   11ce8:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   11cec:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   11cf0:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   11cf4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   11cf8:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   11cfc:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   11d00:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   11d04:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   11d08:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   11d0c:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   11d10:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   11d14:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   11d18:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   11d1c:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   11d1e:	42b8      	cmp	r0, r7
   11d20:	f000 8444 	beq.w	125ac <ull_conn_rx+0x1838>
				conn->llcp_conn_param.state =
   11d24:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11d28:	2003      	movs	r0, #3
   11d2a:	f360 0203 	bfi	r2, r0, #0, #4
   11d2e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   11d32:	3e01      	subs	r6, #1
   11d34:	f884 6185 	strb.w	r6, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   11d38:	2b00      	cmp	r3, #0
   11d3a:	f47f a86c 	bne.w	10e16 <ull_conn_rx+0xa2>
		conn_upd_curr = conn;
   11d3e:	600c      	str	r4, [r1, #0]
	int nack = 0;
   11d40:	4618      	mov	r0, r3
   11d42:	f7ff b869 	b.w	10e18 <ull_conn_rx+0xa4>
				nack = reject_ext_ind_send(conn, *rx,
   11d46:	231e      	movs	r3, #30
   11d48:	f7ff bb0c 	b.w	11364 <ull_conn_rx+0x5f0>
   11d4c:	20004d04 	.word	0x20004d04
	if (conn->common.txn_lock) {
   11d50:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11d54:	079e      	lsls	r6, r3, #30
   11d56:	f53f a85c 	bmi.w	10e12 <ull_conn_rx+0x9e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11d5a:	48e1      	ldr	r0, [pc, #900]	; (120e0 <ull_conn_rx+0x136c>)
   11d5c:	f7f8 fbfa 	bl	a554 <mem_acquire>
	if (!tx) {
   11d60:	4602      	mov	r2, r0
   11d62:	2800      	cmp	r0, #0
   11d64:	f43f ae71 	beq.w	11a4a <ull_conn_rx+0xcd6>
	conn->common.txn_lock = 1U;
   11d68:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d6c:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   11d70:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
	conn->common.txn_lock = 1U;
   11d74:	f043 0302 	orr.w	r3, r3, #2
   11d78:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d7c:	2302      	movs	r3, #2
   11d7e:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   11d82:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d86:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   11d8a:	4283      	cmp	r3, r0
   11d8c:	d115      	bne.n	11dba <ull_conn_rx+0x1046>
		conn->llcp_phy.ack--;
   11d8e:	3b01      	subs	r3, #1
   11d90:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   11d94:	f8b4 31be 	ldrh.w	r3, [r4, #446]	; 0x1be
			conn->phy_pref_rx;
   11d98:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.tx =
   11d9c:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   11da0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   11da4:	f021 0104 	bic.w	r1, r1, #4
   11da8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   11dac:	430b      	orrs	r3, r1
		conn->procedure_expire =
   11dae:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   11db2:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
		conn->procedure_expire =
   11db6:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   11dba:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   11dbe:	f895 3020 	ldrb.w	r3, [r5, #32]
   11dc2:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   11dc6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   11dca:	f3c1 0682 	ubfx	r6, r1, #2, #3
   11dce:	4033      	ands	r3, r6
   11dd0:	009b      	lsls	r3, r3, #2
   11dd2:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   11dd6:	f001 0103 	and.w	r1, r1, #3
   11dda:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11ddc:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   11dde:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11de2:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11de4:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11de8:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11dea:	4603      	mov	r3, r0
   11dec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11df0:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   11df2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11df6:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11dfa:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11dfc:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11e00:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11e02:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e04:	7111      	strb	r1, [r2, #4]
	if (
   11e06:	2b00      	cmp	r3, #0
   11e08:	f000 80c2 	beq.w	11f90 <ull_conn_rx+0x121c>
	    !conn->llcp_enc.pause_tx &&
   11e0c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   11e10:	0788      	lsls	r0, r1, #30
   11e12:	f100 80bd 	bmi.w	11f90 <ull_conn_rx+0x121c>
	    !conn->llcp_phy.pause_tx &&
   11e16:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   11e1a:	07c9      	lsls	r1, r1, #31
   11e1c:	f100 80b8 	bmi.w	11f90 <ull_conn_rx+0x121c>
		if (conn->tx_head == conn->tx_data) {
   11e20:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11e24:	428b      	cmp	r3, r1
   11e26:	f000 83ef 	beq.w	12608 <ull_conn_rx+0x1894>
		} else if (!conn->tx_ctrl) {
   11e2a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11e2e:	2900      	cmp	r1, #0
   11e30:	f000 83e2 	beq.w	125f8 <ull_conn_rx+0x1884>
	tx->next = conn->tx_ctrl_last->next;
   11e34:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11e38:	6819      	ldr	r1, [r3, #0]
   11e3a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   11e3c:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   11e3e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11e42:	6813      	ldr	r3, [r2, #0]
   11e44:	2b00      	cmp	r3, #0
   11e46:	f47e afe4 	bne.w	10e12 <ull_conn_rx+0x9e>
		conn->tx_data_last = tx;
   11e4a:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e4e:	f7fe bfe0 	b.w	10e12 <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11e52:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   11e56:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   11e5a:	428b      	cmp	r3, r1
   11e5c:	f43f ad5d 	beq.w	1191a <ull_conn_rx+0xba6>
		rej_ext_ind->error_code = rej_ind->error_code;
   11e60:	f895 3020 	ldrb.w	r3, [r5, #32]
   11e64:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   11e68:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   11e6c:	2800      	cmp	r0, #0
   11e6e:	f2c0 825e 	blt.w	1232e <ull_conn_rx+0x15ba>
   11e72:	2b1a      	cmp	r3, #26
   11e74:	f000 835c 	beq.w	12530 <ull_conn_rx+0x17bc>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11e78:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   11e7c:	f003 000f 	and.w	r0, r3, #15
   11e80:	2804      	cmp	r0, #4
   11e82:	d106      	bne.n	11e92 <ull_conn_rx+0x111e>
	conn_upd_curr = NULL;
   11e84:	4897      	ldr	r0, [pc, #604]	; (120e4 <ull_conn_rx+0x1370>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11e86:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   11e8a:	2100      	movs	r1, #0
   11e8c:	6001      	str	r1, [r0, #0]
		conn->procedure_expire = 0U;
   11e8e:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   11e92:	06df      	lsls	r7, r3, #27
   11e94:	f57e afbd 	bpl.w	10e12 <ull_conn_rx+0x9e>
   11e98:	e57f      	b.n	1199a <ull_conn_rx+0xc26>
			conn->llcp_conn_param.disabled = 1U;
   11e9a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   11e9e:	f043 0320 	orr.w	r3, r3, #32
   11ea2:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   11ea6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11eaa:	2b00      	cmp	r3, #0
   11eac:	f2c0 81cc 	blt.w	12248 <ull_conn_rx+0x14d4>
				LL_ASSERT(conn->llcp_cu.req ==
   11eb0:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   11eb4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   11eb8:	429a      	cmp	r2, r3
   11eba:	d00e      	beq.n	11eda <ull_conn_rx+0x1166>
   11ebc:	4a8a      	ldr	r2, [pc, #552]	; (120e8 <ull_conn_rx+0x1374>)
   11ebe:	498b      	ldr	r1, [pc, #556]	; (120ec <ull_conn_rx+0x1378>)
   11ec0:	488b      	ldr	r0, [pc, #556]	; (120f0 <ull_conn_rx+0x137c>)
   11ec2:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   11ec6:	f00d fc2a 	bl	1f71e <printk>
   11eca:	4040      	eors	r0, r0
   11ecc:	f380 8811 	msr	BASEPRI, r0
   11ed0:	f04f 0003 	mov.w	r0, #3
   11ed4:	df02      	svc	2
   11ed6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   11eda:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   11ede:	2106      	movs	r1, #6
   11ee0:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   11ee4:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   11ee6:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   11ee8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   11eec:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11ef0:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   11ef2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   11ef6:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11efa:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   11efe:	00db      	lsls	r3, r3, #3
   11f00:	f022 020f 	bic.w	r2, r2, #15
   11f04:	430b      	orrs	r3, r1
   11f06:	4313      	orrs	r3, r2
   11f08:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   11f0c:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   11f10:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   11f14:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   11f18:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   11f1a:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   11f1e:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   11f22:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   11f26:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f2a:	7129      	strb	r1, [r5, #4]
				break;
   11f2c:	f7fe bf74 	b.w	10e18 <ull_conn_rx+0xa4>
				      0x03) == 0x02) &&
   11f30:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   11f34:	2b03      	cmp	r3, #3
   11f36:	f47f ab34 	bne.w	115a2 <ull_conn_rx+0x82e>
   11f3a:	f7ff bb2b 	b.w	11594 <ull_conn_rx+0x820>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f3e:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   11f40:	2000      	movs	r0, #0
   11f42:	f7fe bf69 	b.w	10e18 <ull_conn_rx+0xa4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11f46:	4866      	ldr	r0, [pc, #408]	; (120e0 <ull_conn_rx+0x136c>)
   11f48:	f7f8 fb04 	bl	a554 <mem_acquire>
		if (!tx) {
   11f4c:	4601      	mov	r1, r0
   11f4e:	2800      	cmp	r0, #0
   11f50:	f43f ad7b 	beq.w	11a4a <ull_conn_rx+0xcd6>
		conn->llcp_version.tx = 1U;
   11f54:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   11f58:	f043 0301 	orr.w	r3, r3, #1
   11f5c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f60:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   11f62:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11f64:	220c      	movs	r2, #12
   11f66:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   11f68:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f6a:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f6e:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f72:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f74:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   11f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f7a:	2205      	movs	r2, #5
		v->sub_version_number =
   11f7c:	72c3      	strb	r3, [r0, #11]
   11f7e:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f80:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   11f82:	4620      	mov	r0, r4
   11f84:	f7fd fe10 	bl	fba8 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f88:	2301      	movs	r3, #1
   11f8a:	712b      	strb	r3, [r5, #4]
   11f8c:	f7ff bb4b 	b.w	11626 <ull_conn_rx+0x8b2>
		if (!conn->tx_ctrl) {
   11f90:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11f94:	2900      	cmp	r1, #0
   11f96:	f47f af4d 	bne.w	11e34 <ull_conn_rx+0x10c0>
			tx->next = conn->tx_head;
   11f9a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   11f9c:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11fa0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   11fa4:	e74d      	b.n	11e42 <ull_conn_rx+0x10ce>
			conn->llcp_length.disabled = 1U;
   11fa6:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   11faa:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   11fae:	f043 0308 	orr.w	r3, r3, #8
   11fb2:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   11fb6:	f7ff b931 	b.w	1121c <ull_conn_rx+0x4a8>
	    ((pdu_data_tx->llctrl.opcode !=
   11fba:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11fbc:	2b03      	cmp	r3, #3
   11fbe:	f43f ad69 	beq.w	11a94 <ull_conn_rx+0xd20>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11fc2:	2b0a      	cmp	r3, #10
   11fc4:	f47f adb2 	bne.w	11b2c <ull_conn_rx+0xdb8>
   11fc8:	e564      	b.n	11a94 <ull_conn_rx+0xd20>
				nack = reject_ext_ind_send(conn, *rx,
   11fca:	2323      	movs	r3, #35	; 0x23
   11fcc:	f7ff b9ca 	b.w	11364 <ull_conn_rx+0x5f0>
				nack = reject_ext_ind_send(conn, *rx,
   11fd0:	231e      	movs	r3, #30
   11fd2:	2210      	movs	r2, #16
   11fd4:	f7ff b9c7 	b.w	11366 <ull_conn_rx+0x5f2>
				conn->llcp_phy.state =
   11fd8:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   11fdc:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   11fde:	f043 0303 	orr.w	r3, r3, #3
   11fe2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   11fe6:	d111      	bne.n	1200c <ull_conn_rx+0x1298>
					conn->llcp_phy.tx =
   11fe8:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   11fec:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   11ff0:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   11ff2:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   11ff6:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   11ffa:	f240 43fc 	movw	r3, #1276	; 0x4fc
   11ffe:	f022 0204 	bic.w	r2, r2, #4
   12002:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   12006:	4313      	orrs	r3, r2
   12008:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   1200c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   12010:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   12014:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   12018:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1201c:	f003 0203 	and.w	r2, r3, #3
   12020:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   12024:	4003      	ands	r3, r0
   12026:	009b      	lsls	r3, r3, #2
   12028:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1202c:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1202e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   12032:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   12036:	d002      	beq.n	1203e <ull_conn_rx+0x12ca>
   12038:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1203c:	d105      	bne.n	1204a <ull_conn_rx+0x12d6>
					conn->llcp_phy.tx = 0;
   1203e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   12042:	f003 0303 	and.w	r3, r3, #3
   12046:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   1204a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1204e:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   12050:	4313      	orrs	r3, r2
   12052:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   12056:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12058:	712a      	strb	r2, [r5, #4]
   1205a:	f7fe bedd 	b.w	10e18 <ull_conn_rx+0xa4>
   1205e:	4649      	mov	r1, r9
   12060:	e592      	b.n	11b88 <ull_conn_rx+0xe14>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12062:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12066:	f36f 0301 	bfc	r3, #0, #2
   1206a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1206e:	f7ff babb 	b.w	115e8 <ull_conn_rx+0x874>
				nack = reject_ext_ind_send(conn, *rx,
   12072:	2323      	movs	r3, #35	; 0x23
   12074:	2216      	movs	r2, #22
   12076:	f7ff b976 	b.w	11366 <ull_conn_rx+0x5f2>
			lll->phy_tx_time = lll->phy_tx;
   1207a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   1207e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   12082:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   12086:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1208a:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   1208c:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   12090:	f362 1106 	bfi	r1, r2, #4, #3
   12094:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   12098:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1209c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   120a0:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   120a4:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   120a6:	f000 810f 	beq.w	122c8 <ull_conn_rx+0x1554>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   120aa:	211c      	movs	r1, #28
   120ac:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   120ae:	2300      	movs	r3, #0
   120b0:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   120b2:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   120b4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   120b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   120bc:	77ab      	strb	r3, [r5, #30]
   120be:	f7ff b8ad 	b.w	1121c <ull_conn_rx+0x4a8>
	conn->llcp_enc.pause_rx = 0U;
   120c2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   120c6:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   120ca:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   120cc:	f022 0203 	bic.w	r2, r2, #3
   120d0:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   120d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   120d8:	4618      	mov	r0, r3
   120da:	f7fe be9d 	b.w	10e18 <ull_conn_rx+0xa4>
   120de:	bf00      	nop
   120e0:	20004d04 	.word	0x20004d04
   120e4:	20004c70 	.word	0x20004c70
   120e8:	00025600 	.word	0x00025600
   120ec:	00025734 	.word	0x00025734
   120f0:	000250f0 	.word	0x000250f0
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   120f4:	2101      	movs	r1, #1
   120f6:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   120fa:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   120fe:	f7f8 fbff 	bl	a900 <util_ones_count_get>
   12102:	2801      	cmp	r0, #1
   12104:	f200 80b2 	bhi.w	1226c <ull_conn_rx+0x14f8>
	phy = ind->p_to_c_phy;
   12108:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1210c:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   12110:	f10d 000f 	add.w	r0, sp, #15
   12114:	2101      	movs	r1, #1
   12116:	f7f8 fbf3 	bl	a900 <util_ones_count_get>
   1211a:	2801      	cmp	r0, #1
   1211c:	f200 80a6 	bhi.w	1226c <ull_conn_rx+0x14f8>
	instant = sys_le16_to_cpu(ind->instant);
   12120:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   12122:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12124:	1ad3      	subs	r3, r2, r3
   12126:	041b      	lsls	r3, r3, #16
   12128:	f100 8261 	bmi.w	125ee <ull_conn_rx+0x187a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1212c:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   12130:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12134:	1a5b      	subs	r3, r3, r1
   12136:	f003 0303 	and.w	r3, r3, #3
   1213a:	2b02      	cmp	r3, #2
   1213c:	f000 81e8 	beq.w	12510 <ull_conn_rx+0x179c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12140:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   12144:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   12148:	4283      	cmp	r3, r0
   1214a:	d018      	beq.n	1217e <ull_conn_rx+0x140a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1214c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12150:	f003 0303 	and.w	r3, r3, #3
   12154:	2b02      	cmp	r3, #2
   12156:	d112      	bne.n	1217e <ull_conn_rx+0x140a>
		conn->llcp_phy.pause_tx = 0U;
   12158:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1215c:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   12160:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12164:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   12168:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1216c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   12170:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   12174:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12176:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1217a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   1217e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   12182:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   12186:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   1218a:	009b      	lsls	r3, r3, #2
   1218c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   12190:	f003 031c 	and.w	r3, r3, #28
   12194:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   12198:	f002 0202 	and.w	r2, r2, #2
   1219c:	4313      	orrs	r3, r2
   1219e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   121a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   121a6:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   121a8:	6833      	ldr	r3, [r6, #0]
   121aa:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   121ac:	6832      	ldr	r2, [r6, #0]
   121ae:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   121b2:	2300      	movs	r3, #0
   121b4:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   121b6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   121ba:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   121bc:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   121be:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   121c2:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   121c6:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   121ca:	f43e ae25 	beq.w	10e18 <ull_conn_rx+0xa4>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   121ce:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   121d2:	f3c2 0282 	ubfx	r2, r2, #2, #3
   121d6:	f362 1106 	bfi	r1, r2, #4, #3
   121da:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   121de:	4618      	mov	r0, r3
   121e0:	f7fe be1a 	b.w	10e18 <ull_conn_rx+0xa4>
			conn->procedure_expire = 0U;
   121e4:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   121e6:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   121e8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   121ec:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   121f0:	f000 80b4 	beq.w	1235c <ull_conn_rx+0x15e8>
			conn->lll.max_rx_time = eff_rx_time;
   121f4:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   121f8:	2b00      	cmp	r3, #0
   121fa:	f000 8155 	beq.w	124a8 <ull_conn_rx+0x1734>
					(conn->llcp_length.req - 1);
   121fe:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   12200:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   12204:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   12208:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   1220c:	2603      	movs	r6, #3
   1220e:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   12212:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   12216:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   1221a:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   1221e:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   12222:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   12226:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   12228:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1222c:	84e8      	strh	r0, [r5, #38]	; 0x26
   1222e:	e4e2      	b.n	11bf6 <ull_conn_rx+0xe82>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12230:	2301      	movs	r3, #1
   12232:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   12234:	232a      	movs	r3, #42	; 0x2a
			conn->llcp_terminate.reason_final = err;
   12236:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   1223a:	2000      	movs	r0, #0
   1223c:	f7fe bdec 	b.w	10e18 <ull_conn_rx+0xa4>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12240:	2301      	movs	r3, #1
   12242:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   12244:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_final = err;
   12246:	e7f6      	b.n	12236 <ull_conn_rx+0x14c2>
	conn_upd_curr = NULL;
   12248:	4bb4      	ldr	r3, [pc, #720]	; (1251c <ull_conn_rx+0x17a8>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1224a:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1224e:	2100      	movs	r1, #0
   12250:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   12252:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   12256:	f013 0310 	ands.w	r3, r3, #16
   1225a:	d142      	bne.n	122e2 <ull_conn_rx+0x156e>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1225c:	2201      	movs	r2, #1
   1225e:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   12260:	4618      	mov	r0, r3
				break;
   12262:	f7fe bdd9 	b.w	10e18 <ull_conn_rx+0xa4>
		conn_upd_curr = conn;
   12266:	601c      	str	r4, [r3, #0]
   12268:	f7fe bf8d 	b.w	11186 <ull_conn_rx+0x412>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1226c:	6833      	ldr	r3, [r6, #0]
   1226e:	2201      	movs	r2, #1
   12270:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   12272:	231e      	movs	r3, #30
   12274:	e7df      	b.n	12236 <ull_conn_rx+0x14c2>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   12276:	4aaa      	ldr	r2, [pc, #680]	; (12520 <ull_conn_rx+0x17ac>)
   12278:	49aa      	ldr	r1, [pc, #680]	; (12524 <ull_conn_rx+0x17b0>)
   1227a:	48ab      	ldr	r0, [pc, #684]	; (12528 <ull_conn_rx+0x17b4>)
   1227c:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   12280:	f00d fa4d 	bl	1f71e <printk>
   12284:	4040      	eors	r0, r0
   12286:	f380 8811 	msr	BASEPRI, r0
   1228a:	f04f 0003 	mov.w	r0, #3
   1228e:	df02      	svc	2
   12290:	f7ff bb88 	b.w	119a4 <ull_conn_rx+0xc30>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   12294:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   12298:	3202      	adds	r2, #2
   1229a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1229e:	2b00      	cmp	r3, #0
   122a0:	f040 80f4 	bne.w	1248c <ull_conn_rx+0x1718>
			conn->periph.llcp_type = conn->llcp_type;
   122a4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   122a8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   122ac:	f7fe be59 	b.w	10f62 <ull_conn_rx+0x1ee>
				conn->llcp_length.state =
   122b0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   122b4:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   122b8:	2504      	movs	r5, #4
   122ba:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   122be:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   122c2:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   122c6:	e48c      	b.n	11be2 <ull_conn_rx+0xe6e>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   122c8:	2201      	movs	r2, #1
   122ca:	711a      	strb	r2, [r3, #4]
   122cc:	f7fe bfa6 	b.w	1121c <ull_conn_rx+0x4a8>
				      0x03) == 0x02) &&
   122d0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   122d4:	2a03      	cmp	r2, #3
   122d6:	f47f ac11 	bne.w	11afc <ull_conn_rx+0xd88>
   122da:	e408      	b.n	11aee <ull_conn_rx+0xd7a>
	struct node_tx *tx = NULL;
   122dc:	2300      	movs	r3, #0
   122de:	f7fe bedc 	b.w	1109a <ull_conn_rx+0x326>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   122e2:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   122e4:	07d2      	lsls	r2, r2, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   122e6:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   122e8:	f100 80ec 	bmi.w	124c4 <ull_conn_rx+0x1750>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   122ec:	231a      	movs	r3, #26
   122ee:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   122f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   122f2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   122f6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   122f8:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   122fa:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   122fe:	227d      	movs	r2, #125	; 0x7d
   12300:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   12304:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   12306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1230a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1230e:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12310:	f7fe bf84 	b.w	1121c <ull_conn_rx+0x4a8>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12314:	6832      	ldr	r2, [r6, #0]
   12316:	201c      	movs	r0, #28
   12318:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   1231a:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   1231c:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   1231e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   12322:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   12324:	f3c2 0302 	ubfx	r3, r2, #0, #3
   12328:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1232a:	f7fe bd75 	b.w	10e18 <ull_conn_rx+0xa4>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1232e:	2b23      	cmp	r3, #35	; 0x23
   12330:	f43f ada2 	beq.w	11e78 <ull_conn_rx+0x1104>
			conn->periph.ticks_to_offset =
   12334:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   12338:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1233c:	e59c      	b.n	11e78 <ull_conn_rx+0x1104>
			conn->tx_data = conn->tx_data->next;
   1233e:	6811      	ldr	r1, [r2, #0]
   12340:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12344:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   12348:	2900      	cmp	r1, #0
   1234a:	f47f aa64 	bne.w	11816 <ull_conn_rx+0xaa2>
			tx->next = conn->tx_head->next;
   1234e:	6811      	ldr	r1, [r2, #0]
   12350:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   12352:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   12354:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   12358:	f7ff ba64 	b.w	11824 <ull_conn_rx+0xab0>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1235c:	4558      	cmp	r0, fp
   1235e:	f47f af49 	bne.w	121f4 <ull_conn_rx+0x1480>
			    eff_rx_time == conn->lll.max_rx_time &&
   12362:	45d4      	cmp	ip, sl
   12364:	f47f af46 	bne.w	121f4 <ull_conn_rx+0x1480>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12368:	6832      	ldr	r2, [r6, #0]
   1236a:	2501      	movs	r5, #1
   1236c:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   1236e:	e442      	b.n	11bf6 <ull_conn_rx+0xe82>
				uint16_t interval_min =
   12370:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   12374:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12378:	2a05      	cmp	r2, #5
   1237a:	f67f ace4 	bls.w	11d46 <ull_conn_rx+0xfd2>
				uint16_t interval_max =
   1237e:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   12382:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12386:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1238a:	f63f acdc 	bhi.w	11d46 <ull_conn_rx+0xfd2>
				    (interval_max > 3200) ||
   1238e:	4282      	cmp	r2, r0
   12390:	f63f acd9 	bhi.w	11d46 <ull_conn_rx+0xfd2>
				uint16_t latency =
   12394:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   12396:	fa1f fe87 	uxth.w	lr, r7
				    (interval_min > interval_max) ||
   1239a:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   1239e:	f4bf acd2 	bcs.w	11d46 <ull_conn_rx+0xfd2>
				uint16_t timeout =
   123a2:	8cee      	ldrh	r6, [r5, #38]	; 0x26
   123a4:	b2b2      	uxth	r2, r6
				    (latency > 499) ||
   123a6:	f1a2 0a0a 	sub.w	sl, r2, #10
   123aa:	f640 4b76 	movw	fp, #3190	; 0xc76
   123ae:	fa1f fa8a 	uxth.w	sl, sl
   123b2:	45da      	cmp	sl, fp
   123b4:	f63f acc7 	bhi.w	11d46 <ull_conn_rx+0xfd2>
				     ((latency + 1) * interval_max)) ||
   123b8:	f10e 0a01 	add.w	sl, lr, #1
   123bc:	fa1f fa8a 	uxth.w	sl, sl
   123c0:	fb00 fa0a 	mul.w	sl, r0, sl
				    (timeout > 3200) ||
   123c4:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   123c8:	f4bf acbd 	bcs.w	11d46 <ull_conn_rx+0xfd2>
				     ((latency + 1) * interval_max)) ||
   123cc:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   123d0:	4558      	cmp	r0, fp
   123d2:	f4ff acb8 	bcc.w	11d46 <ull_conn_rx+0xfd2>
				conn->llcp_conn_param.interval_min =
   123d6:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   123da:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   123de:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   123e2:	f8a4 618e 	strh.w	r6, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   123e6:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   123ea:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   123ee:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
   123f2:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   123f6:	f8a4 6192 	strh.w	r6, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   123fa:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   123fe:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
   12402:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset0 =
   12406:	f8a4 6194 	strh.w	r6, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   1240a:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   1240e:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
   12412:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset1 =
   12416:	f8a4 6196 	strh.w	r6, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   1241a:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   1241e:	f895 602f 	ldrb.w	r6, [r5, #47]	; 0x2f
   12422:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset2 =
   12426:	f8a4 6198 	strh.w	r6, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   1242a:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   1242e:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
   12432:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset3 =
   12436:	f8a4 619a 	strh.w	r6, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   1243a:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   1243e:	f895 6033 	ldrb.w	r6, [r5, #51]	; 0x33
   12442:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset4 =
   12446:	f8a4 619c 	strh.w	r6, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   1244a:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
   1244e:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   12452:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
				conn->llcp_conn_param.offset5 =
   12456:	f8a4 619e 	strh.w	r6, [r4, #414]	; 0x19e
				     lll->interval) ||
   1245a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1245c:	42b0      	cmp	r0, r6
   1245e:	f000 80ed 	beq.w	1263c <ull_conn_rx+0x18c8>
					if (conn->llcp_enc.pause_tx) {
   12462:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   12466:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   1246a:	f000 80e1 	beq.w	12630 <ull_conn_rx+0x18bc>
						conn->llcp_conn_param.state =
   1246e:	2002      	movs	r0, #2
   12470:	f360 0203 	bfi	r2, r0, #0, #4
   12474:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   12478:	2201      	movs	r2, #1
   1247a:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   1247c:	9a01      	ldr	r2, [sp, #4]
   1247e:	3a01      	subs	r2, #1
   12480:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   12484:	2b00      	cmp	r3, #0
   12486:	f47e acc6 	bne.w	10e16 <ull_conn_rx+0xa2>
   1248a:	e458      	b.n	11d3e <ull_conn_rx+0xfca>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1248c:	4a24      	ldr	r2, [pc, #144]	; (12520 <ull_conn_rx+0x17ac>)
   1248e:	4927      	ldr	r1, [pc, #156]	; (1252c <ull_conn_rx+0x17b8>)
   12490:	4825      	ldr	r0, [pc, #148]	; (12528 <ull_conn_rx+0x17b4>)
   12492:	f641 13ad 	movw	r3, #6573	; 0x19ad
   12496:	f00d f942 	bl	1f71e <printk>
   1249a:	4040      	eors	r0, r0
   1249c:	f380 8811 	msr	BASEPRI, r0
   124a0:	f04f 0003 	mov.w	r0, #3
   124a4:	df02      	svc	2
   124a6:	e6fd      	b.n	122a4 <ull_conn_rx+0x1530>
				conn->lll.max_tx_octets = eff_tx_octets;
   124a8:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   124ac:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   124b0:	e6b7      	b.n	12222 <ull_conn_rx+0x14ae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   124b2:	7911      	ldrb	r1, [r2, #4]
   124b4:	f001 0103 	and.w	r1, r1, #3
   124b8:	2903      	cmp	r1, #3
   124ba:	d022      	beq.n	12502 <ull_conn_rx+0x178e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   124bc:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   124c0:	f7ff b9a9 	b.w	11816 <ull_conn_rx+0xaa2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   124c4:	4a16      	ldr	r2, [pc, #88]	; (12520 <ull_conn_rx+0x17ac>)
   124c6:	4917      	ldr	r1, [pc, #92]	; (12524 <ull_conn_rx+0x17b0>)
   124c8:	4817      	ldr	r0, [pc, #92]	; (12528 <ull_conn_rx+0x17b4>)
   124ca:	f641 4322 	movw	r3, #7202	; 0x1c22
   124ce:	f00d f926 	bl	1f71e <printk>
   124d2:	4040      	eors	r0, r0
   124d4:	f380 8811 	msr	BASEPRI, r0
   124d8:	f04f 0003 	mov.w	r0, #3
   124dc:	df02      	svc	2
   124de:	e705      	b.n	122ec <ull_conn_rx+0x1578>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   124e0:	2923      	cmp	r1, #35	; 0x23
   124e2:	f43f aa4a 	beq.w	1197a <ull_conn_rx+0xc06>
			conn->periph.ticks_to_offset =
   124e6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   124ea:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
   124ee:	f7ff ba44 	b.w	1197a <ull_conn_rx+0xc06>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   124f2:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   124f6:	f011 0f06 	tst.w	r1, #6
   124fa:	f43f ab3c 	beq.w	11b76 <ull_conn_rx+0xe02>
   124fe:	f7fe bdc5 	b.w	1108c <ull_conn_rx+0x318>
	    ((pdu_data_tx->llctrl.opcode !=
   12502:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12504:	2903      	cmp	r1, #3
   12506:	f43f af22 	beq.w	1234e <ull_conn_rx+0x15da>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1250a:	290a      	cmp	r1, #10
   1250c:	d1d6      	bne.n	124bc <ull_conn_rx+0x1748>
   1250e:	e71e      	b.n	1234e <ull_conn_rx+0x15da>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12510:	6833      	ldr	r3, [r6, #0]
   12512:	2201      	movs	r2, #1
   12514:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   12516:	232a      	movs	r3, #42	; 0x2a
   12518:	e68d      	b.n	12236 <ull_conn_rx+0x14c2>
   1251a:	bf00      	nop
   1251c:	20004c70 	.word	0x20004c70
   12520:	00025600 	.word	0x00025600
   12524:	0002523c 	.word	0x0002523c
   12528:	000250f0 	.word	0x000250f0
   1252c:	00025710 	.word	0x00025710
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12530:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   12534:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   12538:	429a      	cmp	r2, r3
   1253a:	d00e      	beq.n	1255a <ull_conn_rx+0x17e6>
   1253c:	4a4f      	ldr	r2, [pc, #316]	; (1267c <ull_conn_rx+0x1908>)
   1253e:	4950      	ldr	r1, [pc, #320]	; (12680 <ull_conn_rx+0x190c>)
   12540:	4850      	ldr	r0, [pc, #320]	; (12684 <ull_conn_rx+0x1910>)
   12542:	f241 43af 	movw	r3, #5295	; 0x14af
   12546:	f00d f8ea 	bl	1f71e <printk>
   1254a:	4040      	eors	r0, r0
   1254c:	f380 8811 	msr	BASEPRI, r0
   12550:	f04f 0003 	mov.w	r0, #3
   12554:	df02      	svc	2
   12556:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1255a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1255e:	2106      	movs	r1, #6
   12560:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   12564:	3b01      	subs	r3, #1
   12566:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1256a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1256e:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12572:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   12576:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12578:	00db      	lsls	r3, r3, #3
   1257a:	430b      	orrs	r3, r1
   1257c:	f022 020f 	bic.w	r2, r2, #15
   12580:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   12582:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   12586:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1258a:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1258e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   12592:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12594:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   12598:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1259c:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   125a0:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   125a4:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   125a8:	f7fe bc33 	b.w	10e12 <ull_conn_rx+0x9e>
			     lll->interval) ||
   125ac:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   125ae:	4567      	cmp	r7, ip
   125b0:	f47f abb8 	bne.w	11d24 <ull_conn_rx+0xfb0>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   125b4:	f240 47e2 	movw	r7, #1250	; 0x4e2
   125b8:	fb07 f000 	mul.w	r0, r7, r0
   125bc:	f242 7710 	movw	r7, #10000	; 0x2710
   125c0:	fb07 0202 	mla	r2, r7, r2, r0
   125c4:	3a01      	subs	r2, #1
   125c6:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   125ca:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   125ce:	b292      	uxth	r2, r2
   125d0:	4290      	cmp	r0, r2
   125d2:	f47f aba7 	bne.w	11d24 <ull_conn_rx+0xfb0>
				conn->llcp_conn_param.state =
   125d6:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   125da:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   125de:	f042 0201 	orr.w	r2, r2, #1
   125e2:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   125e6:	2201      	movs	r2, #1
   125e8:	712a      	strb	r2, [r5, #4]
   125ea:	f7ff bba2 	b.w	11d32 <ull_conn_rx+0xfbe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   125ee:	6833      	ldr	r3, [r6, #0]
   125f0:	2201      	movs	r2, #1
   125f2:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   125f4:	2328      	movs	r3, #40	; 0x28
   125f6:	e61e      	b.n	12236 <ull_conn_rx+0x14c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   125f8:	7919      	ldrb	r1, [r3, #4]
   125fa:	f001 0103 	and.w	r1, r1, #3
   125fe:	2903      	cmp	r1, #3
   12600:	d010      	beq.n	12624 <ull_conn_rx+0x18b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12602:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   12606:	e415      	b.n	11e34 <ull_conn_rx+0x10c0>
			conn->tx_data = conn->tx_data->next;
   12608:	6819      	ldr	r1, [r3, #0]
   1260a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1260e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   12612:	2900      	cmp	r1, #0
   12614:	f47f ac0e 	bne.w	11e34 <ull_conn_rx+0x10c0>
			tx->next = conn->tx_head->next;
   12618:	6819      	ldr	r1, [r3, #0]
   1261a:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1261c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1261e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   12622:	e40e      	b.n	11e42 <ull_conn_rx+0x10ce>
	    ((pdu_data_tx->llctrl.opcode !=
   12624:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12626:	2903      	cmp	r1, #3
   12628:	d0f6      	beq.n	12618 <ull_conn_rx+0x18a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1262a:	290a      	cmp	r1, #10
   1262c:	d1e9      	bne.n	12602 <ull_conn_rx+0x188e>
   1262e:	e7f3      	b.n	12618 <ull_conn_rx+0x18a4>
						conn->llcp_conn_param.state =
   12630:	2003      	movs	r0, #3
   12632:	f360 0203 	bfi	r2, r0, #0, #4
   12636:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   1263a:	e71f      	b.n	1247c <ull_conn_rx+0x1708>
				     lll->interval) ||
   1263c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   1263e:	4570      	cmp	r0, lr
   12640:	f47f af0f 	bne.w	12462 <ull_conn_rx+0x16ee>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12644:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12648:	fb06 f000 	mul.w	r0, r6, r0
   1264c:	f242 7610 	movw	r6, #10000	; 0x2710
   12650:	fb06 0202 	mla	r2, r6, r2, r0
   12654:	3a01      	subs	r2, #1
   12656:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   1265a:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   1265e:	b292      	uxth	r2, r2
   12660:	4290      	cmp	r0, r2
   12662:	f47f aefe 	bne.w	12462 <ull_conn_rx+0x16ee>
					conn->llcp_conn_param.state =
   12666:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1266a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1266e:	f042 0201 	orr.w	r2, r2, #1
   12672:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
					(*rx)->hdr.type =
   12676:	2201      	movs	r2, #1
   12678:	712a      	strb	r2, [r5, #4]
   1267a:	e6ff      	b.n	1247c <ull_conn_rx+0x1708>
   1267c:	00025600 	.word	0x00025600
   12680:	00025734 	.word	0x00025734
   12684:	000250f0 	.word	0x000250f0

00012688 <ull_conn_llcp>:
{
   12688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1268c:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   1268e:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   12692:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12696:	4298      	cmp	r0, r3
{
   12698:	460d      	mov	r5, r1
   1269a:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   1269c:	f000 8091 	beq.w	127c2 <ull_conn_llcp+0x13a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   126a0:	1a1b      	subs	r3, r3, r0
   126a2:	f003 0303 	and.w	r3, r3, #3
   126a6:	2b02      	cmp	r3, #2
   126a8:	d011      	beq.n	126ce <ull_conn_llcp+0x46>
   126aa:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   126ae:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   126b0:	f1bc 0f00 	cmp.w	ip, #0
   126b4:	db6a      	blt.n	1278c <ull_conn_llcp+0x104>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   126b6:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   126ba:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   126be:	1a9b      	subs	r3, r3, r2
   126c0:	b2db      	uxtb	r3, r3
   126c2:	2b01      	cmp	r3, #1
   126c4:	f000 80a8 	beq.w	12818 <ull_conn_llcp+0x190>
	return 0;
   126c8:	2000      	movs	r0, #0
}
   126ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   126ce:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   126d2:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   126d6:	429a      	cmp	r2, r3
   126d8:	d006      	beq.n	126e8 <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   126da:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   126de:	f003 0306 	and.w	r3, r3, #6
   126e2:	2b04      	cmp	r3, #4
   126e4:	f000 823d 	beq.w	12b62 <ull_conn_llcp+0x4da>
		switch (conn->llcp_type) {
   126e8:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   126ec:	1e7b      	subs	r3, r7, #1
   126ee:	2b05      	cmp	r3, #5
   126f0:	f200 8221 	bhi.w	12b36 <ull_conn_llcp+0x4ae>
   126f4:	e8df f013 	tbh	[pc, r3, lsl #1]
   126f8:	01c60085 	.word	0x01c60085
   126fc:	021f0137 	.word	0x021f0137
   12700:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12704:	7903      	ldrb	r3, [r0, #4]
   12706:	f043 0303 	orr.w	r3, r3, #3
   1270a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   1270c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   12710:	07da      	lsls	r2, r3, #31
   12712:	f140 87a1 	bpl.w	13658 <ull_conn_llcp+0xfd0>
	    (conn->llcp_feature.features_conn &
   12716:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   1271a:	075b      	lsls	r3, r3, #29
   1271c:	f140 879c 	bpl.w	13658 <ull_conn_llcp+0xfd0>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   12720:	2311      	movs	r3, #17
   12722:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12724:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   12726:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1272a:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   1272c:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   12730:	2300      	movs	r3, #0
   12732:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   12736:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1273a:	2b00      	cmp	r3, #0
   1273c:	f000 876e 	beq.w	1361c <ull_conn_llcp+0xf94>
	    !conn->llcp_enc.pause_tx &&
   12740:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12744:	0797      	lsls	r7, r2, #30
   12746:	f100 8769 	bmi.w	1361c <ull_conn_llcp+0xf94>
	    !conn->llcp_phy.pause_tx &&
   1274a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1274e:	07d0      	lsls	r0, r2, #31
   12750:	f100 8764 	bmi.w	1361c <ull_conn_llcp+0xf94>
		if (conn->tx_head == conn->tx_data) {
   12754:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12758:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1275a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1275e:	f001 8145 	beq.w	139ec <ull_conn_llcp+0x1364>
		} else if (!conn->tx_ctrl) {
   12762:	2a00      	cmp	r2, #0
   12764:	f001 81bc 	beq.w	13ae0 <ull_conn_llcp+0x1458>
	tx->next = conn->tx_ctrl_last->next;
   12768:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1276c:	681a      	ldr	r2, [r3, #0]
   1276e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   12772:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   12776:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1277a:	f8d9 3000 	ldr.w	r3, [r9]
   1277e:	2b00      	cmp	r3, #0
   12780:	f000 878e 	beq.w	136a0 <ull_conn_llcp+0x1018>
			conn->llcp_ack = conn->llcp_req;
   12784:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12788:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1278c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   12790:	2b00      	cmp	r3, #0
   12792:	d090      	beq.n	126b6 <ull_conn_llcp+0x2e>
		switch (conn->periph.llcp_type) {
   12794:	2b02      	cmp	r3, #2
   12796:	f000 81a5 	beq.w	12ae4 <ull_conn_llcp+0x45c>
   1279a:	2b06      	cmp	r3, #6
   1279c:	f000 8089 	beq.w	128b2 <ull_conn_llcp+0x22a>
   127a0:	2b01      	cmp	r3, #1
   127a2:	f000 808f 	beq.w	128c4 <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   127a6:	4ab3      	ldr	r2, [pc, #716]	; (12a74 <ull_conn_llcp+0x3ec>)
   127a8:	49b3      	ldr	r1, [pc, #716]	; (12a78 <ull_conn_llcp+0x3f0>)
   127aa:	48b4      	ldr	r0, [pc, #720]	; (12a7c <ull_conn_llcp+0x3f4>)
   127ac:	f240 5312 	movw	r3, #1298	; 0x512
   127b0:	f00c ffb5 	bl	1f71e <printk>
   127b4:	4040      	eors	r0, r0
   127b6:	f380 8811 	msr	BASEPRI, r0
   127ba:	f04f 0003 	mov.w	r0, #3
   127be:	df02      	svc	2
			break;
   127c0:	e779      	b.n	126b6 <ull_conn_llcp+0x2e>
   127c2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   127c6:	2a00      	cmp	r2, #0
   127c8:	4694      	mov	ip, r2
   127ca:	f2c0 81c4 	blt.w	12b56 <ull_conn_llcp+0x4ce>
	    !conn->llcp_enc.pause_rx) {
   127ce:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   127d2:	f017 0801 	ands.w	r8, r7, #1
   127d6:	f47f af6b 	bne.w	126b0 <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   127da:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   127de:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   127e2:	45ce      	cmp	lr, r9
   127e4:	f000 82ed 	beq.w	12dc2 <ull_conn_llcp+0x73a>
			conn->llcp_type = LLCP_CONN_UPD;
   127e8:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   127ea:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   127ec:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   127f0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   127f4:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   127f8:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   127fc:	429a      	cmp	r2, r3
   127fe:	f47f af6c 	bne.w	126da <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   12802:	462a      	mov	r2, r5
   12804:	4631      	mov	r1, r6
   12806:	4620      	mov	r0, r4
   12808:	f7ee ffc6 	bl	1798 <event_conn_upd_prep>
   1280c:	2800      	cmp	r0, #0
   1280e:	f040 819f 	bne.w	12b50 <ull_conn_llcp+0x4c8>
				return -ECANCELED;
   12812:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12816:	e758      	b.n	126ca <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12818:	4899      	ldr	r0, [pc, #612]	; (12a80 <ull_conn_llcp+0x3f8>)
   1281a:	f7f7 fe9b 	bl	a554 <mem_acquire>
		if (tx) {
   1281e:	2800      	cmp	r0, #0
   12820:	d03a      	beq.n	12898 <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   12822:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   12826:	3b01      	subs	r3, #1
   12828:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1282c:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1282e:	2202      	movs	r2, #2
   12830:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12832:	f043 0303 	orr.w	r3, r3, #3
   12836:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   12838:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1283a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1283e:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   12842:	7202      	strb	r2, [r0, #8]
	if (
   12844:	b1c3      	cbz	r3, 12878 <ull_conn_llcp+0x1f0>
	    !conn->llcp_enc.pause_tx &&
   12846:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1284a:	0791      	lsls	r1, r2, #30
   1284c:	d414      	bmi.n	12878 <ull_conn_llcp+0x1f0>
	    !conn->llcp_phy.pause_tx &&
   1284e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12852:	07d2      	lsls	r2, r2, #31
   12854:	d410      	bmi.n	12878 <ull_conn_llcp+0x1f0>
		if (conn->tx_head == conn->tx_data) {
   12856:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1285a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1285c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12860:	f000 85ad 	beq.w	133be <ull_conn_llcp+0xd36>
		} else if (!conn->tx_ctrl) {
   12864:	b96a      	cbnz	r2, 12882 <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12866:	791a      	ldrb	r2, [r3, #4]
   12868:	f002 0203 	and.w	r2, r2, #3
   1286c:	2a03      	cmp	r2, #3
   1286e:	f000 8705 	beq.w	1367c <ull_conn_llcp+0xff4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12872:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   12876:	e006      	b.n	12886 <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   12878:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1287c:	2a00      	cmp	r2, #0
   1287e:	f000 82f2 	beq.w	12e66 <ull_conn_llcp+0x7de>
	tx->next = conn->tx_ctrl_last->next;
   12882:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12886:	681a      	ldr	r2, [r3, #0]
   12888:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1288a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1288c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1288e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12892:	2b00      	cmp	r3, #0
   12894:	f000 8169 	beq.w	12b6a <ull_conn_llcp+0x4e2>
		if (!conn->procedure_expire) {
   12898:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1289c:	2800      	cmp	r0, #0
   1289e:	f47f af13 	bne.w	126c8 <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   128a2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   128a6:	2b01      	cmp	r3, #1
   128a8:	f240 82d9 	bls.w	12e5e <ull_conn_llcp+0x7d6>
			conn->procedure_expire = conn->supervision_reload;
   128ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   128b0:	e70a      	b.n	126c8 <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   128b2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   128b4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   128b6:	440a      	add	r2, r1
   128b8:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   128ba:	4620      	mov	r0, r4
   128bc:	b291      	uxth	r1, r2
   128be:	f7fd fcf1 	bl	102a4 <event_phy_upd_ind_prep>
		break;
   128c2:	e6f8      	b.n	126b6 <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   128c4:	462a      	mov	r2, r5
   128c6:	4631      	mov	r1, r6
   128c8:	4620      	mov	r0, r4
   128ca:	f7ee ff65 	bl	1798 <event_conn_upd_prep>
   128ce:	2800      	cmp	r0, #0
   128d0:	f47f aef1 	bne.w	126b6 <ull_conn_llcp+0x2e>
   128d4:	e79d      	b.n	12812 <ull_conn_llcp+0x18a>
			event_counter = lll->event_counter +
   128d6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   128d8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   128da:	4419      	add	r1, r3
   128dc:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   128de:	b289      	uxth	r1, r1
   128e0:	4620      	mov	r0, r4
   128e2:	f7fd fcdf 	bl	102a4 <event_phy_upd_ind_prep>
		break;
   128e6:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   128ea:	e6e1      	b.n	126b0 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   128ec:	4864      	ldr	r0, [pc, #400]	; (12a80 <ull_conn_llcp+0x3f8>)
   128ee:	f7f7 fe31 	bl	a554 <mem_acquire>
	if (tx) {
   128f2:	2800      	cmp	r0, #0
   128f4:	f000 812c 	beq.w	12b50 <ull_conn_llcp+0x4c8>
		conn->llcp_ack = conn->llcp_req;
   128f8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   128fc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12900:	7903      	ldrb	r3, [r0, #4]
   12902:	f043 0303 	orr.w	r3, r3, #3
   12906:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   12908:	2301      	movs	r3, #1
   1290a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1290c:	2312      	movs	r3, #18
   1290e:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   12910:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12914:	2b00      	cmp	r3, #0
   12916:	f000 82af 	beq.w	12e78 <ull_conn_llcp+0x7f0>
	    !conn->llcp_enc.pause_tx &&
   1291a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1291e:	0791      	lsls	r1, r2, #30
   12920:	f100 82aa 	bmi.w	12e78 <ull_conn_llcp+0x7f0>
	    !conn->llcp_phy.pause_tx &&
   12924:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12928:	07d2      	lsls	r2, r2, #31
   1292a:	f100 82a5 	bmi.w	12e78 <ull_conn_llcp+0x7f0>
		if (conn->tx_head == conn->tx_data) {
   1292e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12932:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12934:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12938:	f000 867d 	beq.w	13636 <ull_conn_llcp+0xfae>
		} else if (!conn->tx_ctrl) {
   1293c:	2a00      	cmp	r2, #0
   1293e:	f000 86a5 	beq.w	1368c <ull_conn_llcp+0x1004>
	tx->next = conn->tx_ctrl_last->next;
   12942:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12946:	681a      	ldr	r2, [r3, #0]
   12948:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1294a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1294c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1294e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12952:	2b00      	cmp	r3, #0
   12954:	f000 8421 	beq.w	1319a <ull_conn_llcp+0xb12>
		conn->procedure_expire = conn->procedure_reload;
   12958:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1295c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12960:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12964:	e6a4      	b.n	126b0 <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   12966:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1296a:	f013 0803 	ands.w	r8, r3, #3
   1296e:	f000 814e 	beq.w	12c0e <ull_conn_llcp+0x586>
		if (lll->role &&
   12972:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12976:	2b00      	cmp	r3, #0
   12978:	f6bf ae9d 	bge.w	126b6 <ull_conn_llcp+0x2e>
   1297c:	f1b8 0f01 	cmp.w	r8, #1
   12980:	f47f af04 	bne.w	1278c <ull_conn_llcp+0x104>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12984:	483e      	ldr	r0, [pc, #248]	; (12a80 <ull_conn_llcp+0x3f8>)
   12986:	f7f7 fde5 	bl	a554 <mem_acquire>
	if (!tx) {
   1298a:	4607      	mov	r7, r0
   1298c:	2800      	cmp	r0, #0
   1298e:	f000 80df 	beq.w	12b50 <ull_conn_llcp+0x4c8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12992:	7903      	ldrb	r3, [r0, #4]
   12994:	f043 0303 	orr.w	r3, r3, #3
   12998:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1299a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1299e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   129a0:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   129a4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   129a6:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   129aa:	210c      	movs	r1, #12
   129ac:	4640      	mov	r0, r8
   129ae:	f004 f89f 	bl	16af0 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   129b2:	4641      	mov	r1, r8
   129b4:	2208      	movs	r2, #8
   129b6:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   129ba:	f00d feb5 	bl	20728 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   129be:	464a      	mov	r2, r9
   129c0:	f107 0110 	add.w	r1, r7, #16
   129c4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   129c8:	f00d feae 	bl	20728 <memcpy>
	    conn->tx_head &&
   129cc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   129d0:	2b00      	cmp	r3, #0
   129d2:	f000 84e8 	beq.w	133a6 <ull_conn_llcp+0xd1e>
	    !conn->llcp_enc.pause_tx &&
   129d6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   129da:	0791      	lsls	r1, r2, #30
   129dc:	f100 84e3 	bmi.w	133a6 <ull_conn_llcp+0xd1e>
	    !conn->llcp_phy.pause_tx &&
   129e0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   129e4:	07d2      	lsls	r2, r2, #31
   129e6:	f100 84de 	bmi.w	133a6 <ull_conn_llcp+0xd1e>
		if (conn->tx_head == conn->tx_data) {
   129ea:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   129ee:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   129f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   129f4:	f000 8683 	beq.w	136fe <ull_conn_llcp+0x1076>
		} else if (!conn->tx_ctrl) {
   129f8:	2a00      	cmp	r2, #0
   129fa:	f000 875e 	beq.w	138ba <ull_conn_llcp+0x1232>
	tx->next = conn->tx_ctrl_last->next;
   129fe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12a02:	681a      	ldr	r2, [r3, #0]
   12a04:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   12a06:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   12a08:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   12a0a:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12a0e:	2b00      	cmp	r3, #0
   12a10:	f000 85e3 	beq.w	135da <ull_conn_llcp+0xf52>
			rx = ll_pdu_rx_alloc();
   12a14:	f7fb fc6c 	bl	e2f0 <ll_pdu_rx_alloc>
			if (!rx) {
   12a18:	4607      	mov	r7, r0
   12a1a:	2800      	cmp	r0, #0
   12a1c:	f000 8098 	beq.w	12b50 <ull_conn_llcp+0x4c8>
			rx->hdr.handle = conn->lll.handle;
   12a20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12a22:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12a24:	2303      	movs	r3, #3
   12a26:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12a28:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   12a2a:	7f3b      	ldrb	r3, [r7, #28]
   12a2c:	f043 0303 	orr.w	r3, r3, #3
   12a30:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12a32:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   12a34:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12a36:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   12a38:	f204 1169 	addw	r1, r4, #361	; 0x169
   12a3c:	f107 0020 	add.w	r0, r7, #32
   12a40:	f00d fe72 	bl	20728 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   12a44:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   12a48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   12a4c:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   12a50:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   12a54:	6838      	ldr	r0, [r7, #0]
   12a56:	4639      	mov	r1, r7
   12a58:	f7fb fc1c 	bl	e294 <ll_rx_put>
			ll_rx_sched();
   12a5c:	f7fb fc24 	bl	e2a8 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   12a60:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12a64:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12a68:	2202      	movs	r2, #2
   12a6a:	f362 0301 	bfi	r3, r2, #0, #2
   12a6e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   12a72:	e61d      	b.n	126b0 <ull_conn_llcp+0x28>
   12a74:	00025600 	.word	0x00025600
   12a78:	00025150 	.word	0x00025150
   12a7c:	000250f0 	.word	0x000250f0
   12a80:	20004d04 	.word	0x20004d04
			event_counter = lll->event_counter +
   12a84:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   12a86:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12a88:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   12a8a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   12a8e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   12a90:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   12a94:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   12a96:	d16b      	bne.n	12b70 <ull_conn_llcp+0x4e8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12a98:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   12a9c:	1afb      	subs	r3, r7, r3
   12a9e:	0418      	lsls	r0, r3, #16
   12aa0:	d456      	bmi.n	12b50 <ull_conn_llcp+0x4c8>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   12aa2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	f2c0 836f 	blt.w	1318a <ull_conn_llcp+0xb02>
			conn->llcp_ack = conn->llcp_req;
   12aac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12ab0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   12ab4:	f104 0734 	add.w	r7, r4, #52	; 0x34
   12ab8:	2205      	movs	r2, #5
   12aba:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12abe:	4638      	mov	r0, r7
   12ac0:	f00d fe32 	bl	20728 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   12ac4:	2105      	movs	r1, #5
   12ac6:	4638      	mov	r0, r7
   12ac8:	f7f7 ff1a 	bl	a900 <util_ones_count_get>
		lll->data_chan_count =
   12acc:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   12ad0:	2301      	movs	r3, #1
		lll->data_chan_count =
   12ad2:	f360 0c05 	bfi	ip, r0, #0, #6
   12ad6:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   12ada:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   12ade:	fa4f fc8c 	sxtb.w	ip, ip
   12ae2:	e5e5      	b.n	126b0 <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   12ae4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   12ae6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   12ae8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   12aec:	440a      	add	r2, r1
   12aee:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   12af0:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   12af4:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   12af6:	f040 8119 	bne.w	12d2c <ull_conn_llcp+0x6a4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12afa:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   12afe:	1ab6      	subs	r6, r6, r2
   12b00:	0430      	lsls	r0, r6, #16
   12b02:	f53f add8 	bmi.w	126b6 <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   12b06:	f104 0534 	add.w	r5, r4, #52	; 0x34
   12b0a:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   12b0c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   12b10:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12b14:	4628      	mov	r0, r5
   12b16:	f00d fe07 	bl	20728 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   12b1a:	2105      	movs	r1, #5
   12b1c:	4628      	mov	r0, r5
   12b1e:	f7f7 feef 	bl	a900 <util_ones_count_get>
		lll->data_chan_count =
   12b22:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   12b26:	2201      	movs	r2, #1
		lll->data_chan_count =
   12b28:	f360 0305 	bfi	r3, r0, #0, #6
   12b2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   12b30:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   12b34:	e5bf      	b.n	126b6 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   12b36:	4ad6      	ldr	r2, [pc, #856]	; (12e90 <ull_conn_llcp+0x808>)
   12b38:	49d6      	ldr	r1, [pc, #856]	; (12e94 <ull_conn_llcp+0x80c>)
   12b3a:	48d7      	ldr	r0, [pc, #860]	; (12e98 <ull_conn_llcp+0x810>)
   12b3c:	f240 43e1 	movw	r3, #1249	; 0x4e1
   12b40:	f00c fded 	bl	1f71e <printk>
   12b44:	4040      	eors	r0, r0
   12b46:	f380 8811 	msr	BASEPRI, r0
   12b4a:	f04f 0003 	mov.w	r0, #3
   12b4e:	df02      	svc	2
			break;
   12b50:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12b54:	e5ac      	b.n	126b0 <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   12b56:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   12b5a:	2900      	cmp	r1, #0
   12b5c:	f47f ada8 	bne.w	126b0 <ull_conn_llcp+0x28>
   12b60:	e635      	b.n	127ce <ull_conn_llcp+0x146>
				event_len_prep(conn);
   12b62:	4620      	mov	r0, r4
   12b64:	f7fd faa6 	bl	100b4 <event_len_prep>
   12b68:	e5be      	b.n	126e8 <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   12b6a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   12b6e:	e693      	b.n	12898 <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12b70:	48ca      	ldr	r0, [pc, #808]	; (12e9c <ull_conn_llcp+0x814>)
   12b72:	f7f7 fcef 	bl	a554 <mem_acquire>
		if (tx) {
   12b76:	4680      	mov	r8, r0
   12b78:	2800      	cmp	r0, #0
   12b7a:	d0e9      	beq.n	12b50 <ull_conn_llcp+0x4c8>
						      conn->lll.latency + 6;
   12b7c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   12b7e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   12b82:	3306      	adds	r3, #6
   12b84:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   12b86:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b8a:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   12b8c:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b90:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   12b94:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b98:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b9a:	2308      	movs	r3, #8
   12b9c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12b9e:	2301      	movs	r3, #1
   12ba0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   12ba2:	2205      	movs	r2, #5
   12ba4:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12ba8:	3008      	adds	r0, #8
   12baa:	f00d fdbd 	bl	20728 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12bae:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   12bb2:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   12bb6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12bba:	2b00      	cmp	r3, #0
   12bbc:	f000 82f1 	beq.w	131a2 <ull_conn_llcp+0xb1a>
	    !conn->llcp_enc.pause_tx &&
   12bc0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12bc4:	0792      	lsls	r2, r2, #30
   12bc6:	f100 82ec 	bmi.w	131a2 <ull_conn_llcp+0xb1a>
	    !conn->llcp_phy.pause_tx &&
   12bca:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12bce:	07d7      	lsls	r7, r2, #31
   12bd0:	f100 82e7 	bmi.w	131a2 <ull_conn_llcp+0xb1a>
		if (conn->tx_head == conn->tx_data) {
   12bd4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12bd8:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12bda:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12bde:	f000 856f 	beq.w	136c0 <ull_conn_llcp+0x1038>
		} else if (!conn->tx_ctrl) {
   12be2:	2a00      	cmp	r2, #0
   12be4:	f000 8602 	beq.w	137ec <ull_conn_llcp+0x1164>
	tx->next = conn->tx_ctrl_last->next;
   12be8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12bec:	681a      	ldr	r2, [r3, #0]
   12bee:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   12bf2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   12bf6:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   12bfa:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12bfe:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12c02:	2b00      	cmp	r3, #0
   12c04:	f47f ad54 	bne.w	126b0 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   12c08:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   12c0c:	e550      	b.n	126b0 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12c0e:	48a3      	ldr	r0, [pc, #652]	; (12e9c <ull_conn_llcp+0x814>)
   12c10:	f7f7 fca0 	bl	a554 <mem_acquire>
	if (!tx) {
   12c14:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12c18:	4681      	mov	r9, r0
   12c1a:	2800      	cmp	r0, #0
   12c1c:	f43f ad48 	beq.w	126b0 <ull_conn_llcp+0x28>
	if (!lll->role) {
   12c20:	f1bc 0f00 	cmp.w	ip, #0
   12c24:	f280 834a 	bge.w	132bc <ull_conn_llcp+0xc34>
	else if (!lll->enc_rx) {
   12c28:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   12c2c:	0719      	lsls	r1, r3, #28
   12c2e:	f100 83ee 	bmi.w	1340e <ull_conn_llcp+0xd86>
		if (conn->llcp.encryption.error_code) {
   12c32:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   12c36:	f1b8 0f00 	cmp.w	r8, #0
   12c3a:	f47f ad63 	bne.w	12704 <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   12c3e:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   12c42:	463b      	mov	r3, r7
   12c44:	4642      	mov	r2, r8
   12c46:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   12c4a:	f204 1071 	addw	r0, r4, #369	; 0x171
   12c4e:	f006 fa8f 	bl	19170 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   12c52:	4639      	mov	r1, r7
   12c54:	2210      	movs	r2, #16
   12c56:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   12c5a:	f00d fd65 	bl	20728 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   12c5e:	2208      	movs	r2, #8
   12c60:	f104 0194 	add.w	r1, r4, #148	; 0x94
   12c64:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   12c68:	f00d fd5e 	bl	20728 <memcpy>
			lll->ccm_rx.direction = 1U;
   12c6c:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   12c70:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   12c74:	f043 0301 	orr.w	r3, r3, #1
   12c78:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   12c7c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   12c80:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   12c84:	f368 0300 	bfi	r3, r8, #0, #1
   12c88:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   12c8c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   12c90:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   12c94:	f043 0308 	orr.w	r3, r3, #8
   12c98:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c9c:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   12ca0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ca4:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   12ca8:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   12cac:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   12cb0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   12cb4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   12cb8:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12cbc:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12cc0:	2301      	movs	r3, #1
   12cc2:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12cc6:	2305      	movs	r3, #5
   12cc8:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   12ccc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	f000 83d2 	beq.w	1347a <ull_conn_llcp+0xdf2>
	    !conn->llcp_enc.pause_tx &&
   12cd6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12cda:	0791      	lsls	r1, r2, #30
   12cdc:	f100 83cd 	bmi.w	1347a <ull_conn_llcp+0xdf2>
	    !conn->llcp_phy.pause_tx &&
   12ce0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12ce4:	07d2      	lsls	r2, r2, #31
   12ce6:	f100 83c8 	bmi.w	1347a <ull_conn_llcp+0xdf2>
		if (conn->tx_head == conn->tx_data) {
   12cea:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12cee:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12cf0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12cf4:	f000 85d2 	beq.w	1389c <ull_conn_llcp+0x1214>
		} else if (!conn->tx_ctrl) {
   12cf8:	2a00      	cmp	r2, #0
   12cfa:	f000 86cb 	beq.w	13a94 <ull_conn_llcp+0x140c>
	tx->next = conn->tx_ctrl_last->next;
   12cfe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12d02:	681a      	ldr	r2, [r3, #0]
   12d04:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   12d08:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   12d0c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12d10:	f8d9 3000 	ldr.w	r3, [r9]
   12d14:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12d18:	2b00      	cmp	r3, #0
   12d1a:	f000 83ab 	beq.w	13474 <ull_conn_llcp+0xdec>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   12d1e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12d22:	f043 0303 	orr.w	r3, r3, #3
   12d26:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   12d2a:	e4c1      	b.n	126b0 <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12d2c:	485b      	ldr	r0, [pc, #364]	; (12e9c <ull_conn_llcp+0x814>)
   12d2e:	f7f7 fc11 	bl	a554 <mem_acquire>
		if (tx) {
   12d32:	4605      	mov	r5, r0
   12d34:	2800      	cmp	r0, #0
   12d36:	f43f acbe 	beq.w	126b6 <ull_conn_llcp+0x2e>
						      conn->lll.latency + 6;
   12d3a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   12d3c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12d40:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   12d42:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   12d44:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   12d48:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   12d4a:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   12d4e:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12d52:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12d56:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   12d58:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12d5a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12d5c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12d5e:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   12d60:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   12d64:	2205      	movs	r2, #5
   12d66:	3008      	adds	r0, #8
   12d68:	f00d fcde 	bl	20728 <memcpy>
	    conn->tx_head &&
   12d6c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12d70:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   12d74:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   12d78:	2b00      	cmp	r3, #0
   12d7a:	f000 821e 	beq.w	131ba <ull_conn_llcp+0xb32>
	    !conn->llcp_enc.pause_tx &&
   12d7e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12d82:	0797      	lsls	r7, r2, #30
   12d84:	f100 8219 	bmi.w	131ba <ull_conn_llcp+0xb32>
	    !conn->llcp_phy.pause_tx &&
   12d88:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12d8c:	07d6      	lsls	r6, r2, #31
   12d8e:	f100 8214 	bmi.w	131ba <ull_conn_llcp+0xb32>
		if (conn->tx_head == conn->tx_data) {
   12d92:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12d96:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12d98:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12d9c:	f000 84a1 	beq.w	136e2 <ull_conn_llcp+0x105a>
		} else if (!conn->tx_ctrl) {
   12da0:	2a00      	cmp	r2, #0
   12da2:	f000 852d 	beq.w	13800 <ull_conn_llcp+0x1178>
	tx->next = conn->tx_ctrl_last->next;
   12da6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12daa:	681a      	ldr	r2, [r3, #0]
   12dac:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   12dae:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   12db0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   12db2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12db6:	2b00      	cmp	r3, #0
   12db8:	f47f ac7d 	bne.w	126b6 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   12dbc:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   12dc0:	e479      	b.n	126b6 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   12dc2:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   12dc6:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   12dca:	4571      	cmp	r1, lr
   12dcc:	d068      	beq.n	12ea0 <ull_conn_llcp+0x818>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   12dce:	eba1 010e 	sub.w	r1, r1, lr
   12dd2:	07c9      	lsls	r1, r1, #31
   12dd4:	f57f ac6c 	bpl.w	126b0 <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   12dd8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   12ddc:	f013 0701 	ands.w	r7, r3, #1
   12de0:	f000 8202 	beq.w	131e8 <ull_conn_llcp+0xb60>
		rx = ll_pdu_rx_alloc();
   12de4:	f7fb fa84 	bl	e2f0 <ll_pdu_rx_alloc>
		if (!rx) {
   12de8:	4607      	mov	r7, r0
   12dea:	b398      	cbz	r0, 12e54 <ull_conn_llcp+0x7cc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   12dec:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   12df0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12df4:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   12df6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   12df8:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12dfa:	f043 0303 	orr.w	r3, r3, #3
   12dfe:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12e00:	2309      	movs	r3, #9
   12e02:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12e04:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12e06:	2303      	movs	r3, #3
   12e08:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   12e0a:	4641      	mov	r1, r8
   12e0c:	2208      	movs	r2, #8
   12e0e:	3020      	adds	r0, #32
   12e10:	f00d fc95 	bl	2073e <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   12e14:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   12e18:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   12e1a:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   12e1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   12e22:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   12e26:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   12e28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   12e2c:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   12e30:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12e34:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   12e36:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   12e3a:	0a12      	lsrs	r2, r2, #8
   12e3c:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   12e40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   12e44:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   12e48:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   12e4a:	6808      	ldr	r0, [r1, #0]
   12e4c:	f7fb fa22 	bl	e294 <ll_rx_put>
	ll_rx_sched();
   12e50:	f7fb fa2a 	bl	e2a8 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12e54:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12e58:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   12e5c:	e420      	b.n	126a0 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   12e5e:	3301      	adds	r3, #1
   12e60:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12e64:	e431      	b.n	126ca <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   12e66:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12e68:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12e6c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12e70:	2b00      	cmp	r3, #0
   12e72:	f47f ad11 	bne.w	12898 <ull_conn_llcp+0x210>
   12e76:	e678      	b.n	12b6a <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   12e78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12e7c:	2a00      	cmp	r2, #0
   12e7e:	f47f ad60 	bne.w	12942 <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head;
   12e82:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12e84:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12e88:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12e8c:	e561      	b.n	12952 <ull_conn_llcp+0x2ca>
   12e8e:	bf00      	nop
   12e90:	00025600 	.word	0x00025600
   12e94:	00025150 	.word	0x00025150
   12e98:	000250f0 	.word	0x000250f0
   12e9c:	20004d04 	.word	0x20004d04
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   12ea0:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   12ea4:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   12ea8:	4571      	cmp	r1, lr
   12eaa:	d038      	beq.n	12f1e <ull_conn_llcp+0x896>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   12eac:	eba1 010e 	sub.w	r1, r1, lr
   12eb0:	07c8      	lsls	r0, r1, #31
   12eb2:	f57f abfd 	bpl.w	126b0 <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   12eb6:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   12eba:	07d9      	lsls	r1, r3, #31
   12ebc:	f140 833a 	bpl.w	13534 <ull_conn_llcp+0xeac>
	} else if (conn->llcp_version.rx) {
   12ec0:	0798      	lsls	r0, r3, #30
   12ec2:	f140 832c 	bpl.w	1351e <ull_conn_llcp+0xe96>
		rx = ll_pdu_rx_alloc();
   12ec6:	f7fb fa13 	bl	e2f0 <ll_pdu_rx_alloc>
		if (!rx) {
   12eca:	4601      	mov	r1, r0
   12ecc:	2800      	cmp	r0, #0
   12ece:	d0c1      	beq.n	12e54 <ull_conn_llcp+0x7cc>
		conn->llcp_version.ack = conn->llcp_version.req;
   12ed0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   12ed4:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   12ed8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12eda:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12edc:	2303      	movs	r3, #3
   12ede:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ee0:	7f03      	ldrb	r3, [r0, #28]
   12ee2:	f043 0303 	orr.w	r3, r3, #3
   12ee6:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12ee8:	2306      	movs	r3, #6
   12eea:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12eec:	230c      	movs	r3, #12
   12eee:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   12ef0:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   12ef4:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   12ef8:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   12efc:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   12f00:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   12f04:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   12f08:	6800      	ldr	r0, [r0, #0]
   12f0a:	f7fb f9c3 	bl	e294 <ll_rx_put>
		ll_rx_sched();
   12f0e:	f7fb f9cb 	bl	e2a8 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12f12:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12f16:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   12f1a:	f7ff bbc1 	b.w	126a0 <ull_conn_llcp+0x18>
		} else if (conn->llcp_conn_param.ack !=
   12f1e:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   12f22:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   12f26:	458e      	cmp	lr, r1
   12f28:	f000 8233 	beq.w	13392 <ull_conn_llcp+0xd0a>
	return conn_upd_curr && (conn_upd_curr != conn);
   12f2c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 131d0 <ull_conn_llcp+0xb48>
   12f30:	f8d8 1000 	ldr.w	r1, [r8]
   12f34:	2900      	cmp	r1, #0
   12f36:	f000 8354 	beq.w	135e2 <ull_conn_llcp+0xf5a>
   12f3a:	428c      	cmp	r4, r1
   12f3c:	f47f abb8 	bne.w	126b0 <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   12f40:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   12f44:	f001 010f 	and.w	r1, r1, #15
   12f48:	2908      	cmp	r1, #8
   12f4a:	f200 8663 	bhi.w	13c14 <ull_conn_llcp+0x158c>
   12f4e:	f20f 0e08 	addw	lr, pc, #8
   12f52:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   12f56:	bf00      	nop
   12f58:	0001303f 	.word	0x0001303f
   12f5c:	00013105 	.word	0x00013105
   12f60:	00012fef 	.word	0x00012fef
   12f64:	000126a1 	.word	0x000126a1
   12f68:	000126a1 	.word	0x000126a1
   12f6c:	000126a1 	.word	0x000126a1
   12f70:	000126a1 	.word	0x000126a1
   12f74:	000126a1 	.word	0x000126a1
   12f78:	00012f7d 	.word	0x00012f7d
			event_counter = lll->event_counter +
   12f7c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   12f7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   12f80:	f8d4 01a0 	ldr.w	r0, [r4, #416]	; 0x1a0
			event_counter = lll->event_counter +
   12f84:	4413      	add	r3, r2
   12f86:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12f88:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   12f8c:	f820 3c02 	strh.w	r3, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12f90:	2304      	movs	r3, #4
   12f92:	f363 0203 	bfi	r2, r3, #0, #4
	    conn->tx_head &&
   12f96:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   12f9a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   12f9e:	f1a0 0113 	sub.w	r1, r0, #19
	if (
   12fa2:	2b00      	cmp	r3, #0
   12fa4:	f000 8380 	beq.w	136a8 <ull_conn_llcp+0x1020>
	    conn->tx_head &&
   12fa8:	07bf      	lsls	r7, r7, #30
   12faa:	f100 837d 	bmi.w	136a8 <ull_conn_llcp+0x1020>
	    !conn->llcp_phy.pause_tx &&
   12fae:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12fb2:	07d2      	lsls	r2, r2, #31
   12fb4:	f100 8378 	bmi.w	136a8 <ull_conn_llcp+0x1020>
		if (conn->tx_head == conn->tx_data) {
   12fb8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12fbc:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12fbe:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12fc2:	f000 85e9 	beq.w	13b98 <ull_conn_llcp+0x1510>
		} else if (!conn->tx_ctrl) {
   12fc6:	2a00      	cmp	r2, #0
   12fc8:	f000 85dd 	beq.w	13b86 <ull_conn_llcp+0x14fe>
	tx->next = conn->tx_ctrl_last->next;
   12fcc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12fd0:	681a      	ldr	r2, [r3, #0]
   12fd2:	f840 2c13 	str.w	r2, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
   12fd6:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   12fd8:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12fdc:	f850 3c13 	ldr.w	r3, [r0, #-19]
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	f47f ab65 	bne.w	126b0 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   12fe6:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
   12fea:	f7ff bb61 	b.w	126b0 <ull_conn_llcp+0x28>
	if (conn->llcp_enc.pause_tx) {
   12fee:	07bb      	lsls	r3, r7, #30
   12ff0:	f53f ab5e 	bmi.w	126b0 <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   12ff4:	f7fb f97c 	bl	e2f0 <ll_pdu_rx_alloc>
	if (!rx) {
   12ff8:	4601      	mov	r1, r0
   12ffa:	2800      	cmp	r0, #0
   12ffc:	f43f af2a 	beq.w	12e54 <ull_conn_llcp+0x7cc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13000:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13004:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13006:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13008:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1300c:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13010:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13012:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   13016:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13018:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1301a:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1301c:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1301e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   13022:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   13024:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   13028:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1302a:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1302e:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13030:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   13034:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13036:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   13038:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1303a:	77cb      	strb	r3, [r1, #31]
   1303c:	e705      	b.n	12e4a <ull_conn_llcp+0x7c2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1303e:	4865      	ldr	r0, [pc, #404]	; (131d4 <ull_conn_llcp+0xb4c>)
   13040:	f7f7 fa88 	bl	a554 <mem_acquire>
	if (!tx) {
   13044:	4602      	mov	r2, r0
   13046:	2800      	cmp	r0, #0
   13048:	f43f af04 	beq.w	12e54 <ull_conn_llcp+0x7cc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1304c:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   1304e:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13052:	f043 0303 	orr.w	r3, r3, #3
   13056:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13058:	2318      	movs	r3, #24
   1305a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1305c:	230f      	movs	r3, #15
   1305e:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   13060:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   13064:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   13066:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1306a:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1306c:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   13070:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13072:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   13076:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   13078:	2300      	movs	r3, #0
   1307a:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   1307c:	74c3      	strb	r3, [r0, #19]
   1307e:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   13080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13084:	7543      	strb	r3, [r0, #21]
   13086:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   13088:	75c3      	strb	r3, [r0, #23]
   1308a:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   1308c:	7643      	strb	r3, [r0, #25]
   1308e:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   13090:	76c3      	strb	r3, [r0, #27]
   13092:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   13094:	7743      	strb	r3, [r0, #29]
   13096:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   13098:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1309c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   130a0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   130a4:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   130a8:	2107      	movs	r1, #7
   130aa:	f361 0303 	bfi	r3, r1, #0, #4
   130ae:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   130b2:	68a3      	ldr	r3, [r4, #8]
   130b4:	2b00      	cmp	r3, #0
   130b6:	da0a      	bge.n	130ce <ull_conn_llcp+0xa46>
			uint32_t ticks_prepare_to_start =
   130b8:	68e7      	ldr	r7, [r4, #12]
   130ba:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   130bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   130c0:	4287      	cmp	r7, r0
   130c2:	bf2c      	ite	cs
   130c4:	19e9      	addcs	r1, r5, r7
   130c6:	1829      	addcc	r1, r5, r0
   130c8:	1acb      	subs	r3, r1, r3
   130ca:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
		win_offs = &p->offset0;
   130ce:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   130d0:	4b41      	ldr	r3, [pc, #260]	; (131d8 <ull_conn_llcp+0xb50>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   130d2:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   130d6:	2201      	movs	r2, #1
   130d8:	2102      	movs	r1, #2
   130da:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   130dc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   130de:	f7f7 fb11 	bl	a704 <mayfly_enqueue>
		LL_ASSERT(!retval);
   130e2:	2800      	cmp	r0, #0
   130e4:	f43f aeb6 	beq.w	12e54 <ull_conn_llcp+0x7cc>
   130e8:	4a3c      	ldr	r2, [pc, #240]	; (131dc <ull_conn_llcp+0xb54>)
   130ea:	493d      	ldr	r1, [pc, #244]	; (131e0 <ull_conn_llcp+0xb58>)
   130ec:	f640 63f6 	movw	r3, #3830	; 0xef6
   130f0:	483c      	ldr	r0, [pc, #240]	; (131e4 <ull_conn_llcp+0xb5c>)
   130f2:	f00c fb14 	bl	1f71e <printk>
   130f6:	4040      	eors	r0, r0
   130f8:	f380 8811 	msr	BASEPRI, r0
   130fc:	f04f 0003 	mov.w	r0, #3
   13100:	df02      	svc	2
   13102:	e6a7      	b.n	12e54 <ull_conn_llcp+0x7cc>
	if (conn->llcp_conn_param.status) {
   13104:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   13108:	2b00      	cmp	r3, #0
   1310a:	f040 8327 	bne.w	1375c <ull_conn_llcp+0x10d4>
	if (!conn->lll.role) {
   1310e:	2a00      	cmp	r2, #0
   13110:	f2c0 8405 	blt.w	1391e <ull_conn_llcp+0x1296>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13114:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   13118:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1311c:	2106      	movs	r1, #6
   1311e:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   13122:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13126:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   1312a:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   1312c:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   13130:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   13134:	2900      	cmp	r1, #0
   13136:	f000 84b7 	beq.w	13aa8 <ull_conn_llcp+0x1420>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   1313a:	fbb2 f3f1 	udiv	r3, r2, r1
   1313e:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   13142:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   13146:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   13148:	4299      	cmp	r1, r3
   1314a:	bf98      	it	ls
   1314c:	461a      	movls	r2, r3
   1314e:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13152:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   13156:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1315a:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   1315e:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13162:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   13166:	00db      	lsls	r3, r3, #3
   13168:	f022 020f 	bic.w	r2, r2, #15
   1316c:	f043 0302 	orr.w	r3, r3, #2
   13170:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   13172:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   13176:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   1317a:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1317e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   13182:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   13186:	f7ff ba96 	b.w	126b6 <ull_conn_llcp+0x2e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1318a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   1318e:	2b00      	cmp	r3, #0
   13190:	f43f ac8c 	beq.w	12aac <ull_conn_llcp+0x424>
			conn->periph.llcp_type = LLCP_NONE;
   13194:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   13198:	e48c      	b.n	12ab4 <ull_conn_llcp+0x42c>
		conn->tx_data_last = tx;
   1319a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1319e:	f7ff bbdb 	b.w	12958 <ull_conn_llcp+0x2d0>
		if (!conn->tx_ctrl) {
   131a2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   131a6:	2a00      	cmp	r2, #0
   131a8:	f47f ad1e 	bne.w	12be8 <ull_conn_llcp+0x560>
			tx->next = conn->tx_head;
   131ac:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   131b0:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   131b4:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   131b8:	e521      	b.n	12bfe <ull_conn_llcp+0x576>
		if (!conn->tx_ctrl) {
   131ba:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   131be:	2a00      	cmp	r2, #0
   131c0:	f47f adf1 	bne.w	12da6 <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head;
   131c4:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   131c6:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   131ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   131ce:	e5f2      	b.n	12db6 <ull_conn_llcp+0x72e>
   131d0:	20004c70 	.word	0x20004c70
   131d4:	20004d04 	.word	0x20004d04
   131d8:	20000700 	.word	0x20000700
   131dc:	00025600 	.word	0x00025600
   131e0:	000253f4 	.word	0x000253f4
   131e4:	000250f0 	.word	0x000250f0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   131e8:	48cf      	ldr	r0, [pc, #828]	; (13528 <ull_conn_llcp+0xea0>)
   131ea:	f7f7 f9b3 	bl	a554 <mem_acquire>
	if (tx) {
   131ee:	4680      	mov	r8, r0
   131f0:	2800      	cmp	r0, #0
   131f2:	f43f ae2f 	beq.w	12e54 <ull_conn_llcp+0x7cc>
		conn->llcp_feature.ack--;
   131f6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   131fa:	3b01      	subs	r3, #1
   131fc:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   13200:	2309      	movs	r3, #9
   13202:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   13204:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13208:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1320a:	7903      	ldrb	r3, [r0, #4]
   1320c:	f043 0303 	orr.w	r3, r3, #3
   13210:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   13212:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   13216:	bfac      	ite	ge
   13218:	2308      	movge	r3, #8
   1321a:	230e      	movlt	r3, #14
   1321c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1321e:	4639      	mov	r1, r7
   13220:	4410      	add	r0, r2
   13222:	f00d fa8c 	bl	2073e <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   13226:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   1322a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   1322c:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   13230:	f3c2 2207 	ubfx	r2, r2, #8, #8
   13234:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   13238:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1323a:	f888 300c 	strb.w	r3, [r8, #12]
   1323e:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   13242:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   13246:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   1324a:	0a09      	lsrs	r1, r1, #8
   1324c:	0a12      	lsrs	r2, r2, #8
   1324e:	f888 100b 	strb.w	r1, [r8, #11]
   13252:	f888 300d 	strb.w	r3, [r8, #13]
   13256:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   1325a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1325e:	2b00      	cmp	r3, #0
   13260:	f000 80c9 	beq.w	133f6 <ull_conn_llcp+0xd6e>
	    !conn->llcp_enc.pause_tx &&
   13264:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13268:	0792      	lsls	r2, r2, #30
   1326a:	f100 80c4 	bmi.w	133f6 <ull_conn_llcp+0xd6e>
	    !conn->llcp_phy.pause_tx &&
   1326e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13272:	07d7      	lsls	r7, r2, #31
   13274:	f100 80bf 	bmi.w	133f6 <ull_conn_llcp+0xd6e>
		if (conn->tx_head == conn->tx_data) {
   13278:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1327c:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1327e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13282:	f000 825b 	beq.w	1373c <ull_conn_llcp+0x10b4>
		} else if (!conn->tx_ctrl) {
   13286:	2a00      	cmp	r2, #0
   13288:	f000 83e0 	beq.w	13a4c <ull_conn_llcp+0x13c4>
	tx->next = conn->tx_ctrl_last->next;
   1328c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13290:	681a      	ldr	r2, [r3, #0]
   13292:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   13296:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1329a:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1329e:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   132a2:	2b00      	cmp	r3, #0
   132a4:	f000 81d5 	beq.w	13652 <ull_conn_llcp+0xfca>
		conn->procedure_expire = conn->procedure_reload;
   132a8:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   132ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   132b0:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   132b4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   132b8:	f7ff b9f2 	b.w	126a0 <ull_conn_llcp+0x18>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   132bc:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   132c0:	463b      	mov	r3, r7
   132c2:	4642      	mov	r2, r8
   132c4:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   132c8:	f204 1071 	addw	r0, r4, #369	; 0x171
   132cc:	f005 ff50 	bl	19170 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   132d0:	4639      	mov	r1, r7
   132d2:	2210      	movs	r2, #16
   132d4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   132d8:	f00d fa26 	bl	20728 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   132dc:	2208      	movs	r2, #8
   132de:	f104 0194 	add.w	r1, r4, #148	; 0x94
   132e2:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   132e6:	f00d fa1f 	bl	20728 <memcpy>
		lll->enc_rx = 1;
   132ea:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   132ee:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   132f2:	f023 0318 	bic.w	r3, r3, #24
   132f6:	f043 0318 	orr.w	r3, r3, #24
   132fa:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   132fe:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   13302:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   13306:	f368 0300 	bfi	r3, r8, #0, #1
   1330a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   1330e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   13312:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   13316:	f043 0301 	orr.w	r3, r3, #1
   1331a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1331e:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   13320:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   13324:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   13328:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1332c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   13330:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   13334:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13338:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1333c:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13340:	2306      	movs	r3, #6
   13342:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   13346:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1334a:	f042 0203 	orr.w	r2, r2, #3
   1334e:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   13352:	2b00      	cmp	r3, #0
   13354:	d044      	beq.n	133e0 <ull_conn_llcp+0xd58>
	    !conn->llcp_enc.pause_tx &&
   13356:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1335a:	0797      	lsls	r7, r2, #30
   1335c:	d440      	bmi.n	133e0 <ull_conn_llcp+0xd58>
	    !conn->llcp_phy.pause_tx &&
   1335e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13362:	07d0      	lsls	r0, r2, #31
   13364:	d43c      	bmi.n	133e0 <ull_conn_llcp+0xd58>
		if (conn->tx_head == conn->tx_data) {
   13366:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1336a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1336c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13370:	f000 81d3 	beq.w	1371a <ull_conn_llcp+0x1092>
		} else if (!conn->tx_ctrl) {
   13374:	2a00      	cmp	r2, #0
   13376:	f000 82b8 	beq.w	138ea <ull_conn_llcp+0x1262>
	tx->next = conn->tx_ctrl_last->next;
   1337a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1337e:	681a      	ldr	r2, [r3, #0]
   13380:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   13384:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   13388:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   1338c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
}
   13390:	e4c0      	b.n	12d14 <ull_conn_llcp+0x68c>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13392:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   13396:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1339a:	4299      	cmp	r1, r3
   1339c:	d079      	beq.n	13492 <ull_conn_llcp+0xe0a>
			event_len_prep(conn);
   1339e:	4620      	mov	r0, r4
   133a0:	f7fc fe88 	bl	100b4 <event_len_prep>
   133a4:	e556      	b.n	12e54 <ull_conn_llcp+0x7cc>
		if (!conn->tx_ctrl) {
   133a6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   133aa:	2a00      	cmp	r2, #0
   133ac:	f47f ab27 	bne.w	129fe <ull_conn_llcp+0x376>
			tx->next = conn->tx_head;
   133b0:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   133b2:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   133b6:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   133ba:	f7ff bb28 	b.w	12a0e <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   133be:	6819      	ldr	r1, [r3, #0]
   133c0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   133c4:	2a00      	cmp	r2, #0
   133c6:	f47f aa5c 	bne.w	12882 <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   133ca:	681a      	ldr	r2, [r3, #0]
   133cc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   133ce:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   133d0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   133d2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   133d6:	2b00      	cmp	r3, #0
   133d8:	f47f aa5e 	bne.w	12898 <ull_conn_llcp+0x210>
   133dc:	f7ff bbc5 	b.w	12b6a <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   133e0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   133e4:	2a00      	cmp	r2, #0
   133e6:	d1c8      	bne.n	1337a <ull_conn_llcp+0xcf2>
			tx->next = conn->tx_head;
   133e8:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   133ec:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   133f0:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   133f4:	e48e      	b.n	12d14 <ull_conn_llcp+0x68c>
		if (!conn->tx_ctrl) {
   133f6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   133fa:	2a00      	cmp	r2, #0
   133fc:	f47f af46 	bne.w	1328c <ull_conn_llcp+0xc04>
			tx->next = conn->tx_head;
   13400:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   13404:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13408:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1340c:	e749      	b.n	132a2 <ull_conn_llcp+0xc1a>
	conn->lll.enc_tx = 1;
   1340e:	f043 0310 	orr.w	r3, r3, #16
   13412:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13416:	2301      	movs	r3, #1
   13418:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1341a:	7903      	ldrb	r3, [r0, #4]
   1341c:	f043 0303 	orr.w	r3, r3, #3
   13420:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   13422:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13426:	2206      	movs	r2, #6
   13428:	71c2      	strb	r2, [r0, #7]
	if (
   1342a:	2b00      	cmp	r3, #0
   1342c:	f000 80c9 	beq.w	135c2 <ull_conn_llcp+0xf3a>
	    !conn->llcp_enc.pause_tx &&
   13430:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13434:	0797      	lsls	r7, r2, #30
   13436:	f100 80c4 	bmi.w	135c2 <ull_conn_llcp+0xf3a>
	    !conn->llcp_phy.pause_tx &&
   1343a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1343e:	07d0      	lsls	r0, r2, #31
   13440:	f100 80bf 	bmi.w	135c2 <ull_conn_llcp+0xf3a>
		if (conn->tx_head == conn->tx_data) {
   13444:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13448:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1344a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1344e:	f000 823e 	beq.w	138ce <ull_conn_llcp+0x1246>
		} else if (!conn->tx_ctrl) {
   13452:	2a00      	cmp	r2, #0
   13454:	f000 825a 	beq.w	1390c <ull_conn_llcp+0x1284>
	tx->next = conn->tx_ctrl_last->next;
   13458:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1345c:	681a      	ldr	r2, [r3, #0]
   1345e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   13462:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   13466:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1346a:	f8d9 3000 	ldr.w	r3, [r9]
   1346e:	2b00      	cmp	r3, #0
   13470:	f47f ac55 	bne.w	12d1e <ull_conn_llcp+0x696>
		conn->tx_data_last = tx;
   13474:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   13478:	e451      	b.n	12d1e <ull_conn_llcp+0x696>
		if (!conn->tx_ctrl) {
   1347a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1347e:	2a00      	cmp	r2, #0
   13480:	f47f ac3d 	bne.w	12cfe <ull_conn_llcp+0x676>
			tx->next = conn->tx_head;
   13484:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13488:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1348c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13490:	e43e      	b.n	12d10 <ull_conn_llcp+0x688>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   13492:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   13496:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1349a:	428b      	cmp	r3, r1
   1349c:	f43f a908 	beq.w	126b0 <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   134a0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   134a4:	f003 0703 	and.w	r7, r3, #3
   134a8:	2f03      	cmp	r7, #3
   134aa:	f000 81b5 	beq.w	13818 <ull_conn_llcp+0x1190>
   134ae:	2f00      	cmp	r7, #0
   134b0:	f47f a8fd 	bne.w	126ae <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   134b4:	481c      	ldr	r0, [pc, #112]	; (13528 <ull_conn_llcp+0xea0>)
   134b6:	f7f7 f84d 	bl	a554 <mem_acquire>
		if (!tx) {
   134ba:	4601      	mov	r1, r0
   134bc:	2800      	cmp	r0, #0
   134be:	f43f acc9 	beq.w	12e54 <ull_conn_llcp+0x7cc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   134c2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   134c6:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   134ca:	2201      	movs	r2, #1
   134cc:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   134d0:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   134d4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   134d8:	f3c3 0782 	ubfx	r7, r3, #2, #3
   134dc:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   134e0:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   134e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   134e8:	f360 07c3 	bfi	r7, r0, #3, #1
   134ec:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   134f0:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134f4:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   134f6:	f367 02c5 	bfi	r2, r7, #3, #3
   134fa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   134fe:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   13502:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13504:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   13508:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1350a:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1350c:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   1350e:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   13510:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13512:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   13514:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13516:	4620      	mov	r0, r4
   13518:	f7fc fa58 	bl	f9cc <ctrl_tx_pause_enqueue>
   1351c:	e6c4      	b.n	132a8 <ull_conn_llcp+0xc20>
		LL_ASSERT(0);
   1351e:	4a03      	ldr	r2, [pc, #12]	; (1352c <ull_conn_llcp+0xea4>)
   13520:	4903      	ldr	r1, [pc, #12]	; (13530 <ull_conn_llcp+0xea8>)
   13522:	f640 63a1 	movw	r3, #3745	; 0xea1
   13526:	e5e3      	b.n	130f0 <ull_conn_llcp+0xa68>
   13528:	20004d04 	.word	0x20004d04
   1352c:	00025600 	.word	0x00025600
   13530:	00025150 	.word	0x00025150
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13534:	48b7      	ldr	r0, [pc, #732]	; (13814 <ull_conn_llcp+0x118c>)
   13536:	f7f7 f80d 	bl	a554 <mem_acquire>
		if (tx) {
   1353a:	2800      	cmp	r0, #0
   1353c:	f43f ac8a 	beq.w	12e54 <ull_conn_llcp+0x7cc>
			conn->llcp_version.ack--;
   13540:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   13544:	3b01      	subs	r3, #1
   13546:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   1354a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1354e:	f043 0301 	orr.w	r3, r3, #1
   13552:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   13556:	7903      	ldrb	r3, [r0, #4]
   13558:	f043 0303 	orr.w	r3, r3, #3
   1355c:	7103      	strb	r3, [r0, #4]
			pdu->len =
   1355e:	2306      	movs	r3, #6
   13560:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   13562:	230c      	movs	r3, #12
   13564:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   13566:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   13568:	f06f 030e 	mvn.w	r3, #14
   1356c:	7243      	strb	r3, [r0, #9]
   1356e:	2305      	movs	r3, #5
   13570:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   13572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13576:	72c3      	strb	r3, [r0, #11]
   13578:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1357a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1357e:	2b00      	cmp	r3, #0
   13580:	d072      	beq.n	13668 <ull_conn_llcp+0xfe0>
	    !conn->llcp_enc.pause_tx &&
   13582:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13586:	0792      	lsls	r2, r2, #30
   13588:	d46e      	bmi.n	13668 <ull_conn_llcp+0xfe0>
	    !conn->llcp_phy.pause_tx &&
   1358a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1358e:	07d7      	lsls	r7, r2, #31
   13590:	d46a      	bmi.n	13668 <ull_conn_llcp+0xfe0>
		if (conn->tx_head == conn->tx_data) {
   13592:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13596:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13598:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1359c:	f000 824a 	beq.w	13a34 <ull_conn_llcp+0x13ac>
		} else if (!conn->tx_ctrl) {
   135a0:	2a00      	cmp	r2, #0
   135a2:	f000 828d 	beq.w	13ac0 <ull_conn_llcp+0x1438>
	tx->next = conn->tx_ctrl_last->next;
   135a6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   135aa:	681a      	ldr	r2, [r3, #0]
   135ac:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   135ae:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   135b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   135b4:	6803      	ldr	r3, [r0, #0]
   135b6:	2b00      	cmp	r3, #0
   135b8:	f47f ae76 	bne.w	132a8 <ull_conn_llcp+0xc20>
		conn->tx_data_last = tx;
   135bc:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   135c0:	e672      	b.n	132a8 <ull_conn_llcp+0xc20>
		if (!conn->tx_ctrl) {
   135c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   135c6:	2a00      	cmp	r2, #0
   135c8:	f47f af46 	bne.w	13458 <ull_conn_llcp+0xdd0>
			tx->next = conn->tx_head;
   135cc:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   135d0:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   135d4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   135d8:	e747      	b.n	1346a <ull_conn_llcp+0xde2>
		conn->tx_data_last = tx;
   135da:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   135de:	f7ff ba19 	b.w	12a14 <ull_conn_llcp+0x38c>
	switch (conn->llcp_conn_param.state) {
   135e2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   135e6:	f003 030f 	and.w	r3, r3, #15
   135ea:	2b08      	cmp	r3, #8
   135ec:	f200 8312 	bhi.w	13c14 <ull_conn_llcp+0x158c>
   135f0:	a101      	add	r1, pc, #4	; (adr r1, 135f8 <ull_conn_llcp+0xf70>)
   135f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   135f6:	bf00      	nop
   135f8:	0001303f 	.word	0x0001303f
   135fc:	00013105 	.word	0x00013105
   13600:	00012fef 	.word	0x00012fef
   13604:	000126b1 	.word	0x000126b1
   13608:	000126b1 	.word	0x000126b1
   1360c:	000126b1 	.word	0x000126b1
   13610:	000126b1 	.word	0x000126b1
   13614:	000126b1 	.word	0x000126b1
   13618:	00012f7d 	.word	0x00012f7d
		if (!conn->tx_ctrl) {
   1361c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13620:	2a00      	cmp	r2, #0
   13622:	f47f a8a1 	bne.w	12768 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head;
   13626:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1362a:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1362e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13632:	f7ff b8a2 	b.w	1277a <ull_conn_llcp+0xf2>
			conn->tx_data = conn->tx_data->next;
   13636:	6819      	ldr	r1, [r3, #0]
   13638:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1363c:	2a00      	cmp	r2, #0
   1363e:	f47f a980 	bne.w	12942 <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head->next;
   13642:	681a      	ldr	r2, [r3, #0]
   13644:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13646:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   13648:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1364a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1364e:	f7ff b980 	b.w	12952 <ull_conn_llcp+0x2ca>
		conn->tx_data_last = tx;
   13652:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   13656:	e627      	b.n	132a8 <ull_conn_llcp+0xc20>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13658:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   1365a:	f889 8008 	strb.w	r8, [r9, #8]
   1365e:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13660:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   13664:	f7ff b862 	b.w	1272c <ull_conn_llcp+0xa4>
		if (!conn->tx_ctrl) {
   13668:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1366c:	2a00      	cmp	r2, #0
   1366e:	d19a      	bne.n	135a6 <ull_conn_llcp+0xf1e>
			tx->next = conn->tx_head;
   13670:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13672:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13676:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1367a:	e79b      	b.n	135b4 <ull_conn_llcp+0xf2c>
	    ((pdu_data_tx->llctrl.opcode !=
   1367c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1367e:	2a03      	cmp	r2, #3
   13680:	f43f aea3 	beq.w	133ca <ull_conn_llcp+0xd42>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13684:	2a0a      	cmp	r2, #10
   13686:	f47f a8f4 	bne.w	12872 <ull_conn_llcp+0x1ea>
   1368a:	e69e      	b.n	133ca <ull_conn_llcp+0xd42>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1368c:	791a      	ldrb	r2, [r3, #4]
   1368e:	f002 0203 	and.w	r2, r2, #3
   13692:	2a03      	cmp	r2, #3
   13694:	f000 80a2 	beq.w	137dc <ull_conn_llcp+0x1154>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13698:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1369c:	f7ff b951 	b.w	12942 <ull_conn_llcp+0x2ba>
		conn->tx_data_last = tx;
   136a0:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   136a4:	f7ff b86e 	b.w	12784 <ull_conn_llcp+0xfc>
		if (!conn->tx_ctrl) {
   136a8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   136ac:	2a00      	cmp	r2, #0
   136ae:	f47f ac8d 	bne.w	12fcc <ull_conn_llcp+0x944>
			tx->next = conn->tx_head;
   136b2:	f840 3c13 	str.w	r3, [r0, #-19]
				conn->tx_ctrl = tx;
   136b6:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   136ba:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   136be:	e48d      	b.n	12fdc <ull_conn_llcp+0x954>
			conn->tx_data = conn->tx_data->next;
   136c0:	6819      	ldr	r1, [r3, #0]
   136c2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   136c6:	2a00      	cmp	r2, #0
   136c8:	f47f aa8e 	bne.w	12be8 <ull_conn_llcp+0x560>
			tx->next = conn->tx_head->next;
   136cc:	681a      	ldr	r2, [r3, #0]
   136ce:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   136d2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   136d6:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   136da:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   136de:	f7ff ba8e 	b.w	12bfe <ull_conn_llcp+0x576>
			conn->tx_data = conn->tx_data->next;
   136e2:	6819      	ldr	r1, [r3, #0]
   136e4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   136e8:	2a00      	cmp	r2, #0
   136ea:	f47f ab5c 	bne.w	12da6 <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head->next;
   136ee:	681a      	ldr	r2, [r3, #0]
   136f0:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   136f2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   136f4:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   136f6:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   136fa:	f7ff bb5c 	b.w	12db6 <ull_conn_llcp+0x72e>
			conn->tx_data = conn->tx_data->next;
   136fe:	6819      	ldr	r1, [r3, #0]
   13700:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13704:	2a00      	cmp	r2, #0
   13706:	f47f a97a 	bne.w	129fe <ull_conn_llcp+0x376>
			tx->next = conn->tx_head->next;
   1370a:	681a      	ldr	r2, [r3, #0]
   1370c:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   1370e:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   13710:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   13712:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   13716:	f7ff b97a 	b.w	12a0e <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   1371a:	6819      	ldr	r1, [r3, #0]
   1371c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13720:	2a00      	cmp	r2, #0
   13722:	f47f ae2a 	bne.w	1337a <ull_conn_llcp+0xcf2>
			tx->next = conn->tx_head->next;
   13726:	681a      	ldr	r2, [r3, #0]
   13728:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1372c:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   13730:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   13734:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13738:	f7ff baec 	b.w	12d14 <ull_conn_llcp+0x68c>
			conn->tx_data = conn->tx_data->next;
   1373c:	6819      	ldr	r1, [r3, #0]
   1373e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13742:	2a00      	cmp	r2, #0
   13744:	f47f ada2 	bne.w	1328c <ull_conn_llcp+0xc04>
			tx->next = conn->tx_head->next;
   13748:	681a      	ldr	r2, [r3, #0]
   1374a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1374e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13752:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13756:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   1375a:	e5a2      	b.n	132a2 <ull_conn_llcp+0xc1a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1375c:	482d      	ldr	r0, [pc, #180]	; (13814 <ull_conn_llcp+0x118c>)
   1375e:	f7f6 fef9 	bl	a554 <mem_acquire>
		if (!tx) {
   13762:	2800      	cmp	r0, #0
   13764:	f43f ab76 	beq.w	12e54 <ull_conn_llcp+0x7cc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   13768:	7902      	ldrb	r2, [r0, #4]
   1376a:	f042 0203 	orr.w	r2, r2, #3
   1376e:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13770:	2211      	movs	r2, #17
   13772:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13774:	2203      	movs	r2, #3
   13776:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13778:	220f      	movs	r2, #15
   1377a:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1377c:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   13780:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   13782:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   13786:	2a00      	cmp	r2, #0
   13788:	f000 8149 	beq.w	13a1e <ull_conn_llcp+0x1396>
	    !conn->llcp_enc.pause_tx &&
   1378c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   13790:	0789      	lsls	r1, r1, #30
   13792:	f100 8144 	bmi.w	13a1e <ull_conn_llcp+0x1396>
	    !conn->llcp_phy.pause_tx &&
   13796:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1379a:	07cb      	lsls	r3, r1, #31
   1379c:	f100 813f 	bmi.w	13a1e <ull_conn_llcp+0x1396>
		if (conn->tx_head == conn->tx_data) {
   137a0:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   137a4:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   137a6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   137aa:	f000 8212 	beq.w	13bd2 <ull_conn_llcp+0x154a>
		} else if (!conn->tx_ctrl) {
   137ae:	2900      	cmp	r1, #0
   137b0:	f000 81c8 	beq.w	13b44 <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
   137b4:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   137b8:	6811      	ldr	r1, [r2, #0]
   137ba:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   137bc:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   137be:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   137c2:	6802      	ldr	r2, [r0, #0]
   137c4:	2a00      	cmp	r2, #0
   137c6:	f000 81ba 	beq.w	13b3e <ull_conn_llcp+0x14b6>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   137ca:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   137ce:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   137d2:	2300      	movs	r3, #0
   137d4:	f8c8 3000 	str.w	r3, [r8]
   137d8:	f7ff bb3c 	b.w	12e54 <ull_conn_llcp+0x7cc>
	    ((pdu_data_tx->llctrl.opcode !=
   137dc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   137de:	2a03      	cmp	r2, #3
   137e0:	f43f af2f 	beq.w	13642 <ull_conn_llcp+0xfba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   137e4:	2a0a      	cmp	r2, #10
   137e6:	f47f af57 	bne.w	13698 <ull_conn_llcp+0x1010>
   137ea:	e72a      	b.n	13642 <ull_conn_llcp+0xfba>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   137ec:	791a      	ldrb	r2, [r3, #4]
   137ee:	f002 0203 	and.w	r2, r2, #3
   137f2:	2a03      	cmp	r2, #3
   137f4:	f000 8082 	beq.w	138fc <ull_conn_llcp+0x1274>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   137f8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   137fc:	f7ff b9f4 	b.w	12be8 <ull_conn_llcp+0x560>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13800:	791a      	ldrb	r2, [r3, #4]
   13802:	f002 0203 	and.w	r2, r2, #3
   13806:	2a03      	cmp	r2, #3
   13808:	f000 813c 	beq.w	13a84 <ull_conn_llcp+0x13fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1380c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13810:	f7ff bac9 	b.w	12da6 <ull_conn_llcp+0x71e>
   13814:	20004d04 	.word	0x20004d04
		if (conn->llcp_phy.tx & PHY_2M) {
   13818:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1381a:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   1381e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   13822:	f140 8124 	bpl.w	13a6e <ull_conn_llcp+0x13e6>
			conn->llcp_phy.tx = PHY_2M;
   13826:	2202      	movs	r2, #2
   13828:	f362 0384 	bfi	r3, r2, #2, #3
   1382c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   13830:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   13834:	065f      	lsls	r7, r3, #25
   13836:	ea4f 1253 	mov.w	r2, r3, lsr #5
   1383a:	f140 810f 	bpl.w	13a5c <ull_conn_llcp+0x13d4>
			conn->llcp_phy.rx = PHY_2M;
   1383e:	2202      	movs	r2, #2
   13840:	f362 1347 	bfi	r3, r2, #5, #3
   13844:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   13848:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1384a:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1384e:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13852:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   13856:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1385a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1385e:	f3c2 0182 	ubfx	r1, r2, #2, #3
   13862:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13866:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1386a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1386e:	428f      	cmp	r7, r1
   13870:	bf08      	it	eq
   13872:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13874:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   13876:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   1387a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1387e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   13882:	bf08      	it	eq
   13884:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13886:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1388a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   1388e:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   13890:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   13894:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13898:	f7fe bf26 	b.w	126e8 <ull_conn_llcp+0x60>
			conn->tx_data = conn->tx_data->next;
   1389c:	6819      	ldr	r1, [r3, #0]
   1389e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   138a2:	2a00      	cmp	r2, #0
   138a4:	f47f aa2b 	bne.w	12cfe <ull_conn_llcp+0x676>
			tx->next = conn->tx_head->next;
   138a8:	681a      	ldr	r2, [r3, #0]
   138aa:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   138ae:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   138b2:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   138b6:	f7ff ba2b 	b.w	12d10 <ull_conn_llcp+0x688>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   138ba:	791a      	ldrb	r2, [r3, #4]
   138bc:	f002 0203 	and.w	r2, r2, #3
   138c0:	2a03      	cmp	r2, #3
   138c2:	f000 80f5 	beq.w	13ab0 <ull_conn_llcp+0x1428>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   138c6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   138ca:	f7ff b898 	b.w	129fe <ull_conn_llcp+0x376>
			conn->tx_data = conn->tx_data->next;
   138ce:	6819      	ldr	r1, [r3, #0]
   138d0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   138d4:	2a00      	cmp	r2, #0
   138d6:	f47f adbf 	bne.w	13458 <ull_conn_llcp+0xdd0>
			tx->next = conn->tx_head->next;
   138da:	681a      	ldr	r2, [r3, #0]
   138dc:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   138e0:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   138e4:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   138e8:	e5bf      	b.n	1346a <ull_conn_llcp+0xde2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   138ea:	791a      	ldrb	r2, [r3, #4]
   138ec:	f002 0203 	and.w	r2, r2, #3
   138f0:	2a03      	cmp	r2, #3
   138f2:	f000 811c 	beq.w	13b2e <ull_conn_llcp+0x14a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   138f6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   138fa:	e53e      	b.n	1337a <ull_conn_llcp+0xcf2>
	    ((pdu_data_tx->llctrl.opcode !=
   138fc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   138fe:	2a03      	cmp	r2, #3
   13900:	f43f aee4 	beq.w	136cc <ull_conn_llcp+0x1044>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13904:	2a0a      	cmp	r2, #10
   13906:	f47f af77 	bne.w	137f8 <ull_conn_llcp+0x1170>
   1390a:	e6df      	b.n	136cc <ull_conn_llcp+0x1044>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1390c:	791a      	ldrb	r2, [r3, #4]
   1390e:	f002 0203 	and.w	r2, r2, #3
   13912:	2a03      	cmp	r2, #3
   13914:	f000 811e 	beq.w	13b54 <ull_conn_llcp+0x14cc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13918:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1391c:	e59c      	b.n	13458 <ull_conn_llcp+0xdd0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1391e:	48b8      	ldr	r0, [pc, #736]	; (13c00 <ull_conn_llcp+0x1578>)
   13920:	f7f6 fe18 	bl	a554 <mem_acquire>
	if (!tx) {
   13924:	2800      	cmp	r0, #0
   13926:	f43f aa95 	beq.w	12e54 <ull_conn_llcp+0x7cc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1392a:	7902      	ldrb	r2, [r0, #4]
   1392c:	f042 0203 	orr.w	r2, r2, #3
   13930:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   13932:	2218      	movs	r2, #24
   13934:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13936:	2210      	movs	r2, #16
   13938:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   1393a:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   1393e:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   13940:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   13944:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   13946:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   1394a:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   1394c:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   13950:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   13952:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   13956:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   13958:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   1395c:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   13960:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   13964:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13968:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   1396c:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   13970:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   13974:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13978:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   1397c:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   13980:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   13984:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   13988:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   1398c:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   13990:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   13994:	2a00      	cmp	r2, #0
   13996:	d038      	beq.n	13a0a <ull_conn_llcp+0x1382>
	    !conn->llcp_enc.pause_tx &&
   13998:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1399c:	078f      	lsls	r7, r1, #30
   1399e:	d434      	bmi.n	13a0a <ull_conn_llcp+0x1382>
	    !conn->llcp_phy.pause_tx &&
   139a0:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   139a4:	07c9      	lsls	r1, r1, #31
   139a6:	d430      	bmi.n	13a0a <ull_conn_llcp+0x1382>
		if (conn->tx_head == conn->tx_data) {
   139a8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   139ac:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   139ae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   139b2:	f000 809e 	beq.w	13af2 <ull_conn_llcp+0x146a>
		} else if (!conn->tx_ctrl) {
   139b6:	2900      	cmp	r1, #0
   139b8:	f000 80b1 	beq.w	13b1e <ull_conn_llcp+0x1496>
	tx->next = conn->tx_ctrl_last->next;
   139bc:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   139c0:	6811      	ldr	r1, [r2, #0]
   139c2:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   139c4:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   139c6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   139ca:	6802      	ldr	r2, [r0, #0]
   139cc:	2a00      	cmp	r2, #0
   139ce:	f000 80a3 	beq.w	13b18 <ull_conn_llcp+0x1490>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   139d2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   139d6:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   139da:	2305      	movs	r3, #5
   139dc:	f363 0203 	bfi	r2, r3, #0, #4
   139e0:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   139e4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   139e8:	f7fe be5a 	b.w	126a0 <ull_conn_llcp+0x18>
			conn->tx_data = conn->tx_data->next;
   139ec:	6819      	ldr	r1, [r3, #0]
   139ee:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   139f2:	2a00      	cmp	r2, #0
   139f4:	f47e aeb8 	bne.w	12768 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head->next;
   139f8:	681a      	ldr	r2, [r3, #0]
   139fa:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   139fe:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13a02:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13a06:	f7fe beb8 	b.w	1277a <ull_conn_llcp+0xf2>
		if (!conn->tx_ctrl) {
   13a0a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   13a0e:	2900      	cmp	r1, #0
   13a10:	d1d4      	bne.n	139bc <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head;
   13a12:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   13a14:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13a18:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13a1c:	e7d5      	b.n	139ca <ull_conn_llcp+0x1342>
		if (!conn->tx_ctrl) {
   13a1e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   13a22:	2900      	cmp	r1, #0
   13a24:	f47f aec6 	bne.w	137b4 <ull_conn_llcp+0x112c>
			tx->next = conn->tx_head;
   13a28:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   13a2a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13a2e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13a32:	e6c6      	b.n	137c2 <ull_conn_llcp+0x113a>
			conn->tx_data = conn->tx_data->next;
   13a34:	6819      	ldr	r1, [r3, #0]
   13a36:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13a3a:	2a00      	cmp	r2, #0
   13a3c:	f47f adb3 	bne.w	135a6 <ull_conn_llcp+0xf1e>
			tx->next = conn->tx_head->next;
   13a40:	681a      	ldr	r2, [r3, #0]
   13a42:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13a44:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   13a46:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13a4a:	e5b3      	b.n	135b4 <ull_conn_llcp+0xf2c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a4c:	791a      	ldrb	r2, [r3, #4]
   13a4e:	f002 0203 	and.w	r2, r2, #3
   13a52:	2a03      	cmp	r2, #3
   13a54:	d03d      	beq.n	13ad2 <ull_conn_llcp+0x144a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a56:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13a5a:	e417      	b.n	1328c <ull_conn_llcp+0xc04>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   13a5c:	07d1      	lsls	r1, r2, #31
   13a5e:	f140 80c6 	bpl.w	13bee <ull_conn_llcp+0x1566>
			conn->llcp_phy.rx = PHY_1M;
   13a62:	2201      	movs	r2, #1
   13a64:	f362 1347 	bfi	r3, r2, #5, #3
   13a68:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13a6c:	e6ec      	b.n	13848 <ull_conn_llcp+0x11c0>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13a6e:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   13a70:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13a74:	f140 809e 	bpl.w	13bb4 <ull_conn_llcp+0x152c>
			conn->llcp_phy.tx = PHY_1M;
   13a78:	2201      	movs	r2, #1
   13a7a:	f362 0384 	bfi	r3, r2, #2, #3
   13a7e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13a82:	e6d5      	b.n	13830 <ull_conn_llcp+0x11a8>
	    ((pdu_data_tx->llctrl.opcode !=
   13a84:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a86:	2a03      	cmp	r2, #3
   13a88:	f43f ae31 	beq.w	136ee <ull_conn_llcp+0x1066>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13a8c:	2a0a      	cmp	r2, #10
   13a8e:	f47f aebd 	bne.w	1380c <ull_conn_llcp+0x1184>
   13a92:	e62c      	b.n	136ee <ull_conn_llcp+0x1066>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a94:	791a      	ldrb	r2, [r3, #4]
   13a96:	f002 0203 	and.w	r2, r2, #3
   13a9a:	2a03      	cmp	r2, #3
   13a9c:	f000 809f 	beq.w	13bde <ull_conn_llcp+0x1556>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13aa0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13aa4:	f7ff b92b 	b.w	12cfe <ull_conn_llcp+0x676>
			conn->llcp_cu.interval = interval_max;
   13aa8:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   13aac:	f7ff bb51 	b.w	13152 <ull_conn_llcp+0xaca>
	    ((pdu_data_tx->llctrl.opcode !=
   13ab0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ab2:	2a03      	cmp	r2, #3
   13ab4:	f43f ae29 	beq.w	1370a <ull_conn_llcp+0x1082>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ab8:	2a0a      	cmp	r2, #10
   13aba:	f47f af04 	bne.w	138c6 <ull_conn_llcp+0x123e>
   13abe:	e624      	b.n	1370a <ull_conn_llcp+0x1082>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ac0:	791a      	ldrb	r2, [r3, #4]
   13ac2:	f002 0203 	and.w	r2, r2, #3
   13ac6:	2a03      	cmp	r2, #3
   13ac8:	f000 809c 	beq.w	13c04 <ull_conn_llcp+0x157c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13acc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13ad0:	e569      	b.n	135a6 <ull_conn_llcp+0xf1e>
	    ((pdu_data_tx->llctrl.opcode !=
   13ad2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ad4:	2a03      	cmp	r2, #3
   13ad6:	f43f ae37 	beq.w	13748 <ull_conn_llcp+0x10c0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ada:	2a0a      	cmp	r2, #10
   13adc:	d1bb      	bne.n	13a56 <ull_conn_llcp+0x13ce>
   13ade:	e633      	b.n	13748 <ull_conn_llcp+0x10c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ae0:	791a      	ldrb	r2, [r3, #4]
   13ae2:	f002 0203 	and.w	r2, r2, #3
   13ae6:	2a03      	cmp	r2, #3
   13ae8:	d00f      	beq.n	13b0a <ull_conn_llcp+0x1482>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13aea:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13aee:	f7fe be3b 	b.w	12768 <ull_conn_llcp+0xe0>
			conn->tx_data = conn->tx_data->next;
   13af2:	6813      	ldr	r3, [r2, #0]
   13af4:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13af8:	2900      	cmp	r1, #0
   13afa:	f47f af5f 	bne.w	139bc <ull_conn_llcp+0x1334>
			tx->next = conn->tx_head->next;
   13afe:	6811      	ldr	r1, [r2, #0]
   13b00:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   13b02:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   13b04:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13b08:	e75f      	b.n	139ca <ull_conn_llcp+0x1342>
	    ((pdu_data_tx->llctrl.opcode !=
   13b0a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b0c:	2a03      	cmp	r2, #3
   13b0e:	f43f af73 	beq.w	139f8 <ull_conn_llcp+0x1370>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13b12:	2a0a      	cmp	r2, #10
   13b14:	d1e9      	bne.n	13aea <ull_conn_llcp+0x1462>
   13b16:	e76f      	b.n	139f8 <ull_conn_llcp+0x1370>
		conn->tx_data_last = tx;
   13b18:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   13b1c:	e759      	b.n	139d2 <ull_conn_llcp+0x134a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b1e:	7911      	ldrb	r1, [r2, #4]
   13b20:	f001 0103 	and.w	r1, r1, #3
   13b24:	2903      	cmp	r1, #3
   13b26:	d01d      	beq.n	13b64 <ull_conn_llcp+0x14dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13b28:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   13b2c:	e746      	b.n	139bc <ull_conn_llcp+0x1334>
	    ((pdu_data_tx->llctrl.opcode !=
   13b2e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b30:	2a03      	cmp	r2, #3
   13b32:	f43f adf8 	beq.w	13726 <ull_conn_llcp+0x109e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13b36:	2a0a      	cmp	r2, #10
   13b38:	f47f aedd 	bne.w	138f6 <ull_conn_llcp+0x126e>
   13b3c:	e5f3      	b.n	13726 <ull_conn_llcp+0x109e>
		conn->tx_data_last = tx;
   13b3e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   13b42:	e642      	b.n	137ca <ull_conn_llcp+0x1142>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b44:	7911      	ldrb	r1, [r2, #4]
   13b46:	f001 0103 	and.w	r1, r1, #3
   13b4a:	2903      	cmp	r1, #3
   13b4c:	d010      	beq.n	13b70 <ull_conn_llcp+0x14e8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13b4e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   13b52:	e62f      	b.n	137b4 <ull_conn_llcp+0x112c>
	    ((pdu_data_tx->llctrl.opcode !=
   13b54:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b56:	2a03      	cmp	r2, #3
   13b58:	f43f aebf 	beq.w	138da <ull_conn_llcp+0x1252>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13b5c:	2a0a      	cmp	r2, #10
   13b5e:	f47f aedb 	bne.w	13918 <ull_conn_llcp+0x1290>
   13b62:	e6ba      	b.n	138da <ull_conn_llcp+0x1252>
	    ((pdu_data_tx->llctrl.opcode !=
   13b64:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b66:	2903      	cmp	r1, #3
   13b68:	d0c9      	beq.n	13afe <ull_conn_llcp+0x1476>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13b6a:	290a      	cmp	r1, #10
   13b6c:	d1dc      	bne.n	13b28 <ull_conn_llcp+0x14a0>
   13b6e:	e7c6      	b.n	13afe <ull_conn_llcp+0x1476>
	    ((pdu_data_tx->llctrl.opcode !=
   13b70:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b72:	2903      	cmp	r1, #3
   13b74:	d001      	beq.n	13b7a <ull_conn_llcp+0x14f2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13b76:	290a      	cmp	r1, #10
   13b78:	d1e9      	bne.n	13b4e <ull_conn_llcp+0x14c6>
			tx->next = conn->tx_head->next;
   13b7a:	6811      	ldr	r1, [r2, #0]
   13b7c:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   13b7e:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   13b80:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13b84:	e61d      	b.n	137c2 <ull_conn_llcp+0x113a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b86:	791a      	ldrb	r2, [r3, #4]
   13b88:	f002 0203 	and.w	r2, r2, #3
   13b8c:	2a03      	cmp	r2, #3
   13b8e:	d01a      	beq.n	13bc6 <ull_conn_llcp+0x153e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13b90:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13b94:	f7ff ba1a 	b.w	12fcc <ull_conn_llcp+0x944>
			conn->tx_data = conn->tx_data->next;
   13b98:	681f      	ldr	r7, [r3, #0]
   13b9a:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13b9e:	2a00      	cmp	r2, #0
   13ba0:	f47f aa14 	bne.w	12fcc <ull_conn_llcp+0x944>
			tx->next = conn->tx_head->next;
   13ba4:	681a      	ldr	r2, [r3, #0]
   13ba6:	f840 2c13 	str.w	r2, [r0, #-19]
			conn->tx_head->next = tx;
   13baa:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   13bac:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   13bb0:	f7ff ba14 	b.w	12fdc <ull_conn_llcp+0x954>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   13bb4:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   13bb8:	bf18      	it	ne
   13bba:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   13bbc:	f362 0384 	bfi	r3, r2, #2, #3
   13bc0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13bc4:	e634      	b.n	13830 <ull_conn_llcp+0x11a8>
	    ((pdu_data_tx->llctrl.opcode !=
   13bc6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13bc8:	2a03      	cmp	r2, #3
   13bca:	d0eb      	beq.n	13ba4 <ull_conn_llcp+0x151c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13bcc:	2a0a      	cmp	r2, #10
   13bce:	d1df      	bne.n	13b90 <ull_conn_llcp+0x1508>
   13bd0:	e7e8      	b.n	13ba4 <ull_conn_llcp+0x151c>
			conn->tx_data = conn->tx_data->next;
   13bd2:	6813      	ldr	r3, [r2, #0]
   13bd4:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13bd8:	2900      	cmp	r1, #0
   13bda:	d0ce      	beq.n	13b7a <ull_conn_llcp+0x14f2>
   13bdc:	e5ea      	b.n	137b4 <ull_conn_llcp+0x112c>
	    ((pdu_data_tx->llctrl.opcode !=
   13bde:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13be0:	2a03      	cmp	r2, #3
   13be2:	f43f ae61 	beq.w	138a8 <ull_conn_llcp+0x1220>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13be6:	2a0a      	cmp	r2, #10
   13be8:	f47f af5a 	bne.w	13aa0 <ull_conn_llcp+0x1418>
   13bec:	e65c      	b.n	138a8 <ull_conn_llcp+0x1220>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   13bee:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   13bf2:	bf18      	it	ne
   13bf4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   13bf6:	f362 1347 	bfi	r3, r2, #5, #3
   13bfa:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   13bfe:	e623      	b.n	13848 <ull_conn_llcp+0x11c0>
   13c00:	20004d04 	.word	0x20004d04
	    ((pdu_data_tx->llctrl.opcode !=
   13c04:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13c06:	2a03      	cmp	r2, #3
   13c08:	f43f af1a 	beq.w	13a40 <ull_conn_llcp+0x13b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13c0c:	2a0a      	cmp	r2, #10
   13c0e:	f47f af5d 	bne.w	13acc <ull_conn_llcp+0x1444>
   13c12:	e715      	b.n	13a40 <ull_conn_llcp+0x13b8>
		LL_ASSERT(0);
   13c14:	4a09      	ldr	r2, [pc, #36]	; (13c3c <ull_conn_llcp+0x15b4>)
   13c16:	490a      	ldr	r1, [pc, #40]	; (13c40 <ull_conn_llcp+0x15b8>)
   13c18:	480a      	ldr	r0, [pc, #40]	; (13c44 <ull_conn_llcp+0x15bc>)
   13c1a:	f640 73e1 	movw	r3, #4065	; 0xfe1
   13c1e:	f00b fd7e 	bl	1f71e <printk>
   13c22:	4040      	eors	r0, r0
   13c24:	f380 8811 	msr	BASEPRI, r0
   13c28:	f04f 0003 	mov.w	r0, #3
   13c2c:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13c2e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13c32:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   13c36:	f7fe bd33 	b.w	126a0 <ull_conn_llcp+0x18>
   13c3a:	bf00      	nop
   13c3c:	00025600 	.word	0x00025600
   13c40:	00025150 	.word	0x00025150
   13c44:	000250f0 	.word	0x000250f0

00013c48 <ull_conn_tx_demux>:
{
   13c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13c4c:	4c24      	ldr	r4, [pc, #144]	; (13ce0 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c4e:	4f25      	ldr	r7, [pc, #148]	; (13ce4 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13c50:	78e2      	ldrb	r2, [r4, #3]
{
   13c52:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   13c54:	1d26      	adds	r6, r4, #4
   13c56:	e021      	b.n	13c9c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c58:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13c5c:	4638      	mov	r0, r7
   13c5e:	f7f6 fcab 	bl	a5b8 <mem_get>
	if (conn->lll.handle != handle) {
   13c62:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   13c64:	bb2a      	cbnz	r2, 13cb2 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   13c66:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   13c6a:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   13c6e:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   13c70:	b351      	cbz	r1, 13cc8 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   13c72:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   13c76:	b102      	cbz	r2, 13c7a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   13c78:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   13c7a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   13c7e:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   13c80:	78a3      	ldrb	r3, [r4, #2]
   13c82:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   13c84:	429a      	cmp	r2, r3
   13c86:	d005      	beq.n	13c94 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   13c88:	3301      	adds	r3, #1
   13c8a:	b2db      	uxtb	r3, r3
		_first = 0U;
   13c8c:	4299      	cmp	r1, r3
   13c8e:	bf08      	it	eq
   13c90:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13c92:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   13c94:	3d01      	subs	r5, #1
   13c96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   13c9a:	d01e      	beq.n	13cda <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13c9c:	78a3      	ldrb	r3, [r4, #2]
   13c9e:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   13ca0:	4293      	cmp	r3, r2
   13ca2:	d01a      	beq.n	13cda <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   13ca4:	fb13 f301 	smulbb	r3, r3, r1
   13ca8:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   13cac:	5af2      	ldrh	r2, [r6, r3]
   13cae:	2a00      	cmp	r2, #0
   13cb0:	d0d2      	beq.n	13c58 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   13cb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   13cb6:	790b      	ldrb	r3, [r1, #4]
   13cb8:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   13cbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   13cc0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   13cc2:	f7fa fb2b 	bl	e31c <ll_tx_ack_put>
   13cc6:	e7da      	b.n	13c7e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   13cc8:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   13ccc:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   13cd0:	2a00      	cmp	r2, #0
   13cd2:	d1ce      	bne.n	13c72 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   13cd4:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   13cd8:	e7cf      	b.n	13c7a <ull_conn_tx_demux+0x32>
}
   13cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cde:	bf00      	nop
   13ce0:	2000068c 	.word	0x2000068c
   13ce4:	200013d8 	.word	0x200013d8

00013ce8 <conn_cleanup_finalize>:
{
   13ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   13cec:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   13cf0:	b082      	sub	sp, #8
   13cf2:	4606      	mov	r6, r0
	while (rx) {
   13cf4:	b144      	cbz	r4, 13d08 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   13cf6:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   13cf8:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   13cfa:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   13cfc:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   13cfe:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   13d00:	f7fa fac8 	bl	e294 <ll_rx_put>
	while (rx) {
   13d04:	2c00      	cmp	r4, #0
   13d06:	d1f7      	bne.n	13cf8 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   13d08:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13d0c:	b381      	cbz	r1, 13d70 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   13d0e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13db4 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   13d12:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 13db8 <conn_cleanup_finalize+0xd0>
   13d16:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13dbc <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13d1a:	f106 0768 	add.w	r7, r6, #104	; 0x68
   13d1e:	e007      	b.n	13d30 <conn_cleanup_finalize+0x48>
   13d20:	4629      	mov	r1, r5
   13d22:	463a      	mov	r2, r7
   13d24:	4620      	mov	r0, r4
   13d26:	f7f6 fc79 	bl	a61c <memq_enqueue>
	while (conn->tx_head) {
   13d2a:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13d2e:	b1f9      	cbz	r1, 13d70 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   13d30:	4630      	mov	r0, r6
   13d32:	f7fc f895 	bl	fe60 <tx_ull_dequeue>
   13d36:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   13d38:	4640      	mov	r0, r8
   13d3a:	f7f6 fc0b 	bl	a554 <mem_acquire>
		LL_ASSERT(link);
   13d3e:	4604      	mov	r4, r0
   13d40:	2800      	cmp	r0, #0
   13d42:	d1ed      	bne.n	13d20 <conn_cleanup_finalize+0x38>
   13d44:	481e      	ldr	r0, [pc, #120]	; (13dc0 <conn_cleanup_finalize+0xd8>)
   13d46:	f640 135e 	movw	r3, #2398	; 0x95e
   13d4a:	4652      	mov	r2, sl
   13d4c:	4649      	mov	r1, r9
   13d4e:	f00b fce6 	bl	1f71e <printk>
   13d52:	4040      	eors	r0, r0
   13d54:	f380 8811 	msr	BASEPRI, r0
   13d58:	f04f 0003 	mov.w	r0, #3
   13d5c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13d5e:	4629      	mov	r1, r5
   13d60:	463a      	mov	r2, r7
   13d62:	4620      	mov	r0, r4
   13d64:	f7f6 fc5a 	bl	a61c <memq_enqueue>
	while (conn->tx_head) {
   13d68:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   13d6c:	2900      	cmp	r1, #0
   13d6e:	d1df      	bne.n	13d30 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13d70:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   13d72:	4b14      	ldr	r3, [pc, #80]	; (13dc4 <conn_cleanup_finalize+0xdc>)
   13d74:	9600      	str	r6, [sp, #0]
   13d76:	3205      	adds	r2, #5
   13d78:	b2d2      	uxtb	r2, r2
   13d7a:	2101      	movs	r1, #1
   13d7c:	2000      	movs	r0, #0
   13d7e:	f7f7 ff29 	bl	bbd4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d82:	f030 0302 	bics.w	r3, r0, #2
   13d86:	d00c      	beq.n	13da2 <conn_cleanup_finalize+0xba>
   13d88:	4a0b      	ldr	r2, [pc, #44]	; (13db8 <conn_cleanup_finalize+0xd0>)
   13d8a:	490f      	ldr	r1, [pc, #60]	; (13dc8 <conn_cleanup_finalize+0xe0>)
   13d8c:	480c      	ldr	r0, [pc, #48]	; (13dc0 <conn_cleanup_finalize+0xd8>)
   13d8e:	f640 1323 	movw	r3, #2339	; 0x923
   13d92:	f00b fcc4 	bl	1f71e <printk>
   13d96:	4040      	eors	r0, r0
   13d98:	f380 8811 	msr	BASEPRI, r0
   13d9c:	f04f 0003 	mov.w	r0, #3
   13da0:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   13da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13da6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   13da8:	8533      	strh	r3, [r6, #40]	; 0x28
}
   13daa:	b002      	add	sp, #8
   13dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13db0:	f7ff bf4a 	b.w	13c48 <ull_conn_tx_demux>
   13db4:	20004db8 	.word	0x20004db8
   13db8:	00025600 	.word	0x00025600
   13dbc:	00025658 	.word	0x00025658
   13dc0:	000250f0 	.word	0x000250f0
   13dc4:	0000fc2d 	.word	0x0000fc2d
   13dc8:	000256e0 	.word	0x000256e0

00013dcc <ull_conn_done>:
{
   13dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   13dce:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   13dd0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   13dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13dd6:	429a      	cmp	r2, r3
{
   13dd8:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   13dda:	d069      	beq.n	13eb0 <ull_conn_done+0xe4>
	switch (done->extra.mic_state) {
   13ddc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13de0:	2b01      	cmp	r3, #1
   13de2:	4605      	mov	r5, r0
   13de4:	f000 812d 	beq.w	14042 <ull_conn_done+0x276>
   13de8:	2b02      	cmp	r3, #2
   13dea:	d063      	beq.n	13eb4 <ull_conn_done+0xe8>
   13dec:	2b00      	cmp	r3, #0
   13dee:	f000 810e 	beq.w	1400e <ull_conn_done+0x242>
	reason_final = conn->llcp_terminate.reason_final;
   13df2:	f894 3143 	ldrb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   13df6:	2b00      	cmp	r3, #0
   13df8:	d15f      	bne.n	13eba <ull_conn_done+0xee>
	latency_event = lll->latency_event;
   13dfa:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   13dfc:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (done->extra.trx_cnt) {
   13e00:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13e02:	1c7e      	adds	r6, r7, #1
   13e04:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   13e06:	2b00      	cmp	r3, #0
   13e08:	f000 8089 	beq.w	13f1e <ull_conn_done+0x152>
		} else if (lll->role) {
   13e0c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13e10:	2b00      	cmp	r3, #0
   13e12:	f2c0 814a 	blt.w	140aa <ull_conn_done+0x2de>
	if (done->extra.crc_valid) {
   13e16:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   13e1a:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   13e1c:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   13e1e:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   13e22:	f140 8114 	bpl.w	1404e <ull_conn_done+0x282>
		conn->supervision_expire = 0U;
   13e26:	2500      	movs	r5, #0
   13e28:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   13e2c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   13e30:	b12b      	cbz	r3, 13e3e <ull_conn_done+0x72>
		if (conn->procedure_expire > elapsed_event) {
   13e32:	42b3      	cmp	r3, r6
   13e34:	f240 8160 	bls.w	140f8 <ull_conn_done+0x32c>
			conn->procedure_expire -= elapsed_event;
   13e38:	1b9b      	subs	r3, r3, r6
   13e3a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   13e3e:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   13e42:	b12b      	cbz	r3, 13e50 <ull_conn_done+0x84>
		if (conn->apto_expire > elapsed_event) {
   13e44:	42b3      	cmp	r3, r6
   13e46:	f240 813c 	bls.w	140c2 <ull_conn_done+0x2f6>
			conn->apto_expire -= elapsed_event;
   13e4a:	1b9b      	subs	r3, r3, r6
   13e4c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   13e50:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   13e54:	2b00      	cmp	r3, #0
   13e56:	f000 8097 	beq.w	13f88 <ull_conn_done+0x1bc>
		if (conn->appto_expire > elapsed_event) {
   13e5a:	42b3      	cmp	r3, r6
   13e5c:	f200 8106 	bhi.w	1406c <ull_conn_done+0x2a0>
			if ((conn->procedure_expire == 0U) &&
   13e60:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   13e64:	2200      	movs	r2, #0
   13e66:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   13e6a:	2b00      	cmp	r3, #0
   13e6c:	f040 808c 	bne.w	13f88 <ull_conn_done+0x1bc>
			    (conn->llcp_req == conn->llcp_ack)) {
   13e70:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13e74:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			if ((conn->procedure_expire == 0U) &&
   13e78:	4293      	cmp	r3, r2
   13e7a:	f040 8089 	bne.w	13f90 <ull_conn_done+0x1c4>
				conn->llcp_type = LLCP_PING;
   13e7e:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   13e80:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   13e82:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   13e86:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13e8a:	e086      	b.n	13f9a <ull_conn_done+0x1ce>
	if (conn == conn_upd_curr) {
   13e8c:	4baa      	ldr	r3, [pc, #680]	; (14138 <ull_conn_done+0x36c>)
	rx->hdr.handle = conn->lll.handle;
   13e8e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   13e90:	681a      	ldr	r2, [r3, #0]
   13e92:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   13e94:	bf04      	itt	eq
   13e96:	2200      	moveq	r2, #0
   13e98:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13e9a:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   13e9c:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   13e9e:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13ea2:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   13ea6:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   13eaa:	4620      	mov	r0, r4
   13eac:	f7ff ff1c 	bl	13ce8 <conn_cleanup_finalize>
}
   13eb0:	b00b      	add	sp, #44	; 0x2c
   13eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   13eb4:	233d      	movs	r3, #61	; 0x3d
   13eb6:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   13eba:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   13ebe:	2900      	cmp	r1, #0
   13ec0:	db1a      	blt.n	13ef8 <ull_conn_done+0x12c>
			       conn->llcp_terminate.ack) & 0xFF) ==
   13ec2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   13ec6:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
   13eca:	1a09      	subs	r1, r1, r0
			    lll->role ||
   13ecc:	b2c9      	uxtb	r1, r1
   13ece:	2903      	cmp	r1, #3
   13ed0:	d012      	beq.n	13ef8 <ull_conn_done+0x12c>
			     TERM_ACKED) ||
   13ed2:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
   13ed6:	f011 0004 	ands.w	r0, r1, #4
   13eda:	d10d      	bne.n	13ef8 <ull_conn_done+0x12c>
			    conn->central.terminate_ack ||
   13edc:	2b3d      	cmp	r3, #61	; 0x3d
   13ede:	d00b      	beq.n	13ef8 <ull_conn_done+0x12c>
	latency_event = lll->latency_event;
   13ee0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   13ee2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13ee4:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   13ee6:	e9cd 0008 	strd	r0, r0, [sp, #32]
	elapsed_event = latency_event + 1;
   13eea:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   13eec:	b1bb      	cbz	r3, 13f1e <ull_conn_done+0x152>
			conn->central.terminate_ack = 1;
   13eee:	f041 0104 	orr.w	r1, r1, #4
   13ef2:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   13ef6:	e78e      	b.n	13e16 <ull_conn_done+0x4a>
	if (conn == conn_upd_curr) {
   13ef8:	498f      	ldr	r1, [pc, #572]	; (14138 <ull_conn_done+0x36c>)
	rx->hdr.handle = conn->lll.handle;
   13efa:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   13efe:	6808      	ldr	r0, [r1, #0]
	*((uint8_t *)rx->pdu) = reason;
   13f00:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   13f04:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   13f06:	bf04      	itt	eq
   13f08:	2000      	moveq	r0, #0
   13f0a:	6008      	streq	r0, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13f0c:	2117      	movs	r1, #23
	conn_cleanup_finalize(conn);
   13f0e:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13f10:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
}
   13f14:	b00b      	add	sp, #44	; 0x2c
   13f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   13f1a:	f7ff bee5 	b.w	13ce8 <conn_cleanup_finalize>
	if (done->extra.crc_valid) {
   13f1e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   13f22:	f013 0301 	ands.w	r3, r3, #1
   13f26:	f47f af7e 	bne.w	13e26 <ull_conn_done+0x5a>
	else if (conn->connect_expire) {
   13f2a:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   13f2e:	2900      	cmp	r1, #0
   13f30:	f000 808d 	beq.w	1404e <ull_conn_done+0x282>
		if (conn->connect_expire > elapsed_event) {
   13f34:	42b1      	cmp	r1, r6
   13f36:	f240 80ed 	bls.w	14114 <ull_conn_done+0x348>
			conn->connect_expire -= elapsed_event;
   13f3a:	1b89      	subs	r1, r1, r6
	if (conn->supervision_expire) {
   13f3c:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   13f40:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   13f44:	2d00      	cmp	r5, #0
   13f46:	f43f af71 	beq.w	13e2c <ull_conn_done+0x60>
		if (conn->supervision_expire > elapsed_event) {
   13f4a:	42ae      	cmp	r6, r5
   13f4c:	d29e      	bcs.n	13e8c <ull_conn_done+0xc0>
			conn->supervision_expire -= elapsed_event;
   13f4e:	1bad      	subs	r5, r5, r6
   13f50:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   13f52:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   13f54:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   13f58:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   13f5c:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   13f5e:	f240 80c1 	bls.w	140e4 <ull_conn_done+0x318>
			else if (lll->role) {
   13f62:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13f66:	42ab      	cmp	r3, r5
   13f68:	f6bf af60 	bge.w	13e2c <ull_conn_done+0x60>
				if (latency_event) {
   13f6c:	2f00      	cmp	r7, #0
   13f6e:	f040 80b9 	bne.w	140e4 <ull_conn_done+0x318>
					force = conn->periph.force & 0x01;
   13f72:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   13f76:	086b      	lsrs	r3, r5, #1
					if (force) {
   13f78:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   13f7c:	bf18      	it	ne
   13f7e:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   13f82:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   13f86:	e751      	b.n	13e2c <ull_conn_done+0x60>
			    (conn->llcp_req == conn->llcp_ack)) {
   13f88:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13f8c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f90:	1a9b      	subs	r3, r3, r2
   13f92:	f003 0303 	and.w	r3, r3, #3
   13f96:	2b02      	cmp	r3, #2
   13f98:	d074      	beq.n	14084 <ull_conn_done+0x2b8>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   13f9a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   13f9e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   13fa2:	429a      	cmp	r2, r3
   13fa4:	f000 80a0 	beq.w	140e8 <ull_conn_done+0x31c>
		lll->latency_event = 0U;
   13fa8:	2200      	movs	r2, #0
   13faa:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   13fae:	b90d      	cbnz	r5, 13fb4 <ull_conn_done+0x1e8>
   13fb0:	42ba      	cmp	r2, r7
   13fb2:	d073      	beq.n	1409c <ull_conn_done+0x2d0>
		lazy = lll->latency_event + 1U;
   13fb4:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fb6:	9e08      	ldr	r6, [sp, #32]
		lazy = lll->latency_event + 1U;
   13fb8:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fba:	b90b      	cbnz	r3, 13fc0 <ull_conn_done+0x1f4>
   13fbc:	2e00      	cmp	r6, #0
   13fbe:	d050      	beq.n	14062 <ull_conn_done+0x296>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13fc0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   13fc2:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13fc4:	9504      	str	r5, [sp, #16]
   13fc6:	2000      	movs	r0, #0
   13fc8:	4d5c      	ldr	r5, [pc, #368]	; (1413c <ull_conn_done+0x370>)
   13fca:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13fcc:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13fce:	e9cd 0001 	strd	r0, r0, [sp, #4]
   13fd2:	9406      	str	r4, [sp, #24]
   13fd4:	9600      	str	r6, [sp, #0]
   13fd6:	b2d2      	uxtb	r2, r2
   13fd8:	2101      	movs	r1, #1
   13fda:	9505      	str	r5, [sp, #20]
   13fdc:	f7f7 fde2 	bl	bba4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13fe0:	f030 0302 	bics.w	r3, r0, #2
   13fe4:	f43f af64 	beq.w	13eb0 <ull_conn_done+0xe4>
   13fe8:	f7fa fa0a 	bl	e400 <ull_disable_mark_get>
   13fec:	4284      	cmp	r4, r0
   13fee:	f43f af5f 	beq.w	13eb0 <ull_conn_done+0xe4>
   13ff2:	4a53      	ldr	r2, [pc, #332]	; (14140 <ull_conn_done+0x374>)
   13ff4:	4953      	ldr	r1, [pc, #332]	; (14144 <ull_conn_done+0x378>)
   13ff6:	4854      	ldr	r0, [pc, #336]	; (14148 <ull_conn_done+0x37c>)
   13ff8:	f240 63cd 	movw	r3, #1741	; 0x6cd
   13ffc:	f00b fb8f 	bl	1f71e <printk>
   14000:	4040      	eors	r0, r0
   14002:	f380 8811 	msr	BASEPRI, r0
   14006:	f04f 0003 	mov.w	r0, #3
   1400a:	df02      	svc	2
   1400c:	e750      	b.n	13eb0 <ull_conn_done+0xe4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1400e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14012:	0718      	lsls	r0, r3, #28
   14014:	d53c      	bpl.n	14090 <ull_conn_done+0x2c4>
					    (lll->latency + 6)) ?
   14016:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   14018:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1401c:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   1401e:	4299      	cmp	r1, r3
   14020:	bfc4      	itt	gt
   14022:	1f8b      	subgt	r3, r1, #6
   14024:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   14026:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   1402a:	bfcc      	ite	gt
   1402c:	b29b      	uxthgt	r3, r3
   1402e:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   14030:	4298      	cmp	r0, r3
   14032:	d05b      	beq.n	140ec <ull_conn_done+0x320>
				conn->appto_reload = appto_reload_new;
   14034:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   14038:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1403c:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   14040:	e6d7      	b.n	13df2 <ull_conn_done+0x26>
		conn->appto_expire = conn->apto_expire = 0U;
   14042:	2300      	movs	r3, #0
   14044:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   14048:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   1404c:	e6d1      	b.n	13df2 <ull_conn_done+0x26>
		if (!conn->supervision_expire) {
   1404e:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   14052:	2d00      	cmp	r5, #0
   14054:	f47f af79 	bne.w	13f4a <ull_conn_done+0x17e>
			conn->supervision_expire = conn->supervision_reload;
   14058:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   1405c:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   14060:	e770      	b.n	13f44 <ull_conn_done+0x178>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   14062:	2900      	cmp	r1, #0
   14064:	d1ac      	bne.n	13fc0 <ull_conn_done+0x1f4>
   14066:	2d00      	cmp	r5, #0
   14068:	d1aa      	bne.n	13fc0 <ull_conn_done+0x1f4>
   1406a:	e721      	b.n	13eb0 <ull_conn_done+0xe4>
			conn->appto_expire -= elapsed_event;
   1406c:	1b9e      	subs	r6, r3, r6
			    (conn->llcp_req == conn->llcp_ack)) {
   1406e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   14072:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
			conn->appto_expire -= elapsed_event;
   14076:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1407a:	1a9b      	subs	r3, r3, r2
   1407c:	f003 0303 	and.w	r3, r3, #3
   14080:	2b02      	cmp	r3, #2
   14082:	d18a      	bne.n	13f9a <ull_conn_done+0x1ce>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   14084:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14088:	3b01      	subs	r3, #1
   1408a:	2b01      	cmp	r3, #1
   1408c:	d885      	bhi.n	13f9a <ull_conn_done+0x1ce>
   1408e:	e78b      	b.n	13fa8 <ull_conn_done+0x1dc>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   14090:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   14094:	07d9      	lsls	r1, r3, #31
   14096:	f57f aeac 	bpl.w	13df2 <ull_conn_done+0x26>
   1409a:	e7bc      	b.n	14016 <ull_conn_done+0x24a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1409c:	9e08      	ldr	r6, [sp, #32]
   1409e:	b913      	cbnz	r3, 140a6 <ull_conn_done+0x2da>
   140a0:	2e00      	cmp	r6, #0
   140a2:	f43f af05 	beq.w	13eb0 <ull_conn_done+0xe4>
	lazy = 0U;
   140a6:	4629      	mov	r1, r5
   140a8:	e78a      	b.n	13fc0 <ull_conn_done+0x1f4>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   140aa:	aa08      	add	r2, sp, #32
   140ac:	a909      	add	r1, sp, #36	; 0x24
   140ae:	4628      	mov	r0, r5
   140b0:	f7ec ff82 	bl	fb8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   140b4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   140b8:	2b00      	cmp	r3, #0
   140ba:	d047      	beq.n	1414c <ull_conn_done+0x380>
				lll->latency_event = 0;
   140bc:	2300      	movs	r3, #0
   140be:	8623      	strh	r3, [r4, #48]	; 0x30
   140c0:	e6a9      	b.n	13e16 <ull_conn_done+0x4a>
			rx = ll_pdu_rx_alloc();
   140c2:	f7fa f915 	bl	e2f0 <ll_pdu_rx_alloc>
			if (rx) {
   140c6:	4601      	mov	r1, r0
   140c8:	b300      	cbz	r0, 1410c <ull_conn_done+0x340>
				rx->handle = lll->handle;
   140ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   140cc:	2200      	movs	r2, #0
   140ce:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   140d2:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   140d4:	231a      	movs	r3, #26
   140d6:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   140d8:	6800      	ldr	r0, [r0, #0]
   140da:	f7fa f8db 	bl	e294 <ll_rx_put>
				ll_rx_sched();
   140de:	f7fa f8e3 	bl	e2a8 <ll_rx_sched>
   140e2:	e6b5      	b.n	13e50 <ull_conn_done+0x84>
					force = 1U;
   140e4:	2501      	movs	r5, #1
   140e6:	e6a1      	b.n	13e2c <ull_conn_done+0x60>
	if ((force) || (latency_event != lll->latency_event)) {
   140e8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   140ea:	e75f      	b.n	13fac <ull_conn_done+0x1e0>
			if (conn->apto_expire == 0U) {
   140ec:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   140f0:	2800      	cmp	r0, #0
   140f2:	f47f ae7e 	bne.w	13df2 <ull_conn_done+0x26>
   140f6:	e79f      	b.n	14038 <ull_conn_done+0x26c>
	if (conn == conn_upd_curr) {
   140f8:	4b0f      	ldr	r3, [pc, #60]	; (14138 <ull_conn_done+0x36c>)
	rx->hdr.handle = conn->lll.handle;
   140fa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   140fc:	681a      	ldr	r2, [r3, #0]
   140fe:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   14100:	bf04      	itt	eq
   14102:	2200      	moveq	r2, #0
   14104:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14106:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   14108:	2322      	movs	r3, #34	; 0x22
   1410a:	e6c8      	b.n	13e9e <ull_conn_done+0xd2>
				conn->apto_expire = 1U;
   1410c:	2301      	movs	r3, #1
   1410e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   14112:	e69d      	b.n	13e50 <ull_conn_done+0x84>
	if (conn == conn_upd_curr) {
   14114:	4908      	ldr	r1, [pc, #32]	; (14138 <ull_conn_done+0x36c>)
	rx->hdr.handle = conn->lll.handle;
   14116:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1411a:	6808      	ldr	r0, [r1, #0]
   1411c:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1411e:	bf08      	it	eq
   14120:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14122:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
   14124:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14126:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   1412a:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1412e:	4620      	mov	r0, r4
   14130:	f7ff fdda 	bl	13ce8 <conn_cleanup_finalize>
}
   14134:	e6bc      	b.n	13eb0 <ull_conn_done+0xe4>
   14136:	bf00      	nop
   14138:	20004c70 	.word	0x20004c70
   1413c:	0000fe21 	.word	0x0000fe21
   14140:	00025600 	.word	0x00025600
   14144:	0002575c 	.word	0x0002575c
   14148:	000250f0 	.word	0x000250f0
				ull_conn_tx_demux(UINT8_MAX);
   1414c:	20ff      	movs	r0, #255	; 0xff
   1414e:	f7ff fd7b 	bl	13c48 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   14152:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   14156:	2a00      	cmp	r2, #0
   14158:	d1b0      	bne.n	140bc <ull_conn_done+0x2f0>
   1415a:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1415e:	f7f6 fa67 	bl	a630 <memq_peek>
   14162:	2800      	cmp	r0, #0
   14164:	d1aa      	bne.n	140bc <ull_conn_done+0x2f0>
			} else if (lll->periph.latency_enabled) {
   14166:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1416a:	075a      	lsls	r2, r3, #29
   1416c:	f57f ae53 	bpl.w	13e16 <ull_conn_done+0x4a>
				lll->latency_event = lll->latency;
   14170:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   14172:	8623      	strh	r3, [r4, #48]	; 0x30
   14174:	e64f      	b.n	13e16 <ull_conn_done+0x4a>
   14176:	bf00      	nop

00014178 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   14178:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1417c:	2b00      	cmp	r3, #0
   1417e:	f000 80e7 	beq.w	14350 <ull_conn_tx_lll_enqueue+0x1d8>
   14182:	3901      	subs	r1, #1
{
   14184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   14188:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 14354 <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   1418c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 14358 <ull_conn_tx_lll_enqueue+0x1e0>
   14190:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 1435c <ull_conn_tx_lll_enqueue+0x1e4>
   14194:	4604      	mov	r4, r0
   14196:	b2cd      	uxtb	r5, r1
   14198:	e012      	b.n	141c0 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1419a:	4640      	mov	r0, r8
   1419c:	f7f6 f9da 	bl	a554 <mem_acquire>
		LL_ASSERT(link);
   141a0:	4607      	mov	r7, r0
   141a2:	2800      	cmp	r0, #0
   141a4:	d066      	beq.n	14274 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   141a6:	f104 0268 	add.w	r2, r4, #104	; 0x68
   141aa:	4631      	mov	r1, r6
   141ac:	4638      	mov	r0, r7
   141ae:	f7f6 fa35 	bl	a61c <memq_enqueue>
	while (conn->tx_head &&
   141b2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   141b6:	3d01      	subs	r5, #1
   141b8:	b2ed      	uxtb	r5, r5
   141ba:	2b00      	cmp	r3, #0
   141bc:	f000 8082 	beq.w	142c4 <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   141c0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   141c4:	07d1      	lsls	r1, r2, #31
   141c6:	d403      	bmi.n	141d0 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   141c8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   141cc:	0792      	lsls	r2, r2, #30
   141ce:	d55f      	bpl.n	14290 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   141d0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   141d4:	4293      	cmp	r3, r2
   141d6:	d175      	bne.n	142c4 <ull_conn_tx_lll_enqueue+0x14c>
   141d8:	2dff      	cmp	r5, #255	; 0xff
   141da:	d073      	beq.n	142c4 <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   141dc:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   141e0:	4620      	mov	r0, r4
   141e2:	f7fb fe3d 	bl	fe60 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   141e6:	7903      	ldrb	r3, [r0, #4]
   141e8:	f003 0303 	and.w	r3, r3, #3
   141ec:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   141ee:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   141f0:	d1d3      	bne.n	1419a <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   141f2:	79c3      	ldrb	r3, [r0, #7]
   141f4:	3b03      	subs	r3, #3
   141f6:	2b14      	cmp	r3, #20
   141f8:	d8cf      	bhi.n	1419a <ull_conn_tx_lll_enqueue+0x22>
   141fa:	a201      	add	r2, pc, #4	; (adr r2, 14200 <ull_conn_tx_lll_enqueue+0x88>)
   141fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14200:	0001425d 	.word	0x0001425d
   14204:	0001425d 	.word	0x0001425d
   14208:	0001419b 	.word	0x0001419b
   1420c:	0001419b 	.word	0x0001419b
   14210:	0001419b 	.word	0x0001419b
   14214:	0001419b 	.word	0x0001419b
   14218:	0001419b 	.word	0x0001419b
   1421c:	0001425d 	.word	0x0001425d
   14220:	00014255 	.word	0x00014255
   14224:	0001419b 	.word	0x0001419b
   14228:	0001419b 	.word	0x0001419b
   1422c:	0001419b 	.word	0x0001419b
   14230:	0001419b 	.word	0x0001419b
   14234:	0001419b 	.word	0x0001419b
   14238:	0001419b 	.word	0x0001419b
   1423c:	0001419b 	.word	0x0001419b
   14240:	0001419b 	.word	0x0001419b
   14244:	0001419b 	.word	0x0001419b
   14248:	0001419b 	.word	0x0001419b
   1424c:	000142c9 	.word	0x000142c9
   14250:	000142c9 	.word	0x000142c9
		if (!conn->lll.role) {
   14254:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14258:	2b00      	cmp	r3, #0
   1425a:	da9e      	bge.n	1419a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1425c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   14260:	f043 0302 	orr.w	r3, r3, #2
   14264:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   14268:	4640      	mov	r0, r8
   1426a:	f7f6 f973 	bl	a554 <mem_acquire>
		LL_ASSERT(link);
   1426e:	4607      	mov	r7, r0
   14270:	2800      	cmp	r0, #0
   14272:	d198      	bne.n	141a6 <ull_conn_tx_lll_enqueue+0x2e>
   14274:	483a      	ldr	r0, [pc, #232]	; (14360 <ull_conn_tx_lll_enqueue+0x1e8>)
   14276:	f240 7326 	movw	r3, #1830	; 0x726
   1427a:	4652      	mov	r2, sl
   1427c:	4649      	mov	r1, r9
   1427e:	f00b fa4e 	bl	1f71e <printk>
   14282:	4040      	eors	r0, r0
   14284:	f380 8811 	msr	BASEPRI, r0
   14288:	f04f 0003 	mov.w	r0, #3
   1428c:	df02      	svc	2
   1428e:	e78a      	b.n	141a6 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14290:	791a      	ldrb	r2, [r3, #4]
   14292:	f002 0203 	and.w	r2, r2, #3
   14296:	2a03      	cmp	r2, #3
   14298:	d19e      	bne.n	141d8 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1429a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1429c:	2a03      	cmp	r2, #3
   1429e:	d001      	beq.n	142a4 <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   142a0:	2a0a      	cmp	r2, #10
   142a2:	d199      	bne.n	141d8 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   142a4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   142a8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   142ac:	428a      	cmp	r2, r1
   142ae:	d012      	beq.n	142d6 <ull_conn_tx_lll_enqueue+0x15e>
   142b0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   142b4:	2a03      	cmp	r2, #3
   142b6:	d08f      	beq.n	141d8 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   142b8:	681a      	ldr	r2, [r3, #0]
   142ba:	b11a      	cbz	r2, 142c4 <ull_conn_tx_lll_enqueue+0x14c>
   142bc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   142c0:	428a      	cmp	r2, r1
   142c2:	d034      	beq.n	1432e <ull_conn_tx_lll_enqueue+0x1b6>
}
   142c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   142c8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   142cc:	f043 0301 	orr.w	r3, r3, #1
   142d0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   142d4:	e761      	b.n	1419a <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   142d6:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   142da:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   142de:	4288      	cmp	r0, r1
   142e0:	d1ea      	bne.n	142b8 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   142e2:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   142e6:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   142ea:	4288      	cmp	r0, r1
   142ec:	d1e4      	bne.n	142b8 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   142ee:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   142f2:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   142f6:	4288      	cmp	r0, r1
   142f8:	d1de      	bne.n	142b8 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   142fa:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   142fe:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   14302:	4288      	cmp	r0, r1
   14304:	d1d8      	bne.n	142b8 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   14306:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   1430a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1430e:	4288      	cmp	r0, r1
   14310:	d1d2      	bne.n	142b8 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14312:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   14316:	3a02      	subs	r2, #2
   14318:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1431c:	2201      	movs	r2, #1
   1431e:	f362 0301 	bfi	r3, r2, #0, #2
   14322:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   14326:	2303      	movs	r3, #3
   14328:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1432c:	e754      	b.n	141d8 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   1432e:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   14332:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   14336:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   1433a:	6810      	ldr	r0, [r2, #0]
   1433c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1433e:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   14340:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   14344:	2900      	cmp	r1, #0
   14346:	f47f af47 	bne.w	141d8 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1434a:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   1434e:	e743      	b.n	141d8 <ull_conn_tx_lll_enqueue+0x60>
   14350:	4770      	bx	lr
   14352:	bf00      	nop
   14354:	20004db8 	.word	0x20004db8
   14358:	00025600 	.word	0x00025600
   1435c:	00025658 	.word	0x00025658
   14360:	000250f0 	.word	0x000250f0

00014364 <tx_demux>:
{
   14364:	b510      	push	{r4, lr}
   14366:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   14368:	2001      	movs	r0, #1
   1436a:	f7ff fc6d 	bl	13c48 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1436e:	4620      	mov	r0, r4
   14370:	2101      	movs	r1, #1
}
   14372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   14376:	f7ff beff 	b.w	14178 <ull_conn_tx_lll_enqueue>
   1437a:	bf00      	nop

0001437c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1437c:	4901      	ldr	r1, [pc, #4]	; (14384 <ull_conn_link_tx_release+0x8>)
   1437e:	f7f6 b903 	b.w	a588 <mem_release>
   14382:	bf00      	nop
   14384:	20004db8 	.word	0x20004db8

00014388 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   14388:	4b01      	ldr	r3, [pc, #4]	; (14390 <ull_conn_ack_last_idx_get+0x8>)
}
   1438a:	78d8      	ldrb	r0, [r3, #3]
   1438c:	4770      	bx	lr
   1438e:	bf00      	nop
   14390:	20000648 	.word	0x20000648

00014394 <ull_conn_ack_peek>:
{
   14394:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   14396:	4b0c      	ldr	r3, [pc, #48]	; (143c8 <ull_conn_ack_peek+0x34>)
   14398:	f893 c002 	ldrb.w	ip, [r3, #2]
   1439c:	f893 e003 	ldrb.w	lr, [r3, #3]
   143a0:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   143a2:	45f4      	cmp	ip, lr
   143a4:	d00d      	beq.n	143c2 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   143a6:	fb1c fc04 	smulbb	ip, ip, r4
   143aa:	3304      	adds	r3, #4
   143ac:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   143b0:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   143b4:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   143b8:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   143ba:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   143bc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   143be:	6818      	ldr	r0, [r3, #0]
}
   143c0:	bd10      	pop	{r4, pc}
		return NULL;
   143c2:	2000      	movs	r0, #0
}
   143c4:	bd10      	pop	{r4, pc}
   143c6:	bf00      	nop
   143c8:	20000648 	.word	0x20000648

000143cc <ull_conn_ack_by_last_peek>:
{
   143cc:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   143ce:	4b0b      	ldr	r3, [pc, #44]	; (143fc <ull_conn_ack_by_last_peek+0x30>)
   143d0:	f893 c002 	ldrb.w	ip, [r3, #2]
   143d4:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   143d8:	4584      	cmp	ip, r0
   143da:	d00d      	beq.n	143f8 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   143dc:	3304      	adds	r3, #4
   143de:	fb1c fc0e 	smulbb	ip, ip, lr
   143e2:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   143e6:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   143ea:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   143ee:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   143f0:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   143f2:	6818      	ldr	r0, [r3, #0]
}
   143f4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   143f8:	2000      	movs	r0, #0
   143fa:	e7fb      	b.n	143f4 <ull_conn_ack_by_last_peek+0x28>
   143fc:	20000648 	.word	0x20000648

00014400 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   14400:	4b09      	ldr	r3, [pc, #36]	; (14428 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14402:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14404:	78da      	ldrb	r2, [r3, #3]
   14406:	7818      	ldrb	r0, [r3, #0]
   14408:	f893 c001 	ldrb.w	ip, [r3, #1]
   1440c:	428a      	cmp	r2, r1
   1440e:	d009      	beq.n	14424 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   14410:	1c4a      	adds	r2, r1, #1
   14412:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14414:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14418:	4594      	cmp	ip, r2
   1441a:	bf08      	it	eq
   1441c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1441e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14420:	709a      	strb	r2, [r3, #2]
	return mem;
   14422:	4770      	bx	lr
		return NULL;
   14424:	2000      	movs	r0, #0
}
   14426:	4770      	bx	lr
   14428:	20000648 	.word	0x20000648

0001442c <ull_conn_lll_ack_enqueue>:
{
   1442c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1442e:	4a15      	ldr	r2, [pc, #84]	; (14484 <ull_conn_lll_ack_enqueue+0x58>)
   14430:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   14434:	7854      	ldrb	r4, [r2, #1]
   14436:	f892 e002 	ldrb.w	lr, [r2, #2]
   1443a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1443c:	f10c 0301 	add.w	r3, ip, #1
   14440:	b2db      	uxtb	r3, r3
		last = 0U;
   14442:	429c      	cmp	r4, r3
   14444:	bf08      	it	eq
   14446:	2300      	moveq	r3, #0
	if (last == first) {
   14448:	459e      	cmp	lr, r3
   1444a:	d00a      	beq.n	14462 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1444c:	fb1c fc05 	smulbb	ip, ip, r5
   14450:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   14454:	f82e 000c 	strh.w	r0, [lr, ip]
   14458:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1445a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1445e:	70d3      	strb	r3, [r2, #3]
}
   14460:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   14462:	4a09      	ldr	r2, [pc, #36]	; (14488 <ull_conn_lll_ack_enqueue+0x5c>)
   14464:	4909      	ldr	r1, [pc, #36]	; (1448c <ull_conn_lll_ack_enqueue+0x60>)
   14466:	480a      	ldr	r0, [pc, #40]	; (14490 <ull_conn_lll_ack_enqueue+0x64>)
   14468:	f240 7376 	movw	r3, #1910	; 0x776
   1446c:	f00b f957 	bl	1f71e <printk>
   14470:	4040      	eors	r0, r0
   14472:	f380 8811 	msr	BASEPRI, r0
   14476:	f04f 0003 	mov.w	r0, #3
   1447a:	df02      	svc	2
	lll_tx->handle = handle;
   1447c:	2300      	movs	r3, #0
   1447e:	801b      	strh	r3, [r3, #0]
   14480:	deff      	udf	#255	; 0xff
   14482:	bf00      	nop
   14484:	20000648 	.word	0x20000648
   14488:	00025600 	.word	0x00025600
   1448c:	00025648 	.word	0x00025648
   14490:	000250f0 	.word	0x000250f0

00014494 <ull_conn_tx_ack>:
{
   14494:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   14496:	7953      	ldrb	r3, [r2, #5]
{
   14498:	b083      	sub	sp, #12
   1449a:	4614      	mov	r4, r2
   1449c:	4605      	mov	r5, r0
   1449e:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   144a0:	b37b      	cbz	r3, 14502 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   144a2:	7923      	ldrb	r3, [r4, #4]
   144a4:	f003 0203 	and.w	r2, r3, #3
   144a8:	2a03      	cmp	r2, #3
   144aa:	d00d      	beq.n	144c8 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   144ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   144b0:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   144b2:	bf04      	itt	eq
   144b4:	f36f 0301 	bfceq	r3, #0, #2
   144b8:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   144ba:	4621      	mov	r1, r4
   144bc:	4628      	mov	r0, r5
}
   144be:	b003      	add	sp, #12
   144c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   144c4:	f7f9 bf2a 	b.w	e31c <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   144c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   144cc:	429d      	cmp	r5, r3
   144ce:	d126      	bne.n	1451e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   144d0:	6830      	ldr	r0, [r6, #0]
   144d2:	4284      	cmp	r4, r0
   144d4:	d05b      	beq.n	1458e <ull_conn_tx_ack+0xfa>
		LL_ASSERT(!link->next);
   144d6:	2800      	cmp	r0, #0
   144d8:	d0ef      	beq.n	144ba <ull_conn_tx_ack+0x26>
   144da:	4abe      	ldr	r2, [pc, #760]	; (147d4 <ull_conn_tx_ack+0x340>)
   144dc:	49be      	ldr	r1, [pc, #760]	; (147d8 <ull_conn_tx_ack+0x344>)
   144de:	48bf      	ldr	r0, [pc, #764]	; (147dc <ull_conn_tx_ack+0x348>)
   144e0:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   144e4:	f00b f91b 	bl	1f71e <printk>
   144e8:	4040      	eors	r0, r0
   144ea:	f380 8811 	msr	BASEPRI, r0
   144ee:	f04f 0003 	mov.w	r0, #3
   144f2:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   144f4:	4621      	mov	r1, r4
   144f6:	4628      	mov	r0, r5
}
   144f8:	b003      	add	sp, #12
   144fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   144fe:	f7f9 bf0d 	b.w	e31c <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   14502:	4ab4      	ldr	r2, [pc, #720]	; (147d4 <ull_conn_tx_ack+0x340>)
   14504:	49b6      	ldr	r1, [pc, #728]	; (147e0 <ull_conn_tx_ack+0x34c>)
   14506:	48b5      	ldr	r0, [pc, #724]	; (147dc <ull_conn_tx_ack+0x348>)
   14508:	f240 7383 	movw	r3, #1923	; 0x783
   1450c:	f00b f907 	bl	1f71e <printk>
   14510:	4040      	eors	r0, r0
   14512:	f380 8811 	msr	BASEPRI, r0
   14516:	f04f 0003 	mov.w	r0, #3
   1451a:	df02      	svc	2
   1451c:	e7c1      	b.n	144a2 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1451e:	48b1      	ldr	r0, [pc, #708]	; (147e4 <ull_conn_tx_ack+0x350>)
   14520:	462a      	mov	r2, r5
   14522:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14526:	f7f6 f847 	bl	a5b8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1452a:	79e3      	ldrb	r3, [r4, #7]
   1452c:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1452e:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   14530:	2b16      	cmp	r3, #22
   14532:	d83c      	bhi.n	145ae <ull_conn_tx_ack+0x11a>
   14534:	e8df f013 	tbh	[pc, r3, lsl #1]
   14538:	00d400e6 	.word	0x00d400e6
   1453c:	00410048 	.word	0x00410048
   14540:	003400b1 	.word	0x003400b1
   14544:	0034003b 	.word	0x0034003b
   14548:	005900a0 	.word	0x005900a0
   1454c:	004f003b 	.word	0x004f003b
   14550:	003b003b 	.word	0x003b003b
   14554:	0031003b 	.word	0x0031003b
   14558:	0034003b 	.word	0x0034003b
   1455c:	0121015e 	.word	0x0121015e
   14560:	00f2010f 	.word	0x00f2010f
   14564:	00c3      	.short	0x00c3
		if (link->next == (void *)tx) {
   14566:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   14568:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
		if (link->next == (void *)tx) {
   1456c:	2b00      	cmp	r3, #0
   1456e:	f040 8081 	bne.w	14674 <ull_conn_tx_ack+0x1e0>
			LL_ASSERT(link->next);
   14572:	4a98      	ldr	r2, [pc, #608]	; (147d4 <ull_conn_tx_ack+0x340>)
   14574:	499c      	ldr	r1, [pc, #624]	; (147e8 <ull_conn_tx_ack+0x354>)
   14576:	4899      	ldr	r0, [pc, #612]	; (147dc <ull_conn_tx_ack+0x348>)
   14578:	f240 7392 	movw	r3, #1938	; 0x792
   1457c:	f00b f8cf 	bl	1f71e <printk>
   14580:	4040      	eors	r0, r0
   14582:	f380 8811 	msr	BASEPRI, r0
   14586:	f04f 0003 	mov.w	r0, #3
   1458a:	df02      	svc	2
   1458c:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1458e:	4997      	ldr	r1, [pc, #604]	; (147ec <ull_conn_tx_ack+0x358>)
}
   14590:	b003      	add	sp, #12
   14592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14596:	f7f5 bff7 	b.w	a588 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1459a:	7a23      	ldrb	r3, [r4, #8]
   1459c:	2b03      	cmp	r3, #3
   1459e:	d01a      	beq.n	145d6 <ull_conn_tx_ack+0x142>
			conn->common.txn_lock = 0U;
   145a0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   145a4:	f36f 0341 	bfc	r3, #1, #1
   145a8:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			break;
   145ac:	e790      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   145ae:	6830      	ldr	r0, [r6, #0]
   145b0:	42a0      	cmp	r0, r4
   145b2:	d0ec      	beq.n	1458e <ull_conn_tx_ack+0xfa>
		LL_ASSERT(!link->next);
   145b4:	2800      	cmp	r0, #0
   145b6:	d190      	bne.n	144da <ull_conn_tx_ack+0x46>
   145b8:	e77f      	b.n	144ba <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   145ba:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
   145be:	f043 0303 	orr.w	r3, r3, #3
   145c2:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
   145c6:	e783      	b.n	144d0 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   145c8:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   145cc:	f043 0302 	orr.w	r3, r3, #2
   145d0:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
   145d4:	e77c      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   145d6:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   145da:	f023 0303 	bic.w	r3, r3, #3
   145de:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = 0U;
   145e2:	2300      	movs	r3, #0
   145e4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   145e8:	e772      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   145ea:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   145ee:	2b00      	cmp	r3, #0
   145f0:	dbea      	blt.n	145c8 <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   145f2:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   145f4:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   145f6:	f043 0303 	orr.w	r3, r3, #3
   145fa:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   145fc:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   145fe:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   14600:	2208      	movs	r2, #8
   14602:	f200 1169 	addw	r1, r0, #361	; 0x169
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14606:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   14608:	18a0      	adds	r0, r4, r2
   1460a:	f00c f88d 	bl	20728 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1460e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
   14612:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   14614:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
   14618:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1461a:	210c      	movs	r1, #12
   1461c:	f104 0012 	add.w	r0, r4, #18
   14620:	f002 fa66 	bl	16af0 <lll_csrand_isr_get>
	    conn->tx_head &&
   14624:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
	if (
   14628:	2b00      	cmp	r3, #0
   1462a:	f000 80f0 	beq.w	1480e <ull_conn_tx_ack+0x37a>
	    !conn->llcp_enc.pause_tx &&
   1462e:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
	    conn->tx_head &&
   14632:	0791      	lsls	r1, r2, #30
   14634:	f100 80eb 	bmi.w	1480e <ull_conn_tx_ack+0x37a>
	    !conn->llcp_phy.pause_tx &&
   14638:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
   1463c:	07d2      	lsls	r2, r2, #31
   1463e:	f100 80e6 	bmi.w	1480e <ull_conn_tx_ack+0x37a>
		if (conn->tx_head == conn->tx_data) {
   14642:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
   14646:	4293      	cmp	r3, r2
   14648:	f000 8100 	beq.w	1484c <ull_conn_tx_ack+0x3b8>
		} else if (!conn->tx_ctrl) {
   1464c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   14650:	2a00      	cmp	r2, #0
   14652:	f000 810a 	beq.w	1486a <ull_conn_tx_ack+0x3d6>
	tx->next = conn->tx_ctrl_last->next;
   14656:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
   1465a:	681a      	ldr	r2, [r3, #0]
   1465c:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1465e:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   14660:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   14662:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
	if (!tx->next) {
   14666:	2b00      	cmp	r3, #0
   14668:	f43f af7d 	beq.w	14566 <ull_conn_tx_ack+0xd2>
		if (link->next == (void *)tx) {
   1466c:	6833      	ldr	r3, [r6, #0]
   1466e:	2b00      	cmp	r3, #0
   14670:	f43f af7f 	beq.w	14572 <ull_conn_tx_ack+0xde>
}
   14674:	b003      	add	sp, #12
   14676:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   14678:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1467c:	f023 0306 	bic.w	r3, r3, #6
   14680:	f043 0306 	orr.w	r3, r3, #6
   14684:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   14688:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   1468c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   14690:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
   14694:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
		break;
   14698:	e71a      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1469a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1469e:	2b00      	cmp	r3, #0
   146a0:	da8b      	bge.n	145ba <ull_conn_tx_ack+0x126>
			conn->llcp_enc.pause_rx = 0U;
   146a2:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   146a6:	f023 0303 	bic.w	r3, r3, #3
   146aa:	f880 3166 	strb.w	r3, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   146ae:	2300      	movs	r3, #0
   146b0:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   146b4:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
   146b8:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
   146bc:	e708      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   146be:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   146c2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   146c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   146ca:	f363 1206 	bfi	r2, r3, #4, #3
   146ce:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   146d2:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
   146d6:	f36f 0300 	bfc	r3, #0, #1
   146da:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
		break;
   146de:	e6f7      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   146e0:	2208      	movs	r2, #8
   146e2:	f104 0112 	add.w	r1, r4, #18
   146e6:	30f6      	adds	r0, #246	; 0xf6
   146e8:	f00c f81e 	bl	20728 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   146ec:	2204      	movs	r2, #4
   146ee:	f104 011a 	add.w	r1, r4, #26
   146f2:	f107 0094 	add.w	r0, r7, #148	; 0x94
   146f6:	f00c f817 	bl	20728 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   146fa:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   146fe:	f043 0302 	orr.w	r3, r3, #2
   14702:	e7bf      	b.n	14684 <ull_conn_tx_ack+0x1f0>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   14704:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   14706:	2b13      	cmp	r3, #19
   14708:	bf08      	it	eq
   1470a:	2316      	moveq	r3, #22
   1470c:	f880 3143 	strb.w	r3, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   14710:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   14714:	3b01      	subs	r3, #1
   14716:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
	break;
   1471a:	e6d9      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1471c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14720:	2b00      	cmp	r3, #0
   14722:	dad6      	bge.n	146d2 <ull_conn_tx_ack+0x23e>
				conn->common.txn_lock = 0U;
   14724:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14728:	4b31      	ldr	r3, [pc, #196]	; (147f0 <ull_conn_tx_ack+0x35c>)
				conn->common.txn_lock = 0U;
   1472a:	f36f 0241 	bfc	r2, #1, #1
   1472e:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14732:	e893 0003 	ldmia.w	r3, {r0, r1}
   14736:	ab02      	add	r3, sp, #8
   14738:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1473c:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
   14740:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   14744:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   14748:	f003 0307 	and.w	r3, r3, #7
   1474c:	3308      	adds	r3, #8
   1474e:	446b      	add	r3, sp
   14750:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   14754:	e7b9      	b.n	146ca <ull_conn_tx_ack+0x236>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14756:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   1475a:	2202      	movs	r2, #2
   1475c:	f362 0301 	bfi	r3, r2, #0, #2
   14760:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   14764:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14768:	2b00      	cmp	r3, #0
   1476a:	dab2      	bge.n	146d2 <ull_conn_tx_ack+0x23e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1476c:	4b20      	ldr	r3, [pc, #128]	; (147f0 <ull_conn_tx_ack+0x35c>)
   1476e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14772:	ab02      	add	r3, sp, #8
   14774:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   14778:	e7e0      	b.n	1473c <ull_conn_tx_ack+0x2a8>
		conn->common.txn_lock = 0U;
   1477a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1477e:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   14782:	f36f 0341 	bfc	r3, #1, #1
   14786:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1478a:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
   1478e:	428b      	cmp	r3, r1
   14790:	f43f ae9e 	beq.w	144d0 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   14794:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   14798:	f002 0307 	and.w	r3, r2, #7
   1479c:	2b03      	cmp	r3, #3
   1479e:	d005      	beq.n	147ac <ull_conn_tx_ack+0x318>
   147a0:	3303      	adds	r3, #3
   147a2:	f003 0307 	and.w	r3, r3, #7
   147a6:	2b01      	cmp	r3, #1
   147a8:	f63f af01 	bhi.w	145ae <ull_conn_tx_ack+0x11a>
				conn->lll.max_tx_octets =
   147ac:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
   147b0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   147b4:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
   147b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   147bc:	f002 0307 	and.w	r3, r2, #7
   147c0:	2b05      	cmp	r3, #5
   147c2:	d02f      	beq.n	14824 <ull_conn_tx_ack+0x390>
				if (!conn->llcp_length.cache.tx_octets) {
   147c4:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
   147c8:	bb93      	cbnz	r3, 14830 <ull_conn_tx_ack+0x39c>
					conn->llcp_length.ack =
   147ca:	f887 11ad 	strb.w	r1, [r7, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   147ce:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   147d2:	e67d      	b.n	144d0 <ull_conn_tx_ack+0x3c>
   147d4:	00025600 	.word	0x00025600
   147d8:	000257c4 	.word	0x000257c4
   147dc:	000250f0 	.word	0x000250f0
   147e0:	000257b8 	.word	0x000257b8
   147e4:	200013d8 	.word	0x200013d8
   147e8:	000257d0 	.word	0x000257d0
   147ec:	20004d04 	.word	0x20004d04
   147f0:	000257dc 	.word	0x000257dc
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   147f4:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   147f8:	f003 0207 	and.w	r2, r3, #7
   147fc:	2a01      	cmp	r2, #1
   147fe:	f47f ae67 	bne.w	144d0 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   14802:	2202      	movs	r2, #2
   14804:	f362 0302 	bfi	r3, r2, #0, #3
   14808:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
   1480c:	e660      	b.n	144d0 <ull_conn_tx_ack+0x3c>
		if (!conn->tx_ctrl) {
   1480e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   14812:	2a00      	cmp	r2, #0
   14814:	f47f af1f 	bne.w	14656 <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head;
   14818:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1481a:	e9c7 4471 	strd	r4, r4, [r7, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1481e:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
   14822:	e720      	b.n	14666 <ull_conn_tx_ack+0x1d2>
					conn->llcp_length.state =
   14824:	2304      	movs	r3, #4
   14826:	f363 0202 	bfi	r2, r3, #0, #3
   1482a:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
					break;
   1482e:	e64f      	b.n	144d0 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   14830:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   14834:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14836:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1483a:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1483e:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14842:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   14846:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
				break;
   1484a:	e641      	b.n	144d0 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   1484c:	681a      	ldr	r2, [r3, #0]
   1484e:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14852:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   14856:	2a00      	cmp	r2, #0
   14858:	f47f aefd 	bne.w	14656 <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head->next;
   1485c:	681a      	ldr	r2, [r3, #0]
   1485e:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   14860:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   14862:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   14864:	e9c7 4472 	strd	r4, r4, [r7, #456]	; 0x1c8
   14868:	e6fd      	b.n	14666 <ull_conn_tx_ack+0x1d2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1486a:	791a      	ldrb	r2, [r3, #4]
   1486c:	f002 0203 	and.w	r2, r2, #3
   14870:	2a03      	cmp	r2, #3
   14872:	d002      	beq.n	1487a <ull_conn_tx_ack+0x3e6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14874:	e9c7 3372 	strd	r3, r3, [r7, #456]	; 0x1c8
   14878:	e6ed      	b.n	14656 <ull_conn_tx_ack+0x1c2>
	    ((pdu_data_tx->llctrl.opcode !=
   1487a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1487c:	2a03      	cmp	r2, #3
   1487e:	d0ed      	beq.n	1485c <ull_conn_tx_ack+0x3c8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14880:	2a0a      	cmp	r2, #10
   14882:	d1f7      	bne.n	14874 <ull_conn_tx_ack+0x3e0>
   14884:	e7ea      	b.n	1485c <ull_conn_tx_ack+0x3c8>
   14886:	bf00      	nop

00014888 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   14888:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1488c:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14890:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   14892:	bf03      	ittte	eq
   14894:	3301      	addeq	r3, #1
   14896:	f880 30e4 	strbeq.w	r3, [r0, #228]	; 0xe4
	return 0;
   1489a:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1489c:	200c      	movne	r0, #12
}
   1489e:	4770      	bx	lr

000148a0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   148a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   148a4:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   148a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
   148ac:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   148ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   148b2:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   148b4:	bf15      	itete	ne
   148b6:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   148b8:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   148ba:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   148bc:	3b0b      	subeq	r3, #11
   148be:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   148c0:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   148c2:	bf44      	itt	mi
   148c4:	3b04      	submi	r3, #4
   148c6:	b29b      	uxthmi	r3, r3
}
   148c8:	4298      	cmp	r0, r3
   148ca:	bf28      	it	cs
   148cc:	4618      	movcs	r0, r3
   148ce:	4770      	bx	lr

000148d0 <ull_pdu_data_init>:
}
   148d0:	4770      	bx	lr
   148d2:	bf00      	nop

000148d4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   148d4:	b510      	push	{r4, lr}
   148d6:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   148d8:	b930      	cbnz	r0, 148e8 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   148da:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   148de:	f36f 0382 	bfc	r3, #2, #1
   148e2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   148e6:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   148e8:	4a09      	ldr	r2, [pc, #36]	; (14910 <ticker_update_latency_cancel_op_cb+0x3c>)
   148ea:	490a      	ldr	r1, [pc, #40]	; (14914 <ticker_update_latency_cancel_op_cb+0x40>)
   148ec:	480a      	ldr	r0, [pc, #40]	; (14918 <ticker_update_latency_cancel_op_cb+0x44>)
   148ee:	f240 23af 	movw	r3, #687	; 0x2af
   148f2:	f00a ff14 	bl	1f71e <printk>
   148f6:	4040      	eors	r0, r0
   148f8:	f380 8811 	msr	BASEPRI, r0
   148fc:	f04f 0003 	mov.w	r0, #3
   14900:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   14902:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14906:	f36f 0382 	bfc	r3, #2, #1
   1490a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1490e:	bd10      	pop	{r4, pc}
   14910:	000257e8 	.word	0x000257e8
   14914:	00025830 	.word	0x00025830
   14918:	000250f0 	.word	0x000250f0

0001491c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1491c:	b900      	cbnz	r0, 14920 <ticker_op_cb+0x4>
   1491e:	4770      	bx	lr
{
   14920:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14922:	4a07      	ldr	r2, [pc, #28]	; (14940 <ticker_op_cb+0x24>)
   14924:	4907      	ldr	r1, [pc, #28]	; (14944 <ticker_op_cb+0x28>)
   14926:	4808      	ldr	r0, [pc, #32]	; (14948 <ticker_op_cb+0x2c>)
   14928:	f240 23a7 	movw	r3, #679	; 0x2a7
   1492c:	f00a fef7 	bl	1f71e <printk>
   14930:	4040      	eors	r0, r0
   14932:	f380 8811 	msr	BASEPRI, r0
   14936:	f04f 0003 	mov.w	r0, #3
   1493a:	df02      	svc	2
}
   1493c:	bd08      	pop	{r3, pc}
   1493e:	bf00      	nop
   14940:	000257e8 	.word	0x000257e8
   14944:	00025660 	.word	0x00025660
   14948:	000250f0 	.word	0x000250f0

0001494c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1494c:	2801      	cmp	r0, #1
   1494e:	d000      	beq.n	14952 <ticker_op_stop_adv_cb+0x6>
   14950:	4770      	bx	lr
{
   14952:	b510      	push	{r4, lr}
   14954:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14956:	f7f9 fd53 	bl	e400 <ull_disable_mark_get>
   1495a:	4284      	cmp	r4, r0
   1495c:	d00c      	beq.n	14978 <ticker_op_stop_adv_cb+0x2c>
   1495e:	4a07      	ldr	r2, [pc, #28]	; (1497c <ticker_op_stop_adv_cb+0x30>)
   14960:	4907      	ldr	r1, [pc, #28]	; (14980 <ticker_op_stop_adv_cb+0x34>)
   14962:	4808      	ldr	r0, [pc, #32]	; (14984 <ticker_op_stop_adv_cb+0x38>)
   14964:	f240 239f 	movw	r3, #671	; 0x29f
   14968:	f00a fed9 	bl	1f71e <printk>
   1496c:	4040      	eors	r0, r0
   1496e:	f380 8811 	msr	BASEPRI, r0
   14972:	f04f 0003 	mov.w	r0, #3
   14976:	df02      	svc	2
}
   14978:	bd10      	pop	{r4, pc}
   1497a:	bf00      	nop
   1497c:	000257e8 	.word	0x000257e8
   14980:	00025844 	.word	0x00025844
   14984:	000250f0 	.word	0x000250f0

00014988 <ull_periph_ticker_cb>:
{
   14988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1498c:	9c07      	ldr	r4, [sp, #28]
   1498e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14992:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   14994:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14996:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1499a:	4299      	cmp	r1, r3
   1499c:	d026      	beq.n	149ec <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1499e:	4606      	mov	r6, r0
   149a0:	4617      	mov	r7, r2
   149a2:	4601      	mov	r1, r0
   149a4:	462a      	mov	r2, r5
   149a6:	4620      	mov	r0, r4
   149a8:	f7fd fe6e 	bl	12688 <ull_conn_llcp>
		if (ret) {
   149ac:	b9f0      	cbnz	r0, 149ec <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   149ae:	7823      	ldrb	r3, [r4, #0]
   149b0:	3301      	adds	r3, #1
   149b2:	b2db      	uxtb	r3, r3
   149b4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   149b6:	b34b      	cbz	r3, 14a0c <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   149b8:	491b      	ldr	r1, [pc, #108]	; (14a28 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   149ba:	4b1c      	ldr	r3, [pc, #112]	; (14a2c <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   149bc:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   149be:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   149c2:	2200      	movs	r2, #0
	p.param = &conn->lll;
   149c4:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   149c6:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   149ca:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   149ce:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   149d0:	2001      	movs	r0, #1
   149d2:	4611      	mov	r1, r2
   149d4:	f7f5 fe96 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!err);
   149d8:	b950      	cbnz	r0, 149f0 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   149da:	20ff      	movs	r0, #255	; 0xff
   149dc:	f7ff f934 	bl	13c48 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   149e0:	4620      	mov	r0, r4
   149e2:	21ff      	movs	r1, #255	; 0xff
}
   149e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   149e8:	f7ff bbc6 	b.w	14178 <ull_conn_tx_lll_enqueue>
}
   149ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   149f0:	4a0f      	ldr	r2, [pc, #60]	; (14a30 <ull_periph_ticker_cb+0xa8>)
   149f2:	4910      	ldr	r1, [pc, #64]	; (14a34 <ull_periph_ticker_cb+0xac>)
   149f4:	4810      	ldr	r0, [pc, #64]	; (14a38 <ull_periph_ticker_cb+0xb0>)
   149f6:	f240 232a 	movw	r3, #554	; 0x22a
   149fa:	f00a fe90 	bl	1f71e <printk>
   149fe:	4040      	eors	r0, r0
   14a00:	f380 8811 	msr	BASEPRI, r0
   14a04:	f04f 0003 	mov.w	r0, #3
   14a08:	df02      	svc	2
   14a0a:	e7e6      	b.n	149da <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   14a0c:	4a08      	ldr	r2, [pc, #32]	; (14a30 <ull_periph_ticker_cb+0xa8>)
   14a0e:	490b      	ldr	r1, [pc, #44]	; (14a3c <ull_periph_ticker_cb+0xb4>)
   14a10:	4809      	ldr	r0, [pc, #36]	; (14a38 <ull_periph_ticker_cb+0xb0>)
   14a12:	f240 231d 	movw	r3, #541	; 0x21d
   14a16:	f00a fe82 	bl	1f71e <printk>
   14a1a:	4040      	eors	r0, r0
   14a1c:	f380 8811 	msr	BASEPRI, r0
   14a20:	f04f 0003 	mov.w	r0, #3
   14a24:	df02      	svc	2
   14a26:	e7c7      	b.n	149b8 <ull_periph_ticker_cb+0x30>
   14a28:	20004e0c 	.word	0x20004e0c
   14a2c:	20000710 	.word	0x20000710
   14a30:	000257e8 	.word	0x000257e8
   14a34:	000252cc 	.word	0x000252cc
   14a38:	000250f0 	.word	0x000250f0
   14a3c:	00025564 	.word	0x00025564

00014a40 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   14a40:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   14a42:	b123      	cbz	r3, 14a4e <ull_periph_latency_cancel+0xe>
   14a44:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   14a48:	f012 0304 	ands.w	r3, r2, #4
   14a4c:	d000      	beq.n	14a50 <ull_periph_latency_cancel+0x10>
   14a4e:	4770      	bx	lr
{
   14a50:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   14a52:	f042 0204 	orr.w	r2, r2, #4
{
   14a56:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   14a58:	4c11      	ldr	r4, [pc, #68]	; (14aa0 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   14a5a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   14a5e:	3105      	adds	r1, #5
   14a60:	2201      	movs	r2, #1
   14a62:	e9cd 3202 	strd	r3, r2, [sp, #8]
   14a66:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14a6a:	e9cd 3300 	strd	r3, r3, [sp]
   14a6e:	9006      	str	r0, [sp, #24]
   14a70:	b2ca      	uxtb	r2, r1
   14a72:	4618      	mov	r0, r3
   14a74:	2103      	movs	r1, #3
   14a76:	f7f7 f895 	bl	bba4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14a7a:	f030 0302 	bics.w	r3, r0, #2
   14a7e:	d00c      	beq.n	14a9a <ull_periph_latency_cancel+0x5a>
   14a80:	4a08      	ldr	r2, [pc, #32]	; (14aa4 <ull_periph_latency_cancel+0x64>)
   14a82:	4909      	ldr	r1, [pc, #36]	; (14aa8 <ull_periph_latency_cancel+0x68>)
   14a84:	4809      	ldr	r0, [pc, #36]	; (14aac <ull_periph_latency_cancel+0x6c>)
   14a86:	f240 13e3 	movw	r3, #483	; 0x1e3
   14a8a:	f00a fe48 	bl	1f71e <printk>
   14a8e:	4040      	eors	r0, r0
   14a90:	f380 8811 	msr	BASEPRI, r0
   14a94:	f04f 0003 	mov.w	r0, #3
   14a98:	df02      	svc	2
}
   14a9a:	b008      	add	sp, #32
   14a9c:	bd10      	pop	{r4, pc}
   14a9e:	bf00      	nop
   14aa0:	000148d5 	.word	0x000148d5
   14aa4:	000257e8 	.word	0x000257e8
   14aa8:	000256e0 	.word	0x000256e0
   14aac:	000250f0 	.word	0x000250f0

00014ab0 <ll_start_enc_req_send>:
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	460e      	mov	r6, r1
   14ab4:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   14ab6:	f7fb fdf1 	bl	1069c <ll_connected_get>
	if (!conn) {
   14aba:	2800      	cmp	r0, #0
   14abc:	d040      	beq.n	14b40 <ll_start_enc_req_send+0x90>
	if (error_code) {
   14abe:	4604      	mov	r4, r0
   14ac0:	b95e      	cbnz	r6, 14ada <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   14ac2:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14ac6:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   14aca:	429a      	cmp	r2, r3
   14acc:	d003      	beq.n	14ad6 <ll_start_enc_req_send+0x26>
   14ace:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   14ad2:	2b03      	cmp	r3, #3
   14ad4:	d026      	beq.n	14b24 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   14ad6:	200c      	movs	r0, #12
}
   14ad8:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   14ada:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   14ade:	f010 0004 	ands.w	r0, r0, #4
   14ae2:	d112      	bne.n	14b0a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   14ae4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   14ae8:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   14aec:	429a      	cmp	r2, r3
   14aee:	d0f2      	beq.n	14ad6 <ll_start_enc_req_send+0x26>
   14af0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   14af4:	2b03      	cmp	r3, #3
   14af6:	d1ee      	bne.n	14ad6 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14af8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   14afc:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14b00:	f360 0301 	bfi	r3, r0, #0, #2
   14b04:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   14b08:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   14b0a:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   14b0e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   14b12:	4293      	cmp	r3, r2
   14b14:	d1df      	bne.n	14ad6 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   14b16:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   14b18:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   14b1c:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   14b20:	2000      	movs	r0, #0
}
   14b22:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   14b24:	2210      	movs	r2, #16
   14b26:	4629      	mov	r1, r5
   14b28:	f200 1071 	addw	r0, r0, #369	; 0x171
   14b2c:	f00b fdfc 	bl	20728 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14b30:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   14b34:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   14b38:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   14b3c:	4630      	mov	r0, r6
}
   14b3e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b40:	2002      	movs	r0, #2
}
   14b42:	bd70      	pop	{r4, r5, r6, pc}

00014b44 <ticker_op_stop_scan_cb>:
}
   14b44:	4770      	bx	lr
   14b46:	bf00      	nop

00014b48 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14b48:	b900      	cbnz	r0, 14b4c <ticker_op_cb+0x4>
   14b4a:	4770      	bx	lr
{
   14b4c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14b4e:	4a07      	ldr	r2, [pc, #28]	; (14b6c <ticker_op_cb+0x24>)
   14b50:	4907      	ldr	r1, [pc, #28]	; (14b70 <ticker_op_cb+0x28>)
   14b52:	4808      	ldr	r0, [pc, #32]	; (14b74 <ticker_op_cb+0x2c>)
   14b54:	f240 43ad 	movw	r3, #1197	; 0x4ad
   14b58:	f00a fde1 	bl	1f71e <printk>
   14b5c:	4040      	eors	r0, r0
   14b5e:	f380 8811 	msr	BASEPRI, r0
   14b62:	f04f 0003 	mov.w	r0, #3
   14b66:	df02      	svc	2
}
   14b68:	bd08      	pop	{r3, pc}
   14b6a:	bf00      	nop
   14b6c:	00025874 	.word	0x00025874
   14b70:	00025660 	.word	0x00025660
   14b74:	000250f0 	.word	0x000250f0

00014b78 <ull_central_ticker_cb>:
{
   14b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b7c:	9c07      	ldr	r4, [sp, #28]
   14b7e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14b82:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   14b84:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b8a:	4299      	cmp	r1, r3
   14b8c:	d02d      	beq.n	14bea <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   14b8e:	4606      	mov	r6, r0
   14b90:	4617      	mov	r7, r2
   14b92:	4601      	mov	r1, r0
   14b94:	462a      	mov	r2, r5
   14b96:	4620      	mov	r0, r4
   14b98:	f7fd fd76 	bl	12688 <ull_conn_llcp>
		if (ret) {
   14b9c:	bb28      	cbnz	r0, 14bea <ull_central_ticker_cb+0x72>
   14b9e:	7823      	ldrb	r3, [r4, #0]
   14ba0:	3301      	adds	r3, #1
   14ba2:	b2db      	uxtb	r3, r3
   14ba4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   14ba6:	b383      	cbz	r3, 14c0a <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   14ba8:	2002      	movs	r0, #2
   14baa:	f7ff f84d 	bl	13c48 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   14bae:	2102      	movs	r1, #2
   14bb0:	4620      	mov	r0, r4
   14bb2:	f7ff fae1 	bl	14178 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   14bb6:	491c      	ldr	r1, [pc, #112]	; (14c28 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   14bb8:	4b1c      	ldr	r3, [pc, #112]	; (14c2c <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   14bba:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   14bbc:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14bc0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   14bc2:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   14bc4:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   14bc8:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   14bcc:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14bce:	2001      	movs	r0, #1
   14bd0:	4611      	mov	r1, r2
   14bd2:	f7f5 fd97 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!err);
   14bd6:	b950      	cbnz	r0, 14bee <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   14bd8:	20ff      	movs	r0, #255	; 0xff
   14bda:	f7ff f835 	bl	13c48 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14bde:	4620      	mov	r0, r4
   14be0:	21ff      	movs	r1, #255	; 0xff
}
   14be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14be6:	f7ff bac7 	b.w	14178 <ull_conn_tx_lll_enqueue>
}
   14bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   14bee:	4a10      	ldr	r2, [pc, #64]	; (14c30 <ull_central_ticker_cb+0xb8>)
   14bf0:	4910      	ldr	r1, [pc, #64]	; (14c34 <ull_central_ticker_cb+0xbc>)
   14bf2:	4811      	ldr	r0, [pc, #68]	; (14c38 <ull_central_ticker_cb+0xc0>)
   14bf4:	f240 434d 	movw	r3, #1101	; 0x44d
   14bf8:	f00a fd91 	bl	1f71e <printk>
   14bfc:	4040      	eors	r0, r0
   14bfe:	f380 8811 	msr	BASEPRI, r0
   14c02:	f04f 0003 	mov.w	r0, #3
   14c06:	df02      	svc	2
   14c08:	e7e6      	b.n	14bd8 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   14c0a:	4a09      	ldr	r2, [pc, #36]	; (14c30 <ull_central_ticker_cb+0xb8>)
   14c0c:	490b      	ldr	r1, [pc, #44]	; (14c3c <ull_central_ticker_cb+0xc4>)
   14c0e:	480a      	ldr	r0, [pc, #40]	; (14c38 <ull_central_ticker_cb+0xc0>)
   14c10:	f240 433a 	movw	r3, #1082	; 0x43a
   14c14:	f00a fd83 	bl	1f71e <printk>
   14c18:	4040      	eors	r0, r0
   14c1a:	f380 8811 	msr	BASEPRI, r0
   14c1e:	f04f 0003 	mov.w	r0, #3
   14c22:	df02      	svc	2
   14c24:	e7c0      	b.n	14ba8 <ull_central_ticker_cb+0x30>
   14c26:	bf00      	nop
   14c28:	20004e24 	.word	0x20004e24
   14c2c:	20000720 	.word	0x20000720
   14c30:	00025874 	.word	0x00025874
   14c34:	000252cc 	.word	0x000252cc
   14c38:	000250f0 	.word	0x000250f0
   14c3c:	00025564 	.word	0x00025564

00014c40 <ll_connect_disable>:
{
   14c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c44:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   14c46:	2000      	movs	r0, #0
   14c48:	f7fa fe40 	bl	f8cc <ull_scan_is_enabled_get>
	if (!scan) {
   14c4c:	b368      	cbz	r0, 14caa <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   14c4e:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   14c50:	4604      	mov	r4, r0
   14c52:	b353      	cbz	r3, 14caa <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   14c54:	f893 2020 	ldrb.w	r2, [r3, #32]
   14c58:	f042 0202 	orr.w	r2, r2, #2
   14c5c:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   14c60:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   14c62:	b317      	cbz	r7, 14caa <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   14c64:	4601      	mov	r1, r0
   14c66:	2000      	movs	r0, #0
   14c68:	f7fa fd78 	bl	f75c <ull_scan_disable>
	if (!err) {
   14c6c:	4605      	mov	r5, r0
   14c6e:	b9c8      	cbnz	r0, 14ca4 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   14c70:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   14c72:	f8d7 8144 	ldr.w	r8, [r7, #324]	; 0x144
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   14c76:	f507 79a2 	add.w	r9, r7, #324	; 0x144
		LL_ASSERT(link);
   14c7a:	f1b8 0f00 	cmp.w	r8, #0
   14c7e:	d018      	beq.n	14cb2 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   14c80:	4640      	mov	r0, r8
   14c82:	f7f9 faf5 	bl	e270 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14c86:	2316      	movs	r3, #22
   14c88:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		node_rx->hdr.handle = 0xffff;
   14c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c90:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
		scan_lll = &scan->lll;
   14c94:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c96:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   14c98:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c9c:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
		*rx = node_rx;
   14ca0:	f8c6 9000 	str.w	r9, [r6]
}
   14ca4:	4628      	mov	r0, r5
   14ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14caa:	250c      	movs	r5, #12
}
   14cac:	4628      	mov	r0, r5
   14cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   14cb2:	4a07      	ldr	r2, [pc, #28]	; (14cd0 <ll_connect_disable+0x90>)
   14cb4:	4907      	ldr	r1, [pc, #28]	; (14cd4 <ll_connect_disable+0x94>)
   14cb6:	4808      	ldr	r0, [pc, #32]	; (14cd8 <ll_connect_disable+0x98>)
   14cb8:	f240 235b 	movw	r3, #603	; 0x25b
   14cbc:	f00a fd2f 	bl	1f71e <printk>
   14cc0:	4040      	eors	r0, r0
   14cc2:	f380 8811 	msr	BASEPRI, r0
   14cc6:	f04f 0003 	mov.w	r0, #3
   14cca:	df02      	svc	2
   14ccc:	e7d8      	b.n	14c80 <ll_connect_disable+0x40>
   14cce:	bf00      	nop
   14cd0:	00025874 	.word	0x00025874
   14cd4:	00025658 	.word	0x00025658
   14cd8:	000250f0 	.word	0x000250f0

00014cdc <ll_enc_req_send>:
{
   14cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14ce0:	4607      	mov	r7, r0
   14ce2:	4688      	mov	r8, r1
   14ce4:	4691      	mov	r9, r2
   14ce6:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   14ce8:	f7fb fcd8 	bl	1069c <ll_connected_get>
	if (!conn) {
   14cec:	2800      	cmp	r0, #0
   14cee:	d06a      	beq.n	14dc6 <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   14cf0:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
   14cf4:	f890 3165 	ldrb.w	r3, [r0, #357]	; 0x165
   14cf8:	429a      	cmp	r2, r3
   14cfa:	4604      	mov	r4, r0
   14cfc:	d142      	bne.n	14d84 <ll_enc_req_send+0xa8>
   14cfe:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14d02:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   14d06:	429a      	cmp	r2, r3
   14d08:	d003      	beq.n	14d12 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   14d0a:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   14d0e:	2b03      	cmp	r3, #3
   14d10:	d038      	beq.n	14d84 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   14d12:	f7fb fcd5 	bl	106c0 <ll_tx_mem_acquire>
	if (tx) {
   14d16:	4605      	mov	r5, r0
   14d18:	b3a0      	cbz	r0, 14d84 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   14d1a:	3004      	adds	r0, #4
   14d1c:	f7ff fdd8 	bl	148d0 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   14d20:	4631      	mov	r1, r6
   14d22:	2210      	movs	r2, #16
   14d24:	f204 1071 	addw	r0, r4, #369	; 0x171
   14d28:	f00b fcfe 	bl	20728 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   14d2c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14d30:	f013 0318 	ands.w	r3, r3, #24
   14d34:	d029      	beq.n	14d8a <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   14d36:	2b18      	cmp	r3, #24
   14d38:	d121      	bne.n	14d7e <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   14d3a:	2208      	movs	r2, #8
   14d3c:	4641      	mov	r1, r8
   14d3e:	f204 1069 	addw	r0, r4, #361	; 0x169
   14d42:	f00b fcf1 	bl	20728 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   14d46:	f899 3000 	ldrb.w	r3, [r9]
   14d4a:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
			conn->llcp_enc.ediv[1] = ediv[1];
   14d4e:	f899 3001 	ldrb.w	r3, [r9, #1]
   14d52:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d56:	792b      	ldrb	r3, [r5, #4]
   14d58:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14d5c:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d5e:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   14d60:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14d62:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   14d64:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   14d66:	4629      	mov	r1, r5
   14d68:	4638      	mov	r0, r7
   14d6a:	f7fb fcb5 	bl	106d8 <ll_tx_mem_enqueue>
   14d6e:	b930      	cbnz	r0, 14d7e <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   14d70:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
   14d74:	3301      	adds	r3, #1
   14d76:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
}
   14d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   14d7e:	4628      	mov	r0, r5
   14d80:	f7fb fca4 	bl	106cc <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   14d84:	200c      	movs	r0, #12
}
   14d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d8a:	792b      	ldrb	r3, [r5, #4]
   14d8c:	f043 0303 	orr.w	r3, r3, #3
   14d90:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   14d92:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   14d94:	2208      	movs	r2, #8
			pdu_data_tx->len =
   14d96:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   14d98:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   14d9a:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   14d9c:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   14d9e:	18a8      	adds	r0, r5, r2
   14da0:	f00b fcc2 	bl	20728 <memcpy>
			enc_req->ediv[0] = ediv[0];
   14da4:	f899 3000 	ldrb.w	r3, [r9]
   14da8:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   14daa:	f899 3001 	ldrb.w	r3, [r9, #1]
   14dae:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   14db0:	2108      	movs	r1, #8
   14db2:	f105 0012 	add.w	r0, r5, #18
   14db6:	f001 fe8d 	bl	16ad4 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   14dba:	2104      	movs	r1, #4
   14dbc:	f105 001a 	add.w	r0, r5, #26
   14dc0:	f001 fe88 	bl	16ad4 <lll_csrand_get>
   14dc4:	e7cf      	b.n	14d66 <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14dc6:	2002      	movs	r0, #2
}
   14dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014dcc <ull_central_reset>:
{
   14dcc:	b530      	push	{r4, r5, lr}
   14dce:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   14dd0:	a801      	add	r0, sp, #4
   14dd2:	f7ff ff35 	bl	14c40 <ll_connect_disable>
	if (!err) {
   14dd6:	4604      	mov	r4, r0
   14dd8:	b110      	cbz	r0, 14de0 <ull_central_reset+0x14>
}
   14dda:	4620      	mov	r0, r4
   14ddc:	b003      	add	sp, #12
   14dde:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   14de0:	f7fa fd74 	bl	f8cc <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   14de4:	4605      	mov	r5, r0
   14de6:	b150      	cbz	r0, 14dfe <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   14de8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   14dec:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   14dee:	f36f 0300 	bfc	r3, #0, #1
}
   14df2:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   14df4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   14df8:	622a      	str	r2, [r5, #32]
}
   14dfa:	b003      	add	sp, #12
   14dfc:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   14dfe:	4a07      	ldr	r2, [pc, #28]	; (14e1c <ull_central_reset+0x50>)
   14e00:	4907      	ldr	r1, [pc, #28]	; (14e20 <ull_central_reset+0x54>)
   14e02:	4808      	ldr	r0, [pc, #32]	; (14e24 <ull_central_reset+0x58>)
   14e04:	f240 23e9 	movw	r3, #745	; 0x2e9
   14e08:	f00a fc89 	bl	1f71e <printk>
   14e0c:	4040      	eors	r0, r0
   14e0e:	f380 8811 	msr	BASEPRI, r0
   14e12:	f04f 0003 	mov.w	r0, #3
   14e16:	df02      	svc	2
   14e18:	e7e6      	b.n	14de8 <ull_central_reset+0x1c>
   14e1a:	bf00      	nop
   14e1c:	00025874 	.word	0x00025874
   14e20:	000258b8 	.word	0x000258b8
   14e24:	000250f0 	.word	0x000250f0

00014e28 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   14e28:	6883      	ldr	r3, [r0, #8]
{
   14e2a:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   14e2c:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   14e2e:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   14e30:	b31c      	cbz	r4, 14e7a <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   14e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   14e34:	2200      	movs	r2, #0
   14e36:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   14e38:	b163      	cbz	r3, 14e54 <ull_central_cleanup+0x2c>
   14e3a:	4a1e      	ldr	r2, [pc, #120]	; (14eb4 <ull_central_cleanup+0x8c>)
   14e3c:	491e      	ldr	r1, [pc, #120]	; (14eb8 <ull_central_cleanup+0x90>)
   14e3e:	481f      	ldr	r0, [pc, #124]	; (14ebc <ull_central_cleanup+0x94>)
   14e40:	f240 3305 	movw	r3, #773	; 0x305
   14e44:	f00a fc6b 	bl	1f71e <printk>
   14e48:	4040      	eors	r0, r0
   14e4a:	f380 8811 	msr	BASEPRI, r0
   14e4e:	f04f 0003 	mov.w	r0, #3
   14e52:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   14e54:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   14e58:	f104 0048 	add.w	r0, r4, #72	; 0x48
   14e5c:	f7f5 fbd4 	bl	a608 <memq_deinit>
	LL_ASSERT(link);
   14e60:	4606      	mov	r6, r0
   14e62:	b1c0      	cbz	r0, 14e96 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   14e64:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   14e66:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   14e68:	f7fb fc02 	bl	10670 <ll_conn_release>
	scan->is_enabled = 0U;
   14e6c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   14e70:	f36f 0300 	bfc	r3, #0, #1
   14e74:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   14e78:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   14e7a:	4a0e      	ldr	r2, [pc, #56]	; (14eb4 <ull_central_cleanup+0x8c>)
   14e7c:	4910      	ldr	r1, [pc, #64]	; (14ec0 <ull_central_cleanup+0x98>)
   14e7e:	480f      	ldr	r0, [pc, #60]	; (14ebc <ull_central_cleanup+0x94>)
   14e80:	f240 3302 	movw	r3, #770	; 0x302
   14e84:	f00a fc4b 	bl	1f71e <printk>
   14e88:	4040      	eors	r0, r0
   14e8a:	f380 8811 	msr	BASEPRI, r0
   14e8e:	f04f 0003 	mov.w	r0, #3
   14e92:	df02      	svc	2
   14e94:	e7cd      	b.n	14e32 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   14e96:	4a07      	ldr	r2, [pc, #28]	; (14eb4 <ull_central_cleanup+0x8c>)
   14e98:	490a      	ldr	r1, [pc, #40]	; (14ec4 <ull_central_cleanup+0x9c>)
   14e9a:	4808      	ldr	r0, [pc, #32]	; (14ebc <ull_central_cleanup+0x94>)
   14e9c:	f44f 7342 	mov.w	r3, #776	; 0x308
   14ea0:	f00a fc3d 	bl	1f71e <printk>
   14ea4:	4040      	eors	r0, r0
   14ea6:	f380 8811 	msr	BASEPRI, r0
   14eaa:	f04f 0003 	mov.w	r0, #3
   14eae:	df02      	svc	2
   14eb0:	e7d8      	b.n	14e64 <ull_central_cleanup+0x3c>
   14eb2:	bf00      	nop
   14eb4:	00025874 	.word	0x00025874
   14eb8:	0002534c 	.word	0x0002534c
   14ebc:	000250f0 	.word	0x000250f0
   14ec0:	00025340 	.word	0x00025340
   14ec4:	00025658 	.word	0x00025658

00014ec8 <ull_central_chm_update>:
{
   14ec8:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   14eca:	2000      	movs	r0, #0
   14ecc:	f7fb fbe6 	bl	1069c <ll_connected_get>
		if (!conn || conn->lll.role) {
   14ed0:	4604      	mov	r4, r0
   14ed2:	b1d8      	cbz	r0, 14f0c <ull_central_chm_update+0x44>
   14ed4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14ed8:	2b00      	cmp	r3, #0
   14eda:	db17      	blt.n	14f0c <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   14edc:	f7ff fcd4 	bl	14888 <ull_conn_llcp_req>
		if (ret) {
   14ee0:	4605      	mov	r5, r0
   14ee2:	b988      	cbnz	r0, 14f08 <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   14ee4:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   14ee8:	f000 f9d2 	bl	15290 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   14eec:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_req++;
   14ef0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		conn->llcp.chan_map.initiate = 1U;
   14ef4:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   14ef8:	2102      	movs	r1, #2
		conn->llcp_req++;
   14efa:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   14efc:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   14f00:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		conn->llcp_req++;
   14f04:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   14f08:	4628      	mov	r0, r5
   14f0a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   14f0c:	2500      	movs	r5, #0
}
   14f0e:	4628      	mov	r0, r5
   14f10:	bd38      	pop	{r3, r4, r5, pc}
   14f12:	bf00      	nop

00014f14 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   14f14:	6008      	str	r0, [r1, #0]
}
   14f16:	4770      	bx	lr

00014f18 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   14f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	b091      	sub	sp, #68	; 0x44
   14f1e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   14f22:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   14f24:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   14f28:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   14f2a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   14f2c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   14f30:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   14f32:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   14f34:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   14f36:	da02      	bge.n	14f3e <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   14f38:	4613      	mov	r3, r2
   14f3a:	3314      	adds	r3, #20
   14f3c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14f3e:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14f40:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14f44:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   14f48:	f8df b254 	ldr.w	fp, [pc, #596]	; 151a0 <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14f4c:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   14f50:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   14f52:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   14f56:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   14f58:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   14f5a:	4635      	mov	r5, r6
   14f5c:	e044      	b.n	14fe8 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   14f5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14f62:	2bff      	cmp	r3, #255	; 0xff
   14f64:	d064      	beq.n	15030 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   14f66:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   14f6a:	d011      	beq.n	14f90 <win_offset_calc.constprop.0+0x78>
   14f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14f6e:	4552      	cmp	r2, sl
   14f70:	d00e      	beq.n	14f90 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   14f72:	498c      	ldr	r1, [pc, #560]	; (151a4 <win_offset_calc.constprop.0+0x28c>)
   14f74:	488c      	ldr	r0, [pc, #560]	; (151a8 <win_offset_calc.constprop.0+0x290>)
   14f76:	f240 13c3 	movw	r3, #451	; 0x1c3
   14f7a:	465a      	mov	r2, fp
   14f7c:	f00a fbcf 	bl	1f71e <printk>
   14f80:	4040      	eors	r0, r0
   14f82:	f380 8811 	msr	BASEPRI, r0
   14f86:	f04f 0003 	mov.w	r0, #3
   14f8a:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   14f8c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   14f90:	1e9a      	subs	r2, r3, #2
   14f92:	2a03      	cmp	r2, #3
   14f94:	d825      	bhi.n	14fe2 <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   14f96:	2b05      	cmp	r3, #5
   14f98:	d17f      	bne.n	1509a <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   14f9a:	9b05      	ldr	r3, [sp, #20]
   14f9c:	2bff      	cmp	r3, #255	; 0xff
   14f9e:	d178      	bne.n	15092 <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   14fa0:	2000      	movs	r0, #0
   14fa2:	f7fb fb73 	bl	1068c <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   14fa6:	9b07      	ldr	r3, [sp, #28]
   14fa8:	4283      	cmp	r3, r0
   14faa:	d01a      	beq.n	14fe2 <win_offset_calc.constprop.0+0xca>
   14fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14fae:	2b00      	cmp	r3, #0
   14fb0:	f040 808c 	bne.w	150cc <win_offset_calc.constprop.0+0x1b4>
   14fb4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14fb8:	2b00      	cmp	r3, #0
   14fba:	db12      	blt.n	14fe2 <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14fbc:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   14fbe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   14fc2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   14fc6:	3328      	adds	r3, #40	; 0x28
   14fc8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   14fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14fcc:	681b      	ldr	r3, [r3, #0]
   14fce:	4543      	cmp	r3, r8
   14fd0:	f0c0 808c 	bcc.w	150ec <win_offset_calc.constprop.0+0x1d4>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   14fd4:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   14fd6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   14fda:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   14fdc:	4645      	mov	r5, r8
   14fde:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   14fe2:	783b      	ldrb	r3, [r7, #0]
   14fe4:	42a3      	cmp	r3, r4
   14fe6:	d95c      	bls.n	150a2 <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   14fe8:	ab0f      	add	r3, sp, #60	; 0x3c
   14fea:	9302      	str	r3, [sp, #8]
   14fec:	4b6f      	ldr	r3, [pc, #444]	; (151ac <win_offset_calc.constprop.0+0x294>)
   14fee:	9301      	str	r3, [sp, #4]
   14ff0:	ab0d      	add	r3, sp, #52	; 0x34
   14ff2:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   14ff4:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   14ff6:	ab0e      	add	r3, sp, #56	; 0x38
   14ff8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   14ffc:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   14ffe:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   15000:	f7f6 fe2a 	bl	bc58 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   15004:	2802      	cmp	r0, #2
   15006:	d056      	beq.n	150b6 <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   15008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1500a:	2b00      	cmp	r3, #0
   1500c:	d0a7      	beq.n	14f5e <win_offset_calc.constprop.0+0x46>
   1500e:	4968      	ldr	r1, [pc, #416]	; (151b0 <win_offset_calc.constprop.0+0x298>)
   15010:	4865      	ldr	r0, [pc, #404]	; (151a8 <win_offset_calc.constprop.0+0x290>)
   15012:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   15016:	465a      	mov	r2, fp
   15018:	f00a fb81 	bl	1f71e <printk>
   1501c:	4040      	eors	r0, r0
   1501e:	f380 8811 	msr	BASEPRI, r0
   15022:	f04f 0003 	mov.w	r0, #3
   15026:	df02      	svc	2
		if (ticker_id == 0xff) {
   15028:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1502c:	2bff      	cmp	r3, #255	; 0xff
   1502e:	d19a      	bne.n	14f66 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   15030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15032:	681b      	ldr	r3, [r3, #0]
   15034:	429d      	cmp	r5, r3
   15036:	bf38      	it	cc
   15038:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1503a:	783b      	ldrb	r3, [r7, #0]
   1503c:	42a3      	cmp	r3, r4
   1503e:	d926      	bls.n	1508e <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   15040:	9b04      	ldr	r3, [sp, #16]
   15042:	495c      	ldr	r1, [pc, #368]	; (151b4 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   15044:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   15046:	442b      	add	r3, r5
   15048:	fba1 2303 	umull	r2, r3, r1, r3
   1504c:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   15050:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   15052:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   15056:	f240 809a 	bls.w	1518e <win_offset_calc.constprop.0+0x276>
   1505a:	9e04      	ldr	r6, [sp, #16]
   1505c:	f8dd c018 	ldr.w	ip, [sp, #24]
   15060:	e002      	b.n	15068 <win_offset_calc.constprop.0+0x150>
   15062:	4594      	cmp	ip, r2
   15064:	f240 8093 	bls.w	1518e <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   15068:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   1506c:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   15070:	0a12      	lsrs	r2, r2, #8
   15072:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   15074:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   15076:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   15078:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1507a:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1507c:	1973      	adds	r3, r6, r5
   1507e:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   15082:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   15084:	f3c3 124f 	ubfx	r2, r3, #5, #16
   15088:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1508c:	d8e9      	bhi.n	15062 <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15090:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   15092:	703c      	strb	r4, [r7, #0]
}
   15094:	b011      	add	sp, #68	; 0x44
   15096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1509a:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   1509c:	783b      	ldrb	r3, [r7, #0]
   1509e:	42a3      	cmp	r3, r4
   150a0:	d8a2      	bhi.n	14fe8 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   150a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   150a6:	2bff      	cmp	r3, #255	; 0xff
   150a8:	d1f3      	bne.n	15092 <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   150aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   150ac:	681b      	ldr	r3, [r3, #0]
   150ae:	429d      	cmp	r5, r3
   150b0:	bf38      	it	cc
   150b2:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   150b4:	e7eb      	b.n	1508e <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   150b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   150b8:	2b02      	cmp	r3, #2
   150ba:	d1a5      	bne.n	15008 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   150bc:	2102      	movs	r1, #2
   150be:	2000      	movs	r0, #0
   150c0:	f7f6 fe10 	bl	bce4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   150c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   150c6:	2b02      	cmp	r3, #2
   150c8:	d0f8      	beq.n	150bc <win_offset_calc.constprop.0+0x1a4>
   150ca:	e79d      	b.n	15008 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   150cc:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   150d0:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   150d2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   150d6:	2900      	cmp	r1, #0
   150d8:	da4e      	bge.n	15178 <win_offset_calc.constprop.0+0x260>
				ticks_slot_abs_curr += ticks_slot_margin;
   150da:	333c      	adds	r3, #60	; 0x3c
   150dc:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   150de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   150e0:	681b      	ldr	r3, [r3, #0]
   150e2:	4543      	cmp	r3, r8
				ticks_slot_margin =
   150e4:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   150e8:	f4bf af74 	bcs.w	14fd4 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   150ec:	429d      	cmp	r5, r3
   150ee:	bf38      	it	cc
   150f0:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   150f2:	783b      	ldrb	r3, [r7, #0]
   150f4:	42a3      	cmp	r3, r4
   150f6:	d930      	bls.n	1515a <win_offset_calc.constprop.0+0x242>
					(ticks_slot_abs_prev + ticks_slot_abs +
   150f8:	9b04      	ldr	r3, [sp, #16]
   150fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   150fc:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   15100:	4413      	add	r3, r2
   15102:	449a      	add	sl, r3
   15104:	46b1      	mov	r9, r6
   15106:	462e      	mov	r6, r5
   15108:	4655      	mov	r5, sl
   1510a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   1510e:	e014      	b.n	1513a <win_offset_calc.constprop.0+0x222>
					if (offset >= conn_interval) {
   15110:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   15112:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   15116:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   15118:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   1511c:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   15120:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   15124:	d237      	bcs.n	15196 <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   15126:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   1512a:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1512e:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   15132:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   15134:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   15136:	42a3      	cmp	r3, r4
   15138:	d923      	bls.n	15182 <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   1513a:	4631      	mov	r1, r6
   1513c:	4640      	mov	r0, r8
   1513e:	f7f6 fdeb 	bl	bd18 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   15142:	9b04      	ldr	r3, [sp, #16]
   15144:	4a1b      	ldr	r2, [pc, #108]	; (151b4 <win_offset_calc.constprop.0+0x29c>)
   15146:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   15148:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1514a:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   1514e:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   15152:	d2dd      	bcs.n	15110 <win_offset_calc.constprop.0+0x1f8>
   15154:	4635      	mov	r5, r6
   15156:	464e      	mov	r6, r9
   15158:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   1515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1515c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1515e:	9b06      	ldr	r3, [sp, #24]
   15160:	42b3      	cmp	r3, r6
   15162:	f63f af37 	bhi.w	14fd4 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   15166:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1516a:	2bff      	cmp	r3, #255	; 0xff
   1516c:	f43f af60 	beq.w	15030 <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   15170:	703c      	strb	r4, [r7, #0]
}
   15172:	b011      	add	sp, #68	; 0x44
   15174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   15178:	3328      	adds	r3, #40	; 0x28
   1517a:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1517c:	f04f 0a00 	mov.w	sl, #0
   15180:	e723      	b.n	14fca <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   15182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15184:	4635      	mov	r5, r6
   15186:	601d      	str	r5, [r3, #0]
   15188:	464e      	mov	r6, r9
   1518a:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   1518c:	e722      	b.n	14fd4 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   15190:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   15192:	601d      	str	r5, [r3, #0]
   15194:	e77d      	b.n	15092 <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   15196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15198:	2500      	movs	r5, #0
   1519a:	46d1      	mov	r9, sl
   1519c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1519e:	e7e2      	b.n	15166 <win_offset_calc.constprop.0+0x24e>
   151a0:	000258c0 	.word	0x000258c0
   151a4:	00025150 	.word	0x00025150
   151a8:	000250f0 	.word	0x000250f0
   151ac:	00014f15 	.word	0x00014f15
   151b0:	00025904 	.word	0x00025904
   151b4:	cccccccd 	.word	0xcccccccd

000151b8 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   151b8:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   151ba:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   151bc:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   151be:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   151c0:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   151c2:	89c0      	ldrh	r0, [r0, #14]
   151c4:	6909      	ldr	r1, [r1, #16]
   151c6:	3310      	adds	r3, #16
   151c8:	f7ed bcf2 	b.w	2bb0 <after_mstr_offset_get>

000151cc <ull_sched_mfy_win_offset_use>:
{
   151cc:	b510      	push	{r4, lr}
   151ce:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   151d0:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   151d4:	6901      	ldr	r1, [r0, #16]
   151d6:	f500 738c 	add.w	r3, r0, #280	; 0x118
   151da:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   151dc:	f7ed fce8 	bl	2bb0 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   151e0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   151e4:	4908      	ldr	r1, [pc, #32]	; (15208 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   151e6:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   151ea:	fba1 1303 	umull	r1, r3, r1, r3
   151ee:	0a9b      	lsrs	r3, r3, #10
   151f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   151f4:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   151f6:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   151f8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   151fc:	2204      	movs	r2, #4
   151fe:	f362 0302 	bfi	r3, r2, #0, #3
   15202:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
   15206:	bd10      	pop	{r4, pc}
   15208:	d1b71759 	.word	0xd1b71759

0001520c <ull_sched_mfy_free_win_offset_calc>:
{
   1520c:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   1520e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   15212:	2100      	movs	r1, #0
{
   15214:	b084      	sub	sp, #16
	if (conn->lll.role) {
   15216:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   15218:	bfbc      	itt	lt
   1521a:	f8d0 30e0 	ldrlt.w	r3, [r0, #224]	; 0xe0
   1521e:	f8c0 31a8 	strlt.w	r3, [r0, #424]	; 0x1a8
	uint8_t offset_max = 6U;
   15222:	f04f 0206 	mov.w	r2, #6
{
   15226:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   15228:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   1522c:	bfb8      	it	lt
   1522e:	f500 72d4 	addlt.w	r2, r0, #424	; 0x1a8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   15232:	f8d0 01a0 	ldr.w	r0, [r0, #416]	; 0x1a0
	uint32_t ticks_to_offset_default = 0U;
   15236:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   15238:	f10d 010b 	add.w	r1, sp, #11
   1523c:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset_next = &ticks_to_offset_default;
   15240:	bfa8      	it	ge
   15242:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   15244:	e9cd 1000 	strd	r1, r0, [sp]
   15248:	2100      	movs	r1, #0
   1524a:	4620      	mov	r0, r4
   1524c:	f7ff fe64 	bl	14f18 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   15250:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   15254:	2208      	movs	r2, #8
   15256:	f362 0303 	bfi	r3, r2, #0, #4
   1525a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
}
   1525e:	b004      	add	sp, #16
   15260:	bd10      	pop	{r4, pc}
   15262:	bf00      	nop

00015264 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   15264:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   15266:	4c08      	ldr	r4, [pc, #32]	; (15288 <ll_chm_update+0x24>)
   15268:	2205      	movs	r2, #5
{
   1526a:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   1526c:	4620      	mov	r0, r4
   1526e:	f00b fa5b 	bl	20728 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   15272:	2105      	movs	r1, #5
   15274:	4620      	mov	r0, r4
   15276:	f7f5 fb43 	bl	a900 <util_ones_count_get>
   1527a:	4b04      	ldr	r3, [pc, #16]	; (1528c <ll_chm_update+0x28>)
   1527c:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1527e:	f7ff fe23 	bl	14ec8 <ull_central_chm_update>
}
   15282:	2000      	movs	r0, #0
   15284:	bd10      	pop	{r4, pc}
   15286:	bf00      	nop
   15288:	20000730 	.word	0x20000730
   1528c:	20000a00 	.word	0x20000a00

00015290 <ull_chan_map_get>:
{
   15290:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   15292:	4903      	ldr	r1, [pc, #12]	; (152a0 <ull_chan_map_get+0x10>)
   15294:	2205      	movs	r2, #5
   15296:	f00b fa47 	bl	20728 <memcpy>
	return count;
   1529a:	4b02      	ldr	r3, [pc, #8]	; (152a4 <ull_chan_map_get+0x14>)
}
   1529c:	7818      	ldrb	r0, [r3, #0]
   1529e:	bd08      	pop	{r3, pc}
   152a0:	20000730 	.word	0x20000730
   152a4:	20000a00 	.word	0x20000a00

000152a8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   152a8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   152aa:	fb02 1c01 	mla	ip, r2, r1, r1
   152ae:	7802      	ldrb	r2, [r0, #0]
   152b0:	491c      	ldr	r1, [pc, #112]	; (15324 <lll_chan_sel_1+0x7c>)
{
   152b2:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   152b6:	4494      	add	ip, r2
   152b8:	fb81 210c 	smull	r2, r1, r1, ip
   152bc:	4461      	add	r1, ip
   152be:	1149      	asrs	r1, r1, #5
   152c0:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   152c4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   152c8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   152ca:	ebac 0101 	sub.w	r1, ip, r1
   152ce:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   152d0:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   152d2:	08c4      	lsrs	r4, r0, #3
   152d4:	f001 0107 	and.w	r1, r1, #7
   152d8:	f813 c004 	ldrb.w	ip, [r3, r4]
   152dc:	fa4c f101 	asr.w	r1, ip, r1
   152e0:	f011 0101 	ands.w	r1, r1, #1
   152e4:	d11d      	bne.n	15322 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   152e6:	fbb0 f2f5 	udiv	r2, r0, r5
   152ea:	fb05 0212 	mls	r2, r5, r2, r0
   152ee:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   152f0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   152f4:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   152f6:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   152f8:	f100 0c08 	add.w	ip, r0, #8
   152fc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   15300:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   15304:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   15308:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1530c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   15310:	d002      	beq.n	15318 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   15312:	b132      	cbz	r2, 15322 <lll_chan_sel_1+0x7a>
				chan_index--;
   15314:	3a01      	subs	r2, #1
   15316:	b2d2      	uxtb	r2, r2
			chan_next++;
   15318:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1531a:	4584      	cmp	ip, r0
   1531c:	d1f2      	bne.n	15304 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1531e:	45a6      	cmp	lr, r4
   15320:	d1ea      	bne.n	152f8 <lll_chan_sel_1+0x50>
}
   15322:	bd30      	pop	{r4, r5, pc}
   15324:	dd67c8a7 	.word	0xdd67c8a7

00015328 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   15328:	8842      	ldrh	r2, [r0, #2]
   1532a:	8800      	ldrh	r0, [r0, #0]
}
   1532c:	4050      	eors	r0, r2
   1532e:	4770      	bx	lr

00015330 <lll_chan_sel_2>:
{
   15330:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15332:	4d2f      	ldr	r5, [pc, #188]	; (153f0 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   15334:	4c2f      	ldr	r4, [pc, #188]	; (153f4 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   15336:	4048      	eors	r0, r1
   15338:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1533c:	0a07      	lsrs	r7, r0, #8
   1533e:	b2c0      	uxtb	r0, r0
   15340:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   15344:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   15348:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1534c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   15350:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   15354:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15358:	433e      	orrs	r6, r7
   1535a:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1535e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   15362:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   15366:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1536a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1536e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   15370:	f3c0 4007 	ubfx	r0, r0, #16, #8
   15374:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15378:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1537c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15380:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   15382:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15386:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   15388:	d1d8      	bne.n	1533c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1538a:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1538c:	481a      	ldr	r0, [pc, #104]	; (153f8 <lll_chan_sel_2+0xc8>)
   1538e:	fba0 4001 	umull	r4, r0, r0, r1
   15392:	1a0c      	subs	r4, r1, r0
   15394:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   15398:	0940      	lsrs	r0, r0, #5
   1539a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1539e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   153a2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   153a4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   153a8:	f000 0507 	and.w	r5, r0, #7
   153ac:	5d14      	ldrb	r4, [r2, r4]
   153ae:	412c      	asrs	r4, r5
   153b0:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   153b2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   153b4:	d41a      	bmi.n	153ec <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   153b6:	fb01 f303 	mul.w	r3, r1, r3
   153ba:	1e56      	subs	r6, r2, #1
   153bc:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   153c0:	3204      	adds	r2, #4
	chan_next = 0U;
   153c2:	4660      	mov	r0, ip
		bite = *chan_map;
   153c4:	f100 0508 	add.w	r5, r0, #8
   153c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   153cc:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   153ce:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   153d2:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   153d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   153da:	d002      	beq.n	153e2 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   153dc:	b133      	cbz	r3, 153ec <lll_chan_sel_2+0xbc>
				chan_index--;
   153de:	3b01      	subs	r3, #1
   153e0:	b2db      	uxtb	r3, r3
			chan_next++;
   153e2:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   153e4:	42a8      	cmp	r0, r5
   153e6:	d1f2      	bne.n	153ce <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   153e8:	42b2      	cmp	r2, r6
   153ea:	d1eb      	bne.n	153c4 <lll_chan_sel_2+0x94>
}
   153ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153ee:	bf00      	nop
   153f0:	00022110 	.word	0x00022110
   153f4:	00088440 	.word	0x00088440
   153f8:	bacf914d 	.word	0xbacf914d

000153fc <rl_update>:
		}
	}
}

static void rl_update(void)
{
   153fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15400:	4d18      	ldr	r5, [pc, #96]	; (15464 <rl_update+0x68>)
   15402:	4e19      	ldr	r6, [pc, #100]	; (15468 <rl_update+0x6c>)
   15404:	2400      	movs	r4, #0
   15406:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1540a:	1eaf      	subs	r7, r5, #2
   1540c:	f04f 0801 	mov.w	r8, #1
   15410:	e006      	b.n	15420 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15412:	3401      	adds	r4, #1
   15414:	2c08      	cmp	r4, #8
   15416:	f105 0506 	add.w	r5, r5, #6
   1541a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1541e:	d01e      	beq.n	1545e <rl_update+0x62>
		if (rl[i].taken) {
   15420:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15424:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   15428:	07da      	lsls	r2, r3, #31
   1542a:	d5f2      	bpl.n	15412 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1542c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1542e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   15430:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   15434:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15438:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1543a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1543e:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15440:	4631      	mov	r1, r6
   15442:	4628      	mov	r0, r5
   15444:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15446:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   15448:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1544c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1544e:	f00b f96b 	bl	20728 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15452:	2c08      	cmp	r4, #8
   15454:	f105 0506 	add.w	r5, r5, #6
   15458:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1545c:	d1e0      	bne.n	15420 <rl_update+0x24>
}
   1545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15462:	bf00      	nop
   15464:	200050a2 	.word	0x200050a2
   15468:	20004f61 	.word	0x20004f61

0001546c <fal_update>:
{
   1546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15470:	4e20      	ldr	r6, [pc, #128]	; (154f4 <fal_update+0x88>)
   15472:	4d21      	ldr	r5, [pc, #132]	; (154f8 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15474:	f8df 8084 	ldr.w	r8, [pc, #132]	; 154fc <fal_update+0x90>
   15478:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15500 <fal_update+0x94>
{
   1547c:	2400      	movs	r4, #0
   1547e:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   15482:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   15484:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   15488:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1548c:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15490:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   15492:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15496:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   15498:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1549c:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   154a0:	d021      	beq.n	154e6 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   154a2:	f898 3000 	ldrb.w	r3, [r8]
   154a6:	b163      	cbz	r3, 154c2 <fal_update+0x56>
		j = fal[i].rl_idx;
   154a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   154ac:	2b07      	cmp	r3, #7
   154ae:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   154b2:	d806      	bhi.n	154c2 <fal_update+0x56>
   154b4:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   154b8:	f013 0f04 	tst.w	r3, #4
   154bc:	d001      	beq.n	154c2 <fal_update+0x56>
   154be:	06db      	lsls	r3, r3, #27
   154c0:	d511      	bpl.n	154e6 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   154c2:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   154c6:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   154ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   154ce:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   154d2:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   154d6:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   154da:	40a3      	lsls	r3, r4
   154dc:	ea4e 0303 	orr.w	r3, lr, r3
   154e0:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   154e2:	f00b f921 	bl	20728 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   154e6:	3401      	adds	r4, #1
   154e8:	2c08      	cmp	r4, #8
   154ea:	f105 0508 	add.w	r5, r5, #8
   154ee:	d1c9      	bne.n	15484 <fal_update+0x18>
}
   154f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   154f4:	20004e76 	.word	0x20004e76
   154f8:	20004e36 	.word	0x20004e36
   154fc:	200060df 	.word	0x200060df
   15500:	20004f60 	.word	0x20004f60

00015504 <ll_fal_size_get>:
}
   15504:	2008      	movs	r0, #8
   15506:	4770      	bx	lr

00015508 <ll_fal_clear>:
{
   15508:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1550a:	2000      	movs	r0, #0
   1550c:	f7f9 ffea 	bl	f4e4 <ull_adv_filter_pol_get>
   15510:	b9f0      	cbnz	r0, 15550 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   15512:	f7fa fa0d 	bl	f930 <ull_scan_filter_pol_get>
   15516:	f010 0001 	ands.w	r0, r0, #1
   1551a:	d119      	bne.n	15550 <ll_fal_clear+0x48>
   1551c:	4a0d      	ldr	r2, [pc, #52]	; (15554 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   1551e:	4c0e      	ldr	r4, [pc, #56]	; (15558 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   15520:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   15524:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   15526:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   15528:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1552c:	d805      	bhi.n	1553a <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   1552e:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   15532:	f36f 1345 	bfc	r3, #5, #1
   15536:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1553a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1553e:	f36f 0300 	bfc	r3, #0, #1
   15542:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   15546:	3001      	adds	r0, #1
   15548:	2808      	cmp	r0, #8
   1554a:	d1e9      	bne.n	15520 <ll_fal_clear+0x18>
	return 0;
   1554c:	2000      	movs	r0, #0
}
   1554e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15550:	200c      	movs	r0, #12
}
   15552:	bd10      	pop	{r4, pc}
   15554:	20004e34 	.word	0x20004e34
   15558:	20004f60 	.word	0x20004f60

0001555c <ll_fal_add>:
{
   1555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15560:	4607      	mov	r7, r0
   15562:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   15564:	2000      	movs	r0, #0
   15566:	f7f9 ffbd 	bl	f4e4 <ull_adv_filter_pol_get>
   1556a:	2800      	cmp	r0, #0
   1556c:	d16f      	bne.n	1564e <ll_fal_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1556e:	f7fa f9df 	bl	f930 <ull_scan_filter_pol_get>
   15572:	f010 0401 	ands.w	r4, r0, #1
   15576:	d16a      	bne.n	1564e <ll_fal_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   15578:	f897 a000 	ldrb.w	sl, [r7]
   1557c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   15580:	d069      	beq.n	15656 <ll_fal_add+0xfa>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   15582:	4e41      	ldr	r6, [pc, #260]	; (15688 <ll_fal_add+0x12c>)
   15584:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   15588:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1558c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   15590:	4625      	mov	r5, r4
   15592:	f1a6 0802 	sub.w	r8, r6, #2
   15596:	e009      	b.n	155ac <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   15598:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1559c:	d101      	bne.n	155a2 <ll_fal_add+0x46>
			*free_idx = i;
   1559e:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   155a2:	3501      	adds	r5, #1
   155a4:	2d08      	cmp	r5, #8
   155a6:	f106 0608 	add.w	r6, r6, #8
   155aa:	d017      	beq.n	155dc <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   155ac:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   155b0:	07d8      	lsls	r0, r3, #31
   155b2:	f3c3 0240 	ubfx	r2, r3, #1, #1
   155b6:	d5ef      	bpl.n	15598 <ll_fal_add+0x3c>
   155b8:	4552      	cmp	r2, sl
   155ba:	d1f2      	bne.n	155a2 <ll_fal_add+0x46>
   155bc:	2206      	movs	r2, #6
   155be:	4630      	mov	r0, r6
   155c0:	4659      	mov	r1, fp
   155c2:	f00b f8a0 	bl	20706 <memcmp>
   155c6:	2800      	cmp	r0, #0
   155c8:	d03e      	beq.n	15648 <ll_fal_add+0xec>
		} else if (free_idx && !fal[i].taken &&
   155ca:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   155ce:	07d9      	lsls	r1, r3, #31
   155d0:	d5e2      	bpl.n	15598 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   155d2:	3501      	adds	r5, #1
   155d4:	2d08      	cmp	r5, #8
   155d6:	f106 0608 	add.w	r6, r6, #8
   155da:	d1e7      	bne.n	155ac <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   155dc:	f1b9 0f07 	cmp.w	r9, #7
   155e0:	d83d      	bhi.n	1565e <ll_fal_add+0x102>
	fal[i].id_addr_type = id_addr->type & 0x1;
   155e2:	783a      	ldrb	r2, [r7, #0]
   155e4:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   155e8:	4e28      	ldr	r6, [pc, #160]	; (1568c <ll_fal_add+0x130>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   155ea:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   155ec:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   155f0:	fb15 0009 	smlabb	r0, r5, r9, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   155f4:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   155f8:	4440      	add	r0, r8
   155fa:	2206      	movs	r2, #6
   155fc:	4659      	mov	r1, fp
   155fe:	f00b f893 	bl	20728 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15602:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15604:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15606:	f003 0301 	and.w	r3, r3, #1
   1560a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1560e:	fa5f fa84 	uxtb.w	sl, r4
   15612:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   15616:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1561a:	07d2      	lsls	r2, r2, #31
   1561c:	f104 0401 	add.w	r4, r4, #1
   15620:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   15624:	d501      	bpl.n	1562a <ll_fal_add+0xce>
   15626:	4299      	cmp	r1, r3
   15628:	d01b      	beq.n	15662 <ll_fal_add+0x106>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1562a:	2c08      	cmp	r4, #8
   1562c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15630:	d1eb      	bne.n	1560a <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   15632:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   15636:	22ff      	movs	r2, #255	; 0xff
   15638:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1563a:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1563e:	f043 0301 	orr.w	r3, r3, #1
   15642:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   15646:	2000      	movs	r0, #0
}
   15648:	b003      	add	sp, #12
   1564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1564e:	200c      	movs	r0, #12
}
   15650:	b003      	add	sp, #12
   15652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   15656:	4620      	mov	r0, r4
}
   15658:	b003      	add	sp, #12
   1565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1565e:	2007      	movs	r0, #7
	return fal_add(addr);
   15660:	e7f2      	b.n	15648 <ll_fal_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15662:	4630      	mov	r0, r6
   15664:	2206      	movs	r2, #6
   15666:	4659      	mov	r1, fp
   15668:	9301      	str	r3, [sp, #4]
   1566a:	f00b f84c 	bl	20706 <memcmp>
   1566e:	9b01      	ldr	r3, [sp, #4]
   15670:	2800      	cmp	r0, #0
   15672:	d1da      	bne.n	1562a <ll_fal_add+0xce>
		rl[j].fal = 1U;
   15674:	5d7b      	ldrb	r3, [r7, r5]
   15676:	f043 0320 	orr.w	r3, r3, #32
   1567a:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   1567c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   15680:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   15684:	e7d9      	b.n	1563a <ll_fal_add+0xde>
   15686:	bf00      	nop
   15688:	20004e36 	.word	0x20004e36
   1568c:	20004f61 	.word	0x20004f61

00015690 <ll_fal_remove>:
{
   15690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15694:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   15696:	2000      	movs	r0, #0
   15698:	f7f9 ff24 	bl	f4e4 <ull_adv_filter_pol_get>
   1569c:	b9f0      	cbnz	r0, 156dc <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1569e:	f7fa f947 	bl	f930 <ull_scan_filter_pol_get>
   156a2:	f010 0401 	ands.w	r4, r0, #1
   156a6:	d119      	bne.n	156dc <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   156a8:	f896 8000 	ldrb.w	r8, [r6]
   156ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   156b0:	d035      	beq.n	1571e <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   156b2:	4d1c      	ldr	r5, [pc, #112]	; (15724 <ll_fal_remove+0x94>)
   156b4:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   156b6:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   156b8:	f008 0801 	and.w	r8, r8, #1
   156bc:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   156c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   156c4:	07db      	lsls	r3, r3, #31
   156c6:	d501      	bpl.n	156cc <ll_fal_remove+0x3c>
   156c8:	4542      	cmp	r2, r8
   156ca:	d00a      	beq.n	156e2 <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   156cc:	3401      	adds	r4, #1
   156ce:	2c08      	cmp	r4, #8
   156d0:	f105 0508 	add.w	r5, r5, #8
   156d4:	d1f2      	bne.n	156bc <ll_fal_remove+0x2c>
   156d6:	2002      	movs	r0, #2
}
   156d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   156dc:	200c      	movs	r0, #12
}
   156de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   156e2:	2206      	movs	r2, #6
   156e4:	4628      	mov	r0, r5
   156e6:	4631      	mov	r1, r6
   156e8:	f00b f80d 	bl	20706 <memcmp>
   156ec:	2800      	cmp	r0, #0
   156ee:	d1ed      	bne.n	156cc <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   156f0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   156f4:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   156f6:	2b07      	cmp	r3, #7
   156f8:	d808      	bhi.n	1570c <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   156fa:	4a0b      	ldr	r2, [pc, #44]	; (15728 <ll_fal_remove+0x98>)
   156fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15700:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   15704:	f360 1145 	bfi	r1, r0, #5, #1
   15708:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1570c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   15710:	f36f 0300 	bfc	r3, #0, #1
   15714:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   15718:	2000      	movs	r0, #0
}
   1571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1571e:	4620      	mov	r0, r4
}
   15720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15724:	20004e36 	.word	0x20004e36
   15728:	20004f60 	.word	0x20004f60

0001572c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1572c:	2807      	cmp	r0, #7
{
   1572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15732:	4604      	mov	r4, r0
   15734:	460e      	mov	r6, r1
   15736:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15738:	d817      	bhi.n	1576a <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1573a:	4d1a      	ldr	r5, [pc, #104]	; (157a4 <ll_rl_id_addr_get+0x78>)
   1573c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15740:	00a7      	lsls	r7, r4, #2
   15742:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   15746:	07db      	lsls	r3, r3, #31
   15748:	d51d      	bpl.n	15786 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1574a:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1574c:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1574e:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   15752:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15756:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1575a:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1575c:	4640      	mov	r0, r8
   1575e:	2206      	movs	r2, #6
}
   15760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15764:	3101      	adds	r1, #1
   15766:	f00a bfdf 	b.w	20728 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1576a:	4a0f      	ldr	r2, [pc, #60]	; (157a8 <ll_rl_id_addr_get+0x7c>)
   1576c:	490f      	ldr	r1, [pc, #60]	; (157ac <ll_rl_id_addr_get+0x80>)
   1576e:	4810      	ldr	r0, [pc, #64]	; (157b0 <ll_rl_id_addr_get+0x84>)
   15770:	f44f 7389 	mov.w	r3, #274	; 0x112
   15774:	f009 ffd3 	bl	1f71e <printk>
   15778:	4040      	eors	r0, r0
   1577a:	f380 8811 	msr	BASEPRI, r0
   1577e:	f04f 0003 	mov.w	r0, #3
   15782:	df02      	svc	2
   15784:	e7d9      	b.n	1573a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   15786:	4a08      	ldr	r2, [pc, #32]	; (157a8 <ll_rl_id_addr_get+0x7c>)
   15788:	490a      	ldr	r1, [pc, #40]	; (157b4 <ll_rl_id_addr_get+0x88>)
   1578a:	4809      	ldr	r0, [pc, #36]	; (157b0 <ll_rl_id_addr_get+0x84>)
   1578c:	f240 1313 	movw	r3, #275	; 0x113
   15790:	f009 ffc5 	bl	1f71e <printk>
   15794:	4040      	eors	r0, r0
   15796:	f380 8811 	msr	BASEPRI, r0
   1579a:	f04f 0003 	mov.w	r0, #3
   1579e:	df02      	svc	2
   157a0:	e7d3      	b.n	1574a <ll_rl_id_addr_get+0x1e>
   157a2:	bf00      	nop
   157a4:	20004f60 	.word	0x20004f60
   157a8:	0002590c 	.word	0x0002590c
   157ac:	00025950 	.word	0x00025950
   157b0:	000250f0 	.word	0x000250f0
   157b4:	0002595c 	.word	0x0002595c

000157b8 <ll_rl_size_get>:
   157b8:	2008      	movs	r0, #8
   157ba:	4770      	bx	lr

000157bc <ll_rl_clear>:
{
   157bc:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   157be:	2000      	movs	r0, #0
   157c0:	f7f9 fe84 	bl	f4cc <ull_adv_is_enabled>
		? 0 : 1;
   157c4:	b108      	cbz	r0, 157ca <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   157c6:	200c      	movs	r0, #12
}
   157c8:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   157ca:	f7fa f899 	bl	f900 <ull_scan_is_enabled>
		? 0 : 1;
   157ce:	f030 0001 	bics.w	r0, r0, #1
   157d2:	d1f8      	bne.n	157c6 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   157d4:	4b18      	ldr	r3, [pc, #96]	; (15838 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   157d6:	4c19      	ldr	r4, [pc, #100]	; (1583c <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   157d8:	7819      	ldrb	r1, [r3, #0]
   157da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   157de:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   157e0:	f360 0100 	bfi	r1, r0, #0, #1
   157e4:	f360 0200 	bfi	r2, r0, #0, #1
   157e8:	7019      	strb	r1, [r3, #0]
   157ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   157ee:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   157f2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   157f6:	f360 0100 	bfi	r1, r0, #0, #1
   157fa:	f360 0200 	bfi	r2, r0, #0, #1
   157fe:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   15802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   15806:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1580a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1580e:	f360 0100 	bfi	r1, r0, #0, #1
   15812:	f360 0200 	bfi	r2, r0, #0, #1
   15816:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1581a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1581e:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   15822:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   15826:	f360 0100 	bfi	r1, r0, #0, #1
   1582a:	f360 0200 	bfi	r2, r0, #0, #1
   1582e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   15832:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   15836:	bd10      	pop	{r4, pc}
   15838:	20004f60 	.word	0x20004f60
   1583c:	200060de 	.word	0x200060de

00015840 <ll_rl_remove>:
{
   15840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15844:	b083      	sub	sp, #12
   15846:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15848:	2000      	movs	r0, #0
{
   1584a:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1584c:	f7f9 fe3e 	bl	f4cc <ull_adv_is_enabled>
		? 0 : 1;
   15850:	b118      	cbz	r0, 1585a <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15852:	200c      	movs	r0, #12
}
   15854:	b003      	add	sp, #12
   15856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1585a:	f7fa f851 	bl	f900 <ull_scan_is_enabled>
		? 0 : 1;
   1585e:	f030 0b01 	bics.w	fp, r0, #1
   15862:	d1f6      	bne.n	15852 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15864:	9b00      	ldr	r3, [sp, #0]
   15866:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1599c <ll_rl_remove+0x15c>
   1586a:	f813 ab01 	ldrb.w	sl, [r3], #1
   1586e:	465c      	mov	r4, fp
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15870:	f00a 0a01 	and.w	sl, sl, #1
   15874:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   15878:	461e      	mov	r6, r3
   1587a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1587e:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   15882:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   15886:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1588a:	07db      	lsls	r3, r3, #31
   1588c:	ea4f 0984 	mov.w	r9, r4, lsl #2
   15890:	d501      	bpl.n	15896 <ll_rl_remove+0x56>
   15892:	4552      	cmp	r2, sl
   15894:	d008      	beq.n	158a8 <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15896:	3401      	adds	r4, #1
   15898:	2c08      	cmp	r4, #8
   1589a:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1589e:	d1ec      	bne.n	1587a <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158a0:	2002      	movs	r0, #2
}
   158a2:	b003      	add	sp, #12
   158a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   158a8:	4640      	mov	r0, r8
   158aa:	2206      	movs	r2, #6
   158ac:	4631      	mov	r1, r6
   158ae:	f00a ff2a 	bl	20706 <memcmp>
   158b2:	2800      	cmp	r0, #0
   158b4:	d1ef      	bne.n	15896 <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   158b6:	782a      	ldrb	r2, [r5, #0]
   158b8:	0752      	lsls	r2, r2, #29
   158ba:	4633      	mov	r3, r6
   158bc:	4606      	mov	r6, r0
   158be:	d535      	bpl.n	1592c <ll_rl_remove+0xec>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   158c0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 159a0 <ll_rl_remove+0x160>
   158c4:	f89a 8000 	ldrb.w	r8, [sl]
   158c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   158cc:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   158d0:	d02a      	beq.n	15928 <ll_rl_remove+0xe8>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   158d2:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   158d4:	4545      	cmp	r5, r8
   158d6:	d027      	beq.n	15928 <ll_rl_remove+0xe8>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   158d8:	4832      	ldr	r0, [pc, #200]	; (159a4 <ll_rl_remove+0x164>)
   158da:	9301      	str	r3, [sp, #4]
   158dc:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   158e0:	2210      	movs	r2, #16
   158e2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   158e6:	f00a ff1f 	bl	20728 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   158ea:	482f      	ldr	r0, [pc, #188]	; (159a8 <ll_rl_remove+0x168>)
   158ec:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   158ee:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   158f2:	fa5f fc8b 	uxtb.w	ip, fp
   158f6:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   158fa:	f011 0f01 	tst.w	r1, #1
   158fe:	f10b 0b01 	add.w	fp, fp, #1
   15902:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   15906:	d004      	beq.n	15912 <ll_rl_remove+0xd2>
   15908:	0749      	lsls	r1, r1, #29
   1590a:	d502      	bpl.n	15912 <ll_rl_remove+0xd2>
   1590c:	7dc1      	ldrb	r1, [r0, #23]
   1590e:	4541      	cmp	r1, r8
   15910:	d039      	beq.n	15986 <ll_rl_remove+0x146>
				for (k = 0U;
   15912:	f1bb 0f08 	cmp.w	fp, #8
   15916:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1591a:	d1e8      	bne.n	158ee <ll_rl_remove+0xae>
			peer_irk_count--;
   1591c:	f89a 8000 	ldrb.w	r8, [sl]
   15920:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   15924:	fa5f f888 	uxtb.w	r8, r8
   15928:	f88a 8000 	strb.w	r8, [sl]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1592c:	9a00      	ldr	r2, [sp, #0]
   1592e:	4d1f      	ldr	r5, [pc, #124]	; (159ac <ll_rl_remove+0x16c>)
   15930:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   15934:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   15938:	f00a 0a01 	and.w	sl, sl, #1
   1593c:	469b      	mov	fp, r3
   1593e:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   15942:	07d1      	lsls	r1, r2, #31
   15944:	f3c2 0040 	ubfx	r0, r2, #1, #1
   15948:	d501      	bpl.n	1594e <ll_rl_remove+0x10e>
   1594a:	4550      	cmp	r0, sl
   1594c:	d00f      	beq.n	1596e <ll_rl_remove+0x12e>
	for (i = 0; i < FAL_SIZE; i++) {
   1594e:	3601      	adds	r6, #1
   15950:	2e08      	cmp	r6, #8
   15952:	f105 0508 	add.w	r5, r5, #8
   15956:	d1f2      	bne.n	1593e <ll_rl_remove+0xfe>
		rl[i].taken = 0U;
   15958:	444c      	add	r4, r9
		return 0;
   1595a:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1595c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   15960:	f36f 0300 	bfc	r3, #0, #1
   15964:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   15968:	b003      	add	sp, #12
   1596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1596e:	2206      	movs	r2, #6
   15970:	4628      	mov	r0, r5
   15972:	4659      	mov	r1, fp
   15974:	f00a fec7 	bl	20706 <memcmp>
   15978:	2800      	cmp	r0, #0
   1597a:	d1e8      	bne.n	1594e <ll_rl_remove+0x10e>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1597c:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   15980:	23ff      	movs	r3, #255	; 0xff
   15982:	7073      	strb	r3, [r6, #1]
   15984:	e7e8      	b.n	15958 <ll_rl_remove+0x118>
			peer_irk_count--;
   15986:	f89a 8000 	ldrb.w	r8, [sl]
						rl[k].pirk_idx = pi;
   1598a:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1598c:	4a08      	ldr	r2, [pc, #32]	; (159b0 <ll_rl_remove+0x170>)
			peer_irk_count--;
   1598e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   15992:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   15996:	fa5f f888 	uxtb.w	r8, r8
						break;
   1599a:	e7c5      	b.n	15928 <ll_rl_remove+0xe8>
   1599c:	20004f61 	.word	0x20004f61
   159a0:	200060de 	.word	0x200060de
   159a4:	20004ee0 	.word	0x20004ee0
   159a8:	20004f60 	.word	0x20004f60
   159ac:	20004e36 	.word	0x20004e36
   159b0:	20004ed8 	.word	0x20004ed8

000159b4 <ll_rl_crpa_set>:
{
   159b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   159b8:	795c      	ldrb	r4, [r3, #5]
   159ba:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   159be:	2c40      	cmp	r4, #64	; 0x40
   159c0:	d001      	beq.n	159c6 <ll_rl_crpa_set+0x12>
}
   159c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   159c6:	461e      	mov	r6, r3
   159c8:	460f      	mov	r7, r1
   159ca:	b301      	cbz	r1, 15a0e <ll_rl_crpa_set+0x5a>
   159cc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15a38 <ll_rl_crpa_set+0x84>
   159d0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   159d2:	f000 0a01 	and.w	sl, r0, #1
   159d6:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   159da:	e003      	b.n	159e4 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   159dc:	2c08      	cmp	r4, #8
   159de:	f109 0928 	add.w	r9, r9, #40	; 0x28
   159e2:	d0ee      	beq.n	159c2 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   159e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   159e8:	4625      	mov	r5, r4
   159ea:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   159ee:	f3c2 1380 	ubfx	r3, r2, #6, #1
   159f2:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   159f4:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   159f8:	d5f0      	bpl.n	159dc <ll_rl_crpa_set+0x28>
   159fa:	4553      	cmp	r3, sl
   159fc:	d1ee      	bne.n	159dc <ll_rl_crpa_set+0x28>
   159fe:	4648      	mov	r0, r9
   15a00:	2206      	movs	r2, #6
   15a02:	4639      	mov	r1, r7
   15a04:	f00a fe7f 	bl	20706 <memcmp>
   15a08:	2800      	cmp	r0, #0
   15a0a:	d1e7      	bne.n	159dc <ll_rl_crpa_set+0x28>
   15a0c:	e004      	b.n	15a18 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   15a0e:	2a07      	cmp	r2, #7
   15a10:	d8d7      	bhi.n	159c2 <ll_rl_crpa_set+0xe>
   15a12:	f8df 8028 	ldr.w	r8, [pc, #40]	; 15a3c <ll_rl_crpa_set+0x88>
   15a16:	4615      	mov	r5, r2
   15a18:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   15a1c:	00e8      	lsls	r0, r5, #3
   15a1e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   15a22:	07db      	lsls	r3, r3, #31
   15a24:	d5cd      	bpl.n	159c2 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15a26:	3018      	adds	r0, #24
   15a28:	4631      	mov	r1, r6
   15a2a:	4440      	add	r0, r8
   15a2c:	2206      	movs	r2, #6
}
   15a2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15a32:	f00a be79 	b.w	20728 <memcpy>
   15a36:	bf00      	nop
   15a38:	20004f61 	.word	0x20004f61
   15a3c:	20004f60 	.word	0x20004f60

00015a40 <ll_rl_crpa_get>:
{
   15a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15a44:	4682      	mov	sl, r0
   15a46:	4e1a      	ldr	r6, [pc, #104]	; (15ab0 <ll_rl_crpa_get+0x70>)
   15a48:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   15a4c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15a4e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15a50:	f008 0801 	and.w	r8, r8, #1
   15a54:	1e77      	subs	r7, r6, #1
   15a56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15a5a:	00d5      	lsls	r5, r2, #3
   15a5c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   15a60:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15a64:	07db      	lsls	r3, r3, #31
   15a66:	f104 0401 	add.w	r4, r4, #1
   15a6a:	d501      	bpl.n	15a70 <ll_rl_crpa_get+0x30>
   15a6c:	4542      	cmp	r2, r8
   15a6e:	d006      	beq.n	15a7e <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15a70:	2c08      	cmp	r4, #8
   15a72:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15a76:	d1ee      	bne.n	15a56 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15a78:	2002      	movs	r0, #2
}
   15a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15a7e:	4630      	mov	r0, r6
   15a80:	2206      	movs	r2, #6
   15a82:	4651      	mov	r1, sl
   15a84:	f00a fe3f 	bl	20706 <memcmp>
   15a88:	4683      	mov	fp, r0
   15a8a:	2800      	cmp	r0, #0
   15a8c:	d1f0      	bne.n	15a70 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   15a8e:	f105 0218 	add.w	r2, r5, #24
   15a92:	4417      	add	r7, r2
   15a94:	2106      	movs	r1, #6
   15a96:	4638      	mov	r0, r7
   15a98:	f7f4 fda6 	bl	a5e8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   15a9c:	2800      	cmp	r0, #0
   15a9e:	d0eb      	beq.n	15a78 <ll_rl_crpa_get+0x38>
   15aa0:	2206      	movs	r2, #6
   15aa2:	4639      	mov	r1, r7
   15aa4:	4648      	mov	r0, r9
   15aa6:	f00a fe3f 	bl	20728 <memcpy>
		return 0;
   15aaa:	4658      	mov	r0, fp
}
   15aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab0:	20004f61 	.word	0x20004f61

00015ab4 <ll_rl_lrpa_get>:
{
   15ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15ab8:	4681      	mov	r9, r0
   15aba:	4e16      	ldr	r6, [pc, #88]	; (15b14 <ll_rl_lrpa_get+0x60>)
   15abc:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   15ac0:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15ac2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15ac4:	f008 0801 	and.w	r8, r8, #1
   15ac8:	1e77      	subs	r7, r6, #1
   15aca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15ace:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   15ad2:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   15ad6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15ada:	07db      	lsls	r3, r3, #31
   15adc:	f104 0401 	add.w	r4, r4, #1
   15ae0:	d501      	bpl.n	15ae6 <ll_rl_lrpa_get+0x32>
   15ae2:	4542      	cmp	r2, r8
   15ae4:	d006      	beq.n	15af4 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15ae6:	2c08      	cmp	r4, #8
   15ae8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15aec:	d1ed      	bne.n	15aca <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15aee:	2002      	movs	r0, #2
}
   15af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15af4:	4630      	mov	r0, r6
   15af6:	2206      	movs	r2, #6
   15af8:	4649      	mov	r1, r9
   15afa:	f00a fe04 	bl	20706 <memcmp>
   15afe:	4683      	mov	fp, r0
   15b00:	2800      	cmp	r0, #0
   15b02:	d1f0      	bne.n	15ae6 <ll_rl_lrpa_get+0x32>
   15b04:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15b06:	2206      	movs	r2, #6
   15b08:	4650      	mov	r0, sl
   15b0a:	f00a fe0d 	bl	20728 <memcpy>
		return 0;
   15b0e:	4658      	mov	r0, fp
}
   15b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b14:	20004f61 	.word	0x20004f61

00015b18 <ll_rl_enable>:
{
   15b18:	b510      	push	{r4, lr}
   15b1a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15b1c:	2000      	movs	r0, #0
   15b1e:	f7f9 fcd5 	bl	f4cc <ull_adv_is_enabled>
		? 0 : 1;
   15b22:	b108      	cbz	r0, 15b28 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15b24:	200c      	movs	r0, #12
}
   15b26:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   15b28:	f7f9 feea 	bl	f900 <ull_scan_is_enabled>
		? 0 : 1;
   15b2c:	f030 0001 	bics.w	r0, r0, #1
   15b30:	d1f8      	bne.n	15b24 <ll_rl_enable+0xc>
	switch (enable) {
   15b32:	b134      	cbz	r4, 15b42 <ll_rl_enable+0x2a>
   15b34:	2c01      	cmp	r4, #1
   15b36:	d102      	bne.n	15b3e <ll_rl_enable+0x26>
		rl_enable = 1U;
   15b38:	4b04      	ldr	r3, [pc, #16]	; (15b4c <ll_rl_enable+0x34>)
   15b3a:	701c      	strb	r4, [r3, #0]
}
   15b3c:	bd10      	pop	{r4, pc}
	switch (enable) {
   15b3e:	2012      	movs	r0, #18
}
   15b40:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   15b42:	4b02      	ldr	r3, [pc, #8]	; (15b4c <ll_rl_enable+0x34>)
   15b44:	701c      	strb	r4, [r3, #0]
	return 0;
   15b46:	4620      	mov	r0, r4
}
   15b48:	bd10      	pop	{r4, pc}
   15b4a:	bf00      	nop
   15b4c:	200060df 	.word	0x200060df

00015b50 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   15b50:	4b03      	ldr	r3, [pc, #12]	; (15b60 <ll_rl_timeout_set+0x10>)
   15b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b56:	fb02 f000 	mul.w	r0, r2, r0
   15b5a:	6018      	str	r0, [r3, #0]
}
   15b5c:	4770      	bx	lr
   15b5e:	bf00      	nop
   15b60:	200050d4 	.word	0x200050d4

00015b64 <ll_priv_mode_set>:
{
   15b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b68:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15b6a:	2000      	movs	r0, #0
{
   15b6c:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15b6e:	f7f9 fcad 	bl	f4cc <ull_adv_is_enabled>
		? 0 : 1;
   15b72:	b110      	cbz	r0, 15b7a <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15b74:	200c      	movs	r0, #12
}
   15b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   15b7a:	f7f9 fec1 	bl	f900 <ull_scan_is_enabled>
		? 0 : 1;
   15b7e:	f030 0401 	bics.w	r4, r0, #1
   15b82:	d1f7      	bne.n	15b74 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15b84:	4e1a      	ldr	r6, [pc, #104]	; (15bf0 <ll_priv_mode_set+0x8c>)
   15b86:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15b8a:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15b8c:	f009 0901 	and.w	r9, r9, #1
   15b90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15b94:	00d5      	lsls	r5, r2, #3
   15b96:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   15b9a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15b9e:	07db      	lsls	r3, r3, #31
   15ba0:	f104 0401 	add.w	r4, r4, #1
   15ba4:	d501      	bpl.n	15baa <ll_priv_mode_set+0x46>
   15ba6:	454a      	cmp	r2, r9
   15ba8:	d006      	beq.n	15bb8 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15baa:	2c08      	cmp	r4, #8
   15bac:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15bb0:	d1ee      	bne.n	15b90 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15bb2:	2002      	movs	r0, #2
}
   15bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15bb8:	4630      	mov	r0, r6
   15bba:	2206      	movs	r2, #6
   15bbc:	4651      	mov	r1, sl
   15bbe:	f00a fda2 	bl	20706 <memcmp>
   15bc2:	2800      	cmp	r0, #0
   15bc4:	d1f1      	bne.n	15baa <ll_priv_mode_set+0x46>
		switch (mode) {
   15bc6:	f1b8 0f00 	cmp.w	r8, #0
   15bca:	d00b      	beq.n	15be4 <ll_priv_mode_set+0x80>
   15bcc:	f1b8 0f01 	cmp.w	r8, #1
   15bd0:	d105      	bne.n	15bde <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   15bd2:	5d7b      	ldrb	r3, [r7, r5]
   15bd4:	f043 0310 	orr.w	r3, r3, #16
   15bd8:	557b      	strb	r3, [r7, r5]
}
   15bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   15bde:	2012      	movs	r0, #18
}
   15be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   15be4:	5d7b      	ldrb	r3, [r7, r5]
   15be6:	f368 1304 	bfi	r3, r8, #4, #1
   15bea:	557b      	strb	r3, [r7, r5]
	return 0;
   15bec:	4640      	mov	r0, r8
			break;
   15bee:	e7c2      	b.n	15b76 <ll_priv_mode_set+0x12>
   15bf0:	20004f61 	.word	0x20004f61

00015bf4 <ull_filter_reset>:
{
   15bf4:	b4d0      	push	{r4, r6, r7}
   15bf6:	4930      	ldr	r1, [pc, #192]	; (15cb8 <ull_filter_reset+0xc4>)
   15bf8:	4c30      	ldr	r4, [pc, #192]	; (15cbc <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   15bfa:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   15bfc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   15c00:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   15c02:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   15c04:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   15c08:	d805      	bhi.n	15c16 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   15c0a:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   15c0e:	f36f 1245 	bfc	r2, #5, #1
   15c12:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   15c16:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   15c1a:	f36f 0200 	bfc	r2, #0, #1
   15c1e:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   15c22:	3301      	adds	r3, #1
   15c24:	2b08      	cmp	r3, #8
   15c26:	d1e9      	bne.n	15bfc <ull_filter_reset+0x8>
	rl_enable = 0U;
   15c28:	4a25      	ldr	r2, [pc, #148]	; (15cc0 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15c2a:	4c26      	ldr	r4, [pc, #152]	; (15cc4 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   15c2c:	2300      	movs	r3, #0
   15c2e:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   15c30:	780a      	ldrb	r2, [r1, #0]
   15c32:	f363 0200 	bfi	r2, r3, #0, #1
   15c36:	700a      	strb	r2, [r1, #0]
   15c38:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   15c3c:	f363 0200 	bfi	r2, r3, #0, #1
   15c40:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   15c44:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   15c48:	f363 0200 	bfi	r2, r3, #0, #1
   15c4c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   15c50:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   15c54:	f363 0200 	bfi	r2, r3, #0, #1
   15c58:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   15c5c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   15c60:	f363 0200 	bfi	r2, r3, #0, #1
   15c64:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   15c68:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   15c6c:	f363 0200 	bfi	r2, r3, #0, #1
   15c70:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   15c74:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   15c78:	f363 0200 	bfi	r2, r3, #0, #1
   15c7c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   15c80:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   15c84:	f363 0200 	bfi	r2, r3, #0, #1
   15c88:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   15c8c:	4a0e      	ldr	r2, [pc, #56]	; (15cc8 <ull_filter_reset+0xd4>)
   15c8e:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   15c90:	4b0e      	ldr	r3, [pc, #56]	; (15ccc <ull_filter_reset+0xd8>)
   15c92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15c96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15c9a:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15c9e:	4b0c      	ldr	r3, [pc, #48]	; (15cd0 <ull_filter_reset+0xdc>)
   15ca0:	6023      	str	r3, [r4, #0]
	if (init) {
   15ca2:	b120      	cbz	r0, 15cae <ull_filter_reset+0xba>
}
   15ca4:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   15ca6:	490b      	ldr	r1, [pc, #44]	; (15cd4 <ull_filter_reset+0xe0>)
   15ca8:	480b      	ldr	r0, [pc, #44]	; (15cd8 <ull_filter_reset+0xe4>)
   15caa:	f00e baa4 	b.w	241f6 <k_work_init_delayable>
}
   15cae:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   15cb0:	4809      	ldr	r0, [pc, #36]	; (15cd8 <ull_filter_reset+0xe4>)
   15cb2:	f00e baac 	b.w	2420e <k_work_cancel_delayable>
   15cb6:	bf00      	nop
   15cb8:	20004f60 	.word	0x20004f60
   15cbc:	20004e34 	.word	0x20004e34
   15cc0:	200060df 	.word	0x200060df
   15cc4:	200050d4 	.word	0x200050d4
   15cc8:	200060de 	.word	0x200060de
   15ccc:	200015b8 	.word	0x200015b8
   15cd0:	000dbba0 	.word	0x000dbba0
   15cd4:	00015f99 	.word	0x00015f99
   15cd8:	200015c0 	.word	0x200015c0

00015cdc <ull_filter_lll_get>:
		return &fal_filter;
   15cdc:	4a03      	ldr	r2, [pc, #12]	; (15cec <ull_filter_lll_get+0x10>)
   15cde:	4b04      	ldr	r3, [pc, #16]	; (15cf0 <ull_filter_lll_get+0x14>)
}
   15ce0:	2800      	cmp	r0, #0
   15ce2:	bf0c      	ite	eq
   15ce4:	4610      	moveq	r0, r2
   15ce6:	4618      	movne	r0, r3
   15ce8:	4770      	bx	lr
   15cea:	bf00      	nop
   15cec:	200050a0 	.word	0x200050a0
   15cf0:	20004e74 	.word	0x20004e74

00015cf4 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   15cf4:	b1a8      	cbz	r0, 15d22 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15cf6:	4a0c      	ldr	r2, [pc, #48]	; (15d28 <ull_filter_adv_scan_state_cb+0x34>)
   15cf8:	6812      	ldr	r2, [r2, #0]
{
   15cfa:	b510      	push	{r4, lr}
   15cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15d00:	f240 30e7 	movw	r0, #999	; 0x3e7
   15d04:	2100      	movs	r1, #0
   15d06:	fbe2 0103 	umlal	r0, r1, r2, r3
   15d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15d0e:	2300      	movs	r3, #0
   15d10:	f7ea fdec 	bl	8ec <__aeabi_uldivmod>
}
   15d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15d18:	4602      	mov	r2, r0
   15d1a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15d1c:	4803      	ldr	r0, [pc, #12]	; (15d2c <ull_filter_adv_scan_state_cb+0x38>)
   15d1e:	f008 bdd1 	b.w	1e8c4 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   15d22:	4802      	ldr	r0, [pc, #8]	; (15d2c <ull_filter_adv_scan_state_cb+0x38>)
   15d24:	f00e ba73 	b.w	2420e <k_work_cancel_delayable>
   15d28:	200050d4 	.word	0x200050d4
   15d2c:	200015c0 	.word	0x200015c0

00015d30 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   15d30:	4a0d      	ldr	r2, [pc, #52]	; (15d68 <ull_filter_adv_update+0x38>)
{
   15d32:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   15d34:	2300      	movs	r3, #0
   15d36:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   15d38:	b970      	cbnz	r0, 15d58 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   15d3a:	4b0c      	ldr	r3, [pc, #48]	; (15d6c <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   15d3c:	4a0c      	ldr	r2, [pc, #48]	; (15d70 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   15d3e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   15d40:	2000      	movs	r0, #0
   15d42:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   15d44:	b903      	cbnz	r3, 15d48 <ull_filter_adv_update+0x18>
}
   15d46:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   15d48:	f7f9 fdda 	bl	f900 <ull_scan_is_enabled>
	if (rl_enable &&
   15d4c:	2800      	cmp	r0, #0
   15d4e:	d1fa      	bne.n	15d46 <ull_filter_adv_update+0x16>
}
   15d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   15d54:	f7ff bb52 	b.w	153fc <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   15d58:	4618      	mov	r0, r3
   15d5a:	f7f9 fde9 	bl	f930 <ull_scan_filter_pol_get>
	if (adv_fp &&
   15d5e:	07c3      	lsls	r3, r0, #31
   15d60:	d4eb      	bmi.n	15d3a <ull_filter_adv_update+0xa>
		fal_update();
   15d62:	f7ff fb83 	bl	1546c <fal_update>
   15d66:	e7e8      	b.n	15d3a <ull_filter_adv_update+0xa>
   15d68:	20004e74 	.word	0x20004e74
   15d6c:	200060df 	.word	0x200060df
   15d70:	200050a0 	.word	0x200050a0

00015d74 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   15d74:	4a0e      	ldr	r2, [pc, #56]	; (15db0 <ull_filter_scan_update+0x3c>)
{
   15d76:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   15d78:	2300      	movs	r3, #0
   15d7a:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   15d7c:	07c2      	lsls	r2, r0, #31
   15d7e:	d40e      	bmi.n	15d9e <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   15d80:	4b0c      	ldr	r3, [pc, #48]	; (15db4 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   15d82:	4a0d      	ldr	r2, [pc, #52]	; (15db8 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   15d84:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   15d86:	2000      	movs	r0, #0
   15d88:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   15d8a:	b903      	cbnz	r3, 15d8e <ull_filter_scan_update+0x1a>
}
   15d8c:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   15d8e:	f7f9 fb9d 	bl	f4cc <ull_adv_is_enabled>
	if (rl_enable &&
   15d92:	2800      	cmp	r0, #0
   15d94:	d1fa      	bne.n	15d8c <ull_filter_scan_update+0x18>
}
   15d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   15d9a:	f7ff bb2f 	b.w	153fc <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   15d9e:	4618      	mov	r0, r3
   15da0:	f7f9 fba0 	bl	f4e4 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   15da4:	2800      	cmp	r0, #0
   15da6:	d1eb      	bne.n	15d80 <ull_filter_scan_update+0xc>
		fal_update();
   15da8:	f7ff fb60 	bl	1546c <fal_update>
   15dac:	e7e8      	b.n	15d80 <ull_filter_scan_update+0xc>
   15dae:	bf00      	nop
   15db0:	20004e74 	.word	0x20004e74
   15db4:	200060df 	.word	0x200060df
   15db8:	200050a0 	.word	0x200050a0

00015dbc <ull_filter_rpa_update>:
{
   15dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dc0:	4683      	mov	fp, r0
   15dc2:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   15dc4:	f00e fb93 	bl	244ee <z_impl_k_uptime_ticks>
   15dc8:	014b      	lsls	r3, r1, #5
   15dca:	0142      	lsls	r2, r0, #5
   15dcc:	1a12      	subs	r2, r2, r0
   15dce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   15dd2:	eb63 0301 	sbc.w	r3, r3, r1
   15dd6:	009b      	lsls	r3, r3, #2
   15dd8:	ea4f 0982 	mov.w	r9, r2, lsl #2
   15ddc:	eb19 0900 	adds.w	r9, r9, r0
   15de0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   15de4:	eb41 0103 	adc.w	r1, r1, r3
   15de8:	00cb      	lsls	r3, r1, #3
   15dea:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   15dee:	0bd9      	lsrs	r1, r3, #15
   15df0:	f3c9 3910 	ubfx	r9, r9, #12, #17
   15df4:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   15df8:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   15dfa:	f1bb 0f00 	cmp.w	fp, #0
   15dfe:	d117      	bne.n	15e30 <ull_filter_rpa_update+0x74>
   15e00:	4a5d      	ldr	r2, [pc, #372]	; (15f78 <ull_filter_rpa_update+0x1bc>)
   15e02:	e9d2 3200 	ldrd	r3, r2, [r2]
   15e06:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15e0a:	bf08      	it	eq
   15e0c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15e10:	d00e      	beq.n	15e30 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   15e12:	ebb9 0303 	subs.w	r3, r9, r3
   15e16:	eb61 0202 	sbc.w	r2, r1, r2
   15e1a:	4958      	ldr	r1, [pc, #352]	; (15f7c <ull_filter_rpa_update+0x1c0>)
   15e1c:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   15e1e:	428b      	cmp	r3, r1
   15e20:	f172 0300 	sbcs.w	r3, r2, #0
   15e24:	bfac      	ite	ge
   15e26:	f04f 0a01 	movge.w	sl, #1
   15e2a:	f04f 0a00 	movlt.w	sl, #0
   15e2e:	e001      	b.n	15e34 <ull_filter_rpa_update+0x78>
   15e30:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15e34:	4e52      	ldr	r6, [pc, #328]	; (15f80 <ull_filter_rpa_update+0x1c4>)
   15e36:	f8df 814c 	ldr.w	r8, [pc, #332]	; 15f84 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   15e3a:	2400      	movs	r4, #0
   15e3c:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   15e40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15e44:	00a5      	lsls	r5, r4, #2
   15e46:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15e4a:	07da      	lsls	r2, r3, #31
   15e4c:	d515      	bpl.n	15e7a <ull_filter_rpa_update+0xbe>
   15e4e:	f1ba 0f00 	cmp.w	sl, #0
   15e52:	d101      	bne.n	15e58 <ull_filter_rpa_update+0x9c>
   15e54:	0798      	lsls	r0, r3, #30
   15e56:	d410      	bmi.n	15e7a <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   15e58:	192b      	adds	r3, r5, r4
   15e5a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15e5e:	0759      	lsls	r1, r3, #29
   15e60:	d432      	bmi.n	15ec8 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   15e62:	192b      	adds	r3, r5, r4
   15e64:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15e68:	071a      	lsls	r2, r3, #28
   15e6a:	d41b      	bmi.n	15ea4 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   15e6c:	4425      	add	r5, r4
   15e6e:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   15e72:	f043 0302 	orr.w	r3, r3, #2
   15e76:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15e7a:	3401      	adds	r4, #1
   15e7c:	2c08      	cmp	r4, #8
   15e7e:	f108 0806 	add.w	r8, r8, #6
   15e82:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15e86:	d1db      	bne.n	15e40 <ull_filter_rpa_update+0x84>
	if (all) {
   15e88:	f1ba 0f00 	cmp.w	sl, #0
   15e8c:	d004      	beq.n	15e98 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   15e8e:	4b3a      	ldr	r3, [pc, #232]	; (15f78 <ull_filter_rpa_update+0x1bc>)
   15e90:	9a01      	ldr	r2, [sp, #4]
   15e92:	f8c3 9000 	str.w	r9, [r3]
   15e96:	605a      	str	r2, [r3, #4]
	if (timeout) {
   15e98:	f1bb 0f00 	cmp.w	fp, #0
   15e9c:	d138      	bne.n	15f10 <ull_filter_rpa_update+0x154>
}
   15e9e:	b007      	add	sp, #28
   15ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   15ea4:	a902      	add	r1, sp, #8
   15ea6:	f1a6 0017 	sub.w	r0, r6, #23
   15eaa:	f00a fcb7 	bl	2081c <bt_rpa_create>
				LL_ASSERT(!err);
   15eae:	2800      	cmp	r0, #0
   15eb0:	d154      	bne.n	15f5c <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   15eb2:	ab02      	add	r3, sp, #8
   15eb4:	f8c6 3006 	str.w	r3, [r6, #6]
   15eb8:	4619      	mov	r1, r3
   15eba:	2206      	movs	r2, #6
   15ebc:	4640      	mov	r0, r8
   15ebe:	f00a fc33 	bl	20728 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   15ec2:	f8c6 8006 	str.w	r8, [r6, #6]
   15ec6:	e7d1      	b.n	15e6c <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   15ec8:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   15ecc:	4a2e      	ldr	r2, [pc, #184]	; (15f88 <ull_filter_rpa_update+0x1cc>)
   15ece:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15ed2:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   15ed4:	f10d 0307 	add.w	r3, sp, #7
   15ed8:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   15edc:	f812 1901 	ldrb.w	r1, [r2], #-1
   15ee0:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   15ee4:	4283      	cmp	r3, r0
   15ee6:	d1f9      	bne.n	15edc <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   15ee8:	4631      	mov	r1, r6
   15eea:	a802      	add	r0, sp, #8
   15eec:	f00a fc96 	bl	2081c <bt_rpa_create>
				LL_ASSERT(!err);
   15ef0:	2800      	cmp	r0, #0
   15ef2:	d0b6      	beq.n	15e62 <ull_filter_rpa_update+0xa6>
   15ef4:	4a25      	ldr	r2, [pc, #148]	; (15f8c <ull_filter_rpa_update+0x1d0>)
   15ef6:	4926      	ldr	r1, [pc, #152]	; (15f90 <ull_filter_rpa_update+0x1d4>)
   15ef8:	4826      	ldr	r0, [pc, #152]	; (15f94 <ull_filter_rpa_update+0x1d8>)
   15efa:	f240 23eb 	movw	r3, #747	; 0x2eb
   15efe:	f009 fc0e 	bl	1f71e <printk>
   15f02:	4040      	eors	r0, r0
   15f04:	f380 8811 	msr	BASEPRI, r0
   15f08:	f04f 0003 	mov.w	r0, #3
   15f0c:	df02      	svc	2
   15f0e:	e7a8      	b.n	15e62 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   15f10:	2000      	movs	r0, #0
   15f12:	f7f9 facd 	bl	f4b0 <ull_adv_is_enabled_get>
		if (adv) {
   15f16:	4604      	mov	r4, r0
   15f18:	2800      	cmp	r0, #0
   15f1a:	d0c0      	beq.n	15e9e <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   15f1c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   15f20:	075b      	lsls	r3, r3, #29
   15f22:	d5bc      	bpl.n	15e9e <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   15f24:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   15f28:	2b07      	cmp	r3, #7
   15f2a:	d8b8      	bhi.n	15e9e <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15f2c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   15f30:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15f34:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15f36:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15f38:	3028      	adds	r0, #40	; 0x28
   15f3a:	f001 fabb 	bl	174b4 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   15f3e:	7872      	ldrb	r2, [r6, #1]
   15f40:	4605      	mov	r5, r0
   15f42:	3202      	adds	r2, #2
   15f44:	4631      	mov	r1, r6
   15f46:	f00a fbef 	bl	20728 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   15f4a:	4629      	mov	r1, r5
   15f4c:	4620      	mov	r0, r4
   15f4e:	f7f9 fad9 	bl	f504 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   15f52:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15f56:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   15f5a:	e7a0      	b.n	15e9e <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   15f5c:	4a0b      	ldr	r2, [pc, #44]	; (15f8c <ull_filter_rpa_update+0x1d0>)
   15f5e:	490c      	ldr	r1, [pc, #48]	; (15f90 <ull_filter_rpa_update+0x1d4>)
   15f60:	480c      	ldr	r0, [pc, #48]	; (15f94 <ull_filter_rpa_update+0x1d8>)
   15f62:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   15f66:	f009 fbda 	bl	1f71e <printk>
   15f6a:	4040      	eors	r0, r0
   15f6c:	f380 8811 	msr	BASEPRI, r0
   15f70:	f04f 0003 	mov.w	r0, #3
   15f74:	df02      	svc	2
   15f76:	e79c      	b.n	15eb2 <ull_filter_rpa_update+0xf6>
   15f78:	200015b8 	.word	0x200015b8
   15f7c:	200050d4 	.word	0x200050d4
   15f80:	20004f7e 	.word	0x20004f7e
   15f84:	20004ea8 	.word	0x20004ea8
   15f88:	20004ee0 	.word	0x20004ee0
   15f8c:	0002590c 	.word	0x0002590c
   15f90:	000252cc 	.word	0x000252cc
   15f94:	000250f0 	.word	0x000250f0

00015f98 <rpa_timeout>:
{
   15f98:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   15f9a:	2001      	movs	r0, #1
   15f9c:	f7ff ff0e 	bl	15dbc <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15fa0:	4a0a      	ldr	r2, [pc, #40]	; (15fcc <rpa_timeout+0x34>)
   15fa2:	6812      	ldr	r2, [r2, #0]
   15fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15fa8:	f240 30e7 	movw	r0, #999	; 0x3e7
   15fac:	2100      	movs	r1, #0
   15fae:	fbe2 0103 	umlal	r0, r1, r2, r3
   15fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15fb6:	2300      	movs	r3, #0
   15fb8:	f7ea fc98 	bl	8ec <__aeabi_uldivmod>
}
   15fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15fc0:	4602      	mov	r2, r0
   15fc2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15fc4:	4802      	ldr	r0, [pc, #8]	; (15fd0 <rpa_timeout+0x38>)
   15fc6:	f008 bc7d 	b.w	1e8c4 <k_work_schedule>
   15fca:	bf00      	nop
   15fcc:	200050d4 	.word	0x200050d4
   15fd0:	200015c0 	.word	0x200015c0

00015fd4 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   15fd4:	2807      	cmp	r0, #7
   15fd6:	d813      	bhi.n	16000 <ull_filter_adva_get+0x2c>
{
   15fd8:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   15fda:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   15fde:	4d10      	ldr	r5, [pc, #64]	; (16020 <ull_filter_adva_get+0x4c>)
   15fe0:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   15fe4:	071a      	lsls	r2, r3, #28
   15fe6:	4604      	mov	r4, r0
   15fe8:	ea4f 0680 	mov.w	r6, r0, lsl #2
   15fec:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   15ff0:	d505      	bpl.n	15ffe <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   15ff2:	079b      	lsls	r3, r3, #30
   15ff4:	d506      	bpl.n	16004 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   15ff6:	4434      	add	r4, r6
   15ff8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   15ffc:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   15ffe:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   16000:	2000      	movs	r0, #0
}
   16002:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   16004:	4a07      	ldr	r2, [pc, #28]	; (16024 <ull_filter_adva_get+0x50>)
   16006:	4908      	ldr	r1, [pc, #32]	; (16028 <ull_filter_adva_get+0x54>)
   16008:	4808      	ldr	r0, [pc, #32]	; (1602c <ull_filter_adva_get+0x58>)
   1600a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1600e:	f009 fb86 	bl	1f71e <printk>
   16012:	4040      	eors	r0, r0
   16014:	f380 8811 	msr	BASEPRI, r0
   16018:	f04f 0003 	mov.w	r0, #3
   1601c:	df02      	svc	2
   1601e:	e7ea      	b.n	15ff6 <ull_filter_adva_get+0x22>
   16020:	20004f60 	.word	0x20004f60
   16024:	0002590c 	.word	0x0002590c
   16028:	00025970 	.word	0x00025970
   1602c:	000250f0 	.word	0x000250f0

00016030 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   16030:	2807      	cmp	r0, #7
   16032:	d80b      	bhi.n	1604c <ull_filter_tgta_get+0x1c>
   16034:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16038:	4a05      	ldr	r2, [pc, #20]	; (16050 <ull_filter_tgta_get+0x20>)
   1603a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1603e:	074b      	lsls	r3, r1, #29
   16040:	d504      	bpl.n	1604c <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   16042:	2328      	movs	r3, #40	; 0x28
   16044:	fb03 2000 	mla	r0, r3, r0, r2
   16048:	301e      	adds	r0, #30
   1604a:	4770      	bx	lr
	return NULL;
   1604c:	2000      	movs	r0, #0
   1604e:	4770      	bx	lr
   16050:	20004f60 	.word	0x20004f60

00016054 <ull_filter_rl_find>:
{
   16054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16058:	468b      	mov	fp, r1
	if (free_idx) {
   1605a:	4617      	mov	r7, r2
   1605c:	b10a      	cbz	r2, 16062 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1605e:	23ff      	movs	r3, #255	; 0xff
   16060:	7013      	strb	r3, [r2, #0]
   16062:	4d1b      	ldr	r5, [pc, #108]	; (160d0 <ull_filter_rl_find+0x7c>)
{
   16064:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16066:	f000 0a01 	and.w	sl, r0, #1
   1606a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1606e:	e006      	b.n	1607e <ull_filter_rl_find+0x2a>
   16070:	4552      	cmp	r2, sl
   16072:	d01f      	beq.n	160b4 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16074:	3401      	adds	r4, #1
   16076:	2c08      	cmp	r4, #8
   16078:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1607c:	d015      	beq.n	160aa <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1607e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   16082:	fa5f f884 	uxtb.w	r8, r4
   16086:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1608a:	07d9      	lsls	r1, r3, #31
   1608c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16090:	d4ee      	bmi.n	16070 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   16092:	2f00      	cmp	r7, #0
   16094:	d0ee      	beq.n	16074 <ull_filter_rl_find+0x20>
   16096:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16098:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1609a:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1609c:	bf08      	it	eq
   1609e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   160a2:	2c08      	cmp	r4, #8
   160a4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   160a8:	d1e9      	bne.n	1607e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   160aa:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   160ae:	4640      	mov	r0, r8
   160b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   160b4:	4628      	mov	r0, r5
   160b6:	2206      	movs	r2, #6
   160b8:	4659      	mov	r1, fp
   160ba:	f00a fb24 	bl	20706 <memcmp>
   160be:	2800      	cmp	r0, #0
   160c0:	d0f5      	beq.n	160ae <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   160c2:	2f00      	cmp	r7, #0
   160c4:	d0d6      	beq.n	16074 <ull_filter_rl_find+0x20>
   160c6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   160ca:	07db      	lsls	r3, r3, #31
   160cc:	d4d2      	bmi.n	16074 <ull_filter_rl_find+0x20>
   160ce:	e7e2      	b.n	16096 <ull_filter_rl_find+0x42>
   160d0:	20004f61 	.word	0x20004f61

000160d4 <ll_rl_add>:
{
   160d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160d8:	4680      	mov	r8, r0
   160da:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   160dc:	2000      	movs	r0, #0
{
   160de:	460e      	mov	r6, r1
   160e0:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   160e2:	f7f9 f9f3 	bl	f4cc <ull_adv_is_enabled>
		? 0 : 1;
   160e6:	b118      	cbz	r0, 160f0 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   160e8:	200c      	movs	r0, #12
}
   160ea:	b005      	add	sp, #20
   160ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   160f0:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   160f2:	f7f9 fc05 	bl	f900 <ull_scan_is_enabled>
		? 0 : 1;
   160f6:	f030 0301 	bics.w	r3, r0, #1
   160fa:	d1f5      	bne.n	160e8 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   160fc:	46c2      	mov	sl, r8
   160fe:	f10d 020f 	add.w	r2, sp, #15
   16102:	f81a 0b01 	ldrb.w	r0, [sl], #1
   16106:	4651      	mov	r1, sl
   16108:	f7ff ffa4 	bl	16054 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1610c:	2807      	cmp	r0, #7
   1610e:	f240 80b1 	bls.w	16274 <ll_rl_add+0x1a0>
	} else if (j >= ARRAY_SIZE(rl)) {
   16112:	f89d 700f 	ldrb.w	r7, [sp, #15]
   16116:	2f07      	cmp	r7, #7
   16118:	f200 80a8 	bhi.w	1626c <ll_rl_add+0x198>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1611c:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   16120:	4d56      	ldr	r5, [pc, #344]	; (1627c <ll_rl_add+0x1a8>)
   16122:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   16126:	1c58      	adds	r0, r3, #1
   16128:	2206      	movs	r2, #6
   1612a:	4651      	mov	r1, sl
   1612c:	4428      	add	r0, r5
   1612e:	9300      	str	r3, [sp, #0]
   16130:	f00a fafa 	bl	20728 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   16134:	f898 3000 	ldrb.w	r3, [r8]
   16138:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1613c:	465a      	mov	r2, fp
   1613e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   16142:	f363 1186 	bfi	r1, r3, #6, #1
   16146:	f805 100b 	strb.w	r1, [r5, fp]
   1614a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1614e:	2110      	movs	r1, #16
   16150:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   16152:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16154:	f7f4 fa48 	bl	a5e8 <mem_nz>
   16158:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1615c:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1615e:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16162:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16164:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16168:	f7f4 fa3e 	bl	a5e8 <mem_nz>
   1616c:	f815 200b 	ldrb.w	r2, [r5, fp]
   16170:	f000 0001 	and.w	r0, r0, #1
   16174:	f360 02c3 	bfi	r2, r0, #3, #1
   16178:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1617c:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1617e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   16182:	d44b      	bmi.n	1621c <ll_rl_add+0x148>
	if (rl[i].lirk) {
   16184:	2800      	cmp	r0, #0
   16186:	d163      	bne.n	16250 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   16188:	9800      	ldr	r0, [sp, #0]
   1618a:	4e3d      	ldr	r6, [pc, #244]	; (16280 <ll_rl_add+0x1ac>)
   1618c:	3018      	adds	r0, #24
   1618e:	2206      	movs	r2, #6
   16190:	2100      	movs	r1, #0
   16192:	4428      	add	r0, r5
   16194:	f00a fad3 	bl	2073e <memset>
	rl[i].dev = 0U;
   16198:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1619c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   161a0:	f021 0112 	bic.w	r1, r1, #18
   161a4:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   161a8:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   161ac:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   161b0:	f009 0901 	and.w	r9, r9, #1
   161b4:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   161b8:	07d3      	lsls	r3, r2, #31
   161ba:	f3c2 0140 	ubfx	r1, r2, #1, #1
   161be:	d501      	bpl.n	161c4 <ll_rl_add+0xf0>
   161c0:	4549      	cmp	r1, r9
   161c2:	d018      	beq.n	161f6 <ll_rl_add+0x122>
	for (i = 0; i < FAL_SIZE; i++) {
   161c4:	3401      	adds	r4, #1
   161c6:	2c08      	cmp	r4, #8
   161c8:	f106 0608 	add.w	r6, r6, #8
   161cc:	d1f2      	bne.n	161b4 <ll_rl_add+0xe0>
		rl[i].fal = 0U;
   161ce:	eb0b 0207 	add.w	r2, fp, r7
   161d2:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   161d6:	f36f 1145 	bfc	r1, #5, #1
   161da:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   161de:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   161e2:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   161e4:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   161e8:	f042 0201 	orr.w	r2, r2, #1
   161ec:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   161f0:	b005      	add	sp, #20
   161f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   161f6:	2206      	movs	r2, #6
   161f8:	4630      	mov	r0, r6
   161fa:	4651      	mov	r1, sl
   161fc:	f00a fa83 	bl	20706 <memcmp>
   16200:	2800      	cmp	r0, #0
   16202:	d1df      	bne.n	161c4 <ll_rl_add+0xf0>
		rl[i].fal = 1U;
   16204:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   16208:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1620c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   16210:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   16212:	f041 0120 	orr.w	r1, r1, #32
   16216:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1621a:	e7e0      	b.n	161de <ll_rl_add+0x10a>
		rl[i].pirk_idx = peer_irk_count;
   1621c:	4b19      	ldr	r3, [pc, #100]	; (16284 <ll_rl_add+0x1b0>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1621e:	4a1a      	ldr	r2, [pc, #104]	; (16288 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   16220:	7819      	ldrb	r1, [r3, #0]
   16222:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   16226:	5457      	strb	r7, [r2, r1]
   16228:	4a18      	ldr	r2, [pc, #96]	; (1628c <ll_rl_add+0x1b8>)
		rl[i].pirk_idx = peer_irk_count;
   1622a:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1622e:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   16232:	3101      	adds	r1, #1
	psrc += length - 1;
   16234:	f106 020f 	add.w	r2, r6, #15
   16238:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1623a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1623e:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   16240:	f812 1901 	ldrb.w	r1, [r2], #-1
   16244:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   16248:	4296      	cmp	r6, r2
   1624a:	d1f9      	bne.n	16240 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1624c:	2800      	cmp	r0, #0
   1624e:	d09b      	beq.n	16188 <ll_rl_add+0xb4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   16250:	9b00      	ldr	r3, [sp, #0]
   16252:	1dd8      	adds	r0, r3, #7
   16254:	4649      	mov	r1, r9
   16256:	2210      	movs	r2, #16
   16258:	4428      	add	r0, r5
   1625a:	f00a fa65 	bl	20728 <memcpy>
		rl[i].local_rpa = NULL;
   1625e:	eb0b 0207 	add.w	r2, fp, r7
   16262:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   16266:	2100      	movs	r1, #0
   16268:	6251      	str	r1, [r2, #36]	; 0x24
   1626a:	e78d      	b.n	16188 <ll_rl_add+0xb4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1626c:	2007      	movs	r0, #7
}
   1626e:	b005      	add	sp, #20
   16270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   16274:	2012      	movs	r0, #18
}
   16276:	b005      	add	sp, #20
   16278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1627c:	20004f60 	.word	0x20004f60
   16280:	20004e36 	.word	0x20004e36
   16284:	200060de 	.word	0x200060de
   16288:	20004ed8 	.word	0x20004ed8
   1628c:	20004ee0 	.word	0x20004ee0

00016290 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   16290:	2807      	cmp	r0, #7
   16292:	d807      	bhi.n	162a4 <ull_filter_lll_lrpa_used+0x14>
   16294:	4b04      	ldr	r3, [pc, #16]	; (162a8 <ull_filter_lll_lrpa_used+0x18>)
   16296:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1629a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1629e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   162a2:	4770      	bx	lr
   162a4:	2000      	movs	r0, #0
}
   162a6:	4770      	bx	lr
   162a8:	20004f60 	.word	0x20004f60

000162ac <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   162ac:	2807      	cmp	r0, #7
   162ae:	d812      	bhi.n	162d6 <ull_filter_lll_lrpa_get+0x2a>
   162b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   162b4:	4a09      	ldr	r2, [pc, #36]	; (162dc <ull_filter_lll_lrpa_get+0x30>)
   162b6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   162ba:	f013 0f08 	tst.w	r3, #8
   162be:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   162c2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   162c6:	d007      	beq.n	162d8 <ull_filter_lll_lrpa_get+0x2c>
   162c8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   162cc:	079b      	lsls	r3, r3, #30
   162ce:	d503      	bpl.n	162d8 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   162d0:	440a      	add	r2, r1
   162d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
   162d4:	4770      	bx	lr
		return NULL;
   162d6:	2000      	movs	r0, #0
}
   162d8:	4770      	bx	lr
   162da:	bf00      	nop
   162dc:	20004f60 	.word	0x20004f60

000162e0 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   162e0:	4b02      	ldr	r3, [pc, #8]	; (162ec <ull_filter_lll_irks_get+0xc>)
   162e2:	781b      	ldrb	r3, [r3, #0]
   162e4:	7003      	strb	r3, [r0, #0]
}
   162e6:	4802      	ldr	r0, [pc, #8]	; (162f0 <ull_filter_lll_irks_get+0x10>)
   162e8:	4770      	bx	lr
   162ea:	bf00      	nop
   162ec:	200060de 	.word	0x200060de
   162f0:	20004ee0 	.word	0x20004ee0

000162f4 <ull_filter_lll_rl_idx>:
{
   162f4:	b538      	push	{r3, r4, r5, lr}
   162f6:	460c      	mov	r4, r1
	if (filter) {
   162f8:	b150      	cbz	r0, 16310 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   162fa:	2907      	cmp	r1, #7
   162fc:	d822      	bhi.n	16344 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   162fe:	4d2a      	ldr	r5, [pc, #168]	; (163a8 <ull_filter_lll_rl_idx+0xb4>)
   16300:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   16304:	07da      	lsls	r2, r3, #31
   16306:	d52f      	bpl.n	16368 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   16308:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1630c:	7860      	ldrb	r0, [r4, #1]
}
   1630e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   16310:	2907      	cmp	r1, #7
   16312:	d83a      	bhi.n	1638a <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   16314:	4b25      	ldr	r3, [pc, #148]	; (163ac <ull_filter_lll_rl_idx+0xb8>)
   16316:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1631a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1631e:	07db      	lsls	r3, r3, #31
   16320:	d501      	bpl.n	16326 <ull_filter_lll_rl_idx+0x32>
   16322:	4620      	mov	r0, r4
}
   16324:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   16326:	4a22      	ldr	r2, [pc, #136]	; (163b0 <ull_filter_lll_rl_idx+0xbc>)
   16328:	4922      	ldr	r1, [pc, #136]	; (163b4 <ull_filter_lll_rl_idx+0xc0>)
   1632a:	4823      	ldr	r0, [pc, #140]	; (163b8 <ull_filter_lll_rl_idx+0xc4>)
   1632c:	f240 3363 	movw	r3, #867	; 0x363
   16330:	f009 f9f5 	bl	1f71e <printk>
   16334:	4040      	eors	r0, r0
   16336:	f380 8811 	msr	BASEPRI, r0
   1633a:	f04f 0003 	mov.w	r0, #3
   1633e:	df02      	svc	2
   16340:	4620      	mov	r0, r4
}
   16342:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   16344:	4a1a      	ldr	r2, [pc, #104]	; (163b0 <ull_filter_lll_rl_idx+0xbc>)
   16346:	491d      	ldr	r1, [pc, #116]	; (163bc <ull_filter_lll_rl_idx+0xc8>)
   16348:	481b      	ldr	r0, [pc, #108]	; (163b8 <ull_filter_lll_rl_idx+0xc4>)
   1634a:	f240 335d 	movw	r3, #861	; 0x35d
   1634e:	f009 f9e6 	bl	1f71e <printk>
   16352:	4040      	eors	r0, r0
   16354:	f380 8811 	msr	BASEPRI, r0
   16358:	f04f 0003 	mov.w	r0, #3
   1635c:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1635e:	4d12      	ldr	r5, [pc, #72]	; (163a8 <ull_filter_lll_rl_idx+0xb4>)
   16360:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   16364:	07da      	lsls	r2, r3, #31
   16366:	d4cf      	bmi.n	16308 <ull_filter_lll_rl_idx+0x14>
   16368:	4a11      	ldr	r2, [pc, #68]	; (163b0 <ull_filter_lll_rl_idx+0xbc>)
   1636a:	4915      	ldr	r1, [pc, #84]	; (163c0 <ull_filter_lll_rl_idx+0xcc>)
   1636c:	4812      	ldr	r0, [pc, #72]	; (163b8 <ull_filter_lll_rl_idx+0xc4>)
   1636e:	f240 335e 	movw	r3, #862	; 0x35e
   16372:	f009 f9d4 	bl	1f71e <printk>
   16376:	4040      	eors	r0, r0
   16378:	f380 8811 	msr	BASEPRI, r0
   1637c:	f04f 0003 	mov.w	r0, #3
   16380:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   16382:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   16386:	7860      	ldrb	r0, [r4, #1]
   16388:	e7c1      	b.n	1630e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1638a:	4a09      	ldr	r2, [pc, #36]	; (163b0 <ull_filter_lll_rl_idx+0xbc>)
   1638c:	490d      	ldr	r1, [pc, #52]	; (163c4 <ull_filter_lll_rl_idx+0xd0>)
   1638e:	480a      	ldr	r0, [pc, #40]	; (163b8 <ull_filter_lll_rl_idx+0xc4>)
   16390:	f240 3361 	movw	r3, #865	; 0x361
   16394:	f009 f9c3 	bl	1f71e <printk>
   16398:	4040      	eors	r0, r0
   1639a:	f380 8811 	msr	BASEPRI, r0
   1639e:	f04f 0003 	mov.w	r0, #3
   163a2:	df02      	svc	2
   163a4:	e7b6      	b.n	16314 <ull_filter_lll_rl_idx+0x20>
   163a6:	bf00      	nop
   163a8:	20004e34 	.word	0x20004e34
   163ac:	20004f60 	.word	0x20004f60
   163b0:	0002590c 	.word	0x0002590c
   163b4:	00025aec 	.word	0x00025aec
   163b8:	000250f0 	.word	0x000250f0
   163bc:	00025988 	.word	0x00025988
   163c0:	00025a30 	.word	0x00025a30
   163c4:	00025a48 	.word	0x00025a48

000163c8 <ull_filter_lll_rl_irk_idx>:
{
   163c8:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   163ca:	4b20      	ldr	r3, [pc, #128]	; (1644c <ull_filter_lll_rl_irk_idx+0x84>)
   163cc:	781b      	ldrb	r3, [r3, #0]
   163ce:	4283      	cmp	r3, r0
{
   163d0:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   163d2:	d90c      	bls.n	163ee <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   163d4:	4b1e      	ldr	r3, [pc, #120]	; (16450 <ull_filter_lll_rl_irk_idx+0x88>)
   163d6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   163d8:	2c07      	cmp	r4, #7
   163da:	d819      	bhi.n	16410 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   163dc:	4b1d      	ldr	r3, [pc, #116]	; (16454 <ull_filter_lll_rl_irk_idx+0x8c>)
   163de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   163e2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   163e6:	07db      	lsls	r3, r3, #31
   163e8:	d520      	bpl.n	1642c <ull_filter_lll_rl_irk_idx+0x64>
}
   163ea:	4620      	mov	r0, r4
   163ec:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   163ee:	4a1a      	ldr	r2, [pc, #104]	; (16458 <ull_filter_lll_rl_irk_idx+0x90>)
   163f0:	491a      	ldr	r1, [pc, #104]	; (1645c <ull_filter_lll_rl_irk_idx+0x94>)
   163f2:	481b      	ldr	r0, [pc, #108]	; (16460 <ull_filter_lll_rl_irk_idx+0x98>)
   163f4:	f240 336d 	movw	r3, #877	; 0x36d
   163f8:	f009 f991 	bl	1f71e <printk>
   163fc:	4040      	eors	r0, r0
   163fe:	f380 8811 	msr	BASEPRI, r0
   16402:	f04f 0003 	mov.w	r0, #3
   16406:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   16408:	4b11      	ldr	r3, [pc, #68]	; (16450 <ull_filter_lll_rl_irk_idx+0x88>)
   1640a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1640c:	2c07      	cmp	r4, #7
   1640e:	d9e5      	bls.n	163dc <ull_filter_lll_rl_irk_idx+0x14>
   16410:	4a11      	ldr	r2, [pc, #68]	; (16458 <ull_filter_lll_rl_irk_idx+0x90>)
   16412:	4914      	ldr	r1, [pc, #80]	; (16464 <ull_filter_lll_rl_irk_idx+0x9c>)
   16414:	4812      	ldr	r0, [pc, #72]	; (16460 <ull_filter_lll_rl_irk_idx+0x98>)
   16416:	f240 336f 	movw	r3, #879	; 0x36f
   1641a:	f009 f980 	bl	1f71e <printk>
   1641e:	4040      	eors	r0, r0
   16420:	f380 8811 	msr	BASEPRI, r0
   16424:	f04f 0003 	mov.w	r0, #3
   16428:	df02      	svc	2
   1642a:	e7d7      	b.n	163dc <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1642c:	4a0a      	ldr	r2, [pc, #40]	; (16458 <ull_filter_lll_rl_irk_idx+0x90>)
   1642e:	490e      	ldr	r1, [pc, #56]	; (16468 <ull_filter_lll_rl_irk_idx+0xa0>)
   16430:	480b      	ldr	r0, [pc, #44]	; (16460 <ull_filter_lll_rl_irk_idx+0x98>)
   16432:	f44f 735c 	mov.w	r3, #880	; 0x370
   16436:	f009 f972 	bl	1f71e <printk>
   1643a:	4040      	eors	r0, r0
   1643c:	f380 8811 	msr	BASEPRI, r0
   16440:	f04f 0003 	mov.w	r0, #3
   16444:	df02      	svc	2
}
   16446:	4620      	mov	r0, r4
   16448:	bd10      	pop	{r4, pc}
   1644a:	bf00      	nop
   1644c:	200060de 	.word	0x200060de
   16450:	20004ed8 	.word	0x20004ed8
   16454:	20004f60 	.word	0x20004f60
   16458:	0002590c 	.word	0x0002590c
   1645c:	00025af8 	.word	0x00025af8
   16460:	000250f0 	.word	0x000250f0
   16464:	00025b18 	.word	0x00025b18
   16468:	00025aec 	.word	0x00025aec

0001646c <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1646c:	2807      	cmp	r0, #7
   1646e:	d823      	bhi.n	164b8 <ull_filter_lll_irk_in_fal+0x4c>
{
   16470:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   16472:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   16476:	4e11      	ldr	r6, [pc, #68]	; (164bc <ull_filter_lll_irk_in_fal+0x50>)
   16478:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1647c:	07db      	lsls	r3, r3, #31
   1647e:	4604      	mov	r4, r0
   16480:	ea4f 0580 	mov.w	r5, r0, lsl #2
   16484:	d505      	bpl.n	16492 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   16486:	442c      	add	r4, r5
   16488:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1648c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   16490:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   16492:	4a0b      	ldr	r2, [pc, #44]	; (164c0 <ull_filter_lll_irk_in_fal+0x54>)
   16494:	490b      	ldr	r1, [pc, #44]	; (164c4 <ull_filter_lll_irk_in_fal+0x58>)
   16496:	480c      	ldr	r0, [pc, #48]	; (164c8 <ull_filter_lll_irk_in_fal+0x5c>)
   16498:	f240 337b 	movw	r3, #891	; 0x37b
   1649c:	f009 f93f 	bl	1f71e <printk>
   164a0:	4040      	eors	r0, r0
   164a2:	f380 8811 	msr	BASEPRI, r0
   164a6:	f04f 0003 	mov.w	r0, #3
   164aa:	df02      	svc	2
	return rl[rl_idx].fal;
   164ac:	442c      	add	r4, r5
   164ae:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   164b2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   164b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   164b8:	2000      	movs	r0, #0
}
   164ba:	4770      	bx	lr
   164bc:	20004f60 	.word	0x20004f60
   164c0:	0002590c 	.word	0x0002590c
   164c4:	0002595c 	.word	0x0002595c
   164c8:	000250f0 	.word	0x000250f0

000164cc <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   164cc:	4b14      	ldr	r3, [pc, #80]	; (16520 <ull_filter_lll_rl_idx_allowed+0x54>)
   164ce:	781b      	ldrb	r3, [r3, #0]
   164d0:	b19b      	cbz	r3, 164fa <ull_filter_lll_rl_idx_allowed+0x2e>
   164d2:	2907      	cmp	r1, #7
{
   164d4:	b570      	push	{r4, r5, r6, lr}
   164d6:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   164d8:	d80d      	bhi.n	164f6 <ull_filter_lll_rl_idx_allowed+0x2a>
   164da:	b960      	cbnz	r0, 164f6 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   164dc:	4e11      	ldr	r6, [pc, #68]	; (16524 <ull_filter_lll_rl_idx_allowed+0x58>)
   164de:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   164e2:	008d      	lsls	r5, r1, #2
   164e4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   164e8:	07da      	lsls	r2, r3, #31
   164ea:	d50b      	bpl.n	16504 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   164ec:	442c      	add	r4, r5
   164ee:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   164f2:	0743      	lsls	r3, r0, #29
   164f4:	d403      	bmi.n	164fe <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   164f6:	2001      	movs	r0, #1
}
   164f8:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   164fa:	2001      	movs	r0, #1
}
   164fc:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   164fe:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   16502:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   16504:	4a08      	ldr	r2, [pc, #32]	; (16528 <ull_filter_lll_rl_idx_allowed+0x5c>)
   16506:	4909      	ldr	r1, [pc, #36]	; (1652c <ull_filter_lll_rl_idx_allowed+0x60>)
   16508:	4809      	ldr	r0, [pc, #36]	; (16530 <ull_filter_lll_rl_idx_allowed+0x64>)
   1650a:	f44f 7365 	mov.w	r3, #916	; 0x394
   1650e:	f009 f906 	bl	1f71e <printk>
   16512:	4040      	eors	r0, r0
   16514:	f380 8811 	msr	BASEPRI, r0
   16518:	f04f 0003 	mov.w	r0, #3
   1651c:	df02      	svc	2
   1651e:	e7e5      	b.n	164ec <ull_filter_lll_rl_idx_allowed+0x20>
   16520:	200060df 	.word	0x200060df
   16524:	20004f60 	.word	0x20004f60
   16528:	0002590c 	.word	0x0002590c
   1652c:	0002595c 	.word	0x0002595c
   16530:	000250f0 	.word	0x000250f0

00016534 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   16534:	7813      	ldrb	r3, [r2, #0]
   16536:	2bff      	cmp	r3, #255	; 0xff
   16538:	d11b      	bne.n	16572 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1653a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1653e:	4d19      	ldr	r5, [pc, #100]	; (165a4 <ull_filter_lll_rl_addr_allowed+0x70>)
   16540:	4604      	mov	r4, r0
   16542:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   16544:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16546:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1654a:	b2df      	uxtb	r7, r3
   1654c:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   16550:	f01c 0001 	ands.w	r0, ip, #1
   16554:	ea4f 0683 	mov.w	r6, r3, lsl #2
   16558:	d003      	beq.n	16562 <ull_filter_lll_rl_addr_allowed+0x2e>
   1655a:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1655e:	45a4      	cmp	ip, r4
   16560:	d009      	beq.n	16576 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16562:	3301      	adds	r3, #1
   16564:	2b08      	cmp	r3, #8
   16566:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1656a:	d1ec      	bne.n	16546 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1656c:	2001      	movs	r0, #1
}
   1656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   16572:	2001      	movs	r0, #1
}
   16574:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   16576:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1657a:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1657c:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   16580:	f81c af01 	ldrb.w	sl, [ip, #1]!
   16584:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   16588:	45ca      	cmp	sl, r9
   1658a:	d1ea      	bne.n	16562 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1658c:	45dc      	cmp	ip, fp
   1658e:	d1f7      	bne.n	16580 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   16590:	4433      	add	r3, r6
				*rl_idx = i;
   16592:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   16594:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   16598:	075a      	lsls	r2, r3, #29
   1659a:	d5e8      	bpl.n	1656e <ull_filter_lll_rl_addr_allowed+0x3a>
   1659c:	f3c3 1000 	ubfx	r0, r3, #4, #1
   165a0:	e7e5      	b.n	1656e <ull_filter_lll_rl_addr_allowed+0x3a>
   165a2:	bf00      	nop
   165a4:	20004f60 	.word	0x20004f60

000165a8 <ull_filter_lll_rl_addr_resolve>:
{
   165a8:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   165aa:	4b0e      	ldr	r3, [pc, #56]	; (165e4 <ull_filter_lll_rl_addr_resolve+0x3c>)
   165ac:	781c      	ldrb	r4, [r3, #0]
   165ae:	b17c      	cbz	r4, 165d0 <ull_filter_lll_rl_addr_resolve+0x28>
   165b0:	2a07      	cmp	r2, #7
   165b2:	d80d      	bhi.n	165d0 <ull_filter_lll_rl_addr_resolve+0x28>
   165b4:	4c0c      	ldr	r4, [pc, #48]	; (165e8 <ull_filter_lll_rl_addr_resolve+0x40>)
   165b6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   165ba:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   165be:	f01c 0f08 	tst.w	ip, #8
   165c2:	d005      	beq.n	165d0 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   165c4:	b120      	cbz	r0, 165d0 <ull_filter_lll_rl_addr_resolve+0x28>
   165c6:	794b      	ldrb	r3, [r1, #5]
   165c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   165cc:	2b40      	cmp	r3, #64	; 0x40
   165ce:	d002      	beq.n	165d6 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   165d0:	2000      	movs	r0, #0
   165d2:	bc10      	pop	{r4}
   165d4:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   165d6:	2028      	movs	r0, #40	; 0x28
   165d8:	fb00 4002 	mla	r0, r0, r2, r4
   165dc:	3007      	adds	r0, #7
}
   165de:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   165e0:	f00a b909 	b.w	207f6 <bt_rpa_irk_matches>
   165e4:	200060df 	.word	0x200060df
   165e8:	20004f60 	.word	0x20004f60

000165ec <ull_filter_lll_rl_enabled>:
	return rl_enable;
   165ec:	4b02      	ldr	r3, [pc, #8]	; (165f8 <ull_filter_lll_rl_enabled+0xc>)
   165ee:	7818      	ldrb	r0, [r3, #0]
}
   165f0:	3800      	subs	r0, #0
   165f2:	bf18      	it	ne
   165f4:	2001      	movne	r0, #1
   165f6:	4770      	bx	lr
   165f8:	200060df 	.word	0x200060df

000165fc <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   165fc:	4668      	mov	r0, sp
   165fe:	f020 0107 	bic.w	r1, r0, #7
   16602:	468d      	mov	sp, r1
   16604:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   16606:	f002 fdd5 	bl	191b4 <isr_radio>

	ISR_DIRECT_PM();
   1660a:	f7ef fc01 	bl	5e10 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1660e:	f7ef fcd1 	bl	5fb4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16612:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16616:	4685      	mov	sp, r0
   16618:	4770      	bx	lr
   1661a:	bf00      	nop

0001661c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1661c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1661e:	4b09      	ldr	r3, [pc, #36]	; (16644 <rtc0_nrf5_isr+0x28>)
   16620:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   16624:	b93a      	cbnz	r2, 16636 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   16626:	2001      	movs	r0, #1
   16628:	f7f4 f8c4 	bl	a7b4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1662c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   16630:	2002      	movs	r0, #2
   16632:	f7f4 b8bf 	b.w	a7b4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   16636:	2000      	movs	r0, #0
   16638:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1663c:	f7f5 f9d2 	bl	b9e4 <ticker_trigger>
   16640:	e7f1      	b.n	16626 <rtc0_nrf5_isr+0xa>
   16642:	bf00      	nop
   16644:	4000b000 	.word	0x4000b000

00016648 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   16648:	2000      	movs	r0, #0
   1664a:	f7f4 b8b3 	b.w	a7b4 <mayfly_run>
   1664e:	bf00      	nop

00016650 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   16650:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   16652:	4b0e      	ldr	r3, [pc, #56]	; (1668c <ticker_stop_op_cb+0x3c>)
   16654:	4c0e      	ldr	r4, [pc, #56]	; (16690 <ticker_stop_op_cb+0x40>)
   16656:	781a      	ldrb	r2, [r3, #0]
   16658:	7823      	ldrb	r3, [r4, #0]
   1665a:	429a      	cmp	r2, r3
   1665c:	d006      	beq.n	1666c <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1665e:	490d      	ldr	r1, [pc, #52]	; (16694 <ticker_stop_op_cb+0x44>)
   16660:	4a0d      	ldr	r2, [pc, #52]	; (16698 <ticker_stop_op_cb+0x48>)
   16662:	7809      	ldrb	r1, [r1, #0]
   16664:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   16666:	3301      	adds	r3, #1
   16668:	7023      	strb	r3, [r4, #0]
}
   1666a:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1666c:	4a0b      	ldr	r2, [pc, #44]	; (1669c <ticker_stop_op_cb+0x4c>)
   1666e:	490c      	ldr	r1, [pc, #48]	; (166a0 <ticker_stop_op_cb+0x50>)
   16670:	480c      	ldr	r0, [pc, #48]	; (166a4 <ticker_stop_op_cb+0x54>)
   16672:	f240 3301 	movw	r3, #769	; 0x301
   16676:	f009 f852 	bl	1f71e <printk>
   1667a:	4040      	eors	r0, r0
   1667c:	f380 8811 	msr	BASEPRI, r0
   16680:	f04f 0003 	mov.w	r0, #3
   16684:	df02      	svc	2
	preempt_stop_ack++;
   16686:	7823      	ldrb	r3, [r4, #0]
   16688:	e7e9      	b.n	1665e <ticker_stop_op_cb+0xe>
   1668a:	bf00      	nop
   1668c:	200060e5 	.word	0x200060e5
   16690:	200060e4 	.word	0x200060e4
   16694:	200060e0 	.word	0x200060e0
   16698:	200060e1 	.word	0x200060e1
   1669c:	00025b20 	.word	0x00025b20
   166a0:	00025b68 	.word	0x00025b68
   166a4:	000250f0 	.word	0x000250f0

000166a8 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   166a8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   166aa:	b9f8      	cbnz	r0, 166ec <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   166ac:	4b1e      	ldr	r3, [pc, #120]	; (16728 <ticker_start_op_cb+0x80>)
   166ae:	4d1f      	ldr	r5, [pc, #124]	; (1672c <ticker_start_op_cb+0x84>)
   166b0:	781a      	ldrb	r2, [r3, #0]
   166b2:	782b      	ldrb	r3, [r5, #0]
   166b4:	429a      	cmp	r2, r3
   166b6:	d027      	beq.n	16708 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   166b8:	4a1d      	ldr	r2, [pc, #116]	; (16730 <ticker_start_op_cb+0x88>)
   166ba:	4c1e      	ldr	r4, [pc, #120]	; (16734 <ticker_start_op_cb+0x8c>)
   166bc:	7812      	ldrb	r2, [r2, #0]
   166be:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   166c0:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   166c2:	4291      	cmp	r1, r2
	preempt_start_ack++;
   166c4:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   166c6:	b2d3      	uxtb	r3, r2
   166c8:	d00d      	beq.n	166e6 <ticker_start_op_cb+0x3e>
   166ca:	4a1b      	ldr	r2, [pc, #108]	; (16738 <ticker_start_op_cb+0x90>)
   166cc:	491b      	ldr	r1, [pc, #108]	; (1673c <ticker_start_op_cb+0x94>)
   166ce:	481c      	ldr	r0, [pc, #112]	; (16740 <ticker_start_op_cb+0x98>)
   166d0:	f240 330f 	movw	r3, #783	; 0x30f
   166d4:	f009 f823 	bl	1f71e <printk>
   166d8:	4040      	eors	r0, r0
   166da:	f380 8811 	msr	BASEPRI, r0
   166de:	f04f 0003 	mov.w	r0, #3
   166e2:	df02      	svc	2
	preempt_req++;
   166e4:	7823      	ldrb	r3, [r4, #0]
   166e6:	3301      	adds	r3, #1
   166e8:	7023      	strb	r3, [r4, #0]
}
   166ea:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   166ec:	4a12      	ldr	r2, [pc, #72]	; (16738 <ticker_start_op_cb+0x90>)
   166ee:	4915      	ldr	r1, [pc, #84]	; (16744 <ticker_start_op_cb+0x9c>)
   166f0:	4813      	ldr	r0, [pc, #76]	; (16740 <ticker_start_op_cb+0x98>)
   166f2:	f240 330a 	movw	r3, #778	; 0x30a
   166f6:	f009 f812 	bl	1f71e <printk>
   166fa:	4040      	eors	r0, r0
   166fc:	f380 8811 	msr	BASEPRI, r0
   16700:	f04f 0003 	mov.w	r0, #3
   16704:	df02      	svc	2
   16706:	e7d1      	b.n	166ac <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   16708:	4a0b      	ldr	r2, [pc, #44]	; (16738 <ticker_start_op_cb+0x90>)
   1670a:	490f      	ldr	r1, [pc, #60]	; (16748 <ticker_start_op_cb+0xa0>)
   1670c:	480c      	ldr	r0, [pc, #48]	; (16740 <ticker_start_op_cb+0x98>)
   1670e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   16712:	f009 f804 	bl	1f71e <printk>
   16716:	4040      	eors	r0, r0
   16718:	f380 8811 	msr	BASEPRI, r0
   1671c:	f04f 0003 	mov.w	r0, #3
   16720:	df02      	svc	2
	preempt_start_ack++;
   16722:	782b      	ldrb	r3, [r5, #0]
   16724:	e7c8      	b.n	166b8 <ticker_start_op_cb+0x10>
   16726:	bf00      	nop
   16728:	200060e3 	.word	0x200060e3
   1672c:	200060e2 	.word	0x200060e2
   16730:	200060e0 	.word	0x200060e0
   16734:	200060e1 	.word	0x200060e1
   16738:	00025b20 	.word	0x00025b20
   1673c:	00025bb8 	.word	0x00025bb8
   16740:	000250f0 	.word	0x000250f0
   16744:	00025660 	.word	0x00025660
   16748:	00025b90 	.word	0x00025b90

0001674c <isr_race>:
	radio_status_reset();
   1674c:	f002 be52 	b.w	193f4 <radio_status_reset>

00016750 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   16750:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   16752:	4a18      	ldr	r2, [pc, #96]	; (167b4 <preempt_ticker_cb+0x64>)
   16754:	4c18      	ldr	r4, [pc, #96]	; (167b8 <preempt_ticker_cb+0x68>)
   16756:	7812      	ldrb	r2, [r2, #0]
   16758:	7823      	ldrb	r3, [r4, #0]
   1675a:	429a      	cmp	r2, r3
   1675c:	d01b      	beq.n	16796 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1675e:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   16760:	4b16      	ldr	r3, [pc, #88]	; (167bc <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   16762:	3101      	adds	r1, #1
   16764:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16766:	2200      	movs	r2, #0
	preempt_ack++;
   16768:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1676a:	9903      	ldr	r1, [sp, #12]
   1676c:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1676e:	2001      	movs	r0, #1
   16770:	4611      	mov	r1, r2
   16772:	f7f3 ffc7 	bl	a704 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   16776:	b900      	cbnz	r0, 1677a <preempt_ticker_cb+0x2a>
}
   16778:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1677a:	4a11      	ldr	r2, [pc, #68]	; (167c0 <preempt_ticker_cb+0x70>)
   1677c:	4911      	ldr	r1, [pc, #68]	; (167c4 <preempt_ticker_cb+0x74>)
   1677e:	4812      	ldr	r0, [pc, #72]	; (167c8 <preempt_ticker_cb+0x78>)
   16780:	f240 3376 	movw	r3, #886	; 0x376
   16784:	f008 ffcb 	bl	1f71e <printk>
   16788:	4040      	eors	r0, r0
   1678a:	f380 8811 	msr	BASEPRI, r0
   1678e:	f04f 0003 	mov.w	r0, #3
   16792:	df02      	svc	2
}
   16794:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   16796:	4a0a      	ldr	r2, [pc, #40]	; (167c0 <preempt_ticker_cb+0x70>)
   16798:	490c      	ldr	r1, [pc, #48]	; (167cc <preempt_ticker_cb+0x7c>)
   1679a:	480b      	ldr	r0, [pc, #44]	; (167c8 <preempt_ticker_cb+0x78>)
   1679c:	f44f 735c 	mov.w	r3, #880	; 0x370
   167a0:	f008 ffbd 	bl	1f71e <printk>
   167a4:	4040      	eors	r0, r0
   167a6:	f380 8811 	msr	BASEPRI, r0
   167aa:	f04f 0003 	mov.w	r0, #3
   167ae:	df02      	svc	2
   167b0:	e7d5      	b.n	1675e <preempt_ticker_cb+0xe>
   167b2:	bf00      	nop
   167b4:	200060e1 	.word	0x200060e1
   167b8:	200060e0 	.word	0x200060e0
   167bc:	20000738 	.word	0x20000738
   167c0:	00025b20 	.word	0x00025b20
   167c4:	000253cc 	.word	0x000253cc
   167c8:	000250f0 	.word	0x000250f0
   167cc:	00025bd4 	.word	0x00025bd4

000167d0 <preempt_ticker_stop>:
{
   167d0:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   167d2:	4917      	ldr	r1, [pc, #92]	; (16830 <preempt_ticker_stop+0x60>)
   167d4:	4a17      	ldr	r2, [pc, #92]	; (16834 <preempt_ticker_stop+0x64>)
   167d6:	780b      	ldrb	r3, [r1, #0]
   167d8:	7812      	ldrb	r2, [r2, #0]
   167da:	429a      	cmp	r2, r3
{
   167dc:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   167de:	d122      	bne.n	16826 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   167e0:	4b15      	ldr	r3, [pc, #84]	; (16838 <preempt_ticker_stop+0x68>)
   167e2:	4a16      	ldr	r2, [pc, #88]	; (1683c <preempt_ticker_stop+0x6c>)
   167e4:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   167e6:	7812      	ldrb	r2, [r2, #0]
   167e8:	429a      	cmp	r2, r3
   167ea:	d01c      	beq.n	16826 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   167ec:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   167ee:	4b14      	ldr	r3, [pc, #80]	; (16840 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   167f0:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   167f2:	2200      	movs	r2, #0
	preempt_stop_req++;
   167f4:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   167f6:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   167f8:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   167fa:	4611      	mov	r1, r2
   167fc:	4610      	mov	r0, r2
   167fe:	f7f5 f9e9 	bl	bbd4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16802:	4604      	mov	r4, r0
   16804:	b178      	cbz	r0, 16826 <preempt_ticker_stop+0x56>
   16806:	2802      	cmp	r0, #2
   16808:	d00e      	beq.n	16828 <preempt_ticker_stop+0x58>
   1680a:	4a0e      	ldr	r2, [pc, #56]	; (16844 <preempt_ticker_stop+0x74>)
   1680c:	490e      	ldr	r1, [pc, #56]	; (16848 <preempt_ticker_stop+0x78>)
   1680e:	480f      	ldr	r0, [pc, #60]	; (1684c <preempt_ticker_stop+0x7c>)
   16810:	f240 3362 	movw	r3, #866	; 0x362
   16814:	f008 ff83 	bl	1f71e <printk>
   16818:	4040      	eors	r0, r0
   1681a:	f380 8811 	msr	BASEPRI, r0
   1681e:	f04f 0003 	mov.w	r0, #3
   16822:	df02      	svc	2
   16824:	e000      	b.n	16828 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   16826:	2400      	movs	r4, #0
}
   16828:	4620      	mov	r0, r4
   1682a:	b002      	add	sp, #8
   1682c:	bd10      	pop	{r4, pc}
   1682e:	bf00      	nop
   16830:	200060e5 	.word	0x200060e5
   16834:	200060e4 	.word	0x200060e4
   16838:	200060e0 	.word	0x200060e0
   1683c:	200060e1 	.word	0x200060e1
   16840:	00016651 	.word	0x00016651
   16844:	00025b20 	.word	0x00025b20
   16848:	000254a0 	.word	0x000254a0
   1684c:	000250f0 	.word	0x000250f0

00016850 <preempt_ticker_start>:
{
   16850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   16854:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   16856:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1685a:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1685c:	4b2a      	ldr	r3, [pc, #168]	; (16908 <preempt_ticker_start+0xb8>)
   1685e:	4f2b      	ldr	r7, [pc, #172]	; (1690c <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   16860:	68d6      	ldr	r6, [r2, #12]
{
   16862:	460d      	mov	r5, r1
   16864:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   16866:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   16868:	6890      	ldr	r0, [r2, #8]
   1686a:	6853      	ldr	r3, [r2, #4]
   1686c:	4298      	cmp	r0, r3
   1686e:	bf2c      	ite	cs
   16870:	ebc6 0600 	rsbcs	r6, r6, r0
   16874:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   16878:	783b      	ldrb	r3, [r7, #0]
   1687a:	4299      	cmp	r1, r3
{
   1687c:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1687e:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   16882:	d033      	beq.n	168ec <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   16884:	2c00      	cmp	r4, #0
   16886:	d03a      	beq.n	168fe <preempt_ticker_start+0xae>
   16888:	7f23      	ldrb	r3, [r4, #28]
   1688a:	079b      	lsls	r3, r3, #30
   1688c:	d437      	bmi.n	168fe <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1688e:	f8df a080 	ldr.w	sl, [pc, #128]	; 16910 <preempt_ticker_start+0xc0>
   16892:	f8da 0000 	ldr.w	r0, [sl]
   16896:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1689a:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1689e:	d022      	beq.n	168e6 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   168a0:	f7ff ff96 	bl	167d0 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   168a4:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   168a6:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   168a8:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   168ac:	f043 0302 	orr.w	r3, r3, #2
   168b0:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   168b2:	4620      	mov	r0, r4
   168b4:	69a3      	ldr	r3, [r4, #24]
   168b6:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168b8:	4b16      	ldr	r3, [pc, #88]	; (16914 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   168ba:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168bc:	9600      	str	r6, [sp, #0]
   168be:	e9cd 3507 	strd	r3, r5, [sp, #28]
   168c2:	4b15      	ldr	r3, [pc, #84]	; (16918 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   168c4:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168c8:	2200      	movs	r2, #0
	preempt_start_req++;
   168ca:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168cc:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   168d0:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
   168d6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   168da:	4643      	mov	r3, r8
   168dc:	4611      	mov	r1, r2
   168de:	4610      	mov	r0, r2
	preempt_start_req++;
   168e0:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   168e2:	f7f5 f8ed 	bl	bac0 <ticker_start>
}
   168e6:	b00a      	add	sp, #40	; 0x28
   168e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   168ec:	4b0b      	ldr	r3, [pc, #44]	; (1691c <preempt_ticker_start+0xcc>)
   168ee:	4a0c      	ldr	r2, [pc, #48]	; (16920 <preempt_ticker_start+0xd0>)
   168f0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   168f2:	7812      	ldrb	r2, [r2, #0]
   168f4:	429a      	cmp	r2, r3
   168f6:	d1c5      	bne.n	16884 <preempt_ticker_start+0x34>
   168f8:	f8df a014 	ldr.w	sl, [pc, #20]	; 16910 <preempt_ticker_start+0xc0>
   168fc:	e7dc      	b.n	168b8 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   168fe:	2000      	movs	r0, #0
}
   16900:	b00a      	add	sp, #40	; 0x28
   16902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16906:	bf00      	nop
   16908:	200060e2 	.word	0x200060e2
   1690c:	200060e3 	.word	0x200060e3
   16910:	200050f0 	.word	0x200050f0
   16914:	000166a9 	.word	0x000166a9
   16918:	00016751 	.word	0x00016751
   1691c:	200060e0 	.word	0x200060e0
   16920:	200060e1 	.word	0x200060e1

00016924 <preempt>:

static void preempt(void *param)
{
   16924:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   16926:	4e4b      	ldr	r6, [pc, #300]	; (16a54 <preempt+0x130>)
   16928:	68b3      	ldr	r3, [r6, #8]
{
   1692a:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1692c:	b1b3      	cbz	r3, 1695c <preempt+0x38>
   1692e:	6833      	ldr	r3, [r6, #0]
   16930:	b1a3      	cbz	r3, 1695c <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   16932:	23ff      	movs	r3, #255	; 0xff
   16934:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   16936:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1693a:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1693e:	f7f7 fe8f 	bl	e660 <ull_prepare_dequeue_iter>
	if (!next) {
   16942:	4601      	mov	r1, r0
   16944:	b150      	cbz	r0, 1695c <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   16946:	7f0b      	ldrb	r3, [r1, #28]
   16948:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1694c:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   16950:	d006      	beq.n	16960 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   16952:	f7f7 fe85 	bl	e660 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   16956:	4601      	mov	r1, r0
   16958:	2800      	cmp	r0, #0
   1695a:	d1f4      	bne.n	16946 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1695c:	b009      	add	sp, #36	; 0x24
   1695e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   16960:	428d      	cmp	r5, r1
   16962:	d126      	bne.n	169b2 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   16964:	6873      	ldr	r3, [r6, #4]
   16966:	6831      	ldr	r1, [r6, #0]
   16968:	68e8      	ldr	r0, [r5, #12]
   1696a:	aa03      	add	r2, sp, #12
   1696c:	4798      	blx	r3
	if (!err) {
   1696e:	4607      	mov	r7, r0
   16970:	b1b0      	cbz	r0, 169a0 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   16972:	68b3      	ldr	r3, [r6, #8]
   16974:	6831      	ldr	r1, [r6, #0]
   16976:	4620      	mov	r0, r4
   16978:	4798      	blx	r3
	if (err == -EAGAIN) {
   1697a:	f117 0f0b 	cmn.w	r7, #11
   1697e:	d02c      	beq.n	169da <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   16980:	378c      	adds	r7, #140	; 0x8c
   16982:	d0eb      	beq.n	1695c <preempt+0x38>
   16984:	4a34      	ldr	r2, [pc, #208]	; (16a58 <preempt+0x134>)
   16986:	4935      	ldr	r1, [pc, #212]	; (16a5c <preempt+0x138>)
   16988:	4835      	ldr	r0, [pc, #212]	; (16a60 <preempt+0x13c>)
   1698a:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1698e:	f008 fec6 	bl	1f71e <printk>
   16992:	4040      	eors	r0, r0
   16994:	f380 8811 	msr	BASEPRI, r0
   16998:	f04f 0003 	mov.w	r0, #3
   1699c:	df02      	svc	2
   1699e:	e7dd      	b.n	1695c <preempt+0x38>
		next->is_aborted = 1;
   169a0:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   169a2:	69aa      	ldr	r2, [r5, #24]
   169a4:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   169a6:	f043 0302 	orr.w	r3, r3, #2
   169aa:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   169ac:	4628      	mov	r0, r5
   169ae:	4790      	blx	r2
		return;
   169b0:	e7d4      	b.n	1695c <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   169b2:	4620      	mov	r0, r4
   169b4:	f7ff ff4c 	bl	16850 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   169b8:	f030 0302 	bics.w	r3, r0, #2
   169bc:	d0ce      	beq.n	1695c <preempt+0x38>
   169be:	4a26      	ldr	r2, [pc, #152]	; (16a58 <preempt+0x134>)
   169c0:	4928      	ldr	r1, [pc, #160]	; (16a64 <preempt+0x140>)
   169c2:	4827      	ldr	r0, [pc, #156]	; (16a60 <preempt+0x13c>)
   169c4:	f44f 7367 	mov.w	r3, #924	; 0x39c
   169c8:	f008 fea9 	bl	1f71e <printk>
   169cc:	4040      	eors	r0, r0
   169ce:	f380 8811 	msr	BASEPRI, r0
   169d2:	f04f 0003 	mov.w	r0, #3
   169d6:	df02      	svc	2
   169d8:	e7c0      	b.n	1695c <preempt+0x38>
		iter_idx = UINT8_MAX;
   169da:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   169dc:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   169e0:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   169e4:	f7f7 fe3c 	bl	e660 <ull_prepare_dequeue_iter>
		while (iter) {
   169e8:	b928      	cbnz	r0, 169f6 <preempt+0xd2>
   169ea:	e013      	b.n	16a14 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   169ec:	f10d 000b 	add.w	r0, sp, #11
   169f0:	f7f7 fe36 	bl	e660 <ull_prepare_dequeue_iter>
		while (iter) {
   169f4:	b170      	cbz	r0, 16a14 <preempt+0xf0>
			if (!iter->is_aborted &&
   169f6:	7f03      	ldrb	r3, [r0, #28]
   169f8:	079a      	lsls	r2, r3, #30
   169fa:	d4f7      	bmi.n	169ec <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   169fc:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   169fe:	6831      	ldr	r1, [r6, #0]
   16a00:	4291      	cmp	r1, r2
   16a02:	d1f3      	bne.n	169ec <preempt+0xc8>
				iter->is_aborted = 1;
   16a04:	f043 0302 	orr.w	r3, r3, #2
   16a08:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   16a0a:	6983      	ldr	r3, [r0, #24]
   16a0c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   16a0e:	f88d 400b 	strb.w	r4, [sp, #11]
   16a12:	e7eb      	b.n	169ec <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   16a14:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   16a16:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   16a18:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16a1a:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   16a1c:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16a20:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   16a22:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   16a24:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16a26:	9b03      	ldr	r3, [sp, #12]
   16a28:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   16a2c:	aa04      	add	r2, sp, #16
   16a2e:	f7f7 fdd9 	bl	e5e4 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   16a32:	2800      	cmp	r0, #0
   16a34:	d192      	bne.n	1695c <preempt+0x38>
   16a36:	4a08      	ldr	r2, [pc, #32]	; (16a58 <preempt+0x134>)
   16a38:	490b      	ldr	r1, [pc, #44]	; (16a68 <preempt+0x144>)
   16a3a:	4809      	ldr	r0, [pc, #36]	; (16a60 <preempt+0x13c>)
   16a3c:	f240 33ce 	movw	r3, #974	; 0x3ce
   16a40:	f008 fe6d 	bl	1f71e <printk>
   16a44:	4040      	eors	r0, r0
   16a46:	f380 8811 	msr	BASEPRI, r0
   16a4a:	f04f 0003 	mov.w	r0, #3
   16a4e:	df02      	svc	2
   16a50:	e784      	b.n	1695c <preempt+0x38>
   16a52:	bf00      	nop
   16a54:	200050dc 	.word	0x200050dc
   16a58:	00025b20 	.word	0x00025b20
   16a5c:	00025bf8 	.word	0x00025bf8
   16a60:	000250f0 	.word	0x000250f0
   16a64:	000254a0 	.word	0x000254a0
   16a68:	00025bf0 	.word	0x00025bf0

00016a6c <lll_init>:
{
   16a6c:	b510      	push	{r4, lr}
   16a6e:	4816      	ldr	r0, [pc, #88]	; (16ac8 <lll_init+0x5c>)
   16a70:	f007 fa44 	bl	1defc <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   16a74:	4b15      	ldr	r3, [pc, #84]	; (16acc <lll_init+0x60>)
   16a76:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   16a78:	b310      	cbz	r0, 16ac0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   16a7a:	4b15      	ldr	r3, [pc, #84]	; (16ad0 <lll_init+0x64>)
   16a7c:	2400      	movs	r4, #0
   16a7e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   16a80:	f000 fb0a 	bl	17098 <lll_clock_init>
	if (err < 0) {
   16a84:	2800      	cmp	r0, #0
   16a86:	db1a      	blt.n	16abe <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   16a88:	4621      	mov	r1, r4
   16a8a:	2001      	movs	r0, #1
   16a8c:	4622      	mov	r2, r4
   16a8e:	f7ef f9a7 	bl	5de0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   16a92:	4622      	mov	r2, r4
   16a94:	200b      	movs	r0, #11
   16a96:	2101      	movs	r1, #1
   16a98:	f7ef f9a2 	bl	5de0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   16a9c:	4622      	mov	r2, r4
   16a9e:	4621      	mov	r1, r4
   16aa0:	2018      	movs	r0, #24
   16aa2:	f7ef f99d 	bl	5de0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   16aa6:	2001      	movs	r0, #1
   16aa8:	f7ef f968 	bl	5d7c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   16aac:	200b      	movs	r0, #11
   16aae:	f7ef f965 	bl	5d7c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   16ab2:	2018      	movs	r0, #24
   16ab4:	f7ef f962 	bl	5d7c <arch_irq_enable>
	radio_setup();
   16ab8:	f002 fbac 	bl	19214 <radio_setup>
	return 0;
   16abc:	4620      	mov	r0, r4
}
   16abe:	bd10      	pop	{r4, pc}
		return -ENODEV;
   16ac0:	f06f 0012 	mvn.w	r0, #18
}
   16ac4:	bd10      	pop	{r4, pc}
   16ac6:	bf00      	nop
   16ac8:	00025c04 	.word	0x00025c04
   16acc:	200050d8 	.word	0x200050d8
   16ad0:	200050dc 	.word	0x200050dc

00016ad4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   16ad4:	4a05      	ldr	r2, [pc, #20]	; (16aec <lll_csrand_get+0x18>)
{
   16ad6:	b410      	push	{r4}
   16ad8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   16ada:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   16adc:	6884      	ldr	r4, [r0, #8]
   16ade:	6824      	ldr	r4, [r4, #0]
   16ae0:	b28a      	uxth	r2, r1
   16ae2:	4619      	mov	r1, r3
   16ae4:	4623      	mov	r3, r4
}
   16ae6:	bc10      	pop	{r4}
   16ae8:	4718      	bx	r3
   16aea:	bf00      	nop
   16aec:	200050d8 	.word	0x200050d8

00016af0 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   16af0:	4b08      	ldr	r3, [pc, #32]	; (16b14 <lll_csrand_isr_get+0x24>)
{
   16af2:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   16af4:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   16af6:	68ab      	ldr	r3, [r5, #8]
   16af8:	685c      	ldr	r4, [r3, #4]
   16afa:	b13c      	cbz	r4, 16b0c <lll_csrand_isr_get+0x1c>
   16afc:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   16afe:	46a4      	mov	ip, r4
   16b00:	4601      	mov	r1, r0
   16b02:	b292      	uxth	r2, r2
   16b04:	4628      	mov	r0, r5
   16b06:	2300      	movs	r3, #0
}
   16b08:	bc30      	pop	{r4, r5}
   16b0a:	4760      	bx	ip
   16b0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16b10:	bc30      	pop	{r4, r5}
   16b12:	4770      	bx	lr
   16b14:	200050d8 	.word	0x200050d8

00016b18 <lll_rand_isr_get>:
   16b18:	4b08      	ldr	r3, [pc, #32]	; (16b3c <lll_rand_isr_get+0x24>)
   16b1a:	b430      	push	{r4, r5}
   16b1c:	681d      	ldr	r5, [r3, #0]
   16b1e:	68ab      	ldr	r3, [r5, #8]
   16b20:	685c      	ldr	r4, [r3, #4]
   16b22:	b13c      	cbz	r4, 16b34 <lll_rand_isr_get+0x1c>
   16b24:	460a      	mov	r2, r1
   16b26:	46a4      	mov	ip, r4
   16b28:	4601      	mov	r1, r0
   16b2a:	b292      	uxth	r2, r2
   16b2c:	4628      	mov	r0, r5
   16b2e:	2300      	movs	r3, #0
   16b30:	bc30      	pop	{r4, r5}
   16b32:	4760      	bx	ip
   16b34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16b38:	bc30      	pop	{r4, r5}
   16b3a:	4770      	bx	lr
   16b3c:	200050d8 	.word	0x200050d8

00016b40 <lll_reset>:
}
   16b40:	2000      	movs	r0, #0
   16b42:	4770      	bx	lr

00016b44 <lll_disable>:
{
   16b44:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   16b46:	4604      	mov	r4, r0
{
   16b48:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   16b4a:	2800      	cmp	r0, #0
   16b4c:	d032      	beq.n	16bb4 <lll_disable+0x70>
   16b4e:	4b25      	ldr	r3, [pc, #148]	; (16be4 <lll_disable+0xa0>)
   16b50:	681a      	ldr	r2, [r3, #0]
   16b52:	4282      	cmp	r2, r0
   16b54:	d028      	beq.n	16ba8 <lll_disable+0x64>
		idx = UINT8_MAX;
   16b56:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   16b58:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   16b5c:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   16b60:	f7f7 fd7e 	bl	e660 <ull_prepare_dequeue_iter>
		while (next) {
   16b64:	b940      	cbnz	r0, 16b78 <lll_disable+0x34>
   16b66:	e01b      	b.n	16ba0 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   16b68:	68c3      	ldr	r3, [r0, #12]
   16b6a:	42a3      	cmp	r3, r4
   16b6c:	d01a      	beq.n	16ba4 <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   16b6e:	f10d 0007 	add.w	r0, sp, #7
   16b72:	f7f7 fd75 	bl	e660 <ull_prepare_dequeue_iter>
		while (next) {
   16b76:	b198      	cbz	r0, 16ba0 <lll_disable+0x5c>
			if (!next->is_aborted &&
   16b78:	7f03      	ldrb	r3, [r0, #28]
   16b7a:	079b      	lsls	r3, r3, #30
   16b7c:	d4f7      	bmi.n	16b6e <lll_disable+0x2a>
   16b7e:	2c00      	cmp	r4, #0
   16b80:	d1f2      	bne.n	16b68 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   16b82:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   16b84:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   16b86:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   16b88:	f043 0302 	orr.w	r3, r3, #2
   16b8c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   16b8e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   16b90:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   16b94:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   16b98:	f7f7 fd62 	bl	e660 <ull_prepare_dequeue_iter>
		while (next) {
   16b9c:	2800      	cmp	r0, #0
   16b9e:	d1eb      	bne.n	16b78 <lll_disable+0x34>
}
   16ba0:	b003      	add	sp, #12
   16ba2:	bd30      	pop	{r4, r5, pc}
   16ba4:	4621      	mov	r1, r4
   16ba6:	e7ed      	b.n	16b84 <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   16ba8:	689b      	ldr	r3, [r3, #8]
   16baa:	b16b      	cbz	r3, 16bc8 <lll_disable+0x84>
   16bac:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   16bae:	2000      	movs	r0, #0
   16bb0:	4798      	blx	r3
   16bb2:	e7d0      	b.n	16b56 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   16bb4:	4a0b      	ldr	r2, [pc, #44]	; (16be4 <lll_disable+0xa0>)
   16bb6:	6893      	ldr	r3, [r2, #8]
   16bb8:	2b00      	cmp	r3, #0
   16bba:	d0cc      	beq.n	16b56 <lll_disable+0x12>
   16bbc:	6811      	ldr	r1, [r2, #0]
   16bbe:	2900      	cmp	r1, #0
   16bc0:	d0c9      	beq.n	16b56 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   16bc2:	2000      	movs	r0, #0
   16bc4:	4798      	blx	r3
   16bc6:	e7c6      	b.n	16b56 <lll_disable+0x12>
			LL_ASSERT(!param);
   16bc8:	4a07      	ldr	r2, [pc, #28]	; (16be8 <lll_disable+0xa4>)
   16bca:	4908      	ldr	r1, [pc, #32]	; (16bec <lll_disable+0xa8>)
   16bcc:	4808      	ldr	r0, [pc, #32]	; (16bf0 <lll_disable+0xac>)
   16bce:	23fd      	movs	r3, #253	; 0xfd
   16bd0:	f008 fda5 	bl	1f71e <printk>
   16bd4:	4040      	eors	r0, r0
   16bd6:	f380 8811 	msr	BASEPRI, r0
   16bda:	f04f 0003 	mov.w	r0, #3
   16bde:	df02      	svc	2
   16be0:	e7b9      	b.n	16b56 <lll_disable+0x12>
   16be2:	bf00      	nop
   16be4:	200050dc 	.word	0x200050dc
   16be8:	00025b20 	.word	0x00025b20
   16bec:	00025c08 	.word	0x00025c08
   16bf0:	000250f0 	.word	0x000250f0

00016bf4 <lll_prepare_done>:
}
   16bf4:	2000      	movs	r0, #0
   16bf6:	4770      	bx	lr

00016bf8 <lll_done>:
{
   16bf8:	b538      	push	{r3, r4, r5, lr}
   16bfa:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   16bfc:	f7f7 fd22 	bl	e644 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   16c00:	b154      	cbz	r4, 16c18 <lll_done+0x20>
   16c02:	b310      	cbz	r0, 16c4a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   16c04:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   16c06:	2000      	movs	r0, #0
   16c08:	f7f7 fd4a 	bl	e6a0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   16c0c:	4620      	mov	r0, r4
   16c0e:	f7f7 fdab 	bl	e768 <ull_event_done>
	LL_ASSERT(evdone);
   16c12:	b158      	cbz	r0, 16c2c <lll_done+0x34>
}
   16c14:	2000      	movs	r0, #0
   16c16:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   16c18:	4d1a      	ldr	r5, [pc, #104]	; (16c84 <lll_done+0x8c>)
   16c1a:	68ab      	ldr	r3, [r5, #8]
   16c1c:	b31b      	cbz	r3, 16c66 <lll_done+0x6e>
		param = event.curr.param;
   16c1e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   16c20:	2300      	movs	r3, #0
   16c22:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   16c24:	602b      	str	r3, [r5, #0]
		if (param) {
   16c26:	2c00      	cmp	r4, #0
   16c28:	d1ec      	bne.n	16c04 <lll_done+0xc>
   16c2a:	e7ec      	b.n	16c06 <lll_done+0xe>
	LL_ASSERT(evdone);
   16c2c:	4a16      	ldr	r2, [pc, #88]	; (16c88 <lll_done+0x90>)
   16c2e:	4917      	ldr	r1, [pc, #92]	; (16c8c <lll_done+0x94>)
   16c30:	4817      	ldr	r0, [pc, #92]	; (16c90 <lll_done+0x98>)
   16c32:	f240 136d 	movw	r3, #365	; 0x16d
   16c36:	f008 fd72 	bl	1f71e <printk>
   16c3a:	4040      	eors	r0, r0
   16c3c:	f380 8811 	msr	BASEPRI, r0
   16c40:	f04f 0003 	mov.w	r0, #3
   16c44:	df02      	svc	2
}
   16c46:	2000      	movs	r0, #0
   16c48:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   16c4a:	4a0f      	ldr	r2, [pc, #60]	; (16c88 <lll_done+0x90>)
   16c4c:	4911      	ldr	r1, [pc, #68]	; (16c94 <lll_done+0x9c>)
   16c4e:	4810      	ldr	r0, [pc, #64]	; (16c90 <lll_done+0x98>)
   16c50:	f240 1337 	movw	r3, #311	; 0x137
   16c54:	f008 fd63 	bl	1f71e <printk>
   16c58:	4040      	eors	r0, r0
   16c5a:	f380 8811 	msr	BASEPRI, r0
   16c5e:	f04f 0003 	mov.w	r0, #3
   16c62:	df02      	svc	2
   16c64:	e7ce      	b.n	16c04 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   16c66:	4a08      	ldr	r2, [pc, #32]	; (16c88 <lll_done+0x90>)
   16c68:	490b      	ldr	r1, [pc, #44]	; (16c98 <lll_done+0xa0>)
   16c6a:	4809      	ldr	r0, [pc, #36]	; (16c90 <lll_done+0x98>)
   16c6c:	f240 133d 	movw	r3, #317	; 0x13d
   16c70:	f008 fd55 	bl	1f71e <printk>
   16c74:	4040      	eors	r0, r0
   16c76:	f380 8811 	msr	BASEPRI, r0
   16c7a:	f04f 0003 	mov.w	r0, #3
   16c7e:	df02      	svc	2
   16c80:	e7cd      	b.n	16c1e <lll_done+0x26>
   16c82:	bf00      	nop
   16c84:	200050dc 	.word	0x200050dc
   16c88:	00025b20 	.word	0x00025b20
   16c8c:	00025c34 	.word	0x00025c34
   16c90:	000250f0 	.word	0x000250f0
   16c94:	00025c10 	.word	0x00025c10
   16c98:	00025c20 	.word	0x00025c20

00016c9c <lll_is_done>:
	*is_resume = (param != event.curr.param);
   16c9c:	4a05      	ldr	r2, [pc, #20]	; (16cb4 <lll_is_done+0x18>)
   16c9e:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   16ca0:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   16ca2:	1a1b      	subs	r3, r3, r0
   16ca4:	bf18      	it	ne
   16ca6:	2301      	movne	r3, #1
}
   16ca8:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   16cac:	700b      	strb	r3, [r1, #0]
}
   16cae:	0940      	lsrs	r0, r0, #5
   16cb0:	4770      	bx	lr
   16cb2:	bf00      	nop
   16cb4:	200050dc 	.word	0x200050dc

00016cb8 <lll_is_abort_cb>:
}
   16cb8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   16cbc:	4770      	bx	lr
   16cbe:	bf00      	nop

00016cc0 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   16cc0:	6883      	ldr	r3, [r0, #8]
   16cc2:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   16cc4:	bfb8      	it	lt
   16cc6:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   16cc8:	6840      	ldr	r0, [r0, #4]
   16cca:	4298      	cmp	r0, r3
   16ccc:	bf38      	it	cc
   16cce:	4618      	movcc	r0, r3
}
   16cd0:	4770      	bx	lr
   16cd2:	bf00      	nop

00016cd4 <lll_preempt_calc>:
{
   16cd4:	b510      	push	{r4, lr}
   16cd6:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   16cd8:	f7f5 f81c 	bl	bd14 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   16cdc:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   16cde:	0203      	lsls	r3, r0, #8
   16ce0:	d405      	bmi.n	16cee <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   16ce2:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   16ce4:	2809      	cmp	r0, #9
   16ce6:	bf94      	ite	ls
   16ce8:	2000      	movls	r0, #0
   16cea:	2001      	movhi	r0, #1
}
   16cec:	bd10      	pop	{r4, pc}
		return 0;
   16cee:	2000      	movs	r0, #0
}
   16cf0:	bd10      	pop	{r4, pc}
   16cf2:	bf00      	nop

00016cf4 <lll_chan_set>:
	switch (chan) {
   16cf4:	2826      	cmp	r0, #38	; 0x26
{
   16cf6:	b510      	push	{r4, lr}
   16cf8:	4604      	mov	r4, r0
	switch (chan) {
   16cfa:	d01c      	beq.n	16d36 <lll_chan_set+0x42>
   16cfc:	2827      	cmp	r0, #39	; 0x27
   16cfe:	d012      	beq.n	16d26 <lll_chan_set+0x32>
   16d00:	2825      	cmp	r0, #37	; 0x25
   16d02:	d008      	beq.n	16d16 <lll_chan_set+0x22>
		if (chan < 11) {
   16d04:	280a      	cmp	r0, #10
   16d06:	d91e      	bls.n	16d46 <lll_chan_set+0x52>
		} else if (chan < 40) {
   16d08:	2827      	cmp	r0, #39	; 0x27
   16d0a:	d821      	bhi.n	16d50 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   16d0c:	3003      	adds	r0, #3
   16d0e:	0040      	lsls	r0, r0, #1
   16d10:	f002 fadc 	bl	192cc <radio_freq_chan_set>
   16d14:	e002      	b.n	16d1c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   16d16:	2002      	movs	r0, #2
   16d18:	f002 fad8 	bl	192cc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16d1c:	4620      	mov	r0, r4
}
   16d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16d22:	f002 bad9 	b.w	192d8 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   16d26:	2050      	movs	r0, #80	; 0x50
   16d28:	f002 fad0 	bl	192cc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16d2c:	4620      	mov	r0, r4
}
   16d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16d32:	f002 bad1 	b.w	192d8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   16d36:	201a      	movs	r0, #26
   16d38:	f002 fac8 	bl	192cc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16d3c:	4620      	mov	r0, r4
}
   16d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16d42:	f002 bac9 	b.w	192d8 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   16d46:	3002      	adds	r0, #2
   16d48:	0040      	lsls	r0, r0, #1
   16d4a:	f002 fabf 	bl	192cc <radio_freq_chan_set>
   16d4e:	e7e5      	b.n	16d1c <lll_chan_set+0x28>
			LL_ASSERT(0);
   16d50:	4a06      	ldr	r2, [pc, #24]	; (16d6c <lll_chan_set+0x78>)
   16d52:	4907      	ldr	r1, [pc, #28]	; (16d70 <lll_chan_set+0x7c>)
   16d54:	4807      	ldr	r0, [pc, #28]	; (16d74 <lll_chan_set+0x80>)
   16d56:	f240 13df 	movw	r3, #479	; 0x1df
   16d5a:	f008 fce0 	bl	1f71e <printk>
   16d5e:	4040      	eors	r0, r0
   16d60:	f380 8811 	msr	BASEPRI, r0
   16d64:	f04f 0003 	mov.w	r0, #3
   16d68:	df02      	svc	2
   16d6a:	e7d7      	b.n	16d1c <lll_chan_set+0x28>
   16d6c:	00025b20 	.word	0x00025b20
   16d70:	00025150 	.word	0x00025150
   16d74:	000250f0 	.word	0x000250f0

00016d78 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   16d78:	f002 bb0c 	b.w	19394 <radio_tx_ready_delay_get>

00016d7c <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   16d7c:	f002 bb12 	b.w	193a4 <radio_rx_ready_delay_get>

00016d80 <lll_isr_tx_status_reset>:
{
   16d80:	b508      	push	{r3, lr}
	radio_status_reset();
   16d82:	f002 fb37 	bl	193f4 <radio_status_reset>
}
   16d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   16d8a:	f002 bc97 	b.w	196bc <radio_tmr_status_reset>
   16d8e:	bf00      	nop

00016d90 <lll_isr_rx_status_reset>:
{
   16d90:	b508      	push	{r3, lr}
	radio_status_reset();
   16d92:	f002 fb2f 	bl	193f4 <radio_status_reset>
	radio_tmr_status_reset();
   16d96:	f002 fc91 	bl	196bc <radio_tmr_status_reset>
}
   16d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   16d9e:	f002 bc39 	b.w	19614 <radio_rssi_status_reset>
   16da2:	bf00      	nop

00016da4 <lll_isr_status_reset>:
{
   16da4:	b508      	push	{r3, lr}
	radio_status_reset();
   16da6:	f002 fb25 	bl	193f4 <radio_status_reset>
	radio_tmr_status_reset();
   16daa:	f002 fc87 	bl	196bc <radio_tmr_status_reset>
	radio_filter_status_reset();
   16dae:	f002 fc6d 	bl	1968c <radio_filter_status_reset>
	radio_ar_status_reset();
   16db2:	f002 fe7f 	bl	19ab4 <radio_ar_status_reset>
}
   16db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   16dba:	f002 bc2b 	b.w	19614 <radio_rssi_status_reset>
   16dbe:	bf00      	nop

00016dc0 <lll_isr_cleanup>:
{
   16dc0:	b508      	push	{r3, lr}
   16dc2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   16dc4:	4815      	ldr	r0, [pc, #84]	; (16e1c <lll_isr_cleanup+0x5c>)
   16dc6:	f002 fa05 	bl	191d4 <radio_isr_set>
	if (!radio_is_idle()) {
   16dca:	f002 fb33 	bl	19434 <radio_is_idle>
   16dce:	b150      	cbz	r0, 16de6 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   16dd0:	f002 fd4a 	bl	19868 <radio_tmr_stop>
	err = lll_hfclock_off();
   16dd4:	f000 f9a4 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16dd8:	2800      	cmp	r0, #0
   16dda:	db0c      	blt.n	16df6 <lll_isr_cleanup+0x36>
}
   16ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16de0:	2000      	movs	r0, #0
   16de2:	f7ff bf09 	b.w	16bf8 <lll_done>
		radio_disable();
   16de6:	f002 faf1 	bl	193cc <radio_disable>
	radio_tmr_stop();
   16dea:	f002 fd3d 	bl	19868 <radio_tmr_stop>
	err = lll_hfclock_off();
   16dee:	f000 f997 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16df2:	2800      	cmp	r0, #0
   16df4:	daf2      	bge.n	16ddc <lll_isr_cleanup+0x1c>
   16df6:	4a0a      	ldr	r2, [pc, #40]	; (16e20 <lll_isr_cleanup+0x60>)
   16df8:	490a      	ldr	r1, [pc, #40]	; (16e24 <lll_isr_cleanup+0x64>)
   16dfa:	480b      	ldr	r0, [pc, #44]	; (16e28 <lll_isr_cleanup+0x68>)
   16dfc:	f240 2342 	movw	r3, #578	; 0x242
   16e00:	f008 fc8d 	bl	1f71e <printk>
   16e04:	4040      	eors	r0, r0
   16e06:	f380 8811 	msr	BASEPRI, r0
   16e0a:	f04f 0003 	mov.w	r0, #3
   16e0e:	df02      	svc	2
	lll_done(NULL);
   16e10:	2000      	movs	r0, #0
}
   16e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16e16:	f7ff beef 	b.w	16bf8 <lll_done>
   16e1a:	bf00      	nop
   16e1c:	0001674d 	.word	0x0001674d
   16e20:	00025b20 	.word	0x00025b20
   16e24:	00025c3c 	.word	0x00025c3c
   16e28:	000250f0 	.word	0x000250f0

00016e2c <lll_isr_abort>:
{
   16e2c:	b510      	push	{r4, lr}
   16e2e:	4604      	mov	r4, r0
	radio_status_reset();
   16e30:	f002 fae0 	bl	193f4 <radio_status_reset>
	radio_tmr_status_reset();
   16e34:	f002 fc42 	bl	196bc <radio_tmr_status_reset>
	radio_filter_status_reset();
   16e38:	f002 fc28 	bl	1968c <radio_filter_status_reset>
	radio_ar_status_reset();
   16e3c:	f002 fe3a 	bl	19ab4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   16e40:	f002 fbe8 	bl	19614 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   16e44:	4620      	mov	r0, r4
}
   16e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   16e4a:	f7ff bfb9 	b.w	16dc0 <lll_isr_cleanup>
   16e4e:	bf00      	nop

00016e50 <lll_isr_early_abort>:
{
   16e50:	b508      	push	{r3, lr}
   16e52:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   16e54:	4813      	ldr	r0, [pc, #76]	; (16ea4 <lll_isr_early_abort+0x54>)
   16e56:	f002 f9bd 	bl	191d4 <radio_isr_set>
	if (!radio_is_idle()) {
   16e5a:	f002 faeb 	bl	19434 <radio_is_idle>
   16e5e:	b140      	cbz	r0, 16e72 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   16e60:	f000 f95e 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16e64:	2800      	cmp	r0, #0
   16e66:	db0a      	blt.n	16e7e <lll_isr_early_abort+0x2e>
}
   16e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16e6c:	2000      	movs	r0, #0
   16e6e:	f7ff bec3 	b.w	16bf8 <lll_done>
		radio_disable();
   16e72:	f002 faab 	bl	193cc <radio_disable>
	err = lll_hfclock_off();
   16e76:	f000 f953 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16e7a:	2800      	cmp	r0, #0
   16e7c:	daf4      	bge.n	16e68 <lll_isr_early_abort+0x18>
   16e7e:	4a0a      	ldr	r2, [pc, #40]	; (16ea8 <lll_isr_early_abort+0x58>)
   16e80:	490a      	ldr	r1, [pc, #40]	; (16eac <lll_isr_early_abort+0x5c>)
   16e82:	480b      	ldr	r0, [pc, #44]	; (16eb0 <lll_isr_early_abort+0x60>)
   16e84:	f240 2351 	movw	r3, #593	; 0x251
   16e88:	f008 fc49 	bl	1f71e <printk>
   16e8c:	4040      	eors	r0, r0
   16e8e:	f380 8811 	msr	BASEPRI, r0
   16e92:	f04f 0003 	mov.w	r0, #3
   16e96:	df02      	svc	2
	lll_done(NULL);
   16e98:	2000      	movs	r0, #0
}
   16e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   16e9e:	f7ff beab 	b.w	16bf8 <lll_done>
   16ea2:	bf00      	nop
   16ea4:	0001674d 	.word	0x0001674d
   16ea8:	00025b20 	.word	0x00025b20
   16eac:	00025c3c 	.word	0x00025c3c
   16eb0:	000250f0 	.word	0x000250f0

00016eb4 <lll_prepare_resolve>:
{
   16eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eb8:	b084      	sub	sp, #16
   16eba:	4606      	mov	r6, r0
   16ebc:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   16ebe:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   16ec2:	23ff      	movs	r3, #255	; 0xff
{
   16ec4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   16ec8:	f88d 300f 	strb.w	r3, [sp, #15]
{
   16ecc:	460f      	mov	r7, r1
   16ece:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   16ed0:	f7f7 fbc6 	bl	e660 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   16ed4:	4604      	mov	r4, r0
   16ed6:	b920      	cbnz	r0, 16ee2 <lll_prepare_resolve+0x2e>
   16ed8:	e032      	b.n	16f40 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   16eda:	f7f7 fbc1 	bl	e660 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   16ede:	4604      	mov	r4, r0
   16ee0:	b370      	cbz	r0, 16f40 <lll_prepare_resolve+0x8c>
   16ee2:	f894 c01c 	ldrb.w	ip, [r4, #28]
   16ee6:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   16eea:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   16eee:	d1f4      	bne.n	16eda <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   16ef0:	f8df a130 	ldr.w	sl, [pc, #304]	; 17024 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   16ef4:	f8da 3008 	ldr.w	r3, [sl, #8]
   16ef8:	bb4b      	cbnz	r3, 16f4e <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   16efa:	f1b9 0f00 	cmp.w	r9, #0
   16efe:	d048      	beq.n	16f92 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   16f00:	f8cd 9000 	str.w	r9, [sp]
   16f04:	4643      	mov	r3, r8
   16f06:	462a      	mov	r2, r5
   16f08:	4639      	mov	r1, r7
   16f0a:	4630      	mov	r0, r6
   16f0c:	f7f7 fb6a 	bl	e5e4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   16f10:	b980      	cbnz	r0, 16f34 <lll_prepare_resolve+0x80>
   16f12:	4a45      	ldr	r2, [pc, #276]	; (17028 <lll_prepare_resolve+0x174>)
   16f14:	4945      	ldr	r1, [pc, #276]	; (1702c <lll_prepare_resolve+0x178>)
   16f16:	4846      	ldr	r0, [pc, #280]	; (17030 <lll_prepare_resolve+0x17c>)
   16f18:	f240 238d 	movw	r3, #653	; 0x28d
   16f1c:	f008 fbff 	bl	1f71e <printk>
   16f20:	4040      	eors	r0, r0
   16f22:	f380 8811 	msr	BASEPRI, r0
   16f26:	f04f 0003 	mov.w	r0, #3
   16f2a:	df02      	svc	2
   16f2c:	2000      	movs	r0, #0
		if (is_resume) {
   16f2e:	f1b9 0f00 	cmp.w	r9, #0
   16f32:	d019      	beq.n	16f68 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   16f34:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   16f38:	4620      	mov	r0, r4
   16f3a:	b004      	add	sp, #16
   16f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   16f40:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 17024 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   16f44:	f8da 3008 	ldr.w	r3, [sl, #8]
   16f48:	2b00      	cmp	r3, #0
   16f4a:	d031      	beq.n	16fb0 <lll_prepare_resolve+0xfc>
   16f4c:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   16f4e:	f8cd 9000 	str.w	r9, [sp]
   16f52:	4643      	mov	r3, r8
   16f54:	462a      	mov	r2, r5
   16f56:	4639      	mov	r1, r7
   16f58:	4630      	mov	r0, r6
   16f5a:	f7f7 fb43 	bl	e5e4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   16f5e:	2800      	cmp	r0, #0
   16f60:	d0d7      	beq.n	16f12 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   16f62:	f1b9 0f00 	cmp.w	r9, #0
   16f66:	d1e5      	bne.n	16f34 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   16f68:	4601      	mov	r1, r0
   16f6a:	4620      	mov	r0, r4
   16f6c:	f7ff fc70 	bl	16850 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16f70:	f030 0302 	bics.w	r3, r0, #2
   16f74:	d0de      	beq.n	16f34 <lll_prepare_resolve+0x80>
   16f76:	4a2c      	ldr	r2, [pc, #176]	; (17028 <lll_prepare_resolve+0x174>)
   16f78:	492e      	ldr	r1, [pc, #184]	; (17034 <lll_prepare_resolve+0x180>)
   16f7a:	482d      	ldr	r0, [pc, #180]	; (17030 <lll_prepare_resolve+0x17c>)
   16f7c:	f44f 7326 	mov.w	r3, #664	; 0x298
   16f80:	f008 fbcd 	bl	1f71e <printk>
   16f84:	4040      	eors	r0, r0
   16f86:	f380 8811 	msr	BASEPRI, r0
   16f8a:	f04f 0003 	mov.w	r0, #3
   16f8e:	df02      	svc	2
   16f90:	e7d0      	b.n	16f34 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   16f92:	42ac      	cmp	r4, r5
   16f94:	d00c      	beq.n	16fb0 <lll_prepare_resolve+0xfc>
   16f96:	4a24      	ldr	r2, [pc, #144]	; (17028 <lll_prepare_resolve+0x174>)
   16f98:	4927      	ldr	r1, [pc, #156]	; (17038 <lll_prepare_resolve+0x184>)
   16f9a:	4825      	ldr	r0, [pc, #148]	; (17030 <lll_prepare_resolve+0x17c>)
   16f9c:	f240 23be 	movw	r3, #702	; 0x2be
   16fa0:	f008 fbbd 	bl	1f71e <printk>
   16fa4:	4040      	eors	r0, r0
   16fa6:	f380 8811 	msr	BASEPRI, r0
   16faa:	f04f 0003 	mov.w	r0, #3
   16fae:	df02      	svc	2
	event.curr.param = prepare_param->param;
   16fb0:	68eb      	ldr	r3, [r5, #12]
   16fb2:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   16fb6:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   16fba:	4628      	mov	r0, r5
   16fbc:	47c0      	blx	r8
   16fbe:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   16fc0:	f7ff fc06 	bl	167d0 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16fc4:	f030 0302 	bics.w	r3, r0, #2
   16fc8:	d11e      	bne.n	17008 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   16fca:	f10d 000f 	add.w	r0, sp, #15
   16fce:	f7f7 fb47 	bl	e660 <ull_prepare_dequeue_iter>
		if (!p) {
   16fd2:	2800      	cmp	r0, #0
   16fd4:	d0b0      	beq.n	16f38 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   16fd6:	7f03      	ldrb	r3, [r0, #28]
   16fd8:	f013 0303 	ands.w	r3, r3, #3
   16fdc:	d1f5      	bne.n	16fca <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   16fde:	4601      	mov	r1, r0
   16fe0:	4618      	mov	r0, r3
   16fe2:	f7ff fc35 	bl	16850 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16fe6:	f030 0302 	bics.w	r3, r0, #2
   16fea:	d0a5      	beq.n	16f38 <lll_prepare_resolve+0x84>
   16fec:	4a0e      	ldr	r2, [pc, #56]	; (17028 <lll_prepare_resolve+0x174>)
   16fee:	4911      	ldr	r1, [pc, #68]	; (17034 <lll_prepare_resolve+0x180>)
   16ff0:	480f      	ldr	r0, [pc, #60]	; (17030 <lll_prepare_resolve+0x17c>)
   16ff2:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   16ff6:	f008 fb92 	bl	1f71e <printk>
   16ffa:	4040      	eors	r0, r0
   16ffc:	f380 8811 	msr	BASEPRI, r0
   17000:	f04f 0003 	mov.w	r0, #3
   17004:	df02      	svc	2
   17006:	e797      	b.n	16f38 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17008:	4a07      	ldr	r2, [pc, #28]	; (17028 <lll_prepare_resolve+0x174>)
   1700a:	490a      	ldr	r1, [pc, #40]	; (17034 <lll_prepare_resolve+0x180>)
   1700c:	4808      	ldr	r0, [pc, #32]	; (17030 <lll_prepare_resolve+0x17c>)
   1700e:	f240 23cb 	movw	r3, #715	; 0x2cb
   17012:	f008 fb84 	bl	1f71e <printk>
   17016:	4040      	eors	r0, r0
   17018:	f380 8811 	msr	BASEPRI, r0
   1701c:	f04f 0003 	mov.w	r0, #3
   17020:	df02      	svc	2
   17022:	e7d2      	b.n	16fca <lll_prepare_resolve+0x116>
   17024:	200050dc 	.word	0x200050dc
   17028:	00025b20 	.word	0x00025b20
   1702c:	00025c48 	.word	0x00025c48
   17030:	000250f0 	.word	0x000250f0
   17034:	000254a0 	.word	0x000254a0
   17038:	00025c50 	.word	0x00025c50

0001703c <clock_ready>:
	z_impl_k_sem_give(sem);
   1703c:	f101 0010 	add.w	r0, r1, #16
   17040:	f007 ba6c 	b.w	1e51c <z_impl_k_sem_give>

00017044 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   17044:	b570      	push	{r4, r5, r6, lr}
   17046:	4605      	mov	r5, r0
   17048:	b08a      	sub	sp, #40	; 0x28
   1704a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1704c:	2201      	movs	r2, #1
   1704e:	2100      	movs	r1, #0
   17050:	a804      	add	r0, sp, #16
   17052:	f00d f82a 	bl	240aa <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   17056:	4b0f      	ldr	r3, [pc, #60]	; (17094 <blocking_on+0x50>)
   17058:	9301      	str	r3, [sp, #4]
   1705a:	2600      	movs	r6, #0
   1705c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1705e:	4669      	mov	r1, sp
   17060:	4628      	mov	r0, r5
   17062:	9603      	str	r6, [sp, #12]
   17064:	9302      	str	r3, [sp, #8]
   17066:	f008 fbe3 	bl	1f830 <onoff_request>
	if (err < 0) {
   1706a:	2800      	cmp	r0, #0
   1706c:	db10      	blt.n	17090 <blocking_on+0x4c>
   1706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17072:	4631      	mov	r1, r6
   17074:	f240 30e7 	movw	r0, #999	; 0x3e7
   17078:	fbe4 0103 	umlal	r0, r1, r4, r3
   1707c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17080:	2300      	movs	r3, #0
   17082:	f7e9 fc33 	bl	8ec <__aeabi_uldivmod>
   17086:	4602      	mov	r2, r0
   17088:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1708a:	a804      	add	r0, sp, #16
   1708c:	f007 fa6c 	bl	1e568 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   17090:	b00a      	add	sp, #40	; 0x28
   17092:	bd70      	pop	{r4, r5, r6, pc}
   17094:	0001703d 	.word	0x0001703d

00017098 <lll_clock_init>:

int lll_clock_init(void)
{
   17098:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1709a:	2001      	movs	r0, #1
   1709c:	f003 fee6 	bl	1ae6c <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   170a0:	4904      	ldr	r1, [pc, #16]	; (170b4 <lll_clock_init+0x1c>)
   170a2:	2300      	movs	r3, #0
   170a4:	2401      	movs	r4, #1
   170a6:	608c      	str	r4, [r1, #8]
   170a8:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   170aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   170ae:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   170b0:	f008 bbbe 	b.w	1f830 <onoff_request>
   170b4:	200050f8 	.word	0x200050f8

000170b8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   170b8:	4b0c      	ldr	r3, [pc, #48]	; (170ec <lll_clock_wait+0x34>)
   170ba:	781a      	ldrb	r2, [r3, #0]
   170bc:	b10a      	cbz	r2, 170c2 <lll_clock_wait+0xa>
		return 0;
   170be:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   170c0:	4770      	bx	lr
{
   170c2:	b510      	push	{r4, lr}
	done = true;
   170c4:	2001      	movs	r0, #1
   170c6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   170c8:	f003 fed0 	bl	1ae6c <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   170cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   170d0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   170d2:	f7ff ffb7 	bl	17044 <blocking_on>
	if (err) {
   170d6:	b938      	cbnz	r0, 170e8 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   170d8:	4620      	mov	r0, r4
   170da:	f008 fbf2 	bl	1f8c2 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   170de:	2802      	cmp	r0, #2
		return 0;
   170e0:	bf0c      	ite	eq
   170e2:	2000      	moveq	r0, #0
		return -EIO;
   170e4:	f06f 0004 	mvnne.w	r0, #4
}
   170e8:	bd10      	pop	{r4, pc}
   170ea:	bf00      	nop
   170ec:	200060e6 	.word	0x200060e6

000170f0 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   170f0:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   170f2:	4b0a      	ldr	r3, [pc, #40]	; (1711c <lll_hfclock_on+0x2c>)
   170f4:	f3bf 8f5b 	dmb	ish
   170f8:	e853 2f00 	ldrex	r2, [r3]
   170fc:	1c51      	adds	r1, r2, #1
   170fe:	e843 1000 	strex	r0, r1, [r3]
   17102:	2800      	cmp	r0, #0
   17104:	d1f8      	bne.n	170f8 <lll_hfclock_on+0x8>
   17106:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1710a:	2a00      	cmp	r2, #0
   1710c:	dd01      	ble.n	17112 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1710e:	2000      	movs	r0, #0
   17110:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   17112:	f003 feb3 	bl	1ae7c <z_nrf_clock_bt_ctlr_hf_request>
}
   17116:	2000      	movs	r0, #0
   17118:	bd08      	pop	{r3, pc}
   1711a:	bf00      	nop
   1711c:	200050f4 	.word	0x200050f4

00017120 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   17120:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   17122:	4b0d      	ldr	r3, [pc, #52]	; (17158 <lll_hfclock_off+0x38>)
   17124:	681a      	ldr	r2, [r3, #0]
   17126:	2a00      	cmp	r2, #0
   17128:	dd12      	ble.n	17150 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1712a:	f3bf 8f5b 	dmb	ish
   1712e:	e853 2f00 	ldrex	r2, [r3]
   17132:	1e51      	subs	r1, r2, #1
   17134:	e843 1000 	strex	r0, r1, [r3]
   17138:	2800      	cmp	r0, #0
   1713a:	d1f8      	bne.n	1712e <lll_hfclock_off+0xe>
   1713c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   17140:	2a01      	cmp	r2, #1
   17142:	dd01      	ble.n	17148 <lll_hfclock_off+0x28>
		return 0;
   17144:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   17146:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   17148:	f003 feae 	bl	1aea8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1714c:	2000      	movs	r0, #0
}
   1714e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   17150:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   17154:	bd08      	pop	{r3, pc}
   17156:	bf00      	nop
   17158:	200050f4 	.word	0x200050f4

0001715c <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1715c:	2005      	movs	r0, #5
   1715e:	4770      	bx	lr

00017160 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   17160:	2032      	movs	r0, #50	; 0x32
   17162:	4770      	bx	lr

00017164 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   17164:	4b01      	ldr	r3, [pc, #4]	; (1716c <lll_clock_ppm_get+0x8>)
}
   17166:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1716a:	4770      	bx	lr
   1716c:	00025c7c 	.word	0x00025c7c

00017170 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   17170:	b510      	push	{r4, lr}
   17172:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   17174:	f7ff fe16 	bl	16da4 <lll_isr_status_reset>

	radio_filter_disable();
   17178:	f002 fa7e 	bl	19678 <radio_filter_disable>

	lll_isr_cleanup(param);
   1717c:	4620      	mov	r0, r4
}
   1717e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17182:	f7ff be1d 	b.w	16dc0 <lll_isr_cleanup>
   17186:	bf00      	nop

00017188 <isr_tx>:
{
   17188:	b530      	push	{r4, r5, lr}
   1718a:	b083      	sub	sp, #12
   1718c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1718e:	f7ff fdf7 	bl	16d80 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17192:	2096      	movs	r0, #150	; 0x96
   17194:	f002 faa2 	bl	196dc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   17198:	2300      	movs	r3, #0
   1719a:	4618      	mov	r0, r3
   1719c:	461a      	mov	r2, r3
   1719e:	4619      	mov	r1, r3
   171a0:	f002 f9b8 	bl	19514 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   171a4:	2001      	movs	r0, #1
   171a6:	f7f7 f9d1 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   171aa:	4604      	mov	r4, r0
   171ac:	2800      	cmp	r0, #0
   171ae:	d043      	beq.n	17238 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   171b0:	f104 001c 	add.w	r0, r4, #28
   171b4:	f002 f8e2 	bl	1937c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   171b8:	f002 f928 	bl	1940c <radio_is_ready>
   171bc:	b9e0      	cbnz	r0, 171f8 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   171be:	4825      	ldr	r0, [pc, #148]	; (17254 <isr_tx+0xcc>)
   171c0:	4629      	mov	r1, r5
   171c2:	f002 f807 	bl	191d4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   171c6:	f7ff fa11 	bl	165ec <ull_filter_lll_rl_enabled>
   171ca:	bb50      	cbnz	r0, 17222 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   171cc:	f002 fba0 	bl	19910 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   171d0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   171d2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   171d4:	4608      	mov	r0, r1
   171d6:	f002 f8e7 	bl	193a8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   171da:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   171dc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   171de:	4608      	mov	r0, r1
   171e0:	f002 f8de 	bl	193a0 <radio_tx_chain_delay_get>
   171e4:	442c      	add	r4, r5
   171e6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   171e8:	1a20      	subs	r0, r4, r0
   171ea:	f002 fb49 	bl	19880 <radio_tmr_hcto_configure>
}
   171ee:	b003      	add	sp, #12
   171f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   171f4:	f002 bb7e 	b.w	198f4 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   171f8:	4a17      	ldr	r2, [pc, #92]	; (17258 <isr_tx+0xd0>)
   171fa:	4918      	ldr	r1, [pc, #96]	; (1725c <isr_tx+0xd4>)
   171fc:	4818      	ldr	r0, [pc, #96]	; (17260 <isr_tx+0xd8>)
   171fe:	f240 4345 	movw	r3, #1093	; 0x445
   17202:	f008 fa8c 	bl	1f71e <printk>
   17206:	4040      	eors	r0, r0
   17208:	f380 8811 	msr	BASEPRI, r0
   1720c:	f04f 0003 	mov.w	r0, #3
   17210:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   17212:	4810      	ldr	r0, [pc, #64]	; (17254 <isr_tx+0xcc>)
   17214:	4629      	mov	r1, r5
   17216:	f001 ffdd 	bl	191d4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1721a:	f7ff f9e7 	bl	165ec <ull_filter_lll_rl_enabled>
   1721e:	2800      	cmp	r0, #0
   17220:	d0d4      	beq.n	171cc <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17222:	f10d 0007 	add.w	r0, sp, #7
   17226:	f7ff f85b 	bl	162e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1722a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1722c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1722e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17232:	f002 fc05 	bl	19a40 <radio_ar_configure>
   17236:	e7c9      	b.n	171cc <isr_tx+0x44>
	LL_ASSERT(node_rx);
   17238:	4a07      	ldr	r2, [pc, #28]	; (17258 <isr_tx+0xd0>)
   1723a:	490a      	ldr	r1, [pc, #40]	; (17264 <isr_tx+0xdc>)
   1723c:	4808      	ldr	r0, [pc, #32]	; (17260 <isr_tx+0xd8>)
   1723e:	f240 4341 	movw	r3, #1089	; 0x441
   17242:	f008 fa6c 	bl	1f71e <printk>
   17246:	4040      	eors	r0, r0
   17248:	f380 8811 	msr	BASEPRI, r0
   1724c:	f04f 0003 	mov.w	r0, #3
   17250:	df02      	svc	2
   17252:	e7ad      	b.n	171b0 <isr_tx+0x28>
   17254:	000179d9 	.word	0x000179d9
   17258:	00025c8c 	.word	0x00025c8c
   1725c:	00025ce0 	.word	0x00025ce0
   17260:	000250f0 	.word	0x000250f0
   17264:	00025cd8 	.word	0x00025cd8

00017268 <is_abort_cb>:
	if (next != curr) {
   17268:	4281      	cmp	r1, r0
{
   1726a:	b508      	push	{r3, lr}
	if (next != curr) {
   1726c:	d00e      	beq.n	1728c <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   1726e:	7a0b      	ldrb	r3, [r1, #8]
   17270:	07db      	lsls	r3, r3, #31
   17272:	d402      	bmi.n	1727a <is_abort_cb+0x12>
			return -ECANCELED;
   17274:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   17278:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1727a:	4b13      	ldr	r3, [pc, #76]	; (172c8 <is_abort_cb+0x60>)
   1727c:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1727e:	f7ff ff37 	bl	170f0 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   17282:	2800      	cmp	r0, #0
   17284:	db0f      	blt.n	172a6 <is_abort_cb+0x3e>
   17286:	f06f 000a 	mvn.w	r0, #10
}
   1728a:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1728c:	7b0b      	ldrb	r3, [r1, #12]
   1728e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17292:	690b      	ldr	r3, [r1, #16]
   17294:	781b      	ldrb	r3, [r3, #0]
   17296:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1729a:	2b01      	cmp	r3, #1
   1729c:	bf14      	ite	ne
   1729e:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   172a2:	2000      	moveq	r0, #0
}
   172a4:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   172a6:	4a09      	ldr	r2, [pc, #36]	; (172cc <is_abort_cb+0x64>)
   172a8:	4909      	ldr	r1, [pc, #36]	; (172d0 <is_abort_cb+0x68>)
   172aa:	480a      	ldr	r0, [pc, #40]	; (172d4 <is_abort_cb+0x6c>)
   172ac:	f240 33fa 	movw	r3, #1018	; 0x3fa
   172b0:	f008 fa35 	bl	1f71e <printk>
   172b4:	4040      	eors	r0, r0
   172b6:	f380 8811 	msr	BASEPRI, r0
   172ba:	f04f 0003 	mov.w	r0, #3
   172be:	df02      	svc	2
   172c0:	f06f 000a 	mvn.w	r0, #10
}
   172c4:	bd08      	pop	{r3, pc}
   172c6:	bf00      	nop
   172c8:	000177f5 	.word	0x000177f5
   172cc:	00025c8c 	.word	0x00025c8c
   172d0:	00025c3c 	.word	0x00025c3c
   172d4:	000250f0 	.word	0x000250f0

000172d8 <abort_cb>:
{
   172d8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   172da:	b1d8      	cbz	r0, 17314 <abort_cb+0x3c>
	err = lll_hfclock_off();
   172dc:	460c      	mov	r4, r1
   172de:	f7ff ff1f 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   172e2:	2800      	cmp	r0, #0
   172e4:	db04      	blt.n	172f0 <abort_cb+0x18>
	lll_done(param);
   172e6:	4620      	mov	r0, r4
}
   172e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   172ec:	f7ff bc84 	b.w	16bf8 <lll_done>
	LL_ASSERT(err >= 0);
   172f0:	4a0c      	ldr	r2, [pc, #48]	; (17324 <abort_cb+0x4c>)
   172f2:	490d      	ldr	r1, [pc, #52]	; (17328 <abort_cb+0x50>)
   172f4:	480d      	ldr	r0, [pc, #52]	; (1732c <abort_cb+0x54>)
   172f6:	f44f 6384 	mov.w	r3, #1056	; 0x420
   172fa:	f008 fa10 	bl	1f71e <printk>
   172fe:	4040      	eors	r0, r0
   17300:	f380 8811 	msr	BASEPRI, r0
   17304:	f04f 0003 	mov.w	r0, #3
   17308:	df02      	svc	2
	lll_done(param);
   1730a:	4620      	mov	r0, r4
}
   1730c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17310:	f7ff bc72 	b.w	16bf8 <lll_done>
		radio_isr_set(isr_abort, param);
   17314:	4806      	ldr	r0, [pc, #24]	; (17330 <abort_cb+0x58>)
   17316:	f001 ff5d 	bl	191d4 <radio_isr_set>
}
   1731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1731e:	f002 b855 	b.w	193cc <radio_disable>
   17322:	bf00      	nop
   17324:	00025c8c 	.word	0x00025c8c
   17328:	00025c3c 	.word	0x00025c3c
   1732c:	000250f0 	.word	0x000250f0
   17330:	00017171 	.word	0x00017171

00017334 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   17334:	4b08      	ldr	r3, [pc, #32]	; (17358 <lll_adv_init+0x24>)
   17336:	2204      	movs	r2, #4
{
   17338:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1733a:	1898      	adds	r0, r3, r2
   1733c:	2128      	movs	r1, #40	; 0x28
   1733e:	f7f3 f8d9 	bl	a4f4 <mem_init>
	MFIFO_INIT(pdu_free);
   17342:	4b06      	ldr	r3, [pc, #24]	; (1735c <lll_adv_init+0x28>)
   17344:	2400      	movs	r4, #0
   17346:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17348:	2202      	movs	r2, #2
   1734a:	4621      	mov	r1, r4
   1734c:	4804      	ldr	r0, [pc, #16]	; (17360 <lll_adv_init+0x2c>)
   1734e:	f00c feac 	bl	240aa <z_impl_k_sem_init>
}
   17352:	4620      	mov	r0, r4
   17354:	bd10      	pop	{r4, pc}
   17356:	bf00      	nop
   17358:	20005108 	.word	0x20005108
   1735c:	20000748 	.word	0x20000748
   17360:	200051ac 	.word	0x200051ac

00017364 <lll_adv_reset>:
   17364:	4b08      	ldr	r3, [pc, #32]	; (17388 <lll_adv_reset+0x24>)
   17366:	2204      	movs	r2, #4
   17368:	b510      	push	{r4, lr}
   1736a:	1898      	adds	r0, r3, r2
   1736c:	2128      	movs	r1, #40	; 0x28
   1736e:	f7f3 f8c1 	bl	a4f4 <mem_init>
   17372:	4b06      	ldr	r3, [pc, #24]	; (1738c <lll_adv_reset+0x28>)
   17374:	2400      	movs	r4, #0
   17376:	805c      	strh	r4, [r3, #2]
   17378:	2202      	movs	r2, #2
   1737a:	4621      	mov	r1, r4
   1737c:	4804      	ldr	r0, [pc, #16]	; (17390 <lll_adv_reset+0x2c>)
   1737e:	f00c fe94 	bl	240aa <z_impl_k_sem_init>
   17382:	4620      	mov	r0, r4
   17384:	bd10      	pop	{r4, pc}
   17386:	bf00      	nop
   17388:	20005108 	.word	0x20005108
   1738c:	20000748 	.word	0x20000748
   17390:	200051ac 	.word	0x200051ac

00017394 <lll_adv_data_init>:
{
   17394:	b510      	push	{r4, lr}
   17396:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   17398:	4805      	ldr	r0, [pc, #20]	; (173b0 <lll_adv_data_init+0x1c>)
   1739a:	f7f3 f8db 	bl	a554 <mem_acquire>
	if (!p) {
   1739e:	b120      	cbz	r0, 173aa <lll_adv_data_init+0x16>
   173a0:	4603      	mov	r3, r0
	p->len = 0U;
   173a2:	2000      	movs	r0, #0
   173a4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   173a6:	6063      	str	r3, [r4, #4]
}
   173a8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   173aa:	f06f 000b 	mvn.w	r0, #11
}
   173ae:	bd10      	pop	{r4, pc}
   173b0:	20005108 	.word	0x20005108

000173b4 <lll_adv_data_reset>:
{
   173b4:	4603      	mov	r3, r0
	pdu->first = 0U;
   173b6:	2000      	movs	r0, #0
   173b8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   173ba:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   173bc:	6098      	str	r0, [r3, #8]
}
   173be:	4770      	bx	lr

000173c0 <lll_adv_pdu_alloc_pdu_adv>:
{
   173c0:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   173c2:	4c35      	ldr	r4, [pc, #212]	; (17498 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   173c4:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   173c6:	78e1      	ldrb	r1, [r4, #3]
   173c8:	7823      	ldrb	r3, [r4, #0]
   173ca:	4291      	cmp	r1, r2
   173cc:	d003      	beq.n	173d6 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   173ce:	fb02 4303 	mla	r3, r2, r3, r4
   173d2:	685d      	ldr	r5, [r3, #4]
	if (p) {
   173d4:	b935      	cbnz	r5, 173e4 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   173d6:	4831      	ldr	r0, [pc, #196]	; (1749c <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   173d8:	f7f3 f8bc 	bl	a554 <mem_acquire>
	if (p) {
   173dc:	4605      	mov	r5, r0
   173de:	b1a0      	cbz	r0, 1740a <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   173e0:	4628      	mov	r0, r5
   173e2:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   173e4:	482e      	ldr	r0, [pc, #184]	; (174a0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   173e6:	2200      	movs	r2, #0
   173e8:	2300      	movs	r3, #0
   173ea:	f007 f8bd 	bl	1e568 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   173ee:	bb40      	cbnz	r0, 17442 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   173f0:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   173f2:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   173f4:	7861      	ldrb	r1, [r4, #1]
   173f6:	429a      	cmp	r2, r3
   173f8:	d0f2      	beq.n	173e0 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   173fa:	3301      	adds	r3, #1
   173fc:	b2db      	uxtb	r3, r3
		_first = 0U;
   173fe:	4299      	cmp	r1, r3
   17400:	bf08      	it	eq
   17402:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17404:	70a3      	strb	r3, [r4, #2]
}
   17406:	4628      	mov	r0, r5
   17408:	bd38      	pop	{r3, r4, r5, pc}
   1740a:	4825      	ldr	r0, [pc, #148]	; (174a0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1740c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17414:	f007 f8a8 	bl	1e568 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   17418:	2800      	cmp	r0, #0
   1741a:	d12e      	bne.n	1747a <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   1741c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1741e:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   17420:	7822      	ldrb	r2, [r4, #0]
   17422:	7860      	ldrb	r0, [r4, #1]
   17424:	4299      	cmp	r1, r3
   17426:	d01a      	beq.n	1745e <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   17428:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1742c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1742e:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   17430:	b2db      	uxtb	r3, r3
		_first = 0U;
   17432:	4298      	cmp	r0, r3
   17434:	bf08      	it	eq
   17436:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17438:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   1743a:	b182      	cbz	r2, 1745e <lll_adv_pdu_alloc_pdu_adv+0x9e>
   1743c:	4615      	mov	r5, r2
}
   1743e:	4628      	mov	r0, r5
   17440:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   17442:	4a18      	ldr	r2, [pc, #96]	; (174a4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   17444:	4918      	ldr	r1, [pc, #96]	; (174a8 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   17446:	4819      	ldr	r0, [pc, #100]	; (174ac <lll_adv_pdu_alloc_pdu_adv+0xec>)
   17448:	f240 1397 	movw	r3, #407	; 0x197
   1744c:	f008 f967 	bl	1f71e <printk>
   17450:	4040      	eors	r0, r0
   17452:	f380 8811 	msr	BASEPRI, r0
   17456:	f04f 0003 	mov.w	r0, #3
   1745a:	df02      	svc	2
   1745c:	e7c8      	b.n	173f0 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   1745e:	4a11      	ldr	r2, [pc, #68]	; (174a4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   17460:	4913      	ldr	r1, [pc, #76]	; (174b0 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   17462:	4812      	ldr	r0, [pc, #72]	; (174ac <lll_adv_pdu_alloc_pdu_adv+0xec>)
   17464:	f240 13ad 	movw	r3, #429	; 0x1ad
   17468:	f008 f959 	bl	1f71e <printk>
   1746c:	4040      	eors	r0, r0
   1746e:	f380 8811 	msr	BASEPRI, r0
   17472:	f04f 0003 	mov.w	r0, #3
   17476:	df02      	svc	2
   17478:	e7b2      	b.n	173e0 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1747a:	4a0a      	ldr	r2, [pc, #40]	; (174a4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1747c:	490a      	ldr	r1, [pc, #40]	; (174a8 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1747e:	480b      	ldr	r0, [pc, #44]	; (174ac <lll_adv_pdu_alloc_pdu_adv+0xec>)
   17480:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   17484:	f008 f94b 	bl	1f71e <printk>
   17488:	4040      	eors	r0, r0
   1748a:	f380 8811 	msr	BASEPRI, r0
   1748e:	f04f 0003 	mov.w	r0, #3
   17492:	df02      	svc	2
   17494:	e7c2      	b.n	1741c <lll_adv_pdu_alloc_pdu_adv+0x5c>
   17496:	bf00      	nop
   17498:	20000748 	.word	0x20000748
   1749c:	20005108 	.word	0x20005108
   174a0:	200051ac 	.word	0x200051ac
   174a4:	00025c8c 	.word	0x00025c8c
   174a8:	000252cc 	.word	0x000252cc
   174ac:	000250f0 	.word	0x000250f0
   174b0:	00025cf4 	.word	0x00025cf4

000174b4 <lll_adv_pdu_alloc>:
{
   174b4:	b510      	push	{r4, lr}
	first = pdu->first;
   174b6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   174b8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   174ba:	429a      	cmp	r2, r3
   174bc:	d014      	beq.n	174e8 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   174be:	b2d4      	uxtb	r4, r2
   174c0:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   174c2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   174c4:	4294      	cmp	r4, r2
   174c6:	d004      	beq.n	174d2 <lll_adv_pdu_alloc+0x1e>
			last++;
   174c8:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   174ca:	7043      	strb	r3, [r0, #1]
			last++;
   174cc:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   174ce:	2b02      	cmp	r3, #2
   174d0:	d00e      	beq.n	174f0 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   174d2:	461c      	mov	r4, r3
	*idx = last;
   174d4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   174d8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   174da:	6860      	ldr	r0, [r4, #4]
	if (p) {
   174dc:	b100      	cbz	r0, 174e0 <lll_adv_pdu_alloc+0x2c>
}
   174de:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   174e0:	f7ff ff6e 	bl	173c0 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   174e4:	6060      	str	r0, [r4, #4]
}
   174e6:	bd10      	pop	{r4, pc}
		last++;
   174e8:	3301      	adds	r3, #1
   174ea:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   174ec:	2b02      	cmp	r3, #2
   174ee:	d1f0      	bne.n	174d2 <lll_adv_pdu_alloc+0x1e>
{
   174f0:	2400      	movs	r4, #0
			last = 0U;
   174f2:	4623      	mov	r3, r4
   174f4:	e7ee      	b.n	174d4 <lll_adv_pdu_alloc+0x20>
   174f6:	bf00      	nop

000174f8 <lll_adv_pdu_latest_get>:
{
   174f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174fa:	4604      	mov	r4, r0
	first = pdu->first;
   174fc:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   174fe:	7840      	ldrb	r0, [r0, #1]
   17500:	4298      	cmp	r0, r3
   17502:	d028      	beq.n	17556 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   17504:	4a16      	ldr	r2, [pc, #88]	; (17560 <lll_adv_pdu_latest_get+0x68>)
   17506:	460e      	mov	r6, r1
   17508:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1750a:	f892 c001 	ldrb.w	ip, [r2, #1]
   1750e:	b2dd      	uxtb	r5, r3
	last = last + 1;
   17510:	1c4b      	adds	r3, r1, #1
   17512:	b2db      	uxtb	r3, r3
		last = 0U;
   17514:	459c      	cmp	ip, r3
   17516:	bf08      	it	eq
   17518:	2300      	moveq	r3, #0
   1751a:	f892 c002 	ldrb.w	ip, [r2, #2]
   1751e:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   17522:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   17524:	6878      	ldr	r0, [r7, #4]
   17526:	d009      	beq.n	1753c <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   17528:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1752c:	fb0c 2101 	mla	r1, ip, r1, r2
   17530:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   17532:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   17534:	480b      	ldr	r0, [pc, #44]	; (17564 <lll_adv_pdu_latest_get+0x6c>)
   17536:	f006 fff1 	bl	1e51c <z_impl_k_sem_give>
			p = next;
   1753a:	2000      	movs	r0, #0
		first += 1U;
   1753c:	1c6b      	adds	r3, r5, #1
   1753e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   17540:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   17542:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   17544:	bf04      	itt	eq
   17546:	2000      	moveq	r0, #0
			first = 0U;
   17548:	4603      	moveq	r3, r0
		*is_modified = 1U;
   1754a:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   1754e:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   17550:	bf18      	it	ne
   17552:	4618      	movne	r0, r3
		*is_modified = 1U;
   17554:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   17556:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1755a:	6860      	ldr	r0, [r4, #4]
   1755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1755e:	bf00      	nop
   17560:	20000748 	.word	0x20000748
   17564:	200051ac 	.word	0x200051ac

00017568 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   17568:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1756a:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1756c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17570:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   17572:	4604      	mov	r4, r0
   17574:	fa93 f0a3 	rbit	r0, r3
   17578:	fab0 f080 	clz	r0, r0
   1757c:	bf08      	it	eq
   1757e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   17582:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   17584:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   17586:	d043      	beq.n	17610 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17588:	7a21      	ldrb	r1, [r4, #8]
   1758a:	1e5a      	subs	r2, r3, #1
   1758c:	4013      	ands	r3, r2
   1758e:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   17592:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   17596:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   17598:	f7ff fbac 	bl	16cf4 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1759c:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1759e:	f10d 0107 	add.w	r1, sp, #7
   175a2:	f104 000c 	add.w	r0, r4, #12
   175a6:	f88d 3007 	strb.w	r3, [sp, #7]
   175aa:	f7ff ffa5 	bl	174f8 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   175ae:	4605      	mov	r5, r0
   175b0:	2800      	cmp	r0, #0
   175b2:	d03e      	beq.n	17632 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   175b4:	4628      	mov	r0, r5
   175b6:	f001 fee7 	bl	19388 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   175ba:	782b      	ldrb	r3, [r5, #0]
   175bc:	f003 030f 	and.w	r3, r3, #15
   175c0:	2b02      	cmp	r3, #2
   175c2:	d01d      	beq.n	17600 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   175c4:	f10d 0107 	add.w	r1, sp, #7
   175c8:	f104 0018 	add.w	r0, r4, #24
   175cc:	f7ff ff94 	bl	174f8 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   175d0:	4606      	mov	r6, r0
   175d2:	2800      	cmp	r0, #0
   175d4:	d03b      	beq.n	1764e <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   175d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   175da:	b95b      	cbnz	r3, 175f4 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   175dc:	4621      	mov	r1, r4
   175de:	4823      	ldr	r0, [pc, #140]	; (1766c <chan_prepare.isra.0+0x104>)
   175e0:	f001 fdf8 	bl	191d4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   175e4:	2096      	movs	r0, #150	; 0x96
   175e6:	f002 f879 	bl	196dc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   175ea:	2000      	movs	r0, #0
   175ec:	f001 ff4a 	bl	19484 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   175f0:	b002      	add	sp, #8
   175f2:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   175f4:	2206      	movs	r2, #6
   175f6:	1ca9      	adds	r1, r5, #2
   175f8:	1cb0      	adds	r0, r6, #2
   175fa:	f009 f895 	bl	20728 <memcpy>
   175fe:	e7ed      	b.n	175dc <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   17600:	481b      	ldr	r0, [pc, #108]	; (17670 <chan_prepare.isra.0+0x108>)
   17602:	4621      	mov	r1, r4
   17604:	f001 fde6 	bl	191d4 <radio_isr_set>
		radio_switch_complete_and_disable();
   17608:	f001 ffe4 	bl	195d4 <radio_switch_complete_and_disable>
}
   1760c:	b002      	add	sp, #8
   1760e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   17610:	4a18      	ldr	r2, [pc, #96]	; (17674 <chan_prepare.isra.0+0x10c>)
   17612:	4919      	ldr	r1, [pc, #100]	; (17678 <chan_prepare.isra.0+0x110>)
   17614:	4819      	ldr	r0, [pc, #100]	; (1767c <chan_prepare.isra.0+0x114>)
   17616:	f240 5337 	movw	r3, #1335	; 0x537
   1761a:	f008 f880 	bl	1f71e <printk>
   1761e:	4040      	eors	r0, r0
   17620:	f380 8811 	msr	BASEPRI, r0
   17624:	f04f 0003 	mov.w	r0, #3
   17628:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1762a:	7a23      	ldrb	r3, [r4, #8]
   1762c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17630:	e7aa      	b.n	17588 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   17632:	4a10      	ldr	r2, [pc, #64]	; (17674 <chan_prepare.isra.0+0x10c>)
   17634:	4912      	ldr	r1, [pc, #72]	; (17680 <chan_prepare.isra.0+0x118>)
   17636:	4811      	ldr	r0, [pc, #68]	; (1767c <chan_prepare.isra.0+0x114>)
   17638:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   1763c:	f008 f86f 	bl	1f71e <printk>
   17640:	4040      	eors	r0, r0
   17642:	f380 8811 	msr	BASEPRI, r0
   17646:	f04f 0003 	mov.w	r0, #3
   1764a:	df02      	svc	2
   1764c:	e7b2      	b.n	175b4 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   1764e:	4a09      	ldr	r2, [pc, #36]	; (17674 <chan_prepare.isra.0+0x10c>)
   17650:	490c      	ldr	r1, [pc, #48]	; (17684 <chan_prepare.isra.0+0x11c>)
   17652:	480a      	ldr	r0, [pc, #40]	; (1767c <chan_prepare.isra.0+0x114>)
   17654:	f240 534a 	movw	r3, #1354	; 0x54a
   17658:	f008 f861 	bl	1f71e <printk>
   1765c:	4040      	eors	r0, r0
   1765e:	f380 8811 	msr	BASEPRI, r0
   17662:	f04f 0003 	mov.w	r0, #3
   17666:	df02      	svc	2
   17668:	e7b5      	b.n	175d6 <chan_prepare.isra.0+0x6e>
   1766a:	bf00      	nop
   1766c:	00017189 	.word	0x00017189
   17670:	00017689 	.word	0x00017689
   17674:	00025c8c 	.word	0x00025c8c
   17678:	00025cf8 	.word	0x00025cf8
   1767c:	000250f0 	.word	0x000250f0
   17680:	00025d00 	.word	0x00025d00
   17684:	00025d04 	.word	0x00025d04

00017688 <isr_done>:
{
   17688:	b510      	push	{r4, lr}
   1768a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1768c:	f7ff fb8a 	bl	16da4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   17690:	7a23      	ldrb	r3, [r4, #8]
   17692:	f003 0271 	and.w	r2, r3, #113	; 0x71
   17696:	2a01      	cmp	r2, #1
   17698:	d105      	bne.n	176a6 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1769a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1769e:	f362 1306 	bfi	r3, r2, #4, #3
   176a2:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   176a4:	b2db      	uxtb	r3, r3
   176a6:	f013 0f70 	tst.w	r3, #112	; 0x70
   176aa:	d005      	beq.n	176b8 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   176ac:	6863      	ldr	r3, [r4, #4]
   176ae:	b153      	cbz	r3, 176c6 <isr_done+0x3e>
   176b0:	f893 3020 	ldrb.w	r3, [r3, #32]
   176b4:	079b      	lsls	r3, r3, #30
   176b6:	d506      	bpl.n	176c6 <isr_done+0x3e>
	radio_filter_disable();
   176b8:	f001 ffde 	bl	19678 <radio_filter_disable>
	lll_isr_cleanup(param);
   176bc:	4620      	mov	r0, r4
}
   176be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   176c2:	f7ff bb7d 	b.w	16dc0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   176c6:	4620      	mov	r0, r4
   176c8:	f7ff ff4e 	bl	17568 <chan_prepare.isra.0>
		radio_tx_enable();
   176cc:	f001 fe78 	bl	193c0 <radio_tx_enable>
}
   176d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   176d4:	f002 b90e 	b.w	198f4 <radio_tmr_end_capture>

000176d8 <prepare_cb>:
{
   176d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   176da:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   176dc:	6863      	ldr	r3, [r4, #4]
{
   176de:	b083      	sub	sp, #12
   176e0:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   176e2:	2b00      	cmp	r3, #0
   176e4:	d16d      	bne.n	177c2 <prepare_cb+0xea>
	radio_reset();
   176e6:	f001 fdb7 	bl	19258 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   176ea:	2000      	movs	r0, #0
   176ec:	f001 fde8 	bl	192c0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   176f0:	2100      	movs	r1, #0
   176f2:	4608      	mov	r0, r1
   176f4:	f001 fdd4 	bl	192a0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   176f8:	2200      	movs	r2, #0
   176fa:	2125      	movs	r1, #37	; 0x25
   176fc:	2008      	movs	r0, #8
   176fe:	f001 fe15 	bl	1932c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17702:	4b35      	ldr	r3, [pc, #212]	; (177d8 <prepare_cb+0x100>)
   17704:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   17706:	a801      	add	r0, sp, #4
   17708:	f001 fdf8 	bl	192fc <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1770c:	4933      	ldr	r1, [pc, #204]	; (177dc <prepare_cb+0x104>)
   1770e:	f240 605b 	movw	r0, #1627	; 0x65b
   17712:	f001 fe99 	bl	19448 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   17716:	7a23      	ldrb	r3, [r4, #8]
   17718:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1771c:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   17720:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   17722:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   17724:	f7ff ff20 	bl	17568 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   17728:	f7fe ff60 	bl	165ec <ull_filter_lll_rl_enabled>
   1772c:	bb98      	cbnz	r0, 17796 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1772e:	7a63      	ldrb	r3, [r4, #9]
   17730:	079b      	lsls	r3, r3, #30
   17732:	d127      	bne.n	17784 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   17734:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   17736:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   17738:	4638      	mov	r0, r7
   1773a:	f7ff fac1 	bl	16cc0 <lll_event_offset_get>
   1773e:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   17740:	686a      	ldr	r2, [r5, #4]
   17742:	f106 0109 	add.w	r1, r6, #9
   17746:	2001      	movs	r0, #1
   17748:	f001 ffd4 	bl	196f4 <radio_tmr_start>
	radio_tmr_end_capture();
   1774c:	f002 f8d2 	bl	198f4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   17750:	4620      	mov	r0, r4
   17752:	f7f7 fe9f 	bl	f494 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   17756:	1c81      	adds	r1, r0, #2
   17758:	4632      	mov	r2, r6
   1775a:	b2c9      	uxtb	r1, r1
   1775c:	4638      	mov	r0, r7
   1775e:	f7ff fab9 	bl	16cd4 <lll_preempt_calc>
   17762:	b930      	cbnz	r0, 17772 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   17764:	4620      	mov	r0, r4
   17766:	f7ff fa45 	bl	16bf4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1776a:	b9d0      	cbnz	r0, 177a2 <prepare_cb+0xca>
}
   1776c:	2000      	movs	r0, #0
   1776e:	b003      	add	sp, #12
   17770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   17772:	481b      	ldr	r0, [pc, #108]	; (177e0 <prepare_cb+0x108>)
   17774:	4621      	mov	r1, r4
   17776:	f001 fd2d 	bl	191d4 <radio_isr_set>
		radio_disable();
   1777a:	f001 fe27 	bl	193cc <radio_disable>
}
   1777e:	2000      	movs	r0, #0
   17780:	b003      	add	sp, #12
   17782:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   17784:	2001      	movs	r0, #1
   17786:	f7fe faa9 	bl	15cdc <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1778a:	7841      	ldrb	r1, [r0, #1]
   1778c:	1c82      	adds	r2, r0, #2
   1778e:	7800      	ldrb	r0, [r0, #0]
   17790:	f001 ff52 	bl	19638 <radio_filter_configure>
   17794:	e7ce      	b.n	17734 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   17796:	7a60      	ldrb	r0, [r4, #9]
   17798:	f010 0003 	ands.w	r0, r0, #3
   1779c:	bf18      	it	ne
   1779e:	2001      	movne	r0, #1
   177a0:	e7f1      	b.n	17786 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   177a2:	4a10      	ldr	r2, [pc, #64]	; (177e4 <prepare_cb+0x10c>)
   177a4:	4910      	ldr	r1, [pc, #64]	; (177e8 <prepare_cb+0x110>)
   177a6:	4811      	ldr	r0, [pc, #68]	; (177ec <prepare_cb+0x114>)
   177a8:	f240 33d1 	movw	r3, #977	; 0x3d1
   177ac:	f007 ffb7 	bl	1f71e <printk>
   177b0:	4040      	eors	r0, r0
   177b2:	f380 8811 	msr	BASEPRI, r0
   177b6:	f04f 0003 	mov.w	r0, #3
   177ba:	df02      	svc	2
}
   177bc:	2000      	movs	r0, #0
   177be:	b003      	add	sp, #12
   177c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   177c2:	f893 3020 	ldrb.w	r3, [r3, #32]
   177c6:	079a      	lsls	r2, r3, #30
   177c8:	d08d      	beq.n	176e6 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   177ca:	4809      	ldr	r0, [pc, #36]	; (177f0 <prepare_cb+0x118>)
   177cc:	4621      	mov	r1, r4
   177ce:	f001 fd01 	bl	191d4 <radio_isr_set>
		radio_disable();
   177d2:	f001 fdfb 	bl	193cc <radio_disable>
		return 0;
   177d6:	e7c9      	b.n	1776c <prepare_cb+0x94>
   177d8:	8e89bed6 	.word	0x8e89bed6
   177dc:	00555555 	.word	0x00555555
   177e0:	00017171 	.word	0x00017171
   177e4:	00025c8c 	.word	0x00025c8c
   177e8:	000253cc 	.word	0x000253cc
   177ec:	000250f0 	.word	0x000250f0
   177f0:	00016e51 	.word	0x00016e51

000177f4 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   177f4:	68c3      	ldr	r3, [r0, #12]
{
   177f6:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   177f8:	681e      	ldr	r6, [r3, #0]
{
   177fa:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   177fc:	f7f4 fa8a 	bl	bd14 <ticker_ticks_now_get>
   17800:	4605      	mov	r5, r0
   17802:	4630      	mov	r0, r6
   17804:	f7ff fa5c 	bl	16cc0 <lll_event_offset_get>
	p->remainder = 0;
   17808:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1780a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1780c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   17810:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   17812:	4620      	mov	r0, r4
}
   17814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   17818:	f7ff bf5e 	b.w	176d8 <prepare_cb>

0001781c <lll_adv_prepare>:
{
   1781c:	b510      	push	{r4, lr}
   1781e:	b082      	sub	sp, #8
   17820:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   17822:	f7ff fc65 	bl	170f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   17826:	2800      	cmp	r0, #0
   17828:	db1a      	blt.n	17860 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1782a:	4a14      	ldr	r2, [pc, #80]	; (1787c <lll_adv_prepare+0x60>)
   1782c:	4914      	ldr	r1, [pc, #80]	; (17880 <lll_adv_prepare+0x64>)
   1782e:	4815      	ldr	r0, [pc, #84]	; (17884 <lll_adv_prepare+0x68>)
   17830:	9400      	str	r4, [sp, #0]
   17832:	2300      	movs	r3, #0
   17834:	f7f7 f9bc 	bl	ebb0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   17838:	b108      	cbz	r0, 1783e <lll_adv_prepare+0x22>
   1783a:	3077      	adds	r0, #119	; 0x77
   1783c:	d101      	bne.n	17842 <lll_adv_prepare+0x26>
}
   1783e:	b002      	add	sp, #8
   17840:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   17842:	4a11      	ldr	r2, [pc, #68]	; (17888 <lll_adv_prepare+0x6c>)
   17844:	4911      	ldr	r1, [pc, #68]	; (1788c <lll_adv_prepare+0x70>)
   17846:	4812      	ldr	r0, [pc, #72]	; (17890 <lll_adv_prepare+0x74>)
   17848:	f240 239d 	movw	r3, #669	; 0x29d
   1784c:	f007 ff67 	bl	1f71e <printk>
   17850:	4040      	eors	r0, r0
   17852:	f380 8811 	msr	BASEPRI, r0
   17856:	f04f 0003 	mov.w	r0, #3
   1785a:	df02      	svc	2
}
   1785c:	b002      	add	sp, #8
   1785e:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   17860:	4a09      	ldr	r2, [pc, #36]	; (17888 <lll_adv_prepare+0x6c>)
   17862:	490c      	ldr	r1, [pc, #48]	; (17894 <lll_adv_prepare+0x78>)
   17864:	480a      	ldr	r0, [pc, #40]	; (17890 <lll_adv_prepare+0x74>)
   17866:	f240 239a 	movw	r3, #666	; 0x29a
   1786a:	f007 ff58 	bl	1f71e <printk>
   1786e:	4040      	eors	r0, r0
   17870:	f380 8811 	msr	BASEPRI, r0
   17874:	f04f 0003 	mov.w	r0, #3
   17878:	df02      	svc	2
   1787a:	e7d6      	b.n	1782a <lll_adv_prepare+0xe>
   1787c:	000176d9 	.word	0x000176d9
   17880:	000172d9 	.word	0x000172d9
   17884:	00017269 	.word	0x00017269
   17888:	00025c8c 	.word	0x00025c8c
   1788c:	00025d10 	.word	0x00025d10
   17890:	000250f0 	.word	0x000250f0
   17894:	00025c3c 	.word	0x00025c3c

00017898 <lll_adv_scan_req_check>:
{
   17898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1789c:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   178a0:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   178a4:	f01c 0f01 	tst.w	ip, #1
{
   178a8:	460f      	mov	r7, r1
   178aa:	4616      	mov	r6, r2
   178ac:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   178ae:	d009      	beq.n	178c4 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   178b0:	f1b8 0f00 	cmp.w	r8, #0
   178b4:	d016      	beq.n	178e4 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   178b6:	783b      	ldrb	r3, [r7, #0]
   178b8:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   178bc:	d019      	beq.n	178f2 <lll_adv_scan_req_check+0x5a>
{
   178be:	2000      	movs	r0, #0
}
   178c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178c4:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   178c6:	f811 0b02 	ldrb.w	r0, [r1], #2
   178ca:	9a07      	ldr	r2, [sp, #28]
   178cc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   178d0:	f7fe fe30 	bl	16534 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   178d4:	2800      	cmp	r0, #0
   178d6:	d1ee      	bne.n	178b6 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   178d8:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   178da:	07db      	lsls	r3, r3, #31
   178dc:	d5ef      	bpl.n	178be <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   178de:	f1b8 0f00 	cmp.w	r8, #0
   178e2:	d1e8      	bne.n	178b6 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   178e4:	9b07      	ldr	r3, [sp, #28]
   178e6:	7818      	ldrb	r0, [r3, #0]
   178e8:	f7fe fdc0 	bl	1646c <ull_filter_lll_irk_in_fal>
   178ec:	2800      	cmp	r0, #0
   178ee:	d1e2      	bne.n	178b6 <lll_adv_scan_req_check+0x1e>
   178f0:	e7e5      	b.n	178be <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   178f2:	2206      	movs	r2, #6
   178f4:	f107 0108 	add.w	r1, r7, #8
   178f8:	4628      	mov	r0, r5
   178fa:	f008 ff04 	bl	20706 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   178fe:	fab0 f080 	clz	r0, r0
   17902:	0940      	lsrs	r0, r0, #5
}
   17904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017908 <lll_adv_connect_ind_check>:
{
   17908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1790c:	461f      	mov	r7, r3
	if (tgt_addr) {
   1790e:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   17910:	f89d 9020 	ldrb.w	r9, [sp, #32]
   17914:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   17918:	4605      	mov	r5, r0
   1791a:	460c      	mov	r4, r1
   1791c:	4690      	mov	r8, r2
	if (tgt_addr) {
   1791e:	b9fb      	cbnz	r3, 17960 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   17920:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   17922:	079a      	lsls	r2, r3, #30
   17924:	d507      	bpl.n	17936 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   17926:	b1a6      	cbz	r6, 17952 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   17928:	7823      	ldrb	r3, [r4, #0]
   1792a:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1792e:	d03a      	beq.n	179a6 <lll_adv_connect_ind_check+0x9e>
   17930:	2000      	movs	r0, #0
}
   17932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   17936:	f811 0b02 	ldrb.w	r0, [r1], #2
   1793a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1793c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17940:	f7fe fdf8 	bl	16534 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   17944:	2800      	cmp	r0, #0
   17946:	d1ef      	bne.n	17928 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   17948:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   1794a:	079b      	lsls	r3, r3, #30
   1794c:	d5f0      	bpl.n	17930 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1794e:	2e00      	cmp	r6, #0
   17950:	d1ea      	bne.n	17928 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   17952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17954:	7818      	ldrb	r0, [r3, #0]
   17956:	f7fe fd89 	bl	1646c <ull_filter_lll_irk_in_fal>
   1795a:	2800      	cmp	r0, #0
   1795c:	d1e4      	bne.n	17928 <lll_adv_connect_ind_check+0x20>
   1795e:	e7e7      	b.n	17930 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   17960:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   17962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17964:	f81a 0b02 	ldrb.w	r0, [sl], #2
   17968:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1796c:	4651      	mov	r1, sl
   1796e:	f7fe fde1 	bl	16534 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   17972:	2800      	cmp	r0, #0
   17974:	d0dc      	beq.n	17930 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   17976:	7823      	ldrb	r3, [r4, #0]
   17978:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1797c:	d1d8      	bne.n	17930 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1797e:	4638      	mov	r0, r7
   17980:	2206      	movs	r2, #6
   17982:	f104 0108 	add.w	r1, r4, #8
   17986:	f008 febe 	bl	20706 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1798a:	2800      	cmp	r0, #0
   1798c:	d1d0      	bne.n	17930 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1798e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17990:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   17992:	28ff      	cmp	r0, #255	; 0xff
   17994:	d011      	beq.n	179ba <lll_adv_connect_ind_check+0xb2>
   17996:	7aab      	ldrb	r3, [r5, #10]
   17998:	2bff      	cmp	r3, #255	; 0xff
   1799a:	d00e      	beq.n	179ba <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1799c:	1ac0      	subs	r0, r0, r3
   1799e:	fab0 f080 	clz	r0, r0
   179a2:	0940      	lsrs	r0, r0, #5
   179a4:	e7c5      	b.n	17932 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   179a6:	2206      	movs	r2, #6
   179a8:	f104 0108 	add.w	r1, r4, #8
   179ac:	4638      	mov	r0, r7
   179ae:	f008 feaa 	bl	20706 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   179b2:	fab0 f080 	clz	r0, r0
   179b6:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   179b8:	e7bb      	b.n	17932 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   179ba:	7823      	ldrb	r3, [r4, #0]
   179bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   179c0:	454b      	cmp	r3, r9
   179c2:	d1b5      	bne.n	17930 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   179c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   179c6:	2206      	movs	r2, #6
   179c8:	4651      	mov	r1, sl
   179ca:	f008 fe9c 	bl	20706 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   179ce:	fab0 f080 	clz	r0, r0
   179d2:	0940      	lsrs	r0, r0, #5
   179d4:	e7ad      	b.n	17932 <lll_adv_connect_ind_check+0x2a>
   179d6:	bf00      	nop

000179d8 <isr_rx>:
{
   179d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   179dc:	b08b      	sub	sp, #44	; 0x2c
   179de:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   179e0:	f001 fd1e 	bl	19420 <radio_is_done>
	if (trx_done) {
   179e4:	b2c0      	uxtb	r0, r0
   179e6:	b950      	cbnz	r0, 179fe <isr_rx+0x26>
	lll_isr_status_reset();
   179e8:	f7ff f9dc 	bl	16da4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   179ec:	487c      	ldr	r0, [pc, #496]	; (17be0 <isr_rx+0x208>)
   179ee:	4621      	mov	r1, r4
   179f0:	f001 fbf0 	bl	191d4 <radio_isr_set>
}
   179f4:	b00b      	add	sp, #44	; 0x2c
   179f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   179fa:	f001 bce7 	b.w	193cc <radio_disable>
		crc_ok = radio_crc_is_valid();
   179fe:	f001 fd2f 	bl	19460 <radio_crc_is_valid>
   17a02:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   17a04:	f001 fe4a 	bl	1969c <radio_filter_has_match>
   17a08:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   17a0a:	f001 fe51 	bl	196b0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   17a0e:	f002 f867 	bl	19ae0 <radio_ar_has_match>
   17a12:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   17a14:	f002 f848 	bl	19aa8 <radio_ar_match_get>
	if (crc_ok) {
   17a18:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   17a1a:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   17a1c:	f001 fe02 	bl	19624 <radio_rssi_is_ready>
	lll_isr_status_reset();
   17a20:	f7ff f9c0 	bl	16da4 <lll_isr_status_reset>
	if (crc_ok) {
   17a24:	2d00      	cmp	r5, #0
   17a26:	d0e1      	beq.n	179ec <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   17a28:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   17a2c:	d17a      	bne.n	17b24 <isr_rx+0x14c>
   17a2e:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   17a30:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   17a32:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   17a36:	f7f6 fd89 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17a3a:	4605      	mov	r5, r0
   17a3c:	2800      	cmp	r0, #0
   17a3e:	f000 80a2 	beq.w	17b86 <isr_rx+0x1ae>
   17a42:	7b23      	ldrb	r3, [r4, #12]
   17a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   17a48:	f105 011c 	add.w	r1, r5, #28
   17a4c:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   17a4e:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   17a50:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   17a54:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17a58:	f000 0c0f 	and.w	ip, r0, #15
   17a5c:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   17a60:	bf08      	it	eq
   17a62:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   17a66:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   17a6a:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17a6e:	7f28      	ldrb	r0, [r5, #28]
   17a70:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   17a74:	bf18      	it	ne
   17a76:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17a7a:	2803      	cmp	r0, #3
   17a7c:	d05a      	beq.n	17b34 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17a7e:	2805      	cmp	r0, #5
   17a80:	d1b4      	bne.n	179ec <isr_rx+0x14>
   17a82:	7f68      	ldrb	r0, [r5, #29]
   17a84:	2822      	cmp	r0, #34	; 0x22
   17a86:	d1b1      	bne.n	179ec <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   17a88:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   17a8a:	2800      	cmp	r0, #0
   17a8c:	d0ae      	beq.n	179ec <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   17a8e:	f890 0020 	ldrb.w	r0, [r0, #32]
   17a92:	0780      	lsls	r0, r0, #30
   17a94:	d4aa      	bmi.n	179ec <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   17a96:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   17a9a:	9003      	str	r0, [sp, #12]
   17a9c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   17aa0:	9700      	str	r7, [sp, #0]
   17aa2:	4620      	mov	r0, r4
   17aa4:	f7ff ff30 	bl	17908 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   17aa8:	2800      	cmp	r0, #0
   17aaa:	d09f      	beq.n	179ec <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   17aac:	2004      	movs	r0, #4
   17aae:	f7f6 fd4d 	bl	e54c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   17ab2:	2800      	cmp	r0, #0
   17ab4:	d09a      	beq.n	179ec <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   17ab6:	484b      	ldr	r0, [pc, #300]	; (17be4 <isr_rx+0x20c>)
   17ab8:	4621      	mov	r1, r4
   17aba:	f001 fb8b 	bl	191d4 <radio_isr_set>
		radio_disable();
   17abe:	f001 fc85 	bl	193cc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   17ac2:	f001 fca3 	bl	1940c <radio_is_ready>
   17ac6:	2800      	cmp	r0, #0
   17ac8:	d14f      	bne.n	17b6a <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   17aca:	6862      	ldr	r2, [r4, #4]
   17acc:	f892 3020 	ldrb.w	r3, [r2, #32]
   17ad0:	f043 0301 	orr.w	r3, r3, #1
   17ad4:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   17ad8:	f7f6 fd56 	bl	e588 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17adc:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   17ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17ae2:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   17ae4:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   17ae6:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   17ae8:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   17aea:	f001 feb7 	bl	1985c <radio_tmr_start_get>
   17aee:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   17af0:	f001 ff08 	bl	19904 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   17af4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   17af6:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   17af8:	4608      	mov	r0, r1
   17afa:	f001 fc55 	bl	193a8 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   17afe:	1a24      	subs	r4, r4, r0
   17b00:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   17b02:	b1ae      	cbz	r6, 17b30 <isr_rx+0x158>
   17b04:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17b08:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   17b0a:	f7f6 fd3d 	bl	e588 <ull_pdu_rx_alloc>
   17b0e:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   17b10:	4629      	mov	r1, r5
   17b12:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   17b14:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   17b16:	f7f6 fd4d 	bl	e5b4 <ull_rx_put>
		ull_rx_sched();
   17b1a:	f7f6 fd5b 	bl	e5d4 <ull_rx_sched>
}
   17b1e:	b00b      	add	sp, #44	; 0x2c
   17b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   17b24:	fa5f f088 	uxtb.w	r0, r8
   17b28:	f7fe fc4e 	bl	163c8 <ull_filter_lll_rl_irk_idx>
   17b2c:	4603      	mov	r3, r0
   17b2e:	e77f      	b.n	17a30 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   17b30:	23ff      	movs	r3, #255	; 0xff
   17b32:	e7e9      	b.n	17b08 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17b34:	7f68      	ldrb	r0, [r5, #29]
   17b36:	280c      	cmp	r0, #12
   17b38:	f47f af58 	bne.w	179ec <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   17b3c:	f1b8 0f00 	cmp.w	r8, #0
   17b40:	f47f af54 	bne.w	179ec <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   17b44:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   17b48:	9001      	str	r0, [sp, #4]
   17b4a:	f8cd 9000 	str.w	r9, [sp]
   17b4e:	4620      	mov	r0, r4
   17b50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17b54:	9105      	str	r1, [sp, #20]
   17b56:	f7ff fe9f 	bl	17898 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   17b5a:	bb10      	cbnz	r0, 17ba2 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17b5c:	7f28      	ldrb	r0, [r5, #28]
   17b5e:	9b07      	ldr	r3, [sp, #28]
   17b60:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   17b64:	f000 000f 	and.w	r0, r0, #15
   17b68:	e789      	b.n	17a7e <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   17b6a:	4a1f      	ldr	r2, [pc, #124]	; (17be8 <isr_rx+0x210>)
   17b6c:	491f      	ldr	r1, [pc, #124]	; (17bec <isr_rx+0x214>)
   17b6e:	4820      	ldr	r0, [pc, #128]	; (17bf0 <isr_rx+0x218>)
   17b70:	f240 53da 	movw	r3, #1498	; 0x5da
   17b74:	f007 fdd3 	bl	1f71e <printk>
   17b78:	4040      	eors	r0, r0
   17b7a:	f380 8811 	msr	BASEPRI, r0
   17b7e:	f04f 0003 	mov.w	r0, #3
   17b82:	df02      	svc	2
   17b84:	e7a1      	b.n	17aca <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   17b86:	4a18      	ldr	r2, [pc, #96]	; (17be8 <isr_rx+0x210>)
   17b88:	491a      	ldr	r1, [pc, #104]	; (17bf4 <isr_rx+0x21c>)
   17b8a:	4819      	ldr	r0, [pc, #100]	; (17bf0 <isr_rx+0x218>)
   17b8c:	f240 537a 	movw	r3, #1402	; 0x57a
   17b90:	f007 fdc5 	bl	1f71e <printk>
   17b94:	4040      	eors	r0, r0
   17b96:	f380 8811 	msr	BASEPRI, r0
   17b9a:	f04f 0003 	mov.w	r0, #3
   17b9e:	df02      	svc	2
   17ba0:	e74f      	b.n	17a42 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   17ba2:	4621      	mov	r1, r4
   17ba4:	480e      	ldr	r0, [pc, #56]	; (17be0 <isr_rx+0x208>)
   17ba6:	f001 fb15 	bl	191d4 <radio_isr_set>
		radio_switch_complete_and_disable();
   17baa:	f001 fd13 	bl	195d4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   17bae:	7e23      	ldrb	r3, [r4, #24]
   17bb0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   17bb4:	69e0      	ldr	r0, [r4, #28]
   17bb6:	f001 fbe7 	bl	19388 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17bba:	f001 fc27 	bl	1940c <radio_is_ready>
   17bbe:	2800      	cmp	r0, #0
   17bc0:	d0ad      	beq.n	17b1e <isr_rx+0x146>
   17bc2:	4a09      	ldr	r2, [pc, #36]	; (17be8 <isr_rx+0x210>)
   17bc4:	4909      	ldr	r1, [pc, #36]	; (17bec <isr_rx+0x214>)
   17bc6:	480a      	ldr	r0, [pc, #40]	; (17bf0 <isr_rx+0x218>)
   17bc8:	f240 5393 	movw	r3, #1427	; 0x593
   17bcc:	f007 fda7 	bl	1f71e <printk>
   17bd0:	4040      	eors	r0, r0
   17bd2:	f380 8811 	msr	BASEPRI, r0
   17bd6:	f04f 0003 	mov.w	r0, #3
   17bda:	df02      	svc	2
		if (!err) {
   17bdc:	e79f      	b.n	17b1e <isr_rx+0x146>
   17bde:	bf00      	nop
   17be0:	00017689 	.word	0x00017689
   17be4:	00017171 	.word	0x00017171
   17be8:	00025c8c 	.word	0x00025c8c
   17bec:	00025ce0 	.word	0x00025ce0
   17bf0:	000250f0 	.word	0x000250f0
   17bf4:	00025cd8 	.word	0x00025cd8

00017bf8 <common_prepare_cb>:
{
   17bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   17bfc:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   17bfe:	f994 3016 	ldrsb.w	r3, [r4, #22]
   17c02:	2b00      	cmp	r3, #0
{
   17c04:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   17c06:	f2c0 810e 	blt.w	17e26 <common_prepare_cb+0x22e>
   17c0a:	6863      	ldr	r3, [r4, #4]
   17c0c:	4605      	mov	r5, r0
   17c0e:	460f      	mov	r7, r1
   17c10:	2b00      	cmp	r3, #0
   17c12:	f040 80fd 	bne.w	17e10 <common_prepare_cb+0x218>
	lll->state = 0U;
   17c16:	7da3      	ldrb	r3, [r4, #22]
   17c18:	f36f 0300 	bfc	r3, #0, #1
   17c1c:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   17c1e:	f001 fb1b 	bl	19258 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   17c22:	2000      	movs	r0, #0
   17c24:	f001 fb4c 	bl	192c0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   17c28:	2100      	movs	r1, #0
   17c2a:	4608      	mov	r0, r1
   17c2c:	f001 fb38 	bl	192a0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   17c30:	2200      	movs	r2, #0
   17c32:	2125      	movs	r1, #37	; 0x25
   17c34:	2008      	movs	r0, #8
   17c36:	f001 fb79 	bl	1932c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17c3a:	2001      	movs	r0, #1
   17c3c:	f7f6 fc86 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17c40:	4606      	mov	r6, r0
   17c42:	2800      	cmp	r0, #0
   17c44:	f000 80d6 	beq.w	17df4 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   17c48:	f106 001c 	add.w	r0, r6, #28
   17c4c:	f001 fb96 	bl	1937c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17c50:	4b7a      	ldr	r3, [pc, #488]	; (17e3c <common_prepare_cb+0x244>)
   17c52:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   17c54:	a80b      	add	r0, sp, #44	; 0x2c
   17c56:	f001 fb51 	bl	192fc <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   17c5a:	4979      	ldr	r1, [pc, #484]	; (17e40 <common_prepare_cb+0x248>)
   17c5c:	f240 605b 	movw	r0, #1627	; 0x65b
   17c60:	f001 fbf2 	bl	19448 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   17c64:	7da0      	ldrb	r0, [r4, #22]
   17c66:	f3c0 0041 	ubfx	r0, r0, #1, #2
   17c6a:	3025      	adds	r0, #37	; 0x25
   17c6c:	f7ff f842 	bl	16cf4 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   17c70:	4874      	ldr	r0, [pc, #464]	; (17e44 <common_prepare_cb+0x24c>)
   17c72:	4621      	mov	r1, r4
   17c74:	f001 faae 	bl	191d4 <radio_isr_set>
	} else if (lll->type ||
   17c78:	7da3      	ldrb	r3, [r4, #22]
   17c7a:	069b      	lsls	r3, r3, #26
   17c7c:	d403      	bmi.n	17c86 <common_prepare_cb+0x8e>
		   lll->conn) {
   17c7e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   17c80:	2b00      	cmp	r3, #0
   17c82:	f000 8091 	beq.w	17da8 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   17c86:	2096      	movs	r0, #150	; 0x96
   17c88:	f001 fd28 	bl	196dc <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   17c8c:	2300      	movs	r3, #0
   17c8e:	461a      	mov	r2, r3
   17c90:	4619      	mov	r1, r3
   17c92:	4618      	mov	r0, r3
   17c94:	f001 fc3e 	bl	19514 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   17c98:	f7fe fca8 	bl	165ec <ull_filter_lll_rl_enabled>
   17c9c:	2800      	cmp	r0, #0
   17c9e:	d135      	bne.n	17d0c <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   17ca0:	7da3      	ldrb	r3, [r4, #22]
   17ca2:	f013 0f18 	tst.w	r3, #24
   17ca6:	d152      	bne.n	17d4e <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   17ca8:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   17cac:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   17cae:	4640      	mov	r0, r8
   17cb0:	f7ff f806 	bl	16cc0 <lll_event_offset_get>
   17cb4:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   17cb6:	686a      	ldr	r2, [r5, #4]
   17cb8:	f106 0109 	add.w	r1, r6, #9
   17cbc:	2000      	movs	r0, #0
   17cbe:	f001 fd19 	bl	196f4 <radio_tmr_start>
	radio_tmr_end_capture();
   17cc2:	f001 fe17 	bl	198f4 <radio_tmr_end_capture>
	radio_rssi_measure();
   17cc6:	f001 fc95 	bl	195f4 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   17cca:	4620      	mov	r0, r4
   17ccc:	f7f7 fdf0 	bl	f8b0 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   17cd0:	1d01      	adds	r1, r0, #4
   17cd2:	b2c9      	uxtb	r1, r1
   17cd4:	4640      	mov	r0, r8
   17cd6:	4632      	mov	r2, r6
   17cd8:	f7fe fffc 	bl	16cd4 <lll_preempt_calc>
   17cdc:	bb68      	cbnz	r0, 17d3a <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   17cde:	b917      	cbnz	r7, 17ce6 <common_prepare_cb+0xee>
   17ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17ce2:	2b00      	cmp	r3, #0
   17ce4:	d163      	bne.n	17dae <common_prepare_cb+0x1b6>
		if (lll->conn) {
   17ce6:	6863      	ldr	r3, [r4, #4]
   17ce8:	b143      	cbz	r3, 17cfc <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   17cea:	4b57      	ldr	r3, [pc, #348]	; (17e48 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   17cec:	2201      	movs	r2, #1
   17cee:	2102      	movs	r1, #2
   17cf0:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   17cf2:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   17cf4:	f7f2 fd06 	bl	a704 <mayfly_enqueue>
			LL_ASSERT(!retval);
   17cf8:	2800      	cmp	r0, #0
   17cfa:	d142      	bne.n	17d82 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   17cfc:	4620      	mov	r0, r4
   17cfe:	f7fe ff79 	bl	16bf4 <lll_prepare_done>
		LL_ASSERT(!ret);
   17d02:	bb68      	cbnz	r0, 17d60 <common_prepare_cb+0x168>
}
   17d04:	2000      	movs	r0, #0
   17d06:	b00c      	add	sp, #48	; 0x30
   17d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   17d0c:	7da0      	ldrb	r0, [r4, #22]
   17d0e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   17d12:	f7fd ffe3 	bl	15cdc <ull_filter_lll_get>
   17d16:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17d18:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   17d1c:	f7fe fae0 	bl	162e0 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   17d20:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17d22:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   17d24:	1cb2      	adds	r2, r6, #2
   17d26:	7830      	ldrb	r0, [r6, #0]
   17d28:	f001 fc86 	bl	19638 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   17d2c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   17d30:	2200      	movs	r2, #0
   17d32:	4641      	mov	r1, r8
   17d34:	f001 fe84 	bl	19a40 <radio_ar_configure>
   17d38:	e7b6      	b.n	17ca8 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   17d3a:	4844      	ldr	r0, [pc, #272]	; (17e4c <common_prepare_cb+0x254>)
   17d3c:	4621      	mov	r1, r4
   17d3e:	f001 fa49 	bl	191d4 <radio_isr_set>
		radio_disable();
   17d42:	f001 fb43 	bl	193cc <radio_disable>
}
   17d46:	2000      	movs	r0, #0
   17d48:	b00c      	add	sp, #48	; 0x30
   17d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   17d4e:	2001      	movs	r0, #1
   17d50:	f7fd ffc4 	bl	15cdc <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   17d54:	7841      	ldrb	r1, [r0, #1]
   17d56:	1c82      	adds	r2, r0, #2
   17d58:	7800      	ldrb	r0, [r0, #0]
   17d5a:	f001 fc6d 	bl	19638 <radio_filter_configure>
   17d5e:	e7a3      	b.n	17ca8 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   17d60:	4a3b      	ldr	r2, [pc, #236]	; (17e50 <common_prepare_cb+0x258>)
   17d62:	493c      	ldr	r1, [pc, #240]	; (17e54 <common_prepare_cb+0x25c>)
   17d64:	483c      	ldr	r0, [pc, #240]	; (17e58 <common_prepare_cb+0x260>)
   17d66:	f44f 7305 	mov.w	r3, #532	; 0x214
   17d6a:	f007 fcd8 	bl	1f71e <printk>
   17d6e:	4040      	eors	r0, r0
   17d70:	f380 8811 	msr	BASEPRI, r0
   17d74:	f04f 0003 	mov.w	r0, #3
   17d78:	df02      	svc	2
}
   17d7a:	2000      	movs	r0, #0
   17d7c:	b00c      	add	sp, #48	; 0x30
   17d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   17d82:	4a33      	ldr	r2, [pc, #204]	; (17e50 <common_prepare_cb+0x258>)
   17d84:	4935      	ldr	r1, [pc, #212]	; (17e5c <common_prepare_cb+0x264>)
   17d86:	4834      	ldr	r0, [pc, #208]	; (17e58 <common_prepare_cb+0x260>)
   17d88:	f240 230f 	movw	r3, #527	; 0x20f
   17d8c:	f007 fcc7 	bl	1f71e <printk>
   17d90:	4040      	eors	r0, r0
   17d92:	f380 8811 	msr	BASEPRI, r0
   17d96:	f04f 0003 	mov.w	r0, #3
   17d9a:	df02      	svc	2
		ret = lll_prepare_done(lll);
   17d9c:	4620      	mov	r0, r4
   17d9e:	f7fe ff29 	bl	16bf4 <lll_prepare_done>
		LL_ASSERT(!ret);
   17da2:	2800      	cmp	r0, #0
   17da4:	d0ae      	beq.n	17d04 <common_prepare_cb+0x10c>
   17da6:	e7db      	b.n	17d60 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   17da8:	f001 fc14 	bl	195d4 <radio_switch_complete_and_disable>
   17dac:	e774      	b.n	17c98 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17dae:	4a2c      	ldr	r2, [pc, #176]	; (17e60 <common_prepare_cb+0x268>)
   17db0:	9207      	str	r2, [sp, #28]
   17db2:	4a2c      	ldr	r2, [pc, #176]	; (17e64 <common_prepare_cb+0x26c>)
   17db4:	9205      	str	r2, [sp, #20]
   17db6:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   17dba:	9300      	str	r3, [sp, #0]
   17dbc:	9208      	str	r2, [sp, #32]
   17dbe:	4633      	mov	r3, r6
   17dc0:	e9cd 7703 	strd	r7, r7, [sp, #12]
   17dc4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   17dc8:	9406      	str	r4, [sp, #24]
   17dca:	4639      	mov	r1, r7
   17dcc:	2203      	movs	r2, #3
   17dce:	f7f3 fe77 	bl	bac0 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17dd2:	f030 0302 	bics.w	r3, r0, #2
   17dd6:	d086      	beq.n	17ce6 <common_prepare_cb+0xee>
   17dd8:	4a1d      	ldr	r2, [pc, #116]	; (17e50 <common_prepare_cb+0x258>)
   17dda:	4923      	ldr	r1, [pc, #140]	; (17e68 <common_prepare_cb+0x270>)
   17ddc:	481e      	ldr	r0, [pc, #120]	; (17e58 <common_prepare_cb+0x260>)
   17dde:	f240 13fb 	movw	r3, #507	; 0x1fb
   17de2:	f007 fc9c 	bl	1f71e <printk>
   17de6:	4040      	eors	r0, r0
   17de8:	f380 8811 	msr	BASEPRI, r0
   17dec:	f04f 0003 	mov.w	r0, #3
   17df0:	df02      	svc	2
   17df2:	e778      	b.n	17ce6 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   17df4:	4a16      	ldr	r2, [pc, #88]	; (17e50 <common_prepare_cb+0x258>)
   17df6:	491d      	ldr	r1, [pc, #116]	; (17e6c <common_prepare_cb+0x274>)
   17df8:	4817      	ldr	r0, [pc, #92]	; (17e58 <common_prepare_cb+0x260>)
   17dfa:	f240 138d 	movw	r3, #397	; 0x18d
   17dfe:	f007 fc8e 	bl	1f71e <printk>
   17e02:	4040      	eors	r0, r0
   17e04:	f380 8811 	msr	BASEPRI, r0
   17e08:	f04f 0003 	mov.w	r0, #3
   17e0c:	df02      	svc	2
   17e0e:	e71b      	b.n	17c48 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   17e10:	6863      	ldr	r3, [r4, #4]
   17e12:	f893 3020 	ldrb.w	r3, [r3, #32]
   17e16:	07d9      	lsls	r1, r3, #31
   17e18:	d405      	bmi.n	17e26 <common_prepare_cb+0x22e>
   17e1a:	6863      	ldr	r3, [r4, #4]
   17e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
   17e20:	079a      	lsls	r2, r3, #30
   17e22:	f57f aef8 	bpl.w	17c16 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   17e26:	4812      	ldr	r0, [pc, #72]	; (17e70 <common_prepare_cb+0x278>)
   17e28:	4621      	mov	r1, r4
   17e2a:	f001 f9d3 	bl	191d4 <radio_isr_set>
		radio_disable();
   17e2e:	f001 facd 	bl	193cc <radio_disable>
}
   17e32:	2000      	movs	r0, #0
   17e34:	b00c      	add	sp, #48	; 0x30
   17e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e3a:	bf00      	nop
   17e3c:	8e89bed6 	.word	0x8e89bed6
   17e40:	00555555 	.word	0x00555555
   17e44:	00002e11 	.word	0x00002e11
   17e48:	20000768 	.word	0x20000768
   17e4c:	00017f1d 	.word	0x00017f1d
   17e50:	00025d24 	.word	0x00025d24
   17e54:	000253cc 	.word	0x000253cc
   17e58:	000250f0 	.word	0x000250f0
   17e5c:	000253f4 	.word	0x000253f4
   17e60:	00018041 	.word	0x00018041
   17e64:	000180e9 	.word	0x000180e9
   17e68:	000254a0 	.word	0x000254a0
   17e6c:	00025cd8 	.word	0x00025cd8
   17e70:	00016e51 	.word	0x00016e51

00017e74 <prepare_cb>:
	return common_prepare_cb(p, false);
   17e74:	2100      	movs	r1, #0
   17e76:	f7ff bebf 	b.w	17bf8 <common_prepare_cb>
   17e7a:	bf00      	nop

00017e7c <isr_common_done>:
{
   17e7c:	b530      	push	{r4, r5, lr}
   17e7e:	4604      	mov	r4, r0
   17e80:	b083      	sub	sp, #12
	lll_isr_status_reset();
   17e82:	f7fe ff8f 	bl	16da4 <lll_isr_status_reset>
	lll->state = 0U;
   17e86:	7da3      	ldrb	r3, [r4, #22]
   17e88:	f36f 0300 	bfc	r3, #0, #1
   17e8c:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   17e8e:	069b      	lsls	r3, r3, #26
   17e90:	d401      	bmi.n	17e96 <isr_common_done+0x1a>
		   lll->conn) {
   17e92:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   17e94:	b3b3      	cbz	r3, 17f04 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   17e96:	2096      	movs	r0, #150	; 0x96
   17e98:	f001 fc20 	bl	196dc <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   17e9c:	2300      	movs	r3, #0
   17e9e:	461a      	mov	r2, r3
   17ea0:	4619      	mov	r1, r3
   17ea2:	4618      	mov	r0, r3
   17ea4:	f001 fb36 	bl	19514 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17ea8:	2001      	movs	r0, #1
   17eaa:	f7f6 fb4f 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17eae:	4605      	mov	r5, r0
   17eb0:	b1d0      	cbz	r0, 17ee8 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   17eb2:	f105 001c 	add.w	r0, r5, #28
   17eb6:	f001 fa61 	bl	1937c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   17eba:	f7fe fb97 	bl	165ec <ull_filter_lll_rl_enabled>
   17ebe:	b940      	cbnz	r0, 17ed2 <isr_common_done+0x56>
	radio_rssi_measure();
   17ec0:	f001 fb98 	bl	195f4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   17ec4:	4811      	ldr	r0, [pc, #68]	; (17f0c <isr_common_done+0x90>)
   17ec6:	4621      	mov	r1, r4
}
   17ec8:	b003      	add	sp, #12
   17eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   17ece:	f001 b981 	b.w	191d4 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17ed2:	f10d 0007 	add.w	r0, sp, #7
   17ed6:	f7fe fa03 	bl	162e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17eda:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17edc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17ede:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17ee2:	f001 fdad 	bl	19a40 <radio_ar_configure>
   17ee6:	e7eb      	b.n	17ec0 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   17ee8:	4a09      	ldr	r2, [pc, #36]	; (17f10 <isr_common_done+0x94>)
   17eea:	490a      	ldr	r1, [pc, #40]	; (17f14 <isr_common_done+0x98>)
   17eec:	480a      	ldr	r0, [pc, #40]	; (17f18 <isr_common_done+0x9c>)
   17eee:	f44f 7352 	mov.w	r3, #840	; 0x348
   17ef2:	f007 fc14 	bl	1f71e <printk>
   17ef6:	4040      	eors	r0, r0
   17ef8:	f380 8811 	msr	BASEPRI, r0
   17efc:	f04f 0003 	mov.w	r0, #3
   17f00:	df02      	svc	2
   17f02:	e7d6      	b.n	17eb2 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   17f04:	f001 fb66 	bl	195d4 <radio_switch_complete_and_disable>
   17f08:	e7ce      	b.n	17ea8 <isr_common_done+0x2c>
   17f0a:	bf00      	nop
   17f0c:	00002e11 	.word	0x00002e11
   17f10:	00025d24 	.word	0x00025d24
   17f14:	00025cd8 	.word	0x00025cd8
   17f18:	000250f0 	.word	0x000250f0

00017f1c <isr_abort>:
{
   17f1c:	b510      	push	{r4, lr}
   17f1e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   17f20:	f7fe ff40 	bl	16da4 <lll_isr_status_reset>
	radio_filter_disable();
   17f24:	f001 fba8 	bl	19678 <radio_filter_disable>
	lll_isr_cleanup(param);
   17f28:	4620      	mov	r0, r4
}
   17f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17f2e:	f7fe bf47 	b.w	16dc0 <lll_isr_cleanup>
   17f32:	bf00      	nop

00017f34 <isr_done>:
{
   17f34:	b508      	push	{r3, lr}
	isr_common_done(param);
   17f36:	f7ff ffa1 	bl	17e7c <isr_common_done>
	radio_rx_enable();
   17f3a:	f001 fa3b 	bl	193b4 <radio_rx_enable>
}
   17f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   17f42:	f001 bcd7 	b.w	198f4 <radio_tmr_end_capture>
   17f46:	bf00      	nop

00017f48 <isr_tx>:
{
   17f48:	b570      	push	{r4, r5, r6, lr}
   17f4a:	b082      	sub	sp, #8
   17f4c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   17f4e:	f7fe ff17 	bl	16d80 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   17f52:	f001 fb3f 	bl	195d4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   17f56:	2001      	movs	r0, #1
   17f58:	f7f6 faf8 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17f5c:	4604      	mov	r4, r0
   17f5e:	2800      	cmp	r0, #0
   17f60:	d03f      	beq.n	17fe2 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   17f62:	f104 001c 	add.w	r0, r4, #28
   17f66:	f001 fa09 	bl	1937c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   17f6a:	f001 fa4f 	bl	1940c <radio_is_ready>
   17f6e:	b9e0      	cbnz	r0, 17faa <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   17f70:	f7fe fb3c 	bl	165ec <ull_filter_lll_rl_enabled>
   17f74:	bb50      	cbnz	r0, 17fcc <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17f76:	f001 fccb 	bl	19910 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   17f7a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17f7c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   17f7e:	4608      	mov	r0, r1
   17f80:	f001 fa12 	bl	193a8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   17f84:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   17f86:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   17f88:	4608      	mov	r0, r1
   17f8a:	f001 fa09 	bl	193a0 <radio_tx_chain_delay_get>
   17f8e:	4434      	add	r4, r6
   17f90:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   17f92:	1a20      	subs	r0, r4, r0
   17f94:	f001 fc74 	bl	19880 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   17f98:	f001 fb2c 	bl	195f4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   17f9c:	4818      	ldr	r0, [pc, #96]	; (18000 <isr_tx+0xb8>)
   17f9e:	4629      	mov	r1, r5
}
   17fa0:	b002      	add	sp, #8
   17fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   17fa6:	f001 b915 	b.w	191d4 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   17faa:	4a16      	ldr	r2, [pc, #88]	; (18004 <isr_tx+0xbc>)
   17fac:	4916      	ldr	r1, [pc, #88]	; (18008 <isr_tx+0xc0>)
   17fae:	4817      	ldr	r0, [pc, #92]	; (1800c <isr_tx+0xc4>)
   17fb0:	f240 3306 	movw	r3, #774	; 0x306
   17fb4:	f007 fbb3 	bl	1f71e <printk>
   17fb8:	4040      	eors	r0, r0
   17fba:	f380 8811 	msr	BASEPRI, r0
   17fbe:	f04f 0003 	mov.w	r0, #3
   17fc2:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   17fc4:	f7fe fb12 	bl	165ec <ull_filter_lll_rl_enabled>
   17fc8:	2800      	cmp	r0, #0
   17fca:	d0d4      	beq.n	17f76 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17fcc:	f10d 0007 	add.w	r0, sp, #7
   17fd0:	f7fe f986 	bl	162e0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17fd4:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17fd6:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17fd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17fdc:	f001 fd30 	bl	19a40 <radio_ar_configure>
   17fe0:	e7c9      	b.n	17f76 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   17fe2:	4a08      	ldr	r2, [pc, #32]	; (18004 <isr_tx+0xbc>)
   17fe4:	490a      	ldr	r1, [pc, #40]	; (18010 <isr_tx+0xc8>)
   17fe6:	4809      	ldr	r0, [pc, #36]	; (1800c <isr_tx+0xc4>)
   17fe8:	f240 3302 	movw	r3, #770	; 0x302
   17fec:	f007 fb97 	bl	1f71e <printk>
   17ff0:	4040      	eors	r0, r0
   17ff2:	f380 8811 	msr	BASEPRI, r0
   17ff6:	f04f 0003 	mov.w	r0, #3
   17ffa:	df02      	svc	2
   17ffc:	e7b1      	b.n	17f62 <isr_tx+0x1a>
   17ffe:	bf00      	nop
   18000:	00002e11 	.word	0x00002e11
   18004:	00025d24 	.word	0x00025d24
   18008:	00025ce0 	.word	0x00025ce0
   1800c:	000250f0 	.word	0x000250f0
   18010:	00025cd8 	.word	0x00025cd8

00018014 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   18014:	68c3      	ldr	r3, [r0, #12]
{
   18016:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   18018:	681e      	ldr	r6, [r3, #0]
{
   1801a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1801c:	f7f3 fe7a 	bl	bd14 <ticker_ticks_now_get>
   18020:	4605      	mov	r5, r0
   18022:	4630      	mov	r0, r6
   18024:	f7fe fe4c 	bl	16cc0 <lll_event_offset_get>
	p->remainder = 0;
   18028:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1802a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1802c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   18030:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   18032:	4620      	mov	r0, r4
   18034:	2101      	movs	r1, #1
}
   18036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1803a:	f7ff bddd 	b.w	17bf8 <common_prepare_cb>
   1803e:	bf00      	nop

00018040 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18040:	b900      	cbnz	r0, 18044 <ticker_op_start_cb+0x4>
   18042:	4770      	bx	lr
{
   18044:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18046:	4a07      	ldr	r2, [pc, #28]	; (18064 <ticker_op_start_cb+0x24>)
   18048:	4907      	ldr	r1, [pc, #28]	; (18068 <ticker_op_start_cb+0x28>)
   1804a:	4808      	ldr	r0, [pc, #32]	; (1806c <ticker_op_start_cb+0x2c>)
   1804c:	f44f 7324 	mov.w	r3, #656	; 0x290
   18050:	f007 fb65 	bl	1f71e <printk>
   18054:	4040      	eors	r0, r0
   18056:	f380 8811 	msr	BASEPRI, r0
   1805a:	f04f 0003 	mov.w	r0, #3
   1805e:	df02      	svc	2
}
   18060:	bd08      	pop	{r3, pc}
   18062:	bf00      	nop
   18064:	00025d24 	.word	0x00025d24
   18068:	00025660 	.word	0x00025660
   1806c:	000250f0 	.word	0x000250f0

00018070 <is_abort_cb>:
	if (next != curr) {
   18070:	4281      	cmp	r1, r0
{
   18072:	b508      	push	{r3, lr}
	if (next != curr) {
   18074:	d00d      	beq.n	18092 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   18076:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   18078:	b113      	cbz	r3, 18080 <is_abort_cb+0x10>
			return -ECANCELED;
   1807a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1807e:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   18080:	4b14      	ldr	r3, [pc, #80]	; (180d4 <is_abort_cb+0x64>)
   18082:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   18084:	f7ff f834 	bl	170f0 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   18088:	2800      	cmp	r0, #0
   1808a:	db12      	blt.n	180b2 <is_abort_cb+0x42>
   1808c:	f06f 000a 	mvn.w	r0, #10
}
   18090:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   18092:	684b      	ldr	r3, [r1, #4]
   18094:	b123      	cbz	r3, 180a0 <is_abort_cb+0x30>
   18096:	684b      	ldr	r3, [r1, #4]
   18098:	f893 3020 	ldrb.w	r3, [r3, #32]
   1809c:	07db      	lsls	r3, r3, #31
   1809e:	d406      	bmi.n	180ae <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   180a0:	480d      	ldr	r0, [pc, #52]	; (180d8 <is_abort_cb+0x68>)
   180a2:	f001 f897 	bl	191d4 <radio_isr_set>
	radio_disable();
   180a6:	f001 f991 	bl	193cc <radio_disable>
	return 0;
   180aa:	2000      	movs	r0, #0
}
   180ac:	bd08      	pop	{r3, pc}
		return 0;
   180ae:	2000      	movs	r0, #0
}
   180b0:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   180b2:	4a0a      	ldr	r2, [pc, #40]	; (180dc <is_abort_cb+0x6c>)
   180b4:	490a      	ldr	r1, [pc, #40]	; (180e0 <is_abort_cb+0x70>)
   180b6:	480b      	ldr	r0, [pc, #44]	; (180e4 <is_abort_cb+0x74>)
   180b8:	f240 2332 	movw	r3, #562	; 0x232
   180bc:	f007 fb2f 	bl	1f71e <printk>
   180c0:	4040      	eors	r0, r0
   180c2:	f380 8811 	msr	BASEPRI, r0
   180c6:	f04f 0003 	mov.w	r0, #3
   180ca:	df02      	svc	2
   180cc:	f06f 000a 	mvn.w	r0, #10
}
   180d0:	bd08      	pop	{r3, pc}
   180d2:	bf00      	nop
   180d4:	00018015 	.word	0x00018015
   180d8:	00002d71 	.word	0x00002d71
   180dc:	00025d24 	.word	0x00025d24
   180e0:	00025c3c 	.word	0x00025c3c
   180e4:	000250f0 	.word	0x000250f0

000180e8 <ticker_stop_cb>:
{
   180e8:	b508      	push	{r3, lr}
	mfy.param = param;
   180ea:	4b0c      	ldr	r3, [pc, #48]	; (1811c <ticker_stop_cb+0x34>)
{
   180ec:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   180ee:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   180f0:	2200      	movs	r2, #0
   180f2:	4611      	mov	r1, r2
   180f4:	2001      	movs	r0, #1
   180f6:	f7f2 fb05 	bl	a704 <mayfly_enqueue>
	LL_ASSERT(!ret);
   180fa:	b900      	cbnz	r0, 180fe <ticker_stop_cb+0x16>
}
   180fc:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   180fe:	4a08      	ldr	r2, [pc, #32]	; (18120 <ticker_stop_cb+0x38>)
   18100:	4908      	ldr	r1, [pc, #32]	; (18124 <ticker_stop_cb+0x3c>)
   18102:	4809      	ldr	r0, [pc, #36]	; (18128 <ticker_stop_cb+0x40>)
   18104:	f240 2389 	movw	r3, #649	; 0x289
   18108:	f007 fb09 	bl	1f71e <printk>
   1810c:	4040      	eors	r0, r0
   1810e:	f380 8811 	msr	BASEPRI, r0
   18112:	f04f 0003 	mov.w	r0, #3
   18116:	df02      	svc	2
}
   18118:	bd08      	pop	{r3, pc}
   1811a:	bf00      	nop
   1811c:	20000758 	.word	0x20000758
   18120:	00025d24 	.word	0x00025d24
   18124:	000253cc 	.word	0x000253cc
   18128:	000250f0 	.word	0x000250f0

0001812c <isr_done_cleanup>:
{
   1812c:	b530      	push	{r4, r5, lr}
   1812e:	4604      	mov	r4, r0
   18130:	b085      	sub	sp, #20
	lll_isr_status_reset();
   18132:	f7fe fe37 	bl	16da4 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   18136:	f10d 010f 	add.w	r1, sp, #15
   1813a:	4620      	mov	r0, r4
   1813c:	f7fe fdae 	bl	16c9c <lll_is_done>
   18140:	b9c8      	cbnz	r0, 18176 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   18142:	4605      	mov	r5, r0
   18144:	f001 fa98 	bl	19678 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   18148:	7da2      	ldrb	r2, [r4, #22]
   1814a:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1814e:	3301      	adds	r3, #1
   18150:	f003 0303 	and.w	r3, r3, #3
   18154:	2b03      	cmp	r3, #3
   18156:	bf14      	ite	ne
   18158:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1815c:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   18160:	2300      	movs	r3, #0
		lll->chan = 0U;
   18162:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   18164:	4619      	mov	r1, r3
   18166:	9300      	str	r3, [sp, #0]
   18168:	2203      	movs	r2, #3
   1816a:	4618      	mov	r0, r3
   1816c:	f7f3 fd32 	bl	bbd4 <ticker_stop>
	lll_isr_cleanup(param);
   18170:	4620      	mov	r0, r4
   18172:	f7fe fe25 	bl	16dc0 <lll_isr_cleanup>
}
   18176:	b005      	add	sp, #20
   18178:	bd30      	pop	{r4, r5, pc}
   1817a:	bf00      	nop

0001817c <isr_scan_tgta_check>:
{
   1817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18180:	f89d 9020 	ldrb.w	r9, [sp, #32]
   18184:	4616      	mov	r6, r2
   18186:	4680      	mov	r8, r0
   18188:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1818a:	464a      	mov	r2, r9
   1818c:	4619      	mov	r1, r3
   1818e:	4630      	mov	r0, r6
{
   18190:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   18192:	f7fe fa09 	bl	165a8 <ull_filter_lll_rl_addr_resolve>
   18196:	4604      	mov	r4, r0
   18198:	b9a0      	cbnz	r0, 181c4 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1819a:	b11d      	cbz	r5, 181a4 <isr_scan_tgta_check+0x28>
   1819c:	f898 3017 	ldrb.w	r3, [r8, #23]
   181a0:	079a      	lsls	r2, r3, #30
   181a2:	d41c      	bmi.n	181de <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   181a4:	f898 5016 	ldrb.w	r5, [r8, #22]
   181a8:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   181ac:	42b3      	cmp	r3, r6
   181ae:	d00c      	beq.n	181ca <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   181b0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   181b4:	07ab      	lsls	r3, r5, #30
   181b6:	d505      	bpl.n	181c4 <isr_scan_tgta_check+0x48>
   181b8:	b126      	cbz	r6, 181c4 <isr_scan_tgta_check+0x48>
   181ba:	797b      	ldrb	r3, [r7, #5]
   181bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   181c0:	2b40      	cmp	r3, #64	; 0x40
   181c2:	d014      	beq.n	181ee <isr_scan_tgta_check+0x72>
}
   181c4:	4620      	mov	r0, r4
   181c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   181ca:	2206      	movs	r2, #6
   181cc:	4639      	mov	r1, r7
   181ce:	f108 0019 	add.w	r0, r8, #25
   181d2:	f008 fa98 	bl	20706 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   181d6:	b140      	cbz	r0, 181ea <isr_scan_tgta_check+0x6e>
   181d8:	f898 5016 	ldrb.w	r5, [r8, #22]
   181dc:	e7e8      	b.n	181b0 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   181de:	4648      	mov	r0, r9
   181e0:	f7fe f864 	bl	162ac <ull_filter_lll_lrpa_get>
   181e4:	2800      	cmp	r0, #0
   181e6:	d1ed      	bne.n	181c4 <isr_scan_tgta_check+0x48>
   181e8:	e7dc      	b.n	181a4 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   181ea:	2401      	movs	r4, #1
   181ec:	e7ea      	b.n	181c4 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   181ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   181f0:	2b00      	cmp	r3, #0
   181f2:	d0fa      	beq.n	181ea <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   181f4:	2401      	movs	r4, #1
   181f6:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   181f8:	e7e4      	b.n	181c4 <isr_scan_tgta_check+0x48>
   181fa:	bf00      	nop

000181fc <abort_cb>:
{
   181fc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   181fe:	b1d8      	cbz	r0, 18238 <abort_cb+0x3c>
	err = lll_hfclock_off();
   18200:	460c      	mov	r4, r1
   18202:	f7fe ff8d 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18206:	2800      	cmp	r0, #0
   18208:	db04      	blt.n	18214 <abort_cb+0x18>
	lll_done(param);
   1820a:	4620      	mov	r0, r4
}
   1820c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18210:	f7fe bcf2 	b.w	16bf8 <lll_done>
	LL_ASSERT(err >= 0);
   18214:	4a0c      	ldr	r2, [pc, #48]	; (18248 <abort_cb+0x4c>)
   18216:	490d      	ldr	r1, [pc, #52]	; (1824c <abort_cb+0x50>)
   18218:	480d      	ldr	r0, [pc, #52]	; (18250 <abort_cb+0x54>)
   1821a:	f240 2379 	movw	r3, #633	; 0x279
   1821e:	f007 fa7e 	bl	1f71e <printk>
   18222:	4040      	eors	r0, r0
   18224:	f380 8811 	msr	BASEPRI, r0
   18228:	f04f 0003 	mov.w	r0, #3
   1822c:	df02      	svc	2
	lll_done(param);
   1822e:	4620      	mov	r0, r4
}
   18230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18234:	f7fe bce0 	b.w	16bf8 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   18238:	4806      	ldr	r0, [pc, #24]	; (18254 <abort_cb+0x58>)
   1823a:	f000 ffcb 	bl	191d4 <radio_isr_set>
}
   1823e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   18242:	f001 b8c3 	b.w	193cc <radio_disable>
   18246:	bf00      	nop
   18248:	00025d24 	.word	0x00025d24
   1824c:	00025c3c 	.word	0x00025c3c
   18250:	000250f0 	.word	0x000250f0
   18254:	0001812d 	.word	0x0001812d

00018258 <lll_scan_init>:
}
   18258:	2000      	movs	r0, #0
   1825a:	4770      	bx	lr

0001825c <lll_scan_reset>:
   1825c:	2000      	movs	r0, #0
   1825e:	4770      	bx	lr

00018260 <lll_scan_prepare>:
{
   18260:	b510      	push	{r4, lr}
   18262:	b082      	sub	sp, #8
   18264:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   18266:	f7fe ff43 	bl	170f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1826a:	2800      	cmp	r0, #0
   1826c:	db19      	blt.n	182a2 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1826e:	4a13      	ldr	r2, [pc, #76]	; (182bc <lll_scan_prepare+0x5c>)
   18270:	4913      	ldr	r1, [pc, #76]	; (182c0 <lll_scan_prepare+0x60>)
   18272:	4814      	ldr	r0, [pc, #80]	; (182c4 <lll_scan_prepare+0x64>)
   18274:	9400      	str	r4, [sp, #0]
   18276:	2300      	movs	r3, #0
   18278:	f7f6 fc9a 	bl	ebb0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1827c:	b108      	cbz	r0, 18282 <lll_scan_prepare+0x22>
   1827e:	3077      	adds	r0, #119	; 0x77
   18280:	d101      	bne.n	18286 <lll_scan_prepare+0x26>
}
   18282:	b002      	add	sp, #8
   18284:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18286:	4a10      	ldr	r2, [pc, #64]	; (182c8 <lll_scan_prepare+0x68>)
   18288:	4910      	ldr	r1, [pc, #64]	; (182cc <lll_scan_prepare+0x6c>)
   1828a:	4811      	ldr	r0, [pc, #68]	; (182d0 <lll_scan_prepare+0x70>)
   1828c:	238b      	movs	r3, #139	; 0x8b
   1828e:	f007 fa46 	bl	1f71e <printk>
   18292:	4040      	eors	r0, r0
   18294:	f380 8811 	msr	BASEPRI, r0
   18298:	f04f 0003 	mov.w	r0, #3
   1829c:	df02      	svc	2
}
   1829e:	b002      	add	sp, #8
   182a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   182a2:	4a09      	ldr	r2, [pc, #36]	; (182c8 <lll_scan_prepare+0x68>)
   182a4:	490b      	ldr	r1, [pc, #44]	; (182d4 <lll_scan_prepare+0x74>)
   182a6:	480a      	ldr	r0, [pc, #40]	; (182d0 <lll_scan_prepare+0x70>)
   182a8:	2388      	movs	r3, #136	; 0x88
   182aa:	f007 fa38 	bl	1f71e <printk>
   182ae:	4040      	eors	r0, r0
   182b0:	f380 8811 	msr	BASEPRI, r0
   182b4:	f04f 0003 	mov.w	r0, #3
   182b8:	df02      	svc	2
   182ba:	e7d8      	b.n	1826e <lll_scan_prepare+0xe>
   182bc:	00017e75 	.word	0x00017e75
   182c0:	000181fd 	.word	0x000181fd
   182c4:	00018071 	.word	0x00018071
   182c8:	00025d24 	.word	0x00025d24
   182cc:	00025d10 	.word	0x00025d10
   182d0:	000250f0 	.word	0x000250f0
   182d4:	00025c3c 	.word	0x00025c3c

000182d8 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   182d8:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   182dc:	f01c 0f08 	tst.w	ip, #8
   182e0:	d002      	beq.n	182e8 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   182e2:	b162      	cbz	r2, 182fe <lll_scan_isr_rx_check+0x26>
{
   182e4:	2001      	movs	r0, #1
}
   182e6:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   182e8:	2a00      	cmp	r2, #0
   182ea:	d0fb      	beq.n	182e4 <lll_scan_isr_rx_check+0xc>
{
   182ec:	b510      	push	{r4, lr}
   182ee:	4604      	mov	r4, r0
   182f0:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   182f2:	4619      	mov	r1, r3
   182f4:	f7fe f8ea 	bl	164cc <ull_filter_lll_rl_idx_allowed>
   182f8:	b120      	cbz	r0, 18304 <lll_scan_isr_rx_check+0x2c>
{
   182fa:	2001      	movs	r0, #1
}
   182fc:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   182fe:	4618      	mov	r0, r3
   18300:	f7fe b8b4 	b.w	1646c <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   18304:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   18306:	071b      	lsls	r3, r3, #28
   18308:	d4f7      	bmi.n	182fa <lll_scan_isr_rx_check+0x22>
}
   1830a:	bd10      	pop	{r4, pc}

0001830c <lll_scan_prepare_connect_req>:
{
   1830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18310:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   18314:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   18316:	01ad      	lsls	r5, r5, #6
   18318:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1831c:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   18320:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   18324:	780b      	ldrb	r3, [r1, #0]
   18326:	f003 0310 	and.w	r3, r3, #16
{
   1832a:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1832c:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1832e:	2322      	movs	r3, #34	; 0x22
   18330:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   18332:	700d      	strb	r5, [r1, #0]
{
   18334:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   18336:	9908      	ldr	r1, [sp, #32]
   18338:	2206      	movs	r2, #6
{
   1833a:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1833c:	1ca0      	adds	r0, r4, #2
   1833e:	f008 f9f3 	bl	20728 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   18342:	9906      	ldr	r1, [sp, #24]
   18344:	2206      	movs	r2, #6
   18346:	f104 0008 	add.w	r0, r4, #8
   1834a:	f008 f9ed 	bl	20728 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   1834e:	2204      	movs	r2, #4
   18350:	18b1      	adds	r1, r6, r2
   18352:	f104 000e 	add.w	r0, r4, #14
   18356:	f008 f9e7 	bl	20728 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   1835a:	2203      	movs	r2, #3
   1835c:	f106 0108 	add.w	r1, r6, #8
   18360:	f104 0012 	add.w	r0, r4, #18
   18364:	f008 f9e0 	bl	20728 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   18368:	2301      	movs	r3, #1
   1836a:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1836c:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1836e:	f001 fac9 	bl	19904 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   18372:	f1b8 0f00 	cmp.w	r8, #0
   18376:	d044      	beq.n	18402 <lll_scan_prepare_connect_req+0xf6>
   18378:	f008 0203 	and.w	r2, r8, #3
   1837c:	322b      	adds	r2, #43	; 0x2b
   1837e:	00d2      	lsls	r2, r2, #3
   18380:	f3c8 0840 	ubfx	r8, r8, #1, #1
   18384:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   18388:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1838a:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1838e:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   18390:	b393      	cbz	r3, 183f8 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   18392:	f240 41e2 	movw	r1, #1250	; 0x4e2
   18396:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1839a:	2b00      	cmp	r3, #0
   1839c:	db01      	blt.n	183a2 <lll_scan_prepare_connect_req+0x96>
   1839e:	4293      	cmp	r3, r2
   183a0:	d201      	bcs.n	183a6 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   183a2:	442b      	add	r3, r5
   183a4:	e7f9      	b.n	1839a <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   183a6:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   183a8:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   183aa:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   183ac:	4b16      	ldr	r3, [pc, #88]	; (18408 <lll_scan_prepare_connect_req+0xfc>)
   183ae:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   183b2:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   183b4:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   183b6:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   183b8:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   183ba:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   183bc:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   183be:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   183c0:	8abb      	ldrh	r3, [r7, #20]
   183c2:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   183c4:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   183c6:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   183c8:	f106 0118 	add.w	r1, r6, #24
   183cc:	2205      	movs	r2, #5
   183ce:	f104 001e 	add.w	r0, r4, #30
   183d2:	f008 f9a9 	bl	20728 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   183d6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   183da:	7fb2      	ldrb	r2, [r6, #30]
   183dc:	f362 0304 	bfi	r3, r2, #0, #5
   183e0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   183e4:	f7fe feba 	bl	1715c <lll_clock_sca_local_get>
   183e8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   183ec:	f360 1347 	bfi	r3, r0, #5, #3
   183f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   183f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   183f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   183fa:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   183fc:	75a3      	strb	r3, [r4, #22]
   183fe:	75e3      	strb	r3, [r4, #23]
   18400:	e7dc      	b.n	183bc <lll_scan_prepare_connect_req+0xb0>
   18402:	f44f 78b0 	mov.w	r8, #352	; 0x160
   18406:	e7bf      	b.n	18388 <lll_scan_prepare_connect_req+0x7c>
   18408:	d1b71759 	.word	0xd1b71759

0001840c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1840e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   18410:	f7fe fcc8 	bl	16da4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   18414:	f7f6 f998 	bl	e748 <ull_event_done_extra_get>
	LL_ASSERT(e);
   18418:	4604      	mov	r4, r0
   1841a:	2800      	cmp	r0, #0
   1841c:	d036      	beq.n	1848c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1841e:	4922      	ldr	r1, [pc, #136]	; (184a8 <isr_done+0x9c>)
   18420:	79a2      	ldrb	r2, [r4, #6]
   18422:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   18424:	4b21      	ldr	r3, [pc, #132]	; (184ac <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   18426:	f360 0200 	bfi	r2, r0, #0, #1
   1842a:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1842c:	4a20      	ldr	r2, [pc, #128]	; (184b0 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   1842e:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   18430:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   18432:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   18434:	2101      	movs	r1, #1
   18436:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   18438:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1843a:	b11b      	cbz	r3, 18444 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   1843c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   18440:	2b00      	cmp	r3, #0
   18442:	db04      	blt.n	1844e <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   18444:	4628      	mov	r0, r5
}
   18446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1844a:	f7fe bcb9 	b.w	16dc0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1844e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   18452:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   18456:	2b02      	cmp	r3, #2
   18458:	d016      	beq.n	18488 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1845a:	2b04      	cmp	r3, #4
   1845c:	bf14      	ite	ne
   1845e:	2728      	movne	r7, #40	; 0x28
   18460:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18464:	f001 fa3a 	bl	198dc <radio_tmr_aa_restore>
   18468:	4606      	mov	r6, r0
   1846a:	f001 fa3d 	bl	198e8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1846e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   18470:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18472:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   18474:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   18478:	2300      	movs	r3, #0
   1847a:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   1847c:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   1847e:	4628      	mov	r0, r5
}
   18480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   18484:	f7fe bc9c 	b.w	16dc0 <lll_isr_cleanup>
	switch (phy) {
   18488:	2718      	movs	r7, #24
   1848a:	e7eb      	b.n	18464 <isr_done+0x58>
	LL_ASSERT(e);
   1848c:	4a09      	ldr	r2, [pc, #36]	; (184b4 <isr_done+0xa8>)
   1848e:	490a      	ldr	r1, [pc, #40]	; (184b8 <isr_done+0xac>)
   18490:	480a      	ldr	r0, [pc, #40]	; (184bc <isr_done+0xb0>)
   18492:	f240 3317 	movw	r3, #791	; 0x317
   18496:	f007 f942 	bl	1f71e <printk>
   1849a:	4040      	eors	r0, r0
   1849c:	f380 8811 	msr	BASEPRI, r0
   184a0:	f04f 0003 	mov.w	r0, #3
   184a4:	df02      	svc	2
   184a6:	e7ba      	b.n	1841e <isr_done+0x12>
   184a8:	200060e8 	.word	0x200060e8
   184ac:	200060c2 	.word	0x200060c2
   184b0:	200060e9 	.word	0x200060e9
   184b4:	00025d70 	.word	0x00025d70
   184b8:	000254cc 	.word	0x000254cc
   184bc:	000250f0 	.word	0x000250f0

000184c0 <lll_conn_init>:
{
   184c0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   184c2:	f000 ffd7 	bl	19474 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   184c6:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   184c8:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   184ca:	2101      	movs	r1, #1
   184cc:	f361 0201 	bfi	r2, r1, #0, #2
}
   184d0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   184d2:	701a      	strb	r2, [r3, #0]
}
   184d4:	bd08      	pop	{r3, pc}
   184d6:	bf00      	nop

000184d8 <lll_conn_reset>:
}
   184d8:	2000      	movs	r0, #0
   184da:	4770      	bx	lr

000184dc <lll_conn_flush>:
}
   184dc:	4770      	bx	lr
   184de:	bf00      	nop

000184e0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   184e0:	4805      	ldr	r0, [pc, #20]	; (184f8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   184e2:	4906      	ldr	r1, [pc, #24]	; (184fc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   184e4:	4a06      	ldr	r2, [pc, #24]	; (18500 <lll_conn_prepare_reset+0x20>)
{
   184e6:	b410      	push	{r4}
	trx_cnt = 0U;
   184e8:	2300      	movs	r3, #0
   184ea:	4c06      	ldr	r4, [pc, #24]	; (18504 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   184ec:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   184ee:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   184f0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   184f2:	8023      	strh	r3, [r4, #0]
}
   184f4:	bc10      	pop	{r4}
   184f6:	4770      	bx	lr
   184f8:	200060e8 	.word	0x200060e8
   184fc:	200060e7 	.word	0x200060e7
   18500:	200060e9 	.word	0x200060e9
   18504:	200060c2 	.word	0x200060c2

00018508 <lll_conn_abort_cb>:
{
   18508:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1850a:	b1e8      	cbz	r0, 18548 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1850c:	460d      	mov	r5, r1
   1850e:	4604      	mov	r4, r0
   18510:	f7fe fe06 	bl	17120 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18514:	2800      	cmp	r0, #0
   18516:	db0a      	blt.n	1852e <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   18518:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1851a:	8923      	ldrh	r3, [r4, #8]
   1851c:	8a51      	ldrh	r1, [r2, #18]
   1851e:	3301      	adds	r3, #1
   18520:	440b      	add	r3, r1
   18522:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   18524:	4628      	mov	r0, r5
}
   18526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1852a:	f7fe bb65 	b.w	16bf8 <lll_done>
	LL_ASSERT(err >= 0);
   1852e:	4a0a      	ldr	r2, [pc, #40]	; (18558 <lll_conn_abort_cb+0x50>)
   18530:	490a      	ldr	r1, [pc, #40]	; (1855c <lll_conn_abort_cb+0x54>)
   18532:	480b      	ldr	r0, [pc, #44]	; (18560 <lll_conn_abort_cb+0x58>)
   18534:	23aa      	movs	r3, #170	; 0xaa
   18536:	f007 f8f2 	bl	1f71e <printk>
   1853a:	4040      	eors	r0, r0
   1853c:	f380 8811 	msr	BASEPRI, r0
   18540:	f04f 0003 	mov.w	r0, #3
   18544:	df02      	svc	2
   18546:	e7e7      	b.n	18518 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   18548:	4806      	ldr	r0, [pc, #24]	; (18564 <lll_conn_abort_cb+0x5c>)
   1854a:	f000 fe43 	bl	191d4 <radio_isr_set>
}
   1854e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   18552:	f000 bf3b 	b.w	193cc <radio_disable>
   18556:	bf00      	nop
   18558:	00025d70 	.word	0x00025d70
   1855c:	00025c3c 	.word	0x00025c3c
   18560:	000250f0 	.word	0x000250f0
   18564:	0001840d 	.word	0x0001840d

00018568 <lll_conn_rx_pkt_set>:
{
   18568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1856a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1856c:	2001      	movs	r0, #1
   1856e:	f7f5 ffed 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18572:	4606      	mov	r6, r0
   18574:	b360      	cbz	r0, 185d0 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   18576:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   1857a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   1857c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   18580:	2100      	movs	r1, #0
   18582:	4620      	mov	r0, r4
   18584:	f000 fe8c 	bl	192a0 <radio_phy_set>
	} else if (lll->enc_rx) {
   18588:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   1858c:	071b      	lsls	r3, r3, #28
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1858e:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   18592:	d511      	bpl.n	185b8 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   18594:	1d39      	adds	r1, r7, #4
   18596:	f042 0201 	orr.w	r2, r2, #1
   1859a:	b2c9      	uxtb	r1, r1
   1859c:	2008      	movs	r0, #8
   1859e:	f000 fec5 	bl	1932c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   185a2:	f106 021c 	add.w	r2, r6, #28
   185a6:	4621      	mov	r1, r4
   185a8:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   185ac:	f001 f9b6 	bl	1991c <radio_ccm_rx_pkt_set>
}
   185b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   185b4:	f000 bee2 	b.w	1937c <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   185b8:	2008      	movs	r0, #8
   185ba:	b2f9      	uxtb	r1, r7
   185bc:	f042 0201 	orr.w	r2, r2, #1
   185c0:	f000 feb4 	bl	1932c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   185c4:	f106 001c 	add.w	r0, r6, #28
}
   185c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   185cc:	f000 bed6 	b.w	1937c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   185d0:	4a06      	ldr	r2, [pc, #24]	; (185ec <lll_conn_rx_pkt_set+0x84>)
   185d2:	4907      	ldr	r1, [pc, #28]	; (185f0 <lll_conn_rx_pkt_set+0x88>)
   185d4:	4807      	ldr	r0, [pc, #28]	; (185f4 <lll_conn_rx_pkt_set+0x8c>)
   185d6:	f240 235a 	movw	r3, #602	; 0x25a
   185da:	f007 f8a0 	bl	1f71e <printk>
   185de:	4040      	eors	r0, r0
   185e0:	f380 8811 	msr	BASEPRI, r0
   185e4:	f04f 0003 	mov.w	r0, #3
   185e8:	df02      	svc	2
   185ea:	e7c4      	b.n	18576 <lll_conn_rx_pkt_set+0xe>
   185ec:	00025d70 	.word	0x00025d70
   185f0:	00025cd8 	.word	0x00025cd8
   185f4:	000250f0 	.word	0x000250f0

000185f8 <lll_conn_isr_tx>:
{
   185f8:	b538      	push	{r3, r4, r5, lr}
   185fa:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   185fc:	f7fe fbc0 	bl	16d80 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18600:	2096      	movs	r0, #150	; 0x96
   18602:	f001 f86b 	bl	196dc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   18606:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1860a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1860e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18612:	f000 0007 	and.w	r0, r0, #7
   18616:	f002 0207 	and.w	r2, r2, #7
   1861a:	2100      	movs	r1, #0
   1861c:	f000 ff7a 	bl	19514 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   18620:	4620      	mov	r0, r4
   18622:	f7ff ffa1 	bl	18568 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18626:	f000 fef1 	bl	1940c <radio_is_ready>
   1862a:	bb58      	cbnz	r0, 18684 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1862c:	f001 f970 	bl	19910 <radio_tmr_tifs_base_get>
   18630:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18632:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18636:	2101      	movs	r1, #1
   18638:	f000 0007 	and.w	r0, r0, #7
   1863c:	f000 feb4 	bl	193a8 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18640:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   18644:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18648:	4405      	add	r5, r0
   1864a:	2b02      	cmp	r3, #2
   1864c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   18650:	d016      	beq.n	18680 <lll_conn_isr_tx+0x88>
		return 376;
   18652:	2b04      	cmp	r3, #4
   18654:	bf14      	ite	ne
   18656:	2328      	movne	r3, #40	; 0x28
   18658:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1865c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   18660:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   18664:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18668:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1866a:	f000 fe99 	bl	193a0 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1866e:	1a28      	subs	r0, r5, r0
   18670:	f001 f906 	bl	19880 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   18674:	4621      	mov	r1, r4
   18676:	480a      	ldr	r0, [pc, #40]	; (186a0 <lll_conn_isr_tx+0xa8>)
}
   18678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1867c:	f000 bdaa 	b.w	191d4 <radio_isr_set>
	switch (phy) {
   18680:	2318      	movs	r3, #24
   18682:	e7eb      	b.n	1865c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   18684:	4a07      	ldr	r2, [pc, #28]	; (186a4 <lll_conn_isr_tx+0xac>)
   18686:	4908      	ldr	r1, [pc, #32]	; (186a8 <lll_conn_isr_tx+0xb0>)
   18688:	4808      	ldr	r0, [pc, #32]	; (186ac <lll_conn_isr_tx+0xb4>)
   1868a:	f240 2313 	movw	r3, #531	; 0x213
   1868e:	f007 f846 	bl	1f71e <printk>
   18692:	4040      	eors	r0, r0
   18694:	f380 8811 	msr	BASEPRI, r0
   18698:	f04f 0003 	mov.w	r0, #3
   1869c:	df02      	svc	2
   1869e:	e7c5      	b.n	1862c <lll_conn_isr_tx+0x34>
   186a0:	000187e9 	.word	0x000187e9
   186a4:	00025d70 	.word	0x00025d70
   186a8:	00025ce0 	.word	0x00025ce0
   186ac:	000250f0 	.word	0x000250f0

000186b0 <lll_conn_tx_pkt_set>:
{
   186b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   186b2:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   186b4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   186b8:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   186ba:	f001 0407 	and.w	r4, r1, #7
{
   186be:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   186c0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   186c4:	4620      	mov	r0, r4
   186c6:	f000 fdeb 	bl	192a0 <radio_phy_set>
	} else if (lll->enc_tx) {
   186ca:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   186ce:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   186d0:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   186d2:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   186d6:	d50d      	bpl.n	186f4 <lll_conn_tx_pkt_set+0x44>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   186d8:	1d39      	adds	r1, r7, #4
   186da:	b2c9      	uxtb	r1, r1
   186dc:	2008      	movs	r0, #8
   186de:	f000 fe25 	bl	1932c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   186e2:	4631      	mov	r1, r6
   186e4:	f105 0080 	add.w	r0, r5, #128	; 0x80
   186e8:	f001 f956 	bl	19998 <radio_ccm_tx_pkt_set>
}
   186ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   186f0:	f000 be4a 	b.w	19388 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   186f4:	b2f9      	uxtb	r1, r7
   186f6:	2008      	movs	r0, #8
   186f8:	f000 fe18 	bl	1932c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   186fc:	4630      	mov	r0, r6
}
   186fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   18702:	f000 be41 	b.w	19388 <radio_pkt_tx_set>
   18706:	bf00      	nop

00018708 <lll_conn_pdu_tx_prep>:
{
   18708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1870c:	4604      	mov	r4, r0
   1870e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18710:	aa01      	add	r2, sp, #4
   18712:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   18714:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18716:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   18718:	f7f1 ff8a 	bl	a630 <memq_peek>
	if (lll->empty || !link) {
   1871c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18720:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18722:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   18724:	d432      	bmi.n	1878c <lll_conn_pdu_tx_prep+0x84>
   18726:	2800      	cmp	r0, #0
   18728:	d04e      	beq.n	187c8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1872a:	9b01      	ldr	r3, [sp, #4]
   1872c:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   18730:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   18734:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18738:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1873c:	b913      	cbnz	r3, 18744 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1873e:	786b      	ldrb	r3, [r5, #1]
   18740:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   18744:	b137      	cbz	r7, 18754 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18746:	f818 2007 	ldrb.w	r2, [r8, r7]
   1874a:	2101      	movs	r1, #1
   1874c:	f361 0201 	bfi	r2, r1, #0, #2
   18750:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   18754:	1bdb      	subs	r3, r3, r7
   18756:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   18758:	4620      	mov	r0, r4
   1875a:	f7fc f8a1 	bl	148a0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1875e:	786b      	ldrb	r3, [r5, #1]
   18760:	4283      	cmp	r3, r0
   18762:	d924      	bls.n	187ae <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   18764:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   18766:	f818 3007 	ldrb.w	r3, [r8, r7]
   1876a:	f043 0310 	orr.w	r3, r3, #16
   1876e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   18772:	f818 3007 	ldrb.w	r3, [r8, r7]
   18776:	f36f 1347 	bfc	r3, #5, #3
   1877a:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1877e:	2300      	movs	r3, #0
   18780:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   18782:	f8c9 5000 	str.w	r5, [r9]
}
   18786:	b003      	add	sp, #12
   18788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1878c:	f043 0304 	orr.w	r3, r3, #4
   18790:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   18794:	f000 fe6e 	bl	19474 <radio_pkt_empty_get>
   18798:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1879a:	b1e6      	cbz	r6, 187d6 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1879c:	7803      	ldrb	r3, [r0, #0]
   1879e:	f043 0310 	orr.w	r3, r3, #16
   187a2:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   187a4:	f8c9 5000 	str.w	r5, [r9]
}
   187a8:	b003      	add	sp, #12
   187aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   187ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   187b0:	6832      	ldr	r2, [r6, #0]
   187b2:	429a      	cmp	r2, r3
			p->md = 1U;
   187b4:	f818 3007 	ldrb.w	r3, [r8, r7]
   187b8:	bf14      	ite	ne
   187ba:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   187be:	f36f 1304 	bfceq	r3, #4, #1
   187c2:	f808 3007 	strb.w	r3, [r8, r7]
   187c6:	e7d4      	b.n	18772 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   187c8:	f043 0304 	orr.w	r3, r3, #4
   187cc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   187d0:	f000 fe50 	bl	19474 <radio_pkt_empty_get>
   187d4:	4605      	mov	r5, r0
			p->md = 0U;
   187d6:	782b      	ldrb	r3, [r5, #0]
   187d8:	f36f 1304 	bfc	r3, #4, #1
   187dc:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   187de:	f8c9 5000 	str.w	r5, [r9]
}
   187e2:	b003      	add	sp, #12
   187e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000187e8 <lll_conn_isr_rx>:
{
   187e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187ec:	b083      	sub	sp, #12
   187ee:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   187f0:	f000 fe16 	bl	19420 <radio_is_done>
	if (trx_done) {
   187f4:	b2c0      	uxtb	r0, r0
   187f6:	b950      	cbnz	r0, 1880e <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   187f8:	f7fe faca 	bl	16d90 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   187fc:	48bd      	ldr	r0, [pc, #756]	; (18af4 <lll_conn_isr_rx+0x30c>)
   187fe:	4621      	mov	r1, r4
   18800:	f000 fce8 	bl	191d4 <radio_isr_set>
}
   18804:	b003      	add	sp, #12
   18806:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1880a:	f000 bddf 	b.w	193cc <radio_disable>
		crc_ok = radio_crc_is_valid();
   1880e:	f000 fe27 	bl	19460 <radio_crc_is_valid>
   18812:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   18814:	f000 ff06 	bl	19624 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   18818:	f7fe faba 	bl	16d90 <lll_isr_rx_status_reset>
	trx_cnt++;
   1881c:	4ab6      	ldr	r2, [pc, #728]	; (18af8 <lll_conn_isr_rx+0x310>)
   1881e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18820:	2001      	movs	r0, #1
	trx_cnt++;
   18822:	4403      	add	r3, r0
   18824:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18826:	f7f5 fe91 	bl	e54c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1882a:	4606      	mov	r6, r0
   1882c:	2800      	cmp	r0, #0
   1882e:	f000 80e7 	beq.w	18a00 <lll_conn_isr_rx+0x218>
	if (crc_ok) {
   18832:	b9f5      	cbnz	r5, 18872 <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   18834:	4bb1      	ldr	r3, [pc, #708]	; (18afc <lll_conn_isr_rx+0x314>)
   18836:	781f      	ldrb	r7, [r3, #0]
   18838:	2f00      	cmp	r7, #0
   1883a:	f000 8083 	beq.w	18944 <lll_conn_isr_rx+0x15c>
		crc_expire--;
   1883e:	3f01      	subs	r7, #1
   18840:	b2ff      	uxtb	r7, r7
   18842:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   18844:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18848:	a901      	add	r1, sp, #4
   1884a:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1884c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18850:	f7ff ff5a 	bl	18708 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18854:	2f00      	cmp	r7, #0
   18856:	f040 814a 	bne.w	18aee <lll_conn_isr_rx+0x306>
		radio_isr_set(isr_done, param);
   1885a:	48a6      	ldr	r0, [pc, #664]	; (18af4 <lll_conn_isr_rx+0x30c>)
   1885c:	4621      	mov	r1, r4
   1885e:	f000 fcb9 	bl	191d4 <radio_isr_set>
		} else if (!lll->role) {
   18862:	f994 301d 	ldrsb.w	r3, [r4, #29]
   18866:	2b00      	cmp	r3, #0
   18868:	f280 80bc 	bge.w	189e4 <lll_conn_isr_rx+0x1fc>
			radio_switch_complete_and_disable();
   1886c:	f000 feb2 	bl	195d4 <radio_switch_complete_and_disable>
   18870:	e07d      	b.n	1896e <lll_conn_isr_rx+0x186>
	if (pdu_data_rx->nesn != lll->sn) {
   18872:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18876:	7f32      	ldrb	r2, [r6, #28]
   18878:	f003 0101 	and.w	r1, r3, #1
   1887c:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18880:	4288      	cmp	r0, r1
   18882:	f000 80cd 	beq.w	18a20 <lll_conn_isr_rx+0x238>
		if (lll->role) {
   18886:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1888a:	f081 0101 	eor.w	r1, r1, #1
   1888e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   18892:	2a00      	cmp	r2, #0
		lll->sn++;
   18894:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   18898:	da05      	bge.n	188a6 <lll_conn_isr_rx+0xbe>
			lll->periph.latency_enabled = 1;
   1889a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1889e:	f043 0304 	orr.w	r3, r3, #4
   188a2:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   188a6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   188aa:	f013 0804 	ands.w	r8, r3, #4
   188ae:	f040 80fc 	bne.w	18aaa <lll_conn_isr_rx+0x2c2>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   188b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   188b6:	aa01      	add	r2, sp, #4
   188b8:	f7f1 feba 	bl	a630 <memq_peek>
		if (link) {
   188bc:	4605      	mov	r5, r0
   188be:	2800      	cmp	r0, #0
   188c0:	f000 810a 	beq.w	18ad8 <lll_conn_isr_rx+0x2f0>
			pdu_data_tx = (void *)(tx->pdu +
   188c4:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   188c6:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   188ca:	3704      	adds	r7, #4
   188cc:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   188d0:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   188d2:	b172      	cbz	r2, 188f2 <lll_conn_isr_rx+0x10a>
				if (lll->enc_tx) {
   188d4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   188d8:	06d9      	lsls	r1, r3, #27
   188da:	d50a      	bpl.n	188f2 <lll_conn_isr_rx+0x10a>
					lll->ccm_tx.counter++;
   188dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   188e0:	3301      	adds	r3, #1
   188e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   188e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   188ea:	f143 0300 	adc.w	r3, r3, #0
   188ee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   188f2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   188f6:	444a      	add	r2, r9
   188f8:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   188fa:	429a      	cmp	r2, r3
   188fc:	f0c0 80f3 	bcc.w	18ae6 <lll_conn_isr_rx+0x2fe>
			} else if (offset == lll->packet_tx_head_len) {
   18900:	f000 8135 	beq.w	18b6e <lll_conn_isr_rx+0x386>
				LL_ASSERT(0);
   18904:	4a7e      	ldr	r2, [pc, #504]	; (18b00 <lll_conn_isr_rx+0x318>)
   18906:	497f      	ldr	r1, [pc, #508]	; (18b04 <lll_conn_isr_rx+0x31c>)
   18908:	487f      	ldr	r0, [pc, #508]	; (18b08 <lll_conn_isr_rx+0x320>)
   1890a:	f240 33a3 	movw	r3, #931	; 0x3a3
   1890e:	f006 ff06 	bl	1f71e <printk>
   18912:	4040      	eors	r0, r0
   18914:	f380 8811 	msr	BASEPRI, r0
   18918:	f04f 0003 	mov.w	r0, #3
   1891c:	df02      	svc	2
	tx_release = NULL;
   1891e:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   18920:	f994 301d 	ldrsb.w	r3, [r4, #29]
   18924:	2b00      	cmp	r3, #0
   18926:	f2c0 811e 	blt.w	18b66 <lll_conn_isr_rx+0x37e>
			    !pdu_data_rx->md) {
   1892a:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1892c:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1892e:	bf58      	it	pl
   18930:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   18934:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18938:	bf5c      	itt	pl
   1893a:	f088 0810 	eorpl.w	r8, r8, #16
   1893e:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   18942:	e070      	b.n	18a26 <lll_conn_isr_rx+0x23e>
		crc_expire--;
   18944:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18946:	a901      	add	r1, sp, #4
   18948:	4620      	mov	r0, r4
		crc_expire--;
   1894a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1894c:	f7ff fedc 	bl	18708 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18950:	2096      	movs	r0, #150	; 0x96
   18952:	f000 fec3 	bl	196dc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   18956:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1895a:	f000 0007 	and.w	r0, r0, #7
   1895e:	f000 fd91 	bl	19484 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   18962:	486a      	ldr	r0, [pc, #424]	; (18b0c <lll_conn_isr_rx+0x324>)
   18964:	4621      	mov	r1, r4
   18966:	f000 fc35 	bl	191d4 <radio_isr_set>
		radio_tmr_end_capture();
   1896a:	f000 ffc3 	bl	198f4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1896e:	9901      	ldr	r1, [sp, #4]
   18970:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   18974:	780b      	ldrb	r3, [r1, #0]
   18976:	f023 000c 	bic.w	r0, r3, #12
   1897a:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1897e:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   18980:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18984:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18988:	4303      	orrs	r3, r0
   1898a:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1898c:	4620      	mov	r0, r4
   1898e:	f7ff fe8f 	bl	186b0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18992:	f000 fd3b 	bl	1940c <radio_is_ready>
   18996:	2800      	cmp	r0, #0
   18998:	d16a      	bne.n	18a70 <lll_conn_isr_rx+0x288>
	if (!radio_tmr_aa_restore()) {
   1899a:	f000 ff9f 	bl	198dc <radio_tmr_aa_restore>
   1899e:	b170      	cbz	r0, 189be <lll_conn_isr_rx+0x1d6>
	if (tx_release) {
   189a0:	b19d      	cbz	r5, 189ca <lll_conn_isr_rx+0x1e2>
		LL_ASSERT(lll->handle != 0xFFFF);
   189a2:	89a0      	ldrh	r0, [r4, #12]
   189a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   189a8:	4298      	cmp	r0, r3
   189aa:	d06f      	beq.n	18a8c <lll_conn_isr_rx+0x2a4>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   189ac:	4629      	mov	r1, r5
   189ae:	f7fb fd3d 	bl	1442c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   189b2:	b967      	cbnz	r7, 189ce <lll_conn_isr_rx+0x1e6>
		ull_rx_sched();
   189b4:	f7f5 fe0e 	bl	e5d4 <ull_rx_sched>
}
   189b8:	b003      	add	sp, #12
   189ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   189be:	f000 ff81 	bl	198c4 <radio_tmr_aa_get>
   189c2:	f000 ff85 	bl	198d0 <radio_tmr_aa_save>
	if (tx_release) {
   189c6:	2d00      	cmp	r5, #0
   189c8:	d1eb      	bne.n	189a2 <lll_conn_isr_rx+0x1ba>
	if (is_rx_enqueue) {
   189ca:	2f00      	cmp	r7, #0
   189cc:	d0f4      	beq.n	189b8 <lll_conn_isr_rx+0x1d0>
		ull_pdu_rx_alloc();
   189ce:	f7f5 fddb 	bl	e588 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   189d2:	2303      	movs	r3, #3
   189d4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   189d6:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   189d8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   189da:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   189dc:	4631      	mov	r1, r6
   189de:	f7f5 fde9 	bl	e5b4 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   189e2:	e7e7      	b.n	189b4 <lll_conn_isr_rx+0x1cc>
			radio_disable();
   189e4:	f000 fcf2 	bl	193cc <radio_disable>
			LL_ASSERT(!radio_is_ready());
   189e8:	f000 fd10 	bl	1940c <radio_is_ready>
   189ec:	2800      	cmp	r0, #0
   189ee:	f040 80a9 	bne.w	18b44 <lll_conn_isr_rx+0x35c>
			lll->empty = is_empty_pdu_tx_retry;
   189f2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   189f6:	f369 0382 	bfi	r3, r9, #2, #1
   189fa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   189fe:	e7cc      	b.n	1899a <lll_conn_isr_rx+0x1b2>
	LL_ASSERT(node_rx);
   18a00:	4a3f      	ldr	r2, [pc, #252]	; (18b00 <lll_conn_isr_rx+0x318>)
   18a02:	4943      	ldr	r1, [pc, #268]	; (18b10 <lll_conn_isr_rx+0x328>)
   18a04:	4840      	ldr	r0, [pc, #256]	; (18b08 <lll_conn_isr_rx+0x320>)
   18a06:	23f2      	movs	r3, #242	; 0xf2
   18a08:	f006 fe89 	bl	1f71e <printk>
   18a0c:	4040      	eors	r0, r0
   18a0e:	f380 8811 	msr	BASEPRI, r0
   18a12:	f04f 0003 	mov.w	r0, #3
   18a16:	df02      	svc	2
	if (crc_ok) {
   18a18:	2d00      	cmp	r5, #0
   18a1a:	f43f af0b 	beq.w	18834 <lll_conn_isr_rx+0x4c>
   18a1e:	e728      	b.n	18872 <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   18a20:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   18a24:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   18a26:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18a2a:	f3c3 0140 	ubfx	r1, r3, #1, #1
   18a2e:	428a      	cmp	r2, r1
   18a30:	d076      	beq.n	18b20 <lll_conn_isr_rx+0x338>
	is_rx_enqueue = 0U;
   18a32:	2700      	movs	r7, #0
		crc_expire = 0U;
   18a34:	4a31      	ldr	r2, [pc, #196]	; (18afc <lll_conn_isr_rx+0x314>)
   18a36:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   18a38:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   18a3c:	4b35      	ldr	r3, [pc, #212]	; (18b14 <lll_conn_isr_rx+0x32c>)
		crc_expire = 0U;
   18a3e:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a40:	4620      	mov	r0, r4
		crc_valid = 1U;
   18a42:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a44:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   18a46:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a48:	f7ff fe5e 	bl	18708 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18a4c:	f1b8 0f00 	cmp.w	r8, #0
   18a50:	f47f af03 	bne.w	1885a <lll_conn_isr_rx+0x72>
   18a54:	7f33      	ldrb	r3, [r6, #28]
   18a56:	06d9      	lsls	r1, r3, #27
   18a58:	f53f af7a 	bmi.w	18950 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   18a5c:	9b01      	ldr	r3, [sp, #4]
   18a5e:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18a60:	06d2      	lsls	r2, r2, #27
   18a62:	f53f af75 	bmi.w	18950 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   18a66:	785b      	ldrb	r3, [r3, #1]
   18a68:	2b00      	cmp	r3, #0
   18a6a:	f43f aef6 	beq.w	1885a <lll_conn_isr_rx+0x72>
   18a6e:	e76f      	b.n	18950 <lll_conn_isr_rx+0x168>
	LL_ASSERT(!radio_is_ready());
   18a70:	4a23      	ldr	r2, [pc, #140]	; (18b00 <lll_conn_isr_rx+0x318>)
   18a72:	4929      	ldr	r1, [pc, #164]	; (18b18 <lll_conn_isr_rx+0x330>)
   18a74:	4824      	ldr	r0, [pc, #144]	; (18b08 <lll_conn_isr_rx+0x320>)
   18a76:	f240 1369 	movw	r3, #361	; 0x169
   18a7a:	f006 fe50 	bl	1f71e <printk>
   18a7e:	4040      	eors	r0, r0
   18a80:	f380 8811 	msr	BASEPRI, r0
   18a84:	f04f 0003 	mov.w	r0, #3
   18a88:	df02      	svc	2
   18a8a:	e786      	b.n	1899a <lll_conn_isr_rx+0x1b2>
		LL_ASSERT(lll->handle != 0xFFFF);
   18a8c:	4a1c      	ldr	r2, [pc, #112]	; (18b00 <lll_conn_isr_rx+0x318>)
   18a8e:	4923      	ldr	r1, [pc, #140]	; (18b1c <lll_conn_isr_rx+0x334>)
   18a90:	481d      	ldr	r0, [pc, #116]	; (18b08 <lll_conn_isr_rx+0x320>)
   18a92:	f44f 73bc 	mov.w	r3, #376	; 0x178
   18a96:	f006 fe42 	bl	1f71e <printk>
   18a9a:	4040      	eors	r0, r0
   18a9c:	f380 8811 	msr	BASEPRI, r0
   18aa0:	f04f 0003 	mov.w	r0, #3
   18aa4:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   18aa6:	89a0      	ldrh	r0, [r4, #12]
   18aa8:	e780      	b.n	189ac <lll_conn_isr_rx+0x1c4>
			lll->empty = 0;
   18aaa:	f36f 0382 	bfc	r3, #2, #1
   18aae:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   18ab2:	f000 fcdf 	bl	19474 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   18ab6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   18aba:	2b00      	cmp	r3, #0
   18abc:	db0c      	blt.n	18ad8 <lll_conn_isr_rx+0x2f0>
			    !pdu_data_rx->md) {
   18abe:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   18ac0:	f012 0510 	ands.w	r5, r2, #16
   18ac4:	d109      	bne.n	18ada <lll_conn_isr_rx+0x2f2>
				*is_done = !pdu_data_tx->md;
   18ac6:	f890 8000 	ldrb.w	r8, [r0]
   18aca:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18ace:	f088 0810 	eor.w	r8, r8, #16
   18ad2:	f3c8 1800 	ubfx	r8, r8, #4, #1
   18ad6:	e7a6      	b.n	18a26 <lll_conn_isr_rx+0x23e>
   18ad8:	7f32      	ldrb	r2, [r6, #28]
   18ada:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   18ade:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   18ae2:	4645      	mov	r5, r8
   18ae4:	e79f      	b.n	18a26 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_offset = offset;
   18ae6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   18aea:	2500      	movs	r5, #0
   18aec:	e718      	b.n	18920 <lll_conn_isr_rx+0x138>
	is_rx_enqueue = 0U;
   18aee:	462f      	mov	r7, r5
   18af0:	e72e      	b.n	18950 <lll_conn_isr_rx+0x168>
   18af2:	bf00      	nop
   18af4:	0001840d 	.word	0x0001840d
   18af8:	200060c2 	.word	0x200060c2
   18afc:	200060e7 	.word	0x200060e7
   18b00:	00025d70 	.word	0x00025d70
   18b04:	00025150 	.word	0x00025150
   18b08:	000250f0 	.word	0x000250f0
   18b0c:	000185f9 	.word	0x000185f9
   18b10:	00025cd8 	.word	0x00025cd8
   18b14:	200060e8 	.word	0x200060e8
   18b18:	00025ce0 	.word	0x00025ce0
   18b1c:	00025dc4 	.word	0x00025dc4
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   18b20:	2003      	movs	r0, #3
   18b22:	f7f5 fd13 	bl	e54c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   18b26:	b1d8      	cbz	r0, 18b60 <lll_conn_isr_rx+0x378>
		lll->nesn++;
   18b28:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b2c:	f083 0302 	eor.w	r3, r3, #2
   18b30:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   18b34:	7f73      	ldrb	r3, [r6, #29]
   18b36:	b19b      	cbz	r3, 18b60 <lll_conn_isr_rx+0x378>
			if (lll->enc_rx) {
   18b38:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b3c:	0718      	lsls	r0, r3, #28
   18b3e:	d424      	bmi.n	18b8a <lll_conn_isr_rx+0x3a2>
			*is_rx_enqueue = 1U;
   18b40:	2701      	movs	r7, #1
   18b42:	e777      	b.n	18a34 <lll_conn_isr_rx+0x24c>
			LL_ASSERT(!radio_is_ready());
   18b44:	4a38      	ldr	r2, [pc, #224]	; (18c28 <lll_conn_isr_rx+0x440>)
   18b46:	4939      	ldr	r1, [pc, #228]	; (18c2c <lll_conn_isr_rx+0x444>)
   18b48:	4839      	ldr	r0, [pc, #228]	; (18c30 <lll_conn_isr_rx+0x448>)
   18b4a:	f44f 7398 	mov.w	r3, #304	; 0x130
   18b4e:	f006 fde6 	bl	1f71e <printk>
   18b52:	4040      	eors	r0, r0
   18b54:	f380 8811 	msr	BASEPRI, r0
   18b58:	f04f 0003 	mov.w	r0, #3
   18b5c:	df02      	svc	2
   18b5e:	e748      	b.n	189f2 <lll_conn_isr_rx+0x20a>
   18b60:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b64:	e765      	b.n	18a32 <lll_conn_isr_rx+0x24a>
   18b66:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b6a:	7f32      	ldrb	r2, [r6, #28]
   18b6c:	e75b      	b.n	18a26 <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_len = 0;
   18b6e:	2200      	movs	r2, #0
   18b70:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   18b74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   18b76:	f104 0148 	add.w	r1, r4, #72	; 0x48
   18b7a:	f7f1 fd61 	bl	a640 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   18b7e:	9b01      	ldr	r3, [sp, #4]
   18b80:	681a      	ldr	r2, [r3, #0]
   18b82:	602a      	str	r2, [r5, #0]
				tx->next = link;
   18b84:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   18b86:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   18b88:	e6ca      	b.n	18920 <lll_conn_isr_rx+0x138>
				done = radio_ccm_is_done();
   18b8a:	f000 ff2d 	bl	199e8 <radio_ccm_is_done>
				LL_ASSERT(done);
   18b8e:	2800      	cmp	r0, #0
   18b90:	d03b      	beq.n	18c0a <lll_conn_isr_rx+0x422>
				bool mic_failure = !radio_ccm_mic_is_valid();
   18b92:	f000 ff4b 	bl	19a2c <radio_ccm_mic_is_valid>
				if (mic_failure &&
   18b96:	bb30      	cbnz	r0, 18be6 <lll_conn_isr_rx+0x3fe>
				    lll->ccm_rx.counter == 0 &&
   18b98:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   18b9c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   18ba0:	4313      	orrs	r3, r2
   18ba2:	d104      	bne.n	18bae <lll_conn_isr_rx+0x3c6>
				    (pdu_data_rx->ll_id ==
   18ba4:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   18ba6:	f003 0303 	and.w	r3, r3, #3
   18baa:	2b03      	cmp	r3, #3
   18bac:	d004      	beq.n	18bb8 <lll_conn_isr_rx+0x3d0>
					mic_state = LLL_CONN_MIC_FAIL;
   18bae:	4b21      	ldr	r3, [pc, #132]	; (18c34 <lll_conn_isr_rx+0x44c>)
   18bb0:	2202      	movs	r2, #2
   18bb2:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   18bb4:	2700      	movs	r7, #0
   18bb6:	e6f0      	b.n	1899a <lll_conn_isr_rx+0x1b2>
						radio_pkt_scratch_get();
   18bb8:	f000 fc60 	bl	1947c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   18bbc:	7843      	ldrb	r3, [r0, #1]
   18bbe:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   18bc0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   18bc2:	d8f4      	bhi.n	18bae <lll_conn_isr_rx+0x3c6>
						memcpy(pdu_data_rx,
   18bc4:	3303      	adds	r3, #3
   18bc6:	b2da      	uxtb	r2, r3
   18bc8:	f106 001c 	add.w	r0, r6, #28
   18bcc:	f007 fdac 	bl	20728 <memcpy>
						lll->ccm_rx.counter--;
   18bd0:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18bd4:	3b01      	subs	r3, #1
   18bd6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18bda:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   18bde:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   18be2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   18be6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18bea:	3301      	adds	r3, #1
   18bec:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18bf0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   18bf4:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   18bf8:	f143 0300 	adc.w	r3, r3, #0
   18bfc:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   18bfe:	4b0d      	ldr	r3, [pc, #52]	; (18c34 <lll_conn_isr_rx+0x44c>)
   18c00:	2701      	movs	r7, #1
   18c02:	701f      	strb	r7, [r3, #0]
		if (err) {
   18c04:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18c08:	e714      	b.n	18a34 <lll_conn_isr_rx+0x24c>
				LL_ASSERT(done);
   18c0a:	4a07      	ldr	r2, [pc, #28]	; (18c28 <lll_conn_isr_rx+0x440>)
   18c0c:	490a      	ldr	r1, [pc, #40]	; (18c38 <lll_conn_isr_rx+0x450>)
   18c0e:	4808      	ldr	r0, [pc, #32]	; (18c30 <lll_conn_isr_rx+0x448>)
   18c10:	f240 33be 	movw	r3, #958	; 0x3be
   18c14:	f006 fd83 	bl	1f71e <printk>
   18c18:	4040      	eors	r0, r0
   18c1a:	f380 8811 	msr	BASEPRI, r0
   18c1e:	f04f 0003 	mov.w	r0, #3
   18c22:	df02      	svc	2
   18c24:	e7b5      	b.n	18b92 <lll_conn_isr_rx+0x3aa>
   18c26:	bf00      	nop
   18c28:	00025d70 	.word	0x00025d70
   18c2c:	00025ce0 	.word	0x00025ce0
   18c30:	000250f0 	.word	0x000250f0
   18c34:	200060e9 	.word	0x200060e9
   18c38:	00025dbc 	.word	0x00025dbc

00018c3c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   18c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   18c3e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   18c40:	89a2      	ldrh	r2, [r4, #12]
   18c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18c46:	429a      	cmp	r2, r3
{
   18c48:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   18c4a:	f000 80cf 	beq.w	18dec <prepare_cb+0x1b0>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   18c4e:	4605      	mov	r5, r0
   18c50:	f7ff fc46 	bl	184e0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   18c54:	892b      	ldrh	r3, [r5, #8]
   18c56:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   18c58:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   18c5a:	441a      	add	r2, r3
   18c5c:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   18c5e:	4410      	add	r0, r2
   18c60:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   18c62:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   18c64:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   18c66:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   18c68:	2100      	movs	r1, #0
   18c6a:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   18c6c:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   18c6e:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   18c70:	f100 808e 	bmi.w	18d90 <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   18c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18c78:	7fa1      	ldrb	r1, [r4, #30]
   18c7a:	9300      	str	r3, [sp, #0]
   18c7c:	f104 001f 	add.w	r0, r4, #31
   18c80:	f104 0318 	add.w	r3, r4, #24
   18c84:	f7fc fb10 	bl	152a8 <lll_chan_sel_1>
   18c88:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   18c8a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   18c8e:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   18c90:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   18c94:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   18c96:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   18c98:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   18c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   18c9c:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   18c9e:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   18ca0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   18ca4:	428b      	cmp	r3, r1
   18ca6:	bf28      	it	cs
   18ca8:	460b      	movcs	r3, r1
	if (!lll->empty) {
   18caa:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   18cae:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   18cb0:	f000 808e 	beq.w	18dd0 <prepare_cb+0x194>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   18cb4:	f000 fad0 	bl	19258 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18cb8:	2000      	movs	r0, #0
   18cba:	f000 fb01 	bl	192c0 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   18cbe:	4620      	mov	r0, r4
   18cc0:	f7ff fc52 	bl	18568 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   18cc4:	1d20      	adds	r0, r4, #4
   18cc6:	f000 fb19 	bl	192fc <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   18cca:	8923      	ldrh	r3, [r4, #8]
   18ccc:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   18cce:	f240 605b 	movw	r0, #1627	; 0x65b
   18cd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   18cd6:	f000 fbb7 	bl	19448 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   18cda:	4630      	mov	r0, r6
   18cdc:	f7fe f80a 	bl	16cf4 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   18ce0:	4621      	mov	r1, r4
   18ce2:	4847      	ldr	r0, [pc, #284]	; (18e00 <prepare_cb+0x1c4>)
   18ce4:	f000 fa76 	bl	191d4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   18ce8:	2096      	movs	r0, #150	; 0x96
   18cea:	f000 fcf7 	bl	196dc <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   18cee:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   18cf2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18cf6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18cfa:	2100      	movs	r1, #0
   18cfc:	f002 0207 	and.w	r2, r2, #7
   18d00:	f000 0007 	and.w	r0, r0, #7
   18d04:	f000 fc06 	bl	19514 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   18d08:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   18d0a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   18d0c:	4638      	mov	r0, r7
   18d0e:	f7fd ffd7 	bl	16cc0 <lll_event_offset_get>
   18d12:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   18d14:	686a      	ldr	r2, [r5, #4]
   18d16:	f106 0109 	add.w	r1, r6, #9
   18d1a:	2000      	movs	r0, #0
   18d1c:	f000 fcea 	bl	196f4 <radio_tmr_start>
   18d20:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   18d22:	f000 fdbb 	bl	1989c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   18d26:	2000      	movs	r0, #0
   18d28:	f000 fdd2 	bl	198d0 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   18d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18d2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   18d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18d34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18d38:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18d3c:	2101      	movs	r1, #1
   18d3e:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   18d42:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18d44:	f000 fb2e 	bl	193a4 <radio_rx_ready_delay_get>
   18d48:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   18d4a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18d4e:	f000 0007 	and.w	r0, r0, #7
   18d52:	2802      	cmp	r0, #2
   18d54:	d03a      	beq.n	18dcc <prepare_cb+0x190>
		return 40;
   18d56:	2804      	cmp	r0, #4
   18d58:	bf0c      	ite	eq
   18d5a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   18d5e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18d60:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   18d62:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18d64:	f000 fb20 	bl	193a8 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   18d68:	4428      	add	r0, r5
   18d6a:	f000 fd89 	bl	19880 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   18d6e:	89a1      	ldrh	r1, [r4, #12]
   18d70:	3105      	adds	r1, #5
   18d72:	4632      	mov	r2, r6
   18d74:	b2c9      	uxtb	r1, r1
   18d76:	4638      	mov	r0, r7
   18d78:	f7fd ffac 	bl	16cd4 <lll_preempt_calc>
   18d7c:	b188      	cbz	r0, 18da2 <prepare_cb+0x166>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   18d7e:	4821      	ldr	r0, [pc, #132]	; (18e04 <prepare_cb+0x1c8>)
   18d80:	4621      	mov	r1, r4
   18d82:	f000 fa27 	bl	191d4 <radio_isr_set>
		radio_disable();
   18d86:	f000 fb21 	bl	193cc <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   18d8a:	2000      	movs	r0, #0
   18d8c:	b003      	add	sp, #12
   18d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   18d90:	8be1      	ldrh	r1, [r4, #30]
   18d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18d96:	f104 0218 	add.w	r2, r4, #24
   18d9a:	f7fc fac9 	bl	15330 <lll_chan_sel_2>
   18d9e:	4606      	mov	r6, r0
   18da0:	e773      	b.n	18c8a <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   18da2:	4620      	mov	r0, r4
   18da4:	f7fd ff26 	bl	16bf4 <lll_prepare_done>
		LL_ASSERT(!ret);
   18da8:	2800      	cmp	r0, #0
   18daa:	d0ee      	beq.n	18d8a <prepare_cb+0x14e>
   18dac:	4a16      	ldr	r2, [pc, #88]	; (18e08 <prepare_cb+0x1cc>)
   18dae:	4917      	ldr	r1, [pc, #92]	; (18e0c <prepare_cb+0x1d0>)
   18db0:	4817      	ldr	r0, [pc, #92]	; (18e10 <prepare_cb+0x1d4>)
   18db2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   18db6:	f006 fcb2 	bl	1f71e <printk>
   18dba:	4040      	eors	r0, r0
   18dbc:	f380 8811 	msr	BASEPRI, r0
   18dc0:	f04f 0003 	mov.w	r0, #3
   18dc4:	df02      	svc	2
}
   18dc6:	2000      	movs	r0, #0
   18dc8:	b003      	add	sp, #12
   18dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   18dcc:	2318      	movs	r3, #24
   18dce:	e7c7      	b.n	18d60 <prepare_cb+0x124>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   18dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   18dd4:	f7f1 fc2c 	bl	a630 <memq_peek>
		if (!link) {
   18dd8:	2800      	cmp	r0, #0
   18dda:	f47f af6b 	bne.w	18cb4 <prepare_cb+0x78>
			lll->empty = 1U;
   18dde:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18de2:	f043 0304 	orr.w	r3, r3, #4
   18de6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   18dea:	e763      	b.n	18cb4 <prepare_cb+0x78>
		radio_isr_set(lll_isr_early_abort, lll);
   18dec:	4809      	ldr	r0, [pc, #36]	; (18e14 <prepare_cb+0x1d8>)
   18dee:	4621      	mov	r1, r4
   18df0:	f000 f9f0 	bl	191d4 <radio_isr_set>
		radio_disable();
   18df4:	f000 faea 	bl	193cc <radio_disable>
}
   18df8:	2000      	movs	r0, #0
   18dfa:	b003      	add	sp, #12
   18dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18dfe:	bf00      	nop
   18e00:	000187e9 	.word	0x000187e9
   18e04:	00016e2d 	.word	0x00016e2d
   18e08:	00025ddc 	.word	0x00025ddc
   18e0c:	000253cc 	.word	0x000253cc
   18e10:	000250f0 	.word	0x000250f0
   18e14:	00016e51 	.word	0x00016e51

00018e18 <lll_periph_prepare>:
{
   18e18:	b510      	push	{r4, lr}
   18e1a:	b082      	sub	sp, #8
   18e1c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   18e1e:	f7fe f967 	bl	170f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   18e22:	2800      	cmp	r0, #0
   18e24:	db25      	blt.n	18e72 <lll_periph_prepare+0x5a>
	lll = p->param;
   18e26:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   18e28:	8920      	ldrh	r0, [r4, #8]
   18e2a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   18e2c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   18e2e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   18e32:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   18e34:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   18e36:	4283      	cmp	r3, r0
   18e38:	bf28      	it	cs
   18e3a:	4603      	movcs	r3, r0
   18e3c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   18e3e:	4a13      	ldr	r2, [pc, #76]	; (18e8c <lll_periph_prepare+0x74>)
   18e40:	4913      	ldr	r1, [pc, #76]	; (18e90 <lll_periph_prepare+0x78>)
   18e42:	4814      	ldr	r0, [pc, #80]	; (18e94 <lll_periph_prepare+0x7c>)
   18e44:	9400      	str	r4, [sp, #0]
   18e46:	2300      	movs	r3, #0
   18e48:	f7f5 feb2 	bl	ebb0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18e4c:	b108      	cbz	r0, 18e52 <lll_periph_prepare+0x3a>
   18e4e:	3077      	adds	r0, #119	; 0x77
   18e50:	d101      	bne.n	18e56 <lll_periph_prepare+0x3e>
}
   18e52:	b002      	add	sp, #8
   18e54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   18e56:	4a10      	ldr	r2, [pc, #64]	; (18e98 <lll_periph_prepare+0x80>)
   18e58:	4910      	ldr	r1, [pc, #64]	; (18e9c <lll_periph_prepare+0x84>)
   18e5a:	4811      	ldr	r0, [pc, #68]	; (18ea0 <lll_periph_prepare+0x88>)
   18e5c:	235e      	movs	r3, #94	; 0x5e
   18e5e:	f006 fc5e 	bl	1f71e <printk>
   18e62:	4040      	eors	r0, r0
   18e64:	f380 8811 	msr	BASEPRI, r0
   18e68:	f04f 0003 	mov.w	r0, #3
   18e6c:	df02      	svc	2
}
   18e6e:	b002      	add	sp, #8
   18e70:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   18e72:	4a09      	ldr	r2, [pc, #36]	; (18e98 <lll_periph_prepare+0x80>)
   18e74:	490b      	ldr	r1, [pc, #44]	; (18ea4 <lll_periph_prepare+0x8c>)
   18e76:	480a      	ldr	r0, [pc, #40]	; (18ea0 <lll_periph_prepare+0x88>)
   18e78:	234d      	movs	r3, #77	; 0x4d
   18e7a:	f006 fc50 	bl	1f71e <printk>
   18e7e:	4040      	eors	r0, r0
   18e80:	f380 8811 	msr	BASEPRI, r0
   18e84:	f04f 0003 	mov.w	r0, #3
   18e88:	df02      	svc	2
   18e8a:	e7cc      	b.n	18e26 <lll_periph_prepare+0xe>
   18e8c:	00018c3d 	.word	0x00018c3d
   18e90:	00018509 	.word	0x00018509
   18e94:	00016cb9 	.word	0x00016cb9
   18e98:	00025ddc 	.word	0x00025ddc
   18e9c:	00025d10 	.word	0x00025d10
   18ea0:	000250f0 	.word	0x000250f0
   18ea4:	00025c3c 	.word	0x00025c3c

00018ea8 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   18ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   18eaa:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   18eac:	89a2      	ldrh	r2, [r4, #12]
   18eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18eb2:	429a      	cmp	r2, r3
{
   18eb4:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   18eb6:	f000 8090 	beq.w	18fda <prepare_cb+0x132>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   18eba:	4605      	mov	r5, r0
   18ebc:	f7ff fb10 	bl	184e0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   18ec0:	892b      	ldrh	r3, [r5, #8]
   18ec2:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   18ec4:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   18ec6:	441a      	add	r2, r3
   18ec8:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   18eca:	4410      	add	r0, r2
   18ecc:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   18ece:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   18ed0:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   18ed2:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   18ed4:	2100      	movs	r1, #0
   18ed6:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   18ed8:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   18eda:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   18edc:	d460      	bmi.n	18fa0 <prepare_cb+0xf8>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   18ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18ee2:	7fa1      	ldrb	r1, [r4, #30]
   18ee4:	9300      	str	r3, [sp, #0]
   18ee6:	f104 001f 	add.w	r0, r4, #31
   18eea:	f104 0318 	add.w	r3, r4, #24
   18eee:	f7fc f9db 	bl	152a8 <lll_chan_sel_1>
   18ef2:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18ef4:	4620      	mov	r0, r4
   18ef6:	a903      	add	r1, sp, #12
   18ef8:	f7ff fc06 	bl	18708 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   18efc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   18f00:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   18f02:	f3c2 0340 	ubfx	r3, r2, #1, #1
   18f06:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   18f08:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18f0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18f10:	780a      	ldrb	r2, [r1, #0]
   18f12:	f022 020c 	bic.w	r2, r2, #12
   18f16:	4313      	orrs	r3, r2
   18f18:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   18f1a:	f000 f99d 	bl	19258 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18f1e:	2000      	movs	r0, #0
   18f20:	f000 f9ce 	bl	192c0 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   18f24:	1d20      	adds	r0, r4, #4
   18f26:	f000 f9e9 	bl	192fc <radio_aa_set>
   18f2a:	8923      	ldrh	r3, [r4, #8]
   18f2c:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   18f2e:	f240 605b 	movw	r0, #1627	; 0x65b
   18f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   18f36:	f000 fa87 	bl	19448 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   18f3a:	4630      	mov	r0, r6
   18f3c:	f7fd feda 	bl	16cf4 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   18f40:	9903      	ldr	r1, [sp, #12]
   18f42:	4620      	mov	r0, r4
   18f44:	f7ff fbb4 	bl	186b0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   18f48:	4621      	mov	r1, r4
   18f4a:	4828      	ldr	r0, [pc, #160]	; (18fec <prepare_cb+0x144>)
   18f4c:	f000 f942 	bl	191d4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   18f50:	2096      	movs	r0, #150	; 0x96
   18f52:	f000 fbc3 	bl	196dc <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   18f56:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18f5a:	f000 0007 	and.w	r0, r0, #7
   18f5e:	f000 fa91 	bl	19484 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   18f62:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   18f64:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   18f66:	4638      	mov	r0, r7
   18f68:	f7fd feaa 	bl	16cc0 <lll_event_offset_get>
   18f6c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   18f6e:	686a      	ldr	r2, [r5, #4]
   18f70:	f106 0109 	add.w	r1, r6, #9
   18f74:	2001      	movs	r0, #1
   18f76:	f000 fbbd 	bl	196f4 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   18f7a:	f000 fcbb 	bl	198f4 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   18f7e:	89a1      	ldrh	r1, [r4, #12]
   18f80:	3105      	adds	r1, #5
   18f82:	4632      	mov	r2, r6
   18f84:	b2c9      	uxtb	r1, r1
   18f86:	4638      	mov	r0, r7
   18f88:	f7fd fea4 	bl	16cd4 <lll_preempt_calc>
   18f8c:	b188      	cbz	r0, 18fb2 <prepare_cb+0x10a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   18f8e:	4818      	ldr	r0, [pc, #96]	; (18ff0 <prepare_cb+0x148>)
   18f90:	4621      	mov	r1, r4
   18f92:	f000 f91f 	bl	191d4 <radio_isr_set>
		radio_disable();
   18f96:	f000 fa19 	bl	193cc <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   18f9a:	2000      	movs	r0, #0
   18f9c:	b005      	add	sp, #20
   18f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   18fa0:	8be1      	ldrh	r1, [r4, #30]
   18fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18fa6:	f104 0218 	add.w	r2, r4, #24
   18faa:	f7fc f9c1 	bl	15330 <lll_chan_sel_2>
   18fae:	4606      	mov	r6, r0
   18fb0:	e7a0      	b.n	18ef4 <prepare_cb+0x4c>
		ret = lll_prepare_done(lll);
   18fb2:	4620      	mov	r0, r4
   18fb4:	f7fd fe1e 	bl	16bf4 <lll_prepare_done>
		LL_ASSERT(!ret);
   18fb8:	2800      	cmp	r0, #0
   18fba:	d0ee      	beq.n	18f9a <prepare_cb+0xf2>
   18fbc:	4a0d      	ldr	r2, [pc, #52]	; (18ff4 <prepare_cb+0x14c>)
   18fbe:	490e      	ldr	r1, [pc, #56]	; (18ff8 <prepare_cb+0x150>)
   18fc0:	480e      	ldr	r0, [pc, #56]	; (18ffc <prepare_cb+0x154>)
   18fc2:	23fd      	movs	r3, #253	; 0xfd
   18fc4:	f006 fbab 	bl	1f71e <printk>
   18fc8:	4040      	eors	r0, r0
   18fca:	f380 8811 	msr	BASEPRI, r0
   18fce:	f04f 0003 	mov.w	r0, #3
   18fd2:	df02      	svc	2
}
   18fd4:	2000      	movs	r0, #0
   18fd6:	b005      	add	sp, #20
   18fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   18fda:	4809      	ldr	r0, [pc, #36]	; (19000 <prepare_cb+0x158>)
   18fdc:	4621      	mov	r1, r4
   18fde:	f000 f8f9 	bl	191d4 <radio_isr_set>
		radio_disable();
   18fe2:	f000 f9f3 	bl	193cc <radio_disable>
}
   18fe6:	2000      	movs	r0, #0
   18fe8:	b005      	add	sp, #20
   18fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18fec:	000185f9 	.word	0x000185f9
   18ff0:	00016e2d 	.word	0x00016e2d
   18ff4:	00025e30 	.word	0x00025e30
   18ff8:	000253cc 	.word	0x000253cc
   18ffc:	000250f0 	.word	0x000250f0
   19000:	00016e51 	.word	0x00016e51

00019004 <lll_central_prepare>:
{
   19004:	b510      	push	{r4, lr}
   19006:	b082      	sub	sp, #8
   19008:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1900a:	f7fe f871 	bl	170f0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1900e:	2800      	cmp	r0, #0
   19010:	db19      	blt.n	19046 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   19012:	4a13      	ldr	r2, [pc, #76]	; (19060 <lll_central_prepare+0x5c>)
   19014:	4913      	ldr	r1, [pc, #76]	; (19064 <lll_central_prepare+0x60>)
   19016:	4814      	ldr	r0, [pc, #80]	; (19068 <lll_central_prepare+0x64>)
   19018:	9400      	str	r4, [sp, #0]
   1901a:	2300      	movs	r3, #0
   1901c:	f7f5 fdc8 	bl	ebb0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   19020:	b108      	cbz	r0, 19026 <lll_central_prepare+0x22>
   19022:	3077      	adds	r0, #119	; 0x77
   19024:	d101      	bne.n	1902a <lll_central_prepare+0x26>
}
   19026:	b002      	add	sp, #8
   19028:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1902a:	4a10      	ldr	r2, [pc, #64]	; (1906c <lll_central_prepare+0x68>)
   1902c:	4910      	ldr	r1, [pc, #64]	; (19070 <lll_central_prepare+0x6c>)
   1902e:	4811      	ldr	r0, [pc, #68]	; (19074 <lll_central_prepare+0x70>)
   19030:	2351      	movs	r3, #81	; 0x51
   19032:	f006 fb74 	bl	1f71e <printk>
   19036:	4040      	eors	r0, r0
   19038:	f380 8811 	msr	BASEPRI, r0
   1903c:	f04f 0003 	mov.w	r0, #3
   19040:	df02      	svc	2
}
   19042:	b002      	add	sp, #8
   19044:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   19046:	4a09      	ldr	r2, [pc, #36]	; (1906c <lll_central_prepare+0x68>)
   19048:	490b      	ldr	r1, [pc, #44]	; (19078 <lll_central_prepare+0x74>)
   1904a:	480a      	ldr	r0, [pc, #40]	; (19074 <lll_central_prepare+0x70>)
   1904c:	234c      	movs	r3, #76	; 0x4c
   1904e:	f006 fb66 	bl	1f71e <printk>
   19052:	4040      	eors	r0, r0
   19054:	f380 8811 	msr	BASEPRI, r0
   19058:	f04f 0003 	mov.w	r0, #3
   1905c:	df02      	svc	2
   1905e:	e7d8      	b.n	19012 <lll_central_prepare+0xe>
   19060:	00018ea9 	.word	0x00018ea9
   19064:	00018509 	.word	0x00018509
   19068:	00016cb9 	.word	0x00016cb9
   1906c:	00025e30 	.word	0x00025e30
   19070:	00025d10 	.word	0x00025d10
   19074:	000250f0 	.word	0x000250f0
   19078:	00025c3c 	.word	0x00025c3c

0001907c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1907c:	4b05      	ldr	r3, [pc, #20]	; (19094 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1907e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19082:	2100      	movs	r1, #0
   19084:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19088:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1908c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   19090:	4770      	bx	lr
   19092:	bf00      	nop
   19094:	4000b000 	.word	0x4000b000

00019098 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   19098:	4b05      	ldr	r3, [pc, #20]	; (190b0 <cntr_start+0x18>)
   1909a:	7818      	ldrb	r0, [r3, #0]
   1909c:	1c42      	adds	r2, r0, #1
   1909e:	701a      	strb	r2, [r3, #0]
   190a0:	b918      	cbnz	r0, 190aa <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   190a2:	4b04      	ldr	r3, [pc, #16]	; (190b4 <cntr_start+0x1c>)
   190a4:	2201      	movs	r2, #1
   190a6:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   190a8:	4770      	bx	lr
		return 1;
   190aa:	2001      	movs	r0, #1
}
   190ac:	4770      	bx	lr
   190ae:	bf00      	nop
   190b0:	200060ea 	.word	0x200060ea
   190b4:	4000b000 	.word	0x4000b000

000190b8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   190b8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   190ba:	4c0d      	ldr	r4, [pc, #52]	; (190f0 <cntr_stop+0x38>)
   190bc:	7820      	ldrb	r0, [r4, #0]
   190be:	b148      	cbz	r0, 190d4 <cntr_stop+0x1c>

	if (--_refcount) {
   190c0:	3801      	subs	r0, #1
   190c2:	b2c0      	uxtb	r0, r0
   190c4:	7020      	strb	r0, [r4, #0]
   190c6:	b918      	cbnz	r0, 190d0 <cntr_stop+0x18>
   190c8:	4b0a      	ldr	r3, [pc, #40]	; (190f4 <cntr_stop+0x3c>)
   190ca:	2201      	movs	r2, #1
   190cc:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   190ce:	bd10      	pop	{r4, pc}
		return 1;
   190d0:	2001      	movs	r0, #1
}
   190d2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   190d4:	4a08      	ldr	r2, [pc, #32]	; (190f8 <cntr_stop+0x40>)
   190d6:	4909      	ldr	r1, [pc, #36]	; (190fc <cntr_stop+0x44>)
   190d8:	4809      	ldr	r0, [pc, #36]	; (19100 <cntr_stop+0x48>)
   190da:	232d      	movs	r3, #45	; 0x2d
   190dc:	f006 fb1f 	bl	1f71e <printk>
   190e0:	4040      	eors	r0, r0
   190e2:	f380 8811 	msr	BASEPRI, r0
   190e6:	f04f 0003 	mov.w	r0, #3
   190ea:	df02      	svc	2
	if (--_refcount) {
   190ec:	7820      	ldrb	r0, [r4, #0]
   190ee:	e7e7      	b.n	190c0 <cntr_stop+0x8>
   190f0:	200060ea 	.word	0x200060ea
   190f4:	4000b000 	.word	0x4000b000
   190f8:	00025e80 	.word	0x00025e80
   190fc:	00025ecc 	.word	0x00025ecc
   19100:	000250f0 	.word	0x000250f0

00019104 <cntr_cnt_get>:
     return p_reg->COUNTER;
   19104:	4b01      	ldr	r3, [pc, #4]	; (1910c <cntr_cnt_get+0x8>)
   19106:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1910a:	4770      	bx	lr
   1910c:	4000b000 	.word	0x4000b000

00019110 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   19110:	4b02      	ldr	r3, [pc, #8]	; (1911c <cntr_cmp_set+0xc>)
   19112:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19116:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1911a:	4770      	bx	lr
   1911c:	4000b000 	.word	0x4000b000

00019120 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19120:	4b12      	ldr	r3, [pc, #72]	; (1916c <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   19122:	b430      	push	{r4, r5}
   19124:	2101      	movs	r1, #1
   19126:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   19128:	2000      	movs	r0, #0
   1912a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1912c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   19130:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   19134:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   19138:	6019      	str	r1, [r3, #0]
}
   1913a:	e005      	b.n	19148 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1913c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19140:	b932      	cbnz	r2, 19150 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   19142:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19146:	b11a      	cbz	r2, 19150 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19148:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1914c:	2a00      	cmp	r2, #0
   1914e:	d0f5      	beq.n	1913c <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19150:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   19152:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19156:	2a00      	cmp	r2, #0
   19158:	d1e7      	bne.n	1912a <do_ecb+0xa>
   1915a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1915e:	2d00      	cmp	r5, #0
   19160:	d0e3      	beq.n	1912a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   19162:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   19164:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   19168:	4770      	bx	lr
   1916a:	bf00      	nop
   1916c:	4000e000 	.word	0x4000e000

00019170 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   19170:	b570      	push	{r4, r5, r6, lr}
   19172:	b08c      	sub	sp, #48	; 0x30
   19174:	460e      	mov	r6, r1
   19176:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19178:	4601      	mov	r1, r0
   1917a:	2210      	movs	r2, #16
   1917c:	4668      	mov	r0, sp
{
   1917e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19180:	f7f1 fa24 	bl	a5cc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   19184:	2210      	movs	r2, #16
   19186:	eb0d 0002 	add.w	r0, sp, r2
   1918a:	4631      	mov	r1, r6
   1918c:	f7f1 fa1e 	bl	a5cc <mem_rcopy>

	do_ecb(&ecb);
   19190:	4668      	mov	r0, sp
   19192:	f7ff ffc5 	bl	19120 <do_ecb>

	if (cipher_text_le) {
   19196:	b125      	cbz	r5, 191a2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   19198:	2210      	movs	r2, #16
   1919a:	a908      	add	r1, sp, #32
   1919c:	4628      	mov	r0, r5
   1919e:	f7f1 fa15 	bl	a5cc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   191a2:	b124      	cbz	r4, 191ae <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   191a4:	2210      	movs	r2, #16
   191a6:	a908      	add	r1, sp, #32
   191a8:	4620      	mov	r0, r4
   191aa:	f007 fabd 	bl	20728 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   191ae:	b00c      	add	sp, #48	; 0x30
   191b0:	bd70      	pop	{r4, r5, r6, pc}
   191b2:	bf00      	nop

000191b4 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   191b4:	4b04      	ldr	r3, [pc, #16]	; (191c8 <isr_radio+0x14>)
   191b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   191ba:	b123      	cbz	r3, 191c6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   191bc:	4a03      	ldr	r2, [pc, #12]	; (191cc <isr_radio+0x18>)
   191be:	4b04      	ldr	r3, [pc, #16]	; (191d0 <isr_radio+0x1c>)
   191c0:	6810      	ldr	r0, [r2, #0]
   191c2:	681b      	ldr	r3, [r3, #0]
   191c4:	4718      	bx	r3
}
   191c6:	4770      	bx	lr
   191c8:	40001000 	.word	0x40001000
   191cc:	200053f0 	.word	0x200053f0
   191d0:	200053ec 	.word	0x200053ec

000191d4 <radio_isr_set>:
{
   191d4:	b538      	push	{r3, r4, r5, lr}
   191d6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   191d8:	2001      	movs	r0, #1
{
   191da:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   191dc:	f7ec fdde 	bl	5d9c <arch_irq_disable>
	isr_cb = cb;
   191e0:	4b08      	ldr	r3, [pc, #32]	; (19204 <radio_isr_set+0x30>)
	isr_cb_param = param;
   191e2:	4a09      	ldr	r2, [pc, #36]	; (19208 <radio_isr_set+0x34>)
	isr_cb = cb;
   191e4:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   191e6:	4909      	ldr	r1, [pc, #36]	; (1920c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   191e8:	4b09      	ldr	r3, [pc, #36]	; (19210 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   191ea:	6015      	str	r5, [r2, #0]
   191ec:	2010      	movs	r0, #16
   191ee:	2202      	movs	r2, #2
   191f0:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   191f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   191f8:	2001      	movs	r0, #1
}
   191fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   191fe:	f7ec bdbd 	b.w	5d7c <arch_irq_enable>
   19202:	bf00      	nop
   19204:	200053ec 	.word	0x200053ec
   19208:	200053f0 	.word	0x200053f0
   1920c:	40001000 	.word	0x40001000
   19210:	e000e100 	.word	0xe000e100

00019214 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   19214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1921c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1921e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   19222:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   19226:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1922a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1922e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   19232:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   19236:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1923a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1923e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   19242:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   19246:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1924a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1924e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   19252:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   19256:	4770      	bx	lr

00019258 <radio_reset>:
{
   19258:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1925a:	2001      	movs	r0, #1
   1925c:	f7ec fd9e 	bl	5d9c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   19260:	4a0d      	ldr	r2, [pc, #52]	; (19298 <radio_reset+0x40>)
   19262:	2100      	movs	r1, #0
   19264:	2301      	movs	r3, #1
   19266:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1926a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1926e:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   19272:	490a      	ldr	r1, [pc, #40]	; (1929c <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   19274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19278:	f023 0301 	bic.w	r3, r3, #1
   1927c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19280:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19284:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19288:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1928c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19290:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   19294:	bd10      	pop	{r4, pc}
   19296:	bf00      	nop
   19298:	40001000 	.word	0x40001000
   1929c:	4001f000 	.word	0x4001f000

000192a0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   192a0:	4b06      	ldr	r3, [pc, #24]	; (192bc <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   192a2:	2802      	cmp	r0, #2
   192a4:	bf14      	ite	ne
   192a6:	2203      	movne	r2, #3
   192a8:	2204      	moveq	r2, #4
   192aa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   192ae:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   192b2:	f042 0201 	orr.w	r2, r2, #1
   192b6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   192ba:	4770      	bx	lr
   192bc:	40001000 	.word	0x40001000

000192c0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   192c0:	4b01      	ldr	r3, [pc, #4]	; (192c8 <radio_tx_power_set+0x8>)
   192c2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   192c6:	4770      	bx	lr
   192c8:	40001000 	.word	0x40001000

000192cc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   192cc:	4b01      	ldr	r3, [pc, #4]	; (192d4 <radio_freq_chan_set+0x8>)
   192ce:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   192d2:	4770      	bx	lr
   192d4:	40001000 	.word	0x40001000

000192d8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   192d8:	4b07      	ldr	r3, [pc, #28]	; (192f8 <radio_whiten_iv_set+0x20>)
   192da:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   192de:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   192e2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   192e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   192ea:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   192ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   192f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   192f6:	4770      	bx	lr
   192f8:	40001000 	.word	0x40001000

000192fc <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   192fc:	4a0a      	ldr	r2, [pc, #40]	; (19328 <radio_aa_set+0x2c>)
   192fe:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   19300:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   19302:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   19306:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1930a:	78c3      	ldrb	r3, [r0, #3]
   1930c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19310:	7843      	ldrb	r3, [r0, #1]
   19312:	f890 c002 	ldrb.w	ip, [r0, #2]
   19316:	7801      	ldrb	r1, [r0, #0]
   19318:	041b      	lsls	r3, r3, #16
   1931a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1931e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   19322:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   19326:	4770      	bx	lr
   19328:	40001000 	.word	0x40001000

0001932c <radio_pkt_configure>:
	switch (phy) {
   1932c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19330:	2b02      	cmp	r3, #2
   19332:	bf14      	ite	ne
   19334:	f04f 0c00 	movne.w	ip, #0
   19338:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1933c:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1933e:	bf48      	it	mi
   19340:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   19344:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   19348:	4b0a      	ldr	r3, [pc, #40]	; (19374 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1934a:	4a0b      	ldr	r2, [pc, #44]	; (19378 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1934c:	ea40 000c 	orr.w	r0, r0, ip
   19350:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   19354:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   19358:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1935c:	4002      	ands	r2, r0
   1935e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   19362:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   19366:	4311      	orrs	r1, r2
   19368:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1936c:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   19370:	4770      	bx	lr
   19372:	bf00      	nop
   19374:	40001000 	.word	0x40001000
   19378:	fef80000 	.word	0xfef80000

0001937c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1937c:	4b01      	ldr	r3, [pc, #4]	; (19384 <radio_pkt_rx_set+0x8>)
   1937e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   19382:	4770      	bx	lr
   19384:	40001000 	.word	0x40001000

00019388 <radio_pkt_tx_set>:
   19388:	4b01      	ldr	r3, [pc, #4]	; (19390 <radio_pkt_tx_set+0x8>)
   1938a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1938e:	4770      	bx	lr
   19390:	40001000 	.word	0x40001000

00019394 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   19394:	2802      	cmp	r0, #2
}
   19396:	bf14      	ite	ne
   19398:	2029      	movne	r0, #41	; 0x29
   1939a:	2028      	moveq	r0, #40	; 0x28
   1939c:	4770      	bx	lr
   1939e:	bf00      	nop

000193a0 <radio_tx_chain_delay_get>:
}
   193a0:	2001      	movs	r0, #1
   193a2:	4770      	bx	lr

000193a4 <radio_rx_ready_delay_get>:
}
   193a4:	2029      	movs	r0, #41	; 0x29
   193a6:	4770      	bx	lr

000193a8 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   193a8:	2802      	cmp	r0, #2
}
   193aa:	bf14      	ite	ne
   193ac:	200a      	movne	r0, #10
   193ae:	2005      	moveq	r0, #5
   193b0:	4770      	bx	lr
   193b2:	bf00      	nop

000193b4 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   193b4:	4b01      	ldr	r3, [pc, #4]	; (193bc <radio_rx_enable+0x8>)
   193b6:	2201      	movs	r2, #1
   193b8:	605a      	str	r2, [r3, #4]
}
   193ba:	4770      	bx	lr
   193bc:	40001000 	.word	0x40001000

000193c0 <radio_tx_enable>:
   193c0:	4b01      	ldr	r3, [pc, #4]	; (193c8 <radio_tx_enable+0x8>)
   193c2:	2201      	movs	r2, #1
   193c4:	601a      	str	r2, [r3, #0]
}
   193c6:	4770      	bx	lr
   193c8:	40001000 	.word	0x40001000

000193cc <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   193cc:	4a07      	ldr	r2, [pc, #28]	; (193ec <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   193ce:	4908      	ldr	r1, [pc, #32]	; (193f0 <radio_disable+0x24>)
{
   193d0:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   193d2:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   193d4:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   193d8:	2000      	movs	r0, #0
   193da:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   193de:	6053      	str	r3, [r2, #4]
}
   193e0:	bc10      	pop	{r4}
   193e2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   193e4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   193e8:	610b      	str	r3, [r1, #16]
}
   193ea:	4770      	bx	lr
   193ec:	4001f000 	.word	0x4001f000
   193f0:	40001000 	.word	0x40001000

000193f4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   193f4:	4b04      	ldr	r3, [pc, #16]	; (19408 <radio_status_reset+0x14>)
   193f6:	2200      	movs	r2, #0
   193f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   193fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   19400:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   19404:	4770      	bx	lr
   19406:	bf00      	nop
   19408:	40001000 	.word	0x40001000

0001940c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1940c:	4b03      	ldr	r3, [pc, #12]	; (1941c <radio_is_ready+0x10>)
   1940e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   19412:	3800      	subs	r0, #0
   19414:	bf18      	it	ne
   19416:	2001      	movne	r0, #1
   19418:	4770      	bx	lr
   1941a:	bf00      	nop
   1941c:	40001000 	.word	0x40001000

00019420 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   19420:	4b03      	ldr	r3, [pc, #12]	; (19430 <radio_is_done+0x10>)
   19422:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   19426:	3800      	subs	r0, #0
   19428:	bf18      	it	ne
   1942a:	2001      	movne	r0, #1
   1942c:	4770      	bx	lr
   1942e:	bf00      	nop
   19430:	40001000 	.word	0x40001000

00019434 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   19434:	4b03      	ldr	r3, [pc, #12]	; (19444 <radio_is_idle+0x10>)
   19436:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1943a:	fab0 f080 	clz	r0, r0
   1943e:	0940      	lsrs	r0, r0, #5
   19440:	4770      	bx	lr
   19442:	bf00      	nop
   19444:	40001000 	.word	0x40001000

00019448 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   19448:	4b04      	ldr	r3, [pc, #16]	; (1945c <radio_crc_configure+0x14>)
   1944a:	f240 1203 	movw	r2, #259	; 0x103
   1944e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   19452:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   19456:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1945a:	4770      	bx	lr
   1945c:	40001000 	.word	0x40001000

00019460 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   19460:	4b03      	ldr	r3, [pc, #12]	; (19470 <radio_crc_is_valid+0x10>)
   19462:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19466:	3800      	subs	r0, #0
   19468:	bf18      	it	ne
   1946a:	2001      	movne	r0, #1
   1946c:	4770      	bx	lr
   1946e:	bf00      	nop
   19470:	40001000 	.word	0x40001000

00019474 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   19474:	4800      	ldr	r0, [pc, #0]	; (19478 <radio_pkt_empty_get+0x4>)
   19476:	4770      	bx	lr
   19478:	200052e4 	.word	0x200052e4

0001947c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1947c:	4800      	ldr	r0, [pc, #0]	; (19480 <radio_pkt_scratch_get+0x4>)
   1947e:	4770      	bx	lr
   19480:	200052e8 	.word	0x200052e8

00019484 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   19484:	4b1d      	ldr	r3, [pc, #116]	; (194fc <radio_switch_complete_and_rx+0x78>)
{
   19486:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   19488:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1948a:	4d1d      	ldr	r5, [pc, #116]	; (19500 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1948c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19490:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19492:	4e1c      	ldr	r6, [pc, #112]	; (19504 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   19494:	4c1c      	ldr	r4, [pc, #112]	; (19508 <radio_switch_complete_and_rx+0x84>)
   19496:	4f1d      	ldr	r7, [pc, #116]	; (1950c <radio_switch_complete_and_rx+0x88>)
   19498:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1949c:	f102 030c 	add.w	r3, r2, #12
   194a0:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   194a2:	00d0      	lsls	r0, r2, #3
   194a4:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   194a6:	0091      	lsls	r1, r2, #2
   194a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   194ac:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   194b0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   194b4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   194bc:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   194c0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   194c4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194c8:	4811      	ldr	r0, [pc, #68]	; (19510 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   194ca:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194ce:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   194d2:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   194d6:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   194d8:	bf8a      	itet	hi
   194da:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   194de:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   194e0:	3b2d      	subhi	r3, #45	; 0x2d
   194e2:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   194e6:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   194e8:	4b06      	ldr	r3, [pc, #24]	; (19504 <radio_switch_complete_and_rx+0x80>)
   194ea:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   194ee:	f002 0201 	and.w	r2, r2, #1
   194f2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   194f6:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   194f8:	bcf0      	pop	{r4, r5, r6, r7}
   194fa:	4770      	bx	lr
   194fc:	40001000 	.word	0x40001000
   19500:	200060eb 	.word	0x200060eb
   19504:	4001f000 	.word	0x4001f000
   19508:	40009140 	.word	0x40009140
   1950c:	4000110c 	.word	0x4000110c
   19510:	40001004 	.word	0x40001004

00019514 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   19514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   19518:	4e28      	ldr	r6, [pc, #160]	; (195bc <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1951a:	4c29      	ldr	r4, [pc, #164]	; (195c0 <radio_switch_complete_and_tx+0xac>)
   1951c:	4f29      	ldr	r7, [pc, #164]	; (195c4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1951e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 195c8 <radio_switch_complete_and_tx+0xb4>
   19522:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 195cc <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   19526:	2303      	movs	r3, #3
   19528:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1952c:	7821      	ldrb	r1, [r4, #0]
   1952e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   19532:	f101 030c 	add.w	r3, r1, #12
   19536:	b2db      	uxtb	r3, r3
   19538:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1953a:	00cd      	lsls	r5, r1, #3
   1953c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19540:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   19544:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   19548:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1954c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19550:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19554:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   19558:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1955c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   19560:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   19564:	2a02      	cmp	r2, #2
   19566:	bf08      	it	eq
   19568:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1956a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1956e:	f242 42b8 	movw	r2, #9400	; 0x24b8
   19572:	f241 3588 	movw	r5, #5000	; 0x1388
   19576:	2802      	cmp	r0, #2
   19578:	bf08      	it	eq
   1957a:	462a      	moveq	r2, r5
   1957c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   19580:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   19584:	4413      	add	r3, r2
   19586:	4a12      	ldr	r2, [pc, #72]	; (195d0 <radio_switch_complete_and_tx+0xbc>)
   19588:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1958c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   19590:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   19594:	bf85      	ittet	hi
   19596:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   19598:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1959c:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1959e:	1a1b      	subhi	r3, r3, r0
   195a0:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   195a4:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   195a6:	4b08      	ldr	r3, [pc, #32]	; (195c8 <radio_switch_complete_and_tx+0xb4>)
   195a8:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   195ac:	f001 0101 	and.w	r1, r1, #1
   195b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   195b4:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   195b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195ba:	bf00      	nop
   195bc:	40001000 	.word	0x40001000
   195c0:	200060eb 	.word	0x200060eb
   195c4:	40009140 	.word	0x40009140
   195c8:	4001f000 	.word	0x4001f000
   195cc:	4000110c 	.word	0x4000110c
   195d0:	10624dd3 	.word	0x10624dd3

000195d4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   195d4:	4904      	ldr	r1, [pc, #16]	; (195e8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   195d6:	4b05      	ldr	r3, [pc, #20]	; (195ec <radio_switch_complete_and_disable+0x18>)
   195d8:	2003      	movs	r0, #3
   195da:	f44f 6210 	mov.w	r2, #2304	; 0x900
   195de:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   195e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   195e6:	4770      	bx	lr
   195e8:	40001000 	.word	0x40001000
   195ec:	4001f000 	.word	0x4001f000

000195f0 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   195f0:	2000      	movs	r0, #0
   195f2:	4770      	bx	lr

000195f4 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   195f4:	4a03      	ldr	r2, [pc, #12]	; (19604 <radio_rssi_measure+0x10>)
   195f6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   195fa:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   195fe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   19602:	4770      	bx	lr
   19604:	40001000 	.word	0x40001000

00019608 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   19608:	4b01      	ldr	r3, [pc, #4]	; (19610 <radio_rssi_get+0x8>)
   1960a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1960e:	4770      	bx	lr
   19610:	40001000 	.word	0x40001000

00019614 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   19614:	4b02      	ldr	r3, [pc, #8]	; (19620 <radio_rssi_status_reset+0xc>)
   19616:	2200      	movs	r2, #0
   19618:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1961c:	4770      	bx	lr
   1961e:	bf00      	nop
   19620:	40001000 	.word	0x40001000

00019624 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   19624:	4b03      	ldr	r3, [pc, #12]	; (19634 <radio_rssi_is_ready+0x10>)
   19626:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1962a:	3800      	subs	r0, #0
   1962c:	bf18      	it	ne
   1962e:	2001      	movne	r0, #1
   19630:	4770      	bx	lr
   19632:	bf00      	nop
   19634:	40001000 	.word	0x40001000

00019638 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   19638:	b410      	push	{r4}
   1963a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1963e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   19642:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1964a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1964c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   19650:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   19654:	8894      	ldrh	r4, [r2, #4]
   19656:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1965a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1965e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   19662:	d1ec      	bne.n	1963e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19664:	4b03      	ldr	r3, [pc, #12]	; (19674 <radio_filter_configure+0x3c>)
}
   19666:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19668:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1966c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   19670:	4770      	bx	lr
   19672:	bf00      	nop
   19674:	40001000 	.word	0x40001000

00019678 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   19678:	4a03      	ldr	r2, [pc, #12]	; (19688 <radio_filter_disable+0x10>)
   1967a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1967e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19682:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   19686:	4770      	bx	lr
   19688:	40001000 	.word	0x40001000

0001968c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1968c:	4b02      	ldr	r3, [pc, #8]	; (19698 <radio_filter_status_reset+0xc>)
   1968e:	2200      	movs	r2, #0
   19690:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   19694:	4770      	bx	lr
   19696:	bf00      	nop
   19698:	40001000 	.word	0x40001000

0001969c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1969c:	4b03      	ldr	r3, [pc, #12]	; (196ac <radio_filter_has_match+0x10>)
   1969e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   196a2:	3800      	subs	r0, #0
   196a4:	bf18      	it	ne
   196a6:	2001      	movne	r0, #1
   196a8:	4770      	bx	lr
   196aa:	bf00      	nop
   196ac:	40001000 	.word	0x40001000

000196b0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   196b0:	4b01      	ldr	r3, [pc, #4]	; (196b8 <radio_filter_match_get+0x8>)
   196b2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   196b6:	4770      	bx	lr
   196b8:	40001000 	.word	0x40001000

000196bc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   196bc:	4904      	ldr	r1, [pc, #16]	; (196d0 <radio_tmr_status_reset+0x14>)
   196be:	4b05      	ldr	r3, [pc, #20]	; (196d4 <radio_tmr_status_reset+0x18>)
   196c0:	4a05      	ldr	r2, [pc, #20]	; (196d8 <radio_tmr_status_reset+0x1c>)
   196c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   196c6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   196ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   196ce:	4770      	bx	lr
   196d0:	4000b000 	.word	0x4000b000
   196d4:	4001f000 	.word	0x4001f000
   196d8:	0e7000c0 	.word	0x0e7000c0

000196dc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   196dc:	4b03      	ldr	r3, [pc, #12]	; (196ec <radio_tmr_tifs_set+0x10>)
   196de:	4a04      	ldr	r2, [pc, #16]	; (196f0 <radio_tmr_tifs_set+0x14>)
   196e0:	781b      	ldrb	r3, [r3, #0]
   196e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   196e6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   196ea:	4770      	bx	lr
   196ec:	200060eb 	.word	0x200060eb
   196f0:	40009000 	.word	0x40009000

000196f4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   196f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   196f8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   196fc:	4d31      	ldr	r5, [pc, #196]	; (197c4 <radio_tmr_start+0xd0>)
   196fe:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   19702:	42ab      	cmp	r3, r5
{
   19704:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19706:	d906      	bls.n	19716 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   19708:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1970c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   19710:	3901      	subs	r1, #1
		remainder += 30517578UL;
   19712:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19716:	4b2c      	ldr	r3, [pc, #176]	; (197c8 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   19718:	482c      	ldr	r0, [pc, #176]	; (197cc <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1971a:	4d2d      	ldr	r5, [pc, #180]	; (197d0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1971c:	4e2d      	ldr	r6, [pc, #180]	; (197d4 <radio_tmr_start+0xe0>)
   1971e:	2701      	movs	r7, #1
   19720:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   19722:	2700      	movs	r7, #0
   19724:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   19728:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1972c:	2704      	movs	r7, #4
   1972e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   19732:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   19734:	2702      	movs	r7, #2
   19736:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1973a:	4a27      	ldr	r2, [pc, #156]	; (197d8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1973c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   19740:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19744:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19748:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1974c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1974e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19752:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19756:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1975a:	bb64      	cbnz	r4, 197b6 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1975c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19760:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19764:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   19768:	4b1b      	ldr	r3, [pc, #108]	; (197d8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1976a:	4a1c      	ldr	r2, [pc, #112]	; (197dc <radio_tmr_start+0xe8>)
   1976c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   19770:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   19772:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19774:	f8df 8068 	ldr.w	r8, [pc, #104]	; 197e0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19778:	f8df e068 	ldr.w	lr, [pc, #104]	; 197e4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1977c:	f8df c068 	ldr.w	ip, [pc, #104]	; 197e8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19780:	4f1a      	ldr	r7, [pc, #104]	; (197ec <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19782:	4e1b      	ldr	r6, [pc, #108]	; (197f0 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19784:	4d1b      	ldr	r5, [pc, #108]	; (197f4 <radio_tmr_start+0x100>)
   19786:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   19788:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1978c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   19790:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   19794:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   19798:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1979a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1979e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   197a2:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   197a6:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   197aa:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   197ae:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   197b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   197b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   197ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   197be:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   197c2:	e7d1      	b.n	19768 <radio_tmr_start+0x74>
   197c4:	7ff0bdbf 	.word	0x7ff0bdbf
   197c8:	40008000 	.word	0x40008000
   197cc:	431bde83 	.word	0x431bde83
   197d0:	4000b000 	.word	0x4000b000
   197d4:	4000b148 	.word	0x4000b148
   197d8:	4001f000 	.word	0x4001f000
   197dc:	40009000 	.word	0x40009000
   197e0:	4000110c 	.word	0x4000110c
   197e4:	4000900c 	.word	0x4000900c
   197e8:	40009140 	.word	0x40009140
   197ec:	4001f004 	.word	0x4001f004
   197f0:	40009144 	.word	0x40009144
   197f4:	4001f00c 	.word	0x4001f00c

000197f8 <radio_tmr_start_tick>:
   197f8:	4a15      	ldr	r2, [pc, #84]	; (19850 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   197fa:	b430      	push	{r4, r5}
   197fc:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   197fe:	4c15      	ldr	r4, [pc, #84]	; (19854 <radio_tmr_start_tick+0x5c>)
   19800:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   19802:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   19806:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   19808:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1980c:	4b12      	ldr	r3, [pc, #72]	; (19858 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1980e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19812:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   19816:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19818:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1981c:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19820:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19824:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   19828:	b158      	cbz	r0, 19842 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1982a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1982e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   19836:	4a08      	ldr	r2, [pc, #32]	; (19858 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   19838:	2001      	movs	r0, #1
   1983a:	bc30      	pop	{r4, r5}
   1983c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   19840:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   19842:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19846:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1984a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1984e:	e7f2      	b.n	19836 <radio_tmr_start_tick+0x3e>
   19850:	40008000 	.word	0x40008000
   19854:	4000b000 	.word	0x4000b000
   19858:	4001f000 	.word	0x4001f000

0001985c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1985c:	4b01      	ldr	r3, [pc, #4]	; (19864 <radio_tmr_start_get+0x8>)
   1985e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   19862:	4770      	bx	lr
   19864:	4000b000 	.word	0x4000b000

00019868 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19868:	4903      	ldr	r1, [pc, #12]	; (19878 <radio_tmr_stop+0x10>)
   1986a:	4a04      	ldr	r2, [pc, #16]	; (1987c <radio_tmr_stop+0x14>)
   1986c:	2301      	movs	r3, #1
   1986e:	604b      	str	r3, [r1, #4]
   19870:	610b      	str	r3, [r1, #16]
   19872:	6053      	str	r3, [r2, #4]
   19874:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19876:	4770      	bx	lr
   19878:	40008000 	.word	0x40008000
   1987c:	40009000 	.word	0x40009000

00019880 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   19880:	4904      	ldr	r1, [pc, #16]	; (19894 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   19882:	4b05      	ldr	r3, [pc, #20]	; (19898 <radio_tmr_hcto_configure+0x18>)
   19884:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   19888:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1988c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   19890:	4770      	bx	lr
   19892:	bf00      	nop
   19894:	40008000 	.word	0x40008000
   19898:	4001f000 	.word	0x4001f000

0001989c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1989c:	4b05      	ldr	r3, [pc, #20]	; (198b4 <radio_tmr_aa_capture+0x18>)
   1989e:	4806      	ldr	r0, [pc, #24]	; (198b8 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198a0:	4906      	ldr	r1, [pc, #24]	; (198bc <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   198a2:	4a07      	ldr	r2, [pc, #28]	; (198c0 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198a4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198a8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   198ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   198b0:	4770      	bx	lr
   198b2:	bf00      	nop
   198b4:	4001f000 	.word	0x4001f000
   198b8:	40001100 	.word	0x40001100
   198bc:	40008040 	.word	0x40008040
   198c0:	04000080 	.word	0x04000080

000198c4 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   198c4:	4b01      	ldr	r3, [pc, #4]	; (198cc <radio_tmr_aa_get+0x8>)
   198c6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   198ca:	4770      	bx	lr
   198cc:	40008000 	.word	0x40008000

000198d0 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   198d0:	4b01      	ldr	r3, [pc, #4]	; (198d8 <radio_tmr_aa_save+0x8>)
   198d2:	6018      	str	r0, [r3, #0]
}
   198d4:	4770      	bx	lr
   198d6:	bf00      	nop
   198d8:	200053f4 	.word	0x200053f4

000198dc <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   198dc:	4b01      	ldr	r3, [pc, #4]	; (198e4 <radio_tmr_aa_restore+0x8>)
}
   198de:	6818      	ldr	r0, [r3, #0]
   198e0:	4770      	bx	lr
   198e2:	bf00      	nop
   198e4:	200053f4 	.word	0x200053f4

000198e8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   198e8:	4b01      	ldr	r3, [pc, #4]	; (198f0 <radio_tmr_ready_get+0x8>)
   198ea:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   198ee:	4770      	bx	lr
   198f0:	40008000 	.word	0x40008000

000198f4 <radio_tmr_end_capture>:
   198f4:	4b02      	ldr	r3, [pc, #8]	; (19900 <radio_tmr_end_capture+0xc>)
   198f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   198fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   198fe:	4770      	bx	lr
   19900:	4001f000 	.word	0x4001f000

00019904 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19904:	4b01      	ldr	r3, [pc, #4]	; (1990c <radio_tmr_end_get+0x8>)
   19906:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1990a:	4770      	bx	lr
   1990c:	40008000 	.word	0x40008000

00019910 <radio_tmr_tifs_base_get>:
   19910:	4b01      	ldr	r3, [pc, #4]	; (19918 <radio_tmr_tifs_base_get+0x8>)
   19912:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19916:	4770      	bx	lr
   19918:	40008000 	.word	0x40008000

0001991c <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1991c:	4b17      	ldr	r3, [pc, #92]	; (1997c <radio_ccm_rx_pkt_set+0x60>)
{
   1991e:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19920:	2400      	movs	r4, #0
{
   19922:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19924:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19926:	4816      	ldr	r0, [pc, #88]	; (19980 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19928:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1992c:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19930:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19934:	4e13      	ldr	r6, [pc, #76]	; (19984 <radio_ccm_rx_pkt_set+0x68>)
   19936:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   19938:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1993c:	4812      	ldr	r0, [pc, #72]	; (19988 <radio_ccm_rx_pkt_set+0x6c>)
   1993e:	2902      	cmp	r1, #2
   19940:	bf08      	it	eq
   19942:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   19944:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19948:	4810      	ldr	r0, [pc, #64]	; (1998c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1994a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1994e:	4910      	ldr	r1, [pc, #64]	; (19990 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19950:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   19954:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   19958:	4a0e      	ldr	r2, [pc, #56]	; (19994 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1995a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1995e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   19962:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19966:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1996a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1996e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19972:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19974:	bc70      	pop	{r4, r5, r6}
   19976:	601a      	str	r2, [r3, #0]
   19978:	4770      	bx	lr
   1997a:	bf00      	nop
   1997c:	4000f000 	.word	0x4000f000
   19980:	40001000 	.word	0x40001000
   19984:	01010001 	.word	0x01010001
   19988:	01000001 	.word	0x01000001
   1998c:	200052e8 	.word	0x200052e8
   19990:	200051d8 	.word	0x200051d8
   19994:	4001f000 	.word	0x4001f000

00019998 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19998:	4b0f      	ldr	r3, [pc, #60]	; (199d8 <radio_ccm_tx_pkt_set+0x40>)
{
   1999a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1999c:	2200      	movs	r2, #0
{
   1999e:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   199a0:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   199a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   199a6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   199aa:	480c      	ldr	r0, [pc, #48]	; (199dc <radio_ccm_tx_pkt_set+0x44>)
   199ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   199b0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   199b4:	480a      	ldr	r0, [pc, #40]	; (199e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   199b6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   199ba:	4c0a      	ldr	r4, [pc, #40]	; (199e4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   199bc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   199c0:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   199c2:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   199c6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   199ca:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   199cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   199d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   199d4:	6019      	str	r1, [r3, #0]
}
   199d6:	4770      	bx	lr
   199d8:	4000f000 	.word	0x4000f000
   199dc:	01010000 	.word	0x01010000
   199e0:	200052e8 	.word	0x200052e8
   199e4:	200051d8 	.word	0x200051d8

000199e8 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   199e8:	4a0e      	ldr	r2, [pc, #56]	; (19a24 <radio_ccm_is_done+0x3c>)
   199ea:	2302      	movs	r3, #2
   199ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   199f0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   199f4:	b933      	cbnz	r3, 19a04 <radio_ccm_is_done+0x1c>
		__WFE();
   199f6:	bf20      	wfe
		__SEV();
   199f8:	bf40      	sev
		__WFE();
   199fa:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   199fc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19a00:	2b00      	cmp	r3, #0
   19a02:	d0f8      	beq.n	199f6 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19a04:	4b07      	ldr	r3, [pc, #28]	; (19a24 <radio_ccm_is_done+0x3c>)
   19a06:	4a08      	ldr	r2, [pc, #32]	; (19a28 <radio_ccm_is_done+0x40>)
   19a08:	2002      	movs	r0, #2
   19a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19a0e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19a12:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   19a16:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   19a1a:	fab0 f080 	clz	r0, r0
   19a1e:	0940      	lsrs	r0, r0, #5
   19a20:	4770      	bx	lr
   19a22:	bf00      	nop
   19a24:	4000f000 	.word	0x4000f000
   19a28:	e000e100 	.word	0xe000e100

00019a2c <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   19a2c:	4b03      	ldr	r3, [pc, #12]	; (19a3c <radio_ccm_mic_is_valid+0x10>)
   19a2e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19a32:	3800      	subs	r0, #0
   19a34:	bf18      	it	ne
   19a36:	2001      	movne	r0, #1
   19a38:	4770      	bx	lr
   19a3a:	bf00      	nop
   19a3c:	4000f000 	.word	0x4000f000

00019a40 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19a40:	4a15      	ldr	r2, [pc, #84]	; (19a98 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19a42:	4b16      	ldr	r3, [pc, #88]	; (19a9c <radio_ar_configure+0x5c>)
{
   19a44:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19a46:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19a4a:	4e15      	ldr	r6, [pc, #84]	; (19aa0 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19a4c:	2703      	movs	r7, #3
   19a4e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   19a52:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   19a54:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19a58:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   19a5a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   19a5e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   19a60:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19a64:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   19a68:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   19a6c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   19a70:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   19a74:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   19a78:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   19a7c:	4909      	ldr	r1, [pc, #36]	; (19aa4 <radio_ar_configure+0x64>)
   19a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19a82:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   19a86:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19a8a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19a8e:	bcf0      	pop	{r4, r5, r6, r7}
   19a90:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   19a94:	4770      	bx	lr
   19a96:	bf00      	nop
   19a98:	40001000 	.word	0x40001000
   19a9c:	4000f000 	.word	0x4000f000
   19aa0:	200051d4 	.word	0x200051d4
   19aa4:	4001f000 	.word	0x4001f000

00019aa8 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   19aa8:	4b01      	ldr	r3, [pc, #4]	; (19ab0 <radio_ar_match_get+0x8>)
   19aaa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19aae:	4770      	bx	lr
   19ab0:	4000f000 	.word	0x4000f000

00019ab4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   19ab4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19ab6:	4807      	ldr	r0, [pc, #28]	; (19ad4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19ab8:	4c07      	ldr	r4, [pc, #28]	; (19ad8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   19aba:	4a08      	ldr	r2, [pc, #32]	; (19adc <radio_ar_status_reset+0x28>)
   19abc:	2300      	movs	r3, #0
   19abe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   19ac2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19ac6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19aca:	bc10      	pop	{r4}
   19acc:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   19ad0:	4770      	bx	lr
   19ad2:	bf00      	nop
   19ad4:	4000f000 	.word	0x4000f000
   19ad8:	40001000 	.word	0x40001000
   19adc:	4001f000 	.word	0x4001f000

00019ae0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19ae0:	4b08      	ldr	r3, [pc, #32]	; (19b04 <radio_ar_has_match+0x24>)
   19ae2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19ae6:	b160      	cbz	r0, 19b02 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19ae8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19aec:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19af0:	b138      	cbz	r0, 19b02 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19af2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19af6:	b120      	cbz	r0, 19b02 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19af8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   19afc:	fab0 f080 	clz	r0, r0
   19b00:	0940      	lsrs	r0, r0, #5
}
   19b02:	4770      	bx	lr
   19b04:	40001000 	.word	0x40001000

00019b08 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19b08:	2902      	cmp	r1, #2
{
   19b0a:	b510      	push	{r4, lr}
   19b0c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19b0e:	d00b      	beq.n	19b28 <mayfly_enable_cb+0x20>
   19b10:	4a0a      	ldr	r2, [pc, #40]	; (19b3c <mayfly_enable_cb+0x34>)
   19b12:	490b      	ldr	r1, [pc, #44]	; (19b40 <mayfly_enable_cb+0x38>)
   19b14:	480b      	ldr	r0, [pc, #44]	; (19b44 <mayfly_enable_cb+0x3c>)
   19b16:	231e      	movs	r3, #30
   19b18:	f005 fe01 	bl	1f71e <printk>
   19b1c:	4040      	eors	r0, r0
   19b1e:	f380 8811 	msr	BASEPRI, r0
   19b22:	f04f 0003 	mov.w	r0, #3
   19b26:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19b28:	200b      	movs	r0, #11
	if (enable) {
   19b2a:	b11c      	cbz	r4, 19b34 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   19b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19b30:	f7ec b924 	b.w	5d7c <arch_irq_enable>
}
   19b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19b38:	f7ec b930 	b.w	5d9c <arch_irq_disable>
   19b3c:	00025ed8 	.word	0x00025ed8
   19b40:	00025f28 	.word	0x00025f28
   19b44:	000250f0 	.word	0x000250f0

00019b48 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19b48:	b129      	cbz	r1, 19b56 <mayfly_is_enabled+0xe>
   19b4a:	3901      	subs	r1, #1
   19b4c:	2901      	cmp	r1, #1
   19b4e:	d805      	bhi.n	19b5c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   19b50:	200b      	movs	r0, #11
   19b52:	f7ec b937 	b.w	5dc4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   19b56:	2018      	movs	r0, #24
   19b58:	f7ec b934 	b.w	5dc4 <arch_irq_is_enabled>
{
   19b5c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   19b5e:	4a07      	ldr	r2, [pc, #28]	; (19b7c <mayfly_is_enabled+0x34>)
   19b60:	4907      	ldr	r1, [pc, #28]	; (19b80 <mayfly_is_enabled+0x38>)
   19b62:	4808      	ldr	r0, [pc, #32]	; (19b84 <mayfly_is_enabled+0x3c>)
   19b64:	2336      	movs	r3, #54	; 0x36
   19b66:	f005 fdda 	bl	1f71e <printk>
   19b6a:	4040      	eors	r0, r0
   19b6c:	f380 8811 	msr	BASEPRI, r0
   19b70:	f04f 0003 	mov.w	r0, #3
   19b74:	df02      	svc	2
		break;
	}

	return 0;
}
   19b76:	2000      	movs	r0, #0
   19b78:	bd08      	pop	{r3, pc}
   19b7a:	bf00      	nop
   19b7c:	00025ed8 	.word	0x00025ed8
   19b80:	00025150 	.word	0x00025150
   19b84:	000250f0 	.word	0x000250f0

00019b88 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19b88:	4288      	cmp	r0, r1
   19b8a:	d00b      	beq.n	19ba4 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   19b8c:	2801      	cmp	r0, #1
   19b8e:	d003      	beq.n	19b98 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19b90:	2802      	cmp	r0, #2
   19b92:	d009      	beq.n	19ba8 <mayfly_prio_is_equal+0x20>
   19b94:	2000      	movs	r0, #0
#endif
	       0;
}
   19b96:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19b98:	f1a1 0002 	sub.w	r0, r1, #2
   19b9c:	fab0 f080 	clz	r0, r0
   19ba0:	0940      	lsrs	r0, r0, #5
   19ba2:	4770      	bx	lr
   19ba4:	2001      	movs	r0, #1
   19ba6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   19ba8:	f1a1 0001 	sub.w	r0, r1, #1
   19bac:	fab0 f080 	clz	r0, r0
   19bb0:	0940      	lsrs	r0, r0, #5
   19bb2:	4770      	bx	lr

00019bb4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19bb4:	2901      	cmp	r1, #1
{
   19bb6:	b508      	push	{r3, lr}
	switch (callee_id) {
   19bb8:	d00f      	beq.n	19bda <mayfly_pend+0x26>
   19bba:	2902      	cmp	r1, #2
   19bbc:	d00d      	beq.n	19bda <mayfly_pend+0x26>
   19bbe:	b191      	cbz	r1, 19be6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19bc0:	4a0c      	ldr	r2, [pc, #48]	; (19bf4 <mayfly_pend+0x40>)
   19bc2:	490d      	ldr	r1, [pc, #52]	; (19bf8 <mayfly_pend+0x44>)
   19bc4:	480d      	ldr	r0, [pc, #52]	; (19bfc <mayfly_pend+0x48>)
   19bc6:	2367      	movs	r3, #103	; 0x67
   19bc8:	f005 fda9 	bl	1f71e <printk>
   19bcc:	4040      	eors	r0, r0
   19bce:	f380 8811 	msr	BASEPRI, r0
   19bd2:	f04f 0003 	mov.w	r0, #3
   19bd6:	df02      	svc	2
		break;
	}
}
   19bd8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19bda:	4b09      	ldr	r3, [pc, #36]	; (19c00 <mayfly_pend+0x4c>)
   19bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19be0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19be4:	bd08      	pop	{r3, pc}
   19be6:	4b06      	ldr	r3, [pc, #24]	; (19c00 <mayfly_pend+0x4c>)
   19be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19bec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19bf0:	bd08      	pop	{r3, pc}
   19bf2:	bf00      	nop
   19bf4:	00025ed8 	.word	0x00025ed8
   19bf8:	00025150 	.word	0x00025150
   19bfc:	000250f0 	.word	0x000250f0
   19c00:	e000e100 	.word	0xe000e100

00019c04 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19c04:	2803      	cmp	r0, #3
{
   19c06:	b510      	push	{r4, lr}
   19c08:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19c0a:	d804      	bhi.n	19c16 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   19c0c:	4b11      	ldr	r3, [pc, #68]	; (19c54 <hal_ticker_instance0_caller_id_get+0x50>)
   19c0e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19c10:	b18c      	cbz	r4, 19c36 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19c12:	4620      	mov	r0, r4
   19c14:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19c16:	4a10      	ldr	r2, [pc, #64]	; (19c58 <hal_ticker_instance0_caller_id_get+0x54>)
   19c18:	4910      	ldr	r1, [pc, #64]	; (19c5c <hal_ticker_instance0_caller_id_get+0x58>)
   19c1a:	4811      	ldr	r0, [pc, #68]	; (19c60 <hal_ticker_instance0_caller_id_get+0x5c>)
   19c1c:	232b      	movs	r3, #43	; 0x2b
   19c1e:	f005 fd7e 	bl	1f71e <printk>
   19c22:	4040      	eors	r0, r0
   19c24:	f380 8811 	msr	BASEPRI, r0
   19c28:	f04f 0003 	mov.w	r0, #3
   19c2c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19c2e:	4b09      	ldr	r3, [pc, #36]	; (19c54 <hal_ticker_instance0_caller_id_get+0x50>)
   19c30:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19c32:	2c00      	cmp	r4, #0
   19c34:	d1ed      	bne.n	19c12 <hal_ticker_instance0_caller_id_get+0xe>
   19c36:	4a08      	ldr	r2, [pc, #32]	; (19c58 <hal_ticker_instance0_caller_id_get+0x54>)
   19c38:	490a      	ldr	r1, [pc, #40]	; (19c64 <hal_ticker_instance0_caller_id_get+0x60>)
   19c3a:	4809      	ldr	r0, [pc, #36]	; (19c60 <hal_ticker_instance0_caller_id_get+0x5c>)
   19c3c:	232e      	movs	r3, #46	; 0x2e
   19c3e:	f005 fd6e 	bl	1f71e <printk>
   19c42:	4040      	eors	r0, r0
   19c44:	f380 8811 	msr	BASEPRI, r0
   19c48:	f04f 0003 	mov.w	r0, #3
   19c4c:	df02      	svc	2
}
   19c4e:	4620      	mov	r0, r4
   19c50:	bd10      	pop	{r4, pc}
   19c52:	bf00      	nop
   19c54:	00025fb8 	.word	0x00025fb8
   19c58:	00025f38 	.word	0x00025f38
   19c5c:	00025f88 	.word	0x00025f88
   19c60:	000250f0 	.word	0x000250f0
   19c64:	00025fa8 	.word	0x00025fa8

00019c68 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   19c68:	3801      	subs	r0, #1
{
   19c6a:	b510      	push	{r4, lr}
   19c6c:	461c      	mov	r4, r3
	switch (caller_id) {
   19c6e:	2804      	cmp	r0, #4
   19c70:	f200 8082 	bhi.w	19d78 <hal_ticker_instance0_sched+0x110>
   19c74:	e8df f000 	tbb	[pc, r0]
   19c78:	3f302112 	.word	0x3f302112
   19c7c:	03          	.byte	0x03
   19c7d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   19c7e:	2904      	cmp	r1, #4
   19c80:	d04a      	beq.n	19d18 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   19c82:	4a44      	ldr	r2, [pc, #272]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19c84:	4944      	ldr	r1, [pc, #272]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19c86:	4845      	ldr	r0, [pc, #276]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19c88:	23ba      	movs	r3, #186	; 0xba
   19c8a:	f005 fd48 	bl	1f71e <printk>
   19c8e:	4040      	eors	r0, r0
   19c90:	f380 8811 	msr	BASEPRI, r0
   19c94:	f04f 0003 	mov.w	r0, #3
   19c98:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   19c9a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19c9c:	2904      	cmp	r1, #4
   19c9e:	d043      	beq.n	19d28 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   19ca0:	4a3c      	ldr	r2, [pc, #240]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19ca2:	493d      	ldr	r1, [pc, #244]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19ca4:	483d      	ldr	r0, [pc, #244]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19ca6:	234e      	movs	r3, #78	; 0x4e
   19ca8:	f005 fd39 	bl	1f71e <printk>
   19cac:	4040      	eors	r0, r0
   19cae:	f380 8811 	msr	BASEPRI, r0
   19cb2:	f04f 0003 	mov.w	r0, #3
   19cb6:	df02      	svc	2
}
   19cb8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19cba:	2903      	cmp	r1, #3
   19cbc:	d03c      	beq.n	19d38 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   19cbe:	4a35      	ldr	r2, [pc, #212]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19cc0:	4935      	ldr	r1, [pc, #212]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19cc2:	4836      	ldr	r0, [pc, #216]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19cc4:	2365      	movs	r3, #101	; 0x65
   19cc6:	f005 fd2a 	bl	1f71e <printk>
   19cca:	4040      	eors	r0, r0
   19ccc:	f380 8811 	msr	BASEPRI, r0
   19cd0:	f04f 0003 	mov.w	r0, #3
   19cd4:	df02      	svc	2
}
   19cd6:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19cd8:	2904      	cmp	r1, #4
   19cda:	d035      	beq.n	19d48 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   19cdc:	4a2d      	ldr	r2, [pc, #180]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19cde:	492e      	ldr	r1, [pc, #184]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19ce0:	482e      	ldr	r0, [pc, #184]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19ce2:	237c      	movs	r3, #124	; 0x7c
   19ce4:	f005 fd1b 	bl	1f71e <printk>
   19ce8:	4040      	eors	r0, r0
   19cea:	f380 8811 	msr	BASEPRI, r0
   19cee:	f04f 0003 	mov.w	r0, #3
   19cf2:	df02      	svc	2
}
   19cf4:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19cf6:	2903      	cmp	r1, #3
   19cf8:	d036      	beq.n	19d68 <hal_ticker_instance0_sched+0x100>
   19cfa:	2904      	cmp	r1, #4
   19cfc:	d02c      	beq.n	19d58 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   19cfe:	4a25      	ldr	r2, [pc, #148]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19d00:	4925      	ldr	r1, [pc, #148]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19d02:	4826      	ldr	r0, [pc, #152]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19d04:	23a2      	movs	r3, #162	; 0xa2
   19d06:	f005 fd0a 	bl	1f71e <printk>
   19d0a:	4040      	eors	r0, r0
   19d0c:	f380 8811 	msr	BASEPRI, r0
   19d10:	f04f 0003 	mov.w	r0, #3
   19d14:	df02      	svc	2
}
   19d16:	bd10      	pop	{r4, pc}
			m.param = instance;
   19d18:	4b21      	ldr	r3, [pc, #132]	; (19da0 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d1a:	2102      	movs	r1, #2
			m.param = instance;
   19d1c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d1e:	2003      	movs	r0, #3
}
   19d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d24:	f7f0 bcee 	b.w	a704 <mayfly_enqueue>
			m.param = instance;
   19d28:	4b1e      	ldr	r3, [pc, #120]	; (19da4 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d2a:	2102      	movs	r1, #2
			m.param = instance;
   19d2c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d2e:	2000      	movs	r0, #0
}
   19d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d34:	f7f0 bce6 	b.w	a704 <mayfly_enqueue>
			m.param = instance;
   19d38:	4b1b      	ldr	r3, [pc, #108]	; (19da8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19d3a:	2101      	movs	r1, #1
			m.param = instance;
   19d3c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19d3e:	4608      	mov	r0, r1
}
   19d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19d44:	f7f0 bcde 	b.w	a704 <mayfly_enqueue>
			m.param = instance;
   19d48:	4b18      	ldr	r3, [pc, #96]	; (19dac <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d4a:	2102      	movs	r1, #2
			m.param = instance;
   19d4c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d4e:	2001      	movs	r0, #1
}
   19d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d54:	f7f0 bcd6 	b.w	a704 <mayfly_enqueue>
			m.param = instance;
   19d58:	4b15      	ldr	r3, [pc, #84]	; (19db0 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d5a:	2102      	movs	r1, #2
			m.param = instance;
   19d5c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d5e:	4608      	mov	r0, r1
}
   19d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d64:	f7f0 bcce 	b.w	a704 <mayfly_enqueue>
			m.param = instance;
   19d68:	4b12      	ldr	r3, [pc, #72]	; (19db4 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d6a:	2101      	movs	r1, #1
			m.param = instance;
   19d6c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d6e:	2002      	movs	r0, #2
}
   19d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19d74:	f7f0 bcc6 	b.w	a704 <mayfly_enqueue>
		LL_ASSERT(0);
   19d78:	4a06      	ldr	r2, [pc, #24]	; (19d94 <hal_ticker_instance0_sched+0x12c>)
   19d7a:	4907      	ldr	r1, [pc, #28]	; (19d98 <hal_ticker_instance0_sched+0x130>)
   19d7c:	4807      	ldr	r0, [pc, #28]	; (19d9c <hal_ticker_instance0_sched+0x134>)
   19d7e:	23c0      	movs	r3, #192	; 0xc0
   19d80:	f005 fccd 	bl	1f71e <printk>
   19d84:	4040      	eors	r0, r0
   19d86:	f380 8811 	msr	BASEPRI, r0
   19d8a:	f04f 0003 	mov.w	r0, #3
   19d8e:	df02      	svc	2
}
   19d90:	bd10      	pop	{r4, pc}
   19d92:	bf00      	nop
   19d94:	00025f38 	.word	0x00025f38
   19d98:	00025150 	.word	0x00025150
   19d9c:	000250f0 	.word	0x000250f0
   19da0:	20000798 	.word	0x20000798
   19da4:	20000788 	.word	0x20000788
   19da8:	20000778 	.word	0x20000778
   19dac:	200007c8 	.word	0x200007c8
   19db0:	200007a8 	.word	0x200007a8
   19db4:	200007b8 	.word	0x200007b8

00019db8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   19db8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   19dba:	2000      	movs	r0, #0
   19dbc:	f7ff b9a8 	b.w	19110 <cntr_cmp_set>

00019dc0 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   19dc0:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19dc6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   19dca:	3201      	adds	r2, #1
   19dcc:	d008      	beq.n	19de0 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19dd2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19dd6:	f013 0301 	ands.w	r3, r3, #1
   19dda:	d10a      	bne.n	19df2 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   19ddc:	4618      	mov	r0, r3
}
   19dde:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19de0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   19de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19de8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19dea:	4293      	cmp	r3, r2
   19dec:	d1ef      	bne.n	19dce <hci_vendor_read_static_addr+0xe>
	return 0;
   19dee:	2000      	movs	r0, #0
}
   19df0:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   19df2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   19df6:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19df8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19dfa:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19dfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19e02:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   19e04:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   19e06:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   19e0a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   19e0e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   19e10:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   19e14:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19e18:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   19e1e:	3301      	adds	r3, #1
   19e20:	d03b      	beq.n	19e9a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e22:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e26:	3301      	adds	r3, #1
   19e28:	d037      	beq.n	19e9a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e2a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e2e:	3301      	adds	r3, #1
   19e30:	d033      	beq.n	19e9a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19e32:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e36:	3301      	adds	r3, #1
   19e38:	d02f      	beq.n	19e9a <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   19e3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   19e3e:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   19e40:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19e42:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19e46:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19e4a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   19e4c:	f880 c009 	strb.w	ip, [r0, #9]
   19e50:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   19e52:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   19e56:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   19e58:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19e5a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19e5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19e62:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   19e64:	f880 c00d 	strb.w	ip, [r0, #13]
   19e68:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   19e6a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   19e6e:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   19e70:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19e72:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19e76:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19e7a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   19e7c:	73c3      	strb	r3, [r0, #15]
   19e7e:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   19e82:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   19e86:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   19e88:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19e8a:	0a11      	lsrs	r1, r2, #8
   19e8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19e90:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   19e92:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   19e94:	7541      	strb	r1, [r0, #21]
		return 1;
   19e96:	2001      	movs	r0, #1
}
   19e98:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   19e9a:	2210      	movs	r2, #16
   19e9c:	2100      	movs	r1, #0
   19e9e:	3006      	adds	r0, #6
   19ea0:	f006 fc4d 	bl	2073e <memset>
		return 1;
   19ea4:	2001      	movs	r0, #1
}
   19ea6:	bd08      	pop	{r3, pc}

00019ea8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   19ea8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   19eaa:	2210      	movs	r2, #16
{
   19eac:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   19eae:	2100      	movs	r1, #0
   19eb0:	f006 fc45 	bl	2073e <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19eb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   19ebc:	3201      	adds	r2, #1
   19ebe:	d034      	beq.n	19f2a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19ec0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19ec4:	3201      	adds	r2, #1
   19ec6:	d030      	beq.n	19f2a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19ecc:	3201      	adds	r2, #1
   19ece:	d02c      	beq.n	19f2a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19ed0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19ed4:	3201      	adds	r2, #1
   19ed6:	d028      	beq.n	19f2a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   19ed8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   19edc:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19ede:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19ee0:	0a08      	lsrs	r0, r1, #8
   19ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19ee6:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   19ee8:	70e0      	strb	r0, [r4, #3]
   19eea:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   19eec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   19ef0:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   19ef2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19ef4:	0a08      	lsrs	r0, r1, #8
   19ef6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19efa:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   19efc:	71e0      	strb	r0, [r4, #7]
   19efe:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   19f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   19f04:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   19f06:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19f08:	0a08      	lsrs	r0, r1, #8
   19f0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19f0e:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   19f10:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   19f12:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   19f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   19f18:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   19f1a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19f1c:	0a11      	lsrs	r1, r2, #8
   19f1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19f22:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   19f24:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   19f26:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   19f28:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   19f2a:	4620      	mov	r0, r4
   19f2c:	2210      	movs	r2, #16
}
   19f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   19f32:	2100      	movs	r1, #0
   19f34:	f006 bc03 	b.w	2073e <memset>

00019f38 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19f38:	4b02      	ldr	r3, [pc, #8]	; (19f44 <net_buf_pool_get+0xc>)
   19f3a:	222c      	movs	r2, #44	; 0x2c
   19f3c:	fb02 3000 	mla	r0, r2, r0, r3
   19f40:	4770      	bx	lr
   19f42:	bf00      	nop
   19f44:	20000b6c 	.word	0x20000b6c

00019f48 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f48:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19f4a:	4b06      	ldr	r3, [pc, #24]	; (19f64 <net_buf_id+0x1c>)
   19f4c:	212c      	movs	r1, #44	; 0x2c
   19f4e:	fb01 3302 	mla	r3, r1, r2, r3
   19f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f54:	7f1b      	ldrb	r3, [r3, #28]
   19f56:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19f58:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f5a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19f5e:	fbb0 f0f3 	udiv	r0, r0, r3
   19f62:	4770      	bx	lr
   19f64:	20000b6c 	.word	0x20000b6c

00019f68 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19f68:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f6a:	4b0a      	ldr	r3, [pc, #40]	; (19f94 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f6c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f6e:	242c      	movs	r4, #44	; 0x2c
   19f70:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   19f74:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f78:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19f7a:	6823      	ldr	r3, [r4, #0]
   19f7c:	429a      	cmp	r2, r3
   19f7e:	bf94      	ite	ls
   19f80:	600a      	strls	r2, [r1, #0]
   19f82:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19f84:	f7ff ffe0 	bl	19f48 <net_buf_id>
   19f88:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19f8c:	fb02 3000 	mla	r0, r2, r0, r3
   19f90:	bd10      	pop	{r4, pc}
   19f92:	bf00      	nop
   19f94:	20000b6c 	.word	0x20000b6c

00019f98 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f9c:	4605      	mov	r5, r0
   19f9e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19fa0:	4610      	mov	r0, r2
   19fa2:	4619      	mov	r1, r3
{
   19fa4:	4691      	mov	r9, r2
   19fa6:	4698      	mov	r8, r3
   19fa8:	4617      	mov	r7, r2
   19faa:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19fac:	f00a faa5 	bl	244fa <sys_clock_timeout_end_calc>
   19fb0:	4682      	mov	sl, r0
   19fb2:	468b      	mov	fp, r1
	__asm__ volatile(
   19fb4:	f04f 0320 	mov.w	r3, #32
   19fb8:	f3ef 8111 	mrs	r1, BASEPRI
   19fbc:	f383 8812 	msr	BASEPRI_MAX, r3
   19fc0:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19fc4:	8b6b      	ldrh	r3, [r5, #26]
   19fc6:	2b00      	cmp	r3, #0
   19fc8:	d05a      	beq.n	1a080 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19fca:	8b2a      	ldrh	r2, [r5, #24]
   19fcc:	429a      	cmp	r2, r3
   19fce:	d93e      	bls.n	1a04e <net_buf_alloc_len+0xb6>
   19fd0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   19fd2:	2200      	movs	r2, #0
   19fd4:	2300      	movs	r3, #0
   19fd6:	4628      	mov	r0, r5
   19fd8:	f004 fa6c 	bl	1e4b4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19fdc:	9900      	ldr	r1, [sp, #0]
   19fde:	4604      	mov	r4, r0
   19fe0:	2800      	cmp	r0, #0
   19fe2:	d034      	beq.n	1a04e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   19fe4:	f381 8811 	msr	BASEPRI, r1
   19fe8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19fec:	9b01      	ldr	r3, [sp, #4]
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d056      	beq.n	1a0a0 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19ff2:	ea58 0309 	orrs.w	r3, r8, r9
   19ff6:	d00f      	beq.n	1a018 <net_buf_alloc_len+0x80>
   19ff8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   19ffc:	bf08      	it	eq
   19ffe:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1a002:	d009      	beq.n	1a018 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1a004:	f005 f93c 	bl	1f280 <sys_clock_tick_get>
   1a008:	ebba 0700 	subs.w	r7, sl, r0
   1a00c:	eb6b 0601 	sbc.w	r6, fp, r1
   1a010:	2e00      	cmp	r6, #0
   1a012:	bfbc      	itt	lt
   1a014:	2700      	movlt	r7, #0
   1a016:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a018:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a01a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a0b8 <net_buf_alloc_len+0x120>
   1a01e:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1a022:	fb09 8303 	mla	r3, r9, r3, r8
   1a026:	463a      	mov	r2, r7
   1a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a02a:	681b      	ldr	r3, [r3, #0]
   1a02c:	a901      	add	r1, sp, #4
   1a02e:	681d      	ldr	r5, [r3, #0]
   1a030:	4620      	mov	r0, r4
   1a032:	4633      	mov	r3, r6
   1a034:	47a8      	blx	r5
   1a036:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a038:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1a03a:	2800      	cmp	r0, #0
   1a03c:	d131      	bne.n	1a0a2 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1a03e:	79a0      	ldrb	r0, [r4, #6]
   1a040:	4621      	mov	r1, r4
   1a042:	fb00 8009 	mla	r0, r0, r9, r8
   1a046:	f009 ffea 	bl	2401e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1a04a:	462c      	mov	r4, r5
}
   1a04c:	e024      	b.n	1a098 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1a04e:	8b68      	ldrh	r0, [r5, #26]
   1a050:	1e43      	subs	r3, r0, #1
   1a052:	836b      	strh	r3, [r5, #26]
   1a054:	f381 8811 	msr	BASEPRI, r1
   1a058:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a05c:	7f2a      	ldrb	r2, [r5, #28]
   1a05e:	f102 0417 	add.w	r4, r2, #23
   1a062:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a066:	8b2c      	ldrh	r4, [r5, #24]
   1a068:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a06a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1a06c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1a070:	4811      	ldr	r0, [pc, #68]	; (1a0b8 <net_buf_alloc_len+0x120>)
   1a072:	4b12      	ldr	r3, [pc, #72]	; (1a0bc <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1a074:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1a076:	1a2d      	subs	r5, r5, r0
   1a078:	10ad      	asrs	r5, r5, #2
   1a07a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1a07c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1a07e:	e7b5      	b.n	19fec <net_buf_alloc_len+0x54>
   1a080:	f381 8811 	msr	BASEPRI, r1
   1a084:	f3bf 8f6f 	isb	sy
   1a088:	464a      	mov	r2, r9
   1a08a:	4643      	mov	r3, r8
   1a08c:	4628      	mov	r0, r5
   1a08e:	f004 fa11 	bl	1e4b4 <z_impl_k_queue_get>
	if (!buf) {
   1a092:	4604      	mov	r4, r0
   1a094:	2800      	cmp	r0, #0
   1a096:	d1a9      	bne.n	19fec <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a098:	4620      	mov	r0, r4
   1a09a:	b003      	add	sp, #12
   1a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1a0a0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1a0a2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a0a4:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a0a6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a0a8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a0aa:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a0ac:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a0ae:	6923      	ldr	r3, [r4, #16]
   1a0b0:	81e2      	strh	r2, [r4, #14]
   1a0b2:	60a3      	str	r3, [r4, #8]
	return buf;
   1a0b4:	e7f0      	b.n	1a098 <net_buf_alloc_len+0x100>
   1a0b6:	bf00      	nop
   1a0b8:	20000b6c 	.word	0x20000b6c
   1a0bc:	ba2e8ba3 	.word	0xba2e8ba3

0001a0c0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0c4:	4d16      	ldr	r5, [pc, #88]	; (1a120 <net_buf_unref+0x60>)
   1a0c6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a0c8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a0ca:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1a0cc:	b90c      	cbnz	r4, 1a0d2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a0d2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a0d4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a0d8:	3b01      	subs	r3, #1
   1a0da:	b2db      	uxtb	r3, r3
   1a0dc:	7123      	strb	r3, [r4, #4]
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d1f5      	bne.n	1a0ce <net_buf_unref+0xe>
		if (buf->__buf) {
   1a0e2:	6921      	ldr	r1, [r4, #16]
   1a0e4:	b159      	cbz	r1, 1a0fe <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a0e6:	7963      	ldrb	r3, [r4, #5]
   1a0e8:	079b      	lsls	r3, r3, #30
   1a0ea:	d407      	bmi.n	1a0fc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a0ec:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1a0ee:	fb07 5303 	mla	r3, r7, r3, r5
   1a0f2:	4620      	mov	r0, r4
   1a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	689b      	ldr	r3, [r3, #8]
   1a0fa:	4798      	blx	r3
			buf->__buf = NULL;
   1a0fc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a0fe:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a100:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a102:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a106:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a108:	6a1b      	ldr	r3, [r3, #32]
   1a10a:	b11b      	cbz	r3, 1a114 <net_buf_unref+0x54>
			pool->destroy(buf);
   1a10c:	4620      	mov	r0, r4
   1a10e:	4798      	blx	r3
{
   1a110:	4644      	mov	r4, r8
   1a112:	e7db      	b.n	1a0cc <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a114:	4621      	mov	r1, r4
   1a116:	fb00 5007 	mla	r0, r0, r7, r5
   1a11a:	f009 ff80 	bl	2401e <k_queue_prepend>
}
   1a11e:	e7f7      	b.n	1a110 <net_buf_unref+0x50>
   1a120:	20000b6c 	.word	0x20000b6c

0001a124 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1a124:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1a128:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1a12a:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1a12c:	d004      	beq.n	1a138 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   1a12e:	f010 0f78 	tst.w	r0, #120	; 0x78
   1a132:	d001      	beq.n	1a138 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   1a134:	2000      	movs	r0, #0
   1a136:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1a138:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1a13a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1a13e:	f000 0008 	and.w	r0, r0, #8
   1a142:	da05      	bge.n	1a150 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1a144:	b958      	cbnz	r0, 1a15e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   1a146:	4808      	ldr	r0, [pc, #32]	; (1a168 <endpoint_ctx+0x44>)
   1a148:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a14c:	304c      	adds	r0, #76	; 0x4c
   1a14e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1a150:	b938      	cbnz	r0, 1a162 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1a152:	4805      	ldr	r0, [pc, #20]	; (1a168 <endpoint_ctx+0x44>)
   1a154:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a158:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   1a15c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   1a15e:	4803      	ldr	r0, [pc, #12]	; (1a16c <endpoint_ctx+0x48>)
   1a160:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1a162:	4803      	ldr	r0, [pc, #12]	; (1a170 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   1a164:	4770      	bx	lr
   1a166:	bf00      	nop
   1a168:	20005a28 	.word	0x20005a28
   1a16c:	20005b74 	.word	0x20005b74
   1a170:	20005c94 	.word	0x20005c94

0001a174 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   1a174:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   1a176:	4801      	ldr	r0, [pc, #4]	; (1a17c <usbd_evt_put+0x8>)
   1a178:	f009 bf46 	b.w	24008 <k_queue_append>
   1a17c:	20000b54 	.word	0x20000b54

0001a180 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1a180:	4901      	ldr	r1, [pc, #4]	; (1a188 <usbd_work_schedule+0x8>)
   1a182:	4802      	ldr	r0, [pc, #8]	; (1a18c <usbd_work_schedule+0xc>)
   1a184:	f00a b81a 	b.w	241bc <k_work_submit_to_queue>
   1a188:	20005a50 	.word	0x20005a50
   1a18c:	200015f0 	.word	0x200015f0

0001a190 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1a190:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1a192:	480b      	ldr	r0, [pc, #44]	; (1a1c0 <usb_init+0x30>)
   1a194:	f002 fc12 	bl	1c9bc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   1a198:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   1a19a:	480a      	ldr	r0, [pc, #40]	; (1a1c4 <usb_init+0x34>)
   1a19c:	f002 fc54 	bl	1ca48 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   1a1a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a1a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a1a8:	4907      	ldr	r1, [pc, #28]	; (1a1c8 <usb_init+0x38>)
   1a1aa:	4808      	ldr	r0, [pc, #32]	; (1a1cc <usb_init+0x3c>)
   1a1ac:	9400      	str	r4, [sp, #0]
   1a1ae:	f004 fb27 	bl	1e800 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1a1b2:	4907      	ldr	r1, [pc, #28]	; (1a1d0 <usb_init+0x40>)
   1a1b4:	4807      	ldr	r0, [pc, #28]	; (1a1d4 <usb_init+0x44>)
   1a1b6:	f009 fff8 	bl	241aa <k_work_init>

	return 0;
}
   1a1ba:	4620      	mov	r0, r4
   1a1bc:	b002      	add	sp, #8
   1a1be:	bd10      	pop	{r4, pc}
   1a1c0:	000267bf 	.word	0x000267bf
   1a1c4:	00025fc8 	.word	0x00025fc8
   1a1c8:	20007c40 	.word	0x20007c40
   1a1cc:	200015f0 	.word	0x200015f0
   1a1d0:	0001a4ed 	.word	0x0001a4ed
   1a1d4:	20005a50 	.word	0x20005a50

0001a1d8 <usbd_evt_get>:
   1a1d8:	4802      	ldr	r0, [pc, #8]	; (1a1e4 <usbd_evt_get+0xc>)
   1a1da:	2200      	movs	r2, #0
   1a1dc:	2300      	movs	r3, #0
   1a1de:	f004 b969 	b.w	1e4b4 <z_impl_k_queue_get>
   1a1e2:	bf00      	nop
   1a1e4:	20000b54 	.word	0x20000b54

0001a1e8 <usbd_evt_flush>:
{
   1a1e8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1a1ea:	4c05      	ldr	r4, [pc, #20]	; (1a200 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   1a1ec:	f7ff fff4 	bl	1a1d8 <usbd_evt_get>
		if (ev) {
   1a1f0:	b120      	cbz	r0, 1a1fc <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1a1f2:	1d01      	adds	r1, r0, #4
   1a1f4:	4620      	mov	r0, r4
   1a1f6:	f009 fe41 	bl	23e7c <k_mem_slab_free>
	} while (ev != NULL);
   1a1fa:	e7f7      	b.n	1a1ec <usbd_evt_flush+0x4>
}
   1a1fc:	bd10      	pop	{r4, pc}
   1a1fe:	bf00      	nop
   1a200:	20000ac0 	.word	0x20000ac0

0001a204 <usbd_evt_alloc>:
{
   1a204:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1a206:	2300      	movs	r3, #0
   1a208:	480e      	ldr	r0, [pc, #56]	; (1a244 <usbd_evt_alloc+0x40>)
   1a20a:	2200      	movs	r2, #0
   1a20c:	a901      	add	r1, sp, #4
   1a20e:	f003 ff95 	bl	1e13c <k_mem_slab_alloc>
   1a212:	b190      	cbz	r0, 1a23a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   1a214:	f7ff ffe8 	bl	1a1e8 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1a218:	480a      	ldr	r0, [pc, #40]	; (1a244 <usbd_evt_alloc+0x40>)
   1a21a:	2200      	movs	r2, #0
   1a21c:	2300      	movs	r3, #0
   1a21e:	a901      	add	r1, sp, #4
   1a220:	f003 ff8c 	bl	1e13c <k_mem_slab_alloc>
   1a224:	b938      	cbnz	r0, 1a236 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   1a226:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1a228:	2304      	movs	r3, #4
		ev->block = block;
   1a22a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1a22c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   1a22e:	f7ff ffa1 	bl	1a174 <usbd_evt_put>
		usbd_work_schedule();
   1a232:	f7ff ffa5 	bl	1a180 <usbd_work_schedule>
		return NULL;
   1a236:	2000      	movs	r0, #0
   1a238:	e001      	b.n	1a23e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   1a23a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   1a23c:	6040      	str	r0, [r0, #4]
}
   1a23e:	b003      	add	sp, #12
   1a240:	f85d fb04 	ldr.w	pc, [sp], #4
   1a244:	20000ac0 	.word	0x20000ac0

0001a248 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   1a248:	7881      	ldrb	r1, [r0, #2]
{
   1a24a:	b570      	push	{r4, r5, r6, lr}
   1a24c:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1a24e:	4608      	mov	r0, r1
   1a250:	f7ff ff68 	bl	1a124 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1a254:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   1a256:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   1a258:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1a25a:	d512      	bpl.n	1a282 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   1a25c:	2d00      	cmp	r5, #0
   1a25e:	d143      	bne.n	1a2e8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   1a260:	f7ff ffd0 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a264:	4603      	mov	r3, r0
   1a266:	2800      	cmp	r0, #0
   1a268:	d03e      	beq.n	1a2e8 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   1a26a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1a26c:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   1a26e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1a270:	2203      	movs	r2, #3
   1a272:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1a274:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   1a276:	f7ff ff7d 	bl	1a174 <usbd_evt_put>
}
   1a27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   1a27e:	f7ff bf7f 	b.w	1a180 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   1a282:	b14d      	cbz	r5, 1a298 <usbd_event_transfer_data+0x50>
   1a284:	2d01      	cmp	r5, #1
   1a286:	d12f      	bne.n	1a2e8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   1a288:	f7ff ffbc 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a28c:	4603      	mov	r3, r0
   1a28e:	b358      	cbz	r0, 1a2e8 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   1a290:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   1a292:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1a294:	7305      	strb	r5, [r0, #12]
   1a296:	e7ed      	b.n	1a274 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   1a298:	f7ff ffb4 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a29c:	b320      	cbz	r0, 1a2e8 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   1a29e:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   1a2a0:	4b12      	ldr	r3, [pc, #72]	; (1a2ec <usbd_event_transfer_data+0xa4>)
   1a2a2:	f012 0f80 	tst.w	r2, #128	; 0x80
   1a2a6:	f002 0108 	and.w	r1, r2, #8
   1a2aa:	d011      	beq.n	1a2d0 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1a2ac:	b141      	cbz	r1, 1a2c0 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   1a2ae:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1a2b2:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   1a2b4:	2301      	movs	r3, #1
   1a2b6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1a2b8:	2302      	movs	r3, #2
   1a2ba:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1a2bc:	6084      	str	r4, [r0, #8]
   1a2be:	e7da      	b.n	1a276 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   1a2c0:	f002 020f 	and.w	r2, r2, #15
   1a2c4:	2114      	movs	r1, #20
   1a2c6:	fb01 3302 	mla	r3, r1, r2, r3
   1a2ca:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1a2ce:	e7f0      	b.n	1a2b2 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1a2d0:	b111      	cbz	r1, 1a2d8 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1a2d2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1a2d6:	e7ec      	b.n	1a2b2 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   1a2d8:	f002 020f 	and.w	r2, r2, #15
   1a2dc:	2114      	movs	r1, #20
   1a2de:	fb01 3302 	mla	r3, r1, r2, r3
   1a2e2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1a2e6:	e7e4      	b.n	1a2b2 <usbd_event_transfer_data+0x6a>
}
   1a2e8:	bd70      	pop	{r4, r5, r6, pc}
   1a2ea:	bf00      	nop
   1a2ec:	40027000 	.word	0x40027000

0001a2f0 <usb_dc_power_event_handler>:
	switch (event) {
   1a2f0:	2802      	cmp	r0, #2
{
   1a2f2:	b510      	push	{r4, lr}
   1a2f4:	d811      	bhi.n	1a31a <usb_dc_power_event_handler+0x2a>
   1a2f6:	4b09      	ldr	r3, [pc, #36]	; (1a31c <usb_dc_power_event_handler+0x2c>)
   1a2f8:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   1a2fa:	f7ff ff83 	bl	1a204 <usbd_evt_alloc>
	if (!ev) {
   1a2fe:	b160      	cbz	r0, 1a31a <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   1a300:	2200      	movs	r2, #0
   1a302:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   1a304:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   1a306:	f7ff ff35 	bl	1a174 <usbd_evt_put>
	if (usbd_ctx.attached) {
   1a30a:	4b05      	ldr	r3, [pc, #20]	; (1a320 <usb_dc_power_event_handler+0x30>)
   1a30c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a310:	b11b      	cbz	r3, 1a31a <usb_dc_power_event_handler+0x2a>
}
   1a312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   1a316:	f7ff bf33 	b.w	1a180 <usbd_work_schedule>
}
   1a31a:	bd10      	pop	{r4, pc}
   1a31c:	000267bc 	.word	0x000267bc
   1a320:	20005a28 	.word	0x20005a28

0001a324 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   1a324:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a326:	490f      	ldr	r1, [pc, #60]	; (1a364 <hfxo_stop.constprop.0.isra.0+0x40>)
   1a328:	f3bf 8f5b 	dmb	ish
   1a32c:	f101 0320 	add.w	r3, r1, #32
   1a330:	2200      	movs	r2, #0
   1a332:	e853 0f00 	ldrex	r0, [r3]
   1a336:	2801      	cmp	r0, #1
   1a338:	d103      	bne.n	1a342 <hfxo_stop.constprop.0.isra.0+0x1e>
   1a33a:	e843 2400 	strex	r4, r2, [r3]
   1a33e:	2c00      	cmp	r4, #0
   1a340:	d1f7      	bne.n	1a332 <hfxo_stop.constprop.0.isra.0+0xe>
   1a342:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   1a346:	d10b      	bne.n	1a360 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1a348:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1a34a:	310c      	adds	r1, #12
   1a34c:	4620      	mov	r0, r4
   1a34e:	f005 fadd 	bl	1f90c <onoff_cancel>

	if (rv == -EALREADY) {
   1a352:	3078      	adds	r0, #120	; 0x78
   1a354:	d104      	bne.n	1a360 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   1a356:	4620      	mov	r0, r4
}
   1a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a35c:	f005 bab1 	b.w	1f8c2 <onoff_release>
   1a360:	bd10      	pop	{r4, pc}
   1a362:	bf00      	nop
   1a364:	20005a28 	.word	0x20005a28

0001a368 <usbd_event_handler>:
{
   1a368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a36a:	4606      	mov	r6, r0
   1a36c:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   1a36e:	2214      	movs	r2, #20
   1a370:	2100      	movs	r1, #0
   1a372:	a803      	add	r0, sp, #12
   1a374:	f006 f9e3 	bl	2073e <memset>
	switch (p_event->type) {
   1a378:	7833      	ldrb	r3, [r6, #0]
   1a37a:	3b01      	subs	r3, #1
   1a37c:	2b05      	cmp	r3, #5
   1a37e:	d821      	bhi.n	1a3c4 <usbd_event_handler+0x5c>
   1a380:	e8df f003 	tbb	[pc, r3]
   1a384:	1414037a 	.word	0x1414037a
   1a388:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   1a38a:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1a38c:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   1a390:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1a392:	f7ff ff37 	bl	1a204 <usbd_evt_alloc>
		if (!ev) {
   1a396:	4603      	mov	r3, r0
   1a398:	b1a0      	cbz	r0, 1a3c4 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   1a39a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   1a39c:	f100 0208 	add.w	r2, r0, #8
   1a3a0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   1a3a4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   1a3a8:	4618      	mov	r0, r3
   1a3aa:	e01d      	b.n	1a3e8 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1a3ac:	2304      	movs	r3, #4
   1a3ae:	e7ed      	b.n	1a38c <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1a3b0:	78b1      	ldrb	r1, [r6, #2]
   1a3b2:	4608      	mov	r0, r1
   1a3b4:	f7ff feb6 	bl	1a124 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   1a3b8:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1a3ba:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   1a3bc:	b123      	cbz	r3, 1a3c8 <usbd_event_handler+0x60>
   1a3be:	3b01      	subs	r3, #1
   1a3c0:	2b02      	cmp	r3, #2
   1a3c2:	d943      	bls.n	1a44c <usbd_event_handler+0xe4>
}
   1a3c4:	b009      	add	sp, #36	; 0x24
   1a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1a3c8:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   1a3ca:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1a3cc:	d513      	bpl.n	1a3f6 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   1a3ce:	2d00      	cmp	r5, #0
   1a3d0:	d1f8      	bne.n	1a3c4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1a3d2:	f7ff ff17 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a3d6:	4603      	mov	r3, r0
   1a3d8:	2800      	cmp	r0, #0
   1a3da:	d0f3      	beq.n	1a3c4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1a3dc:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1a3de:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   1a3e0:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1a3e2:	2203      	movs	r2, #3
   1a3e4:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1a3e6:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   1a3e8:	f7ff fec4 	bl	1a174 <usbd_evt_put>
}
   1a3ec:	b009      	add	sp, #36	; 0x24
   1a3ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   1a3f2:	f7ff bec5 	b.w	1a180 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   1a3f6:	b155      	cbz	r5, 1a40e <usbd_event_handler+0xa6>
   1a3f8:	2d01      	cmp	r5, #1
   1a3fa:	d1e3      	bne.n	1a3c4 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1a3fc:	f7ff ff02 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a400:	4603      	mov	r3, r0
   1a402:	2800      	cmp	r0, #0
   1a404:	d0de      	beq.n	1a3c4 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   1a406:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   1a408:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1a40a:	7305      	strb	r5, [r0, #12]
   1a40c:	e7eb      	b.n	1a3e6 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   1a40e:	f7ff fef9 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1a412:	4607      	mov	r7, r0
   1a414:	2800      	cmp	r0, #0
   1a416:	d0d5      	beq.n	1a3c4 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1a418:	2301      	movs	r3, #1
   1a41a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1a41c:	2302      	movs	r3, #2
   1a41e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1a420:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   1a422:	f104 010c 	add.w	r1, r4, #12
   1a426:	78b0      	ldrb	r0, [r6, #2]
   1a428:	f009 fc55 	bl	23cd6 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1a42c:	4a13      	ldr	r2, [pc, #76]	; (1a47c <usbd_event_handler+0x114>)
   1a42e:	68e1      	ldr	r1, [r4, #12]
   1a430:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   1a434:	428b      	cmp	r3, r1
   1a436:	d906      	bls.n	1a446 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   1a438:	1a5b      	subs	r3, r3, r1
   1a43a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   1a43e:	f003 fa4d 	bl	1d8dc <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   1a442:	4638      	mov	r0, r7
   1a444:	e7d0      	b.n	1a3e8 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   1a446:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   1a44a:	e7fa      	b.n	1a442 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   1a44c:	4630      	mov	r0, r6
}
   1a44e:	b009      	add	sp, #36	; 0x24
   1a450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   1a454:	f7ff bef8 	b.w	1a248 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   1a458:	a801      	add	r0, sp, #4
   1a45a:	f003 fa19 	bl	1d890 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   1a45e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a462:	2b05      	cmp	r3, #5
   1a464:	d104      	bne.n	1a470 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1a466:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a46a:	f013 0f60 	tst.w	r3, #96	; 0x60
   1a46e:	d0a9      	beq.n	1a3c4 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   1a470:	4b03      	ldr	r3, [pc, #12]	; (1a480 <usbd_event_handler+0x118>)
   1a472:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   1a474:	2401      	movs	r4, #1
   1a476:	e78c      	b.n	1a392 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   1a478:	2402      	movs	r4, #2
   1a47a:	e78a      	b.n	1a392 <usbd_event_handler+0x2a>
   1a47c:	20005a28 	.word	0x20005a28
   1a480:	20005b94 	.word	0x20005b94

0001a484 <eps_ctx_init>:
{
   1a484:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1a486:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1a488:	f064 007f 	orn	r0, r4, #127	; 0x7f
   1a48c:	b2c0      	uxtb	r0, r0
   1a48e:	f7ff fe49 	bl	1a124 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1a492:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1a494:	f008 fed2 	bl	2323c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1a498:	2c08      	cmp	r4, #8
   1a49a:	d1f5      	bne.n	1a488 <eps_ctx_init+0x4>
   1a49c:	4d0f      	ldr	r5, [pc, #60]	; (1a4dc <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1a49e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1a4a0:	b2e0      	uxtb	r0, r4
   1a4a2:	f7ff fe3f 	bl	1a124 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1a4a6:	6903      	ldr	r3, [r0, #16]
   1a4a8:	b903      	cbnz	r3, 1a4ac <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   1a4aa:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1a4ac:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1a4ae:	f008 fec5 	bl	2323c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1a4b2:	2c08      	cmp	r4, #8
   1a4b4:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1a4b8:	d1f2      	bne.n	1a4a0 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   1a4ba:	4c09      	ldr	r4, [pc, #36]	; (1a4e0 <eps_ctx_init+0x5c>)
   1a4bc:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   1a4c0:	f008 febc 	bl	2323c <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1a4c4:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   1a4c8:	b913      	cbnz	r3, 1a4d0 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1a4ca:	4b06      	ldr	r3, [pc, #24]	; (1a4e4 <eps_ctx_init+0x60>)
   1a4cc:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   1a4d0:	4805      	ldr	r0, [pc, #20]	; (1a4e8 <eps_ctx_init+0x64>)
   1a4d2:	f008 feb3 	bl	2323c <ep_ctx_reset>
}
   1a4d6:	2000      	movs	r0, #0
   1a4d8:	bd38      	pop	{r3, r4, r5, pc}
   1a4da:	bf00      	nop
   1a4dc:	20005828 	.word	0x20005828
   1a4e0:	20005a28 	.word	0x20005a28
   1a4e4:	20005428 	.word	0x20005428
   1a4e8:	20005c94 	.word	0x20005c94

0001a4ec <usbd_work_handler>:
{
   1a4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   1a4f0:	4ca8      	ldr	r4, [pc, #672]	; (1a794 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1a4f2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 1a798 <usbd_work_handler+0x2ac>
{
   1a4f6:	b085      	sub	sp, #20
   1a4f8:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   1a4fa:	f7ff fe6d 	bl	1a1d8 <usbd_evt_get>
   1a4fe:	b910      	cbnz	r0, 1a506 <usbd_work_handler+0x1a>
}
   1a500:	b005      	add	sp, #20
   1a502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   1a506:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1a50a:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1a50c:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1a510:	b93b      	cbnz	r3, 1a522 <usbd_work_handler+0x36>
   1a512:	2a00      	cmp	r2, #0
   1a514:	f000 8086 	beq.w	1a624 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1a518:	4649      	mov	r1, r9
   1a51a:	4640      	mov	r0, r8
   1a51c:	f009 fcae 	bl	23e7c <k_mem_slab_free>
}
   1a520:	e7eb      	b.n	1a4fa <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   1a522:	2a04      	cmp	r2, #4
   1a524:	d8f8      	bhi.n	1a518 <usbd_work_handler+0x2c>
   1a526:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a52a:	007d      	.short	0x007d
   1a52c:	01030005 	.word	0x01030005
   1a530:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   1a534:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   1a536:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   1a538:	2b03      	cmp	r3, #3
   1a53a:	d8ed      	bhi.n	1a518 <usbd_work_handler+0x2c>
   1a53c:	e8df f003 	tbb	[pc, r3]
   1a540:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   1a544:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   1a546:	2208      	movs	r2, #8
   1a548:	2100      	movs	r1, #0
   1a54a:	4630      	mov	r0, r6
   1a54c:	f006 f8f7 	bl	2073e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1a550:	4b92      	ldr	r3, [pc, #584]	; (1a79c <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1a552:	4893      	ldr	r0, [pc, #588]	; (1a7a0 <usbd_work_handler+0x2b4>)
   1a554:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1a558:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1a55a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1a55e:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   1a560:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1a564:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1a568:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1a56c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   1a56e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1a572:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1a576:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1a57a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1a57c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1a580:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1a584:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1a588:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1a58a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1a58c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1a58e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1a590:	f006 f8ca 	bl	20728 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1a594:	682b      	ldr	r3, [r5, #0]
   1a596:	7a68      	ldrb	r0, [r5, #9]
   1a598:	2100      	movs	r1, #0
   1a59a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1a59c:	f996 3000 	ldrsb.w	r3, [r6]
   1a5a0:	2b00      	cmp	r3, #0
   1a5a2:	db06      	blt.n	1a5b2 <usbd_work_handler+0xc6>
   1a5a4:	88f3      	ldrh	r3, [r6, #6]
   1a5a6:	b123      	cbz	r3, 1a5b2 <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   1a5a8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   1a5ac:	f003 f996 	bl	1d8dc <nrfx_usbd_setup_data_clear>
   1a5b0:	e7b2      	b.n	1a518 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   1a5b2:	2300      	movs	r3, #0
   1a5b4:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   1a5b8:	e7ae      	b.n	1a518 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   1a5ba:	7f6b      	ldrb	r3, [r5, #29]
   1a5bc:	2b00      	cmp	r3, #0
   1a5be:	d0ab      	beq.n	1a518 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   1a5c0:	7f2b      	ldrb	r3, [r5, #28]
   1a5c2:	2b00      	cmp	r3, #0
   1a5c4:	d0a8      	beq.n	1a518 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   1a5c6:	2600      	movs	r6, #0
   1a5c8:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1a5ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a5ce:	4875      	ldr	r0, [pc, #468]	; (1a7a4 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   1a5d0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1a5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a5d6:	f008 fe44 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   1a5da:	696b      	ldr	r3, [r5, #20]
   1a5dc:	9301      	str	r3, [sp, #4]
   1a5de:	686b      	ldr	r3, [r5, #4]
   1a5e0:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1a5e4:	a901      	add	r1, sp, #4
   1a5e6:	7a68      	ldrb	r0, [r5, #9]
   1a5e8:	f002 ff82 	bl	1d4f0 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   1a5ec:	486d      	ldr	r0, [pc, #436]	; (1a7a4 <usbd_work_handler+0x2b8>)
   1a5ee:	f008 fe3a 	bl	23266 <k_mutex_unlock.isra.0>
   1a5f2:	e791      	b.n	1a518 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1a5f4:	682b      	ldr	r3, [r5, #0]
   1a5f6:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1a5f8:	7a68      	ldrb	r0, [r5, #9]
   1a5fa:	4798      	blx	r3
		break;
   1a5fc:	e78c      	b.n	1a518 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1a5fe:	7aab      	ldrb	r3, [r5, #10]
   1a600:	b96b      	cbnz	r3, 1a61e <usbd_work_handler+0x132>
   1a602:	7feb      	ldrb	r3, [r5, #31]
   1a604:	b95b      	cbnz	r3, 1a61e <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1a606:	4867      	ldr	r0, [pc, #412]	; (1a7a4 <usbd_work_handler+0x2b8>)
   1a608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a610:	f008 fe27 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   1a614:	f003 f992 	bl	1d93c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   1a618:	4862      	ldr	r0, [pc, #392]	; (1a7a4 <usbd_work_handler+0x2b8>)
   1a61a:	f008 fe24 	bl	23266 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1a61e:	682b      	ldr	r3, [r5, #0]
   1a620:	2102      	movs	r1, #2
   1a622:	e7e9      	b.n	1a5f8 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   1a624:	7a02      	ldrb	r2, [r0, #8]
   1a626:	2a04      	cmp	r2, #4
   1a628:	f63f af76 	bhi.w	1a518 <usbd_work_handler+0x2c>
   1a62c:	e8df f002 	tbb	[pc, r2]
   1a630:	6925035b 	.word	0x6925035b
   1a634:	75          	.byte	0x75
   1a635:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   1a636:	f002 ff0b 	bl	1d450 <nrfx_usbd_is_enabled>
   1a63a:	4605      	mov	r5, r0
   1a63c:	2800      	cmp	r0, #0
   1a63e:	f47f af6b 	bne.w	1a518 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   1a642:	f002 fe49 	bl	1d2d8 <nrfx_usbd_enable>
   1a646:	f3bf 8f5b 	dmb	ish
   1a64a:	4957      	ldr	r1, [pc, #348]	; (1a7a8 <usbd_work_handler+0x2bc>)
   1a64c:	2301      	movs	r3, #1
   1a64e:	e851 2f00 	ldrex	r2, [r1]
   1a652:	2a00      	cmp	r2, #0
   1a654:	d103      	bne.n	1a65e <usbd_work_handler+0x172>
   1a656:	e841 3000 	strex	r0, r3, [r1]
   1a65a:	2800      	cmp	r0, #0
   1a65c:	d1f7      	bne.n	1a64e <usbd_work_handler+0x162>
   1a65e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1a662:	f47f af59 	bne.w	1a518 <usbd_work_handler+0x2c>
   1a666:	f841 5c10 	str.w	r5, [r1, #-16]
   1a66a:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1a66e:	69e0      	ldr	r0, [r4, #28]
   1a670:	6163      	str	r3, [r4, #20]
   1a672:	3914      	subs	r1, #20
   1a674:	f005 f8dc 	bl	1f830 <onoff_request>
   1a678:	e74e      	b.n	1a518 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   1a67a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1a67c:	f065 007f 	orn	r0, r5, #127	; 0x7f
   1a680:	b2c0      	uxtb	r0, r0
   1a682:	f7ff fd4f 	bl	1a124 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1a686:	7a03      	ldrb	r3, [r0, #8]
   1a688:	b113      	cbz	r3, 1a690 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1a68a:	7a40      	ldrb	r0, [r0, #9]
   1a68c:	f003 fb42 	bl	1dd14 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   1a690:	3501      	adds	r5, #1
   1a692:	2d08      	cmp	r5, #8
   1a694:	d1f2      	bne.n	1a67c <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   1a696:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   1a69a:	b11b      	cbz	r3, 1a6a4 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1a69c:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   1a6a0:	f003 fb38 	bl	1dd14 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1a6a4:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1a6a6:	b2e8      	uxtb	r0, r5
   1a6a8:	f7ff fd3c 	bl	1a124 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1a6ac:	7a03      	ldrb	r3, [r0, #8]
   1a6ae:	b113      	cbz	r3, 1a6b6 <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1a6b0:	7a40      	ldrb	r0, [r0, #9]
   1a6b2:	f003 fb2f 	bl	1dd14 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1a6b6:	3501      	adds	r5, #1
   1a6b8:	2d08      	cmp	r5, #8
   1a6ba:	d1f4      	bne.n	1a6a6 <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   1a6bc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1a6c0:	b11b      	cbz	r3, 1a6ca <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1a6c2:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1a6c6:	f003 fb25 	bl	1dd14 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   1a6ca:	2001      	movs	r0, #1
   1a6cc:	f002 fea2 	bl	1d414 <nrfx_usbd_start>
		ctx->ready = true;
   1a6d0:	2301      	movs	r3, #1
   1a6d2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1a6d6:	6823      	ldr	r3, [r4, #0]
   1a6d8:	2b00      	cmp	r3, #0
   1a6da:	f43f af1d 	beq.w	1a518 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   1a6de:	2100      	movs	r1, #0
   1a6e0:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   1a6e2:	4798      	blx	r3
   1a6e4:	e718      	b.n	1a518 <usbd_work_handler+0x2c>
		ctx->ready = false;
   1a6e6:	2500      	movs	r5, #0
   1a6e8:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   1a6ec:	f003 fa9e 	bl	1dc2c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1a6f0:	f7ff fe18 	bl	1a324 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   1a6f4:	6823      	ldr	r3, [r4, #0]
   1a6f6:	2b00      	cmp	r3, #0
   1a6f8:	f43f af0e 	beq.w	1a518 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   1a6fc:	4629      	mov	r1, r5
   1a6fe:	2004      	movs	r0, #4
   1a700:	e7ef      	b.n	1a6e2 <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   1a702:	2b00      	cmp	r3, #0
   1a704:	f43f af08 	beq.w	1a518 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   1a708:	f003 faa8 	bl	1dc5c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1a70c:	6823      	ldr	r3, [r4, #0]
   1a70e:	2b00      	cmp	r3, #0
   1a710:	f43f af02 	beq.w	1a518 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1a714:	2100      	movs	r1, #0
   1a716:	2005      	movs	r0, #5
   1a718:	e7e3      	b.n	1a6e2 <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   1a71a:	6822      	ldr	r2, [r4, #0]
   1a71c:	2a00      	cmp	r2, #0
   1a71e:	f43f aefb 	beq.w	1a518 <usbd_work_handler+0x2c>
   1a722:	2b00      	cmp	r3, #0
   1a724:	f43f aef8 	beq.w	1a518 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1a728:	2100      	movs	r1, #0
   1a72a:	2006      	movs	r0, #6
   1a72c:	4790      	blx	r2
   1a72e:	e6f3      	b.n	1a518 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1a730:	f107 0510 	add.w	r5, r7, #16
   1a734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a73c:	4628      	mov	r0, r5
   1a73e:	f008 fd90 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   1a742:	f7ff fe9f 	bl	1a484 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   1a746:	4628      	mov	r0, r5
   1a748:	f008 fd8d 	bl	23266 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   1a74c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1a750:	2b00      	cmp	r3, #0
   1a752:	f43f aee1 	beq.w	1a518 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   1a756:	2100      	movs	r1, #0
   1a758:	2001      	movs	r0, #1
   1a75a:	e7c2      	b.n	1a6e2 <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   1a75c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1a760:	b17b      	cbz	r3, 1a782 <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   1a762:	2501      	movs	r5, #1
   1a764:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   1a768:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   1a76c:	f7ff fd4a 	bl	1a204 <usbd_evt_alloc>
		if (!ev) {
   1a770:	b138      	cbz	r0, 1a782 <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   1a772:	4a0e      	ldr	r2, [pc, #56]	; (1a7ac <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   1a774:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1a776:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1a778:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   1a77a:	f7ff fcfb 	bl	1a174 <usbd_evt_put>
		usbd_work_schedule();
   1a77e:	f7ff fcff 	bl	1a180 <usbd_work_schedule>
			if (ctx->status_cb) {
   1a782:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1a786:	2b00      	cmp	r3, #0
   1a788:	f43f aec6 	beq.w	1a518 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   1a78c:	2100      	movs	r1, #0
   1a78e:	200a      	movs	r0, #10
   1a790:	e7a7      	b.n	1a6e2 <usbd_work_handler+0x1f6>
   1a792:	bf00      	nop
   1a794:	20005a28 	.word	0x20005a28
   1a798:	20000ac0 	.word	0x20000ac0
   1a79c:	40027000 	.word	0x40027000
   1a7a0:	20005a2c 	.word	0x20005a2c
   1a7a4:	20005a60 	.word	0x20005a60
   1a7a8:	20005a48 	.word	0x20005a48
   1a7ac:	20005c94 	.word	0x20005c94
	nrfx_power_usbevt_disable();
   1a7b0:	f009 f8f8 	bl	239a4 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1a7b4:	f003 fa3a 	bl	1dc2c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   1a7b8:	f002 fd84 	bl	1d2c4 <nrfx_usbd_uninit>
	usbd_evt_flush();
   1a7bc:	f7ff fd14 	bl	1a1e8 <usbd_evt_flush>
	ret = eps_ctx_init();
   1a7c0:	f7ff fe60 	bl	1a484 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1a7c4:	f009 f8e7 	bl	23996 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   1a7c8:	4801      	ldr	r0, [pc, #4]	; (1a7d0 <usbd_work_handler+0x2e4>)
   1a7ca:	f002 fe4b 	bl	1d464 <nrfx_usbd_init>
}
   1a7ce:	e6a3      	b.n	1a518 <usbd_work_handler+0x2c>
   1a7d0:	0001a369 	.word	0x0001a369

0001a7d4 <usb_dc_attach>:
{
   1a7d4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1a7d6:	4d1a      	ldr	r5, [pc, #104]	; (1a840 <usb_dc_attach+0x6c>)
   1a7d8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1a7dc:	bb5c      	cbnz	r4, 1a836 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   1a7de:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a7e2:	f009 fb8e 	bl	23f02 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	f000 fb40 	bl	1ae6c <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a7ec:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   1a7ee:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a7f0:	2101      	movs	r1, #1
   1a7f2:	2027      	movs	r0, #39	; 0x27
   1a7f4:	f7eb faf4 	bl	5de0 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   1a7f8:	4812      	ldr	r0, [pc, #72]	; (1a844 <usb_dc_attach+0x70>)
   1a7fa:	f002 fe33 	bl	1d464 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   1a7fe:	4b12      	ldr	r3, [pc, #72]	; (1a848 <usb_dc_attach+0x74>)
   1a800:	4298      	cmp	r0, r3
   1a802:	d11a      	bne.n	1a83a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   1a804:	f009 f8c7 	bl	23996 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   1a808:	f7ff fe3c 	bl	1a484 <eps_ctx_init>
	if (ret == 0) {
   1a80c:	4604      	mov	r4, r0
   1a80e:	b910      	cbnz	r0, 1a816 <usb_dc_attach+0x42>
		ctx->attached = true;
   1a810:	2301      	movs	r3, #1
   1a812:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1a816:	4b0d      	ldr	r3, [pc, #52]	; (1a84c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   1a818:	681b      	ldr	r3, [r3, #0]
   1a81a:	b10b      	cbz	r3, 1a820 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   1a81c:	f7ff fcb0 	bl	1a180 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   1a820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a824:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   1a828:	07db      	lsls	r3, r3, #31
   1a82a:	d502      	bpl.n	1a832 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   1a82c:	2000      	movs	r0, #0
   1a82e:	f7ff fd5f 	bl	1a2f0 <usb_dc_power_event_handler>
}
   1a832:	4620      	mov	r0, r4
   1a834:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1a836:	2400      	movs	r4, #0
   1a838:	e7fb      	b.n	1a832 <usb_dc_attach+0x5e>
		return -EIO;
   1a83a:	f06f 0404 	mvn.w	r4, #4
   1a83e:	e7f8      	b.n	1a832 <usb_dc_attach+0x5e>
   1a840:	20005a28 	.word	0x20005a28
   1a844:	0001a369 	.word	0x0001a369
   1a848:	0bad0000 	.word	0x0bad0000
   1a84c:	20000b54 	.word	0x20000b54

0001a850 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   1a850:	4b07      	ldr	r3, [pc, #28]	; (1a870 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   1a852:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1a856:	b13a      	cbz	r2, 1a868 <usb_dc_set_address+0x18>
   1a858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   1a85c:	2b00      	cmp	r3, #0
   1a85e:	bf0c      	ite	eq
   1a860:	f06f 0012 	mvneq.w	r0, #18
   1a864:	2000      	movne	r0, #0
   1a866:	4770      	bx	lr
		return -ENODEV;
   1a868:	f06f 0012 	mvn.w	r0, #18
}
   1a86c:	4770      	bx	lr
   1a86e:	bf00      	nop
   1a870:	20005a28 	.word	0x20005a28

0001a874 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   1a874:	4b0f      	ldr	r3, [pc, #60]	; (1a8b4 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   1a876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   1a87a:	b510      	push	{r4, lr}
   1a87c:	4601      	mov	r1, r0
	if (!dev_attached()) {
   1a87e:	b1b3      	cbz	r3, 1a8ae <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   1a880:	7804      	ldrb	r4, [r0, #0]
   1a882:	4620      	mov	r0, r4
   1a884:	f7ff fc4e 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a888:	b910      	cbnz	r0, 1a890 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   1a88a:	f06f 0015 	mvn.w	r0, #21
}
   1a88e:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   1a890:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1a892:	790b      	ldrb	r3, [r1, #4]
   1a894:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1a896:	8849      	ldrh	r1, [r1, #2]
   1a898:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   1a89a:	0723      	lsls	r3, r4, #28
   1a89c:	d402      	bmi.n	1a8a4 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   1a89e:	1e4b      	subs	r3, r1, #1
   1a8a0:	420b      	tst	r3, r1
   1a8a2:	d1f2      	bne.n	1a88a <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1a8a4:	4620      	mov	r0, r4
   1a8a6:	f009 fa11 	bl	23ccc <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   1a8aa:	2000      	movs	r0, #0
   1a8ac:	e7ef      	b.n	1a88e <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   1a8ae:	f06f 0012 	mvn.w	r0, #18
   1a8b2:	e7ec      	b.n	1a88e <usb_dc_ep_configure+0x1a>
   1a8b4:	20005a28 	.word	0x20005a28

0001a8b8 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   1a8b8:	4b12      	ldr	r3, [pc, #72]	; (1a904 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   1a8ba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1a8be:	b510      	push	{r4, lr}
   1a8c0:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1a8c2:	b1ca      	cbz	r2, 1a8f8 <usb_dc_ep_set_stall+0x40>
   1a8c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a8c8:	b1b3      	cbz	r3, 1a8f8 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   1a8ca:	f7ff fc2b 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a8ce:	4604      	mov	r4, r0
   1a8d0:	b1a8      	cbz	r0, 1a8fe <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   1a8d2:	7a83      	ldrb	r3, [r0, #10]
   1a8d4:	2b01      	cmp	r3, #1
   1a8d6:	d012      	beq.n	1a8fe <usb_dc_ep_set_stall+0x46>
   1a8d8:	d907      	bls.n	1a8ea <usb_dc_ep_set_stall+0x32>
   1a8da:	3b02      	subs	r3, #2
   1a8dc:	2b01      	cmp	r3, #1
   1a8de:	d907      	bls.n	1a8f0 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1a8e0:	6963      	ldr	r3, [r4, #20]
   1a8e2:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1a8e4:	2000      	movs	r0, #0
   1a8e6:	60e0      	str	r0, [r4, #12]
}
   1a8e8:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   1a8ea:	f003 f82f 	bl	1d94c <nrfx_usbd_setup_stall>
		break;
   1a8ee:	e7f7      	b.n	1a8e0 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   1a8f0:	4608      	mov	r0, r1
   1a8f2:	f002 ff9f 	bl	1d834 <nrfx_usbd_ep_stall>
		break;
   1a8f6:	e7f3      	b.n	1a8e0 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   1a8f8:	f06f 0012 	mvn.w	r0, #18
   1a8fc:	e7f4      	b.n	1a8e8 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   1a8fe:	f06f 0015 	mvn.w	r0, #21
   1a902:	e7f1      	b.n	1a8e8 <usb_dc_ep_set_stall+0x30>
   1a904:	20005a28 	.word	0x20005a28

0001a908 <usb_dc_ep_clear_stall>:
{
   1a908:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1a90a:	4b0e      	ldr	r3, [pc, #56]	; (1a944 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   1a90c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1a910:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   1a912:	b182      	cbz	r2, 1a936 <usb_dc_ep_clear_stall+0x2e>
   1a914:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a918:	b16b      	cbz	r3, 1a936 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   1a91a:	f7ff fc03 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a91e:	b168      	cbz	r0, 1a93c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   1a920:	f015 0408 	ands.w	r4, r5, #8
   1a924:	d10a      	bne.n	1a93c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1a926:	4628      	mov	r0, r5
   1a928:	f002 ffa6 	bl	1d878 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1a92c:	4628      	mov	r0, r5
   1a92e:	f003 fa43 	bl	1ddb8 <nrfx_usbd_ep_stall_clear>
	return 0;
   1a932:	4620      	mov	r0, r4
}
   1a934:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1a936:	f06f 0012 	mvn.w	r0, #18
   1a93a:	e7fb      	b.n	1a934 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   1a93c:	f06f 0015 	mvn.w	r0, #21
   1a940:	e7f8      	b.n	1a934 <usb_dc_ep_clear_stall+0x2c>
   1a942:	bf00      	nop
   1a944:	20005a28 	.word	0x20005a28

0001a948 <usb_dc_ep_is_stalled>:
{
   1a948:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1a94a:	4b0c      	ldr	r3, [pc, #48]	; (1a97c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   1a94c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1a950:	4605      	mov	r5, r0
   1a952:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   1a954:	b162      	cbz	r2, 1a970 <usb_dc_ep_is_stalled+0x28>
   1a956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a95a:	b14b      	cbz	r3, 1a970 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   1a95c:	f7ff fbe2 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a960:	b148      	cbz	r0, 1a976 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   1a962:	b141      	cbz	r1, 1a976 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1a964:	4628      	mov	r0, r5
   1a966:	f002 ff6d 	bl	1d844 <nrfx_usbd_ep_stall_check>
   1a96a:	7020      	strb	r0, [r4, #0]
	return 0;
   1a96c:	2000      	movs	r0, #0
}
   1a96e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1a970:	f06f 0012 	mvn.w	r0, #18
   1a974:	e7fb      	b.n	1a96e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   1a976:	f06f 0015 	mvn.w	r0, #21
   1a97a:	e7f8      	b.n	1a96e <usb_dc_ep_is_stalled+0x26>
   1a97c:	20005a28 	.word	0x20005a28

0001a980 <usb_dc_ep_enable>:
{
   1a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   1a982:	4f13      	ldr	r7, [pc, #76]	; (1a9d0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   1a984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   1a988:	4604      	mov	r4, r0
	if (!dev_attached()) {
   1a98a:	b1bb      	cbz	r3, 1a9bc <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   1a98c:	f7ff fbca 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a990:	4605      	mov	r5, r0
   1a992:	b1b0      	cbz	r0, 1a9c2 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1a994:	0723      	lsls	r3, r4, #28
   1a996:	d405      	bmi.n	1a9a4 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1a998:	4620      	mov	r0, r4
   1a99a:	f002 ff6d 	bl	1d878 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1a99e:	4620      	mov	r0, r4
   1a9a0:	f003 fa0a 	bl	1ddb8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   1a9a4:	7a2e      	ldrb	r6, [r5, #8]
   1a9a6:	b97e      	cbnz	r6, 1a9c8 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   1a9a8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   1a9ac:	2301      	movs	r3, #1
   1a9ae:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   1a9b0:	b118      	cbz	r0, 1a9ba <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	f003 f9ae 	bl	1dd14 <nrfx_usbd_ep_enable>
	return 0;
   1a9b8:	4630      	mov	r0, r6
}
   1a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1a9bc:	f06f 0012 	mvn.w	r0, #18
   1a9c0:	e7fb      	b.n	1a9ba <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   1a9c2:	f06f 0015 	mvn.w	r0, #21
   1a9c6:	e7f8      	b.n	1a9ba <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   1a9c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a9cc:	e7f5      	b.n	1a9ba <usb_dc_ep_enable+0x3a>
   1a9ce:	bf00      	nop
   1a9d0:	20005a28 	.word	0x20005a28

0001a9d4 <usb_dc_ep_disable>:
{
   1a9d4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1a9d6:	4b11      	ldr	r3, [pc, #68]	; (1aa1c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   1a9d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1a9dc:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1a9de:	b19a      	cbz	r2, 1aa08 <usb_dc_ep_disable+0x34>
   1a9e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a9e4:	b183      	cbz	r3, 1aa08 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   1a9e6:	f7ff fb9d 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1a9ea:	4605      	mov	r5, r0
   1a9ec:	b178      	cbz	r0, 1aa0e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   1a9ee:	7a03      	ldrb	r3, [r0, #8]
   1a9f0:	b183      	cbz	r3, 1aa14 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1a9f2:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   1a9f4:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1a9f6:	f003 f961 	bl	1dcbc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   1a9fa:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   1a9fc:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   1a9fe:	f008 fc1d 	bl	2323c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   1aa02:	722c      	strb	r4, [r5, #8]
	return 0;
   1aa04:	4620      	mov	r0, r4
}
   1aa06:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1aa08:	f06f 0012 	mvn.w	r0, #18
   1aa0c:	e7fb      	b.n	1aa06 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   1aa0e:	f06f 0015 	mvn.w	r0, #21
   1aa12:	e7f8      	b.n	1aa06 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   1aa14:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1aa18:	e7f5      	b.n	1aa06 <usb_dc_ep_disable+0x32>
   1aa1a:	bf00      	nop
   1aa1c:	20005a28 	.word	0x20005a28

0001aa20 <usb_dc_ep_write>:
{
   1aa20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   1aa24:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1ab04 <usb_dc_ep_write+0xe4>
{
   1aa28:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   1aa2a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   1aa2e:	b085      	sub	sp, #20
   1aa30:	4607      	mov	r7, r0
   1aa32:	4689      	mov	r9, r1
   1aa34:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d05d      	beq.n	1aaf6 <usb_dc_ep_write+0xd6>
   1aa3a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   1aa3e:	2b00      	cmp	r3, #0
   1aa40:	d059      	beq.n	1aaf6 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   1aa42:	0603      	lsls	r3, r0, #24
   1aa44:	d55a      	bpl.n	1aafc <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   1aa46:	f7ff fb6d 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1aa4a:	4605      	mov	r5, r0
   1aa4c:	2800      	cmp	r0, #0
   1aa4e:	d055      	beq.n	1aafc <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   1aa50:	7a03      	ldrb	r3, [r0, #8]
   1aa52:	2b00      	cmp	r3, #0
   1aa54:	d052      	beq.n	1aafc <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1aa56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aa5e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1aa62:	f008 fbfe 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   1aa66:	7fab      	ldrb	r3, [r5, #30]
   1aa68:	b14b      	cbz	r3, 1aa7e <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   1aa6a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1aa6e:	f008 fbfa 	bl	23266 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   1aa72:	f06f 040a 	mvn.w	r4, #10
}
   1aa76:	4620      	mov	r0, r4
   1aa78:	b005      	add	sp, #20
   1aa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   1aa7e:	b916      	cbnz	r6, 1aa86 <usb_dc_ep_write+0x66>
   1aa80:	7feb      	ldrb	r3, [r5, #31]
   1aa82:	b103      	cbz	r3, 1aa86 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   1aa84:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   1aa86:	7aab      	ldrb	r3, [r5, #10]
   1aa88:	b9bb      	cbnz	r3, 1aaba <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1aa8a:	b15e      	cbz	r6, 1aaa4 <usb_dc_ep_write+0x84>
   1aa8c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1aa90:	42b3      	cmp	r3, r6
   1aa92:	d907      	bls.n	1aaa4 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   1aa94:	686a      	ldr	r2, [r5, #4]
   1aa96:	fbb6 f3f2 	udiv	r3, r6, r2
   1aa9a:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1aa9e:	b90b      	cbnz	r3, 1aaa4 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   1aaa0:	2301      	movs	r3, #1
   1aaa2:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   1aaa4:	f002 ff5a 	bl	1d95c <nrfx_usbd_last_setup_dir_get>
   1aaa8:	42b8      	cmp	r0, r7
   1aaaa:	d006      	beq.n	1aaba <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   1aaac:	f002 ff46 	bl	1d93c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   1aab0:	4815      	ldr	r0, [pc, #84]	; (1ab08 <usb_dc_ep_write+0xe8>)
   1aab2:	f008 fbd8 	bl	23266 <k_mutex_unlock.isra.0>
		return 0;
   1aab6:	2400      	movs	r4, #0
   1aab8:	e7dd      	b.n	1aa76 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   1aaba:	2301      	movs	r3, #1
   1aabc:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1aabe:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1aac2:	a901      	add	r1, sp, #4
   1aac4:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1aac6:	e9cd 9601 	strd	r9, r6, [sp, #4]
   1aaca:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1aace:	f002 fd0f 	bl	1d4f0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1aad2:	4b0e      	ldr	r3, [pc, #56]	; (1ab0c <usb_dc_ep_write+0xec>)
   1aad4:	4298      	cmp	r0, r3
   1aad6:	d007      	beq.n	1aae8 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   1aad8:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   1aadc:	b10c      	cbz	r4, 1aae2 <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   1aade:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   1aae2:	f06f 0404 	mvn.w	r4, #4
   1aae6:	e002      	b.n	1aaee <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   1aae8:	b10c      	cbz	r4, 1aaee <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   1aaea:	6026      	str	r6, [r4, #0]
	int result = 0;
   1aaec:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   1aaee:	4806      	ldr	r0, [pc, #24]	; (1ab08 <usb_dc_ep_write+0xe8>)
   1aaf0:	f008 fbb9 	bl	23266 <k_mutex_unlock.isra.0>
	return result;
   1aaf4:	e7bf      	b.n	1aa76 <usb_dc_ep_write+0x56>
		return -ENODEV;
   1aaf6:	f06f 0412 	mvn.w	r4, #18
   1aafa:	e7bc      	b.n	1aa76 <usb_dc_ep_write+0x56>
		return -EINVAL;
   1aafc:	f06f 0415 	mvn.w	r4, #21
   1ab00:	e7b9      	b.n	1aa76 <usb_dc_ep_write+0x56>
   1ab02:	bf00      	nop
   1ab04:	20005a28 	.word	0x20005a28
   1ab08:	20005a60 	.word	0x20005a60
   1ab0c:	0bad0000 	.word	0x0bad0000

0001ab10 <usb_dc_ep_read_wait>:
{
   1ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab14:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   1ab16:	4b20      	ldr	r3, [pc, #128]	; (1ab98 <usb_dc_ep_read_wait+0x88>)
{
   1ab18:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   1ab1a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1ab1e:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   1ab20:	2a00      	cmp	r2, #0
   1ab22:	d033      	beq.n	1ab8c <usb_dc_ep_read_wait+0x7c>
   1ab24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1ab28:	b383      	cbz	r3, 1ab8c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1ab2a:	0603      	lsls	r3, r0, #24
   1ab2c:	d431      	bmi.n	1ab92 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   1ab2e:	b901      	cbnz	r1, 1ab32 <usb_dc_ep_read_wait+0x22>
   1ab30:	bb7f      	cbnz	r7, 1ab92 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   1ab32:	f7ff faf7 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1ab36:	4604      	mov	r4, r0
   1ab38:	b358      	cbz	r0, 1ab92 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   1ab3a:	7a03      	ldrb	r3, [r0, #8]
   1ab3c:	b34b      	cbz	r3, 1ab92 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1ab3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab42:	4816      	ldr	r0, [pc, #88]	; (1ab9c <usb_dc_ep_read_wait+0x8c>)
   1ab44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ab48:	f008 fb8b 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   1ab4c:	68e3      	ldr	r3, [r4, #12]
   1ab4e:	429f      	cmp	r7, r3
   1ab50:	46b8      	mov	r8, r7
   1ab52:	bf28      	it	cs
   1ab54:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   1ab56:	b946      	cbnz	r6, 1ab6a <usb_dc_ep_read_wait+0x5a>
   1ab58:	b93f      	cbnz	r7, 1ab6a <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   1ab5a:	b105      	cbz	r5, 1ab5e <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   1ab5c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   1ab5e:	480f      	ldr	r0, [pc, #60]	; (1ab9c <usb_dc_ep_read_wait+0x8c>)
   1ab60:	f008 fb81 	bl	23266 <k_mutex_unlock.isra.0>
		return 0;
   1ab64:	2000      	movs	r0, #0
}
   1ab66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   1ab6a:	69a1      	ldr	r1, [r4, #24]
   1ab6c:	4642      	mov	r2, r8
   1ab6e:	4630      	mov	r0, r6
   1ab70:	f005 fdda 	bl	20728 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   1ab74:	69a3      	ldr	r3, [r4, #24]
   1ab76:	4443      	add	r3, r8
   1ab78:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   1ab7a:	68e3      	ldr	r3, [r4, #12]
   1ab7c:	eba3 0308 	sub.w	r3, r3, r8
   1ab80:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   1ab82:	2d00      	cmp	r5, #0
   1ab84:	d0eb      	beq.n	1ab5e <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   1ab86:	f8c5 8000 	str.w	r8, [r5]
   1ab8a:	e7e8      	b.n	1ab5e <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   1ab8c:	f06f 0012 	mvn.w	r0, #18
   1ab90:	e7e9      	b.n	1ab66 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   1ab92:	f06f 0015 	mvn.w	r0, #21
   1ab96:	e7e6      	b.n	1ab66 <usb_dc_ep_read_wait+0x56>
   1ab98:	20005a28 	.word	0x20005a28
   1ab9c:	20005a60 	.word	0x20005a60

0001aba0 <usb_dc_ep_read_continue>:
{
   1aba0:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   1aba2:	4d1e      	ldr	r5, [pc, #120]	; (1ac1c <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   1aba4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   1aba8:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   1abaa:	b382      	cbz	r2, 1ac0e <usb_dc_ep_read_continue+0x6e>
   1abac:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   1abb0:	b36a      	cbz	r2, 1ac0e <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1abb2:	061b      	lsls	r3, r3, #24
   1abb4:	d42e      	bmi.n	1ac14 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   1abb6:	f7ff fab5 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1abba:	4604      	mov	r4, r0
   1abbc:	b350      	cbz	r0, 1ac14 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   1abbe:	7a03      	ldrb	r3, [r0, #8]
   1abc0:	b343      	cbz	r3, 1ac14 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1abc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1abc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1abca:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1abce:	f008 fb48 	bl	23262 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   1abd2:	68e3      	ldr	r3, [r4, #12]
   1abd4:	b9b3      	cbnz	r3, 1ac04 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   1abd6:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   1abd8:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   1abda:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   1abdc:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   1abde:	7f63      	ldrb	r3, [r4, #29]
   1abe0:	b183      	cbz	r3, 1ac04 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   1abe2:	f7ff fb0f 	bl	1a204 <usbd_evt_alloc>
			if (!ev) {
   1abe6:	b930      	cbnz	r0, 1abf6 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   1abe8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1abec:	f008 fb3b 	bl	23266 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   1abf0:	f06f 000b 	mvn.w	r0, #11
}
   1abf4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   1abf6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   1abf8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1abfa:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   1abfc:	f7ff faba 	bl	1a174 <usbd_evt_put>
			usbd_work_schedule();
   1ac00:	f7ff fabe 	bl	1a180 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   1ac04:	4806      	ldr	r0, [pc, #24]	; (1ac20 <usb_dc_ep_read_continue+0x80>)
   1ac06:	f008 fb2e 	bl	23266 <k_mutex_unlock.isra.0>
	return 0;
   1ac0a:	2000      	movs	r0, #0
   1ac0c:	e7f2      	b.n	1abf4 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   1ac0e:	f06f 0012 	mvn.w	r0, #18
   1ac12:	e7ef      	b.n	1abf4 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   1ac14:	f06f 0015 	mvn.w	r0, #21
   1ac18:	e7ec      	b.n	1abf4 <usb_dc_ep_read_continue+0x54>
   1ac1a:	bf00      	nop
   1ac1c:	20005a28 	.word	0x20005a28
   1ac20:	20005a60 	.word	0x20005a60

0001ac24 <usb_dc_ep_set_callback>:
{
   1ac24:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1ac26:	4b08      	ldr	r3, [pc, #32]	; (1ac48 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   1ac28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ac2c:	b12b      	cbz	r3, 1ac3a <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   1ac2e:	f7ff fa79 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1ac32:	b128      	cbz	r0, 1ac40 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   1ac34:	6001      	str	r1, [r0, #0]
	return 0;
   1ac36:	2000      	movs	r0, #0
}
   1ac38:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ac3a:	f06f 0012 	mvn.w	r0, #18
   1ac3e:	e7fb      	b.n	1ac38 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   1ac40:	f06f 0015 	mvn.w	r0, #21
   1ac44:	e7f8      	b.n	1ac38 <usb_dc_ep_set_callback+0x14>
   1ac46:	bf00      	nop
   1ac48:	20005a28 	.word	0x20005a28

0001ac4c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   1ac4c:	4b01      	ldr	r3, [pc, #4]	; (1ac54 <usb_dc_set_status_callback+0x8>)
   1ac4e:	6018      	str	r0, [r3, #0]
}
   1ac50:	4770      	bx	lr
   1ac52:	bf00      	nop
   1ac54:	20005a28 	.word	0x20005a28

0001ac58 <usb_dc_ep_mps>:
{
   1ac58:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1ac5a:	4b07      	ldr	r3, [pc, #28]	; (1ac78 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   1ac5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ac60:	b123      	cbz	r3, 1ac6c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   1ac62:	f7ff fa5f 	bl	1a124 <endpoint_ctx>
	if (!ep_ctx) {
   1ac66:	b120      	cbz	r0, 1ac72 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   1ac68:	6840      	ldr	r0, [r0, #4]
}
   1ac6a:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ac6c:	f06f 0012 	mvn.w	r0, #18
   1ac70:	e7fb      	b.n	1ac6a <usb_dc_ep_mps+0x12>
		return -EINVAL;
   1ac72:	f06f 0015 	mvn.w	r0, #21
   1ac76:	e7f8      	b.n	1ac6a <usb_dc_ep_mps+0x12>
   1ac78:	20005a28 	.word	0x20005a28

0001ac7c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1ac7c:	4b08      	ldr	r3, [pc, #32]	; (1aca0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ac7e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ac80:	1ac3      	subs	r3, r0, r3
{
   1ac82:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ac84:	4907      	ldr	r1, [pc, #28]	; (1aca4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ac86:	109b      	asrs	r3, r3, #2
{
   1ac88:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ac8a:	4359      	muls	r1, r3
   1ac8c:	4806      	ldr	r0, [pc, #24]	; (1aca8 <onoff_stop+0x2c>)
   1ac8e:	2240      	movs	r2, #64	; 0x40
   1ac90:	f008 fb2e 	bl	232f0 <stop>
	notify(mgr, res);
   1ac94:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ac96:	4601      	mov	r1, r0
	notify(mgr, res);
   1ac98:	4620      	mov	r0, r4
}
   1ac9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1ac9e:	4718      	bx	r3
   1aca0:	20005cc8 	.word	0x20005cc8
   1aca4:	b6db6db7 	.word	0xb6db6db7
   1aca8:	000248a4 	.word	0x000248a4

0001acac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1acac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1acae:	4c0c      	ldr	r4, [pc, #48]	; (1ace0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1acb0:	4a0c      	ldr	r2, [pc, #48]	; (1ace4 <onoff_start+0x38>)
   1acb2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1acb4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1acb6:	9300      	str	r3, [sp, #0]
{
   1acb8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1acba:	460b      	mov	r3, r1
   1acbc:	490a      	ldr	r1, [pc, #40]	; (1ace8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1acbe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1acc0:	4361      	muls	r1, r4
{
   1acc2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1acc4:	4809      	ldr	r0, [pc, #36]	; (1acec <onoff_start+0x40>)
   1acc6:	f008 fb3f 	bl	23348 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1acca:	1e01      	subs	r1, r0, #0
   1accc:	da05      	bge.n	1acda <onoff_start+0x2e>
		notify(mgr, err);
   1acce:	4630      	mov	r0, r6
   1acd0:	462b      	mov	r3, r5
	}
}
   1acd2:	b002      	add	sp, #8
   1acd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1acd8:	4718      	bx	r3
}
   1acda:	b002      	add	sp, #8
   1acdc:	bd70      	pop	{r4, r5, r6, pc}
   1acde:	bf00      	nop
   1ace0:	20005cc8 	.word	0x20005cc8
   1ace4:	000233b9 	.word	0x000233b9
   1ace8:	b6db6db7 	.word	0xb6db6db7
   1acec:	000248a4 	.word	0x000248a4

0001acf0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1acf0:	2200      	movs	r2, #0
{
   1acf2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1acf4:	2101      	movs	r1, #1
{
   1acf6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1acf8:	4610      	mov	r0, r2
   1acfa:	f7eb f871 	bl	5de0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1acfe:	2000      	movs	r0, #0
   1ad00:	f7eb f83c 	bl	5d7c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1ad04:	480f      	ldr	r0, [pc, #60]	; (1ad44 <clk_init+0x54>)
   1ad06:	f001 fa6b 	bl	1c1e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1ad0a:	4b0f      	ldr	r3, [pc, #60]	; (1ad48 <clk_init+0x58>)
   1ad0c:	4298      	cmp	r0, r3
   1ad0e:	d115      	bne.n	1ad3c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1ad10:	f001 fa76 	bl	1c200 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1ad14:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ad16:	490d      	ldr	r1, [pc, #52]	; (1ad4c <clk_init+0x5c>)
   1ad18:	4630      	mov	r0, r6
   1ad1a:	f004 fd76 	bl	1f80a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1ad1e:	2800      	cmp	r0, #0
   1ad20:	db0b      	blt.n	1ad3a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1ad22:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ad24:	4909      	ldr	r1, [pc, #36]	; (1ad4c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ad26:	2501      	movs	r5, #1
   1ad28:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ad2a:	f104 001c 	add.w	r0, r4, #28
   1ad2e:	f004 fd6c 	bl	1f80a <onoff_manager_init>
		if (err < 0) {
   1ad32:	2800      	cmp	r0, #0
   1ad34:	db01      	blt.n	1ad3a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ad36:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1ad38:	2000      	movs	r0, #0
}
   1ad3a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1ad3c:	f06f 0004 	mvn.w	r0, #4
   1ad40:	e7fb      	b.n	1ad3a <clk_init+0x4a>
   1ad42:	bf00      	nop
   1ad44:	0001ad85 	.word	0x0001ad85
   1ad48:	0bad0000 	.word	0x0bad0000
   1ad4c:	00025ff4 	.word	0x00025ff4

0001ad50 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1ad50:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ad52:	230c      	movs	r3, #12
   1ad54:	4809      	ldr	r0, [pc, #36]	; (1ad7c <clkstarted_handle.constprop.0+0x2c>)
   1ad56:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1ad58:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1ad5a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1ad5c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1ad60:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1ad62:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1ad64:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1ad66:	4418      	add	r0, r3
   1ad68:	f008 faaf 	bl	232ca <set_on_state>
	if (callback) {
   1ad6c:	b12d      	cbz	r5, 1ad7a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ad6e:	4632      	mov	r2, r6
   1ad70:	462b      	mov	r3, r5
   1ad72:	4803      	ldr	r0, [pc, #12]	; (1ad80 <clkstarted_handle.constprop.0+0x30>)
}
   1ad74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ad78:	4718      	bx	r3
}
   1ad7a:	bd70      	pop	{r4, r5, r6, pc}
   1ad7c:	20005cc8 	.word	0x20005cc8
   1ad80:	000248a4 	.word	0x000248a4

0001ad84 <clock_event_handler>:
	switch (event) {
   1ad84:	b110      	cbz	r0, 1ad8c <clock_event_handler+0x8>
   1ad86:	2801      	cmp	r0, #1
   1ad88:	d004      	beq.n	1ad94 <clock_event_handler+0x10>
   1ad8a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ad8c:	4b03      	ldr	r3, [pc, #12]	; (1ad9c <clock_event_handler+0x18>)
   1ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad90:	075b      	lsls	r3, r3, #29
   1ad92:	d101      	bne.n	1ad98 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ad94:	f7ff bfdc 	b.w	1ad50 <clkstarted_handle.constprop.0>
}
   1ad98:	4770      	bx	lr
   1ad9a:	bf00      	nop
   1ad9c:	20005cc8 	.word	0x20005cc8

0001ada0 <generic_hfclk_start>:
{
   1ada0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ada2:	f04f 0320 	mov.w	r3, #32
   1ada6:	f3ef 8111 	mrs	r1, BASEPRI
   1adaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1adae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1adb2:	4a12      	ldr	r2, [pc, #72]	; (1adfc <generic_hfclk_start+0x5c>)
   1adb4:	6813      	ldr	r3, [r2, #0]
   1adb6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1adba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1adbe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1adc0:	d00c      	beq.n	1addc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1adc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1adc6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1adca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1adce:	f013 0301 	ands.w	r3, r3, #1
   1add2:	d003      	beq.n	1addc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1add4:	480a      	ldr	r0, [pc, #40]	; (1ae00 <generic_hfclk_start+0x60>)
   1add6:	f008 fa78 	bl	232ca <set_on_state>
			already_started = true;
   1adda:	2301      	movs	r3, #1
	__asm__ volatile(
   1addc:	f381 8811 	msr	BASEPRI, r1
   1ade0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1ade4:	b123      	cbz	r3, 1adf0 <generic_hfclk_start+0x50>
}
   1ade6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1adea:	2000      	movs	r0, #0
   1adec:	f7ff bfb0 	b.w	1ad50 <clkstarted_handle.constprop.0>
}
   1adf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1adf4:	2001      	movs	r0, #1
   1adf6:	f008 bd40 	b.w	2387a <nrfx_clock_start>
   1adfa:	bf00      	nop
   1adfc:	20005d18 	.word	0x20005d18
   1ae00:	20005d08 	.word	0x20005d08

0001ae04 <api_blocking_start>:
{
   1ae04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ae06:	2200      	movs	r2, #0
   1ae08:	2301      	movs	r3, #1
   1ae0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ae0e:	ab04      	add	r3, sp, #16
   1ae10:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ae14:	4a09      	ldr	r2, [pc, #36]	; (1ae3c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ae16:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ae1a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ae1c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ae20:	f008 fac3 	bl	233aa <api_start>
	if (err < 0) {
   1ae24:	2800      	cmp	r0, #0
   1ae26:	db05      	blt.n	1ae34 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1ae28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ae2c:	2300      	movs	r3, #0
   1ae2e:	4668      	mov	r0, sp
   1ae30:	f003 fb9a 	bl	1e568 <z_impl_k_sem_take>
}
   1ae34:	b007      	add	sp, #28
   1ae36:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae3a:	bf00      	nop
   1ae3c:	000233d7 	.word	0x000233d7

0001ae40 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae40:	4b09      	ldr	r3, [pc, #36]	; (1ae68 <generic_hfclk_stop+0x28>)
   1ae42:	f3bf 8f5b 	dmb	ish
   1ae46:	e853 2f00 	ldrex	r2, [r3]
   1ae4a:	f022 0102 	bic.w	r1, r2, #2
   1ae4e:	e843 1000 	strex	r0, r1, [r3]
   1ae52:	2800      	cmp	r0, #0
   1ae54:	d1f7      	bne.n	1ae46 <generic_hfclk_stop+0x6>
   1ae56:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1ae5a:	07d3      	lsls	r3, r2, #31
   1ae5c:	d402      	bmi.n	1ae64 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ae5e:	2001      	movs	r0, #1
   1ae60:	f001 b9dc 	b.w	1c21c <nrfx_clock_stop>
}
   1ae64:	4770      	bx	lr
   1ae66:	bf00      	nop
   1ae68:	20005d18 	.word	0x20005d18

0001ae6c <z_nrf_clock_control_get_onoff>:
}
   1ae6c:	4a02      	ldr	r2, [pc, #8]	; (1ae78 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1ae6e:	b2c3      	uxtb	r3, r0
}
   1ae70:	201c      	movs	r0, #28
   1ae72:	fb03 2000 	mla	r0, r3, r0, r2
   1ae76:	4770      	bx	lr
   1ae78:	20005cc8 	.word	0x20005cc8

0001ae7c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ae7c:	4b09      	ldr	r3, [pc, #36]	; (1aea4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   1ae7e:	f3bf 8f5b 	dmb	ish
   1ae82:	e853 2f00 	ldrex	r2, [r3]
   1ae86:	f042 0101 	orr.w	r1, r2, #1
   1ae8a:	e843 1000 	strex	r0, r1, [r3]
   1ae8e:	2800      	cmp	r0, #0
   1ae90:	d1f7      	bne.n	1ae82 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1ae92:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1ae96:	0793      	lsls	r3, r2, #30
   1ae98:	d402      	bmi.n	1aea0 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ae9a:	2001      	movs	r0, #1
   1ae9c:	f008 bced 	b.w	2387a <nrfx_clock_start>
}
   1aea0:	4770      	bx	lr
   1aea2:	bf00      	nop
   1aea4:	20005d18 	.word	0x20005d18

0001aea8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aea8:	4b09      	ldr	r3, [pc, #36]	; (1aed0 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   1aeaa:	f3bf 8f5b 	dmb	ish
   1aeae:	e853 2f00 	ldrex	r2, [r3]
   1aeb2:	f022 0101 	bic.w	r1, r2, #1
   1aeb6:	e843 1000 	strex	r0, r1, [r3]
   1aeba:	2800      	cmp	r0, #0
   1aebc:	d1f7      	bne.n	1aeae <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1aebe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1aec2:	0793      	lsls	r3, r2, #30
   1aec4:	d402      	bmi.n	1aecc <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1aec6:	2001      	movs	r0, #1
   1aec8:	f001 b9a8 	b.w	1c21c <nrfx_clock_stop>
}
   1aecc:	4770      	bx	lr
   1aece:	bf00      	nop
   1aed0:	20005d18 	.word	0x20005d18

0001aed4 <z_nrf_clock_control_lf_on>:
{
   1aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aed8:	4939      	ldr	r1, [pc, #228]	; (1afc0 <z_nrf_clock_control_lf_on+0xec>)
   1aeda:	f3bf 8f5b 	dmb	ish
   1aede:	4607      	mov	r7, r0
   1aee0:	2201      	movs	r2, #1
   1aee2:	e851 3f00 	ldrex	r3, [r1]
   1aee6:	e841 2000 	strex	r0, r2, [r1]
   1aeea:	2800      	cmp	r0, #0
   1aeec:	d1f9      	bne.n	1aee2 <z_nrf_clock_control_lf_on+0xe>
   1aeee:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1aef2:	b933      	cbnz	r3, 1af02 <z_nrf_clock_control_lf_on+0x2e>
   1aef4:	4933      	ldr	r1, [pc, #204]	; (1afc4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   1aef6:	4834      	ldr	r0, [pc, #208]	; (1afc8 <z_nrf_clock_control_lf_on+0xf4>)
   1aef8:	604b      	str	r3, [r1, #4]
   1aefa:	60cb      	str	r3, [r1, #12]
   1aefc:	608a      	str	r2, [r1, #8]
   1aefe:	f004 fc97 	bl	1f830 <onoff_request>
	switch (start_mode) {
   1af02:	1e7b      	subs	r3, r7, #1
   1af04:	2b01      	cmp	r3, #1
   1af06:	d82f      	bhi.n	1af68 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1af08:	2f01      	cmp	r7, #1
   1af0a:	d107      	bne.n	1af1c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1af0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1af10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1af14:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1af18:	2b01      	cmp	r3, #1
   1af1a:	d025      	beq.n	1af68 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1af1c:	f008 ffd7 	bl	23ece <k_is_in_isr>
   1af20:	4604      	mov	r4, r0
   1af22:	b918      	cbnz	r0, 1af2c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1af24:	4b29      	ldr	r3, [pc, #164]	; (1afcc <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   1af26:	781b      	ldrb	r3, [r3, #0]
   1af28:	2b00      	cmp	r3, #0
   1af2a:	d141      	bne.n	1afb0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   1af2c:	f04f 0320 	mov.w	r3, #32
   1af30:	f3ef 8611 	mrs	r6, BASEPRI
   1af34:	f383 8812 	msr	BASEPRI_MAX, r3
   1af38:	f3bf 8f6f 	isb	sy
   1af3c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1af3e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1afd0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1af42:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1af46:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1af4a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1af4e:	03d2      	lsls	r2, r2, #15
   1af50:	d50c      	bpl.n	1af6c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1af52:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1af56:	2b01      	cmp	r3, #1
   1af58:	d001      	beq.n	1af5e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1af5a:	2f01      	cmp	r7, #1
   1af5c:	d106      	bne.n	1af6c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1af5e:	b30c      	cbz	r4, 1afa4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1af60:	f386 8811 	msr	BASEPRI, r6
   1af64:	f3bf 8f6f 	isb	sy
}
   1af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1af6c:	b1ac      	cbz	r4, 1af9a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1af6e:	4630      	mov	r0, r6
   1af70:	f7ea fefa 	bl	5d68 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1af74:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1af78:	2b00      	cmp	r3, #0
   1af7a:	d1e4      	bne.n	1af46 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1af7c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1af80:	2a00      	cmp	r2, #0
   1af82:	d0e0      	beq.n	1af46 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1af84:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1af88:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1af8c:	2301      	movs	r3, #1
   1af8e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1af92:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1af96:	60ab      	str	r3, [r5, #8]
}
   1af98:	e7d5      	b.n	1af46 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1af9a:	2100      	movs	r1, #0
   1af9c:	2021      	movs	r0, #33	; 0x21
   1af9e:	f003 ffa1 	bl	1eee4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1afa2:	e7e7      	b.n	1af74 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   1afa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1afa8:	2202      	movs	r2, #2
   1afaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1afae:	e7db      	b.n	1af68 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1afb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1afb4:	2202      	movs	r2, #2
   1afb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1afba:	4606      	mov	r6, r0
}
   1afbc:	e7bf      	b.n	1af3e <z_nrf_clock_control_lf_on+0x6a>
   1afbe:	bf00      	nop
   1afc0:	20005d1c 	.word	0x20005d1c
   1afc4:	20005cb8 	.word	0x20005cb8
   1afc8:	20005ce4 	.word	0x20005ce4
   1afcc:	20006132 	.word	0x20006132
   1afd0:	e000e100 	.word	0xe000e100

0001afd4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1afd4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1afd6:	4b08      	ldr	r3, [pc, #32]	; (1aff8 <uart_console_init+0x24>)
   1afd8:	4808      	ldr	r0, [pc, #32]	; (1affc <uart_console_init+0x28>)
   1afda:	6018      	str	r0, [r3, #0]
   1afdc:	f008 feb7 	bl	23d4e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1afe0:	b138      	cbz	r0, 1aff2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1afe2:	4807      	ldr	r0, [pc, #28]	; (1b000 <uart_console_init+0x2c>)
   1afe4:	f7eb f9ac 	bl	6340 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1afe8:	4805      	ldr	r0, [pc, #20]	; (1b000 <uart_console_init+0x2c>)
   1afea:	f7e8 fca9 	bl	3940 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1afee:	2000      	movs	r0, #0
}
   1aff0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1aff2:	f06f 0012 	mvn.w	r0, #18
   1aff6:	e7fb      	b.n	1aff0 <uart_console_init+0x1c>
   1aff8:	20005d20 	.word	0x20005d20
   1affc:	00024904 	.word	0x00024904
   1b000:	0001b005 	.word	0x0001b005

0001b004 <console_out>:
	if ('\n' == c) {
   1b004:	280a      	cmp	r0, #10
{
   1b006:	b538      	push	{r3, r4, r5, lr}
   1b008:	4d07      	ldr	r5, [pc, #28]	; (1b028 <console_out+0x24>)
   1b00a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1b00c:	d104      	bne.n	1b018 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1b00e:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1b010:	6883      	ldr	r3, [r0, #8]
   1b012:	210d      	movs	r1, #13
   1b014:	685b      	ldr	r3, [r3, #4]
   1b016:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1b018:	6828      	ldr	r0, [r5, #0]
   1b01a:	6883      	ldr	r3, [r0, #8]
   1b01c:	b2e1      	uxtb	r1, r4
   1b01e:	685b      	ldr	r3, [r3, #4]
   1b020:	4798      	blx	r3
}
   1b022:	4620      	mov	r0, r4
   1b024:	bd38      	pop	{r3, r4, r5, pc}
   1b026:	bf00      	nop
   1b028:	20005d20 	.word	0x20005d20

0001b02c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1b02c:	b530      	push	{r4, r5, lr}
	return port->config;
   1b02e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b030:	7b04      	ldrb	r4, [r0, #12]
   1b032:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1b036:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b03a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1b03e:	b085      	sub	sp, #20
   1b040:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b044:	d104      	bne.n	1b050 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1b046:	4628      	mov	r0, r5
   1b048:	f001 fb96 	bl	1c778 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1b04c:	2000      	movs	r0, #0
   1b04e:	e032      	b.n	1b0b6 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b050:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b054:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b058:	d12f      	bne.n	1b0ba <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1b05e:	bf0c      	ite	eq
   1b060:	2304      	moveq	r3, #4
   1b062:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b064:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b068:	6883      	ldr	r3, [r0, #8]
   1b06a:	fa23 f101 	lsr.w	r1, r3, r1
   1b06e:	07c9      	lsls	r1, r1, #31
   1b070:	d42f      	bmi.n	1b0d2 <gpio_nrfx_pin_interrupt_configure+0xa6>
   1b072:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1b076:	d12c      	bne.n	1b0d2 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1b078:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1b07a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1b07c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1b080:	4a1c      	ldr	r2, [pc, #112]	; (1b0f4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b082:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1b086:	bf18      	it	ne
   1b088:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b090:	07db      	lsls	r3, r3, #31
   1b092:	d41e      	bmi.n	1b0d2 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b094:	f10d 0407 	add.w	r4, sp, #7
   1b098:	4621      	mov	r1, r4
   1b09a:	4628      	mov	r0, r5
   1b09c:	f001 fad0 	bl	1c640 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b0a0:	4b15      	ldr	r3, [pc, #84]	; (1b0f8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1b0a2:	4298      	cmp	r0, r3
   1b0a4:	d114      	bne.n	1b0d0 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f001 fb18 	bl	1c6dc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b0ac:	4b13      	ldr	r3, [pc, #76]	; (1b0fc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1b0ae:	4298      	cmp	r0, r3
   1b0b0:	d00e      	beq.n	1b0d0 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   1b0b2:	f06f 000b 	mvn.w	r0, #11
}
   1b0b6:	b005      	add	sp, #20
   1b0b8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b0ba:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1b0be:	d005      	beq.n	1b0cc <gpio_nrfx_pin_interrupt_configure+0xa0>
   1b0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1b0c4:	bf0c      	ite	eq
   1b0c6:	2302      	moveq	r3, #2
   1b0c8:	2301      	movne	r3, #1
   1b0ca:	e7cb      	b.n	1b064 <gpio_nrfx_pin_interrupt_configure+0x38>
   1b0cc:	2303      	movs	r3, #3
   1b0ce:	e7c9      	b.n	1b064 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1b0d0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b0d2:	2300      	movs	r3, #0
   1b0d4:	4619      	mov	r1, r3
   1b0d6:	aa02      	add	r2, sp, #8
   1b0d8:	4628      	mov	r0, r5
   1b0da:	f001 f98b 	bl	1c3f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b0de:	4b07      	ldr	r3, [pc, #28]	; (1b0fc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1b0e0:	4298      	cmp	r0, r3
   1b0e2:	d104      	bne.n	1b0ee <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b0e4:	2101      	movs	r1, #1
   1b0e6:	4628      	mov	r0, r5
   1b0e8:	f001 fafe 	bl	1c6e8 <nrfx_gpiote_trigger_enable>
   1b0ec:	e7ae      	b.n	1b04c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1b0ee:	f06f 0004 	mvn.w	r0, #4
   1b0f2:	e7e0      	b.n	1b0b6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   1b0f4:	50000300 	.word	0x50000300
   1b0f8:	0bad0004 	.word	0x0bad0004
   1b0fc:	0bad0000 	.word	0x0bad0000

0001b100 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b100:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b102:	f001 fadb 	bl	1c6bc <nrfx_gpiote_is_init>
   1b106:	4604      	mov	r4, r0
   1b108:	b968      	cbnz	r0, 1b126 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b10a:	f001 faaf 	bl	1c66c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b10e:	4b08      	ldr	r3, [pc, #32]	; (1b130 <gpio_nrfx_init+0x30>)
   1b110:	4298      	cmp	r0, r3
   1b112:	d10a      	bne.n	1b12a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b114:	4807      	ldr	r0, [pc, #28]	; (1b134 <gpio_nrfx_init+0x34>)
   1b116:	4621      	mov	r1, r4
   1b118:	f001 fa8c 	bl	1c634 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b11c:	4622      	mov	r2, r4
   1b11e:	2105      	movs	r1, #5
   1b120:	2006      	movs	r0, #6
   1b122:	f7ea fe5d 	bl	5de0 <z_arm_irq_priority_set>
		return 0;
   1b126:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b128:	bd10      	pop	{r4, pc}
		return -EIO;
   1b12a:	f06f 0004 	mvn.w	r0, #4
   1b12e:	e7fb      	b.n	1b128 <gpio_nrfx_init+0x28>
   1b130:	0bad0000 	.word	0x0bad0000
   1b134:	0001b139 	.word	0x0001b139

0001b138 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b138:	0942      	lsrs	r2, r0, #5
{
   1b13a:	b570      	push	{r4, r5, r6, lr}
   1b13c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b13e:	d002      	beq.n	1b146 <nrfx_gpio_handler+0xe>
   1b140:	2a01      	cmp	r2, #1
   1b142:	d015      	beq.n	1b170 <nrfx_gpio_handler+0x38>
}
   1b144:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b146:	4e0b      	ldr	r6, [pc, #44]	; (1b174 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1b148:	6932      	ldr	r2, [r6, #16]
   1b14a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b14c:	2900      	cmp	r1, #0
   1b14e:	d0f9      	beq.n	1b144 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1b150:	f003 031f 	and.w	r3, r3, #31
   1b154:	2501      	movs	r5, #1
   1b156:	680c      	ldr	r4, [r1, #0]
   1b158:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1b15a:	688a      	ldr	r2, [r1, #8]
   1b15c:	402a      	ands	r2, r5
   1b15e:	d002      	beq.n	1b166 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b160:	684b      	ldr	r3, [r1, #4]
   1b162:	4630      	mov	r0, r6
   1b164:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b166:	2c00      	cmp	r4, #0
   1b168:	d0ec      	beq.n	1b144 <nrfx_gpio_handler+0xc>
   1b16a:	4621      	mov	r1, r4
   1b16c:	6824      	ldr	r4, [r4, #0]
   1b16e:	e7f4      	b.n	1b15a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b170:	4e01      	ldr	r6, [pc, #4]	; (1b178 <nrfx_gpio_handler+0x40>)
   1b172:	e7e9      	b.n	1b148 <nrfx_gpio_handler+0x10>
   1b174:	000248bc 	.word	0x000248bc
   1b178:	000248d4 	.word	0x000248d4

0001b17c <gpio_nrfx_pin_configure>:
{
   1b17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1b180:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b182:	7b3b      	ldrb	r3, [r7, #12]
   1b184:	f001 051f 	and.w	r5, r1, #31
{
   1b188:	b085      	sub	sp, #20
   1b18a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b18c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1b190:	4614      	mov	r4, r2
   1b192:	b9ca      	cbnz	r2, 1b1c8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b194:	a902      	add	r1, sp, #8
   1b196:	4628      	mov	r0, r5
   1b198:	f001 fa52 	bl	1c640 <nrfx_gpiote_channel_get>
   1b19c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1b19e:	4628      	mov	r0, r5
   1b1a0:	f001 fb12 	bl	1c7c8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1b1a4:	4b48      	ldr	r3, [pc, #288]	; (1b2c8 <gpio_nrfx_pin_configure+0x14c>)
   1b1a6:	4298      	cmp	r0, r3
   1b1a8:	d004      	beq.n	1b1b4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1b1aa:	f06f 0004 	mvn.w	r0, #4
}
   1b1ae:	b005      	add	sp, #20
   1b1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1b1b4:	4284      	cmp	r4, r0
   1b1b6:	d105      	bne.n	1b1c4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1b1b8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b1bc:	f001 fa88 	bl	1c6d0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1b1c0:	42a0      	cmp	r0, r4
   1b1c2:	d1f2      	bne.n	1b1aa <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b1c4:	2000      	movs	r0, #0
   1b1c6:	e7f2      	b.n	1b1ae <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1c8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b1cc:	f10d 0103 	add.w	r1, sp, #3
   1b1d0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1d2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b1d6:	f001 fa33 	bl	1c640 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b1da:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b1dc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b1de:	aa02      	add	r2, sp, #8
   1b1e0:	4649      	mov	r1, r9
   1b1e2:	4628      	mov	r0, r5
   1b1e4:	f001 f906 	bl	1c3f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b1e8:	4b37      	ldr	r3, [pc, #220]	; (1b2c8 <gpio_nrfx_pin_configure+0x14c>)
   1b1ea:	4298      	cmp	r0, r3
   1b1ec:	d002      	beq.n	1b1f4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b1ee:	f06f 0015 	mvn.w	r0, #21
   1b1f2:	e7dc      	b.n	1b1ae <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1b1f4:	4580      	cmp	r8, r0
   1b1f6:	d103      	bne.n	1b200 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1b1f8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b1fc:	f001 fa68 	bl	1c6d0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1b200:	05a3      	lsls	r3, r4, #22
   1b202:	d54e      	bpl.n	1b2a2 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b204:	4b31      	ldr	r3, [pc, #196]	; (1b2cc <gpio_nrfx_pin_configure+0x150>)
   1b206:	4a32      	ldr	r2, [pc, #200]	; (1b2d0 <gpio_nrfx_pin_configure+0x154>)
   1b208:	4023      	ands	r3, r4
   1b20a:	4293      	cmp	r3, r2
   1b20c:	d03a      	beq.n	1b284 <gpio_nrfx_pin_configure+0x108>
   1b20e:	d80c      	bhi.n	1b22a <gpio_nrfx_pin_configure+0xae>
   1b210:	2b06      	cmp	r3, #6
   1b212:	d014      	beq.n	1b23e <gpio_nrfx_pin_configure+0xc2>
   1b214:	d804      	bhi.n	1b220 <gpio_nrfx_pin_configure+0xa4>
   1b216:	b193      	cbz	r3, 1b23e <gpio_nrfx_pin_configure+0xc2>
   1b218:	2b02      	cmp	r3, #2
   1b21a:	d1e8      	bne.n	1b1ee <gpio_nrfx_pin_configure+0x72>
   1b21c:	2304      	movs	r3, #4
   1b21e:	e00e      	b.n	1b23e <gpio_nrfx_pin_configure+0xc2>
   1b220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b224:	d1e3      	bne.n	1b1ee <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1b226:	2301      	movs	r3, #1
   1b228:	e009      	b.n	1b23e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b22a:	4a2a      	ldr	r2, [pc, #168]	; (1b2d4 <gpio_nrfx_pin_configure+0x158>)
   1b22c:	4293      	cmp	r3, r2
   1b22e:	d02b      	beq.n	1b288 <gpio_nrfx_pin_configure+0x10c>
   1b230:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1b234:	d02a      	beq.n	1b28c <gpio_nrfx_pin_configure+0x110>
   1b236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1b23a:	d1d8      	bne.n	1b1ee <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1b23c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1b23e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b242:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1b246:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1b24a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b24c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1b250:	bf54      	ite	pl
   1b252:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1b256:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b258:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1b25a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b25e:	d517      	bpl.n	1b290 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b260:	687b      	ldr	r3, [r7, #4]
   1b262:	2101      	movs	r1, #1
   1b264:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1b268:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b26c:	2200      	movs	r2, #0
   1b26e:	a901      	add	r1, sp, #4
   1b270:	4628      	mov	r0, r5
   1b272:	f001 f96d 	bl	1c550 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b276:	4b14      	ldr	r3, [pc, #80]	; (1b2c8 <gpio_nrfx_pin_configure+0x14c>)
   1b278:	4298      	cmp	r0, r3
   1b27a:	bf14      	ite	ne
   1b27c:	f06f 0015 	mvnne.w	r0, #21
   1b280:	2000      	moveq	r0, #0
   1b282:	e794      	b.n	1b1ae <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1b284:	2307      	movs	r3, #7
   1b286:	e7da      	b.n	1b23e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1b288:	2305      	movs	r3, #5
   1b28a:	e7d8      	b.n	1b23e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1b28c:	2303      	movs	r3, #3
   1b28e:	e7d6      	b.n	1b23e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b290:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b292:	bf41      	itttt	mi
   1b294:	687b      	ldrmi	r3, [r7, #4]
   1b296:	2101      	movmi	r1, #1
   1b298:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1b29c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1b2a0:	e7e4      	b.n	1b26c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1b2a2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2a4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1b2a8:	bf54      	ite	pl
   1b2aa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1b2ae:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2b0:	461a      	mov	r2, r3
   1b2b2:	a901      	add	r1, sp, #4
   1b2b4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1b2b6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2ba:	f001 f89b 	bl	1c3f4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b2be:	4b02      	ldr	r3, [pc, #8]	; (1b2c8 <gpio_nrfx_pin_configure+0x14c>)
   1b2c0:	4298      	cmp	r0, r3
   1b2c2:	f43f af7f 	beq.w	1b1c4 <gpio_nrfx_pin_configure+0x48>
   1b2c6:	e792      	b.n	1b1ee <gpio_nrfx_pin_configure+0x72>
   1b2c8:	0bad0000 	.word	0x0bad0000
   1b2cc:	00f00006 	.word	0x00f00006
   1b2d0:	00100006 	.word	0x00100006
   1b2d4:	00400002 	.word	0x00400002

0001b2d8 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   1b2d8:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
   1b2da:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1b2dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1b2e0:	f002 fd88 	bl	1ddf4 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1b2e4:	4b03      	ldr	r3, [pc, #12]	; (1b2f4 <i2c_nrfx_twi_recover_bus+0x1c>)
   1b2e6:	4298      	cmp	r0, r3
}
   1b2e8:	bf14      	ite	ne
   1b2ea:	f06f 000f 	mvnne.w	r0, #15
   1b2ee:	2000      	moveq	r0, #0
   1b2f0:	bd08      	pop	{r3, pc}
   1b2f2:	bf00      	nop
   1b2f4:	0bad0000 	.word	0x0bad0000

0001b2f8 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1b2f8:	b510      	push	{r4, lr}
   1b2fa:	4604      	mov	r4, r0
   1b2fc:	2200      	movs	r2, #0
   1b2fe:	2101      	movs	r1, #1
   1b300:	2003      	movs	r0, #3
   1b302:	f7ea fd6d 	bl	5de0 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
   1b306:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   1b308:	6923      	ldr	r3, [r4, #16]
   1b30a:	4a06      	ldr	r2, [pc, #24]	; (1b324 <twi_0_init+0x2c>)
   1b30c:	f100 0108 	add.w	r1, r0, #8
   1b310:	f001 fcda 	bl	1ccc8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1b314:	4b04      	ldr	r3, [pc, #16]	; (1b328 <twi_0_init+0x30>)
		return -EBUSY;
   1b316:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
   1b318:	bf14      	ite	ne
   1b31a:	f06f 000f 	mvnne.w	r0, #15
   1b31e:	2000      	moveq	r0, #0
   1b320:	bd10      	pop	{r4, pc}
   1b322:	bf00      	nop
   1b324:	0001b32d 	.word	0x0001b32d
   1b328:	0bad0000 	.word	0x0bad0000

0001b32c <event_handler>:
	switch (p_event->type) {
   1b32c:	7803      	ldrb	r3, [r0, #0]
   1b32e:	2b01      	cmp	r3, #1
   1b330:	d008      	beq.n	1b344 <event_handler+0x18>
   1b332:	2b02      	cmp	r3, #2
   1b334:	d008      	beq.n	1b348 <event_handler+0x1c>
   1b336:	b94b      	cbnz	r3, 1b34c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1b338:	4b05      	ldr	r3, [pc, #20]	; (1b350 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b33a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1b33c:	f101 0018 	add.w	r0, r1, #24
   1b340:	f003 b8ec 	b.w	1e51c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1b344:	4b03      	ldr	r3, [pc, #12]	; (1b354 <event_handler+0x28>)
   1b346:	e7f8      	b.n	1b33a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1b348:	4b03      	ldr	r3, [pc, #12]	; (1b358 <event_handler+0x2c>)
   1b34a:	e7f6      	b.n	1b33a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1b34c:	4b03      	ldr	r3, [pc, #12]	; (1b35c <event_handler+0x30>)
   1b34e:	e7f4      	b.n	1b33a <event_handler+0xe>
   1b350:	0bad0000 	.word	0x0bad0000
   1b354:	0bae0001 	.word	0x0bae0001
   1b358:	0bae0002 	.word	0x0bae0002
   1b35c:	0bad0001 	.word	0x0bad0001

0001b360 <twi_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
   1b360:	b510      	push	{r4, lr}
   1b362:	4604      	mov	r4, r0
   1b364:	2200      	movs	r2, #0
   1b366:	2101      	movs	r1, #1
   1b368:	2004      	movs	r0, #4
   1b36a:	f7ea fd39 	bl	5de0 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
   1b36e:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   1b370:	6923      	ldr	r3, [r4, #16]
   1b372:	4a06      	ldr	r2, [pc, #24]	; (1b38c <twi_1_init+0x2c>)
   1b374:	f100 0108 	add.w	r1, r0, #8
   1b378:	f001 fca6 	bl	1ccc8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1b37c:	4b04      	ldr	r3, [pc, #16]	; (1b390 <twi_1_init+0x30>)
		return -EBUSY;
   1b37e:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(1);
   1b380:	bf14      	ite	ne
   1b382:	f06f 000f 	mvnne.w	r0, #15
   1b386:	2000      	moveq	r0, #0
   1b388:	bd10      	pop	{r4, pc}
   1b38a:	bf00      	nop
   1b38c:	0001b32d 	.word	0x0001b32d
   1b390:	0bad0000 	.word	0x0bad0000

0001b394 <i2c_nrfx_twi_transfer>:
{
   1b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b398:	460c      	mov	r4, r1
   1b39a:	b089      	sub	sp, #36	; 0x24
   1b39c:	4617      	mov	r7, r2
   1b39e:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
   1b3a0:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   1b3a2:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   1b3a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b3ac:	4630      	mov	r0, r6
   1b3ae:	f003 f8db 	bl	1e568 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   1b3b2:	f106 0a18 	add.w	sl, r6, #24
   1b3b6:	2200      	movs	r2, #0
   1b3b8:	2300      	movs	r3, #0
   1b3ba:	4650      	mov	r0, sl
   1b3bc:	f003 f8d4 	bl	1e568 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   1b3c0:	4628      	mov	r0, r5
   1b3c2:	f001 fcdf 	bl	1cd84 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
   1b3c6:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 1b484 <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
   1b3ca:	f04f 0800 	mov.w	r8, #0
   1b3ce:	45b8      	cmp	r8, r7
   1b3d0:	d301      	bcc.n	1b3d6 <i2c_nrfx_twi_transfer+0x42>
   1b3d2:	2400      	movs	r4, #0
   1b3d4:	e02b      	b.n	1b42e <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1b3d6:	7a23      	ldrb	r3, [r4, #8]
   1b3d8:	9301      	str	r3, [sp, #4]
   1b3da:	f013 0108 	ands.w	r1, r3, #8
   1b3de:	d14b      	bne.n	1b478 <i2c_nrfx_twi_transfer+0xe4>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b3e0:	2214      	movs	r2, #20
   1b3e2:	a803      	add	r0, sp, #12
   1b3e4:	9100      	str	r1, [sp, #0]
   1b3e6:	f005 f9aa 	bl	2073e <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1b3ea:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b3ec:	6860      	ldr	r0, [r4, #4]
   1b3ee:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1b3f0:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b3f4:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1b3f6:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b3f8:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1b3fc:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1b400:	f88d 900d 	strb.w	r9, [sp, #13]
   1b404:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1b406:	d11c      	bne.n	1b442 <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
   1b408:	1e7b      	subs	r3, r7, #1
   1b40a:	4543      	cmp	r3, r8
   1b40c:	d902      	bls.n	1b414 <i2c_nrfx_twi_transfer+0x80>
   1b40e:	7d23      	ldrb	r3, [r4, #20]
   1b410:	075b      	lsls	r3, r3, #29
   1b412:	d518      	bpl.n	1b446 <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1b414:	bb82      	cbnz	r2, 1b478 <i2c_nrfx_twi_transfer+0xe4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1b416:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   1b418:	a903      	add	r1, sp, #12
   1b41a:	4628      	mov	r0, r5
   1b41c:	f001 fce0 	bl	1cde0 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1b420:	4558      	cmp	r0, fp
   1b422:	d012      	beq.n	1b44a <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
   1b424:	4b18      	ldr	r3, [pc, #96]	; (1b488 <i2c_nrfx_twi_transfer+0xf4>)
   1b426:	4298      	cmp	r0, r3
   1b428:	d029      	beq.n	1b47e <i2c_nrfx_twi_transfer+0xea>
			ret = -EIO;
   1b42a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
   1b42e:	4628      	mov	r0, r5
   1b430:	f001 fcb8 	bl	1cda4 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   1b434:	4630      	mov	r0, r6
   1b436:	f003 f871 	bl	1e51c <z_impl_k_sem_give>
}
   1b43a:	4620      	mov	r0, r4
   1b43c:	b009      	add	sp, #36	; 0x24
   1b43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1b442:	460a      	mov	r2, r1
   1b444:	e7e8      	b.n	1b418 <i2c_nrfx_twi_transfer+0x84>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1b446:	2240      	movs	r2, #64	; 0x40
   1b448:	e7e6      	b.n	1b418 <i2c_nrfx_twi_transfer+0x84>
	return z_impl_k_sem_take(sem, timeout);
   1b44a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b44e:	2300      	movs	r3, #0
   1b450:	4650      	mov	r0, sl
   1b452:	f003 f889 	bl	1e568 <z_impl_k_sem_take>
		if (ret != 0) {
   1b456:	b138      	cbz	r0, 1b468 <i2c_nrfx_twi_transfer+0xd4>
			nrfx_twi_disable(&config->twi);
   1b458:	4628      	mov	r0, r5
   1b45a:	f001 fca3 	bl	1cda4 <nrfx_twi_disable>
   1b45e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   1b462:	f002 fcc7 	bl	1ddf4 <nrfx_twi_twim_bus_recover>
   1b466:	e7e0      	b.n	1b42a <i2c_nrfx_twi_transfer+0x96>
		res = data->res;
   1b468:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1b46a:	455b      	cmp	r3, fp
   1b46c:	f104 040c 	add.w	r4, r4, #12
   1b470:	d1db      	bne.n	1b42a <i2c_nrfx_twi_transfer+0x96>
	for (size_t i = 0; i < num_msgs; i++) {
   1b472:	f108 0801 	add.w	r8, r8, #1
   1b476:	e7aa      	b.n	1b3ce <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
   1b478:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1b47c:	e7d7      	b.n	1b42e <i2c_nrfx_twi_transfer+0x9a>
				ret = -EBUSY;
   1b47e:	f06f 040f 	mvn.w	r4, #15
   1b482:	e7d4      	b.n	1b42e <i2c_nrfx_twi_transfer+0x9a>
   1b484:	0bad0000 	.word	0x0bad0000
   1b488:	0bad000b 	.word	0x0bad000b

0001b48c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1b48c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1b48e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b492:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1b494:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1b496:	6002      	str	r2, [r0, #0]
}
   1b498:	4802      	ldr	r0, [pc, #8]	; (1b4a4 <nrf_gpio_pin_port_decode+0x18>)
   1b49a:	bf18      	it	ne
   1b49c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1b4a0:	4770      	bx	lr
   1b4a2:	bf00      	nop
   1b4a4:	50000300 	.word	0x50000300

0001b4a8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1b4aa:	794b      	ldrb	r3, [r1, #5]
   1b4ac:	2b01      	cmp	r3, #1
   1b4ae:	d026      	beq.n	1b4fe <uarte_nrfx_configure+0x56>
   1b4b0:	2b03      	cmp	r3, #3
   1b4b2:	d121      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b4b4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b4b6:	798b      	ldrb	r3, [r1, #6]
   1b4b8:	2b03      	cmp	r3, #3
   1b4ba:	d11d      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1b4bc:	79cc      	ldrb	r4, [r1, #7]
   1b4be:	b10c      	cbz	r4, 1b4c4 <uarte_nrfx_configure+0x1c>
   1b4c0:	2c01      	cmp	r4, #1
   1b4c2:	d119      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1b4c4:	790a      	ldrb	r2, [r1, #4]
   1b4c6:	b112      	cbz	r2, 1b4ce <uarte_nrfx_configure+0x26>
   1b4c8:	2a02      	cmp	r2, #2
   1b4ca:	d115      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b4cc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b4ce:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1b4d0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1b4d2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1b4d6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1b4d8:	d065      	beq.n	1b5a6 <uarte_nrfx_configure+0xfe>
   1b4da:	d82d      	bhi.n	1b538 <uarte_nrfx_configure+0x90>
   1b4dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b4e0:	d064      	beq.n	1b5ac <uarte_nrfx_configure+0x104>
   1b4e2:	d816      	bhi.n	1b512 <uarte_nrfx_configure+0x6a>
   1b4e4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b4e8:	d062      	beq.n	1b5b0 <uarte_nrfx_configure+0x108>
   1b4ea:	d80a      	bhi.n	1b502 <uarte_nrfx_configure+0x5a>
   1b4ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b4f0:	d061      	beq.n	1b5b6 <uarte_nrfx_configure+0x10e>
   1b4f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b4f6:	d061      	beq.n	1b5bc <uarte_nrfx_configure+0x114>
   1b4f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b4fc:	e052      	b.n	1b5a4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1b4fe:	2600      	movs	r6, #0
   1b500:	e7d9      	b.n	1b4b6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1b502:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b506:	d05c      	beq.n	1b5c2 <uarte_nrfx_configure+0x11a>
   1b508:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b50c:	d1f4      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b50e:	4b37      	ldr	r3, [pc, #220]	; (1b5ec <uarte_nrfx_configure+0x144>)
   1b510:	e03c      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b512:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b516:	d057      	beq.n	1b5c8 <uarte_nrfx_configure+0x120>
   1b518:	d807      	bhi.n	1b52a <uarte_nrfx_configure+0x82>
   1b51a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b51e:	d055      	beq.n	1b5cc <uarte_nrfx_configure+0x124>
   1b520:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b524:	d1e8      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b526:	4b32      	ldr	r3, [pc, #200]	; (1b5f0 <uarte_nrfx_configure+0x148>)
   1b528:	e030      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b52a:	f647 2712 	movw	r7, #31250	; 0x7a12
   1b52e:	42bb      	cmp	r3, r7
   1b530:	d1e2      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b532:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b536:	e029      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b538:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b53c:	d048      	beq.n	1b5d0 <uarte_nrfx_configure+0x128>
   1b53e:	d813      	bhi.n	1b568 <uarte_nrfx_configure+0xc0>
   1b540:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b544:	d047      	beq.n	1b5d6 <uarte_nrfx_configure+0x12e>
   1b546:	d809      	bhi.n	1b55c <uarte_nrfx_configure+0xb4>
   1b548:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1b54c:	42bb      	cmp	r3, r7
   1b54e:	d044      	beq.n	1b5da <uarte_nrfx_configure+0x132>
   1b550:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b554:	d1d0      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b556:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b55a:	e017      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b55c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b560:	d1ca      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b562:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b566:	e011      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b568:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b56c:	d038      	beq.n	1b5e0 <uarte_nrfx_configure+0x138>
   1b56e:	d808      	bhi.n	1b582 <uarte_nrfx_configure+0xda>
   1b570:	4f20      	ldr	r7, [pc, #128]	; (1b5f4 <uarte_nrfx_configure+0x14c>)
   1b572:	42bb      	cmp	r3, r7
   1b574:	d037      	beq.n	1b5e6 <uarte_nrfx_configure+0x13e>
   1b576:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b57a:	d1bd      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b57c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b580:	e004      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b582:	4f1d      	ldr	r7, [pc, #116]	; (1b5f8 <uarte_nrfx_configure+0x150>)
   1b584:	42bb      	cmp	r3, r7
   1b586:	d1b7      	bne.n	1b4f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b588:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b58c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b58e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1b592:	1d03      	adds	r3, r0, #4
   1b594:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1b596:	4334      	orrs	r4, r6
   1b598:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b59a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1b59e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1b5a2:	2000      	movs	r0, #0
}
   1b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b5a6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b5aa:	e7ef      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b5ac:	4b13      	ldr	r3, [pc, #76]	; (1b5fc <uarte_nrfx_configure+0x154>)
   1b5ae:	e7ed      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b5b0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b5b4:	e7ea      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1b5b6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b5ba:	e7e7      	b.n	1b58c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b5bc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b5c0:	e7e4      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b5c2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b5c6:	e7e1      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b5c8:	4b0d      	ldr	r3, [pc, #52]	; (1b600 <uarte_nrfx_configure+0x158>)
   1b5ca:	e7df      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b5cc:	4b0d      	ldr	r3, [pc, #52]	; (1b604 <uarte_nrfx_configure+0x15c>)
   1b5ce:	e7dd      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b5d0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b5d4:	e7da      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b5d6:	4b0c      	ldr	r3, [pc, #48]	; (1b608 <uarte_nrfx_configure+0x160>)
   1b5d8:	e7d8      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b5da:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b5de:	e7d5      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b5e0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b5e4:	e7d2      	b.n	1b58c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b5e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b5ea:	e7cf      	b.n	1b58c <uarte_nrfx_configure+0xe4>
   1b5ec:	0013b000 	.word	0x0013b000
   1b5f0:	004ea000 	.word	0x004ea000
   1b5f4:	0003d090 	.word	0x0003d090
   1b5f8:	000f4240 	.word	0x000f4240
   1b5fc:	00275000 	.word	0x00275000
   1b600:	0075c000 	.word	0x0075c000
   1b604:	003af000 	.word	0x003af000
   1b608:	013a9000 	.word	0x013a9000

0001b60c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1b60e:	6906      	ldr	r6, [r0, #16]
{
   1b610:	4605      	mov	r5, r0
   1b612:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b614:	f008 fc5b 	bl	23ece <k_is_in_isr>
   1b618:	b910      	cbnz	r0, 1b620 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1b61a:	4b20      	ldr	r3, [pc, #128]	; (1b69c <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   1b61c:	781b      	ldrb	r3, [r3, #0]
   1b61e:	b983      	cbnz	r3, 1b642 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1b620:	f04f 0320 	mov.w	r3, #32
   1b624:	f3ef 8411 	mrs	r4, BASEPRI
   1b628:	f383 8812 	msr	BASEPRI_MAX, r3
   1b62c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1b630:	6868      	ldr	r0, [r5, #4]
   1b632:	f008 f84a 	bl	236ca <is_tx_ready.isra.0>
   1b636:	bb28      	cbnz	r0, 1b684 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1b638:	f384 8811 	msr	BASEPRI, r4
   1b63c:	f3bf 8f6f 	isb	sy
}
   1b640:	e7ee      	b.n	1b620 <uarte_nrfx_poll_out+0x14>
{
   1b642:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b644:	6868      	ldr	r0, [r5, #4]
   1b646:	f008 f840 	bl	236ca <is_tx_ready.isra.0>
   1b64a:	b970      	cbnz	r0, 1b66a <uarte_nrfx_poll_out+0x5e>
   1b64c:	2001      	movs	r0, #1
   1b64e:	f008 f912 	bl	23876 <nrfx_busy_wait>
   1b652:	3c01      	subs	r4, #1
   1b654:	d1f6      	bne.n	1b644 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1b656:	2100      	movs	r1, #0
   1b658:	2021      	movs	r0, #33	; 0x21
   1b65a:	f003 fc43 	bl	1eee4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b65e:	e7f0      	b.n	1b642 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1b660:	f384 8811 	msr	BASEPRI, r4
   1b664:	f3bf 8f6f 	isb	sy
}
   1b668:	e7f5      	b.n	1b656 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1b66a:	f04f 0320 	mov.w	r3, #32
   1b66e:	f3ef 8411 	mrs	r4, BASEPRI
   1b672:	f383 8812 	msr	BASEPRI_MAX, r3
   1b676:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b67a:	6868      	ldr	r0, [r5, #4]
   1b67c:	f008 f825 	bl	236ca <is_tx_ready.isra.0>
   1b680:	2800      	cmp	r0, #0
   1b682:	d0ed      	beq.n	1b660 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1b684:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1b686:	2201      	movs	r2, #1
	data->char_out = c;
   1b688:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1b68c:	6868      	ldr	r0, [r5, #4]
   1b68e:	f008 f801 	bl	23694 <tx_start.isra.0>
	__asm__ volatile(
   1b692:	f384 8811 	msr	BASEPRI, r4
   1b696:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b69c:	20006132 	.word	0x20006132

0001b6a0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b6a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1b6a4:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b6a8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1b6aa:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b6ae:	2300      	movs	r3, #0
   1b6b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b6b4:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   1b6b6:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b6b8:	68eb      	ldr	r3, [r5, #12]
   1b6ba:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
   1b6bc:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b6be:	d013      	beq.n	1b6e8 <uarte_instance_init.constprop.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b6c0:	a801      	add	r0, sp, #4
   1b6c2:	9301      	str	r3, [sp, #4]
   1b6c4:	f7ff fee2 	bl	1b48c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b6c8:	9a01      	ldr	r2, [sp, #4]
   1b6ca:	2301      	movs	r3, #1
   1b6cc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1b6ce:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1b6d2:	68eb      	ldr	r3, [r5, #12]
   1b6d4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b6d6:	a801      	add	r0, sp, #4
   1b6d8:	f7ff fed8 	bl	1b48c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b6dc:	9b01      	ldr	r3, [sp, #4]
   1b6de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b6e2:	2203      	movs	r2, #3
   1b6e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b6e8:	6928      	ldr	r0, [r5, #16]
   1b6ea:	1c43      	adds	r3, r0, #1
   1b6ec:	d006      	beq.n	1b6fc <uarte_instance_init.constprop.0+0x5c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1b6ee:	7f2b      	ldrb	r3, [r5, #28]
   1b6f0:	2b00      	cmp	r3, #0
   1b6f2:	bf14      	ite	ne
   1b6f4:	2103      	movne	r1, #3
   1b6f6:	2100      	moveq	r1, #0
   1b6f8:	f007 ffbe 	bl	23678 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b6fc:	696b      	ldr	r3, [r5, #20]
   1b6fe:	1c5a      	adds	r2, r3, #1
   1b700:	d013      	beq.n	1b72a <uarte_instance_init.constprop.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b702:	a801      	add	r0, sp, #4
   1b704:	9301      	str	r3, [sp, #4]
   1b706:	f7ff fec1 	bl	1b48c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b70a:	9a01      	ldr	r2, [sp, #4]
   1b70c:	2301      	movs	r3, #1
   1b70e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1b710:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1b714:	696b      	ldr	r3, [r5, #20]
   1b716:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b718:	a801      	add	r0, sp, #4
   1b71a:	f7ff feb7 	bl	1b48c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b71e:	9b01      	ldr	r3, [sp, #4]
   1b720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b724:	2203      	movs	r2, #3
   1b726:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b72a:	69a8      	ldr	r0, [r5, #24]
   1b72c:	1c43      	adds	r3, r0, #1
   1b72e:	d006      	beq.n	1b73e <uarte_instance_init.constprop.0+0x9e>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1b730:	7f6b      	ldrb	r3, [r5, #29]
   1b732:	2b00      	cmp	r3, #0
   1b734:	bf14      	ite	ne
   1b736:	2103      	movne	r1, #3
   1b738:	2100      	moveq	r1, #0
   1b73a:	f007 ff9d 	bl	23678 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1b73e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1b742:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1b744:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1b748:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1b74c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b750:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   1b752:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1b756:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1b75a:	1d31      	adds	r1, r6, #4
   1b75c:	f7ff fea4 	bl	1b4a8 <uarte_nrfx_configure>
	if (err) {
   1b760:	4605      	mov	r5, r0
   1b762:	2800      	cmp	r0, #0
   1b764:	d146      	bne.n	1b7f4 <uarte_instance_init.constprop.0+0x154>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b766:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b76a:	0799      	lsls	r1, r3, #30
   1b76c:	d519      	bpl.n	1b7a2 <uarte_instance_init.constprop.0+0x102>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b76e:	f106 0016 	add.w	r0, r6, #22
   1b772:	f001 f9c3 	bl	1cafc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b776:	4b23      	ldr	r3, [pc, #140]	; (1b804 <uarte_instance_init.constprop.0+0x164>)
   1b778:	4298      	cmp	r0, r3
   1b77a:	d13f      	bne.n	1b7fc <uarte_instance_init.constprop.0+0x15c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1b77c:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1b77e:	00c3      	lsls	r3, r0, #3
   1b780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b784:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1b788:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1b78c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b790:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b794:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1b798:	4a1b      	ldr	r2, [pc, #108]	; (1b808 <uarte_instance_init.constprop.0+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b79a:	2301      	movs	r3, #1
   1b79c:	4083      	lsls	r3, r0
   1b79e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b7a2:	2308      	movs	r3, #8
   1b7a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1b7a8:	f898 3008 	ldrb.w	r3, [r8, #8]
   1b7ac:	b95b      	cbnz	r3, 1b7c6 <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b7ae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1b7b2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1b7b6:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b7ba:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b7be:	2301      	movs	r3, #1
   1b7c0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b7c4:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b7c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b7ca:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1b7cc:	bf5c      	itt	pl
   1b7ce:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1b7d2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b7d6:	06db      	lsls	r3, r3, #27
   1b7d8:	bf44      	itt	mi
   1b7da:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1b7de:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1b7e2:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   1b7e4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b7e6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b7ea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b7ee:	2301      	movs	r3, #1
   1b7f0:	60a3      	str	r3, [r4, #8]
   1b7f2:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b7f4:	4628      	mov	r0, r5
   1b7f6:	b002      	add	sp, #8
   1b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   1b7fc:	f06f 0504 	mvn.w	r5, #4
   1b800:	e7f8      	b.n	1b7f4 <uarte_instance_init.constprop.0+0x154>
   1b802:	bf00      	nop
   1b804:	0bad0000 	.word	0x0bad0000
   1b808:	4001f000 	.word	0x4001f000

0001b80c <random_byte_get>:
	__asm__ volatile(
   1b80c:	f04f 0320 	mov.w	r3, #32
   1b810:	f3ef 8211 	mrs	r2, BASEPRI
   1b814:	f383 8812 	msr	BASEPRI_MAX, r3
   1b818:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b81c:	4b09      	ldr	r3, [pc, #36]	; (1b844 <random_byte_get+0x38>)
   1b81e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1b822:	b161      	cbz	r1, 1b83e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b824:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1b826:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b82a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1b82e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1b832:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1b834:	f382 8811 	msr	BASEPRI, r2
   1b838:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1b83c:	4770      	bx	lr
	int retval = -EAGAIN;
   1b83e:	f06f 000a 	mvn.w	r0, #10
   1b842:	e7f7      	b.n	1b834 <random_byte_get+0x28>
   1b844:	4000d000 	.word	0x4000d000

0001b848 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1b848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b84a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1b84c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1b84e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1b850:	f04f 0020 	mov.w	r0, #32
   1b854:	f3ef 8e11 	mrs	lr, BASEPRI
   1b858:	f380 8812 	msr	BASEPRI_MAX, r0
   1b85c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b860:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b862:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1b866:	1ba4      	subs	r4, r4, r6
   1b868:	403c      	ands	r4, r7
	if (available < len) {
   1b86a:	42a2      	cmp	r2, r4
		len = available;
   1b86c:	bf88      	it	hi
   1b86e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b870:	18b0      	adds	r0, r6, r2
   1b872:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1b874:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1b876:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1b878:	f38e 8811 	msr	BASEPRI, lr
   1b87c:	f3bf 8f6f 	isb	sy
   1b880:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1b882:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1b884:	4290      	cmp	r0, r2
   1b886:	d119      	bne.n	1b8bc <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1b888:	4566      	cmp	r6, ip
   1b88a:	d10d      	bne.n	1b8a8 <rng_pool_get+0x60>
	__asm__ volatile(
   1b88c:	f04f 0520 	mov.w	r5, #32
   1b890:	f3ef 8011 	mrs	r0, BASEPRI
   1b894:	f385 8812 	msr	BASEPRI_MAX, r5
   1b898:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1b89c:	781d      	ldrb	r5, [r3, #0]
   1b89e:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1b8a0:	f380 8811 	msr	BASEPRI, r0
   1b8a4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1b8a8:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1b8aa:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1b8ac:	b290      	uxth	r0, r2
	available = available - len;
   1b8ae:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1b8b0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b8b2:	bf22      	ittt	cs
   1b8b4:	4b06      	ldrcs	r3, [pc, #24]	; (1b8d0 <rng_pool_get+0x88>)
   1b8b6:	2201      	movcs	r2, #1
   1b8b8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1b8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1b8bc:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1b8c0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1b8c2:	f89e e005 	ldrb.w	lr, [lr, #5]
   1b8c6:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1b8ca:	403d      	ands	r5, r7
   1b8cc:	e7da      	b.n	1b884 <rng_pool_get+0x3c>
   1b8ce:	bf00      	nop
   1b8d0:	4000d000 	.word	0x4000d000

0001b8d4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b8d4:	43db      	mvns	r3, r3
{
   1b8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b8da:	f013 0501 	ands.w	r5, r3, #1
{
   1b8de:	460e      	mov	r6, r1
   1b8e0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b8e2:	d004      	beq.n	1b8ee <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1b8e4:	4821      	ldr	r0, [pc, #132]	; (1b96c <entropy_nrf5_get_entropy_isr+0x98>)
   1b8e6:	f7ff ffaf 	bl	1b848 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1b8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1b8ee:	b3a2      	cbz	r2, 1b95a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1b8f0:	f04f 0320 	mov.w	r3, #32
   1b8f4:	f3ef 8811 	mrs	r8, BASEPRI
   1b8f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8fc:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1b900:	200d      	movs	r0, #13
   1b902:	f7ea fa5f 	bl	5dc4 <arch_irq_is_enabled>
   1b906:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1b908:	200d      	movs	r0, #13
   1b90a:	f7ea fa47 	bl	5d9c <arch_irq_disable>
	__asm__ volatile(
   1b90e:	f388 8811 	msr	BASEPRI, r8
   1b912:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b916:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1b970 <entropy_nrf5_get_entropy_isr+0x9c>
   1b91a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1b974 <entropy_nrf5_get_entropy_isr+0xa0>
   1b91e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1b922:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1b926:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b92a:	2301      	movs	r3, #1
   1b92c:	f8c8 3000 	str.w	r3, [r8]
   1b930:	4625      	mov	r5, r4
   1b932:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b936:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1b93a:	b183      	cbz	r3, 1b95e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1b93c:	f7ff ff66 	bl	1b80c <random_byte_get>
			if (byte < 0) {
   1b940:	1e03      	subs	r3, r0, #0
   1b942:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1b946:	dbf6      	blt.n	1b936 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1b948:	3d01      	subs	r5, #1
   1b94a:	b2ad      	uxth	r5, r5
   1b94c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1b94e:	2d00      	cmp	r5, #0
   1b950:	d1f1      	bne.n	1b936 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1b952:	b117      	cbz	r7, 1b95a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1b954:	200d      	movs	r0, #13
   1b956:	f7ea fa11 	bl	5d7c <arch_irq_enable>
	return cnt;
   1b95a:	4620      	mov	r0, r4
   1b95c:	e7c5      	b.n	1b8ea <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1b95e:	f3bf 8f4f 	dsb	sy
				__WFE();
   1b962:	bf20      	wfe
				__SEV();
   1b964:	bf40      	sev
				__WFE();
   1b966:	bf20      	wfe
   1b968:	e7e5      	b.n	1b936 <entropy_nrf5_get_entropy_isr+0x62>
   1b96a:	bf00      	nop
   1b96c:	20005d6c 	.word	0x20005d6c
   1b970:	4000d000 	.word	0x4000d000
   1b974:	e000e100 	.word	0xe000e100

0001b978 <entropy_nrf5_get_entropy>:
{
   1b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1b97c:	4f13      	ldr	r7, [pc, #76]	; (1b9cc <entropy_nrf5_get_entropy+0x54>)
   1b97e:	460d      	mov	r5, r1
   1b980:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b982:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1b986:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1b98a:	b914      	cbnz	r4, 1b992 <entropy_nrf5_get_entropy+0x1a>
}
   1b98c:	4620      	mov	r0, r4
   1b98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b99a:	4638      	mov	r0, r7
   1b99c:	f002 fde4 	bl	1e568 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b9a0:	4622      	mov	r2, r4
   1b9a2:	4629      	mov	r1, r5
   1b9a4:	4640      	mov	r0, r8
   1b9a6:	f7ff ff4f 	bl	1b848 <rng_pool_get>
   1b9aa:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1b9ac:	4638      	mov	r0, r7
   1b9ae:	f002 fdb5 	bl	1e51c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1b9b2:	b93e      	cbnz	r6, 1b9c4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1b9b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b9b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9bc:	4648      	mov	r0, r9
   1b9be:	f002 fdd3 	bl	1e568 <z_impl_k_sem_take>
			continue;
   1b9c2:	e7e2      	b.n	1b98a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1b9c4:	1ba4      	subs	r4, r4, r6
   1b9c6:	b2a4      	uxth	r4, r4
		buf += bytes;
   1b9c8:	4435      	add	r5, r6
   1b9ca:	e7de      	b.n	1b98a <entropy_nrf5_get_entropy+0x12>
   1b9cc:	20005d3c 	.word	0x20005d3c

0001b9d0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1b9d0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b9d2:	4c19      	ldr	r4, [pc, #100]	; (1ba38 <entropy_nrf5_init+0x68>)
   1b9d4:	2201      	movs	r2, #1
   1b9d6:	4611      	mov	r1, r2
   1b9d8:	4620      	mov	r0, r4
   1b9da:	f008 fb66 	bl	240aa <z_impl_k_sem_init>
   1b9de:	2201      	movs	r2, #1
   1b9e0:	2100      	movs	r1, #0
   1b9e2:	f104 0018 	add.w	r0, r4, #24
   1b9e6:	f008 fb60 	bl	240aa <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1b9ea:	f240 4307 	movw	r3, #1031	; 0x407
   1b9ee:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1b9f2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b9f6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1b9f8:	230c      	movs	r3, #12
   1b9fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1b9fe:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ba00:	4b0e      	ldr	r3, [pc, #56]	; (1ba3c <entropy_nrf5_init+0x6c>)
   1ba02:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ba06:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ba0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ba0e:	f042 0201 	orr.w	r2, r2, #1
   1ba12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ba16:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ba18:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ba1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ba20:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ba24:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ba26:	6019      	str	r1, [r3, #0]
   1ba28:	200d      	movs	r0, #13
   1ba2a:	f7ea f9d9 	bl	5de0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ba2e:	200d      	movs	r0, #13
   1ba30:	f7ea f9a4 	bl	5d7c <arch_irq_enable>

	return 0;
}
   1ba34:	4628      	mov	r0, r5
   1ba36:	bd38      	pop	{r3, r4, r5, pc}
   1ba38:	20005d3c 	.word	0x20005d3c
   1ba3c:	4000d000 	.word	0x4000d000

0001ba40 <isr>:
{
   1ba40:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ba42:	f7ff fee3 	bl	1b80c <random_byte_get>
	if (byte < 0) {
   1ba46:	2800      	cmp	r0, #0
   1ba48:	db20      	blt.n	1ba8c <isr+0x4c>
	uint8_t last  = rngp->last;
   1ba4a:	4b17      	ldr	r3, [pc, #92]	; (1baa8 <isr+0x68>)
   1ba4c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ba50:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ba54:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ba58:	1a51      	subs	r1, r2, r1
   1ba5a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ba5e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ba60:	d10d      	bne.n	1ba7e <isr+0x3e>
	uint8_t last  = rngp->last;
   1ba62:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ba66:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ba6a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ba6e:	1a51      	subs	r1, r2, r1
   1ba70:	ea34 0101 	bics.w	r1, r4, r1
   1ba74:	d10b      	bne.n	1ba8e <isr+0x4e>
   1ba76:	4b0d      	ldr	r3, [pc, #52]	; (1baac <isr+0x6c>)
   1ba78:	2201      	movs	r2, #1
   1ba7a:	605a      	str	r2, [r3, #4]
}
   1ba7c:	e00e      	b.n	1ba9c <isr+0x5c>
	rngp->buffer[last] = byte;
   1ba7e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ba80:	3201      	adds	r2, #1
   1ba82:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ba84:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ba88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ba8c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ba8e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ba90:	3201      	adds	r2, #1
   1ba92:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ba94:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ba98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ba9c:	4804      	ldr	r0, [pc, #16]	; (1bab0 <isr+0x70>)
}
   1ba9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1baa2:	f002 bd3b 	b.w	1e51c <z_impl_k_sem_give>
   1baa6:	bf00      	nop
   1baa8:	20005d3c 	.word	0x20005d3c
   1baac:	4000d000 	.word	0x4000d000
   1bab0:	20005d54 	.word	0x20005d54

0001bab4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1bab4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bab6:	2301      	movs	r3, #1
   1bab8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1baba:	4a11      	ldr	r2, [pc, #68]	; (1bb00 <compare_int_lock+0x4c>)
   1babc:	f3bf 8f5b 	dmb	ish
   1bac0:	43dc      	mvns	r4, r3
   1bac2:	e852 1f00 	ldrex	r1, [r2]
   1bac6:	ea01 0c04 	and.w	ip, r1, r4
   1baca:	e842 ce00 	strex	lr, ip, [r2]
   1bace:	f1be 0f00 	cmp.w	lr, #0
   1bad2:	d1f6      	bne.n	1bac2 <compare_int_lock+0xe>
   1bad4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1badc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1bae0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1bae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1bae8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1baec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1baf0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1baf4:	420b      	tst	r3, r1
}
   1baf6:	bf14      	ite	ne
   1baf8:	2001      	movne	r0, #1
   1bafa:	2000      	moveq	r0, #0
   1bafc:	bd10      	pop	{r4, pc}
   1bafe:	bf00      	nop
   1bb00:	20005d94 	.word	0x20005d94

0001bb04 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb04:	4919      	ldr	r1, [pc, #100]	; (1bb6c <sys_clock_timeout_handler+0x68>)
{
   1bb06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb08:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1bb0a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb0e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1bb10:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bb14:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb18:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1bb1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bb1e:	d222      	bcs.n	1bb66 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1bb20:	4b13      	ldr	r3, [pc, #76]	; (1bb70 <sys_clock_timeout_handler+0x6c>)
   1bb22:	681b      	ldr	r3, [r3, #0]
   1bb24:	0a1a      	lsrs	r2, r3, #8
   1bb26:	061b      	lsls	r3, r3, #24
   1bb28:	195e      	adds	r6, r3, r5
   1bb2a:	4b12      	ldr	r3, [pc, #72]	; (1bb74 <sys_clock_timeout_handler+0x70>)
   1bb2c:	f142 0700 	adc.w	r7, r2, #0
   1bb30:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1bb34:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bb36:	f003 fb47 	bl	1f1c8 <sys_clock_announce>
    return p_reg->CC[ch];
   1bb3a:	00a3      	lsls	r3, r4, #2
   1bb3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bb40:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1bb44:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1bb48:	42aa      	cmp	r2, r5
   1bb4a:	d10b      	bne.n	1bb64 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1bb4c:	b91e      	cbnz	r6, 1bb56 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1bb4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1bb52:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1bb56:	4b08      	ldr	r3, [pc, #32]	; (1bb78 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bb58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1bb5c:	fa00 f404 	lsl.w	r4, r0, r4
   1bb60:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1bb66:	2600      	movs	r6, #0
   1bb68:	e7e5      	b.n	1bb36 <sys_clock_timeout_handler+0x32>
   1bb6a:	bf00      	nop
   1bb6c:	200016a8 	.word	0x200016a8
   1bb70:	20005d98 	.word	0x20005d98
   1bb74:	20001690 	.word	0x20001690
   1bb78:	40011000 	.word	0x40011000

0001bb7c <compare_int_unlock>:
	if (key) {
   1bb7c:	b319      	cbz	r1, 1bbc6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bb7e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1bb82:	2301      	movs	r3, #1
   1bb84:	4a10      	ldr	r2, [pc, #64]	; (1bbc8 <compare_int_unlock+0x4c>)
   1bb86:	4083      	lsls	r3, r0
   1bb88:	e852 1f00 	ldrex	r1, [r2]
   1bb8c:	4319      	orrs	r1, r3
   1bb8e:	e842 1c00 	strex	ip, r1, [r2]
   1bb92:	f1bc 0f00 	cmp.w	ip, #0
   1bb96:	d1f7      	bne.n	1bb88 <compare_int_unlock+0xc>
   1bb98:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1bb9c:	4a0b      	ldr	r2, [pc, #44]	; (1bbcc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bb9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bba2:	4083      	lsls	r3, r0
   1bba4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bba8:	4b09      	ldr	r3, [pc, #36]	; (1bbd0 <compare_int_unlock+0x54>)
   1bbaa:	f3bf 8f5b 	dmb	ish
   1bbae:	681b      	ldr	r3, [r3, #0]
   1bbb0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1bbb4:	fa23 f000 	lsr.w	r0, r3, r0
   1bbb8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bbba:	bf42      	ittt	mi
   1bbbc:	4b05      	ldrmi	r3, [pc, #20]	; (1bbd4 <compare_int_unlock+0x58>)
   1bbbe:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1bbc2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1bbc6:	4770      	bx	lr
   1bbc8:	20005d94 	.word	0x20005d94
   1bbcc:	40011000 	.word	0x40011000
   1bbd0:	20005d90 	.word	0x20005d90
   1bbd4:	e000e100 	.word	0xe000e100

0001bbd8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1bbd8:	4b0d      	ldr	r3, [pc, #52]	; (1bc10 <z_nrf_rtc_timer_read+0x38>)
   1bbda:	6818      	ldr	r0, [r3, #0]
   1bbdc:	0a01      	lsrs	r1, r0, #8
   1bbde:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1bbe0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1bbe4:	4b0b      	ldr	r3, [pc, #44]	; (1bc14 <z_nrf_rtc_timer_read+0x3c>)
   1bbe6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1bbea:	1818      	adds	r0, r3, r0
   1bbec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1bbf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bbf4:	d20a      	bcs.n	1bc0c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1bbf6:	4b08      	ldr	r3, [pc, #32]	; (1bc18 <z_nrf_rtc_timer_read+0x40>)
   1bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bbfc:	4290      	cmp	r0, r2
   1bbfe:	eb71 0303 	sbcs.w	r3, r1, r3
   1bc02:	d203      	bcs.n	1bc0c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1bc04:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1bc08:	f141 0100 	adc.w	r1, r1, #0
}
   1bc0c:	4770      	bx	lr
   1bc0e:	bf00      	nop
   1bc10:	20005d98 	.word	0x20005d98
   1bc14:	40011000 	.word	0x40011000
   1bc18:	20001690 	.word	0x20001690

0001bc1c <compare_set>:
{
   1bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc20:	b085      	sub	sp, #20
   1bc22:	4616      	mov	r6, r2
   1bc24:	4698      	mov	r8, r3
   1bc26:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1bc28:	f7ff ff44 	bl	1bab4 <compare_int_lock>
   1bc2c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1bc2e:	f7ff ffd3 	bl	1bbd8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1bc32:	42b0      	cmp	r0, r6
   1bc34:	eb71 0308 	sbcs.w	r3, r1, r8
   1bc38:	d278      	bcs.n	1bd2c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1bc3a:	4b46      	ldr	r3, [pc, #280]	; (1bd54 <compare_set+0x138>)
   1bc3c:	1a30      	subs	r0, r6, r0
   1bc3e:	eb68 0101 	sbc.w	r1, r8, r1
   1bc42:	4298      	cmp	r0, r3
   1bc44:	f171 0300 	sbcs.w	r3, r1, #0
   1bc48:	f080 8081 	bcs.w	1bd4e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1bc4c:	4b42      	ldr	r3, [pc, #264]	; (1bd58 <compare_set+0x13c>)
   1bc4e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1bc52:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1bc56:	45d8      	cmp	r8, fp
   1bc58:	bf08      	it	eq
   1bc5a:	4556      	cmpeq	r6, sl
   1bc5c:	d051      	beq.n	1bd02 <compare_set+0xe6>
   1bc5e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1bc62:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1bc66:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1bc6a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1bc6e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bc70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1bc74:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bc78:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1bc7a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1bc7e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bc82:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1bc84:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1bc88:	4b34      	ldr	r3, [pc, #208]	; (1bd5c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bc8a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1bc8e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1bc90:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1bc94:	1a40      	subs	r0, r0, r1
   1bc96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bc9a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1bc9e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1bca0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1bca4:	d107      	bne.n	1bcb6 <compare_set+0x9a>
   1bca6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1bcaa:	2013      	movs	r0, #19
   1bcac:	f008 fc21 	bl	244f2 <z_impl_k_busy_wait>
   1bcb0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1bcb4:	4b29      	ldr	r3, [pc, #164]	; (1bd5c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1bcb6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1bcba:	eba4 000c 	sub.w	r0, r4, ip
   1bcbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1bcc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bcc6:	bf88      	it	hi
   1bcc8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bcca:	2000      	movs	r0, #0
   1bccc:	6038      	str	r0, [r7, #0]
   1bcce:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1bcd0:	9801      	ldr	r0, [sp, #4]
   1bcd2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bcd6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1bcda:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1bcde:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1bce2:	4281      	cmp	r1, r0
   1bce4:	d006      	beq.n	1bcf4 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1bce6:	1a20      	subs	r0, r4, r0
   1bce8:	3802      	subs	r0, #2
   1bcea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1bcee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bcf2:	d819      	bhi.n	1bd28 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1bcf4:	1aa4      	subs	r4, r4, r2
   1bcf6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1bcfa:	eb14 0a06 	adds.w	sl, r4, r6
   1bcfe:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1bd02:	4915      	ldr	r1, [pc, #84]	; (1bd58 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1bd04:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1bd06:	012b      	lsls	r3, r5, #4
   1bd08:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1bd0c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1bd10:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1bd12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bd14:	6053      	str	r3, [r2, #4]
	return ret;
   1bd16:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1bd18:	4628      	mov	r0, r5
   1bd1a:	9900      	ldr	r1, [sp, #0]
   1bd1c:	f7ff ff2e 	bl	1bb7c <compare_int_unlock>
}
   1bd20:	4620      	mov	r0, r4
   1bd22:	b005      	add	sp, #20
   1bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd28:	4620      	mov	r0, r4
   1bd2a:	e7b1      	b.n	1bc90 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1bd2c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd2e:	4a0c      	ldr	r2, [pc, #48]	; (1bd60 <compare_set+0x144>)
   1bd30:	f3bf 8f5b 	dmb	ish
   1bd34:	40ab      	lsls	r3, r5
   1bd36:	e852 1f00 	ldrex	r1, [r2]
   1bd3a:	4319      	orrs	r1, r3
   1bd3c:	e842 1000 	strex	r0, r1, [r2]
   1bd40:	2800      	cmp	r0, #0
   1bd42:	d1f8      	bne.n	1bd36 <compare_set+0x11a>
   1bd44:	f3bf 8f5b 	dmb	ish
   1bd48:	46b2      	mov	sl, r6
   1bd4a:	46c3      	mov	fp, r8
   1bd4c:	e7d9      	b.n	1bd02 <compare_set+0xe6>
			return -EINVAL;
   1bd4e:	f06f 0415 	mvn.w	r4, #21
   1bd52:	e7e1      	b.n	1bd18 <compare_set+0xfc>
   1bd54:	01000001 	.word	0x01000001
   1bd58:	20001698 	.word	0x20001698
   1bd5c:	40011000 	.word	0x40011000
   1bd60:	20005d90 	.word	0x20005d90

0001bd64 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1bd64:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1bd66:	4b19      	ldr	r3, [pc, #100]	; (1bdcc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1bd68:	4d19      	ldr	r5, [pc, #100]	; (1bdd0 <sys_clock_driver_init+0x6c>)
   1bd6a:	2400      	movs	r4, #0
   1bd6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bd70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bd74:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1bd78:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1bd7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bd80:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd84:	4b13      	ldr	r3, [pc, #76]	; (1bdd4 <sys_clock_driver_init+0x70>)
   1bd86:	2602      	movs	r6, #2
   1bd88:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1bd8c:	2101      	movs	r1, #1
   1bd8e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1bd92:	2011      	movs	r0, #17
   1bd94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1bd98:	4622      	mov	r2, r4
   1bd9a:	f7ea f821 	bl	5de0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1bd9e:	2011      	movs	r0, #17
   1bda0:	f7e9 ffec 	bl	5d7c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1bda4:	4a0c      	ldr	r2, [pc, #48]	; (1bdd8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bda6:	2301      	movs	r3, #1
   1bda8:	60ab      	str	r3, [r5, #8]
   1bdaa:	602b      	str	r3, [r5, #0]
   1bdac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1bdae:	4b0b      	ldr	r3, [pc, #44]	; (1bddc <sys_clock_driver_init+0x78>)
   1bdb0:	4a0b      	ldr	r2, [pc, #44]	; (1bde0 <sys_clock_driver_init+0x7c>)
   1bdb2:	9300      	str	r3, [sp, #0]
   1bdb4:	9401      	str	r4, [sp, #4]
   1bdb6:	2300      	movs	r3, #0
   1bdb8:	4620      	mov	r0, r4
   1bdba:	f7ff ff2f 	bl	1bc1c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1bdbe:	4630      	mov	r0, r6
   1bdc0:	f7ff f888 	bl	1aed4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1bdc4:	4620      	mov	r0, r4
   1bdc6:	b002      	add	sp, #8
   1bdc8:	bd70      	pop	{r4, r5, r6, pc}
   1bdca:	bf00      	nop
   1bdcc:	20001698 	.word	0x20001698
   1bdd0:	40011000 	.word	0x40011000
   1bdd4:	e000e100 	.word	0xe000e100
   1bdd8:	20005d94 	.word	0x20005d94
   1bddc:	0001bb05 	.word	0x0001bb05
   1bde0:	007fffff 	.word	0x007fffff

0001bde4 <rtc_nrf_isr>:
{
   1bde4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1bde8:	4c35      	ldr	r4, [pc, #212]	; (1bec0 <rtc_nrf_isr+0xdc>)
   1bdea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1bdee:	079a      	lsls	r2, r3, #30
   1bdf0:	d50b      	bpl.n	1be0a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bdf2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1bdf6:	b143      	cbz	r3, 1be0a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1bdf8:	4a32      	ldr	r2, [pc, #200]	; (1bec4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bdfa:	2300      	movs	r3, #0
   1bdfc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1be00:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1be04:	6813      	ldr	r3, [r2, #0]
   1be06:	3301      	adds	r3, #1
   1be08:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1be0a:	f04f 0320 	mov.w	r3, #32
   1be0e:	f3ef 8211 	mrs	r2, BASEPRI
   1be12:	f383 8812 	msr	BASEPRI_MAX, r3
   1be16:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   1be1a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1be1e:	03db      	lsls	r3, r3, #15
   1be20:	d512      	bpl.n	1be48 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be22:	f3bf 8f5b 	dmb	ish
   1be26:	4b28      	ldr	r3, [pc, #160]	; (1bec8 <rtc_nrf_isr+0xe4>)
   1be28:	e853 1f00 	ldrex	r1, [r3]
   1be2c:	f021 0001 	bic.w	r0, r1, #1
   1be30:	e843 0600 	strex	r6, r0, [r3]
   1be34:	2e00      	cmp	r6, #0
   1be36:	d1f7      	bne.n	1be28 <rtc_nrf_isr+0x44>
   1be38:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1be3c:	2900      	cmp	r1, #0
   1be3e:	d136      	bne.n	1beae <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   1be44:	2b00      	cmp	r3, #0
   1be46:	d132      	bne.n	1beae <rtc_nrf_isr+0xca>
{
   1be48:	2300      	movs	r3, #0
	__asm__ volatile(
   1be4a:	f382 8811 	msr	BASEPRI, r2
   1be4e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1be52:	b34b      	cbz	r3, 1bea8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   1be54:	f7ff fec0 	bl	1bbd8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1be58:	f04f 0320 	mov.w	r3, #32
   1be5c:	f3ef 8c11 	mrs	ip, BASEPRI
   1be60:	f383 8812 	msr	BASEPRI_MAX, r3
   1be64:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1be68:	4b18      	ldr	r3, [pc, #96]	; (1becc <rtc_nrf_isr+0xe8>)
   1be6a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1be6e:	42b0      	cmp	r0, r6
   1be70:	eb71 0207 	sbcs.w	r2, r1, r7
   1be74:	f04f 0200 	mov.w	r2, #0
   1be78:	d320      	bcc.n	1bebc <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1be7a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1be7e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1be82:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1be86:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   1be8a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   1be8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1be90:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   1be94:	f38c 8811 	msr	BASEPRI, ip
   1be98:	f3bf 8f6f 	isb	sy
		if (handler) {
   1be9c:	b121      	cbz	r1, 1bea8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   1be9e:	9500      	str	r5, [sp, #0]
   1bea0:	4632      	mov	r2, r6
   1bea2:	463b      	mov	r3, r7
   1bea4:	2000      	movs	r0, #0
   1bea6:	4788      	blx	r1
}
   1bea8:	b003      	add	sp, #12
   1beaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1beae:	2300      	movs	r3, #0
   1beb0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   1beb4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1beb8:	2301      	movs	r3, #1
}
   1beba:	e7c6      	b.n	1be4a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1bebc:	4611      	mov	r1, r2
   1bebe:	e7e9      	b.n	1be94 <rtc_nrf_isr+0xb0>
   1bec0:	40011000 	.word	0x40011000
   1bec4:	20005d98 	.word	0x20005d98
   1bec8:	20005d90 	.word	0x20005d90
   1becc:	20001698 	.word	0x20001698

0001bed0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1bed0:	1c43      	adds	r3, r0, #1
{
   1bed2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1bed4:	d021      	beq.n	1bf1a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1bed6:	2801      	cmp	r0, #1
   1bed8:	dd21      	ble.n	1bf1e <sys_clock_set_timeout+0x4e>
   1beda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bede:	da20      	bge.n	1bf22 <sys_clock_set_timeout+0x52>
   1bee0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1bee2:	f7ff fe79 	bl	1bbd8 <z_nrf_rtc_timer_read>
   1bee6:	4b10      	ldr	r3, [pc, #64]	; (1bf28 <sys_clock_set_timeout+0x58>)
   1bee8:	e9d3 1300 	ldrd	r1, r3, [r3]
   1beec:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1beee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bef2:	bf28      	it	cs
   1bef4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1bef6:	3001      	adds	r0, #1
   1bef8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1befa:	480c      	ldr	r0, [pc, #48]	; (1bf2c <sys_clock_set_timeout+0x5c>)
   1befc:	4282      	cmp	r2, r0
   1befe:	bf28      	it	cs
   1bf00:	4602      	movcs	r2, r0
   1bf02:	1852      	adds	r2, r2, r1
   1bf04:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1bf08:	4909      	ldr	r1, [pc, #36]	; (1bf30 <sys_clock_set_timeout+0x60>)
   1bf0a:	9001      	str	r0, [sp, #4]
   1bf0c:	9100      	str	r1, [sp, #0]
   1bf0e:	f143 0300 	adc.w	r3, r3, #0
   1bf12:	f7ff fe83 	bl	1bc1c <compare_set>
}
   1bf16:	b002      	add	sp, #8
   1bf18:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1bf1a:	4804      	ldr	r0, [pc, #16]	; (1bf2c <sys_clock_set_timeout+0x5c>)
   1bf1c:	e7e0      	b.n	1bee0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1bf1e:	2400      	movs	r4, #0
   1bf20:	e7df      	b.n	1bee2 <sys_clock_set_timeout+0x12>
   1bf22:	4c02      	ldr	r4, [pc, #8]	; (1bf2c <sys_clock_set_timeout+0x5c>)
   1bf24:	e7dd      	b.n	1bee2 <sys_clock_set_timeout+0x12>
   1bf26:	bf00      	nop
   1bf28:	200016a8 	.word	0x200016a8
   1bf2c:	007fffff 	.word	0x007fffff
   1bf30:	0001bb05 	.word	0x0001bb05

0001bf34 <sys_clock_elapsed>:
{
   1bf34:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1bf36:	f7ff fe4f 	bl	1bbd8 <z_nrf_rtc_timer_read>
   1bf3a:	4b02      	ldr	r3, [pc, #8]	; (1bf44 <sys_clock_elapsed+0x10>)
   1bf3c:	681b      	ldr	r3, [r3, #0]
}
   1bf3e:	1ac0      	subs	r0, r0, r3
   1bf40:	bd08      	pop	{r3, pc}
   1bf42:	bf00      	nop
   1bf44:	200016a8 	.word	0x200016a8

0001bf48 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1bf48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1bf4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1bf50:	2a08      	cmp	r2, #8
   1bf52:	d106      	bne.n	1bf62 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1bf54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1bf58:	2b05      	cmp	r3, #5
   1bf5a:	d802      	bhi.n	1bf62 <nrf52_errata_103+0x1a>
   1bf5c:	4a02      	ldr	r2, [pc, #8]	; (1bf68 <nrf52_errata_103+0x20>)
   1bf5e:	5cd0      	ldrb	r0, [r2, r3]
   1bf60:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1bf62:	2000      	movs	r0, #0
    #endif
}
   1bf64:	4770      	bx	lr
   1bf66:	bf00      	nop
   1bf68:	000267ea 	.word	0x000267ea

0001bf6c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1bf6c:	4a02      	ldr	r2, [pc, #8]	; (1bf78 <nvmc_wait+0xc>)
   1bf6e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	d0fb      	beq.n	1bf6e <nvmc_wait+0x2>
}
   1bf76:	4770      	bx	lr
   1bf78:	4001e000 	.word	0x4001e000

0001bf7c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1bf7c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1bf7e:	f007 fc70 	bl	23862 <nrf52_errata_136>
   1bf82:	b140      	cbz	r0, 1bf96 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1bf84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf88:	2200      	movs	r2, #0
   1bf8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1bf8e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1bf92:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1bf96:	f007 fc64 	bl	23862 <nrf52_errata_136>
   1bf9a:	2800      	cmp	r0, #0
   1bf9c:	d046      	beq.n	1c02c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1bf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bfa2:	4b60      	ldr	r3, [pc, #384]	; (1c124 <SystemInit+0x1a8>)
   1bfa4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1bfa8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1bfac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1bfb0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1bfb4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1bfb8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1bfbc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1bfc0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1bfc4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1bfc8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1bfcc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1bfd0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1bfd4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1bfd8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1bfdc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1bfe0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1bfe4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1bfe8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1bfec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1bff0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1bff4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1bff8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1bffc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c000:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c004:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c008:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c00c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c010:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c014:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c018:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c01c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c020:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c024:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c028:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c02c:	f7ff ff8c 	bl	1bf48 <nrf52_errata_103>
   1c030:	b118      	cbz	r0, 1c03a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c032:	4b3d      	ldr	r3, [pc, #244]	; (1c128 <SystemInit+0x1ac>)
   1c034:	4a3d      	ldr	r2, [pc, #244]	; (1c12c <SystemInit+0x1b0>)
   1c036:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c03a:	f7ff ff85 	bl	1bf48 <nrf52_errata_103>
   1c03e:	b118      	cbz	r0, 1c048 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c040:	4b3b      	ldr	r3, [pc, #236]	; (1c130 <SystemInit+0x1b4>)
   1c042:	22fb      	movs	r2, #251	; 0xfb
   1c044:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c048:	f7ff ff7e 	bl	1bf48 <nrf52_errata_103>
   1c04c:	b170      	cbz	r0, 1c06c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c04e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1c052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c056:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1c05a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1c05e:	f022 020f 	bic.w	r2, r2, #15
   1c062:	f003 030f 	and.w	r3, r3, #15
   1c066:	4313      	orrs	r3, r2
   1c068:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c06c:	f7ff ff6c 	bl	1bf48 <nrf52_errata_103>
   1c070:	b120      	cbz	r0, 1c07c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c072:	4b30      	ldr	r3, [pc, #192]	; (1c134 <SystemInit+0x1b8>)
   1c074:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c078:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c07c:	f007 fbf1 	bl	23862 <nrf52_errata_136>
   1c080:	b148      	cbz	r0, 1c096 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c086:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c08a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c08c:	bf44      	itt	mi
   1c08e:	f06f 0201 	mvnmi.w	r2, #1
   1c092:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c09a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1c09e:	2a08      	cmp	r2, #8
   1c0a0:	d10e      	bne.n	1c0c0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c0a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1c0a6:	2b05      	cmp	r3, #5
   1c0a8:	d802      	bhi.n	1c0b0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1c0aa:	4a23      	ldr	r2, [pc, #140]	; (1c138 <SystemInit+0x1bc>)
   1c0ac:	5cd3      	ldrb	r3, [r2, r3]
   1c0ae:	b13b      	cbz	r3, 1c0c0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1c0b0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c0b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1c0b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c0bc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c0c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c0c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c0c8:	2a00      	cmp	r2, #0
   1c0ca:	db03      	blt.n	1c0d4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c0cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c0d0:	2b00      	cmp	r3, #0
   1c0d2:	da22      	bge.n	1c11a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c0d4:	4919      	ldr	r1, [pc, #100]	; (1c13c <SystemInit+0x1c0>)
   1c0d6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c0d8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c0dc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c0e0:	2412      	movs	r4, #18
    nvmc_wait();
   1c0e2:	f7ff ff43 	bl	1bf6c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c0e6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c0ea:	f7ff ff3f 	bl	1bf6c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c0ee:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c0f2:	f7ff ff3b 	bl	1bf6c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c0f6:	2300      	movs	r3, #0
   1c0f8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c0fc:	f7ff ff36 	bl	1bf6c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1c100:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c104:	490e      	ldr	r1, [pc, #56]	; (1c140 <SystemInit+0x1c4>)
   1c106:	4b0f      	ldr	r3, [pc, #60]	; (1c144 <SystemInit+0x1c8>)
   1c108:	68ca      	ldr	r2, [r1, #12]
   1c10a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c10e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c110:	60cb      	str	r3, [r1, #12]
   1c112:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c116:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c118:	e7fd      	b.n	1c116 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c11a:	4b0b      	ldr	r3, [pc, #44]	; (1c148 <SystemInit+0x1cc>)
   1c11c:	4a0b      	ldr	r2, [pc, #44]	; (1c14c <SystemInit+0x1d0>)
   1c11e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c120:	bd10      	pop	{r4, pc}
   1c122:	bf00      	nop
   1c124:	4000c000 	.word	0x4000c000
   1c128:	40005000 	.word	0x40005000
   1c12c:	00038148 	.word	0x00038148
   1c130:	4000f000 	.word	0x4000f000
   1c134:	40029000 	.word	0x40029000
   1c138:	000267e4 	.word	0x000267e4
   1c13c:	4001e000 	.word	0x4001e000
   1c140:	e000ed00 	.word	0xe000ed00
   1c144:	05fa0004 	.word	0x05fa0004
   1c148:	200008a0 	.word	0x200008a0
   1c14c:	03d09000 	.word	0x03d09000

0001c150 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c150:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c152:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c154:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1c156:	fab2 f382 	clz	r3, r2
   1c15a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1c15e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1c160:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1c162:	d014      	beq.n	1c18e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c164:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c168:	fa05 f303 	lsl.w	r3, r5, r3
   1c16c:	ea22 0303 	bic.w	r3, r2, r3
   1c170:	e850 6f00 	ldrex	r6, [r0]
   1c174:	4296      	cmp	r6, r2
   1c176:	d104      	bne.n	1c182 <nrfx_flag32_alloc+0x32>
   1c178:	e840 3c00 	strex	ip, r3, [r0]
   1c17c:	f1bc 0f00 	cmp.w	ip, #0
   1c180:	d1f6      	bne.n	1c170 <nrfx_flag32_alloc+0x20>
   1c182:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c186:	d1e5      	bne.n	1c154 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1c188:	4802      	ldr	r0, [pc, #8]	; (1c194 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1c18a:	700c      	strb	r4, [r1, #0]
}
   1c18c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1c18e:	4802      	ldr	r0, [pc, #8]	; (1c198 <nrfx_flag32_alloc+0x48>)
   1c190:	e7fc      	b.n	1c18c <nrfx_flag32_alloc+0x3c>
   1c192:	bf00      	nop
   1c194:	0bad0000 	.word	0x0bad0000
   1c198:	0bad0002 	.word	0x0bad0002

0001c19c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1c19c:	6803      	ldr	r3, [r0, #0]
   1c19e:	40cb      	lsrs	r3, r1
   1c1a0:	07db      	lsls	r3, r3, #31
{
   1c1a2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1c1a4:	d415      	bmi.n	1c1d2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1c1a6:	2301      	movs	r3, #1
   1c1a8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1c1ac:	6803      	ldr	r3, [r0, #0]
   1c1ae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1c1b2:	ea41 0203 	orr.w	r2, r1, r3
   1c1b6:	e850 4f00 	ldrex	r4, [r0]
   1c1ba:	429c      	cmp	r4, r3
   1c1bc:	d104      	bne.n	1c1c8 <nrfx_flag32_free+0x2c>
   1c1be:	e840 2c00 	strex	ip, r2, [r0]
   1c1c2:	f1bc 0f00 	cmp.w	ip, #0
   1c1c6:	d1f6      	bne.n	1c1b6 <nrfx_flag32_free+0x1a>
   1c1c8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c1cc:	d1ee      	bne.n	1c1ac <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1c1ce:	4802      	ldr	r0, [pc, #8]	; (1c1d8 <nrfx_flag32_free+0x3c>)
}
   1c1d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c1d2:	4802      	ldr	r0, [pc, #8]	; (1c1dc <nrfx_flag32_free+0x40>)
   1c1d4:	e7fc      	b.n	1c1d0 <nrfx_flag32_free+0x34>
   1c1d6:	bf00      	nop
   1c1d8:	0bad0000 	.word	0x0bad0000
   1c1dc:	0bad0004 	.word	0x0bad0004

0001c1e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1c1e0:	4b04      	ldr	r3, [pc, #16]	; (1c1f4 <nrfx_clock_init+0x14>)
   1c1e2:	791a      	ldrb	r2, [r3, #4]
   1c1e4:	b922      	cbnz	r2, 1c1f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1c1e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1c1e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1c1ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c1ec:	4802      	ldr	r0, [pc, #8]	; (1c1f8 <nrfx_clock_init+0x18>)
   1c1ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1c1f0:	4802      	ldr	r0, [pc, #8]	; (1c1fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c1f2:	4770      	bx	lr
   1c1f4:	20005d9c 	.word	0x20005d9c
   1c1f8:	0bad0000 	.word	0x0bad0000
   1c1fc:	0bad000c 	.word	0x0bad000c

0001c200 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1c200:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1c202:	2000      	movs	r0, #0
   1c204:	f7e9 fdde 	bl	5dc4 <arch_irq_is_enabled>
   1c208:	b908      	cbnz	r0, 1c20e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1c20a:	f7e9 fdb7 	bl	5d7c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   1c20e:	4b02      	ldr	r3, [pc, #8]	; (1c218 <nrfx_clock_enable+0x18>)
   1c210:	2201      	movs	r2, #1
   1c212:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1c214:	bd08      	pop	{r3, pc}
   1c216:	bf00      	nop
   1c218:	2000612c 	.word	0x2000612c

0001c21c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1c21c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c21e:	b110      	cbz	r0, 1c226 <nrfx_clock_stop+0xa>
   1c220:	2801      	cmp	r0, #1
   1c222:	d017      	beq.n	1c254 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1c224:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1c226:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c22a:	2302      	movs	r3, #2
   1c22c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c230:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1c234:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c238:	2301      	movs	r3, #1
   1c23a:	60e3      	str	r3, [r4, #12]
   1c23c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c240:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1c244:	03db      	lsls	r3, r3, #15
   1c246:	d5ed      	bpl.n	1c224 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1c248:	2001      	movs	r0, #1
   1c24a:	f007 fb14 	bl	23876 <nrfx_busy_wait>
   1c24e:	3d01      	subs	r5, #1
   1c250:	d1f6      	bne.n	1c240 <nrfx_clock_stop+0x24>
   1c252:	e7e7      	b.n	1c224 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1c254:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c258:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1c25a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c25e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1c262:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c266:	6060      	str	r0, [r4, #4]
   1c268:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c26c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c270:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1c274:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c276:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c27a:	d505      	bpl.n	1c288 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1c27c:	b123      	cbz	r3, 1c288 <nrfx_clock_stop+0x6c>
   1c27e:	2001      	movs	r0, #1
   1c280:	f007 faf9 	bl	23876 <nrfx_busy_wait>
   1c284:	3d01      	subs	r5, #1
   1c286:	d1f1      	bne.n	1c26c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1c288:	4b01      	ldr	r3, [pc, #4]	; (1c290 <nrfx_clock_stop+0x74>)
   1c28a:	2200      	movs	r2, #0
   1c28c:	715a      	strb	r2, [r3, #5]
   1c28e:	e7c9      	b.n	1c224 <nrfx_clock_stop+0x8>
   1c290:	20005d9c 	.word	0x20005d9c

0001c294 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1c298:	b510      	push	{r4, lr}
   1c29a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1c29e:	b16a      	cbz	r2, 1c2bc <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2a0:	2200      	movs	r2, #0
   1c2a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c2a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1c2aa:	2201      	movs	r2, #1
   1c2ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1c2b0:	4b11      	ldr	r3, [pc, #68]	; (1c2f8 <nrfx_clock_irq_handler+0x64>)
   1c2b2:	7958      	ldrb	r0, [r3, #5]
   1c2b4:	b910      	cbnz	r0, 1c2bc <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1c2b6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c2b8:	681b      	ldr	r3, [r3, #0]
   1c2ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c2c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1c2c4:	b172      	cbz	r2, 1c2e4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2c6:	2200      	movs	r2, #0
   1c2c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1c2cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c2d0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c2d4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1c2d8:	0792      	lsls	r2, r2, #30
   1c2da:	d104      	bne.n	1c2e6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c2dc:	2201      	movs	r2, #1
   1c2de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2e2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1c2e4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1c2e6:	2202      	movs	r2, #2
   1c2e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c2ec:	4b02      	ldr	r3, [pc, #8]	; (1c2f8 <nrfx_clock_irq_handler+0x64>)
}
   1c2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c2f2:	681b      	ldr	r3, [r3, #0]
   1c2f4:	2001      	movs	r0, #1
   1c2f6:	4718      	bx	r3
   1c2f8:	20005d9c 	.word	0x20005d9c

0001c2fc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1c2fc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1c2fe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1c302:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1c304:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1c306:	6002      	str	r2, [r0, #0]
}
   1c308:	4802      	ldr	r0, [pc, #8]	; (1c314 <nrf_gpio_pin_port_decode+0x18>)
   1c30a:	bf18      	it	ne
   1c30c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1c310:	4770      	bx	lr
   1c312:	bf00      	nop
   1c314:	50000300 	.word	0x50000300

0001c318 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c318:	4b03      	ldr	r3, [pc, #12]	; (1c328 <pin_in_use_by_te+0x10>)
   1c31a:	3008      	adds	r0, #8
   1c31c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1c320:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c324:	4770      	bx	lr
   1c326:	bf00      	nop
   1c328:	200008a4 	.word	0x200008a4

0001c32c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1c32c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c32e:	f100 0308 	add.w	r3, r0, #8
   1c332:	4c0c      	ldr	r4, [pc, #48]	; (1c364 <call_handler+0x38>)
   1c334:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1c338:	05da      	lsls	r2, r3, #23
{
   1c33a:	4605      	mov	r5, r0
   1c33c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c33e:	d507      	bpl.n	1c350 <call_handler+0x24>
   1c340:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1c344:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1c348:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1c34c:	6852      	ldr	r2, [r2, #4]
   1c34e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1c350:	68a3      	ldr	r3, [r4, #8]
   1c352:	b12b      	cbz	r3, 1c360 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c354:	68e2      	ldr	r2, [r4, #12]
   1c356:	4631      	mov	r1, r6
   1c358:	4628      	mov	r0, r5
    }
}
   1c35a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c35e:	4718      	bx	r3
}
   1c360:	bd70      	pop	{r4, r5, r6, pc}
   1c362:	bf00      	nop
   1c364:	200008a4 	.word	0x200008a4

0001c368 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c368:	4a12      	ldr	r2, [pc, #72]	; (1c3b4 <release_handler+0x4c>)
   1c36a:	3008      	adds	r0, #8
{
   1c36c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c36e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1c372:	05d9      	lsls	r1, r3, #23
   1c374:	d51b      	bpl.n	1c3ae <release_handler+0x46>
   1c376:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1c37a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1c37e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c382:	f102 0410 	add.w	r4, r2, #16
   1c386:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1c388:	f834 3b02 	ldrh.w	r3, [r4], #2
   1c38c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1c390:	d003      	beq.n	1c39a <release_handler+0x32>
   1c392:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1c396:	4299      	cmp	r1, r3
   1c398:	d009      	beq.n	1c3ae <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c39a:	3001      	adds	r0, #1
   1c39c:	2830      	cmp	r0, #48	; 0x30
   1c39e:	d1f3      	bne.n	1c388 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1c3a0:	2300      	movs	r3, #0
   1c3a2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c3a6:	4804      	ldr	r0, [pc, #16]	; (1c3b8 <release_handler+0x50>)
}
   1c3a8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c3aa:	f7ff bef7 	b.w	1c19c <nrfx_flag32_free>
}
   1c3ae:	bc10      	pop	{r4}
   1c3b0:	4770      	bx	lr
   1c3b2:	bf00      	nop
   1c3b4:	200008a4 	.word	0x200008a4
   1c3b8:	20000918 	.word	0x20000918

0001c3bc <pin_handler_trigger_uninit>:
{
   1c3bc:	b538      	push	{r3, r4, r5, lr}
   1c3be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1c3c0:	f7ff ffaa 	bl	1c318 <pin_in_use_by_te>
   1c3c4:	4c09      	ldr	r4, [pc, #36]	; (1c3ec <pin_handler_trigger_uninit+0x30>)
   1c3c6:	f102 0508 	add.w	r5, r2, #8
   1c3ca:	b140      	cbz	r0, 1c3de <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c3cc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1c3d0:	4907      	ldr	r1, [pc, #28]	; (1c3f0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1c3d2:	0b5b      	lsrs	r3, r3, #13
   1c3d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1c3d8:	2000      	movs	r0, #0
   1c3da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1c3de:	4610      	mov	r0, r2
   1c3e0:	f7ff ffc2 	bl	1c368 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1c3e4:	2300      	movs	r3, #0
   1c3e6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1c3ea:	bd38      	pop	{r3, r4, r5, pc}
   1c3ec:	200008a4 	.word	0x200008a4
   1c3f0:	40006000 	.word	0x40006000

0001c3f4 <nrfx_gpiote_input_configure>:
{
   1c3f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c3f8:	4604      	mov	r4, r0
   1c3fa:	4617      	mov	r7, r2
   1c3fc:	461d      	mov	r5, r3
    if (p_input_config)
   1c3fe:	b321      	cbz	r1, 1c44a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c400:	4e4e      	ldr	r6, [pc, #312]	; (1c53c <nrfx_gpiote_input_configure+0x148>)
   1c402:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1c406:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1c40a:	079b      	lsls	r3, r3, #30
   1c40c:	d506      	bpl.n	1c41c <nrfx_gpiote_input_configure+0x28>
   1c40e:	f7ff ff83 	bl	1c318 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1c412:	b118      	cbz	r0, 1c41c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   1c414:	484a      	ldr	r0, [pc, #296]	; (1c540 <nrfx_gpiote_input_configure+0x14c>)
}
   1c416:	b004      	add	sp, #16
   1c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1c41c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1c41e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1c422:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1c426:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1c42a:	f10d 020f 	add.w	r2, sp, #15
   1c42e:	460b      	mov	r3, r1
   1c430:	4620      	mov	r0, r4
   1c432:	f10d 010e 	add.w	r1, sp, #14
   1c436:	f007 fa4c 	bl	238d2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1c43a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1c43e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1c442:	f043 0301 	orr.w	r3, r3, #1
   1c446:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   1c44a:	b197      	cbz	r7, 1c472 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c44c:	4b3b      	ldr	r3, [pc, #236]	; (1c53c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1c44e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1c450:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c452:	f104 0008 	add.w	r0, r4, #8
   1c456:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1c45a:	078f      	lsls	r7, r1, #30
   1c45c:	d50c      	bpl.n	1c478 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   1c45e:	2a00      	cmp	r2, #0
   1c460:	d1d8      	bne.n	1c414 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1c462:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1c466:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1c46a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1c46e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1c472:	bbcd      	cbnz	r5, 1c4e8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   1c474:	4833      	ldr	r0, [pc, #204]	; (1c544 <nrfx_gpiote_input_configure+0x150>)
   1c476:	e7ce      	b.n	1c416 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1c478:	f021 0120 	bic.w	r1, r1, #32
   1c47c:	04c9      	lsls	r1, r1, #19
   1c47e:	0cc9      	lsrs	r1, r1, #19
   1c480:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   1c484:	2a00      	cmp	r2, #0
   1c486:	d0ec      	beq.n	1c462 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   1c488:	2e03      	cmp	r6, #3
   1c48a:	d8c3      	bhi.n	1c414 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1c48c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1c48e:	b92e      	cbnz	r6, 1c49c <nrfx_gpiote_input_configure+0xa8>
   1c490:	4a2d      	ldr	r2, [pc, #180]	; (1c548 <nrfx_gpiote_input_configure+0x154>)
   1c492:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1c496:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1c49a:	e7e2      	b.n	1c462 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c49c:	00ba      	lsls	r2, r7, #2
   1c49e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c4a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c4a6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1c4aa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1c4ae:	f02c 0c03 	bic.w	ip, ip, #3
   1c4b2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c4b6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1c4ba:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1c4be:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1c4c2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c4c6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1c4ca:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1c4ce:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   1c4d2:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1c4d6:	ea4c 0c0e 	orr.w	ip, ip, lr
   1c4da:	f041 0120 	orr.w	r1, r1, #32
   1c4de:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1c4e2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1c4e6:	e7bc      	b.n	1c462 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1c4e8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1c4ec:	4620      	mov	r0, r4
   1c4ee:	f7ff ff3b 	bl	1c368 <release_handler>
    if (!handler)
   1c4f2:	2e00      	cmp	r6, #0
   1c4f4:	d0be      	beq.n	1c474 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1c4f6:	4d11      	ldr	r5, [pc, #68]	; (1c53c <nrfx_gpiote_input_configure+0x148>)
   1c4f8:	682b      	ldr	r3, [r5, #0]
   1c4fa:	429e      	cmp	r6, r3
   1c4fc:	d104      	bne.n	1c508 <nrfx_gpiote_input_configure+0x114>
   1c4fe:	686b      	ldr	r3, [r5, #4]
   1c500:	429f      	cmp	r7, r3
   1c502:	d101      	bne.n	1c508 <nrfx_gpiote_input_configure+0x114>
   1c504:	2200      	movs	r2, #0
   1c506:	e00a      	b.n	1c51e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1c508:	4810      	ldr	r0, [pc, #64]	; (1c54c <nrfx_gpiote_input_configure+0x158>)
   1c50a:	f10d 010f 	add.w	r1, sp, #15
   1c50e:	f7ff fe1f 	bl	1c150 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1c512:	4b0c      	ldr	r3, [pc, #48]	; (1c544 <nrfx_gpiote_input_configure+0x150>)
   1c514:	4298      	cmp	r0, r3
   1c516:	f47f af7e 	bne.w	1c416 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   1c51a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1c51e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1c522:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c526:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1c528:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c52a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1c52e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1c532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c536:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1c53a:	e79b      	b.n	1c474 <nrfx_gpiote_input_configure+0x80>
   1c53c:	200008a4 	.word	0x200008a4
   1c540:	0bad0004 	.word	0x0bad0004
   1c544:	0bad0000 	.word	0x0bad0000
   1c548:	40006000 	.word	0x40006000
   1c54c:	20000918 	.word	0x20000918

0001c550 <nrfx_gpiote_output_configure>:
{
   1c550:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c552:	4604      	mov	r4, r0
   1c554:	b085      	sub	sp, #20
   1c556:	4615      	mov	r5, r2
    if (p_config)
   1c558:	b319      	cbz	r1, 1c5a2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c55a:	4e33      	ldr	r6, [pc, #204]	; (1c628 <nrfx_gpiote_output_configure+0xd8>)
   1c55c:	f100 0708 	add.w	r7, r0, #8
   1c560:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1c564:	0793      	lsls	r3, r2, #30
   1c566:	d403      	bmi.n	1c570 <nrfx_gpiote_output_configure+0x20>
   1c568:	f7ff fed6 	bl	1c318 <pin_in_use_by_te>
   1c56c:	2800      	cmp	r0, #0
   1c56e:	d158      	bne.n	1c622 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1c570:	f012 0f1c 	tst.w	r2, #28
   1c574:	d002      	beq.n	1c57c <nrfx_gpiote_output_configure+0x2c>
   1c576:	784b      	ldrb	r3, [r1, #1]
   1c578:	2b01      	cmp	r3, #1
   1c57a:	d052      	beq.n	1c622 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1c57c:	2301      	movs	r3, #1
   1c57e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1c582:	2300      	movs	r3, #0
   1c584:	e9cd 1300 	strd	r1, r3, [sp]
   1c588:	1c4a      	adds	r2, r1, #1
   1c58a:	1c8b      	adds	r3, r1, #2
   1c58c:	4620      	mov	r0, r4
   1c58e:	f10d 010f 	add.w	r1, sp, #15
   1c592:	f007 f99e 	bl	238d2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1c596:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1c59a:	f043 0303 	orr.w	r3, r3, #3
   1c59e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1c5a2:	b915      	cbnz	r5, 1c5aa <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1c5a4:	4821      	ldr	r0, [pc, #132]	; (1c62c <nrfx_gpiote_output_configure+0xdc>)
}
   1c5a6:	b005      	add	sp, #20
   1c5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c5aa:	4e1f      	ldr	r6, [pc, #124]	; (1c628 <nrfx_gpiote_output_configure+0xd8>)
   1c5ac:	f104 0708 	add.w	r7, r4, #8
   1c5b0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1c5b4:	0783      	lsls	r3, r0, #30
   1c5b6:	d534      	bpl.n	1c622 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1c5b8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1c5bc:	4661      	mov	r1, ip
   1c5be:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1c5c0:	f020 0020 	bic.w	r0, r0, #32
   1c5c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c5c8:	04c0      	lsls	r0, r0, #19
   1c5ca:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1c5ce:	0cc0      	lsrs	r0, r0, #19
   1c5d0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1c5d4:	2300      	movs	r3, #0
   1c5d6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1c5da:	786a      	ldrb	r2, [r5, #1]
   1c5dc:	2a00      	cmp	r2, #0
   1c5de:	d0e1      	beq.n	1c5a4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1c5e0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1c5e4:	78ad      	ldrb	r5, [r5, #2]
   1c5e6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1c5ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1c5ee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c5f2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1c5f6:	0223      	lsls	r3, r4, #8
   1c5f8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c5fc:	0412      	lsls	r2, r2, #16
   1c5fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c602:	ea43 030e 	orr.w	r3, r3, lr
   1c606:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1c608:	052a      	lsls	r2, r5, #20
   1c60a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c60e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c612:	4313      	orrs	r3, r2
   1c614:	f040 0020 	orr.w	r0, r0, #32
   1c618:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1c61c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1c620:	e7c0      	b.n	1c5a4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   1c622:	4803      	ldr	r0, [pc, #12]	; (1c630 <nrfx_gpiote_output_configure+0xe0>)
   1c624:	e7bf      	b.n	1c5a6 <nrfx_gpiote_output_configure+0x56>
   1c626:	bf00      	nop
   1c628:	200008a4 	.word	0x200008a4
   1c62c:	0bad0000 	.word	0x0bad0000
   1c630:	0bad0004 	.word	0x0bad0004

0001c634 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1c634:	4b01      	ldr	r3, [pc, #4]	; (1c63c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1c636:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1c63a:	4770      	bx	lr
   1c63c:	200008a4 	.word	0x200008a4

0001c640 <nrfx_gpiote_channel_get>:
{
   1c640:	b508      	push	{r3, lr}
   1c642:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1c644:	f7ff fe68 	bl	1c318 <pin_in_use_by_te>
   1c648:	b138      	cbz	r0, 1c65a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c64a:	4b05      	ldr	r3, [pc, #20]	; (1c660 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1c64c:	4805      	ldr	r0, [pc, #20]	; (1c664 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c64e:	3208      	adds	r2, #8
   1c650:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1c654:	0b5b      	lsrs	r3, r3, #13
   1c656:	700b      	strb	r3, [r1, #0]
}
   1c658:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c65a:	4803      	ldr	r0, [pc, #12]	; (1c668 <nrfx_gpiote_channel_get+0x28>)
   1c65c:	e7fc      	b.n	1c658 <nrfx_gpiote_channel_get+0x18>
   1c65e:	bf00      	nop
   1c660:	200008a4 	.word	0x200008a4
   1c664:	0bad0000 	.word	0x0bad0000
   1c668:	0bad0004 	.word	0x0bad0004

0001c66c <nrfx_gpiote_init>:
{
   1c66c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c66e:	4c0f      	ldr	r4, [pc, #60]	; (1c6ac <nrfx_gpiote_init+0x40>)
   1c670:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1c674:	b9bd      	cbnz	r5, 1c6a6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1c676:	2260      	movs	r2, #96	; 0x60
   1c678:	4629      	mov	r1, r5
   1c67a:	f104 0010 	add.w	r0, r4, #16
   1c67e:	f004 f85e 	bl	2073e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1c682:	2006      	movs	r0, #6
   1c684:	f7e9 fb7a 	bl	5d7c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c688:	4b09      	ldr	r3, [pc, #36]	; (1c6b0 <nrfx_gpiote_init+0x44>)
    return err_code;
   1c68a:	480a      	ldr	r0, [pc, #40]	; (1c6b4 <nrfx_gpiote_init+0x48>)
   1c68c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1c690:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1c694:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c698:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c69c:	2301      	movs	r3, #1
   1c69e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1c6a2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c6a4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1c6a6:	4804      	ldr	r0, [pc, #16]	; (1c6b8 <nrfx_gpiote_init+0x4c>)
   1c6a8:	e7fc      	b.n	1c6a4 <nrfx_gpiote_init+0x38>
   1c6aa:	bf00      	nop
   1c6ac:	200008a4 	.word	0x200008a4
   1c6b0:	40006000 	.word	0x40006000
   1c6b4:	0bad0000 	.word	0x0bad0000
   1c6b8:	0bad0005 	.word	0x0bad0005

0001c6bc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1c6bc:	4b03      	ldr	r3, [pc, #12]	; (1c6cc <nrfx_gpiote_is_init+0x10>)
   1c6be:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1c6c2:	3800      	subs	r0, #0
   1c6c4:	bf18      	it	ne
   1c6c6:	2001      	movne	r0, #1
   1c6c8:	4770      	bx	lr
   1c6ca:	bf00      	nop
   1c6cc:	200008a4 	.word	0x200008a4

0001c6d0 <nrfx_gpiote_channel_free>:
{
   1c6d0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1c6d2:	4801      	ldr	r0, [pc, #4]	; (1c6d8 <nrfx_gpiote_channel_free+0x8>)
   1c6d4:	f7ff bd62 	b.w	1c19c <nrfx_flag32_free>
   1c6d8:	20000914 	.word	0x20000914

0001c6dc <nrfx_gpiote_channel_alloc>:
{
   1c6dc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1c6de:	4801      	ldr	r0, [pc, #4]	; (1c6e4 <nrfx_gpiote_channel_alloc+0x8>)
   1c6e0:	f7ff bd36 	b.w	1c150 <nrfx_flag32_alloc>
   1c6e4:	20000914 	.word	0x20000914

0001c6e8 <nrfx_gpiote_trigger_enable>:
{
   1c6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c6ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c6ec:	f7ff fe14 	bl	1c318 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c6f0:	f104 0208 	add.w	r2, r4, #8
   1c6f4:	4b1e      	ldr	r3, [pc, #120]	; (1c770 <nrfx_gpiote_trigger_enable+0x88>)
   1c6f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c6fa:	b1e8      	cbz	r0, 1c738 <nrfx_gpiote_trigger_enable+0x50>
   1c6fc:	f013 0502 	ands.w	r5, r3, #2
   1c700:	d11a      	bne.n	1c738 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c702:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1c704:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1c706:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1c70a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1c70e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c712:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c716:	6005      	str	r5, [r0, #0]
   1c718:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c71a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1c71e:	f040 0001 	orr.w	r0, r0, #1
   1c722:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1c726:	b129      	cbz	r1, 1c734 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1c728:	2201      	movs	r2, #1
   1c72a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1c72e:	4a11      	ldr	r2, [pc, #68]	; (1c774 <nrfx_gpiote_trigger_enable+0x8c>)
   1c730:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c734:	b003      	add	sp, #12
   1c736:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c738:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1c73c:	2b04      	cmp	r3, #4
   1c73e:	d012      	beq.n	1c766 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1c740:	2b05      	cmp	r3, #5
   1c742:	d012      	beq.n	1c76a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c744:	a801      	add	r0, sp, #4
   1c746:	9401      	str	r4, [sp, #4]
   1c748:	f7ff fdd8 	bl	1c2fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c74c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1c74e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c752:	40d9      	lsrs	r1, r3
   1c754:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c758:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1c75a:	4620      	mov	r0, r4
}
   1c75c:	b003      	add	sp, #12
   1c75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1c762:	f007 b8fd 	b.w	23960 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1c766:	2103      	movs	r1, #3
   1c768:	e7f7      	b.n	1c75a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1c76a:	2102      	movs	r1, #2
   1c76c:	e7f5      	b.n	1c75a <nrfx_gpiote_trigger_enable+0x72>
   1c76e:	bf00      	nop
   1c770:	200008a4 	.word	0x200008a4
   1c774:	40006000 	.word	0x40006000

0001c778 <nrfx_gpiote_trigger_disable>:
{
   1c778:	b508      	push	{r3, lr}
   1c77a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c77c:	f7ff fdcc 	bl	1c318 <pin_in_use_by_te>
   1c780:	b1c0      	cbz	r0, 1c7b4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c782:	f102 0108 	add.w	r1, r2, #8
   1c786:	4b0e      	ldr	r3, [pc, #56]	; (1c7c0 <nrfx_gpiote_trigger_disable+0x48>)
   1c788:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c78c:	0799      	lsls	r1, r3, #30
   1c78e:	d411      	bmi.n	1c7b4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c790:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1c792:	2201      	movs	r2, #1
   1c794:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1c796:	009b      	lsls	r3, r3, #2
   1c798:	490a      	ldr	r1, [pc, #40]	; (1c7c4 <nrfx_gpiote_trigger_disable+0x4c>)
   1c79a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c79e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1c7a2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c7a6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c7aa:	f022 0203 	bic.w	r2, r2, #3
   1c7ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1c7b2:	bd08      	pop	{r3, pc}
   1c7b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c7b8:	2100      	movs	r1, #0
   1c7ba:	4610      	mov	r0, r2
   1c7bc:	f007 b8d0 	b.w	23960 <nrf_gpio_cfg_sense_set>
   1c7c0:	200008a4 	.word	0x200008a4
   1c7c4:	40006000 	.word	0x40006000

0001c7c8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1c7c8:	4b0e      	ldr	r3, [pc, #56]	; (1c804 <nrfx_gpiote_pin_uninit+0x3c>)
   1c7ca:	f100 0208 	add.w	r2, r0, #8
{
   1c7ce:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1c7d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1c7d4:	07db      	lsls	r3, r3, #31
{
   1c7d6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1c7d8:	d511      	bpl.n	1c7fe <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1c7da:	f7ff ffcd 	bl	1c778 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1c7de:	4620      	mov	r0, r4
   1c7e0:	f7ff fdec 	bl	1c3bc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c7e4:	a801      	add	r0, sp, #4
   1c7e6:	9401      	str	r4, [sp, #4]
   1c7e8:	f7ff fd88 	bl	1c2fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1c7ec:	9b01      	ldr	r3, [sp, #4]
   1c7ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c7f2:	2202      	movs	r2, #2
   1c7f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1c7f8:	4803      	ldr	r0, [pc, #12]	; (1c808 <nrfx_gpiote_pin_uninit+0x40>)
}
   1c7fa:	b002      	add	sp, #8
   1c7fc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c7fe:	4803      	ldr	r0, [pc, #12]	; (1c80c <nrfx_gpiote_pin_uninit+0x44>)
   1c800:	e7fb      	b.n	1c7fa <nrfx_gpiote_pin_uninit+0x32>
   1c802:	bf00      	nop
   1c804:	200008a4 	.word	0x200008a4
   1c808:	0bad0000 	.word	0x0bad0000
   1c80c:	0bad0004 	.word	0x0bad0004

0001c810 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c814:	4b64      	ldr	r3, [pc, #400]	; (1c9a8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1c816:	4865      	ldr	r0, [pc, #404]	; (1c9ac <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c818:	4965      	ldr	r1, [pc, #404]	; (1c9b0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1c81a:	2600      	movs	r6, #0
{
   1c81c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1c81e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c820:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c822:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1c824:	b135      	cbz	r5, 1c834 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1c826:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1c82a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c82c:	bf1e      	ittt	ne
   1c82e:	601c      	strne	r4, [r3, #0]
   1c830:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1c832:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c834:	3304      	adds	r3, #4
   1c836:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1c838:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c83c:	d1f1      	bne.n	1c822 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c83e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1c9ac <nrfx_gpiote_irq_handler+0x19c>
   1c842:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1c846:	2b00      	cmp	r3, #0
   1c848:	f000 8091 	beq.w	1c96e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   1c84c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c850:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1c854:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1c856:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1c85a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1c85e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1c860:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1c864:	2700      	movs	r7, #0
            while (latch[i])
   1c866:	f10d 0910 	add.w	r9, sp, #16
   1c86a:	017b      	lsls	r3, r7, #5
   1c86c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1c86e:	f04f 0a01 	mov.w	sl, #1
   1c872:	e049      	b.n	1c908 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   1c874:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c876:	4a4f      	ldr	r2, [pc, #316]	; (1c9b4 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1c878:	fa94 f4a4 	rbit	r4, r4
   1c87c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1c880:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c882:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1c886:	08e0      	lsrs	r0, r4, #3
   1c888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1c88c:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1c88e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1c892:	fa0a fc02 	lsl.w	ip, sl, r2
   1c896:	f819 2000 	ldrb.w	r2, [r9, r0]
   1c89a:	ea22 020c 	bic.w	r2, r2, ip
   1c89e:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c8a2:	a803      	add	r0, sp, #12
   1c8a4:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1c8a8:	0899      	lsrs	r1, r3, #2
   1c8aa:	f7ff fd27 	bl	1c2fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c8ae:	9a03      	ldr	r2, [sp, #12]
   1c8b0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   1c8b4:	074b      	lsls	r3, r1, #29
   1c8b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c8ba:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1c8bc:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1c8c0:	d529      	bpl.n	1c916 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1c8c2:	4620      	mov	r0, r4
   1c8c4:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c8c6:	b2d5      	uxtb	r5, r2
   1c8c8:	f7ff fd30 	bl	1c32c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c8cc:	a803      	add	r0, sp, #12
   1c8ce:	9403      	str	r4, [sp, #12]
   1c8d0:	f7ff fd14 	bl	1c2fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c8d4:	9b03      	ldr	r3, [sp, #12]
   1c8d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c8da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1c8de:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1c8e2:	429d      	cmp	r5, r3
   1c8e4:	d107      	bne.n	1c8f6 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c8e6:	2100      	movs	r1, #0
   1c8e8:	4620      	mov	r0, r4
   1c8ea:	f007 f839 	bl	23960 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1c8ee:	4629      	mov	r1, r5
   1c8f0:	4620      	mov	r0, r4
   1c8f2:	f007 f835 	bl	23960 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c8f6:	a803      	add	r0, sp, #12
   1c8f8:	9403      	str	r4, [sp, #12]
   1c8fa:	f7ff fcff 	bl	1c2fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1c8fe:	9b03      	ldr	r3, [sp, #12]
   1c900:	fa0a f303 	lsl.w	r3, sl, r3
   1c904:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1c908:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1c90c:	2c00      	cmp	r4, #0
   1c90e:	d1b1      	bne.n	1c874 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1c910:	b9cf      	cbnz	r7, 1c946 <nrfx_gpiote_irq_handler+0x136>
   1c912:	2701      	movs	r7, #1
   1c914:	e7a9      	b.n	1c86a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c916:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1c918:	bf0c      	ite	eq
   1c91a:	2103      	moveq	r1, #3
   1c91c:	2102      	movne	r1, #2
   1c91e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c920:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1c922:	f007 f81d 	bl	23960 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1c926:	2d03      	cmp	r5, #3
   1c928:	d004      	beq.n	1c934 <nrfx_gpiote_irq_handler+0x124>
   1c92a:	9a01      	ldr	r2, [sp, #4]
   1c92c:	2a02      	cmp	r2, #2
   1c92e:	d106      	bne.n	1c93e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1c930:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1c932:	d1e0      	bne.n	1c8f6 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1c934:	4659      	mov	r1, fp
   1c936:	4620      	mov	r0, r4
   1c938:	f7ff fcf8 	bl	1c32c <call_handler>
   1c93c:	e7db      	b.n	1c8f6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1c93e:	2a03      	cmp	r2, #3
   1c940:	d1d9      	bne.n	1c8f6 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1c942:	2d02      	cmp	r5, #2
   1c944:	e7f5      	b.n	1c932 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c946:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1c94a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1c94e:	491a      	ldr	r1, [pc, #104]	; (1c9b8 <nrfx_gpiote_irq_handler+0x1a8>)
   1c950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c954:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1c958:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1c95a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1c95e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1c962:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1c964:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1c968:	4313      	orrs	r3, r2
   1c96a:	f47f af7b 	bne.w	1c864 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1c96e:	2401      	movs	r4, #1
    while (mask)
   1c970:	b916      	cbnz	r6, 1c978 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1c972:	b007      	add	sp, #28
   1c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1c978:	fa96 f3a6 	rbit	r3, r6
   1c97c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1c980:	fa04 f203 	lsl.w	r2, r4, r3
   1c984:	009b      	lsls	r3, r3, #2
   1c986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c98a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1c98e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c992:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1c996:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1c99a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1c99e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1c9a2:	f7ff fcc3 	bl	1c32c <call_handler>
   1c9a6:	e7e3      	b.n	1c970 <nrfx_gpiote_irq_handler+0x160>
   1c9a8:	40006100 	.word	0x40006100
   1c9ac:	40006000 	.word	0x40006000
   1c9b0:	40006120 	.word	0x40006120
   1c9b4:	200008a4 	.word	0x200008a4
   1c9b8:	50000300 	.word	0x50000300

0001c9bc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   1c9bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   1c9be:	4c18      	ldr	r4, [pc, #96]	; (1ca20 <nrfx_power_init+0x64>)
   1c9c0:	7823      	ldrb	r3, [r4, #0]
   1c9c2:	bb53      	cbnz	r3, 1ca1a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   1c9c4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   1c9c6:	0791      	lsls	r1, r2, #30
   1c9c8:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c9cc:	d511      	bpl.n	1c9f2 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c9ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1c9d2:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   1c9d6:	2908      	cmp	r1, #8
   1c9d8:	d11d      	bne.n	1ca16 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c9da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1c9de:	2b05      	cmp	r3, #5
   1c9e0:	d819      	bhi.n	1ca16 <nrfx_power_init+0x5a>
   1c9e2:	4910      	ldr	r1, [pc, #64]	; (1ca24 <nrfx_power_init+0x68>)
   1c9e4:	5cc9      	ldrb	r1, [r1, r3]
   1c9e6:	2301      	movs	r3, #1
   1c9e8:	b119      	cbz	r1, 1c9f2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1c9ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1c9ee:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1c9f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1c9f6:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1c9fa:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1c9fe:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1ca00:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   1ca04:	f7e9 f9de 	bl	5dc4 <arch_irq_is_enabled>
   1ca08:	b908      	cbnz	r0, 1ca0e <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ca0a:	f7e9 f9b7 	bl	5d7c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   1ca0e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   1ca10:	4805      	ldr	r0, [pc, #20]	; (1ca28 <nrfx_power_init+0x6c>)
    m_initialized = true;
   1ca12:	7023      	strb	r3, [r4, #0]
}
   1ca14:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1ca16:	2301      	movs	r3, #1
   1ca18:	e7eb      	b.n	1c9f2 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1ca1a:	4804      	ldr	r0, [pc, #16]	; (1ca2c <nrfx_power_init+0x70>)
   1ca1c:	e7fa      	b.n	1ca14 <nrfx_power_init+0x58>
   1ca1e:	bf00      	nop
   1ca20:	2000612d 	.word	0x2000612d
   1ca24:	000267f0 	.word	0x000267f0
   1ca28:	0bad0000 	.word	0x0bad0000
   1ca2c:	0bad000c 	.word	0x0bad000c

0001ca30 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   1ca30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca34:	f44f 7260 	mov.w	r2, #896	; 0x380
   1ca38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   1ca3c:	4b01      	ldr	r3, [pc, #4]	; (1ca44 <nrfx_power_usbevt_uninit+0x14>)
   1ca3e:	2200      	movs	r2, #0
   1ca40:	601a      	str	r2, [r3, #0]
}
   1ca42:	4770      	bx	lr
   1ca44:	20005dac 	.word	0x20005dac

0001ca48 <nrfx_power_usbevt_init>:
{
   1ca48:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   1ca4a:	f7ff fff1 	bl	1ca30 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   1ca4e:	6803      	ldr	r3, [r0, #0]
   1ca50:	b10b      	cbz	r3, 1ca56 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   1ca52:	4a01      	ldr	r2, [pc, #4]	; (1ca58 <nrfx_power_usbevt_init+0x10>)
   1ca54:	6013      	str	r3, [r2, #0]
}
   1ca56:	bd08      	pop	{r3, pc}
   1ca58:	20005dac 	.word	0x20005dac

0001ca5c <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   1ca5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   1ca60:	b510      	push	{r4, lr}
   1ca62:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1ca66:	0762      	lsls	r2, r4, #29
   1ca68:	d507      	bpl.n	1ca7a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   1ca6a:	f44f 7084 	mov.w	r0, #264	; 0x108
   1ca6e:	f006 ff86 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1ca72:	b110      	cbz	r0, 1ca7a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   1ca74:	4b1e      	ldr	r3, [pc, #120]	; (1caf0 <nrfx_power_irq_handler+0x94>)
   1ca76:	681b      	ldr	r3, [r3, #0]
   1ca78:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1ca7a:	06a3      	lsls	r3, r4, #26
   1ca7c:	d508      	bpl.n	1ca90 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   1ca7e:	f44f 708a 	mov.w	r0, #276	; 0x114
   1ca82:	f006 ff7c 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1ca86:	b118      	cbz	r0, 1ca90 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   1ca88:	4b1a      	ldr	r3, [pc, #104]	; (1caf4 <nrfx_power_irq_handler+0x98>)
   1ca8a:	2000      	movs	r0, #0
   1ca8c:	681b      	ldr	r3, [r3, #0]
   1ca8e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1ca90:	0660      	lsls	r0, r4, #25
   1ca92:	d508      	bpl.n	1caa6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   1ca94:	f44f 708c 	mov.w	r0, #280	; 0x118
   1ca98:	f006 ff71 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1ca9c:	b118      	cbz	r0, 1caa6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   1ca9e:	4b15      	ldr	r3, [pc, #84]	; (1caf4 <nrfx_power_irq_handler+0x98>)
   1caa0:	2001      	movs	r0, #1
   1caa2:	681b      	ldr	r3, [r3, #0]
   1caa4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1caa6:	0621      	lsls	r1, r4, #24
   1caa8:	d508      	bpl.n	1cabc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   1caaa:	f44f 708e 	mov.w	r0, #284	; 0x11c
   1caae:	f006 ff66 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1cab2:	b118      	cbz	r0, 1cabc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   1cab4:	4b10      	ldr	r3, [pc, #64]	; (1caf8 <nrfx_power_irq_handler+0x9c>)
   1cab6:	2000      	movs	r0, #0
   1cab8:	681b      	ldr	r3, [r3, #0]
   1caba:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1cabc:	05e2      	lsls	r2, r4, #23
   1cabe:	d508      	bpl.n	1cad2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   1cac0:	f44f 7090 	mov.w	r0, #288	; 0x120
   1cac4:	f006 ff5b 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1cac8:	b118      	cbz	r0, 1cad2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   1caca:	4b0b      	ldr	r3, [pc, #44]	; (1caf8 <nrfx_power_irq_handler+0x9c>)
   1cacc:	2001      	movs	r0, #1
   1cace:	681b      	ldr	r3, [r3, #0]
   1cad0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1cad2:	05a3      	lsls	r3, r4, #22
   1cad4:	d50a      	bpl.n	1caec <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   1cad6:	f44f 7092 	mov.w	r0, #292	; 0x124
   1cada:	f006 ff50 	bl	2397e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1cade:	b128      	cbz	r0, 1caec <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1cae0:	4b05      	ldr	r3, [pc, #20]	; (1caf8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   1cae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1cae6:	681b      	ldr	r3, [r3, #0]
   1cae8:	2002      	movs	r0, #2
   1caea:	4718      	bx	r3
}
   1caec:	bd10      	pop	{r4, pc}
   1caee:	bf00      	nop
   1caf0:	20005da4 	.word	0x20005da4
   1caf4:	20005da8 	.word	0x20005da8
   1caf8:	20005dac 	.word	0x20005dac

0001cafc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1cafc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1cafe:	4801      	ldr	r0, [pc, #4]	; (1cb04 <nrfx_ppi_channel_alloc+0x8>)
   1cb00:	f7ff bb26 	b.w	1c150 <nrfx_flag32_alloc>
   1cb04:	20000920 	.word	0x20000920

0001cb08 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1cb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1cb0a:	4b30      	ldr	r3, [pc, #192]	; (1cbcc <twi_tx_start_transfer+0xc4>)
   1cb0c:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb0e:	2300      	movs	r3, #0
   1cb10:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1cb14:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1cb18:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1cb1c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1cb20:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1cb24:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1cb28:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1cb2c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1cb30:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1cb34:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1cb36:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb3a:	2301      	movs	r3, #1
   1cb3c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1cb3e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1cb42:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1cb44:	429a      	cmp	r2, r3
   1cb46:	bf18      	it	ne
   1cb48:	6083      	strne	r3, [r0, #8]
{
   1cb4a:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   1cb4c:	f006 ff38 	bl	239c0 <twi_send_byte>

    if (p_cb->handler)
   1cb50:	682b      	ldr	r3, [r5, #0]
   1cb52:	b183      	cbz	r3, 1cb76 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1cb54:	f240 2386 	movw	r3, #646	; 0x286
   1cb58:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1cb5a:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1cb5c:	481c      	ldr	r0, [pc, #112]	; (1cbd0 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1cb5e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1cb62:	b003      	add	sp, #12
   1cb64:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1cb66:	4629      	mov	r1, r5
   1cb68:	4620      	mov	r0, r4
   1cb6a:	f006 ff46 	bl	239fa <twi_transfer>
        while ((hw_timeout > 0) &&
   1cb6e:	b128      	cbz	r0, 1cb7c <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1cb70:	9b01      	ldr	r3, [sp, #4]
   1cb72:	3b01      	subs	r3, #1
   1cb74:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1cb76:	9b01      	ldr	r3, [sp, #4]
   1cb78:	2b00      	cmp	r3, #0
   1cb7a:	dcf4      	bgt.n	1cb66 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1cb7c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1cb80:	b95b      	cbnz	r3, 1cb9a <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1cb82:	4813      	ldr	r0, [pc, #76]	; (1cbd0 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1cb84:	9b01      	ldr	r3, [sp, #4]
   1cb86:	2b00      	cmp	r3, #0
   1cb88:	dceb      	bgt.n	1cb62 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1cb8a:	2300      	movs	r3, #0
   1cb8c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1cb90:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1cb92:	4810      	ldr	r0, [pc, #64]	; (1cbd4 <twi_tx_start_transfer+0xcc>)
   1cb94:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1cb98:	e7e3      	b.n	1cb62 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1cb9a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1cb9e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1cba2:	b18b      	cbz	r3, 1cbc8 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1cba4:	4a0c      	ldr	r2, [pc, #48]	; (1cbd8 <twi_tx_start_transfer+0xd0>)
   1cba6:	480b      	ldr	r0, [pc, #44]	; (1cbd4 <twi_tx_start_transfer+0xcc>)
   1cba8:	f013 0f01 	tst.w	r3, #1
   1cbac:	bf18      	it	ne
   1cbae:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cbb0:	f013 0f02 	tst.w	r3, #2
   1cbb4:	f102 0201 	add.w	r2, r2, #1
   1cbb8:	bf18      	it	ne
   1cbba:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cbbc:	f013 0f04 	tst.w	r3, #4
   1cbc0:	4b06      	ldr	r3, [pc, #24]	; (1cbdc <twi_tx_start_transfer+0xd4>)
   1cbc2:	bf18      	it	ne
   1cbc4:	4618      	movne	r0, r3
   1cbc6:	e7dd      	b.n	1cb84 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1cbc8:	4802      	ldr	r0, [pc, #8]	; (1cbd4 <twi_tx_start_transfer+0xcc>)
   1cbca:	e7db      	b.n	1cb84 <twi_tx_start_transfer+0x7c>
   1cbcc:	000186a0 	.word	0x000186a0
   1cbd0:	0bad0000 	.word	0x0bad0000
   1cbd4:	0bad0001 	.word	0x0bad0001
   1cbd8:	0bae0000 	.word	0x0bae0000
   1cbdc:	0bae0002 	.word	0x0bae0002

0001cbe0 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1cbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1cbe2:	4b34      	ldr	r3, [pc, #208]	; (1ccb4 <twi_rx_start_transfer+0xd4>)
   1cbe4:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbe6:	2300      	movs	r3, #0
   1cbe8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1cbec:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1cbf0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1cbf4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1cbf8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1cbfc:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1cc00:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1cc04:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1cc08:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1cc0a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1cc0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1cc10:	2b01      	cmp	r3, #1
{
   1cc12:	4604      	mov	r4, r0
   1cc14:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1cc16:	d117      	bne.n	1cc48 <twi_rx_start_transfer+0x68>
   1cc18:	6a0b      	ldr	r3, [r1, #32]
   1cc1a:	065b      	lsls	r3, r3, #25
   1cc1c:	d414      	bmi.n	1cc48 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   1cc1e:	2302      	movs	r3, #2
   1cc20:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc24:	2301      	movs	r3, #1
   1cc26:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1cc28:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1cc2c:	2a02      	cmp	r2, #2
   1cc2e:	bf18      	it	ne
   1cc30:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1cc32:	682b      	ldr	r3, [r5, #0]
   1cc34:	b193      	cbz	r3, 1cc5c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1cc36:	f240 2386 	movw	r3, #646	; 0x286
   1cc3a:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1cc3c:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1cc3e:	481e      	ldr	r0, [pc, #120]	; (1ccb8 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1cc40:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1cc44:	b003      	add	sp, #12
   1cc46:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1cc48:	2301      	movs	r3, #1
   1cc4a:	e7e9      	b.n	1cc20 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1cc4c:	4629      	mov	r1, r5
   1cc4e:	4620      	mov	r0, r4
   1cc50:	f006 fed3 	bl	239fa <twi_transfer>
        while ((hw_timeout > 0) &&
   1cc54:	b128      	cbz	r0, 1cc62 <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1cc56:	9b01      	ldr	r3, [sp, #4]
   1cc58:	3b01      	subs	r3, #1
   1cc5a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1cc5c:	9b01      	ldr	r3, [sp, #4]
   1cc5e:	2b00      	cmp	r3, #0
   1cc60:	dcf4      	bgt.n	1cc4c <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1cc62:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1cc66:	b95b      	cbnz	r3, 1cc80 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1cc68:	4813      	ldr	r0, [pc, #76]	; (1ccb8 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1cc6a:	9b01      	ldr	r3, [sp, #4]
   1cc6c:	2b00      	cmp	r3, #0
   1cc6e:	dce9      	bgt.n	1cc44 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1cc70:	2300      	movs	r3, #0
   1cc72:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1cc76:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1cc78:	4810      	ldr	r0, [pc, #64]	; (1ccbc <twi_rx_start_transfer+0xdc>)
   1cc7a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1cc7e:	e7e1      	b.n	1cc44 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1cc80:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1cc84:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1cc88:	b18b      	cbz	r3, 1ccae <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1cc8a:	4a0d      	ldr	r2, [pc, #52]	; (1ccc0 <twi_rx_start_transfer+0xe0>)
   1cc8c:	480b      	ldr	r0, [pc, #44]	; (1ccbc <twi_rx_start_transfer+0xdc>)
   1cc8e:	f013 0f01 	tst.w	r3, #1
   1cc92:	bf18      	it	ne
   1cc94:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1cc96:	f013 0f02 	tst.w	r3, #2
   1cc9a:	f102 0201 	add.w	r2, r2, #1
   1cc9e:	bf18      	it	ne
   1cca0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1cca2:	f013 0f04 	tst.w	r3, #4
   1cca6:	4b07      	ldr	r3, [pc, #28]	; (1ccc4 <twi_rx_start_transfer+0xe4>)
   1cca8:	bf18      	it	ne
   1ccaa:	4618      	movne	r0, r3
   1ccac:	e7dd      	b.n	1cc6a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1ccae:	4803      	ldr	r0, [pc, #12]	; (1ccbc <twi_rx_start_transfer+0xdc>)
   1ccb0:	e7db      	b.n	1cc6a <twi_rx_start_transfer+0x8a>
   1ccb2:	bf00      	nop
   1ccb4:	000186a0 	.word	0x000186a0
   1ccb8:	0bad0000 	.word	0x0bad0000
   1ccbc:	0bad0001 	.word	0x0bad0001
   1ccc0:	0bae0000 	.word	0x0bae0000
   1ccc4:	0bae0002 	.word	0x0bae0002

0001ccc8 <nrfx_twi_init>:
{
   1ccc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ccca:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1cccc:	4d29      	ldr	r5, [pc, #164]	; (1cd74 <nrfx_twi_init+0xac>)
   1ccce:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1ccd2:	fb0c fc07 	mul.w	ip, ip, r7
   1ccd6:	eb05 040c 	add.w	r4, r5, ip
   1ccda:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1ccde:	2e00      	cmp	r6, #0
   1cce0:	d146      	bne.n	1cd70 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1cce2:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   1cce4:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1cce6:	7b4b      	ldrb	r3, [r1, #13]
   1cce8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1ccec:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   1ccee:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
   1ccf0:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1ccf4:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   1ccf8:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   1ccfc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1cd00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   1cd04:	b9e3      	cbnz	r3, 1cd40 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
   1cd06:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   1cd08:	4b1b      	ldr	r3, [pc, #108]	; (1cd78 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
   1cd0a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1cd0e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1cd10:	2c01      	cmp	r4, #1
   1cd12:	bf18      	it	ne
   1cd14:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1cd18:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
   1cd1c:	bf08      	it	eq
   1cd1e:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
   1cd20:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1cd24:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   1cd28:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1cd2a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1cd2e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1cd30:	2c01      	cmp	r4, #1
   1cd32:	bf18      	it	ne
   1cd34:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1cd38:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   1cd3c:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1cd40:	7bcb      	ldrb	r3, [r1, #15]
   1cd42:	b92b      	cbnz	r3, 1cd50 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   1cd44:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1cd48:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1cd4c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1cd50:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1cd52:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1cd56:	b11a      	cbz	r2, 1cd60 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1cd58:	f340 3007 	sbfx	r0, r0, #12, #8
   1cd5c:	f7e9 f80e 	bl	5d7c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cd60:	233c      	movs	r3, #60	; 0x3c
   1cd62:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1cd66:	4805      	ldr	r0, [pc, #20]	; (1cd7c <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cd68:	2301      	movs	r3, #1
   1cd6a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1cd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   1cd70:	4803      	ldr	r0, [pc, #12]	; (1cd80 <nrfx_twi_init+0xb8>)
   1cd72:	e7fc      	b.n	1cd6e <nrfx_twi_init+0xa6>
   1cd74:	20005db0 	.word	0x20005db0
   1cd78:	50000300 	.word	0x50000300
   1cd7c:	0bad0000 	.word	0x0bad0000
   1cd80:	0bad0005 	.word	0x0bad0005

0001cd84 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1cd84:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cd86:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1cd88:	2105      	movs	r1, #5
   1cd8a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1cd8e:	4b04      	ldr	r3, [pc, #16]	; (1cda0 <nrfx_twi_enable+0x1c>)
   1cd90:	213c      	movs	r1, #60	; 0x3c
   1cd92:	fb01 3302 	mla	r3, r1, r2, r3
   1cd96:	2202      	movs	r2, #2
   1cd98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1cd9c:	4770      	bx	lr
   1cd9e:	bf00      	nop
   1cda0:	20005db0 	.word	0x20005db0

0001cda4 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1cda4:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   1cda6:	4b0c      	ldr	r3, [pc, #48]	; (1cdd8 <nrfx_twi_disable+0x34>)
{
   1cda8:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cdaa:	7904      	ldrb	r4, [r0, #4]
   1cdac:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1cdb0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cdb4:	4b09      	ldr	r3, [pc, #36]	; (1cddc <nrfx_twi_disable+0x38>)
   1cdb6:	f021 0103 	bic.w	r1, r1, #3
   1cdba:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1cdbe:	2100      	movs	r1, #0
   1cdc0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1cdc4:	223c      	movs	r2, #60	; 0x3c
   1cdc6:	fb02 3304 	mla	r3, r2, r4, r3
   1cdca:	2201      	movs	r2, #1
   1cdcc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
   1cdd0:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
   1cdd4:	bd10      	pop	{r4, pc}
   1cdd6:	bf00      	nop
   1cdd8:	00044286 	.word	0x00044286
   1cddc:	20005db0 	.word	0x20005db0

0001cde0 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1cde4:	4f31      	ldr	r7, [pc, #196]	; (1ceac <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1cde6:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1cde8:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1cdec:	233c      	movs	r3, #60	; 0x3c
   1cdee:	fb03 7304 	mla	r3, r3, r4, r7
{
   1cdf2:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1cdf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1cdf8:	2b01      	cmp	r3, #1
{
   1cdfa:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1cdfc:	d104      	bne.n	1ce08 <nrfx_twi_xfer+0x28>
   1cdfe:	780b      	ldrb	r3, [r1, #0]
   1ce00:	2b01      	cmp	r3, #1
   1ce02:	d106      	bne.n	1ce12 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1ce04:	482a      	ldr	r0, [pc, #168]	; (1ceb0 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ce06:	e011      	b.n	1ce2c <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1ce08:	2b02      	cmp	r3, #2
   1ce0a:	d102      	bne.n	1ce12 <nrfx_twi_xfer+0x32>
   1ce0c:	780b      	ldrb	r3, [r1, #0]
   1ce0e:	2b01      	cmp	r3, #1
   1ce10:	d1f8      	bne.n	1ce04 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1ce12:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1ce14:	4b27      	ldr	r3, [pc, #156]	; (1ceb4 <nrfx_twi_xfer+0xd4>)
   1ce16:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1ce1a:	fb06 7604 	mla	r6, r6, r4, r7
   1ce1e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ce22:	b12b      	cbz	r3, 1ce30 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ce24:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1ce26:	4824      	ldr	r0, [pc, #144]	; (1ceb8 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1ce28:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1ce30:	f08c 0304 	eor.w	r3, ip, #4
   1ce34:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1ce38:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1ce3c:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1ce40:	46a8      	mov	r8, r5
   1ce42:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1ce46:	f106 0e0c 	add.w	lr, r6, #12
   1ce4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ce4e:	f8d8 3000 	ldr.w	r3, [r8]
   1ce52:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1ce56:	686b      	ldr	r3, [r5, #4]
   1ce58:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1ce5a:	68eb      	ldr	r3, [r5, #12]
   1ce5c:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1ce5e:	786b      	ldrb	r3, [r5, #1]
   1ce60:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ce64:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ce66:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ce6a:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ce6c:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ce70:	d017      	beq.n	1cea2 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ce72:	b99b      	cbnz	r3, 1ce9c <nrfx_twi_xfer+0xbc>
   1ce74:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1ce78:	233c      	movs	r3, #60	; 0x3c
   1ce7a:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1ce7e:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ce80:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1ce84:	4648      	mov	r0, r9
   1ce86:	f7ff fe3f 	bl	1cb08 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1ce8a:	233c      	movs	r3, #60	; 0x3c
   1ce8c:	435c      	muls	r4, r3
   1ce8e:	193a      	adds	r2, r7, r4
   1ce90:	593b      	ldr	r3, [r7, r4]
   1ce92:	2b00      	cmp	r3, #0
   1ce94:	d1ca      	bne.n	1ce2c <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1ce96:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1ce9a:	e7c7      	b.n	1ce2c <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ce9c:	f04f 0c01 	mov.w	ip, #1
   1cea0:	e7ea      	b.n	1ce78 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1cea2:	4651      	mov	r1, sl
   1cea4:	4648      	mov	r0, r9
   1cea6:	f7ff fe9b 	bl	1cbe0 <twi_rx_start_transfer>
   1ceaa:	e7ee      	b.n	1ce8a <nrfx_twi_xfer+0xaa>
   1ceac:	20005db0 	.word	0x20005db0
   1ceb0:	0bad0005 	.word	0x0bad0005
   1ceb4:	00044286 	.word	0x00044286
   1ceb8:	0bad000b 	.word	0x0bad000b

0001cebc <nrfx_twi_0_irq_handler>:
}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   1cebc:	4901      	ldr	r1, [pc, #4]	; (1cec4 <nrfx_twi_0_irq_handler+0x8>)
   1cebe:	4802      	ldr	r0, [pc, #8]	; (1cec8 <nrfx_twi_0_irq_handler+0xc>)
   1cec0:	f006 be27 	b.w	23b12 <twi_irq_handler>
   1cec4:	20005db0 	.word	0x20005db0
   1cec8:	40003000 	.word	0x40003000

0001cecc <nrfx_twi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
   1cecc:	4902      	ldr	r1, [pc, #8]	; (1ced8 <nrfx_twi_1_irq_handler+0xc>)
   1cece:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1ced2:	f006 be1e 	b.w	23b12 <twi_irq_handler>
   1ced6:	bf00      	nop
   1ced8:	20005dec 	.word	0x20005dec

0001cedc <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1cedc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1cee0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1cee4:	2a08      	cmp	r2, #8
   1cee6:	d106      	bne.n	1cef6 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1cee8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1ceec:	2b05      	cmp	r3, #5
   1ceee:	d804      	bhi.n	1cefa <nrf52_errata_187+0x1e>
   1cef0:	4a03      	ldr	r2, [pc, #12]	; (1cf00 <nrf52_errata_187+0x24>)
   1cef2:	5cd0      	ldrb	r0, [r2, r3]
   1cef4:	4770      	bx	lr
        return false;
   1cef6:	2000      	movs	r0, #0
   1cef8:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1cefa:	2001      	movs	r0, #1
}
   1cefc:	4770      	bx	lr
   1cefe:	bf00      	nop
   1cf00:	000267f6 	.word	0x000267f6

0001cf04 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1cf04:	4b05      	ldr	r3, [pc, #20]	; (1cf1c <ep_state_access+0x18>)
   1cf06:	f010 0f80 	tst.w	r0, #128	; 0x80
   1cf0a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   1cf0e:	bf08      	it	eq
   1cf10:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   1cf12:	f000 000f 	and.w	r0, r0, #15
}
   1cf16:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1cf1a:	4770      	bx	lr
   1cf1c:	20005f98 	.word	0x20005f98

0001cf20 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   1cf20:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1cf22:	f006 fe53 	bl	23bcc <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1cf26:	b118      	cbz	r0, 1cf30 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1cf28:	4b03      	ldr	r3, [pc, #12]	; (1cf38 <usbd_dma_pending_clear+0x18>)
   1cf2a:	2200      	movs	r2, #0
   1cf2c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   1cf30:	4b02      	ldr	r3, [pc, #8]	; (1cf3c <usbd_dma_pending_clear+0x1c>)
   1cf32:	2200      	movs	r2, #0
   1cf34:	701a      	strb	r2, [r3, #0]
}
   1cf36:	bd08      	pop	{r3, pc}
   1cf38:	40027000 	.word	0x40027000
   1cf3c:	2000612f 	.word	0x2000612f

0001cf40 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   1cf40:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   1cf42:	4a09      	ldr	r2, [pc, #36]	; (1cf68 <ev_usbreset_handler+0x28>)
   1cf44:	2300      	movs	r3, #0
   1cf46:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1cf48:	4a08      	ldr	r2, [pc, #32]	; (1cf6c <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   1cf4a:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1cf4e:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   1cf50:	f88d 3007 	strb.w	r3, [sp, #7]
   1cf54:	2301      	movs	r3, #1
   1cf56:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   1cf5a:	4b05      	ldr	r3, [pc, #20]	; (1cf70 <ev_usbreset_handler+0x30>)
   1cf5c:	a801      	add	r0, sp, #4
   1cf5e:	681b      	ldr	r3, [r3, #0]
   1cf60:	4798      	blx	r3
}
   1cf62:	b003      	add	sp, #12
   1cf64:	f85d fb04 	ldr.w	pc, [sp], #4
   1cf68:	2000612e 	.word	0x2000612e
   1cf6c:	20006131 	.word	0x20006131
   1cf70:	20006028 	.word	0x20006028

0001cf74 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   1cf74:	4b21      	ldr	r3, [pc, #132]	; (1cffc <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   1cf76:	b513      	push	{r0, r1, r4, lr}
   1cf78:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   1cf7c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   1cf80:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   1cf82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1cf86:	d50e      	bpl.n	1cfa6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   1cf88:	4b1d      	ldr	r3, [pc, #116]	; (1d000 <ev_usbevent_handler+0x8c>)
   1cf8a:	2201      	movs	r2, #1
   1cf8c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   1cf8e:	2300      	movs	r3, #0
   1cf90:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cf94:	f88d 3007 	strb.w	r3, [sp, #7]
   1cf98:	2302      	movs	r3, #2
   1cf9a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   1cf9e:	4b19      	ldr	r3, [pc, #100]	; (1d004 <ev_usbevent_handler+0x90>)
   1cfa0:	a801      	add	r0, sp, #4
   1cfa2:	681b      	ldr	r3, [r3, #0]
   1cfa4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1cfa6:	05a2      	lsls	r2, r4, #22
   1cfa8:	d50d      	bpl.n	1cfc6 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   1cfaa:	4a15      	ldr	r2, [pc, #84]	; (1d000 <ev_usbevent_handler+0x8c>)
   1cfac:	2300      	movs	r3, #0
   1cfae:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   1cfb0:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cfb4:	f88d 3007 	strb.w	r3, [sp, #7]
   1cfb8:	2303      	movs	r3, #3
   1cfba:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   1cfbe:	4b11      	ldr	r3, [pc, #68]	; (1d004 <ev_usbevent_handler+0x90>)
   1cfc0:	a801      	add	r0, sp, #4
   1cfc2:	681b      	ldr	r3, [r3, #0]
   1cfc4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   1cfc6:	0563      	lsls	r3, r4, #21
   1cfc8:	d515      	bpl.n	1cff6 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   1cfca:	4a0d      	ldr	r2, [pc, #52]	; (1d000 <ev_usbevent_handler+0x8c>)
   1cfcc:	7813      	ldrb	r3, [r2, #0]
   1cfce:	b193      	cbz	r3, 1cff6 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   1cfd0:	2300      	movs	r3, #0
   1cfd2:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   1cfd4:	4a09      	ldr	r2, [pc, #36]	; (1cffc <ev_usbevent_handler+0x88>)
   1cfd6:	2101      	movs	r1, #1
   1cfd8:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1cfdc:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1cfde:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   1cfe0:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cfe4:	f88d 3007 	strb.w	r3, [sp, #7]
   1cfe8:	2304      	movs	r3, #4
   1cfea:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   1cfee:	4b05      	ldr	r3, [pc, #20]	; (1d004 <ev_usbevent_handler+0x90>)
   1cff0:	a801      	add	r0, sp, #4
   1cff2:	681b      	ldr	r3, [r3, #0]
   1cff4:	4798      	blx	r3
        }
    }
}
   1cff6:	b002      	add	sp, #8
   1cff8:	bd10      	pop	{r4, pc}
   1cffa:	bf00      	nop
   1cffc:	40027000 	.word	0x40027000
   1d000:	2000612e 	.word	0x2000612e
   1d004:	20006028 	.word	0x20006028

0001d008 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   1d008:	f04f 0320 	mov.w	r3, #32
   1d00c:	f3ef 8011 	mrs	r0, BASEPRI
   1d010:	f383 8812 	msr	BASEPRI_MAX, r3
   1d014:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1d018:	4b0a      	ldr	r3, [pc, #40]	; (1d044 <usbd_errata_187_211_begin+0x3c>)
   1d01a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1d01e:	2203      	movs	r2, #3
   1d020:	b961      	cbnz	r1, 1d03c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d022:	f249 3175 	movw	r1, #37749	; 0x9375
   1d026:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1d02a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d02e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1d032:	f380 8811 	msr	BASEPRI, r0
   1d036:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1d03a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1d03c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   1d040:	e7f7      	b.n	1d032 <usbd_errata_187_211_begin+0x2a>
   1d042:	bf00      	nop
   1d044:	4006e000 	.word	0x4006e000

0001d048 <usbd_errata_187_211_end>:
	__asm__ volatile(
   1d048:	f04f 0320 	mov.w	r3, #32
   1d04c:	f3ef 8011 	mrs	r0, BASEPRI
   1d050:	f383 8812 	msr	BASEPRI_MAX, r3
   1d054:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1d058:	4b0a      	ldr	r3, [pc, #40]	; (1d084 <usbd_errata_187_211_end+0x3c>)
   1d05a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1d05e:	b961      	cbnz	r1, 1d07a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d060:	f249 3275 	movw	r2, #37749	; 0x9375
   1d064:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1d068:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d06c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1d070:	f380 8811 	msr	BASEPRI, r0
   1d074:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1d078:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1d07a:	2200      	movs	r2, #0
   1d07c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   1d080:	e7f6      	b.n	1d070 <usbd_errata_187_211_end+0x28>
   1d082:	bf00      	nop
   1d084:	4006e000 	.word	0x4006e000

0001d088 <nrfx_usbd_feeder_flash>:
{
   1d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   1d08a:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1d08c:	4f0b      	ldr	r7, [pc, #44]	; (1d0bc <nrfx_usbd_feeder_flash+0x34>)
   1d08e:	4295      	cmp	r5, r2
   1d090:	bf28      	it	cs
   1d092:	4615      	movcs	r5, r2
{
   1d094:	460c      	mov	r4, r1
   1d096:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1d098:	462a      	mov	r2, r5
   1d09a:	6809      	ldr	r1, [r1, #0]
   1d09c:	4638      	mov	r0, r7
   1d09e:	f003 fb43 	bl	20728 <memcpy>
    p_transfer->size -= tx_size;
   1d0a2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   1d0a4:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   1d0a6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   1d0a8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   1d0ac:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   1d0ae:	6060      	str	r0, [r4, #4]
}
   1d0b0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   1d0b2:	6022      	str	r2, [r4, #0]
}
   1d0b4:	bf18      	it	ne
   1d0b6:	2001      	movne	r0, #1
   1d0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d0ba:	bf00      	nop
   1d0bc:	2000602c 	.word	0x2000602c

0001d0c0 <nrfx_usbd_feeder_flash_zlp>:
{
   1d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   1d0c2:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   1d0c4:	4294      	cmp	r4, r2
   1d0c6:	bf28      	it	cs
   1d0c8:	4614      	movcs	r4, r2
{
   1d0ca:	4606      	mov	r6, r0
   1d0cc:	460d      	mov	r5, r1
    if (tx_size != 0)
   1d0ce:	b18c      	cbz	r4, 1d0f4 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1d0d0:	4f09      	ldr	r7, [pc, #36]	; (1d0f8 <nrfx_usbd_feeder_flash_zlp+0x38>)
   1d0d2:	6809      	ldr	r1, [r1, #0]
   1d0d4:	4622      	mov	r2, r4
   1d0d6:	4638      	mov	r0, r7
   1d0d8:	f003 fb26 	bl	20728 <memcpy>
        p_next->p_data.tx = p_buffer;
   1d0dc:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   1d0de:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   1d0e0:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   1d0e2:	1b1b      	subs	r3, r3, r4
   1d0e4:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   1d0e6:	682b      	ldr	r3, [r5, #0]
}
   1d0e8:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   1d0ea:	4423      	add	r3, r4
   1d0ec:	602b      	str	r3, [r5, #0]
}
   1d0ee:	bf18      	it	ne
   1d0f0:	2001      	movne	r0, #1
   1d0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   1d0f4:	6004      	str	r4, [r0, #0]
   1d0f6:	e7f2      	b.n	1d0de <nrfx_usbd_feeder_flash_zlp+0x1e>
   1d0f8:	2000602c 	.word	0x2000602c

0001d0fc <ev_sof_handler>:
{
   1d0fc:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   1d0fe:	2300      	movs	r3, #0
   1d100:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   1d104:	4b0b      	ldr	r3, [pc, #44]	; (1d134 <ev_sof_handler+0x38>)
   1d106:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   1d10a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   1d10e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   1d112:	4a09      	ldr	r2, [pc, #36]	; (1d138 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1d114:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   1d116:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1d118:	bf0c      	ite	eq
   1d11a:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1d11e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   1d122:	430b      	orrs	r3, r1
   1d124:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   1d126:	4b05      	ldr	r3, [pc, #20]	; (1d13c <ev_sof_handler+0x40>)
   1d128:	a801      	add	r0, sp, #4
   1d12a:	681b      	ldr	r3, [r3, #0]
   1d12c:	4798      	blx	r3
}
   1d12e:	b003      	add	sp, #12
   1d130:	f85d fb04 	ldr.w	pc, [sp], #4
   1d134:	40027000 	.word	0x40027000
   1d138:	20005f04 	.word	0x20005f04
   1d13c:	20006028 	.word	0x20006028

0001d140 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d140:	4b06      	ldr	r3, [pc, #24]	; (1d15c <atomic_and.constprop.0.isra.0+0x1c>)
   1d142:	f3bf 8f5b 	dmb	ish
   1d146:	e853 2f00 	ldrex	r2, [r3]
   1d14a:	4002      	ands	r2, r0
   1d14c:	e843 2100 	strex	r1, r2, [r3]
   1d150:	2900      	cmp	r1, #0
   1d152:	d1f8      	bne.n	1d146 <atomic_and.constprop.0.isra.0+0x6>
   1d154:	f3bf 8f5b 	dmb	ish
}
   1d158:	4770      	bx	lr
   1d15a:	bf00      	nop
   1d15c:	20005e94 	.word	0x20005e94

0001d160 <nrf_usbd_ep0in_dma_handler>:
{
   1d160:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   1d162:	f7ff fedd 	bl	1cf20 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d166:	4b08      	ldr	r3, [pc, #32]	; (1d188 <nrf_usbd_ep0in_dma_handler+0x28>)
   1d168:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   1d16c:	2a03      	cmp	r2, #3
   1d16e:	d105      	bne.n	1d17c <nrf_usbd_ep0in_dma_handler+0x1c>
}
   1d170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d174:	f06f 0001 	mvn.w	r0, #1
   1d178:	f7ff bfe2 	b.w	1d140 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   1d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1d180:	2b00      	cmp	r3, #0
   1d182:	d0f5      	beq.n	1d170 <nrf_usbd_ep0in_dma_handler+0x10>
}
   1d184:	bd08      	pop	{r3, pc}
   1d186:	bf00      	nop
   1d188:	20005f08 	.word	0x20005f08

0001d18c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   1d18c:	2201      	movs	r2, #1
{
   1d18e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   1d190:	fa02 f501 	lsl.w	r5, r2, r1
   1d194:	491c      	ldr	r1, [pc, #112]	; (1d208 <usbd_ep_data_handler+0x7c>)
   1d196:	4e1d      	ldr	r6, [pc, #116]	; (1d20c <usbd_ep_data_handler+0x80>)
   1d198:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1d19a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   1d19e:	ea43 0305 	orr.w	r3, r3, r5
{
   1d1a2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   1d1a4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1d1a6:	d024      	beq.n	1d1f2 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1d1a8:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d1ac:	4b18      	ldr	r3, [pc, #96]	; (1d210 <usbd_ep_data_handler+0x84>)
   1d1ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d1b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1b6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d1ba:	681a      	ldr	r2, [r3, #0]
    if (ret)
   1d1bc:	b132      	cbz	r2, 1d1cc <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1d1be:	2200      	movs	r2, #0
   1d1c0:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   1d1c2:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1d1c4:	681b      	ldr	r3, [r3, #0]
   1d1c6:	d011      	beq.n	1d1ec <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   1d1c8:	f006 fd50 	bl	23c6c <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1d1cc:	6831      	ldr	r1, [r6, #0]
   1d1ce:	4029      	ands	r1, r5
   1d1d0:	d10a      	bne.n	1d1e8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d1d2:	2306      	movs	r3, #6
   1d1d4:	f88d 3004 	strb.w	r3, [sp, #4]
   1d1d8:	f88d 4006 	strb.w	r4, [sp, #6]
   1d1dc:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   1d1e0:	4b0c      	ldr	r3, [pc, #48]	; (1d214 <usbd_ep_data_handler+0x88>)
   1d1e2:	a801      	add	r0, sp, #4
   1d1e4:	681b      	ldr	r3, [r3, #0]
   1d1e6:	4798      	blx	r3
}
   1d1e8:	b002      	add	sp, #8
   1d1ea:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   1d1ec:	f7ff ffb8 	bl	1d160 <nrf_usbd_ep0in_dma_handler>
   1d1f0:	e7ec      	b.n	1d1cc <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1d1f2:	6833      	ldr	r3, [r6, #0]
   1d1f4:	421d      	tst	r5, r3
   1d1f6:	d1f7      	bne.n	1d1e8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   1d1f8:	2306      	movs	r3, #6
   1d1fa:	f88d 3004 	strb.w	r3, [sp, #4]
   1d1fe:	f88d 0006 	strb.w	r0, [sp, #6]
   1d202:	f88d 2007 	strb.w	r2, [sp, #7]
   1d206:	e7eb      	b.n	1d1e0 <usbd_ep_data_handler+0x54>
   1d208:	20005f04 	.word	0x20005f04
   1d20c:	20005e94 	.word	0x20005e94
   1d210:	000261e2 	.word	0x000261e2
   1d214:	20006028 	.word	0x20006028

0001d218 <ev_setup_data_handler>:
{
   1d218:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1d21a:	4b05      	ldr	r3, [pc, #20]	; (1d230 <ev_setup_data_handler+0x18>)
   1d21c:	781a      	ldrb	r2, [r3, #0]
   1d21e:	4610      	mov	r0, r2
   1d220:	f006 fd1a 	bl	23c58 <ep2bit>
}
   1d224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1d228:	4601      	mov	r1, r0
   1d22a:	4610      	mov	r0, r2
   1d22c:	f7ff bfae 	b.w	1d18c <usbd_ep_data_handler>
   1d230:	20006131 	.word	0x20006131

0001d234 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1d234:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1d236:	f7ff fe73 	bl	1cf20 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d23a:	4b0c      	ldr	r3, [pc, #48]	; (1d26c <ev_dma_epout8_handler+0x38>)
   1d23c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   1d240:	2a03      	cmp	r2, #3
   1d242:	d010      	beq.n	1d266 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   1d244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1d248:	b96b      	cbnz	r3, 1d266 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d24a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   1d24e:	f7ff ff77 	bl	1d140 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d252:	2306      	movs	r3, #6
   1d254:	f88d 3004 	strb.w	r3, [sp, #4]
   1d258:	2308      	movs	r3, #8
   1d25a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1d25e:	4b04      	ldr	r3, [pc, #16]	; (1d270 <ev_dma_epout8_handler+0x3c>)
   1d260:	a801      	add	r0, sp, #4
   1d262:	681b      	ldr	r3, [r3, #0]
   1d264:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1d266:	b003      	add	sp, #12
   1d268:	f85d fb04 	ldr.w	pc, [sp], #4
   1d26c:	20005f08 	.word	0x20005f08
   1d270:	20006028 	.word	0x20006028

0001d274 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1d274:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1d276:	f7ff fe53 	bl	1cf20 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d27a:	4b10      	ldr	r3, [pc, #64]	; (1d2bc <ev_dma_epin8_handler+0x48>)
   1d27c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   1d280:	2a03      	cmp	r2, #3
   1d282:	d106      	bne.n	1d292 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d284:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1d288:	b003      	add	sp, #12
   1d28a:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d28e:	f7ff bf57 	b.w	1d140 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   1d292:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1d296:	b96b      	cbnz	r3, 1d2b4 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d298:	f46f 7080 	mvn.w	r0, #256	; 0x100
   1d29c:	f7ff ff50 	bl	1d140 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d2a0:	2306      	movs	r3, #6
   1d2a2:	f88d 3004 	strb.w	r3, [sp, #4]
   1d2a6:	2388      	movs	r3, #136	; 0x88
   1d2a8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1d2ac:	4b04      	ldr	r3, [pc, #16]	; (1d2c0 <ev_dma_epin8_handler+0x4c>)
   1d2ae:	a801      	add	r0, sp, #4
   1d2b0:	681b      	ldr	r3, [r3, #0]
   1d2b2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1d2b4:	b003      	add	sp, #12
   1d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2ba:	bf00      	nop
   1d2bc:	20005f08 	.word	0x20005f08
   1d2c0:	20006028 	.word	0x20006028

0001d2c4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1d2c4:	4a02      	ldr	r2, [pc, #8]	; (1d2d0 <nrfx_usbd_uninit+0xc>)
   1d2c6:	2300      	movs	r3, #0
   1d2c8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   1d2ca:	4a02      	ldr	r2, [pc, #8]	; (1d2d4 <nrfx_usbd_uninit+0x10>)
   1d2cc:	7013      	strb	r3, [r2, #0]
    return;
}
   1d2ce:	4770      	bx	lr
   1d2d0:	20006028 	.word	0x20006028
   1d2d4:	20006130 	.word	0x20006130

0001d2d8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   1d2d8:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   1d2da:	4b48      	ldr	r3, [pc, #288]	; (1d3fc <nrfx_usbd_enable+0x124>)
   1d2dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d2e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1d2e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1d2e8:	f7ff fdf8 	bl	1cedc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1d2ec:	b108      	cbz	r0, 1d2f2 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   1d2ee:	f7ff fe8b 	bl	1d008 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   1d2f2:	f006 fc6b 	bl	23bcc <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1d2f6:	b1c8      	cbz	r0, 1d32c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   1d2f8:	f04f 0320 	mov.w	r3, #32
   1d2fc:	f3ef 8011 	mrs	r0, BASEPRI
   1d300:	f383 8812 	msr	BASEPRI_MAX, r3
   1d304:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1d308:	4b3d      	ldr	r3, [pc, #244]	; (1d400 <nrfx_usbd_enable+0x128>)
   1d30a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1d30e:	22c0      	movs	r2, #192	; 0xc0
   1d310:	2900      	cmp	r1, #0
   1d312:	d16a      	bne.n	1d3ea <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d314:	f249 3175 	movw	r1, #37749	; 0x9375
   1d318:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1d31c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d320:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1d324:	f380 8811 	msr	BASEPRI, r0
   1d328:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   1d32c:	4b33      	ldr	r3, [pc, #204]	; (1d3fc <nrfx_usbd_enable+0x124>)
   1d32e:	2201      	movs	r2, #1
   1d330:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1d334:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   1d338:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   1d33c:	0512      	lsls	r2, r2, #20
   1d33e:	d5fb      	bpl.n	1d338 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   1d340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d344:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1d348:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1d34c:	f006 fc3e 	bl	23bcc <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1d350:	b1c0      	cbz	r0, 1d384 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   1d352:	f04f 0320 	mov.w	r3, #32
   1d356:	f3ef 8011 	mrs	r0, BASEPRI
   1d35a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d35e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1d362:	4b27      	ldr	r3, [pc, #156]	; (1d400 <nrfx_usbd_enable+0x128>)
   1d364:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   1d368:	2900      	cmp	r1, #0
   1d36a:	d141      	bne.n	1d3f0 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d36c:	f249 3275 	movw	r2, #37749	; 0x9375
   1d370:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1d374:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1d378:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1d37c:	f380 8811 	msr	BASEPRI, r0
   1d380:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1d384:	f7ff fdaa 	bl	1cedc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1d388:	b130      	cbz	r0, 1d398 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   1d38a:	f7ff fe5d 	bl	1d048 <usbd_errata_187_211_end>
   1d38e:	f7ff fda5 	bl	1cedc <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1d392:	b108      	cbz	r0, 1d398 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   1d394:	f7ff fe38 	bl	1d008 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   1d398:	f006 fc18 	bl	23bcc <nrf52_errata_166>
   1d39c:	4b17      	ldr	r3, [pc, #92]	; (1d3fc <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   1d39e:	b150      	cbz	r0, 1d3b6 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1d3a0:	f240 72e3 	movw	r2, #2019	; 0x7e3
   1d3a4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   1d3a8:	2240      	movs	r2, #64	; 0x40
   1d3aa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   1d3ae:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1d3b2:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1d3b6:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1d3b8:	2280      	movs	r2, #128	; 0x80
   1d3ba:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1d3be:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1d3c2:	4b10      	ldr	r3, [pc, #64]	; (1d404 <nrfx_usbd_enable+0x12c>)
   1d3c4:	f240 12ff 	movw	r2, #511	; 0x1ff
   1d3c8:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   1d3ca:	4b0f      	ldr	r3, [pc, #60]	; (1d408 <nrfx_usbd_enable+0x130>)
   1d3cc:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   1d3ce:	f7ff fda7 	bl	1cf20 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1d3d2:	4b0e      	ldr	r3, [pc, #56]	; (1d40c <nrfx_usbd_enable+0x134>)
   1d3d4:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   1d3d6:	4b0e      	ldr	r3, [pc, #56]	; (1d410 <nrfx_usbd_enable+0x138>)
   1d3d8:	2202      	movs	r2, #2
   1d3da:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1d3dc:	f7ff fd7e 	bl	1cedc <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1d3e0:	b150      	cbz	r0, 1d3f8 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   1d3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   1d3e6:	f7ff be2f 	b.w	1d048 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1d3ea:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   1d3ee:	e799      	b.n	1d324 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1d3f0:	2200      	movs	r2, #0
   1d3f2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   1d3f6:	e7c1      	b.n	1d37c <nrfx_usbd_enable+0xa4>
}
   1d3f8:	bd08      	pop	{r3, pc}
   1d3fa:	bf00      	nop
   1d3fc:	40027000 	.word	0x40027000
   1d400:	4006e000 	.word	0x4006e000
   1d404:	20005f04 	.word	0x20005f04
   1d408:	20005e94 	.word	0x20005e94
   1d40c:	20006131 	.word	0x20006131
   1d410:	20006130 	.word	0x20006130

0001d414 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   1d414:	4b0a      	ldr	r3, [pc, #40]	; (1d440 <nrfx_usbd_start+0x2c>)
   1d416:	2200      	movs	r2, #0
{
   1d418:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   1d41a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   1d41c:	4a09      	ldr	r2, [pc, #36]	; (1d444 <nrfx_usbd_start+0x30>)
   1d41e:	4b0a      	ldr	r3, [pc, #40]	; (1d448 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   1d420:	4c0a      	ldr	r4, [pc, #40]	; (1d44c <nrfx_usbd_start+0x38>)
   1d422:	2800      	cmp	r0, #0
   1d424:	bf18      	it	ne
   1d426:	4613      	movne	r3, r2
   1d428:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   1d42c:	2027      	movs	r0, #39	; 0x27
   1d42e:	f7e8 fca5 	bl	5d7c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   1d432:	2301      	movs	r3, #1
   1d434:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   1d438:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   1d43c:	bd10      	pop	{r4, pc}
   1d43e:	bf00      	nop
   1d440:	2000612e 	.word	0x2000612e
   1d444:	01e01407 	.word	0x01e01407
   1d448:	01c01407 	.word	0x01c01407
   1d44c:	40027000 	.word	0x40027000

0001d450 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   1d450:	4b03      	ldr	r3, [pc, #12]	; (1d460 <nrfx_usbd_is_enabled+0x10>)
   1d452:	7818      	ldrb	r0, [r3, #0]
}
   1d454:	2801      	cmp	r0, #1
   1d456:	bf94      	ite	ls
   1d458:	2000      	movls	r0, #0
   1d45a:	2001      	movhi	r0, #1
   1d45c:	4770      	bx	lr
   1d45e:	bf00      	nop
   1d460:	20006130 	.word	0x20006130

0001d464 <nrfx_usbd_init>:
{
   1d464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   1d468:	4b1d      	ldr	r3, [pc, #116]	; (1d4e0 <nrfx_usbd_init+0x7c>)
   1d46a:	781c      	ldrb	r4, [r3, #0]
   1d46c:	2c00      	cmp	r4, #0
   1d46e:	d135      	bne.n	1d4dc <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   1d470:	4a1c      	ldr	r2, [pc, #112]	; (1d4e4 <nrfx_usbd_init+0x80>)
   1d472:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1d474:	2201      	movs	r2, #1
   1d476:	701a      	strb	r2, [r3, #0]
   1d478:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d47a:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   1d47e:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1d480:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d484:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1d488:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d48a:	bf14      	ite	ne
   1d48c:	4641      	movne	r1, r8
   1d48e:	2140      	moveq	r1, #64	; 0x40
   1d490:	4630      	mov	r0, r6
   1d492:	f006 fc1b 	bl	23ccc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1d496:	4630      	mov	r0, r6
   1d498:	f7ff fd34 	bl	1cf04 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1d49c:	3501      	adds	r5, #1
   1d49e:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   1d4a0:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   1d4a2:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   1d4a4:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1d4a6:	d1eb      	bne.n	1d480 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d4a8:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   1d4aa:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d4ac:	f240 16ff 	movw	r6, #511	; 0x1ff
   1d4b0:	4620      	mov	r0, r4
   1d4b2:	f006 fc0b 	bl	23ccc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	f7ff fd24 	bl	1cf04 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1d4bc:	3401      	adds	r4, #1
   1d4be:	b2e4      	uxtb	r4, r4
   1d4c0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   1d4c2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   1d4c4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   1d4c6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1d4c8:	d102      	bne.n	1d4d0 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   1d4ca:	4807      	ldr	r0, [pc, #28]	; (1d4e8 <nrfx_usbd_init+0x84>)
}
   1d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1d4d0:	f014 0f08 	tst.w	r4, #8
   1d4d4:	bf14      	ite	ne
   1d4d6:	4631      	movne	r1, r6
   1d4d8:	2140      	moveq	r1, #64	; 0x40
   1d4da:	e7e9      	b.n	1d4b0 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   1d4dc:	4803      	ldr	r0, [pc, #12]	; (1d4ec <nrfx_usbd_init+0x88>)
   1d4de:	e7f5      	b.n	1d4cc <nrfx_usbd_init+0x68>
   1d4e0:	20006130 	.word	0x20006130
   1d4e4:	20006028 	.word	0x20006028
   1d4e8:	0bad0000 	.word	0x0bad0000
   1d4ec:	0bad0005 	.word	0x0bad0005

0001d4f0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   1d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4f4:	4605      	mov	r5, r0
	__asm__ volatile(
   1d4f6:	f04f 0320 	mov.w	r3, #32
   1d4fa:	f3ef 8811 	mrs	r8, BASEPRI
   1d4fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d502:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   1d506:	f010 040f 	ands.w	r4, r0, #15
   1d50a:	d103      	bne.n	1d514 <nrfx_usbd_ep_transfer+0x24>
   1d50c:	4b27      	ldr	r3, [pc, #156]	; (1d5ac <nrfx_usbd_ep_transfer+0xbc>)
   1d50e:	781b      	ldrb	r3, [r3, #0]
   1d510:	4283      	cmp	r3, r0
   1d512:	d146      	bne.n	1d5a2 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1d514:	4b26      	ldr	r3, [pc, #152]	; (1d5b0 <nrfx_usbd_ep_transfer+0xc0>)
   1d516:	4f27      	ldr	r7, [pc, #156]	; (1d5b4 <nrfx_usbd_ep_transfer+0xc4>)
   1d518:	681a      	ldr	r2, [r3, #0]
   1d51a:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   1d51c:	4628      	mov	r0, r5
   1d51e:	f006 fb9b 	bl	23c58 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1d522:	43d2      	mvns	r2, r2
   1d524:	b292      	uxth	r2, r2
   1d526:	f04f 0901 	mov.w	r9, #1
   1d52a:	4332      	orrs	r2, r6
   1d52c:	fa09 f900 	lsl.w	r9, r9, r0
   1d530:	ea12 0f09 	tst.w	r2, r9
   1d534:	d137      	bne.n	1d5a6 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1d536:	4628      	mov	r0, r5
   1d538:	f7ff fce4 	bl	1cf04 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1d53c:	220c      	movs	r2, #12
   1d53e:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   1d540:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1d542:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   1d544:	d529      	bpl.n	1d59a <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1d546:	4a1c      	ldr	r2, [pc, #112]	; (1d5b8 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d548:	6808      	ldr	r0, [r1, #0]
   1d54a:	4414      	add	r4, r2
   1d54c:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d550:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1d552:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d556:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1d55a:	d119      	bne.n	1d590 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d55c:	b9b2      	cbnz	r2, 1d58c <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   1d55e:	4a17      	ldr	r2, [pc, #92]	; (1d5bc <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   1d560:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   1d562:	c907      	ldmia	r1, {r0, r1, r2}
   1d564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   1d568:	2200      	movs	r2, #0
   1d56a:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   1d56c:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   1d56e:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d570:	4b13      	ldr	r3, [pc, #76]	; (1d5c0 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   1d572:	4814      	ldr	r0, [pc, #80]	; (1d5c4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   1d574:	ea46 0609 	orr.w	r6, r6, r9
   1d578:	2280      	movs	r2, #128	; 0x80
   1d57a:	603e      	str	r6, [r7, #0]
   1d57c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   1d580:	f388 8811 	msr	BASEPRI, r8
   1d584:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   1d588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   1d58c:	4a0e      	ldr	r2, [pc, #56]	; (1d5c8 <nrfx_usbd_ep_transfer+0xd8>)
   1d58e:	e7e7      	b.n	1d560 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d590:	b90a      	cbnz	r2, 1d596 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   1d592:	4a0e      	ldr	r2, [pc, #56]	; (1d5cc <nrfx_usbd_ep_transfer+0xdc>)
   1d594:	e7e4      	b.n	1d560 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   1d596:	4a0e      	ldr	r2, [pc, #56]	; (1d5d0 <nrfx_usbd_ep_transfer+0xe0>)
   1d598:	e7e2      	b.n	1d560 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   1d59a:	4a0e      	ldr	r2, [pc, #56]	; (1d5d4 <nrfx_usbd_ep_transfer+0xe4>)
   1d59c:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   1d59e:	4a0e      	ldr	r2, [pc, #56]	; (1d5d8 <nrfx_usbd_ep_transfer+0xe8>)
   1d5a0:	e7de      	b.n	1d560 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   1d5a2:	480e      	ldr	r0, [pc, #56]	; (1d5dc <nrfx_usbd_ep_transfer+0xec>)
   1d5a4:	e7ec      	b.n	1d580 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   1d5a6:	480e      	ldr	r0, [pc, #56]	; (1d5e0 <nrfx_usbd_ep_transfer+0xf0>)
   1d5a8:	e7ea      	b.n	1d580 <nrfx_usbd_ep_transfer+0x90>
   1d5aa:	bf00      	nop
   1d5ac:	20006131 	.word	0x20006131
   1d5b0:	20005f04 	.word	0x20005f04
   1d5b4:	20005e94 	.word	0x20005e94
   1d5b8:	20005e98 	.word	0x20005e98
   1d5bc:	00023c0d 	.word	0x00023c0d
   1d5c0:	e000e100 	.word	0xe000e100
   1d5c4:	0bad0000 	.word	0x0bad0000
   1d5c8:	00023c2f 	.word	0x00023c2f
   1d5cc:	0001d089 	.word	0x0001d089
   1d5d0:	0001d0c1 	.word	0x0001d0c1
   1d5d4:	20005e28 	.word	0x20005e28
   1d5d8:	00023bdf 	.word	0x00023bdf
   1d5dc:	0bad000a 	.word	0x0bad000a
   1d5e0:	0bad000b 	.word	0x0bad000b

0001d5e4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1d5e4:	f010 0f08 	tst.w	r0, #8
   1d5e8:	4b07      	ldr	r3, [pc, #28]	; (1d608 <nrfx_usbd_epout_size_get+0x24>)
   1d5ea:	d006      	beq.n	1d5fa <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   1d5ec:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   1d5f0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1d5f4:	bf18      	it	ne
   1d5f6:	2000      	movne	r0, #0
   1d5f8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1d5fa:	f000 000f 	and.w	r0, r0, #15
   1d5fe:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1d602:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   1d606:	4770      	bx	lr
   1d608:	40027000 	.word	0x40027000

0001d60c <usbd_dmareq_process>:
{
   1d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   1d610:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1d770 <usbd_dmareq_process+0x164>
   1d614:	f898 3000 	ldrb.w	r3, [r8]
{
   1d618:	b085      	sub	sp, #20
    if (!m_dma_pending)
   1d61a:	2b00      	cmp	r3, #0
   1d61c:	d16b      	bne.n	1d6f6 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   1d61e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1d774 <usbd_dmareq_process+0x168>
   1d622:	4e55      	ldr	r6, [pc, #340]	; (1d778 <usbd_dmareq_process+0x16c>)
   1d624:	f8d9 1000 	ldr.w	r1, [r9]
   1d628:	6833      	ldr	r3, [r6, #0]
   1d62a:	4019      	ands	r1, r3
   1d62c:	d063      	beq.n	1d6f6 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   1d62e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   1d632:	bf14      	ite	ne
   1d634:	fa93 f1a3 	rbitne	r1, r3
   1d638:	fa91 f1a1 	rbiteq	r1, r1
   1d63c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d640:	290f      	cmp	r1, #15
   1d642:	bf8a      	itet	hi
   1d644:	f1a1 0410 	subhi.w	r4, r1, #16
   1d648:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   1d64c:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1d64e:	4620      	mov	r0, r4
   1d650:	f7ff fc58 	bl	1cf04 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d654:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   1d658:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d65c:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   1d660:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1d664:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d666:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   1d66a:	da47      	bge.n	1d6fc <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   1d66c:	6803      	ldr	r3, [r0, #0]
   1d66e:	8982      	ldrh	r2, [r0, #12]
   1d670:	6841      	ldr	r1, [r0, #4]
   1d672:	a802      	add	r0, sp, #8
   1d674:	4798      	blx	r3
                if (!continue_transfer)
   1d676:	b900      	cbnz	r0, 1d67a <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   1d678:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1d67a:	f006 faa7 	bl	23bcc <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1d67e:	b118      	cbz	r0, 1d688 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   1d680:	4b3e      	ldr	r3, [pc, #248]	; (1d77c <usbd_dmareq_process+0x170>)
   1d682:	2282      	movs	r2, #130	; 0x82
   1d684:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   1d688:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   1d68a:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   1d68c:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   1d68e:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   1d692:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   1d694:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   1d698:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   1d69a:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   1d69e:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   1d6a0:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   1d6a2:	f004 0008 	and.w	r0, r4, #8
   1d6a6:	9902      	ldr	r1, [sp, #8]
   1d6a8:	4b34      	ldr	r3, [pc, #208]	; (1d77c <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1d6aa:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1d6ae:	da4f      	bge.n	1d750 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   1d6b0:	2800      	cmp	r0, #0
   1d6b2:	d045      	beq.n	1d740 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   1d6b4:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   1d6b8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   1d6bc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d6be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d6c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d6c6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d6ca:	2201      	movs	r2, #1
   1d6cc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d6ce:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1d6d0:	4a2b      	ldr	r2, [pc, #172]	; (1d780 <usbd_dmareq_process+0x174>)
   1d6d2:	4b2c      	ldr	r3, [pc, #176]	; (1d784 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d6d4:	4929      	ldr	r1, [pc, #164]	; (1d77c <usbd_dmareq_process+0x170>)
   1d6d6:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   1d6da:	bf38      	it	cc
   1d6dc:	4613      	movcc	r3, r2
   1d6de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d6e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d6e6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d6ea:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   1d6ec:	b91a      	cbnz	r2, 1d6f6 <usbd_dmareq_process+0xea>
   1d6ee:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   1d6f2:	2a00      	cmp	r2, #0
   1d6f4:	d0f9      	beq.n	1d6ea <usbd_dmareq_process+0xde>
}
   1d6f6:	b005      	add	sp, #20
   1d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1d6fc:	4620      	mov	r0, r4
   1d6fe:	f7ff ff71 	bl	1d5e4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   1d702:	89aa      	ldrh	r2, [r5, #12]
   1d704:	6869      	ldr	r1, [r5, #4]
   1d706:	f8d5 c000 	ldr.w	ip, [r5]
   1d70a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1d70c:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   1d70e:	a802      	add	r0, sp, #8
   1d710:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   1d712:	9a02      	ldr	r2, [sp, #8]
   1d714:	2a00      	cmp	r2, #0
   1d716:	d0ae      	beq.n	1d676 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   1d718:	9a03      	ldr	r2, [sp, #12]
   1d71a:	4297      	cmp	r7, r2
   1d71c:	d9ab      	bls.n	1d676 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1d71e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d720:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1d722:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d724:	f7ff fd0c 	bl	1d140 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d728:	2306      	movs	r3, #6
   1d72a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   1d72e:	4b16      	ldr	r3, [pc, #88]	; (1d788 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d730:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   1d734:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d736:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   1d73a:	a801      	add	r0, sp, #4
   1d73c:	4798      	blx	r3
                    continue;
   1d73e:	e771      	b.n	1d624 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   1d740:	2014      	movs	r0, #20
   1d742:	fb00 3304 	mla	r3, r0, r4, r3
   1d746:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   1d74a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   1d74e:	e7b5      	b.n	1d6bc <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   1d750:	b128      	cbz	r0, 1d75e <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   1d752:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   1d756:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   1d75a:	2328      	movs	r3, #40	; 0x28
   1d75c:	e7af      	b.n	1d6be <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   1d75e:	2014      	movs	r0, #20
   1d760:	fb00 3304 	mla	r3, r0, r4, r3
   1d764:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   1d768:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   1d76c:	e7f5      	b.n	1d75a <usbd_dmareq_process+0x14e>
   1d76e:	bf00      	nop
   1d770:	2000612f 	.word	0x2000612f
   1d774:	20005e94 	.word	0x20005e94
   1d778:	20005f04 	.word	0x20005f04
   1d77c:	40027000 	.word	0x40027000
   1d780:	000261f4 	.word	0x000261f4
   1d784:	000261e2 	.word	0x000261e2
   1d788:	20006028 	.word	0x20006028

0001d78c <ev_epdata_handler>:
{
   1d78c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   1d78e:	4b0f      	ldr	r3, [pc, #60]	; (1d7cc <ev_epdata_handler+0x40>)
   1d790:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   1d794:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   1d798:	2501      	movs	r5, #1
    while (dataepstatus)
   1d79a:	b91c      	cbnz	r4, 1d7a4 <ev_epdata_handler+0x18>
}
   1d79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   1d7a0:	f7ff bf34 	b.w	1d60c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   1d7a4:	fa94 f3a4 	rbit	r3, r4
   1d7a8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d7ac:	2b0f      	cmp	r3, #15
   1d7ae:	bfc8      	it	gt
   1d7b0:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   1d7b4:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d7b6:	bfd4      	ite	le
   1d7b8:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   1d7bc:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   1d7be:	fa05 f303 	lsl.w	r3, r5, r3
   1d7c2:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   1d7c6:	f7ff fce1 	bl	1d18c <usbd_ep_data_handler>
   1d7ca:	e7e6      	b.n	1d79a <ev_epdata_handler+0xe>
   1d7cc:	40027000 	.word	0x40027000

0001d7d0 <nrf_usbd_epout_dma_handler>:
{
   1d7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7d2:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   1d7d4:	f7ff fba4 	bl	1cf20 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1d7d8:	4620      	mov	r0, r4
   1d7da:	f7ff fb93 	bl	1cf04 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d7de:	7b83      	ldrb	r3, [r0, #14]
   1d7e0:	2b03      	cmp	r3, #3
   1d7e2:	d10d      	bne.n	1d800 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d7e4:	4620      	mov	r0, r4
   1d7e6:	f006 fa37 	bl	23c58 <ep2bit>
   1d7ea:	2301      	movs	r3, #1
   1d7ec:	fa03 f000 	lsl.w	r0, r3, r0
   1d7f0:	43c0      	mvns	r0, r0
   1d7f2:	f7ff fca5 	bl	1d140 <atomic_and.constprop.0.isra.0>
}
   1d7f6:	b003      	add	sp, #12
   1d7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   1d7fc:	f7ff bf06 	b.w	1d60c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   1d800:	6805      	ldr	r5, [r0, #0]
   1d802:	2d00      	cmp	r5, #0
   1d804:	d1f7      	bne.n	1d7f6 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d806:	4620      	mov	r0, r4
   1d808:	f006 fa26 	bl	23c58 <ep2bit>
   1d80c:	2301      	movs	r3, #1
   1d80e:	fa03 f000 	lsl.w	r0, r3, r0
   1d812:	43c0      	mvns	r0, r0
   1d814:	f7ff fc94 	bl	1d140 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d818:	2306      	movs	r3, #6
   1d81a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1d81e:	4b04      	ldr	r3, [pc, #16]	; (1d830 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d820:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   1d824:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d826:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   1d82a:	a801      	add	r0, sp, #4
   1d82c:	4798      	blx	r3
   1d82e:	e7e2      	b.n	1d7f6 <nrf_usbd_epout_dma_handler+0x26>
   1d830:	20006028 	.word	0x20006028

0001d834 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   1d834:	4b02      	ldr	r3, [pc, #8]	; (1d840 <nrfx_usbd_ep_stall+0xc>)
   1d836:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1d83a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   1d83e:	4770      	bx	lr
   1d840:	40027000 	.word	0x40027000

0001d844 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1d844:	0702      	lsls	r2, r0, #28
   1d846:	d413      	bmi.n	1d870 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   1d848:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1d84c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1d850:	4a08      	ldr	r2, [pc, #32]	; (1d874 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   1d852:	bf0b      	itete	eq
   1d854:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   1d858:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   1d85c:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   1d860:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   1d864:	bf08      	it	eq
   1d866:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   1d868:	1e43      	subs	r3, r0, #1
   1d86a:	4258      	negs	r0, r3
   1d86c:	4158      	adcs	r0, r3
   1d86e:	4770      	bx	lr
        return false;
   1d870:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   1d872:	4770      	bx	lr
   1d874:	40027000 	.word	0x40027000

0001d878 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   1d878:	4b04      	ldr	r3, [pc, #16]	; (1d88c <nrfx_usbd_ep_dtoggle_clear+0x14>)
   1d87a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   1d87e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1d882:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   1d886:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   1d88a:	4770      	bx	lr
   1d88c:	40027000 	.word	0x40027000

0001d890 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   1d890:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1d892:	2208      	movs	r2, #8
   1d894:	2100      	movs	r1, #0
{
   1d896:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1d898:	f002 ff51 	bl	2073e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1d89c:	4b0e      	ldr	r3, [pc, #56]	; (1d8d8 <nrfx_usbd_setup_get+0x48>)
   1d89e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1d8a2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1d8a4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1d8a8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   1d8aa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1d8ae:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1d8b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1d8b6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   1d8b8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1d8bc:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1d8c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   1d8c4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1d8c6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1d8ca:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1d8ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   1d8d2:	80e3      	strh	r3, [r4, #6]
}
   1d8d4:	bd10      	pop	{r4, pc}
   1d8d6:	bf00      	nop
   1d8d8:	40027000 	.word	0x40027000

0001d8dc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d8dc:	4b02      	ldr	r3, [pc, #8]	; (1d8e8 <nrfx_usbd_setup_data_clear+0xc>)
   1d8de:	2201      	movs	r2, #1
   1d8e0:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   1d8e4:	4770      	bx	lr
   1d8e6:	bf00      	nop
   1d8e8:	40027000 	.word	0x40027000

0001d8ec <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d8ec:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   1d8ee:	f7ff fb17 	bl	1cf20 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d8f2:	4b10      	ldr	r3, [pc, #64]	; (1d934 <ev_dma_epout0_handler+0x48>)
   1d8f4:	7b9a      	ldrb	r2, [r3, #14]
   1d8f6:	2a03      	cmp	r2, #3
   1d8f8:	d106      	bne.n	1d908 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d8fa:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d8fe:	b002      	add	sp, #8
   1d900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d904:	f7ff bc1c 	b.w	1d140 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   1d908:	681c      	ldr	r4, [r3, #0]
   1d90a:	b974      	cbnz	r4, 1d92a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d90c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   1d910:	f7ff fc16 	bl	1d140 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d914:	2306      	movs	r3, #6
   1d916:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1d91a:	4b07      	ldr	r3, [pc, #28]	; (1d938 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d91c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   1d920:	681b      	ldr	r3, [r3, #0]
   1d922:	a801      	add	r0, sp, #4
   1d924:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d926:	b002      	add	sp, #8
   1d928:	bd10      	pop	{r4, pc}
   1d92a:	b002      	add	sp, #8
   1d92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   1d930:	f7ff bfd4 	b.w	1d8dc <nrfx_usbd_setup_data_clear>
   1d934:	20005f08 	.word	0x20005f08
   1d938:	20006028 	.word	0x20006028

0001d93c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d93c:	4b02      	ldr	r3, [pc, #8]	; (1d948 <nrfx_usbd_setup_clear+0xc>)
   1d93e:	2201      	movs	r2, #1
   1d940:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d942:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   1d944:	4770      	bx	lr
   1d946:	bf00      	nop
   1d948:	40027000 	.word	0x40027000

0001d94c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d94c:	4b02      	ldr	r3, [pc, #8]	; (1d958 <nrfx_usbd_setup_stall+0xc>)
   1d94e:	2201      	movs	r2, #1
   1d950:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d952:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   1d954:	4770      	bx	lr
   1d956:	bf00      	nop
   1d958:	40027000 	.word	0x40027000

0001d95c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   1d95c:	4b01      	ldr	r3, [pc, #4]	; (1d964 <nrfx_usbd_last_setup_dir_get+0x8>)
   1d95e:	7818      	ldrb	r0, [r3, #0]
   1d960:	4770      	bx	lr
   1d962:	bf00      	nop
   1d964:	20006131 	.word	0x20006131

0001d968 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   1d968:	b510      	push	{r4, lr}
   1d96a:	4602      	mov	r2, r0
	__asm__ volatile(
   1d96c:	f04f 0320 	mov.w	r3, #32
   1d970:	f3ef 8411 	mrs	r4, BASEPRI
   1d974:	f383 8812 	msr	BASEPRI_MAX, r3
   1d978:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   1d97c:	f006 f96c 	bl	23c58 <ep2bit>
   1d980:	490d      	ldr	r1, [pc, #52]	; (1d9b8 <nrfx_usbd_transfer_out_drop+0x50>)
   1d982:	2301      	movs	r3, #1
   1d984:	fa03 f000 	lsl.w	r0, r3, r0
   1d988:	680b      	ldr	r3, [r1, #0]
   1d98a:	ea23 0300 	bic.w	r3, r3, r0
   1d98e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   1d990:	f012 0108 	ands.w	r1, r2, #8
   1d994:	d10a      	bne.n	1d9ac <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   1d996:	f002 030f 	and.w	r3, r2, #15
   1d99a:	009b      	lsls	r3, r3, #2
   1d99c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d9a0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1d9a4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1d9a8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   1d9ac:	f384 8811 	msr	BASEPRI, r4
   1d9b0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1d9b4:	bd10      	pop	{r4, pc}
   1d9b6:	bf00      	nop
   1d9b8:	20005f04 	.word	0x20005f04

0001d9bc <usbd_ep_abort>:
{
   1d9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d9be:	4601      	mov	r1, r0
	__asm__ volatile(
   1d9c0:	f04f 0320 	mov.w	r3, #32
   1d9c4:	f3ef 8511 	mrs	r5, BASEPRI
   1d9c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9cc:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1d9d0:	f7ff fa98 	bl	1cf04 <ep_state_access>
   1d9d4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1d9d6:	4608      	mov	r0, r1
   1d9d8:	f006 f93e 	bl	23c58 <ep2bit>
   1d9dc:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   1d9de:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1d9e2:	fa02 f200 	lsl.w	r2, r2, r0
   1d9e6:	482e      	ldr	r0, [pc, #184]	; (1daa0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   1d9e8:	d118      	bne.n	1da1c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1d9ea:	6803      	ldr	r3, [r0, #0]
   1d9ec:	ea32 0403 	bics.w	r4, r2, r3
   1d9f0:	d00a      	beq.n	1da08 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   1d9f2:	4608      	mov	r0, r1
   1d9f4:	f7ff ffb8 	bl	1d968 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   1d9f8:	2303      	movs	r3, #3
   1d9fa:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   1d9fc:	f385 8811 	msr	BASEPRI, r5
   1da00:	f3bf 8f6f 	isb	sy
}
   1da04:	b003      	add	sp, #12
   1da06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1da08:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   1da0c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1da0e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1da10:	4b24      	ldr	r3, [pc, #144]	; (1daa4 <usbd_ep_abort+0xe8>)
   1da12:	6818      	ldr	r0, [r3, #0]
   1da14:	ea20 0002 	bic.w	r0, r0, r2
   1da18:	6018      	str	r0, [r3, #0]
   1da1a:	e7ed      	b.n	1d9f8 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1da1c:	070b      	lsls	r3, r1, #28
   1da1e:	d415      	bmi.n	1da4c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   1da20:	2980      	cmp	r1, #128	; 0x80
   1da22:	4b21      	ldr	r3, [pc, #132]	; (1daa8 <usbd_ep_abort+0xec>)
   1da24:	d02f      	beq.n	1da86 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1da26:	f001 040f 	and.w	r4, r1, #15
   1da2a:	f204 34da 	addw	r4, r4, #986	; 0x3da
   1da2e:	0064      	lsls	r4, r4, #1
   1da30:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1da34:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1da38:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1da3c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1da3e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1da42:	433c      	orrs	r4, r7
   1da44:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1da48:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1da4c:	4f15      	ldr	r7, [pc, #84]	; (1daa4 <usbd_ep_abort+0xe8>)
   1da4e:	6804      	ldr	r4, [r0, #0]
   1da50:	683b      	ldr	r3, [r7, #0]
   1da52:	ea64 0c03 	orn	ip, r4, r3
   1da56:	ea1c 0f02 	tst.w	ip, r2
   1da5a:	d0cf      	beq.n	1d9fc <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1da5c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1da5e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1da62:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   1da64:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1da66:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   1da68:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1da6a:	2303      	movs	r3, #3
   1da6c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1da6e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1da72:	4b0e      	ldr	r3, [pc, #56]	; (1daac <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1da74:	f88d 1006 	strb.w	r1, [sp, #6]
   1da78:	2206      	movs	r2, #6
            m_event_handler(&evt);
   1da7a:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1da7c:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   1da80:	a801      	add	r0, sp, #4
   1da82:	4798      	blx	r3
   1da84:	e7ba      	b.n	1d9fc <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1da86:	f240 74b4 	movw	r4, #1972	; 0x7b4
   1da8a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1da8e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1da92:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1da96:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1da98:	f044 0404 	orr.w	r4, r4, #4
   1da9c:	e7d1      	b.n	1da42 <usbd_ep_abort+0x86>
   1da9e:	bf00      	nop
   1daa0:	20005e94 	.word	0x20005e94
   1daa4:	20005f04 	.word	0x20005f04
   1daa8:	40027000 	.word	0x40027000
   1daac:	20006028 	.word	0x20006028

0001dab0 <ev_setup_handler>:
{
   1dab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1dab2:	4b17      	ldr	r3, [pc, #92]	; (1db10 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1dab4:	4c17      	ldr	r4, [pc, #92]	; (1db14 <ev_setup_handler+0x64>)
   1dab6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   1daba:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   1dabc:	4e16      	ldr	r6, [pc, #88]	; (1db18 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1dabe:	43da      	mvns	r2, r3
   1dac0:	4b16      	ldr	r3, [pc, #88]	; (1db1c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   1dac2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1dac4:	681b      	ldr	r3, [r3, #0]
   1dac6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   1dac8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1daca:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   1dacc:	f006 f8c4 	bl	23c58 <ep2bit>
   1dad0:	2301      	movs	r3, #1
   1dad2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1dad4:	4213      	tst	r3, r2
   1dad6:	d002      	beq.n	1dade <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   1dad8:	4608      	mov	r0, r1
   1dada:	f7ff ff6f 	bl	1d9bc <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   1dade:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   1dae2:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   1dae6:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   1dae8:	f7ff fb2a 	bl	1d140 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   1daec:	6823      	ldr	r3, [r4, #0]
   1daee:	f043 0301 	orr.w	r3, r3, #1
   1daf2:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   1daf4:	2300      	movs	r3, #0
   1daf6:	f8ad 3005 	strh.w	r3, [sp, #5]
   1dafa:	f88d 3007 	strb.w	r3, [sp, #7]
   1dafe:	2305      	movs	r3, #5
   1db00:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   1db04:	4b06      	ldr	r3, [pc, #24]	; (1db20 <ev_setup_handler+0x70>)
   1db06:	a801      	add	r0, sp, #4
   1db08:	681b      	ldr	r3, [r3, #0]
   1db0a:	4798      	blx	r3
}
   1db0c:	b002      	add	sp, #8
   1db0e:	bd70      	pop	{r4, r5, r6, pc}
   1db10:	40027000 	.word	0x40027000
   1db14:	20005f04 	.word	0x20005f04
   1db18:	20006131 	.word	0x20006131
   1db1c:	20005e94 	.word	0x20005e94
   1db20:	20006028 	.word	0x20006028

0001db24 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   1db24:	4b1b      	ldr	r3, [pc, #108]	; (1db94 <nrfx_usbd_irq_handler+0x70>)
   1db26:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   1db2a:	2300      	movs	r3, #0
{
   1db2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   1db30:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1db32:	461d      	mov	r5, r3
    while (to_process)
   1db34:	b970      	cbnz	r0, 1db54 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   1db36:	4f18      	ldr	r7, [pc, #96]	; (1db98 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   1db38:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   1db3c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   1db40:	f04f 0801 	mov.w	r8, #1
    while (active)
   1db44:	b9bc      	cbnz	r4, 1db76 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   1db46:	f7ff fd61 	bl	1d60c <usbd_dmareq_process>
    if (setup_active)
   1db4a:	b306      	cbz	r6, 1db8e <nrfx_usbd_irq_handler+0x6a>
}
   1db4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   1db50:	f7ff bfae 	b.w	1dab0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   1db54:	fa90 f2a0 	rbit	r2, r0
   1db58:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1db5c:	490f      	ldr	r1, [pc, #60]	; (1db9c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   1db5e:	0096      	lsls	r6, r2, #2
   1db60:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   1db62:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1db66:	680e      	ldr	r6, [r1, #0]
    if (ret)
   1db68:	b116      	cbz	r6, 1db70 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1db6a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1db6c:	6809      	ldr	r1, [r1, #0]
   1db6e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   1db70:	ea20 0002 	bic.w	r0, r0, r2
   1db74:	e7de      	b.n	1db34 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   1db76:	fa94 f5a4 	rbit	r5, r4
   1db7a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   1db7e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   1db82:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   1db86:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   1db88:	ea24 0405 	bic.w	r4, r4, r5
   1db8c:	e7da      	b.n	1db44 <nrfx_usbd_irq_handler+0x20>
}
   1db8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db92:	bf00      	nop
   1db94:	40027000 	.word	0x40027000
   1db98:	00026128 	.word	0x00026128
   1db9c:	40027100 	.word	0x40027100

0001dba0 <usbd_ep_abort_all>:
{
   1dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   1dba2:	4e11      	ldr	r6, [pc, #68]	; (1dbe8 <usbd_ep_abort_all+0x48>)
   1dba4:	4b11      	ldr	r3, [pc, #68]	; (1dbec <usbd_ep_abort_all+0x4c>)
   1dba6:	6834      	ldr	r4, [r6, #0]
   1dba8:	681b      	ldr	r3, [r3, #0]
   1dbaa:	0c24      	lsrs	r4, r4, #16
   1dbac:	0424      	lsls	r4, r4, #16
   1dbae:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   1dbb0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   1dbb2:	b91c      	cbnz	r4, 1dbbc <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1dbb4:	f240 13ff 	movw	r3, #511	; 0x1ff
   1dbb8:	6033      	str	r3, [r6, #0]
}
   1dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   1dbbc:	fa94 f5a4 	rbit	r5, r4
   1dbc0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1dbc4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   1dbc6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1dbc8:	bfc6      	itte	gt
   1dbca:	f1a5 0010 	subgt.w	r0, r5, #16
   1dbce:	b2c0      	uxtbgt	r0, r0
   1dbd0:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   1dbd4:	0703      	lsls	r3, r0, #28
   1dbd6:	d401      	bmi.n	1dbdc <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   1dbd8:	f7ff fef0 	bl	1d9bc <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   1dbdc:	fa07 f505 	lsl.w	r5, r7, r5
   1dbe0:	ea24 0405 	bic.w	r4, r4, r5
   1dbe4:	e7e5      	b.n	1dbb2 <usbd_ep_abort_all+0x12>
   1dbe6:	bf00      	nop
   1dbe8:	20005f04 	.word	0x20005f04
   1dbec:	20005e94 	.word	0x20005e94

0001dbf0 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dbf0:	4b0c      	ldr	r3, [pc, #48]	; (1dc24 <nrfx_usbd_stop+0x34>)
   1dbf2:	2280      	movs	r2, #128	; 0x80
{
   1dbf4:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   1dbf6:	2027      	movs	r0, #39	; 0x27
   1dbf8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1dbfc:	f7e8 f8e2 	bl	5dc4 <arch_irq_is_enabled>
   1dc00:	b170      	cbz	r0, 1dc20 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   1dc02:	4c09      	ldr	r4, [pc, #36]	; (1dc28 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   1dc04:	f7ff ffcc 	bl	1dba0 <usbd_ep_abort_all>
   1dc08:	2300      	movs	r3, #0
   1dc0a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   1dc0e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   1dc10:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1dc14:	f7e8 f8c2 	bl	5d9c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1dc18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc1c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   1dc20:	bd10      	pop	{r4, pc}
   1dc22:	bf00      	nop
   1dc24:	e000e100 	.word	0xe000e100
   1dc28:	40027000 	.word	0x40027000

0001dc2c <nrfx_usbd_disable>:
{
   1dc2c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   1dc2e:	f7ff ffdf 	bl	1dbf0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   1dc32:	4b08      	ldr	r3, [pc, #32]	; (1dc54 <nrfx_usbd_disable+0x28>)
   1dc34:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   1dc38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   1dc3c:	2200      	movs	r2, #0
   1dc3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1dc42:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   1dc46:	f7ff f96b 	bl	1cf20 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1dc4a:	4b03      	ldr	r3, [pc, #12]	; (1dc58 <nrfx_usbd_disable+0x2c>)
   1dc4c:	2201      	movs	r2, #1
   1dc4e:	701a      	strb	r2, [r3, #0]
}
   1dc50:	bd08      	pop	{r3, pc}
   1dc52:	bf00      	nop
   1dc54:	40027000 	.word	0x40027000
   1dc58:	20006130 	.word	0x20006130

0001dc5c <nrfx_usbd_suspend>:
{
   1dc5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1dc5e:	f04f 0320 	mov.w	r3, #32
   1dc62:	f3ef 8511 	mrs	r5, BASEPRI
   1dc66:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc6a:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   1dc6e:	4b11      	ldr	r3, [pc, #68]	; (1dcb4 <nrfx_usbd_suspend+0x58>)
   1dc70:	781b      	ldrb	r3, [r3, #0]
   1dc72:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1dc76:	b933      	cbnz	r3, 1dc86 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   1dc78:	2400      	movs	r4, #0
	__asm__ volatile(
   1dc7a:	f385 8811 	msr	BASEPRI, r5
   1dc7e:	f3bf 8f6f 	isb	sy
}
   1dc82:	4620      	mov	r0, r4
   1dc84:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   1dc86:	f7ff ff8b 	bl	1dba0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   1dc8a:	4b0b      	ldr	r3, [pc, #44]	; (1dcb8 <nrfx_usbd_suspend+0x5c>)
   1dc8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   1dc90:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   1dc94:	d1f0      	bne.n	1dc78 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   1dc96:	2101      	movs	r1, #1
   1dc98:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1dc9c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   1dca0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1dca4:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   1dca6:	bf42      	ittt	mi
   1dca8:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1dcac:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   1dcb0:	4614      	movmi	r4, r2
}
   1dcb2:	e7e2      	b.n	1dc7a <nrfx_usbd_suspend+0x1e>
   1dcb4:	2000612e 	.word	0x2000612e
   1dcb8:	40027000 	.word	0x40027000

0001dcbc <nrfx_usbd_ep_disable>:
{
   1dcbc:	b510      	push	{r4, lr}
   1dcbe:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   1dcc0:	f7ff fe7c 	bl	1d9bc <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1dcc4:	4a10      	ldr	r2, [pc, #64]	; (1dd08 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   1dcc6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1dcca:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   1dcce:	f04f 0301 	mov.w	r3, #1
   1dcd2:	bf14      	ite	ne
   1dcd4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1dcd8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   1dcdc:	fa03 f300 	lsl.w	r3, r3, r0
   1dce0:	ea6f 0303 	mvn.w	r3, r3
   1dce4:	bf15      	itete	ne
   1dce6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1dce8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   1dcea:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1dcee:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1dcf2:	bf14      	ite	ne
   1dcf4:	4b05      	ldrne	r3, [pc, #20]	; (1dd0c <nrfx_usbd_ep_disable+0x50>)
   1dcf6:	4b06      	ldreq	r3, [pc, #24]	; (1dd10 <nrfx_usbd_ep_disable+0x54>)
   1dcf8:	5c1a      	ldrb	r2, [r3, r0]
   1dcfa:	2301      	movs	r3, #1
   1dcfc:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   1dcfe:	4a02      	ldr	r2, [pc, #8]	; (1dd08 <nrfx_usbd_ep_disable+0x4c>)
   1dd00:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1dd04:	bd10      	pop	{r4, pc}
   1dd06:	bf00      	nop
   1dd08:	40027000 	.word	0x40027000
   1dd0c:	000267fc 	.word	0x000267fc
   1dd10:	00026805 	.word	0x00026805

0001dd14 <nrfx_usbd_ep_enable>:
{
   1dd14:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1dd16:	b243      	sxtb	r3, r0
   1dd18:	2b00      	cmp	r3, #0
   1dd1a:	4b23      	ldr	r3, [pc, #140]	; (1dda8 <nrfx_usbd_ep_enable+0x94>)
   1dd1c:	4a23      	ldr	r2, [pc, #140]	; (1ddac <nrfx_usbd_ep_enable+0x98>)
   1dd1e:	bfa8      	it	ge
   1dd20:	461a      	movge	r2, r3
   1dd22:	f000 030f 	and.w	r3, r0, #15
   1dd26:	f04f 0401 	mov.w	r4, #1
   1dd2a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   1dd2c:	4a20      	ldr	r2, [pc, #128]	; (1ddb0 <nrfx_usbd_ep_enable+0x9c>)
   1dd2e:	fa04 f101 	lsl.w	r1, r4, r1
{
   1dd32:	4605      	mov	r5, r0
   1dd34:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   1dd38:	da0c      	bge.n	1dd54 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   1dd3a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1dd3e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1dd40:	07c8      	lsls	r0, r1, #31
   1dd42:	d406      	bmi.n	1dd52 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   1dd44:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1dd48:	fa04 f303 	lsl.w	r3, r4, r3
   1dd4c:	4303      	orrs	r3, r0
   1dd4e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1dd52:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   1dd54:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   1dd58:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1dd5a:	07c9      	lsls	r1, r1, #31
   1dd5c:	d4f9      	bmi.n	1dd52 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   1dd5e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   1dd62:	fa04 f103 	lsl.w	r1, r4, r3
   1dd66:	4331      	orrs	r1, r6
   1dd68:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   1dd6c:	2b00      	cmp	r3, #0
   1dd6e:	d0f0      	beq.n	1dd52 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   1dd70:	0703      	lsls	r3, r0, #28
   1dd72:	d4ee      	bmi.n	1dd52 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   1dd74:	f04f 0320 	mov.w	r3, #32
   1dd78:	f3ef 8611 	mrs	r6, BASEPRI
   1dd7c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd80:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   1dd84:	f7ff fdf0 	bl	1d968 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1dd88:	4628      	mov	r0, r5
   1dd8a:	f005 ff65 	bl	23c58 <ep2bit>
   1dd8e:	4a09      	ldr	r2, [pc, #36]	; (1ddb4 <nrfx_usbd_ep_enable+0xa0>)
   1dd90:	6813      	ldr	r3, [r2, #0]
   1dd92:	fa04 f000 	lsl.w	r0, r4, r0
   1dd96:	ea23 0000 	bic.w	r0, r3, r0
   1dd9a:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   1dd9c:	f386 8811 	msr	BASEPRI, r6
   1dda0:	f3bf 8f6f 	isb	sy
}
   1dda4:	e7d5      	b.n	1dd52 <nrfx_usbd_ep_enable+0x3e>
   1dda6:	bf00      	nop
   1dda8:	00026805 	.word	0x00026805
   1ddac:	000267fc 	.word	0x000267fc
   1ddb0:	40027000 	.word	0x40027000
   1ddb4:	20005e94 	.word	0x20005e94

0001ddb8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1ddb8:	0603      	lsls	r3, r0, #24
{
   1ddba:	b510      	push	{r4, lr}
   1ddbc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1ddbe:	d405      	bmi.n	1ddcc <nrfx_usbd_ep_stall_clear+0x14>
   1ddc0:	f7ff fd40 	bl	1d844 <nrfx_usbd_ep_stall_check>
   1ddc4:	b110      	cbz	r0, 1ddcc <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   1ddc6:	4620      	mov	r0, r4
   1ddc8:	f7ff fdce 	bl	1d968 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   1ddcc:	4b01      	ldr	r3, [pc, #4]	; (1ddd4 <nrfx_usbd_ep_stall_clear+0x1c>)
   1ddce:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   1ddd2:	bd10      	pop	{r4, pc}
   1ddd4:	40027000 	.word	0x40027000

0001ddd8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1ddd8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1ddda:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ddde:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1dde0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1dde2:	6002      	str	r2, [r0, #0]
}
   1dde4:	4802      	ldr	r0, [pc, #8]	; (1ddf0 <nrf_gpio_pin_port_decode+0x18>)
   1dde6:	bf18      	it	ne
   1dde8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1ddec:	4770      	bx	lr
   1ddee:	bf00      	nop
   1ddf0:	50000300 	.word	0x50000300

0001ddf4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1ddf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ddf6:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1ddf8:	f005 ff9b 	bl	23d32 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1ddfc:	4608      	mov	r0, r1
   1ddfe:	f005 ff98 	bl	23d32 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de02:	a801      	add	r0, sp, #4
   1de04:	9601      	str	r6, [sp, #4]
   1de06:	f7ff ffe7 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1de0a:	9b01      	ldr	r3, [sp, #4]
   1de0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1de10:	460c      	mov	r4, r1
   1de12:	f240 610d 	movw	r1, #1549	; 0x60d
   1de16:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de1a:	a801      	add	r0, sp, #4
   1de1c:	9401      	str	r4, [sp, #4]
   1de1e:	f7ff ffdb 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1de22:	9b01      	ldr	r3, [sp, #4]
   1de24:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1de28:	2509      	movs	r5, #9
   1de2a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1de2e:	2004      	movs	r0, #4
   1de30:	f005 fd21 	bl	23876 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1de34:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de36:	a801      	add	r0, sp, #4
   1de38:	9401      	str	r4, [sp, #4]
   1de3a:	f7ff ffcd 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1de3e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1de40:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1de44:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1de46:	07db      	lsls	r3, r3, #31
   1de48:	d415      	bmi.n	1de76 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de4a:	a801      	add	r0, sp, #4
   1de4c:	9601      	str	r6, [sp, #4]
   1de4e:	f7ff ffc3 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1de52:	9b01      	ldr	r3, [sp, #4]
   1de54:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1de58:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1de5c:	2004      	movs	r0, #4
   1de5e:	f005 fd0a 	bl	23876 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1de62:	4630      	mov	r0, r6
   1de64:	f005 ff65 	bl	23d32 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1de68:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1de6a:	2004      	movs	r0, #4
   1de6c:	f005 fd03 	bl	23876 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1de70:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1de74:	d1df      	bne.n	1de36 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de76:	a801      	add	r0, sp, #4
   1de78:	9401      	str	r4, [sp, #4]
   1de7a:	f7ff ffad 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1de7e:	9a01      	ldr	r2, [sp, #4]
   1de80:	2301      	movs	r3, #1
   1de82:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1de84:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1de88:	2004      	movs	r0, #4
   1de8a:	f005 fcf4 	bl	23876 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1de8e:	4620      	mov	r0, r4
   1de90:	f005 ff4f 	bl	23d32 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1de94:	2004      	movs	r0, #4
   1de96:	f005 fcee 	bl	23876 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de9a:	a801      	add	r0, sp, #4
   1de9c:	9401      	str	r4, [sp, #4]
   1de9e:	f7ff ff9b 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1dea2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1dea4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1dea8:	4803      	ldr	r0, [pc, #12]	; (1deb8 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1deaa:	40d3      	lsrs	r3, r2
   1deac:	f003 0301 	and.w	r3, r3, #1
   1deb0:	1ac0      	subs	r0, r0, r3
   1deb2:	b003      	add	sp, #12
   1deb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1deb6:	bf00      	nop
   1deb8:	0bad0001 	.word	0x0bad0001

0001debc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1debc:	4b0e      	ldr	r3, [pc, #56]	; (1def8 <z_sys_init_run_level+0x3c>)
{
   1debe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dec0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1dec4:	3001      	adds	r0, #1
   1dec6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1deca:	42a6      	cmp	r6, r4
   1decc:	d800      	bhi.n	1ded0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1dece:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1ded0:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ded4:	4628      	mov	r0, r5
   1ded6:	4798      	blx	r3
		if (dev != NULL) {
   1ded8:	b165      	cbz	r5, 1def4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1deda:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1dedc:	b130      	cbz	r0, 1deec <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1dede:	2800      	cmp	r0, #0
   1dee0:	bfb8      	it	lt
   1dee2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1dee4:	28ff      	cmp	r0, #255	; 0xff
   1dee6:	bfa8      	it	ge
   1dee8:	20ff      	movge	r0, #255	; 0xff
   1deea:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1deec:	785a      	ldrb	r2, [r3, #1]
   1deee:	f042 0201 	orr.w	r2, r2, #1
   1def2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1def4:	3408      	adds	r4, #8
   1def6:	e7e8      	b.n	1deca <z_sys_init_run_level+0xe>
   1def8:	0002618c 	.word	0x0002618c

0001defc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1defc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1defe:	4605      	mov	r5, r0
   1df00:	b910      	cbnz	r0, 1df08 <z_impl_device_get_binding+0xc>
		return NULL;
   1df02:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1df04:	4620      	mov	r0, r4
   1df06:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1df08:	7803      	ldrb	r3, [r0, #0]
   1df0a:	2b00      	cmp	r3, #0
   1df0c:	d0f9      	beq.n	1df02 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df0e:	4c0e      	ldr	r4, [pc, #56]	; (1df48 <z_impl_device_get_binding+0x4c>)
   1df10:	4e0e      	ldr	r6, [pc, #56]	; (1df4c <z_impl_device_get_binding+0x50>)
   1df12:	42b4      	cmp	r4, r6
   1df14:	d108      	bne.n	1df28 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df16:	4c0c      	ldr	r4, [pc, #48]	; (1df48 <z_impl_device_get_binding+0x4c>)
   1df18:	42b4      	cmp	r4, r6
   1df1a:	d0f2      	beq.n	1df02 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1df1c:	4620      	mov	r0, r4
   1df1e:	f005 ff16 	bl	23d4e <z_device_is_ready>
   1df22:	b950      	cbnz	r0, 1df3a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df24:	3418      	adds	r4, #24
   1df26:	e7f7      	b.n	1df18 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1df28:	4620      	mov	r0, r4
   1df2a:	f005 ff10 	bl	23d4e <z_device_is_ready>
   1df2e:	b110      	cbz	r0, 1df36 <z_impl_device_get_binding+0x3a>
   1df30:	6823      	ldr	r3, [r4, #0]
   1df32:	42ab      	cmp	r3, r5
   1df34:	d0e6      	beq.n	1df04 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1df36:	3418      	adds	r4, #24
   1df38:	e7eb      	b.n	1df12 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1df3a:	6821      	ldr	r1, [r4, #0]
   1df3c:	4628      	mov	r0, r5
   1df3e:	f002 fbd6 	bl	206ee <strcmp>
   1df42:	2800      	cmp	r0, #0
   1df44:	d1ee      	bne.n	1df24 <z_impl_device_get_binding+0x28>
   1df46:	e7dd      	b.n	1df04 <z_impl_device_get_binding+0x8>
   1df48:	000248a4 	.word	0x000248a4
   1df4c:	0002497c 	.word	0x0002497c

0001df50 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1df50:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1df52:	2300      	movs	r3, #0
{
   1df54:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1df56:	2201      	movs	r2, #1
   1df58:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1df5c:	220f      	movs	r2, #15
   1df5e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1df62:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   1df64:	4c0b      	ldr	r4, [pc, #44]	; (1df94 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1df66:	4b0c      	ldr	r3, [pc, #48]	; (1df98 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   1df68:	490c      	ldr	r1, [pc, #48]	; (1df9c <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1df6a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   1df6c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1df70:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   1df74:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1df78:	9300      	str	r3, [sp, #0]
   1df7a:	fb02 1100 	mla	r1, r2, r0, r1
   1df7e:	4b08      	ldr	r3, [pc, #32]	; (1dfa0 <init_idle_thread+0x50>)
   1df80:	4620      	mov	r0, r4
   1df82:	f000 f909 	bl	1e198 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1df86:	7b63      	ldrb	r3, [r4, #13]
   1df88:	f023 0304 	bic.w	r3, r3, #4
   1df8c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1df8e:	b006      	add	sp, #24
   1df90:	bd10      	pop	{r4, pc}
   1df92:	bf00      	nop
   1df94:	200016b0 	.word	0x200016b0
   1df98:	2000606c 	.word	0x2000606c
   1df9c:	20008440 	.word	0x20008440
   1dfa0:	0001e309 	.word	0x0001e309

0001dfa4 <bg_thread_main>:
{
   1dfa4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1dfa6:	4b0a      	ldr	r3, [pc, #40]	; (1dfd0 <bg_thread_main+0x2c>)
   1dfa8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1dfaa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1dfac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1dfae:	f7ff ff85 	bl	1debc <z_sys_init_run_level>
	boot_banner();
   1dfb2:	f001 fa21 	bl	1f3f8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1dfb6:	2003      	movs	r0, #3
   1dfb8:	f7ff ff80 	bl	1debc <z_sys_init_run_level>
	z_init_static_threads();
   1dfbc:	f000 f948 	bl	1e250 <z_init_static_threads>
	main();
   1dfc0:	f001 fa27 	bl	1f412 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1dfc4:	4a03      	ldr	r2, [pc, #12]	; (1dfd4 <bg_thread_main+0x30>)
   1dfc6:	7b13      	ldrb	r3, [r2, #12]
   1dfc8:	f023 0301 	bic.w	r3, r3, #1
   1dfcc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1dfce:	bd08      	pop	{r3, pc}
   1dfd0:	20006132 	.word	0x20006132
   1dfd4:	20001730 	.word	0x20001730

0001dfd8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1dfd8:	4802      	ldr	r0, [pc, #8]	; (1dfe4 <z_bss_zero+0xc>)
   1dfda:	4a03      	ldr	r2, [pc, #12]	; (1dfe8 <z_bss_zero+0x10>)
   1dfdc:	2100      	movs	r1, #0
   1dfde:	1a12      	subs	r2, r2, r0
   1dfe0:	f002 bbad 	b.w	2073e <memset>
   1dfe4:	20000d60 	.word	0x20000d60
   1dfe8:	20006134 	.word	0x20006134

0001dfec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1dfec:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1dfee:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e0b4 <z_cstart+0xc8>
   1dff2:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1dff4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1dff8:	4d2f      	ldr	r5, [pc, #188]	; (1e0b8 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1dffa:	4e30      	ldr	r6, [pc, #192]	; (1e0bc <z_cstart+0xd0>)
   1dffc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1dffe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1e0c0 <z_cstart+0xd4>
   1e002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e006:	2400      	movs	r4, #0
   1e008:	616b      	str	r3, [r5, #20]
   1e00a:	23e0      	movs	r3, #224	; 0xe0
   1e00c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e010:	77ec      	strb	r4, [r5, #31]
   1e012:	762c      	strb	r4, [r5, #24]
   1e014:	766c      	strb	r4, [r5, #25]
   1e016:	76ac      	strb	r4, [r5, #26]
   1e018:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e01c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e01e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e022:	626b      	str	r3, [r5, #36]	; 0x24
   1e024:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e028:	f7e8 f8a4 	bl	6174 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e02c:	f7e7 fe88 	bl	5d40 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e034:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e036:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1e038:	f7e8 f952 	bl	62e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1e03c:	f7e8 f8e2 	bl	6204 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e040:	f240 1301 	movw	r3, #257	; 0x101
   1e044:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1e048:	ab06      	add	r3, sp, #24
   1e04a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1e04c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1e050:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1e052:	f005 fe7b 	bl	23d4c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e056:	4620      	mov	r0, r4
   1e058:	f7ff ff30 	bl	1debc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e05c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1e05e:	4d19      	ldr	r5, [pc, #100]	; (1e0c4 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e060:	f7ff ff2c 	bl	1debc <z_sys_init_run_level>
	z_sched_init();
   1e064:	f000 feaa 	bl	1edbc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e068:	4b17      	ldr	r3, [pc, #92]	; (1e0c8 <z_cstart+0xdc>)
   1e06a:	9305      	str	r3, [sp, #20]
   1e06c:	2301      	movs	r3, #1
   1e06e:	4917      	ldr	r1, [pc, #92]	; (1e0cc <z_cstart+0xe0>)
   1e070:	9400      	str	r4, [sp, #0]
   1e072:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1e076:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e07a:	464b      	mov	r3, r9
   1e07c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e080:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1e082:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e084:	f000 f888 	bl	1e198 <z_setup_new_thread>
   1e088:	7b6a      	ldrb	r2, [r5, #13]
   1e08a:	4607      	mov	r7, r0
   1e08c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1e090:	4628      	mov	r0, r5
   1e092:	736a      	strb	r2, [r5, #13]
   1e094:	f006 f946 	bl	24324 <z_ready_thread>
		init_idle_thread(i);
   1e098:	4620      	mov	r0, r4
   1e09a:	f7ff ff59 	bl	1df50 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1e09e:	4b0c      	ldr	r3, [pc, #48]	; (1e0d0 <z_cstart+0xe4>)
   1e0a0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e0a2:	464a      	mov	r2, r9
   1e0a4:	4639      	mov	r1, r7
   1e0a6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1e0a8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1e0aa:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e0ae:	f7e7 ff4f 	bl	5f50 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e0b2:	bf00      	nop
   1e0b4:	20008d80 	.word	0x20008d80
   1e0b8:	e000ed00 	.word	0xe000ed00
   1e0bc:	2000606c 	.word	0x2000606c
   1e0c0:	0001dfa5 	.word	0x0001dfa5
   1e0c4:	20001730 	.word	0x20001730
   1e0c8:	0002680e 	.word	0x0002680e
   1e0cc:	20008040 	.word	0x20008040
   1e0d0:	200016b0 	.word	0x200016b0

0001e0d4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1e0d4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e0d6:	4c06      	ldr	r4, [pc, #24]	; (1e0f0 <statics_init+0x1c>)
   1e0d8:	4d06      	ldr	r5, [pc, #24]	; (1e0f4 <statics_init+0x20>)
   1e0da:	42ac      	cmp	r4, r5
   1e0dc:	d301      	bcc.n	1e0e2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1e0de:	2000      	movs	r0, #0
   1e0e0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e0e2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	f005 fe62 	bl	23db0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e0ec:	3414      	adds	r4, #20
   1e0ee:	e7f4      	b.n	1e0da <statics_init+0x6>
   1e0f0:	20000af8 	.word	0x20000af8
   1e0f4:	20000af8 	.word	0x20000af8

0001e0f8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e0f8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e0fa:	4b0e      	ldr	r3, [pc, #56]	; (1e134 <init_mem_slab_module+0x3c>)
   1e0fc:	4c0e      	ldr	r4, [pc, #56]	; (1e138 <init_mem_slab_module+0x40>)
   1e0fe:	42a3      	cmp	r3, r4
   1e100:	d301      	bcc.n	1e106 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1e102:	2000      	movs	r0, #0
	return rc;
}
   1e104:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e106:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1e10a:	ea41 0200 	orr.w	r2, r1, r0
   1e10e:	f012 0203 	ands.w	r2, r2, #3
   1e112:	d10b      	bne.n	1e12c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1e114:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1e116:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e118:	42aa      	cmp	r2, r5
   1e11a:	d101      	bne.n	1e120 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e11c:	331c      	adds	r3, #28
   1e11e:	e7ee      	b.n	1e0fe <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1e120:	695e      	ldr	r6, [r3, #20]
   1e122:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e124:	3201      	adds	r2, #1
		slab->free_list = p;
   1e126:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1e128:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1e12a:	e7f5      	b.n	1e118 <init_mem_slab_module+0x20>
	return rc;
   1e12c:	f06f 0015 	mvn.w	r0, #21
   1e130:	e7e8      	b.n	1e104 <init_mem_slab_module+0xc>
   1e132:	bf00      	nop
   1e134:	20000a88 	.word	0x20000a88
   1e138:	20000af8 	.word	0x20000af8

0001e13c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e13e:	460c      	mov	r4, r1
	__asm__ volatile(
   1e140:	f04f 0520 	mov.w	r5, #32
   1e144:	f3ef 8111 	mrs	r1, BASEPRI
   1e148:	f385 8812 	msr	BASEPRI_MAX, r5
   1e14c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1e150:	6945      	ldr	r5, [r0, #20]
   1e152:	b15d      	cbz	r5, 1e16c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1e154:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e156:	682b      	ldr	r3, [r5, #0]
   1e158:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1e15a:	6983      	ldr	r3, [r0, #24]
   1e15c:	3301      	adds	r3, #1
   1e15e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e160:	2000      	movs	r0, #0
	__asm__ volatile(
   1e162:	f381 8811 	msr	BASEPRI, r1
   1e166:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1e16a:	e011      	b.n	1e190 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1e16c:	ea52 0c03 	orrs.w	ip, r2, r3
   1e170:	d103      	bne.n	1e17a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1e172:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1e174:	f06f 000b 	mvn.w	r0, #11
   1e178:	e7f3      	b.n	1e162 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1e17a:	e9cd 2300 	strd	r2, r3, [sp]
   1e17e:	4602      	mov	r2, r0
   1e180:	3008      	adds	r0, #8
   1e182:	f000 fd71 	bl	1ec68 <z_pend_curr>
		if (result == 0) {
   1e186:	b918      	cbnz	r0, 1e190 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1e188:	4b02      	ldr	r3, [pc, #8]	; (1e194 <k_mem_slab_alloc+0x58>)
   1e18a:	689b      	ldr	r3, [r3, #8]
   1e18c:	695b      	ldr	r3, [r3, #20]
   1e18e:	6023      	str	r3, [r4, #0]
}
   1e190:	b003      	add	sp, #12
   1e192:	bd30      	pop	{r4, r5, pc}
   1e194:	2000606c 	.word	0x2000606c

0001e198 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1e198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1e19c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e19e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e1a0:	2604      	movs	r6, #4
   1e1a2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1e1a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1e1a6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e1a8:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e1ac:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1e1ae:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e1b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1e1b4:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e1b6:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1e1ba:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1e1be:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1e1c2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1e1c4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1e1c6:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e1c8:	9202      	str	r2, [sp, #8]
   1e1ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e1cc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1e1ce:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e1d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e1d4:	9200      	str	r2, [sp, #0]
   1e1d6:	4642      	mov	r2, r8
{
   1e1d8:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e1da:	f7e7 fe9d 	bl	5f18 <arch_new_thread>
	if (!_current) {
   1e1de:	4b05      	ldr	r3, [pc, #20]	; (1e1f4 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1e1e0:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1e1e2:	689b      	ldr	r3, [r3, #8]
   1e1e4:	b103      	cbz	r3, 1e1e8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1e1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1e1e8:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e1ea:	4640      	mov	r0, r8
   1e1ec:	b004      	add	sp, #16
   1e1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e1f2:	bf00      	nop
   1e1f4:	2000606c 	.word	0x2000606c

0001e1f8 <z_impl_k_thread_create>:
{
   1e1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1fa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e1fc:	2700      	movs	r7, #0
   1e1fe:	9705      	str	r7, [sp, #20]
   1e200:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1e202:	9704      	str	r7, [sp, #16]
   1e204:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1e206:	9703      	str	r7, [sp, #12]
   1e208:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1e20a:	9702      	str	r7, [sp, #8]
{
   1e20c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e210:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1e212:	9701      	str	r7, [sp, #4]
   1e214:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1e216:	9700      	str	r7, [sp, #0]
{
   1e218:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e21a:	f7ff ffbd 	bl	1e198 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e21e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1e222:	bf08      	it	eq
   1e224:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1e228:	d005      	beq.n	1e236 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e22a:	ea55 0306 	orrs.w	r3, r5, r6
   1e22e:	d105      	bne.n	1e23c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1e230:	4620      	mov	r0, r4
   1e232:	f000 fcbd 	bl	1ebb0 <z_sched_start>
}
   1e236:	4620      	mov	r0, r4
   1e238:	b007      	add	sp, #28
   1e23a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e23c:	4903      	ldr	r1, [pc, #12]	; (1e24c <z_impl_k_thread_create+0x54>)
   1e23e:	4632      	mov	r2, r6
   1e240:	462b      	mov	r3, r5
   1e242:	f104 0018 	add.w	r0, r4, #24
   1e246:	f000 ff45 	bl	1f0d4 <z_add_timeout>
   1e24a:	e7f4      	b.n	1e236 <z_impl_k_thread_create+0x3e>
   1e24c:	00024345 	.word	0x00024345

0001e250 <z_init_static_threads>:
{
   1e250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e254:	4c29      	ldr	r4, [pc, #164]	; (1e2fc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1e256:	4d2a      	ldr	r5, [pc, #168]	; (1e300 <z_init_static_threads+0xb0>)
{
   1e258:	b087      	sub	sp, #28
   1e25a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1e25c:	42ae      	cmp	r6, r5
   1e25e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1e262:	d30f      	bcc.n	1e284 <z_init_static_threads+0x34>
	k_sched_lock();
   1e264:	f000 fbc0 	bl	1e9e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e268:	4c24      	ldr	r4, [pc, #144]	; (1e2fc <z_init_static_threads+0xac>)
   1e26a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e304 <z_init_static_threads+0xb4>
   1e26e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1e272:	f240 37e7 	movw	r7, #999	; 0x3e7
   1e276:	42ac      	cmp	r4, r5
   1e278:	d320      	bcc.n	1e2bc <z_init_static_threads+0x6c>
}
   1e27a:	b007      	add	sp, #28
   1e27c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1e280:	f000 bd80 	b.w	1ed84 <k_sched_unlock>
		z_setup_new_thread(
   1e284:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e288:	9305      	str	r3, [sp, #20]
   1e28a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e28e:	9304      	str	r3, [sp, #16]
   1e290:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e294:	9303      	str	r3, [sp, #12]
   1e296:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e29a:	9302      	str	r3, [sp, #8]
   1e29c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e2a0:	9301      	str	r3, [sp, #4]
   1e2a2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e2a6:	9300      	str	r3, [sp, #0]
   1e2a8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e2ac:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e2b0:	f7ff ff72 	bl	1e198 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e2b4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e2b8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1e2ba:	e7ce      	b.n	1e25a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e2be:	1c5a      	adds	r2, r3, #1
   1e2c0:	d00d      	beq.n	1e2de <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1e2c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e2c6:	2100      	movs	r1, #0
   1e2c8:	4638      	mov	r0, r7
   1e2ca:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e2ce:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1e2d2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e2d6:	d104      	bne.n	1e2e2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1e2d8:	4640      	mov	r0, r8
   1e2da:	f000 fc69 	bl	1ebb0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e2de:	3430      	adds	r4, #48	; 0x30
   1e2e0:	e7c9      	b.n	1e276 <z_init_static_threads+0x26>
   1e2e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e2e6:	2300      	movs	r3, #0
   1e2e8:	f7e2 fb00 	bl	8ec <__aeabi_uldivmod>
   1e2ec:	4602      	mov	r2, r0
   1e2ee:	460b      	mov	r3, r1
   1e2f0:	f108 0018 	add.w	r0, r8, #24
   1e2f4:	4649      	mov	r1, r9
   1e2f6:	f000 feed 	bl	1f0d4 <z_add_timeout>
   1e2fa:	e7f0      	b.n	1e2de <z_init_static_threads+0x8e>
   1e2fc:	20000a28 	.word	0x20000a28
   1e300:	20000a88 	.word	0x20000a88
   1e304:	00024345 	.word	0x00024345

0001e308 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1e308:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1e30a:	4c0b      	ldr	r4, [pc, #44]	; (1e338 <idle+0x30>)
	return !z_sys_post_kernel;
   1e30c:	4d0b      	ldr	r5, [pc, #44]	; (1e33c <idle+0x34>)
	__asm__ volatile(
   1e30e:	f04f 0220 	mov.w	r2, #32
   1e312:	f3ef 8311 	mrs	r3, BASEPRI
   1e316:	f382 8812 	msr	BASEPRI_MAX, r2
   1e31a:	f3bf 8f6f 	isb	sy
   1e31e:	f006 f8b8 	bl	24492 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e322:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1e324:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e326:	b913      	cbnz	r3, 1e32e <idle+0x26>
	arch_cpu_idle();
   1e328:	f7e7 fd10 	bl	5d4c <arch_cpu_idle>
}
   1e32c:	e7ef      	b.n	1e30e <idle+0x6>
   1e32e:	f7e7 fbd1 	bl	5ad4 <pm_system_suspend>
   1e332:	2800      	cmp	r0, #0
   1e334:	d1eb      	bne.n	1e30e <idle+0x6>
   1e336:	e7f7      	b.n	1e328 <idle+0x20>
   1e338:	2000606c 	.word	0x2000606c
   1e33c:	20006132 	.word	0x20006132

0001e340 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e344:	4604      	mov	r4, r0
   1e346:	4617      	mov	r7, r2
   1e348:	461e      	mov	r6, r3
   1e34a:	f04f 0320 	mov.w	r3, #32
   1e34e:	f3ef 8811 	mrs	r8, BASEPRI
   1e352:	f383 8812 	msr	BASEPRI_MAX, r3
   1e356:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e35a:	68c3      	ldr	r3, [r0, #12]
   1e35c:	4a32      	ldr	r2, [pc, #200]	; (1e428 <z_impl_k_mutex_lock+0xe8>)
   1e35e:	b16b      	cbz	r3, 1e37c <z_impl_k_mutex_lock+0x3c>
   1e360:	6880      	ldr	r0, [r0, #8]
   1e362:	6891      	ldr	r1, [r2, #8]
   1e364:	4288      	cmp	r0, r1
   1e366:	d019      	beq.n	1e39c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e368:	ea57 0306 	orrs.w	r3, r7, r6
   1e36c:	d118      	bne.n	1e3a0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e36e:	f388 8811 	msr	BASEPRI, r8
   1e372:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1e376:	f06f 000f 	mvn.w	r0, #15
   1e37a:	e00c      	b.n	1e396 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1e37c:	6891      	ldr	r1, [r2, #8]
   1e37e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e382:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e384:	3301      	adds	r3, #1
   1e386:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e388:	6893      	ldr	r3, [r2, #8]
   1e38a:	60a3      	str	r3, [r4, #8]
   1e38c:	f388 8811 	msr	BASEPRI, r8
   1e390:	f3bf 8f6f 	isb	sy
		return 0;
   1e394:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1e396:	b002      	add	sp, #8
   1e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e39c:	6921      	ldr	r1, [r4, #16]
   1e39e:	e7f0      	b.n	1e382 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e3a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e3a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1e3a8:	4299      	cmp	r1, r3
   1e3aa:	bfa8      	it	ge
   1e3ac:	4619      	movge	r1, r3
   1e3ae:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1e3b2:	4291      	cmp	r1, r2
   1e3b4:	bfb8      	it	lt
   1e3b6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e3b8:	428b      	cmp	r3, r1
   1e3ba:	dd2e      	ble.n	1e41a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1e3bc:	f005 fd99 	bl	23ef2 <adjust_owner_prio.isra.0>
   1e3c0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e3c2:	e9cd 7600 	strd	r7, r6, [sp]
   1e3c6:	4819      	ldr	r0, [pc, #100]	; (1e42c <z_impl_k_mutex_lock+0xec>)
   1e3c8:	4622      	mov	r2, r4
   1e3ca:	4641      	mov	r1, r8
   1e3cc:	f000 fc4c 	bl	1ec68 <z_pend_curr>
	if (got_mutex == 0) {
   1e3d0:	2800      	cmp	r0, #0
   1e3d2:	d0e0      	beq.n	1e396 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1e3d4:	f04f 0320 	mov.w	r3, #32
   1e3d8:	f3ef 8611 	mrs	r6, BASEPRI
   1e3dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1e3e0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e3e4:	6823      	ldr	r3, [r4, #0]
   1e3e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e3e8:	429c      	cmp	r4, r3
   1e3ea:	d00a      	beq.n	1e402 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e3ec:	b14b      	cbz	r3, 1e402 <z_impl_k_mutex_lock+0xc2>
   1e3ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e3f2:	4299      	cmp	r1, r3
   1e3f4:	bfa8      	it	ge
   1e3f6:	4619      	movge	r1, r3
   1e3f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1e3fc:	4299      	cmp	r1, r3
   1e3fe:	bfb8      	it	lt
   1e400:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e402:	68a0      	ldr	r0, [r4, #8]
   1e404:	f005 fd75 	bl	23ef2 <adjust_owner_prio.isra.0>
   1e408:	b900      	cbnz	r0, 1e40c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1e40a:	b145      	cbz	r5, 1e41e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e40c:	4807      	ldr	r0, [pc, #28]	; (1e42c <z_impl_k_mutex_lock+0xec>)
   1e40e:	4631      	mov	r1, r6
   1e410:	f000 fad8 	bl	1e9c4 <z_reschedule>
	return -EAGAIN;
   1e414:	f06f 000a 	mvn.w	r0, #10
   1e418:	e7bd      	b.n	1e396 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1e41a:	2500      	movs	r5, #0
   1e41c:	e7d1      	b.n	1e3c2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1e41e:	f386 8811 	msr	BASEPRI, r6
   1e422:	f3bf 8f6f 	isb	sy
   1e426:	e7f5      	b.n	1e414 <z_impl_k_mutex_lock+0xd4>
   1e428:	2000606c 	.word	0x2000606c
   1e42c:	20006133 	.word	0x20006133

0001e430 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e430:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1e432:	6883      	ldr	r3, [r0, #8]
{
   1e434:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e436:	2b00      	cmp	r3, #0
   1e438:	d032      	beq.n	1e4a0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e43a:	4a1c      	ldr	r2, [pc, #112]	; (1e4ac <z_impl_k_mutex_unlock+0x7c>)
   1e43c:	6892      	ldr	r2, [r2, #8]
   1e43e:	4293      	cmp	r3, r2
   1e440:	d131      	bne.n	1e4a6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1e442:	7bda      	ldrb	r2, [r3, #15]
   1e444:	3a01      	subs	r2, #1
   1e446:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1e448:	68c3      	ldr	r3, [r0, #12]
   1e44a:	2b01      	cmp	r3, #1
   1e44c:	d905      	bls.n	1e45a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1e44e:	3b01      	subs	r3, #1
   1e450:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1e452:	f000 fc97 	bl	1ed84 <k_sched_unlock>

	return 0;
   1e456:	2000      	movs	r0, #0
}
   1e458:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e45a:	f04f 0320 	mov.w	r3, #32
   1e45e:	f3ef 8511 	mrs	r5, BASEPRI
   1e462:	f383 8812 	msr	BASEPRI_MAX, r3
   1e466:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e46a:	6901      	ldr	r1, [r0, #16]
   1e46c:	6880      	ldr	r0, [r0, #8]
   1e46e:	f005 fd40 	bl	23ef2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e472:	4620      	mov	r0, r4
   1e474:	f005 ffb2 	bl	243dc <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e478:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e47a:	b158      	cbz	r0, 1e494 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e47c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e480:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e482:	2200      	movs	r2, #0
   1e484:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1e486:	f005 ff4d 	bl	24324 <z_ready_thread>
		z_reschedule(&lock, key);
   1e48a:	4809      	ldr	r0, [pc, #36]	; (1e4b0 <z_impl_k_mutex_unlock+0x80>)
   1e48c:	4629      	mov	r1, r5
   1e48e:	f000 fa99 	bl	1e9c4 <z_reschedule>
   1e492:	e7de      	b.n	1e452 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1e494:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e496:	f385 8811 	msr	BASEPRI, r5
   1e49a:	f3bf 8f6f 	isb	sy
   1e49e:	e7d8      	b.n	1e452 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1e4a0:	f06f 0015 	mvn.w	r0, #21
   1e4a4:	e7d8      	b.n	1e458 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1e4a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4aa:	e7d5      	b.n	1e458 <z_impl_k_mutex_unlock+0x28>
   1e4ac:	2000606c 	.word	0x2000606c
   1e4b0:	20006133 	.word	0x20006133

0001e4b4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e4b6:	4611      	mov	r1, r2
	__asm__ volatile(
   1e4b8:	f04f 0220 	mov.w	r2, #32
   1e4bc:	f3ef 8511 	mrs	r5, BASEPRI
   1e4c0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e4c4:	f3bf 8f6f 	isb	sy
   1e4c8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e4ca:	b19c      	cbz	r4, 1e4f4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e4cc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e4ce:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e4d0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e4d4:	4294      	cmp	r4, r2
	list->head = node;
   1e4d6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e4d8:	bf08      	it	eq
   1e4da:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e4dc:	2101      	movs	r1, #1
   1e4de:	4620      	mov	r0, r4
   1e4e0:	f005 fd7a 	bl	23fd8 <z_queue_node_peek>
   1e4e4:	4604      	mov	r4, r0
	__asm__ volatile(
   1e4e6:	f385 8811 	msr	BASEPRI, r5
   1e4ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e4ee:	4620      	mov	r0, r4
   1e4f0:	b003      	add	sp, #12
   1e4f2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e4f4:	ea51 0203 	orrs.w	r2, r1, r3
   1e4f8:	d0f5      	beq.n	1e4e6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e4fa:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e4fe:	e9cd 1300 	strd	r1, r3, [sp]
   1e502:	4610      	mov	r0, r2
   1e504:	4629      	mov	r1, r5
   1e506:	f000 fbaf 	bl	1ec68 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e50a:	2800      	cmp	r0, #0
   1e50c:	d1ef      	bne.n	1e4ee <z_impl_k_queue_get+0x3a>
   1e50e:	4b02      	ldr	r3, [pc, #8]	; (1e518 <z_impl_k_queue_get+0x64>)
   1e510:	689b      	ldr	r3, [r3, #8]
   1e512:	695c      	ldr	r4, [r3, #20]
   1e514:	e7eb      	b.n	1e4ee <z_impl_k_queue_get+0x3a>
   1e516:	bf00      	nop
   1e518:	2000606c 	.word	0x2000606c

0001e51c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1e51c:	b538      	push	{r3, r4, r5, lr}
   1e51e:	4604      	mov	r4, r0
	__asm__ volatile(
   1e520:	f04f 0320 	mov.w	r3, #32
   1e524:	f3ef 8511 	mrs	r5, BASEPRI
   1e528:	f383 8812 	msr	BASEPRI_MAX, r3
   1e52c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1e530:	f005 ff54 	bl	243dc <z_unpend_first_thread>

	if (thread != NULL) {
   1e534:	b148      	cbz	r0, 1e54a <z_impl_k_sem_give+0x2e>
   1e536:	2200      	movs	r2, #0
   1e538:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1e53a:	f005 fef3 	bl	24324 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1e53e:	4629      	mov	r1, r5
   1e540:	4808      	ldr	r0, [pc, #32]	; (1e564 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1e542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1e546:	f000 ba3d 	b.w	1e9c4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1e54a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1e54e:	429a      	cmp	r2, r3
   1e550:	bf18      	it	ne
   1e552:	3301      	addne	r3, #1
   1e554:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e556:	2102      	movs	r1, #2
   1e558:	f104 0010 	add.w	r0, r4, #16
   1e55c:	f006 f936 	bl	247cc <z_handle_obj_poll_events>
}
   1e560:	e7ed      	b.n	1e53e <z_impl_k_sem_give+0x22>
   1e562:	bf00      	nop
   1e564:	20006133 	.word	0x20006133

0001e568 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1e568:	b513      	push	{r0, r1, r4, lr}
   1e56a:	f04f 0420 	mov.w	r4, #32
   1e56e:	f3ef 8111 	mrs	r1, BASEPRI
   1e572:	f384 8812 	msr	BASEPRI_MAX, r4
   1e576:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1e57a:	6884      	ldr	r4, [r0, #8]
   1e57c:	b144      	cbz	r4, 1e590 <z_impl_k_sem_take+0x28>
		sem->count--;
   1e57e:	3c01      	subs	r4, #1
   1e580:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1e582:	f381 8811 	msr	BASEPRI, r1
   1e586:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1e58a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1e58c:	b002      	add	sp, #8
   1e58e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e590:	ea52 0403 	orrs.w	r4, r2, r3
   1e594:	d106      	bne.n	1e5a4 <z_impl_k_sem_take+0x3c>
   1e596:	f381 8811 	msr	BASEPRI, r1
   1e59a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1e59e:	f06f 000f 	mvn.w	r0, #15
   1e5a2:	e7f3      	b.n	1e58c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e5a4:	e9cd 2300 	strd	r2, r3, [sp]
   1e5a8:	4602      	mov	r2, r0
   1e5aa:	4802      	ldr	r0, [pc, #8]	; (1e5b4 <z_impl_k_sem_take+0x4c>)
   1e5ac:	f000 fb5c 	bl	1ec68 <z_pend_curr>
	return ret;
   1e5b0:	e7ec      	b.n	1e58c <z_impl_k_sem_take+0x24>
   1e5b2:	bf00      	nop
   1e5b4:	20006133 	.word	0x20006133

0001e5b8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1e5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1e5ba:	4b09      	ldr	r3, [pc, #36]	; (1e5e0 <k_sys_work_q_init+0x28>)
   1e5bc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1e5be:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1e5c0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1e5c2:	9300      	str	r3, [sp, #0]
   1e5c4:	4907      	ldr	r1, [pc, #28]	; (1e5e4 <k_sys_work_q_init+0x2c>)
   1e5c6:	4808      	ldr	r0, [pc, #32]	; (1e5e8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1e5c8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1e5cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e5d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e5d4:	f000 f914 	bl	1e800 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1e5d8:	4620      	mov	r0, r4
   1e5da:	b004      	add	sp, #16
   1e5dc:	bd10      	pop	{r4, pc}
   1e5de:	bf00      	nop
   1e5e0:	00026813 	.word	0x00026813
   1e5e4:	20008d80 	.word	0x20008d80
   1e5e8:	200017b0 	.word	0x200017b0

0001e5ec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1e5f0:	4e47      	ldr	r6, [pc, #284]	; (1e710 <work_queue_main+0x124>)
   1e5f2:	b085      	sub	sp, #20
   1e5f4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1e5f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1e5fa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1e5fe:	f04f 0320 	mov.w	r3, #32
   1e602:	f3ef 8711 	mrs	r7, BASEPRI
   1e606:	f383 8812 	msr	BASEPRI_MAX, r3
   1e60a:	f3bf 8f6f 	isb	sy
   1e60e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1e612:	b98d      	cbnz	r5, 1e638 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1e614:	2102      	movs	r1, #2
   1e616:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1e61a:	f005 fd56 	bl	240ca <flag_test_and_clear>
   1e61e:	2800      	cmp	r0, #0
   1e620:	d135      	bne.n	1e68e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1e622:	2300      	movs	r3, #0
   1e624:	e9cd 8900 	strd	r8, r9, [sp]
   1e628:	9302      	str	r3, [sp, #8]
   1e62a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1e62e:	4639      	mov	r1, r7
   1e630:	4838      	ldr	r0, [pc, #224]	; (1e714 <work_queue_main+0x128>)
   1e632:	f000 fcd9 	bl	1efe8 <z_sched_wait>
			continue;
   1e636:	e7e2      	b.n	1e5fe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e638:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1e63c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1e63e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e642:	4295      	cmp	r5, r2
   1e644:	d101      	bne.n	1e64a <work_queue_main+0x5e>
	list->tail = node;
   1e646:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1e64a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e64e:	f043 0302 	orr.w	r3, r3, #2
   1e652:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1e656:	68eb      	ldr	r3, [r5, #12]
   1e658:	f023 0304 	bic.w	r3, r3, #4
   1e65c:	f043 0301 	orr.w	r3, r3, #1
   1e660:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1e662:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1e664:	f387 8811 	msr	BASEPRI, r7
   1e668:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1e66c:	4628      	mov	r0, r5
   1e66e:	4798      	blx	r3
	__asm__ volatile(
   1e670:	f04f 0320 	mov.w	r3, #32
   1e674:	f3ef 8b11 	mrs	fp, BASEPRI
   1e678:	f383 8812 	msr	BASEPRI_MAX, r3
   1e67c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1e680:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e682:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1e684:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e688:	d40b      	bmi.n	1e6a2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1e68a:	60ea      	str	r2, [r5, #12]
   1e68c:	e00e      	b.n	1e6ac <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1e68e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1e692:	2200      	movs	r2, #0
   1e694:	2101      	movs	r1, #1
   1e696:	4628      	mov	r0, r5
   1e698:	f005 fec8 	bl	2442c <z_sched_wake>
   1e69c:	2800      	cmp	r0, #0
   1e69e:	d1f8      	bne.n	1e692 <work_queue_main+0xa6>
   1e6a0:	e7bf      	b.n	1e622 <work_queue_main+0x36>
	return list->head;
   1e6a2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1e6a4:	f023 0303 	bic.w	r3, r3, #3
   1e6a8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e6aa:	b970      	cbnz	r0, 1e6ca <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1e6ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e6b0:	f023 0302 	bic.w	r3, r3, #2
   1e6b4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1e6b8:	f38b 8811 	msr	BASEPRI, fp
   1e6bc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1e6c0:	05d8      	lsls	r0, r3, #23
   1e6c2:	d49c      	bmi.n	1e5fe <work_queue_main+0x12>
	z_impl_k_yield();
   1e6c4:	f000 fb86 	bl	1edd4 <z_impl_k_yield>
}
   1e6c8:	e799      	b.n	1e5fe <work_queue_main+0x12>
	return node->next;
   1e6ca:	2700      	movs	r7, #0
   1e6cc:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1e6d0:	463b      	mov	r3, r7
		if (wc->work == work) {
   1e6d2:	6842      	ldr	r2, [r0, #4]
   1e6d4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1e6d6:	4601      	mov	r1, r0
		if (wc->work == work) {
   1e6d8:	d10c      	bne.n	1e6f4 <work_queue_main+0x108>
	return node->next;
   1e6da:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e6dc:	b997      	cbnz	r7, 1e704 <work_queue_main+0x118>
   1e6de:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1e6e0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e6e2:	4282      	cmp	r2, r0
   1e6e4:	d100      	bne.n	1e6e8 <work_queue_main+0xfc>
	list->tail = node;
   1e6e6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1e6e8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1e6ec:	f7ff ff16 	bl	1e51c <z_impl_k_sem_give>
}
   1e6f0:	4639      	mov	r1, r7
   1e6f2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e6f4:	f1ba 0f00 	cmp.w	sl, #0
   1e6f8:	d0d8      	beq.n	1e6ac <work_queue_main+0xc0>
	return node->next;
   1e6fa:	4650      	mov	r0, sl
   1e6fc:	460f      	mov	r7, r1
   1e6fe:	f8da a000 	ldr.w	sl, [sl]
   1e702:	e7e6      	b.n	1e6d2 <work_queue_main+0xe6>
	return list->tail;
   1e704:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1e706:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e708:	4290      	cmp	r0, r2
	list->tail = node;
   1e70a:	bf08      	it	eq
   1e70c:	6077      	streq	r7, [r6, #4]
}
   1e70e:	e7eb      	b.n	1e6e8 <work_queue_main+0xfc>
   1e710:	20006094 	.word	0x20006094
   1e714:	20006133 	.word	0x20006133

0001e718 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1e718:	68c3      	ldr	r3, [r0, #12]
{
   1e71a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e71c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1e720:	079b      	lsls	r3, r3, #30
{
   1e722:	4605      	mov	r5, r0
   1e724:	460c      	mov	r4, r1
	if (ret) {
   1e726:	d50d      	bpl.n	1e744 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e728:	2201      	movs	r2, #1
   1e72a:	2100      	movs	r1, #0
   1e72c:	f104 0008 	add.w	r0, r4, #8
   1e730:	f005 fcbb 	bl	240aa <z_impl_k_sem_init>
	parent->next = child;
   1e734:	2300      	movs	r3, #0
   1e736:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e738:	4b05      	ldr	r3, [pc, #20]	; (1e750 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1e73a:	6065      	str	r5, [r4, #4]
   1e73c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1e73e:	b91a      	cbnz	r2, 1e748 <cancel_sync_locked+0x30>
	list->head = node;
   1e740:	e9c3 4400 	strd	r4, r4, [r3]
}
   1e744:	4630      	mov	r0, r6
   1e746:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1e748:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1e74a:	605c      	str	r4, [r3, #4]
}
   1e74c:	e7fa      	b.n	1e744 <cancel_sync_locked+0x2c>
   1e74e:	bf00      	nop
   1e750:	20006094 	.word	0x20006094

0001e754 <submit_to_queue_locked>:
{
   1e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e756:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e758:	079a      	lsls	r2, r3, #30
{
   1e75a:	4604      	mov	r4, r0
   1e75c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e75e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1e762:	d41f      	bmi.n	1e7a4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1e764:	075f      	lsls	r7, r3, #29
   1e766:	d41f      	bmi.n	1e7a8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1e768:	680a      	ldr	r2, [r1, #0]
   1e76a:	b90a      	cbnz	r2, 1e770 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1e76c:	6882      	ldr	r2, [r0, #8]
   1e76e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1e770:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1e772:	bf44      	itt	mi
   1e774:	68a3      	ldrmi	r3, [r4, #8]
   1e776:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1e778:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1e77a:	bf4c      	ite	mi
   1e77c:	2502      	movmi	r5, #2
		ret = 1;
   1e77e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1e780:	b37f      	cbz	r7, 1e7e2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e782:	4b1b      	ldr	r3, [pc, #108]	; (1e7f0 <submit_to_queue_locked+0x9c>)
   1e784:	689b      	ldr	r3, [r3, #8]
   1e786:	42bb      	cmp	r3, r7
   1e788:	d111      	bne.n	1e7ae <submit_to_queue_locked+0x5a>
   1e78a:	f005 fba0 	bl	23ece <k_is_in_isr>
   1e78e:	f080 0001 	eor.w	r0, r0, #1
   1e792:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1e794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e798:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1e79a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e79e:	d523      	bpl.n	1e7e8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1e7a0:	b13a      	cbz	r2, 1e7b2 <submit_to_queue_locked+0x5e>
   1e7a2:	b940      	cbnz	r0, 1e7b6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1e7a4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1e7a8:	2300      	movs	r3, #0
   1e7aa:	6033      	str	r3, [r6, #0]
	return ret;
   1e7ac:	e013      	b.n	1e7d6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e7ae:	2000      	movs	r0, #0
   1e7b0:	e7f0      	b.n	1e794 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1e7b2:	071b      	lsls	r3, r3, #28
   1e7b4:	d4f6      	bmi.n	1e7a4 <submit_to_queue_locked+0x50>
	parent->next = child;
   1e7b6:	2300      	movs	r3, #0
   1e7b8:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e7ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1e7be:	b963      	cbnz	r3, 1e7da <submit_to_queue_locked+0x86>
	list->head = node;
   1e7c0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1e7c4:	4638      	mov	r0, r7
   1e7c6:	f005 fc99 	bl	240fc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1e7ca:	68e3      	ldr	r3, [r4, #12]
   1e7cc:	f043 0304 	orr.w	r3, r3, #4
   1e7d0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1e7d2:	6833      	ldr	r3, [r6, #0]
   1e7d4:	60a3      	str	r3, [r4, #8]
}
   1e7d6:	4628      	mov	r0, r5
   1e7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1e7da:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e7dc:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1e7e0:	e7f0      	b.n	1e7c4 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1e7e2:	f06f 0515 	mvn.w	r5, #21
   1e7e6:	e7df      	b.n	1e7a8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1e7e8:	f06f 0512 	mvn.w	r5, #18
   1e7ec:	e7dc      	b.n	1e7a8 <submit_to_queue_locked+0x54>
   1e7ee:	bf00      	nop
   1e7f0:	2000606c 	.word	0x2000606c

0001e7f4 <k_work_submit>:
{
   1e7f4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1e7f6:	4801      	ldr	r0, [pc, #4]	; (1e7fc <k_work_submit+0x8>)
   1e7f8:	f005 bce0 	b.w	241bc <k_work_submit_to_queue>
   1e7fc:	200017b0 	.word	0x200017b0

0001e800 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1e800:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e802:	b089      	sub	sp, #36	; 0x24
   1e804:	4604      	mov	r4, r0
	list->head = NULL;
   1e806:	2000      	movs	r0, #0
	list->tail = NULL;
   1e808:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1e80c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e80e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1e812:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1e816:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1e81a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1e81e:	b31d      	cbz	r5, 1e868 <k_work_queue_start+0x68>
   1e820:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1e822:	2800      	cmp	r0, #0
   1e824:	f240 1001 	movw	r0, #257	; 0x101
   1e828:	bf08      	it	eq
   1e82a:	2001      	moveq	r0, #1
	*flagp = flags;
   1e82c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e830:	2000      	movs	r0, #0
   1e832:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e836:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e83a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1e83e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1e842:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1e846:	4b09      	ldr	r3, [pc, #36]	; (1e86c <k_work_queue_start+0x6c>)
   1e848:	9400      	str	r4, [sp, #0]
   1e84a:	4620      	mov	r0, r4
   1e84c:	f7ff fcd4 	bl	1e1f8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1e850:	b125      	cbz	r5, 1e85c <k_work_queue_start+0x5c>
   1e852:	6829      	ldr	r1, [r5, #0]
   1e854:	b111      	cbz	r1, 1e85c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1e856:	4620      	mov	r0, r4
   1e858:	f005 fb3f 	bl	23eda <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1e85c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1e85e:	b009      	add	sp, #36	; 0x24
   1e860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e864:	f005 bb3c 	b.w	23ee0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1e868:	2001      	movs	r0, #1
   1e86a:	e7df      	b.n	1e82c <k_work_queue_start+0x2c>
   1e86c:	0001e5ed 	.word	0x0001e5ed

0001e870 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1e870:	b513      	push	{r0, r1, r4, lr}
   1e872:	9001      	str	r0, [sp, #4]
   1e874:	4608      	mov	r0, r1
	__asm__ volatile(
   1e876:	f04f 0120 	mov.w	r1, #32
   1e87a:	f3ef 8411 	mrs	r4, BASEPRI
   1e87e:	f381 8812 	msr	BASEPRI_MAX, r1
   1e882:	f3bf 8f6f 	isb	sy
	return *flagp;
   1e886:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1e888:	f011 0f0e 	tst.w	r1, #14
   1e88c:	d116      	bne.n	1e8bc <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e88e:	ea53 0c02 	orrs.w	ip, r3, r2
   1e892:	d108      	bne.n	1e8a6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1e894:	a901      	add	r1, sp, #4
   1e896:	f7ff ff5d 	bl	1e754 <submit_to_queue_locked>
	__asm__ volatile(
   1e89a:	f384 8811 	msr	BASEPRI, r4
   1e89e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1e8a2:	b002      	add	sp, #8
   1e8a4:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1e8a6:	f041 0108 	orr.w	r1, r1, #8
   1e8aa:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1e8ac:	9901      	ldr	r1, [sp, #4]
   1e8ae:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e8b0:	3010      	adds	r0, #16
   1e8b2:	4903      	ldr	r1, [pc, #12]	; (1e8c0 <k_work_schedule_for_queue+0x50>)
   1e8b4:	f000 fc0e 	bl	1f0d4 <z_add_timeout>
	return ret;
   1e8b8:	2001      	movs	r0, #1
   1e8ba:	e7ee      	b.n	1e89a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1e8bc:	2000      	movs	r0, #0
   1e8be:	e7ec      	b.n	1e89a <k_work_schedule_for_queue+0x2a>
   1e8c0:	0002416d 	.word	0x0002416d

0001e8c4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1e8c4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1e8c6:	4801      	ldr	r0, [pc, #4]	; (1e8cc <k_work_schedule+0x8>)
   1e8c8:	f7ff bfd2 	b.w	1e870 <k_work_schedule_for_queue>
   1e8cc:	200017b0 	.word	0x200017b0

0001e8d0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1e8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e8d2:	460c      	mov	r4, r1
   1e8d4:	9001      	str	r0, [sp, #4]
   1e8d6:	4616      	mov	r6, r2
   1e8d8:	461d      	mov	r5, r3
	__asm__ volatile(
   1e8da:	f04f 0320 	mov.w	r3, #32
   1e8de:	f3ef 8711 	mrs	r7, BASEPRI
   1e8e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8e6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1e8ea:	4608      	mov	r0, r1
   1e8ec:	f005 fbf8 	bl	240e0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e8f0:	ea55 0306 	orrs.w	r3, r5, r6
   1e8f4:	d109      	bne.n	1e90a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1e8f6:	a901      	add	r1, sp, #4
   1e8f8:	4620      	mov	r0, r4
   1e8fa:	f7ff ff2b 	bl	1e754 <submit_to_queue_locked>
	__asm__ volatile(
   1e8fe:	f387 8811 	msr	BASEPRI, r7
   1e902:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1e906:	b003      	add	sp, #12
   1e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1e90a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e90c:	4906      	ldr	r1, [pc, #24]	; (1e928 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1e90e:	f043 0308 	orr.w	r3, r3, #8
   1e912:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1e914:	9b01      	ldr	r3, [sp, #4]
   1e916:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e918:	f104 0010 	add.w	r0, r4, #16
   1e91c:	4632      	mov	r2, r6
   1e91e:	462b      	mov	r3, r5
   1e920:	f000 fbd8 	bl	1f0d4 <z_add_timeout>
	return ret;
   1e924:	2001      	movs	r0, #1
   1e926:	e7ea      	b.n	1e8fe <k_work_reschedule_for_queue+0x2e>
   1e928:	0002416d 	.word	0x0002416d

0001e92c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1e92c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1e92e:	4801      	ldr	r0, [pc, #4]	; (1e934 <k_work_reschedule+0x8>)
   1e930:	f7ff bfce 	b.w	1e8d0 <k_work_reschedule_for_queue>
   1e934:	200017b0 	.word	0x200017b0

0001e938 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1e938:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1e93a:	4c08      	ldr	r4, [pc, #32]	; (1e95c <z_reset_time_slice+0x24>)
   1e93c:	6823      	ldr	r3, [r4, #0]
   1e93e:	b15b      	cbz	r3, 1e958 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1e940:	f7fd faf8 	bl	1bf34 <sys_clock_elapsed>
   1e944:	4603      	mov	r3, r0
   1e946:	6820      	ldr	r0, [r4, #0]
   1e948:	4a05      	ldr	r2, [pc, #20]	; (1e960 <z_reset_time_slice+0x28>)
   1e94a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1e94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1e950:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1e952:	2100      	movs	r1, #0
   1e954:	f005 bdad 	b.w	244b2 <z_set_timeout_expiry>
}
   1e958:	bd10      	pop	{r4, pc}
   1e95a:	bf00      	nop
   1e95c:	200060a4 	.word	0x200060a4
   1e960:	2000606c 	.word	0x2000606c

0001e964 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e966:	4604      	mov	r4, r0
   1e968:	460d      	mov	r5, r1
	__asm__ volatile(
   1e96a:	f04f 0320 	mov.w	r3, #32
   1e96e:	f3ef 8611 	mrs	r6, BASEPRI
   1e972:	f383 8812 	msr	BASEPRI_MAX, r3
   1e976:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1e97a:	4b0f      	ldr	r3, [pc, #60]	; (1e9b8 <k_sched_time_slice_set+0x54>)
   1e97c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1e97e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1e982:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e986:	6119      	str	r1, [r3, #16]
   1e988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e98c:	2300      	movs	r3, #0
   1e98e:	fbe4 0107 	umlal	r0, r1, r4, r7
   1e992:	f7e1 ffab 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1e996:	2c00      	cmp	r4, #0
   1e998:	4b08      	ldr	r3, [pc, #32]	; (1e9bc <k_sched_time_slice_set+0x58>)
   1e99a:	dc09      	bgt.n	1e9b0 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1e99c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1e99e:	4b08      	ldr	r3, [pc, #32]	; (1e9c0 <k_sched_time_slice_set+0x5c>)
   1e9a0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1e9a2:	f7ff ffc9 	bl	1e938 <z_reset_time_slice>
	__asm__ volatile(
   1e9a6:	f386 8811 	msr	BASEPRI, r6
   1e9aa:	f3bf 8f6f 	isb	sy
	}
}
   1e9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1e9b0:	2802      	cmp	r0, #2
   1e9b2:	bfb8      	it	lt
   1e9b4:	2002      	movlt	r0, #2
   1e9b6:	e7f1      	b.n	1e99c <k_sched_time_slice_set+0x38>
   1e9b8:	2000606c 	.word	0x2000606c
   1e9bc:	200060a4 	.word	0x200060a4
   1e9c0:	200060a0 	.word	0x200060a0

0001e9c4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e9c4:	b949      	cbnz	r1, 1e9da <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e9c6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1e9ca:	b930      	cbnz	r0, 1e9da <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1e9cc:	4b05      	ldr	r3, [pc, #20]	; (1e9e4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1e9ce:	69da      	ldr	r2, [r3, #28]
   1e9d0:	689b      	ldr	r3, [r3, #8]
   1e9d2:	429a      	cmp	r2, r3
   1e9d4:	d001      	beq.n	1e9da <z_reschedule+0x16>
	ret = arch_swap(key);
   1e9d6:	f7e7 ba51 	b.w	5e7c <arch_swap>
   1e9da:	f381 8811 	msr	BASEPRI, r1
   1e9de:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1e9e2:	4770      	bx	lr
   1e9e4:	2000606c 	.word	0x2000606c

0001e9e8 <k_sched_lock>:
	__asm__ volatile(
   1e9e8:	f04f 0320 	mov.w	r3, #32
   1e9ec:	f3ef 8111 	mrs	r1, BASEPRI
   1e9f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9f4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1e9f8:	4b04      	ldr	r3, [pc, #16]	; (1ea0c <k_sched_lock+0x24>)
   1e9fa:	689a      	ldr	r2, [r3, #8]
   1e9fc:	7bd3      	ldrb	r3, [r2, #15]
   1e9fe:	3b01      	subs	r3, #1
   1ea00:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1ea02:	f381 8811 	msr	BASEPRI, r1
   1ea06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1ea0a:	4770      	bx	lr
   1ea0c:	2000606c 	.word	0x2000606c

0001ea10 <update_cache>:
{
   1ea10:	b538      	push	{r3, r4, r5, lr}
   1ea12:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1ea14:	480c      	ldr	r0, [pc, #48]	; (1ea48 <update_cache+0x38>)
   1ea16:	4d0d      	ldr	r5, [pc, #52]	; (1ea4c <update_cache+0x3c>)
   1ea18:	f005 fc7e 	bl	24318 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1ea1c:	4604      	mov	r4, r0
   1ea1e:	b900      	cbnz	r0, 1ea22 <update_cache+0x12>
   1ea20:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1ea22:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1ea24:	b94a      	cbnz	r2, 1ea3a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1ea26:	7b5a      	ldrb	r2, [r3, #13]
   1ea28:	06d2      	lsls	r2, r2, #27
   1ea2a:	d106      	bne.n	1ea3a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ea2c:	69a2      	ldr	r2, [r4, #24]
   1ea2e:	b922      	cbnz	r2, 1ea3a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ea30:	89da      	ldrh	r2, [r3, #14]
   1ea32:	2a7f      	cmp	r2, #127	; 0x7f
   1ea34:	d901      	bls.n	1ea3a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1ea36:	61eb      	str	r3, [r5, #28]
}
   1ea38:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1ea3a:	429c      	cmp	r4, r3
   1ea3c:	d001      	beq.n	1ea42 <update_cache+0x32>
			z_reset_time_slice();
   1ea3e:	f7ff ff7b 	bl	1e938 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ea42:	61ec      	str	r4, [r5, #28]
}
   1ea44:	e7f8      	b.n	1ea38 <update_cache+0x28>
   1ea46:	bf00      	nop
   1ea48:	2000608c 	.word	0x2000608c
   1ea4c:	2000606c 	.word	0x2000606c

0001ea50 <move_thread_to_end_of_prio_q>:
{
   1ea50:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ea52:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ea56:	7b43      	ldrb	r3, [r0, #13]
   1ea58:	2a00      	cmp	r2, #0
{
   1ea5a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ea5c:	da04      	bge.n	1ea68 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ea5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ea62:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ea64:	f005 fc13 	bl	2428e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ea68:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ea6a:	4a15      	ldr	r2, [pc, #84]	; (1eac0 <move_thread_to_end_of_prio_q+0x70>)
   1ea6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ea70:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ea72:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea76:	f102 0520 	add.w	r5, r2, #32
   1ea7a:	42ab      	cmp	r3, r5
   1ea7c:	d01b      	beq.n	1eab6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ea7e:	b1d3      	cbz	r3, 1eab6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1ea80:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1ea84:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ea88:	4286      	cmp	r6, r0
   1ea8a:	d00f      	beq.n	1eaac <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1ea8c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ea8e:	2800      	cmp	r0, #0
   1ea90:	dd0c      	ble.n	1eaac <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1ea92:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1ea94:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1ea98:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1ea9a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1ea9c:	6890      	ldr	r0, [r2, #8]
   1ea9e:	1a43      	subs	r3, r0, r1
   1eaa0:	4258      	negs	r0, r3
}
   1eaa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1eaa6:	4158      	adcs	r0, r3
   1eaa8:	f7ff bfb2 	b.w	1ea10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1eaac:	42a3      	cmp	r3, r4
   1eaae:	d002      	beq.n	1eab6 <move_thread_to_end_of_prio_q+0x66>
   1eab0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eab2:	2b00      	cmp	r3, #0
   1eab4:	d1e6      	bne.n	1ea84 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1eab6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1eaba:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1eabc:	6251      	str	r1, [r2, #36]	; 0x24
}
   1eabe:	e7ed      	b.n	1ea9c <move_thread_to_end_of_prio_q+0x4c>
   1eac0:	2000606c 	.word	0x2000606c

0001eac4 <z_time_slice>:
{
   1eac4:	b538      	push	{r3, r4, r5, lr}
   1eac6:	4601      	mov	r1, r0
	__asm__ volatile(
   1eac8:	f04f 0320 	mov.w	r3, #32
   1eacc:	f3ef 8411 	mrs	r4, BASEPRI
   1ead0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ead4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ead8:	4b15      	ldr	r3, [pc, #84]	; (1eb30 <z_time_slice+0x6c>)
   1eada:	4a16      	ldr	r2, [pc, #88]	; (1eb34 <z_time_slice+0x70>)
   1eadc:	6898      	ldr	r0, [r3, #8]
   1eade:	6815      	ldr	r5, [r2, #0]
   1eae0:	42a8      	cmp	r0, r5
   1eae2:	d106      	bne.n	1eaf2 <z_time_slice+0x2e>
			z_reset_time_slice();
   1eae4:	f7ff ff28 	bl	1e938 <z_reset_time_slice>
	__asm__ volatile(
   1eae8:	f384 8811 	msr	BASEPRI, r4
   1eaec:	f3bf 8f6f 	isb	sy
}
   1eaf0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1eaf2:	2500      	movs	r5, #0
   1eaf4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1eaf6:	4a10      	ldr	r2, [pc, #64]	; (1eb38 <z_time_slice+0x74>)
   1eaf8:	6812      	ldr	r2, [r2, #0]
   1eafa:	b1ba      	cbz	r2, 1eb2c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1eafc:	89c2      	ldrh	r2, [r0, #14]
   1eafe:	2a7f      	cmp	r2, #127	; 0x7f
   1eb00:	d814      	bhi.n	1eb2c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1eb02:	7b42      	ldrb	r2, [r0, #13]
   1eb04:	06d2      	lsls	r2, r2, #27
   1eb06:	d111      	bne.n	1eb2c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1eb08:	4a0c      	ldr	r2, [pc, #48]	; (1eb3c <z_time_slice+0x78>)
   1eb0a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1eb0e:	6812      	ldr	r2, [r2, #0]
   1eb10:	4295      	cmp	r5, r2
   1eb12:	db0b      	blt.n	1eb2c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1eb14:	4a0a      	ldr	r2, [pc, #40]	; (1eb40 <z_time_slice+0x7c>)
   1eb16:	4290      	cmp	r0, r2
   1eb18:	d008      	beq.n	1eb2c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1eb1a:	691a      	ldr	r2, [r3, #16]
   1eb1c:	428a      	cmp	r2, r1
   1eb1e:	dc02      	bgt.n	1eb26 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1eb20:	f7ff ff96 	bl	1ea50 <move_thread_to_end_of_prio_q>
   1eb24:	e7de      	b.n	1eae4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1eb26:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1eb28:	611a      	str	r2, [r3, #16]
   1eb2a:	e7dd      	b.n	1eae8 <z_time_slice+0x24>
   1eb2c:	2200      	movs	r2, #0
   1eb2e:	e7fb      	b.n	1eb28 <z_time_slice+0x64>
   1eb30:	2000606c 	.word	0x2000606c
   1eb34:	2000609c 	.word	0x2000609c
   1eb38:	200060a4 	.word	0x200060a4
   1eb3c:	200060a0 	.word	0x200060a0
   1eb40:	200016b0 	.word	0x200016b0

0001eb44 <ready_thread>:
{
   1eb44:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1eb46:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1eb4a:	7b43      	ldrb	r3, [r0, #13]
   1eb4c:	2a00      	cmp	r2, #0
   1eb4e:	db2a      	blt.n	1eba6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1eb50:	06da      	lsls	r2, r3, #27
   1eb52:	d128      	bne.n	1eba6 <ready_thread+0x62>
   1eb54:	6982      	ldr	r2, [r0, #24]
   1eb56:	bb32      	cbnz	r2, 1eba6 <ready_thread+0x62>
	return list->head == list;
   1eb58:	4a14      	ldr	r2, [pc, #80]	; (1ebac <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1eb5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1eb5e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1eb60:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eb64:	f102 0520 	add.w	r5, r2, #32
   1eb68:	42ab      	cmp	r3, r5
   1eb6a:	d017      	beq.n	1eb9c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eb6c:	b1b3      	cbz	r3, 1eb9c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1eb6e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1eb72:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1eb76:	428e      	cmp	r6, r1
   1eb78:	d00b      	beq.n	1eb92 <ready_thread+0x4e>
		return b2 - b1;
   1eb7a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1eb7c:	2900      	cmp	r1, #0
   1eb7e:	dd08      	ble.n	1eb92 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1eb80:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1eb82:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1eb86:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1eb88:	6058      	str	r0, [r3, #4]
}
   1eb8a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1eb8c:	2000      	movs	r0, #0
   1eb8e:	f7ff bf3f 	b.w	1ea10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1eb92:	42a3      	cmp	r3, r4
   1eb94:	d002      	beq.n	1eb9c <ready_thread+0x58>
   1eb96:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1eb98:	2b00      	cmp	r3, #0
   1eb9a:	d1ea      	bne.n	1eb72 <ready_thread+0x2e>
	node->prev = tail;
   1eb9c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1eba0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1eba2:	6250      	str	r0, [r2, #36]	; 0x24
}
   1eba4:	e7f1      	b.n	1eb8a <ready_thread+0x46>
}
   1eba6:	bc70      	pop	{r4, r5, r6}
   1eba8:	4770      	bx	lr
   1ebaa:	bf00      	nop
   1ebac:	2000606c 	.word	0x2000606c

0001ebb0 <z_sched_start>:
{
   1ebb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ebb2:	f04f 0220 	mov.w	r2, #32
   1ebb6:	f3ef 8411 	mrs	r4, BASEPRI
   1ebba:	f382 8812 	msr	BASEPRI_MAX, r2
   1ebbe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ebc2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1ebc4:	0751      	lsls	r1, r2, #29
   1ebc6:	d404      	bmi.n	1ebd2 <z_sched_start+0x22>
	__asm__ volatile(
   1ebc8:	f384 8811 	msr	BASEPRI, r4
   1ebcc:	f3bf 8f6f 	isb	sy
}
   1ebd0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ebd2:	f022 0204 	bic.w	r2, r2, #4
   1ebd6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ebd8:	f7ff ffb4 	bl	1eb44 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ebdc:	4621      	mov	r1, r4
   1ebde:	4802      	ldr	r0, [pc, #8]	; (1ebe8 <z_sched_start+0x38>)
}
   1ebe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ebe4:	f7ff beee 	b.w	1e9c4 <z_reschedule>
   1ebe8:	20006133 	.word	0x20006133

0001ebec <unready_thread>:
{
   1ebec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1ebee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ebf2:	7b43      	ldrb	r3, [r0, #13]
   1ebf4:	2a00      	cmp	r2, #0
{
   1ebf6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ebf8:	da04      	bge.n	1ec04 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ebfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ebfe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ec00:	f005 fb45 	bl	2428e <sys_dlist_remove>
	update_cache(thread == _current);
   1ec04:	4b04      	ldr	r3, [pc, #16]	; (1ec18 <unready_thread+0x2c>)
   1ec06:	6898      	ldr	r0, [r3, #8]
   1ec08:	1a43      	subs	r3, r0, r1
   1ec0a:	4258      	negs	r0, r3
   1ec0c:	4158      	adcs	r0, r3
}
   1ec0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ec12:	f7ff befd 	b.w	1ea10 <update_cache>
   1ec16:	bf00      	nop
   1ec18:	2000606c 	.word	0x2000606c

0001ec1c <pend>:
{
   1ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec20:	4606      	mov	r6, r0
   1ec22:	4615      	mov	r5, r2
   1ec24:	461c      	mov	r4, r3
	__asm__ volatile(
   1ec26:	f04f 0320 	mov.w	r3, #32
   1ec2a:	f3ef 8711 	mrs	r7, BASEPRI
   1ec2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ec36:	f005 fba7 	bl	24388 <add_to_waitq_locked>
	__asm__ volatile(
   1ec3a:	f387 8811 	msr	BASEPRI, r7
   1ec3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ec42:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1ec46:	bf08      	it	eq
   1ec48:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1ec4c:	d008      	beq.n	1ec60 <pend+0x44>
   1ec4e:	462a      	mov	r2, r5
   1ec50:	4623      	mov	r3, r4
   1ec52:	f106 0018 	add.w	r0, r6, #24
   1ec56:	4903      	ldr	r1, [pc, #12]	; (1ec64 <pend+0x48>)
}
   1ec58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec5c:	f000 ba3a 	b.w	1f0d4 <z_add_timeout>
   1ec60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec64:	00024345 	.word	0x00024345

0001ec68 <z_pend_curr>:
{
   1ec68:	b510      	push	{r4, lr}
	pending_current = _current;
   1ec6a:	4b07      	ldr	r3, [pc, #28]	; (1ec88 <z_pend_curr+0x20>)
   1ec6c:	6898      	ldr	r0, [r3, #8]
   1ec6e:	4b07      	ldr	r3, [pc, #28]	; (1ec8c <z_pend_curr+0x24>)
{
   1ec70:	460c      	mov	r4, r1
	pending_current = _current;
   1ec72:	6018      	str	r0, [r3, #0]
{
   1ec74:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ec76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ec7a:	f7ff ffcf 	bl	1ec1c <pend>
   1ec7e:	4620      	mov	r0, r4
}
   1ec80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ec84:	f7e7 b8fa 	b.w	5e7c <arch_swap>
   1ec88:	2000606c 	.word	0x2000606c
   1ec8c:	2000609c 	.word	0x2000609c

0001ec90 <z_set_prio>:
{
   1ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec92:	4604      	mov	r4, r0
	__asm__ volatile(
   1ec94:	f04f 0320 	mov.w	r3, #32
   1ec98:	f3ef 8611 	mrs	r6, BASEPRI
   1ec9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1eca0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1eca4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1eca6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1eca8:	b249      	sxtb	r1, r1
   1ecaa:	d133      	bne.n	1ed14 <z_set_prio+0x84>
		if (need_sched) {
   1ecac:	6982      	ldr	r2, [r0, #24]
   1ecae:	bb8a      	cbnz	r2, 1ed14 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ecb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ecb4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ecb6:	f005 faea 	bl	2428e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ecba:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1ecbc:	4a17      	ldr	r2, [pc, #92]	; (1ed1c <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1ecbe:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ecc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ecc4:	7343      	strb	r3, [r0, #13]
   1ecc6:	4610      	mov	r0, r2
   1ecc8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eccc:	4283      	cmp	r3, r0
   1ecce:	d01b      	beq.n	1ed08 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ecd0:	b1d3      	cbz	r3, 1ed08 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1ecd2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1ecd4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1ecd8:	42a9      	cmp	r1, r5
   1ecda:	d010      	beq.n	1ecfe <z_set_prio+0x6e>
		return b2 - b1;
   1ecdc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ecde:	2d00      	cmp	r5, #0
   1ece0:	dd0d      	ble.n	1ecfe <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1ece2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ece4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ece8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ecea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1ecec:	2001      	movs	r0, #1
   1ecee:	f7ff fe8f 	bl	1ea10 <update_cache>
   1ecf2:	2001      	movs	r0, #1
	__asm__ volatile(
   1ecf4:	f386 8811 	msr	BASEPRI, r6
   1ecf8:	f3bf 8f6f 	isb	sy
}
   1ecfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1ecfe:	42bb      	cmp	r3, r7
   1ed00:	d002      	beq.n	1ed08 <z_set_prio+0x78>
   1ed02:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ed04:	2b00      	cmp	r3, #0
   1ed06:	d1e5      	bne.n	1ecd4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1ed08:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1ed0a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1ed0e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ed10:	6254      	str	r4, [r2, #36]	; 0x24
}
   1ed12:	e7eb      	b.n	1ecec <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ed14:	73a1      	strb	r1, [r4, #14]
   1ed16:	2000      	movs	r0, #0
   1ed18:	e7ec      	b.n	1ecf4 <z_set_prio+0x64>
   1ed1a:	bf00      	nop
   1ed1c:	2000606c 	.word	0x2000606c

0001ed20 <z_impl_k_thread_suspend>:
{
   1ed20:	b570      	push	{r4, r5, r6, lr}
   1ed22:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ed24:	3018      	adds	r0, #24
   1ed26:	f005 fb9e 	bl	24466 <z_abort_timeout>
	__asm__ volatile(
   1ed2a:	f04f 0320 	mov.w	r3, #32
   1ed2e:	f3ef 8611 	mrs	r6, BASEPRI
   1ed32:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed36:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ed3a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1ed3e:	7b63      	ldrb	r3, [r4, #13]
   1ed40:	2a00      	cmp	r2, #0
   1ed42:	da05      	bge.n	1ed50 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ed44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ed48:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ed4a:	4620      	mov	r0, r4
   1ed4c:	f005 fa9f 	bl	2428e <sys_dlist_remove>
		update_cache(thread == _current);
   1ed50:	4d0b      	ldr	r5, [pc, #44]	; (1ed80 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ed52:	7b63      	ldrb	r3, [r4, #13]
   1ed54:	68a8      	ldr	r0, [r5, #8]
   1ed56:	f043 0310 	orr.w	r3, r3, #16
   1ed5a:	7363      	strb	r3, [r4, #13]
   1ed5c:	1b03      	subs	r3, r0, r4
   1ed5e:	4258      	negs	r0, r3
   1ed60:	4158      	adcs	r0, r3
   1ed62:	f7ff fe55 	bl	1ea10 <update_cache>
	__asm__ volatile(
   1ed66:	f386 8811 	msr	BASEPRI, r6
   1ed6a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ed6e:	68ab      	ldr	r3, [r5, #8]
   1ed70:	42a3      	cmp	r3, r4
   1ed72:	d103      	bne.n	1ed7c <z_impl_k_thread_suspend+0x5c>
}
   1ed74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ed78:	f005 bac4 	b.w	24304 <z_reschedule_unlocked>
}
   1ed7c:	bd70      	pop	{r4, r5, r6, pc}
   1ed7e:	bf00      	nop
   1ed80:	2000606c 	.word	0x2000606c

0001ed84 <k_sched_unlock>:
{
   1ed84:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed86:	f04f 0320 	mov.w	r3, #32
   1ed8a:	f3ef 8411 	mrs	r4, BASEPRI
   1ed8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed92:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ed96:	4b08      	ldr	r3, [pc, #32]	; (1edb8 <k_sched_unlock+0x34>)
   1ed98:	689a      	ldr	r2, [r3, #8]
   1ed9a:	7bd3      	ldrb	r3, [r2, #15]
   1ed9c:	3301      	adds	r3, #1
   1ed9e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1eda0:	2000      	movs	r0, #0
   1eda2:	f7ff fe35 	bl	1ea10 <update_cache>
	__asm__ volatile(
   1eda6:	f384 8811 	msr	BASEPRI, r4
   1edaa:	f3bf 8f6f 	isb	sy
}
   1edae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1edb2:	f005 baa7 	b.w	24304 <z_reschedule_unlocked>
   1edb6:	bf00      	nop
   1edb8:	2000606c 	.word	0x2000606c

0001edbc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1edbc:	4b04      	ldr	r3, [pc, #16]	; (1edd0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1edbe:	2100      	movs	r1, #0
   1edc0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1edc4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1edc8:	4608      	mov	r0, r1
   1edca:	f7ff bdcb 	b.w	1e964 <k_sched_time_slice_set>
   1edce:	bf00      	nop
   1edd0:	2000606c 	.word	0x2000606c

0001edd4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1edd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1edd6:	f04f 0320 	mov.w	r3, #32
   1edda:	f3ef 8511 	mrs	r5, BASEPRI
   1edde:	f383 8812 	msr	BASEPRI_MAX, r3
   1ede2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1ede6:	491a      	ldr	r1, [pc, #104]	; (1ee50 <z_impl_k_yield+0x7c>)
   1ede8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1edea:	7b43      	ldrb	r3, [r0, #13]
   1edec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1edf0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1edf2:	f005 fa4c 	bl	2428e <sys_dlist_remove>
	}
	queue_thread(_current);
   1edf6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1edf8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1edfa:	4608      	mov	r0, r1
   1edfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ee00:	735a      	strb	r2, [r3, #13]
   1ee02:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee06:	4282      	cmp	r2, r0
   1ee08:	d01c      	beq.n	1ee44 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee0a:	b1da      	cbz	r2, 1ee44 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1ee0c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1ee0e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1ee12:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1ee16:	42a6      	cmp	r6, r4
   1ee18:	d00f      	beq.n	1ee3a <z_impl_k_yield+0x66>
		return b2 - b1;
   1ee1a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ee1c:	2c00      	cmp	r4, #0
   1ee1e:	dd0c      	ble.n	1ee3a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1ee20:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1ee22:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1ee26:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1ee28:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1ee2a:	2001      	movs	r0, #1
   1ee2c:	f7ff fdf0 	bl	1ea10 <update_cache>
   1ee30:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1ee32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ee36:	f7e7 b821 	b.w	5e7c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1ee3a:	42ba      	cmp	r2, r7
   1ee3c:	d002      	beq.n	1ee44 <z_impl_k_yield+0x70>
   1ee3e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee40:	2a00      	cmp	r2, #0
   1ee42:	d1e6      	bne.n	1ee12 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1ee44:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1ee46:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1ee4a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1ee4c:	624b      	str	r3, [r1, #36]	; 0x24
}
   1ee4e:	e7ec      	b.n	1ee2a <z_impl_k_yield+0x56>
   1ee50:	2000606c 	.word	0x2000606c

0001ee54 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1ee54:	ea50 0301 	orrs.w	r3, r0, r1
{
   1ee58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee5c:	4605      	mov	r5, r0
   1ee5e:	460e      	mov	r6, r1
	if (ticks == 0) {
   1ee60:	d103      	bne.n	1ee6a <z_tick_sleep+0x16>
	z_impl_k_yield();
   1ee62:	f7ff ffb7 	bl	1edd4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1ee66:	2000      	movs	r0, #0
   1ee68:	e033      	b.n	1eed2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1ee6a:	f06f 0401 	mvn.w	r4, #1
   1ee6e:	1a24      	subs	r4, r4, r0
   1ee70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee74:	eb63 0301 	sbc.w	r3, r3, r1
   1ee78:	2c01      	cmp	r4, #1
   1ee7a:	f173 0300 	sbcs.w	r3, r3, #0
   1ee7e:	da02      	bge.n	1ee86 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ee80:	f005 fb31 	bl	244e6 <sys_clock_tick_get_32>
   1ee84:	1944      	adds	r4, r0, r5
   1ee86:	f04f 0320 	mov.w	r3, #32
   1ee8a:	f3ef 8811 	mrs	r8, BASEPRI
   1ee8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee92:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1ee96:	4f10      	ldr	r7, [pc, #64]	; (1eed8 <z_tick_sleep+0x84>)
   1ee98:	4b10      	ldr	r3, [pc, #64]	; (1eedc <z_tick_sleep+0x88>)
   1ee9a:	68b8      	ldr	r0, [r7, #8]
   1ee9c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1ee9e:	f7ff fea5 	bl	1ebec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1eea2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1eea4:	490e      	ldr	r1, [pc, #56]	; (1eee0 <z_tick_sleep+0x8c>)
   1eea6:	462a      	mov	r2, r5
   1eea8:	4633      	mov	r3, r6
   1eeaa:	3018      	adds	r0, #24
   1eeac:	f000 f912 	bl	1f0d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1eeb0:	68ba      	ldr	r2, [r7, #8]
   1eeb2:	7b53      	ldrb	r3, [r2, #13]
   1eeb4:	f043 0310 	orr.w	r3, r3, #16
   1eeb8:	7353      	strb	r3, [r2, #13]
   1eeba:	4640      	mov	r0, r8
   1eebc:	f7e6 ffde 	bl	5e7c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1eec0:	f005 fb11 	bl	244e6 <sys_clock_tick_get_32>
   1eec4:	1a20      	subs	r0, r4, r0
   1eec6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1eeca:	2801      	cmp	r0, #1
   1eecc:	f173 0300 	sbcs.w	r3, r3, #0
   1eed0:	dbc9      	blt.n	1ee66 <z_tick_sleep+0x12>
}
   1eed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eed6:	bf00      	nop
   1eed8:	2000606c 	.word	0x2000606c
   1eedc:	2000609c 	.word	0x2000609c
   1eee0:	00024345 	.word	0x00024345

0001eee4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eee4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1eee8:	bf08      	it	eq
   1eeea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1eeee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eef0:	d106      	bne.n	1ef00 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1eef2:	4b08      	ldr	r3, [pc, #32]	; (1ef14 <z_impl_k_sleep+0x30>)
   1eef4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1eef6:	f7ff ff13 	bl	1ed20 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1eefa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1eefe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1ef00:	f7ff ffa8 	bl	1ee54 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1ef04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ef08:	fb80 0303 	smull	r0, r3, r0, r3
   1ef0c:	0bc0      	lsrs	r0, r0, #15
   1ef0e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1ef12:	e7f4      	b.n	1eefe <z_impl_k_sleep+0x1a>
   1ef14:	2000606c 	.word	0x2000606c

0001ef18 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ef18:	4b01      	ldr	r3, [pc, #4]	; (1ef20 <z_impl_z_current_get+0x8>)
   1ef1a:	6898      	ldr	r0, [r3, #8]
   1ef1c:	4770      	bx	lr
   1ef1e:	bf00      	nop
   1ef20:	2000606c 	.word	0x2000606c

0001ef24 <z_impl_k_is_preempt_thread>:
   1ef24:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1ef28:	b93b      	cbnz	r3, 1ef3a <z_impl_k_is_preempt_thread+0x16>
   1ef2a:	4b05      	ldr	r3, [pc, #20]	; (1ef40 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1ef2c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1ef2e:	89d8      	ldrh	r0, [r3, #14]
   1ef30:	287f      	cmp	r0, #127	; 0x7f
   1ef32:	bf8c      	ite	hi
   1ef34:	2000      	movhi	r0, #0
   1ef36:	2001      	movls	r0, #1
   1ef38:	4770      	bx	lr
   1ef3a:	2000      	movs	r0, #0
}
   1ef3c:	4770      	bx	lr
   1ef3e:	bf00      	nop
   1ef40:	2000606c 	.word	0x2000606c

0001ef44 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef48:	4604      	mov	r4, r0
   1ef4a:	f04f 0320 	mov.w	r3, #32
   1ef4e:	f3ef 8611 	mrs	r6, BASEPRI
   1ef52:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ef5a:	7b43      	ldrb	r3, [r0, #13]
   1ef5c:	071a      	lsls	r2, r3, #28
   1ef5e:	d505      	bpl.n	1ef6c <z_thread_abort+0x28>
	__asm__ volatile(
   1ef60:	f386 8811 	msr	BASEPRI, r6
   1ef64:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ef6c:	f023 0220 	bic.w	r2, r3, #32
   1ef70:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ef74:	09d2      	lsrs	r2, r2, #7
   1ef76:	d120      	bne.n	1efba <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ef78:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ef7a:	68a3      	ldr	r3, [r4, #8]
   1ef7c:	b113      	cbz	r3, 1ef84 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1ef7e:	4620      	mov	r0, r4
   1ef80:	f005 f98d 	bl	2429e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ef84:	f104 0018 	add.w	r0, r4, #24
   1ef88:	f005 fa6d 	bl	24466 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ef8c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ef90:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1ef94:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef96:	42bd      	cmp	r5, r7
   1ef98:	d000      	beq.n	1ef9c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ef9a:	b9b5      	cbnz	r5, 1efca <z_thread_abort+0x86>
		update_cache(1);
   1ef9c:	2001      	movs	r0, #1
   1ef9e:	f7ff fd37 	bl	1ea10 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1efa2:	4b10      	ldr	r3, [pc, #64]	; (1efe4 <z_thread_abort+0xa0>)
   1efa4:	689b      	ldr	r3, [r3, #8]
   1efa6:	42a3      	cmp	r3, r4
   1efa8:	d1da      	bne.n	1ef60 <z_thread_abort+0x1c>
   1efaa:	f3ef 8305 	mrs	r3, IPSR
   1efae:	2b00      	cmp	r3, #0
   1efb0:	d1d6      	bne.n	1ef60 <z_thread_abort+0x1c>
   1efb2:	4630      	mov	r0, r6
   1efb4:	f7e6 ff62 	bl	5e7c <arch_swap>
	return ret;
   1efb8:	e7d2      	b.n	1ef60 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1efba:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1efbe:	f043 0308 	orr.w	r3, r3, #8
   1efc2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1efc4:	f005 f963 	bl	2428e <sys_dlist_remove>
}
   1efc8:	e7d7      	b.n	1ef7a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1efca:	4628      	mov	r0, r5
   1efcc:	f005 f967 	bl	2429e <unpend_thread_no_timeout>
   1efd0:	f105 0018 	add.w	r0, r5, #24
   1efd4:	f005 fa47 	bl	24466 <z_abort_timeout>
   1efd8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1efdc:	4628      	mov	r0, r5
   1efde:	f7ff fdb1 	bl	1eb44 <ready_thread>
   1efe2:	e7d7      	b.n	1ef94 <z_thread_abort+0x50>
   1efe4:	2000606c 	.word	0x2000606c

0001efe8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1efe8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1efea:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1efee:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1eff0:	e9cd 6700 	strd	r6, r7, [sp]
   1eff4:	f7ff fe38 	bl	1ec68 <z_pend_curr>

	if (data != NULL) {
   1eff8:	b11c      	cbz	r4, 1f002 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1effa:	4b03      	ldr	r3, [pc, #12]	; (1f008 <z_sched_wait+0x20>)
   1effc:	689b      	ldr	r3, [r3, #8]
   1effe:	695b      	ldr	r3, [r3, #20]
   1f000:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1f002:	b002      	add	sp, #8
   1f004:	bdd0      	pop	{r4, r6, r7, pc}
   1f006:	bf00      	nop
   1f008:	2000606c 	.word	0x2000606c

0001f00c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1f00c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1f00e:	4806      	ldr	r0, [pc, #24]	; (1f028 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1f010:	4a06      	ldr	r2, [pc, #24]	; (1f02c <z_data_copy+0x20>)
   1f012:	4907      	ldr	r1, [pc, #28]	; (1f030 <z_data_copy+0x24>)
   1f014:	1a12      	subs	r2, r2, r0
   1f016:	f001 fb87 	bl	20728 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1f01e:	4a05      	ldr	r2, [pc, #20]	; (1f034 <z_data_copy+0x28>)
   1f020:	4905      	ldr	r1, [pc, #20]	; (1f038 <z_data_copy+0x2c>)
   1f022:	4806      	ldr	r0, [pc, #24]	; (1f03c <z_data_copy+0x30>)
   1f024:	f001 bb80 	b.w	20728 <memcpy>
   1f028:	20000000 	.word	0x20000000
   1f02c:	20000d60 	.word	0x20000d60
   1f030:	00026854 	.word	0x00026854
   1f034:	00000000 	.word	0x00000000
   1f038:	00026854 	.word	0x00026854
   1f03c:	20000000 	.word	0x20000000

0001f040 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1f040:	4b03      	ldr	r3, [pc, #12]	; (1f050 <elapsed+0x10>)
   1f042:	681b      	ldr	r3, [r3, #0]
   1f044:	b90b      	cbnz	r3, 1f04a <elapsed+0xa>
   1f046:	f7fc bf75 	b.w	1bf34 <sys_clock_elapsed>
}
   1f04a:	2000      	movs	r0, #0
   1f04c:	4770      	bx	lr
   1f04e:	bf00      	nop
   1f050:	200060a8 	.word	0x200060a8

0001f054 <next_timeout>:
	return list->head == list;
   1f054:	4b10      	ldr	r3, [pc, #64]	; (1f098 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1f056:	b510      	push	{r4, lr}
   1f058:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f05a:	429c      	cmp	r4, r3
   1f05c:	bf08      	it	eq
   1f05e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1f060:	f7ff ffee 	bl	1f040 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1f064:	b1a4      	cbz	r4, 1f090 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1f066:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1f06a:	1a1b      	subs	r3, r3, r0
   1f06c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1f070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1f074:	f170 0200 	sbcs.w	r2, r0, #0
   1f078:	da0a      	bge.n	1f090 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1f07a:	2800      	cmp	r0, #0
   1f07c:	bfac      	ite	ge
   1f07e:	4618      	movge	r0, r3
   1f080:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1f082:	4b06      	ldr	r3, [pc, #24]	; (1f09c <next_timeout+0x48>)
   1f084:	691b      	ldr	r3, [r3, #16]
   1f086:	b113      	cbz	r3, 1f08e <next_timeout+0x3a>
   1f088:	4298      	cmp	r0, r3
   1f08a:	bfa8      	it	ge
   1f08c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1f08e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1f090:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f094:	e7f5      	b.n	1f082 <next_timeout+0x2e>
   1f096:	bf00      	nop
   1f098:	20000924 	.word	0x20000924
   1f09c:	2000606c 	.word	0x2000606c

0001f0a0 <remove_timeout>:
{
   1f0a0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1f0a2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f0a4:	b168      	cbz	r0, 1f0c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1f0a6:	4a0a      	ldr	r2, [pc, #40]	; (1f0d0 <remove_timeout+0x30>)
   1f0a8:	6852      	ldr	r2, [r2, #4]
   1f0aa:	4290      	cmp	r0, r2
   1f0ac:	d009      	beq.n	1f0c2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1f0ae:	b143      	cbz	r3, 1f0c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1f0b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1f0b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1f0b8:	1912      	adds	r2, r2, r4
   1f0ba:	eb41 0105 	adc.w	r1, r1, r5
   1f0be:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1f0c2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1f0c4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f0c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f0c8:	2300      	movs	r3, #0
	node->prev = NULL;
   1f0ca:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f0ce:	bd30      	pop	{r4, r5, pc}
   1f0d0:	20000924 	.word	0x20000924

0001f0d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f0d8:	bf08      	it	eq
   1f0da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1f0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0e0:	4604      	mov	r4, r0
   1f0e2:	461f      	mov	r7, r3
   1f0e4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f0e6:	d067      	beq.n	1f1b8 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1f0e8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1f0ea:	f04f 0320 	mov.w	r3, #32
   1f0ee:	f3ef 8611 	mrs	r6, BASEPRI
   1f0f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0f6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1f0fa:	f06f 0201 	mvn.w	r2, #1
   1f0fe:	1b53      	subs	r3, r2, r5
   1f100:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1f104:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1f108:	2b00      	cmp	r3, #0
   1f10a:	db1b      	blt.n	1f144 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1f10c:	4b2b      	ldr	r3, [pc, #172]	; (1f1bc <z_add_timeout+0xe8>)
   1f10e:	e9d3 1300 	ldrd	r1, r3, [r3]
   1f112:	1a52      	subs	r2, r2, r1
   1f114:	eb6c 0303 	sbc.w	r3, ip, r3
   1f118:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1f11a:	eb63 0307 	sbc.w	r3, r3, r7
   1f11e:	2d01      	cmp	r5, #1
   1f120:	f173 0200 	sbcs.w	r2, r3, #0
   1f124:	bfbc      	itt	lt
   1f126:	2501      	movlt	r5, #1
   1f128:	2300      	movlt	r3, #0
   1f12a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1f12e:	4824      	ldr	r0, [pc, #144]	; (1f1c0 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1f130:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f134:	4283      	cmp	r3, r0
   1f136:	d118      	bne.n	1f16a <z_add_timeout+0x96>
	node->prev = tail;
   1f138:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1f13c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1f140:	6044      	str	r4, [r0, #4]
}
   1f142:	e026      	b.n	1f192 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1f144:	f7ff ff7c 	bl	1f040 <elapsed>
   1f148:	3501      	adds	r5, #1
   1f14a:	f147 0700 	adc.w	r7, r7, #0
   1f14e:	182d      	adds	r5, r5, r0
   1f150:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1f154:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1f158:	e7e9      	b.n	1f12e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1f15a:	1a52      	subs	r2, r2, r1
   1f15c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1f160:	459c      	cmp	ip, r3
   1f162:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1f166:	d0e7      	beq.n	1f138 <z_add_timeout+0x64>
   1f168:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1f16a:	2b00      	cmp	r3, #0
   1f16c:	d0e4      	beq.n	1f138 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1f16e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1f172:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1f176:	428a      	cmp	r2, r1
   1f178:	eb75 0e07 	sbcs.w	lr, r5, r7
   1f17c:	daed      	bge.n	1f15a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1f17e:	1a8a      	subs	r2, r1, r2
   1f180:	eb67 0505 	sbc.w	r5, r7, r5
   1f184:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1f188:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f18a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1f18e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f190:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1f192:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f194:	4283      	cmp	r3, r0
   1f196:	d00b      	beq.n	1f1b0 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1f198:	429c      	cmp	r4, r3
   1f19a:	d109      	bne.n	1f1b0 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1f19c:	f7ff ff5a 	bl	1f054 <next_timeout>

			if (next_time == 0 ||
   1f1a0:	b118      	cbz	r0, 1f1aa <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1f1a2:	4b08      	ldr	r3, [pc, #32]	; (1f1c4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1f1a4:	691b      	ldr	r3, [r3, #16]
   1f1a6:	4283      	cmp	r3, r0
   1f1a8:	d002      	beq.n	1f1b0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1f1aa:	2100      	movs	r1, #0
   1f1ac:	f7fc fe90 	bl	1bed0 <sys_clock_set_timeout>
	__asm__ volatile(
   1f1b0:	f386 8811 	msr	BASEPRI, r6
   1f1b4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1f1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f1ba:	bf00      	nop
   1f1bc:	20001850 	.word	0x20001850
   1f1c0:	20000924 	.word	0x20000924
   1f1c4:	2000606c 	.word	0x2000606c

0001f1c8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1f1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f1cc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1f1ce:	f7ff fc79 	bl	1eac4 <z_time_slice>
	__asm__ volatile(
   1f1d2:	f04f 0320 	mov.w	r3, #32
   1f1d6:	f3ef 8411 	mrs	r4, BASEPRI
   1f1da:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1de:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1f1e2:	4e24      	ldr	r6, [pc, #144]	; (1f274 <sys_clock_announce+0xac>)
	return list->head == list;
   1f1e4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1f278 <sys_clock_announce+0xb0>
   1f1e8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1f1ea:	4d24      	ldr	r5, [pc, #144]	; (1f27c <sys_clock_announce+0xb4>)
   1f1ec:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f1f0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f1f2:	4540      	cmp	r0, r8
		curr_tick += dt;
   1f1f4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1f1f8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1f1fc:	d00b      	beq.n	1f216 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f1fe:	b150      	cbz	r0, 1f216 <sys_clock_announce+0x4e>
   1f200:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1f204:	429a      	cmp	r2, r3
   1f206:	eb77 090c 	sbcs.w	r9, r7, ip
   1f20a:	da16      	bge.n	1f23a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1f20c:	1a9b      	subs	r3, r3, r2
   1f20e:	eb6c 0c07 	sbc.w	ip, ip, r7
   1f212:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1f216:	1852      	adds	r2, r2, r1
   1f218:	eb4e 0707 	adc.w	r7, lr, r7
   1f21c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1f220:	2500      	movs	r5, #0
   1f222:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1f224:	f7ff ff16 	bl	1f054 <next_timeout>
   1f228:	4629      	mov	r1, r5
   1f22a:	f7fc fe51 	bl	1bed0 <sys_clock_set_timeout>
	__asm__ volatile(
   1f22e:	f384 8811 	msr	BASEPRI, r4
   1f232:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1f236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1f23a:	1859      	adds	r1, r3, r1
   1f23c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1f240:	1ad3      	subs	r3, r2, r3
   1f242:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1f244:	2200      	movs	r2, #0
   1f246:	2300      	movs	r3, #0
   1f248:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1f24c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1f250:	f7ff ff26 	bl	1f0a0 <remove_timeout>
   1f254:	f384 8811 	msr	BASEPRI, r4
   1f258:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f25c:	6883      	ldr	r3, [r0, #8]
   1f25e:	4798      	blx	r3
	__asm__ volatile(
   1f260:	f04f 0320 	mov.w	r3, #32
   1f264:	f3ef 8411 	mrs	r4, BASEPRI
   1f268:	f383 8812 	msr	BASEPRI_MAX, r3
   1f26c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1f270:	e7bc      	b.n	1f1ec <sys_clock_announce+0x24>
   1f272:	bf00      	nop
   1f274:	200060a8 	.word	0x200060a8
   1f278:	20000924 	.word	0x20000924
   1f27c:	20001850 	.word	0x20001850

0001f280 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1f280:	b510      	push	{r4, lr}
   1f282:	f04f 0320 	mov.w	r3, #32
   1f286:	f3ef 8411 	mrs	r4, BASEPRI
   1f28a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f28e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1f292:	f7fc fe4f 	bl	1bf34 <sys_clock_elapsed>
   1f296:	4a05      	ldr	r2, [pc, #20]	; (1f2ac <sys_clock_tick_get+0x2c>)
   1f298:	e9d2 3100 	ldrd	r3, r1, [r2]
   1f29c:	18c0      	adds	r0, r0, r3
   1f29e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1f2a2:	f384 8811 	msr	BASEPRI, r4
   1f2a6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1f2aa:	bd10      	pop	{r4, pc}
   1f2ac:	20001850 	.word	0x20001850

0001f2b0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f2b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f2b4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f2b6:	4b29      	ldr	r3, [pc, #164]	; (1f35c <z_impl_k_poll+0xac>)
   1f2b8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1f2ba:	2301      	movs	r3, #1
   1f2bc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1f2c0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1f2c4:	ea52 0305 	orrs.w	r3, r2, r5
{
   1f2c8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1f2ca:	bf0c      	ite	eq
   1f2cc:	2301      	moveq	r3, #1
   1f2ce:	2300      	movne	r3, #0
   1f2d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1f2d4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1f2d6:	f005 f96a 	bl	245ae <register_events>
   1f2da:	4681      	mov	r9, r0
	__asm__ volatile(
   1f2dc:	f04f 0320 	mov.w	r3, #32
   1f2e0:	f3ef 8a11 	mrs	sl, BASEPRI
   1f2e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2e8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f2ec:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1f2f0:	b964      	cbnz	r4, 1f30c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1f2f2:	4601      	mov	r1, r0
   1f2f4:	4652      	mov	r2, sl
   1f2f6:	4640      	mov	r0, r8
   1f2f8:	f005 fa2a 	bl	24750 <clear_event_registrations>
	__asm__ volatile(
   1f2fc:	f38a 8811 	msr	BASEPRI, sl
   1f300:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1f304:	4620      	mov	r0, r4
   1f306:	b002      	add	sp, #8
   1f308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1f30c:	2300      	movs	r3, #0
   1f30e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f312:	ea56 0305 	orrs.w	r3, r6, r5
   1f316:	d106      	bne.n	1f326 <z_impl_k_poll+0x76>
   1f318:	f38a 8811 	msr	BASEPRI, sl
   1f31c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f320:	f06f 040a 	mvn.w	r4, #10
   1f324:	e7ee      	b.n	1f304 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f326:	e9cd 6500 	strd	r6, r5, [sp]
   1f32a:	4a0d      	ldr	r2, [pc, #52]	; (1f360 <z_impl_k_poll+0xb0>)
   1f32c:	480d      	ldr	r0, [pc, #52]	; (1f364 <z_impl_k_poll+0xb4>)
   1f32e:	4651      	mov	r1, sl
   1f330:	f7ff fc9a 	bl	1ec68 <z_pend_curr>
   1f334:	4604      	mov	r4, r0
	__asm__ volatile(
   1f336:	f04f 0320 	mov.w	r3, #32
   1f33a:	f3ef 8511 	mrs	r5, BASEPRI
   1f33e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f342:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f346:	462a      	mov	r2, r5
   1f348:	4649      	mov	r1, r9
   1f34a:	4640      	mov	r0, r8
   1f34c:	f005 fa00 	bl	24750 <clear_event_registrations>
	__asm__ volatile(
   1f350:	f385 8811 	msr	BASEPRI, r5
   1f354:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f358:	e7d4      	b.n	1f304 <z_impl_k_poll+0x54>
   1f35a:	bf00      	nop
   1f35c:	2000606c 	.word	0x2000606c
   1f360:	2000092c 	.word	0x2000092c
   1f364:	20006133 	.word	0x20006133

0001f368 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1f368:	b538      	push	{r3, r4, r5, lr}
   1f36a:	4603      	mov	r3, r0
	__asm__ volatile(
   1f36c:	f04f 0220 	mov.w	r2, #32
   1f370:	f3ef 8511 	mrs	r5, BASEPRI
   1f374:	f382 8812 	msr	BASEPRI_MAX, r2
   1f378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1f37c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1f37e:	2101      	movs	r1, #1
   1f380:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1f382:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f384:	4283      	cmp	r3, r0
   1f386:	d106      	bne.n	1f396 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1f388:	f385 8811 	msr	BASEPRI, r5
   1f38c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1f390:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1f392:	4620      	mov	r0, r4
   1f394:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1f396:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f39a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f39c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f39e:	2300      	movs	r3, #0
	node->prev = NULL;
   1f3a0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f3a4:	f005 f97a 	bl	2469c <signal_poll_event>
	z_reschedule(&lock, key);
   1f3a8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f3aa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f3ac:	4801      	ldr	r0, [pc, #4]	; (1f3b4 <z_impl_k_poll_signal_raise+0x4c>)
   1f3ae:	f7ff fb09 	bl	1e9c4 <z_reschedule>
	return rc;
   1f3b2:	e7ee      	b.n	1f392 <z_impl_k_poll_signal_raise+0x2a>
   1f3b4:	20006133 	.word	0x20006133

0001f3b8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1f3b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f3ba:	4606      	mov	r6, r0
   1f3bc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1f3be:	f004 fd86 	bl	23ece <k_is_in_isr>
   1f3c2:	b978      	cbnz	r0, 1f3e4 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1f3c4:	4b0b      	ldr	r3, [pc, #44]	; (1f3f4 <z_thread_aligned_alloc+0x3c>)
   1f3c6:	689b      	ldr	r3, [r3, #8]
   1f3c8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1f3ca:	b17c      	cbz	r4, 1f3ec <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f3cc:	1d2a      	adds	r2, r5, #4
   1f3ce:	d209      	bcs.n	1f3e4 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f3d0:	2000      	movs	r0, #0
   1f3d2:	2100      	movs	r1, #0
   1f3d4:	e9cd 0100 	strd	r0, r1, [sp]
   1f3d8:	f046 0104 	orr.w	r1, r6, #4
   1f3dc:	4620      	mov	r0, r4
   1f3de:	f004 fcef 	bl	23dc0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f3e2:	b908      	cbnz	r0, 1f3e8 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1f3e4:	2400      	movs	r4, #0
	}

	return ret;
   1f3e6:	e001      	b.n	1f3ec <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1f3e8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1f3ea:	1d04      	adds	r4, r0, #4
}
   1f3ec:	4620      	mov	r0, r4
   1f3ee:	b002      	add	sp, #8
   1f3f0:	bd70      	pop	{r4, r5, r6, pc}
   1f3f2:	bf00      	nop
   1f3f4:	2000606c 	.word	0x2000606c

0001f3f8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1f3f8:	4a02      	ldr	r2, [pc, #8]	; (1f404 <boot_banner+0xc>)
   1f3fa:	4903      	ldr	r1, [pc, #12]	; (1f408 <boot_banner+0x10>)
   1f3fc:	4803      	ldr	r0, [pc, #12]	; (1f40c <boot_banner+0x14>)
   1f3fe:	f000 b98e 	b.w	1f71e <printk>
   1f402:	bf00      	nop
   1f404:	0002628c 	.word	0x0002628c
   1f408:	0002681c 	.word	0x0002681c
   1f40c:	0002682a 	.word	0x0002682a

0001f410 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1f410:	4770      	bx	lr

0001f412 <main>:
K_THREAD_DEFINE(ble_entry, BLE_CONNECT_STACK_SIZE, scu_ble_connect_thread_entry, NULL, NULL, NULL, BLE_CONNECT_PRIORITY, 0, 50);


int main() {
    return 1;
}
   1f412:	2001      	movs	r0, #1
   1f414:	4770      	bx	lr

0001f416 <k_uptime_get_32>:
{
   1f416:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   1f418:	f005 f869 	bl	244ee <z_impl_k_uptime_ticks>
   1f41c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f420:	fba0 3002 	umull	r3, r0, r0, r2
   1f424:	fb02 0101 	mla	r1, r2, r1, r0
   1f428:	0bd8      	lsrs	r0, r3, #15
}
   1f42a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1f42e:	bd08      	pop	{r3, pc}

0001f430 <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   1f430:	b510      	push	{r4, lr}
   1f432:	b086      	sub	sp, #24
	msg[1].len = num_read;
   1f434:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   1f438:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   1f43a:	2101      	movs	r1, #1
   1f43c:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1f43e:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1f440:	2100      	movs	r1, #0
   1f442:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1f446:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f44a:	6883      	ldr	r3, [r0, #8]
   1f44c:	2202      	movs	r2, #2
   1f44e:	689c      	ldr	r4, [r3, #8]
   1f450:	4669      	mov	r1, sp
   1f452:	2357      	movs	r3, #87	; 0x57
   1f454:	47a0      	blx	r4
}
   1f456:	b006      	add	sp, #24
   1f458:	bd10      	pop	{r4, pc}

0001f45a <i2c_reg_read_byte.constprop.0>:
 * @param value Memory pool that stores the retrieved register value.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_read_byte(const struct device *dev,
   1f45a:	b507      	push	{r0, r1, r2, lr}
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
   1f45c:	2301      	movs	r3, #1
static inline int i2c_reg_read_byte(const struct device *dev,
   1f45e:	f88d 1007 	strb.w	r1, [sp, #7]
	return i2c_write_read(dev, dev_addr,
   1f462:	f10d 0107 	add.w	r1, sp, #7
   1f466:	f7ff ffe3 	bl	1f430 <i2c_write_read.constprop.0>
			      &reg_addr, sizeof(reg_addr),
			      value, sizeof(*value));
}
   1f46a:	b003      	add	sp, #12
   1f46c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f470 <i2c_reg_write_byte.constprop.0>:
 * @param value Value to be written to internal register.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(const struct device *dev,
   1f470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1f472:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   1f476:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1f478:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
   1f47c:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   1f480:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f482:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f486:	6883      	ldr	r3, [r0, #8]
   1f488:	2201      	movs	r2, #1
   1f48a:	689c      	ldr	r4, [r3, #8]
   1f48c:	a901      	add	r1, sp, #4
   1f48e:	2357      	movs	r3, #87	; 0x57
   1f490:	47a0      	blx	r4

	return i2c_write(dev, tx_buf, 2, dev_addr);
}
   1f492:	b004      	add	sp, #16
   1f494:	bd10      	pop	{r4, pc}

0001f496 <reset>:
    int ret = i2c_reg_write_byte(dev, MAX30102_ADDRESS, REG_MODE_CONFIG, 0x40);
   1f496:	2240      	movs	r2, #64	; 0x40
   1f498:	2109      	movs	r1, #9
   1f49a:	f7ff bfe9 	b.w	1f470 <i2c_reg_write_byte.constprop.0>

0001f49e <softReset>:
void softReset(const struct device* dev) {
   1f49e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bitMask(dev, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
   1f4a0:	2340      	movs	r3, #64	; 0x40
   1f4a2:	22bf      	movs	r2, #191	; 0xbf
   1f4a4:	2109      	movs	r1, #9
void softReset(const struct device* dev) {
   1f4a6:	4605      	mov	r5, r0
    bitMask(dev, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
   1f4a8:	f7e4 f856 	bl	3558 <bitMask>
    uint32_t start_time = k_uptime_get_32();
   1f4ac:	f7ff ffb3 	bl	1f416 <k_uptime_get_32>
    uint8_t response = 1;
   1f4b0:	2301      	movs	r3, #1
    uint32_t start_time = k_uptime_get_32();
   1f4b2:	4604      	mov	r4, r0
    uint8_t response = 1;
   1f4b4:	f88d 3007 	strb.w	r3, [sp, #7]
    while (k_uptime_get_32() - start_time < 100) {
   1f4b8:	f7ff ffad 	bl	1f416 <k_uptime_get_32>
   1f4bc:	1b03      	subs	r3, r0, r4
   1f4be:	2b63      	cmp	r3, #99	; 0x63
   1f4c0:	d901      	bls.n	1f4c6 <softReset+0x28>
}
   1f4c2:	b003      	add	sp, #12
   1f4c4:	bd30      	pop	{r4, r5, pc}
        i2c_reg_read_byte(dev, MAX30102_ADDRESS, MAX30102_MODECONFIG, &response);
   1f4c6:	f10d 0207 	add.w	r2, sp, #7
   1f4ca:	2109      	movs	r1, #9
   1f4cc:	4628      	mov	r0, r5
   1f4ce:	f7ff ffc4 	bl	1f45a <i2c_reg_read_byte.constprop.0>
        if ((response & MAX30102_RESET) == 0) {
   1f4d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4d6:	065b      	lsls	r3, r3, #25
   1f4d8:	d5f3      	bpl.n	1f4c2 <softReset+0x24>
	return z_impl_k_sleep(timeout);
   1f4da:	2100      	movs	r1, #0
   1f4dc:	2021      	movs	r0, #33	; 0x21
   1f4de:	f7ff fd01 	bl	1eee4 <z_impl_k_sleep>
   1f4e2:	e7e9      	b.n	1f4b8 <softReset+0x1a>

0001f4e4 <setLEDMode>:
void setLEDMode(const struct device* dev, uint8_t mode) {
   1f4e4:	460b      	mov	r3, r1
    bitMask(dev, MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode);
   1f4e6:	22f8      	movs	r2, #248	; 0xf8
   1f4e8:	2109      	movs	r1, #9
   1f4ea:	f7e4 b835 	b.w	3558 <bitMask>

0001f4ee <setADCRange>:
void setADCRange(const struct device* dev, uint8_t adcRange) {
   1f4ee:	460b      	mov	r3, r1
    bitMask(dev, MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange);
   1f4f0:	229f      	movs	r2, #159	; 0x9f
   1f4f2:	210a      	movs	r1, #10
   1f4f4:	f7e4 b830 	b.w	3558 <bitMask>

0001f4f8 <setSampleRate>:
void setSampleRate(const struct device* dev, uint8_t sampleRate) {
   1f4f8:	460b      	mov	r3, r1
    bitMask(dev, MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate);
   1f4fa:	22e3      	movs	r2, #227	; 0xe3
   1f4fc:	210a      	movs	r1, #10
   1f4fe:	f7e4 b82b 	b.w	3558 <bitMask>

0001f502 <setPulseWidth>:
void setPulseWidth(const struct device* dev, uint8_t pulseWidth) {
   1f502:	460b      	mov	r3, r1
    bitMask(dev, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth);
   1f504:	22fc      	movs	r2, #252	; 0xfc
   1f506:	210a      	movs	r1, #10
   1f508:	f7e4 b826 	b.w	3558 <bitMask>

0001f50c <enableSlot>:
    switch (slot) {
   1f50c:	2901      	cmp	r1, #1
void enableSlot(const struct device* dev, uint8_t slot, uint8_t device) {
   1f50e:	4613      	mov	r3, r2
    switch (slot) {
   1f510:	d002      	beq.n	1f518 <enableSlot+0xc>
   1f512:	2902      	cmp	r1, #2
   1f514:	d004      	beq.n	1f520 <enableSlot+0x14>
   1f516:	4770      	bx	lr
        bitMask(dev, MAX30102_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   1f518:	22f8      	movs	r2, #248	; 0xf8
        bitMask(dev, MAX30102_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   1f51a:	2111      	movs	r1, #17
   1f51c:	f7e4 b81c 	b.w	3558 <bitMask>
   1f520:	0113      	lsls	r3, r2, #4
   1f522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1f526:	228f      	movs	r2, #143	; 0x8f
   1f528:	e7f7      	b.n	1f51a <enableSlot+0xe>

0001f52a <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   1f52a:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
   1f52c:	2000      	movs	r0, #0
{
   1f52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *pn_npks = 0;
   1f532:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
   1f534:	2401      	movs	r4, #1

    while (i < n_size - 1) {
   1f536:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1f53a:	45a0      	cmp	r8, r4
   1f53c:	dc01      	bgt.n	1f542 <maxim_peaks_above_min_height+0x18>
                i += n_width;
        }
        else
            i++;
    }
}
   1f53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1]) {            // find left edge of potential peaks
   1f542:	9d06      	ldr	r5, [sp, #24]
   1f544:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   1f548:	42a8      	cmp	r0, r5
   1f54a:	ea4f 0684 	mov.w	r6, r4, lsl #2
   1f54e:	f104 0501 	add.w	r5, r4, #1
   1f552:	dd1c      	ble.n	1f58e <maxim_peaks_above_min_height+0x64>
   1f554:	4416      	add	r6, r2
   1f556:	f856 6c04 	ldr.w	r6, [r6, #-4]
   1f55a:	42b0      	cmp	r0, r6
   1f55c:	dd17      	ble.n	1f58e <maxim_peaks_above_min_height+0x64>
   1f55e:	462e      	mov	r6, r5
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width])    // find flat peaks
   1f560:	429e      	cmp	r6, r3
   1f562:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   1f566:	eba6 0e04 	sub.w	lr, r6, r4
   1f56a:	4635      	mov	r5, r6
   1f56c:	d003      	beq.n	1f576 <maxim_peaks_above_min_height+0x4c>
   1f56e:	42b8      	cmp	r0, r7
   1f570:	f106 0601 	add.w	r6, r6, #1
   1f574:	d0f4      	beq.n	1f560 <maxim_peaks_above_min_height+0x36>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15) {                            // find right edge of peaks
   1f576:	42b8      	cmp	r0, r7
   1f578:	dd09      	ble.n	1f58e <maxim_peaks_above_min_height+0x64>
   1f57a:	6808      	ldr	r0, [r1, #0]
   1f57c:	280e      	cmp	r0, #14
   1f57e:	dc06      	bgt.n	1f58e <maxim_peaks_above_min_height+0x64>
                pn_locs[(*pn_npks)++] = i;
   1f580:	1c45      	adds	r5, r0, #1
   1f582:	600d      	str	r5, [r1, #0]
                i += n_width + 1;
   1f584:	f10e 0501 	add.w	r5, lr, #1
                pn_locs[(*pn_npks)++] = i;
   1f588:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
                i += n_width + 1;
   1f58c:	4425      	add	r5, r4
{
   1f58e:	462c      	mov	r4, r5
   1f590:	e7d3      	b.n	1f53a <maxim_peaks_above_min_height+0x10>

0001f592 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   1f592:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
   1f594:	2301      	movs	r3, #1
   1f596:	4604      	mov	r4, r0
   1f598:	428b      	cmp	r3, r1
   1f59a:	db00      	blt.n	1f59e <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
   1f59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
   1f59e:	f854 6f04 	ldr.w	r6, [r4, #4]!
   1f5a2:	461a      	mov	r2, r3
   1f5a4:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   1f5a6:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1f5aa:	42b7      	cmp	r7, r6
   1f5ac:	dd03      	ble.n	1f5b6 <maxim_sort_ascend+0x24>
   1f5ae:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
   1f5b0:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   1f5b4:	d1f7      	bne.n	1f5a6 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
   1f5b6:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++) {
   1f5ba:	3301      	adds	r3, #1
   1f5bc:	e7ec      	b.n	1f598 <maxim_sort_ascend+0x6>

0001f5be <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
   1f5be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
   1f5c2:	2301      	movs	r3, #1
   1f5c4:	460d      	mov	r5, r1
   1f5c6:	4293      	cmp	r3, r2
   1f5c8:	db01      	blt.n	1f5ce <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
   1f5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
   1f5ce:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   1f5d2:	461c      	mov	r4, r3
   1f5d4:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   1f5d8:	46ac      	mov	ip, r5
   1f5da:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   1f5de:	f8d9 e000 	ldr.w	lr, [r9]
   1f5e2:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
   1f5e6:	45c6      	cmp	lr, r8
   1f5e8:	dd03      	ble.n	1f5f2 <maxim_sort_indices_descend+0x34>
   1f5ea:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
   1f5ec:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   1f5f0:	d1f3      	bne.n	1f5da <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
   1f5f2:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++) {
   1f5f6:	3301      	adds	r3, #1
   1f5f8:	e7e5      	b.n	1f5c6 <maxim_sort_indices_descend+0x8>

0001f5fa <maxim_remove_close_peaks>:
{
   1f5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f5fc:	4604      	mov	r4, r0
   1f5fe:	461e      	mov	r6, r3
   1f600:	4610      	mov	r0, r2
   1f602:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
   1f604:	680a      	ldr	r2, [r1, #0]
   1f606:	4621      	mov	r1, r4
   1f608:	f7ff ffd9 	bl	1f5be <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++) {
   1f60c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   1f610:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++) {
   1f614:	6829      	ldr	r1, [r5, #0]
   1f616:	4291      	cmp	r1, r2
   1f618:	dc04      	bgt.n	1f624 <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
   1f61a:	4620      	mov	r0, r4
}
   1f61c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
   1f620:	f7ff bfb7 	b.w	1f592 <maxim_sort_ascend>
        *pn_npks = i + 1;
   1f624:	1c57      	adds	r7, r2, #1
   1f626:	4638      	mov	r0, r7
   1f628:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++) {
   1f62a:	4281      	cmp	r1, r0
   1f62c:	d101      	bne.n	1f632 <maxim_remove_close_peaks+0x38>
   1f62e:	463a      	mov	r2, r7
   1f630:	e7f0      	b.n	1f614 <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
   1f632:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1f636:	bf18      	it	ne
   1f638:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
   1f63c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1f640:	bf08      	it	eq
   1f642:	4694      	moveq	ip, r2
   1f644:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   1f648:	42b3      	cmp	r3, r6
   1f64a:	dc01      	bgt.n	1f650 <maxim_remove_close_peaks+0x56>
   1f64c:	459e      	cmp	lr, r3
   1f64e:	dd08      	ble.n	1f662 <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
   1f650:	f8d5 c000 	ldr.w	ip, [r5]
   1f654:	f10c 0301 	add.w	r3, ip, #1
   1f658:	602b      	str	r3, [r5, #0]
   1f65a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1f65e:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++) {
   1f662:	3001      	adds	r0, #1
   1f664:	e7e1      	b.n	1f62a <maxim_remove_close_peaks+0x30>

0001f666 <maxim_find_peaks>:
{
   1f666:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   1f668:	9e06      	ldr	r6, [sp, #24]
   1f66a:	9600      	str	r6, [sp, #0]
{
   1f66c:	4605      	mov	r5, r0
   1f66e:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   1f670:	f7ff ff5b 	bl	1f52a <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
   1f674:	9b07      	ldr	r3, [sp, #28]
   1f676:	4628      	mov	r0, r5
   1f678:	f7ff ffbf 	bl	1f5fa <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
   1f67c:	6822      	ldr	r2, [r4, #0]
   1f67e:	9b08      	ldr	r3, [sp, #32]
   1f680:	429a      	cmp	r2, r3
   1f682:	bfd4      	ite	le
   1f684:	6022      	strle	r2, [r4, #0]
   1f686:	6023      	strgt	r3, [r4, #0]
}
   1f688:	b002      	add	sp, #8
   1f68a:	bd70      	pop	{r4, r5, r6, pc}

0001f68c <gpio_pin_get.constprop.0>:
 * @retval 1 If pin logical value is 1 / active.
 * @retval 0 If pin logical value is 0 / inactive.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
   1f68c:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   1f68e:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1f690:	6883      	ldr	r3, [r0, #8]
   1f692:	a901      	add	r1, sp, #4
   1f694:	685b      	ldr	r3, [r3, #4]
   1f696:	4798      	blx	r3
	if (ret == 0) {
   1f698:	b920      	cbnz	r0, 1f6a4 <gpio_pin_get.constprop.0+0x18>
		*value ^= data->invert;
   1f69a:	6823      	ldr	r3, [r4, #0]
   1f69c:	9801      	ldr	r0, [sp, #4]
   1f69e:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1f6a0:	f3c0 2080 	ubfx	r0, r0, #10, #1
	}

	return ret;
}
   1f6a4:	b002      	add	sp, #8
   1f6a6:	bd10      	pop	{r4, pc}

0001f6a8 <read_bpm_spo2_cb>:
    uint16_t len, uint16_t offset) {
   1f6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buff, len, offset, value,
   1f6aa:	2402      	movs	r4, #2
   1f6ac:	9402      	str	r4, [sp, #8]
   1f6ae:	68cc      	ldr	r4, [r1, #12]
   1f6b0:	9401      	str	r4, [sp, #4]
   1f6b2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1f6b6:	9400      	str	r4, [sp, #0]
   1f6b8:	f003 f91f 	bl	228fa <bt_gatt_attr_read>
}
   1f6bc:	b004      	add	sp, #16
   1f6be:	bd10      	pop	{r4, pc}

0001f6c0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f6c0:	4603      	mov	r3, r0
   1f6c2:	b140      	cbz	r0, 1f6d6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f6c4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f6c6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f6ca:	2a02      	cmp	r2, #2
   1f6cc:	d006      	beq.n	1f6dc <sys_notify_validate+0x1c>
   1f6ce:	2a03      	cmp	r2, #3
   1f6d0:	d004      	beq.n	1f6dc <sys_notify_validate+0x1c>
   1f6d2:	2a01      	cmp	r2, #1
   1f6d4:	d005      	beq.n	1f6e2 <sys_notify_validate+0x22>
		return -EINVAL;
   1f6d6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f6da:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f6dc:	681a      	ldr	r2, [r3, #0]
   1f6de:	2a00      	cmp	r2, #0
   1f6e0:	d0f9      	beq.n	1f6d6 <sys_notify_validate+0x16>
		notify->result = 0;
   1f6e2:	2000      	movs	r0, #0
   1f6e4:	6098      	str	r0, [r3, #8]
   1f6e6:	4770      	bx	lr

0001f6e8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f6e8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f6ea:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f6ee:	2a02      	cmp	r2, #2
{
   1f6f0:	b510      	push	{r4, lr}
   1f6f2:	4603      	mov	r3, r0
	notify->result = res;
   1f6f4:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f6f6:	d00a      	beq.n	1f70e <sys_notify_finalize+0x26>
   1f6f8:	2a03      	cmp	r2, #3
   1f6fa:	d10b      	bne.n	1f714 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f6fc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f6fe:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f700:	2200      	movs	r2, #0
   1f702:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f704:	b108      	cbz	r0, 1f70a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f706:	f7ff fe2f 	bl	1f368 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f70a:	4620      	mov	r0, r4
   1f70c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f70e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f710:	2400      	movs	r4, #0
		break;
   1f712:	e7f5      	b.n	1f700 <sys_notify_finalize+0x18>
	switch (method) {
   1f714:	2400      	movs	r4, #0
   1f716:	4620      	mov	r0, r4
   1f718:	e7f2      	b.n	1f700 <sys_notify_finalize+0x18>

0001f71a <arch_printk_char_out>:
}
   1f71a:	2000      	movs	r0, #0
   1f71c:	4770      	bx	lr

0001f71e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1f71e:	b40f      	push	{r0, r1, r2, r3}
   1f720:	b507      	push	{r0, r1, r2, lr}
   1f722:	a904      	add	r1, sp, #16
   1f724:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f728:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1f72a:	f7e4 f90f 	bl	394c <vprintk>

	va_end(ap);
}
   1f72e:	b003      	add	sp, #12
   1f730:	f85d eb04 	ldr.w	lr, [sp], #4
   1f734:	b004      	add	sp, #16
   1f736:	4770      	bx	lr

0001f738 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f738:	b510      	push	{r4, lr}
   1f73a:	4603      	mov	r3, r0
	return list->head;
   1f73c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f73e:	2200      	movs	r2, #0
   1f740:	b158      	cbz	r0, 1f75a <sys_slist_find_and_remove+0x22>
   1f742:	4288      	cmp	r0, r1
   1f744:	d10f      	bne.n	1f766 <sys_slist_find_and_remove+0x2e>
	return node->next;
   1f746:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1f748:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f74a:	b93a      	cbnz	r2, 1f75c <sys_slist_find_and_remove+0x24>
   1f74c:	42a1      	cmp	r1, r4
	list->head = node;
   1f74e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f750:	d100      	bne.n	1f754 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1f752:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1f754:	2300      	movs	r3, #0
   1f756:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f758:	2001      	movs	r0, #1
   1f75a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f75c:	42a1      	cmp	r1, r4
	parent->next = child;
   1f75e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1f760:	bf08      	it	eq
   1f762:	605a      	streq	r2, [r3, #4]
}
   1f764:	e7f6      	b.n	1f754 <sys_slist_find_and_remove+0x1c>
	return node->next;
   1f766:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f768:	6800      	ldr	r0, [r0, #0]
   1f76a:	e7e9      	b.n	1f740 <sys_slist_find_and_remove+0x8>

0001f76c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f76c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f76e:	f013 0307 	ands.w	r3, r3, #7
   1f772:	d105      	bne.n	1f780 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f774:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1f776:	2b00      	cmp	r3, #0
   1f778:	bf0c      	ite	eq
   1f77a:	2000      	moveq	r0, #0
   1f77c:	2003      	movne	r0, #3
   1f77e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f780:	2b02      	cmp	r3, #2
   1f782:	d105      	bne.n	1f790 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f784:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1f786:	2b00      	cmp	r3, #0
   1f788:	bf14      	ite	ne
   1f78a:	2000      	movne	r0, #0
   1f78c:	2004      	moveq	r0, #4
   1f78e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f790:	2b01      	cmp	r3, #1
   1f792:	d105      	bne.n	1f7a0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f794:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1f796:	2b00      	cmp	r3, #0
   1f798:	bf0c      	ite	eq
   1f79a:	2000      	moveq	r0, #0
   1f79c:	2005      	movne	r0, #5
   1f79e:	4770      	bx	lr
	int evt = EVT_NOP;
   1f7a0:	2000      	movs	r0, #0
}
   1f7a2:	4770      	bx	lr

0001f7a4 <notify_one>:
{
   1f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7a8:	460d      	mov	r5, r1
   1f7aa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f7ac:	4619      	mov	r1, r3
   1f7ae:	1d28      	adds	r0, r5, #4
{
   1f7b0:	4690      	mov	r8, r2
   1f7b2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f7b4:	f7ff ff98 	bl	1f6e8 <sys_notify_finalize>
	if (cb) {
   1f7b8:	4604      	mov	r4, r0
   1f7ba:	b138      	cbz	r0, 1f7cc <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f7bc:	4633      	mov	r3, r6
   1f7be:	4642      	mov	r2, r8
   1f7c0:	4629      	mov	r1, r5
   1f7c2:	4638      	mov	r0, r7
   1f7c4:	46a4      	mov	ip, r4
}
   1f7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f7ca:	4760      	bx	ip
}
   1f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f7d0 <transition_complete>:
{
   1f7d0:	b410      	push	{r4}
	__asm__ volatile(
   1f7d2:	f04f 0420 	mov.w	r4, #32
   1f7d6:	f3ef 8211 	mrs	r2, BASEPRI
   1f7da:	f384 8812 	msr	BASEPRI_MAX, r4
   1f7de:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f7e2:	6141      	str	r1, [r0, #20]
}
   1f7e4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f7e6:	2101      	movs	r1, #1
   1f7e8:	f7e4 b8be 	b.w	3968 <process_event>

0001f7ec <validate_args>:
{
   1f7ec:	b510      	push	{r4, lr}
   1f7ee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f7f0:	b140      	cbz	r0, 1f804 <validate_args+0x18>
   1f7f2:	b139      	cbz	r1, 1f804 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f7f4:	1d08      	adds	r0, r1, #4
   1f7f6:	f7ff ff63 	bl	1f6c0 <sys_notify_validate>
	if ((rv == 0)
   1f7fa:	b928      	cbnz	r0, 1f808 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f7fc:	68a3      	ldr	r3, [r4, #8]
   1f7fe:	f033 0303 	bics.w	r3, r3, #3
   1f802:	d001      	beq.n	1f808 <validate_args+0x1c>
		rv = -EINVAL;
   1f804:	f06f 0015 	mvn.w	r0, #21
}
   1f808:	bd10      	pop	{r4, pc}

0001f80a <onoff_manager_init>:
{
   1f80a:	b538      	push	{r3, r4, r5, lr}
   1f80c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f80e:	4605      	mov	r5, r0
   1f810:	b158      	cbz	r0, 1f82a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f812:	b151      	cbz	r1, 1f82a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f814:	680b      	ldr	r3, [r1, #0]
   1f816:	b143      	cbz	r3, 1f82a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f818:	684b      	ldr	r3, [r1, #4]
   1f81a:	b133      	cbz	r3, 1f82a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f81c:	221c      	movs	r2, #28
   1f81e:	2100      	movs	r1, #0
   1f820:	f000 ff8d 	bl	2073e <memset>
   1f824:	612c      	str	r4, [r5, #16]
	return 0;
   1f826:	2000      	movs	r0, #0
}
   1f828:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f82a:	f06f 0015 	mvn.w	r0, #21
   1f82e:	e7fb      	b.n	1f828 <onoff_manager_init+0x1e>

0001f830 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f830:	b570      	push	{r4, r5, r6, lr}
   1f832:	4604      	mov	r4, r0
   1f834:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f836:	f7ff ffd9 	bl	1f7ec <validate_args>

	if (rv < 0) {
   1f83a:	1e05      	subs	r5, r0, #0
   1f83c:	db31      	blt.n	1f8a2 <onoff_request+0x72>
   1f83e:	f04f 0320 	mov.w	r3, #32
   1f842:	f3ef 8111 	mrs	r1, BASEPRI
   1f846:	f383 8812 	msr	BASEPRI_MAX, r3
   1f84a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f84e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f850:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f852:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f856:	42ab      	cmp	r3, r5
   1f858:	f000 0207 	and.w	r2, r0, #7
   1f85c:	d02e      	beq.n	1f8bc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f85e:	2a02      	cmp	r2, #2
   1f860:	d10e      	bne.n	1f880 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f862:	3301      	adds	r3, #1
   1f864:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f866:	4615      	mov	r5, r2
		notify = true;
   1f868:	2301      	movs	r3, #1
	__asm__ volatile(
   1f86a:	f381 8811 	msr	BASEPRI, r1
   1f86e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f872:	b1b3      	cbz	r3, 1f8a2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f874:	2300      	movs	r3, #0
   1f876:	4631      	mov	r1, r6
   1f878:	4620      	mov	r0, r4
   1f87a:	f7ff ff93 	bl	1f7a4 <notify_one>
   1f87e:	e010      	b.n	1f8a2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f880:	0783      	lsls	r3, r0, #30
   1f882:	d001      	beq.n	1f888 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f884:	2a06      	cmp	r2, #6
   1f886:	d10e      	bne.n	1f8a6 <onoff_request+0x76>
	parent->next = child;
   1f888:	2300      	movs	r3, #0
   1f88a:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f88c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1f88e:	b993      	cbnz	r3, 1f8b6 <onoff_request+0x86>
	list->head = node;
   1f890:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f894:	4615      	mov	r5, r2
   1f896:	b962      	cbnz	r2, 1f8b2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f898:	460a      	mov	r2, r1
   1f89a:	4620      	mov	r0, r4
   1f89c:	2102      	movs	r1, #2
   1f89e:	f7e4 f863 	bl	3968 <process_event>
		}
	}

	return rv;
}
   1f8a2:	4628      	mov	r0, r5
   1f8a4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f8a6:	2a05      	cmp	r2, #5
   1f8a8:	bf0c      	ite	eq
   1f8aa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1f8ae:	f06f 0504 	mvnne.w	r5, #4
   1f8b2:	2300      	movs	r3, #0
   1f8b4:	e7d9      	b.n	1f86a <onoff_request+0x3a>
	parent->next = child;
   1f8b6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f8b8:	6066      	str	r6, [r4, #4]
}
   1f8ba:	e7eb      	b.n	1f894 <onoff_request+0x64>
		rv = -EAGAIN;
   1f8bc:	f06f 050a 	mvn.w	r5, #10
   1f8c0:	e7f7      	b.n	1f8b2 <onoff_request+0x82>

0001f8c2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1f8c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f8c4:	f04f 0320 	mov.w	r3, #32
   1f8c8:	f3ef 8211 	mrs	r2, BASEPRI
   1f8cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8d0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f8d4:	8b04      	ldrh	r4, [r0, #24]
   1f8d6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1f8da:	2c02      	cmp	r4, #2
   1f8dc:	d00a      	beq.n	1f8f4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1f8de:	2c01      	cmp	r4, #1
   1f8e0:	bf0c      	ite	eq
   1f8e2:	f06f 0004 	mvneq.w	r0, #4
   1f8e6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1f8ea:	f382 8811 	msr	BASEPRI, r2
   1f8ee:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1f8f2:	e008      	b.n	1f906 <onoff_release+0x44>
	mgr->refs -= 1U;
   1f8f4:	8b43      	ldrh	r3, [r0, #26]
   1f8f6:	3b01      	subs	r3, #1
   1f8f8:	b29b      	uxth	r3, r3
   1f8fa:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1f8fc:	b923      	cbnz	r3, 1f908 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1f8fe:	4621      	mov	r1, r4
   1f900:	f7e4 f832 	bl	3968 <process_event>
	int rv = state;
   1f904:	4620      	mov	r0, r4
}
   1f906:	bd10      	pop	{r4, pc}
	int rv = state;
   1f908:	4620      	mov	r0, r4
   1f90a:	e7ee      	b.n	1f8ea <onoff_release+0x28>

0001f90c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   1f90c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   1f90e:	b1b0      	cbz	r0, 1f93e <onoff_cancel+0x32>
   1f910:	b1a9      	cbz	r1, 1f93e <onoff_cancel+0x32>
	__asm__ volatile(
   1f912:	f04f 0220 	mov.w	r2, #32
   1f916:	f3ef 8511 	mrs	r5, BASEPRI
   1f91a:	f382 8812 	msr	BASEPRI_MAX, r2
   1f91e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f922:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   1f924:	f7ff ff08 	bl	1f738 <sys_slist_find_and_remove>
   1f928:	b130      	cbz	r0, 1f938 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   1f92a:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   1f92e:	f385 8811 	msr	BASEPRI, r5
   1f932:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   1f936:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   1f938:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f93c:	e7f7      	b.n	1f92e <onoff_cancel+0x22>
		return -EINVAL;
   1f93e:	f06f 0015 	mvn.w	r0, #21
   1f942:	e7f8      	b.n	1f936 <onoff_cancel+0x2a>

0001f944 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f944:	4604      	mov	r4, r0
   1f946:	b508      	push	{r3, lr}
   1f948:	4608      	mov	r0, r1
   1f94a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1f94c:	461a      	mov	r2, r3
   1f94e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1f950:	f7ff fae2 	bl	1ef18 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1f954:	f7e6 fc44 	bl	61e0 <z_impl_k_thread_abort>

0001f958 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1f958:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1f95c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1f95e:	0840      	lsrs	r0, r0, #1
   1f960:	4770      	bx	lr

0001f962 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1f962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f964:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f966:	f7ff fff7 	bl	1f958 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1f96a:	fab0 f080 	clz	r0, r0
   1f96e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1f972:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1f976:	00ca      	lsls	r2, r1, #3
   1f978:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1f97c:	1d17      	adds	r7, r2, #4
{
   1f97e:	460c      	mov	r4, r1
   1f980:	3206      	adds	r2, #6
   1f982:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1f984:	b956      	cbnz	r6, 1f99c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1f986:	2101      	movs	r1, #1
   1f988:	fa01 f000 	lsl.w	r0, r1, r0
   1f98c:	68d9      	ldr	r1, [r3, #12]
   1f98e:	4301      	orrs	r1, r0
   1f990:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1f992:	f8cc 4010 	str.w	r4, [ip, #16]
   1f996:	53dd      	strh	r5, [r3, r7]
   1f998:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1f99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1f99c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1f99e:	3104      	adds	r1, #4
   1f9a0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1f9a2:	53d8      	strh	r0, [r3, r7]
   1f9a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f9a8:	529e      	strh	r6, [r3, r2]
   1f9aa:	80c5      	strh	r5, [r0, #6]
   1f9ac:	525d      	strh	r5, [r3, r1]
   1f9ae:	e7f4      	b.n	1f99a <free_list_add+0x38>

0001f9b0 <free_list_remove_bidx>:
{
   1f9b0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1f9b2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1f9b6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1f9b8:	4299      	cmp	r1, r3
   1f9ba:	f102 0104 	add.w	r1, r2, #4
   1f9be:	d10a      	bne.n	1f9d6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1f9c0:	2301      	movs	r3, #1
   1f9c2:	fa03 f202 	lsl.w	r2, r3, r2
   1f9c6:	68c3      	ldr	r3, [r0, #12]
   1f9c8:	ea23 0302 	bic.w	r3, r3, r2
   1f9cc:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1f9ce:	2300      	movs	r3, #0
   1f9d0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1f9d4:	bd10      	pop	{r4, pc}
   1f9d6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1f9d8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1f9dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1f9e0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f9e4:	80cb      	strh	r3, [r1, #6]
   1f9e6:	8082      	strh	r2, [r0, #4]
}
   1f9e8:	e7f4      	b.n	1f9d4 <free_list_remove_bidx+0x24>

0001f9ea <free_list_remove>:
{
   1f9ea:	b508      	push	{r3, lr}
   1f9ec:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f9ee:	f7ff ffb3 	bl	1f958 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1f9f2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1f9f6:	f1c2 021f 	rsb	r2, r2, #31
   1f9fa:	4618      	mov	r0, r3
}
   1f9fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1fa00:	f7ff bfd6 	b.w	1f9b0 <free_list_remove_bidx>

0001fa04 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fa08:	fab1 f581 	clz	r5, r1
   1fa0c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fa10:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1fa14:	4603      	mov	r3, r0
	if (b->next) {
   1fa16:	693a      	ldr	r2, [r7, #16]
{
   1fa18:	460e      	mov	r6, r1
	if (b->next) {
   1fa1a:	b1c2      	cbz	r2, 1fa4e <alloc_chunk+0x4a>
   1fa1c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1fa20:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1fa22:	4618      	mov	r0, r3
   1fa24:	4621      	mov	r1, r4
   1fa26:	f7ff ff97 	bl	1f958 <chunk_size>
   1fa2a:	42b0      	cmp	r0, r6
   1fa2c:	d306      	bcc.n	1fa3c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1fa2e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1fa30:	4618      	mov	r0, r3
   1fa32:	f7ff ffbd 	bl	1f9b0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fa36:	4620      	mov	r0, r4
   1fa38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1fa3c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1fa40:	f1b8 0801 	subs.w	r8, r8, #1
   1fa44:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1fa46:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1fa48:	d001      	beq.n	1fa4e <alloc_chunk+0x4a>
   1fa4a:	4282      	cmp	r2, r0
   1fa4c:	d1e8      	bne.n	1fa20 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1fa4e:	f1c5 0220 	rsb	r2, r5, #32
   1fa52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fa56:	4094      	lsls	r4, r2
   1fa58:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1fa5a:	4014      	ands	r4, r2
   1fa5c:	d0eb      	beq.n	1fa36 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1fa5e:	fa94 f2a4 	rbit	r2, r4
   1fa62:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fa66:	1d11      	adds	r1, r2, #4
   1fa68:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1fa6c:	4621      	mov	r1, r4
   1fa6e:	e7df      	b.n	1fa30 <alloc_chunk+0x2c>

0001fa70 <merge_chunks>:
{
   1fa70:	b538      	push	{r3, r4, r5, lr}
   1fa72:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fa74:	f7ff ff70 	bl	1f958 <chunk_size>
{
   1fa78:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fa7a:	4604      	mov	r4, r0
   1fa7c:	4611      	mov	r1, r2
   1fa7e:	4618      	mov	r0, r3
   1fa80:	f7ff ff6a 	bl	1f958 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1fa84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1fa88:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fa8a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1fa8c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1fa8e:	4618      	mov	r0, r3
   1fa90:	f7ff ff62 	bl	1f958 <chunk_size>
	void *cmem = &buf[c];
   1fa94:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fa96:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1fa9a:	bd38      	pop	{r3, r4, r5, pc}

0001fa9c <split_chunks>:
{
   1fa9c:	b538      	push	{r3, r4, r5, lr}
   1fa9e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1faa0:	f7ff ff5a 	bl	1f958 <chunk_size>
{
   1faa4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1faa6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1faa8:	1a51      	subs	r1, r2, r1
   1faaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1faae:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fab0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1fab2:	8060      	strh	r0, [r4, #2]
   1fab4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fab8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1faba:	8044      	strh	r4, [r0, #2]
   1fabc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1fac0:	4618      	mov	r0, r3
   1fac2:	4611      	mov	r1, r2
   1fac4:	f7ff ff48 	bl	1f958 <chunk_size>
	void *cmem = &buf[c];
   1fac8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1faca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1face:	bd38      	pop	{r3, r4, r5, pc}

0001fad0 <free_chunk>:
{
   1fad0:	b538      	push	{r3, r4, r5, lr}
   1fad2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fad4:	f7ff ff40 	bl	1f958 <chunk_size>
   1fad8:	460c      	mov	r4, r1
   1fada:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1fadc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fae0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fae2:	07da      	lsls	r2, r3, #31
   1fae4:	d40a      	bmi.n	1fafc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1fae6:	4628      	mov	r0, r5
   1fae8:	f7ff ff7f 	bl	1f9ea <free_list_remove>
	return c + chunk_size(h, c);
   1faec:	4621      	mov	r1, r4
   1faee:	4628      	mov	r0, r5
   1faf0:	f7ff ff32 	bl	1f958 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1faf4:	1822      	adds	r2, r4, r0
   1faf6:	4628      	mov	r0, r5
   1faf8:	f7ff ffba 	bl	1fa70 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1fafc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fb00:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1fb02:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fb06:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fb08:	07db      	lsls	r3, r3, #31
   1fb0a:	d40c      	bmi.n	1fb26 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1fb0c:	4628      	mov	r0, r5
   1fb0e:	f7ff ff6c 	bl	1f9ea <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1fb12:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1fb16:	4622      	mov	r2, r4
   1fb18:	1a61      	subs	r1, r4, r1
   1fb1a:	4628      	mov	r0, r5
   1fb1c:	f7ff ffa8 	bl	1fa70 <merge_chunks>
   1fb20:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fb24:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1fb26:	4621      	mov	r1, r4
   1fb28:	4628      	mov	r0, r5
}
   1fb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1fb2e:	f7ff bf18 	b.w	1f962 <free_list_add>

0001fb32 <sys_heap_free>:
	if (mem == NULL) {
   1fb32:	b161      	cbz	r1, 1fb4e <sys_heap_free+0x1c>
   1fb34:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fb36:	3904      	subs	r1, #4
   1fb38:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1fb3a:	f021 0307 	bic.w	r3, r1, #7
   1fb3e:	4403      	add	r3, r0
	free_chunk(h, c);
   1fb40:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fb42:	885a      	ldrh	r2, [r3, #2]
   1fb44:	f022 0201 	bic.w	r2, r2, #1
   1fb48:	805a      	strh	r2, [r3, #2]
   1fb4a:	f7ff bfc1 	b.w	1fad0 <free_chunk>
}
   1fb4e:	4770      	bx	lr

0001fb50 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fb50:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fb52:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fb54:	b909      	cbnz	r1, 1fb5a <sys_heap_alloc+0xa>
		return NULL;
   1fb56:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fb58:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fb5a:	68ab      	ldr	r3, [r5, #8]
   1fb5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fb60:	d9f9      	bls.n	1fb56 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fb62:	310b      	adds	r1, #11
   1fb64:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fb66:	4621      	mov	r1, r4
   1fb68:	4628      	mov	r0, r5
   1fb6a:	f7ff ff4b 	bl	1fa04 <alloc_chunk>
	if (c == 0U) {
   1fb6e:	4606      	mov	r6, r0
   1fb70:	2800      	cmp	r0, #0
   1fb72:	d0f0      	beq.n	1fb56 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fb74:	4601      	mov	r1, r0
   1fb76:	4628      	mov	r0, r5
   1fb78:	f7ff feee 	bl	1f958 <chunk_size>
   1fb7c:	42a0      	cmp	r0, r4
   1fb7e:	d907      	bls.n	1fb90 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1fb80:	1932      	adds	r2, r6, r4
   1fb82:	4628      	mov	r0, r5
   1fb84:	f7ff ff8a 	bl	1fa9c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fb88:	4611      	mov	r1, r2
   1fb8a:	4628      	mov	r0, r5
   1fb8c:	f7ff fee9 	bl	1f962 <free_list_add>
	void *cmem = &buf[c];
   1fb90:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fb94:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fb96:	8853      	ldrh	r3, [r2, #2]
   1fb98:	f043 0301 	orr.w	r3, r3, #1
   1fb9c:	8053      	strh	r3, [r2, #2]
   1fb9e:	3004      	adds	r0, #4
	return mem;
   1fba0:	e7da      	b.n	1fb58 <sys_heap_alloc+0x8>

0001fba2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fba6:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1fba8:	424a      	negs	r2, r1
   1fbaa:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1fbae:	ea31 0202 	bics.w	r2, r1, r2
{
   1fbb2:	4603      	mov	r3, r0
	if (align != rew) {
   1fbb4:	d00a      	beq.n	1fbcc <sys_heap_aligned_alloc+0x2a>
		return false;
   1fbb6:	2f04      	cmp	r7, #4
   1fbb8:	463a      	mov	r2, r7
   1fbba:	46b9      	mov	r9, r7
   1fbbc:	bf28      	it	cs
   1fbbe:	2204      	movcs	r2, #4
		align -= rew;
   1fbc0:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fbc2:	b974      	cbnz	r4, 1fbe2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1fbc4:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fbc6:	4628      	mov	r0, r5
   1fbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1fbcc:	2904      	cmp	r1, #4
   1fbce:	d804      	bhi.n	1fbda <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1fbd0:	4621      	mov	r1, r4
}
   1fbd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1fbd6:	f7ff bfbb 	b.w	1fb50 <sys_heap_alloc>
		rew = 0;
   1fbda:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1fbde:	2204      	movs	r2, #4
   1fbe0:	e7ef      	b.n	1fbc2 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1fbe2:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fbe4:	68b3      	ldr	r3, [r6, #8]
   1fbe6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fbea:	d9eb      	bls.n	1fbc4 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fbec:	f104 010b 	add.w	r1, r4, #11
   1fbf0:	4439      	add	r1, r7
   1fbf2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fbf4:	08c9      	lsrs	r1, r1, #3
   1fbf6:	4630      	mov	r0, r6
   1fbf8:	f7ff ff04 	bl	1fa04 <alloc_chunk>
	if (c0 == 0) {
   1fbfc:	4680      	mov	r8, r0
   1fbfe:	2800      	cmp	r0, #0
   1fc00:	d0e0      	beq.n	1fbc4 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1fc02:	f109 0504 	add.w	r5, r9, #4
   1fc06:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1fc0a:	1e7b      	subs	r3, r7, #1
   1fc0c:	4435      	add	r5, r6
   1fc0e:	441d      	add	r5, r3
   1fc10:	427f      	negs	r7, r7
   1fc12:	403d      	ands	r5, r7
   1fc14:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fc18:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fc1a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fc1c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fc1e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fc20:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fc24:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fc26:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fc2a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fc2e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fc32:	d208      	bcs.n	1fc46 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1fc34:	4601      	mov	r1, r0
   1fc36:	463a      	mov	r2, r7
   1fc38:	4630      	mov	r0, r6
   1fc3a:	f7ff ff2f 	bl	1fa9c <split_chunks>
		free_list_add(h, c0);
   1fc3e:	4641      	mov	r1, r8
   1fc40:	4630      	mov	r0, r6
   1fc42:	f7ff fe8e 	bl	1f962 <free_list_add>
	return c + chunk_size(h, c);
   1fc46:	4639      	mov	r1, r7
   1fc48:	4630      	mov	r0, r6
   1fc4a:	f7ff fe85 	bl	1f958 <chunk_size>
   1fc4e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fc50:	4284      	cmp	r4, r0
   1fc52:	d207      	bcs.n	1fc64 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1fc54:	4630      	mov	r0, r6
   1fc56:	4622      	mov	r2, r4
   1fc58:	f7ff ff20 	bl	1fa9c <split_chunks>
		free_list_add(h, c_end);
   1fc5c:	4621      	mov	r1, r4
   1fc5e:	4630      	mov	r0, r6
   1fc60:	f7ff fe7f 	bl	1f962 <free_list_add>
	void *cmem = &buf[c];
   1fc64:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fc68:	8873      	ldrh	r3, [r6, #2]
   1fc6a:	f043 0301 	orr.w	r3, r3, #1
   1fc6e:	8073      	strh	r3, [r6, #2]
   1fc70:	e7a9      	b.n	1fbc6 <sys_heap_aligned_alloc+0x24>

0001fc72 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fc72:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fc74:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fc76:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fc78:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fc7c:	f021 0107 	bic.w	r1, r1, #7
{
   1fc80:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fc82:	1acd      	subs	r5, r1, r3
   1fc84:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1fc86:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1fc88:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fc8c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1fc90:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fc92:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1fc94:	2600      	movs	r6, #0
   1fc96:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1fc98:	f1c0 0020 	rsb	r0, r0, #32
   1fc9c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1fca0:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1fca2:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fca4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fca8:	4284      	cmp	r4, r0
   1fcaa:	d118      	bne.n	1fcde <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcac:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fcae:	f040 0001 	orr.w	r0, r0, #1
   1fcb2:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1fcb4:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fcb8:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcba:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1fcbc:	801e      	strh	r6, [r3, #0]
   1fcbe:	8067      	strh	r7, [r4, #2]
   1fcc0:	195c      	adds	r4, r3, r5
   1fcc2:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1fcc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fcca:	8066      	strh	r6, [r4, #2]
   1fccc:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fcce:	8850      	ldrh	r0, [r2, #2]
   1fcd0:	f040 0001 	orr.w	r0, r0, #1
   1fcd4:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1fcd6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fcd8:	4618      	mov	r0, r3
   1fcda:	f7ff be42 	b.w	1f962 <free_list_add>
		h->buckets[i].next = 0;
   1fcde:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fce2:	e7e1      	b.n	1fca8 <sys_heap_init+0x36>

0001fce4 <_ldiv5>:
	uint32_t v_lo = *v;
   1fce4:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1fce8:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1fcea:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1fcee:	fba2 2403 	umull	r2, r4, r2, r3
   1fcf2:	18d5      	adds	r5, r2, r3
   1fcf4:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1fcf8:	fba1 1303 	umull	r1, r3, r1, r3
   1fcfc:	1852      	adds	r2, r2, r1
   1fcfe:	eb44 0403 	adc.w	r4, r4, r3
   1fd02:	1952      	adds	r2, r2, r5
   1fd04:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1fd08:	1889      	adds	r1, r1, r2
   1fd0a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1fd0e:	e9c0 1300 	strd	r1, r3, [r0]
}
   1fd12:	bd30      	pop	{r4, r5, pc}

0001fd14 <_get_digit>:
	if (*digit_count > 0) {
   1fd14:	680a      	ldr	r2, [r1, #0]
   1fd16:	2a00      	cmp	r2, #0
{
   1fd18:	b510      	push	{r4, lr}
   1fd1a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1fd1c:	dd0f      	ble.n	1fd3e <_get_digit+0x2a>
		--*digit_count;
   1fd1e:	3a01      	subs	r2, #1
   1fd20:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1fd22:	681a      	ldr	r2, [r3, #0]
   1fd24:	6844      	ldr	r4, [r0, #4]
   1fd26:	200a      	movs	r0, #10
   1fd28:	fba2 1200 	umull	r1, r2, r2, r0
   1fd2c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1fd30:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1fd32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1fd36:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1fd3a:	3030      	adds	r0, #48	; 0x30
}
   1fd3c:	bd10      	pop	{r4, pc}
		rval = '0';
   1fd3e:	2030      	movs	r0, #48	; 0x30
   1fd40:	e7fc      	b.n	1fd3c <_get_digit+0x28>

0001fd42 <encode_uint>:
{
   1fd42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd46:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1fd48:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1fd4a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1fd4c:	4680      	mov	r8, r0
   1fd4e:	460f      	mov	r7, r1
   1fd50:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1fd52:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1fd56:	d029      	beq.n	1fdac <encode_uint+0x6a>
   1fd58:	d824      	bhi.n	1fda4 <encode_uint+0x62>
		return 16;
   1fd5a:	2b58      	cmp	r3, #88	; 0x58
   1fd5c:	bf14      	ite	ne
   1fd5e:	260a      	movne	r6, #10
   1fd60:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1fd62:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1fd66:	4632      	mov	r2, r6
   1fd68:	2300      	movs	r3, #0
   1fd6a:	4640      	mov	r0, r8
   1fd6c:	4639      	mov	r1, r7
   1fd6e:	f7e0 fdbd 	bl	8ec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd72:	2a09      	cmp	r2, #9
   1fd74:	b2d4      	uxtb	r4, r2
   1fd76:	d81e      	bhi.n	1fdb6 <encode_uint+0x74>
   1fd78:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1fd7a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd7c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1fd7e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd82:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1fd86:	d301      	bcc.n	1fd8c <encode_uint+0x4a>
   1fd88:	45d1      	cmp	r9, sl
   1fd8a:	d811      	bhi.n	1fdb0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1fd8c:	782b      	ldrb	r3, [r5, #0]
   1fd8e:	069b      	lsls	r3, r3, #26
   1fd90:	d505      	bpl.n	1fd9e <encode_uint+0x5c>
		if (radix == 8) {
   1fd92:	2e08      	cmp	r6, #8
   1fd94:	d115      	bne.n	1fdc2 <encode_uint+0x80>
			conv->altform_0 = true;
   1fd96:	78ab      	ldrb	r3, [r5, #2]
   1fd98:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1fd9c:	70ab      	strb	r3, [r5, #2]
}
   1fd9e:	4648      	mov	r0, r9
   1fda0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fda4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fda8:	2b70      	cmp	r3, #112	; 0x70
   1fdaa:	e7d7      	b.n	1fd5c <encode_uint+0x1a>
	switch (specifier) {
   1fdac:	2608      	movs	r6, #8
   1fdae:	e7d8      	b.n	1fd62 <encode_uint+0x20>
		value /= radix;
   1fdb0:	4680      	mov	r8, r0
   1fdb2:	460f      	mov	r7, r1
   1fdb4:	e7d7      	b.n	1fd66 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fdb6:	f1bb 0f19 	cmp.w	fp, #25
   1fdba:	bf94      	ite	ls
   1fdbc:	3437      	addls	r4, #55	; 0x37
   1fdbe:	3457      	addhi	r4, #87	; 0x57
   1fdc0:	e7db      	b.n	1fd7a <encode_uint+0x38>
		} else if (radix == 16) {
   1fdc2:	2e10      	cmp	r6, #16
   1fdc4:	d1eb      	bne.n	1fd9e <encode_uint+0x5c>
			conv->altform_0c = true;
   1fdc6:	78ab      	ldrb	r3, [r5, #2]
   1fdc8:	f043 0310 	orr.w	r3, r3, #16
   1fdcc:	e7e6      	b.n	1fd9c <encode_uint+0x5a>

0001fdce <outs>:
{
   1fdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdd2:	4607      	mov	r7, r0
   1fdd4:	4688      	mov	r8, r1
   1fdd6:	4615      	mov	r5, r2
   1fdd8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1fdda:	4614      	mov	r4, r2
   1fddc:	42b4      	cmp	r4, r6
   1fdde:	eba4 0005 	sub.w	r0, r4, r5
   1fde2:	d302      	bcc.n	1fdea <outs+0x1c>
   1fde4:	b93e      	cbnz	r6, 1fdf6 <outs+0x28>
   1fde6:	7823      	ldrb	r3, [r4, #0]
   1fde8:	b12b      	cbz	r3, 1fdf6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fdea:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fdee:	4641      	mov	r1, r8
   1fdf0:	47b8      	blx	r7
		if (rc < 0) {
   1fdf2:	2800      	cmp	r0, #0
   1fdf4:	daf2      	bge.n	1fddc <outs+0xe>
}
   1fdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fdfa <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   1fdfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1fdfe:	4770      	bx	lr

0001fe00 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   1fe00:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   1fe02:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   1fe06:	42ac      	cmp	r4, r5
   1fe08:	d207      	bcs.n	1fe1a <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   1fe0a:	6906      	ldr	r6, [r0, #16]
   1fe0c:	f7ff fff5 	bl	1fdfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1fe10:	fbb0 f0f6 	udiv	r0, r0, r6
   1fe14:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   1fe16:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   1fe1a:	1b63      	subs	r3, r4, r5
   1fe1c:	4258      	negs	r0, r3
   1fe1e:	4158      	adcs	r0, r3
   1fe20:	bd70      	pop	{r4, r5, r6, pc}

0001fe22 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1fe22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   1fe26:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   1fe28:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   1fe2c:	454c      	cmp	r4, r9
{
   1fe2e:	4605      	mov	r5, r0
   1fe30:	460e      	mov	r6, r1
   1fe32:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   1fe34:	d907      	bls.n	1fe46 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   1fe36:	6907      	ldr	r7, [r0, #16]
   1fe38:	f7ff ffdf 	bl	1fdfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1fe3c:	fbb0 f0f7 	udiv	r0, r0, r7
   1fe40:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   1fe42:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1fe46:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   1fe48:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1fe4a:	692f      	ldr	r7, [r5, #16]
   1fe4c:	b18b      	cbz	r3, 1fe72 <ring_buf_put_claim+0x50>
   1fe4e:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   1fe50:	443c      	add	r4, r7
   1fe52:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   1fe56:	4540      	cmp	r0, r8
   1fe58:	bf28      	it	cs
   1fe5a:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   1fe5c:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   1fe5e:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   1fe60:	42b8      	cmp	r0, r7
   1fe62:	bf28      	it	cs
   1fe64:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   1fe66:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   1fe68:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   1fe6a:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   1fe6c:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   1fe6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1fe72:	fbb1 f3f7 	udiv	r3, r1, r7
   1fe76:	fb07 1313 	mls	r3, r7, r3, r1
   1fe7a:	e7e9      	b.n	1fe50 <ring_buf_put_claim+0x2e>

0001fe7c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   1fe7c:	b570      	push	{r4, r5, r6, lr}
   1fe7e:	4605      	mov	r5, r0
   1fe80:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   1fe82:	f7ff ffba 	bl	1fdfa <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   1fe86:	686e      	ldr	r6, [r5, #4]
   1fe88:	692a      	ldr	r2, [r5, #16]
   1fe8a:	682b      	ldr	r3, [r5, #0]
   1fe8c:	1931      	adds	r1, r6, r4
   1fe8e:	4413      	add	r3, r2
   1fe90:	4299      	cmp	r1, r3
   1fe92:	d80c      	bhi.n	1feae <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   1fe94:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   1fe96:	bf83      	ittte	hi
   1fe98:	fbb0 f3f2 	udivhi	r3, r0, r2
   1fe9c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   1fea0:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   1fea2:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   1fea4:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   1fea6:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   1feaa:	2000      	movs	r0, #0
}
   1feac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1feae:	f06f 0015 	mvn.w	r0, #21
   1feb2:	e7fb      	b.n	1feac <ring_buf_put_finish+0x30>

0001feb4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   1feb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1feb8:	4680      	mov	r8, r0
   1feba:	460e      	mov	r6, r1
   1febc:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1febe:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1fec0:	462a      	mov	r2, r5
   1fec2:	a901      	add	r1, sp, #4
   1fec4:	4640      	mov	r0, r8
   1fec6:	f7ff ffac 	bl	1fe22 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   1feca:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1fecc:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   1fece:	4602      	mov	r2, r0
   1fed0:	9801      	ldr	r0, [sp, #4]
   1fed2:	f000 fc29 	bl	20728 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1fed6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   1fed8:	4427      	add	r7, r4
		data += partial_size;
   1feda:	4426      	add	r6, r4
	} while (size && partial_size);
   1fedc:	d001      	beq.n	1fee2 <ring_buf_put+0x2e>
   1fede:	2c00      	cmp	r4, #0
   1fee0:	d1ee      	bne.n	1fec0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   1fee2:	4639      	mov	r1, r7
   1fee4:	4640      	mov	r0, r8
   1fee6:	f7ff ffc9 	bl	1fe7c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1feea:	4638      	mov	r0, r7
   1feec:	b002      	add	sp, #8
   1feee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fef2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1fef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1fef6:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   1fef8:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   1fefa:	42b3      	cmp	r3, r6
{
   1fefc:	4604      	mov	r4, r0
   1fefe:	460f      	mov	r7, r1
   1ff00:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   1ff02:	d907      	bls.n	1ff14 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   1ff04:	6905      	ldr	r5, [r0, #16]
   1ff06:	f7ff ff78 	bl	1fdfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1ff0a:	fbb0 f1f5 	udiv	r1, r0, r5
   1ff0e:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   1ff10:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1ff14:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   1ff16:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1ff18:	6923      	ldr	r3, [r4, #16]
   1ff1a:	b185      	cbz	r5, 1ff3e <ring_buf_get_claim+0x4c>
   1ff1c:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   1ff1e:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   1ff20:	4540      	cmp	r0, r8
   1ff22:	bf28      	it	cs
   1ff24:	4640      	movcs	r0, r8
   1ff26:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   1ff28:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1ff2a:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   1ff2c:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   1ff2e:	bf28      	it	cs
   1ff30:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   1ff32:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   1ff34:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   1ff36:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1ff38:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   1ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1ff3e:	fbb1 f5f3 	udiv	r5, r1, r3
   1ff42:	fb03 1515 	mls	r5, r3, r5, r1
   1ff46:	e7ea      	b.n	1ff1e <ring_buf_get_claim+0x2c>

0001ff48 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   1ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   1ff4a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1ff4c:	68c3      	ldr	r3, [r0, #12]
   1ff4e:	42b3      	cmp	r3, r6
{
   1ff50:	4605      	mov	r5, r0
   1ff52:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   1ff54:	d914      	bls.n	1ff80 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   1ff56:	6907      	ldr	r7, [r0, #16]
   1ff58:	f7ff ff4f 	bl	1fdfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   1ff5c:	fbb0 f1f7 	udiv	r1, r0, r7
   1ff60:	3901      	subs	r1, #1
   1ff62:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   1ff66:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   1ff68:	6829      	ldr	r1, [r5, #0]
   1ff6a:	4421      	add	r1, r4
   1ff6c:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   1ff6e:	bf9f      	itttt	ls
   1ff70:	1ac9      	subls	r1, r1, r3
   1ff72:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1ff74:	60e9      	strls	r1, [r5, #12]

	return 0;
   1ff76:	2000      	movls	r0, #0
		return -EINVAL;
   1ff78:	bf88      	it	hi
   1ff7a:	f06f 0015 	mvnhi.w	r0, #21
}
   1ff7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   1ff80:	2300      	movs	r3, #0
   1ff82:	e7f1      	b.n	1ff68 <ring_buf_get_finish+0x20>

0001ff84 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   1ff84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ff88:	4680      	mov	r8, r0
   1ff8a:	460d      	mov	r5, r1
   1ff8c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1ff8e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   1ff90:	4632      	mov	r2, r6
   1ff92:	a901      	add	r1, sp, #4
   1ff94:	4640      	mov	r0, r8
   1ff96:	f7ff ffac 	bl	1fef2 <ring_buf_get_claim>
   1ff9a:	4604      	mov	r4, r0
		if (data) {
   1ff9c:	b12d      	cbz	r5, 1ffaa <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   1ff9e:	4602      	mov	r2, r0
   1ffa0:	9901      	ldr	r1, [sp, #4]
   1ffa2:	4628      	mov	r0, r5
   1ffa4:	f000 fbc0 	bl	20728 <memcpy>
			data += partial_size;
   1ffa8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   1ffaa:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   1ffac:	4427      	add	r7, r4
	} while (size && partial_size);
   1ffae:	d001      	beq.n	1ffb4 <ring_buf_get+0x30>
   1ffb0:	2c00      	cmp	r4, #0
   1ffb2:	d1ed      	bne.n	1ff90 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   1ffb4:	4639      	mov	r1, r7
   1ffb6:	4640      	mov	r0, r8
   1ffb8:	f7ff ffc6 	bl	1ff48 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1ffbc:	4638      	mov	r0, r7
   1ffbe:	b002      	add	sp, #8
   1ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ffc4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ffc4:	4770      	bx	lr

0001ffc6 <read_str>:
{
   1ffc6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffca:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ffce:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ffd0:	4640      	mov	r0, r8
{
   1ffd2:	461f      	mov	r7, r3
   1ffd4:	460c      	mov	r4, r1
   1ffd6:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ffd8:	f000 fb79 	bl	206ce <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffdc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ffe0:	9300      	str	r3, [sp, #0]
   1ffe2:	b280      	uxth	r0, r0
   1ffe4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1ffe8:	463b      	mov	r3, r7
   1ffea:	4632      	mov	r2, r6
   1ffec:	4621      	mov	r1, r4
   1ffee:	4628      	mov	r0, r5
   1fff0:	f002 fc83 	bl	228fa <bt_gatt_attr_read>
}
   1fff4:	b004      	add	sp, #16
   1fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fffa <usb_write>:
{
   1fffa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fffe:	4606      	mov	r6, r0
   20000:	460f      	mov	r7, r1
   20002:	4690      	mov	r8, r2
   20004:	4699      	mov	r9, r3
   20006:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   20008:	464b      	mov	r3, r9
   2000a:	4642      	mov	r2, r8
   2000c:	4639      	mov	r1, r7
   2000e:	4630      	mov	r0, r6
   20010:	f7fa fd06 	bl	1aa20 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   20014:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   20018:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   2001a:	d103      	bne.n	20024 <usb_write+0x2a>
	z_impl_k_yield();
   2001c:	f7fe feda 	bl	1edd4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   20020:	3d01      	subs	r5, #1
   20022:	d1f1      	bne.n	20008 <usb_write+0xe>
}
   20024:	4620      	mov	r0, r4
   20026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002002a <usb_get_dev_data_by_cfg>:
	return list->head;
   2002a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2002c:	b140      	cbz	r0, 20040 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   2002e:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   20032:	685b      	ldr	r3, [r3, #4]
   20034:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20036:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   2003a:	d001      	beq.n	20040 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   2003c:	6840      	ldr	r0, [r0, #4]
   2003e:	e7f5      	b.n	2002c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   20040:	4770      	bx	lr

00020042 <usb_get_dev_data_by_iface>:
	return list->head;
   20042:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20044:	b150      	cbz	r0, 2005c <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   20046:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   2004a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   2004c:	685b      	ldr	r3, [r3, #4]
   2004e:	789b      	ldrb	r3, [r3, #2]
   20050:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20052:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   20056:	d001      	beq.n	2005c <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   20058:	6840      	ldr	r0, [r0, #4]
   2005a:	e7f3      	b.n	20044 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   2005c:	4770      	bx	lr

0002005e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   2005e:	b530      	push	{r4, r5, lr}
	return list->head;
   20060:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20062:	b188      	cbz	r0, 20088 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   20064:	f850 3c04 	ldr.w	r3, [r0, #-4]
   20068:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   2006a:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2006c:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2006e:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   20070:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   20072:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   20074:	b2dc      	uxtb	r4, r3
   20076:	42a5      	cmp	r5, r4
   20078:	d801      	bhi.n	2007e <usb_get_dev_data_by_ep+0x20>
	return node->next;
   2007a:	6840      	ldr	r0, [r0, #4]
   2007c:	e7f1      	b.n	20062 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   2007e:	3301      	adds	r3, #1
   20080:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   20084:	428c      	cmp	r4, r1
   20086:	d1f5      	bne.n	20074 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   20088:	bd30      	pop	{r4, r5, pc}

0002008a <usb_transfer_is_busy>:
{
   2008a:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2008c:	f7e5 f918 	bl	52c0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   20090:	b128      	cbz	r0, 2009e <usb_transfer_is_busy+0x14>
   20092:	6840      	ldr	r0, [r0, #4]
   20094:	f110 0f10 	cmn.w	r0, #16
   20098:	bf14      	ite	ne
   2009a:	2000      	movne	r0, #0
   2009c:	2001      	moveq	r0, #1
}
   2009e:	bd08      	pop	{r3, pc}

000200a0 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   200a0:	1c4b      	adds	r3, r1, #1
   200a2:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   200a4:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   200a6:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   200a8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   200ac:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   200ae:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   200b2:	4770      	bx	lr

000200b4 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   200b4:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   200b8:	6f80      	ldr	r0, [r0, #120]	; 0x78
   200ba:	4718      	bx	r3

000200bc <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   200bc:	6903      	ldr	r3, [r0, #16]
   200be:	2200      	movs	r2, #0
   200c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   200c4:	4770      	bx	lr

000200c6 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   200c6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   200c8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   200cc:	b108      	cbz	r0, 200d2 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   200ce:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   200d2:	4770      	bx	lr

000200d4 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   200d4:	6903      	ldr	r3, [r0, #16]
   200d6:	2200      	movs	r2, #0
   200d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   200dc:	4770      	bx	lr

000200de <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   200de:	6903      	ldr	r3, [r0, #16]
}
   200e0:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   200e4:	4770      	bx	lr

000200e6 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   200e6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   200e8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   200ec:	b112      	cbz	r2, 200f4 <cdc_acm_irq_is_pending+0xe>
   200ee:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   200f2:	b92a      	cbnz	r2, 20100 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   200f4:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   200f8:	b118      	cbz	r0, 20102 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   200fa:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   200fe:	4770      	bx	lr
		return 1;
   20100:	2001      	movs	r0, #1
}
   20102:	4770      	bx	lr

00020104 <cdc_acm_irq_update>:
}
   20104:	2001      	movs	r0, #1
   20106:	4770      	bx	lr

00020108 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   20108:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   2010a:	e9c3 1200 	strd	r1, r2, [r3]
}
   2010e:	4770      	bx	lr

00020110 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   20110:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   20112:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   20114:	d007      	beq.n	20126 <cdc_acm_line_ctrl_get+0x16>
   20116:	2904      	cmp	r1, #4
   20118:	d00a      	beq.n	20130 <cdc_acm_line_ctrl_get+0x20>
   2011a:	2901      	cmp	r1, #1
   2011c:	d10d      	bne.n	2013a <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2011e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   20120:	6013      	str	r3, [r2, #0]
		return 0;
   20122:	2000      	movs	r0, #0
   20124:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   20126:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   2012a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2012e:	e7f7      	b.n	20120 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   20130:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   20134:	f003 0301 	and.w	r3, r3, #1
   20138:	e7f2      	b.n	20120 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   2013a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2013e:	4770      	bx	lr

00020140 <cdc_acm_fifo_read>:
{
   20140:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   20142:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   20144:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   20146:	f7ff ff1d 	bl	1ff84 <ring_buf_get>
   2014a:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   2014c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   2014e:	f7ff fe57 	bl	1fe00 <ring_buf_is_empty>
   20152:	b110      	cbz	r0, 2015a <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   20154:	2300      	movs	r3, #0
   20156:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   2015a:	4620      	mov	r0, r4
   2015c:	bd38      	pop	{r3, r4, r5, pc}

0002015e <cdc_acm_poll_in>:
{
   2015e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   20160:	2201      	movs	r2, #1
   20162:	f7ff ffed 	bl	20140 <cdc_acm_fifo_read>
}
   20166:	3801      	subs	r0, #1
   20168:	bf18      	it	ne
   2016a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2016e:	bd08      	pop	{r3, pc}

00020170 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   20170:	2940      	cmp	r1, #64	; 0x40
{
   20172:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   20174:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   20176:	d042      	beq.n	201fe <cdc_acm_line_ctrl_set+0x8e>
   20178:	d813      	bhi.n	201a2 <cdc_acm_line_ctrl_set+0x32>
   2017a:	2910      	cmp	r1, #16
   2017c:	d032      	beq.n	201e4 <cdc_acm_line_ctrl_set+0x74>
   2017e:	d806      	bhi.n	2018e <cdc_acm_line_ctrl_set+0x1e>
   20180:	2901      	cmp	r1, #1
   20182:	d01e      	beq.n	201c2 <cdc_acm_line_ctrl_set+0x52>
   20184:	2908      	cmp	r1, #8
   20186:	d01f      	beq.n	201c8 <cdc_acm_line_ctrl_set+0x58>
   20188:	f06f 0012 	mvn.w	r0, #18
}
   2018c:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   2018e:	2920      	cmp	r1, #32
   20190:	d1fa      	bne.n	20188 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   20192:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   20196:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   2019a:	b342      	cbz	r2, 201ee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   2019c:	f041 0104 	orr.w	r1, r1, #4
   201a0:	e025      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   201a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   201a6:	d033      	beq.n	20210 <cdc_acm_line_ctrl_set+0xa0>
   201a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   201ac:	d039      	beq.n	20222 <cdc_acm_line_ctrl_set+0xb2>
   201ae:	2980      	cmp	r1, #128	; 0x80
   201b0:	d1ea      	bne.n	20188 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   201b2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   201b6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   201ba:	b1c2      	cbz	r2, 201ee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   201bc:	f041 0110 	orr.w	r1, r1, #16
   201c0:	e015      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   201c2:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   201c4:	2000      	movs	r0, #0
   201c6:	e7e1      	b.n	2018c <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   201c8:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   201cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   201d0:	b92a      	cbnz	r2, 201de <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   201d2:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   201d6:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   201d8:	f7e5 fbae 	bl	5938 <cdc_acm_send_notification.isra.0>
   201dc:	e7f2      	b.n	201c4 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   201de:	f041 0101 	orr.w	r1, r1, #1
   201e2:	e7f6      	b.n	201d2 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   201e4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   201e8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   201ec:	b922      	cbnz	r2, 201f8 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   201ee:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   201f2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   201f6:	e7ef      	b.n	201d8 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   201f8:	f041 0102 	orr.w	r1, r1, #2
   201fc:	e7f7      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   201fe:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   20202:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   20206:	2a00      	cmp	r2, #0
   20208:	d0f1      	beq.n	201ee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   2020a:	f041 0108 	orr.w	r1, r1, #8
   2020e:	e7ee      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   20210:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   20214:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   20218:	2a00      	cmp	r2, #0
   2021a:	d0e8      	beq.n	201ee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   2021c:	f041 0120 	orr.w	r1, r1, #32
   20220:	e7e5      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   20222:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   20226:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   2022a:	2a00      	cmp	r2, #0
   2022c:	d0df      	beq.n	201ee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   2022e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   20232:	e7dc      	b.n	201ee <cdc_acm_line_ctrl_set+0x7e>

00020234 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   20234:	b538      	push	{r3, r4, r5, lr}
   20236:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   20238:	42ab      	cmp	r3, r5
{
   2023a:	4611      	mov	r1, r2
   2023c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2023e:	d804      	bhi.n	2024a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   20240:	461a      	mov	r2, r3
   20242:	f000 fa71 	bl	20728 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20246:	4620      	mov	r0, r4
   20248:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2024a:	2400      	movs	r4, #0
   2024c:	e7fb      	b.n	20246 <_copy+0x12>

0002024e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2024e:	f000 ba76 	b.w	2073e <memset>

00020252 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20252:	09c3      	lsrs	r3, r0, #7
   20254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20258:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2025c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   20260:	b2c0      	uxtb	r0, r0
   20262:	4770      	bx	lr

00020264 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20264:	78cb      	ldrb	r3, [r1, #3]
   20266:	7802      	ldrb	r2, [r0, #0]
   20268:	4053      	eors	r3, r2
   2026a:	7003      	strb	r3, [r0, #0]
   2026c:	884b      	ldrh	r3, [r1, #2]
   2026e:	7842      	ldrb	r2, [r0, #1]
   20270:	4053      	eors	r3, r2
   20272:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20274:	680a      	ldr	r2, [r1, #0]
   20276:	7883      	ldrb	r3, [r0, #2]
   20278:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2027c:	7083      	strb	r3, [r0, #2]
   2027e:	680a      	ldr	r2, [r1, #0]
   20280:	78c3      	ldrb	r3, [r0, #3]
   20282:	4053      	eors	r3, r2
   20284:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20286:	79cb      	ldrb	r3, [r1, #7]
   20288:	7902      	ldrb	r2, [r0, #4]
   2028a:	4053      	eors	r3, r2
   2028c:	7103      	strb	r3, [r0, #4]
   2028e:	88cb      	ldrh	r3, [r1, #6]
   20290:	7942      	ldrb	r2, [r0, #5]
   20292:	4053      	eors	r3, r2
   20294:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20296:	684a      	ldr	r2, [r1, #4]
   20298:	7983      	ldrb	r3, [r0, #6]
   2029a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2029e:	7183      	strb	r3, [r0, #6]
   202a0:	684a      	ldr	r2, [r1, #4]
   202a2:	79c3      	ldrb	r3, [r0, #7]
   202a4:	4053      	eors	r3, r2
   202a6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   202a8:	7acb      	ldrb	r3, [r1, #11]
   202aa:	7a02      	ldrb	r2, [r0, #8]
   202ac:	4053      	eors	r3, r2
   202ae:	7203      	strb	r3, [r0, #8]
   202b0:	7a42      	ldrb	r2, [r0, #9]
   202b2:	894b      	ldrh	r3, [r1, #10]
   202b4:	4053      	eors	r3, r2
   202b6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   202b8:	688a      	ldr	r2, [r1, #8]
   202ba:	7a83      	ldrb	r3, [r0, #10]
   202bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   202c0:	7283      	strb	r3, [r0, #10]
   202c2:	688a      	ldr	r2, [r1, #8]
   202c4:	7ac3      	ldrb	r3, [r0, #11]
   202c6:	4053      	eors	r3, r2
   202c8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   202ca:	7bcb      	ldrb	r3, [r1, #15]
   202cc:	7b02      	ldrb	r2, [r0, #12]
   202ce:	4053      	eors	r3, r2
   202d0:	7303      	strb	r3, [r0, #12]
   202d2:	89cb      	ldrh	r3, [r1, #14]
   202d4:	7b42      	ldrb	r2, [r0, #13]
   202d6:	4053      	eors	r3, r2
   202d8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   202da:	68ca      	ldr	r2, [r1, #12]
   202dc:	7b83      	ldrb	r3, [r0, #14]
   202de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   202e2:	7383      	strb	r3, [r0, #14]
   202e4:	68ca      	ldr	r2, [r1, #12]
   202e6:	7bc3      	ldrb	r3, [r0, #15]
   202e8:	4053      	eors	r3, r2
   202ea:	73c3      	strb	r3, [r0, #15]
}
   202ec:	4770      	bx	lr

000202ee <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   202ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   202f0:	7802      	ldrb	r2, [r0, #0]
   202f2:	f88d 2000 	strb.w	r2, [sp]
   202f6:	7942      	ldrb	r2, [r0, #5]
   202f8:	f88d 2001 	strb.w	r2, [sp, #1]
   202fc:	7a82      	ldrb	r2, [r0, #10]
   202fe:	f88d 2002 	strb.w	r2, [sp, #2]
   20302:	7bc2      	ldrb	r2, [r0, #15]
   20304:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   20308:	7902      	ldrb	r2, [r0, #4]
   2030a:	f88d 2004 	strb.w	r2, [sp, #4]
   2030e:	7a42      	ldrb	r2, [r0, #9]
   20310:	f88d 2005 	strb.w	r2, [sp, #5]
   20314:	7b82      	ldrb	r2, [r0, #14]
   20316:	f88d 2006 	strb.w	r2, [sp, #6]
   2031a:	78c2      	ldrb	r2, [r0, #3]
   2031c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20320:	7a02      	ldrb	r2, [r0, #8]
   20322:	f88d 2008 	strb.w	r2, [sp, #8]
   20326:	7b42      	ldrb	r2, [r0, #13]
   20328:	f88d 2009 	strb.w	r2, [sp, #9]
   2032c:	7882      	ldrb	r2, [r0, #2]
   2032e:	f88d 200a 	strb.w	r2, [sp, #10]
   20332:	79c2      	ldrb	r2, [r0, #7]
   20334:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   20338:	7b02      	ldrb	r2, [r0, #12]
   2033a:	f88d 200c 	strb.w	r2, [sp, #12]
   2033e:	7842      	ldrb	r2, [r0, #1]
   20340:	7ac3      	ldrb	r3, [r0, #11]
   20342:	f88d 200d 	strb.w	r2, [sp, #13]
   20346:	7982      	ldrb	r2, [r0, #6]
   20348:	f88d 200e 	strb.w	r2, [sp, #14]
   2034c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   20350:	2310      	movs	r3, #16
   20352:	466a      	mov	r2, sp
   20354:	4619      	mov	r1, r3
   20356:	f7ff ff6d 	bl	20234 <_copy>
}
   2035a:	b005      	add	sp, #20
   2035c:	f85d fb04 	ldr.w	pc, [sp], #4

00020360 <mult_row_column>:
{
   20360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20362:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20364:	7808      	ldrb	r0, [r1, #0]
{
   20366:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20368:	f7ff ff73 	bl	20252 <_double_byte>
   2036c:	4605      	mov	r5, r0
   2036e:	7860      	ldrb	r0, [r4, #1]
   20370:	f7ff ff6f 	bl	20252 <_double_byte>
   20374:	78a2      	ldrb	r2, [r4, #2]
   20376:	7863      	ldrb	r3, [r4, #1]
   20378:	4053      	eors	r3, r2
   2037a:	78e2      	ldrb	r2, [r4, #3]
   2037c:	4053      	eors	r3, r2
   2037e:	405d      	eors	r5, r3
   20380:	4045      	eors	r5, r0
   20382:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20384:	7860      	ldrb	r0, [r4, #1]
   20386:	7827      	ldrb	r7, [r4, #0]
   20388:	f7ff ff63 	bl	20252 <_double_byte>
   2038c:	4605      	mov	r5, r0
   2038e:	78a0      	ldrb	r0, [r4, #2]
   20390:	f7ff ff5f 	bl	20252 <_double_byte>
   20394:	78a3      	ldrb	r3, [r4, #2]
   20396:	405f      	eors	r7, r3
   20398:	78e3      	ldrb	r3, [r4, #3]
   2039a:	405f      	eors	r7, r3
   2039c:	407d      	eors	r5, r7
   2039e:	4045      	eors	r5, r0
   203a0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   203a2:	78a0      	ldrb	r0, [r4, #2]
   203a4:	7865      	ldrb	r5, [r4, #1]
   203a6:	7827      	ldrb	r7, [r4, #0]
   203a8:	f7ff ff53 	bl	20252 <_double_byte>
   203ac:	406f      	eors	r7, r5
   203ae:	4605      	mov	r5, r0
   203b0:	78e0      	ldrb	r0, [r4, #3]
   203b2:	f7ff ff4e 	bl	20252 <_double_byte>
   203b6:	78e3      	ldrb	r3, [r4, #3]
   203b8:	405f      	eors	r7, r3
   203ba:	407d      	eors	r5, r7
   203bc:	4045      	eors	r5, r0
   203be:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   203c0:	7820      	ldrb	r0, [r4, #0]
   203c2:	f7ff ff46 	bl	20252 <_double_byte>
   203c6:	7863      	ldrb	r3, [r4, #1]
   203c8:	7825      	ldrb	r5, [r4, #0]
   203ca:	405d      	eors	r5, r3
   203cc:	78a3      	ldrb	r3, [r4, #2]
   203ce:	405d      	eors	r5, r3
   203d0:	4045      	eors	r5, r0
   203d2:	78e0      	ldrb	r0, [r4, #3]
   203d4:	f7ff ff3d 	bl	20252 <_double_byte>
   203d8:	b2ed      	uxtb	r5, r5
   203da:	4045      	eors	r5, r0
   203dc:	70f5      	strb	r5, [r6, #3]
}
   203de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000203e0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   203e0:	b570      	push	{r4, r5, r6, lr}
   203e2:	4614      	mov	r4, r2
   203e4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   203e6:	4605      	mov	r5, r0
   203e8:	2800      	cmp	r0, #0
   203ea:	d049      	beq.n	20480 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   203ec:	2900      	cmp	r1, #0
   203ee:	d049      	beq.n	20484 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   203f0:	2a00      	cmp	r2, #0
   203f2:	d049      	beq.n	20488 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   203f4:	2310      	movs	r3, #16
   203f6:	460a      	mov	r2, r1
   203f8:	4668      	mov	r0, sp
   203fa:	4619      	mov	r1, r3
   203fc:	f7ff ff1a 	bl	20234 <_copy>
	add_round_key(state, s->words);
   20400:	4621      	mov	r1, r4
   20402:	4668      	mov	r0, sp
   20404:	f7ff ff2e 	bl	20264 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   20408:	3410      	adds	r4, #16
   2040a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2040e:	4668      	mov	r0, sp
   20410:	f7e5 fc38 	bl	5c84 <sub_bytes>
		shift_rows(state);
   20414:	4668      	mov	r0, sp
   20416:	f7ff ff6a 	bl	202ee <shift_rows>
	mult_row_column(t, s);
   2041a:	4669      	mov	r1, sp
   2041c:	a804      	add	r0, sp, #16
   2041e:	f7ff ff9f 	bl	20360 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   20422:	a901      	add	r1, sp, #4
   20424:	a805      	add	r0, sp, #20
   20426:	f7ff ff9b 	bl	20360 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2042a:	a902      	add	r1, sp, #8
   2042c:	a806      	add	r0, sp, #24
   2042e:	f7ff ff97 	bl	20360 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   20432:	a903      	add	r1, sp, #12
   20434:	a807      	add	r0, sp, #28
   20436:	f7ff ff93 	bl	20360 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2043a:	2310      	movs	r3, #16
   2043c:	4619      	mov	r1, r3
   2043e:	eb0d 0203 	add.w	r2, sp, r3
   20442:	4668      	mov	r0, sp
   20444:	f7ff fef6 	bl	20234 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   20448:	4621      	mov	r1, r4
   2044a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2044c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2044e:	f7ff ff09 	bl	20264 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   20452:	42a6      	cmp	r6, r4
   20454:	d1db      	bne.n	2040e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   20456:	f7e5 fc15 	bl	5c84 <sub_bytes>
	shift_rows(state);
   2045a:	4668      	mov	r0, sp
   2045c:	f7ff ff47 	bl	202ee <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   20460:	4631      	mov	r1, r6
   20462:	4668      	mov	r0, sp
   20464:	f7ff fefe 	bl	20264 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   20468:	2310      	movs	r3, #16
   2046a:	4619      	mov	r1, r3
   2046c:	466a      	mov	r2, sp
   2046e:	4628      	mov	r0, r5
   20470:	f7ff fee0 	bl	20234 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   20474:	4668      	mov	r0, sp
   20476:	2210      	movs	r2, #16
   20478:	2100      	movs	r1, #0
   2047a:	f7ff fee8 	bl	2024e <_set>

	return TC_CRYPTO_SUCCESS;
   2047e:	2001      	movs	r0, #1
}
   20480:	b008      	add	sp, #32
   20482:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20484:	4608      	mov	r0, r1
   20486:	e7fb      	b.n	20480 <tc_aes_encrypt+0xa0>
   20488:	4610      	mov	r0, r2
   2048a:	e7f9      	b.n	20480 <tc_aes_encrypt+0xa0>

0002048c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2048c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2048e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   20490:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20492:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20496:	2b00      	cmp	r3, #0
   20498:	bfb4      	ite	lt
   2049a:	2387      	movlt	r3, #135	; 0x87
   2049c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2049e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   204a2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   204a6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   204a8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   204ac:	d002      	beq.n	204b4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   204ae:	7813      	ldrb	r3, [r2, #0]
   204b0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   204b2:	e7f4      	b.n	2049e <gf_double+0x12>
	}
}
   204b4:	bd10      	pop	{r4, pc}

000204b6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   204b6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   204b8:	b120      	cbz	r0, 204c4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   204ba:	2258      	movs	r2, #88	; 0x58
   204bc:	2100      	movs	r1, #0
   204be:	f7ff fec6 	bl	2024e <_set>
   204c2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   204c4:	bd08      	pop	{r3, pc}

000204c6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   204c6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   204c8:	4604      	mov	r4, r0
   204ca:	b188      	cbz	r0, 204f0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   204cc:	2210      	movs	r2, #16
   204ce:	2100      	movs	r1, #0
   204d0:	f7ff febd 	bl	2024e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   204d4:	2210      	movs	r2, #16
   204d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   204da:	2100      	movs	r1, #0
   204dc:	f7ff feb7 	bl	2024e <_set>
	s->leftover_offset = 0;
   204e0:	2300      	movs	r3, #0
   204e2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   204e4:	2200      	movs	r2, #0
   204e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   204ea:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   204ee:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   204f0:	bd10      	pop	{r4, pc}

000204f2 <tc_cmac_setup>:
{
   204f2:	b570      	push	{r4, r5, r6, lr}
   204f4:	460d      	mov	r5, r1
   204f6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   204f8:	4604      	mov	r4, r0
   204fa:	b310      	cbz	r0, 20542 <tc_cmac_setup+0x50>
   204fc:	b311      	cbz	r1, 20544 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   204fe:	2258      	movs	r2, #88	; 0x58
   20500:	2100      	movs	r1, #0
   20502:	f7ff fea4 	bl	2024e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   20506:	4629      	mov	r1, r5
	s->sched = sched;
   20508:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2050a:	4630      	mov	r0, r6
   2050c:	f7e5 fbc6 	bl	5c9c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20510:	2210      	movs	r2, #16
   20512:	2100      	movs	r1, #0
   20514:	4620      	mov	r0, r4
   20516:	f7ff fe9a 	bl	2024e <_set>
	gf_double (s->K1, s->iv);
   2051a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2051e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20520:	4621      	mov	r1, r4
   20522:	4620      	mov	r0, r4
   20524:	f7ff ff5c 	bl	203e0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   20528:	4621      	mov	r1, r4
   2052a:	4628      	mov	r0, r5
   2052c:	f7ff ffae 	bl	2048c <gf_double>
	gf_double (s->K2, s->K1);
   20530:	4629      	mov	r1, r5
   20532:	f104 0020 	add.w	r0, r4, #32
   20536:	f7ff ffa9 	bl	2048c <gf_double>
	tc_cmac_init(s);
   2053a:	4620      	mov	r0, r4
   2053c:	f7ff ffc3 	bl	204c6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   20540:	2001      	movs	r0, #1
}
   20542:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20544:	4608      	mov	r0, r1
   20546:	e7fc      	b.n	20542 <tc_cmac_setup+0x50>

00020548 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2054c:	460d      	mov	r5, r1
   2054e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20550:	4604      	mov	r4, r0
   20552:	2800      	cmp	r0, #0
   20554:	d061      	beq.n	2061a <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20556:	b912      	cbnz	r2, 2055e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20558:	2001      	movs	r0, #1
}
   2055a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2055e:	2900      	cmp	r1, #0
   20560:	d05b      	beq.n	2061a <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   20562:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   20566:	ea53 0102 	orrs.w	r1, r3, r2
   2056a:	d056      	beq.n	2061a <tc_cmac_update+0xd2>
	s->countdown--;
   2056c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2056e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   20572:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   20576:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2057a:	f1b8 0f00 	cmp.w	r8, #0
   2057e:	d02a      	beq.n	205d6 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20580:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20584:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   20588:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2058a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2058c:	d208      	bcs.n	205a0 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2058e:	462a      	mov	r2, r5
   20590:	4633      	mov	r3, r6
   20592:	4631      	mov	r1, r6
   20594:	f7ff fe4e 	bl	20234 <_copy>
			s->leftover_offset += data_length;
   20598:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2059a:	4432      	add	r2, r6
   2059c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2059e:	e7db      	b.n	20558 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   205a0:	463b      	mov	r3, r7
   205a2:	462a      	mov	r2, r5
   205a4:	4639      	mov	r1, r7
   205a6:	f7ff fe45 	bl	20234 <_copy>
		data_length -= remaining_space;
   205aa:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   205ac:	2300      	movs	r3, #0
   205ae:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   205b0:	4446      	add	r6, r8
		data += remaining_space;
   205b2:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205b4:	1e63      	subs	r3, r4, #1
   205b6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   205ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   205be:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205c2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   205c4:	ea82 0200 	eor.w	r2, r2, r0
   205c8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205ca:	d1f6      	bne.n	205ba <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   205cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   205ce:	4621      	mov	r1, r4
   205d0:	4620      	mov	r0, r4
   205d2:	f7ff ff05 	bl	203e0 <tc_aes_encrypt>
   205d6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   205da:	2e10      	cmp	r6, #16
   205dc:	d80a      	bhi.n	205f4 <tc_cmac_update+0xac>
	if (data_length > 0) {
   205de:	2e00      	cmp	r6, #0
   205e0:	d0ba      	beq.n	20558 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   205e2:	4633      	mov	r3, r6
   205e4:	462a      	mov	r2, r5
   205e6:	4631      	mov	r1, r6
   205e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   205ec:	f7ff fe22 	bl	20234 <_copy>
		s->leftover_offset = data_length;
   205f0:	6466      	str	r6, [r4, #68]	; 0x44
   205f2:	e7b1      	b.n	20558 <tc_cmac_update+0x10>
   205f4:	1e63      	subs	r3, r4, #1
   205f6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   205f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   205fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20600:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   20602:	ea82 0200 	eor.w	r2, r2, r0
   20606:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20608:	d1f6      	bne.n	205f8 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2060a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2060c:	4621      	mov	r1, r4
   2060e:	4620      	mov	r0, r4
   20610:	f7ff fee6 	bl	203e0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20614:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   20616:	3e10      	subs	r6, #16
   20618:	e7df      	b.n	205da <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   2061a:	2000      	movs	r0, #0
   2061c:	e79d      	b.n	2055a <tc_cmac_update+0x12>

0002061e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2061e:	b570      	push	{r4, r5, r6, lr}
   20620:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20622:	4605      	mov	r5, r0
   20624:	b1e8      	cbz	r0, 20662 <tc_cmac_final+0x44>
   20626:	b369      	cbz	r1, 20684 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20628:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2062a:	2a10      	cmp	r2, #16
   2062c:	d11a      	bne.n	20664 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2062e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20630:	1e63      	subs	r3, r4, #1
   20632:	3901      	subs	r1, #1
   20634:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20638:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2063c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20640:	4072      	eors	r2, r6
   20642:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20646:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20648:	ea82 0206 	eor.w	r2, r2, r6
   2064c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2064e:	d1f3      	bne.n	20638 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20650:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20652:	4621      	mov	r1, r4
   20654:	4628      	mov	r0, r5
   20656:	f7ff fec3 	bl	203e0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2065a:	4620      	mov	r0, r4
   2065c:	f7ff ff2b 	bl	204b6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20660:	2001      	movs	r0, #1
}
   20662:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20664:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20668:	2100      	movs	r1, #0
   2066a:	f1c2 0210 	rsb	r2, r2, #16
   2066e:	4420      	add	r0, r4
   20670:	f7ff fded 	bl	2024e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20674:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20676:	4423      	add	r3, r4
   20678:	2280      	movs	r2, #128	; 0x80
   2067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2067e:	f104 0120 	add.w	r1, r4, #32
   20682:	e7d5      	b.n	20630 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20684:	4608      	mov	r0, r1
   20686:	e7ec      	b.n	20662 <tc_cmac_final+0x44>

00020688 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   20688:	f003 bb77 	b.w	23d7a <z_fatal_error>

0002068c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2068c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2068e:	6800      	ldr	r0, [r0, #0]
   20690:	f003 bb73 	b.w	23d7a <z_fatal_error>

00020694 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20694:	2100      	movs	r1, #0
   20696:	2001      	movs	r0, #1
   20698:	f7ff bff6 	b.w	20688 <z_arm_fatal_error>

0002069c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2069c:	b508      	push	{r3, lr}
	handler();
   2069e:	f7e5 fbc5 	bl	5e2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   206a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   206a6:	f7e5 bc85 	b.w	5fb4 <z_arm_exc_exit>

000206aa <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   206aa:	b570      	push	{r4, r5, r6, lr}
   206ac:	4605      	mov	r5, r0
   206ae:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   206b0:	b142      	cbz	r2, 206c4 <strncpy+0x1a>
   206b2:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   206b6:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   206b8:	b92c      	cbnz	r4, 206c6 <strncpy+0x1c>
   206ba:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   206bc:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   206c0:	429a      	cmp	r2, r3
   206c2:	d1fb      	bne.n	206bc <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   206c4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   206c6:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   206ca:	4632      	mov	r2, r6
   206cc:	e7ef      	b.n	206ae <strncpy+0x4>

000206ce <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   206ce:	4603      	mov	r3, r0
	size_t n = 0;
   206d0:	2000      	movs	r0, #0

	while (*s != '\0') {
   206d2:	5c1a      	ldrb	r2, [r3, r0]
   206d4:	b902      	cbnz	r2, 206d8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   206d6:	4770      	bx	lr
		n++;
   206d8:	3001      	adds	r0, #1
   206da:	e7fa      	b.n	206d2 <strlen+0x4>

000206dc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   206dc:	4603      	mov	r3, r0
	size_t n = 0;
   206de:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   206e0:	5c1a      	ldrb	r2, [r3, r0]
   206e2:	b10a      	cbz	r2, 206e8 <strnlen+0xc>
   206e4:	4288      	cmp	r0, r1
   206e6:	d100      	bne.n	206ea <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   206e8:	4770      	bx	lr
		n++;
   206ea:	3001      	adds	r0, #1
   206ec:	e7f8      	b.n	206e0 <strnlen+0x4>

000206ee <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   206ee:	1e43      	subs	r3, r0, #1
   206f0:	3901      	subs	r1, #1
   206f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   206f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   206fa:	4282      	cmp	r2, r0
   206fc:	d101      	bne.n	20702 <strcmp+0x14>
   206fe:	2a00      	cmp	r2, #0
   20700:	d1f7      	bne.n	206f2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   20702:	1a10      	subs	r0, r2, r0
   20704:	4770      	bx	lr

00020706 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   20706:	b510      	push	{r4, lr}
   20708:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2070a:	b15a      	cbz	r2, 20724 <memcmp+0x1e>
   2070c:	3901      	subs	r1, #1
   2070e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   20710:	f813 0b01 	ldrb.w	r0, [r3], #1
   20714:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   20718:	42a3      	cmp	r3, r4
   2071a:	d001      	beq.n	20720 <memcmp+0x1a>
   2071c:	4290      	cmp	r0, r2
   2071e:	d0f7      	beq.n	20710 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   20720:	1a80      	subs	r0, r0, r2
}
   20722:	bd10      	pop	{r4, pc}
		return 0;
   20724:	4610      	mov	r0, r2
   20726:	e7fc      	b.n	20722 <memcmp+0x1c>

00020728 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   20728:	b510      	push	{r4, lr}
   2072a:	1e43      	subs	r3, r0, #1
   2072c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2072e:	4291      	cmp	r1, r2
   20730:	d100      	bne.n	20734 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   20732:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   20734:	f811 4b01 	ldrb.w	r4, [r1], #1
   20738:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2073c:	e7f7      	b.n	2072e <memcpy+0x6>

0002073e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2073e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   20740:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   20742:	4603      	mov	r3, r0
	while (n > 0) {
   20744:	4293      	cmp	r3, r2
   20746:	d100      	bne.n	2074a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   20748:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2074a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2074e:	e7f9      	b.n	20744 <memset+0x6>

00020750 <_stdout_hook_default>:
}
   20750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20754:	4770      	bx	lr

00020756 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   20756:	b084      	sub	sp, #16
   20758:	ab04      	add	r3, sp, #16
   2075a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2075e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20762:	2b06      	cmp	r3, #6
   20764:	d108      	bne.n	20778 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   20766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2076a:	2201      	movs	r2, #1
   2076c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20770:	f3bf 8f4f 	dsb	sy
        __WFE();
   20774:	bf20      	wfe
    while (true)
   20776:	e7fd      	b.n	20774 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   20778:	b004      	add	sp, #16
   2077a:	4770      	bx	lr

0002077c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2077c:	b084      	sub	sp, #16
   2077e:	ab04      	add	r3, sp, #16
   20780:	e903 0007 	stmdb	r3, {r0, r1, r2}
   20784:	2300      	movs	r3, #0
   20786:	f383 8811 	msr	BASEPRI, r3
   2078a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2078e:	b004      	add	sp, #16
   20790:	4770      	bx	lr

00020792 <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
   20792:	b4f0      	push	{r4, r5, r6, r7}
   20794:	4613      	mov	r3, r2
	struct gpio_driver_data *data =
   20796:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   20798:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2079a:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2079c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2079e:	bf48      	it	mi
   207a0:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   207a4:	2501      	movs	r5, #1
   207a6:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   207a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   207ac:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   207ae:	bf4c      	ite	mi
   207b0:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   207b2:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   207b4:	683b      	ldr	r3, [r7, #0]
   207b6:	6034      	str	r4, [r6, #0]
}
   207b8:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   207ba:	4718      	bx	r3

000207bc <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   207bc:	b530      	push	{r4, r5, lr}
   207be:	b085      	sub	sp, #20
   207c0:	4604      	mov	r4, r0
   207c2:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   207c4:	4668      	mov	r0, sp
   207c6:	2203      	movs	r2, #3
   207c8:	f7ff ffae 	bl	20728 <memcpy>
	(void)memset(res + 3, 0, 13);
   207cc:	220d      	movs	r2, #13
   207ce:	2100      	movs	r1, #0
   207d0:	f10d 0003 	add.w	r0, sp, #3
   207d4:	f7ff ffb3 	bl	2073e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   207d8:	4620      	mov	r0, r4
   207da:	466a      	mov	r2, sp
   207dc:	4669      	mov	r1, sp
   207de:	f7ec fff9 	bl	d7d4 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   207e2:	4604      	mov	r4, r0
   207e4:	b920      	cbnz	r0, 207f0 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   207e6:	2203      	movs	r2, #3
   207e8:	4669      	mov	r1, sp
   207ea:	4628      	mov	r0, r5
   207ec:	f7ff ff9c 	bl	20728 <memcpy>

	return 0;
}
   207f0:	4620      	mov	r0, r4
   207f2:	b005      	add	sp, #20
   207f4:	bd30      	pop	{r4, r5, pc}

000207f6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   207f6:	b513      	push	{r0, r1, r4, lr}
   207f8:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   207fa:	aa01      	add	r2, sp, #4
   207fc:	3103      	adds	r1, #3
   207fe:	f7ff ffdd 	bl	207bc <ah>
	if (err) {
   20802:	b948      	cbnz	r0, 20818 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   20804:	2203      	movs	r2, #3
   20806:	a901      	add	r1, sp, #4
   20808:	4620      	mov	r0, r4
   2080a:	f7ff ff7c 	bl	20706 <memcmp>
   2080e:	fab0 f080 	clz	r0, r0
   20812:	0940      	lsrs	r0, r0, #5
}
   20814:	b002      	add	sp, #8
   20816:	bd10      	pop	{r4, pc}
		return false;
   20818:	2000      	movs	r0, #0
   2081a:	e7fb      	b.n	20814 <bt_rpa_irk_matches+0x1e>

0002081c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2081c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2081e:	1cce      	adds	r6, r1, #3
{
   20820:	4605      	mov	r5, r0
   20822:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   20824:	4630      	mov	r0, r6
   20826:	2103      	movs	r1, #3
   20828:	f7ec ffd2 	bl	d7d0 <bt_rand>
	if (err) {
   2082c:	b960      	cbnz	r0, 20848 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2082e:	7963      	ldrb	r3, [r4, #5]
   20830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20838:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2083a:	4622      	mov	r2, r4
   2083c:	4631      	mov	r1, r6
   2083e:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   20840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   20844:	f7ff bfba 	b.w	207bc <ah>
}
   20848:	bd70      	pop	{r4, r5, r6, pc}

0002084a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2084a:	b510      	push	{r4, lr}
   2084c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2084e:	7801      	ldrb	r1, [r0, #0]
   20850:	7822      	ldrb	r2, [r4, #0]
   20852:	428a      	cmp	r2, r1
{
   20854:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20856:	d00f      	beq.n	20878 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   20858:	4669      	mov	r1, sp
   2085a:	f7e5 fdb5 	bl	63c8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2085e:	a905      	add	r1, sp, #20
   20860:	4620      	mov	r0, r4
   20862:	f7e5 fdb1 	bl	63c8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20866:	2210      	movs	r2, #16
   20868:	f10d 0115 	add.w	r1, sp, #21
   2086c:	f10d 0001 	add.w	r0, sp, #1
   20870:	f7ff ff49 	bl	20706 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   20874:	b00a      	add	sp, #40	; 0x28
   20876:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   20878:	2a01      	cmp	r2, #1
   2087a:	d006      	beq.n	2088a <bt_uuid_cmp+0x40>
   2087c:	2a02      	cmp	r2, #2
   2087e:	d007      	beq.n	20890 <bt_uuid_cmp+0x46>
   20880:	b972      	cbnz	r2, 208a0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20882:	8840      	ldrh	r0, [r0, #2]
   20884:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20886:	1ac0      	subs	r0, r0, r3
   20888:	e7f4      	b.n	20874 <bt_uuid_cmp+0x2a>
   2088a:	6840      	ldr	r0, [r0, #4]
   2088c:	6863      	ldr	r3, [r4, #4]
   2088e:	e7fa      	b.n	20886 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20890:	2210      	movs	r2, #16
   20892:	1c61      	adds	r1, r4, #1
   20894:	3001      	adds	r0, #1
}
   20896:	b00a      	add	sp, #40	; 0x28
   20898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2089c:	f7ff bf33 	b.w	20706 <memcmp>
	switch (u1->type) {
   208a0:	f06f 0015 	mvn.w	r0, #21
   208a4:	e7e6      	b.n	20874 <bt_uuid_cmp+0x2a>

000208a6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   208a6:	2a04      	cmp	r2, #4
{
   208a8:	b510      	push	{r4, lr}
	switch (data_len) {
   208aa:	d00a      	beq.n	208c2 <bt_uuid_create+0x1c>
   208ac:	2a10      	cmp	r2, #16
   208ae:	d00d      	beq.n	208cc <bt_uuid_create+0x26>
   208b0:	2a02      	cmp	r2, #2
   208b2:	f04f 0300 	mov.w	r3, #0
   208b6:	d10f      	bne.n	208d8 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   208b8:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   208ba:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   208bc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   208be:	2001      	movs	r0, #1
}
   208c0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   208c2:	2301      	movs	r3, #1
   208c4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   208c6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   208c8:	6042      	str	r2, [r0, #4]
		break;
   208ca:	e7f8      	b.n	208be <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   208cc:	2302      	movs	r3, #2
   208ce:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   208d2:	f7ff ff29 	bl	20728 <memcpy>
		break;
   208d6:	e7f2      	b.n	208be <bt_uuid_create+0x18>
	switch (data_len) {
   208d8:	4618      	mov	r0, r3
   208da:	e7f1      	b.n	208c0 <bt_uuid_create+0x1a>

000208dc <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   208dc:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   208de:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   208e0:	2106      	movs	r1, #6
{
   208e2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   208e4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   208e8:	f7ec ff72 	bl	d7d0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   208ec:	b918      	cbnz	r0, 208f6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   208ee:	79a3      	ldrb	r3, [r4, #6]
   208f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   208f4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   208f6:	bd10      	pop	{r4, pc}

000208f8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   208f8:	280f      	cmp	r0, #15
   208fa:	d806      	bhi.n	2090a <bt_hci_evt_get_flags+0x12>
   208fc:	280d      	cmp	r0, #13
   208fe:	d80b      	bhi.n	20918 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   20900:	2805      	cmp	r0, #5
   20902:	bf14      	ite	ne
   20904:	2002      	movne	r0, #2
   20906:	2003      	moveq	r0, #3
   20908:	4770      	bx	lr
	switch (evt) {
   2090a:	2813      	cmp	r0, #19
   2090c:	d004      	beq.n	20918 <bt_hci_evt_get_flags+0x20>
   2090e:	281a      	cmp	r0, #26
   20910:	bf14      	ite	ne
   20912:	2002      	movne	r0, #2
   20914:	2001      	moveq	r0, #1
   20916:	4770      	bx	lr
   20918:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2091a:	4770      	bx	lr

0002091c <handle_event>:
{
   2091c:	b410      	push	{r4}
   2091e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20922:	4604      	mov	r4, r0
   20924:	4608      	mov	r0, r1
		if (handler->event != event) {
   20926:	7811      	ldrb	r1, [r2, #0]
   20928:	42a1      	cmp	r1, r4
   2092a:	d004      	beq.n	20936 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   2092c:	3208      	adds	r2, #8
   2092e:	429a      	cmp	r2, r3
   20930:	d1f9      	bne.n	20926 <handle_event+0xa>
}
   20932:	bc10      	pop	{r4}
   20934:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   20936:	8981      	ldrh	r1, [r0, #12]
   20938:	7853      	ldrb	r3, [r2, #1]
   2093a:	4299      	cmp	r1, r3
   2093c:	d3f9      	bcc.n	20932 <handle_event+0x16>
		handler->handler(buf);
   2093e:	6853      	ldr	r3, [r2, #4]
}
   20940:	bc10      	pop	{r4}
		handler->handler(buf);
   20942:	4718      	bx	r3

00020944 <hci_data_buf_overflow>:
}
   20944:	4770      	bx	lr

00020946 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   20946:	2207      	movs	r2, #7
   20948:	f7ff beee 	b.w	20728 <memcpy>

0002094c <atomic_and>:
{
   2094c:	4603      	mov	r3, r0
}
   2094e:	f3bf 8f5b 	dmb	ish
   20952:	e853 0f00 	ldrex	r0, [r3]
   20956:	ea00 0201 	and.w	r2, r0, r1
   2095a:	e843 2c00 	strex	ip, r2, [r3]
   2095e:	f1bc 0f00 	cmp.w	ip, #0
   20962:	d1f6      	bne.n	20952 <atomic_and+0x6>
   20964:	f3bf 8f5b 	dmb	ish
   20968:	4770      	bx	lr

0002096a <atomic_or>:
{
   2096a:	4603      	mov	r3, r0
}
   2096c:	f3bf 8f5b 	dmb	ish
   20970:	e853 0f00 	ldrex	r0, [r3]
   20974:	ea40 0201 	orr.w	r2, r0, r1
   20978:	e843 2c00 	strex	ip, r2, [r3]
   2097c:	f1bc 0f00 	cmp.w	ip, #0
   20980:	d1f6      	bne.n	20970 <atomic_or+0x6>
   20982:	f3bf 8f5b 	dmb	ish
   20986:	4770      	bx	lr

00020988 <le_data_len_change>:
{
   20988:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2098a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2098c:	8818      	ldrh	r0, [r3, #0]
   2098e:	f7e7 fcfd 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   20992:	b118      	cbz	r0, 2099c <le_data_len_change+0x14>
}
   20994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20998:	f000 bcd9 	b.w	2134e <bt_conn_unref>
}
   2099c:	bd08      	pop	{r3, pc}

0002099e <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   2099e:	2101      	movs	r1, #1
   209a0:	3008      	adds	r0, #8
   209a2:	f002 bc27 	b.w	231f4 <net_buf_simple_pull_mem>

000209a6 <le_conn_update_complete>:
{
   209a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   209a8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   209aa:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   209ae:	f7e7 fced 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   209b2:	4604      	mov	r4, r0
   209b4:	2800      	cmp	r0, #0
   209b6:	d03c      	beq.n	20a32 <le_conn_update_complete+0x8c>
	if (!evt->status) {
   209b8:	782b      	ldrb	r3, [r5, #0]
   209ba:	b9cb      	cbnz	r3, 209f0 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   209bc:	792a      	ldrb	r2, [r5, #4]
   209be:	78eb      	ldrb	r3, [r5, #3]
   209c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   209c4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   209c8:	79aa      	ldrb	r2, [r5, #6]
   209ca:	796b      	ldrb	r3, [r5, #5]
   209cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   209d0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   209d4:	79eb      	ldrb	r3, [r5, #7]
   209d6:	7a2a      	ldrb	r2, [r5, #8]
   209d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   209dc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   209e0:	f7e7 fdd4 	bl	858c <notify_le_param_updated>
	bt_conn_unref(conn);
   209e4:	4620      	mov	r0, r4
}
   209e6:	b003      	add	sp, #12
   209e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   209ec:	f000 bcaf 	b.w	2134e <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   209f0:	2b1a      	cmp	r3, #26
   209f2:	d1f7      	bne.n	209e4 <le_conn_update_complete+0x3e>
   209f4:	78c3      	ldrb	r3, [r0, #3]
   209f6:	2b01      	cmp	r3, #1
   209f8:	d1f4      	bne.n	209e4 <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   209fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   209fe:	3004      	adds	r0, #4
   20a00:	f7ff ffb3 	bl	2096a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   20a04:	0543      	lsls	r3, r0, #21
   20a06:	d4ed      	bmi.n	209e4 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   20a08:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   20a0c:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   20a10:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   20a14:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   20a18:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   20a1c:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   20a20:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   20a22:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   20a26:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   20a2a:	4620      	mov	r0, r4
   20a2c:	f7e8 f87a 	bl	8b24 <bt_l2cap_update_conn_param>
   20a30:	e7d8      	b.n	209e4 <le_conn_update_complete+0x3e>
}
   20a32:	b003      	add	sp, #12
   20a34:	bd30      	pop	{r4, r5, pc}

00020a36 <hci_vendor_event>:
   20a36:	4770      	bx	lr

00020a38 <hci_num_completed_packets>:
{
   20a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   20a3c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   20a3e:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   20a40:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   20a42:	783b      	ldrb	r3, [r7, #0]
   20a44:	429d      	cmp	r5, r3
   20a46:	db01      	blt.n	20a4c <hci_num_completed_packets+0x14>
}
   20a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   20a4c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   20a50:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   20a54:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   20a58:	f7e7 fc98 	bl	838c <bt_conn_lookup_handle>
		if (!conn) {
   20a5c:	4604      	mov	r4, r0
   20a5e:	b350      	cbz	r0, 20ab6 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   20a60:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   20a64:	b326      	cbz	r6, 20ab0 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   20a66:	f04f 0320 	mov.w	r3, #32
   20a6a:	f3ef 8211 	mrs	r2, BASEPRI
   20a6e:	f383 8812 	msr	BASEPRI_MAX, r3
   20a72:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   20a76:	69e3      	ldr	r3, [r4, #28]
   20a78:	b16b      	cbz	r3, 20a96 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   20a7a:	3b01      	subs	r3, #1
   20a7c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   20a7e:	f382 8811 	msr	BASEPRI, r2
   20a82:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   20a86:	4620      	mov	r0, r4
   20a88:	f7e7 fbd6 	bl	8238 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   20a8c:	3e01      	subs	r6, #1
   20a8e:	f7fd fd45 	bl	1e51c <z_impl_k_sem_give>
   20a92:	b2b6      	uxth	r6, r6
   20a94:	e7e6      	b.n	20a64 <hci_num_completed_packets+0x2c>
	return list->head;
   20a96:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   20a98:	b12b      	cbz	r3, 20aa6 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a9a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   20a9c:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   20a9e:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20aa0:	428b      	cmp	r3, r1
	list->tail = node;
   20aa2:	bf08      	it	eq
   20aa4:	61a0      	streq	r0, [r4, #24]
   20aa6:	f382 8811 	msr	BASEPRI, r2
   20aaa:	f3bf 8f6f 	isb	sy
			if (!node) {
   20aae:	b923      	cbnz	r3, 20aba <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   20ab0:	4620      	mov	r0, r4
   20ab2:	f000 fc4c 	bl	2134e <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   20ab6:	3501      	adds	r5, #1
   20ab8:	e7c3      	b.n	20a42 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   20aba:	f04f 0220 	mov.w	r2, #32
   20abe:	f3ef 8111 	mrs	r1, BASEPRI
   20ac2:	f382 8812 	msr	BASEPRI_MAX, r2
   20ac6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   20aca:	68da      	ldr	r2, [r3, #12]
   20acc:	61e2      	str	r2, [r4, #28]
	return list->tail;
   20ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   20ad0:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   20ad4:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   20ad8:	b94a      	cbnz	r2, 20aee <hci_num_completed_packets+0xb6>
	list->head = node;
   20ada:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   20ade:	f381 8811 	msr	BASEPRI, r1
   20ae2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   20ae6:	4648      	mov	r0, r9
   20ae8:	f7fd fe84 	bl	1e7f4 <k_work_submit>
   20aec:	e7cb      	b.n	20a86 <hci_num_completed_packets+0x4e>
	parent->next = child;
   20aee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20af0:	6263      	str	r3, [r4, #36]	; 0x24
}
   20af2:	e7f4      	b.n	20ade <hci_num_completed_packets+0xa6>

00020af4 <hci_disconn_complete>:
{
   20af4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20af6:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   20af8:	7835      	ldrb	r5, [r6, #0]
   20afa:	bb0d      	cbnz	r5, 20b40 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   20afc:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   20b00:	f7e7 fc44 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   20b04:	4604      	mov	r4, r0
   20b06:	b1d8      	cbz	r0, 20b40 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   20b08:	78f3      	ldrb	r3, [r6, #3]
   20b0a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20b0c:	4629      	mov	r1, r5
   20b0e:	f7e7 fc45 	bl	839c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   20b12:	78a3      	ldrb	r3, [r4, #2]
   20b14:	2b01      	cmp	r3, #1
   20b16:	d004      	beq.n	20b22 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   20b18:	4620      	mov	r0, r4
}
   20b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   20b1e:	f000 bc16 	b.w	2134e <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b22:	f3bf 8f5b 	dmb	ish
   20b26:	6863      	ldr	r3, [r4, #4]
   20b28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   20b2c:	07db      	lsls	r3, r3, #31
   20b2e:	d5f3      	bpl.n	20b18 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   20b30:	4620      	mov	r0, r4
   20b32:	2102      	movs	r1, #2
   20b34:	f7e7 fc32 	bl	839c <bt_conn_set_state>
		bt_le_scan_update(false);
   20b38:	4628      	mov	r0, r5
   20b3a:	f7e7 f99f 	bl	7e7c <bt_le_scan_update>
   20b3e:	e7eb      	b.n	20b18 <hci_disconn_complete+0x24>
}
   20b40:	bd70      	pop	{r4, r5, r6, pc}

00020b42 <hci_le_read_max_data_len>:
{
   20b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20b44:	4606      	mov	r6, r0
   20b46:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   20b48:	aa01      	add	r2, sp, #4
   20b4a:	2100      	movs	r1, #0
   20b4c:	f242 002f 	movw	r0, #8239	; 0x202f
   20b50:	f7e5 fde8 	bl	6724 <bt_hci_cmd_send_sync>
	if (err) {
   20b54:	4604      	mov	r4, r0
   20b56:	b948      	cbnz	r0, 20b6c <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   20b58:	9801      	ldr	r0, [sp, #4]
   20b5a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   20b5c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20b60:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   20b62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   20b66:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   20b68:	f7f9 faaa 	bl	1a0c0 <net_buf_unref>
}
   20b6c:	4620      	mov	r0, r4
   20b6e:	b002      	add	sp, #8
   20b70:	bd70      	pop	{r4, r5, r6, pc}

00020b72 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   20b72:	f7e5 be39 	b.w	67e8 <bt_le_create_conn_legacy>

00020b76 <bt_hci_disconnect>:
{
   20b76:	b570      	push	{r4, r5, r6, lr}
   20b78:	4606      	mov	r6, r0
   20b7a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20b7c:	f240 4006 	movw	r0, #1030	; 0x406
   20b80:	2103      	movs	r1, #3
   20b82:	f7e5 fd95 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20b86:	4604      	mov	r4, r0
   20b88:	b168      	cbz	r0, 20ba6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   20b8a:	2103      	movs	r1, #3
   20b8c:	3008      	adds	r0, #8
   20b8e:	f002 fb00 	bl	23192 <net_buf_simple_add>
	disconn->reason = reason;
   20b92:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20b94:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20b96:	4621      	mov	r1, r4
   20b98:	2200      	movs	r2, #0
}
   20b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20b9e:	f240 4006 	movw	r0, #1030	; 0x406
   20ba2:	f7e5 bdbf 	b.w	6724 <bt_hci_cmd_send_sync>
}
   20ba6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20baa:	bd70      	pop	{r4, r5, r6, pc}

00020bac <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20bac:	8803      	ldrh	r3, [r0, #0]
   20bae:	8842      	ldrh	r2, [r0, #2]
   20bb0:	4293      	cmp	r3, r2
{
   20bb2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20bb4:	d819      	bhi.n	20bea <bt_le_conn_params_valid+0x3e>
   20bb6:	2b05      	cmp	r3, #5
   20bb8:	d917      	bls.n	20bea <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20bba:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   20bbe:	d814      	bhi.n	20bea <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   20bc0:	8883      	ldrh	r3, [r0, #4]
   20bc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   20bc6:	d210      	bcs.n	20bea <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20bc8:	88c0      	ldrh	r0, [r0, #6]
   20bca:	f1a0 010a 	sub.w	r1, r0, #10
   20bce:	b289      	uxth	r1, r1
   20bd0:	f640 4476 	movw	r4, #3190	; 0xc76
   20bd4:	42a1      	cmp	r1, r4
   20bd6:	d808      	bhi.n	20bea <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   20bd8:	3301      	adds	r3, #1
   20bda:	b29b      	uxth	r3, r3
   20bdc:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   20bde:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20be2:	bf34      	ite	cc
   20be4:	2001      	movcc	r0, #1
   20be6:	2000      	movcs	r0, #0
}
   20be8:	bd10      	pop	{r4, pc}
		return false;
   20bea:	2000      	movs	r0, #0
   20bec:	e7fc      	b.n	20be8 <bt_le_conn_params_valid+0x3c>

00020bee <bt_le_set_data_len>:
{
   20bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20bf0:	4607      	mov	r7, r0
   20bf2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20bf4:	f242 0022 	movw	r0, #8226	; 0x2022
   20bf8:	2106      	movs	r1, #6
{
   20bfa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20bfc:	f7e5 fd58 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20c00:	4604      	mov	r4, r0
   20c02:	b170      	cbz	r0, 20c22 <bt_le_set_data_len+0x34>
   20c04:	2106      	movs	r1, #6
   20c06:	3008      	adds	r0, #8
   20c08:	f002 fac3 	bl	23192 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c0c:	883b      	ldrh	r3, [r7, #0]
   20c0e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20c10:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20c12:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20c14:	4621      	mov	r1, r4
   20c16:	f242 0022 	movw	r0, #8226	; 0x2022
}
   20c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20c1e:	f7e5 be55 	b.w	68cc <bt_hci_cmd_send>
}
   20c22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020c28 <bt_le_set_phy>:
{
   20c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c2c:	4680      	mov	r8, r0
   20c2e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20c30:	f242 0032 	movw	r0, #8242	; 0x2032
   20c34:	2107      	movs	r1, #7
{
   20c36:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20c3a:	4616      	mov	r6, r2
   20c3c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20c3e:	f7e5 fd37 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20c42:	4604      	mov	r4, r0
   20c44:	b190      	cbz	r0, 20c6c <bt_le_set_phy+0x44>
   20c46:	2107      	movs	r1, #7
   20c48:	3008      	adds	r0, #8
   20c4a:	f002 faa2 	bl	23192 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c4e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20c52:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20c54:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20c56:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c58:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20c5a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20c5e:	4621      	mov	r1, r4
   20c60:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20c64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20c68:	f7e5 be30 	b.w	68cc <bt_hci_cmd_send>
}
   20c6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020c74 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   20c74:	6880      	ldr	r0, [r0, #8]
   20c76:	f7e5 bead 	b.w	69d4 <bt_hci_le_enh_conn_complete>

00020c7a <le_legacy_conn_complete>:
{
   20c7a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20c7c:	6881      	ldr	r1, [r0, #8]
{
   20c7e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   20c80:	780b      	ldrb	r3, [r1, #0]
   20c82:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20c86:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   20c8a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20c8e:	78cb      	ldrb	r3, [r1, #3]
   20c90:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20c94:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   20c98:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   20c9c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20ca0:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20ca4:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   20ca8:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   20cac:	7c4b      	ldrb	r3, [r1, #17]
   20cae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20cb2:	a803      	add	r0, sp, #12
   20cb4:	3104      	adds	r1, #4
   20cb6:	f7ff fe46 	bl	20946 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   20cba:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   20cbc:	4669      	mov	r1, sp
   20cbe:	2206      	movs	r2, #6
   20cc0:	f10d 0013 	add.w	r0, sp, #19
   20cc4:	9400      	str	r4, [sp, #0]
   20cc6:	f8ad 4004 	strh.w	r4, [sp, #4]
   20cca:	f7ff fd2d 	bl	20728 <memcpy>
   20cce:	2206      	movs	r2, #6
   20cd0:	4669      	mov	r1, sp
   20cd2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20cd6:	9400      	str	r4, [sp, #0]
   20cd8:	f8ad 4004 	strh.w	r4, [sp, #4]
   20cdc:	f7ff fd24 	bl	20728 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   20ce0:	a802      	add	r0, sp, #8
   20ce2:	f7e5 fe77 	bl	69d4 <bt_hci_le_enh_conn_complete>
}
   20ce6:	b00a      	add	sp, #40	; 0x28
   20ce8:	bd10      	pop	{r4, pc}

00020cea <le_phy_update_complete>:
{
   20cea:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20cec:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20cee:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20cf2:	f7e7 fb4b 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   20cf6:	4604      	mov	r4, r0
   20cf8:	b1a0      	cbz	r0, 20d24 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   20cfa:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20cfc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   20d00:	4628      	mov	r0, r5
   20d02:	f7ff fe23 	bl	2094c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   20d06:	0603      	lsls	r3, r0, #24
   20d08:	d507      	bpl.n	20d1a <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   20d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   20d0e:	4628      	mov	r0, r5
   20d10:	f7ff fe2b 	bl	2096a <atomic_or>
		conn_auto_initiate(conn);
   20d14:	4620      	mov	r0, r4
   20d16:	f7e5 fdfb 	bl	6910 <conn_auto_initiate>
	bt_conn_unref(conn);
   20d1a:	4620      	mov	r0, r4
}
   20d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   20d20:	f000 bb15 	b.w	2134e <bt_conn_unref>
}
   20d24:	bd38      	pop	{r3, r4, r5, pc}

00020d26 <le_remote_feat_complete>:
{
   20d26:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   20d28:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20d2a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20d2e:	f7e7 fb2d 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   20d32:	4604      	mov	r4, r0
   20d34:	b198      	cbz	r0, 20d5e <le_remote_feat_complete+0x38>
	if (!evt->status) {
   20d36:	782b      	ldrb	r3, [r5, #0]
   20d38:	b923      	cbnz	r3, 20d44 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   20d3a:	2208      	movs	r2, #8
   20d3c:	1ce9      	adds	r1, r5, #3
   20d3e:	30ac      	adds	r0, #172	; 0xac
   20d40:	f7ff fcf2 	bl	20728 <memcpy>
   20d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   20d48:	1d20      	adds	r0, r4, #4
   20d4a:	f7ff fe0e 	bl	2096a <atomic_or>
	conn_auto_initiate(conn);
   20d4e:	4620      	mov	r0, r4
   20d50:	f7e5 fdde 	bl	6910 <conn_auto_initiate>
	bt_conn_unref(conn);
   20d54:	4620      	mov	r0, r4
}
   20d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   20d5a:	f000 baf8 	b.w	2134e <bt_conn_unref>
}
   20d5e:	bd38      	pop	{r3, r4, r5, pc}

00020d60 <le_conn_param_neg_reply>:
{
   20d60:	b570      	push	{r4, r5, r6, lr}
   20d62:	4606      	mov	r6, r0
   20d64:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   20d66:	f242 0021 	movw	r0, #8225	; 0x2021
   20d6a:	2103      	movs	r1, #3
   20d6c:	f7e5 fca0 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20d70:	4604      	mov	r4, r0
   20d72:	b160      	cbz	r0, 20d8e <le_conn_param_neg_reply+0x2e>
   20d74:	2103      	movs	r1, #3
   20d76:	3008      	adds	r0, #8
   20d78:	f002 fa0b 	bl	23192 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   20d7c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   20d7e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20d80:	4621      	mov	r1, r4
   20d82:	f242 0021 	movw	r0, #8225	; 0x2021
}
   20d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20d8a:	f7e5 bd9f 	b.w	68cc <bt_hci_cmd_send>
}
   20d8e:	bd70      	pop	{r4, r5, r6, pc}

00020d90 <le_conn_param_req>:
{
   20d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   20d92:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20d94:	78d9      	ldrb	r1, [r3, #3]
   20d96:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   20d98:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20d9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20d9e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   20da2:	7959      	ldrb	r1, [r3, #5]
   20da4:	791a      	ldrb	r2, [r3, #4]
   20da6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20daa:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20dae:	799a      	ldrb	r2, [r3, #6]
   20db0:	79d9      	ldrb	r1, [r3, #7]
   20db2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20db6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20dba:	7a1a      	ldrb	r2, [r3, #8]
   20dbc:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20dbe:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20dc0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   20dc4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20dc6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20dca:	f7e7 fadf 	bl	838c <bt_conn_lookup_handle>
	if (!conn) {
   20dce:	4606      	mov	r6, r0
   20dd0:	b928      	cbnz	r0, 20dde <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20dd2:	2102      	movs	r1, #2
   20dd4:	4620      	mov	r0, r4
   20dd6:	f7ff ffc3 	bl	20d60 <le_conn_param_neg_reply>
}
   20dda:	b003      	add	sp, #12
   20ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20dde:	4669      	mov	r1, sp
   20de0:	f7e7 fc1c 	bl	861c <le_param_req>
   20de4:	b938      	cbnz	r0, 20df6 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20de6:	211e      	movs	r1, #30
   20de8:	4620      	mov	r0, r4
   20dea:	f7ff ffb9 	bl	20d60 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20dee:	4630      	mov	r0, r6
   20df0:	f000 faad 	bl	2134e <bt_conn_unref>
   20df4:	e7f1      	b.n	20dda <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20df6:	210e      	movs	r1, #14
   20df8:	f242 0020 	movw	r0, #8224	; 0x2020
   20dfc:	f7e5 fc58 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20e00:	4605      	mov	r5, r0
   20e02:	2800      	cmp	r0, #0
   20e04:	d0f3      	beq.n	20dee <le_conn_param_req+0x5e>
   20e06:	210e      	movs	r1, #14
   20e08:	3008      	adds	r0, #8
   20e0a:	f002 f9c2 	bl	23192 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   20e0e:	220e      	movs	r2, #14
   20e10:	4604      	mov	r4, r0
   20e12:	2100      	movs	r1, #0
   20e14:	f7ff fc93 	bl	2073e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20e18:	f8bd 3000 	ldrh.w	r3, [sp]
   20e1c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20e1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20e22:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20e24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20e28:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20e2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   20e2e:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20e30:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20e32:	4629      	mov	r1, r5
   20e34:	f242 0020 	movw	r0, #8224	; 0x2020
   20e38:	f7e5 fd48 	bl	68cc <bt_hci_cmd_send>
   20e3c:	e7d7      	b.n	20dee <le_conn_param_req+0x5e>

00020e3e <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20e3e:	2000      	movs	r0, #0
   20e40:	4770      	bx	lr

00020e42 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   20e42:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   20e48:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e4e:	2100      	movs	r1, #0
{
   20e50:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20e52:	f7e5 fb19 	bl	6488 <bt_buf_get_evt>
   20e56:	2102      	movs	r1, #2
   20e58:	4604      	mov	r4, r0
   20e5a:	3008      	adds	r0, #8
   20e5c:	f002 f999 	bl	23192 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   20e60:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   20e62:	7045      	strb	r5, [r0, #1]

	return buf;
}
   20e64:	4620      	mov	r0, r4
   20e66:	bd70      	pop	{r4, r5, r6, pc}

00020e68 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20e68:	3103      	adds	r1, #3
{
   20e6a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20e6c:	b2c9      	uxtb	r1, r1
{
   20e6e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20e70:	200e      	movs	r0, #14
   20e72:	f7ff ffe6 	bl	20e42 <bt_hci_evt_create>
   20e76:	2103      	movs	r1, #3
   20e78:	4604      	mov	r4, r0
   20e7a:	3008      	adds	r0, #8
   20e7c:	f002 f989 	bl	23192 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   20e80:	2301      	movs	r3, #1
   20e82:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   20e84:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   20e88:	4620      	mov	r0, r4
   20e8a:	bd38      	pop	{r3, r4, r5, pc}

00020e8c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   20e8c:	b570      	push	{r4, r5, r6, lr}
   20e8e:	4605      	mov	r5, r0
   20e90:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   20e92:	200f      	movs	r0, #15
   20e94:	2104      	movs	r1, #4
   20e96:	f7ff ffd4 	bl	20e42 <bt_hci_evt_create>
   20e9a:	2104      	movs	r1, #4
   20e9c:	4604      	mov	r4, r0
   20e9e:	3008      	adds	r0, #8
   20ea0:	f002 f977 	bl	23192 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   20ea4:	2201      	movs	r2, #1
	cs->status = status;
   20ea6:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   20ea8:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   20eaa:	8045      	strh	r5, [r0, #2]

	return buf;
}
   20eac:	4620      	mov	r0, r4
   20eae:	bd70      	pop	{r4, r5, r6, pc}

00020eb0 <atomic_get>:
   20eb0:	f3bf 8f5b 	dmb	ish
   20eb4:	6800      	ldr	r0, [r0, #0]
   20eb6:	f3bf 8f5b 	dmb	ish
}
   20eba:	4770      	bx	lr

00020ebc <is_adv_using_rand_addr>:
{
   20ebc:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   20ebe:	f7e6 fd4d 	bl	795c <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   20ec2:	b120      	cbz	r0, 20ece <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   20ec4:	3010      	adds	r0, #16
   20ec6:	f7ff fff3 	bl	20eb0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20eca:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   20ece:	bd08      	pop	{r3, pc}

00020ed0 <bt_lookup_id_addr>:
}
   20ed0:	4608      	mov	r0, r1
   20ed2:	4770      	bx	lr

00020ed4 <bt_id_set_private_addr>:
{
   20ed4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20ed6:	2106      	movs	r1, #6
   20ed8:	4668      	mov	r0, sp
   20eda:	f7ec fc79 	bl	d7d0 <bt_rand>
	if (err) {
   20ede:	b940      	cbnz	r0, 20ef2 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20ee0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   20ee4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20eea:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   20eee:	f7e6 fa9d 	bl	742c <set_random_address>
}
   20ef2:	b003      	add	sp, #12
   20ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00020ef8 <bt_id_set_adv_private_addr>:
{
   20ef8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20efa:	2106      	movs	r1, #6
   20efc:	4668      	mov	r0, sp
   20efe:	f7ec fc67 	bl	d7d0 <bt_rand>
	if (err) {
   20f02:	b940      	cbnz	r0, 20f16 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20f04:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20f08:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20f0e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20f12:	f7e6 fa8b 	bl	742c <set_random_address>
}
   20f16:	b003      	add	sp, #12
   20f18:	f85d fb04 	ldr.w	pc, [sp], #4

00020f1c <get_adv_channel_map>:
{
   20f1c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20f1e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20f22:	bf0c      	ite	eq
   20f24:	2007      	moveq	r0, #7
   20f26:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20f28:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20f2a:	bf48      	it	mi
   20f2c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20f30:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20f32:	bf48      	it	mi
   20f34:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20f38:	4770      	bx	lr

00020f3a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f3a:	f3bf 8f5b 	dmb	ish
   20f3e:	6800      	ldr	r0, [r0, #0]
   20f40:	f3bf 8f5b 	dmb	ish
}
   20f44:	4770      	bx	lr

00020f46 <atomic_and>:
{
   20f46:	4603      	mov	r3, r0
}
   20f48:	f3bf 8f5b 	dmb	ish
   20f4c:	e853 0f00 	ldrex	r0, [r3]
   20f50:	ea00 0201 	and.w	r2, r0, r1
   20f54:	e843 2c00 	strex	ip, r2, [r3]
   20f58:	f1bc 0f00 	cmp.w	ip, #0
   20f5c:	d1f6      	bne.n	20f4c <atomic_and+0x6>
   20f5e:	f3bf 8f5b 	dmb	ish
   20f62:	4770      	bx	lr

00020f64 <hci_set_ad>:
{
   20f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f68:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20f6a:	2120      	movs	r1, #32
{
   20f6c:	4682      	mov	sl, r0
   20f6e:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20f70:	f7e5 fb9e 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   20f74:	4605      	mov	r5, r0
   20f76:	2800      	cmp	r0, #0
   20f78:	d04a      	beq.n	21010 <hci_set_ad+0xac>
   20f7a:	2120      	movs	r1, #32
   20f7c:	3008      	adds	r0, #8
   20f7e:	f002 f908 	bl	23192 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   20f82:	2220      	movs	r2, #32
   20f84:	2100      	movs	r1, #0
   20f86:	4681      	mov	r9, r0
   20f88:	f7ff fbd9 	bl	2073e <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   20f8c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   20f90:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   20f94:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   20f96:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   20f98:	f8d4 8000 	ldr.w	r8, [r4]
   20f9c:	2300      	movs	r3, #0
   20f9e:	6862      	ldr	r2, [r4, #4]
   20fa0:	4293      	cmp	r3, r2
   20fa2:	d30d      	bcc.n	20fc0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   20fa4:	9b00      	ldr	r3, [sp, #0]
   20fa6:	3408      	adds	r4, #8
   20fa8:	42a3      	cmp	r3, r4
   20faa:	d1f5      	bne.n	20f98 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20fac:	2200      	movs	r2, #0
   20fae:	4629      	mov	r1, r5
   20fb0:	4650      	mov	r0, sl
	*data_len = set_data_len;
   20fb2:	f889 6000 	strb.w	r6, [r9]
}
   20fb6:	b003      	add	sp, #12
   20fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20fbc:	f7e5 bbb2 	b.w	6724 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   20fc0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   20fc4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   20fc8:	1cb0      	adds	r0, r6, #2
   20fca:	1811      	adds	r1, r2, r0
   20fcc:	291f      	cmp	r1, #31
   20fce:	d908      	bls.n	20fe2 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20fd0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   20fd4:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20fd8:	d11f      	bne.n	2101a <hci_set_ad+0xb6>
   20fda:	2a00      	cmp	r2, #0
   20fdc:	dd1d      	ble.n	2101a <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   20fde:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20fe2:	b2d7      	uxtb	r7, r2
   20fe4:	1c79      	adds	r1, r7, #1
   20fe6:	f80b 1006 	strb.w	r1, [fp, r6]
   20fea:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   20fec:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   20fee:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   20ff2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   20ff6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20ffa:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   20ffc:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   20ffe:	f7ff fb93 	bl	20728 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   21002:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   21004:	443e      	add	r6, r7
   21006:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   21008:	3301      	adds	r3, #1
   2100a:	f108 0808 	add.w	r8, r8, #8
   2100e:	e7c6      	b.n	20f9e <hci_set_ad+0x3a>
		return -ENOBUFS;
   21010:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   21014:	b003      	add	sp, #12
   21016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   2101a:	4628      	mov	r0, r5
   2101c:	f7f9 f850 	bl	1a0c0 <net_buf_unref>
		return err;
   21020:	f06f 0015 	mvn.w	r0, #21
   21024:	e7f6      	b.n	21014 <hci_set_ad+0xb0>

00021026 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21026:	2301      	movs	r3, #1
{
   21028:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2102a:	fa03 f101 	lsl.w	r1, r3, r1
{
   2102e:	4604      	mov	r4, r0
	if (val) {
   21030:	b162      	cbz	r2, 2104c <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21032:	f3bf 8f5b 	dmb	ish
   21036:	e854 3f00 	ldrex	r3, [r4]
   2103a:	430b      	orrs	r3, r1
   2103c:	e844 3200 	strex	r2, r3, [r4]
   21040:	2a00      	cmp	r2, #0
   21042:	d1f8      	bne.n	21036 <atomic_set_bit_to+0x10>
   21044:	f3bf 8f5b 	dmb	ish
	}
}
   21048:	bc10      	pop	{r4}
   2104a:	4770      	bx	lr
   2104c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2104e:	43c9      	mvns	r1, r1
   21050:	f7ff bf79 	b.w	20f46 <atomic_and>

00021054 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   21054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21058:	b087      	sub	sp, #28
   2105a:	4605      	mov	r5, r0
   2105c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   21060:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   21064:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   21068:	460c      	mov	r4, r1
   2106a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2106c:	2100      	movs	r1, #0
   2106e:	2210      	movs	r2, #16
   21070:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   21072:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   21074:	f7ff fb63 	bl	2073e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   21078:	b186      	cbz	r6, 2109c <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2107a:	f7e6 f9b9 	bl	73f0 <bt_get_name>
   2107e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   21080:	2c00      	cmp	r4, #0
   21082:	d139      	bne.n	210f8 <le_adv_update.constprop.0+0xa4>
   21084:	2f00      	cmp	r7, #0
   21086:	d142      	bne.n	2110e <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   21088:	4658      	mov	r0, fp
   2108a:	f7ff fb20 	bl	206ce <strlen>
   2108e:	2309      	movs	r3, #9
   21090:	f88d 3000 	strb.w	r3, [sp]
   21094:	f88d 0001 	strb.w	r0, [sp, #1]
   21098:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2109c:	2e01      	cmp	r6, #1
			d_len = 2;
   2109e:	bf0c      	ite	eq
   210a0:	2202      	moveq	r2, #2
		d_len = 1;
   210a2:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   210a4:	a902      	add	r1, sp, #8
   210a6:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   210aa:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   210ae:	bf04      	itt	eq
   210b0:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   210b4:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   210b6:	f7ff ff55 	bl	20f64 <hci_set_ad>
		if (err) {
   210ba:	4604      	mov	r4, r0
   210bc:	b978      	cbnz	r0, 210de <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   210be:	f1ba 0f00 	cmp.w	sl, #0
   210c2:	d126      	bne.n	21112 <le_adv_update.constprop.0+0xbe>
   210c4:	3510      	adds	r5, #16
   210c6:	f3bf 8f5b 	dmb	ish
   210ca:	e855 3f00 	ldrex	r3, [r5]
   210ce:	f043 0304 	orr.w	r3, r3, #4
   210d2:	e845 3200 	strex	r2, r3, [r5]
   210d6:	2a00      	cmp	r2, #0
   210d8:	d1f7      	bne.n	210ca <le_adv_update.constprop.0+0x76>
   210da:	f3bf 8f5b 	dmb	ish
}
   210de:	4620      	mov	r0, r4
   210e0:	b007      	add	sp, #28
   210e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   210e6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   210ea:	3a08      	subs	r2, #8
   210ec:	2a01      	cmp	r2, #1
   210ee:	d925      	bls.n	2113c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   210f0:	3301      	adds	r3, #1
   210f2:	4598      	cmp	r8, r3
   210f4:	d1f7      	bne.n	210e6 <le_adv_update.constprop.0+0x92>
   210f6:	e7c5      	b.n	21084 <le_adv_update.constprop.0+0x30>
   210f8:	2300      	movs	r3, #0
   210fa:	e7fa      	b.n	210f2 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   210fc:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   21100:	3a08      	subs	r2, #8
   21102:	2a01      	cmp	r2, #1
   21104:	d91a      	bls.n	2113c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   21106:	3301      	adds	r3, #1
   21108:	4599      	cmp	r9, r3
   2110a:	d1f7      	bne.n	210fc <le_adv_update.constprop.0+0xa8>
   2110c:	e7bc      	b.n	21088 <le_adv_update.constprop.0+0x34>
   2110e:	2300      	movs	r3, #0
   21110:	e7fa      	b.n	21108 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   21112:	2e02      	cmp	r6, #2
   21114:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   21118:	bf08      	it	eq
   2111a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2111c:	a902      	add	r1, sp, #8
			d_len = 2;
   2111e:	bf08      	it	eq
   21120:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   21122:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   21126:	bf08      	it	eq
   21128:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2112c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   21130:	f7ff ff18 	bl	20f64 <hci_set_ad>
		if (err) {
   21134:	2800      	cmp	r0, #0
   21136:	d0c5      	beq.n	210c4 <le_adv_update.constprop.0+0x70>
   21138:	4604      	mov	r4, r0
   2113a:	e7d0      	b.n	210de <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2113c:	f06f 0415 	mvn.w	r4, #21
   21140:	e7cd      	b.n	210de <le_adv_update.constprop.0+0x8a>

00021142 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   21142:	6843      	ldr	r3, [r0, #4]
   21144:	f013 0008 	ands.w	r0, r3, #8
   21148:	d00a      	beq.n	21160 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2114a:	035a      	lsls	r2, r3, #13
   2114c:	d407      	bmi.n	2115e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2114e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   21152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21156:	bf0c      	ite	eq
   21158:	2001      	moveq	r0, #1
   2115a:	2002      	movne	r0, #2
   2115c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2115e:	2001      	movs	r0, #1
}
   21160:	4770      	bx	lr

00021162 <bt_le_adv_set_enable_legacy>:
{
   21162:	b570      	push	{r4, r5, r6, lr}
   21164:	4606      	mov	r6, r0
   21166:	b086      	sub	sp, #24
   21168:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2116a:	f242 000a 	movw	r0, #8202	; 0x200a
   2116e:	2101      	movs	r1, #1
   21170:	f7e5 fa9e 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   21174:	4604      	mov	r4, r0
   21176:	b1b0      	cbz	r0, 211a6 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   21178:	3008      	adds	r0, #8
	if (enable) {
   2117a:	b195      	cbz	r5, 211a2 <bt_le_adv_set_enable_legacy+0x40>
   2117c:	2101      	movs	r1, #1
   2117e:	f002 f817 	bl	231b0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   21182:	f106 0210 	add.w	r2, r6, #16
   21186:	a903      	add	r1, sp, #12
   21188:	4620      	mov	r0, r4
   2118a:	9500      	str	r5, [sp, #0]
   2118c:	2306      	movs	r3, #6
   2118e:	f7e5 fa7d 	bl	668c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   21192:	2200      	movs	r2, #0
   21194:	4621      	mov	r1, r4
   21196:	f242 000a 	movw	r0, #8202	; 0x200a
   2119a:	f7e5 fac3 	bl	6724 <bt_hci_cmd_send_sync>
}
   2119e:	b006      	add	sp, #24
   211a0:	bd70      	pop	{r4, r5, r6, pc}
   211a2:	4629      	mov	r1, r5
   211a4:	e7eb      	b.n	2117e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   211a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   211aa:	e7f8      	b.n	2119e <bt_le_adv_set_enable_legacy+0x3c>

000211ac <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   211ac:	3018      	adds	r0, #24
   211ae:	f003 b82e 	b.w	2420e <k_work_cancel_delayable>

000211b2 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   211b2:	f7e6 bd2f 	b.w	7c14 <bt_le_adv_stop>

000211b6 <atomic_and>:
{
   211b6:	4603      	mov	r3, r0
}
   211b8:	f3bf 8f5b 	dmb	ish
   211bc:	e853 0f00 	ldrex	r0, [r3]
   211c0:	ea00 0201 	and.w	r2, r0, r1
   211c4:	e843 2c00 	strex	ip, r2, [r3]
   211c8:	f1bc 0f00 	cmp.w	ip, #0
   211cc:	d1f6      	bne.n	211bc <atomic_and+0x6>
   211ce:	f3bf 8f5b 	dmb	ish
   211d2:	4770      	bx	lr

000211d4 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   211d4:	f7e6 bdc8 	b.w	7d68 <bt_le_scan_set_enable_legacy>

000211d8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   211d8:	f3bf 8f5b 	dmb	ish
   211dc:	6800      	ldr	r0, [r0, #0]
   211de:	f3bf 8f5b 	dmb	ish
}
   211e2:	4770      	bx	lr

000211e4 <tx_notify>:
{
   211e4:	b570      	push	{r4, r5, r6, lr}
   211e6:	4604      	mov	r4, r0
	__asm__ volatile(
   211e8:	f04f 0220 	mov.w	r2, #32
   211ec:	f3ef 8311 	mrs	r3, BASEPRI
   211f0:	f382 8812 	msr	BASEPRI_MAX, r2
   211f4:	f3bf 8f6f 	isb	sy
	return list->head;
   211f8:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   211fa:	b920      	cbnz	r0, 21206 <tx_notify+0x22>
	__asm__ volatile(
   211fc:	f383 8811 	msr	BASEPRI, r3
   21200:	f3bf 8f6f 	isb	sy
}
   21204:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21206:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   21208:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2120a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2120c:	4288      	cmp	r0, r1
	list->tail = node;
   2120e:	bf08      	it	eq
   21210:	6262      	streq	r2, [r4, #36]	; 0x24
   21212:	f383 8811 	msr	BASEPRI, r3
   21216:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2121a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2121e:	f7e6 ff55 	bl	80cc <tx_free>
		cb(conn, user_data);
   21222:	4631      	mov	r1, r6
   21224:	4620      	mov	r0, r4
   21226:	47a8      	blx	r5
	while (1) {
   21228:	e7de      	b.n	211e8 <tx_notify+0x4>

0002122a <tx_complete_work>:
	tx_notify(conn);
   2122a:	3828      	subs	r0, #40	; 0x28
   2122c:	f7ff bfda 	b.w	211e4 <tx_notify>

00021230 <bt_conn_reset_rx_state>:
{
   21230:	b510      	push	{r4, lr}
   21232:	4604      	mov	r4, r0
	if (!conn->rx) {
   21234:	6900      	ldr	r0, [r0, #16]
   21236:	b118      	cbz	r0, 21240 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21238:	f7f8 ff42 	bl	1a0c0 <net_buf_unref>
	conn->rx = NULL;
   2123c:	2300      	movs	r3, #0
   2123e:	6123      	str	r3, [r4, #16]
}
   21240:	bd10      	pop	{r4, pc}

00021242 <conn_cleanup>:
{
   21242:	b570      	push	{r4, r5, r6, lr}
   21244:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21246:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2124a:	2200      	movs	r2, #0
   2124c:	2300      	movs	r3, #0
   2124e:	4630      	mov	r0, r6
   21250:	f001 ff3c 	bl	230cc <net_buf_get>
   21254:	4605      	mov	r5, r0
   21256:	b950      	cbnz	r0, 2126e <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   21258:	4620      	mov	r0, r4
   2125a:	f7ff ffe9 	bl	21230 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2125e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21262:	2200      	movs	r2, #0
}
   21264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   21268:	2300      	movs	r3, #0
   2126a:	f7fd bb5f 	b.w	1e92c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2126e:	6968      	ldr	r0, [r5, #20]
   21270:	b108      	cbz	r0, 21276 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   21272:	f7e6 ff2b 	bl	80cc <tx_free>
		net_buf_unref(buf);
   21276:	4628      	mov	r0, r5
   21278:	f7f8 ff22 	bl	1a0c0 <net_buf_unref>
   2127c:	e7e5      	b.n	2124a <conn_cleanup+0x8>

0002127e <bt_conn_recv>:
{
   2127e:	b570      	push	{r4, r5, r6, lr}
   21280:	4616      	mov	r6, r2
   21282:	4604      	mov	r4, r0
   21284:	460d      	mov	r5, r1
	tx_notify(conn);
   21286:	f7ff ffad 	bl	211e4 <tx_notify>
	switch (flags) {
   2128a:	2e01      	cmp	r6, #1
   2128c:	d017      	beq.n	212be <bt_conn_recv+0x40>
   2128e:	2e02      	cmp	r6, #2
   21290:	d117      	bne.n	212c2 <bt_conn_recv+0x44>
		if (conn->rx) {
   21292:	6923      	ldr	r3, [r4, #16]
   21294:	b113      	cbz	r3, 2129c <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   21296:	4620      	mov	r0, r4
   21298:	f7ff ffca 	bl	21230 <bt_conn_reset_rx_state>
		conn->rx = buf;
   2129c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   2129e:	6921      	ldr	r1, [r4, #16]
   212a0:	898a      	ldrh	r2, [r1, #12]
   212a2:	2a01      	cmp	r2, #1
   212a4:	d937      	bls.n	21316 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   212a6:	688b      	ldr	r3, [r1, #8]
   212a8:	881b      	ldrh	r3, [r3, #0]
   212aa:	3304      	adds	r3, #4
   212ac:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   212ae:	429a      	cmp	r2, r3
   212b0:	d331      	bcc.n	21316 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   212b2:	d928      	bls.n	21306 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   212b4:	4620      	mov	r0, r4
}
   212b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   212ba:	f7ff bfb9 	b.w	21230 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   212be:	6920      	ldr	r0, [r4, #16]
   212c0:	b918      	cbnz	r0, 212ca <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   212c2:	4620      	mov	r0, r4
   212c4:	f7ff ffb4 	bl	21230 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   212c8:	e001      	b.n	212ce <bt_conn_recv+0x50>
		if (!buf->len) {
   212ca:	89ae      	ldrh	r6, [r5, #12]
   212cc:	b926      	cbnz	r6, 212d8 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   212ce:	4628      	mov	r0, r5
}
   212d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   212d4:	f7f8 bef4 	b.w	1a0c0 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   212d8:	3008      	adds	r0, #8
   212da:	f001 ffa7 	bl	2322c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   212de:	4286      	cmp	r6, r0
   212e0:	d907      	bls.n	212f2 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   212e2:	6921      	ldr	r1, [r4, #16]
   212e4:	2200      	movs	r2, #0
   212e6:	4620      	mov	r0, r4
   212e8:	f000 fa36 	bl	21758 <bt_l2cap_recv>
			conn->rx = NULL;
   212ec:	2300      	movs	r3, #0
   212ee:	6123      	str	r3, [r4, #16]
   212f0:	e7ed      	b.n	212ce <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   212f2:	6920      	ldr	r0, [r4, #16]
   212f4:	89aa      	ldrh	r2, [r5, #12]
   212f6:	68a9      	ldr	r1, [r5, #8]
   212f8:	3008      	adds	r0, #8
   212fa:	f001 ff50 	bl	2319e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   212fe:	4628      	mov	r0, r5
   21300:	f7f8 fede 	bl	1a0c0 <net_buf_unref>
		break;
   21304:	e7cb      	b.n	2129e <bt_conn_recv+0x20>
	conn->rx = NULL;
   21306:	2300      	movs	r3, #0
   21308:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   2130a:	4620      	mov	r0, r4
   2130c:	2201      	movs	r2, #1
}
   2130e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   21312:	f000 ba21 	b.w	21758 <bt_l2cap_recv>
}
   21316:	bd70      	pop	{r4, r5, r6, pc}

00021318 <bt_conn_ref>:
{
   21318:	b510      	push	{r4, lr}
   2131a:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2131c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   21320:	4610      	mov	r0, r2
   21322:	f7ff ff59 	bl	211d8 <atomic_get>
		if (!old) {
   21326:	b180      	cbz	r0, 2134a <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21328:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2132c:	1c41      	adds	r1, r0, #1
   2132e:	e852 4f00 	ldrex	r4, [r2]
   21332:	4284      	cmp	r4, r0
   21334:	d104      	bne.n	21340 <bt_conn_ref+0x28>
   21336:	e842 1c00 	strex	ip, r1, [r2]
   2133a:	f1bc 0f00 	cmp.w	ip, #0
   2133e:	d1f6      	bne.n	2132e <bt_conn_ref+0x16>
   21340:	f3bf 8f5b 	dmb	ish
   21344:	d1ec      	bne.n	21320 <bt_conn_ref+0x8>
}
   21346:	4618      	mov	r0, r3
   21348:	bd10      	pop	{r4, pc}
			return NULL;
   2134a:	4603      	mov	r3, r0
   2134c:	e7fb      	b.n	21346 <bt_conn_ref+0x2e>

0002134e <bt_conn_unref>:
{
   2134e:	b508      	push	{r3, lr}
   21350:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   21352:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21354:	f3bf 8f5b 	dmb	ish
   21358:	e850 2f00 	ldrex	r2, [r0]
   2135c:	3a01      	subs	r2, #1
   2135e:	e840 2100 	strex	r1, r2, [r0]
   21362:	2900      	cmp	r1, #0
   21364:	d1f8      	bne.n	21358 <bt_conn_unref+0xa>
   21366:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2136a:	789b      	ldrb	r3, [r3, #2]
   2136c:	2b01      	cmp	r3, #1
   2136e:	d106      	bne.n	2137e <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   21370:	f7ff ff32 	bl	211d8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   21374:	b918      	cbnz	r0, 2137e <bt_conn_unref+0x30>
}
   21376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   2137a:	f7e6 bcab 	b.w	7cd4 <bt_le_adv_resume>
}
   2137e:	bd08      	pop	{r3, pc}

00021380 <conn_lookup_handle>:
{
   21380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21384:	4607      	mov	r7, r0
   21386:	460e      	mov	r6, r1
   21388:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2138a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2138c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   21390:	42b4      	cmp	r4, r6
   21392:	d103      	bne.n	2139c <conn_lookup_handle+0x1c>
	return NULL;
   21394:	2300      	movs	r3, #0
}
   21396:	4618      	mov	r0, r3
   21398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2139c:	fb09 7004 	mla	r0, r9, r4, r7
   213a0:	f7ff ffba 	bl	21318 <bt_conn_ref>
   213a4:	4603      	mov	r3, r0
		if (!conn) {
   213a6:	b158      	cbz	r0, 213c0 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   213a8:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   213aa:	2d01      	cmp	r5, #1
   213ac:	d002      	beq.n	213b4 <conn_lookup_handle+0x34>
   213ae:	3d07      	subs	r5, #7
   213b0:	2d01      	cmp	r5, #1
   213b2:	d803      	bhi.n	213bc <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   213b4:	881a      	ldrh	r2, [r3, #0]
   213b6:	4542      	cmp	r2, r8
   213b8:	d0ed      	beq.n	21396 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   213ba:	4618      	mov	r0, r3
   213bc:	f7ff ffc7 	bl	2134e <bt_conn_unref>
	for (i = 0; i < size; i++) {
   213c0:	3401      	adds	r4, #1
   213c2:	e7e5      	b.n	21390 <conn_lookup_handle+0x10>

000213c4 <bt_conn_connected>:
{
   213c4:	b510      	push	{r4, lr}
   213c6:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   213c8:	f7e7 fb50 	bl	8a6c <bt_l2cap_connected>
	notify_connected(conn);
   213cc:	4620      	mov	r0, r4
}
   213ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   213d2:	f7e6 be85 	b.w	80e0 <notify_connected>

000213d6 <bt_conn_get_security>:
}
   213d6:	2001      	movs	r0, #1
   213d8:	4770      	bx	lr

000213da <bt_conn_is_peer_addr_le>:
{
   213da:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   213dc:	7a03      	ldrb	r3, [r0, #8]
   213de:	428b      	cmp	r3, r1
{
   213e0:	4604      	mov	r4, r0
   213e2:	4615      	mov	r5, r2
	if (id != conn->id) {
   213e4:	d115      	bne.n	21412 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   213e6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   213ea:	2207      	movs	r2, #7
   213ec:	4628      	mov	r0, r5
   213ee:	f7ff f98a 	bl	20706 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   213f2:	b180      	cbz	r0, 21416 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   213f4:	78e3      	ldrb	r3, [r4, #3]
   213f6:	2207      	movs	r2, #7
   213f8:	b943      	cbnz	r3, 2140c <bt_conn_is_peer_addr_le+0x32>
   213fa:	f104 0196 	add.w	r1, r4, #150	; 0x96
   213fe:	4628      	mov	r0, r5
   21400:	f7ff f981 	bl	20706 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   21404:	fab0 f080 	clz	r0, r0
   21408:	0940      	lsrs	r0, r0, #5
}
   2140a:	bd38      	pop	{r3, r4, r5, pc}
   2140c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21410:	e7f5      	b.n	213fe <bt_conn_is_peer_addr_le+0x24>
		return false;
   21412:	2000      	movs	r0, #0
   21414:	e7f9      	b.n	2140a <bt_conn_is_peer_addr_le+0x30>
		return true;
   21416:	2001      	movs	r0, #1
   21418:	e7f7      	b.n	2140a <bt_conn_is_peer_addr_le+0x30>

0002141a <bt_conn_exists_le>:
{
   2141a:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2141c:	f7e7 f95a 	bl	86d4 <bt_conn_lookup_addr_le>
	if (conn) {
   21420:	b110      	cbz	r0, 21428 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   21422:	f7ff ff94 	bl	2134e <bt_conn_unref>
		return true;
   21426:	2001      	movs	r0, #1
}
   21428:	bd08      	pop	{r3, pc}

0002142a <bt_conn_le_conn_update>:
{
   2142a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2142c:	4607      	mov	r7, r0
   2142e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21430:	f242 0013 	movw	r0, #8211	; 0x2013
   21434:	210e      	movs	r1, #14
   21436:	f7e5 f93b 	bl	66b0 <bt_hci_cmd_create>
	if (!buf) {
   2143a:	4606      	mov	r6, r0
   2143c:	b1d0      	cbz	r0, 21474 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2143e:	210e      	movs	r1, #14
   21440:	3008      	adds	r0, #8
   21442:	f001 fea6 	bl	23192 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   21446:	220e      	movs	r2, #14
   21448:	4604      	mov	r4, r0
   2144a:	2100      	movs	r1, #0
   2144c:	f7ff f977 	bl	2073e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21450:	883b      	ldrh	r3, [r7, #0]
   21452:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21454:	882b      	ldrh	r3, [r5, #0]
   21456:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   21458:	886b      	ldrh	r3, [r5, #2]
   2145a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2145c:	88ab      	ldrh	r3, [r5, #4]
   2145e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21460:	88eb      	ldrh	r3, [r5, #6]
   21462:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21464:	4631      	mov	r1, r6
   21466:	2200      	movs	r2, #0
}
   21468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2146c:	f242 0013 	movw	r0, #8211	; 0x2013
   21470:	f7e5 b958 	b.w	6724 <bt_hci_cmd_send_sync>
}
   21474:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002147a <bt_conn_le_param_update>:
	if (conn->le.interval >= param->interval_min &&
   2147a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
{
   2147e:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
   21480:	8808      	ldrh	r0, [r1, #0]
   21482:	4290      	cmp	r0, r2
{
   21484:	b510      	push	{r4, lr}
	if (conn->le.interval >= param->interval_min &&
   21486:	d81c      	bhi.n	214c2 <bt_conn_le_param_update+0x48>
   21488:	8848      	ldrh	r0, [r1, #2]
   2148a:	4290      	cmp	r0, r2
   2148c:	d319      	bcc.n	214c2 <bt_conn_le_param_update+0x48>
	    conn->le.interval <= param->interval_max &&
   2148e:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
   21492:	888a      	ldrh	r2, [r1, #4]
   21494:	4290      	cmp	r0, r2
   21496:	d114      	bne.n	214c2 <bt_conn_le_param_update+0x48>
	    conn->le.latency == param->latency &&
   21498:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
   2149c:	88ca      	ldrh	r2, [r1, #6]
   2149e:	4290      	cmp	r0, r2
   214a0:	d10f      	bne.n	214c2 <bt_conn_le_param_update+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   214a2:	3304      	adds	r3, #4
   214a4:	f3bf 8f5b 	dmb	ish
   214a8:	e853 2f00 	ldrex	r2, [r3]
   214ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   214b0:	e843 2100 	strex	r1, r2, [r3]
   214b4:	2900      	cmp	r1, #0
   214b6:	d1f7      	bne.n	214a8 <bt_conn_le_param_update+0x2e>
   214b8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   214bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   214c0:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   214c2:	78da      	ldrb	r2, [r3, #3]
   214c4:	b922      	cbnz	r2, 214d0 <bt_conn_le_param_update+0x56>
}
   214c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return send_conn_le_param_update(conn, param);
   214ca:	4618      	mov	r0, r3
   214cc:	f7e7 b942 	b.w	8754 <send_conn_le_param_update>
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   214d0:	1d1c      	adds	r4, r3, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   214d2:	4620      	mov	r0, r4
   214d4:	f7ff fe80 	bl	211d8 <atomic_get>
   214d8:	f3c0 2200 	ubfx	r2, r0, #8, #1
   214dc:	05c0      	lsls	r0, r0, #23
   214de:	d4f2      	bmi.n	214c6 <bt_conn_le_param_update+0x4c>
		conn->le.interval_min = param->interval_min;
   214e0:	8808      	ldrh	r0, [r1, #0]
   214e2:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   214e6:	8848      	ldrh	r0, [r1, #2]
   214e8:	f8a3 00a2 	strh.w	r0, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   214ec:	8888      	ldrh	r0, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   214ee:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   214f0:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   214f4:	f8a3 10aa 	strh.w	r1, [r3, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   214f8:	f3bf 8f5b 	dmb	ish
   214fc:	e854 3f00 	ldrex	r3, [r4]
   21500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21504:	e844 3100 	strex	r1, r3, [r4]
   21508:	2900      	cmp	r1, #0
   2150a:	d1f7      	bne.n	214fc <bt_conn_le_param_update+0x82>
   2150c:	f3bf 8f5b 	dmb	ish
	return 0;
   21510:	4610      	mov	r0, r2
   21512:	e7d5      	b.n	214c0 <bt_conn_le_param_update+0x46>

00021514 <l2cap_connected>:
}
   21514:	4770      	bx	lr

00021516 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   21516:	3010      	adds	r0, #16
   21518:	f002 be79 	b.w	2420e <k_work_cancel_delayable>

0002151c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2151e:	4607      	mov	r7, r0
   21520:	460e      	mov	r6, r1
   21522:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   21524:	2300      	movs	r3, #0
   21526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2152a:	2104      	movs	r1, #4
   2152c:	2000      	movs	r0, #0
   2152e:	f7e7 f81b 	bl	8568 <bt_conn_create_pdu_timeout>
	if (!buf) {
   21532:	4604      	mov	r4, r0
   21534:	b130      	cbz	r0, 21544 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   21536:	2104      	movs	r1, #4
   21538:	3008      	adds	r0, #8
   2153a:	f001 fe2a 	bl	23192 <net_buf_simple_add>
	hdr->code = code;
   2153e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   21540:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21542:	8045      	strh	r5, [r0, #2]
}
   21544:	4620      	mov	r0, r4
   21546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021548 <bt_l2cap_chan_remove>:
	return list->head;
   21548:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2154a:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2154c:	b173      	cbz	r3, 2156c <bt_l2cap_chan_remove+0x24>
   2154e:	3b08      	subs	r3, #8
   21550:	2500      	movs	r5, #0
	return node->next;
   21552:	461a      	mov	r2, r3
		if (chan == ch) {
   21554:	4299      	cmp	r1, r3
   21556:	f852 4f08 	ldr.w	r4, [r2, #8]!
   2155a:	d10d      	bne.n	21578 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   2155c:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2155e:	b935      	cbnz	r5, 2156e <bt_l2cap_chan_remove+0x26>
   21560:	4291      	cmp	r1, r2
	list->head = node;
   21562:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   21564:	d100      	bne.n	21568 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   21566:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   21568:	2200      	movs	r2, #0
   2156a:	609a      	str	r2, [r3, #8]
}
   2156c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2156e:	4291      	cmp	r1, r2
	parent->next = child;
   21570:	602c      	str	r4, [r5, #0]
	list->tail = node;
   21572:	bf08      	it	eq
   21574:	6545      	streq	r5, [r0, #84]	; 0x54
}
   21576:	e7f7      	b.n	21568 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21578:	2c00      	cmp	r4, #0
   2157a:	d0f7      	beq.n	2156c <bt_l2cap_chan_remove+0x24>
   2157c:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   21580:	4615      	mov	r5, r2
   21582:	e7e6      	b.n	21552 <bt_l2cap_chan_remove+0xa>

00021584 <bt_l2cap_chan_del>:
{
   21584:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   21586:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2158a:	4604      	mov	r4, r0
	if (!chan->conn) {
   2158c:	b123      	cbz	r3, 21598 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2158e:	686b      	ldr	r3, [r5, #4]
   21590:	b103      	cbz	r3, 21594 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21592:	4798      	blx	r3
	chan->conn = NULL;
   21594:	2300      	movs	r3, #0
   21596:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   21598:	68e3      	ldr	r3, [r4, #12]
   2159a:	b10b      	cbz	r3, 215a0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2159c:	4620      	mov	r0, r4
   2159e:	4798      	blx	r3
	if (ops->released) {
   215a0:	69eb      	ldr	r3, [r5, #28]
   215a2:	b11b      	cbz	r3, 215ac <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   215a4:	4620      	mov	r0, r4
}
   215a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   215aa:	4718      	bx	r3
}
   215ac:	bd70      	pop	{r4, r5, r6, pc}

000215ae <l2cap_rtx_timeout>:
{
   215ae:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   215b0:	f1a0 0410 	sub.w	r4, r0, #16
   215b4:	4621      	mov	r1, r4
   215b6:	f850 0c10 	ldr.w	r0, [r0, #-16]
   215ba:	f7ff ffc5 	bl	21548 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   215be:	4620      	mov	r0, r4
}
   215c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   215c4:	f7ff bfde 	b.w	21584 <bt_l2cap_chan_del>

000215c8 <bt_l2cap_disconnected>:
	return list->head;
   215c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   215ca:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   215cc:	b160      	cbz	r0, 215e8 <bt_l2cap_disconnected+0x20>
	return node->next;
   215ce:	f850 4908 	ldr.w	r4, [r0], #-8
   215d2:	b104      	cbz	r4, 215d6 <bt_l2cap_disconnected+0xe>
   215d4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   215d6:	f7ff ffd5 	bl	21584 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   215da:	b12c      	cbz	r4, 215e8 <bt_l2cap_disconnected+0x20>
   215dc:	68a3      	ldr	r3, [r4, #8]
   215de:	b103      	cbz	r3, 215e2 <bt_l2cap_disconnected+0x1a>
   215e0:	3b08      	subs	r3, #8
{
   215e2:	4620      	mov	r0, r4
   215e4:	461c      	mov	r4, r3
   215e6:	e7f6      	b.n	215d6 <bt_l2cap_disconnected+0xe>
}
   215e8:	bd10      	pop	{r4, pc}

000215ea <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   215ea:	3104      	adds	r1, #4
   215ec:	f7e6 bfbc 	b.w	8568 <bt_conn_create_pdu_timeout>

000215f0 <bt_l2cap_send_cb>:
{
   215f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215f4:	4614      	mov	r4, r2
   215f6:	4605      	mov	r5, r0
   215f8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   215fa:	f102 0008 	add.w	r0, r2, #8
   215fe:	2104      	movs	r1, #4
   21600:	461e      	mov	r6, r3
   21602:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21606:	f001 fde5 	bl	231d4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2160a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2160c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2160e:	3a04      	subs	r2, #4
   21610:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21612:	4643      	mov	r3, r8
   21614:	4632      	mov	r2, r6
   21616:	4621      	mov	r1, r4
   21618:	4628      	mov	r0, r5
}
   2161a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2161e:	f7e6 be43 	b.w	82a8 <bt_conn_send_cb>

00021622 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   21622:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21624:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21626:	2202      	movs	r2, #2
   21628:	2001      	movs	r0, #1
   2162a:	f7ff ff77 	bl	2151c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2162e:	4604      	mov	r4, r0
   21630:	b198      	cbz	r0, 2165a <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   21632:	2102      	movs	r1, #2
   21634:	3008      	adds	r0, #8
   21636:	f001 fdac 	bl	23192 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2163a:	2300      	movs	r3, #0
   2163c:	7003      	strb	r3, [r0, #0]
   2163e:	7043      	strb	r3, [r0, #1]
   21640:	4622      	mov	r2, r4
   21642:	9300      	str	r3, [sp, #0]
   21644:	2105      	movs	r1, #5
   21646:	4628      	mov	r0, r5
   21648:	f7ff ffd2 	bl	215f0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2164c:	b128      	cbz	r0, 2165a <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2164e:	4620      	mov	r0, r4
}
   21650:	b003      	add	sp, #12
   21652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   21656:	f7f8 bd33 	b.w	1a0c0 <net_buf_unref>
}
   2165a:	b003      	add	sp, #12
   2165c:	bd30      	pop	{r4, r5, pc}

0002165e <l2cap_recv>:
{
   2165e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   21660:	898b      	ldrh	r3, [r1, #12]
   21662:	2b03      	cmp	r3, #3
{
   21664:	b085      	sub	sp, #20
   21666:	4605      	mov	r5, r0
   21668:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2166a:	d911      	bls.n	21690 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   2166c:	2104      	movs	r1, #4
   2166e:	f104 0008 	add.w	r0, r4, #8
   21672:	f001 fdbf 	bl	231f4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   21676:	89a3      	ldrh	r3, [r4, #12]
   21678:	8842      	ldrh	r2, [r0, #2]
   2167a:	429a      	cmp	r2, r3
   2167c:	d108      	bne.n	21690 <l2cap_recv+0x32>
	if (!hdr->ident) {
   2167e:	7841      	ldrb	r1, [r0, #1]
   21680:	b131      	cbz	r1, 21690 <l2cap_recv+0x32>
	switch (hdr->code) {
   21682:	7803      	ldrb	r3, [r0, #0]
   21684:	2b12      	cmp	r3, #18
   21686:	d006      	beq.n	21696 <l2cap_recv+0x38>
   21688:	2b13      	cmp	r3, #19
   2168a:	d001      	beq.n	21690 <l2cap_recv+0x32>
   2168c:	2b01      	cmp	r3, #1
   2168e:	d14b      	bne.n	21728 <l2cap_recv+0xca>
}
   21690:	2000      	movs	r0, #0
   21692:	b005      	add	sp, #20
   21694:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   21696:	2a07      	cmp	r2, #7
   21698:	d9fa      	bls.n	21690 <l2cap_recv+0x32>
   2169a:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   2169c:	78ef      	ldrb	r7, [r5, #3]
   2169e:	b11f      	cbz	r7, 216a8 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   216a0:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   216a2:	f7ff ffbe 	bl	21622 <l2cap_send_reject.constprop.0>
		break;
   216a6:	e7f3      	b.n	21690 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   216a8:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   216aa:	7850      	ldrb	r0, [r2, #1]
   216ac:	7813      	ldrb	r3, [r2, #0]
   216ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   216b2:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   216b6:	78d0      	ldrb	r0, [r2, #3]
   216b8:	7893      	ldrb	r3, [r2, #2]
   216ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   216be:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   216c2:	7950      	ldrb	r0, [r2, #5]
   216c4:	7913      	ldrb	r3, [r2, #4]
   216c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   216ca:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   216ce:	7993      	ldrb	r3, [r2, #6]
   216d0:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   216d2:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   216d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   216d8:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   216da:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   216de:	f7ff ff1d 	bl	2151c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   216e2:	4604      	mov	r4, r0
   216e4:	2800      	cmp	r0, #0
   216e6:	d0d3      	beq.n	21690 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   216e8:	a902      	add	r1, sp, #8
   216ea:	4628      	mov	r0, r5
   216ec:	f7e6 ff96 	bl	861c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   216f0:	2102      	movs	r1, #2
   216f2:	4606      	mov	r6, r0
   216f4:	f104 0008 	add.w	r0, r4, #8
   216f8:	f001 fd4b 	bl	23192 <net_buf_simple_add>
	if (accepted) {
   216fc:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   21700:	b2db      	uxtb	r3, r3
   21702:	8003      	strh	r3, [r0, #0]
   21704:	4622      	mov	r2, r4
   21706:	9700      	str	r7, [sp, #0]
   21708:	463b      	mov	r3, r7
   2170a:	2105      	movs	r1, #5
   2170c:	4628      	mov	r0, r5
   2170e:	f7ff ff6f 	bl	215f0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21712:	b110      	cbz	r0, 2171a <l2cap_recv+0xbc>
		net_buf_unref(buf);
   21714:	4620      	mov	r0, r4
   21716:	f7f8 fcd3 	bl	1a0c0 <net_buf_unref>
	if (accepted) {
   2171a:	2e00      	cmp	r6, #0
   2171c:	d0b8      	beq.n	21690 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   2171e:	a902      	add	r1, sp, #8
   21720:	4628      	mov	r0, r5
   21722:	f7ff fe82 	bl	2142a <bt_conn_le_conn_update>
   21726:	e7b3      	b.n	21690 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   21728:	6828      	ldr	r0, [r5, #0]
   2172a:	e7ba      	b.n	216a2 <l2cap_recv+0x44>

0002172c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2172c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2172e:	b138      	cbz	r0, 21740 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   21730:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   21734:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21736:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2173a:	d001      	beq.n	21740 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2173c:	6880      	ldr	r0, [r0, #8]
   2173e:	e7f6      	b.n	2172e <bt_l2cap_le_lookup_tx_cid+0x2>
}
   21740:	4770      	bx	lr

00021742 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   21742:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21744:	b138      	cbz	r0, 21756 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21746:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2174a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2174c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21750:	d001      	beq.n	21756 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   21752:	6880      	ldr	r0, [r0, #8]
   21754:	e7f6      	b.n	21744 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   21756:	4770      	bx	lr

00021758 <bt_l2cap_recv>:
{
   21758:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   2175a:	898b      	ldrh	r3, [r1, #12]
   2175c:	2b03      	cmp	r3, #3
{
   2175e:	4605      	mov	r5, r0
   21760:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   21762:	d804      	bhi.n	2176e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   21764:	4620      	mov	r0, r4
}
   21766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   2176a:	f7f8 bca9 	b.w	1a0c0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2176e:	2104      	movs	r1, #4
   21770:	f104 0008 	add.w	r0, r4, #8
   21774:	f001 fd3e 	bl	231f4 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   21778:	8841      	ldrh	r1, [r0, #2]
   2177a:	4628      	mov	r0, r5
   2177c:	f7ff ffe1 	bl	21742 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21780:	2800      	cmp	r0, #0
   21782:	d0ef      	beq.n	21764 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   21784:	6843      	ldr	r3, [r0, #4]
   21786:	4621      	mov	r1, r4
   21788:	691b      	ldr	r3, [r3, #16]
   2178a:	4798      	blx	r3
   2178c:	e7ea      	b.n	21764 <bt_l2cap_recv+0xc>

0002178e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2178e:	4770      	bx	lr

00021790 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   21790:	4603      	mov	r3, r0
	return list->head;
   21792:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   21794:	b128      	cbz	r0, 217a2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21796:	6859      	ldr	r1, [r3, #4]
	return node->next;
   21798:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2179a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2179c:	4288      	cmp	r0, r1
	list->tail = node;
   2179e:	bf08      	it	eq
   217a0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   217a2:	4770      	bx	lr

000217a4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   217a4:	4603      	mov	r3, r0
	size_t bytes = 0;
   217a6:	2000      	movs	r0, #0

	while (buf) {
   217a8:	b903      	cbnz	r3, 217ac <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   217aa:	4770      	bx	lr
		bytes += buf->len;
   217ac:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   217ae:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   217b0:	4410      	add	r0, r2
		buf = buf->frags;
   217b2:	e7f9      	b.n	217a8 <net_buf_frags_len+0x4>

000217b4 <att_sent>:
	if (chan->ops->sent) {
   217b4:	684b      	ldr	r3, [r1, #4]
   217b6:	695b      	ldr	r3, [r3, #20]
{
   217b8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   217ba:	b103      	cbz	r3, 217be <att_sent+0xa>
		chan->ops->sent(chan);
   217bc:	4718      	bx	r3
}
   217be:	4770      	bx	lr

000217c0 <attr_read_type_cb>:
{
   217c0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   217c2:	68d4      	ldr	r4, [r2, #12]
   217c4:	7823      	ldrb	r3, [r4, #0]
   217c6:	3102      	adds	r1, #2
   217c8:	b913      	cbnz	r3, 217d0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   217ca:	7021      	strb	r1, [r4, #0]
	return true;
   217cc:	2001      	movs	r0, #1
   217ce:	e006      	b.n	217de <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   217d0:	428b      	cmp	r3, r1
   217d2:	d0fb      	beq.n	217cc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   217d4:	8983      	ldrh	r3, [r0, #12]
   217d6:	3b02      	subs	r3, #2
   217d8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   217da:	2000      	movs	r0, #0
   217dc:	6110      	str	r0, [r2, #16]
}
   217de:	bd10      	pop	{r4, pc}

000217e0 <att_prepare_write_req>:
}
   217e0:	2006      	movs	r0, #6
   217e2:	4770      	bx	lr

000217e4 <att_op_get_type>:
	switch (op) {
   217e4:	281e      	cmp	r0, #30
   217e6:	d816      	bhi.n	21816 <att_op_get_type+0x32>
   217e8:	b308      	cbz	r0, 2182e <att_op_get_type+0x4a>
   217ea:	1e43      	subs	r3, r0, #1
   217ec:	2b1d      	cmp	r3, #29
   217ee:	d81e      	bhi.n	2182e <att_op_get_type+0x4a>
   217f0:	e8df f003 	tbb	[pc, r3]
   217f4:	23172317 	.word	0x23172317
   217f8:	23172317 	.word	0x23172317
   217fc:	23172317 	.word	0x23172317
   21800:	23172317 	.word	0x23172317
   21804:	1d172317 	.word	0x1d172317
   21808:	2317231d 	.word	0x2317231d
   2180c:	1d191d17 	.word	0x1d191d17
   21810:	0f1b      	.short	0x0f1b
   21812:	2004      	movs	r0, #4
   21814:	4770      	bx	lr
   21816:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2181a:	2b52      	cmp	r3, #82	; 0x52
   2181c:	d107      	bne.n	2182e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2181e:	2000      	movs	r0, #0
}
   21820:	4770      	bx	lr
		return ATT_RESPONSE;
   21822:	2002      	movs	r0, #2
   21824:	4770      	bx	lr
		return ATT_NOTIFICATION;
   21826:	2003      	movs	r0, #3
   21828:	4770      	bx	lr
		return ATT_INDICATION;
   2182a:	2005      	movs	r0, #5
   2182c:	4770      	bx	lr
		return ATT_COMMAND;
   2182e:	f010 0f40 	tst.w	r0, #64	; 0x40
   21832:	bf0c      	ite	eq
   21834:	2006      	moveq	r0, #6
   21836:	2000      	movne	r0, #0
   21838:	4770      	bx	lr
		return ATT_REQUEST;
   2183a:	2001      	movs	r0, #1
   2183c:	4770      	bx	lr

0002183e <att_notify_mult>:
{
   2183e:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   21840:	6803      	ldr	r3, [r0, #0]
   21842:	898a      	ldrh	r2, [r1, #12]
   21844:	6818      	ldr	r0, [r3, #0]
   21846:	6889      	ldr	r1, [r1, #8]
   21848:	f001 fb9d 	bl	22f86 <bt_gatt_mult_notification>
}
   2184c:	2000      	movs	r0, #0
   2184e:	bd08      	pop	{r3, pc}

00021850 <att_notify>:
{
   21850:	b538      	push	{r3, r4, r5, lr}
   21852:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21854:	f101 0008 	add.w	r0, r1, #8
   21858:	460c      	mov	r4, r1
   2185a:	f001 fcdb 	bl	23214 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2185e:	682d      	ldr	r5, [r5, #0]
   21860:	89a3      	ldrh	r3, [r4, #12]
   21862:	68a2      	ldr	r2, [r4, #8]
   21864:	4601      	mov	r1, r0
   21866:	6828      	ldr	r0, [r5, #0]
   21868:	f001 fb61 	bl	22f2e <bt_gatt_notification>
}
   2186c:	2000      	movs	r0, #0
   2186e:	bd38      	pop	{r3, r4, r5, pc}

00021870 <att_chan_mtu_updated>:
{
   21870:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   21872:	6806      	ldr	r6, [r0, #0]
	return list->head;
   21874:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21876:	b1e3      	cbz	r3, 218b2 <att_chan_mtu_updated+0x42>
	return node->next;
   21878:	681a      	ldr	r2, [r3, #0]
   2187a:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   2187e:	b10a      	cbz	r2, 21884 <att_chan_mtu_updated+0x14>
   21880:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   21884:	2300      	movs	r3, #0
   21886:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   21888:	42a8      	cmp	r0, r5
   2188a:	d009      	beq.n	218a0 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2188c:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   21890:	42a1      	cmp	r1, r4
   21892:	bf38      	it	cc
   21894:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21896:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   2189a:	42a3      	cmp	r3, r4
   2189c:	bf38      	it	cc
   2189e:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   218a0:	b142      	cbz	r2, 218b4 <att_chan_mtu_updated+0x44>
   218a2:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   218a6:	b10c      	cbz	r4, 218ac <att_chan_mtu_updated+0x3c>
   218a8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   218ac:	4615      	mov	r5, r2
   218ae:	4622      	mov	r2, r4
   218b0:	e7ea      	b.n	21888 <att_chan_mtu_updated+0x18>
   218b2:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   218b4:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   218b8:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   218bc:	428c      	cmp	r4, r1
   218be:	d801      	bhi.n	218c4 <att_chan_mtu_updated+0x54>
   218c0:	429a      	cmp	r2, r3
   218c2:	d909      	bls.n	218d8 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   218c4:	429a      	cmp	r2, r3
   218c6:	bf38      	it	cc
   218c8:	461a      	movcc	r2, r3
   218ca:	42a1      	cmp	r1, r4
   218cc:	6830      	ldr	r0, [r6, #0]
   218ce:	bf38      	it	cc
   218d0:	4621      	movcc	r1, r4
}
   218d2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   218d4:	f7e8 bd58 	b.w	a388 <bt_gatt_att_max_mtu_changed>
}
   218d8:	bc70      	pop	{r4, r5, r6}
   218da:	4770      	bx	lr

000218dc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   218dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   218de:	e9cd 2301 	strd	r2, r3, [sp, #4]
   218e2:	2300      	movs	r3, #0
   218e4:	9300      	str	r3, [sp, #0]
   218e6:	461a      	mov	r2, r3
   218e8:	f7e8 f8c4 	bl	9a74 <bt_gatt_foreach_attr_type>
				  user_data);
}
   218ec:	b005      	add	sp, #20
   218ee:	f85d fb04 	ldr.w	pc, [sp], #4

000218f2 <find_type_cb>:
{
   218f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   218f6:	f8d2 9000 	ldr.w	r9, [r2]
{
   218fa:	b091      	sub	sp, #68	; 0x44
   218fc:	4607      	mov	r7, r0
   218fe:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21900:	2500      	movs	r5, #0
   21902:	f642 0301 	movw	r3, #10241	; 0x2801
   21906:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   21908:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2190c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   21910:	a90b      	add	r1, sp, #44	; 0x2c
{
   21912:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21914:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   21918:	f7fe ff97 	bl	2084a <bt_uuid_cmp>
   2191c:	2800      	cmp	r0, #0
   2191e:	d079      	beq.n	21a14 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   21920:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21924:	6838      	ldr	r0, [r7, #0]
   21926:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2192a:	a90b      	add	r1, sp, #44	; 0x2c
   2192c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   21930:	f7fe ff8b 	bl	2084a <bt_uuid_cmp>
   21934:	b138      	cbz	r0, 21946 <find_type_cb+0x54>
		if (data->group &&
   21936:	68a3      	ldr	r3, [r4, #8]
   21938:	b11b      	cbz	r3, 21942 <find_type_cb+0x50>
   2193a:	885a      	ldrh	r2, [r3, #2]
   2193c:	42b2      	cmp	r2, r6
   2193e:	d200      	bcs.n	21942 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   21940:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   21942:	2001      	movs	r0, #1
   21944:	e009      	b.n	2195a <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   21946:	6861      	ldr	r1, [r4, #4]
   21948:	4608      	mov	r0, r1
   2194a:	f7ff ff2b 	bl	217a4 <net_buf_frags_len>
   2194e:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   21952:	1a1b      	subs	r3, r3, r0
   21954:	2b03      	cmp	r3, #3
   21956:	d803      	bhi.n	21960 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   21958:	2000      	movs	r0, #0
}
   2195a:	b011      	add	sp, #68	; 0x44
   2195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   21960:	4608      	mov	r0, r1
   21962:	f001 fbe8 	bl	23136 <net_buf_frag_last>
   21966:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   21968:	6860      	ldr	r0, [r4, #4]
   2196a:	f7ff ff1b 	bl	217a4 <net_buf_frags_len>
   2196e:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   21972:	f105 0b08 	add.w	fp, r5, #8
   21976:	ebaa 0a00 	sub.w	sl, sl, r0
   2197a:	4658      	mov	r0, fp
   2197c:	f001 fc56 	bl	2322c <net_buf_simple_tailroom>
   21980:	4582      	cmp	sl, r0
   21982:	d23f      	bcs.n	21a04 <find_type_cb+0x112>
   21984:	6860      	ldr	r0, [r4, #4]
   21986:	f7ff ff0d 	bl	217a4 <net_buf_frags_len>
   2198a:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   2198e:	1a18      	subs	r0, r3, r0
	if (!len) {
   21990:	b970      	cbnz	r0, 219b0 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   21992:	6863      	ldr	r3, [r4, #4]
   21994:	7998      	ldrb	r0, [r3, #6]
   21996:	f7f8 facf 	bl	19f38 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2199a:	2200      	movs	r2, #0
   2199c:	2300      	movs	r3, #0
   2199e:	f001 fb90 	bl	230c2 <net_buf_alloc_fixed>
		if (!frag) {
   219a2:	4605      	mov	r5, r0
   219a4:	2800      	cmp	r0, #0
   219a6:	d0d7      	beq.n	21958 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   219a8:	4601      	mov	r1, r0
   219aa:	6860      	ldr	r0, [r4, #4]
   219ac:	f001 fbd4 	bl	23158 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   219b0:	2300      	movs	r3, #0
   219b2:	9300      	str	r3, [sp, #0]
   219b4:	f8d7 9004 	ldr.w	r9, [r7, #4]
   219b8:	4639      	mov	r1, r7
   219ba:	2310      	movs	r3, #16
   219bc:	aa02      	add	r2, sp, #8
   219be:	4640      	mov	r0, r8
   219c0:	47c8      	blx	r9
	if (read < 0) {
   219c2:	1e07      	subs	r7, r0, #0
   219c4:	db26      	blt.n	21a14 <find_type_cb+0x122>
	if (read != data->value_len) {
   219c6:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   219c8:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   219ca:	42ba      	cmp	r2, r7
   219cc:	d01e      	beq.n	21a0c <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   219ce:	4601      	mov	r1, r0
   219d0:	a80b      	add	r0, sp, #44	; 0x2c
   219d2:	f7fe ff68 	bl	208a6 <bt_uuid_create>
   219d6:	b1e8      	cbz	r0, 21a14 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   219d8:	b2fa      	uxtb	r2, r7
   219da:	a902      	add	r1, sp, #8
   219dc:	a806      	add	r0, sp, #24
   219de:	f7fe ff62 	bl	208a6 <bt_uuid_create>
   219e2:	b1b8      	cbz	r0, 21a14 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   219e4:	a906      	add	r1, sp, #24
   219e6:	a80b      	add	r0, sp, #44	; 0x2c
   219e8:	f7fe ff2f 	bl	2084a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   219ec:	b990      	cbnz	r0, 21a14 <find_type_cb+0x122>
	data->err = 0x00;
   219ee:	2300      	movs	r3, #0
   219f0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   219f2:	2104      	movs	r1, #4
   219f4:	f105 0008 	add.w	r0, r5, #8
   219f8:	f001 fbcb 	bl	23192 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   219fc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   219fe:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   21a00:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   21a02:	e79e      	b.n	21942 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   21a04:	4658      	mov	r0, fp
   21a06:	f001 fc11 	bl	2322c <net_buf_simple_tailroom>
   21a0a:	e7c1      	b.n	21990 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   21a0c:	a902      	add	r1, sp, #8
   21a0e:	f7fe fe7a 	bl	20706 <memcmp>
   21a12:	e7eb      	b.n	219ec <find_type_cb+0xfa>
	data->group = NULL;
   21a14:	2300      	movs	r3, #0
   21a16:	60a3      	str	r3, [r4, #8]
   21a18:	e793      	b.n	21942 <find_type_cb+0x50>

00021a1a <find_info_cb>:
{
   21a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   21a1c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   21a1e:	6817      	ldr	r7, [r2, #0]
{
   21a20:	4605      	mov	r5, r0
   21a22:	460e      	mov	r6, r1
   21a24:	4614      	mov	r4, r2
	if (!data->rsp) {
   21a26:	b963      	cbnz	r3, 21a42 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   21a28:	6850      	ldr	r0, [r2, #4]
   21a2a:	2101      	movs	r1, #1
   21a2c:	3008      	adds	r0, #8
   21a2e:	f001 fbb0 	bl	23192 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21a32:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   21a34:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21a36:	781b      	ldrb	r3, [r3, #0]
   21a38:	2b00      	cmp	r3, #0
   21a3a:	bf0c      	ite	eq
   21a3c:	2301      	moveq	r3, #1
   21a3e:	2302      	movne	r3, #2
   21a40:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   21a42:	68a3      	ldr	r3, [r4, #8]
   21a44:	781b      	ldrb	r3, [r3, #0]
   21a46:	2b01      	cmp	r3, #1
   21a48:	d003      	beq.n	21a52 <find_info_cb+0x38>
   21a4a:	2b02      	cmp	r3, #2
   21a4c:	d019      	beq.n	21a82 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   21a4e:	2000      	movs	r0, #0
   21a50:	e016      	b.n	21a80 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   21a52:	682b      	ldr	r3, [r5, #0]
   21a54:	781b      	ldrb	r3, [r3, #0]
   21a56:	2b00      	cmp	r3, #0
   21a58:	d1f9      	bne.n	21a4e <find_info_cb+0x34>
   21a5a:	6860      	ldr	r0, [r4, #4]
   21a5c:	2104      	movs	r1, #4
   21a5e:	3008      	adds	r0, #8
   21a60:	f001 fb97 	bl	23192 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21a64:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   21a66:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21a68:	885b      	ldrh	r3, [r3, #2]
   21a6a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   21a6c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   21a6e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   21a70:	899b      	ldrh	r3, [r3, #12]
   21a72:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   21a76:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21a78:	2804      	cmp	r0, #4
   21a7a:	bf94      	ite	ls
   21a7c:	2000      	movls	r0, #0
   21a7e:	2001      	movhi	r0, #1
}
   21a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21a82:	682b      	ldr	r3, [r5, #0]
   21a84:	781b      	ldrb	r3, [r3, #0]
   21a86:	2b02      	cmp	r3, #2
   21a88:	d1e1      	bne.n	21a4e <find_info_cb+0x34>
   21a8a:	6860      	ldr	r0, [r4, #4]
   21a8c:	2112      	movs	r1, #18
   21a8e:	3008      	adds	r0, #8
   21a90:	f001 fb7f 	bl	23192 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21a94:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21a96:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21a98:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   21a9a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21a9e:	3101      	adds	r1, #1
   21aa0:	f7fe fe42 	bl	20728 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   21aa4:	6863      	ldr	r3, [r4, #4]
   21aa6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   21aaa:	899b      	ldrh	r3, [r3, #12]
   21aac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21aae:	2812      	cmp	r0, #18
   21ab0:	e7e3      	b.n	21a7a <find_info_cb+0x60>

00021ab2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21ab2:	68d0      	ldr	r0, [r2, #12]
   21ab4:	7803      	ldrb	r3, [r0, #0]
   21ab6:	3104      	adds	r1, #4
   21ab8:	b913      	cbnz	r3, 21ac0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21aba:	7001      	strb	r1, [r0, #0]
	return true;
   21abc:	2001      	movs	r0, #1
}
   21abe:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21ac0:	428b      	cmp	r3, r1
   21ac2:	d0fb      	beq.n	21abc <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   21ac4:	6891      	ldr	r1, [r2, #8]
   21ac6:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   21ac8:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21aca:	3b04      	subs	r3, #4
   21acc:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21ace:	6110      	str	r0, [r2, #16]
		return false;
   21ad0:	4770      	bx	lr

00021ad2 <att_get>:
{
   21ad2:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21ad4:	7a83      	ldrb	r3, [r0, #10]
   21ad6:	2b07      	cmp	r3, #7
   21ad8:	d001      	beq.n	21ade <att_get+0xc>
		return NULL;
   21ada:	2000      	movs	r0, #0
}
   21adc:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21ade:	2104      	movs	r1, #4
   21ae0:	f7ff fe2f 	bl	21742 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21ae4:	2800      	cmp	r0, #0
   21ae6:	d0f8      	beq.n	21ada <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21ae8:	f3bf 8f5b 	dmb	ish
   21aec:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   21af0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   21af4:	075b      	lsls	r3, r3, #29
   21af6:	d4f0      	bmi.n	21ada <att_get+0x8>
	return att_chan->att;
   21af8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21afc:	e7ee      	b.n	21adc <att_get+0xa>

00021afe <chan_req_sent>:
	if (chan->req) {
   21afe:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   21b02:	b133      	cbz	r3, 21b12 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   21b04:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21b08:	2300      	movs	r3, #0
   21b0a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   21b0e:	f7fc bf0d 	b.w	1e92c <k_work_reschedule>
}
   21b12:	4770      	bx	lr

00021b14 <write_cb>:
{
   21b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b16:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21b18:	4601      	mov	r1, r0
{
   21b1a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21b1c:	222a      	movs	r2, #42	; 0x2a
   21b1e:	6820      	ldr	r0, [r4, #0]
   21b20:	f000 ff5d 	bl	229de <bt_gatt_check_perm>
   21b24:	4605      	mov	r5, r0
   21b26:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21b28:	bb20      	cbnz	r0, 21b74 <write_cb+0x60>
	if (!data->req) {
   21b2a:	7a23      	ldrb	r3, [r4, #8]
   21b2c:	b1ab      	cbz	r3, 21b5a <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   21b2e:	2b18      	cmp	r3, #24
   21b30:	bf14      	ite	ne
   21b32:	2300      	movne	r3, #0
   21b34:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   21b36:	9301      	str	r3, [sp, #4]
   21b38:	8a63      	ldrh	r3, [r4, #18]
   21b3a:	9300      	str	r3, [sp, #0]
   21b3c:	68b7      	ldr	r7, [r6, #8]
   21b3e:	8a23      	ldrh	r3, [r4, #16]
   21b40:	68e2      	ldr	r2, [r4, #12]
   21b42:	6820      	ldr	r0, [r4, #0]
   21b44:	4631      	mov	r1, r6
   21b46:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21b48:	1e03      	subs	r3, r0, #0
   21b4a:	db08      	blt.n	21b5e <write_cb+0x4a>
   21b4c:	8a22      	ldrh	r2, [r4, #16]
   21b4e:	4293      	cmp	r3, r2
   21b50:	d10e      	bne.n	21b70 <write_cb+0x5c>
	data->err = 0U;
   21b52:	2300      	movs	r3, #0
   21b54:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   21b56:	2501      	movs	r5, #1
   21b58:	e007      	b.n	21b6a <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21b5a:	2302      	movs	r3, #2
   21b5c:	e7eb      	b.n	21b36 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   21b5e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   21b62:	d305      	bcc.n	21b70 <write_cb+0x5c>
		return -err;
   21b64:	425b      	negs	r3, r3
   21b66:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   21b68:	7523      	strb	r3, [r4, #20]
}
   21b6a:	4628      	mov	r0, r5
   21b6c:	b003      	add	sp, #12
   21b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21b70:	230e      	movs	r3, #14
   21b72:	e7f9      	b.n	21b68 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   21b74:	2500      	movs	r5, #0
   21b76:	e7f8      	b.n	21b6a <write_cb+0x56>

00021b78 <att_chan_read>:
{
   21b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b7c:	4680      	mov	r8, r0
   21b7e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21b80:	4610      	mov	r0, r2
{
   21b82:	4699      	mov	r9, r3
   21b84:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21b86:	f7ff fe0d 	bl	217a4 <net_buf_frags_len>
   21b8a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21b8e:	4283      	cmp	r3, r0
{
   21b90:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21b92:	d97a      	bls.n	21c8a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   21b94:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21b98:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   21b9a:	4630      	mov	r0, r6
   21b9c:	f001 facb 	bl	23136 <net_buf_frag_last>
	size_t len, total = 0;
   21ba0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   21ba4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21ba6:	4630      	mov	r0, r6
   21ba8:	f7ff fdfc 	bl	217a4 <net_buf_frags_len>
   21bac:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   21bb0:	f105 0708 	add.w	r7, r5, #8
   21bb4:	1a24      	subs	r4, r4, r0
   21bb6:	4638      	mov	r0, r7
   21bb8:	f001 fb38 	bl	2322c <net_buf_simple_tailroom>
   21bbc:	4284      	cmp	r4, r0
   21bbe:	d211      	bcs.n	21be4 <att_chan_read+0x6c>
   21bc0:	4630      	mov	r0, r6
   21bc2:	f7ff fdef 	bl	217a4 <net_buf_frags_len>
   21bc6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   21bca:	1a24      	subs	r4, r4, r0
		if (!len) {
   21bcc:	bb34      	cbnz	r4, 21c1c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   21bce:	79b0      	ldrb	r0, [r6, #6]
   21bd0:	f7f8 f9b2 	bl	19f38 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21bd4:	2200      	movs	r2, #0
   21bd6:	2300      	movs	r3, #0
   21bd8:	f001 fa73 	bl	230c2 <net_buf_alloc_fixed>
			if (!frag) {
   21bdc:	4605      	mov	r5, r0
   21bde:	b930      	cbnz	r0, 21bee <att_chan_read+0x76>
	return total;
   21be0:	4657      	mov	r7, sl
   21be2:	e02c      	b.n	21c3e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   21be4:	4638      	mov	r0, r7
   21be6:	f001 fb21 	bl	2322c <net_buf_simple_tailroom>
   21bea:	4604      	mov	r4, r0
   21bec:	e7ee      	b.n	21bcc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   21bee:	4601      	mov	r1, r0
   21bf0:	4630      	mov	r0, r6
   21bf2:	f001 fab1 	bl	23158 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21bf6:	4630      	mov	r0, r6
   21bf8:	f7ff fdd4 	bl	217a4 <net_buf_frags_len>
   21bfc:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   21c00:	f105 0708 	add.w	r7, r5, #8
   21c04:	1a24      	subs	r4, r4, r0
   21c06:	4638      	mov	r0, r7
   21c08:	f001 fb10 	bl	2322c <net_buf_simple_tailroom>
   21c0c:	4284      	cmp	r4, r0
   21c0e:	d21a      	bcs.n	21c46 <att_chan_read+0xce>
   21c10:	4630      	mov	r0, r6
   21c12:	f7ff fdc7 	bl	217a4 <net_buf_frags_len>
   21c16:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   21c1a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21c1c:	68a9      	ldr	r1, [r5, #8]
   21c1e:	89aa      	ldrh	r2, [r5, #12]
   21c20:	f8db 7004 	ldr.w	r7, [fp, #4]
   21c24:	9803      	ldr	r0, [sp, #12]
   21c26:	f8cd 9000 	str.w	r9, [sp]
   21c2a:	440a      	add	r2, r1
   21c2c:	b2a3      	uxth	r3, r4
   21c2e:	4659      	mov	r1, fp
   21c30:	47b8      	blx	r7
		if (read < 0) {
   21c32:	1e07      	subs	r7, r0, #0
   21c34:	da0c      	bge.n	21c50 <att_chan_read+0xd8>
				return total;
   21c36:	f1ba 0f00 	cmp.w	sl, #0
   21c3a:	bf18      	it	ne
   21c3c:	4657      	movne	r7, sl
}
   21c3e:	4638      	mov	r0, r7
   21c40:	b005      	add	sp, #20
   21c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c46:	4638      	mov	r0, r7
   21c48:	f001 faf0 	bl	2322c <net_buf_simple_tailroom>
   21c4c:	4604      	mov	r4, r0
   21c4e:	e7e5      	b.n	21c1c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21c52:	b993      	cbnz	r3, 21c7a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   21c54:	4639      	mov	r1, r7
   21c56:	f105 0008 	add.w	r0, r5, #8
   21c5a:	f001 fa9a 	bl	23192 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21c5e:	4630      	mov	r0, r6
   21c60:	f7ff fda0 	bl	217a4 <net_buf_frags_len>
   21c64:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   21c68:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21c6a:	4283      	cmp	r3, r0
		total += read;
   21c6c:	44ba      	add	sl, r7
		offset += read;
   21c6e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21c72:	d9b5      	bls.n	21be0 <att_chan_read+0x68>
   21c74:	42a7      	cmp	r7, r4
   21c76:	d096      	beq.n	21ba6 <att_chan_read+0x2e>
   21c78:	e7b2      	b.n	21be0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21c7e:	4639      	mov	r1, r7
   21c80:	4628      	mov	r0, r5
   21c82:	4798      	blx	r3
   21c84:	2800      	cmp	r0, #0
   21c86:	d1e5      	bne.n	21c54 <att_chan_read+0xdc>
   21c88:	e7aa      	b.n	21be0 <att_chan_read+0x68>
		return 0;
   21c8a:	2700      	movs	r7, #0
   21c8c:	e7d7      	b.n	21c3e <att_chan_read+0xc6>

00021c8e <chan_req_send>:
{
   21c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21c90:	688f      	ldr	r7, [r1, #8]
{
   21c92:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21c94:	4638      	mov	r0, r7
   21c96:	f7ff fd85 	bl	217a4 <net_buf_frags_len>
   21c9a:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   21c9e:	4283      	cmp	r3, r0
{
   21ca0:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21ca2:	d30d      	bcc.n	21cc0 <chan_req_send+0x32>
	req->buf = NULL;
   21ca4:	2600      	movs	r6, #0
	chan->req = req;
   21ca6:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   21caa:	4632      	mov	r2, r6
	req->buf = NULL;
   21cac:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   21cae:	4620      	mov	r0, r4
   21cb0:	4639      	mov	r1, r7
   21cb2:	f7e7 f82b 	bl	8d0c <chan_send>
	if (err) {
   21cb6:	b110      	cbz	r0, 21cbe <chan_req_send+0x30>
		req->buf = buf;
   21cb8:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   21cba:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   21cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   21cc0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21cc4:	e7fb      	b.n	21cbe <chan_req_send+0x30>

00021cc6 <process_queue>:
{
   21cc6:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21cc8:	2200      	movs	r2, #0
{
   21cca:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21ccc:	2300      	movs	r3, #0
   21cce:	4608      	mov	r0, r1
{
   21cd0:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21cd2:	f001 f9fb 	bl	230cc <net_buf_get>
	if (buf) {
   21cd6:	4605      	mov	r5, r0
   21cd8:	b160      	cbz	r0, 21cf4 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21cda:	4601      	mov	r1, r0
   21cdc:	2200      	movs	r2, #0
   21cde:	4620      	mov	r0, r4
   21ce0:	f7e7 f814 	bl	8d0c <chan_send>
		if (err) {
   21ce4:	4604      	mov	r4, r0
   21ce6:	b118      	cbz	r0, 21cf0 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   21ce8:	4629      	mov	r1, r5
   21cea:	4630      	mov	r0, r6
   21cec:	f002 f997 	bl	2401e <k_queue_prepend>
}
   21cf0:	4620      	mov	r0, r4
   21cf2:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21cf4:	f06f 0401 	mvn.w	r4, #1
   21cf8:	e7fa      	b.n	21cf0 <process_queue+0x2a>

00021cfa <bt_att_chan_send_rsp>:
{
   21cfa:	b538      	push	{r3, r4, r5, lr}
   21cfc:	4604      	mov	r4, r0
   21cfe:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   21d00:	f7e7 f804 	bl	8d0c <chan_send>
	if (err) {
   21d04:	b130      	cbz	r0, 21d14 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   21d06:	4629      	mov	r1, r5
   21d08:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   21d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   21d10:	f001 ba00 	b.w	23114 <net_buf_put>
}
   21d14:	bd38      	pop	{r3, r4, r5, pc}

00021d16 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21d16:	b510      	push	{r4, lr}
	return list->head;
   21d18:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21d1a:	2200      	movs	r2, #0
   21d1c:	b153      	cbz	r3, 21d34 <sys_slist_find_and_remove.isra.0+0x1e>
   21d1e:	428b      	cmp	r3, r1
   21d20:	d10e      	bne.n	21d40 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   21d22:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   21d24:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   21d26:	b932      	cbnz	r2, 21d36 <sys_slist_find_and_remove.isra.0+0x20>
   21d28:	42a1      	cmp	r1, r4
	list->head = node;
   21d2a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21d2c:	d100      	bne.n	21d30 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   21d2e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   21d30:	2300      	movs	r3, #0
   21d32:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21d34:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   21d36:	42a1      	cmp	r1, r4
	parent->next = child;
   21d38:	6013      	str	r3, [r2, #0]
	list->tail = node;
   21d3a:	bf08      	it	eq
   21d3c:	6042      	streq	r2, [r0, #4]
}
   21d3e:	e7f7      	b.n	21d30 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   21d40:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21d42:	681b      	ldr	r3, [r3, #0]
   21d44:	e7ea      	b.n	21d1c <sys_slist_find_and_remove.isra.0+0x6>

00021d46 <att_exec_write_req>:
   21d46:	2006      	movs	r0, #6
   21d48:	4770      	bx	lr

00021d4a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21d4a:	30f0      	adds	r0, #240	; 0xf0
   21d4c:	f3bf 8f5b 	dmb	ish
   21d50:	e850 3f00 	ldrex	r3, [r0]
   21d54:	f023 0301 	bic.w	r3, r3, #1
   21d58:	e840 3200 	strex	r2, r3, [r0]
   21d5c:	2a00      	cmp	r2, #0
   21d5e:	d1f7      	bne.n	21d50 <chan_rsp_sent+0x6>
   21d60:	f3bf 8f5b 	dmb	ish
}
   21d64:	4770      	bx	lr

00021d66 <chan_cfm_sent>:
   21d66:	30f0      	adds	r0, #240	; 0xf0
   21d68:	f3bf 8f5b 	dmb	ish
   21d6c:	e850 3f00 	ldrex	r3, [r0]
   21d70:	f023 0302 	bic.w	r3, r3, #2
   21d74:	e840 3200 	strex	r2, r3, [r0]
   21d78:	2a00      	cmp	r2, #0
   21d7a:	d1f7      	bne.n	21d6c <chan_cfm_sent+0x6>
   21d7c:	f3bf 8f5b 	dmb	ish
}
   21d80:	4770      	bx	lr

00021d82 <read_cb>:
{
   21d82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21d86:	f8d2 8000 	ldr.w	r8, [r2]
{
   21d8a:	4606      	mov	r6, r0
	data->err = 0x00;
   21d8c:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21d8e:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   21d92:	7317      	strb	r7, [r2, #12]
{
   21d94:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21d96:	4631      	mov	r1, r6
   21d98:	2215      	movs	r2, #21
   21d9a:	f000 fe20 	bl	229de <bt_gatt_check_perm>
   21d9e:	4604      	mov	r4, r0
   21da0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   21da2:	b9a0      	cbnz	r0, 21dce <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21da4:	e9cd 0000 	strd	r0, r0, [sp]
   21da8:	88ab      	ldrh	r3, [r5, #4]
   21daa:	68aa      	ldr	r2, [r5, #8]
   21dac:	4631      	mov	r1, r6
   21dae:	4640      	mov	r0, r8
   21db0:	f7ff fee2 	bl	21b78 <att_chan_read>
	if (ret < 0) {
   21db4:	1e03      	subs	r3, r0, #0
   21db6:	da0c      	bge.n	21dd2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   21db8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21dbc:	bf26      	itte	cs
   21dbe:	425b      	negcs	r3, r3
   21dc0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21dc2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21dc4:	732b      	strb	r3, [r5, #12]
}
   21dc6:	4620      	mov	r0, r4
   21dc8:	b002      	add	sp, #8
   21dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   21dce:	463c      	mov	r4, r7
   21dd0:	e7f9      	b.n	21dc6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   21dd2:	2401      	movs	r4, #1
   21dd4:	e7f7      	b.n	21dc6 <read_cb+0x44>

00021dd6 <bt_att_sent>:
{
   21dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21dd8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   21ddc:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21de0:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21de2:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21de6:	b10b      	cbz	r3, 21dec <bt_att_sent+0x16>
		chan->sent(chan);
   21de8:	4638      	mov	r0, r7
   21dea:	4798      	blx	r3
   21dec:	f3bf 8f5b 	dmb	ish
   21df0:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   21df4:	e853 2f00 	ldrex	r2, [r3]
   21df8:	f022 0210 	bic.w	r2, r2, #16
   21dfc:	e843 2100 	strex	r1, r2, [r3]
   21e00:	2900      	cmp	r1, #0
   21e02:	d1f7      	bne.n	21df4 <bt_att_sent+0x1e>
   21e04:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21e08:	b30c      	cbz	r4, 21e4e <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21e0a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   21e0e:	b98b      	cbnz	r3, 21e34 <bt_att_sent+0x5e>
   21e10:	6863      	ldr	r3, [r4, #4]
   21e12:	b17b      	cbz	r3, 21e34 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21e14:	1d20      	adds	r0, r4, #4
   21e16:	f7ff fcbb 	bl	21790 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21e1a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21e1c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21e1e:	4638      	mov	r0, r7
   21e20:	f7ff ff35 	bl	21c8e <chan_req_send>
   21e24:	2800      	cmp	r0, #0
   21e26:	da12      	bge.n	21e4e <bt_att_sent+0x78>
	parent->next = child;
   21e28:	6863      	ldr	r3, [r4, #4]
   21e2a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21e2c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21e2e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21e30:	b903      	cbnz	r3, 21e34 <bt_att_sent+0x5e>
	list->tail = node;
   21e32:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21e34:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   21e38:	4638      	mov	r0, r7
   21e3a:	f7ff ff44 	bl	21cc6 <process_queue>
	if (!err) {
   21e3e:	b130      	cbz	r0, 21e4e <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   21e40:	f104 010c 	add.w	r1, r4, #12
   21e44:	4638      	mov	r0, r7
}
   21e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21e4a:	f7ff bf3c 	b.w	21cc6 <process_queue>
}
   21e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021e50 <att_req_send_process>:
{
   21e50:	b570      	push	{r4, r5, r6, lr}
   21e52:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   21e54:	3004      	adds	r0, #4
   21e56:	f7ff fc9b 	bl	21790 <sys_slist_get>
	if (!node) {
   21e5a:	4605      	mov	r5, r0
   21e5c:	b1b8      	cbz	r0, 21e8e <att_req_send_process+0x3e>
	return list->head;
   21e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21e60:	b14b      	cbz	r3, 21e76 <att_req_send_process+0x26>
	return node->next;
   21e62:	681e      	ldr	r6, [r3, #0]
   21e64:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   21e68:	b10e      	cbz	r6, 21e6e <att_req_send_process+0x1e>
   21e6a:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   21e6e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   21e72:	b13b      	cbz	r3, 21e84 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21e74:	b966      	cbnz	r6, 21e90 <att_req_send_process+0x40>
	parent->next = child;
   21e76:	6863      	ldr	r3, [r4, #4]
   21e78:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21e7a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21e7c:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21e7e:	b933      	cbnz	r3, 21e8e <att_req_send_process+0x3e>
	list->tail = node;
   21e80:	60a5      	str	r5, [r4, #8]
}
   21e82:	e004      	b.n	21e8e <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   21e84:	4629      	mov	r1, r5
   21e86:	f7ff ff02 	bl	21c8e <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21e8a:	2800      	cmp	r0, #0
   21e8c:	dbf2      	blt.n	21e74 <att_req_send_process+0x24>
}
   21e8e:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   21e90:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21e94:	b10b      	cbz	r3, 21e9a <att_req_send_process+0x4a>
   21e96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   21e9a:	4630      	mov	r0, r6
   21e9c:	461e      	mov	r6, r3
   21e9e:	e7e6      	b.n	21e6e <att_req_send_process+0x1e>

00021ea0 <bt_att_status>:
{
   21ea0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21ea2:	f3bf 8f5b 	dmb	ish
   21ea6:	680b      	ldr	r3, [r1, #0]
   21ea8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21eac:	07db      	lsls	r3, r3, #31
{
   21eae:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21eb0:	d519      	bpl.n	21ee6 <bt_att_status+0x46>
	if (!chan->att) {
   21eb2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21eb6:	b1b0      	cbz	r0, 21ee6 <bt_att_status+0x46>
	if (chan->req) {
   21eb8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   21ebc:	b99b      	cbnz	r3, 21ee6 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21ebe:	3004      	adds	r0, #4
   21ec0:	f7ff fc66 	bl	21790 <sys_slist_get>
	if (!node) {
   21ec4:	4604      	mov	r4, r0
   21ec6:	b170      	cbz	r0, 21ee6 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   21ec8:	4601      	mov	r1, r0
   21eca:	f1a5 0008 	sub.w	r0, r5, #8
   21ece:	f7ff fede 	bl	21c8e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21ed2:	2800      	cmp	r0, #0
   21ed4:	da07      	bge.n	21ee6 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21ed6:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   21eda:	685a      	ldr	r2, [r3, #4]
   21edc:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21ede:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21ee0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21ee2:	b902      	cbnz	r2, 21ee6 <bt_att_status+0x46>
	list->tail = node;
   21ee4:	609c      	str	r4, [r3, #8]
}
   21ee6:	bd38      	pop	{r3, r4, r5, pc}

00021ee8 <bt_att_chan_create_pdu>:
{
   21ee8:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21eea:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21eee:	3201      	adds	r2, #1
   21ef0:	429a      	cmp	r2, r3
{
   21ef2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21ef4:	d81b      	bhi.n	21f2e <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   21ef6:	4608      	mov	r0, r1
   21ef8:	f7ff fc74 	bl	217e4 <att_op_get_type>
   21efc:	2802      	cmp	r0, #2
   21efe:	d001      	beq.n	21f04 <bt_att_chan_create_pdu+0x1c>
   21f00:	2804      	cmp	r0, #4
   21f02:	d10f      	bne.n	21f24 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   21f04:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21f08:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   21f0a:	2100      	movs	r1, #0
   21f0c:	4608      	mov	r0, r1
   21f0e:	f7ff fb6c 	bl	215ea <bt_l2cap_create_pdu_timeout>
   21f12:	4604      	mov	r4, r0
	if (!buf) {
   21f14:	b120      	cbz	r0, 21f20 <bt_att_chan_create_pdu+0x38>
   21f16:	2101      	movs	r1, #1
   21f18:	3008      	adds	r0, #8
   21f1a:	f001 f93a 	bl	23192 <net_buf_simple_add>
	hdr->code = op;
   21f1e:	7005      	strb	r5, [r0, #0]
}
   21f20:	4620      	mov	r0, r4
   21f22:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   21f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21f2c:	e7ed      	b.n	21f0a <bt_att_chan_create_pdu+0x22>
		return NULL;
   21f2e:	2400      	movs	r4, #0
   21f30:	e7f6      	b.n	21f20 <bt_att_chan_create_pdu+0x38>

00021f32 <att_write_req>:
{
   21f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f34:	460c      	mov	r4, r1
   21f36:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21f38:	f101 0008 	add.w	r0, r1, #8
   21f3c:	f001 f96a 	bl	23214 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   21f40:	89a2      	ldrh	r2, [r4, #12]
   21f42:	9201      	str	r2, [sp, #4]
   21f44:	68a2      	ldr	r2, [r4, #8]
   21f46:	9200      	str	r2, [sp, #0]
   21f48:	4603      	mov	r3, r0
   21f4a:	2213      	movs	r2, #19
   21f4c:	2112      	movs	r1, #18
   21f4e:	4628      	mov	r0, r5
   21f50:	f7e7 f872 	bl	9038 <att_write_rsp.constprop.0>
}
   21f54:	b003      	add	sp, #12
   21f56:	bd30      	pop	{r4, r5, pc}

00021f58 <att_write_cmd>:
{
   21f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f5a:	460c      	mov	r4, r1
   21f5c:	4605      	mov	r5, r0
   21f5e:	f101 0008 	add.w	r0, r1, #8
   21f62:	f001 f957 	bl	23214 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21f66:	89a2      	ldrh	r2, [r4, #12]
   21f68:	9201      	str	r2, [sp, #4]
   21f6a:	68a2      	ldr	r2, [r4, #8]
   21f6c:	9200      	str	r2, [sp, #0]
   21f6e:	2200      	movs	r2, #0
   21f70:	4603      	mov	r3, r0
   21f72:	4611      	mov	r1, r2
   21f74:	4628      	mov	r0, r5
   21f76:	f7e7 f85f 	bl	9038 <att_write_rsp.constprop.0>
}
   21f7a:	b003      	add	sp, #12
   21f7c:	bd30      	pop	{r4, r5, pc}

00021f7e <bt_att_create_pdu>:
{
   21f7e:	b570      	push	{r4, r5, r6, lr}
   21f80:	460e      	mov	r6, r1
   21f82:	4615      	mov	r5, r2
	att = att_get(conn);
   21f84:	f7ff fda5 	bl	21ad2 <att_get>
	if (!att) {
   21f88:	b168      	cbz	r0, 21fa6 <bt_att_create_pdu+0x28>
	return list->head;
   21f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21f8c:	b15b      	cbz	r3, 21fa6 <bt_att_create_pdu+0x28>
   21f8e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   21f92:	681b      	ldr	r3, [r3, #0]
   21f94:	b10b      	cbz	r3, 21f9a <bt_att_create_pdu+0x1c>
   21f96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21f9a:	1c6a      	adds	r2, r5, #1
   21f9c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   21fa0:	428a      	cmp	r2, r1
   21fa2:	d902      	bls.n	21faa <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21fa4:	b93b      	cbnz	r3, 21fb6 <bt_att_create_pdu+0x38>
}
   21fa6:	2000      	movs	r0, #0
   21fa8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   21faa:	462a      	mov	r2, r5
   21fac:	4631      	mov	r1, r6
}
   21fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   21fb2:	f7ff bf99 	b.w	21ee8 <bt_att_chan_create_pdu>
   21fb6:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21fba:	b10c      	cbz	r4, 21fc0 <bt_att_create_pdu+0x42>
   21fbc:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   21fc0:	4618      	mov	r0, r3
   21fc2:	4623      	mov	r3, r4
   21fc4:	e7ea      	b.n	21f9c <bt_att_create_pdu+0x1e>

00021fc6 <att_read_blob_req>:
{
   21fc6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21fc8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21fca:	8813      	ldrh	r3, [r2, #0]
   21fcc:	8852      	ldrh	r2, [r2, #2]
   21fce:	9200      	str	r2, [sp, #0]
   21fd0:	210c      	movs	r1, #12
   21fd2:	220d      	movs	r2, #13
   21fd4:	f7e7 f966 	bl	92a4 <att_read_rsp>
}
   21fd8:	b003      	add	sp, #12
   21fda:	f85d fb04 	ldr.w	pc, [sp], #4

00021fde <att_read_req>:
{
   21fde:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21fe0:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21fe2:	2200      	movs	r2, #0
   21fe4:	881b      	ldrh	r3, [r3, #0]
   21fe6:	9200      	str	r2, [sp, #0]
   21fe8:	210a      	movs	r1, #10
   21fea:	220b      	movs	r2, #11
   21fec:	f7e7 f95a 	bl	92a4 <att_read_rsp>
}
   21ff0:	b003      	add	sp, #12
   21ff2:	f85d fb04 	ldr.w	pc, [sp], #4

00021ff6 <bt_att_init>:
	bt_gatt_init();
   21ff6:	f7e7 bcb7 	b.w	9968 <bt_gatt_init>

00021ffa <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21ffa:	898a      	ldrh	r2, [r1, #12]
   21ffc:	6889      	ldr	r1, [r1, #8]
   21ffe:	2300      	movs	r3, #0
   22000:	f7e7 bb12 	b.w	9628 <att_handle_rsp>

00022004 <att_handle_find_type_rsp>:
   22004:	f7ff bff9 	b.w	21ffa <att_handle_find_info_rsp>

00022008 <att_handle_read_type_rsp>:
   22008:	f7ff bff7 	b.w	21ffa <att_handle_find_info_rsp>

0002200c <att_handle_read_rsp>:
   2200c:	f7ff bff5 	b.w	21ffa <att_handle_find_info_rsp>

00022010 <att_handle_read_blob_rsp>:
   22010:	f7ff bff3 	b.w	21ffa <att_handle_find_info_rsp>

00022014 <att_handle_read_mult_rsp>:
   22014:	f7ff bff1 	b.w	21ffa <att_handle_find_info_rsp>

00022018 <att_handle_read_group_rsp>:
   22018:	f7ff bfef 	b.w	21ffa <att_handle_find_info_rsp>

0002201c <att_handle_write_rsp>:
   2201c:	f7ff bfed 	b.w	21ffa <att_handle_find_info_rsp>

00022020 <att_handle_prepare_write_rsp>:
   22020:	f7ff bfeb 	b.w	21ffa <att_handle_find_info_rsp>

00022024 <att_handle_exec_write_rsp>:
   22024:	f7ff bfe9 	b.w	21ffa <att_handle_find_info_rsp>

00022028 <att_confirm>:
   22028:	f7ff bfe7 	b.w	21ffa <att_handle_find_info_rsp>

0002202c <att_mtu_rsp>:
{
   2202c:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2202e:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   22030:	8833      	ldrh	r3, [r6, #0]
   22032:	2b16      	cmp	r3, #22
{
   22034:	4604      	mov	r4, r0
   22036:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   22038:	d806      	bhi.n	22048 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2203a:	2200      	movs	r2, #0
   2203c:	2304      	movs	r3, #4
   2203e:	4611      	mov	r1, r2
}
   22040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   22044:	f7e7 baf0 	b.w	9628 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   22048:	2317      	movs	r3, #23
   2204a:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2204e:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   22052:	f7ff fc0d 	bl	21870 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   22056:	89aa      	ldrh	r2, [r5, #12]
   22058:	2300      	movs	r3, #0
   2205a:	4631      	mov	r1, r6
   2205c:	4620      	mov	r0, r4
   2205e:	e7ef      	b.n	22040 <att_mtu_rsp+0x14>

00022060 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   22060:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   22064:	f7e7 bb22 	b.w	96ac <bt_att_disconnected>

00022068 <bt_att_send>:
{
   22068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2206c:	4607      	mov	r7, r0
   2206e:	460d      	mov	r5, r1
   22070:	4616      	mov	r6, r2
   22072:	4698      	mov	r8, r3
	att = att_get(conn);
   22074:	f7ff fd2d 	bl	21ad2 <att_get>
	if (!att) {
   22078:	4604      	mov	r4, r0
   2207a:	b938      	cbnz	r0, 2208c <bt_att_send+0x24>
		net_buf_unref(buf);
   2207c:	4628      	mov	r0, r5
   2207e:	f7f8 f81f 	bl	1a0c0 <net_buf_unref>
		return -ENOTCONN;
   22082:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   22086:	b002      	add	sp, #8
   22088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2208c:	b146      	cbz	r6, 220a0 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2208e:	f8cd 8000 	str.w	r8, [sp]
   22092:	4633      	mov	r3, r6
   22094:	462a      	mov	r2, r5
   22096:	2104      	movs	r1, #4
   22098:	4638      	mov	r0, r7
   2209a:	f7ff faa9 	bl	215f0 <bt_l2cap_send_cb>
   2209e:	e7f2      	b.n	22086 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   220a0:	f100 060c 	add.w	r6, r0, #12
   220a4:	4629      	mov	r1, r5
   220a6:	4630      	mov	r0, r6
   220a8:	f001 f834 	bl	23114 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   220ac:	2200      	movs	r2, #0
   220ae:	2300      	movs	r3, #0
   220b0:	4630      	mov	r0, r6
   220b2:	f001 f80b 	bl	230cc <net_buf_get>
	if (!buf) {
   220b6:	4605      	mov	r5, r0
   220b8:	b908      	cbnz	r0, 220be <bt_att_send+0x56>
	return 0;
   220ba:	2000      	movs	r0, #0
   220bc:	e7e3      	b.n	22086 <bt_att_send+0x1e>
	return list->head;
   220be:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   220c0:	b1a3      	cbz	r3, 220ec <bt_att_send+0x84>
	return node->next;
   220c2:	681c      	ldr	r4, [r3, #0]
   220c4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   220c8:	b10c      	cbz	r4, 220ce <bt_att_send+0x66>
   220ca:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   220ce:	2200      	movs	r2, #0
   220d0:	4629      	mov	r1, r5
   220d2:	f7e6 fe1b 	bl	8d0c <chan_send>
		if (err >= 0) {
   220d6:	2800      	cmp	r0, #0
   220d8:	daef      	bge.n	220ba <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   220da:	b13c      	cbz	r4, 220ec <bt_att_send+0x84>
   220dc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   220e0:	b10b      	cbz	r3, 220e6 <bt_att_send+0x7e>
   220e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   220e6:	4620      	mov	r0, r4
   220e8:	461c      	mov	r4, r3
   220ea:	e7f0      	b.n	220ce <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   220ec:	4629      	mov	r1, r5
   220ee:	4630      	mov	r0, r6
   220f0:	f001 ff95 	bl	2401e <k_queue_prepend>
   220f4:	e7e1      	b.n	220ba <bt_att_send+0x52>

000220f6 <bt_att_req_send>:
{
   220f6:	b510      	push	{r4, lr}
   220f8:	460c      	mov	r4, r1
	att = att_get(conn);
   220fa:	f7ff fcea 	bl	21ad2 <att_get>
	if (!att) {
   220fe:	b160      	cbz	r0, 2211a <bt_att_req_send+0x24>
	parent->next = child;
   22100:	2300      	movs	r3, #0
   22102:	6023      	str	r3, [r4, #0]
	return list->tail;
   22104:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   22106:	b92b      	cbnz	r3, 22114 <bt_att_req_send+0x1e>
	list->head = node;
   22108:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   2210c:	f7ff fea0 	bl	21e50 <att_req_send_process>
	return 0;
   22110:	2000      	movs	r0, #0
}
   22112:	bd10      	pop	{r4, pc}
	parent->next = child;
   22114:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22116:	6084      	str	r4, [r0, #8]
}
   22118:	e7f8      	b.n	2210c <bt_att_req_send+0x16>
		return -ENOTCONN;
   2211a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2211e:	e7f8      	b.n	22112 <bt_att_req_send+0x1c>

00022120 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   22120:	b510      	push	{r4, lr}
   22122:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   22124:	f7ff fcd5 	bl	21ad2 <att_get>
	if (!att) {
   22128:	b198      	cbz	r0, 22152 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2212a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2212c:	b14b      	cbz	r3, 22142 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2212e:	f853 2c50 	ldr.w	r2, [r3, #-80]
   22132:	68d1      	ldr	r1, [r2, #12]
   22134:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   22136:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   2213a:	d009      	beq.n	22150 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2213c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   22140:	e7f4      	b.n	2212c <bt_att_find_req_by_user_data+0xc>
	return list->head;
   22142:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   22144:	b128      	cbz	r0, 22152 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   22146:	68c3      	ldr	r3, [r0, #12]
   22148:	42a3      	cmp	r3, r4
   2214a:	d002      	beq.n	22152 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2214c:	6800      	ldr	r0, [r0, #0]
   2214e:	e7f9      	b.n	22144 <bt_att_find_req_by_user_data+0x24>
   22150:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   22152:	bd10      	pop	{r4, pc}

00022154 <gatt_ccc_changed>:
{
   22154:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   22156:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   22158:	895a      	ldrh	r2, [r3, #10]
   2215a:	428a      	cmp	r2, r1
   2215c:	d003      	beq.n	22166 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2215e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   22160:	68db      	ldr	r3, [r3, #12]
   22162:	b103      	cbz	r3, 22166 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   22164:	4718      	bx	r3
}
   22166:	4770      	bx	lr

00022168 <gatt_indicate_rsp>:
{
   22168:	b510      	push	{r4, lr}
   2216a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2216c:	68a3      	ldr	r3, [r4, #8]
{
   2216e:	460a      	mov	r2, r1
	if (params->func) {
   22170:	b10b      	cbz	r3, 22176 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   22172:	4621      	mov	r1, r4
   22174:	4798      	blx	r3
	params->_ref--;
   22176:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22178:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2217a:	3b01      	subs	r3, #1
   2217c:	b2db      	uxtb	r3, r3
   2217e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22180:	b122      	cbz	r2, 2218c <gatt_indicate_rsp+0x24>
   22182:	b91b      	cbnz	r3, 2218c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   22184:	4620      	mov	r0, r4
}
   22186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2218a:	4710      	bx	r2
}
   2218c:	bd10      	pop	{r4, pc}

0002218e <match_uuid>:
	data->attr = attr;
   2218e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   22190:	8091      	strh	r1, [r2, #4]
}
   22192:	2000      	movs	r0, #0
   22194:	4770      	bx	lr

00022196 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22196:	2207      	movs	r2, #7
   22198:	f7fe bac6 	b.w	20728 <memcpy>

0002219c <gatt_sub_free>:
{
   2219c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   2219e:	2300      	movs	r3, #0
   221a0:	4669      	mov	r1, sp
   221a2:	3001      	adds	r0, #1
   221a4:	9300      	str	r3, [sp, #0]
   221a6:	f8cd 3003 	str.w	r3, [sp, #3]
   221aa:	f7ff fff4 	bl	22196 <bt_addr_le_copy>
}
   221ae:	b003      	add	sp, #12
   221b0:	f85d fb04 	ldr.w	pc, [sp], #4

000221b4 <gatt_sub_remove>:
{
   221b4:	b570      	push	{r4, r5, r6, lr}
   221b6:	460c      	mov	r4, r1
	if (params) {
   221b8:	4619      	mov	r1, r3
   221ba:	b16b      	cbz	r3, 221d8 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   221bc:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   221c0:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   221c2:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   221c4:	b97a      	cbnz	r2, 221e6 <gatt_sub_remove+0x32>
   221c6:	42ae      	cmp	r6, r5
	list->head = node;
   221c8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   221ca:	d100      	bne.n	221ce <gatt_sub_remove+0x1a>
	list->tail = node;
   221cc:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   221ce:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   221d0:	680d      	ldr	r5, [r1, #0]
   221d2:	614b      	str	r3, [r1, #20]
   221d4:	461a      	mov	r2, r3
   221d6:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   221d8:	68a3      	ldr	r3, [r4, #8]
   221da:	b94b      	cbnz	r3, 221f0 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   221dc:	4620      	mov	r0, r4
}
   221de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   221e2:	f7ff bfdb 	b.w	2219c <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   221e6:	42ae      	cmp	r6, r5
	parent->next = child;
   221e8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   221ea:	bf08      	it	eq
   221ec:	60e2      	streq	r2, [r4, #12]
}
   221ee:	e7ee      	b.n	221ce <gatt_sub_remove+0x1a>
}
   221f0:	bd70      	pop	{r4, r5, r6, pc}

000221f2 <write_name>:
{
   221f2:	b570      	push	{r4, r5, r6, lr}
   221f4:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   221f6:	2100      	movs	r1, #0
{
   221f8:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   221fc:	9101      	str	r1, [sp, #4]
{
   221fe:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   22200:	a802      	add	r0, sp, #8
   22202:	223d      	movs	r2, #61	; 0x3d
{
   22204:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   22206:	f7fe fa9a 	bl	2073e <memset>
	if (offset >= sizeof(value)) {
   2220a:	2d40      	cmp	r5, #64	; 0x40
   2220c:	d80d      	bhi.n	2222a <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   2220e:	4425      	add	r5, r4
   22210:	2d40      	cmp	r5, #64	; 0x40
   22212:	dc0d      	bgt.n	22230 <write_name+0x3e>
	memcpy(value, buf, len);
   22214:	4622      	mov	r2, r4
   22216:	4631      	mov	r1, r6
   22218:	a801      	add	r0, sp, #4
   2221a:	f7fe fa85 	bl	20728 <memcpy>
	bt_set_name(value);
   2221e:	a801      	add	r0, sp, #4
   22220:	f7e5 f876 	bl	7310 <bt_set_name>
}
   22224:	4620      	mov	r0, r4
   22226:	b012      	add	sp, #72	; 0x48
   22228:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2222a:	f06f 0406 	mvn.w	r4, #6
   2222e:	e7f9      	b.n	22224 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   22230:	f06f 040c 	mvn.w	r4, #12
   22234:	e7f6      	b.n	22224 <write_name+0x32>

00022236 <atomic_get>:
   22236:	f3bf 8f5b 	dmb	ish
   2223a:	6800      	ldr	r0, [r0, #0]
   2223c:	f3bf 8f5b 	dmb	ish
}
   22240:	4770      	bx	lr

00022242 <gen_hash_m>:
{
   22242:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22244:	6807      	ldr	r7, [r0, #0]
   22246:	783d      	ldrb	r5, [r7, #0]
{
   22248:	b089      	sub	sp, #36	; 0x24
   2224a:	4606      	mov	r6, r0
   2224c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2224e:	b10d      	cbz	r5, 22254 <gen_hash_m+0x12>
	switch (u16->val) {
   22250:	2501      	movs	r5, #1
   22252:	e014      	b.n	2227e <gen_hash_m+0x3c>
   22254:	887b      	ldrh	r3, [r7, #2]
   22256:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2225a:	d004      	beq.n	22266 <gen_hash_m+0x24>
   2225c:	d812      	bhi.n	22284 <gen_hash_m+0x42>
   2225e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22262:	2b03      	cmp	r3, #3
   22264:	d8f4      	bhi.n	22250 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22266:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2226a:	2202      	movs	r2, #2
   2226c:	f10d 010a 	add.w	r1, sp, #10
   22270:	4620      	mov	r0, r4
   22272:	f7fe f969 	bl	20548 <tc_cmac_update>
   22276:	b9e0      	cbnz	r0, 222b2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   22278:	f06f 0315 	mvn.w	r3, #21
   2227c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2227e:	4628      	mov	r0, r5
   22280:	b009      	add	sp, #36	; 0x24
   22282:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22284:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   22288:	33ff      	adds	r3, #255	; 0xff
   2228a:	b29b      	uxth	r3, r3
   2228c:	2b04      	cmp	r3, #4
   2228e:	d8df      	bhi.n	22250 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22290:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22294:	2202      	movs	r2, #2
   22296:	f10d 010a 	add.w	r1, sp, #10
   2229a:	4620      	mov	r0, r4
   2229c:	f7fe f954 	bl	20548 <tc_cmac_update>
   222a0:	2800      	cmp	r0, #0
   222a2:	d0e9      	beq.n	22278 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   222a4:	887b      	ldrh	r3, [r7, #2]
   222a6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   222aa:	2202      	movs	r2, #2
   222ac:	f10d 010a 	add.w	r1, sp, #10
   222b0:	e016      	b.n	222e0 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   222b2:	887b      	ldrh	r3, [r7, #2]
   222b4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   222b8:	2202      	movs	r2, #2
   222ba:	f10d 010a 	add.w	r1, sp, #10
   222be:	4620      	mov	r0, r4
   222c0:	f7fe f942 	bl	20548 <tc_cmac_update>
   222c4:	2800      	cmp	r0, #0
   222c6:	d0d7      	beq.n	22278 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   222c8:	2000      	movs	r0, #0
   222ca:	aa03      	add	r2, sp, #12
   222cc:	6877      	ldr	r7, [r6, #4]
   222ce:	9000      	str	r0, [sp, #0]
   222d0:	2313      	movs	r3, #19
   222d2:	4631      	mov	r1, r6
   222d4:	47b8      	blx	r7
		if (len < 0) {
   222d6:	1e02      	subs	r2, r0, #0
   222d8:	da01      	bge.n	222de <gen_hash_m+0x9c>
			state->err = len;
   222da:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   222dc:	e7cf      	b.n	2227e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   222de:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   222e0:	4620      	mov	r0, r4
   222e2:	f7fe f931 	bl	20548 <tc_cmac_update>
   222e6:	2800      	cmp	r0, #0
   222e8:	d1b2      	bne.n	22250 <gen_hash_m+0xe>
   222ea:	e7c5      	b.n	22278 <gen_hash_m+0x36>

000222ec <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   222ec:	2207      	movs	r2, #7
   222ee:	f7fe ba0a 	b.w	20706 <memcmp>

000222f2 <find_ccc_cfg>:
{
   222f2:	b513      	push	{r0, r1, r4, lr}
						    &cfg->peer)) {
   222f4:	1c4a      	adds	r2, r1, #1
{
   222f6:	460c      	mov	r4, r1
		if (conn) {
   222f8:	b140      	cbz	r0, 2230c <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   222fa:	7809      	ldrb	r1, [r1, #0]
   222fc:	f7ff f86d 	bl	213da <bt_conn_is_peer_addr_le>
	return NULL;
   22300:	2800      	cmp	r0, #0
   22302:	bf08      	it	eq
   22304:	2400      	moveq	r4, #0
}
   22306:	4620      	mov	r0, r4
   22308:	b002      	add	sp, #8
   2230a:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2230c:	9000      	str	r0, [sp, #0]
   2230e:	4669      	mov	r1, sp
   22310:	f8cd 0003 	str.w	r0, [sp, #3]
   22314:	4610      	mov	r0, r2
   22316:	f7ff ffe9 	bl	222ec <bt_addr_le_cmp>
	return NULL;
   2231a:	2800      	cmp	r0, #0
   2231c:	bf18      	it	ne
   2231e:	2400      	movne	r4, #0
   22320:	e7f1      	b.n	22306 <find_ccc_cfg+0x14>

00022322 <bt_gatt_attr_write_ccc>:
{
   22322:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22326:	461f      	mov	r7, r3
   22328:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2232c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   22330:	4606      	mov	r6, r0
   22332:	4688      	mov	r8, r1
	if (offset) {
   22334:	2b00      	cmp	r3, #0
   22336:	d141      	bne.n	223bc <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   22338:	1e7b      	subs	r3, r7, #1
   2233a:	2b01      	cmp	r3, #1
   2233c:	d841      	bhi.n	223c2 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   2233e:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   22340:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   22342:	4649      	mov	r1, r9
   22344:	bf14      	ite	ne
   22346:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   22348:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   2234a:	f7ff ffd2 	bl	222f2 <find_ccc_cfg>
	if (!cfg) {
   2234e:	4604      	mov	r4, r0
   22350:	b980      	cbnz	r0, 22374 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   22352:	b91d      	cbnz	r5, 2235c <bt_gatt_attr_write_ccc+0x3a>
			return len;
   22354:	4638      	mov	r0, r7
}
   22356:	b003      	add	sp, #12
   22358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2235c:	4649      	mov	r1, r9
   2235e:	f7ff ffc8 	bl	222f2 <find_ccc_cfg>
		if (!cfg) {
   22362:	4604      	mov	r4, r0
   22364:	b380      	cbz	r0, 223c8 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   22366:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2236a:	3001      	adds	r0, #1
   2236c:	f7ff ff13 	bl	22196 <bt_addr_le_copy>
		cfg->id = conn->id;
   22370:	7a33      	ldrb	r3, [r6, #8]
   22372:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   22374:	f8d9 3010 	ldr.w	r3, [r9, #16]
   22378:	b9a3      	cbnz	r3, 223a4 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   2237a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   2237e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   22380:	42ab      	cmp	r3, r5
   22382:	d003      	beq.n	2238c <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   22384:	4649      	mov	r1, r9
   22386:	4640      	mov	r0, r8
   22388:	f7ff fee4 	bl	22154 <gatt_ccc_changed>
	if (!value) {
   2238c:	2d00      	cmp	r5, #0
   2238e:	d1e1      	bne.n	22354 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22390:	4669      	mov	r1, sp
   22392:	1c60      	adds	r0, r4, #1
   22394:	9500      	str	r5, [sp, #0]
   22396:	f8cd 5003 	str.w	r5, [sp, #3]
   2239a:	f7ff fefc 	bl	22196 <bt_addr_le_copy>
	cfg->id = 0U;
   2239e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   223a0:	8125      	strh	r5, [r4, #8]
}
   223a2:	e7d7      	b.n	22354 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   223a4:	462a      	mov	r2, r5
   223a6:	4641      	mov	r1, r8
   223a8:	4630      	mov	r0, r6
   223aa:	4798      	blx	r3
		if (write < 0) {
   223ac:	2800      	cmp	r0, #0
   223ae:	dbd2      	blt.n	22356 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   223b0:	3801      	subs	r0, #1
   223b2:	2801      	cmp	r0, #1
   223b4:	d9e1      	bls.n	2237a <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   223b6:	f06f 000d 	mvn.w	r0, #13
   223ba:	e7cc      	b.n	22356 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   223bc:	f06f 0006 	mvn.w	r0, #6
   223c0:	e7c9      	b.n	22356 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   223c2:	f06f 000c 	mvn.w	r0, #12
   223c6:	e7c6      	b.n	22356 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   223c8:	f06f 0010 	mvn.w	r0, #16
   223cc:	e7c3      	b.n	22356 <bt_gatt_attr_write_ccc+0x34>

000223ce <read_included_uuid_encode>:
{
   223ce:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   223d0:	2102      	movs	r1, #2
   223d2:	3008      	adds	r0, #8
   223d4:	4614      	mov	r4, r2
   223d6:	f000 fedc 	bl	23192 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   223da:	8963      	ldrh	r3, [r4, #10]
   223dc:	8003      	strh	r3, [r0, #0]
}
   223de:	2000      	movs	r0, #0
   223e0:	bd10      	pop	{r4, pc}

000223e2 <gatt_find_info_encode>:
{
   223e2:	b510      	push	{r4, lr}
   223e4:	2104      	movs	r1, #4
   223e6:	3008      	adds	r0, #8
   223e8:	4614      	mov	r4, r2
   223ea:	f000 fed2 	bl	23192 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   223ee:	8923      	ldrh	r3, [r4, #8]
   223f0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   223f2:	89e3      	ldrh	r3, [r4, #14]
   223f4:	8043      	strh	r3, [r0, #2]
}
   223f6:	2000      	movs	r0, #0
   223f8:	bd10      	pop	{r4, pc}

000223fa <gatt_read_group_encode>:
{
   223fa:	b538      	push	{r3, r4, r5, lr}
   223fc:	f100 0408 	add.w	r4, r0, #8
   22400:	2104      	movs	r1, #4
   22402:	4620      	mov	r0, r4
   22404:	4615      	mov	r5, r2
   22406:	f000 fec4 	bl	23192 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2240a:	892b      	ldrh	r3, [r5, #8]
   2240c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2240e:	89eb      	ldrh	r3, [r5, #14]
   22410:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   22412:	7c2b      	ldrb	r3, [r5, #16]
   22414:	b933      	cbnz	r3, 22424 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   22416:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2241a:	4620      	mov	r0, r4
   2241c:	f000 fed0 	bl	231c0 <net_buf_simple_add_le16>
}
   22420:	2000      	movs	r0, #0
   22422:	bd38      	pop	{r3, r4, r5, pc}
   22424:	f642 0101 	movw	r1, #10241	; 0x2801
   22428:	e7f7      	b.n	2241a <gatt_read_group_encode+0x20>

0002242a <gatt_read_type_encode>:
{
   2242a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2242c:	f100 0408 	add.w	r4, r0, #8
   22430:	2104      	movs	r1, #4
   22432:	4620      	mov	r0, r4
   22434:	4615      	mov	r5, r2
   22436:	f000 feac 	bl	23192 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2243a:	892b      	ldrh	r3, [r5, #8]
   2243c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2243e:	89eb      	ldrh	r3, [r5, #14]
   22440:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   22442:	7c2b      	ldrb	r3, [r5, #16]
   22444:	2b02      	cmp	r3, #2
   22446:	d004      	beq.n	22452 <gatt_read_type_encode+0x28>
   22448:	2b03      	cmp	r3, #3
   2244a:	d009      	beq.n	22460 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2244c:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2244e:	8859      	ldrh	r1, [r3, #2]
   22450:	e001      	b.n	22456 <gatt_read_type_encode+0x2c>
   22452:	f642 0102 	movw	r1, #10242	; 0x2802
   22456:	4620      	mov	r0, r4
   22458:	f000 feb2 	bl	231c0 <net_buf_simple_add_le16>
}
   2245c:	2000      	movs	r0, #0
   2245e:	bd38      	pop	{r3, r4, r5, pc}
   22460:	f642 0103 	movw	r1, #10243	; 0x2803
   22464:	e7f7      	b.n	22456 <gatt_read_type_encode+0x2c>

00022466 <clear_cf_cfg>:
{
   22466:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22468:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2246a:	2500      	movs	r5, #0
   2246c:	4669      	mov	r1, sp
   2246e:	3001      	adds	r0, #1
   22470:	9500      	str	r5, [sp, #0]
   22472:	f8cd 5003 	str.w	r5, [sp, #3]
   22476:	f7ff fe8e 	bl	22196 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2247a:	f104 0008 	add.w	r0, r4, #8
   2247e:	2201      	movs	r2, #1
   22480:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22482:	340c      	adds	r4, #12
   22484:	f7fe f95b 	bl	2073e <memset>
   22488:	f3bf 8f5b 	dmb	ish
   2248c:	e854 3f00 	ldrex	r3, [r4]
   22490:	e844 5200 	strex	r2, r5, [r4]
   22494:	2a00      	cmp	r2, #0
   22496:	d1f9      	bne.n	2248c <clear_cf_cfg+0x26>
   22498:	f3bf 8f5b 	dmb	ish
}
   2249c:	b003      	add	sp, #12
   2249e:	bd30      	pop	{r4, r5, pc}

000224a0 <gatt_find_type_encode>:
{
   224a0:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   224a2:	f100 0508 	add.w	r5, r0, #8
   224a6:	2106      	movs	r1, #6
   224a8:	4628      	mov	r0, r5
   224aa:	4614      	mov	r4, r2
   224ac:	f000 fe71 	bl	23192 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   224b0:	8923      	ldrh	r3, [r4, #8]
   224b2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   224b4:	89e3      	ldrh	r3, [r4, #14]
   224b6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   224b8:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   224ba:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   224bc:	2b00      	cmp	r3, #0
   224be:	f642 0301 	movw	r3, #10241	; 0x2801
   224c2:	bf08      	it	eq
   224c4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   224c8:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   224ca:	780b      	ldrb	r3, [r1, #0]
   224cc:	b11b      	cbz	r3, 224d6 <gatt_find_type_encode+0x36>
   224ce:	2b02      	cmp	r3, #2
   224d0:	d006      	beq.n	224e0 <gatt_find_type_encode+0x40>
}
   224d2:	2000      	movs	r0, #0
   224d4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   224d6:	8849      	ldrh	r1, [r1, #2]
   224d8:	4628      	mov	r0, r5
   224da:	f000 fe71 	bl	231c0 <net_buf_simple_add_le16>
}
   224de:	e7f8      	b.n	224d2 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   224e0:	2210      	movs	r2, #16
   224e2:	3101      	adds	r1, #1
   224e4:	4628      	mov	r0, r5
   224e6:	f000 fe5a 	bl	2319e <net_buf_simple_add_mem>
   224ea:	e7f2      	b.n	224d2 <gatt_find_type_encode+0x32>

000224ec <sc_save>:
{
   224ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   224f0:	4680      	mov	r8, r0
   224f2:	460f      	mov	r7, r1
   224f4:	4616      	mov	r6, r2
   224f6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   224f8:	f7e7 f97e 	bl	97f8 <find_sc_cfg>
	if (!cfg) {
   224fc:	4604      	mov	r4, r0
   224fe:	b960      	cbnz	r0, 2251a <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   22500:	4669      	mov	r1, sp
   22502:	9000      	str	r0, [sp, #0]
   22504:	f8cd 0003 	str.w	r0, [sp, #3]
   22508:	f7e7 f976 	bl	97f8 <find_sc_cfg>
		if (!cfg) {
   2250c:	4604      	mov	r4, r0
   2250e:	b178      	cbz	r0, 22530 <sc_save+0x44>
		cfg->id = id;
   22510:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   22514:	4639      	mov	r1, r7
   22516:	f7ff fe3e 	bl	22196 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2251a:	8922      	ldrh	r2, [r4, #8]
   2251c:	8963      	ldrh	r3, [r4, #10]
   2251e:	b91a      	cbnz	r2, 22528 <sc_save+0x3c>
   22520:	b923      	cbnz	r3, 2252c <sc_save+0x40>
		cfg->data.start = start;
   22522:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   22524:	8165      	strh	r5, [r4, #10]
   22526:	e003      	b.n	22530 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   22528:	4296      	cmp	r6, r2
   2252a:	d304      	bcc.n	22536 <sc_save+0x4a>
   2252c:	429d      	cmp	r5, r3
   2252e:	d8f9      	bhi.n	22524 <sc_save+0x38>
}
   22530:	b002      	add	sp, #8
   22532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   22536:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   22538:	e7f8      	b.n	2252c <sc_save+0x40>

0002253a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2253a:	2301      	movs	r3, #1
   2253c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2253e:	f3bf 8f5b 	dmb	ish
   22542:	e850 2f00 	ldrex	r2, [r0]
   22546:	431a      	orrs	r2, r3
   22548:	e840 2100 	strex	r1, r2, [r0]
   2254c:	2900      	cmp	r1, #0
   2254e:	d1f8      	bne.n	22542 <atomic_set_bit+0x8>
   22550:	f3bf 8f5b 	dmb	ish
}
   22554:	4770      	bx	lr

00022556 <cf_write>:
{
   22556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2255a:	4698      	mov	r8, r3
   2255c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   22560:	2b01      	cmp	r3, #1
{
   22562:	4606      	mov	r6, r0
   22564:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   22566:	d830      	bhi.n	225ca <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   22568:	4443      	add	r3, r8
   2256a:	2b01      	cmp	r3, #1
   2256c:	4645      	mov	r5, r8
   2256e:	dc2f      	bgt.n	225d0 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   22570:	f7e7 f924 	bl	97bc <find_cf_cfg>
	if (!cfg) {
   22574:	4604      	mov	r4, r0
   22576:	b918      	cbnz	r0, 22580 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   22578:	f7e7 f920 	bl	97bc <find_cf_cfg>
	if (!cfg) {
   2257c:	4604      	mov	r4, r0
   2257e:	b350      	cbz	r0, 225d6 <cf_write+0x80>
{
   22580:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22582:	f1b8 0f00 	cmp.w	r8, #0
   22586:	d10e      	bne.n	225a6 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   22588:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2258c:	1c60      	adds	r0, r4, #1
   2258e:	f7ff fe02 	bl	22196 <bt_addr_le_copy>
	cfg->id = conn->id;
   22592:	4620      	mov	r0, r4
   22594:	7a33      	ldrb	r3, [r6, #8]
   22596:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2259a:	2100      	movs	r1, #0
   2259c:	f7ff ffcd 	bl	2253a <atomic_set_bit>
}
   225a0:	4628      	mov	r0, r5
   225a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   225a6:	7a20      	ldrb	r0, [r4, #8]
   225a8:	fa20 f301 	lsr.w	r3, r0, r1
   225ac:	07da      	lsls	r2, r3, #31
   225ae:	d503      	bpl.n	225b8 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   225b0:	783b      	ldrb	r3, [r7, #0]
   225b2:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   225b4:	07db      	lsls	r3, r3, #31
   225b6:	d511      	bpl.n	225dc <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   225b8:	3101      	adds	r1, #1
   225ba:	2903      	cmp	r1, #3
   225bc:	d1e1      	bne.n	22582 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   225be:	783b      	ldrb	r3, [r7, #0]
   225c0:	f003 0307 	and.w	r3, r3, #7
   225c4:	4318      	orrs	r0, r3
   225c6:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   225c8:	e7de      	b.n	22588 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   225ca:	f06f 0506 	mvn.w	r5, #6
   225ce:	e7e7      	b.n	225a0 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   225d0:	f06f 050c 	mvn.w	r5, #12
   225d4:	e7e4      	b.n	225a0 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   225d6:	f06f 0510 	mvn.w	r5, #16
   225da:	e7e1      	b.n	225a0 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   225dc:	f06f 0512 	mvn.w	r5, #18
   225e0:	e7de      	b.n	225a0 <cf_write+0x4a>

000225e2 <sc_restore_rsp>:
{
   225e2:	b538      	push	{r3, r4, r5, lr}
   225e4:	4605      	mov	r5, r0
   225e6:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   225e8:	f7e7 f8e8 	bl	97bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   225ec:	b130      	cbz	r0, 225fc <sc_restore_rsp+0x1a>
   225ee:	7a03      	ldrb	r3, [r0, #8]
   225f0:	07db      	lsls	r3, r3, #31
   225f2:	d503      	bpl.n	225fc <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   225f4:	2100      	movs	r1, #0
   225f6:	300c      	adds	r0, #12
   225f8:	f7ff ff9f 	bl	2253a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   225fc:	b964      	cbnz	r4, 22618 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   225fe:	7a28      	ldrb	r0, [r5, #8]
   22600:	f105 0188 	add.w	r1, r5, #136	; 0x88
   22604:	f7e7 f8f8 	bl	97f8 <find_sc_cfg>
		if (sc_cfg) {
   22608:	b130      	cbz	r0, 22618 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2260a:	4621      	mov	r1, r4
   2260c:	2204      	movs	r2, #4
}
   2260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   22612:	3008      	adds	r0, #8
   22614:	f7fe b893 	b.w	2073e <memset>
}
   22618:	bd38      	pop	{r3, r4, r5, pc}

0002261a <gatt_write_ccc_buf>:
{
   2261a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2261c:	f100 0508 	add.w	r5, r0, #8
   22620:	2102      	movs	r1, #2
   22622:	4628      	mov	r0, r5
   22624:	4614      	mov	r4, r2
   22626:	f000 fdb4 	bl	23192 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2262a:	8963      	ldrh	r3, [r4, #10]
   2262c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2262e:	89a1      	ldrh	r1, [r4, #12]
   22630:	4628      	mov	r0, r5
   22632:	f000 fdc5 	bl	231c0 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   22636:	f104 0010 	add.w	r0, r4, #16
   2263a:	2102      	movs	r1, #2
   2263c:	f7ff ff7d 	bl	2253a <atomic_set_bit>
}
   22640:	2000      	movs	r0, #0
   22642:	bd38      	pop	{r3, r4, r5, pc}

00022644 <gatt_write_ccc_rsp>:
{
   22644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22648:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2264a:	f3bf 8f5b 	dmb	ish
   2264e:	4606      	mov	r6, r0
   22650:	460d      	mov	r5, r1
   22652:	f104 0310 	add.w	r3, r4, #16
   22656:	e853 2f00 	ldrex	r2, [r3]
   2265a:	f022 0204 	bic.w	r2, r2, #4
   2265e:	e843 2100 	strex	r1, r2, [r3]
   22662:	2900      	cmp	r1, #0
   22664:	d1f7      	bne.n	22656 <gatt_write_ccc_rsp+0x12>
   22666:	f3bf 8f5b 	dmb	ish
	if (err) {
   2266a:	b1dd      	cbz	r5, 226a4 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2266c:	f7e7 f8d4 	bl	9818 <gatt_sub_find>
		if (!sub) {
   22670:	4601      	mov	r1, r0
   22672:	b300      	cbz	r0, 226b6 <gatt_write_ccc_rsp+0x72>
	return list->head;
   22674:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   22676:	b143      	cbz	r3, 2268a <gatt_write_ccc_rsp+0x46>
	return node->next;
   22678:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2267a:	f104 0014 	add.w	r0, r4, #20
   2267e:	4283      	cmp	r3, r0
   22680:	d10b      	bne.n	2269a <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   22682:	4623      	mov	r3, r4
   22684:	4630      	mov	r0, r6
   22686:	f7ff fd95 	bl	221b4 <gatt_sub_remove>
	if (params->write) {
   2268a:	6863      	ldr	r3, [r4, #4]
   2268c:	b19b      	cbz	r3, 226b6 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2268e:	4629      	mov	r1, r5
   22690:	4630      	mov	r0, r6
   22692:	2200      	movs	r2, #0
}
   22694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   22698:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2269a:	2a00      	cmp	r2, #0
   2269c:	d0f5      	beq.n	2268a <gatt_write_ccc_rsp+0x46>
	return node->next;
   2269e:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   226a0:	6812      	ldr	r2, [r2, #0]
   226a2:	e7ec      	b.n	2267e <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   226a4:	89a3      	ldrh	r3, [r4, #12]
   226a6:	2b00      	cmp	r3, #0
   226a8:	d1ef      	bne.n	2268a <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   226aa:	6827      	ldr	r7, [r4, #0]
   226ac:	462b      	mov	r3, r5
   226ae:	462a      	mov	r2, r5
   226b0:	4621      	mov	r1, r4
   226b2:	47b8      	blx	r7
   226b4:	e7e9      	b.n	2268a <gatt_write_ccc_rsp+0x46>
}
   226b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000226ba <sc_clear>:
{
   226ba:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   226bc:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   226c0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   226c2:	4631      	mov	r1, r6
   226c4:	7a00      	ldrb	r0, [r0, #8]
   226c6:	f7fe fbba 	bl	20e3e <bt_addr_le_is_bonded>
   226ca:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   226cc:	4631      	mov	r1, r6
   226ce:	f7e7 f893 	bl	97f8 <find_sc_cfg>
	if (!cfg) {
   226d2:	b128      	cbz	r0, 226e0 <sc_clear+0x26>
}
   226d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   226d8:	220c      	movs	r2, #12
   226da:	2100      	movs	r1, #0
   226dc:	f7fe b82f 	b.w	2073e <memset>
}
   226e0:	bd70      	pop	{r4, r5, r6, pc}

000226e2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   226e2:	2a02      	cmp	r2, #2
{
   226e4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   226e6:	d108      	bne.n	226fa <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   226e8:	2300      	movs	r3, #0
   226ea:	f100 0188 	add.w	r1, r0, #136	; 0x88
   226ee:	461a      	mov	r2, r3
   226f0:	7a00      	ldrb	r0, [r0, #8]
   226f2:	f7ff fefb 	bl	224ec <sc_save>
}
   226f6:	2002      	movs	r0, #2
   226f8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   226fa:	f7ff ffde 	bl	226ba <sc_clear>
   226fe:	e7fa      	b.n	226f6 <sc_ccc_cfg_write+0x14>

00022700 <gatt_req_send>:
{
   22700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22704:	4606      	mov	r6, r0
   22706:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   22708:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2270c:	2100      	movs	r1, #0
{
   2270e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   22712:	4614      	mov	r4, r2
   22714:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   22716:	f7e6 ff53 	bl	95c0 <bt_att_req_alloc>
	if (!req) {
   2271a:	4605      	mov	r5, r0
   2271c:	b920      	cbnz	r0, 22728 <gatt_req_send+0x28>
		return -ENOMEM;
   2271e:	f06f 040b 	mvn.w	r4, #11
}
   22722:	4620      	mov	r0, r4
   22724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   22728:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   2272c:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   2272e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   22732:	464a      	mov	r2, r9
   22734:	4630      	mov	r0, r6
   22736:	f7ff fc22 	bl	21f7e <bt_att_create_pdu>
	if (!buf) {
   2273a:	b918      	cbnz	r0, 22744 <gatt_req_send+0x44>
		bt_att_req_free(req);
   2273c:	4628      	mov	r0, r5
   2273e:	f7e6 ff61 	bl	9604 <bt_att_req_free>
   22742:	e7ec      	b.n	2271e <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   22744:	4622      	mov	r2, r4
	req->buf = buf;
   22746:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   22748:	4649      	mov	r1, r9
   2274a:	47b8      	blx	r7
	if (err) {
   2274c:	4604      	mov	r4, r0
   2274e:	b118      	cbz	r0, 22758 <gatt_req_send+0x58>
		bt_att_req_free(req);
   22750:	4628      	mov	r0, r5
   22752:	f7e6 ff57 	bl	9604 <bt_att_req_free>
   22756:	e7e4      	b.n	22722 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   22758:	4629      	mov	r1, r5
   2275a:	4630      	mov	r0, r6
   2275c:	f7ff fccb 	bl	220f6 <bt_att_req_send>
	if (err) {
   22760:	4604      	mov	r4, r0
   22762:	2800      	cmp	r0, #0
   22764:	d0dd      	beq.n	22722 <gatt_req_send+0x22>
   22766:	e7f3      	b.n	22750 <gatt_req_send+0x50>

00022768 <read_ppcp>:
{
   22768:	b513      	push	{r0, r1, r4, lr}
   2276a:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2276c:	2218      	movs	r2, #24
{
   2276e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   22772:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   22776:	2228      	movs	r2, #40	; 0x28
   22778:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2277c:	2200      	movs	r2, #0
   2277e:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   22782:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   22784:	f04f 022a 	mov.w	r2, #42	; 0x2a
   22788:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2278c:	d80b      	bhi.n	227a6 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2278e:	f1c1 0408 	rsb	r4, r1, #8
   22792:	429c      	cmp	r4, r3
   22794:	bfa8      	it	ge
   22796:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22798:	4622      	mov	r2, r4
   2279a:	4469      	add	r1, sp
   2279c:	f7fd ffc4 	bl	20728 <memcpy>
}
   227a0:	4620      	mov	r0, r4
   227a2:	b002      	add	sp, #8
   227a4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   227a6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   227aa:	e7f9      	b.n	227a0 <read_ppcp+0x38>

000227ac <read_appearance>:
{
   227ac:	b513      	push	{r0, r1, r4, lr}
   227ae:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   227b2:	4610      	mov	r0, r2
	if (offset > value_len) {
   227b4:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   227b6:	f240 3241 	movw	r2, #833	; 0x341
   227ba:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   227be:	d80d      	bhi.n	227dc <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   227c0:	f1c1 0402 	rsb	r4, r1, #2
   227c4:	429c      	cmp	r4, r3
   227c6:	bfa8      	it	ge
   227c8:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   227ca:	f10d 0306 	add.w	r3, sp, #6
   227ce:	4622      	mov	r2, r4
   227d0:	4419      	add	r1, r3
   227d2:	f7fd ffa9 	bl	20728 <memcpy>
}
   227d6:	4620      	mov	r0, r4
   227d8:	b002      	add	sp, #8
   227da:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   227dc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   227e0:	e7f9      	b.n	227d6 <read_appearance+0x2a>

000227e2 <read_name>:
{
   227e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227e6:	4698      	mov	r8, r3
   227e8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   227ec:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   227ee:	f7e4 fdff 	bl	73f0 <bt_get_name>
   227f2:	4607      	mov	r7, r0
				 strlen(name));
   227f4:	f7fd ff6b 	bl	206ce <strlen>
	if (offset > value_len) {
   227f8:	b283      	uxth	r3, r0
   227fa:	42b3      	cmp	r3, r6
   227fc:	d30c      	bcc.n	22818 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   227fe:	1b9c      	subs	r4, r3, r6
   22800:	4544      	cmp	r4, r8
   22802:	bfa8      	it	ge
   22804:	4644      	movge	r4, r8
   22806:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   22808:	4622      	mov	r2, r4
   2280a:	19b9      	adds	r1, r7, r6
   2280c:	4628      	mov	r0, r5
   2280e:	f7fd ff8b 	bl	20728 <memcpy>
}
   22812:	4620      	mov	r0, r4
   22814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22818:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2281c:	e7f9      	b.n	22812 <read_name+0x30>

0002281e <cf_read>:
{
   2281e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22820:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   22822:	2300      	movs	r3, #0
{
   22824:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   22828:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2282c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2282e:	f7e6 ffc5 	bl	97bc <find_cf_cfg>
	if (cfg) {
   22832:	b128      	cbz	r0, 22840 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   22834:	f100 0108 	add.w	r1, r0, #8
   22838:	2201      	movs	r2, #1
   2283a:	a801      	add	r0, sp, #4
   2283c:	f7fd ff74 	bl	20728 <memcpy>
	if (offset > value_len) {
   22840:	2e01      	cmp	r6, #1
   22842:	d80d      	bhi.n	22860 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   22844:	f1c6 0401 	rsb	r4, r6, #1
   22848:	42bc      	cmp	r4, r7
   2284a:	bfa8      	it	ge
   2284c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2284e:	ab01      	add	r3, sp, #4
   22850:	4622      	mov	r2, r4
   22852:	1999      	adds	r1, r3, r6
   22854:	4628      	mov	r0, r5
   22856:	f7fd ff67 	bl	20728 <memcpy>
}
   2285a:	4620      	mov	r0, r4
   2285c:	b003      	add	sp, #12
   2285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22860:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22864:	e7f9      	b.n	2285a <cf_read+0x3c>

00022866 <bt_gatt_attr_read_service>:
{
   22866:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   22868:	68c9      	ldr	r1, [r1, #12]
{
   2286a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2286e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   22870:	780b      	ldrb	r3, [r1, #0]
{
   22872:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   22874:	b993      	cbnz	r3, 2289c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22876:	884b      	ldrh	r3, [r1, #2]
   22878:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2287c:	2d02      	cmp	r5, #2
   2287e:	d819      	bhi.n	228b4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22880:	f1c5 0202 	rsb	r2, r5, #2
   22884:	4294      	cmp	r4, r2
   22886:	bfa8      	it	ge
   22888:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2288a:	f10d 0306 	add.w	r3, sp, #6
   2288e:	4622      	mov	r2, r4
   22890:	1959      	adds	r1, r3, r5
   22892:	f7fd ff49 	bl	20728 <memcpy>
}
   22896:	4620      	mov	r0, r4
   22898:	b003      	add	sp, #12
   2289a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2289c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2289e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   228a2:	d807      	bhi.n	228b4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   228a4:	f1c5 0210 	rsb	r2, r5, #16
   228a8:	4294      	cmp	r4, r2
   228aa:	bfa8      	it	ge
   228ac:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   228ae:	4622      	mov	r2, r4
   228b0:	4429      	add	r1, r5
   228b2:	e7ee      	b.n	22892 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   228b4:	f06f 0406 	mvn.w	r4, #6
   228b8:	e7ed      	b.n	22896 <bt_gatt_attr_read_service+0x30>

000228ba <bt_gatt_attr_read_ccc>:
{
   228ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   228bc:	68c9      	ldr	r1, [r1, #12]
{
   228be:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   228c2:	4615      	mov	r5, r2
   228c4:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   228c6:	f7ff fd14 	bl	222f2 <find_ccc_cfg>
	if (cfg) {
   228ca:	b100      	cbz	r0, 228ce <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   228cc:	8900      	ldrh	r0, [r0, #8]
   228ce:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   228d2:	2e02      	cmp	r6, #2
   228d4:	d80e      	bhi.n	228f4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   228d6:	f1c6 0402 	rsb	r4, r6, #2
   228da:	42bc      	cmp	r4, r7
   228dc:	bfa8      	it	ge
   228de:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   228e0:	f10d 0306 	add.w	r3, sp, #6
   228e4:	4622      	mov	r2, r4
   228e6:	1999      	adds	r1, r3, r6
   228e8:	4628      	mov	r0, r5
   228ea:	f7fd ff1d 	bl	20728 <memcpy>
}
   228ee:	4620      	mov	r0, r4
   228f0:	b003      	add	sp, #12
   228f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   228f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   228f8:	e7f9      	b.n	228ee <bt_gatt_attr_read_ccc+0x34>

000228fa <bt_gatt_attr_read>:
{
   228fa:	b538      	push	{r3, r4, r5, lr}
   228fc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22900:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   22904:	42a9      	cmp	r1, r5
{
   22906:	4610      	mov	r0, r2
	if (offset > value_len) {
   22908:	d80b      	bhi.n	22922 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2290a:	1a6d      	subs	r5, r5, r1
   2290c:	429d      	cmp	r5, r3
   2290e:	bfa8      	it	ge
   22910:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22912:	9b05      	ldr	r3, [sp, #20]
   22914:	b2ad      	uxth	r5, r5
   22916:	462a      	mov	r2, r5
   22918:	4419      	add	r1, r3
   2291a:	f7fd ff05 	bl	20728 <memcpy>
}
   2291e:	4628      	mov	r0, r5
   22920:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22922:	f06f 0506 	mvn.w	r5, #6
   22926:	e7fa      	b.n	2291e <bt_gatt_attr_read+0x24>

00022928 <bt_gatt_attr_value_handle>:
{
   22928:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2292a:	4604      	mov	r4, r0
   2292c:	b910      	cbnz	r0, 22934 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2292e:	2000      	movs	r0, #0
}
   22930:	b002      	add	sp, #8
   22932:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22934:	2300      	movs	r3, #0
   22936:	f88d 3004 	strb.w	r3, [sp, #4]
   2293a:	6800      	ldr	r0, [r0, #0]
   2293c:	f642 0303 	movw	r3, #10243	; 0x2803
   22940:	a901      	add	r1, sp, #4
   22942:	f8ad 3006 	strh.w	r3, [sp, #6]
   22946:	f7fd ff80 	bl	2084a <bt_uuid_cmp>
   2294a:	2800      	cmp	r0, #0
   2294c:	d1ef      	bne.n	2292e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2294e:	68e3      	ldr	r3, [r4, #12]
   22950:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22952:	2800      	cmp	r0, #0
   22954:	d1ec      	bne.n	22930 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   22956:	4620      	mov	r0, r4
   22958:	f7e7 f85c 	bl	9a14 <bt_gatt_attr_get_handle>
   2295c:	3001      	adds	r0, #1
   2295e:	b280      	uxth	r0, r0
	return handle;
   22960:	e7e6      	b.n	22930 <bt_gatt_attr_value_handle+0x8>

00022962 <bt_gatt_attr_read_chrc>:
{
   22962:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22964:	68cf      	ldr	r7, [r1, #12]
{
   22966:	b087      	sub	sp, #28
   22968:	4608      	mov	r0, r1
   2296a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2296c:	79bb      	ldrb	r3, [r7, #6]
   2296e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22972:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   22976:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22978:	f7ff ffd6 	bl	22928 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2297c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2297e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22982:	780b      	ldrb	r3, [r1, #0]
   22984:	b99b      	cbnz	r3, 229ae <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22986:	884b      	ldrh	r3, [r1, #2]
   22988:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2298c:	2105      	movs	r1, #5
	if (offset > value_len) {
   2298e:	42b1      	cmp	r1, r6
   22990:	d315      	bcc.n	229be <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   22992:	1b89      	subs	r1, r1, r6
   22994:	42a1      	cmp	r1, r4
   22996:	bfa8      	it	ge
   22998:	4621      	movge	r1, r4
   2299a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2299c:	ab01      	add	r3, sp, #4
   2299e:	4622      	mov	r2, r4
   229a0:	1999      	adds	r1, r3, r6
   229a2:	4628      	mov	r0, r5
   229a4:	f7fd fec0 	bl	20728 <memcpy>
}
   229a8:	4620      	mov	r0, r4
   229aa:	b007      	add	sp, #28
   229ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   229ae:	3101      	adds	r1, #1
   229b0:	2210      	movs	r2, #16
   229b2:	f10d 0007 	add.w	r0, sp, #7
   229b6:	f7fd feb7 	bl	20728 <memcpy>
		value_len += 16U;
   229ba:	2113      	movs	r1, #19
   229bc:	e7e7      	b.n	2298e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   229be:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   229c2:	e7f1      	b.n	229a8 <bt_gatt_attr_read_chrc+0x46>

000229c4 <bt_gatt_foreach_attr>:
{
   229c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   229c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   229ca:	2300      	movs	r3, #0
   229cc:	9300      	str	r3, [sp, #0]
   229ce:	461a      	mov	r2, r3
   229d0:	f7e7 f850 	bl	9a74 <bt_gatt_foreach_attr_type>
}
   229d4:	b005      	add	sp, #20
   229d6:	f85d fb04 	ldr.w	pc, [sp], #4

000229da <db_hash_process>:
	db_hash_gen(true);
   229da:	f7e7 b8a5 	b.w	9b28 <db_hash_gen.constprop.0>

000229de <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   229de:	07d3      	lsls	r3, r2, #31
{
   229e0:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   229e2:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   229e4:	d504      	bpl.n	229f0 <bt_gatt_check_perm+0x12>
   229e6:	f014 0f15 	tst.w	r4, #21
   229ea:	d017      	beq.n	22a1c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   229ec:	684b      	ldr	r3, [r1, #4]
   229ee:	b1ab      	cbz	r3, 22a1c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   229f0:	0793      	lsls	r3, r2, #30
   229f2:	d504      	bpl.n	229fe <bt_gatt_check_perm+0x20>
   229f4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   229f8:	d012      	beq.n	22a20 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   229fa:	688b      	ldr	r3, [r1, #8]
   229fc:	b183      	cbz	r3, 22a20 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   229fe:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   22a00:	f014 0f30 	tst.w	r4, #48	; 0x30
   22a04:	d104      	bne.n	22a10 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   22a06:	f014 000c 	ands.w	r0, r4, #12
   22a0a:	bf18      	it	ne
   22a0c:	200f      	movne	r0, #15
}
   22a0e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   22a10:	f7fe fce1 	bl	213d6 <bt_conn_get_security>
   22a14:	2802      	cmp	r0, #2
   22a16:	d8f6      	bhi.n	22a06 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   22a18:	2005      	movs	r0, #5
   22a1a:	e7f8      	b.n	22a0e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   22a1c:	2002      	movs	r0, #2
   22a1e:	e7f6      	b.n	22a0e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   22a20:	2003      	movs	r0, #3
   22a22:	e7f4      	b.n	22a0e <bt_gatt_check_perm+0x30>

00022a24 <gatt_notify>:
{
   22a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22a28:	4614      	mov	r4, r2
   22a2a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   22a2c:	2214      	movs	r2, #20
   22a2e:	6861      	ldr	r1, [r4, #4]
{
   22a30:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   22a32:	f7ff ffd4 	bl	229de <bt_gatt_check_perm>
   22a36:	bb08      	cbnz	r0, 22a7c <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   22a38:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   22a3a:	211b      	movs	r1, #27
   22a3c:	3202      	adds	r2, #2
   22a3e:	4638      	mov	r0, r7
   22a40:	f7ff fa9d 	bl	21f7e <bt_att_create_pdu>
	if (!buf) {
   22a44:	4605      	mov	r5, r0
   22a46:	b1e8      	cbz	r0, 22a84 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   22a48:	f100 0908 	add.w	r9, r0, #8
   22a4c:	2102      	movs	r1, #2
   22a4e:	4648      	mov	r0, r9
   22a50:	f000 fb9f 	bl	23192 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   22a54:	4606      	mov	r6, r0
   22a56:	89a1      	ldrh	r1, [r4, #12]
   22a58:	f826 8b02 	strh.w	r8, [r6], #2
   22a5c:	4648      	mov	r0, r9
   22a5e:	f000 fb98 	bl	23192 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   22a62:	89a2      	ldrh	r2, [r4, #12]
   22a64:	68a1      	ldr	r1, [r4, #8]
   22a66:	4630      	mov	r0, r6
   22a68:	f7fd fe5e 	bl	20728 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   22a6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22a70:	4629      	mov	r1, r5
   22a72:	4638      	mov	r0, r7
}
   22a74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   22a78:	f7ff baf6 	b.w	22068 <bt_att_send>
		return -EPERM;
   22a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   22a84:	f06f 000b 	mvn.w	r0, #11
   22a88:	e7fa      	b.n	22a80 <gatt_notify+0x5c>

00022a8a <gatt_discover_next>:
{
   22a8a:	b570      	push	{r4, r5, r6, lr}
   22a8c:	4605      	mov	r5, r0
   22a8e:	4614      	mov	r4, r2
	if (!last_handle)
   22a90:	b929      	cbnz	r1, 22a9e <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   22a92:	4621      	mov	r1, r4
   22a94:	4628      	mov	r0, r5
   22a96:	f7e7 fa3b 	bl	9f10 <bt_gatt_discover>
   22a9a:	b928      	cbnz	r0, 22aa8 <gatt_discover_next+0x1e>
}
   22a9c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   22a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22aa2:	4291      	cmp	r1, r2
   22aa4:	d107      	bne.n	22ab6 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   22aa6:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   22aa8:	6863      	ldr	r3, [r4, #4]
   22aaa:	4622      	mov	r2, r4
   22aac:	4628      	mov	r0, r5
   22aae:	2100      	movs	r1, #0
}
   22ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   22ab4:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   22ab6:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   22ab8:	1c4b      	adds	r3, r1, #1
   22aba:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   22abc:	429a      	cmp	r2, r3
		params->start_handle++;
   22abe:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   22ac0:	d2e7      	bcs.n	22a92 <gatt_discover_next+0x8>
   22ac2:	e7f1      	b.n	22aa8 <gatt_discover_next+0x1e>

00022ac4 <gatt_find_type_rsp>:
{
   22ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ac8:	b088      	sub	sp, #32
   22aca:	4607      	mov	r7, r0
   22acc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   22ad0:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   22ad2:	b911      	cbnz	r1, 22ada <gatt_find_type_rsp+0x16>
   22ad4:	f013 0803 	ands.w	r8, r3, #3
   22ad8:	d008      	beq.n	22aec <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   22ada:	f8d9 3004 	ldr.w	r3, [r9, #4]
   22ade:	464a      	mov	r2, r9
   22ae0:	2100      	movs	r1, #0
   22ae2:	4638      	mov	r0, r7
}
   22ae4:	b008      	add	sp, #32
   22ae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   22aea:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   22aec:	f3c3 0387 	ubfx	r3, r3, #2, #8
   22af0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22af4:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22af6:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   22afa:	42ac      	cmp	r4, r5
   22afc:	d107      	bne.n	22b0e <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   22afe:	464a      	mov	r2, r9
   22b00:	4641      	mov	r1, r8
   22b02:	4638      	mov	r0, r7
}
   22b04:	b008      	add	sp, #32
   22b06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   22b0a:	f7ff bfbe 	b.w	22a8a <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   22b0e:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   22b10:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   22b14:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22b18:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   22b1a:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   22b1e:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   22b22:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   22b24:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22b26:	bf0c      	ite	eq
   22b28:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   22b2c:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22b2e:	ab01      	add	r3, sp, #4
   22b30:	f8ad 1002 	strh.w	r1, [sp, #2]
   22b34:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   22b36:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22b3a:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22b3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22b42:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22b46:	f8cd d00c 	str.w	sp, [sp, #12]
   22b4a:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22b4e:	464a      	mov	r2, r9
   22b50:	a903      	add	r1, sp, #12
   22b52:	4638      	mov	r0, r7
   22b54:	4798      	blx	r3
   22b56:	3404      	adds	r4, #4
   22b58:	2800      	cmp	r0, #0
   22b5a:	d1ce      	bne.n	22afa <gatt_find_type_rsp+0x36>
}
   22b5c:	b008      	add	sp, #32
   22b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022b62 <gatt_read_group_rsp>:
{
   22b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b66:	b08f      	sub	sp, #60	; 0x3c
   22b68:	4681      	mov	r9, r0
   22b6a:	9d18      	ldr	r5, [sp, #96]	; 0x60
   22b6c:	4617      	mov	r7, r2
	if (err) {
   22b6e:	b131      	cbz	r1, 22b7e <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   22b70:	686b      	ldr	r3, [r5, #4]
   22b72:	462a      	mov	r2, r5
   22b74:	2100      	movs	r1, #0
}
   22b76:	b00f      	add	sp, #60	; 0x3c
   22b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   22b7c:	4718      	bx	r3
	switch (rsp->len) {
   22b7e:	7812      	ldrb	r2, [r2, #0]
   22b80:	2a06      	cmp	r2, #6
   22b82:	d009      	beq.n	22b98 <gatt_read_group_rsp+0x36>
   22b84:	2a14      	cmp	r2, #20
   22b86:	d01d      	beq.n	22bc4 <gatt_read_group_rsp+0x62>
	params->func(conn, NULL, params);
   22b88:	686b      	ldr	r3, [r5, #4]
   22b8a:	462a      	mov	r2, r5
   22b8c:	2100      	movs	r1, #0
   22b8e:	4648      	mov	r0, r9
   22b90:	4798      	blx	r3
}
   22b92:	b00f      	add	sp, #60	; 0x3c
   22b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   22b98:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   22b9c:	3b01      	subs	r3, #1
   22b9e:	b29c      	uxth	r4, r3
   22ba0:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   22ba4:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   22ba6:	783b      	ldrb	r3, [r7, #0]
   22ba8:	42a3      	cmp	r3, r4
   22baa:	d90f      	bls.n	22bcc <gatt_read_group_rsp+0x6a>
	if (length == 0U && end_handle) {
   22bac:	2c00      	cmp	r4, #0
   22bae:	d1eb      	bne.n	22b88 <gatt_read_group_rsp+0x26>
   22bb0:	2e00      	cmp	r6, #0
   22bb2:	d0e9      	beq.n	22b88 <gatt_read_group_rsp+0x26>
	gatt_discover_next(conn, handle, params);
   22bb4:	462a      	mov	r2, r5
   22bb6:	4631      	mov	r1, r6
   22bb8:	4648      	mov	r0, r9
}
   22bba:	b00f      	add	sp, #60	; 0x3c
   22bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   22bc0:	f7ff bf63 	b.w	22a8a <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   22bc4:	2202      	movs	r2, #2
   22bc6:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   22bca:	e7e7      	b.n	22b9c <gatt_read_group_rsp+0x3a>
		struct bt_gatt_attr attr = {};
   22bcc:	2214      	movs	r2, #20
   22bce:	2100      	movs	r1, #0
   22bd0:	a809      	add	r0, sp, #36	; 0x24
   22bd2:	f7fd fdb4 	bl	2073e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   22bd6:	f8b8 a000 	ldrh.w	sl, [r8]
   22bda:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   22bde:	2b00      	cmp	r3, #0
   22be0:	d0d2      	beq.n	22b88 <gatt_read_group_rsp+0x26>
		end_handle = sys_le16_to_cpu(data->end_handle);
   22be2:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   22be6:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   22bea:	2e00      	cmp	r6, #0
   22bec:	d0cc      	beq.n	22b88 <gatt_read_group_rsp+0x26>
   22bee:	42b3      	cmp	r3, r6
   22bf0:	d8ca      	bhi.n	22b88 <gatt_read_group_rsp+0x26>
		switch (u.uuid.type) {
   22bf2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   22bf6:	b323      	cbz	r3, 22c42 <gatt_read_group_rsp+0xe0>
   22bf8:	2b02      	cmp	r3, #2
   22bfa:	d02a      	beq.n	22c52 <gatt_read_group_rsp+0xf0>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22bfc:	f04f 0300 	mov.w	r3, #0
   22c00:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   22c04:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   22c06:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22c0a:	2b00      	cmp	r3, #0
   22c0c:	f642 0301 	movw	r3, #10241	; 0x2801
   22c10:	bf08      	it	eq
   22c12:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   22c16:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   22c1a:	ab04      	add	r3, sp, #16
   22c1c:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   22c1e:	ab01      	add	r3, sp, #4
   22c20:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   22c22:	ab02      	add	r3, sp, #8
   22c24:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   22c26:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22c2a:	686b      	ldr	r3, [r5, #4]
   22c2c:	462a      	mov	r2, r5
   22c2e:	a909      	add	r1, sp, #36	; 0x24
   22c30:	4648      	mov	r0, r9
   22c32:	4798      	blx	r3
   22c34:	2800      	cmp	r0, #0
   22c36:	d0ac      	beq.n	22b92 <gatt_read_group_rsp+0x30>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   22c38:	783a      	ldrb	r2, [r7, #0]
   22c3a:	1aa4      	subs	r4, r4, r2
   22c3c:	b2a4      	uxth	r4, r4
   22c3e:	4490      	add	r8, r2
   22c40:	e7b1      	b.n	22ba6 <gatt_read_group_rsp+0x44>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   22c42:	2202      	movs	r2, #2
   22c44:	f108 0104 	add.w	r1, r8, #4
   22c48:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   22c4c:	f7fd fd6c 	bl	20728 <memcpy>
			break;
   22c50:	e7d4      	b.n	22bfc <gatt_read_group_rsp+0x9a>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   22c52:	2210      	movs	r2, #16
   22c54:	f108 0104 	add.w	r1, r8, #4
   22c58:	f10d 0011 	add.w	r0, sp, #17
   22c5c:	e7f6      	b.n	22c4c <gatt_read_group_rsp+0xea>

00022c5e <read_included_uuid_cb>:
{
   22c5e:	b570      	push	{r4, r5, r6, lr}
   22c60:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   22c62:	2b10      	cmp	r3, #16
{
   22c64:	4611      	mov	r1, r2
   22c66:	9c12      	ldr	r4, [sp, #72]	; 0x48
   22c68:	4605      	mov	r5, r0
   22c6a:	461a      	mov	r2, r3
	if (length != 16U) {
   22c6c:	d006      	beq.n	22c7c <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   22c6e:	6863      	ldr	r3, [r4, #4]
   22c70:	4622      	mov	r2, r4
   22c72:	2100      	movs	r1, #0
}
   22c74:	b00e      	add	sp, #56	; 0x38
   22c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   22c7a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   22c7c:	8963      	ldrh	r3, [r4, #10]
   22c7e:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   22c82:	89a3      	ldrh	r3, [r4, #12]
   22c84:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   22c88:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   22c8a:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   22c8c:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   22c90:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   22c92:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   22c96:	f7fd fd47 	bl	20728 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   22c9a:	6821      	ldr	r1, [r4, #0]
   22c9c:	b9c9      	cbnz	r1, 22cd2 <read_included_uuid_cb+0x74>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   22c9e:	f642 0202 	movw	r2, #10242	; 0x2802
   22ca2:	2300      	movs	r3, #0
   22ca4:	f8ad 2006 	strh.w	r2, [sp, #6]
   22ca8:	aa01      	add	r2, sp, #4
   22caa:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   22cae:	f88d 3004 	strb.w	r3, [sp, #4]
   22cb2:	aa02      	add	r2, sp, #8
   22cb4:	930b      	str	r3, [sp, #44]	; 0x2c
   22cb6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   22cba:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   22cbc:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   22cbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22cc2:	4622      	mov	r2, r4
   22cc4:	6863      	ldr	r3, [r4, #4]
   22cc6:	a909      	add	r1, sp, #36	; 0x24
   22cc8:	4628      	mov	r0, r5
   22cca:	4798      	blx	r3
   22ccc:	b930      	cbnz	r0, 22cdc <read_included_uuid_cb+0x7e>
}
   22cce:	b00e      	add	sp, #56	; 0x38
   22cd0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   22cd2:	4630      	mov	r0, r6
   22cd4:	f7fd fdb9 	bl	2084a <bt_uuid_cmp>
   22cd8:	2800      	cmp	r0, #0
   22cda:	d0e0      	beq.n	22c9e <read_included_uuid_cb+0x40>
	gatt_discover_next(conn, params->start_handle, params);
   22cdc:	8921      	ldrh	r1, [r4, #8]
   22cde:	4622      	mov	r2, r4
   22ce0:	4628      	mov	r0, r5
   22ce2:	f7ff fed2 	bl	22a8a <gatt_discover_next>
	return;
   22ce6:	e7f2      	b.n	22cce <read_included_uuid_cb+0x70>

00022ce8 <gatt_find_info_rsp>:
{
   22ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22cec:	b08f      	sub	sp, #60	; 0x3c
   22cee:	4680      	mov	r8, r0
   22cf0:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   22cf2:	b921      	cbnz	r1, 22cfe <gatt_find_info_rsp+0x16>
	switch (rsp->format) {
   22cf4:	7810      	ldrb	r0, [r2, #0]
   22cf6:	2801      	cmp	r0, #1
   22cf8:	d007      	beq.n	22d0a <gatt_find_info_rsp+0x22>
   22cfa:	2802      	cmp	r0, #2
   22cfc:	d01e      	beq.n	22d3c <gatt_find_info_rsp+0x54>
	params->func(conn, NULL, params);
   22cfe:	6873      	ldr	r3, [r6, #4]
   22d00:	4632      	mov	r2, r6
   22d02:	2100      	movs	r1, #0
   22d04:	4640      	mov	r0, r8
   22d06:	4798      	blx	r3
   22d08:	e08a      	b.n	22e20 <gatt_find_info_rsp+0x138>
		u.uuid.type = BT_UUID_TYPE_16;
   22d0a:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i16);
   22d0e:	f04f 0a04 	mov.w	sl, #4
	length--;
   22d12:	3b01      	subs	r3, #1
   22d14:	b29b      	uxth	r3, r3
	if (length < len) {
   22d16:	4553      	cmp	r3, sl
   22d18:	d3f1      	bcc.n	22cfe <gatt_find_info_rsp+0x16>
	for (i = length / len, pdu = rsp->info; i != 0;
   22d1a:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   22d1e:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   22d22:	9300      	str	r3, [sp, #0]
   22d24:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   22d26:	46cb      	mov	fp, r9
			skip = false;
   22d28:	464d      	mov	r5, r9
   22d2a:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   22d2c:	9b00      	ldr	r3, [sp, #0]
   22d2e:	b953      	cbnz	r3, 22d46 <gatt_find_info_rsp+0x5e>
	gatt_discover_next(conn, handle, params);
   22d30:	4632      	mov	r2, r6
   22d32:	4659      	mov	r1, fp
   22d34:	4640      	mov	r0, r8
   22d36:	f7ff fea8 	bl	22a8a <gatt_discover_next>
	return;
   22d3a:	e071      	b.n	22e20 <gatt_find_info_rsp+0x138>
		u.uuid.type = BT_UUID_TYPE_128;
   22d3c:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i128);
   22d40:	f04f 0a12 	mov.w	sl, #18
		break;
   22d44:	e7e5      	b.n	22d12 <gatt_find_info_rsp+0x2a>
		handle = sys_le16_to_cpu(info.i16->handle);
   22d46:	8823      	ldrh	r3, [r4, #0]
   22d48:	9301      	str	r3, [sp, #4]
   22d4a:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   22d4e:	f1b9 0f00 	cmp.w	r9, #0
   22d52:	d151      	bne.n	22df8 <gatt_find_info_rsp+0x110>
		switch (u.uuid.type) {
   22d54:	f89d 3010 	ldrb.w	r3, [sp, #16]
   22d58:	2b00      	cmp	r3, #0
   22d5a:	d03a      	beq.n	22dd2 <gatt_find_info_rsp+0xea>
   22d5c:	2b02      	cmp	r3, #2
   22d5e:	d03f      	beq.n	22de0 <gatt_find_info_rsp+0xf8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   22d60:	6831      	ldr	r1, [r6, #0]
   22d62:	2900      	cmp	r1, #0
   22d64:	d143      	bne.n	22dee <gatt_find_info_rsp+0x106>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   22d66:	7c33      	ldrb	r3, [r6, #16]
   22d68:	2b04      	cmp	r3, #4
   22d6a:	d148      	bne.n	22dfe <gatt_find_info_rsp+0x116>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   22d6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22d70:	a902      	add	r1, sp, #8
   22d72:	4638      	mov	r0, r7
   22d74:	f88d 5008 	strb.w	r5, [sp, #8]
   22d78:	f8ad 300a 	strh.w	r3, [sp, #10]
   22d7c:	f7fd fd65 	bl	2084a <bt_uuid_cmp>
   22d80:	b310      	cbz	r0, 22dc8 <gatt_find_info_rsp+0xe0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   22d82:	f642 0301 	movw	r3, #10241	; 0x2801
   22d86:	a903      	add	r1, sp, #12
   22d88:	4638      	mov	r0, r7
   22d8a:	f88d 500c 	strb.w	r5, [sp, #12]
   22d8e:	f8ad 300e 	strh.w	r3, [sp, #14]
   22d92:	f7fd fd5a 	bl	2084a <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   22d96:	b1b8      	cbz	r0, 22dc8 <gatt_find_info_rsp+0xe0>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   22d98:	f642 0302 	movw	r3, #10242	; 0x2802
   22d9c:	a909      	add	r1, sp, #36	; 0x24
   22d9e:	4638      	mov	r0, r7
   22da0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   22da4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   22da8:	f7fd fd4f 	bl	2084a <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   22dac:	b160      	cbz	r0, 22dc8 <gatt_find_info_rsp+0xe0>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   22dae:	f642 0303 	movw	r3, #10243	; 0x2803
   22db2:	a909      	add	r1, sp, #36	; 0x24
   22db4:	4638      	mov	r0, r7
   22db6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   22dba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   22dbe:	f7fd fd44 	bl	2084a <bt_uuid_cmp>
   22dc2:	b9e0      	cbnz	r0, 22dfe <gatt_find_info_rsp+0x116>
				skip = true;
   22dc4:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   22dc8:	9b00      	ldr	r3, [sp, #0]
   22dca:	3b01      	subs	r3, #1
   22dcc:	9300      	str	r3, [sp, #0]
   22dce:	4454      	add	r4, sl
   22dd0:	e7ac      	b.n	22d2c <gatt_find_info_rsp+0x44>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   22dd2:	78a3      	ldrb	r3, [r4, #2]
   22dd4:	78e2      	ldrb	r2, [r4, #3]
   22dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22dda:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   22dde:	e7bf      	b.n	22d60 <gatt_find_info_rsp+0x78>
			memcpy(u.u128.val, info.i128->uuid, 16);
   22de0:	2210      	movs	r2, #16
   22de2:	1ca1      	adds	r1, r4, #2
   22de4:	f10d 0011 	add.w	r0, sp, #17
   22de8:	f7fd fc9e 	bl	20728 <memcpy>
			break;
   22dec:	e7b8      	b.n	22d60 <gatt_find_info_rsp+0x78>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   22dee:	4638      	mov	r0, r7
   22df0:	f7fd fd2b 	bl	2084a <bt_uuid_cmp>
   22df4:	2800      	cmp	r0, #0
   22df6:	d0b6      	beq.n	22d66 <gatt_find_info_rsp+0x7e>
			skip = false;
   22df8:	f04f 0900 	mov.w	r9, #0
   22dfc:	e7e4      	b.n	22dc8 <gatt_find_info_rsp+0xe0>
		attr.handle = handle;
   22dfe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   22e02:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   22e06:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   22e0a:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22e0e:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   22e10:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22e14:	4632      	mov	r2, r6
   22e16:	a909      	add	r1, sp, #36	; 0x24
   22e18:	4640      	mov	r0, r8
   22e1a:	4798      	blx	r3
   22e1c:	2800      	cmp	r0, #0
   22e1e:	d1d3      	bne.n	22dc8 <gatt_find_info_rsp+0xe0>
}
   22e20:	b00f      	add	sp, #60	; 0x3c
   22e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022e26 <bt_gatt_cancel>:
{
   22e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22e28:	4604      	mov	r4, r0
   22e2a:	460d      	mov	r5, r1
	k_sched_lock();
   22e2c:	f7fb fddc 	bl	1e9e8 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   22e30:	4629      	mov	r1, r5
   22e32:	4620      	mov	r0, r4
   22e34:	f7ff f974 	bl	22120 <bt_att_find_req_by_user_data>
	if (req) {
   22e38:	4601      	mov	r1, r0
   22e3a:	b920      	cbnz	r0, 22e46 <bt_gatt_cancel+0x20>
}
   22e3c:	b002      	add	sp, #8
   22e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   22e42:	f7fb bf9f 	b.w	1ed84 <k_sched_unlock>
		func = req->func;
   22e46:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   22e48:	4620      	mov	r0, r4
   22e4a:	f7e6 fc89 	bl	9760 <bt_att_req_cancel>
	k_sched_unlock();
   22e4e:	f7fb ff99 	bl	1ed84 <k_sched_unlock>
	if (func) {
   22e52:	b12e      	cbz	r6, 22e60 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   22e54:	2300      	movs	r3, #0
   22e56:	9500      	str	r5, [sp, #0]
   22e58:	461a      	mov	r2, r3
   22e5a:	210e      	movs	r1, #14
   22e5c:	4620      	mov	r0, r4
   22e5e:	47b0      	blx	r6
}
   22e60:	b002      	add	sp, #8
   22e62:	bd70      	pop	{r4, r5, r6, pc}

00022e64 <bt_gatt_unsubscribe>:
{
   22e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   22e68:	7a83      	ldrb	r3, [r0, #10]
   22e6a:	2b07      	cmp	r3, #7
{
   22e6c:	4680      	mov	r8, r0
   22e6e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   22e70:	d155      	bne.n	22f1e <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   22e72:	f7e6 fcd1 	bl	9818 <gatt_sub_find>
	if (!sub) {
   22e76:	4606      	mov	r6, r0
   22e78:	2800      	cmp	r0, #0
   22e7a:	d053      	beq.n	22f24 <bt_gatt_unsubscribe+0xc0>
	return list->head;
   22e7c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   22e7e:	b104      	cbz	r4, 22e82 <bt_gatt_unsubscribe+0x1e>
   22e80:	3c14      	subs	r4, #20
			has_subscription = true;
   22e82:	2300      	movs	r3, #0
   22e84:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   22e86:	bb5c      	cbnz	r4, 22ee0 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   22e88:	2b00      	cmp	r3, #0
   22e8a:	d04b      	beq.n	22f24 <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   22e8c:	2f00      	cmp	r7, #0
   22e8e:	d035      	beq.n	22efc <bt_gatt_unsubscribe+0x98>
   22e90:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   22e92:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e96:	b15b      	cbz	r3, 22eb0 <bt_gatt_unsubscribe+0x4c>
   22e98:	429a      	cmp	r2, r3
   22e9a:	d13d      	bne.n	22f18 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   22e9c:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   22e9e:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   22ea0:	2c00      	cmp	r4, #0
   22ea2:	d134      	bne.n	22f0e <bt_gatt_unsubscribe+0xaa>
   22ea4:	428a      	cmp	r2, r1
	list->head = node;
   22ea6:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   22ea8:	d100      	bne.n	22eac <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   22eaa:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   22eac:	2300      	movs	r3, #0
   22eae:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   22eb0:	f105 0010 	add.w	r0, r5, #16
   22eb4:	f7ff f9bf 	bl	22236 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   22eb8:	0743      	lsls	r3, r0, #29
   22eba:	d503      	bpl.n	22ec4 <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   22ebc:	4629      	mov	r1, r5
   22ebe:	4640      	mov	r0, r8
   22ec0:	f7ff ffb1 	bl	22e26 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   22ec4:	68b3      	ldr	r3, [r6, #8]
   22ec6:	b913      	cbnz	r3, 22ece <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   22ec8:	4630      	mov	r0, r6
   22eca:	f7ff f967 	bl	2219c <gatt_sub_free>
	if (has_subscription) {
   22ece:	b367      	cbz	r7, 22f2a <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   22ed0:	2300      	movs	r3, #0
   22ed2:	682c      	ldr	r4, [r5, #0]
   22ed4:	461a      	mov	r2, r3
   22ed6:	4629      	mov	r1, r5
   22ed8:	4640      	mov	r0, r8
   22eda:	47a0      	blx	r4
	return 0;
   22edc:	2000      	movs	r0, #0
   22ede:	e014      	b.n	22f0a <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   22ee0:	42ac      	cmp	r4, r5
   22ee2:	d009      	beq.n	22ef8 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   22ee4:	8921      	ldrh	r1, [r4, #8]
   22ee6:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   22ee8:	4291      	cmp	r1, r2
   22eea:	bf08      	it	eq
   22eec:	2701      	moveq	r7, #1
	return node->next;
   22eee:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   22ef0:	2c00      	cmp	r4, #0
   22ef2:	d0c9      	beq.n	22e88 <bt_gatt_unsubscribe+0x24>
   22ef4:	3c14      	subs	r4, #20
   22ef6:	e7c6      	b.n	22e86 <bt_gatt_unsubscribe+0x22>
			found = true;
   22ef8:	2301      	movs	r3, #1
   22efa:	e7f8      	b.n	22eee <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   22efc:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   22efe:	4629      	mov	r1, r5
   22f00:	4640      	mov	r0, r8
   22f02:	f7e6 fcd1 	bl	98a8 <gatt_write_ccc>
		if (err) {
   22f06:	2800      	cmp	r0, #0
   22f08:	d0c2      	beq.n	22e90 <bt_gatt_unsubscribe+0x2c>
}
   22f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   22f0e:	428a      	cmp	r2, r1
	parent->next = child;
   22f10:	6023      	str	r3, [r4, #0]
	list->tail = node;
   22f12:	bf08      	it	eq
   22f14:	60f4      	streq	r4, [r6, #12]
}
   22f16:	e7c9      	b.n	22eac <bt_gatt_unsubscribe+0x48>
	return node->next;
   22f18:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22f1a:	681b      	ldr	r3, [r3, #0]
   22f1c:	e7bb      	b.n	22e96 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   22f1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22f22:	e7f2      	b.n	22f0a <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   22f24:	f06f 0015 	mvn.w	r0, #21
   22f28:	e7ef      	b.n	22f0a <bt_gatt_unsubscribe+0xa6>
	return 0;
   22f2a:	4638      	mov	r0, r7
   22f2c:	e7ed      	b.n	22f0a <bt_gatt_unsubscribe+0xa6>

00022f2e <bt_gatt_notification>:
{
   22f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f32:	4606      	mov	r6, r0
   22f34:	460f      	mov	r7, r1
   22f36:	4690      	mov	r8, r2
   22f38:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   22f3a:	f7e6 fc6d 	bl	9818 <gatt_sub_find>
	if (!sub) {
   22f3e:	b300      	cbz	r0, 22f82 <bt_gatt_notification+0x54>
	return list->head;
   22f40:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   22f42:	b1f4      	cbz	r4, 22f82 <bt_gatt_notification+0x54>
	return node->next;
   22f44:	f854 a914 	ldr.w	sl, [r4], #-20
   22f48:	f1ba 0f00 	cmp.w	sl, #0
   22f4c:	d001      	beq.n	22f52 <bt_gatt_notification+0x24>
   22f4e:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   22f52:	8923      	ldrh	r3, [r4, #8]
   22f54:	42bb      	cmp	r3, r7
   22f56:	d10a      	bne.n	22f6e <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   22f58:	6825      	ldr	r5, [r4, #0]
   22f5a:	464b      	mov	r3, r9
   22f5c:	4642      	mov	r2, r8
   22f5e:	4621      	mov	r1, r4
   22f60:	4630      	mov	r0, r6
   22f62:	47a8      	blx	r5
   22f64:	b918      	cbnz	r0, 22f6e <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   22f66:	4621      	mov	r1, r4
   22f68:	4630      	mov	r0, r6
   22f6a:	f7ff ff7b 	bl	22e64 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   22f6e:	f1ba 0f00 	cmp.w	sl, #0
   22f72:	d006      	beq.n	22f82 <bt_gatt_notification+0x54>
   22f74:	f8da 5014 	ldr.w	r5, [sl, #20]
   22f78:	b105      	cbz	r5, 22f7c <bt_gatt_notification+0x4e>
   22f7a:	3d14      	subs	r5, #20
{
   22f7c:	4654      	mov	r4, sl
   22f7e:	46aa      	mov	sl, r5
   22f80:	e7e7      	b.n	22f52 <bt_gatt_notification+0x24>
}
   22f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022f86 <bt_gatt_mult_notification>:
{
   22f86:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   22f8a:	4681      	mov	r9, r0
   22f8c:	460c      	mov	r4, r1
   22f8e:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   22f90:	f7e6 fc42 	bl	9818 <gatt_sub_find>
	if (!sub) {
   22f94:	4607      	mov	r7, r0
   22f96:	b140      	cbz	r0, 22faa <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   22f98:	462a      	mov	r2, r5
   22f9a:	4621      	mov	r1, r4
   22f9c:	a801      	add	r0, sp, #4
   22f9e:	f000 f8af 	bl	23100 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   22fa2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22fa6:	2b04      	cmp	r3, #4
   22fa8:	d802      	bhi.n	22fb0 <bt_gatt_mult_notification+0x2a>
}
   22faa:	b004      	add	sp, #16
   22fac:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   22fb0:	2104      	movs	r1, #4
   22fb2:	eb0d 0001 	add.w	r0, sp, r1
   22fb6:	f000 f91d 	bl	231f4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   22fba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   22fbe:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   22fc2:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   22fc4:	4605      	mov	r5, r0
		if (len > buf.len) {
   22fc6:	d3f0      	bcc.n	22faa <bt_gatt_mult_notification+0x24>
	return list->head;
   22fc8:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   22fca:	b1dc      	cbz	r4, 23004 <bt_gatt_mult_notification+0x7e>
	return node->next;
   22fcc:	f854 6914 	ldr.w	r6, [r4], #-20
   22fd0:	b106      	cbz	r6, 22fd4 <bt_gatt_mult_notification+0x4e>
   22fd2:	3e14      	subs	r6, #20
		handle = sys_cpu_to_le16(nfy->handle);
   22fd4:	f835 ab04 	ldrh.w	sl, [r5], #4
			if (handle != params->value_handle) {
   22fd8:	8923      	ldrh	r3, [r4, #8]
   22fda:	4553      	cmp	r3, sl
   22fdc:	d10b      	bne.n	22ff6 <bt_gatt_mult_notification+0x70>
			if (params->notify(conn, params, nfy->value, len) ==
   22fde:	f8d4 c000 	ldr.w	ip, [r4]
   22fe2:	465b      	mov	r3, fp
   22fe4:	462a      	mov	r2, r5
   22fe6:	4621      	mov	r1, r4
   22fe8:	4648      	mov	r0, r9
   22fea:	47e0      	blx	ip
   22fec:	b918      	cbnz	r0, 22ff6 <bt_gatt_mult_notification+0x70>
				bt_gatt_unsubscribe(conn, params);
   22fee:	4621      	mov	r1, r4
   22ff0:	4648      	mov	r0, r9
   22ff2:	f7ff ff37 	bl	22e64 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   22ff6:	b12e      	cbz	r6, 23004 <bt_gatt_mult_notification+0x7e>
   22ff8:	6972      	ldr	r2, [r6, #20]
   22ffa:	b102      	cbz	r2, 22ffe <bt_gatt_mult_notification+0x78>
   22ffc:	3a14      	subs	r2, #20
{
   22ffe:	4634      	mov	r4, r6
   23000:	4616      	mov	r6, r2
   23002:	e7e9      	b.n	22fd8 <bt_gatt_mult_notification+0x52>
		net_buf_simple_pull_mem(&buf, len);
   23004:	4659      	mov	r1, fp
   23006:	a801      	add	r0, sp, #4
   23008:	f000 f8f4 	bl	231f4 <net_buf_simple_pull_mem>
   2300c:	e7c9      	b.n	22fa2 <bt_gatt_mult_notification+0x1c>

0002300e <bt_gatt_change_aware>:
{
   2300e:	b510      	push	{r4, lr}
   23010:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   23012:	f7e6 fbd3 	bl	97bc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23016:	b910      	cbnz	r0, 2301e <bt_gatt_change_aware+0x10>
		return true;
   23018:	2401      	movs	r4, #1
}
   2301a:	4620      	mov	r0, r4
   2301c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2301e:	7a03      	ldrb	r3, [r0, #8]
   23020:	07d9      	lsls	r1, r3, #31
   23022:	d5f9      	bpl.n	23018 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23024:	f100 030c 	add.w	r3, r0, #12
   23028:	4618      	mov	r0, r3
   2302a:	f7ff f904 	bl	22236 <atomic_get>
   2302e:	f010 0101 	ands.w	r1, r0, #1
   23032:	d1f1      	bne.n	23018 <bt_gatt_change_aware+0xa>
	if (!req) {
   23034:	2c00      	cmp	r4, #0
   23036:	d0f0      	beq.n	2301a <bt_gatt_change_aware+0xc>
   23038:	4618      	mov	r0, r3
   2303a:	f7ff f8fc 	bl	22236 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2303e:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23040:	f3c0 0440 	ubfx	r4, r0, #1, #1
   23044:	d50f      	bpl.n	23066 <bt_gatt_change_aware+0x58>
   23046:	f3bf 8f5b 	dmb	ish
   2304a:	e853 2f00 	ldrex	r2, [r3]
   2304e:	f022 0202 	bic.w	r2, r2, #2
   23052:	e843 2000 	strex	r0, r2, [r3]
   23056:	2800      	cmp	r0, #0
   23058:	d1f7      	bne.n	2304a <bt_gatt_change_aware+0x3c>
   2305a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2305e:	4618      	mov	r0, r3
   23060:	f7ff fa6b 	bl	2253a <atomic_set_bit>
	return false;
   23064:	e7d9      	b.n	2301a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23066:	2101      	movs	r1, #1
   23068:	e7f9      	b.n	2305e <bt_gatt_change_aware+0x50>

0002306a <bt_smp_recv>:
{
   2306a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2306c:	2100      	movs	r1, #0
   2306e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   23076:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   23078:	4608      	mov	r0, r1
   2307a:	f7fe fab6 	bl	215ea <bt_l2cap_create_pdu_timeout>
   2307e:	f100 0608 	add.w	r6, r0, #8
   23082:	4604      	mov	r4, r0
   23084:	2101      	movs	r1, #1
   23086:	4630      	mov	r0, r6
   23088:	f000 f883 	bl	23192 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2308c:	2505      	movs	r5, #5
   2308e:	7005      	strb	r5, [r0, #0]
   23090:	2101      	movs	r1, #1
   23092:	4630      	mov	r0, r6
   23094:	f000 f87d 	bl	23192 <net_buf_simple_add>
   23098:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2309a:	7005      	strb	r5, [r0, #0]
   2309c:	4622      	mov	r2, r4
   2309e:	9300      	str	r3, [sp, #0]
   230a0:	2106      	movs	r1, #6
   230a2:	4638      	mov	r0, r7
   230a4:	f7fe faa4 	bl	215f0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   230a8:	b110      	cbz	r0, 230b0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   230aa:	4620      	mov	r0, r4
   230ac:	f7f7 f808 	bl	1a0c0 <net_buf_unref>
}
   230b0:	2000      	movs	r0, #0
   230b2:	b003      	add	sp, #12
   230b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000230b6 <bt_smp_sign>:
   230b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   230ba:	4770      	bx	lr

000230bc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   230bc:	2000      	movs	r0, #0
   230be:	4770      	bx	lr

000230c0 <fixed_data_unref>:
}
   230c0:	4770      	bx	lr

000230c2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   230c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   230c4:	6849      	ldr	r1, [r1, #4]
   230c6:	6809      	ldr	r1, [r1, #0]
   230c8:	f7f6 bf66 	b.w	19f98 <net_buf_alloc_len>

000230cc <net_buf_get>:
{
   230cc:	b570      	push	{r4, r5, r6, lr}
   230ce:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   230d0:	f7fb f9f0 	bl	1e4b4 <z_impl_k_queue_get>
	if (!buf) {
   230d4:	4605      	mov	r5, r0
   230d6:	b128      	cbz	r0, 230e4 <net_buf_get+0x18>
   230d8:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   230da:	7963      	ldrb	r3, [r4, #5]
   230dc:	f013 0301 	ands.w	r3, r3, #1
   230e0:	d102      	bne.n	230e8 <net_buf_get+0x1c>
	frag->frags = NULL;
   230e2:	6023      	str	r3, [r4, #0]
}
   230e4:	4628      	mov	r0, r5
   230e6:	bd70      	pop	{r4, r5, r6, pc}
   230e8:	2300      	movs	r3, #0
   230ea:	2200      	movs	r2, #0
   230ec:	4630      	mov	r0, r6
   230ee:	f7fb f9e1 	bl	1e4b4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   230f2:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   230f4:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   230f6:	f023 0301 	bic.w	r3, r3, #1
   230fa:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   230fc:	4604      	mov	r4, r0
   230fe:	e7ec      	b.n	230da <net_buf_get+0xe>

00023100 <net_buf_simple_init_with_data>:
	buf->size  = size;
   23100:	b292      	uxth	r2, r2
	buf->__buf = data;
   23102:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   23104:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   23106:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   23108:	8082      	strh	r2, [r0, #4]
}
   2310a:	4770      	bx	lr

0002310c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2310c:	6883      	ldr	r3, [r0, #8]
   2310e:	440b      	add	r3, r1
   23110:	6003      	str	r3, [r0, #0]
}
   23112:	4770      	bx	lr

00023114 <net_buf_put>:
{
   23114:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   23116:	460a      	mov	r2, r1
   23118:	6814      	ldr	r4, [r2, #0]
   2311a:	b914      	cbnz	r4, 23122 <net_buf_put+0xe>
}
   2311c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2311e:	f000 bf88 	b.w	24032 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   23122:	7953      	ldrb	r3, [r2, #5]
   23124:	f043 0301 	orr.w	r3, r3, #1
   23128:	7153      	strb	r3, [r2, #5]
   2312a:	4622      	mov	r2, r4
   2312c:	e7f4      	b.n	23118 <net_buf_put+0x4>

0002312e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2312e:	7902      	ldrb	r2, [r0, #4]
   23130:	3201      	adds	r2, #1
   23132:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23134:	4770      	bx	lr

00023136 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23136:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23138:	4618      	mov	r0, r3
   2313a:	681b      	ldr	r3, [r3, #0]
   2313c:	2b00      	cmp	r3, #0
   2313e:	d1fb      	bne.n	23138 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23140:	4770      	bx	lr

00023142 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23142:	6802      	ldr	r2, [r0, #0]
{
   23144:	b510      	push	{r4, lr}
	if (parent->frags) {
   23146:	b12a      	cbz	r2, 23154 <net_buf_frag_insert+0x12>
   23148:	460b      	mov	r3, r1
	while (buf->frags) {
   2314a:	461c      	mov	r4, r3
   2314c:	681b      	ldr	r3, [r3, #0]
   2314e:	2b00      	cmp	r3, #0
   23150:	d1fb      	bne.n	2314a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   23152:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23154:	6001      	str	r1, [r0, #0]
}
   23156:	bd10      	pop	{r4, pc}

00023158 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   23158:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2315a:	4604      	mov	r4, r0
   2315c:	b920      	cbnz	r0, 23168 <net_buf_frag_add+0x10>
	buf->ref++;
   2315e:	790b      	ldrb	r3, [r1, #4]
   23160:	3301      	adds	r3, #1
   23162:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   23164:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   23166:	bd10      	pop	{r4, pc}
   23168:	4603      	mov	r3, r0
	while (buf->frags) {
   2316a:	4618      	mov	r0, r3
   2316c:	681b      	ldr	r3, [r3, #0]
   2316e:	2b00      	cmp	r3, #0
   23170:	d1fb      	bne.n	2316a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23172:	f7ff ffe6 	bl	23142 <net_buf_frag_insert>
   23176:	4620      	mov	r0, r4
   23178:	e7f5      	b.n	23166 <net_buf_frag_add+0xe>

0002317a <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   2317a:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   2317c:	b108      	cbz	r0, 23182 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   2317e:	680b      	ldr	r3, [r1, #0]
   23180:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   23182:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   23184:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   23186:	4608      	mov	r0, r1
	frag->frags = NULL;
   23188:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2318a:	f7f6 ff99 	bl	1a0c0 <net_buf_unref>
#endif

	return next_frag;
}
   2318e:	4620      	mov	r0, r4
   23190:	bd10      	pop	{r4, pc}

00023192 <net_buf_simple_add>:
	return buf->data + buf->len;
   23192:	8883      	ldrh	r3, [r0, #4]
   23194:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   23196:	4419      	add	r1, r3
   23198:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2319a:	18d0      	adds	r0, r2, r3
   2319c:	4770      	bx	lr

0002319e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2319e:	b430      	push	{r4, r5}
   231a0:	8884      	ldrh	r4, [r0, #4]
   231a2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   231a4:	18a3      	adds	r3, r4, r2
   231a6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   231a8:	1928      	adds	r0, r5, r4
}
   231aa:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   231ac:	f7fd babc 	b.w	20728 <memcpy>

000231b0 <net_buf_simple_add_u8>:
   231b0:	8883      	ldrh	r3, [r0, #4]
   231b2:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   231b4:	b510      	push	{r4, lr}
	buf->len += len;
   231b6:	1c5c      	adds	r4, r3, #1
   231b8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   231ba:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   231bc:	18d0      	adds	r0, r2, r3
   231be:	bd10      	pop	{r4, pc}

000231c0 <net_buf_simple_add_le16>:
   231c0:	8883      	ldrh	r3, [r0, #4]
   231c2:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   231c4:	b530      	push	{r4, r5, lr}
   231c6:	18d4      	adds	r4, r2, r3
	buf->len += len;
   231c8:	1c9d      	adds	r5, r3, #2
   231ca:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   231cc:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   231ce:	0a09      	lsrs	r1, r1, #8
   231d0:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   231d2:	bd30      	pop	{r4, r5, pc}

000231d4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   231d4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   231d6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   231d8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   231da:	1a40      	subs	r0, r0, r1
	buf->len += len;
   231dc:	4411      	add	r1, r2
	buf->data -= len;
   231de:	6018      	str	r0, [r3, #0]
	buf->len += len;
   231e0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   231e2:	4770      	bx	lr

000231e4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   231e4:	8882      	ldrh	r2, [r0, #4]
   231e6:	1a52      	subs	r2, r2, r1
{
   231e8:	4603      	mov	r3, r0
	buf->len -= len;
   231ea:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   231ec:	6800      	ldr	r0, [r0, #0]
   231ee:	4408      	add	r0, r1
   231f0:	6018      	str	r0, [r3, #0]
}
   231f2:	4770      	bx	lr

000231f4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   231f4:	4603      	mov	r3, r0
	void *data = buf->data;
   231f6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   231f8:	889a      	ldrh	r2, [r3, #4]
   231fa:	1a52      	subs	r2, r2, r1
	buf->data += len;
   231fc:	4401      	add	r1, r0
	buf->len -= len;
   231fe:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   23200:	6019      	str	r1, [r3, #0]

	return data;
}
   23202:	4770      	bx	lr

00023204 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   23204:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   23206:	6803      	ldr	r3, [r0, #0]
   23208:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2320a:	2101      	movs	r1, #1
   2320c:	f7ff ffea 	bl	231e4 <net_buf_simple_pull>

	return val;
}
   23210:	4620      	mov	r0, r4
   23212:	bd10      	pop	{r4, pc}

00023214 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   23214:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   23216:	6803      	ldr	r3, [r0, #0]
   23218:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2321a:	2102      	movs	r1, #2
   2321c:	f7ff ffe2 	bl	231e4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   23220:	4620      	mov	r0, r4
   23222:	bd10      	pop	{r4, pc}

00023224 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   23224:	6802      	ldr	r2, [r0, #0]
   23226:	6880      	ldr	r0, [r0, #8]
}
   23228:	1a10      	subs	r0, r2, r0
   2322a:	4770      	bx	lr

0002322c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2322c:	8883      	ldrh	r3, [r0, #4]
   2322e:	88c2      	ldrh	r2, [r0, #6]
   23230:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   23232:	6803      	ldr	r3, [r0, #0]
   23234:	6880      	ldr	r0, [r0, #8]
   23236:	1a18      	subs	r0, r3, r0
}
   23238:	1a10      	subs	r0, r2, r0
   2323a:	4770      	bx	lr

0002323c <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2323c:	6903      	ldr	r3, [r0, #16]
{
   2323e:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   23240:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   23244:	2300      	movs	r3, #0
   23246:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   23248:	7f83      	ldrb	r3, [r0, #30]
{
   2324a:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2324c:	b113      	cbz	r3, 23254 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2324e:	7a40      	ldrb	r0, [r0, #9]
   23250:	f000 fd6d 	bl	23d2e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   23254:	2301      	movs	r3, #1
   23256:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   23258:	2300      	movs	r3, #0
   2325a:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2325c:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2325e:	77a3      	strb	r3, [r4, #30]
}
   23260:	bd10      	pop	{r4, pc}

00023262 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   23262:	f7fb b86d 	b.w	1e340 <z_impl_k_mutex_lock>

00023266 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   23266:	f7fb b8e3 	b.w	1e430 <z_impl_k_mutex_unlock>

0002326a <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2326a:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2326c:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2326e:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   23272:	b921      	cbnz	r1, 2327e <usb_dc_ep_check_cap+0x14>
   23274:	1e10      	subs	r0, r2, #0
   23276:	bf18      	it	ne
   23278:	2001      	movne	r0, #1
   2327a:	4240      	negs	r0, r0
   2327c:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   2327e:	2a08      	cmp	r2, #8
   23280:	d806      	bhi.n	23290 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   23282:	2901      	cmp	r1, #1
   23284:	d107      	bne.n	23296 <usb_dc_ep_check_cap+0x2c>
   23286:	f083 0008 	eor.w	r0, r3, #8
   2328a:	f340 00c0 	sbfx	r0, r0, #3, #1
   2328e:	4770      	bx	lr
		return -1;
   23290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23294:	4770      	bx	lr
	return 0;
   23296:	2000      	movs	r0, #0
}
   23298:	4770      	bx	lr

0002329a <usb_dc_ep_read>:
{
   2329a:	b570      	push	{r4, r5, r6, lr}
   2329c:	4604      	mov	r4, r0
   2329e:	460e      	mov	r6, r1
   232a0:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   232a2:	f7f7 fc35 	bl	1ab10 <usb_dc_ep_read_wait>
	if (ret) {
   232a6:	b930      	cbnz	r0, 232b6 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   232a8:	b906      	cbnz	r6, 232ac <usb_dc_ep_read+0x12>
   232aa:	b125      	cbz	r5, 232b6 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   232ac:	4620      	mov	r0, r4
}
   232ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   232b2:	f7f7 bc75 	b.w	1aba0 <usb_dc_ep_read_continue>
}
   232b6:	bd70      	pop	{r4, r5, r6, pc}

000232b8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   232b8:	6903      	ldr	r3, [r0, #16]
   232ba:	b2c9      	uxtb	r1, r1
   232bc:	220c      	movs	r2, #12
   232be:	fb01 3302 	mla	r3, r1, r2, r3
   232c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   232c4:	f000 0007 	and.w	r0, r0, #7
   232c8:	4770      	bx	lr

000232ca <set_on_state>:
	__asm__ volatile(
   232ca:	f04f 0320 	mov.w	r3, #32
   232ce:	f3ef 8211 	mrs	r2, BASEPRI
   232d2:	f383 8812 	msr	BASEPRI_MAX, r3
   232d6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   232da:	6803      	ldr	r3, [r0, #0]
   232dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   232e0:	f043 0302 	orr.w	r3, r3, #2
   232e4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   232e6:	f382 8811 	msr	BASEPRI, r2
   232ea:	f3bf 8f6f 	isb	sy
}
   232ee:	4770      	bx	lr

000232f0 <stop>:
{
   232f0:	4603      	mov	r3, r0
   232f2:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   232f4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   232f6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   232f8:	f04f 0420 	mov.w	r4, #32
   232fc:	f3ef 8611 	mrs	r6, BASEPRI
   23300:	f384 8812 	msr	BASEPRI_MAX, r4
   23304:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23308:	250c      	movs	r5, #12
   2330a:	fb05 0401 	mla	r4, r5, r1, r0
   2330e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23310:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   23314:	d001      	beq.n	2331a <stop+0x2a>
   23316:	42a2      	cmp	r2, r4
   23318:	d110      	bne.n	2333c <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2331a:	fb05 0001 	mla	r0, r5, r1, r0
   2331e:	2201      	movs	r2, #1
   23320:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   23322:	2000      	movs	r0, #0
	__asm__ volatile(
   23324:	f386 8811 	msr	BASEPRI, r6
   23328:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2332c:	b928      	cbnz	r0, 2333a <stop+0x4a>
	get_sub_config(dev, type)->stop();
   2332e:	685b      	ldr	r3, [r3, #4]
   23330:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   23334:	684b      	ldr	r3, [r1, #4]
   23336:	4798      	blx	r3
	return 0;
   23338:	2000      	movs	r0, #0
}
   2333a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2333c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23340:	e7f0      	b.n	23324 <stop+0x34>

00023342 <api_stop>:
	return stop(dev, subsys, CTX_API);
   23342:	2280      	movs	r2, #128	; 0x80
   23344:	f7ff bfd4 	b.w	232f0 <stop>

00023348 <async_start>:
{
   23348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2334a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2334c:	6904      	ldr	r4, [r0, #16]
{
   2334e:	4605      	mov	r5, r0
   23350:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   23352:	f04f 0020 	mov.w	r0, #32
   23356:	f3ef 8c11 	mrs	ip, BASEPRI
   2335a:	f380 8812 	msr	BASEPRI_MAX, r0
   2335e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23362:	260c      	movs	r6, #12
   23364:	fb06 4601 	mla	r6, r6, r1, r4
   23368:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2336a:	f000 0e07 	and.w	lr, r0, #7
   2336e:	f1be 0f01 	cmp.w	lr, #1
   23372:	d111      	bne.n	23398 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23374:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   23376:	2600      	movs	r6, #0
	__asm__ volatile(
   23378:	f38c 8811 	msr	BASEPRI, ip
   2337c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   23380:	b946      	cbnz	r6, 23394 <async_start+0x4c>
	subdata->cb = cb;
   23382:	200c      	movs	r0, #12
   23384:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   23388:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2338c:	686b      	ldr	r3, [r5, #4]
   2338e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   23392:	4798      	blx	r3
}
   23394:	4630      	mov	r0, r6
   23396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   23398:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2339c:	4287      	cmp	r7, r0
   2339e:	bf14      	ite	ne
   233a0:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   233a4:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   233a8:	e7e6      	b.n	23378 <async_start+0x30>

000233aa <api_start>:
{
   233aa:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   233ac:	2480      	movs	r4, #128	; 0x80
   233ae:	9400      	str	r4, [sp, #0]
   233b0:	f7ff ffca 	bl	23348 <async_start>
}
   233b4:	b002      	add	sp, #8
   233b6:	bd10      	pop	{r4, pc}

000233b8 <onoff_started_callback>:
	return &data->mgr[type];
   233b8:	6900      	ldr	r0, [r0, #16]
{
   233ba:	b410      	push	{r4}
	return &data->mgr[type];
   233bc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   233be:	241c      	movs	r4, #28
   233c0:	fb03 0004 	mla	r0, r3, r4, r0
   233c4:	2100      	movs	r1, #0
}
   233c6:	bc10      	pop	{r4}
	notify(mgr, 0);
   233c8:	4710      	bx	r2

000233ca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   233ca:	2000      	movs	r0, #0
   233cc:	f000 ba55 	b.w	2387a <nrfx_clock_start>

000233d0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   233d0:	2000      	movs	r0, #0
   233d2:	f7f8 bf23 	b.w	1c21c <nrfx_clock_stop>

000233d6 <blocking_start_callback>:
{
   233d6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   233d8:	f7fb b8a0 	b.w	1e51c <z_impl_k_sem_give>

000233dc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   233dc:	6843      	ldr	r3, [r0, #4]
   233de:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   233e0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   233e4:	600b      	str	r3, [r1, #0]
}
   233e6:	2000      	movs	r0, #0
   233e8:	4770      	bx	lr

000233ea <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   233ea:	6843      	ldr	r3, [r0, #4]
   233ec:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   233ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   233f2:	4042      	eors	r2, r0
   233f4:	400a      	ands	r2, r1
   233f6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   233f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   233fc:	2000      	movs	r0, #0
   233fe:	4770      	bx	lr

00023400 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23400:	6843      	ldr	r3, [r0, #4]
   23402:	685b      	ldr	r3, [r3, #4]
}
   23404:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   23406:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2340a:	4770      	bx	lr

0002340c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2340c:	6843      	ldr	r3, [r0, #4]
   2340e:	685b      	ldr	r3, [r3, #4]
}
   23410:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   23412:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   23416:	4770      	bx	lr

00023418 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23418:	6843      	ldr	r3, [r0, #4]
   2341a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2341c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   23420:	404b      	eors	r3, r1
    p_reg->OUT = value;
   23422:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   23426:	2000      	movs	r0, #0
   23428:	4770      	bx	lr

0002342a <gpio_nrfx_manage_callback>:
	return port->data;
   2342a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2342c:	6858      	ldr	r0, [r3, #4]
{
   2342e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   23430:	b158      	cbz	r0, 2344a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23432:	2400      	movs	r4, #0
   23434:	4281      	cmp	r1, r0
   23436:	d112      	bne.n	2345e <gpio_nrfx_manage_callback+0x34>
	return node->next;
   23438:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2343a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2343c:	b954      	cbnz	r4, 23454 <gpio_nrfx_manage_callback+0x2a>
   2343e:	428d      	cmp	r5, r1
	list->head = node;
   23440:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   23442:	d100      	bne.n	23446 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   23444:	6098      	str	r0, [r3, #8]
	parent->next = child;
   23446:	2000      	movs	r0, #0
   23448:	6008      	str	r0, [r1, #0]
	if (set) {
   2344a:	b96a      	cbnz	r2, 23468 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2344c:	2000      	movs	r0, #0
}
   2344e:	bd30      	pop	{r4, r5, pc}
   23450:	4628      	mov	r0, r5
   23452:	e7ef      	b.n	23434 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   23454:	428d      	cmp	r5, r1
	parent->next = child;
   23456:	6020      	str	r0, [r4, #0]
	list->tail = node;
   23458:	bf08      	it	eq
   2345a:	609c      	streq	r4, [r3, #8]
}
   2345c:	e7f3      	b.n	23446 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2345e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23460:	4604      	mov	r4, r0
   23462:	2d00      	cmp	r5, #0
   23464:	d1f4      	bne.n	23450 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   23466:	b13a      	cbz	r2, 23478 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   23468:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2346a:	685a      	ldr	r2, [r3, #4]
   2346c:	600a      	str	r2, [r1, #0]
	list->head = node;
   2346e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23470:	2800      	cmp	r0, #0
   23472:	d1eb      	bne.n	2344c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   23474:	6099      	str	r1, [r3, #8]
}
   23476:	e7ea      	b.n	2344e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   23478:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2347c:	e7e7      	b.n	2344e <gpio_nrfx_manage_callback+0x24>

0002347e <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   2347e:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
   23480:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   23482:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   23484:	d405      	bmi.n	23492 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   23486:	f3c1 0242 	ubfx	r2, r1, #1, #3
   2348a:	2a01      	cmp	r2, #1
   2348c:	d004      	beq.n	23498 <i2c_nrfx_twi_configure+0x1a>
   2348e:	2a02      	cmp	r2, #2
   23490:	d00a      	beq.n	234a8 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
   23492:	f06f 0015 	mvn.w	r0, #21
}
   23496:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   23498:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   2349a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   2349e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   234a2:	6341      	str	r1, [r0, #52]	; 0x34
	return 0;
   234a4:	2000      	movs	r0, #0
   234a6:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   234a8:	681b      	ldr	r3, [r3, #0]
   234aa:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   234ae:	e7f6      	b.n	2349e <i2c_nrfx_twi_configure+0x20>

000234b0 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   234b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   234b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   234b6:	2908      	cmp	r1, #8
   234b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   234ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
   234bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   234be:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   234c0:	ea4f 2515 	mov.w	r5, r5, lsr #8
   234c4:	ea4f 6303 	mov.w	r3, r3, lsl #24
   234c8:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   234cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   234d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   234d4:	ea43 0305 	orr.w	r3, r3, r5
   234d8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   234dc:	ea43 0302 	orr.w	r3, r3, r2
   234e0:	9300      	str	r3, [sp, #0]
   234e2:	6e26      	ldr	r6, [r4, #96]	; 0x60
   234e4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   234e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   234e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   234ea:	ea4f 2415 	mov.w	r4, r5, lsr #8
   234ee:	ea4f 6303 	mov.w	r3, r3, lsl #24
   234f2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   234f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   234fa:	ea43 0304 	orr.w	r3, r3, r4
   234fe:	ea4f 2402 	mov.w	r4, r2, lsl #8
   23502:	bf28      	it	cs
   23504:	2108      	movcs	r1, #8
   23506:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   2350a:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2350c:	460a      	mov	r2, r1
   2350e:	460c      	mov	r4, r1
   23510:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   23512:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   23514:	f7fd f908 	bl	20728 <memcpy>

	return length;
}
   23518:	4620      	mov	r0, r4
   2351a:	b002      	add	sp, #8
   2351c:	bd70      	pop	{r4, r5, r6, pc}

0002351e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2351e:	6902      	ldr	r2, [r0, #16]
{
   23520:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   23522:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   23526:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2352a:	2000      	movs	r0, #0
   2352c:	4770      	bx	lr

0002352e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2352e:	6843      	ldr	r3, [r0, #4]
   23530:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23532:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23536:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2353a:	4770      	bx	lr

0002353c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2353c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2353e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   23540:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23542:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23546:	b148      	cbz	r0, 2355c <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   23548:	7d52      	ldrb	r2, [r2, #21]
   2354a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2354c:	2000      	movs	r0, #0
   2354e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23552:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23556:	2201      	movs	r2, #1
   23558:	601a      	str	r2, [r3, #0]
	return 0;
   2355a:	4770      	bx	lr
		return -1;
   2355c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23560:	4770      	bx	lr

00023562 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23562:	2a00      	cmp	r2, #0
{
   23564:	b510      	push	{r4, lr}
   23566:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23568:	dd0f      	ble.n	2358a <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2356a:	6843      	ldr	r3, [r0, #4]
   2356c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2356e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23572:	b148      	cbz	r0, 23588 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   23574:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23576:	2000      	movs	r0, #0
   23578:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2357c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   23580:	7d52      	ldrb	r2, [r2, #21]
   23582:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23584:	2001      	movs	r0, #1
   23586:	6018      	str	r0, [r3, #0]
}
   23588:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2358a:	2000      	movs	r0, #0
   2358c:	e7fc      	b.n	23588 <uarte_nrfx_fifo_read+0x26>

0002358e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2358e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   23590:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   23592:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   23594:	f04f 0020 	mov.w	r0, #32
   23598:	f3ef 8311 	mrs	r3, BASEPRI
   2359c:	f380 8812 	msr	BASEPRI_MAX, r0
   235a0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   235a4:	68c9      	ldr	r1, [r1, #12]
   235a6:	2000      	movs	r0, #0
   235a8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   235aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   235ae:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   235b2:	f383 8811 	msr	BASEPRI, r3
   235b6:	f3bf 8f6f 	isb	sy
}
   235ba:	4770      	bx	lr

000235bc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   235bc:	6903      	ldr	r3, [r0, #16]
   235be:	68db      	ldr	r3, [r3, #12]
   235c0:	2201      	movs	r2, #1
   235c2:	739a      	strb	r2, [r3, #14]
}
   235c4:	4770      	bx	lr

000235c6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   235c6:	6903      	ldr	r3, [r0, #16]
   235c8:	68db      	ldr	r3, [r3, #12]
   235ca:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   235cc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   235d0:	b962      	cbnz	r2, 235ec <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   235d2:	6842      	ldr	r2, [r0, #4]
   235d4:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   235d6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   235da:	b140      	cbz	r0, 235ee <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   235dc:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   235e0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   235e4:	d003      	beq.n	235ee <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   235e6:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   235e8:	2001      	movs	r0, #1
   235ea:	4770      	bx	lr
   235ec:	2000      	movs	r0, #0
}
   235ee:	4770      	bx	lr

000235f0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   235f0:	6843      	ldr	r3, [r0, #4]
   235f2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   235f4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   235f8:	3800      	subs	r0, #0
   235fa:	bf18      	it	ne
   235fc:	2001      	movne	r0, #1
   235fe:	4770      	bx	lr

00023600 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   23600:	6843      	ldr	r3, [r0, #4]
   23602:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   23604:	2210      	movs	r2, #16
   23606:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2360a:	4770      	bx	lr

0002360c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2360c:	6843      	ldr	r3, [r0, #4]
   2360e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   23610:	2210      	movs	r2, #16
   23612:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23616:	4770      	bx	lr

00023618 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   23618:	6843      	ldr	r3, [r0, #4]
   2361a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2361c:	f44f 7200 	mov.w	r2, #512	; 0x200
   23620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23624:	4770      	bx	lr

00023626 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   23626:	6843      	ldr	r3, [r0, #4]
   23628:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2362a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2362e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23632:	4770      	bx	lr

00023634 <uarte_nrfx_irq_update>:
}
   23634:	2001      	movs	r0, #1
   23636:	4770      	bx	lr

00023638 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   23638:	6903      	ldr	r3, [r0, #16]
   2363a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2363c:	e9c3 1200 	strd	r1, r2, [r3]
}
   23640:	4770      	bx	lr

00023642 <uarte_nrfx_irq_is_pending>:
{
   23642:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   23644:	6843      	ldr	r3, [r0, #4]
   23646:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23648:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2364c:	025b      	lsls	r3, r3, #9
{
   2364e:	4604      	mov	r4, r0
		||
   23650:	d405      	bmi.n	2365e <uarte_nrfx_irq_is_pending+0x1c>
   23652:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   23656:	f010 0010 	ands.w	r0, r0, #16
   2365a:	d106      	bne.n	2366a <uarte_nrfx_irq_is_pending+0x28>
}
   2365c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2365e:	f7ff ffb2 	bl	235c6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   23662:	2800      	cmp	r0, #0
   23664:	d0f5      	beq.n	23652 <uarte_nrfx_irq_is_pending+0x10>
		||
   23666:	2001      	movs	r0, #1
   23668:	e7f8      	b.n	2365c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2366a:	4620      	mov	r0, r4
   2366c:	f7ff ffc0 	bl	235f0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   23670:	3800      	subs	r0, #0
   23672:	bf18      	it	ne
   23674:	2001      	movne	r0, #1
   23676:	e7f1      	b.n	2365c <uarte_nrfx_irq_is_pending+0x1a>

00023678 <nrf_gpio_cfg_input>:
{
   23678:	b507      	push	{r0, r1, r2, lr}
   2367a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2367c:	a801      	add	r0, sp, #4
   2367e:	f7f7 ff05 	bl	1b48c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23682:	9b01      	ldr	r3, [sp, #4]
   23684:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   23688:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2368a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2368e:	b003      	add	sp, #12
   23690:	f85d fb04 	ldr.w	pc, [sp], #4

00023694 <tx_start.isra.0>:
	return config->uarte_regs;
   23694:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23696:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2369a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2369e:	2200      	movs	r2, #0
   236a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   236a4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   236a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   236ac:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   236b0:	6842      	ldr	r2, [r0, #4]
   236b2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   236b4:	bf41      	itttt	mi
   236b6:	2208      	movmi	r2, #8
   236b8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   236bc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   236c0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   236c4:	2201      	movs	r2, #1
   236c6:	609a      	str	r2, [r3, #8]
}
   236c8:	4770      	bx	lr

000236ca <is_tx_ready.isra.0>:
	return config->uarte_regs;
   236ca:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   236cc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   236ce:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   236d2:	b940      	cbnz	r0, 236e6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   236d4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   236d6:	079b      	lsls	r3, r3, #30
   236d8:	d406      	bmi.n	236e8 <is_tx_ready.isra.0+0x1e>
   236da:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   236de:	3800      	subs	r0, #0
   236e0:	bf18      	it	ne
   236e2:	2001      	movne	r0, #1
   236e4:	4770      	bx	lr
   236e6:	2001      	movs	r0, #1
}
   236e8:	4770      	bx	lr

000236ea <uarte_nrfx_fifo_fill>:
{
   236ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   236ec:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   236ee:	68f3      	ldr	r3, [r6, #12]
   236f0:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   236f2:	f3bf 8f5b 	dmb	ish
   236f6:	4294      	cmp	r4, r2
   236f8:	bfa8      	it	ge
   236fa:	4614      	movge	r4, r2
{
   236fc:	4605      	mov	r5, r0
   236fe:	3310      	adds	r3, #16
   23700:	2201      	movs	r2, #1
   23702:	e853 0f00 	ldrex	r0, [r3]
   23706:	2800      	cmp	r0, #0
   23708:	d103      	bne.n	23712 <uarte_nrfx_fifo_fill+0x28>
   2370a:	e843 2700 	strex	r7, r2, [r3]
   2370e:	2f00      	cmp	r7, #0
   23710:	d1f7      	bne.n	23702 <uarte_nrfx_fifo_fill+0x18>
   23712:	f3bf 8f5b 	dmb	ish
   23716:	bf0c      	ite	eq
   23718:	4613      	moveq	r3, r2
   2371a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2371c:	d01d      	beq.n	2375a <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2371e:	461c      	mov	r4, r3
}
   23720:	4620      	mov	r0, r4
   23722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   23724:	68f2      	ldr	r2, [r6, #12]
   23726:	5cc8      	ldrb	r0, [r1, r3]
   23728:	6892      	ldr	r2, [r2, #8]
   2372a:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   2372c:	3301      	adds	r3, #1
   2372e:	42a3      	cmp	r3, r4
   23730:	dbf8      	blt.n	23724 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   23732:	f04f 0320 	mov.w	r3, #32
   23736:	f3ef 8711 	mrs	r7, BASEPRI
   2373a:	f383 8812 	msr	BASEPRI_MAX, r3
   2373e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   23742:	6868      	ldr	r0, [r5, #4]
   23744:	f7ff ffc1 	bl	236ca <is_tx_ready.isra.0>
   23748:	68f3      	ldr	r3, [r6, #12]
   2374a:	b940      	cbnz	r0, 2375e <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2374c:	6118      	str	r0, [r3, #16]
		len = 0;
   2374e:	4604      	mov	r4, r0
	__asm__ volatile(
   23750:	f387 8811 	msr	BASEPRI, r7
   23754:	f3bf 8f6f 	isb	sy
	return len;
   23758:	e7e2      	b.n	23720 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2375a:	2300      	movs	r3, #0
   2375c:	e7e7      	b.n	2372e <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   2375e:	6899      	ldr	r1, [r3, #8]
   23760:	6868      	ldr	r0, [r5, #4]
   23762:	4622      	mov	r2, r4
   23764:	f7ff ff96 	bl	23694 <tx_start.isra.0>
   23768:	e7f2      	b.n	23750 <uarte_nrfx_fifo_fill+0x66>

0002376a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2376a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2376c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2376e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23772:	05c9      	lsls	r1, r1, #23
{
   23774:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23776:	d518      	bpl.n	237aa <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23778:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2377c:	b1a9      	cbz	r1, 237aa <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2377e:	f04f 0420 	mov.w	r4, #32
   23782:	f3ef 8111 	mrs	r1, BASEPRI
   23786:	f384 8812 	msr	BASEPRI_MAX, r4
   2378a:	f3bf 8f6f 	isb	sy
   2378e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23792:	b134      	cbz	r4, 237a2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23794:	2400      	movs	r4, #0
   23796:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2379a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2379e:	2401      	movs	r4, #1
   237a0:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   237a2:	f381 8811 	msr	BASEPRI, r1
   237a6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   237aa:	6852      	ldr	r2, [r2, #4]
   237ac:	06d2      	lsls	r2, r2, #27
   237ae:	d51a      	bpl.n	237e6 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   237b0:	f04f 0220 	mov.w	r2, #32
   237b4:	f3ef 8111 	mrs	r1, BASEPRI
   237b8:	f382 8812 	msr	BASEPRI_MAX, r2
   237bc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   237c0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   237c4:	b112      	cbz	r2, 237cc <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   237c6:	2200      	movs	r2, #0
   237c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   237cc:	6902      	ldr	r2, [r0, #16]
   237ce:	68d2      	ldr	r2, [r2, #12]
   237d0:	b10a      	cbz	r2, 237d6 <uarte_nrfx_isr_int+0x6c>
   237d2:	6912      	ldr	r2, [r2, #16]
   237d4:	b91a      	cbnz	r2, 237de <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   237d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   237da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   237de:	f381 8811 	msr	BASEPRI, r1
   237e2:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   237e6:	6902      	ldr	r2, [r0, #16]
   237e8:	68d2      	ldr	r2, [r2, #12]
   237ea:	b15a      	cbz	r2, 23804 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   237ec:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   237f0:	b151      	cbz	r1, 23808 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   237f2:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   237f4:	2100      	movs	r1, #0
   237f6:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   237f8:	b134      	cbz	r4, 23808 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   237fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   237fe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   23802:	7391      	strb	r1, [r2, #14]
}
   23804:	bc10      	pop	{r4}
   23806:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23808:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2380c:	b121      	cbz	r1, 23818 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2380e:	2100      	movs	r1, #0
   23810:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   23814:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   23818:	6813      	ldr	r3, [r2, #0]
   2381a:	2b00      	cmp	r3, #0
   2381c:	d0f2      	beq.n	23804 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2381e:	6851      	ldr	r1, [r2, #4]
}
   23820:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   23822:	4718      	bx	r3

00023824 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   23824:	b510      	push	{r4, lr}
   23826:	2200      	movs	r2, #0
   23828:	4604      	mov	r4, r0
   2382a:	2101      	movs	r1, #1
   2382c:	2028      	movs	r0, #40	; 0x28
   2382e:	f7e2 fad7 	bl	5de0 <z_arm_irq_priority_set>
   23832:	2028      	movs	r0, #40	; 0x28
   23834:	f7e2 faa2 	bl	5d7c <arch_irq_enable>
   23838:	4620      	mov	r0, r4
   2383a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2383e:	f7f7 bf2f 	b.w	1b6a0 <uarte_instance_init.constprop.0>

00023842 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   23842:	b510      	push	{r4, lr}
   23844:	2200      	movs	r2, #0
   23846:	4604      	mov	r4, r0
   23848:	2101      	movs	r1, #1
   2384a:	2002      	movs	r0, #2
   2384c:	f7e2 fac8 	bl	5de0 <z_arm_irq_priority_set>
   23850:	2002      	movs	r0, #2
   23852:	f7e2 fa93 	bl	5d7c <arch_irq_enable>
   23856:	4620      	mov	r0, r4
   23858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2385c:	f7f7 bf20 	b.w	1b6a0 <uarte_instance_init.constprop.0>

00023860 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   23860:	4770      	bx	lr

00023862 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23866:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2386a:	f1a0 0308 	sub.w	r3, r0, #8
   2386e:	4258      	negs	r0, r3
   23870:	4158      	adcs	r0, r3
   23872:	4770      	bx	lr

00023874 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   23874:	4700      	bx	r0

00023876 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   23876:	f000 be3c 	b.w	244f2 <z_impl_k_busy_wait>

0002387a <nrfx_clock_start>:
    switch (domain)
   2387a:	b110      	cbz	r0, 23882 <nrfx_clock_start+0x8>
   2387c:	2801      	cmp	r0, #1
   2387e:	d01d      	beq.n	238bc <nrfx_clock_start+0x42>
   23880:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23886:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2388a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2388e:	03c9      	lsls	r1, r1, #15
   23890:	d512      	bpl.n	238b8 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   23892:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   23896:	2a01      	cmp	r2, #1
   23898:	d10e      	bne.n	238b8 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2389a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2389e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   238a2:	2200      	movs	r2, #0
   238a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   238a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   238ac:	2202      	movs	r2, #2
   238ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   238b2:	2201      	movs	r2, #1
   238b4:	609a      	str	r2, [r3, #8]
}
   238b6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   238b8:	2200      	movs	r2, #0
   238ba:	e7ee      	b.n	2389a <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   238bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   238c0:	2200      	movs	r2, #0
   238c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   238c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   238ca:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   238ce:	6018      	str	r0, [r3, #0]
}
   238d0:	4770      	bx	lr

000238d2 <nrf_gpio_reconfigure>:
{
   238d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   238d4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   238d6:	a801      	add	r0, sp, #4
{
   238d8:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   238dc:	4617      	mov	r7, r2
   238de:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   238e0:	f7f8 fd0c 	bl	1c2fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   238e4:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   238e6:	2f00      	cmp	r7, #0
   238e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   238ec:	bf14      	ite	ne
   238ee:	2302      	movne	r3, #2
   238f0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   238f2:	2900      	cmp	r1, #0
   238f4:	bf18      	it	ne
   238f6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   238fa:	2d00      	cmp	r5, #0
   238fc:	bf14      	ite	ne
   238fe:	f04f 0c0c 	movne.w	ip, #12
   23902:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   23906:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23908:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2390c:	bf14      	ite	ne
   2390e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   23912:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23916:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23918:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2391c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23920:	bf14      	ite	ne
   23922:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   23926:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2392a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2392e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23932:	b101      	cbz	r1, 23936 <nrf_gpio_reconfigure+0x64>
   23934:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   23936:	b10f      	cbz	r7, 2393c <nrf_gpio_reconfigure+0x6a>
   23938:	783f      	ldrb	r7, [r7, #0]
   2393a:	007f      	lsls	r7, r7, #1
   2393c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2393e:	b10d      	cbz	r5, 23944 <nrf_gpio_reconfigure+0x72>
   23940:	782d      	ldrb	r5, [r5, #0]
   23942:	00ad      	lsls	r5, r5, #2
   23944:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23946:	b10c      	cbz	r4, 2394c <nrf_gpio_reconfigure+0x7a>
   23948:	7822      	ldrb	r2, [r4, #0]
   2394a:	0214      	lsls	r4, r2, #8
   2394c:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2394e:	b10e      	cbz	r6, 23954 <nrf_gpio_reconfigure+0x82>
   23950:	7836      	ldrb	r6, [r6, #0]
   23952:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23954:	432c      	orrs	r4, r5
   23956:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   23958:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2395c:	b003      	add	sp, #12
   2395e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023960 <nrf_gpio_cfg_sense_set>:
{
   23960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23962:	f10d 030f 	add.w	r3, sp, #15
   23966:	9301      	str	r3, [sp, #4]
   23968:	2300      	movs	r3, #0
{
   2396a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2396e:	9300      	str	r3, [sp, #0]
   23970:	461a      	mov	r2, r3
   23972:	4619      	mov	r1, r3
   23974:	f7ff ffad 	bl	238d2 <nrf_gpio_reconfigure>
}
   23978:	b005      	add	sp, #20
   2397a:	f85d fb04 	ldr.w	pc, [sp], #4

0002397e <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2397e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   23982:	681a      	ldr	r2, [r3, #0]
   23984:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23986:	bf1f      	itttt	ne
   23988:	2200      	movne	r2, #0
   2398a:	601a      	strne	r2, [r3, #0]
   2398c:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2398e:	2001      	movne	r0, #1
   23990:	bf08      	it	eq
   23992:	2000      	moveq	r0, #0
}
   23994:	4770      	bx	lr

00023996 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   23996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2399a:	f44f 7260 	mov.w	r2, #896	; 0x380
   2399e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   239a2:	4770      	bx	lr

000239a4 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   239a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   239a8:	f44f 7260 	mov.w	r2, #896	; 0x380
   239ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   239b0:	4770      	bx	lr

000239b2 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   239b2:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   239b4:	f7f9 f852 	bl	1ca5c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   239b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   239bc:	f7f8 bc6a 	b.w	1c294 <nrfx_clock_irq_handler>

000239c0 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   239c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   239c2:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   239c4:	6b48      	ldr	r0, [r1, #52]	; 0x34
   239c6:	4298      	cmp	r0, r3
{
   239c8:	b510      	push	{r4, lr}
   239ca:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   239ce:	d205      	bcs.n	239dc <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   239d0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   239d2:	5c09      	ldrb	r1, [r1, r0]
   239d4:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   239d8:	4618      	mov	r0, r3
}
   239da:	e004      	b.n	239e6 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   239dc:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   239e0:	b110      	cbz	r0, 239e8 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239e2:	61d3      	str	r3, [r2, #28]
            return false;
   239e4:	2000      	movs	r0, #0
}
   239e6:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   239e8:	6a0c      	ldr	r4, [r1, #32]
   239ea:	0664      	lsls	r4, r4, #25
   239ec:	d503      	bpl.n	239f6 <twi_send_byte+0x36>
   239ee:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   239f0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   239f4:	e7f7      	b.n	239e6 <twi_send_byte+0x26>
   239f6:	6153      	str	r3, [r2, #20]
   239f8:	e7ee      	b.n	239d8 <twi_send_byte+0x18>

000239fa <twi_transfer>:
{
   239fa:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   239fc:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   23a00:	4604      	mov	r4, r0
   23a02:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   23a04:	b12e      	cbz	r6, 23a12 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a06:	2300      	movs	r3, #0
   23a08:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   23a0c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   23a10:	2601      	movs	r6, #1
    if (p_cb->error)
   23a12:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   23a16:	b320      	cbz	r0, 23a62 <twi_transfer+0x68>
   23a18:	2300      	movs	r3, #0
   23a1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23a1e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   23a22:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   23a26:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   23a2a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23a2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   23a32:	2e00      	cmp	r6, #0
   23a34:	d068      	beq.n	23b08 <twi_transfer+0x10e>
        if (!p_cb->error)
   23a36:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   23a3a:	2300      	movs	r3, #0
   23a3c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   23a40:	bb88      	cbnz	r0, 23aa6 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   23a42:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23a44:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   23a46:	429a      	cmp	r2, r3
        return false;
   23a48:	bf1c      	itt	ne
   23a4a:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   23a4c:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   23a4e:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   23a52:	bf1c      	itt	ne
   23a54:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   23a58:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   23a5c:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   23a60:	e022      	b.n	23aa8 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a62:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   23a66:	b142      	cbz	r2, 23a7a <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a68:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   23a6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a70:	2301      	movs	r3, #1
   23a72:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   23a74:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   23a78:	e7db      	b.n	23a32 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a7a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   23a7e:	b1a3      	cbz	r3, 23aaa <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a80:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   23a84:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   23a88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23a8a:	3301      	adds	r3, #1
   23a8c:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   23a92:	b113      	cbz	r3, 23a9a <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a94:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23a98:	e7e8      	b.n	23a6c <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   23a9a:	4629      	mov	r1, r5
   23a9c:	4620      	mov	r0, r4
   23a9e:	f7ff ff8f 	bl	239c0 <twi_send_byte>
   23aa2:	2800      	cmp	r0, #0
   23aa4:	d1c5      	bne.n	23a32 <twi_transfer+0x38>
                    return false;
   23aa6:	2000      	movs	r0, #0
}
   23aa8:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23aaa:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   23aae:	2a00      	cmp	r2, #0
   23ab0:	d0bf      	beq.n	23a32 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ab2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23ab6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23aba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   23abe:	b112      	cbz	r2, 23ac6 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ac0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23ac4:	e7d2      	b.n	23a6c <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   23ac6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23ac8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   23aca:	4293      	cmp	r3, r2
   23acc:	d2b1      	bcs.n	23a32 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   23ace:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   23ad0:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   23ad4:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   23ad6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23ad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   23ada:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23adc:	1e51      	subs	r1, r2, #1
   23ade:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   23ae0:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23ae2:	d108      	bne.n	23af6 <twi_transfer+0xfc>
   23ae4:	6a29      	ldr	r1, [r5, #32]
   23ae6:	0649      	lsls	r1, r1, #25
   23ae8:	d410      	bmi.n	23b0c <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   23aea:	2302      	movs	r3, #2
   23aec:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23af0:	2301      	movs	r3, #1
   23af2:	6223      	str	r3, [r4, #32]
   23af4:	e79d      	b.n	23a32 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23af6:	4293      	cmp	r3, r2
   23af8:	d1fa      	bne.n	23af0 <twi_transfer+0xf6>
   23afa:	6a2b      	ldr	r3, [r5, #32]
   23afc:	065b      	lsls	r3, r3, #25
   23afe:	d598      	bpl.n	23a32 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   23b00:	2302      	movs	r3, #2
   23b02:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   23b06:	e7cf      	b.n	23aa8 <twi_transfer+0xae>
    return true;
   23b08:	2001      	movs	r0, #1
   23b0a:	e7cd      	b.n	23aa8 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23b0c:	4293      	cmp	r3, r2
   23b0e:	d1ef      	bne.n	23af0 <twi_transfer+0xf6>
   23b10:	e7f6      	b.n	23b00 <twi_transfer+0x106>

00023b12 <twi_irq_handler>:
{
   23b12:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b14:	b087      	sub	sp, #28
   23b16:	4607      	mov	r7, r0
   23b18:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   23b1a:	f7ff ff6e 	bl	239fa <twi_transfer>
   23b1e:	2800      	cmp	r0, #0
   23b20:	d146      	bne.n	23bb0 <twi_irq_handler+0x9e>
    if (!p_cb->error &&
   23b22:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   23b26:	f8d4 e020 	ldr.w	lr, [r4, #32]
    if (!p_cb->error &&
   23b2a:	f1bc 0f00 	cmp.w	ip, #0
   23b2e:	d11f      	bne.n	23b70 <twi_irq_handler+0x5e>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   23b30:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   23b32:	1e9a      	subs	r2, r3, #2
   23b34:	2a01      	cmp	r2, #1
   23b36:	d81b      	bhi.n	23b70 <twi_irq_handler+0x5e>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   23b38:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23b3a:	69a2      	ldr	r2, [r4, #24]
   23b3c:	4291      	cmp	r1, r2
   23b3e:	d117      	bne.n	23b70 <twi_irq_handler+0x5e>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   23b40:	69e2      	ldr	r2, [r4, #28]
   23b42:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   23b44:	f3ce 1e40 	ubfx	lr, lr, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   23b48:	6962      	ldr	r2, [r4, #20]
   23b4a:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   23b4c:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   23b4e:	f884 e02c 	strb.w	lr, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   23b52:	f884 c02d 	strb.w	ip, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   23b56:	4621      	mov	r1, r4
   23b58:	4638      	mov	r0, r7
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   23b5a:	d104      	bne.n	23b66 <twi_irq_handler+0x54>
}
   23b5c:	b007      	add	sp, #28
   23b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   23b62:	f7f8 bfd1 	b.w	1cb08 <twi_tx_start_transfer>
}
   23b66:	b007      	add	sp, #28
   23b68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   23b6c:	f7f9 b838 	b.w	1cbe0 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   23b70:	f104 060c 	add.w	r6, r4, #12
   23b74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   23b76:	ad01      	add	r5, sp, #4
   23b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   23b7a:	6833      	ldr	r3, [r6, #0]
   23b7c:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   23b7e:	f1bc 0f00 	cmp.w	ip, #0
   23b82:	d020      	beq.n	23bc6 <twi_irq_handler+0xb4>
    uint32_t error_source = p_reg->ERRORSRC;
   23b84:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   23b88:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   23b8c:	0799      	lsls	r1, r3, #30
   23b8e:	d511      	bpl.n	23bb4 <twi_irq_handler+0xa2>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   23b90:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   23b92:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   23b96:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   23b98:	f01e 0f04 	tst.w	lr, #4
        p_cb->busy = false;
   23b9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   23ba0:	d002      	beq.n	23ba8 <twi_irq_handler+0x96>
   23ba2:	f1bc 0f00 	cmp.w	ip, #0
   23ba6:	d003      	beq.n	23bb0 <twi_irq_handler+0x9e>
            p_cb->handler(&event, p_cb->p_context);
   23ba8:	e9d4 3100 	ldrd	r3, r1, [r4]
   23bac:	4668      	mov	r0, sp
   23bae:	4798      	blx	r3
}
   23bb0:	b007      	add	sp, #28
   23bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   23bb4:	075a      	lsls	r2, r3, #29
   23bb6:	d501      	bpl.n	23bbc <twi_irq_handler+0xaa>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   23bb8:	2302      	movs	r3, #2
   23bba:	e7ea      	b.n	23b92 <twi_irq_handler+0x80>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   23bbc:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   23bbe:	bf4c      	ite	mi
   23bc0:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   23bc2:	2304      	movpl	r3, #4
   23bc4:	e7e5      	b.n	23b92 <twi_irq_handler+0x80>
            event.type = NRFX_TWI_EVT_DONE;
   23bc6:	f88d c000 	strb.w	ip, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   23bca:	e7e4      	b.n	23b96 <twi_irq_handler+0x84>

00023bcc <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23bd0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   23bd4:	f1a0 0308 	sub.w	r3, r0, #8
   23bd8:	4258      	negs	r0, r3
   23bda:	4158      	adcs	r0, r3
   23bdc:	4770      	bx	lr

00023bde <nrfx_usbd_consumer>:
{
   23bde:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   23be0:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   23be2:	680d      	ldr	r5, [r1, #0]
   23be4:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   23be6:	bf97      	itett	ls
   23be8:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   23bec:	2100      	movhi	r1, #0
        size -= data_size;
   23bee:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   23bf0:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   23bf2:	bf8e      	itee	hi
   23bf4:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   23bf8:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   23bfa:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   23bfc:	429a      	cmp	r2, r3
   23bfe:	d103      	bne.n	23c08 <nrfx_usbd_consumer+0x2a>
   23c00:	1e20      	subs	r0, r4, #0
   23c02:	bf18      	it	ne
   23c04:	2001      	movne	r0, #1
}
   23c06:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   23c08:	2000      	movs	r0, #0
   23c0a:	e7fc      	b.n	23c06 <nrfx_usbd_consumer+0x28>

00023c0c <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   23c0c:	684b      	ldr	r3, [r1, #4]
{
   23c0e:	b510      	push	{r4, lr}
   23c10:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   23c12:	680c      	ldr	r4, [r1, #0]
   23c14:	bf28      	it	cs
   23c16:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   23c18:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   23c1c:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   23c1e:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   23c20:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   23c22:	441a      	add	r2, r3
}
   23c24:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   23c26:	600a      	str	r2, [r1, #0]
}
   23c28:	bf18      	it	ne
   23c2a:	2001      	movne	r0, #1
   23c2c:	bd10      	pop	{r4, pc}

00023c2e <nrfx_usbd_feeder_ram_zlp>:
{
   23c2e:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   23c30:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   23c32:	680b      	ldr	r3, [r1, #0]
   23c34:	42a2      	cmp	r2, r4
   23c36:	bf28      	it	cs
   23c38:	4622      	movcs	r2, r4
   23c3a:	2a00      	cmp	r2, #0
   23c3c:	bf14      	ite	ne
   23c3e:	461d      	movne	r5, r3
   23c40:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   23c42:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   23c46:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   23c4a:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   23c4c:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   23c4e:	600a      	str	r2, [r1, #0]
}
   23c50:	bf14      	ite	ne
   23c52:	2001      	movne	r0, #1
   23c54:	2000      	moveq	r0, #0
   23c56:	bd30      	pop	{r4, r5, pc}

00023c58 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   23c58:	f010 0f80 	tst.w	r0, #128	; 0x80
   23c5c:	bf14      	ite	ne
   23c5e:	2300      	movne	r3, #0
   23c60:	2310      	moveq	r3, #16
   23c62:	f000 000f 	and.w	r0, r0, #15
}
   23c66:	4418      	add	r0, r3
   23c68:	4770      	bx	lr

00023c6a <ev_started_handler>:
}
   23c6a:	4770      	bx	lr

00023c6c <nrf_usbd_epin_dma_handler>:
{
   23c6c:	b508      	push	{r3, lr}
   23c6e:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   23c70:	f7f9 f956 	bl	1cf20 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   23c74:	4608      	mov	r0, r1
   23c76:	f7f9 f945 	bl	1cf04 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23c7a:	7b83      	ldrb	r3, [r0, #14]
   23c7c:	2b03      	cmp	r3, #3
   23c7e:	d10a      	bne.n	23c96 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23c80:	4608      	mov	r0, r1
   23c82:	f7ff ffe9 	bl	23c58 <ep2bit>
   23c86:	2301      	movs	r3, #1
   23c88:	fa03 f000 	lsl.w	r0, r3, r0
   23c8c:	43c0      	mvns	r0, r0
}
   23c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23c92:	f7f9 ba55 	b.w	1d140 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   23c96:	6803      	ldr	r3, [r0, #0]
   23c98:	2b00      	cmp	r3, #0
   23c9a:	d0f1      	beq.n	23c80 <nrf_usbd_epin_dma_handler+0x14>
}
   23c9c:	bd08      	pop	{r3, pc}

00023c9e <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   23c9e:	2087      	movs	r0, #135	; 0x87
   23ca0:	f7ff bfe4 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023ca4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   23ca4:	2086      	movs	r0, #134	; 0x86
   23ca6:	f7ff bfe1 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023caa <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   23caa:	2085      	movs	r0, #133	; 0x85
   23cac:	f7ff bfde 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023cb0 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   23cb0:	2084      	movs	r0, #132	; 0x84
   23cb2:	f7ff bfdb 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023cb6 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   23cb6:	2083      	movs	r0, #131	; 0x83
   23cb8:	f7ff bfd8 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023cbc <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   23cbc:	2082      	movs	r0, #130	; 0x82
   23cbe:	f7ff bfd5 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023cc2 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   23cc2:	2081      	movs	r0, #129	; 0x81
   23cc4:	f7ff bfd2 	b.w	23c6c <nrf_usbd_epin_dma_handler>

00023cc8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   23cc8:	f7f9 ba4a 	b.w	1d160 <nrf_usbd_ep0in_dma_handler>

00023ccc <nrfx_usbd_ep_max_packet_size_set>:
{
   23ccc:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   23cce:	f7f9 f919 	bl	1cf04 <ep_state_access>
    p_state->max_packet_size = size;
   23cd2:	8181      	strh	r1, [r0, #12]
}
   23cd4:	bd08      	pop	{r3, pc}

00023cd6 <nrfx_usbd_ep_status_get>:
{
   23cd6:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   23cd8:	f7f9 f914 	bl	1cf04 <ep_state_access>
	__asm__ volatile(
   23cdc:	f04f 0220 	mov.w	r2, #32
   23ce0:	f3ef 8311 	mrs	r3, BASEPRI
   23ce4:	f382 8812 	msr	BASEPRI_MAX, r2
   23ce8:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   23cec:	6882      	ldr	r2, [r0, #8]
   23cee:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   23cf0:	6802      	ldr	r2, [r0, #0]
   23cf2:	b92a      	cbnz	r2, 23d00 <nrfx_usbd_ep_status_get+0x2a>
   23cf4:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   23cf6:	f383 8811 	msr	BASEPRI, r3
   23cfa:	f3bf 8f6f 	isb	sy
}
   23cfe:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   23d00:	2004      	movs	r0, #4
   23d02:	e7f8      	b.n	23cf6 <nrfx_usbd_ep_status_get+0x20>

00023d04 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   23d04:	2007      	movs	r0, #7
   23d06:	f7f9 bd63 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d0a <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   23d0a:	2006      	movs	r0, #6
   23d0c:	f7f9 bd60 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d10 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   23d10:	2005      	movs	r0, #5
   23d12:	f7f9 bd5d 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d16 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   23d16:	2004      	movs	r0, #4
   23d18:	f7f9 bd5a 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d1c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   23d1c:	2003      	movs	r0, #3
   23d1e:	f7f9 bd57 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d22 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   23d22:	2002      	movs	r0, #2
   23d24:	f7f9 bd54 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d28 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   23d28:	2001      	movs	r0, #1
   23d2a:	f7f9 bd51 	b.w	1d7d0 <nrf_usbd_epout_dma_handler>

00023d2e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   23d2e:	f7f9 be45 	b.w	1d9bc <usbd_ep_abort>

00023d32 <nrf_gpio_pin_set>:
{
   23d32:	b507      	push	{r0, r1, r2, lr}
   23d34:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d36:	a801      	add	r0, sp, #4
   23d38:	f7fa f84e 	bl	1ddd8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23d3c:	9a01      	ldr	r2, [sp, #4]
   23d3e:	2301      	movs	r3, #1
   23d40:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   23d42:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   23d46:	b003      	add	sp, #12
   23d48:	f85d fb04 	ldr.w	pc, [sp], #4

00023d4c <z_device_state_init>:
}
   23d4c:	4770      	bx	lr

00023d4e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23d4e:	b138      	cbz	r0, 23d60 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23d50:	68c3      	ldr	r3, [r0, #12]
   23d52:	8818      	ldrh	r0, [r3, #0]
   23d54:	f3c0 0008 	ubfx	r0, r0, #0, #9
   23d58:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   23d5c:	4258      	negs	r0, r3
   23d5e:	4158      	adcs	r0, r3
}
   23d60:	4770      	bx	lr

00023d62 <arch_system_halt>:
	__asm__ volatile(
   23d62:	f04f 0220 	mov.w	r2, #32
   23d66:	f3ef 8311 	mrs	r3, BASEPRI
   23d6a:	f382 8812 	msr	BASEPRI_MAX, r2
   23d6e:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   23d72:	e7fe      	b.n	23d72 <arch_system_halt+0x10>

00023d74 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   23d74:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   23d76:	f7ff fff4 	bl	23d62 <arch_system_halt>

00023d7a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d7c:	4605      	mov	r5, r0
   23d7e:	460e      	mov	r6, r1
   23d80:	f04f 0320 	mov.w	r3, #32
   23d84:	f3ef 8711 	mrs	r7, BASEPRI
   23d88:	f383 8812 	msr	BASEPRI_MAX, r3
   23d8c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23d90:	f7fb f8c2 	bl	1ef18 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   23d94:	4631      	mov	r1, r6
   23d96:	4604      	mov	r4, r0
   23d98:	4628      	mov	r0, r5
   23d9a:	f7ff ffeb 	bl	23d74 <k_sys_fatal_error_handler>
	__asm__ volatile(
   23d9e:	f387 8811 	msr	BASEPRI, r7
   23da2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   23da6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23dac:	f7e2 ba18 	b.w	61e0 <z_impl_k_thread_abort>

00023db0 <k_heap_init>:
{
   23db0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   23db2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   23db6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23dba:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23dbc:	f7fb bf59 	b.w	1fc72 <sys_heap_init>

00023dc0 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dc4:	b085      	sub	sp, #20
   23dc6:	4606      	mov	r6, r0
   23dc8:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23dca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   23dce:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23dd0:	f000 fb93 	bl	244fa <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23dd4:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23dd8:	4605      	mov	r5, r0
   23dda:	460f      	mov	r7, r1
	__asm__ volatile(
   23ddc:	f04f 0320 	mov.w	r3, #32
   23de0:	f3ef 8411 	mrs	r4, BASEPRI
   23de4:	f383 8812 	msr	BASEPRI_MAX, r3
   23de8:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23dec:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23df0:	464a      	mov	r2, r9
   23df2:	4641      	mov	r1, r8
   23df4:	4630      	mov	r0, r6
   23df6:	f7fb fed4 	bl	1fba2 <sys_heap_aligned_alloc>
   23dfa:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   23dfc:	f7fb fa40 	bl	1f280 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23e00:	9b03      	ldr	r3, [sp, #12]
   23e02:	b13b      	cbz	r3, 23e14 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   23e04:	f384 8811 	msr	BASEPRI, r4
   23e08:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23e0c:	4618      	mov	r0, r3
   23e0e:	b005      	add	sp, #20
   23e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   23e14:	1a28      	subs	r0, r5, r0
   23e16:	eb67 0101 	sbc.w	r1, r7, r1
   23e1a:	2801      	cmp	r0, #1
   23e1c:	f171 0200 	sbcs.w	r2, r1, #0
   23e20:	dbf0      	blt.n	23e04 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23e22:	e9cd 0100 	strd	r0, r1, [sp]
   23e26:	465a      	mov	r2, fp
   23e28:	4621      	mov	r1, r4
   23e2a:	4650      	mov	r0, sl
   23e2c:	f7fa ff1c 	bl	1ec68 <z_pend_curr>
	__asm__ volatile(
   23e30:	f04f 0320 	mov.w	r3, #32
   23e34:	f3ef 8411 	mrs	r4, BASEPRI
   23e38:	f383 8812 	msr	BASEPRI_MAX, r3
   23e3c:	f3bf 8f6f 	isb	sy
   23e40:	e7d6      	b.n	23df0 <k_heap_aligned_alloc+0x30>

00023e42 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23e42:	b538      	push	{r3, r4, r5, lr}
   23e44:	4604      	mov	r4, r0
   23e46:	f04f 0320 	mov.w	r3, #32
   23e4a:	f3ef 8511 	mrs	r5, BASEPRI
   23e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   23e56:	f7fb fe6c 	bl	1fb32 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23e5a:	f104 000c 	add.w	r0, r4, #12
   23e5e:	f000 fad5 	bl	2440c <z_unpend_all>
   23e62:	b130      	cbz	r0, 23e72 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   23e64:	4629      	mov	r1, r5
   23e66:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23e6e:	f7fa bda9 	b.w	1e9c4 <z_reschedule>
	__asm__ volatile(
   23e72:	f385 8811 	msr	BASEPRI, r5
   23e76:	f3bf 8f6f 	isb	sy
}
   23e7a:	bd38      	pop	{r3, r4, r5, pc}

00023e7c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e7e:	4604      	mov	r4, r0
   23e80:	460d      	mov	r5, r1
	__asm__ volatile(
   23e82:	f04f 0320 	mov.w	r3, #32
   23e86:	f3ef 8611 	mrs	r6, BASEPRI
   23e8a:	f383 8812 	msr	BASEPRI_MAX, r3
   23e8e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23e92:	6947      	ldr	r7, [r0, #20]
   23e94:	b977      	cbnz	r7, 23eb4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23e96:	f000 faa1 	bl	243dc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23e9a:	b158      	cbz	r0, 23eb4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23e9c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23e9e:	6142      	str	r2, [r0, #20]
   23ea0:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   23ea2:	f000 fa3f 	bl	24324 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23ea6:	4631      	mov	r1, r6
   23ea8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23eac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   23eb0:	f7fa bd88 	b.w	1e9c4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23eb4:	682b      	ldr	r3, [r5, #0]
   23eb6:	6962      	ldr	r2, [r4, #20]
   23eb8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23eba:	682b      	ldr	r3, [r5, #0]
   23ebc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   23ebe:	69a3      	ldr	r3, [r4, #24]
   23ec0:	3b01      	subs	r3, #1
   23ec2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   23ec4:	f386 8811 	msr	BASEPRI, r6
   23ec8:	f3bf 8f6f 	isb	sy
}
   23ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023ece <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23ece:	f3ef 8005 	mrs	r0, IPSR
}
   23ed2:	3800      	subs	r0, #0
   23ed4:	bf18      	it	ne
   23ed6:	2001      	movne	r0, #1
   23ed8:	4770      	bx	lr

00023eda <z_impl_k_thread_name_set>:
}
   23eda:	f06f 0057 	mvn.w	r0, #87	; 0x57
   23ede:	4770      	bx	lr

00023ee0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   23ee0:	f7fa be66 	b.w	1ebb0 <z_sched_start>

00023ee4 <z_pm_save_idle_exit>:
{
   23ee4:	b508      	push	{r3, lr}
	pm_system_resume();
   23ee6:	f7e1 fdb1 	bl	5a4c <pm_system_resume>
}
   23eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   23eee:	f7ff bcb7 	b.w	23860 <sys_clock_idle_exit>

00023ef2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   23ef2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23ef6:	428b      	cmp	r3, r1
   23ef8:	d001      	beq.n	23efe <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   23efa:	f7fa bec9 	b.w	1ec90 <z_set_prio>
}
   23efe:	2000      	movs	r0, #0
   23f00:	4770      	bx	lr

00023f02 <z_impl_k_mutex_init>:
{
   23f02:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23f04:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   23f06:	e9c3 0002 	strd	r0, r0, [r3, #8]
   23f0a:	e9c3 3300 	strd	r3, r3, [r3]
}
   23f0e:	4770      	bx	lr

00023f10 <queue_insert>:
{
   23f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23f14:	4699      	mov	r9, r3
   23f16:	4604      	mov	r4, r0
   23f18:	f89d 3020 	ldrb.w	r3, [sp, #32]
   23f1c:	460d      	mov	r5, r1
   23f1e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23f20:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23f24:	f04f 0220 	mov.w	r2, #32
   23f28:	f3ef 8711 	mrs	r7, BASEPRI
   23f2c:	f382 8812 	msr	BASEPRI_MAX, r2
   23f30:	f3bf 8f6f 	isb	sy
	if (is_append) {
   23f34:	b103      	cbz	r3, 23f38 <queue_insert+0x28>
	return list->tail;
   23f36:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23f38:	4630      	mov	r0, r6
   23f3a:	f000 fa4f 	bl	243dc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   23f3e:	b158      	cbz	r0, 23f58 <queue_insert+0x48>
   23f40:	2400      	movs	r4, #0
   23f42:	67c4      	str	r4, [r0, #124]	; 0x7c
   23f44:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   23f48:	f000 f9ec 	bl	24324 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   23f4c:	4630      	mov	r0, r6
   23f4e:	4639      	mov	r1, r7
   23f50:	f7fa fd38 	bl	1e9c4 <z_reschedule>
	return 0;
   23f54:	2000      	movs	r0, #0
   23f56:	e00c      	b.n	23f72 <queue_insert+0x62>
	if (alloc) {
   23f58:	f1b9 0f00 	cmp.w	r9, #0
   23f5c:	d01b      	beq.n	23f96 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   23f5e:	2108      	movs	r1, #8
   23f60:	f7fb fa2a 	bl	1f3b8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   23f64:	b938      	cbnz	r0, 23f76 <queue_insert+0x66>
	__asm__ volatile(
   23f66:	f387 8811 	msr	BASEPRI, r7
   23f6a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23f6e:	f06f 000b 	mvn.w	r0, #11
}
   23f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   23f76:	2301      	movs	r3, #1
		anode->data = data;
   23f78:	f8c0 8004 	str.w	r8, [r0, #4]
   23f7c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f7e:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f80:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   23f84:	b95d      	cbnz	r5, 23f9e <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f86:	6823      	ldr	r3, [r4, #0]
   23f88:	4313      	orrs	r3, r2
   23f8a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23f8c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   23f8e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23f90:	b973      	cbnz	r3, 23fb0 <queue_insert+0xa0>
	list->tail = node;
   23f92:	6060      	str	r0, [r4, #4]
}
   23f94:	e00c      	b.n	23fb0 <queue_insert+0xa0>
	node->next_and_flags = flags;
   23f96:	f8c8 9000 	str.w	r9, [r8]
}
   23f9a:	4640      	mov	r0, r8
   23f9c:	e7ef      	b.n	23f7e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23f9e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23fa0:	f033 0303 	bics.w	r3, r3, #3
   23fa4:	d110      	bne.n	23fc8 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   23fa6:	6002      	str	r2, [r0, #0]
	return list->tail;
   23fa8:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   23faa:	b93a      	cbnz	r2, 23fbc <queue_insert+0xac>
	list->head = node;
   23fac:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23fb0:	2104      	movs	r1, #4
   23fb2:	f104 0010 	add.w	r0, r4, #16
   23fb6:	f000 fc09 	bl	247cc <z_handle_obj_poll_events>
   23fba:	e7c7      	b.n	23f4c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23fbc:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23fbe:	f003 0303 	and.w	r3, r3, #3
   23fc2:	4303      	orrs	r3, r0
   23fc4:	6013      	str	r3, [r2, #0]
   23fc6:	e7e4      	b.n	23f92 <queue_insert+0x82>
   23fc8:	4313      	orrs	r3, r2
   23fca:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23fcc:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23fce:	f003 0303 	and.w	r3, r3, #3
   23fd2:	4303      	orrs	r3, r0
   23fd4:	602b      	str	r3, [r5, #0]
}
   23fd6:	e7eb      	b.n	23fb0 <queue_insert+0xa0>

00023fd8 <z_queue_node_peek>:
{
   23fd8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   23fda:	4604      	mov	r4, r0
   23fdc:	b130      	cbz	r0, 23fec <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23fde:	6802      	ldr	r2, [r0, #0]
   23fe0:	0793      	lsls	r3, r2, #30
   23fe2:	d003      	beq.n	23fec <z_queue_node_peek+0x14>
		ret = anode->data;
   23fe4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23fe6:	b109      	cbz	r1, 23fec <z_queue_node_peek+0x14>
			k_free(anode);
   23fe8:	f000 fbfe 	bl	247e8 <k_free>
}
   23fec:	4620      	mov	r0, r4
   23fee:	bd10      	pop	{r4, pc}

00023ff0 <z_impl_k_queue_init>:
	list->head = NULL;
   23ff0:	2300      	movs	r3, #0
	list->tail = NULL;
   23ff2:	e9c0 3300 	strd	r3, r3, [r0]
   23ff6:	f100 0308 	add.w	r3, r0, #8
   23ffa:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   23ffe:	f100 0310 	add.w	r3, r0, #16
   24002:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   24006:	4770      	bx	lr

00024008 <k_queue_append>:
{
   24008:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2400a:	2301      	movs	r3, #1
   2400c:	9300      	str	r3, [sp, #0]
   2400e:	2300      	movs	r3, #0
{
   24010:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24012:	4619      	mov	r1, r3
   24014:	f7ff ff7c 	bl	23f10 <queue_insert>
}
   24018:	b003      	add	sp, #12
   2401a:	f85d fb04 	ldr.w	pc, [sp], #4

0002401e <k_queue_prepend>:
{
   2401e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   24020:	2300      	movs	r3, #0
{
   24022:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   24024:	9300      	str	r3, [sp, #0]
   24026:	4619      	mov	r1, r3
   24028:	f7ff ff72 	bl	23f10 <queue_insert>
}
   2402c:	b003      	add	sp, #12
   2402e:	f85d fb04 	ldr.w	pc, [sp], #4

00024032 <k_queue_append_list>:
{
   24032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24036:	4605      	mov	r5, r0
   24038:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2403a:	460c      	mov	r4, r1
   2403c:	b391      	cbz	r1, 240a4 <k_queue_append_list+0x72>
   2403e:	b38a      	cbz	r2, 240a4 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24040:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   24044:	f04f 0320 	mov.w	r3, #32
   24048:	f3ef 8811 	mrs	r8, BASEPRI
   2404c:	f383 8812 	msr	BASEPRI_MAX, r3
   24050:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   24054:	4638      	mov	r0, r7
   24056:	f000 f9c1 	bl	243dc <z_unpend_first_thread>
   2405a:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2405e:	b920      	cbnz	r0, 2406a <k_queue_append_list+0x38>
	return list->tail;
   24060:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24062:	b9ca      	cbnz	r2, 24098 <k_queue_append_list+0x66>
	list->head = node;
   24064:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24066:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24068:	e00a      	b.n	24080 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2406a:	6144      	str	r4, [r0, #20]
   2406c:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   24070:	f000 f958 	bl	24324 <z_ready_thread>
		head = *(void **)head;
   24074:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24076:	4638      	mov	r0, r7
   24078:	f000 f9b0 	bl	243dc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2407c:	2c00      	cmp	r4, #0
   2407e:	d1ee      	bne.n	2405e <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   24080:	2104      	movs	r1, #4
   24082:	f105 0010 	add.w	r0, r5, #16
   24086:	f000 fba1 	bl	247cc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2408a:	4638      	mov	r0, r7
   2408c:	4641      	mov	r1, r8
   2408e:	f7fa fc99 	bl	1e9c4 <z_reschedule>
	return 0;
   24092:	2000      	movs	r0, #0
}
   24094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24098:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2409a:	f003 0303 	and.w	r3, r3, #3
   2409e:	431c      	orrs	r4, r3
   240a0:	6014      	str	r4, [r2, #0]
}
   240a2:	e7e0      	b.n	24066 <k_queue_append_list+0x34>
		return -EINVAL;
   240a4:	f06f 0015 	mvn.w	r0, #21
   240a8:	e7f4      	b.n	24094 <k_queue_append_list+0x62>

000240aa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   240aa:	b15a      	cbz	r2, 240c4 <z_impl_k_sem_init+0x1a>
   240ac:	428a      	cmp	r2, r1
   240ae:	d309      	bcc.n	240c4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   240b0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   240b4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   240b8:	e9c0 0000 	strd	r0, r0, [r0]
   240bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   240c0:	2000      	movs	r0, #0
   240c2:	4770      	bx	lr
		return -EINVAL;
   240c4:	f06f 0015 	mvn.w	r0, #21
}
   240c8:	4770      	bx	lr

000240ca <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   240ca:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   240cc:	2301      	movs	r3, #1
   240ce:	408b      	lsls	r3, r1
   240d0:	ea22 0303 	bic.w	r3, r2, r3
   240d4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   240d6:	fa22 f001 	lsr.w	r0, r2, r1
}
   240da:	f000 0001 	and.w	r0, r0, #1
   240de:	4770      	bx	lr

000240e0 <unschedule_locked>:
{
   240e0:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   240e2:	2103      	movs	r1, #3
{
   240e4:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   240e6:	300c      	adds	r0, #12
   240e8:	f7ff ffef 	bl	240ca <flag_test_and_clear>
   240ec:	4604      	mov	r4, r0
   240ee:	b118      	cbz	r0, 240f8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   240f0:	f105 0010 	add.w	r0, r5, #16
   240f4:	f000 f9b7 	bl	24466 <z_abort_timeout>
}
   240f8:	4620      	mov	r0, r4
   240fa:	bd38      	pop	{r3, r4, r5, pc}

000240fc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   240fc:	b120      	cbz	r0, 24108 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   240fe:	2200      	movs	r2, #0
   24100:	4611      	mov	r1, r2
   24102:	3088      	adds	r0, #136	; 0x88
   24104:	f000 b992 	b.w	2442c <z_sched_wake>
}
   24108:	4770      	bx	lr

0002410a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2410a:	68c3      	ldr	r3, [r0, #12]
{
   2410c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2410e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   24112:	079b      	lsls	r3, r3, #30
{
   24114:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24116:	d416      	bmi.n	24146 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   24118:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2411a:	2102      	movs	r1, #2
   2411c:	300c      	adds	r0, #12
   2411e:	f7ff ffd4 	bl	240ca <flag_test_and_clear>
   24122:	b180      	cbz	r0, 24146 <cancel_async_locked+0x3c>
	return list->head;
   24124:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24128:	b16a      	cbz	r2, 24146 <cancel_async_locked+0x3c>
   2412a:	4294      	cmp	r4, r2
   2412c:	d11b      	bne.n	24166 <cancel_async_locked+0x5c>
	return node->next;
   2412e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   24130:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   24134:	b98d      	cbnz	r5, 2415a <cancel_async_locked+0x50>
   24136:	428c      	cmp	r4, r1
	list->head = node;
   24138:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2413c:	d101      	bne.n	24142 <cancel_async_locked+0x38>
	list->tail = node;
   2413e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   24142:	2300      	movs	r3, #0
   24144:	6023      	str	r3, [r4, #0]
	return *flagp;
   24146:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   24148:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2414c:	bf1e      	ittt	ne
   2414e:	f043 0302 	orrne.w	r3, r3, #2
   24152:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24154:	f003 000f 	andne.w	r0, r3, #15
}
   24158:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2415a:	428c      	cmp	r4, r1
	parent->next = child;
   2415c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2415e:	bf08      	it	eq
   24160:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   24164:	e7ed      	b.n	24142 <cancel_async_locked+0x38>
	return node->next;
   24166:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24168:	6812      	ldr	r2, [r2, #0]
   2416a:	e7dd      	b.n	24128 <cancel_async_locked+0x1e>

0002416c <work_timeout>:
{
   2416c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2416e:	4604      	mov	r4, r0
   24170:	f04f 0320 	mov.w	r3, #32
   24174:	f3ef 8511 	mrs	r5, BASEPRI
   24178:	f383 8812 	msr	BASEPRI_MAX, r3
   2417c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24180:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24182:	f1a0 0610 	sub.w	r6, r0, #16
   24186:	2103      	movs	r1, #3
   24188:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2418a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2418c:	f7ff ff9d 	bl	240ca <flag_test_and_clear>
   24190:	b128      	cbz	r0, 2419e <work_timeout+0x32>
		queue = dw->queue;
   24192:	69a3      	ldr	r3, [r4, #24]
   24194:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24196:	a901      	add	r1, sp, #4
   24198:	4630      	mov	r0, r6
   2419a:	f7fa fadb 	bl	1e754 <submit_to_queue_locked>
	__asm__ volatile(
   2419e:	f385 8811 	msr	BASEPRI, r5
   241a2:	f3bf 8f6f 	isb	sy
}
   241a6:	b002      	add	sp, #8
   241a8:	bd70      	pop	{r4, r5, r6, pc}

000241aa <k_work_init>:
{
   241aa:	b538      	push	{r3, r4, r5, lr}
   241ac:	4604      	mov	r4, r0
   241ae:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   241b0:	2210      	movs	r2, #16
   241b2:	2100      	movs	r1, #0
   241b4:	f7fc fac3 	bl	2073e <memset>
   241b8:	6065      	str	r5, [r4, #4]
}
   241ba:	bd38      	pop	{r3, r4, r5, pc}

000241bc <k_work_submit_to_queue>:
{
   241bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   241be:	9001      	str	r0, [sp, #4]
   241c0:	4608      	mov	r0, r1
	__asm__ volatile(
   241c2:	f04f 0320 	mov.w	r3, #32
   241c6:	f3ef 8511 	mrs	r5, BASEPRI
   241ca:	f383 8812 	msr	BASEPRI_MAX, r3
   241ce:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   241d2:	a901      	add	r1, sp, #4
   241d4:	f7fa fabe 	bl	1e754 <submit_to_queue_locked>
   241d8:	4604      	mov	r4, r0
	__asm__ volatile(
   241da:	f385 8811 	msr	BASEPRI, r5
   241de:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   241e2:	2800      	cmp	r0, #0
   241e4:	dd04      	ble.n	241f0 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   241e6:	f7fa fe9d 	bl	1ef24 <z_impl_k_is_preempt_thread>
   241ea:	b108      	cbz	r0, 241f0 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   241ec:	f7fa fdf2 	bl	1edd4 <z_impl_k_yield>
}
   241f0:	4620      	mov	r0, r4
   241f2:	b003      	add	sp, #12
   241f4:	bd30      	pop	{r4, r5, pc}

000241f6 <k_work_init_delayable>:
{
   241f6:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   241f8:	2230      	movs	r2, #48	; 0x30
{
   241fa:	4604      	mov	r4, r0
   241fc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   241fe:	2100      	movs	r1, #0
   24200:	f7fc fa9d 	bl	2073e <memset>
   24204:	f44f 7380 	mov.w	r3, #256	; 0x100
   24208:	6065      	str	r5, [r4, #4]
   2420a:	60e3      	str	r3, [r4, #12]
}
   2420c:	bd38      	pop	{r3, r4, r5, pc}

0002420e <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2420e:	b538      	push	{r3, r4, r5, lr}
   24210:	4604      	mov	r4, r0
	__asm__ volatile(
   24212:	f04f 0320 	mov.w	r3, #32
   24216:	f3ef 8511 	mrs	r5, BASEPRI
   2421a:	f383 8812 	msr	BASEPRI_MAX, r3
   2421e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   24222:	f7ff ff5d 	bl	240e0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24226:	4620      	mov	r0, r4
   24228:	f7ff ff6f 	bl	2410a <cancel_async_locked>
	__asm__ volatile(
   2422c:	f385 8811 	msr	BASEPRI, r5
   24230:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24234:	bd38      	pop	{r3, r4, r5, pc}

00024236 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24238:	4604      	mov	r4, r0
   2423a:	460d      	mov	r5, r1
	__asm__ volatile(
   2423c:	f04f 0320 	mov.w	r3, #32
   24240:	f3ef 8711 	mrs	r7, BASEPRI
   24244:	f383 8812 	msr	BASEPRI_MAX, r3
   24248:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2424c:	68c3      	ldr	r3, [r0, #12]
   2424e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24252:	2b00      	cmp	r3, #0
   24254:	bf14      	ite	ne
   24256:	2601      	movne	r6, #1
   24258:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2425a:	d009      	beq.n	24270 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2425c:	f7ff ff40 	bl	240e0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24260:	4620      	mov	r0, r4
   24262:	f7ff ff52 	bl	2410a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24266:	4629      	mov	r1, r5
   24268:	4620      	mov	r0, r4
   2426a:	f7fa fa55 	bl	1e718 <cancel_sync_locked>
   2426e:	4603      	mov	r3, r0
	__asm__ volatile(
   24270:	f387 8811 	msr	BASEPRI, r7
   24274:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24278:	b13b      	cbz	r3, 2428a <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2427a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2427e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24282:	f105 0008 	add.w	r0, r5, #8
   24286:	f7fa f96f 	bl	1e568 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2428a:	4630      	mov	r0, r6
   2428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002428e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2428e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24292:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24294:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24296:	2300      	movs	r3, #0
	node->prev = NULL;
   24298:	e9c0 3300 	strd	r3, r3, [r0]
}
   2429c:	4770      	bx	lr

0002429e <unpend_thread_no_timeout>:
{
   2429e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   242a0:	f7ff fff5 	bl	2428e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   242a4:	7b43      	ldrb	r3, [r0, #13]
   242a6:	f023 0302 	bic.w	r3, r3, #2
   242aa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   242ac:	2300      	movs	r3, #0
   242ae:	6083      	str	r3, [r0, #8]
}
   242b0:	bd08      	pop	{r3, pc}

000242b2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   242b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   242b6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   242ba:	4283      	cmp	r3, r0
		return b2 - b1;
   242bc:	bf14      	ite	ne
   242be:	1ac0      	subne	r0, r0, r3
	return 0;
   242c0:	2000      	moveq	r0, #0
}
   242c2:	4770      	bx	lr

000242c4 <z_unpend_thread>:
{
   242c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   242c6:	f04f 0320 	mov.w	r3, #32
   242ca:	f3ef 8411 	mrs	r4, BASEPRI
   242ce:	f383 8812 	msr	BASEPRI_MAX, r3
   242d2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   242d6:	f7ff ffe2 	bl	2429e <unpend_thread_no_timeout>
	__asm__ volatile(
   242da:	f384 8811 	msr	BASEPRI, r4
   242de:	f3bf 8f6f 	isb	sy
}
   242e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   242e6:	3018      	adds	r0, #24
   242e8:	f000 b8bd 	b.w	24466 <z_abort_timeout>

000242ec <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   242ec:	4603      	mov	r3, r0
   242ee:	b920      	cbnz	r0, 242fa <z_reschedule_irqlock+0xe>
   242f0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   242f4:	b90a      	cbnz	r2, 242fa <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   242f6:	f7e1 bdc1 	b.w	5e7c <arch_swap>
   242fa:	f383 8811 	msr	BASEPRI, r3
   242fe:	f3bf 8f6f 	isb	sy
}
   24302:	4770      	bx	lr

00024304 <z_reschedule_unlocked>:
	__asm__ volatile(
   24304:	f04f 0320 	mov.w	r3, #32
   24308:	f3ef 8011 	mrs	r0, BASEPRI
   2430c:	f383 8812 	msr	BASEPRI_MAX, r3
   24310:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24314:	f7ff bfea 	b.w	242ec <z_reschedule_irqlock>

00024318 <z_priq_dumb_best>:
{
   24318:	4603      	mov	r3, r0
	return list->head == list;
   2431a:	6800      	ldr	r0, [r0, #0]
}
   2431c:	4283      	cmp	r3, r0
   2431e:	bf08      	it	eq
   24320:	2000      	moveq	r0, #0
   24322:	4770      	bx	lr

00024324 <z_ready_thread>:
{
   24324:	b510      	push	{r4, lr}
   24326:	f04f 0320 	mov.w	r3, #32
   2432a:	f3ef 8411 	mrs	r4, BASEPRI
   2432e:	f383 8812 	msr	BASEPRI_MAX, r3
   24332:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   24336:	f7fa fc05 	bl	1eb44 <ready_thread>
	__asm__ volatile(
   2433a:	f384 8811 	msr	BASEPRI, r4
   2433e:	f3bf 8f6f 	isb	sy
}
   24342:	bd10      	pop	{r4, pc}

00024344 <z_thread_timeout>:
{
   24344:	b510      	push	{r4, lr}
   24346:	4601      	mov	r1, r0
	__asm__ volatile(
   24348:	f04f 0320 	mov.w	r3, #32
   2434c:	f3ef 8411 	mrs	r4, BASEPRI
   24350:	f383 8812 	msr	BASEPRI_MAX, r3
   24354:	f3bf 8f6f 	isb	sy
		if (!killed) {
   24358:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2435c:	f013 0f28 	tst.w	r3, #40	; 0x28
   24360:	d10d      	bne.n	2437e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   24362:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   24366:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   24368:	b10b      	cbz	r3, 2436e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2436a:	f7ff ff98 	bl	2429e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2436e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   24372:	f023 0314 	bic.w	r3, r3, #20
   24376:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2437a:	f7fa fbe3 	bl	1eb44 <ready_thread>
	__asm__ volatile(
   2437e:	f384 8811 	msr	BASEPRI, r4
   24382:	f3bf 8f6f 	isb	sy
}
   24386:	bd10      	pop	{r4, pc}

00024388 <add_to_waitq_locked>:
{
   24388:	b538      	push	{r3, r4, r5, lr}
   2438a:	4604      	mov	r4, r0
   2438c:	460d      	mov	r5, r1
	unready_thread(thread);
   2438e:	f7fa fc2d 	bl	1ebec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24392:	7b63      	ldrb	r3, [r4, #13]
   24394:	f043 0302 	orr.w	r3, r3, #2
   24398:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2439a:	b195      	cbz	r5, 243c2 <add_to_waitq_locked+0x3a>
   2439c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2439e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243a0:	429d      	cmp	r5, r3
   243a2:	d015      	beq.n	243d0 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243a4:	b1a3      	cbz	r3, 243d0 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   243a6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   243aa:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   243ae:	4291      	cmp	r1, r2
   243b0:	d008      	beq.n	243c4 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   243b2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   243b4:	2a00      	cmp	r2, #0
   243b6:	dd05      	ble.n	243c4 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   243b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   243ba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   243be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   243c0:	605c      	str	r4, [r3, #4]
}
   243c2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   243c4:	686a      	ldr	r2, [r5, #4]
   243c6:	4293      	cmp	r3, r2
   243c8:	d002      	beq.n	243d0 <add_to_waitq_locked+0x48>
   243ca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243cc:	2b00      	cmp	r3, #0
   243ce:	d1ec      	bne.n	243aa <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   243d0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   243d2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   243d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   243d8:	606c      	str	r4, [r5, #4]
}
   243da:	e7f2      	b.n	243c2 <add_to_waitq_locked+0x3a>

000243dc <z_unpend_first_thread>:
{
   243dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   243de:	f04f 0320 	mov.w	r3, #32
   243e2:	f3ef 8511 	mrs	r5, BASEPRI
   243e6:	f383 8812 	msr	BASEPRI_MAX, r3
   243ea:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   243ee:	f7ff ff93 	bl	24318 <z_priq_dumb_best>
		if (thread != NULL) {
   243f2:	4604      	mov	r4, r0
   243f4:	b120      	cbz	r0, 24400 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   243f6:	f7ff ff52 	bl	2429e <unpend_thread_no_timeout>
   243fa:	3018      	adds	r0, #24
   243fc:	f000 f833 	bl	24466 <z_abort_timeout>
	__asm__ volatile(
   24400:	f385 8811 	msr	BASEPRI, r5
   24404:	f3bf 8f6f 	isb	sy
}
   24408:	4620      	mov	r0, r4
   2440a:	bd38      	pop	{r3, r4, r5, pc}

0002440c <z_unpend_all>:
{
   2440c:	b538      	push	{r3, r4, r5, lr}
   2440e:	4605      	mov	r5, r0
	int need_sched = 0;
   24410:	2000      	movs	r0, #0
	return list->head == list;
   24412:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24414:	42a5      	cmp	r5, r4
   24416:	d000      	beq.n	2441a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24418:	b904      	cbnz	r4, 2441c <z_unpend_all+0x10>
}
   2441a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2441c:	4620      	mov	r0, r4
   2441e:	f7ff ff51 	bl	242c4 <z_unpend_thread>
		z_ready_thread(thread);
   24422:	4620      	mov	r0, r4
   24424:	f7ff ff7e 	bl	24324 <z_ready_thread>
		need_sched = 1;
   24428:	2001      	movs	r0, #1
   2442a:	e7f2      	b.n	24412 <z_unpend_all+0x6>

0002442c <z_sched_wake>:
{
   2442c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2442e:	f04f 0320 	mov.w	r3, #32
   24432:	f3ef 8511 	mrs	r5, BASEPRI
   24436:	f383 8812 	msr	BASEPRI_MAX, r3
   2443a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2443e:	f7ff ff6b 	bl	24318 <z_priq_dumb_best>
		if (thread != NULL) {
   24442:	4604      	mov	r4, r0
   24444:	b150      	cbz	r0, 2445c <z_sched_wake+0x30>
   24446:	67c1      	str	r1, [r0, #124]	; 0x7c
   24448:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2444a:	f7ff ff28 	bl	2429e <unpend_thread_no_timeout>
   2444e:	3018      	adds	r0, #24
   24450:	f000 f809 	bl	24466 <z_abort_timeout>
			ready_thread(thread);
   24454:	4620      	mov	r0, r4
   24456:	f7fa fb75 	bl	1eb44 <ready_thread>
			ret = true;
   2445a:	2001      	movs	r0, #1
	__asm__ volatile(
   2445c:	f385 8811 	msr	BASEPRI, r5
   24460:	f3bf 8f6f 	isb	sy
}
   24464:	bd38      	pop	{r3, r4, r5, pc}

00024466 <z_abort_timeout>:
{
   24466:	b510      	push	{r4, lr}
	__asm__ volatile(
   24468:	f04f 0220 	mov.w	r2, #32
   2446c:	f3ef 8411 	mrs	r4, BASEPRI
   24470:	f382 8812 	msr	BASEPRI_MAX, r2
   24474:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   24478:	6803      	ldr	r3, [r0, #0]
   2447a:	b13b      	cbz	r3, 2448c <z_abort_timeout+0x26>
			remove_timeout(to);
   2447c:	f7fa fe10 	bl	1f0a0 <remove_timeout>
			ret = 0;
   24480:	2000      	movs	r0, #0
	__asm__ volatile(
   24482:	f384 8811 	msr	BASEPRI, r4
   24486:	f3bf 8f6f 	isb	sy
}
   2448a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2448c:	f06f 0015 	mvn.w	r0, #21
   24490:	e7f7      	b.n	24482 <z_abort_timeout+0x1c>

00024492 <z_get_next_timeout_expiry>:
{
   24492:	b510      	push	{r4, lr}
	__asm__ volatile(
   24494:	f04f 0320 	mov.w	r3, #32
   24498:	f3ef 8411 	mrs	r4, BASEPRI
   2449c:	f383 8812 	msr	BASEPRI_MAX, r3
   244a0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   244a4:	f7fa fdd6 	bl	1f054 <next_timeout>
	__asm__ volatile(
   244a8:	f384 8811 	msr	BASEPRI, r4
   244ac:	f3bf 8f6f 	isb	sy
}
   244b0:	bd10      	pop	{r4, pc}

000244b2 <z_set_timeout_expiry>:
{
   244b2:	b570      	push	{r4, r5, r6, lr}
   244b4:	4604      	mov	r4, r0
   244b6:	460d      	mov	r5, r1
	__asm__ volatile(
   244b8:	f04f 0320 	mov.w	r3, #32
   244bc:	f3ef 8611 	mrs	r6, BASEPRI
   244c0:	f383 8812 	msr	BASEPRI_MAX, r3
   244c4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   244c8:	f7fa fdc4 	bl	1f054 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   244cc:	2801      	cmp	r0, #1
   244ce:	dd05      	ble.n	244dc <z_set_timeout_expiry+0x2a>
   244d0:	42a0      	cmp	r0, r4
   244d2:	db03      	blt.n	244dc <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   244d4:	4629      	mov	r1, r5
   244d6:	4620      	mov	r0, r4
   244d8:	f7f7 fcfa 	bl	1bed0 <sys_clock_set_timeout>
	__asm__ volatile(
   244dc:	f386 8811 	msr	BASEPRI, r6
   244e0:	f3bf 8f6f 	isb	sy
}
   244e4:	bd70      	pop	{r4, r5, r6, pc}

000244e6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   244e6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   244e8:	f7fa feca 	bl	1f280 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   244ec:	bd08      	pop	{r3, pc}

000244ee <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   244ee:	f7fa bec7 	b.w	1f280 <sys_clock_tick_get>

000244f2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   244f2:	b108      	cbz	r0, 244f8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   244f4:	f7e1 bf42 	b.w	637c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   244f8:	4770      	bx	lr

000244fa <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244fa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   244fe:	bf08      	it	eq
   24500:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   24504:	b538      	push	{r3, r4, r5, lr}
   24506:	4605      	mov	r5, r0
   24508:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2450a:	d01d      	beq.n	24548 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2450c:	ea51 0300 	orrs.w	r3, r1, r0
   24510:	d103      	bne.n	2451a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   24512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   24516:	f7fa beb3 	b.w	1f280 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2451a:	f06f 0301 	mvn.w	r3, #1
   2451e:	1a18      	subs	r0, r3, r0
   24520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24524:	eb63 0101 	sbc.w	r1, r3, r1
   24528:	2900      	cmp	r1, #0
   2452a:	da0c      	bge.n	24546 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2452c:	f7fa fea8 	bl	1f280 <sys_clock_tick_get>
   24530:	2d01      	cmp	r5, #1
   24532:	4622      	mov	r2, r4
   24534:	f174 0400 	sbcs.w	r4, r4, #0
   24538:	462b      	mov	r3, r5
   2453a:	bfbc      	itt	lt
   2453c:	2301      	movlt	r3, #1
   2453e:	2200      	movlt	r2, #0
   24540:	1818      	adds	r0, r3, r0
   24542:	eb41 0102 	adc.w	r1, r1, r2
}
   24546:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   24548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2454c:	4601      	mov	r1, r0
   2454e:	e7fa      	b.n	24546 <sys_clock_timeout_end_calc+0x4c>

00024550 <add_event>:
{
   24550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24552:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   24554:	e9d0 1300 	ldrd	r1, r3, [r0]
   24558:	4288      	cmp	r0, r1
   2455a:	4604      	mov	r4, r0
   2455c:	d00d      	beq.n	2457a <add_event+0x2a>
	if ((pending == NULL) ||
   2455e:	b163      	cbz	r3, 2457a <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   24560:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24562:	b100      	cbz	r0, 24566 <add_event+0x16>
   24564:	3860      	subs	r0, #96	; 0x60
   24566:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2456a:	4639      	mov	r1, r7
   2456c:	f7ff fea1 	bl	242b2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   24570:	2800      	cmp	r0, #0
   24572:	dc02      	bgt.n	2457a <add_event+0x2a>
	return list->head == list;
   24574:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24576:	42b4      	cmp	r4, r6
   24578:	d109      	bne.n	2458e <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2457a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2457c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   24580:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24582:	6065      	str	r5, [r4, #4]
}
   24584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24586:	6863      	ldr	r3, [r4, #4]
   24588:	42b3      	cmp	r3, r6
   2458a:	d0f6      	beq.n	2457a <add_event+0x2a>
   2458c:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2458e:	2e00      	cmp	r6, #0
   24590:	d0f3      	beq.n	2457a <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   24592:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24594:	b101      	cbz	r1, 24598 <add_event+0x48>
   24596:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   24598:	4638      	mov	r0, r7
   2459a:	f7ff fe8a 	bl	242b2 <z_sched_prio_cmp>
   2459e:	2800      	cmp	r0, #0
   245a0:	ddf1      	ble.n	24586 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   245a2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   245a4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   245a8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   245aa:	6075      	str	r5, [r6, #4]
			return;
   245ac:	e7ea      	b.n	24584 <add_event+0x34>

000245ae <register_events>:
{
   245ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   245b2:	2500      	movs	r5, #0
{
   245b4:	468b      	mov	fp, r1
   245b6:	4614      	mov	r4, r2
   245b8:	461f      	mov	r7, r3
   245ba:	4682      	mov	sl, r0
	int events_registered = 0;
   245bc:	462e      	mov	r6, r5
	event->poller = NULL;
   245be:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   245c0:	455d      	cmp	r5, fp
   245c2:	db02      	blt.n	245ca <register_events+0x1c>
}
   245c4:	4630      	mov	r0, r6
   245c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   245ca:	f04f 0320 	mov.w	r3, #32
   245ce:	f3ef 8911 	mrs	r9, BASEPRI
   245d2:	f383 8812 	msr	BASEPRI_MAX, r3
   245d6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   245da:	f89a 300d 	ldrb.w	r3, [sl, #13]
   245de:	f003 031f 	and.w	r3, r3, #31
   245e2:	3b01      	subs	r3, #1
   245e4:	2b07      	cmp	r3, #7
   245e6:	d80f      	bhi.n	24608 <register_events+0x5a>
   245e8:	e8df f003 	tbb	[pc, r3]
   245ec:	0a0e041e 	.word	0x0a0e041e
   245f0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   245f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   245f8:	689b      	ldr	r3, [r3, #8]
   245fa:	b12b      	cbz	r3, 24608 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   245fc:	2302      	movs	r3, #2
   245fe:	e020      	b.n	24642 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   24600:	f8da 3010 	ldr.w	r3, [sl, #16]
   24604:	681b      	ldr	r3, [r3, #0]
   24606:	bb8b      	cbnz	r3, 2466c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   24608:	bb47      	cbnz	r7, 2465c <register_events+0xae>
   2460a:	7823      	ldrb	r3, [r4, #0]
   2460c:	b333      	cbz	r3, 2465c <register_events+0xae>
	switch (event->type) {
   2460e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24612:	f003 031f 	and.w	r3, r3, #31
   24616:	3b01      	subs	r3, #1
   24618:	2b07      	cmp	r3, #7
   2461a:	d830      	bhi.n	2467e <register_events+0xd0>
   2461c:	e8df f003 	tbb	[pc, r3]
   24620:	282f2833 	.word	0x282f2833
   24624:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   24628:	f8da 3010 	ldr.w	r3, [sl, #16]
   2462c:	689b      	ldr	r3, [r3, #8]
   2462e:	2b00      	cmp	r3, #0
   24630:	d0ea      	beq.n	24608 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   24632:	2301      	movs	r3, #1
   24634:	e005      	b.n	24642 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   24636:	f8da 3010 	ldr.w	r3, [sl, #16]
   2463a:	6a1b      	ldr	r3, [r3, #32]
   2463c:	2b00      	cmp	r3, #0
   2463e:	d0e3      	beq.n	24608 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24640:	2310      	movs	r3, #16
	event->state |= state;
   24642:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   24646:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2464a:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2464e:	430b      	orrs	r3, r1
   24650:	f363 3252 	bfi	r2, r3, #13, #6
   24654:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   24658:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2465c:	f389 8811 	msr	BASEPRI, r9
   24660:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24664:	3501      	adds	r5, #1
   24666:	f10a 0a14 	add.w	sl, sl, #20
   2466a:	e7a9      	b.n	245c0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2466c:	2304      	movs	r3, #4
   2466e:	e7e8      	b.n	24642 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   24670:	f8da 0010 	ldr.w	r0, [sl, #16]
   24674:	4622      	mov	r2, r4
   24676:	4651      	mov	r1, sl
   24678:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2467a:	f7ff ff69 	bl	24550 <add_event>
	event->poller = poller;
   2467e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   24682:	3601      	adds	r6, #1
   24684:	e7ea      	b.n	2465c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   24686:	f8da 0010 	ldr.w	r0, [sl, #16]
   2468a:	4622      	mov	r2, r4
   2468c:	4651      	mov	r1, sl
   2468e:	e7f4      	b.n	2467a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   24690:	f8da 0010 	ldr.w	r0, [sl, #16]
   24694:	4622      	mov	r2, r4
   24696:	4651      	mov	r1, sl
   24698:	3024      	adds	r0, #36	; 0x24
   2469a:	e7ee      	b.n	2467a <register_events+0xcc>

0002469c <signal_poll_event>:
{
   2469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   246a0:	6884      	ldr	r4, [r0, #8]
{
   246a2:	4605      	mov	r5, r0
   246a4:	460e      	mov	r6, r1
	if (poller != NULL) {
   246a6:	b144      	cbz	r4, 246ba <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   246a8:	7863      	ldrb	r3, [r4, #1]
   246aa:	2b01      	cmp	r3, #1
   246ac:	d136      	bne.n	2471c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   246ae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   246b2:	f013 0302 	ands.w	r3, r3, #2
   246b6:	d10a      	bne.n	246ce <signal_poll_event+0x32>
		poller->is_polling = false;
   246b8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   246ba:	68eb      	ldr	r3, [r5, #12]
   246bc:	f3c3 3145 	ubfx	r1, r3, #13, #6
   246c0:	430e      	orrs	r6, r1
	event->poller = NULL;
   246c2:	2000      	movs	r0, #0
	event->state |= state;
   246c4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   246c8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   246ca:	60eb      	str	r3, [r5, #12]
	return retcode;
   246cc:	e00b      	b.n	246e6 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   246ce:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   246d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   246d6:	bf08      	it	eq
   246d8:	f112 0f02 	cmneq.w	r2, #2
   246dc:	d105      	bne.n	246ea <signal_poll_event+0x4e>
		poller->is_polling = false;
   246de:	2300      	movs	r3, #0
   246e0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   246e2:	f06f 000a 	mvn.w	r0, #10
}
   246e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   246ea:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   246ee:	4640      	mov	r0, r8
   246f0:	f7ff fde8 	bl	242c4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   246f4:	2e08      	cmp	r6, #8
   246f6:	bf0c      	ite	eq
   246f8:	f06f 0303 	mvneq.w	r3, #3
   246fc:	2300      	movne	r3, #0
   246fe:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24700:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24704:	06db      	lsls	r3, r3, #27
   24706:	d102      	bne.n	2470e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   24708:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2470c:	b10f      	cbz	r7, 24712 <signal_poll_event+0x76>
		poller->is_polling = false;
   2470e:	2300      	movs	r3, #0
   24710:	e7d2      	b.n	246b8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   24712:	4640      	mov	r0, r8
   24714:	f7ff fe06 	bl	24324 <z_ready_thread>
		poller->is_polling = false;
   24718:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2471a:	e7ce      	b.n	246ba <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2471c:	2b02      	cmp	r3, #2
   2471e:	d1f6      	bne.n	2470e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24720:	7823      	ldrb	r3, [r4, #0]
   24722:	2b00      	cmp	r3, #0
   24724:	d0c9      	beq.n	246ba <signal_poll_event+0x1e>
   24726:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2472a:	2f00      	cmp	r7, #0
   2472c:	d0f4      	beq.n	24718 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2472e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   24732:	f1a4 0914 	sub.w	r9, r4, #20
   24736:	f104 0014 	add.w	r0, r4, #20
   2473a:	f7ff fe94 	bl	24466 <z_abort_timeout>
		twork->poll_result = 0;
   2473e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   24742:	4649      	mov	r1, r9
   24744:	4638      	mov	r0, r7
   24746:	f7ff fd39 	bl	241bc <k_work_submit_to_queue>
		poller->is_polling = false;
   2474a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2474e:	e7b4      	b.n	246ba <signal_poll_event+0x1e>

00024750 <clear_event_registrations>:
	while (num_events--) {
   24750:	2314      	movs	r3, #20
{
   24752:	b5f0      	push	{r4, r5, r6, r7, lr}
   24754:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   24758:	2400      	movs	r4, #0
   2475a:	2601      	movs	r6, #1
	while (num_events--) {
   2475c:	b901      	cbnz	r1, 24760 <clear_event_registrations+0x10>
}
   2475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   24760:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   24764:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   24768:	f003 031f 	and.w	r3, r3, #31
   2476c:	2b08      	cmp	r3, #8
   2476e:	f1a0 0714 	sub.w	r7, r0, #20
   24772:	d80d      	bhi.n	24790 <clear_event_registrations+0x40>
   24774:	fa06 f303 	lsl.w	r3, r6, r3
   24778:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2477c:	d008      	beq.n	24790 <clear_event_registrations+0x40>
	return node->next != NULL;
   2477e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24782:	b12b      	cbz	r3, 24790 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   24784:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   24788:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2478a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2478c:	e940 4405 	strd	r4, r4, [r0, #-20]
   24790:	f382 8811 	msr	BASEPRI, r2
   24794:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24798:	f04f 0320 	mov.w	r3, #32
   2479c:	f3ef 8211 	mrs	r2, BASEPRI
   247a0:	f383 8812 	msr	BASEPRI_MAX, r3
   247a4:	f3bf 8f6f 	isb	sy
   247a8:	3901      	subs	r1, #1
   247aa:	4638      	mov	r0, r7
   247ac:	e7d6      	b.n	2475c <clear_event_registrations+0xc>

000247ae <k_poll_event_init>:
{
   247ae:	b510      	push	{r4, lr}
	event->type = type;
   247b0:	04d2      	lsls	r2, r2, #19
   247b2:	0209      	lsls	r1, r1, #8
   247b4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   247b8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   247bc:	430a      	orrs	r2, r1
   247be:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   247c0:	2400      	movs	r4, #0
	event->type = type;
   247c2:	430a      	orrs	r2, r1
	event->obj = obj;
   247c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   247c8:	6084      	str	r4, [r0, #8]
}
   247ca:	bd10      	pop	{r4, pc}

000247cc <z_handle_obj_poll_events>:
{
   247cc:	4603      	mov	r3, r0
	return list->head == list;
   247ce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   247d0:	4283      	cmp	r3, r0
   247d2:	d008      	beq.n	247e6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   247d4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   247d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   247da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   247dc:	2300      	movs	r3, #0
	node->prev = NULL;
   247de:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   247e2:	f7ff bf5b 	b.w	2469c <signal_poll_event>
}
   247e6:	4770      	bx	lr

000247e8 <k_free>:
	if (ptr != NULL) {
   247e8:	b120      	cbz	r0, 247f4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   247ea:	1f01      	subs	r1, r0, #4
   247ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   247f0:	f7ff bb27 	b.w	23e42 <k_heap_free>
}
   247f4:	4770      	bx	lr
	...

000247f8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   247f8:	f7f7 bbc0 	b.w	1bf7c <SystemInit>
