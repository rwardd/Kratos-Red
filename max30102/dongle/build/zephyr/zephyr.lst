
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	00 6c 00 20 cd 8a 00 00 1d 49 02 00 a1 8a 00 00     .l. .....I......
    1010:	a1 8a 00 00 a1 8a 00 00 a1 8a 00 00 00 00 00 00     ................
	...
    102c:	f9 83 00 00 a1 8a 00 00 00 00 00 00 a5 83 00 00     ................
    103c:	a1 8a 00 00                                         ....

00001040 <_irq_vector_table>:
    1040:	a9 84 00 00 7d a2 01 00 a9 84 00 00 a9 84 00 00     ....}...........
    1050:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    1060:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    1070:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    1080:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    1090:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10a0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10b0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10c0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10d0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10e0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................
    10f0:	a9 84 00 00 a9 84 00 00 a9 84 00 00 a9 84 00 00     ................

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b974 	b.w	1400 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	4688      	mov	r8, r1
    113c:	2b00      	cmp	r3, #0
    113e:	d14d      	bne.n	11dc <__udivmoddi4+0xac>
    1140:	428a      	cmp	r2, r1
    1142:	4694      	mov	ip, r2
    1144:	d968      	bls.n	1218 <__udivmoddi4+0xe8>
    1146:	fab2 f282 	clz	r2, r2
    114a:	b152      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114c:	fa01 f302 	lsl.w	r3, r1, r2
    1150:	f1c2 0120 	rsb	r1, r2, #32
    1154:	fa20 f101 	lsr.w	r1, r0, r1
    1158:	fa0c fc02 	lsl.w	ip, ip, r2
    115c:	ea41 0803 	orr.w	r8, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 451c 	mov.w	r5, ip, lsr #16
    1166:	0c21      	lsrs	r1, r4, #16
    1168:	fbb8 fef5 	udiv	lr, r8, r5
    116c:	fa1f f78c 	uxth.w	r7, ip
    1170:	fb05 831e 	mls	r3, r5, lr, r8
    1174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1178:	fb0e f107 	mul.w	r1, lr, r7
    117c:	4299      	cmp	r1, r3
    117e:	d90b      	bls.n	1198 <__udivmoddi4+0x68>
    1180:	eb1c 0303 	adds.w	r3, ip, r3
    1184:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    1188:	f080 811e 	bcs.w	13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
    118c:	4299      	cmp	r1, r3
    118e:	f240 811b 	bls.w	13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
    1192:	f1ae 0e02 	sub.w	lr, lr, #2
    1196:	4463      	add	r3, ip
    1198:	1a5b      	subs	r3, r3, r1
    119a:	b2a4      	uxth	r4, r4
    119c:	fbb3 f0f5 	udiv	r0, r3, r5
    11a0:	fb05 3310 	mls	r3, r5, r0, r3
    11a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a8:	fb00 f707 	mul.w	r7, r0, r7
    11ac:	42a7      	cmp	r7, r4
    11ae:	d90a      	bls.n	11c6 <__udivmoddi4+0x96>
    11b0:	eb1c 0404 	adds.w	r4, ip, r4
    11b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11b8:	f080 8108 	bcs.w	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    11bc:	42a7      	cmp	r7, r4
    11be:	f240 8105 	bls.w	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    11c2:	4464      	add	r4, ip
    11c4:	3802      	subs	r0, #2
    11c6:	1be4      	subs	r4, r4, r7
    11c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    11cc:	2100      	movs	r1, #0
    11ce:	b11e      	cbz	r6, 11d8 <__udivmoddi4+0xa8>
    11d0:	40d4      	lsrs	r4, r2
    11d2:	2300      	movs	r3, #0
    11d4:	e9c6 4300 	strd	r4, r3, [r6]
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	428b      	cmp	r3, r1
    11de:	d908      	bls.n	11f2 <__udivmoddi4+0xc2>
    11e0:	2e00      	cmp	r6, #0
    11e2:	f000 80ee 	beq.w	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    11e6:	2100      	movs	r1, #0
    11e8:	e9c6 0500 	strd	r0, r5, [r6]
    11ec:	4608      	mov	r0, r1
    11ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11f2:	fab3 f183 	clz	r1, r3
    11f6:	2900      	cmp	r1, #0
    11f8:	d14a      	bne.n	1290 <__udivmoddi4+0x160>
    11fa:	42ab      	cmp	r3, r5
    11fc:	d302      	bcc.n	1204 <__udivmoddi4+0xd4>
    11fe:	4282      	cmp	r2, r0
    1200:	f200 80f9 	bhi.w	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
    1204:	1a84      	subs	r4, r0, r2
    1206:	eb65 0303 	sbc.w	r3, r5, r3
    120a:	2001      	movs	r0, #1
    120c:	4698      	mov	r8, r3
    120e:	2e00      	cmp	r6, #0
    1210:	d0e2      	beq.n	11d8 <__udivmoddi4+0xa8>
    1212:	e9c6 4800 	strd	r4, r8, [r6]
    1216:	e7df      	b.n	11d8 <__udivmoddi4+0xa8>
    1218:	b902      	cbnz	r2, 121c <__udivmoddi4+0xec>
    121a:	deff      	udf	#255	; 0xff
    121c:	fab2 f282 	clz	r2, r2
    1220:	2a00      	cmp	r2, #0
    1222:	f040 8091 	bne.w	1348 <__udivmoddi4+0x218>
    1226:	eba1 050c 	sub.w	r5, r1, ip
    122a:	ea4f 471c 	mov.w	r7, ip, lsr #16
    122e:	fa1f fe8c 	uxth.w	lr, ip
    1232:	2101      	movs	r1, #1
    1234:	fbb5 f3f7 	udiv	r3, r5, r7
    1238:	fb07 5013 	mls	r0, r7, r3, r5
    123c:	0c25      	lsrs	r5, r4, #16
    123e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    1242:	fb0e f003 	mul.w	r0, lr, r3
    1246:	42a8      	cmp	r0, r5
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	eb1c 0505 	adds.w	r5, ip, r5
    124e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1252:	d202      	bcs.n	125a <__udivmoddi4+0x12a>
    1254:	42a8      	cmp	r0, r5
    1256:	f200 80cb 	bhi.w	13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
    125a:	4643      	mov	r3, r8
    125c:	1a2d      	subs	r5, r5, r0
    125e:	b2a4      	uxth	r4, r4
    1260:	fbb5 f0f7 	udiv	r0, r5, r7
    1264:	fb07 5510 	mls	r5, r7, r0, r5
    1268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    126c:	fb0e fe00 	mul.w	lr, lr, r0
    1270:	45a6      	cmp	lr, r4
    1272:	d908      	bls.n	1286 <__udivmoddi4+0x156>
    1274:	eb1c 0404 	adds.w	r4, ip, r4
    1278:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    127c:	d202      	bcs.n	1284 <__udivmoddi4+0x154>
    127e:	45a6      	cmp	lr, r4
    1280:	f200 80bb 	bhi.w	13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    1284:	4628      	mov	r0, r5
    1286:	eba4 040e 	sub.w	r4, r4, lr
    128a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    128e:	e79e      	b.n	11ce <__udivmoddi4+0x9e>
    1290:	f1c1 0720 	rsb	r7, r1, #32
    1294:	408b      	lsls	r3, r1
    1296:	fa22 fc07 	lsr.w	ip, r2, r7
    129a:	ea4c 0c03 	orr.w	ip, ip, r3
    129e:	fa20 f407 	lsr.w	r4, r0, r7
    12a2:	fa05 f301 	lsl.w	r3, r5, r1
    12a6:	431c      	orrs	r4, r3
    12a8:	40fd      	lsrs	r5, r7
    12aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
    12ae:	fa00 f301 	lsl.w	r3, r0, r1
    12b2:	fbb5 f8f9 	udiv	r8, r5, r9
    12b6:	0c20      	lsrs	r0, r4, #16
    12b8:	fa1f fe8c 	uxth.w	lr, ip
    12bc:	fb09 5518 	mls	r5, r9, r8, r5
    12c0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    12c4:	fb08 f00e 	mul.w	r0, r8, lr
    12c8:	42a8      	cmp	r0, r5
    12ca:	fa02 f201 	lsl.w	r2, r2, r1
    12ce:	d90b      	bls.n	12e8 <__udivmoddi4+0x1b8>
    12d0:	eb1c 0505 	adds.w	r5, ip, r5
    12d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    12d8:	f080 8088 	bcs.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    12dc:	42a8      	cmp	r0, r5
    12de:	f240 8085 	bls.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    12e2:	f1a8 0802 	sub.w	r8, r8, #2
    12e6:	4465      	add	r5, ip
    12e8:	1a2d      	subs	r5, r5, r0
    12ea:	b2a4      	uxth	r4, r4
    12ec:	fbb5 f0f9 	udiv	r0, r5, r9
    12f0:	fb09 5510 	mls	r5, r9, r0, r5
    12f4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    12f8:	fb00 fe0e 	mul.w	lr, r0, lr
    12fc:	45ae      	cmp	lr, r5
    12fe:	d908      	bls.n	1312 <__udivmoddi4+0x1e2>
    1300:	eb1c 0505 	adds.w	r5, ip, r5
    1304:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
    1308:	d26c      	bcs.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    130a:	45ae      	cmp	lr, r5
    130c:	d96a      	bls.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    130e:	3802      	subs	r0, #2
    1310:	4465      	add	r5, ip
    1312:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    1316:	fba0 9402 	umull	r9, r4, r0, r2
    131a:	eba5 050e 	sub.w	r5, r5, lr
    131e:	42a5      	cmp	r5, r4
    1320:	46c8      	mov	r8, r9
    1322:	46a6      	mov	lr, r4
    1324:	d356      	bcc.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1326:	d053      	beq.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    1328:	b15e      	cbz	r6, 1342 <__udivmoddi4+0x212>
    132a:	ebb3 0208 	subs.w	r2, r3, r8
    132e:	eb65 050e 	sbc.w	r5, r5, lr
    1332:	fa05 f707 	lsl.w	r7, r5, r7
    1336:	fa22 f301 	lsr.w	r3, r2, r1
    133a:	40cd      	lsrs	r5, r1
    133c:	431f      	orrs	r7, r3
    133e:	e9c6 7500 	strd	r7, r5, [r6]
    1342:	2100      	movs	r1, #0
    1344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1348:	f1c2 0320 	rsb	r3, r2, #32
    134c:	fa20 f103 	lsr.w	r1, r0, r3
    1350:	fa0c fc02 	lsl.w	ip, ip, r2
    1354:	fa25 f303 	lsr.w	r3, r5, r3
    1358:	4095      	lsls	r5, r2
    135a:	430d      	orrs	r5, r1
    135c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    1360:	fa1f fe8c 	uxth.w	lr, ip
    1364:	fbb3 f1f7 	udiv	r1, r3, r7
    1368:	fb07 3011 	mls	r0, r7, r1, r3
    136c:	0c2b      	lsrs	r3, r5, #16
    136e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1372:	fb01 f00e 	mul.w	r0, r1, lr
    1376:	4298      	cmp	r0, r3
    1378:	fa04 f402 	lsl.w	r4, r4, r2
    137c:	d908      	bls.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    137e:	eb1c 0303 	adds.w	r3, ip, r3
    1382:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    1386:	d22f      	bcs.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    1388:	4298      	cmp	r0, r3
    138a:	d92d      	bls.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    138c:	3902      	subs	r1, #2
    138e:	4463      	add	r3, ip
    1390:	1a1b      	subs	r3, r3, r0
    1392:	b2ad      	uxth	r5, r5
    1394:	fbb3 f0f7 	udiv	r0, r3, r7
    1398:	fb07 3310 	mls	r3, r7, r0, r3
    139c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    13a0:	fb00 f30e 	mul.w	r3, r0, lr
    13a4:	42ab      	cmp	r3, r5
    13a6:	d908      	bls.n	13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13a8:	eb1c 0505 	adds.w	r5, ip, r5
    13ac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    13b0:	d216      	bcs.n	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    13b2:	42ab      	cmp	r3, r5
    13b4:	d914      	bls.n	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    13b6:	3802      	subs	r0, #2
    13b8:	4465      	add	r5, ip
    13ba:	1aed      	subs	r5, r5, r3
    13bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    13c0:	e738      	b.n	1234 <__udivmoddi4+0x104>
    13c2:	4631      	mov	r1, r6
    13c4:	4630      	mov	r0, r6
    13c6:	e707      	b.n	11d8 <__udivmoddi4+0xa8>
    13c8:	4686      	mov	lr, r0
    13ca:	e6e5      	b.n	1198 <__udivmoddi4+0x68>
    13cc:	4618      	mov	r0, r3
    13ce:	e6fa      	b.n	11c6 <__udivmoddi4+0x96>
    13d0:	454b      	cmp	r3, r9
    13d2:	d2a9      	bcs.n	1328 <__udivmoddi4+0x1f8>
    13d4:	ebb9 0802 	subs.w	r8, r9, r2
    13d8:	eb64 0e0c 	sbc.w	lr, r4, ip
    13dc:	3801      	subs	r0, #1
    13de:	e7a3      	b.n	1328 <__udivmoddi4+0x1f8>
    13e0:	4640      	mov	r0, r8
    13e2:	e7ea      	b.n	13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13e4:	4620      	mov	r0, r4
    13e6:	e794      	b.n	1312 <__udivmoddi4+0x1e2>
    13e8:	4641      	mov	r1, r8
    13ea:	e7d1      	b.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    13ec:	46d0      	mov	r8, sl
    13ee:	e77b      	b.n	12e8 <__udivmoddi4+0x1b8>
    13f0:	3b02      	subs	r3, #2
    13f2:	4465      	add	r5, ip
    13f4:	e732      	b.n	125c <__udivmoddi4+0x12c>
    13f6:	4608      	mov	r0, r1
    13f8:	e709      	b.n	120e <__udivmoddi4+0xde>
    13fa:	4464      	add	r4, ip
    13fc:	3802      	subs	r0, #2
    13fe:	e742      	b.n	1286 <__udivmoddi4+0x156>

00001400 <__aeabi_idiv0>:
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	0000      	movs	r0, r0
	...

00001408 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    1408:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    140a:	4d46      	ldr	r5, [pc, #280]	; (1524 <bt_init+0x11c>)
    140c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    1410:	6899      	ldr	r1, [r3, #8]
    1412:	f011 0101 	ands.w	r1, r1, #1
{
    1416:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1418:	d123      	bne.n	1462 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    141a:	aa02      	add	r2, sp, #8
    141c:	f640 4003 	movw	r0, #3075	; 0xc03
    1420:	f008 fca2 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    1424:	4604      	mov	r4, r0
    1426:	2800      	cmp	r0, #0
    1428:	d179      	bne.n	151e <bt_init+0x116>
	uint8_t status = buf->data[0];
    142a:	9b02      	ldr	r3, [sp, #8]
    142c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	b9a3      	cbnz	r3, 145c <bt_init+0x54>
		bt_scan_reset();
    1432:	f009 fe8b 	bl	b14c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1436:	f3bf 8f5b 	dmb	ish
    143a:	462b      	mov	r3, r5
    143c:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    1440:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    1444:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1448:	f3bf 8f5b 	dmb	ish
    144c:	e853 1f00 	ldrex	r1, [r3]
    1450:	e843 2000 	strex	r0, r2, [r3]
    1454:	2800      	cmp	r0, #0
    1456:	d1f9      	bne.n	144c <bt_init+0x44>
    1458:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    145c:	9802      	ldr	r0, [sp, #8]
    145e:	f01b fd83 	bl	1cf68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1462:	aa02      	add	r2, sp, #8
    1464:	2100      	movs	r1, #0
    1466:	f241 0003 	movw	r0, #4099	; 0x1003
    146a:	f008 fc7d 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    146e:	4604      	mov	r4, r0
    1470:	2800      	cmp	r0, #0
    1472:	d154      	bne.n	151e <bt_init+0x116>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    1474:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1476:	482c      	ldr	r0, [pc, #176]	; (1528 <bt_init+0x120>)
    1478:	6899      	ldr	r1, [r3, #8]
    147a:	2208      	movs	r2, #8
    147c:	3101      	adds	r1, #1
    147e:	f023 fa8e 	bl	2499e <memcpy>
	net_buf_unref(rsp);
    1482:	9802      	ldr	r0, [sp, #8]
    1484:	f01b fd70 	bl	1cf68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1488:	4621      	mov	r1, r4
    148a:	aa02      	add	r2, sp, #8
    148c:	f241 0001 	movw	r0, #4097	; 0x1001
    1490:	f008 fc6a 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    1494:	4604      	mov	r4, r0
    1496:	2800      	cmp	r0, #0
    1498:	d141      	bne.n	151e <bt_init+0x116>
	read_local_ver_complete(rsp);
    149a:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    149c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    149e:	785a      	ldrb	r2, [r3, #1]
    14a0:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    14a4:	78d9      	ldrb	r1, [r3, #3]
    14a6:	789a      	ldrb	r2, [r3, #2]
    14a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    14ac:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    14b0:	791a      	ldrb	r2, [r3, #4]
    14b2:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    14b6:	7a19      	ldrb	r1, [r3, #8]
    14b8:	79da      	ldrb	r2, [r3, #7]
    14ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    14be:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    14c2:	795a      	ldrb	r2, [r3, #5]
    14c4:	799b      	ldrb	r3, [r3, #6]
    14c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    14ca:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    14ce:	f01b fd4b 	bl	1cf68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    14d2:	4621      	mov	r1, r4
    14d4:	aa02      	add	r2, sp, #8
    14d6:	f241 0002 	movw	r0, #4098	; 0x1002
    14da:	f008 fc45 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    14de:	4604      	mov	r4, r0
    14e0:	b9e8      	cbnz	r0, 151e <bt_init+0x116>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    14e2:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    14e4:	4811      	ldr	r0, [pc, #68]	; (152c <bt_init+0x124>)
    14e6:	6899      	ldr	r1, [r3, #8]
    14e8:	2240      	movs	r2, #64	; 0x40
    14ea:	3101      	adds	r1, #1
    14ec:	f023 fa57 	bl	2499e <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    14f0:	480e      	ldr	r0, [pc, #56]	; (152c <bt_init+0x124>)
    14f2:	f023 fafe 	bl	24af2 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    14f6:	9802      	ldr	r0, [sp, #8]
    14f8:	f01b fd36 	bl	1cf68 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    14fc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    1500:	065a      	lsls	r2, r3, #25
    1502:	d419      	bmi.n	1538 <bt_init+0x130>
		BT_ERR("Non-LE capable controller detected!");
    1504:	4b0a      	ldr	r3, [pc, #40]	; (1530 <bt_init+0x128>)
    1506:	9306      	str	r3, [sp, #24]
    1508:	480a      	ldr	r0, [pc, #40]	; (1534 <bt_init+0x12c>)
    150a:	2302      	movs	r3, #2
    150c:	aa05      	add	r2, sp, #20
    150e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    1512:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    1516:	9301      	str	r3, [sp, #4]
    1518:	9305      	str	r3, [sp, #20]
    151a:	f023 fb91 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    151e:	4620      	mov	r0, r4
    1520:	b008      	add	sp, #32
    1522:	bd70      	pop	{r4, r5, r6, pc}
    1524:	20000000 	.word	0x20000000
    1528:	20000070 	.word	0x20000070
    152c:	20000078 	.word	0x20000078
    1530:	0002b512 	.word	0x0002b512
    1534:	00028970 	.word	0x00028970
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1538:	4621      	mov	r1, r4
    153a:	aa02      	add	r2, sp, #8
    153c:	f242 0003 	movw	r0, #8195	; 0x2003
    1540:	f008 fc12 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    1544:	4604      	mov	r4, r0
    1546:	2800      	cmp	r0, #0
    1548:	d1e9      	bne.n	151e <bt_init+0x116>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    154a:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    154c:	48bc      	ldr	r0, [pc, #752]	; (1840 <bt_init+0x438>)
    154e:	6899      	ldr	r1, [r3, #8]
    1550:	2208      	movs	r2, #8
    1552:	3101      	adds	r1, #1
    1554:	f023 fa23 	bl	2499e <memcpy>
	net_buf_unref(rsp);
    1558:	9802      	ldr	r0, [sp, #8]
    155a:	f01b fd05 	bl	1cf68 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    155e:	4621      	mov	r1, r4
    1560:	aa02      	add	r2, sp, #8
    1562:	f242 0002 	movw	r0, #8194	; 0x2002
    1566:	f008 fbff 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    156a:	4604      	mov	r4, r0
    156c:	2800      	cmp	r0, #0
    156e:	d1d6      	bne.n	151e <bt_init+0x116>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    1570:	9b02      	ldr	r3, [sp, #8]
    1572:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1574:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    1578:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    157c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    157e:	b121      	cbz	r1, 158a <bt_init+0x182>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1580:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1582:	48b0      	ldr	r0, [pc, #704]	; (1844 <bt_init+0x43c>)
    1584:	4611      	mov	r1, r2
    1586:	f026 fbf8 	bl	27d7a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    158a:	9802      	ldr	r0, [sp, #8]
    158c:	f01b fcec 	bl	1cf68 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1590:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    1594:	f016 0620 	ands.w	r6, r6, #32
    1598:	f000 80f9 	beq.w	178e <bt_init+0x386>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    159c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    15a0:	071b      	lsls	r3, r3, #28
    15a2:	d512      	bpl.n	15ca <bt_init+0x1c2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    15a4:	aa02      	add	r2, sp, #8
    15a6:	2100      	movs	r1, #0
    15a8:	f242 001c 	movw	r0, #8220	; 0x201c
    15ac:	f008 fbdc 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    15b0:	4604      	mov	r4, r0
    15b2:	2800      	cmp	r0, #0
    15b4:	d1b3      	bne.n	151e <bt_init+0x116>
		le_read_supp_states_complete(rsp);
    15b6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    15b8:	6883      	ldr	r3, [r0, #8]
    15ba:	f8d3 2001 	ldr.w	r2, [r3, #1]
    15be:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    15c2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    15c6:	f01b fccf 	bl	1cf68 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    15ca:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    15ce:	069e      	lsls	r6, r3, #26
    15d0:	d522      	bpl.n	1618 <bt_init+0x210>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    15d2:	a901      	add	r1, sp, #4
    15d4:	4668      	mov	r0, sp
    15d6:	f008 fc47 	bl	9e68 <hci_le_read_max_data_len>
		if (err) {
    15da:	4604      	mov	r4, r0
    15dc:	2800      	cmp	r0, #0
    15de:	d19e      	bne.n	151e <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    15e0:	2104      	movs	r1, #4
    15e2:	f242 0024 	movw	r0, #8228	; 0x2024
    15e6:	f008 fa5f 	bl	9aa8 <bt_hci_cmd_create>
		if (!buf) {
    15ea:	4606      	mov	r6, r0
    15ec:	2800      	cmp	r0, #0
    15ee:	f000 80d5 	beq.w	179c <bt_init+0x394>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    15f2:	2104      	movs	r1, #4
    15f4:	3008      	adds	r0, #8
    15f6:	f025 fd57 	bl	270a8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    15fa:	f8bd 3000 	ldrh.w	r3, [sp]
    15fe:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1600:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1604:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1606:	4622      	mov	r2, r4
    1608:	4631      	mov	r1, r6
    160a:	f242 0024 	movw	r0, #8228	; 0x2024
    160e:	f008 fbab 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    1612:	4604      	mov	r4, r0
    1614:	2800      	cmp	r0, #0
    1616:	d182      	bne.n	151e <bt_init+0x116>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1618:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    161c:	065c      	lsls	r4, r3, #25
    161e:	d510      	bpl.n	1642 <bt_init+0x23a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1620:	aa02      	add	r2, sp, #8
    1622:	2100      	movs	r1, #0
    1624:	f242 002a 	movw	r0, #8234	; 0x202a
    1628:	f008 fb9e 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    162c:	4604      	mov	r4, r0
    162e:	2800      	cmp	r0, #0
    1630:	f47f af75 	bne.w	151e <bt_init+0x116>
		le_read_resolving_list_size_complete(rsp);
    1634:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    1636:	6883      	ldr	r3, [r0, #8]
    1638:	785b      	ldrb	r3, [r3, #1]
    163a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    163e:	f01b fc93 	bl	1cf68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1642:	2108      	movs	r1, #8
    1644:	f242 0001 	movw	r0, #8193	; 0x2001
    1648:	f008 fa2e 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    164c:	4604      	mov	r4, r0
    164e:	2800      	cmp	r0, #0
    1650:	f000 80a4 	beq.w	179c <bt_init+0x394>
    1654:	2108      	movs	r1, #8
    1656:	4408      	add	r0, r1
    1658:	f025 fd26 	bl	270a8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    165c:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1660:	f011 0f40 	tst.w	r1, #64	; 0x40
    1664:	4602      	mov	r2, r0
    1666:	f240 2302 	movw	r3, #514	; 0x202
    166a:	bf08      	it	eq
    166c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    166e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1670:	bf4c      	ite	mi
    1672:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1676:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    167a:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    167c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1680:	bf48      	it	mi
    1682:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1686:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    168a:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    168e:	bf18      	it	ne
    1690:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1694:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1698:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    169a:	bf48      	it	mi
    169c:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16a0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    16a2:	bf08      	it	eq
    16a4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    16a8:	2100      	movs	r1, #0
    16aa:	f023 fada 	bl	24c62 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    16ae:	4621      	mov	r1, r4
    16b0:	2200      	movs	r2, #0
    16b2:	f242 0001 	movw	r0, #8193	; 0x2001
    16b6:	f008 fb57 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    16ba:	4604      	mov	r4, r0
    16bc:	2800      	cmp	r0, #0
    16be:	f47f af2e 	bne.w	151e <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16c2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    16c6:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16ca:	0698      	lsls	r0, r3, #26
    16cc:	d47b      	bmi.n	17c6 <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    16ce:	b9d9      	cbnz	r1, 1708 <bt_init+0x300>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    16d0:	aa02      	add	r2, sp, #8
    16d2:	f241 0005 	movw	r0, #4101	; 0x1005
    16d6:	f008 fb47 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    16da:	4604      	mov	r4, r0
    16dc:	2800      	cmp	r0, #0
    16de:	f47f af1e 	bne.w	151e <bt_init+0x116>
	if (bt_dev.le.acl_mtu) {
    16e2:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    16e6:	b963      	cbnz	r3, 1702 <bt_init+0x2fa>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    16e8:	9b02      	ldr	r3, [sp, #8]
    16ea:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    16ec:	785a      	ldrb	r2, [r3, #1]
    16ee:	7899      	ldrb	r1, [r3, #2]
    16f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    16f4:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    16f8:	889a      	ldrh	r2, [r3, #4]
    16fa:	4852      	ldr	r0, [pc, #328]	; (1844 <bt_init+0x43c>)
    16fc:	4611      	mov	r1, r2
    16fe:	f026 fb3c 	bl	27d7a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1702:	9802      	ldr	r0, [sp, #8]
    1704:	f01b fc30 	bl	1cf68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1708:	2108      	movs	r1, #8
    170a:	f640 4001 	movw	r0, #3073	; 0xc01
    170e:	f008 f9cb 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    1712:	4604      	mov	r4, r0
    1714:	2800      	cmp	r0, #0
    1716:	d041      	beq.n	179c <bt_init+0x394>
    1718:	2108      	movs	r1, #8
    171a:	4408      	add	r0, r1
    171c:	f025 fcc4 	bl	270a8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1720:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    1724:	07d9      	lsls	r1, r3, #31
    1726:	4602      	mov	r2, r0
    1728:	d55d      	bpl.n	17e6 <bt_init+0x3de>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    172a:	a143      	add	r1, pc, #268	; (adr r1, 1838 <bt_init+0x430>)
    172c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1730:	f023 fa97 	bl	24c62 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1734:	4621      	mov	r1, r4
    1736:	2200      	movs	r2, #0
    1738:	f640 4001 	movw	r0, #3073	; 0xc01
    173c:	f008 fb14 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    1740:	4604      	mov	r4, r0
    1742:	2800      	cmp	r0, #0
    1744:	f47f aeeb 	bne.w	151e <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1748:	4601      	mov	r1, r0
    174a:	466a      	mov	r2, sp
    174c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1750:	f008 fb0a 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    1754:	4604      	mov	r4, r0
    1756:	2800      	cmp	r0, #0
    1758:	d049      	beq.n	17ee <bt_init+0x3e6>
		BT_WARN("Vendor HCI extensions not available");
    175a:	4b3b      	ldr	r3, [pc, #236]	; (1848 <bt_init+0x440>)
			BT_WARN("Failed to read supported vendor features");
    175c:	9306      	str	r3, [sp, #24]
    175e:	483b      	ldr	r0, [pc, #236]	; (184c <bt_init+0x444>)
    1760:	2302      	movs	r3, #2
    1762:	aa05      	add	r2, sp, #20
    1764:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    1768:	9301      	str	r3, [sp, #4]
    176a:	9305      	str	r3, [sp, #20]
    176c:	f023 fa68 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    1770:	f009 fc2c 	bl	afcc <bt_id_init>
	if (err) {
    1774:	4604      	mov	r4, r0
    1776:	2800      	cmp	r0, #0
    1778:	f47f aed1 	bne.w	151e <bt_init+0x116>
		err = bt_conn_init();
    177c:	f00a ff3e 	bl	c5fc <bt_conn_init>
		if (err) {
    1780:	4604      	mov	r4, r0
    1782:	2800      	cmp	r0, #0
    1784:	f47f aecb 	bne.w	151e <bt_init+0x116>
	bt_finalize_init();
    1788:	f008 ffec 	bl	a764 <bt_finalize_init>
	return 0;
    178c:	e6c7      	b.n	151e <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    178e:	2102      	movs	r1, #2
    1790:	f640 406d 	movw	r0, #3181	; 0xc6d
    1794:	f008 f988 	bl	9aa8 <bt_hci_cmd_create>
		if (!buf) {
    1798:	4604      	mov	r4, r0
    179a:	b910      	cbnz	r0, 17a2 <bt_init+0x39a>
		return -ENOBUFS;
    179c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    17a0:	e6bd      	b.n	151e <bt_init+0x116>
    17a2:	2102      	movs	r1, #2
    17a4:	3008      	adds	r0, #8
    17a6:	f025 fc7f 	bl	270a8 <net_buf_simple_add>
		cp_le->le = 0x01;
    17aa:	2301      	movs	r3, #1
    17ac:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    17ae:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    17b0:	4621      	mov	r1, r4
    17b2:	4632      	mov	r2, r6
    17b4:	f640 406d 	movw	r0, #3181	; 0xc6d
    17b8:	f008 fad6 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    17bc:	4604      	mov	r4, r0
    17be:	2800      	cmp	r0, #0
    17c0:	f43f aeec 	beq.w	159c <bt_init+0x194>
    17c4:	e6ab      	b.n	151e <bt_init+0x116>
	else if (!bt_dev.le.acl_mtu) {
    17c6:	2900      	cmp	r1, #0
    17c8:	d19e      	bne.n	1708 <bt_init+0x300>
		BT_ERR("ACL BR/EDR buffers not initialized");
    17ca:	4b21      	ldr	r3, [pc, #132]	; (1850 <bt_init+0x448>)
    17cc:	9306      	str	r3, [sp, #24]
    17ce:	481f      	ldr	r0, [pc, #124]	; (184c <bt_init+0x444>)
    17d0:	2302      	movs	r3, #2
    17d2:	aa05      	add	r2, sp, #20
    17d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    17d8:	9301      	str	r3, [sp, #4]
    17da:	9305      	str	r3, [sp, #20]
		return -EIO;
    17dc:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    17e0:	f023 fa2e 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	if (err) {
    17e4:	e69b      	b.n	151e <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    17e6:	481b      	ldr	r0, [pc, #108]	; (1854 <bt_init+0x44c>)
    17e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    17ec:	e7a0      	b.n	1730 <bt_init+0x328>
	net_buf_unref(rsp);
    17ee:	9800      	ldr	r0, [sp, #0]
    17f0:	f01b fbba 	bl	1cf68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    17f4:	4621      	mov	r1, r4
    17f6:	466a      	mov	r2, sp
    17f8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    17fc:	f008 fab4 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    1800:	4604      	mov	r4, r0
    1802:	b108      	cbz	r0, 1808 <bt_init+0x400>
		BT_WARN("Failed to read supported vendor commands");
    1804:	4b14      	ldr	r3, [pc, #80]	; (1858 <bt_init+0x450>)
    1806:	e7a9      	b.n	175c <bt_init+0x354>
	rp.cmds = (void *)rsp->data;
    1808:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    180a:	4814      	ldr	r0, [pc, #80]	; (185c <bt_init+0x454>)
    180c:	6899      	ldr	r1, [r3, #8]
    180e:	2202      	movs	r2, #2
    1810:	3101      	adds	r1, #1
    1812:	f023 f8c4 	bl	2499e <memcpy>
	net_buf_unref(rsp);
    1816:	9800      	ldr	r0, [sp, #0]
    1818:	f01b fba6 	bl	1cf68 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    181c:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    1820:	075b      	lsls	r3, r3, #29
    1822:	d5a5      	bpl.n	1770 <bt_init+0x368>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1824:	466a      	mov	r2, sp
    1826:	4621      	mov	r1, r4
    1828:	f64f 4003 	movw	r0, #64515	; 0xfc03
    182c:	f008 fa9c 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    1830:	b1c0      	cbz	r0, 1864 <bt_init+0x45c>
			BT_WARN("Failed to read supported vendor features");
    1832:	4b0b      	ldr	r3, [pc, #44]	; (1860 <bt_init+0x458>)
    1834:	e792      	b.n	175c <bt_init+0x354>
    1836:	bf00      	nop
    1838:	02008890 	.word	0x02008890
    183c:	20008000 	.word	0x20008000
    1840:	200000d0 	.word	0x200000d0
    1844:	20000100 	.word	0x20000100
    1848:	0002b559 	.word	0x0002b559
    184c:	00028970 	.word	0x00028970
    1850:	0002b536 	.word	0x0002b536
    1854:	02008810 	.word	0x02008810
    1858:	0002b57d 	.word	0x0002b57d
    185c:	200000b9 	.word	0x200000b9
    1860:	0002b5a6 	.word	0x0002b5a6
		rp.feat = (void *)rsp->data;
    1864:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    1866:	4805      	ldr	r0, [pc, #20]	; (187c <bt_init+0x474>)
    1868:	6899      	ldr	r1, [r3, #8]
    186a:	2201      	movs	r2, #1
    186c:	4411      	add	r1, r2
    186e:	f023 f896 	bl	2499e <memcpy>
		net_buf_unref(rsp);
    1872:	9800      	ldr	r0, [sp, #0]
    1874:	f01b fb78 	bl	1cf68 <net_buf_unref>
    1878:	e77a      	b.n	1770 <bt_init+0x368>
    187a:	bf00      	nop
    187c:	200000b8 	.word	0x200000b8

00001880 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1880:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    1882:	4c19      	ldr	r4, [pc, #100]	; (18e8 <ll_scan_params_set+0x68>)
{
    1884:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1888:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    188c:	f01c 0501 	ands.w	r5, ip, #1
    1890:	d122      	bne.n	18d8 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    1892:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    1896:	0140      	lsls	r0, r0, #5
    1898:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    189c:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    189e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    18a2:	f00e 0e18 	and.w	lr, lr, #24
    18a6:	f000 0020 	and.w	r0, r0, #32
    18aa:	ea40 000e 	orr.w	r0, r0, lr
    18ae:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    18b2:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18b4:	480d      	ldr	r0, [pc, #52]	; (18ec <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    18b6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18ba:	fba2 0100 	umull	r0, r1, r2, r0
    18be:	2391      	movs	r3, #145	; 0x91
    18c0:	fb03 1102 	mla	r1, r3, r2, r1
    18c4:	a306      	add	r3, pc, #24	; (adr r3, 18e0 <ll_scan_params_set+0x60>)
    18c6:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    18ca:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18ce:	f7ff fc17 	bl	1100 <__aeabi_uldivmod>
    18d2:	6420      	str	r0, [r4, #64]	; 0x40
}
    18d4:	4628      	mov	r0, r5
    18d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    18d8:	250c      	movs	r5, #12
}
    18da:	4628      	mov	r0, r5
    18dc:	bd38      	pop	{r3, r4, r5, pc}
    18de:	bf00      	nop
    18e0:	1afd498d 	.word	0x1afd498d
    18e4:	00000007 	.word	0x00000007
    18e8:	20002a50 	.word	0x20002a50
    18ec:	84e72a00 	.word	0x84e72a00

000018f0 <ull_scan_params_set>:
{
    18f0:	b510      	push	{r4, lr}
    18f2:	f89d c008 	ldrb.w	ip, [sp, #8]
    18f6:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    18f8:	0149      	lsls	r1, r1, #5
    18fa:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    18fe:	f000 0018 	and.w	r0, r0, #24
    1902:	f001 0c20 	and.w	ip, r1, #32
    1906:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1908:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    190a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    190e:	480c      	ldr	r0, [pc, #48]	; (1940 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1910:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1914:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1918:	2291      	movs	r2, #145	; 0x91
    191a:	fba3 0100 	umull	r0, r1, r3, r0
    191e:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1922:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1926:	a304      	add	r3, pc, #16	; (adr r3, 1938 <ull_scan_params_set+0x48>)
    1928:	e9d3 2300 	ldrd	r2, r3, [r3]
    192c:	f7ff fbe8 	bl	1100 <__aeabi_uldivmod>
    1930:	6260      	str	r0, [r4, #36]	; 0x24
}
    1932:	bd10      	pop	{r4, pc}
    1934:	f3af 8000 	nop.w
    1938:	1afd498d 	.word	0x1afd498d
    193c:	00000007 	.word	0x00000007
    1940:	84e72a00 	.word	0x84e72a00
    1944:	00000000 	.word	0x00000000

00001948 <ull_scan_enable>:
{
    1948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    194c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    194e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1952:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1956:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    195a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    195e:	f360 1386 	bfi	r3, r0, #6, #1
{
    1962:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1964:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1968:	f010 ff9e 	bl	128a8 <ll_addr_read>
	lll->chan = 0U;
    196c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1970:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1972:	4849      	ldr	r0, [pc, #292]	; (1a98 <ull_scan_enable+0x150>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1974:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1976:	f002 0279 	and.w	r2, r2, #121	; 0x79
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
    197a:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    197c:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1980:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1984:	2291      	movs	r2, #145	; 0x91
    1986:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    198a:	e9c4 5505 	strd	r5, r5, [r4, #20]
    198e:	a340      	add	r3, pc, #256	; (adr r3, 1a90 <ull_scan_enable+0x148>)
    1990:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    1994:	7025      	strb	r5, [r4, #0]
    1996:	f7ff fbb3 	bl	1100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    199a:	2331      	movs	r3, #49	; 0x31
    199c:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    19a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    19a2:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    19a4:	3309      	adds	r3, #9
	    (ticks_interval -
    19a6:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    19aa:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    19ac:	bf32      	itee	cc
    19ae:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    19b0:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    19b2:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    19b4:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    19b6:	f010 ff43 	bl	12840 <ticker_ticks_now_get>
	if (!lll->conn) {
    19ba:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    19bc:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    19be:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    19c2:	2b00      	cmp	r3, #0
    19c4:	d04b      	beq.n	1a5e <ull_scan_enable+0x116>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    19c6:	4d35      	ldr	r5, [pc, #212]	; (1a9c <ull_scan_enable+0x154>)
    19c8:	4b35      	ldr	r3, [pc, #212]	; (1aa0 <ull_scan_enable+0x158>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    19ca:	f8cd 8020 	str.w	r8, [sp, #32]
    19ce:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    19d0:	1b65      	subs	r5, r4, r5
    19d2:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    19d6:	4830      	ldr	r0, [pc, #192]	; (1a98 <ull_scan_enable+0x150>)
    19d8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    19da:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    19de:	fba3 0100 	umull	r0, r1, r3, r0
    19e2:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    19e4:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    19e8:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    19ec:	6923      	ldr	r3, [r4, #16]
    19ee:	9304      	str	r3, [sp, #16]
    19f0:	4b2c      	ldr	r3, [pc, #176]	; (1aa4 <ull_scan_enable+0x15c>)
    19f2:	9307      	str	r3, [sp, #28]
    19f4:	4b2c      	ldr	r3, [pc, #176]	; (1aa8 <ull_scan_enable+0x160>)
    19f6:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    19f8:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    19fc:	a324      	add	r3, pc, #144	; (adr r3, 1a90 <ull_scan_enable+0x148>)
    19fe:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1a02:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1a06:	f7ff fb7b 	bl	1100 <__aeabi_uldivmod>
    1a0a:	4610      	mov	r0, r2
    1a0c:	4619      	mov	r1, r3
    1a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a12:	2300      	movs	r3, #0
    1a14:	f7ff fb74 	bl	1100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1a18:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a1a:	444d      	add	r5, r9
    1a1c:	b2ed      	uxtb	r5, r5
    1a1e:	462a      	mov	r2, r5
    1a20:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1a24:	463b      	mov	r3, r7
    1a26:	2103      	movs	r1, #3
    1a28:	f8cd a000 	str.w	sl, [sp]
    1a2c:	4650      	mov	r0, sl
    1a2e:	f010 fddd 	bl	125ec <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1a32:	4641      	mov	r1, r8
    1a34:	f013 fa56 	bl	14ee4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1a38:	4605      	mov	r5, r0
    1a3a:	b960      	cbnz	r0, 1a56 <ull_scan_enable+0x10e>
	scan->is_enabled = 1U;
    1a3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1a40:	f043 0301 	orr.w	r3, r3, #1
		ull_filter_adv_scan_state_cb(BIT(1));
    1a44:	4648      	mov	r0, r9
	scan->is_enabled = 1U;
    1a46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(BIT(1));
    1a4a:	f018 f837 	bl	19abc <ull_filter_adv_scan_state_cb>
	return 0;
    1a4e:	4628      	mov	r0, r5
}
    1a50:	b00c      	add	sp, #48	; 0x30
    1a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1a56:	200c      	movs	r0, #12
}
    1a58:	b00c      	add	sp, #48	; 0x30
    1a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1a5e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1a62:	6921      	ldr	r1, [r4, #16]
    1a64:	4643      	mov	r3, r8
    1a66:	aa0a      	add	r2, sp, #40	; 0x28
    1a68:	2003      	movs	r0, #3
    1a6a:	f002 f8fd 	bl	3c68 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a70:	2900      	cmp	r1, #0
    1a72:	d0a8      	beq.n	19c6 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1a74:	480d      	ldr	r0, [pc, #52]	; (1aac <ull_scan_enable+0x164>)
    1a76:	a306      	add	r3, pc, #24	; (adr r3, 1a90 <ull_scan_enable+0x148>)
    1a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a7c:	fba1 0100 	umull	r0, r1, r1, r0
    1a80:	f7ff fb3e 	bl	1100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1a84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1a86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1a8a:	4407      	add	r7, r0
    1a8c:	e79b      	b.n	19c6 <ull_scan_enable+0x7e>
    1a8e:	bf00      	nop
    1a90:	1afd498d 	.word	0x1afd498d
    1a94:	00000007 	.word	0x00000007
    1a98:	84e72a00 	.word	0x84e72a00
    1a9c:	20002a50 	.word	0x20002a50
    1aa0:	38e38e39 	.word	0x38e38e39
    1aa4:	00014501 	.word	0x00014501
    1aa8:	000156dd 	.word	0x000156dd
    1aac:	3b9aca00 	.word	0x3b9aca00

00001ab0 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1ab4:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
    1ab8:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
    1abc:	45e6      	cmp	lr, ip
{
    1abe:	b08b      	sub	sp, #44	; 0x2c
    1ac0:	4604      	mov	r4, r0
    1ac2:	460e      	mov	r6, r1
    1ac4:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1ac6:	d02e      	beq.n	1b26 <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1ac8:	ebac 0c0e 	sub.w	ip, ip, lr
    1acc:	f00c 0c03 	and.w	ip, ip, #3
    1ad0:	f1bc 0f02 	cmp.w	ip, #2
    1ad4:	d00c      	beq.n	1af0 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    1ad6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1ada:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1ade:	1a9b      	subs	r3, r3, r2
    1ae0:	b2db      	uxtb	r3, r3
    1ae2:	2b01      	cmp	r3, #1
    1ae4:	f000 817a 	beq.w	1ddc <ull_conn_llcp+0x32c>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1ae8:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
    1aea:	b00b      	add	sp, #44	; 0x2c
    1aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1af0:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    1af4:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1af8:	429a      	cmp	r2, r3
    1afa:	d006      	beq.n	1b0a <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
    1afc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
    1b00:	f003 0306 	and.w	r3, r3, #6
    1b04:	2b04      	cmp	r3, #4
    1b06:	f000 83a2 	beq.w	224e <ull_conn_llcp+0x79e>
		switch (conn->llcp_type) {
    1b0a:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
    1b0e:	1e7b      	subs	r3, r7, #1
    1b10:	2b05      	cmp	r3, #5
    1b12:	f200 834b 	bhi.w	21ac <ull_conn_llcp+0x6fc>
    1b16:	e8df f013 	tbh	[pc, r3, lsl #1]
    1b1a:	001f      	.short	0x001f
    1b1c:	0295031f 	.word	0x0295031f
    1b20:	025a0349 	.word	0x025a0349
    1b24:	01cb      	.short	0x01cb
	    !conn->llcp_enc.pause_rx) {
    1b26:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
    1b2a:	f013 0801 	ands.w	r8, r3, #1
    1b2e:	d1d2      	bne.n	1ad6 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1b30:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
    1b34:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    1b38:	428a      	cmp	r2, r1
    1b3a:	f000 8345 	beq.w	21c8 <ull_conn_llcp+0x718>
			conn->llcp_type = LLCP_CONN_UPD;
    1b3e:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1b40:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
    1b44:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1b48:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
    1b4c:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1b50:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
    1b52:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1b56:	d1d1      	bne.n	1afc <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1b58:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1b5a:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    1b5c:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1b5e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1b62:	b2bf      	uxth	r7, r7
    1b64:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1b66:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1b6a:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1b6c:	f040 83b5 	bne.w	22da <ull_conn_llcp+0x82a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1b70:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
    1b74:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1b76:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1b78:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
    1b7c:	d4ab      	bmi.n	1ad6 <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1b7e:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    1b82:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
    1b86:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    1b8a:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1b8e:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1b90:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    1b94:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1b98:	d009      	beq.n	1bae <ull_conn_llcp+0xfe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1b9a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1b9e:	f003 030f 	and.w	r3, r3, #15
    1ba2:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1ba4:	bf04      	itt	eq
    1ba6:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1baa:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	if (conn == conn_upd_curr) {
    1bae:	4bb4      	ldr	r3, [pc, #720]	; (1e80 <ull_conn_llcp+0x3d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1bb0:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
	if (conn == conn_upd_curr) {
    1bb4:	681a      	ldr	r2, [r3, #0]
    1bb6:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1bb8:	bf04      	itt	eq
    1bba:	2200      	moveq	r2, #0
    1bbc:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1bbe:	f1b8 0f00 	cmp.w	r8, #0
    1bc2:	f000 8702 	beq.w	29ca <ull_conn_llcp+0xf1a>
    1bc6:	f8d8 0000 	ldr.w	r0, [r8]
    1bca:	2800      	cmp	r0, #0
    1bcc:	f000 86fd 	beq.w	29ca <ull_conn_llcp+0xf1a>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1bd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    1bd2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
		conn->llcp_rx = rx->hdr.link->mem;
    1bd6:	6841      	ldr	r1, [r0, #4]
    1bd8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
    1bdc:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    1bde:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		if ((conn->llcp_cu.interval != lll->interval) ||
    1be2:	f000 870d 	beq.w	2a00 <ull_conn_llcp+0xf50>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1be6:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1bea:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1bee:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1bf2:	2318      	movs	r3, #24
    1bf4:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
    1bf8:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1bfa:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
    1bfe:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1c02:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
    1c06:	f888 301c 	strb.w	r3, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1c0a:	4641      	mov	r1, r8
    1c0c:	f013 f8f2 	bl	14df4 <ll_rx_put>
		ll_rx_sched();
    1c10:	f013 f8fa 	bl	14e08 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1c14:	68a3      	ldr	r3, [r4, #8]
    1c16:	2b00      	cmp	r3, #0
    1c18:	da09      	bge.n	1c2e <ull_conn_llcp+0x17e>
			uint32_t ticks_prepare_to_start =
    1c1a:	68e0      	ldr	r0, [r4, #12]
    1c1c:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1c22:	4290      	cmp	r0, r2
    1c24:	bf2c      	ite	cs
    1c26:	1831      	addcs	r1, r6, r0
    1c28:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1c2a:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1c2c:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1c30:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
    1c34:	fb13 f309 	smulbb	r3, r3, r9
    1c38:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1c3a:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    1c3e:	fb18 f201 	smulbb	r2, r8, r1
    1c42:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1c44:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1c46:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    1c4a:	f080 86ac 	bcs.w	29a6 <ull_conn_llcp+0xef6>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1c4e:	1ad3      	subs	r3, r2, r3
    1c50:	498c      	ldr	r1, [pc, #560]	; (1e84 <ull_conn_llcp+0x3d4>)
    1c52:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1c56:	fb02 f303 	mul.w	r3, r2, r3
    1c5a:	fba3 0101 	umull	r0, r1, r3, r1
    1c5e:	a386      	add	r3, pc, #536	; (adr r3, 1e78 <ull_conn_llcp+0x3c8>)
    1c60:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c64:	f7ff fa4c 	bl	1100 <__aeabi_uldivmod>
    1c68:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1c6c:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1c6e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1c70:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
    1c72:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1c76:	1bef      	subs	r7, r5, r7
    1c78:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
    1c7a:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
    1c7e:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1c80:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1c82:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
    1c86:	f2c0 879a 	blt.w	2bbe <ull_conn_llcp+0x110e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1c8a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    1c8e:	487d      	ldr	r0, [pc, #500]	; (1e84 <ull_conn_llcp+0x3d4>)
    1c90:	a379      	add	r3, pc, #484	; (adr r3, 1e78 <ull_conn_llcp+0x3c8>)
    1c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c96:	fba1 0100 	umull	r0, r1, r1, r0
    1c9a:	f7ff fa31 	bl	1100 <__aeabi_uldivmod>
    1c9e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1ca2:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ca4:	4978      	ldr	r1, [pc, #480]	; (1e88 <ull_conn_llcp+0x3d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ca6:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
    1caa:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1cae:	4b77      	ldr	r3, [pc, #476]	; (1e8c <ull_conn_llcp+0x3dc>)
		lll->interval = conn->llcp_cu.interval;
    1cb0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1cb4:	4429      	add	r1, r5
    1cb6:	fbb1 f1f5 	udiv	r1, r1, r5
    1cba:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1cbe:	f242 7110 	movw	r1, #10000	; 0x2710
    1cc2:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1cc6:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1cc8:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1cca:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ccc:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1cd0:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1cd4:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1cd8:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1cda:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
    1cdc:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1cde:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1ce2:	dd04      	ble.n	1cee <ull_conn_llcp+0x23e>
    1ce4:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1ce8:	30fa      	adds	r0, #250	; 0xfa
    1cea:	4402      	add	r2, r0
    1cec:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1cee:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1cf2:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
    1cf6:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    1cf8:	bf44      	itt	mi
    1cfa:	2300      	movmi	r3, #0
    1cfc:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1d00:	2102      	movs	r1, #2
    1d02:	2001      	movs	r0, #1
    1d04:	f01a fe74 	bl	1c9f0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1d08:	2200      	movs	r2, #0
    1d0a:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1d0c:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1d0e:	2001      	movs	r0, #1
    1d10:	f00f fa5c 	bl	111cc <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1d14:	495e      	ldr	r1, [pc, #376]	; (1e90 <ull_conn_llcp+0x3e0>)
    1d16:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    1d1a:	4620      	mov	r0, r4
    1d1c:	f00f f9e6 	bl	110ec <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1d20:	f100 0803 	add.w	r8, r0, #3
    1d24:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1d28:	4b5a      	ldr	r3, [pc, #360]	; (1e94 <ull_conn_llcp+0x3e4>)
    1d2a:	9400      	str	r4, [sp, #0]
    1d2c:	4642      	mov	r2, r8
    1d2e:	2101      	movs	r1, #1
    1d30:	2000      	movs	r0, #0
    1d32:	f010 fce5 	bl	12700 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1d36:	f030 0302 	bics.w	r3, r0, #2
    1d3a:	d00c      	beq.n	1d56 <ull_conn_llcp+0x2a6>
    1d3c:	4a56      	ldr	r2, [pc, #344]	; (1e98 <ull_conn_llcp+0x3e8>)
    1d3e:	4957      	ldr	r1, [pc, #348]	; (1e9c <ull_conn_llcp+0x3ec>)
    1d40:	4857      	ldr	r0, [pc, #348]	; (1ea0 <ull_conn_llcp+0x3f0>)
    1d42:	f640 43cb 	movw	r3, #3275	; 0xccb
    1d46:	f020 fcdd 	bl	22704 <printk>
    1d4a:	4040      	eors	r0, r0
    1d4c:	f380 8811 	msr	BASEPRI, r0
    1d50:	f04f 0003 	mov.w	r0, #3
    1d54:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d56:	9408      	str	r4, [sp, #32]
    1d58:	9406      	str	r4, [sp, #24]
    1d5a:	6923      	ldr	r3, [r4, #16]
    1d5c:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1d5e:	4c49      	ldr	r4, [pc, #292]	; (1e84 <ull_conn_llcp+0x3d4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d60:	4b50      	ldr	r3, [pc, #320]	; (1ea4 <ull_conn_llcp+0x3f4>)
    1d62:	9307      	str	r3, [sp, #28]
    1d64:	4b50      	ldr	r3, [pc, #320]	; (1ea8 <ull_conn_llcp+0x3f8>)
    1d66:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1d68:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1d70:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1d72:	4628      	mov	r0, r5
    1d74:	a340      	add	r3, pc, #256	; (adr r3, 1e78 <ull_conn_llcp+0x3c8>)
    1d76:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d7a:	4621      	mov	r1, r4
    1d7c:	f7ff f9c0 	bl	1100 <__aeabi_uldivmod>
    1d80:	4610      	mov	r0, r2
    1d82:	4619      	mov	r1, r3
    1d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1d88:	2300      	movs	r3, #0
    1d8a:	f7ff f9b9 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1d8e:	a33a      	add	r3, pc, #232	; (adr r3, 1e78 <ull_conn_llcp+0x3c8>)
    1d90:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d94:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1d96:	4621      	mov	r1, r4
    1d98:	4628      	mov	r0, r5
    1d9a:	f7ff f9b1 	bl	1100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d9e:	4633      	mov	r3, r6
    1da0:	e9cd 7000 	strd	r7, r0, [sp]
    1da4:	4642      	mov	r2, r8
    1da6:	2101      	movs	r1, #1
    1da8:	2000      	movs	r0, #0
    1daa:	f010 fc1f 	bl	125ec <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1dae:	f030 0302 	bics.w	r3, r0, #2
    1db2:	d00c      	beq.n	1dce <ull_conn_llcp+0x31e>
    1db4:	4a38      	ldr	r2, [pc, #224]	; (1e98 <ull_conn_llcp+0x3e8>)
    1db6:	4939      	ldr	r1, [pc, #228]	; (1e9c <ull_conn_llcp+0x3ec>)
    1db8:	4839      	ldr	r0, [pc, #228]	; (1ea0 <ull_conn_llcp+0x3f0>)
    1dba:	f640 43e5 	movw	r3, #3301	; 0xce5
    1dbe:	f020 fca1 	bl	22704 <printk>
    1dc2:	4040      	eors	r0, r0
    1dc4:	f380 8811 	msr	BASEPRI, r0
    1dc8:	f04f 0003 	mov.w	r0, #3
    1dcc:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1dce:	f1b9 0f00 	cmp.w	r9, #0
    1dd2:	f040 86d5 	bne.w	2b80 <ull_conn_llcp+0x10d0>
				return -ECANCELED;
    1dd6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1dda:	e686      	b.n	1aea <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ddc:	4833      	ldr	r0, [pc, #204]	; (1eac <ull_conn_llcp+0x3fc>)
    1dde:	f00f f94f 	bl	11080 <mem_acquire>
		if (tx) {
    1de2:	2800      	cmp	r0, #0
    1de4:	d03a      	beq.n	1e5c <ull_conn_llcp+0x3ac>
			conn->llcp_terminate.ack--;
    1de6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    1dea:	3b01      	subs	r3, #1
    1dec:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1df0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1df2:	2202      	movs	r2, #2
    1df4:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1df6:	f043 0303 	orr.w	r3, r3, #3
    1dfa:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1dfc:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    1dfe:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
    1e02:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
    1e06:	7202      	strb	r2, [r0, #8]
	if (
    1e08:	b1c3      	cbz	r3, 1e3c <ull_conn_llcp+0x38c>
	    !conn->llcp_enc.pause_tx &&
    1e0a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1e0e:	0791      	lsls	r1, r2, #30
    1e10:	d414      	bmi.n	1e3c <ull_conn_llcp+0x38c>
	    !conn->llcp_phy.pause_tx &&
    1e12:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1e16:	07d2      	lsls	r2, r2, #31
    1e18:	d410      	bmi.n	1e3c <ull_conn_llcp+0x38c>
		if (conn->tx_head == conn->tx_data) {
    1e1a:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1e1e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1e20:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1e24:	f000 86e1 	beq.w	2bea <ull_conn_llcp+0x113a>
		} else if (!conn->tx_ctrl) {
    1e28:	b96a      	cbnz	r2, 1e46 <ull_conn_llcp+0x396>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1e2a:	791a      	ldrb	r2, [r3, #4]
    1e2c:	f002 0203 	and.w	r2, r2, #3
    1e30:	2a03      	cmp	r2, #3
    1e32:	f001 8091 	beq.w	2f58 <ull_conn_llcp+0x14a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1e36:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    1e3a:	e006      	b.n	1e4a <ull_conn_llcp+0x39a>
		if (!conn->tx_ctrl) {
    1e3c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1e40:	2a00      	cmp	r2, #0
    1e42:	f000 8413 	beq.w	266c <ull_conn_llcp+0xbbc>
	tx->next = conn->tx_ctrl_last->next;
    1e46:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1e4a:	681a      	ldr	r2, [r3, #0]
    1e4c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1e4e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    1e50:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    1e52:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1e56:	2b00      	cmp	r3, #0
    1e58:	f000 81fd 	beq.w	2256 <ull_conn_llcp+0x7a6>
		if (!conn->procedure_expire) {
    1e5c:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    1e60:	2800      	cmp	r0, #0
    1e62:	f47f ae41 	bne.w	1ae8 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
    1e66:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
    1e6a:	2b01      	cmp	r3, #1
    1e6c:	f240 83e6 	bls.w	263c <ull_conn_llcp+0xb8c>
			conn->procedure_expire = conn->supervision_reload;
    1e70:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1e74:	e638      	b.n	1ae8 <ull_conn_llcp+0x38>
    1e76:	bf00      	nop
    1e78:	1afd498d 	.word	0x1afd498d
    1e7c:	00000007 	.word	0x00000007
    1e80:	20002aac 	.word	0x20002aac
    1e84:	3b9aca00 	.word	0x3b9aca00
    1e88:	026259ff 	.word	0x026259ff
    1e8c:	01c9c37f 	.word	0x01c9c37f
    1e90:	200019a0 	.word	0x200019a0
    1e94:	00015dfd 	.word	0x00015dfd
    1e98:	0002978c 	.word	0x0002978c
    1e9c:	000298a8 	.word	0x000298a8
    1ea0:	00029220 	.word	0x00029220
    1ea4:	00015da5 	.word	0x00015da5
    1ea8:	0001897d 	.word	0x0001897d
    1eac:	20002b40 	.word	0x20002b40
			event_counter = lll->event_counter +
    1eb0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1eb2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1eb4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    1eb8:	440a      	add	r2, r1
    1eba:	442a      	add	r2, r5
    1ebc:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1ebe:	07da      	lsls	r2, r3, #31
    1ec0:	4619      	mov	r1, r3
    1ec2:	f100 826f 	bmi.w	23a4 <ull_conn_llcp+0x8f4>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1ec6:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    1eca:	1aad      	subs	r5, r5, r2
    1ecc:	0428      	lsls	r0, r5, #16
    1ece:	f53f ae02 	bmi.w	1ad6 <ull_conn_llcp+0x26>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
    1ed2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
    1ed6:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
    1eda:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1ede:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
    1ee2:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1ee6:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
    1eea:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
    1eee:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    1ef2:	f040 857b 	bne.w	29ec <ull_conn_llcp+0xf3c>
		uint16_t eff_tx_time = lll->max_tx_time;
    1ef6:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1efa:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    1efe:	d008      	beq.n	1f12 <ull_conn_llcp+0x462>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1f00:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    1f04:	095b      	lsrs	r3, r3, #5
    1f06:	f363 0202 	bfi	r2, r3, #0, #3
    1f0a:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1f0e:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1f12:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    1f16:	2d00      	cmp	r5, #0
    1f18:	f000 8590 	beq.w	2a3c <ull_conn_llcp+0xf8c>
    1f1c:	6828      	ldr	r0, [r5, #0]
    1f1e:	2800      	cmp	r0, #0
    1f20:	f000 858c 	beq.w	2a3c <ull_conn_llcp+0xf8c>
		conn->llcp_rx = rx->hdr.link->mem;
    1f24:	6843      	ldr	r3, [r0, #4]

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
		    (lll->phy_rx == old_rx)) {
    1f26:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
    1f2a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1f2e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    1f32:	0789      	lsls	r1, r1, #30
    1f34:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    1f38:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1f3c:	d402      	bmi.n	1f44 <ull_conn_llcp+0x494>
    1f3e:	4599      	cmp	r9, r3
    1f40:	f000 866f 	beq.w	2c22 <ull_conn_llcp+0x1172>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1f44:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		upd = (void *)rx->pdu;
		upd->status = 0U;
		upd->tx = lll->phy_tx;
    1f46:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1f48:	231c      	movs	r3, #28
    1f4a:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
    1f4c:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
    1f4e:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
    1f50:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
    1f52:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1f54:	4629      	mov	r1, r5
    1f56:	f012 ff4d 	bl	14df4 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    1f5a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    1f5e:	2d00      	cmp	r5, #0
    1f60:	f000 85fa 	beq.w	2b58 <ull_conn_llcp+0x10a8>
    1f64:	6828      	ldr	r0, [r5, #0]
    1f66:	2800      	cmp	r0, #0
    1f68:	f000 85f6 	beq.w	2b58 <ull_conn_llcp+0x10a8>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1f6c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
    1f70:	6842      	ldr	r2, [r0, #4]
    1f72:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
    1f76:	42b3      	cmp	r3, r6
    1f78:	d30a      	bcc.n	1f90 <ull_conn_llcp+0x4e0>
    1f7a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1f7e:	d807      	bhi.n	1f90 <ull_conn_llcp+0x4e0>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1f80:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
    1f84:	42bb      	cmp	r3, r7
    1f86:	d303      	bcc.n	1f90 <ull_conn_llcp+0x4e0>
		    (eff_rx_time <= lll->max_rx_time) &&
    1f88:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1f8c:	f241 8012 	bls.w	2fb4 <ull_conn_llcp+0x1504>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    1f90:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
    1f94:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1f98:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1f9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1f9c:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f9e:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1fa2:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1fa6:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1fa8:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1fac:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1fae:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1fb0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    1fb4:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1fb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    1fb8:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1fba:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1fbc:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1fbe:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1fc0:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1fc2:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1fc4:	f012 ff16 	bl	14df4 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1fc8:	f012 ff1e 	bl	14e08 <ll_rx_sched>
    1fcc:	e583      	b.n	1ad6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1fce:	48cb      	ldr	r0, [pc, #812]	; (22fc <ull_conn_llcp+0x84c>)
    1fd0:	f00f f856 	bl	11080 <mem_acquire>
	if (tx) {
    1fd4:	2800      	cmp	r0, #0
    1fd6:	f43f ad7e 	beq.w	1ad6 <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
    1fda:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    1fde:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1fe2:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fe4:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1fe6:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1fe8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fec:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1ff0:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ff2:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1ff4:	71c1      	strb	r1, [r0, #7]
	if (
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	f000 8341 	beq.w	267e <ull_conn_llcp+0xbce>
	    !conn->llcp_enc.pause_tx &&
    1ffc:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2000:	0795      	lsls	r5, r2, #30
    2002:	f100 833c 	bmi.w	267e <ull_conn_llcp+0xbce>
	    !conn->llcp_phy.pause_tx &&
    2006:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    200a:	07d1      	lsls	r1, r2, #31
    200c:	f100 8337 	bmi.w	267e <ull_conn_llcp+0xbce>
		if (conn->tx_head == conn->tx_data) {
    2010:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2014:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2016:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    201a:	f000 8754 	beq.w	2ec6 <ull_conn_llcp+0x1416>
		} else if (!conn->tx_ctrl) {
    201e:	2a00      	cmp	r2, #0
    2020:	f000 87dd 	beq.w	2fde <ull_conn_llcp+0x152e>
	tx->next = conn->tx_ctrl_last->next;
    2024:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2028:	681a      	ldr	r2, [r3, #0]
    202a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    202c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    202e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2030:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2034:	2b00      	cmp	r3, #0
    2036:	f000 859f 	beq.w	2b78 <ull_conn_llcp+0x10c8>
		conn->procedure_expire = conn->procedure_reload;
    203a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    203e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2042:	e548      	b.n	1ad6 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    2044:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    2048:	f013 0503 	ands.w	r5, r3, #3
    204c:	f47f ad43 	bne.w	1ad6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2050:	48aa      	ldr	r0, [pc, #680]	; (22fc <ull_conn_llcp+0x84c>)
    2052:	f00f f815 	bl	11080 <mem_acquire>
	if (!tx) {
    2056:	4606      	mov	r6, r0
    2058:	2800      	cmp	r0, #0
    205a:	f43f ad3c 	beq.w	1ad6 <ull_conn_llcp+0x26>
	if (!lll->role) {
    205e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2062:	2b00      	cmp	r3, #0
    2064:	f280 8316 	bge.w	2694 <ull_conn_llcp+0xbe4>
	else if (!lll->enc_rx) {
    2068:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    206c:	0719      	lsls	r1, r3, #28
    206e:	f100 85f5 	bmi.w	2c5c <ull_conn_llcp+0x11ac>
		if (conn->llcp.encryption.error_code) {
    2072:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
    2076:	2d00      	cmp	r5, #0
    2078:	f040 86b0 	bne.w	2ddc <ull_conn_llcp+0x132c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    207c:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    2080:	463b      	mov	r3, r7
    2082:	462a      	mov	r2, r5
    2084:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    2088:	f204 1049 	addw	r0, r4, #329	; 0x149
    208c:	f019 ffe6 	bl	1c05c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2090:	2210      	movs	r2, #16
    2092:	4639      	mov	r1, r7
    2094:	f104 0080 	add.w	r0, r4, #128	; 0x80
    2098:	f022 fc81 	bl	2499e <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    209c:	2208      	movs	r2, #8
    209e:	f104 0178 	add.w	r1, r4, #120	; 0x78
    20a2:	f104 0099 	add.w	r0, r4, #153	; 0x99
    20a6:	f022 fc7a 	bl	2499e <memcpy>
			lll->ccm_rx.direction = 1U;
    20aa:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    20ae:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
    20b2:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    20b6:	f043 0301 	orr.w	r3, r3, #1
    20ba:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
    20be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    20c2:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
    20c6:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    20ca:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
    20cc:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
    20d0:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    20d4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
    20d8:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
    20dc:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    20e0:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    20e4:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    20e8:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    20ec:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    20f0:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20f4:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    20f6:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    20f8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20fc:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    2100:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2102:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2104:	71f1      	strb	r1, [r6, #7]
	if (
    2106:	2b00      	cmp	r3, #0
    2108:	f000 830e 	beq.w	2728 <ull_conn_llcp+0xc78>
	    !conn->llcp_enc.pause_tx &&
    210c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2110:	0792      	lsls	r2, r2, #30
    2112:	f100 8309 	bmi.w	2728 <ull_conn_llcp+0xc78>
	    !conn->llcp_phy.pause_tx &&
    2116:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    211a:	07d7      	lsls	r7, r2, #31
    211c:	f100 8304 	bmi.w	2728 <ull_conn_llcp+0xc78>
		if (conn->tx_head == conn->tx_data) {
    2120:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2124:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2126:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    212a:	f000 86e5 	beq.w	2ef8 <ull_conn_llcp+0x1448>
		} else if (!conn->tx_ctrl) {
    212e:	2a00      	cmp	r2, #0
    2130:	f000 876c 	beq.w	300c <ull_conn_llcp+0x155c>
	tx->next = conn->tx_ctrl_last->next;
    2134:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2138:	681a      	ldr	r2, [r3, #0]
    213a:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    213c:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    213e:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    2140:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2144:	2b00      	cmp	r3, #0
    2146:	f000 854c 	beq.w	2be2 <ull_conn_llcp+0x1132>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    214a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    214e:	f043 0303 	orr.w	r3, r3, #3
    2152:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    2156:	e4be      	b.n	1ad6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    2158:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    215a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    215c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    2160:	440a      	add	r2, r1
    2162:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    2164:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    2166:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    2168:	f100 80d0 	bmi.w	230c <ull_conn_llcp+0x85c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    216c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2170:	1aad      	subs	r5, r5, r2
    2172:	0428      	lsls	r0, r5, #16
    2174:	f53f acaf 	bmi.w	1ad6 <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
    2178:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    217c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
    2180:	f104 0534 	add.w	r5, r4, #52	; 0x34
    2184:	2205      	movs	r2, #5
    2186:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    218a:	4628      	mov	r0, r5
    218c:	f022 fc07 	bl	2499e <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    2190:	2105      	movs	r1, #5
    2192:	4628      	mov	r0, r5
    2194:	f00f f94a 	bl	1142c <util_ones_count_get>
		lll->data_chan_count =
    2198:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    219c:	2201      	movs	r2, #1
		lll->data_chan_count =
    219e:	f360 0305 	bfi	r3, r0, #0, #6
    21a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    21a6:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
    21aa:	e494      	b.n	1ad6 <ull_conn_llcp+0x26>
			LL_ASSERT(0);
    21ac:	4a54      	ldr	r2, [pc, #336]	; (2300 <ull_conn_llcp+0x850>)
    21ae:	4955      	ldr	r1, [pc, #340]	; (2304 <ull_conn_llcp+0x854>)
    21b0:	4855      	ldr	r0, [pc, #340]	; (2308 <ull_conn_llcp+0x858>)
    21b2:	f240 43e1 	movw	r3, #1249	; 0x4e1
    21b6:	f020 faa5 	bl	22704 <printk>
    21ba:	4040      	eors	r0, r0
    21bc:	f380 8811 	msr	BASEPRI, r0
    21c0:	f04f 0003 	mov.w	r0, #3
    21c4:	df02      	svc	2
			break;
    21c6:	e486      	b.n	1ad6 <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    21c8:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    21cc:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    21d0:	42ba      	cmp	r2, r7
    21d2:	d143      	bne.n	225c <ull_conn_llcp+0x7ac>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    21d4:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    21d8:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
    21dc:	42ba      	cmp	r2, r7
    21de:	f000 82ae 	beq.w	273e <ull_conn_llcp+0xc8e>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    21e2:	1bd2      	subs	r2, r2, r7
    21e4:	07d0      	lsls	r0, r2, #31
    21e6:	f57f ac76 	bpl.w	1ad6 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    21ea:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    21ee:	07d9      	lsls	r1, r3, #31
    21f0:	f140 85a0 	bpl.w	2d34 <ull_conn_llcp+0x1284>
	} else if (conn->llcp_version.rx) {
    21f4:	0798      	lsls	r0, r3, #30
    21f6:	f140 8598 	bpl.w	2d2a <ull_conn_llcp+0x127a>
		rx = ll_pdu_rx_alloc();
    21fa:	f012 fe29 	bl	14e50 <ll_pdu_rx_alloc>
		if (!rx) {
    21fe:	4601      	mov	r1, r0
    2200:	b300      	cbz	r0, 2244 <ull_conn_llcp+0x794>
		conn->llcp_version.ack = conn->llcp_version.req;
    2202:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    2206:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
    220a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    220c:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    220e:	2303      	movs	r3, #3
    2210:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2212:	7f03      	ldrb	r3, [r0, #28]
    2214:	f043 0303 	orr.w	r3, r3, #3
    2218:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    221a:	2306      	movs	r3, #6
    221c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    221e:	230c      	movs	r3, #12
    2220:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    2222:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    2226:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    222a:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    222e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    2232:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    2236:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    223a:	6808      	ldr	r0, [r1, #0]
    223c:	f012 fdda 	bl	14df4 <ll_rx_put>
	ll_rx_sched();
    2240:	f012 fde2 	bl	14e08 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2244:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2248:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
    224c:	e43c      	b.n	1ac8 <ull_conn_llcp+0x18>
				event_len_prep(conn);
    224e:	4620      	mov	r0, r4
    2250:	f013 fec8 	bl	15fe4 <event_len_prep>
    2254:	e459      	b.n	1b0a <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
    2256:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    225a:	e5ff      	b.n	1e5c <ull_conn_llcp+0x3ac>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    225c:	1bd2      	subs	r2, r2, r7
    225e:	07d1      	lsls	r1, r2, #31
    2260:	f57f ac39 	bpl.w	1ad6 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    2264:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
    2268:	f011 0701 	ands.w	r7, r1, #1
    226c:	f000 840c 	beq.w	2a88 <ull_conn_llcp+0xfd8>
		rx = ll_pdu_rx_alloc();
    2270:	f012 fdee 	bl	14e50 <ll_pdu_rx_alloc>
		if (!rx) {
    2274:	4607      	mov	r7, r0
    2276:	2800      	cmp	r0, #0
    2278:	d0e4      	beq.n	2244 <ull_conn_llcp+0x794>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    227a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    227e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2282:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    2284:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2286:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2288:	f043 0303 	orr.w	r3, r3, #3
    228c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    228e:	2309      	movs	r3, #9
    2290:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    2292:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2294:	2303      	movs	r3, #3
    2296:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    2298:	4641      	mov	r1, r8
    229a:	2208      	movs	r2, #8
    229c:	3020      	adds	r0, #32
    229e:	f022 fb89 	bl	249b4 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    22a2:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
	sys_put_le16(val >> 16, &dst[2]);
    22a6:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    22a8:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    22ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
    22b0:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    22b4:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    22b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    22ba:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    22be:	f3c3 2307 	ubfx	r3, r3, #8, #8
    22c2:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    22c4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    22c8:	0a12      	lsrs	r2, r2, #8
    22ca:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    22ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    22d2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    22d6:	4639      	mov	r1, r7
    22d8:	e7af      	b.n	223a <ull_conn_llcp+0x78a>
		switch (conn->llcp_cu.state) {
    22da:	1e4b      	subs	r3, r1, #1
    22dc:	2b04      	cmp	r3, #4
    22de:	f201 8121 	bhi.w	3524 <ull_conn_llcp+0x1a74>
    22e2:	a101      	add	r1, pc, #4	; (adr r1, 22e8 <ull_conn_llcp+0x838>)
    22e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    22e8:	0000254d 	.word	0x0000254d
    22ec:	0000246d 	.word	0x0000246d
    22f0:	00001ad7 	.word	0x00001ad7
    22f4:	000025c7 	.word	0x000025c7
    22f8:	00002553 	.word	0x00002553
    22fc:	20002b40 	.word	0x20002b40
    2300:	0002978c 	.word	0x0002978c
    2304:	000292b8 	.word	0x000292b8
    2308:	00029220 	.word	0x00029220
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    230c:	48ce      	ldr	r0, [pc, #824]	; (2648 <ull_conn_llcp+0xb98>)
    230e:	f00e feb7 	bl	11080 <mem_acquire>
		if (tx) {
    2312:	4606      	mov	r6, r0
    2314:	2800      	cmp	r0, #0
    2316:	f43f abde 	beq.w	1ad6 <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
    231a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    231c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2320:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    2322:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    2324:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    2328:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
    232a:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
    232e:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2332:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2336:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    2338:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    233a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    233c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    233e:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2340:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    2344:	2205      	movs	r2, #5
    2346:	3008      	adds	r0, #8
    2348:	f022 fb29 	bl	2499e <memcpy>
	    conn->tx_head &&
    234c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2350:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2354:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    2358:	2b00      	cmp	r3, #0
    235a:	f000 841a 	beq.w	2b92 <ull_conn_llcp+0x10e2>
	    !conn->llcp_enc.pause_tx &&
    235e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2362:	0797      	lsls	r7, r2, #30
    2364:	f100 8415 	bmi.w	2b92 <ull_conn_llcp+0x10e2>
	    !conn->llcp_phy.pause_tx &&
    2368:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    236c:	07d5      	lsls	r5, r2, #31
    236e:	f100 8410 	bmi.w	2b92 <ull_conn_llcp+0x10e2>
		if (conn->tx_head == conn->tx_data) {
    2372:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2376:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2378:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    237c:	f000 8638 	beq.w	2ff0 <ull_conn_llcp+0x1540>
		} else if (!conn->tx_ctrl) {
    2380:	2a00      	cmp	r2, #0
    2382:	f000 8725 	beq.w	31d0 <ull_conn_llcp+0x1720>
	tx->next = conn->tx_ctrl_last->next;
    2386:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    238a:	681a      	ldr	r2, [r3, #0]
    238c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    238e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2390:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    2392:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2396:	2b00      	cmp	r3, #0
    2398:	f47f ab9d 	bne.w	1ad6 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    239c:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    23a0:	f7ff bb99 	b.w	1ad6 <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    23a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    23a8:	2200      	movs	r2, #0
    23aa:	f00e fed7 	bl	1115c <memq_peek>
    23ae:	4606      	mov	r6, r0
    23b0:	2800      	cmp	r0, #0
    23b2:	f47f ab90 	bne.w	1ad6 <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
    23b6:	2002      	movs	r0, #2
    23b8:	f012 fd2c 	bl	14e14 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    23bc:	4680      	mov	r8, r0
    23be:	2800      	cmp	r0, #0
    23c0:	f43f ab89 	beq.w	1ad6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    23c4:	48a0      	ldr	r0, [pc, #640]	; (2648 <ull_conn_llcp+0xb98>)
    23c6:	f00e fe5b 	bl	11080 <mem_acquire>
		if (!tx) {
    23ca:	4607      	mov	r7, r0
    23cc:	2800      	cmp	r0, #0
    23ce:	f43f ab82 	beq.w	1ad6 <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
    23d2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    23d6:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    23da:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    23de:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    23e2:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    23e6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
    23ea:	b2db      	uxtb	r3, r3
    23ec:	f040 8592 	bne.w	2f14 <ull_conn_llcp+0x1464>
			conn->llcp_ack = conn->llcp_req;
    23f0:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
    23f4:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
    23f8:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    23fa:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
    23fe:	f100 85b3 	bmi.w	2f68 <ull_conn_llcp+0x14b8>
    2402:	4633      	mov	r3, r6
    2404:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    2406:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    2408:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    240a:	723e      	strb	r6, [r7, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    240c:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->len =
    240e:	717b      	strb	r3, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
    2410:	2218      	movs	r2, #24
	    conn->tx_head &&
    2412:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode =
    2416:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2418:	793a      	ldrb	r2, [r7, #4]
    241a:	f042 0203 	orr.w	r2, r2, #3
    241e:	713a      	strb	r2, [r7, #4]
	if (
    2420:	2b00      	cmp	r3, #0
    2422:	f000 8516 	beq.w	2e52 <ull_conn_llcp+0x13a2>
	    !conn->llcp_enc.pause_tx &&
    2426:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    242a:	0796      	lsls	r6, r2, #30
    242c:	f100 8511 	bmi.w	2e52 <ull_conn_llcp+0x13a2>
	    !conn->llcp_phy.pause_tx &&
    2430:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2434:	07d5      	lsls	r5, r2, #31
    2436:	f100 850c 	bmi.w	2e52 <ull_conn_llcp+0x13a2>
		if (conn->tx_head == conn->tx_data) {
    243a:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    243e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2440:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2444:	f000 864e 	beq.w	30e4 <ull_conn_llcp+0x1634>
		} else if (!conn->tx_ctrl) {
    2448:	2a00      	cmp	r2, #0
    244a:	f000 8705 	beq.w	3258 <ull_conn_llcp+0x17a8>
	tx->next = conn->tx_ctrl_last->next;
    244e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2452:	681a      	ldr	r2, [r3, #0]
    2454:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    2456:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2458:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	f47f ab39 	bne.w	1ad6 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    2464:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
    2468:	f7ff bb35 	b.w	1ad6 <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
    246c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 264c <ull_conn_llcp+0xb9c>
		rx = ll_pdu_rx_alloc_peek(1);
    2470:	2001      	movs	r0, #1
    2472:	f012 fccf 	bl	14e14 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2476:	4607      	mov	r7, r0
    2478:	2800      	cmp	r0, #0
    247a:	f43f ab2c 	beq.w	1ad6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    247e:	4872      	ldr	r0, [pc, #456]	; (2648 <ull_conn_llcp+0xb98>)
    2480:	f00e fdfe 	bl	11080 <mem_acquire>
		if (!tx) {
    2484:	4605      	mov	r5, r0
    2486:	2800      	cmp	r0, #0
    2488:	f43f ab25 	beq.w	1ad6 <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
    248c:	4b70      	ldr	r3, [pc, #448]	; (2650 <ull_conn_llcp+0xba0>)
    248e:	681a      	ldr	r2, [r3, #0]
    2490:	2a00      	cmp	r2, #0
    2492:	f000 8447 	beq.w	2d24 <ull_conn_llcp+0x1274>
		(void)ll_pdu_rx_alloc();
    2496:	f012 fcdb 	bl	14e50 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    24a0:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24a2:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    24a4:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24a8:	f043 0303 	orr.w	r3, r3, #3
    24ac:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    24ae:	230c      	movs	r3, #12
    24b0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    24b2:	2300      	movs	r3, #0
    24b4:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    24b6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    24ba:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    24bc:	4a65      	ldr	r2, [pc, #404]	; (2654 <ull_conn_llcp+0xba4>)
    24be:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    24c2:	fba2 2303 	umull	r2, r3, r2, r3
    24c6:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    24c8:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    24cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    24d0:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    24d4:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    24d8:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    24dc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    24e0:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    24e4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    24e8:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    24ec:	2203      	movs	r2, #3
    24ee:	f362 0302 	bfi	r3, r2, #0, #3
    24f2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    24f6:	68a3      	ldr	r3, [r4, #8]
    24f8:	2b00      	cmp	r3, #0
    24fa:	da0a      	bge.n	2512 <ull_conn_llcp+0xa62>
			uint32_t ticks_prepare_to_start =
    24fc:	68e0      	ldr	r0, [r4, #12]
    24fe:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    2504:	4290      	cmp	r0, r2
    2506:	bf2c      	ite	cs
    2508:	1831      	addcs	r1, r6, r0
    250a:	18b1      	addcc	r1, r6, r2
    250c:	1acb      	subs	r3, r1, r3
    250e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    2512:	4b51      	ldr	r3, [pc, #324]	; (2658 <ull_conn_llcp+0xba8>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2514:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    2516:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    2518:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    251c:	2102      	movs	r1, #2
    251e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    2520:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2524:	f00e fe84 	bl	11230 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2528:	2800      	cmp	r0, #0
    252a:	f43f aad4 	beq.w	1ad6 <ull_conn_llcp+0x26>
    252e:	4a4b      	ldr	r2, [pc, #300]	; (265c <ull_conn_llcp+0xbac>)
    2530:	494b      	ldr	r1, [pc, #300]	; (2660 <ull_conn_llcp+0xbb0>)
    2532:	484c      	ldr	r0, [pc, #304]	; (2664 <ull_conn_llcp+0xbb4>)
    2534:	f640 3373 	movw	r3, #2931	; 0xb73
    2538:	f020 f8e4 	bl	22704 <printk>
    253c:	4040      	eors	r0, r0
    253e:	f380 8811 	msr	BASEPRI, r0
    2542:	f04f 0003 	mov.w	r0, #3
    2546:	df02      	svc	2
    2548:	f7ff bac5 	b.w	1ad6 <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    254c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2668 <ull_conn_llcp+0xbb8>
    2550:	e78e      	b.n	2470 <ull_conn_llcp+0x9c0>
			conn->llcp_ack = conn->llcp_req;
    2552:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    2556:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    255a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	conn_upd_curr = NULL;
    255e:	4a3c      	ldr	r2, [pc, #240]	; (2650 <ull_conn_llcp+0xba0>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2560:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    2564:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    2568:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    256c:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    2570:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    2574:	2100      	movs	r1, #0
    2576:	6011      	str	r1, [r2, #0]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2578:	f1a0 0209 	sub.w	r2, r0, #9
	if (
    257c:	2b00      	cmp	r3, #0
    257e:	f000 837c 	beq.w	2c7a <ull_conn_llcp+0x11ca>
	    !conn->llcp_enc.pause_tx &&
    2582:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2586:	078d      	lsls	r5, r1, #30
    2588:	f100 8377 	bmi.w	2c7a <ull_conn_llcp+0x11ca>
	    !conn->llcp_phy.pause_tx &&
    258c:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    2590:	07c9      	lsls	r1, r1, #31
    2592:	f100 8372 	bmi.w	2c7a <ull_conn_llcp+0x11ca>
		if (conn->tx_head == conn->tx_data) {
    2596:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    259a:	428b      	cmp	r3, r1
    259c:	f000 85af 	beq.w	30fe <ull_conn_llcp+0x164e>
		} else if (!conn->tx_ctrl) {
    25a0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    25a4:	2900      	cmp	r1, #0
    25a6:	f000 862f 	beq.w	3208 <ull_conn_llcp+0x1758>
	tx->next = conn->tx_ctrl_last->next;
    25aa:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    25ae:	6819      	ldr	r1, [r3, #0]
    25b0:	f840 1c09 	str.w	r1, [r0, #-9]
	conn->tx_ctrl_last->next = tx;
    25b4:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    25b6:	f850 3c09 	ldr.w	r3, [r0, #-9]
	conn->tx_ctrl_last = tx;
    25ba:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    25be:	2b00      	cmp	r3, #0
    25c0:	f47f aa89 	bne.w	1ad6 <ull_conn_llcp+0x26>
    25c4:	e036      	b.n	2634 <ull_conn_llcp+0xb84>
						      conn->lll.latency + 6;
    25c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    25c8:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    25cc:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    25d0:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    25d4:	3306      	adds	r3, #6
    25d6:	441a      	add	r2, r3
    25d8:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    25da:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    25de:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    25e2:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    25e6:	812b      	strh	r3, [r5, #8]
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    25e8:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    25ec:	2900      	cmp	r1, #0
    25ee:	f000 8338 	beq.w	2c62 <ull_conn_llcp+0x11b2>
	    !conn->llcp_enc.pause_tx &&
    25f2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
    25f6:	079f      	lsls	r7, r3, #30
    25f8:	f100 8333 	bmi.w	2c62 <ull_conn_llcp+0x11b2>
	    !conn->llcp_phy.pause_tx &&
    25fc:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    2600:	07de      	lsls	r6, r3, #31
    2602:	f100 832e 	bmi.w	2c62 <ull_conn_llcp+0x11b2>
		if (conn->tx_head == conn->tx_data) {
    2606:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    260a:	4299      	cmp	r1, r3
    260c:	f000 85ea 	beq.w	31e4 <ull_conn_llcp+0x1734>
		} else if (!conn->tx_ctrl) {
    2610:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    2614:	2b00      	cmp	r3, #0
    2616:	f000 865f 	beq.w	32d8 <ull_conn_llcp+0x1828>
	tx->next = conn->tx_ctrl_last->next;
    261a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    261e:	6819      	ldr	r1, [r3, #0]
    2620:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    2624:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    2626:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    262a:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    262e:	2900      	cmp	r1, #0
    2630:	f47f aa51 	bne.w	1ad6 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    2634:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    2638:	f7ff ba4d 	b.w	1ad6 <ull_conn_llcp+0x26>
				conn->procedure_expire++;
    263c:	3301      	adds	r3, #1
    263e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    2642:	f7ff ba52 	b.w	1aea <ull_conn_llcp+0x3a>
    2646:	bf00      	nop
    2648:	20002b40 	.word	0x20002b40
    264c:	00003e31 	.word	0x00003e31
    2650:	20002aac 	.word	0x20002aac
    2654:	d1b71759 	.word	0xd1b71759
    2658:	20000654 	.word	0x20000654
    265c:	0002978c 	.word	0x0002978c
    2660:	0002969c 	.word	0x0002969c
    2664:	00029220 	.word	0x00029220
    2668:	00018fc9 	.word	0x00018fc9
			tx->next = conn->tx_head;
    266c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    266e:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2672:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2676:	2b00      	cmp	r3, #0
    2678:	f47f abf0 	bne.w	1e5c <ull_conn_llcp+0x3ac>
    267c:	e5eb      	b.n	2256 <ull_conn_llcp+0x7a6>
		if (!conn->tx_ctrl) {
    267e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2682:	2a00      	cmp	r2, #0
    2684:	f47f acce 	bne.w	2024 <ull_conn_llcp+0x574>
			tx->next = conn->tx_head;
    2688:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    268a:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    268e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    2692:	e4cf      	b.n	2034 <ull_conn_llcp+0x584>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2694:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    2698:	463b      	mov	r3, r7
    269a:	462a      	mov	r2, r5
    269c:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    26a0:	f204 1049 	addw	r0, r4, #329	; 0x149
    26a4:	f019 fcda 	bl	1c05c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    26a8:	2210      	movs	r2, #16
    26aa:	4639      	mov	r1, r7
    26ac:	f104 0080 	add.w	r0, r4, #128	; 0x80
    26b0:	f022 f975 	bl	2499e <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    26b4:	2208      	movs	r2, #8
    26b6:	f104 0178 	add.w	r1, r4, #120	; 0x78
    26ba:	f104 0099 	add.w	r0, r4, #153	; 0x99
    26be:	f022 f96e 	bl	2499e <memcpy>
		lll->ccm_rx.direction = 0;
    26c2:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    26c6:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    26ca:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    26ce:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    26d2:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    26d6:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    26da:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    26de:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    26e2:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    26e6:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    26ea:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    26ee:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    26f2:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    26f6:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    26fa:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    26fe:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    2702:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    2706:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    270a:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    270c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2710:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2712:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    2714:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2718:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    271c:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    271e:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2720:	71f1      	strb	r1, [r6, #7]
	if (
    2722:	2b00      	cmp	r3, #0
    2724:	f47f acf2 	bne.w	210c <ull_conn_llcp+0x65c>
		if (!conn->tx_ctrl) {
    2728:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    272c:	2a00      	cmp	r2, #0
    272e:	f47f ad01 	bne.w	2134 <ull_conn_llcp+0x684>
			tx->next = conn->tx_head;
    2732:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2734:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2738:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    273c:	e502      	b.n	2144 <ull_conn_llcp+0x694>
		} else if (conn->llcp_conn_param.ack !=
    273e:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    2742:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    2746:	4297      	cmp	r7, r2
    2748:	f000 822f 	beq.w	2baa <ull_conn_llcp+0x10fa>
	return conn_upd_curr && (conn_upd_curr != conn);
    274c:	4fc6      	ldr	r7, [pc, #792]	; (2a68 <ull_conn_llcp+0xfb8>)
    274e:	683a      	ldr	r2, [r7, #0]
    2750:	2a00      	cmp	r2, #0
    2752:	f000 8399 	beq.w	2e88 <ull_conn_llcp+0x13d8>
    2756:	4290      	cmp	r0, r2
    2758:	f47f a9bd 	bne.w	1ad6 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    275c:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    2760:	f002 020f 	and.w	r2, r2, #15
    2764:	2a08      	cmp	r2, #8
    2766:	f200 86ee 	bhi.w	3546 <ull_conn_llcp+0x1a96>
    276a:	a001      	add	r0, pc, #4	; (adr r0, 2770 <ull_conn_llcp+0xcc0>)
    276c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2770:	000028d9 	.word	0x000028d9
    2774:	00002851 	.word	0x00002851
    2778:	00002801 	.word	0x00002801
    277c:	00001ac9 	.word	0x00001ac9
    2780:	00001ac9 	.word	0x00001ac9
    2784:	00001ac9 	.word	0x00001ac9
    2788:	00001ac9 	.word	0x00001ac9
    278c:	00001ac9 	.word	0x00001ac9
    2790:	00002795 	.word	0x00002795
			event_counter = lll->event_counter +
    2794:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    2796:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    2798:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    279c:	440a      	add	r2, r1
    279e:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    27a0:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    27a4:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    27a8:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    27ac:	2204      	movs	r2, #4
    27ae:	f362 0503 	bfi	r5, r2, #0, #4
    27b2:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    27b6:	f1a0 0213 	sub.w	r2, r0, #19
	if (
    27ba:	2900      	cmp	r1, #0
    27bc:	f000 8403 	beq.w	2fc6 <ull_conn_llcp+0x1516>
	    conn->tx_head &&
    27c0:	079d      	lsls	r5, r3, #30
    27c2:	f100 8400 	bmi.w	2fc6 <ull_conn_llcp+0x1516>
	    !conn->llcp_phy.pause_tx &&
    27c6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    27ca:	07db      	lsls	r3, r3, #31
    27cc:	f100 83fb 	bmi.w	2fc6 <ull_conn_llcp+0x1516>
		if (conn->tx_head == conn->tx_data) {
    27d0:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    27d4:	4299      	cmp	r1, r3
    27d6:	f000 861a 	beq.w	340e <ull_conn_llcp+0x195e>
		} else if (!conn->tx_ctrl) {
    27da:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    27de:	2b00      	cmp	r3, #0
    27e0:	f000 8638 	beq.w	3454 <ull_conn_llcp+0x19a4>
	tx->next = conn->tx_ctrl_last->next;
    27e4:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    27e8:	6819      	ldr	r1, [r3, #0]
    27ea:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    27ee:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    27f0:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    27f4:	f850 3c13 	ldr.w	r3, [r0, #-19]
    27f8:	2b00      	cmp	r3, #0
    27fa:	f47f a96c 	bne.w	1ad6 <ull_conn_llcp+0x26>
    27fe:	e719      	b.n	2634 <ull_conn_llcp+0xb84>
	if (conn->llcp_enc.pause_tx) {
    2800:	079f      	lsls	r7, r3, #30
    2802:	f53f a968 	bmi.w	1ad6 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    2806:	f012 fb23 	bl	14e50 <ll_pdu_rx_alloc>
	if (!rx) {
    280a:	4601      	mov	r1, r0
    280c:	2800      	cmp	r0, #0
    280e:	f43f ad19 	beq.w	2244 <ull_conn_llcp+0x794>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2812:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2816:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2818:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    281a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    281e:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2822:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2824:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    2828:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    282a:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    282c:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    282e:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2830:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    2834:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2836:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    283a:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    283c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2840:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2842:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    2846:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2848:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    284a:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    284c:	77cb      	strb	r3, [r1, #31]
    284e:	e4f4      	b.n	223a <ull_conn_llcp+0x78a>
	if (conn->llcp_conn_param.status) {
    2850:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    2854:	2b00      	cmp	r3, #0
    2856:	f040 83e3 	bne.w	3020 <ull_conn_llcp+0x1570>
	if (!conn->lll.role) {
    285a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    285e:	2a00      	cmp	r2, #0
    2860:	f2c0 854c 	blt.w	32fc <ull_conn_llcp+0x184c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2864:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    2868:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    286c:	2006      	movs	r0, #6
    286e:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    2872:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2876:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    287a:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    287c:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    2880:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    2884:	2800      	cmp	r0, #0
    2886:	f000 84f1 	beq.w	326c <ull_conn_llcp+0x17bc>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    288a:	fbb2 f3f0 	udiv	r3, r2, r0
    288e:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    2892:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2896:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    2898:	4298      	cmp	r0, r3
    289a:	bf98      	it	ls
    289c:	461a      	movls	r2, r3
    289e:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    28a2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    28a6:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    28aa:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    28ae:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    28b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    28b6:	00db      	lsls	r3, r3, #3
    28b8:	f022 020f 	bic.w	r2, r2, #15
    28bc:	f043 0302 	orr.w	r3, r3, #2
    28c0:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    28c2:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    28c4:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    28c8:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    28cc:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    28d0:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    28d4:	f7ff b8ff 	b.w	1ad6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    28d8:	4864      	ldr	r0, [pc, #400]	; (2a6c <ull_conn_llcp+0xfbc>)
    28da:	f00e fbd1 	bl	11080 <mem_acquire>
	if (!tx) {
    28de:	4602      	mov	r2, r0
    28e0:	2800      	cmp	r0, #0
    28e2:	f43f acaf 	beq.w	2244 <ull_conn_llcp+0x794>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28e6:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    28e8:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28ea:	f043 0303 	orr.w	r3, r3, #3
    28ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    28f0:	2318      	movs	r3, #24
    28f2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    28f4:	230f      	movs	r3, #15
    28f6:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    28f8:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    28fc:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    28fe:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2902:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2904:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2908:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    290a:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    290e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    2910:	2300      	movs	r3, #0
    2912:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2914:	74c3      	strb	r3, [r0, #19]
    2916:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    291c:	7543      	strb	r3, [r0, #21]
    291e:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2920:	75c3      	strb	r3, [r0, #23]
    2922:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2924:	7643      	strb	r3, [r0, #25]
    2926:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2928:	76c3      	strb	r3, [r0, #27]
    292a:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    292c:	7743      	strb	r3, [r0, #29]
    292e:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    2930:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    2934:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2938:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    293c:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    2940:	2107      	movs	r1, #7
    2942:	f361 0303 	bfi	r3, r1, #0, #4
    2946:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    294a:	68a3      	ldr	r3, [r4, #8]
    294c:	2b00      	cmp	r3, #0
    294e:	da0a      	bge.n	2966 <ull_conn_llcp+0xeb6>
			uint32_t ticks_prepare_to_start =
    2950:	68e7      	ldr	r7, [r4, #12]
    2952:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    2954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2958:	4287      	cmp	r7, r0
    295a:	bf2c      	ite	cs
    295c:	19f1      	addcs	r1, r6, r7
    295e:	1831      	addcc	r1, r6, r0
    2960:	1acb      	subs	r3, r1, r3
    2962:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    2966:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    2968:	4b41      	ldr	r3, [pc, #260]	; (2a70 <ull_conn_llcp+0xfc0>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    296a:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    296e:	2201      	movs	r2, #1
    2970:	2102      	movs	r1, #2
    2972:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    2974:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2976:	f00e fc5b 	bl	11230 <mayfly_enqueue>
		LL_ASSERT(!retval);
    297a:	2800      	cmp	r0, #0
    297c:	f43f ac62 	beq.w	2244 <ull_conn_llcp+0x794>
    2980:	4a3c      	ldr	r2, [pc, #240]	; (2a74 <ull_conn_llcp+0xfc4>)
    2982:	493d      	ldr	r1, [pc, #244]	; (2a78 <ull_conn_llcp+0xfc8>)
    2984:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
    2988:	483c      	ldr	r0, [pc, #240]	; (2a7c <ull_conn_llcp+0xfcc>)
    298a:	f01f febb 	bl	22704 <printk>
    298e:	4040      	eors	r0, r0
    2990:	f380 8811 	msr	BASEPRI, r0
    2994:	f04f 0003 	mov.w	r0, #3
    2998:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    299a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    299e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    29a2:	f7ff b891 	b.w	1ac8 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    29a6:	fb08 3311 	mls	r3, r8, r1, r3
    29aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
    29ae:	4934      	ldr	r1, [pc, #208]	; (2a80 <ull_conn_llcp+0xfd0>)
    29b0:	b29b      	uxth	r3, r3
    29b2:	fb02 f303 	mul.w	r3, r2, r3
    29b6:	fba3 0101 	umull	r0, r1, r3, r1
    29ba:	a329      	add	r3, pc, #164	; (adr r3, 2a60 <ull_conn_llcp+0xfb0>)
    29bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    29c0:	f7fe fb9e 	bl	1100 <__aeabi_uldivmod>
    29c4:	1a36      	subs	r6, r6, r0
    29c6:	f7ff b952 	b.w	1c6e <ull_conn_llcp+0x1be>
		LL_ASSERT(rx && rx->hdr.link);
    29ca:	4a2a      	ldr	r2, [pc, #168]	; (2a74 <ull_conn_llcp+0xfc4>)
    29cc:	492d      	ldr	r1, [pc, #180]	; (2a84 <ull_conn_llcp+0xfd4>)
    29ce:	482b      	ldr	r0, [pc, #172]	; (2a7c <ull_conn_llcp+0xfcc>)
    29d0:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    29d4:	f01f fe96 	bl	22704 <printk>
    29d8:	4040      	eors	r0, r0
    29da:	f380 8811 	msr	BASEPRI, r0
    29de:	f04f 0003 	mov.w	r0, #3
    29e2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    29e4:	f8d8 0000 	ldr.w	r0, [r8]
    29e8:	f7ff b8f2 	b.w	1bd0 <ull_conn_llcp+0x120>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    29ec:	f3c3 0082 	ubfx	r0, r3, #2, #3
    29f0:	f360 0202 	bfi	r2, r0, #0, #3
    29f4:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    29f8:	f44f 76a4 	mov.w	r6, #328	; 0x148
    29fc:	f7ff ba7d 	b.w	1efa <ull_conn_llcp+0x44a>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2a00:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    2a02:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2a04:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
    2a08:	f47f a8ef 	bne.w	1bea <ull_conn_llcp+0x13a>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2a0c:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2a10:	fb0c fe03 	mul.w	lr, ip, r3
    2a14:	f242 7c10 	movw	ip, #10000	; 0x2710
    2a18:	fb0c ec01 	mla	ip, ip, r1, lr
    2a1c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2a20:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2a24:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    2a28:	fa1f fc8c 	uxth.w	ip, ip
    2a2c:	45e6      	cmp	lr, ip
    2a2e:	f47f a8dc 	bne.w	1bea <ull_conn_llcp+0x13a>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2a32:	2301      	movs	r3, #1
    2a34:	f888 3004 	strb.w	r3, [r8, #4]
    2a38:	f7ff b8e7 	b.w	1c0a <ull_conn_llcp+0x15a>
		LL_ASSERT(rx && rx->hdr.link);
    2a3c:	4a0d      	ldr	r2, [pc, #52]	; (2a74 <ull_conn_llcp+0xfc4>)
    2a3e:	4911      	ldr	r1, [pc, #68]	; (2a84 <ull_conn_llcp+0xfd4>)
    2a40:	480e      	ldr	r0, [pc, #56]	; (2a7c <ull_conn_llcp+0xfcc>)
    2a42:	f241 231a 	movw	r3, #4634	; 0x121a
    2a46:	f01f fe5d 	bl	22704 <printk>
    2a4a:	4040      	eors	r0, r0
    2a4c:	f380 8811 	msr	BASEPRI, r0
    2a50:	f04f 0003 	mov.w	r0, #3
    2a54:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2a56:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2a58:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    2a5c:	f7ff ba62 	b.w	1f24 <ull_conn_llcp+0x474>
    2a60:	1afd498d 	.word	0x1afd498d
    2a64:	00000007 	.word	0x00000007
    2a68:	20002aac 	.word	0x20002aac
    2a6c:	20002b40 	.word	0x20002b40
    2a70:	20000664 	.word	0x20000664
    2a74:	0002978c 	.word	0x0002978c
    2a78:	0002969c 	.word	0x0002969c
    2a7c:	00029220 	.word	0x00029220
    2a80:	3b9aca00 	.word	0x3b9aca00
    2a84:	0002986c 	.word	0x0002986c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a88:	48cf      	ldr	r0, [pc, #828]	; (2dc8 <ull_conn_llcp+0x1318>)
    2a8a:	f00e faf9 	bl	11080 <mem_acquire>
	if (tx) {
    2a8e:	4680      	mov	r8, r0
    2a90:	2800      	cmp	r0, #0
    2a92:	f43f abd7 	beq.w	2244 <ull_conn_llcp+0x794>
		conn->llcp_feature.ack--;
    2a96:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    2a9a:	3b01      	subs	r3, #1
    2a9c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2aa0:	2309      	movs	r3, #9
    2aa2:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2aa4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2aa8:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2aaa:	7903      	ldrb	r3, [r0, #4]
    2aac:	f043 0303 	orr.w	r3, r3, #3
    2ab0:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2ab2:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    2ab6:	bfac      	ite	ge
    2ab8:	2308      	movge	r3, #8
    2aba:	230e      	movlt	r3, #14
    2abc:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2abe:	4639      	mov	r1, r7
    2ac0:	4410      	add	r0, r2
    2ac2:	f021 ff77 	bl	249b4 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    2ac6:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    2aca:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    2acc:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    2ad0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2ad4:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    2ad8:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    2ada:	f888 300c 	strb.w	r3, [r8, #12]
    2ade:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    2ae2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    2ae6:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    2aea:	0a09      	lsrs	r1, r1, #8
    2aec:	0a12      	lsrs	r2, r2, #8
    2aee:	f888 100b 	strb.w	r1, [r8, #11]
    2af2:	f888 300d 	strb.w	r3, [r8, #13]
    2af6:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    2afa:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2afe:	2b00      	cmp	r3, #0
    2b00:	f000 8084 	beq.w	2c0c <ull_conn_llcp+0x115c>
	    !conn->llcp_enc.pause_tx &&
    2b04:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2b08:	0792      	lsls	r2, r2, #30
    2b0a:	d47f      	bmi.n	2c0c <ull_conn_llcp+0x115c>
	    !conn->llcp_phy.pause_tx &&
    2b0c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2b10:	07d7      	lsls	r7, r2, #31
    2b12:	d47b      	bmi.n	2c0c <ull_conn_llcp+0x115c>
		if (conn->tx_head == conn->tx_data) {
    2b14:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2b18:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2b1a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2b1e:	f000 82be 	beq.w	309e <ull_conn_llcp+0x15ee>
		} else if (!conn->tx_ctrl) {
    2b22:	2a00      	cmp	r2, #0
    2b24:	f000 838f 	beq.w	3246 <ull_conn_llcp+0x1796>
	tx->next = conn->tx_ctrl_last->next;
    2b28:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2b2c:	681a      	ldr	r2, [r3, #0]
    2b2e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2b32:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    2b36:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    2b3a:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2b3e:	2b00      	cmp	r3, #0
    2b40:	f000 81be 	beq.w	2ec0 <ull_conn_llcp+0x1410>
		conn->procedure_expire = conn->procedure_reload;
    2b44:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2b48:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2b4c:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    2b50:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    2b54:	f7fe bfb8 	b.w	1ac8 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    2b58:	4a9c      	ldr	r2, [pc, #624]	; (2dcc <ull_conn_llcp+0x131c>)
    2b5a:	499d      	ldr	r1, [pc, #628]	; (2dd0 <ull_conn_llcp+0x1320>)
    2b5c:	489d      	ldr	r0, [pc, #628]	; (2dd4 <ull_conn_llcp+0x1324>)
    2b5e:	f241 2349 	movw	r3, #4681	; 0x1249
    2b62:	f01f fdcf 	bl	22704 <printk>
    2b66:	4040      	eors	r0, r0
    2b68:	f380 8811 	msr	BASEPRI, r0
    2b6c:	f04f 0003 	mov.w	r0, #3
    2b70:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2b72:	6828      	ldr	r0, [r5, #0]
    2b74:	f7ff b9fa 	b.w	1f6c <ull_conn_llcp+0x4bc>
		conn->tx_data_last = tx;
    2b78:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2b7c:	f7ff ba5d 	b.w	203a <ull_conn_llcp+0x58a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2b80:	2201      	movs	r2, #1
    2b82:	4610      	mov	r0, r2
    2b84:	2102      	movs	r1, #2
    2b86:	f00e fb21 	bl	111cc <mayfly_enable>
				return -ECANCELED;
    2b8a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2b8e:	f7fe bfac 	b.w	1aea <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    2b92:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2b96:	2a00      	cmp	r2, #0
    2b98:	f47f abf5 	bne.w	2386 <ull_conn_llcp+0x8d6>
			tx->next = conn->tx_head;
    2b9c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2b9e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2ba2:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2ba6:	f7ff bbf6 	b.w	2396 <ull_conn_llcp+0x8e6>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2baa:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    2bae:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    2bb2:	429a      	cmp	r2, r3
    2bb4:	d070      	beq.n	2c98 <ull_conn_llcp+0x11e8>
			event_len_prep(conn);
    2bb6:	f013 fa15 	bl	15fe4 <event_len_prep>
    2bba:	f7ff bb43 	b.w	2244 <ull_conn_llcp+0x794>
			LL_ASSERT(0);
    2bbe:	4a83      	ldr	r2, [pc, #524]	; (2dcc <ull_conn_llcp+0x131c>)
    2bc0:	4985      	ldr	r1, [pc, #532]	; (2dd8 <ull_conn_llcp+0x1328>)
    2bc2:	4884      	ldr	r0, [pc, #528]	; (2dd4 <ull_conn_llcp+0x1324>)
    2bc4:	f640 439c 	movw	r3, #3228	; 0xc9c
    2bc8:	f01f fd9c 	bl	22704 <printk>
    2bcc:	4040      	eors	r0, r0
    2bce:	f380 8811 	msr	BASEPRI, r0
    2bd2:	f04f 0003 	mov.w	r0, #3
    2bd6:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2bd8:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    2bda:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    2bde:	f7ff b861 	b.w	1ca4 <ull_conn_llcp+0x1f4>
		conn->tx_data_last = tx;
    2be2:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2be6:	f7ff bab0 	b.w	214a <ull_conn_llcp+0x69a>
			conn->tx_data = conn->tx_data->next;
    2bea:	6819      	ldr	r1, [r3, #0]
    2bec:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2bf0:	2a00      	cmp	r2, #0
    2bf2:	f47f a928 	bne.w	1e46 <ull_conn_llcp+0x396>
			tx->next = conn->tx_head->next;
    2bf6:	681a      	ldr	r2, [r3, #0]
    2bf8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2bfa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2bfc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2bfe:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2c02:	2b00      	cmp	r3, #0
    2c04:	f47f a92a 	bne.w	1e5c <ull_conn_llcp+0x3ac>
    2c08:	f7ff bb25 	b.w	2256 <ull_conn_llcp+0x7a6>
		if (!conn->tx_ctrl) {
    2c0c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2c10:	2a00      	cmp	r2, #0
    2c12:	d189      	bne.n	2b28 <ull_conn_llcp+0x1078>
			tx->next = conn->tx_head;
    2c14:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2c18:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2c1c:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    2c20:	e78d      	b.n	2b3e <ull_conn_llcp+0x108e>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2c22:	4590      	cmp	r8, r2
    2c24:	f47f a98e 	bne.w	1f44 <ull_conn_llcp+0x494>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2c28:	2301      	movs	r3, #1
    2c2a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2c2c:	4629      	mov	r1, r5
    2c2e:	f012 f8e1 	bl	14df4 <ll_rx_put>
				rx = conn->llcp_rx;
    2c32:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    2c36:	2d00      	cmp	r5, #0
    2c38:	f000 8276 	beq.w	3128 <ull_conn_llcp+0x1678>
    2c3c:	6828      	ldr	r0, [r5, #0]
    2c3e:	2800      	cmp	r0, #0
    2c40:	f000 8272 	beq.w	3128 <ull_conn_llcp+0x1678>
				conn->llcp_rx = rx->hdr.link->mem;
    2c44:	6842      	ldr	r2, [r0, #4]
    2c46:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2c4a:	2301      	movs	r3, #1
    2c4c:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2c4e:	4629      	mov	r1, r5
    2c50:	f012 f8d0 	bl	14df4 <ll_rx_put>
			ll_rx_sched();
    2c54:	f012 f8d8 	bl	14e08 <ll_rx_sched>
			return;
    2c58:	f7fe bf3d 	b.w	1ad6 <ull_conn_llcp+0x26>
	conn->lll.enc_tx = 1;
    2c5c:	f043 0310 	orr.w	r3, r3, #16
    2c60:	e553      	b.n	270a <ull_conn_llcp+0xc5a>
		if (!conn->tx_ctrl) {
    2c62:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    2c66:	2b00      	cmp	r3, #0
    2c68:	f47f acd7 	bne.w	261a <ull_conn_llcp+0xb6a>
			tx->next = conn->tx_head;
    2c6c:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    2c70:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2c74:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2c78:	e4d9      	b.n	262e <ull_conn_llcp+0xb7e>
		if (!conn->tx_ctrl) {
    2c7a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    2c7e:	2900      	cmp	r1, #0
    2c80:	f47f ac93 	bne.w	25aa <ull_conn_llcp+0xafa>
			tx->next = conn->tx_head;
    2c84:	f840 3c09 	str.w	r3, [r0, #-9]
				conn->tx_ctrl = tx;
    2c88:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2c8c:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2c90:	2b00      	cmp	r3, #0
    2c92:	f47e af20 	bne.w	1ad6 <ull_conn_llcp+0x26>
    2c96:	e4cd      	b.n	2634 <ull_conn_llcp+0xb84>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2c98:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    2c9c:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    2ca0:	429a      	cmp	r2, r3
    2ca2:	f43e af18 	beq.w	1ad6 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    2ca6:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    2caa:	f002 0103 	and.w	r1, r2, #3
    2cae:	2903      	cmp	r1, #3
    2cb0:	f000 8249 	beq.w	3146 <ull_conn_llcp+0x1696>
    2cb4:	2900      	cmp	r1, #0
    2cb6:	f47e af0e 	bne.w	1ad6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2cba:	4843      	ldr	r0, [pc, #268]	; (2dc8 <ull_conn_llcp+0x1318>)
    2cbc:	f00e f9e0 	bl	11080 <mem_acquire>
		if (!tx) {
    2cc0:	4601      	mov	r1, r0
    2cc2:	2800      	cmp	r0, #0
    2cc4:	f43f aabe 	beq.w	2244 <ull_conn_llcp+0x794>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2cc8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2ccc:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2cd0:	2201      	movs	r2, #1
    2cd2:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2cd6:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2cda:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2cde:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2ce2:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2ce6:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    2cea:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2cee:	f360 07c3 	bfi	r7, r0, #3, #1
    2cf2:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2cf6:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cfa:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2cfc:	f367 02c5 	bfi	r2, r7, #3, #3
    2d00:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2d04:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2d08:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d0a:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    2d0e:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2d10:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d12:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    2d14:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2d16:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2d18:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2d1a:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2d1c:	4620      	mov	r0, r4
    2d1e:	f012 fe5b 	bl	159d8 <ctrl_tx_pause_enqueue>
    2d22:	e70f      	b.n	2b44 <ull_conn_llcp+0x1094>
		conn_upd_curr = conn;
    2d24:	601c      	str	r4, [r3, #0]
    2d26:	f7ff bbb6 	b.w	2496 <ull_conn_llcp+0x9e6>
		LL_ASSERT(0);
    2d2a:	4a28      	ldr	r2, [pc, #160]	; (2dcc <ull_conn_llcp+0x131c>)
    2d2c:	492a      	ldr	r1, [pc, #168]	; (2dd8 <ull_conn_llcp+0x1328>)
    2d2e:	f640 63a1 	movw	r3, #3745	; 0xea1
    2d32:	e629      	b.n	2988 <ull_conn_llcp+0xed8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2d34:	4824      	ldr	r0, [pc, #144]	; (2dc8 <ull_conn_llcp+0x1318>)
    2d36:	f00e f9a3 	bl	11080 <mem_acquire>
		if (tx) {
    2d3a:	2800      	cmp	r0, #0
    2d3c:	f43f aa82 	beq.w	2244 <ull_conn_llcp+0x794>
			conn->llcp_version.ack--;
    2d40:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    2d44:	3b01      	subs	r3, #1
    2d46:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    2d4a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2d4e:	f043 0301 	orr.w	r3, r3, #1
    2d52:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2d56:	7903      	ldrb	r3, [r0, #4]
    2d58:	f043 0303 	orr.w	r3, r3, #3
    2d5c:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2d5e:	2306      	movs	r3, #6
    2d60:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    2d62:	230c      	movs	r3, #12
    2d64:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2d66:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2d68:	f06f 030e 	mvn.w	r3, #14
    2d6c:	7243      	strb	r3, [r0, #9]
    2d6e:	2305      	movs	r3, #5
    2d70:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d76:	72c3      	strb	r3, [r0, #11]
    2d78:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    2d7a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    2d7e:	2b00      	cmp	r3, #0
    2d80:	f000 80af 	beq.w	2ee2 <ull_conn_llcp+0x1432>
	    !conn->llcp_enc.pause_tx &&
    2d84:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2d88:	0792      	lsls	r2, r2, #30
    2d8a:	f100 80aa 	bmi.w	2ee2 <ull_conn_llcp+0x1432>
	    !conn->llcp_phy.pause_tx &&
    2d8e:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2d92:	07d7      	lsls	r7, r2, #31
    2d94:	f100 80a5 	bmi.w	2ee2 <ull_conn_llcp+0x1432>
		if (conn->tx_head == conn->tx_data) {
    2d98:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2d9c:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2d9e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2da2:	f000 8244 	beq.w	322e <ull_conn_llcp+0x177e>
		} else if (!conn->tx_ctrl) {
    2da6:	2a00      	cmp	r2, #0
    2da8:	f000 839d 	beq.w	34e6 <ull_conn_llcp+0x1a36>
	tx->next = conn->tx_ctrl_last->next;
    2dac:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2db0:	681a      	ldr	r2, [r3, #0]
    2db2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2db4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2db6:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2dba:	6803      	ldr	r3, [r0, #0]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	f47f aec1 	bne.w	2b44 <ull_conn_llcp+0x1094>
		conn->tx_data_last = tx;
    2dc2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    2dc6:	e6bd      	b.n	2b44 <ull_conn_llcp+0x1094>
    2dc8:	20002b40 	.word	0x20002b40
    2dcc:	0002978c 	.word	0x0002978c
    2dd0:	0002986c 	.word	0x0002986c
    2dd4:	00029220 	.word	0x00029220
    2dd8:	000292b8 	.word	0x000292b8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2ddc:	7903      	ldrb	r3, [r0, #4]
    2dde:	f043 0303 	orr.w	r3, r3, #3
    2de2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    2de4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    2de8:	07da      	lsls	r2, r3, #31
    2dea:	d548      	bpl.n	2e7e <ull_conn_llcp+0x13ce>
	    (conn->llcp_feature.features_conn &
    2dec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    2df0:	075b      	lsls	r3, r3, #29
    2df2:	d544      	bpl.n	2e7e <ull_conn_llcp+0x13ce>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2df4:	2311      	movs	r3, #17
    2df6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2df8:	2303      	movs	r3, #3
    2dfa:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2dfc:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2dfe:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    2e00:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    2e04:	2200      	movs	r2, #0
    2e06:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    2e0a:	b373      	cbz	r3, 2e6a <ull_conn_llcp+0x13ba>
	    !conn->llcp_enc.pause_tx &&
    2e0c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2e10:	0790      	lsls	r0, r2, #30
    2e12:	d42a      	bmi.n	2e6a <ull_conn_llcp+0x13ba>
	    !conn->llcp_phy.pause_tx &&
    2e14:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2e18:	07d1      	lsls	r1, r2, #31
    2e1a:	d426      	bmi.n	2e6a <ull_conn_llcp+0x13ba>
		if (conn->tx_head == conn->tx_data) {
    2e1c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2e20:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2e22:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2e26:	f000 814a 	beq.w	30be <ull_conn_llcp+0x160e>
		} else if (!conn->tx_ctrl) {
    2e2a:	2a00      	cmp	r2, #0
    2e2c:	f000 81f6 	beq.w	321c <ull_conn_llcp+0x176c>
	tx->next = conn->tx_ctrl_last->next;
    2e30:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2e34:	681a      	ldr	r2, [r3, #0]
    2e36:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2e38:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2e3a:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2e3e:	6833      	ldr	r3, [r6, #0]
    2e40:	2b00      	cmp	r3, #0
    2e42:	f000 8086 	beq.w	2f52 <ull_conn_llcp+0x14a2>
			conn->llcp_ack = conn->llcp_req;
    2e46:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    2e4a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    2e4e:	f7fe be42 	b.w	1ad6 <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    2e52:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2e56:	2a00      	cmp	r2, #0
    2e58:	f47f aaf9 	bne.w	244e <ull_conn_llcp+0x99e>
			tx->next = conn->tx_head;
    2e5c:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2e5e:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e62:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    2e66:	f7ff baf9 	b.w	245c <ull_conn_llcp+0x9ac>
		if (!conn->tx_ctrl) {
    2e6a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2e6e:	2a00      	cmp	r2, #0
    2e70:	d1de      	bne.n	2e30 <ull_conn_llcp+0x1380>
			tx->next = conn->tx_head;
    2e72:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2e74:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2e78:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2e7c:	e7df      	b.n	2e3e <ull_conn_llcp+0x138e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2e7e:	230d      	movs	r3, #13
    2e80:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2e82:	7235      	strb	r5, [r6, #8]
    2e84:	2702      	movs	r7, #2
    2e86:	e7ba      	b.n	2dfe <ull_conn_llcp+0x134e>
	switch (conn->llcp_conn_param.state) {
    2e88:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    2e8c:	f002 020f 	and.w	r2, r2, #15
    2e90:	2a08      	cmp	r2, #8
    2e92:	f200 8358 	bhi.w	3546 <ull_conn_llcp+0x1a96>
    2e96:	a001      	add	r0, pc, #4	; (adr r0, 2e9c <ull_conn_llcp+0x13ec>)
    2e98:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2e9c:	000028d9 	.word	0x000028d9
    2ea0:	00002851 	.word	0x00002851
    2ea4:	00002801 	.word	0x00002801
    2ea8:	00001ad7 	.word	0x00001ad7
    2eac:	00001ad7 	.word	0x00001ad7
    2eb0:	00001ad7 	.word	0x00001ad7
    2eb4:	00001ad7 	.word	0x00001ad7
    2eb8:	00001ad7 	.word	0x00001ad7
    2ebc:	00002795 	.word	0x00002795
		conn->tx_data_last = tx;
    2ec0:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    2ec4:	e63e      	b.n	2b44 <ull_conn_llcp+0x1094>
			conn->tx_data = conn->tx_data->next;
    2ec6:	6819      	ldr	r1, [r3, #0]
    2ec8:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2ecc:	2a00      	cmp	r2, #0
    2ece:	f47f a8a9 	bne.w	2024 <ull_conn_llcp+0x574>
			tx->next = conn->tx_head->next;
    2ed2:	681a      	ldr	r2, [r3, #0]
    2ed4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2ed6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2ed8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2eda:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2ede:	f7ff b8a9 	b.w	2034 <ull_conn_llcp+0x584>
		if (!conn->tx_ctrl) {
    2ee2:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2ee6:	2a00      	cmp	r2, #0
    2ee8:	f47f af60 	bne.w	2dac <ull_conn_llcp+0x12fc>
			tx->next = conn->tx_head;
    2eec:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2eee:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2ef2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    2ef6:	e760      	b.n	2dba <ull_conn_llcp+0x130a>
			conn->tx_data = conn->tx_data->next;
    2ef8:	6819      	ldr	r1, [r3, #0]
    2efa:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2efe:	2a00      	cmp	r2, #0
    2f00:	f47f a918 	bne.w	2134 <ull_conn_llcp+0x684>
			tx->next = conn->tx_head->next;
    2f04:	681a      	ldr	r2, [r3, #0]
    2f06:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2f08:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2f0a:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2f0c:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    2f10:	f7ff b918 	b.w	2144 <ull_conn_llcp+0x694>
							 lll->latency +
    2f14:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    2f16:	3206      	adds	r2, #6
    2f18:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    2f1a:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    2f1e:	f011 ff97 	bl	14e50 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2f22:	f8d8 3000 	ldr.w	r3, [r8]
    2f26:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    2f2a:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2f2c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    2f30:	f011 ff8e 	bl	14e50 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    2f34:	6803      	ldr	r3, [r0, #0]
    2f36:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    2f3a:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2f3c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2f40:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    2f44:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2f48:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    2f4c:	095b      	lsrs	r3, r3, #5
    2f4e:	f7ff ba5a 	b.w	2406 <ull_conn_llcp+0x956>
		conn->tx_data_last = tx;
    2f52:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2f56:	e776      	b.n	2e46 <ull_conn_llcp+0x1396>
	    ((pdu_data_tx->llctrl.opcode !=
    2f58:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2f5a:	2a03      	cmp	r2, #3
    2f5c:	f43f ae4b 	beq.w	2bf6 <ull_conn_llcp+0x1146>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2f60:	2a0a      	cmp	r2, #10
    2f62:	f47e af68 	bne.w	1e36 <ull_conn_llcp+0x386>
    2f66:	e646      	b.n	2bf6 <ull_conn_llcp+0x1146>
				(void)ll_pdu_rx_alloc();
    2f68:	f011 ff72 	bl	14e50 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    2f6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f6e:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2f72:	231c      	movs	r3, #28
				upd->status = 0U;
    2f74:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2f78:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    2f7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    2f80:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    2f84:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2f88:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    2f8c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    2f90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2f94:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    2f98:	4641      	mov	r1, r8
    2f9a:	f011 ff2b 	bl	14df4 <ll_rx_put>
				ll_rx_sched();
    2f9e:	f011 ff33 	bl	14e08 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2fa2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2fa6:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2faa:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    2fae:	095b      	lsrs	r3, r3, #5
    2fb0:	f7ff ba29 	b.w	2406 <ull_conn_llcp+0x956>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2fb4:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    2fb6:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2fb8:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2fba:	f011 ff1b 	bl	14df4 <ll_rx_put>
			ll_rx_sched();
    2fbe:	f011 ff23 	bl	14e08 <ll_rx_sched>
			return;
    2fc2:	f7fe bd88 	b.w	1ad6 <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    2fc6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    2fca:	2b00      	cmp	r3, #0
    2fcc:	f47f ac0a 	bne.w	27e4 <ull_conn_llcp+0xd34>
			tx->next = conn->tx_head;
    2fd0:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    2fd4:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2fd8:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2fdc:	e40a      	b.n	27f4 <ull_conn_llcp+0xd44>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2fde:	791a      	ldrb	r2, [r3, #4]
    2fe0:	f002 0203 	and.w	r2, r2, #3
    2fe4:	2a03      	cmp	r2, #3
    2fe6:	d076      	beq.n	30d6 <ull_conn_llcp+0x1626>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2fe8:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2fec:	f7ff b81a 	b.w	2024 <ull_conn_llcp+0x574>
			conn->tx_data = conn->tx_data->next;
    2ff0:	6819      	ldr	r1, [r3, #0]
    2ff2:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2ff6:	2a00      	cmp	r2, #0
    2ff8:	f47f a9c5 	bne.w	2386 <ull_conn_llcp+0x8d6>
			tx->next = conn->tx_head->next;
    2ffc:	681a      	ldr	r2, [r3, #0]
    2ffe:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    3000:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    3002:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    3004:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    3008:	f7ff b9c5 	b.w	2396 <ull_conn_llcp+0x8e6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    300c:	791a      	ldrb	r2, [r3, #4]
    300e:	f002 0203 	and.w	r2, r2, #3
    3012:	2a03      	cmp	r2, #3
    3014:	f000 81de 	beq.w	33d4 <ull_conn_llcp+0x1924>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3018:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    301c:	f7ff b88a 	b.w	2134 <ull_conn_llcp+0x684>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3020:	48b2      	ldr	r0, [pc, #712]	; (32ec <ull_conn_llcp+0x183c>)
    3022:	f00e f82d 	bl	11080 <mem_acquire>
		if (!tx) {
    3026:	2800      	cmp	r0, #0
    3028:	f43f a90c 	beq.w	2244 <ull_conn_llcp+0x794>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    302c:	7902      	ldrb	r2, [r0, #4]
    302e:	f042 0203 	orr.w	r2, r2, #3
    3032:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3034:	2211      	movs	r2, #17
    3036:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    3038:	2203      	movs	r2, #3
    303a:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    303c:	220f      	movs	r2, #15
    303e:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    3040:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    3044:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    3046:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    304a:	2a00      	cmp	r2, #0
    304c:	f000 8112 	beq.w	3274 <ull_conn_llcp+0x17c4>
	    !conn->llcp_enc.pause_tx &&
    3050:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    3054:	0789      	lsls	r1, r1, #30
    3056:	f100 810d 	bmi.w	3274 <ull_conn_llcp+0x17c4>
	    !conn->llcp_phy.pause_tx &&
    305a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    305e:	07cb      	lsls	r3, r1, #31
    3060:	f100 8108 	bmi.w	3274 <ull_conn_llcp+0x17c4>
		if (conn->tx_head == conn->tx_data) {
    3064:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    3068:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    306a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    306e:	f000 81fd 	beq.w	346c <ull_conn_llcp+0x19bc>
		} else if (!conn->tx_ctrl) {
    3072:	2900      	cmp	r1, #0
    3074:	f000 820c 	beq.w	3490 <ull_conn_llcp+0x19e0>
	tx->next = conn->tx_ctrl_last->next;
    3078:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    307c:	6811      	ldr	r1, [r2, #0]
    307e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3080:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    3082:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    3086:	6802      	ldr	r2, [r0, #0]
    3088:	2a00      	cmp	r2, #0
    308a:	f000 81ec 	beq.w	3466 <ull_conn_llcp+0x19b6>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    308e:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    3092:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    3096:	2300      	movs	r3, #0
    3098:	603b      	str	r3, [r7, #0]
		return;
    309a:	f7ff b8d3 	b.w	2244 <ull_conn_llcp+0x794>
			conn->tx_data = conn->tx_data->next;
    309e:	6819      	ldr	r1, [r3, #0]
    30a0:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    30a4:	2a00      	cmp	r2, #0
    30a6:	f47f ad3f 	bne.w	2b28 <ull_conn_llcp+0x1078>
			tx->next = conn->tx_head->next;
    30aa:	681a      	ldr	r2, [r3, #0]
    30ac:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    30b0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    30b4:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    30b8:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    30bc:	e53f      	b.n	2b3e <ull_conn_llcp+0x108e>
			conn->tx_data = conn->tx_data->next;
    30be:	6819      	ldr	r1, [r3, #0]
    30c0:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    30c4:	2a00      	cmp	r2, #0
    30c6:	f47f aeb3 	bne.w	2e30 <ull_conn_llcp+0x1380>
			tx->next = conn->tx_head->next;
    30ca:	681a      	ldr	r2, [r3, #0]
    30cc:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    30ce:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    30d0:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    30d4:	e6b3      	b.n	2e3e <ull_conn_llcp+0x138e>
	    ((pdu_data_tx->llctrl.opcode !=
    30d6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    30d8:	2a03      	cmp	r2, #3
    30da:	f43f aefa 	beq.w	2ed2 <ull_conn_llcp+0x1422>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    30de:	2a0a      	cmp	r2, #10
    30e0:	d182      	bne.n	2fe8 <ull_conn_llcp+0x1538>
    30e2:	e6f6      	b.n	2ed2 <ull_conn_llcp+0x1422>
			conn->tx_data = conn->tx_data->next;
    30e4:	6819      	ldr	r1, [r3, #0]
    30e6:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    30ea:	2a00      	cmp	r2, #0
    30ec:	f47f a9af 	bne.w	244e <ull_conn_llcp+0x99e>
			tx->next = conn->tx_head->next;
    30f0:	681a      	ldr	r2, [r3, #0]
    30f2:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    30f4:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    30f6:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    30fa:	f7ff b9af 	b.w	245c <ull_conn_llcp+0x9ac>
			conn->tx_data = conn->tx_data->next;
    30fe:	6819      	ldr	r1, [r3, #0]
    3100:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3104:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    3108:	2900      	cmp	r1, #0
    310a:	f47f aa4e 	bne.w	25aa <ull_conn_llcp+0xafa>
			tx->next = conn->tx_head->next;
    310e:	6819      	ldr	r1, [r3, #0]
    3110:	f840 1c09 	str.w	r1, [r0, #-9]
			conn->tx_head->next = tx;
    3114:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    3116:	f850 3c09 	ldr.w	r3, [r0, #-9]
				conn->tx_ctrl_last = tx;
    311a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    311e:	2b00      	cmp	r3, #0
    3120:	f47e acd9 	bne.w	1ad6 <ull_conn_llcp+0x26>
    3124:	f7ff ba86 	b.w	2634 <ull_conn_llcp+0xb84>
				LL_ASSERT(rx && rx->hdr.link);
    3128:	4a71      	ldr	r2, [pc, #452]	; (32f0 <ull_conn_llcp+0x1840>)
    312a:	4972      	ldr	r1, [pc, #456]	; (32f4 <ull_conn_llcp+0x1844>)
    312c:	4872      	ldr	r0, [pc, #456]	; (32f8 <ull_conn_llcp+0x1848>)
    312e:	f241 232c 	movw	r3, #4652	; 0x122c
    3132:	f01f fae7 	bl	22704 <printk>
    3136:	4040      	eors	r0, r0
    3138:	f380 8811 	msr	BASEPRI, r0
    313c:	f04f 0003 	mov.w	r0, #3
    3140:	df02      	svc	2
    3142:	6828      	ldr	r0, [r5, #0]
    3144:	e57e      	b.n	2c44 <ull_conn_llcp+0x1194>
		if (conn->llcp_phy.tx & PHY_2M) {
    3146:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    3148:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    314c:	f3c2 0382 	ubfx	r3, r2, #2, #3
    3150:	f140 80a3 	bpl.w	329a <ull_conn_llcp+0x17ea>
			conn->llcp_phy.tx = PHY_2M;
    3154:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    3158:	2202      	movs	r2, #2
    315a:	f362 0384 	bfi	r3, r2, #2, #3
    315e:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    3162:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    3166:	0659      	lsls	r1, r3, #25
    3168:	ea4f 1253 	mov.w	r2, r3, lsr #5
    316c:	f140 808d 	bpl.w	328a <ull_conn_llcp+0x17da>
			conn->llcp_phy.rx = PHY_2M;
    3170:	2202      	movs	r2, #2
    3172:	f362 1347 	bfi	r3, r2, #5, #3
    3176:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    317a:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    317e:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3182:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3186:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    318a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    318e:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3192:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3196:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    319a:	428f      	cmp	r7, r1
    319c:	bf08      	it	eq
    319e:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    31a0:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    31a2:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    31a6:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    31aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    31ae:	bf08      	it	eq
    31b0:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    31b2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    31b6:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    31ba:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    31be:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    31c0:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    31c4:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    31c8:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    31cc:	f7fe bc9d 	b.w	1b0a <ull_conn_llcp+0x5a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    31d0:	791a      	ldrb	r2, [r3, #4]
    31d2:	f002 0203 	and.w	r2, r2, #3
    31d6:	2a03      	cmp	r2, #3
    31d8:	f000 80f4 	beq.w	33c4 <ull_conn_llcp+0x1914>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    31dc:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    31e0:	f7ff b8d1 	b.w	2386 <ull_conn_llcp+0x8d6>
			conn->tx_data = conn->tx_data->next;
    31e4:	680b      	ldr	r3, [r1, #0]
    31e6:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    31ea:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    31ee:	2b00      	cmp	r3, #0
    31f0:	f47f aa13 	bne.w	261a <ull_conn_llcp+0xb6a>
			tx->next = conn->tx_head->next;
    31f4:	680b      	ldr	r3, [r1, #0]
    31f6:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    31fa:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    31fc:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    3200:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    3204:	f7ff ba13 	b.w	262e <ull_conn_llcp+0xb7e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3208:	7919      	ldrb	r1, [r3, #4]
    320a:	f001 0103 	and.w	r1, r1, #3
    320e:	2903      	cmp	r1, #3
    3210:	f000 8171 	beq.w	34f6 <ull_conn_llcp+0x1a46>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3214:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3218:	f7ff b9c7 	b.w	25aa <ull_conn_llcp+0xafa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    321c:	791a      	ldrb	r2, [r3, #4]
    321e:	f002 0203 	and.w	r2, r2, #3
    3222:	2a03      	cmp	r2, #3
    3224:	f000 816f 	beq.w	3506 <ull_conn_llcp+0x1a56>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3228:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    322c:	e600      	b.n	2e30 <ull_conn_llcp+0x1380>
			conn->tx_data = conn->tx_data->next;
    322e:	6819      	ldr	r1, [r3, #0]
    3230:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3234:	2a00      	cmp	r2, #0
    3236:	f47f adb9 	bne.w	2dac <ull_conn_llcp+0x12fc>
			tx->next = conn->tx_head->next;
    323a:	681a      	ldr	r2, [r3, #0]
    323c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    323e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    3240:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    3244:	e5b9      	b.n	2dba <ull_conn_llcp+0x130a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3246:	791a      	ldrb	r2, [r3, #4]
    3248:	f002 0203 	and.w	r2, r2, #3
    324c:	2a03      	cmp	r2, #3
    324e:	f000 80ee 	beq.w	342e <ull_conn_llcp+0x197e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3252:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3256:	e467      	b.n	2b28 <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3258:	791a      	ldrb	r2, [r3, #4]
    325a:	f002 0203 	and.w	r2, r2, #3
    325e:	2a03      	cmp	r2, #3
    3260:	f000 8139 	beq.w	34d6 <ull_conn_llcp+0x1a26>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3264:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    3268:	f7ff b8f1 	b.w	244e <ull_conn_llcp+0x99e>
			conn->llcp_cu.interval = interval_max;
    326c:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    3270:	f7ff bb17 	b.w	28a2 <ull_conn_llcp+0xdf2>
		if (!conn->tx_ctrl) {
    3274:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    3278:	2900      	cmp	r1, #0
    327a:	f47f aefd 	bne.w	3078 <ull_conn_llcp+0x15c8>
			tx->next = conn->tx_head;
    327e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    3280:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    3284:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    3288:	e6fd      	b.n	3086 <ull_conn_llcp+0x15d6>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    328a:	07d7      	lsls	r7, r2, #31
    328c:	d50f      	bpl.n	32ae <ull_conn_llcp+0x17fe>
			conn->llcp_phy.rx = PHY_1M;
    328e:	2201      	movs	r2, #1
    3290:	f362 1347 	bfi	r3, r2, #5, #3
    3294:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    3298:	e76f      	b.n	317a <ull_conn_llcp+0x16ca>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    329a:	07d8      	lsls	r0, r3, #31
    329c:	d510      	bpl.n	32c0 <ull_conn_llcp+0x1810>
			conn->llcp_phy.tx = PHY_1M;
    329e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    32a2:	2201      	movs	r2, #1
    32a4:	f362 0384 	bfi	r3, r2, #2, #3
    32a8:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    32ac:	e759      	b.n	3162 <ull_conn_llcp+0x16b2>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    32ae:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    32b2:	bf18      	it	ne
    32b4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    32b6:	f362 1347 	bfi	r3, r2, #5, #3
    32ba:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    32be:	e75c      	b.n	317a <ull_conn_llcp+0x16ca>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    32c0:	f013 0304 	ands.w	r3, r3, #4
    32c4:	f000 80f8 	beq.w	34b8 <ull_conn_llcp+0x1a08>
			conn->llcp_phy.tx = PHY_CODED;
    32c8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    32cc:	2204      	movs	r2, #4
    32ce:	f362 0384 	bfi	r3, r2, #2, #3
    32d2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    32d6:	e744      	b.n	3162 <ull_conn_llcp+0x16b2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    32d8:	790b      	ldrb	r3, [r1, #4]
    32da:	f003 0303 	and.w	r3, r3, #3
    32de:	2b03      	cmp	r3, #3
    32e0:	f000 80f1 	beq.w	34c6 <ull_conn_llcp+0x1a16>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    32e4:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    32e8:	f7ff b997 	b.w	261a <ull_conn_llcp+0xb6a>
    32ec:	20002b40 	.word	0x20002b40
    32f0:	0002978c 	.word	0x0002978c
    32f4:	0002986c 	.word	0x0002986c
    32f8:	00029220 	.word	0x00029220
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    32fc:	4895      	ldr	r0, [pc, #596]	; (3554 <ull_conn_llcp+0x1aa4>)
    32fe:	f00d febf 	bl	11080 <mem_acquire>
	if (!tx) {
    3302:	2800      	cmp	r0, #0
    3304:	f43e af9e 	beq.w	2244 <ull_conn_llcp+0x794>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3308:	7902      	ldrb	r2, [r0, #4]
    330a:	f042 0203 	orr.w	r2, r2, #3
    330e:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    3310:	2218      	movs	r2, #24
    3312:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    3314:	2210      	movs	r2, #16
    3316:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    3318:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    331c:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    331e:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    3322:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    3324:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    3328:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    332a:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    332e:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    3330:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    3334:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    3336:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    333a:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    333e:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    3342:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    3346:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    334a:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    334e:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    3352:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    3356:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    335a:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    335e:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    3362:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    3366:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    336a:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    336e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    3372:	2a00      	cmp	r2, #0
    3374:	d036      	beq.n	33e4 <ull_conn_llcp+0x1934>
	    !conn->llcp_enc.pause_tx &&
    3376:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    337a:	0789      	lsls	r1, r1, #30
    337c:	d432      	bmi.n	33e4 <ull_conn_llcp+0x1934>
	    !conn->llcp_phy.pause_tx &&
    337e:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    3382:	07cb      	lsls	r3, r1, #31
    3384:	d42e      	bmi.n	33e4 <ull_conn_llcp+0x1934>
		if (conn->tx_head == conn->tx_data) {
    3386:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    338a:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    338c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    3390:	d032      	beq.n	33f8 <ull_conn_llcp+0x1948>
		} else if (!conn->tx_ctrl) {
    3392:	2900      	cmp	r1, #0
    3394:	d056      	beq.n	3444 <ull_conn_llcp+0x1994>
	tx->next = conn->tx_ctrl_last->next;
    3396:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    339a:	6811      	ldr	r1, [r2, #0]
    339c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    339e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    33a0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    33a4:	6802      	ldr	r2, [r0, #0]
    33a6:	2a00      	cmp	r2, #0
    33a8:	d049      	beq.n	343e <ull_conn_llcp+0x198e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    33aa:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    33ae:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    33b2:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    33b6:	2205      	movs	r2, #5
    33b8:	f362 0303 	bfi	r3, r2, #0, #4
    33bc:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    33c0:	f7fe bb82 	b.w	1ac8 <ull_conn_llcp+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    33c4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33c6:	2a03      	cmp	r2, #3
    33c8:	f43f ae18 	beq.w	2ffc <ull_conn_llcp+0x154c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    33cc:	2a0a      	cmp	r2, #10
    33ce:	f47f af05 	bne.w	31dc <ull_conn_llcp+0x172c>
    33d2:	e613      	b.n	2ffc <ull_conn_llcp+0x154c>
	    ((pdu_data_tx->llctrl.opcode !=
    33d4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    33d6:	2a03      	cmp	r2, #3
    33d8:	f43f ad94 	beq.w	2f04 <ull_conn_llcp+0x1454>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    33dc:	2a0a      	cmp	r2, #10
    33de:	f47f ae1b 	bne.w	3018 <ull_conn_llcp+0x1568>
    33e2:	e58f      	b.n	2f04 <ull_conn_llcp+0x1454>
		if (!conn->tx_ctrl) {
    33e4:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    33e8:	2900      	cmp	r1, #0
    33ea:	d1d4      	bne.n	3396 <ull_conn_llcp+0x18e6>
			tx->next = conn->tx_head;
    33ec:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    33ee:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    33f2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    33f6:	e7d5      	b.n	33a4 <ull_conn_llcp+0x18f4>
			conn->tx_data = conn->tx_data->next;
    33f8:	6813      	ldr	r3, [r2, #0]
    33fa:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    33fe:	2900      	cmp	r1, #0
    3400:	d1c9      	bne.n	3396 <ull_conn_llcp+0x18e6>
			tx->next = conn->tx_head->next;
    3402:	6811      	ldr	r1, [r2, #0]
    3404:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    3406:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    3408:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    340c:	e7ca      	b.n	33a4 <ull_conn_llcp+0x18f4>
			conn->tx_data = conn->tx_data->next;
    340e:	680b      	ldr	r3, [r1, #0]
    3410:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3414:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    3418:	2b00      	cmp	r3, #0
    341a:	f47f a9e3 	bne.w	27e4 <ull_conn_llcp+0xd34>
			tx->next = conn->tx_head->next;
    341e:	680b      	ldr	r3, [r1, #0]
    3420:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    3424:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    3426:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    342a:	f7ff b9e3 	b.w	27f4 <ull_conn_llcp+0xd44>
	    ((pdu_data_tx->llctrl.opcode !=
    342e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3430:	2a03      	cmp	r2, #3
    3432:	f43f ae3a 	beq.w	30aa <ull_conn_llcp+0x15fa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3436:	2a0a      	cmp	r2, #10
    3438:	f47f af0b 	bne.w	3252 <ull_conn_llcp+0x17a2>
    343c:	e635      	b.n	30aa <ull_conn_llcp+0x15fa>
		conn->tx_data_last = tx;
    343e:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    3442:	e7b2      	b.n	33aa <ull_conn_llcp+0x18fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3444:	7911      	ldrb	r1, [r2, #4]
    3446:	f001 0103 	and.w	r1, r1, #3
    344a:	2903      	cmp	r1, #3
    344c:	d01a      	beq.n	3484 <ull_conn_llcp+0x19d4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    344e:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    3452:	e7a0      	b.n	3396 <ull_conn_llcp+0x18e6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3454:	790b      	ldrb	r3, [r1, #4]
    3456:	f003 0303 	and.w	r3, r3, #3
    345a:	2b03      	cmp	r3, #3
    345c:	d020      	beq.n	34a0 <ull_conn_llcp+0x19f0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    345e:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    3462:	f7ff b9bf 	b.w	27e4 <ull_conn_llcp+0xd34>
		conn->tx_data_last = tx;
    3466:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    346a:	e610      	b.n	308e <ull_conn_llcp+0x15de>
			conn->tx_data = conn->tx_data->next;
    346c:	6813      	ldr	r3, [r2, #0]
    346e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    3472:	2900      	cmp	r1, #0
    3474:	f47f ae00 	bne.w	3078 <ull_conn_llcp+0x15c8>
			tx->next = conn->tx_head->next;
    3478:	6811      	ldr	r1, [r2, #0]
    347a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    347c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    347e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    3482:	e600      	b.n	3086 <ull_conn_llcp+0x15d6>
	    ((pdu_data_tx->llctrl.opcode !=
    3484:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3486:	2903      	cmp	r1, #3
    3488:	d0bb      	beq.n	3402 <ull_conn_llcp+0x1952>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    348a:	290a      	cmp	r1, #10
    348c:	d1df      	bne.n	344e <ull_conn_llcp+0x199e>
    348e:	e7b8      	b.n	3402 <ull_conn_llcp+0x1952>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3490:	7911      	ldrb	r1, [r2, #4]
    3492:	f001 0103 	and.w	r1, r1, #3
    3496:	2903      	cmp	r1, #3
    3498:	d008      	beq.n	34ac <ull_conn_llcp+0x19fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    349a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    349e:	e5eb      	b.n	3078 <ull_conn_llcp+0x15c8>
	    ((pdu_data_tx->llctrl.opcode !=
    34a0:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34a2:	2b03      	cmp	r3, #3
    34a4:	d0bb      	beq.n	341e <ull_conn_llcp+0x196e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34a6:	2b0a      	cmp	r3, #10
    34a8:	d1d9      	bne.n	345e <ull_conn_llcp+0x19ae>
    34aa:	e7b8      	b.n	341e <ull_conn_llcp+0x196e>
	    ((pdu_data_tx->llctrl.opcode !=
    34ac:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34ae:	2903      	cmp	r1, #3
    34b0:	d0e2      	beq.n	3478 <ull_conn_llcp+0x19c8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34b2:	290a      	cmp	r1, #10
    34b4:	d1f1      	bne.n	349a <ull_conn_llcp+0x19ea>
    34b6:	e7df      	b.n	3478 <ull_conn_llcp+0x19c8>
			conn->llcp_phy.tx = 0U;
    34b8:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    34bc:	f363 0284 	bfi	r2, r3, #2, #3
    34c0:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    34c4:	e64d      	b.n	3162 <ull_conn_llcp+0x16b2>
	    ((pdu_data_tx->llctrl.opcode !=
    34c6:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34c8:	2b03      	cmp	r3, #3
    34ca:	f43f ae93 	beq.w	31f4 <ull_conn_llcp+0x1744>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34ce:	2b0a      	cmp	r3, #10
    34d0:	f47f af08 	bne.w	32e4 <ull_conn_llcp+0x1834>
    34d4:	e68e      	b.n	31f4 <ull_conn_llcp+0x1744>
	    ((pdu_data_tx->llctrl.opcode !=
    34d6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34d8:	2a03      	cmp	r2, #3
    34da:	f43f ae09 	beq.w	30f0 <ull_conn_llcp+0x1640>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34de:	2a0a      	cmp	r2, #10
    34e0:	f47f aec0 	bne.w	3264 <ull_conn_llcp+0x17b4>
    34e4:	e604      	b.n	30f0 <ull_conn_llcp+0x1640>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34e6:	791a      	ldrb	r2, [r3, #4]
    34e8:	f002 0203 	and.w	r2, r2, #3
    34ec:	2a03      	cmp	r2, #3
    34ee:	d012      	beq.n	3516 <ull_conn_llcp+0x1a66>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    34f0:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    34f4:	e45a      	b.n	2dac <ull_conn_llcp+0x12fc>
	    ((pdu_data_tx->llctrl.opcode !=
    34f6:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    34f8:	2903      	cmp	r1, #3
    34fa:	f43f ae08 	beq.w	310e <ull_conn_llcp+0x165e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    34fe:	290a      	cmp	r1, #10
    3500:	f47f ae88 	bne.w	3214 <ull_conn_llcp+0x1764>
    3504:	e603      	b.n	310e <ull_conn_llcp+0x165e>
	    ((pdu_data_tx->llctrl.opcode !=
    3506:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3508:	2a03      	cmp	r2, #3
    350a:	f43f adde 	beq.w	30ca <ull_conn_llcp+0x161a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    350e:	2a0a      	cmp	r2, #10
    3510:	f47f ae8a 	bne.w	3228 <ull_conn_llcp+0x1778>
    3514:	e5d9      	b.n	30ca <ull_conn_llcp+0x161a>
	    ((pdu_data_tx->llctrl.opcode !=
    3516:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3518:	2a03      	cmp	r2, #3
    351a:	f43f ae8e 	beq.w	323a <ull_conn_llcp+0x178a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    351e:	2a0a      	cmp	r2, #10
    3520:	d1e6      	bne.n	34f0 <ull_conn_llcp+0x1a40>
    3522:	e68a      	b.n	323a <ull_conn_llcp+0x178a>
			LL_ASSERT(0);
    3524:	4a0c      	ldr	r2, [pc, #48]	; (3558 <ull_conn_llcp+0x1aa8>)
    3526:	490d      	ldr	r1, [pc, #52]	; (355c <ull_conn_llcp+0x1aac>)
    3528:	480d      	ldr	r0, [pc, #52]	; (3560 <ull_conn_llcp+0x1ab0>)
    352a:	f640 33c7 	movw	r3, #3015	; 0xbc7
    352e:	f01f f8e9 	bl	22704 <printk>
    3532:	4040      	eors	r0, r0
    3534:	f380 8811 	msr	BASEPRI, r0
    3538:	f04f 0003 	mov.w	r0, #3
    353c:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    353e:	f04f 0800 	mov.w	r8, #0
			break;
    3542:	f7fe bf95 	b.w	2470 <ull_conn_llcp+0x9c0>
		LL_ASSERT(0);
    3546:	4a04      	ldr	r2, [pc, #16]	; (3558 <ull_conn_llcp+0x1aa8>)
    3548:	4904      	ldr	r1, [pc, #16]	; (355c <ull_conn_llcp+0x1aac>)
    354a:	f640 73e1 	movw	r3, #4065	; 0xfe1
    354e:	f7ff ba1b 	b.w	2988 <ull_conn_llcp+0xed8>
    3552:	bf00      	nop
    3554:	20002b40 	.word	0x20002b40
    3558:	0002978c 	.word	0x0002978c
    355c:	000292b8 	.word	0x000292b8
    3560:	00029220 	.word	0x00029220
    3564:	00000000 	.word	0x00000000

00003568 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    3568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    356c:	b08b      	sub	sp, #44	; 0x2c
    356e:	460f      	mov	r7, r1
    3570:	9304      	str	r3, [sp, #16]
    3572:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    3576:	9005      	str	r0, [sp, #20]
    3578:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    357a:	2000      	movs	r0, #0
{
    357c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    3580:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    3584:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    3588:	9303      	str	r3, [sp, #12]
    358a:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    358c:	f012 f9b2 	bl	158f4 <ull_scan_is_disabled_get>
	if (!scan) {
    3590:	2800      	cmp	r0, #0
    3592:	f000 8194 	beq.w	38be <ll_create_connection+0x356>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    3596:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    359a:	4605      	mov	r5, r0
    359c:	4650      	mov	r0, sl
    359e:	f00f f973 	bl	12888 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    35a2:	f1ba 0f00 	cmp.w	sl, #0
    35a6:	d16a      	bne.n	367e <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    35a8:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    35aa:	f105 021c 	add.w	r2, r5, #28
    35ae:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    35b0:	2b00      	cmp	r3, #0
    35b2:	d06b      	beq.n	368c <ll_create_connection+0x124>
		conn_lll = lll->conn;
    35b4:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    35b8:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    35bc:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    35c0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    35c4:	f000 0007 	and.w	r0, r0, #7
    35c8:	f017 fa02 	bl	1a9d0 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    35cc:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    35d0:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    35d4:	4401      	add	r1, r0
    35d6:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    35da:	4401      	add	r1, r0
    35dc:	48c2      	ldr	r0, [pc, #776]	; (38e8 <ll_create_connection+0x380>)
    35de:	a3c0      	add	r3, pc, #768	; (adr r3, 38e0 <ll_create_connection+0x378>)
    35e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    35e4:	fba1 0100 	umull	r0, r1, r1, r0
    35e8:	f7fd fd8a 	bl	1100 <__aeabi_uldivmod>
    35ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    35f0:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    35f2:	4630      	mov	r0, r6
    35f4:	f016 fa80 	bl	19af8 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    35f8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    35fc:	f36f 0341 	bfc	r3, #1, #1
    3600:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    3604:	23ff      	movs	r3, #255	; 0xff
    3606:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    360a:	b366      	cbz	r6, 3666 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    360c:	f1a9 0302 	sub.w	r3, r9, #2
    3610:	2b01      	cmp	r3, #1
    3612:	f240 8158 	bls.w	38c6 <ll_create_connection+0x35e>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    3616:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    361a:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    361c:	f369 0342 	bfi	r3, r9, #1, #2
    3620:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    3624:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3628:	f362 0300 	bfi	r3, r2, #0, #1
    362c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    3630:	9914      	ldr	r1, [sp, #80]	; 0x50
    3632:	2206      	movs	r2, #6
    3634:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3638:	f021 f9b1 	bl	2499e <memcpy>
	lll->conn_timeout = timeout;
    363c:	9b03      	ldr	r3, [sp, #12]
    363e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    3640:	9a05      	ldr	r2, [sp, #20]
    3642:	9600      	str	r6, [sp, #0]
    3644:	463b      	mov	r3, r7
    3646:	f105 001c 	add.w	r0, r5, #28
    364a:	2100      	movs	r1, #0
    364c:	f7fe f950 	bl	18f0 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    3650:	f017 fb5c 	bl	1ad0c <lll_clock_wait>
	if (err) {
    3654:	2800      	cmp	r0, #0
    3656:	f040 8157 	bne.w	3908 <ll_create_connection+0x3a0>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    365a:	4628      	mov	r0, r5
    365c:	f7fe f974 	bl	1948 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    3660:	b00b      	add	sp, #44	; 0x2c
    3662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    3666:	f016 fe01 	bl	1a26c <ull_filter_lll_rl_enabled>
    366a:	2800      	cmp	r0, #0
    366c:	d0ce      	beq.n	360c <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    366e:	9914      	ldr	r1, [sp, #80]	; 0x50
    3670:	9804      	ldr	r0, [sp, #16]
    3672:	4632      	mov	r2, r6
    3674:	f016 fb3c 	bl	19cf0 <ull_filter_rl_find>
    3678:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    367c:	e7c6      	b.n	360c <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    367e:	2106      	movs	r1, #6
    3680:	f00d fd48 	bl	11114 <mem_nz>
    3684:	2800      	cmp	r0, #0
    3686:	d18f      	bne.n	35a8 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    3688:	2012      	movs	r0, #18
    368a:	e7e9      	b.n	3660 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    368c:	f011 fba6 	bl	14ddc <ll_rx_link_alloc>
	if (!link) {
    3690:	9007      	str	r0, [sp, #28]
    3692:	2800      	cmp	r0, #0
    3694:	f000 816f 	beq.w	3976 <ll_create_connection+0x40e>
	conn = ll_conn_acquire();
    3698:	f012 fd9c 	bl	161d4 <ll_conn_acquire>
	if (!conn) {
    369c:	4604      	mov	r4, r0
    369e:	2800      	cmp	r0, #0
    36a0:	f000 818b 	beq.w	39ba <ll_create_connection+0x452>
	err = util_aa_le32(conn_lll->access_addr);
    36a4:	3020      	adds	r0, #32
    36a6:	f00d fed5 	bl	11454 <util_aa_le32>
	conn_lll = &conn->lll;
    36aa:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    36ae:	2800      	cmp	r0, #0
    36b0:	f040 8154 	bne.w	395c <ll_create_connection+0x3f4>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    36b4:	2103      	movs	r1, #3
    36b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    36ba:	f017 f84b 	bl	1a754 <lll_csrand_get>
	conn_lll->interval = interval;
    36be:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    36c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    36c2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    36c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    36c8:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    36cc:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    36ce:	2800      	cmp	r0, #0
    36d0:	f000 8153 	beq.w	397a <ll_create_connection+0x412>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    36d4:	f104 0148 	add.w	r1, r4, #72	; 0x48
    36d8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    36dc:	f00d fd26 	bl	1112c <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    36e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    36e2:	4a82      	ldr	r2, [pc, #520]	; (38ec <ll_create_connection+0x384>)
    36e4:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    36e6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    36ea:	f023 0307 	bic.w	r3, r3, #7
    36ee:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    36f2:	4b7f      	ldr	r3, [pc, #508]	; (38f0 <ll_create_connection+0x388>)
    36f4:	4313      	orrs	r3, r2
    36f6:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    36f8:	4b7e      	ldr	r3, [pc, #504]	; (38f4 <ll_create_connection+0x38c>)
    36fa:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    36fc:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    3700:	231b      	movs	r3, #27
    3702:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    3704:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    3708:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    370c:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    3710:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    3714:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3718:	f015 fcaa 	bl	19070 <ull_chan_map_get>
    371c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    3720:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    3724:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    3726:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    372a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    372e:	f017 f811 	bl	1a754 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3732:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3736:	4b70      	ldr	r3, [pc, #448]	; (38f8 <ll_create_connection+0x390>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    3738:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    373c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    373e:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    3742:	fba3 1302 	umull	r1, r3, r3, r2
    3746:	08db      	lsrs	r3, r3, #3
    3748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    374c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    3750:	3305      	adds	r3, #5
    3752:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    3756:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    375a:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    375c:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    3760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3764:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    3768:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    376c:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    3770:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3774:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    3778:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    377c:	4b5f      	ldr	r3, [pc, #380]	; (38fc <ll_create_connection+0x394>)
	conn->apto_expire = 0U;
    377e:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    3782:	fb02 f101 	mul.w	r1, r2, r1
    3786:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3788:	440b      	add	r3, r1
    378a:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    378e:	495c      	ldr	r1, [pc, #368]	; (3900 <ll_create_connection+0x398>)
	conn->appto_expire = 0U;
    3790:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    3794:	4411      	add	r1, r2
    3796:	fbb1 f1f2 	udiv	r1, r1, r2
    379a:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    379e:	f242 7110 	movw	r1, #10000	; 0x2710
    37a2:	fb01 210c 	mla	r1, r1, ip, r2
    37a6:	3901      	subs	r1, #1
    37a8:	fbb1 f2f2 	udiv	r2, r1, r2
    37ac:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    37b0:	2206      	movs	r2, #6
    37b2:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    37b6:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    37b8:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    37ba:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    37bc:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    37c0:	dd02      	ble.n	37c8 <ll_create_connection+0x260>
    37c2:	3a06      	subs	r2, #6
    37c4:	1a12      	subs	r2, r2, r0
    37c6:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    37c8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    37cc:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    37d0:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    37d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    37d8:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    37dc:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    37e0:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    37e4:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    37e8:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    37ec:	f010 fe38 	bl	14460 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    37f0:	9b07      	ldr	r3, [sp, #28]
    37f2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    37f6:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    37fa:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    37fe:	f023 0303 	bic.w	r3, r3, #3
    3802:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    3806:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    380a:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    380e:	f023 0318 	bic.w	r3, r3, #24
    3812:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    3816:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    381a:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    381e:	f023 0307 	bic.w	r3, r3, #7
    3822:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    3826:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    382a:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    382e:	f36b 1345 	bfi	r3, fp, #5, #1
    3832:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    3836:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    383a:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    383e:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    3842:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    3844:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    3848:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    384a:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    384e:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    3852:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    3856:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    385a:	f012 ffbf 	bl	167dc <ull_conn_default_tx_octets_get>
    385e:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    3862:	f012 ffc1 	bl	167e8 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3866:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    386a:	4b26      	ldr	r3, [pc, #152]	; (3904 <ll_create_connection+0x39c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    386c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    3870:	4013      	ands	r3, r2
    3872:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    3876:	f012 ffbd 	bl	167f4 <ull_conn_default_phy_tx_get>
    387a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    387e:	f360 0302 	bfi	r3, r0, #0, #3
    3882:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3886:	f012 ffbb 	bl	16800 <ull_conn_default_phy_rx_get>
    388a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    388e:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    3892:	f360 03c5 	bfi	r3, r0, #3, #3
    3896:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    389a:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    389c:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    38a0:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    38a4:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    38a8:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    38ac:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    38ae:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    38b2:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    38b6:	f884 b000 	strb.w	fp, [r4]
    38ba:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    38bc:	e67e      	b.n	35bc <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    38be:	200c      	movs	r0, #12
}
    38c0:	b00b      	add	sp, #44	; 0x2c
    38c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    38c6:	2000      	movs	r0, #0
    38c8:	f016 f930 	bl	19b2c <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    38cc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    38d0:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    38d4:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    38d6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    38da:	e69c      	b.n	3616 <ll_create_connection+0xae>
    38dc:	f3af 8000 	nop.w
    38e0:	1afd498d 	.word	0x1afd498d
    38e4:	00000007 	.word	0x00000007
    38e8:	3b9aca00 	.word	0x3b9aca00
    38ec:	f8800000 	.word	0xf8800000
    38f0:	01110148 	.word	0x01110148
    38f4:	0148001b 	.word	0x0148001b
    38f8:	aaaaaaab 	.word	0xaaaaaaab
    38fc:	01c9c37f 	.word	0x01c9c37f
    3900:	026259ff 	.word	0x026259ff
    3904:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    3908:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    390a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    390c:	b163      	cbz	r3, 3928 <ll_create_connection+0x3c0>
    390e:	4a2d      	ldr	r2, [pc, #180]	; (39c4 <ll_create_connection+0x45c>)
    3910:	492d      	ldr	r1, [pc, #180]	; (39c8 <ll_create_connection+0x460>)
    3912:	482e      	ldr	r0, [pc, #184]	; (39cc <ll_create_connection+0x464>)
    3914:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    3918:	f01e fef4 	bl	22704 <printk>
    391c:	4040      	eors	r0, r0
    391e:	f380 8811 	msr	BASEPRI, r0
    3922:	f04f 0003 	mov.w	r0, #3
    3926:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    3928:	f104 0130 	add.w	r1, r4, #48	; 0x30
    392c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3930:	f00d fc00 	bl	11134 <memq_deinit>
	LL_ASSERT(link);
    3934:	4606      	mov	r6, r0
    3936:	2800      	cmp	r0, #0
    3938:	d031      	beq.n	399e <ll_create_connection+0x436>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    393a:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    393c:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    393e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    3942:	b1f4      	cbz	r4, 3982 <ll_create_connection+0x41a>

	ll_rx_link_release(link);
    3944:	4620      	mov	r0, r4
    3946:	f011 fa4f 	bl	14de8 <ll_rx_link_release>

	ll_conn_release(conn);
    394a:	4638      	mov	r0, r7
    394c:	f012 fc48 	bl	161e0 <ll_conn_release>
	scan->lll.conn = NULL;
    3950:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    3952:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    3954:	622b      	str	r3, [r5, #32]
}
    3956:	b00b      	add	sp, #44	; 0x2c
    3958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    395c:	4a19      	ldr	r2, [pc, #100]	; (39c4 <ll_create_connection+0x45c>)
    395e:	491c      	ldr	r1, [pc, #112]	; (39d0 <ll_create_connection+0x468>)
    3960:	481a      	ldr	r0, [pc, #104]	; (39cc <ll_create_connection+0x464>)
    3962:	23bf      	movs	r3, #191	; 0xbf
    3964:	f01e fece 	bl	22704 <printk>
    3968:	4040      	eors	r0, r0
    396a:	f380 8811 	msr	BASEPRI, r0
    396e:	f04f 0003 	mov.w	r0, #3
    3972:	df02      	svc	2
    3974:	e69e      	b.n	36b4 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3976:	2007      	movs	r0, #7
    3978:	e672      	b.n	3660 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    397a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    397e:	65a0      	str	r0, [r4, #88]	; 0x58
    3980:	e6a8      	b.n	36d4 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    3982:	4a10      	ldr	r2, [pc, #64]	; (39c4 <ll_create_connection+0x45c>)
    3984:	4913      	ldr	r1, [pc, #76]	; (39d4 <ll_create_connection+0x46c>)
    3986:	4811      	ldr	r0, [pc, #68]	; (39cc <ll_create_connection+0x464>)
    3988:	f240 43c1 	movw	r3, #1217	; 0x4c1
    398c:	f01e feba 	bl	22704 <printk>
    3990:	4040      	eors	r0, r0
    3992:	f380 8811 	msr	BASEPRI, r0
    3996:	f04f 0003 	mov.w	r0, #3
    399a:	df02      	svc	2
    399c:	e7d2      	b.n	3944 <ll_create_connection+0x3dc>
	LL_ASSERT(link);
    399e:	4a09      	ldr	r2, [pc, #36]	; (39c4 <ll_create_connection+0x45c>)
    39a0:	490c      	ldr	r1, [pc, #48]	; (39d4 <ll_create_connection+0x46c>)
    39a2:	480a      	ldr	r0, [pc, #40]	; (39cc <ll_create_connection+0x464>)
    39a4:	f240 43ba 	movw	r3, #1210	; 0x4ba
    39a8:	f01e feac 	bl	22704 <printk>
    39ac:	4040      	eors	r0, r0
    39ae:	f380 8811 	msr	BASEPRI, r0
    39b2:	f04f 0003 	mov.w	r0, #3
    39b6:	df02      	svc	2
    39b8:	e7bf      	b.n	393a <ll_create_connection+0x3d2>
		ll_rx_link_release(link);
    39ba:	9807      	ldr	r0, [sp, #28]
    39bc:	f011 fa14 	bl	14de8 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    39c0:	2007      	movs	r0, #7
    39c2:	e64d      	b.n	3660 <ll_create_connection+0xf8>
    39c4:	0002996c 	.word	0x0002996c
    39c8:	000299b0 	.word	0x000299b0
    39cc:	00029220 	.word	0x00029220
    39d0:	00029598 	.word	0x00029598
    39d4:	000297e4 	.word	0x000297e4

000039d8 <ull_central_setup>:
{
    39d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    39dc:	4680      	mov	r8, r0
{
    39de:	b08d      	sub	sp, #52	; 0x34
    39e0:	4604      	mov	r4, r0
    39e2:	460f      	mov	r7, r1
    39e4:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    39e6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    39ea:	2206      	movs	r2, #6
    39ec:	a80a      	add	r0, sp, #40	; 0x28
	peer_addr_type = pdu_tx->rx_addr;
    39ee:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    39f2:	f020 ffd4 	bl	2499e <memcpy>
	chan_sel = pdu_tx->chan_sel;
    39f6:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    39fa:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    39fe:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    3a02:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    3a06:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3a08:	f040 8100 	bne.w	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
	cc->status = 0U;
    3a0c:	2300      	movs	r3, #0
    3a0e:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    3a10:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    3a12:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    3a16:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3a1a:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    3a1e:	f000 80df 	beq.w	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3a22:	f104 011e 	add.w	r1, r4, #30
    3a26:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3a2a:	f020 ffb8 	bl	2499e <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3a2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3a32:	f000 80dd 	beq.w	3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3a36:	4640      	mov	r0, r8
    3a38:	f104 021f 	add.w	r2, r4, #31
    3a3c:	f104 011e 	add.w	r1, r4, #30
    3a40:	f015 fd60 	bl	19504 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    3a44:	7fa3      	ldrb	r3, [r4, #30]
    3a46:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3a48:	a90a      	add	r1, sp, #40	; 0x28
		cc->peer_addr_type += 2;
    3a4a:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3a4c:	2206      	movs	r2, #6
    3a4e:	f104 0025 	add.w	r0, r4, #37	; 0x25
    3a52:	f020 ffa4 	bl	2499e <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    3a56:	683b      	ldr	r3, [r7, #0]
    3a58:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    3a5c:	89eb      	ldrh	r3, [r5, #14]
    3a5e:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    3a60:	8a2b      	ldrh	r3, [r5, #16]
    3a62:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    3a64:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    3a68:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    3a6a:	f017 f9a1 	bl	1adb0 <lll_clock_sca_local_get>
    3a6e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    3a72:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    3a76:	4640      	mov	r0, r8
    3a78:	f012 fbb8 	bl	161ec <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    3a7c:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    3a7e:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    3a80:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    3a82:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    3a84:	6820      	ldr	r0, [r4, #0]
    3a86:	f011 f9b5 	bl	14df4 <ll_rx_put>
		rx->handle = lll->handle;
    3a8a:	89ab      	ldrh	r3, [r5, #12]
    3a8c:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3a8e:	231b      	movs	r3, #27
		link = rx->link;
    3a90:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3a92:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    3a94:	f1b9 0f00 	cmp.w	r9, #0
    3a98:	f040 80c6 	bne.w	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
			cs->csa = 0x00;
    3a9c:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    3aa0:	4631      	mov	r1, r6
    3aa2:	4620      	mov	r0, r4
    3aa4:	f011 f9a6 	bl	14df4 <ll_rx_put>
	ll_rx_sched();
    3aa8:	f011 f9ae 	bl	14e08 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3ab0:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    3ab4:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ab8:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    3abc:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    3abe:	429e      	cmp	r6, r3
    3ac0:	bf38      	it	cc
    3ac2:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3ac4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ac8:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3acc:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3ad0:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3ad4:	f016 ff7c 	bl	1a9d0 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3ad8:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3ada:	2200      	movs	r2, #0
    3adc:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3ade:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3ae0:	2001      	movs	r0, #1
    3ae2:	f00d fb73 	bl	111cc <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3ae6:	4650      	mov	r0, sl
    3ae8:	f011 fedc 	bl	158a4 <ull_scan_handle_get>
    3aec:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3aee:	4b56      	ldr	r3, [pc, #344]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3af0:	f8cd a000 	str.w	sl, [sp]
    3af4:	b2d2      	uxtb	r2, r2
    3af6:	2101      	movs	r1, #1
    3af8:	2000      	movs	r0, #0
    3afa:	f00e fe01 	bl	12700 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3afe:	f030 0302 	bics.w	r3, r0, #2
    3b02:	d00c      	beq.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
    3b04:	4a51      	ldr	r2, [pc, #324]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3b06:	4952      	ldr	r1, [pc, #328]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3b08:	4852      	ldr	r0, [pc, #328]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b0a:	f240 33c9 	movw	r3, #969	; 0x3c9
    3b0e:	f01e fdf9 	bl	22704 <printk>
    3b12:	4040      	eors	r0, r0
    3b14:	f380 8811 	msr	BASEPRI, r0
    3b18:	f04f 0003 	mov.w	r0, #3
    3b1c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3b1e:	f04f 0a00 	mov.w	sl, #0
    3b22:	2201      	movs	r2, #1
    3b24:	4611      	mov	r1, r2
    3b26:	4653      	mov	r3, sl
    3b28:	f8cd a000 	str.w	sl, [sp]
    3b2c:	4650      	mov	r0, sl
    3b2e:	f00e fde7 	bl	12700 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3b32:	4640      	mov	r0, r8
    3b34:	f012 fb5a 	bl	161ec <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3b38:	68bb      	ldr	r3, [r7, #8]
    3b3a:	f8cd 8018 	str.w	r8, [sp, #24]
    3b3e:	3b09      	subs	r3, #9
    3b40:	1b9e      	subs	r6, r3, r6
    3b42:	4b45      	ldr	r3, [pc, #276]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3b44:	9307      	str	r3, [sp, #28]
    3b46:	4b45      	ldr	r3, [pc, #276]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3b48:	9305      	str	r3, [sp, #20]
    3b4a:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3b4e:	4f44      	ldr	r7, [pc, #272]	; (3c60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3b50:	9308      	str	r3, [sp, #32]
    3b52:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3b56:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3b5a:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3b5e:	1cc5      	adds	r5, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3b60:	a337      	add	r3, pc, #220	; (adr r3, 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3b62:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b66:	4648      	mov	r0, r9
    3b68:	4641      	mov	r1, r8
    3b6a:	f7fd fac9 	bl	1100 <__aeabi_uldivmod>
    3b6e:	4610      	mov	r0, r2
    3b70:	4619      	mov	r1, r3
    3b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b76:	2300      	movs	r3, #0
    3b78:	f7fd fac2 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3b7c:	a330      	add	r3, pc, #192	; (adr r3, 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3b82:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3b84:	4641      	mov	r1, r8
    3b86:	4648      	mov	r0, r9
    3b88:	f7fd faba 	bl	1100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3b8c:	a32c      	add	r3, pc, #176	; (adr r3, 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3b92:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3b94:	fba4 0107 	umull	r0, r1, r4, r7
    3b98:	f7fd fab2 	bl	1100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3b9c:	b2ed      	uxtb	r5, r5
    3b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ba2:	9000      	str	r0, [sp, #0]
    3ba4:	4633      	mov	r3, r6
    3ba6:	462a      	mov	r2, r5
    3ba8:	2101      	movs	r1, #1
    3baa:	4650      	mov	r0, sl
    3bac:	f00e fd1e 	bl	125ec <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3bb0:	f030 0302 	bics.w	r3, r0, #2
    3bb4:	d00c      	beq.n	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
    3bb6:	4a25      	ldr	r2, [pc, #148]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3bb8:	4925      	ldr	r1, [pc, #148]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3bba:	4826      	ldr	r0, [pc, #152]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3bbc:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3bc0:	f01e fda0 	bl	22704 <printk>
    3bc4:	4040      	eors	r0, r0
    3bc6:	f380 8811 	msr	BASEPRI, r0
    3bca:	f04f 0003 	mov.w	r0, #3
    3bce:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3bd0:	2201      	movs	r2, #1
    3bd2:	2102      	movs	r1, #2
    3bd4:	4610      	mov	r0, r2
    3bd6:	f00d faf9 	bl	111cc <mayfly_enable>
}
    3bda:	b00d      	add	sp, #52	; 0x34
    3bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3be0:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3be4:	f020 fee6 	bl	249b4 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3be8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3bec:	f47f af23 	bne.w	3a36 <ull_central_setup+0x5e>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3bf0:	2206      	movs	r2, #6
    3bf2:	2100      	movs	r1, #0
    3bf4:	f104 0025 	add.w	r0, r4, #37	; 0x25
    3bf8:	f020 fedc 	bl	249b4 <memset>
		cc->peer_addr_type = peer_addr_type;
    3bfc:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    3bfe:	a90a      	add	r1, sp, #40	; 0x28
    3c00:	2206      	movs	r2, #6
    3c02:	f104 001f 	add.w	r0, r4, #31
    3c06:	f020 feca 	bl	2499e <memcpy>
    3c0a:	e724      	b.n	3a56 <ull_central_setup+0x7e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3c0c:	4a0f      	ldr	r2, [pc, #60]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3c0e:	4915      	ldr	r1, [pc, #84]	; (3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>)
    3c10:	4810      	ldr	r0, [pc, #64]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3c12:	f44f 7352 	mov.w	r3, #840	; 0x348
    3c16:	f01e fd75 	bl	22704 <printk>
    3c1a:	4040      	eors	r0, r0
    3c1c:	f380 8811 	msr	BASEPRI, r0
    3c20:	f04f 0003 	mov.w	r0, #3
    3c24:	df02      	svc	2
    3c26:	e6f1      	b.n	3a0c <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    3c28:	7f6b      	ldrb	r3, [r5, #29]
    3c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c2e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3c30:	1d28      	adds	r0, r5, #4
    3c32:	f015 fa69 	bl	19108 <lll_chan_id>
			cs->csa = 0x01;
    3c36:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3c38:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    3c3a:	7733      	strb	r3, [r6, #28]
    3c3c:	e730      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3c3e:	bf00      	nop
    3c40:	1afd498d 	.word	0x1afd498d
    3c44:	00000007 	.word	0x00000007
    3c48:	00018949 	.word	0x00018949
    3c4c:	0002996c 	.word	0x0002996c
    3c50:	000298a8 	.word	0x000298a8
    3c54:	00029220 	.word	0x00029220
    3c58:	0001894d 	.word	0x0001894d
    3c5c:	0001897d 	.word	0x0001897d
    3c60:	3b9aca00 	.word	0x3b9aca00
    3c64:	0002944c 	.word	0x0002944c

00003c68 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    3c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c6c:	b08f      	sub	sp, #60	; 0x3c
    3c6e:	461e      	mov	r6, r3
    3c70:	9309      	str	r3, [sp, #36]	; 0x24
    3c72:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    3c74:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3c76:	1d0a      	adds	r2, r1, #4
    3c78:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3d80 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    3c7c:	f8df b104 	ldr.w	fp, [pc, #260]	; 3d84 <ull_sched_after_mstr_slot_get+0x11c>
    3c80:	f8df a104 	ldr.w	sl, [pc, #260]	; 3d88 <ull_sched_after_mstr_slot_get+0x120>
    3c84:	f8df 9104 	ldr.w	r9, [pc, #260]	; 3d8c <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3c88:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c8a:	2100      	movs	r1, #0
    3c8c:	6031      	str	r1, [r6, #0]
{
    3c8e:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    3c90:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    3c94:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c96:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    3c98:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c9a:	9106      	str	r1, [sp, #24]
    3c9c:	af0d      	add	r7, sp, #52	; 0x34
    3c9e:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3ca0:	2302      	movs	r3, #2
    3ca2:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3ca4:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3ca8:	9600      	str	r6, [sp, #0]
    3caa:	462b      	mov	r3, r5
    3cac:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3cb0:	4621      	mov	r1, r4
    3cb2:	2000      	movs	r0, #0
    3cb4:	f00e fd66 	bl	12784 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3cb8:	2802      	cmp	r0, #2
    3cba:	d02d      	beq.n	3d18 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d130      	bne.n	3d24 <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3cc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3cc6:	2bff      	cmp	r3, #255	; 0xff
    3cc8:	d03c      	beq.n	3d44 <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3cca:	2b03      	cmp	r3, #3
    3ccc:	d1e8      	bne.n	3ca0 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3cce:	2000      	movs	r0, #0
    3cd0:	f012 fa94 	bl	161fc <ll_conn_get>
		if (conn && !conn->lll.role) {
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d0e3      	beq.n	3ca0 <ull_sched_after_mstr_slot_get+0x38>
    3cd8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    3cdc:	2b00      	cmp	r3, #0
    3cde:	dbdf      	blt.n	3ca0 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3ce0:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3ce2:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3ce6:	29ff      	cmp	r1, #255	; 0xff
    3ce8:	d00c      	beq.n	3d04 <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3cea:	9906      	ldr	r1, [sp, #24]
    3cec:	9207      	str	r2, [sp, #28]
    3cee:	4618      	mov	r0, r3
    3cf0:	9304      	str	r3, [sp, #16]
    3cf2:	f00e fda7 	bl	12844 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3cf6:	9b05      	ldr	r3, [sp, #20]
    3cf8:	9a08      	ldr	r2, [sp, #32]
    3cfa:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3cfc:	4288      	cmp	r0, r1
    3cfe:	9b04      	ldr	r3, [sp, #16]
    3d00:	9a07      	ldr	r2, [sp, #28]
    3d02:	d822      	bhi.n	3d4a <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3d08:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3d0c:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3d0e:	e7c7      	b.n	3ca0 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3d10:	4621      	mov	r1, r4
    3d12:	2000      	movs	r0, #0
    3d14:	f00e fd7c 	bl	12810 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d1a:	2b02      	cmp	r3, #2
    3d1c:	d0f8      	beq.n	3d10 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    3d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3d20:	2b00      	cmp	r3, #0
    3d22:	d0ce      	beq.n	3cc2 <ull_sched_after_mstr_slot_get+0x5a>
    3d24:	2373      	movs	r3, #115	; 0x73
    3d26:	465a      	mov	r2, fp
    3d28:	4651      	mov	r1, sl
    3d2a:	4648      	mov	r0, r9
    3d2c:	f01e fcea 	bl	22704 <printk>
    3d30:	4040      	eors	r0, r0
    3d32:	f380 8811 	msr	BASEPRI, r0
    3d36:	f04f 0003 	mov.w	r0, #3
    3d3a:	df02      	svc	2
		if (ticker_id == 0xff) {
    3d3c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3d40:	2bff      	cmp	r3, #255	; 0xff
    3d42:	d1c2      	bne.n	3cca <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    3d44:	9b04      	ldr	r3, [sp, #16]
    3d46:	2bff      	cmp	r3, #255	; 0xff
    3d48:	d010      	beq.n	3d6c <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3d4a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3d4e:	4810      	ldr	r0, [pc, #64]	; (3d90 <ull_sched_after_mstr_slot_get+0x128>)
    3d50:	4413      	add	r3, r2
    3d52:	fba3 0100 	umull	r0, r1, r3, r0
    3d56:	2207      	movs	r2, #7
    3d58:	fb02 1103 	mla	r1, r2, r3, r1
    3d5c:	a306      	add	r3, pc, #24	; (adr r3, 3d78 <ull_sched_after_mstr_slot_get+0x110>)
    3d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d62:	f7fd f9cd 	bl	1100 <__aeabi_uldivmod>
    3d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3d68:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3d6a:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    3d6c:	b00f      	add	sp, #60	; 0x3c
    3d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d72:	bf00      	nop
    3d74:	f3af 8000 	nop.w
    3d78:	3b9aca00 	.word	0x3b9aca00
    3d7c:	00000000 	.word	0x00000000
    3d80:	00018d19 	.word	0x00018d19
    3d84:	000299fc 	.word	0x000299fc
    3d88:	00029a40 	.word	0x00029a40
    3d8c:	00029220 	.word	0x00029220
    3d90:	1afd498d 	.word	0x1afd498d
    3d94:	00000000 	.word	0x00000000

00003d98 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3d98:	b570      	push	{r4, r5, r6, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    3d9e:	9201      	str	r2, [sp, #4]
{
    3da0:	4615      	mov	r5, r2
    3da2:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3da4:	aa01      	add	r2, sp, #4
    3da6:	2002      	movs	r0, #2
    3da8:	f7ff ff5e 	bl	3c68 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3dac:	6823      	ldr	r3, [r4, #0]
    3dae:	b30b      	cbz	r3, 3df4 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3db0:	9801      	ldr	r0, [sp, #4]
    3db2:	1b43      	subs	r3, r0, r5
    3db4:	021b      	lsls	r3, r3, #8
    3db6:	d41f      	bmi.n	3df8 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3db8:	4629      	mov	r1, r5
    3dba:	f00e fd43 	bl	12844 <ticker_ticks_diff_get>
    3dbe:	4a1a      	ldr	r2, [pc, #104]	; (3e28 <after_mstr_offset_get+0x90>)
    3dc0:	4603      	mov	r3, r0
    3dc2:	2107      	movs	r1, #7
    3dc4:	fba0 0202 	umull	r0, r2, r0, r2
    3dc8:	fb01 2103 	mla	r1, r1, r3, r2
    3dcc:	a314      	add	r3, pc, #80	; (adr r3, 3e20 <after_mstr_offset_get+0x88>)
    3dce:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dd2:	f7fd f995 	bl	1100 <__aeabi_uldivmod>
    3dd6:	6822      	ldr	r2, [r4, #0]
    3dd8:	4402      	add	r2, r0
    3dda:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3ddc:	2a00      	cmp	r2, #0
    3dde:	db09      	blt.n	3df4 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3de0:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3de4:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3de8:	4290      	cmp	r0, r2
    3dea:	d203      	bcs.n	3df4 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3dec:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3dee:	4282      	cmp	r2, r0
    3df0:	d8fc      	bhi.n	3dec <after_mstr_offset_get+0x54>
    3df2:	6022      	str	r2, [r4, #0]
		}
	}
}
    3df4:	b002      	add	sp, #8
    3df6:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3df8:	4601      	mov	r1, r0
    3dfa:	4628      	mov	r0, r5
    3dfc:	f00e fd22 	bl	12844 <ticker_ticks_diff_get>
    3e00:	4a09      	ldr	r2, [pc, #36]	; (3e28 <after_mstr_offset_get+0x90>)
    3e02:	4603      	mov	r3, r0
    3e04:	2107      	movs	r1, #7
    3e06:	fba0 0202 	umull	r0, r2, r0, r2
    3e0a:	fb01 2103 	mla	r1, r1, r3, r2
    3e0e:	a304      	add	r3, pc, #16	; (adr r3, 3e20 <after_mstr_offset_get+0x88>)
    3e10:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e14:	f7fd f974 	bl	1100 <__aeabi_uldivmod>
    3e18:	6822      	ldr	r2, [r4, #0]
    3e1a:	1a12      	subs	r2, r2, r0
    3e1c:	6022      	str	r2, [r4, #0]
    3e1e:	e7dd      	b.n	3ddc <after_mstr_offset_get+0x44>
    3e20:	3b9aca00 	.word	0x3b9aca00
    3e24:	00000000 	.word	0x00000000
    3e28:	1afd498d 	.word	0x1afd498d
    3e2c:	00000000 	.word	0x00000000

00003e30 <ull_sched_mfy_win_offset_select>:
{
    3e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e34:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    3e38:	b088      	sub	sp, #32
    3e3a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e3c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3e40:	4843      	ldr	r0, [pc, #268]	; (3f50 <ull_sched_mfy_win_offset_select+0x120>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e42:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e44:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e48:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e4a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e4c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e50:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e54:	fba1 0100 	umull	r0, r1, r1, r0
    3e58:	a33b      	add	r3, pc, #236	; (adr r3, 3f48 <ull_sched_mfy_win_offset_select+0x118>)
    3e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e5e:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e60:	f7fd f94e 	bl	1100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    3e64:	f10d 030f 	add.w	r3, sp, #15
    3e68:	9501      	str	r5, [sp, #4]
    3e6a:	9300      	str	r3, [sp, #0]
    3e6c:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e70:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    3e72:	aa04      	add	r2, sp, #16
    3e74:	4620      	mov	r0, r4
    3e76:	2101      	movs	r1, #1
    3e78:	f014 ff50 	bl	18d1c <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    3e7c:	f89d 800f 	ldrb.w	r8, [sp, #15]
    3e80:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    3e84:	fa5f fc8c 	uxtb.w	ip, ip
    3e88:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    3e8c:	4630      	mov	r0, r6
    3e8e:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    3e92:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    3e96:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    3e9a:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    3e9e:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    3ea0:	f1b8 0f00 	cmp.w	r8, #0
    3ea4:	d00a      	beq.n	3ebc <ull_sched_mfy_win_offset_select+0x8c>
    3ea6:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    3ea8:	4572      	cmp	r2, lr
    3eaa:	d004      	beq.n	3eb6 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    3eac:	8819      	ldrh	r1, [r3, #0]
    3eae:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    3eb0:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    3eb4:	d013      	beq.n	3ede <ull_sched_mfy_win_offset_select+0xae>
		while (offset_index_m < offset_m_max) {
    3eb6:	3302      	adds	r3, #2
    3eb8:	459c      	cmp	ip, r3
    3eba:	d1f5      	bne.n	3ea8 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    3ebc:	3702      	adds	r7, #2
    3ebe:	42be      	cmp	r6, r7
    3ec0:	d1ed      	bne.n	3e9e <ull_sched_mfy_win_offset_select+0x6e>
	} else if (!has_offset_s) {
    3ec2:	bb08      	cbnz	r0, 3f08 <ull_sched_mfy_win_offset_select+0xd8>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    3ec4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3ec8:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    3ecc:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3ed0:	fb03 f202 	mul.w	r2, r3, r2
    3ed4:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
	dst[1] = val >> 8;
    3ed8:	0a18      	lsrs	r0, r3, #8
	dst[0] = val;
    3eda:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    3edc:	e009      	b.n	3ef2 <ull_sched_mfy_win_offset_select+0xc2>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3ede:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    3ee2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3ee6:	fb02 f303 	mul.w	r3, r2, r3
    3eea:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    3eee:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
    3ef0:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    3ef2:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    3ef4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    3ef8:	2204      	movs	r2, #4
    3efa:	f362 0302 	bfi	r3, r2, #0, #3
    3efe:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    3f02:	b008      	add	sp, #32
    3f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx = CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    3f08:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		pdu_ctrl_tx->len =
    3f0c:	2203      	movs	r2, #3
    3f0e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f12:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3f16:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    3f1a:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f1c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    3f20:	2011      	movs	r0, #17
    3f22:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f26:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3f2a:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3f2e:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f30:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3f32:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f36:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3f38:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    3f3c:	b008      	add	sp, #32
    3f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f42:	bf00      	nop
    3f44:	f3af 8000 	nop.w
    3f48:	1afd498d 	.word	0x1afd498d
    3f4c:	00000007 	.word	0x00000007
    3f50:	3b9aca00 	.word	0x3b9aca00
    3f54:	00000000 	.word	0x00000000

00003f58 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    3f58:	b538      	push	{r3, r4, r5, lr}
    3f5a:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    3f5c:	f017 f86c 	bl	1b038 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    3f60:	7da2      	ldrb	r2, [r4, #22]
    3f62:	f3c2 0341 	ubfx	r3, r2, #1, #2
    3f66:	3301      	adds	r3, #1
    3f68:	f003 0303 	and.w	r3, r3, #3
    3f6c:	2b03      	cmp	r3, #3
    3f6e:	d034      	beq.n	3fda <isr_window+0x82>
    3f70:	f363 0242 	bfi	r2, r3, #1, #2
    3f74:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    3f76:	f103 0025 	add.w	r0, r3, #37	; 0x25
    3f7a:	f016 fce7 	bl	1a94c <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    3f7e:	6863      	ldr	r3, [r4, #4]
    3f80:	b30b      	cbz	r3, 3fc6 <isr_window+0x6e>
    3f82:	6923      	ldr	r3, [r4, #16]
    3f84:	b1fb      	cbz	r3, 3fc6 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    3f86:	f018 fbd7 	bl	1c738 <radio_tmr_start_get>
    3f8a:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    3f8c:	f00e fc58 	bl	12840 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3f90:	1cc1      	adds	r1, r0, #3
    3f92:	2000      	movs	r0, #0
    3f94:	f018 fb9e 	bl	1c6d4 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    3f98:	f018 fc00 	bl	1c79c <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    3f9c:	f018 fbcc 	bl	1c738 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3fa0:	4629      	mov	r1, r5
    3fa2:	f00e fc4f 	bl	12844 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3fa6:	4912      	ldr	r1, [pc, #72]	; (3ff0 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3fa8:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3faa:	2207      	movs	r2, #7
    3fac:	fba0 0101 	umull	r0, r1, r0, r1
    3fb0:	fb02 1103 	mla	r1, r2, r3, r1
    3fb4:	a30c      	add	r3, pc, #48	; (adr r3, 3fe8 <isr_window+0x90>)
    3fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fba:	f7fd f8a1 	bl	1100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    3fbe:	6923      	ldr	r3, [r4, #16]
    3fc0:	1a1b      	subs	r3, r3, r0
    3fc2:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    3fc4:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    3fc6:	f00e fc3b 	bl	12840 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3fca:	1cc1      	adds	r1, r0, #3
    3fcc:	2000      	movs	r0, #0
    3fce:	f018 fb81 	bl	1c6d4 <radio_tmr_start_tick>
}
    3fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    3fd6:	f018 bbe1 	b.w	1c79c <radio_tmr_end_capture>
		lll->chan = 0U;
    3fda:	f36f 0242 	bfc	r2, #1, #2
    3fde:	75a2      	strb	r2, [r4, #22]
    3fe0:	2025      	movs	r0, #37	; 0x25
    3fe2:	e7ca      	b.n	3f7a <isr_window+0x22>
    3fe4:	f3af 8000 	nop.w
    3fe8:	3b9aca00 	.word	0x3b9aca00
    3fec:	00000000 	.word	0x00000000
    3ff0:	1afd498d 	.word	0x1afd498d
    3ff4:	00000000 	.word	0x00000000

00003ff8 <isr_rx>:
{
    3ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ffc:	b087      	sub	sp, #28
    3ffe:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    4000:	f018 f97c 	bl	1c2fc <radio_is_done>
	if (trx_done) {
    4004:	b2c0      	uxtb	r0, r0
    4006:	b950      	cbnz	r0, 401e <CONFIG_USB_DEVICE_PID+0xd>
	lll_isr_status_reset();
    4008:	f016 fcf6 	bl	1a9f8 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    400c:	48b8      	ldr	r0, [pc, #736]	; (42f0 <CONFIG_USB_DEVICE_PID+0x2df>)
    400e:	4621      	mov	r1, r4
    4010:	f018 f856 	bl	1c0c0 <radio_isr_set>
}
    4014:	b007      	add	sp, #28
    4016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    401a:	f018 b945 	b.w	1c2a8 <radio_disable>
		crc_ok = radio_crc_is_valid();
    401e:	f018 f98d 	bl	1c33c <radio_crc_is_valid>
    4022:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    4024:	f018 faa8 	bl	1c578 <radio_filter_has_match>
    4028:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    402a:	f018 faaf 	bl	1c58c <radio_filter_match_get>
    402e:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    4030:	f018 fcaa 	bl	1c988 <radio_ar_has_match>
    4034:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    4036:	f018 fc8b 	bl	1c950 <radio_ar_match_get>
    403a:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    403c:	f018 fa60 	bl	1c500 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    4040:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    4042:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    4044:	f018 fa42 	bl	1c4cc <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    4048:	f016 fcd6 	bl	1a9f8 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    404c:	2d00      	cmp	r5, #0
    404e:	d0dd      	beq.n	400c <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    4050:	2001      	movs	r0, #1
    4052:	f011 f815 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    4056:	4605      	mov	r5, r0
    4058:	2800      	cmp	r0, #0
    405a:	f000 817c 	beq.w	4356 <CONFIG_USB_DEVICE_PID+0x345>
	rl_idx = devmatch_ok ?
    405e:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    4062:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    4064:	f040 80d5 	bne.w	4212 <CONFIG_USB_DEVICE_PID+0x201>
    4068:	2e00      	cmp	r6, #0
    406a:	f040 80cc 	bne.w	4206 <CONFIG_USB_DEVICE_PID+0x1f5>
    406e:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    4070:	465a      	mov	r2, fp
    4072:	463b      	mov	r3, r7
    4074:	4631      	mov	r1, r6
    4076:	4620      	mov	r0, r4
    4078:	f017 fa0c 	bl	1b494 <lll_scan_isr_rx_check>
	if (has_adva &&
    407c:	2800      	cmp	r0, #0
    407e:	d0c5      	beq.n	400c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
    4080:	6863      	ldr	r3, [r4, #4]
	bool dir_report = false;
    4082:	2200      	movs	r2, #0
		rssi_ready = radio_rssi_is_ready();
    4084:	fa5f f888 	uxtb.w	r8, r8
	bool dir_report = false;
    4088:	f88d 2013 	strb.w	r2, [sp, #19]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    408c:	2b00      	cmp	r3, #0
    408e:	f000 80dc 	beq.w	424a <CONFIG_USB_DEVICE_PID+0x239>
    4092:	6863      	ldr	r3, [r4, #4]
    4094:	f893 3020 	ldrb.w	r3, [r3, #32]
    4098:	0799      	lsls	r1, r3, #30
    409a:	f100 80d6 	bmi.w	424a <CONFIG_USB_DEVICE_PID+0x239>
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    409e:	7f2b      	ldrb	r3, [r5, #28]
    40a0:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    40a4:	2907      	cmp	r1, #7
    40a6:	d0b1      	beq.n	400c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    40a8:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    40aa:	0712      	lsls	r2, r2, #28
    40ac:	f140 8161 	bpl.w	4372 <CONFIG_USB_DEVICE_PID+0x361>
    40b0:	2900      	cmp	r1, #0
    40b2:	f040 80b7 	bne.w	4224 <CONFIG_USB_DEVICE_PID+0x213>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    40b6:	7f6b      	ldrb	r3, [r5, #29]
    40b8:	2b25      	cmp	r3, #37	; 0x25
    40ba:	f200 812a 	bhi.w	4312 <CONFIG_USB_DEVICE_PID+0x301>
			rx = ull_pdu_rx_alloc_peek(4);
    40be:	2004      	movs	r0, #4
    40c0:	f010 ffde 	bl	15080 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    40c4:	2800      	cmp	r0, #0
    40c6:	d0a1      	beq.n	400c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    40c8:	f018 fb70 	bl	1c7ac <radio_tmr_end_get>
		if (!lll->ticks_window) {
    40cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    40ce:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    40d0:	b943      	cbnz	r3, 40e4 <CONFIG_USB_DEVICE_PID+0xd3>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    40d2:	8c23      	ldrh	r3, [r4, #32]
    40d4:	f240 2271 	movw	r2, #625	; 0x271
    40d8:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    40dc:	fbb0 f2f3 	udiv	r2, r0, r3
    40e0:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    40e4:	6823      	ldr	r3, [r4, #0]
    40e6:	691a      	ldr	r2, [r3, #16]
    40e8:	4b82      	ldr	r3, [pc, #520]	; (42f4 <CONFIG_USB_DEVICE_PID+0x2e3>)
    40ea:	2107      	movs	r1, #7
    40ec:	fba2 0303 	umull	r0, r3, r2, r3
    40f0:	fb01 3102 	mla	r1, r1, r2, r3
    40f4:	a37c      	add	r3, pc, #496	; (adr r3, 42e8 <CONFIG_USB_DEVICE_PID+0x2d7>)
    40f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    40fa:	f7fd f801 	bl	1100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    40fe:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    4102:	4543      	cmp	r3, r8
    4104:	d382      	bcc.n	400c <isr_rx+0x14>
		radio_switch_complete_and_disable();
    4106:	f018 f9d3 	bl	1c4b0 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    410a:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    410c:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    410e:	f015 ff0d 	bl	19f2c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    4112:	7de3      	ldrb	r3, [r4, #23]
    4114:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4116:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    4118:	f140 81ce 	bpl.w	44b8 <CONFIG_USB_DEVICE_PID+0x4a7>
    411c:	2800      	cmp	r0, #0
    411e:	f000 81cb 	beq.w	44b8 <CONFIG_USB_DEVICE_PID+0x4a7>
			init_addr = lrpa->val;
    4122:	4683      	mov	fp, r0
			init_tx_addr = 1;
    4124:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    4128:	f018 f916 	bl	1c358 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    412c:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    412e:	aa05      	add	r2, sp, #20
    4130:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    4132:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    4136:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    4138:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    413a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    413e:	9200      	str	r2, [sp, #0]
    4140:	4620      	mov	r0, r4
    4142:	2200      	movs	r2, #0
    4144:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    4148:	f017 f9be 	bl	1b4c8 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    414c:	4650      	mov	r0, sl
    414e:	f018 f891 	bl	1c274 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4152:	f018 f8c9 	bl	1c2e8 <radio_is_ready>
    4156:	2800      	cmp	r0, #0
    4158:	f040 81c4 	bne.w	44e4 <CONFIG_USB_DEVICE_PID+0x4d3>
		radio_isr_set(isr_done_cleanup, lll);
    415c:	4866      	ldr	r0, [pc, #408]	; (42f8 <CONFIG_USB_DEVICE_PID+0x2e7>)
    415e:	4621      	mov	r1, r4
    4160:	f017 ffae 	bl	1c0c0 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    4164:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    4166:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    4168:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    416c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    4170:	f042 0201 	orr.w	r2, r2, #1
    4174:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    4178:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    417a:	f010 ff9f 	bl	150bc <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    417e:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    4180:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4182:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    4184:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4188:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    418a:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    418c:	4651      	mov	r1, sl
    418e:	2224      	movs	r2, #36	; 0x24
    4190:	301c      	adds	r0, #28
    4192:	f020 fc04 	bl	2499e <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    4196:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    419a:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    419e:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    41a2:	f365 1345 	bfi	r3, r5, #5, #1
    41a6:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    41aa:	f018 fac5 	bl	1c738 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    41ae:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    41b0:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    41b4:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    41b6:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    41b8:	f018 f86a 	bl	1c290 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    41bc:	2e00      	cmp	r6, #0
    41be:	bf08      	it	eq
    41c0:	27ff      	moveq	r7, #255	; 0xff
    41c2:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    41c6:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    41c8:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    41ca:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    41ce:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    41d2:	d003      	beq.n	41dc <CONFIG_USB_DEVICE_PID+0x1cb>
    41d4:	f1b9 0300 	subs.w	r3, r9, #0
    41d8:	bf18      	it	ne
    41da:	2301      	movne	r3, #1
    41dc:	f898 201a 	ldrb.w	r2, [r8, #26]
    41e0:	f363 0200 	bfi	r2, r3, #0, #1
    41e4:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    41e8:	f010 ff68 	bl	150bc <ull_pdu_rx_alloc>
    41ec:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    41ee:	4641      	mov	r1, r8
    41f0:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    41f4:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    41f8:	f010 ff76 	bl	150e8 <ull_rx_put>
		ull_rx_sched();
    41fc:	f010 ff84 	bl	15108 <ull_rx_sched>
}
    4200:	b007      	add	sp, #28
    4202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    4206:	fa5f f08a 	uxtb.w	r0, sl
    420a:	f015 ff1d 	bl	1a048 <ull_filter_lll_rl_irk_idx>
    420e:	4607      	mov	r7, r0
    4210:	e72e      	b.n	4070 <CONFIG_USB_DEVICE_PID+0x5f>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    4212:	7da0      	ldrb	r0, [r4, #22]
    4214:	fa5f f189 	uxtb.w	r1, r9
    4218:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    421c:	f015 feaa 	bl	19f74 <ull_filter_lll_rl_idx>
    4220:	4607      	mov	r7, r0
    4222:	e725      	b.n	4070 <CONFIG_USB_DEVICE_PID+0x5f>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4224:	2901      	cmp	r1, #1
    4226:	d115      	bne.n	4254 <CONFIG_USB_DEVICE_PID+0x243>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4228:	7f6b      	ldrb	r3, [r5, #29]
    422a:	2b0c      	cmp	r3, #12
    422c:	f47f aeee 	bne.w	400c <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    4230:	7f2a      	ldrb	r2, [r5, #28]
    4232:	9700      	str	r7, [sp, #0]
    4234:	2300      	movs	r3, #0
    4236:	9301      	str	r3, [sp, #4]
    4238:	09d2      	lsrs	r2, r2, #7
    423a:	f105 0324 	add.w	r3, r5, #36	; 0x24
    423e:	4620      	mov	r0, r4
    4240:	f017 f87a 	bl	1b338 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    4244:	2800      	cmp	r0, #0
    4246:	f47f af3a 	bne.w	40be <CONFIG_USB_DEVICE_PID+0xad>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    424a:	7f29      	ldrb	r1, [r5, #28]
    424c:	f001 010f 	and.w	r1, r1, #15
    4250:	2900      	cmp	r1, #0
    4252:	d053      	beq.n	42fc <CONFIG_USB_DEVICE_PID+0x2eb>
    4254:	2906      	cmp	r1, #6
    4256:	d051      	beq.n	42fc <CONFIG_USB_DEVICE_PID+0x2eb>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4258:	2902      	cmp	r1, #2
    425a:	f000 809d 	beq.w	4398 <CONFIG_USB_DEVICE_PID+0x387>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    425e:	2901      	cmp	r1, #1
    4260:	d157      	bne.n	4312 <CONFIG_USB_DEVICE_PID+0x301>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4262:	7f6b      	ldrb	r3, [r5, #29]
    4264:	2b0c      	cmp	r3, #12
    4266:	f47f aed1 	bne.w	400c <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    426a:	7f2a      	ldrb	r2, [r5, #28]
    426c:	9700      	str	r7, [sp, #0]
    426e:	f10d 0313 	add.w	r3, sp, #19
    4272:	9301      	str	r3, [sp, #4]
    4274:	09d2      	lsrs	r2, r2, #7
    4276:	f105 0324 	add.w	r3, r5, #36	; 0x24
    427a:	2100      	movs	r1, #0
    427c:	4620      	mov	r0, r4
    427e:	f017 f85b 	bl	1b338 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    4282:	2800      	cmp	r0, #0
    4284:	d045      	beq.n	4312 <CONFIG_USB_DEVICE_PID+0x301>
		 (pdu_adv_rx->len != 0) &&
    4286:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    4288:	2b00      	cmp	r3, #0
    428a:	f43f aebf 	beq.w	400c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    428e:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    4290:	b12b      	cbz	r3, 429e <CONFIG_USB_DEVICE_PID+0x28d>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    4292:	7f2b      	ldrb	r3, [r5, #28]
    4294:	f003 030f 	and.w	r3, r3, #15
    4298:	2b07      	cmp	r3, #7
    429a:	f47f aeb7 	bne.w	400c <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    429e:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    42a0:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    42a4:	f010 feec 	bl	15080 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    42a8:	4605      	mov	r5, r0
    42aa:	2800      	cmp	r0, #0
    42ac:	f43f aeae 	beq.w	400c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    42b0:	f010 ff04 	bl	150bc <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    42b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    42b8:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    42ba:	2305      	movs	r3, #5
    42bc:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    42be:	f1b8 0f00 	cmp.w	r8, #0
    42c2:	d165      	bne.n	4390 <CONFIG_USB_DEVICE_PID+0x37f>
    42c4:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    42c6:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    42c8:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    42ca:	2e00      	cmp	r6, #0
    42cc:	bf08      	it	eq
    42ce:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    42d0:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    42d4:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    42d6:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    42d8:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    42da:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    42dc:	f010 ff04 	bl	150e8 <ull_rx_put>
	ull_rx_sched();
    42e0:	f010 ff12 	bl	15108 <ull_rx_sched>
	if (!err) {
    42e4:	e692      	b.n	400c <isr_rx+0x14>
    42e6:	bf00      	nop
    42e8:	3b9aca00 	.word	0x3b9aca00
    42ec:	00000000 	.word	0x00000000
    42f0:	0001b0f1 	.word	0x0001b0f1
    42f4:	1afd498d 	.word	0x1afd498d
    42f8:	0001b2e9 	.word	0x0001b2e9
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    42fc:	7f6b      	ldrb	r3, [r5, #29]
    42fe:	2b25      	cmp	r3, #37	; 0x25
    4300:	d807      	bhi.n	4312 <CONFIG_USB_DEVICE_PID+0x301>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    4302:	7da2      	ldrb	r2, [r4, #22]
    4304:	0692      	lsls	r2, r2, #26
    4306:	d502      	bpl.n	430e <CONFIG_USB_DEVICE_PID+0x2fd>
		   !lll->conn) {
    4308:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    430a:	2a00      	cmp	r2, #0
    430c:	d046      	beq.n	439c <CONFIG_USB_DEVICE_PID+0x38b>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    430e:	2b25      	cmp	r3, #37	; 0x25
    4310:	d9ba      	bls.n	4288 <CONFIG_USB_DEVICE_PID+0x277>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4312:	7f2b      	ldrb	r3, [r5, #28]
    4314:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    4318:	2b04      	cmp	r3, #4
    431a:	f47f ae77 	bne.w	400c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    431e:	7f6b      	ldrb	r3, [r5, #29]
    4320:	2b25      	cmp	r3, #37	; 0x25
    4322:	f63f ae73 	bhi.w	400c <isr_rx+0x14>
		   (lll->state != 0U) &&
    4326:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    4328:	07d9      	lsls	r1, r3, #31
    432a:	f57f ae6f 	bpl.w	400c <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    432e:	f018 f813 	bl	1c358 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4332:	7f2b      	ldrb	r3, [r5, #28]
    4334:	7802      	ldrb	r2, [r0, #0]
    4336:	f3c3 1380 	ubfx	r3, r3, #6, #1
    433a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    433e:	f47f ae65 	bne.w	400c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    4342:	3008      	adds	r0, #8
    4344:	2206      	movs	r2, #6
    4346:	f105 011e 	add.w	r1, r5, #30
    434a:	f020 fb17 	bl	2497c <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    434e:	2800      	cmp	r0, #0
    4350:	f47f ae5c 	bne.w	400c <isr_rx+0x14>
    4354:	e797      	b.n	4286 <CONFIG_USB_DEVICE_PID+0x275>
	LL_ASSERT(node_rx);
    4356:	4a71      	ldr	r2, [pc, #452]	; (451c <CONFIG_USB_DEVICE_PID+0x50b>)
    4358:	4971      	ldr	r1, [pc, #452]	; (4520 <CONFIG_USB_DEVICE_PID+0x50f>)
    435a:	4872      	ldr	r0, [pc, #456]	; (4524 <CONFIG_USB_DEVICE_PID+0x513>)
    435c:	f240 23c3 	movw	r3, #707	; 0x2c3
    4360:	f01e f9d0 	bl	22704 <printk>
    4364:	4040      	eors	r0, r0
    4366:	f380 8811 	msr	BASEPRI, r0
    436a:	f04f 0003 	mov.w	r0, #3
    436e:	df02      	svc	2
    4370:	e675      	b.n	405e <CONFIG_USB_DEVICE_PID+0x4d>
	if (rl_idx != FILTER_IDX_NONE) {
    4372:	2fff      	cmp	r7, #255	; 0xff
    4374:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    4378:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    437c:	d078      	beq.n	4470 <CONFIG_USB_DEVICE_PID+0x45f>
		return (rl_idx == lll->rl_idx);
    437e:	7e23      	ldrb	r3, [r4, #24]
    4380:	1bdb      	subs	r3, r3, r7
    4382:	fab3 f383 	clz	r3, r3
    4386:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    4388:	2b00      	cmp	r3, #0
    438a:	f47f ae91 	bne.w	40b0 <CONFIG_USB_DEVICE_PID+0x9f>
    438e:	e75f      	b.n	4250 <CONFIG_USB_DEVICE_PID+0x23f>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    4390:	f018 f8a8 	bl	1c4e4 <radio_rssi_get>
    4394:	b2c0      	uxtb	r0, r0
    4396:	e796      	b.n	42c6 <CONFIG_USB_DEVICE_PID+0x2b5>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4398:	7f6b      	ldrb	r3, [r5, #29]
    439a:	e7b8      	b.n	430e <CONFIG_USB_DEVICE_PID+0x2fd>
		radio_tmr_tifs_set(EVENT_IFS_US);
    439c:	2096      	movs	r0, #150	; 0x96
    439e:	f018 f90b 	bl	1c5b8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    43a2:	2000      	movs	r0, #0
    43a4:	f017 ffdc 	bl	1c360 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    43a8:	2003      	movs	r0, #3
    43aa:	f010 fe69 	bl	15080 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    43ae:	4681      	mov	r9, r0
    43b0:	2800      	cmp	r0, #0
    43b2:	f43f ae2b 	beq.w	400c <isr_rx+0x14>
	ull_pdu_rx_alloc();
    43b6:	f010 fe81 	bl	150bc <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    43ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43be:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    43c2:	2305      	movs	r3, #5
    43c4:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    43c8:	f1b8 0f00 	cmp.w	r8, #0
    43cc:	d170      	bne.n	44b0 <CONFIG_USB_DEVICE_PID+0x49f>
    43ce:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    43d0:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    43d2:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    43d6:	bf14      	ite	ne
    43d8:	463b      	movne	r3, r7
    43da:	23ff      	moveq	r3, #255	; 0xff
    43dc:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    43e0:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    43e4:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    43e8:	f36f 0341 	bfc	r3, #1, #1
    43ec:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    43f0:	4649      	mov	r1, r9
    43f2:	f010 fe79 	bl	150e8 <ull_rx_put>
	ull_rx_sched();
    43f6:	f010 fe87 	bl	15108 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    43fa:	f017 ffad 	bl	1c358 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    43fe:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    4400:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4402:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4406:	7832      	ldrb	r2, [r6, #0]
    4408:	01db      	lsls	r3, r3, #7
    440a:	f002 0270 	and.w	r2, r2, #112	; 0x70
    440e:	f043 0303 	orr.w	r3, r3, #3
    4412:	4313      	orrs	r3, r2
    4414:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4416:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4418:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    441a:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    441c:	f015 fd86 	bl	19f2c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    4420:	7de3      	ldrb	r3, [r4, #23]
    4422:	079f      	lsls	r7, r3, #30
    4424:	d54f      	bpl.n	44c6 <CONFIG_USB_DEVICE_PID+0x4b5>
    4426:	2800      	cmp	r0, #0
    4428:	d04d      	beq.n	44c6 <CONFIG_USB_DEVICE_PID+0x4b5>
			pdu_tx->tx_addr = 1;
    442a:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    442c:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    442e:	4630      	mov	r0, r6
    4430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4434:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4438:	2206      	movs	r2, #6
    443a:	f020 fab0 	bl	2499e <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    443e:	2206      	movs	r2, #6
    4440:	f105 011e 	add.w	r1, r5, #30
    4444:	f106 0008 	add.w	r0, r6, #8
    4448:	f020 faa9 	bl	2499e <memcpy>
		radio_pkt_tx_set(pdu_tx);
    444c:	4630      	mov	r0, r6
    444e:	f017 ff11 	bl	1c274 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4452:	f017 ff49 	bl	1c2e8 <radio_is_ready>
    4456:	2800      	cmp	r0, #0
    4458:	d152      	bne.n	4500 <CONFIG_USB_DEVICE_PID+0x4ef>
		radio_tmr_end_capture();
    445a:	f018 f99f 	bl	1c79c <radio_tmr_end_capture>
		lll->state = 1U;
    445e:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4460:	4831      	ldr	r0, [pc, #196]	; (4528 <CONFIG_USB_DEVICE_PID+0x517>)
		lll->state = 1U;
    4462:	f043 0301 	orr.w	r3, r3, #1
    4466:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4468:	4621      	mov	r1, r4
    446a:	f017 fe29 	bl	1c0c0 <radio_isr_set>
	if (!err) {
    446e:	e6c7      	b.n	4200 <CONFIG_USB_DEVICE_PID+0x1ef>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    4470:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    4474:	aa05      	add	r2, sp, #20
    4476:	4651      	mov	r1, sl
    4478:	4648      	mov	r0, r9
    447a:	f015 fe9b 	bl	1a1b4 <ull_filter_lll_rl_addr_allowed>
    447e:	2800      	cmp	r0, #0
    4480:	f43f aee3 	beq.w	424a <CONFIG_USB_DEVICE_PID+0x239>
	return ((lll->adv_addr_type == addr_type) &&
    4484:	7de3      	ldrb	r3, [r4, #23]
    4486:	f003 0301 	and.w	r3, r3, #1
    448a:	454b      	cmp	r3, r9
    448c:	f47f aedd 	bne.w	424a <CONFIG_USB_DEVICE_PID+0x239>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    4490:	4651      	mov	r1, sl
    4492:	2206      	movs	r2, #6
    4494:	f104 0008 	add.w	r0, r4, #8
    4498:	f020 fa70 	bl	2497c <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    449c:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    449e:	fab0 f380 	clz	r3, r0
    44a2:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    44a4:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    44a8:	2b00      	cmp	r3, #0
    44aa:	f47f ae01 	bne.w	40b0 <CONFIG_USB_DEVICE_PID+0x9f>
    44ae:	e6cf      	b.n	4250 <CONFIG_USB_DEVICE_PID+0x23f>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    44b0:	f018 f818 	bl	1c4e4 <radio_rssi_get>
    44b4:	b2c3      	uxtb	r3, r0
    44b6:	e78b      	b.n	43d0 <CONFIG_USB_DEVICE_PID+0x3bf>
			init_tx_addr = lll->init_addr_type;
    44b8:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    44bc:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    44c0:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    44c4:	e630      	b.n	4128 <CONFIG_USB_DEVICE_PID+0x117>
			pdu_tx->tx_addr = lll->init_addr_type;
    44c6:	7da3      	ldrb	r3, [r4, #22]
    44c8:	7832      	ldrb	r2, [r6, #0]
    44ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
    44ce:	4630      	mov	r0, r6
    44d0:	f363 1286 	bfi	r2, r3, #6, #1
    44d4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    44d8:	f104 0119 	add.w	r1, r4, #25
    44dc:	2206      	movs	r2, #6
    44de:	f020 fa5e 	bl	2499e <memcpy>
    44e2:	e7ac      	b.n	443e <CONFIG_USB_DEVICE_PID+0x42d>
		LL_ASSERT(!radio_is_ready());
    44e4:	4a0d      	ldr	r2, [pc, #52]	; (451c <CONFIG_USB_DEVICE_PID+0x50b>)
    44e6:	4911      	ldr	r1, [pc, #68]	; (452c <CONFIG_USB_DEVICE_PID+0x51b>)
    44e8:	480e      	ldr	r0, [pc, #56]	; (4524 <CONFIG_USB_DEVICE_PID+0x513>)
    44ea:	f240 4391 	movw	r3, #1169	; 0x491
    44ee:	f01e f909 	bl	22704 <printk>
    44f2:	4040      	eors	r0, r0
    44f4:	f380 8811 	msr	BASEPRI, r0
    44f8:	f04f 0003 	mov.w	r0, #3
    44fc:	df02      	svc	2
    44fe:	e62d      	b.n	415c <CONFIG_USB_DEVICE_PID+0x14b>
		LL_ASSERT(!radio_is_ready());
    4500:	4a06      	ldr	r2, [pc, #24]	; (451c <CONFIG_USB_DEVICE_PID+0x50b>)
    4502:	490a      	ldr	r1, [pc, #40]	; (452c <CONFIG_USB_DEVICE_PID+0x51b>)
    4504:	4807      	ldr	r0, [pc, #28]	; (4524 <CONFIG_USB_DEVICE_PID+0x513>)
    4506:	f240 5316 	movw	r3, #1302	; 0x516
    450a:	f01e f8fb 	bl	22704 <printk>
    450e:	4040      	eors	r0, r0
    4510:	f380 8811 	msr	BASEPRI, r0
    4514:	f04f 0003 	mov.w	r0, #3
    4518:	df02      	svc	2
    451a:	e79e      	b.n	445a <CONFIG_USB_DEVICE_PID+0x449>
    451c:	00029e18 	.word	0x00029e18
    4520:	00029e64 	.word	0x00029e64
    4524:	00029220 	.word	0x00029220
    4528:	0001b105 	.word	0x0001b105
    452c:	00029e6c 	.word	0x00029e6c

00004530 <blinky_thread>:
#include "./ahu_led.h"
 /* Register LOG Module */
LOG_MODULE_REGISTER(led_module, LOG_LEVEL_DBG);

/* Keep alive thread */
void blinky_thread(void) {
    4530:	b538      	push	{r3, r4, r5, lr}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
    4532:	4c0e      	ldr	r4, [pc, #56]	; (456c <blinky_thread+0x3c>)
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    4534:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    4536:	68a5      	ldr	r5, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4538:	6813      	ldr	r3, [r2, #0]
    453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    453e:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    4540:	2106      	movs	r1, #6
    4542:	682b      	ldr	r3, [r5, #0]
    4544:	f240 6201 	movw	r2, #1537	; 0x601
    4548:	4620      	mov	r0, r4
    454a:	4798      	blx	r3
    static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
    int ret;
    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);

    if (ret < 0) {
    454c:	2800      	cmp	r0, #0
    454e:	db0b      	blt.n	4568 <blinky_thread+0x38>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    4550:	2140      	movs	r1, #64	; 0x40
    4552:	696b      	ldr	r3, [r5, #20]
    4554:	4620      	mov	r0, r4
    4556:	4798      	blx	r3
        return;
    }

    while (1) {
        ret = gpio_pin_toggle_dt(&led);
        if (ret < 0) {
    4558:	2800      	cmp	r0, #0
    455a:	db05      	blt.n	4568 <blinky_thread+0x38>
	return z_impl_k_sleep(timeout);
    455c:	2100      	movs	r1, #0
    455e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4562:	f01d fd2d 	bl	21fc0 <z_impl_k_sleep>
    while (1) {
    4566:	e7f3      	b.n	4550 <blinky_thread+0x20>
            return;
        }

        k_sleep(K_SECONDS(1));
    }
}
    4568:	bd38      	pop	{r3, r4, r5, pc}
    456a:	bf00      	nop
    456c:	00028620 	.word	0x00028620

00004570 <device_found>:
}

/* Device found callback */
static void device_found(const bt_addr_le_t* addr, int8_t rssi, uint8_t type,
	struct net_buf_simple* ad)
{
    4570:	4602      	mov	r2, r0
    4572:	4618      	mov	r0, r3

	if (default_conn)
    4574:	4b03      	ldr	r3, [pc, #12]	; (4584 <device_found+0x14>)
    4576:	681b      	ldr	r3, [r3, #0]
    4578:	b913      	cbnz	r3, 4580 <device_found+0x10>
		return;
	}

	/* We're only interested in connectable events */

	bt_data_parse(ad, parse_device, (void*)addr);
    457a:	4903      	ldr	r1, [pc, #12]	; (4588 <device_found+0x18>)
    457c:	f006 b97a 	b.w	a874 <bt_data_parse>

}
    4580:	4770      	bx	lr
    4582:	bf00      	nop
    4584:	20001df8 	.word	0x20001df8
    4588:	00004921 	.word	0x00004921

0000458c <read_bpm_spo2>:
}

uint8_t read_bpm_spo2(struct bt_conn* conn, uint8_t err,
	struct bt_gatt_read_params* params,
	const void* data, uint16_t length)
{
    458c:	b508      	push	{r3, lr}
	memcpy(&bpm_spo2, data, sizeof(bpm_spo2));
    458e:	2202      	movs	r2, #2
    4590:	4619      	mov	r1, r3
    4592:	4802      	ldr	r0, [pc, #8]	; (459c <read_bpm_spo2+0x10>)
    4594:	f020 fa03 	bl	2499e <memcpy>

	//printk("RSSI: N1:%d, N2:%d, N3:%d, N4:%d\n", rx_rssi[0], rx_rssi[1], rx_rssi[2], rx_rssi[3]);
	return 0;
}
    4598:	2000      	movs	r0, #0
    459a:	bd08      	pop	{r3, pc}
    459c:	20003de0 	.word	0x20003de0

000045a0 <discover_func>:
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	4607      	mov	r7, r0
    45a4:	b089      	sub	sp, #36	; 0x24
    45a6:	4614      	mov	r4, r2
	if (attr == NULL)
    45a8:	460e      	mov	r6, r1
    45aa:	b9c9      	cbnz	r1, 45e0 <discover_func+0x40>
		if (chrc_handle == 0 || long_chrc_handle == 0)
    45ac:	4b2d      	ldr	r3, [pc, #180]	; (4664 <discover_func+0xc4>)
    45ae:	881b      	ldrh	r3, [r3, #0]
    45b0:	b113      	cbz	r3, 45b8 <discover_func+0x18>
    45b2:	4b2d      	ldr	r3, [pc, #180]	; (4668 <discover_func+0xc8>)
    45b4:	881b      	ldrh	r3, [r3, #0]
    45b6:	b953      	cbnz	r3, 45ce <discover_func+0x2e>
			LOG_INF("Found Characteristics");
    45b8:	4b2c      	ldr	r3, [pc, #176]	; (466c <discover_func+0xcc>)
    45ba:	9306      	str	r3, [sp, #24]
    45bc:	482c      	ldr	r0, [pc, #176]	; (4670 <discover_func+0xd0>)
    45be:	2302      	movs	r3, #2
    45c0:	aa05      	add	r2, sp, #20
    45c2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    45c6:	9301      	str	r3, [sp, #4]
    45c8:	9305      	str	r3, [sp, #20]
    45ca:	f01e f82b 	bl	22624 <z_log_msg2_static_create.constprop.0>
		(void)memset(params, 0, sizeof(*params));
    45ce:	2214      	movs	r2, #20
    45d0:	2100      	movs	r1, #0
    45d2:	4620      	mov	r0, r4
    45d4:	f020 f9ee 	bl	249b4 <memset>
		return BT_GATT_ITER_STOP;
    45d8:	2500      	movs	r5, #0
}
    45da:	4628      	mov	r0, r5
    45dc:	b009      	add	sp, #36	; 0x24
    45de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    45e0:	7c15      	ldrb	r5, [r2, #16]
    45e2:	b9e5      	cbnz	r5, 461e <discover_func+0x7e>
		bt_uuid_cmp(params->uuid, &deviceUUID.uuid) == 0)
    45e4:	4923      	ldr	r1, [pc, #140]	; (4674 <discover_func+0xd4>)
    45e6:	6810      	ldr	r0, [r2, #0]
    45e8:	f020 fa97 	bl	24b1a <bt_uuid_cmp>
	if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    45ec:	b9b8      	cbnz	r0, 461e <discover_func+0x7e>
		params->start_handle = attr->handle + 1;
    45ee:	8a33      	ldrh	r3, [r6, #16]
		params->uuid = NULL;
    45f0:	6025      	str	r5, [r4, #0]
		params->start_handle = attr->handle + 1;
    45f2:	3301      	adds	r3, #1
    45f4:	8123      	strh	r3, [r4, #8]
		params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    45f6:	2303      	movs	r3, #3
    45f8:	7423      	strb	r3, [r4, #16]
		err = bt_gatt_discover(conn, params);
    45fa:	4621      	mov	r1, r4
    45fc:	4638      	mov	r0, r7
    45fe:	f00a f87b 	bl	e6f8 <bt_gatt_discover>
		if (err != 0)
    4602:	2800      	cmp	r0, #0
    4604:	d0e9      	beq.n	45da <discover_func+0x3a>
			LOG_WRN("Discover failed");
    4606:	4b1c      	ldr	r3, [pc, #112]	; (4678 <discover_func+0xd8>)
    4608:	9306      	str	r3, [sp, #24]
    460a:	4819      	ldr	r0, [pc, #100]	; (4670 <discover_func+0xd0>)
    460c:	2302      	movs	r3, #2
    460e:	aa05      	add	r2, sp, #20
    4610:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4614:	9301      	str	r3, [sp, #4]
    4616:	9305      	str	r3, [sp, #20]
    4618:	f01e f804 	bl	22624 <z_log_msg2_static_create.constprop.0>
    461c:	e7dd      	b.n	45da <discover_func+0x3a>
	else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC)
    461e:	7c23      	ldrb	r3, [r4, #16]
    4620:	2b03      	cmp	r3, #3
    4622:	d001      	beq.n	4628 <discover_func+0x88>
	return BT_GATT_ITER_CONTINUE;
    4624:	2501      	movs	r5, #1
    4626:	e7d8      	b.n	45da <discover_func+0x3a>
		struct bt_gatt_chrc* chrc = (struct bt_gatt_chrc*)attr->user_data;
    4628:	68f4      	ldr	r4, [r6, #12]
		if (bt_uuid_cmp(chrc->uuid, &bpmSpo2UUID.uuid) == 0)
    462a:	4914      	ldr	r1, [pc, #80]	; (467c <discover_func+0xdc>)
    462c:	6820      	ldr	r0, [r4, #0]
    462e:	f020 fa74 	bl	24b1a <bt_uuid_cmp>
    4632:	b970      	cbnz	r0, 4652 <discover_func+0xb2>
			LOG_INF("Found characteristics");
    4634:	4b12      	ldr	r3, [pc, #72]	; (4680 <discover_func+0xe0>)
    4636:	9306      	str	r3, [sp, #24]
    4638:	aa05      	add	r2, sp, #20
    463a:	2302      	movs	r3, #2
    463c:	480c      	ldr	r0, [pc, #48]	; (4670 <discover_func+0xd0>)
    463e:	9301      	str	r3, [sp, #4]
    4640:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4644:	9305      	str	r3, [sp, #20]
    4646:	f01d ffed 	bl	22624 <z_log_msg2_static_create.constprop.0>
			chrc_handle = chrc->value_handle;
    464a:	4b06      	ldr	r3, [pc, #24]	; (4664 <discover_func+0xc4>)
    464c:	88a2      	ldrh	r2, [r4, #4]
			long_chrc_handle = chrc->value_handle;
    464e:	801a      	strh	r2, [r3, #0]
    4650:	e7e8      	b.n	4624 <discover_func+0x84>
		else if (bt_uuid_cmp(chrc->uuid, &bpmSpo2UUID.uuid) == 0)
    4652:	490a      	ldr	r1, [pc, #40]	; (467c <discover_func+0xdc>)
    4654:	6820      	ldr	r0, [r4, #0]
    4656:	f020 fa60 	bl	24b1a <bt_uuid_cmp>
    465a:	2800      	cmp	r0, #0
    465c:	d1e2      	bne.n	4624 <discover_func+0x84>
			long_chrc_handle = chrc->value_handle;
    465e:	88a2      	ldrh	r2, [r4, #4]
    4660:	4b01      	ldr	r3, [pc, #4]	; (4668 <discover_func+0xc8>)
    4662:	e7f4      	b.n	464e <discover_func+0xae>
    4664:	20003db8 	.word	0x20003db8
    4668:	20003dba 	.word	0x20003dba
    466c:	0002a337 	.word	0x0002a337
    4670:	00028888 	.word	0x00028888
    4674:	20000889 	.word	0x20000889
    4678:	0002a34d 	.word	0x0002a34d
    467c:	20000878 	.word	0x20000878
    4680:	0002a35d 	.word	0x0002a35d

00004684 <start_scan>:
{
    4684:	b530      	push	{r4, r5, lr}
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    4686:	4d0f      	ldr	r5, [pc, #60]	; (46c4 <start_scan+0x40>)
    4688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    468a:	b08d      	sub	sp, #52	; 0x34
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    468c:	ac01      	add	r4, sp, #4
    468e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4690:	682b      	ldr	r3, [r5, #0]
    4692:	490d      	ldr	r1, [pc, #52]	; (46c8 <start_scan+0x44>)
    4694:	6023      	str	r3, [r4, #0]
    4696:	a801      	add	r0, sp, #4
    4698:	f006 fe96 	bl	b3c8 <bt_le_scan_start>
	if (err)
    469c:	4601      	mov	r1, r0
    469e:	b120      	cbz	r0, 46aa <start_scan+0x26>
		printk("Scanning failed to start (err %d)\n", err);
    46a0:	480a      	ldr	r0, [pc, #40]	; (46cc <start_scan+0x48>)
    46a2:	f01e f82f 	bl	22704 <printk>
}
    46a6:	b00d      	add	sp, #52	; 0x34
    46a8:	bd30      	pop	{r4, r5, pc}
	LOG_INF("Scanning successfully started\n");
    46aa:	4b09      	ldr	r3, [pc, #36]	; (46d0 <start_scan+0x4c>)
    46ac:	930a      	str	r3, [sp, #40]	; 0x28
    46ae:	4809      	ldr	r0, [pc, #36]	; (46d4 <start_scan+0x50>)
    46b0:	2302      	movs	r3, #2
    46b2:	aa09      	add	r2, sp, #36	; 0x24
    46b4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    46b8:	9300      	str	r3, [sp, #0]
    46ba:	9309      	str	r3, [sp, #36]	; 0x24
    46bc:	f01d ffb2 	bl	22624 <z_log_msg2_static_create.constprop.0>
    46c0:	e7f1      	b.n	46a6 <start_scan+0x22>
    46c2:	bf00      	nop
    46c4:	00028a70 	.word	0x00028a70
    46c8:	00004571 	.word	0x00004571
    46cc:	0002a373 	.word	0x0002a373
    46d0:	0002a396 	.word	0x0002a396
    46d4:	00028888 	.word	0x00028888

000046d8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    46d8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    46da:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    46dc:	b08a      	sub	sp, #40	; 0x28
    46de:	4604      	mov	r4, r0
    46e0:	460e      	mov	r6, r1
    46e2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    46e4:	2b03      	cmp	r3, #3
    46e6:	d820      	bhi.n	472a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    46e8:	e8df f003 	tbb	[pc, r3]
    46ec:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    46f0:	4911      	ldr	r1, [pc, #68]	; (4738 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    46f2:	4628      	mov	r0, r5
    46f4:	f020 f91c 	bl	24930 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    46f8:	7863      	ldrb	r3, [r4, #1]
    46fa:	9304      	str	r3, [sp, #16]
    46fc:	78a3      	ldrb	r3, [r4, #2]
    46fe:	9303      	str	r3, [sp, #12]
    4700:	78e3      	ldrb	r3, [r4, #3]
    4702:	9302      	str	r3, [sp, #8]
    4704:	7923      	ldrb	r3, [r4, #4]
    4706:	9301      	str	r3, [sp, #4]
    4708:	7963      	ldrb	r3, [r4, #5]
    470a:	9300      	str	r3, [sp, #0]
    470c:	4a0b      	ldr	r2, [pc, #44]	; (473c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    470e:	79a3      	ldrb	r3, [r4, #6]
    4710:	9505      	str	r5, [sp, #20]
    4712:	211e      	movs	r1, #30
    4714:	4630      	mov	r0, r6
    4716:	f01e f802 	bl	2271e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    471a:	b00a      	add	sp, #40	; 0x28
    471c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    471e:	4908      	ldr	r1, [pc, #32]	; (4740 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    4720:	e7e7      	b.n	46f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    4722:	4908      	ldr	r1, [pc, #32]	; (4744 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    4724:	e7e5      	b.n	46f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    4726:	4908      	ldr	r1, [pc, #32]	; (4748 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    4728:	e7e3      	b.n	46f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    472a:	4a08      	ldr	r2, [pc, #32]	; (474c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    472c:	210a      	movs	r1, #10
    472e:	4628      	mov	r0, r5
    4730:	f01d fff5 	bl	2271e <snprintk>
		break;
    4734:	e7e0      	b.n	46f8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    4736:	bf00      	nop
    4738:	0002a3b5 	.word	0x0002a3b5
    473c:	0002a3d7 	.word	0x0002a3d7
    4740:	0002a3bc 	.word	0x0002a3bc
    4744:	0002a3c3 	.word	0x0002a3c3
    4748:	0002a3cd 	.word	0x0002a3cd
    474c:	0002c621 	.word	0x0002c621

00004750 <disconnected>:
static void disconnected(struct bt_conn* conn, uint8_t reason) {
    4750:	b530      	push	{r4, r5, lr}
	if (conn != default_conn)
    4752:	4c12      	ldr	r4, [pc, #72]	; (479c <disconnected+0x4c>)
    4754:	6823      	ldr	r3, [r4, #0]
    4756:	4283      	cmp	r3, r0
static void disconnected(struct bt_conn* conn, uint8_t reason) {
    4758:	b091      	sub	sp, #68	; 0x44
    475a:	460d      	mov	r5, r1
	if (conn != default_conn)
    475c:	d11b      	bne.n	4796 <disconnected+0x46>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    475e:	f020 fd6e 	bl	2523e <bt_conn_get_dst>
    4762:	a908      	add	r1, sp, #32
    4764:	f7ff ffb8 	bl	46d8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_WRN("Device disconnected, %d", reason);
    4768:	4b0d      	ldr	r3, [pc, #52]	; (47a0 <disconnected+0x50>)
    476a:	480e      	ldr	r0, [pc, #56]	; (47a4 <disconnected+0x54>)
    476c:	aa05      	add	r2, sp, #20
    476e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    4772:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4776:	2303      	movs	r3, #3
    4778:	9301      	str	r3, [sp, #4]
    477a:	9305      	str	r3, [sp, #20]
    477c:	f01d ff52 	bl	22624 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(default_conn);
    4780:	6820      	ldr	r0, [r4, #0]
    4782:	f020 fcc3 	bl	2510c <bt_conn_unref>
	dev_found = false;
    4786:	4a08      	ldr	r2, [pc, #32]	; (47a8 <disconnected+0x58>)
	default_conn = NULL;
    4788:	2300      	movs	r3, #0
	dev_found = false;
    478a:	7013      	strb	r3, [r2, #0]
	discovered = false;
    478c:	4a07      	ldr	r2, [pc, #28]	; (47ac <disconnected+0x5c>)
	default_conn = NULL;
    478e:	6023      	str	r3, [r4, #0]
	discovered = false;
    4790:	7013      	strb	r3, [r2, #0]
	start_scan();
    4792:	f7ff ff77 	bl	4684 <start_scan>
}
    4796:	b011      	add	sp, #68	; 0x44
    4798:	bd30      	pop	{r4, r5, pc}
    479a:	bf00      	nop
    479c:	20001df8 	.word	0x20001df8
    47a0:	0002a3fa 	.word	0x0002a3fa
    47a4:	00028888 	.word	0x00028888
    47a8:	20003de2 	.word	0x20003de2
    47ac:	20003de3 	.word	0x20003de3

000047b0 <connected>:
{
    47b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47b2:	b091      	sub	sp, #68	; 0x44
    47b4:	460e      	mov	r6, r1
    47b6:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    47b8:	f020 fd41 	bl	2523e <bt_conn_get_dst>
    47bc:	a908      	add	r1, sp, #32
    47be:	f7ff ff8b 	bl	46d8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err)
    47c2:	4d20      	ldr	r5, [pc, #128]	; (4844 <connected+0x94>)
    47c4:	b19e      	cbz	r6, 47ee <connected+0x3e>
		LOG_INF("Failed to connect");
    47c6:	4b20      	ldr	r3, [pc, #128]	; (4848 <connected+0x98>)
    47c8:	4820      	ldr	r0, [pc, #128]	; (484c <connected+0x9c>)
    47ca:	9306      	str	r3, [sp, #24]
    47cc:	aa05      	add	r2, sp, #20
    47ce:	2302      	movs	r3, #2
    47d0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    47d4:	9301      	str	r3, [sp, #4]
    47d6:	9305      	str	r3, [sp, #20]
    47d8:	f01d ff24 	bl	22624 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(default_conn);
    47dc:	6828      	ldr	r0, [r5, #0]
    47de:	f020 fc95 	bl	2510c <bt_conn_unref>
		default_conn = NULL;
    47e2:	2300      	movs	r3, #0
    47e4:	602b      	str	r3, [r5, #0]
		start_scan();
    47e6:	f7ff ff4d 	bl	4684 <start_scan>
}
    47ea:	b011      	add	sp, #68	; 0x44
    47ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn != default_conn)
    47ee:	682b      	ldr	r3, [r5, #0]
    47f0:	42a3      	cmp	r3, r4
    47f2:	d1fa      	bne.n	47ea <connected+0x3a>
	LOG_INF("Discovering services and characteristics");
    47f4:	2402      	movs	r4, #2
    47f6:	4b16      	ldr	r3, [pc, #88]	; (4850 <connected+0xa0>)
    47f8:	4814      	ldr	r0, [pc, #80]	; (484c <connected+0x9c>)
    47fa:	9306      	str	r3, [sp, #24]
    47fc:	aa05      	add	r2, sp, #20
    47fe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4802:	9401      	str	r4, [sp, #4]
    4804:	9405      	str	r4, [sp, #20]
    4806:	f01d ff0d 	bl	22624 <z_log_msg2_static_create.constprop.0>
	discover_params.uuid = &deviceUUID.uuid;
    480a:	4912      	ldr	r1, [pc, #72]	; (4854 <connected+0xa4>)
    480c:	4b12      	ldr	r3, [pc, #72]	; (4858 <connected+0xa8>)
    480e:	600b      	str	r3, [r1, #0]
	discover_params.func = discover_func;
    4810:	4b12      	ldr	r3, [pc, #72]	; (485c <connected+0xac>)
    4812:	604b      	str	r3, [r1, #4]
	discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    4814:	2701      	movs	r7, #1
	discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    4816:	f64f 73ff 	movw	r3, #65535	; 0xffff
	err = bt_gatt_discover(default_conn, &discover_params);
    481a:	6828      	ldr	r0, [r5, #0]
	discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    481c:	81cb      	strh	r3, [r1, #14]
	discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    481e:	810f      	strh	r7, [r1, #8]
	discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    4820:	740e      	strb	r6, [r1, #16]
	err = bt_gatt_discover(default_conn, &discover_params);
    4822:	f009 ff69 	bl	e6f8 <bt_gatt_discover>
	LOG_INF("Discover complete");
    4826:	4b0e      	ldr	r3, [pc, #56]	; (4860 <connected+0xb0>)
    4828:	4808      	ldr	r0, [pc, #32]	; (484c <connected+0x9c>)
    482a:	9306      	str	r3, [sp, #24]
    482c:	aa05      	add	r2, sp, #20
    482e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4832:	9401      	str	r4, [sp, #4]
    4834:	9405      	str	r4, [sp, #20]
    4836:	f01d fef5 	bl	22624 <z_log_msg2_static_create.constprop.0>
	discovered = true;
    483a:	4b0a      	ldr	r3, [pc, #40]	; (4864 <connected+0xb4>)
    483c:	701f      	strb	r7, [r3, #0]
	dev_found = true;
    483e:	4b0a      	ldr	r3, [pc, #40]	; (4868 <connected+0xb8>)
    4840:	701f      	strb	r7, [r3, #0]
    4842:	e7d2      	b.n	47ea <connected+0x3a>
    4844:	20001df8 	.word	0x20001df8
    4848:	0002a412 	.word	0x0002a412
    484c:	00028888 	.word	0x00028888
    4850:	0002a424 	.word	0x0002a424
    4854:	20001dfc 	.word	0x20001dfc
    4858:	20000889 	.word	0x20000889
    485c:	000045a1 	.word	0x000045a1
    4860:	0002a44d 	.word	0x0002a44d
    4864:	20003de3 	.word	0x20003de3
    4868:	20003de2 	.word	0x20003de2

0000486c <parse_device.part.0>:
static bool parse_device(struct bt_data* data, void* user_data)
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	b08f      	sub	sp, #60	; 0x3c
			LOG_INF("Device Found");
    4870:	4b24      	ldr	r3, [pc, #144]	; (4904 <parse_device.part.0+0x98>)
    4872:	930c      	str	r3, [sp, #48]	; 0x30
    4874:	2602      	movs	r6, #2
    4876:	aa0b      	add	r2, sp, #44	; 0x2c
    4878:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
static bool parse_device(struct bt_data* data, void* user_data)
    487c:	4607      	mov	r7, r0
			LOG_INF("Device Found");
    487e:	4822      	ldr	r0, [pc, #136]	; (4908 <parse_device.part.0+0x9c>)
    4880:	9604      	str	r6, [sp, #16]
    4882:	960b      	str	r6, [sp, #44]	; 0x2c
    4884:	f01d fece 	bl	22624 <z_log_msg2_static_create.constprop.0>
			int err = bt_le_scan_stop();
    4888:	f006 fe1e 	bl	b4c8 <bt_le_scan_stop>
    488c:	4605      	mov	r5, r0
    488e:	f44f 70a4 	mov.w	r0, #328	; 0x148
    4892:	2100      	movs	r1, #0
    4894:	f01d fb94 	bl	21fc0 <z_impl_k_sleep>
			if (err)
    4898:	b135      	cbz	r5, 48a8 <parse_device.part.0+0x3c>
				printk("Stop LE scan failed (err %d)\n", err);
    489a:	481c      	ldr	r0, [pc, #112]	; (490c <parse_device.part.0+0xa0>)
    489c:	4629      	mov	r1, r5
    489e:	f01d ff31 	bl	22704 <printk>
				return true;
    48a2:	2001      	movs	r0, #1
}
    48a4:	b00f      	add	sp, #60	; 0x3c
    48a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			struct bt_le_conn_param* param = BT_LE_CONN_PARAM(BT_GAP_INIT_CONN_INT_MIN, BT_GAP_INIT_CONN_INT_MAX, 0, 800);
    48a8:	2318      	movs	r3, #24
    48aa:	f8ad 3008 	strh.w	r3, [sp, #8]
    48ae:	2328      	movs	r3, #40	; 0x28
    48b0:	f8ad 300a 	strh.w	r3, [sp, #10]
    48b4:	f44f 7348 	mov.w	r3, #800	; 0x320
    48b8:	f8ad 300e 	strh.w	r3, [sp, #14]
			err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN_AUTO,
    48bc:	4b14      	ldr	r3, [pc, #80]	; (4910 <parse_device.part.0+0xa4>)
			struct bt_le_conn_param* param = BT_LE_CONN_PARAM(BT_GAP_INIT_CONN_INT_MIN, BT_GAP_INIT_CONN_INT_MAX, 0, 800);
    48be:	f8ad 500c 	strh.w	r5, [sp, #12]
			err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN_AUTO,
    48c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    48c4:	ac04      	add	r4, sp, #16
    48c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    48ca:	4621      	mov	r1, r4
    48cc:	4b11      	ldr	r3, [pc, #68]	; (4914 <parse_device.part.0+0xa8>)
    48ce:	aa02      	add	r2, sp, #8
    48d0:	4638      	mov	r0, r7
    48d2:	f007 fc43 	bl	c15c <bt_conn_le_create>
			LOG_INF("Device Connected");
    48d6:	4b10      	ldr	r3, [pc, #64]	; (4918 <parse_device.part.0+0xac>)
    48d8:	930c      	str	r3, [sp, #48]	; 0x30
			err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN_AUTO,
    48da:	4604      	mov	r4, r0
			LOG_INF("Device Connected");
    48dc:	aa0b      	add	r2, sp, #44	; 0x2c
    48de:	480a      	ldr	r0, [pc, #40]	; (4908 <parse_device.part.0+0x9c>)
    48e0:	9601      	str	r6, [sp, #4]
    48e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48e6:	960b      	str	r6, [sp, #44]	; 0x2c
    48e8:	f01d fe9c 	bl	22624 <z_log_msg2_static_create.constprop.0>
			if (err)
    48ec:	b13c      	cbz	r4, 48fe <parse_device.part.0+0x92>
				printk("Create conn failed (err %d)\n", err);
    48ee:	480b      	ldr	r0, [pc, #44]	; (491c <parse_device.part.0+0xb0>)
    48f0:	4621      	mov	r1, r4
    48f2:	f01d ff07 	bl	22704 <printk>
				start_scan();
    48f6:	f7ff fec5 	bl	4684 <start_scan>
			return false;
    48fa:	4628      	mov	r0, r5
    48fc:	e7d2      	b.n	48a4 <parse_device.part.0+0x38>
    48fe:	4620      	mov	r0, r4
    4900:	e7d0      	b.n	48a4 <parse_device.part.0+0x38>
    4902:	bf00      	nop
    4904:	0002a45f 	.word	0x0002a45f
    4908:	00028888 	.word	0x00028888
    490c:	0002a46c 	.word	0x0002a46c
    4910:	00028a84 	.word	0x00028a84
    4914:	20001df8 	.word	0x20001df8
    4918:	0002a48a 	.word	0x0002a48a
    491c:	0002a49b 	.word	0x0002a49b

00004920 <parse_device>:
{
    4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (data->type == BT_DATA_UUID128_ALL)
    4922:	7803      	ldrb	r3, [r0, #0]
    4924:	2b07      	cmp	r3, #7
{
    4926:	4604      	mov	r4, r0
    4928:	460d      	mov	r5, r1
	if (data->type == BT_DATA_UUID128_ALL)
    492a:	d118      	bne.n	495e <parse_device+0x3e>
		printk("Found Device\n");
    492c:	480d      	ldr	r0, [pc, #52]	; (4964 <parse_device+0x44>)
    492e:	f01d fee9 	bl	22704 <printk>
	int matchedCount = 0;
    4932:	2300      	movs	r3, #0
		for (i = 0; i < data->data_len; i++)
    4934:	7860      	ldrb	r0, [r4, #1]
    4936:	490c      	ldr	r1, [pc, #48]	; (4968 <parse_device+0x48>)
    4938:	461a      	mov	r2, r3
    493a:	4290      	cmp	r0, r2
    493c:	dc06      	bgt.n	494c <parse_device+0x2c>
		if (matchedCount == UUID_BUFFER_SIZE)
    493e:	2b10      	cmp	r3, #16
    4940:	d10d      	bne.n	495e <parse_device+0x3e>
    4942:	4628      	mov	r0, r5
}
    4944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4948:	f7ff bf90 	b.w	486c <parse_device.part.0>
			temp = data->data[i];
    494c:	6867      	ldr	r7, [r4, #4]
			if (temp == dongle_uuid[i])
    494e:	f831 6b02 	ldrh.w	r6, [r1], #2
    4952:	5cbf      	ldrb	r7, [r7, r2]
    4954:	42b7      	cmp	r7, r6
				matchedCount++;
    4956:	bf08      	it	eq
    4958:	3301      	addeq	r3, #1
		for (i = 0; i < data->data_len; i++)
    495a:	3201      	adds	r2, #1
    495c:	e7ed      	b.n	493a <parse_device+0x1a>
}
    495e:	2001      	movs	r0, #1
    4960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4962:	bf00      	nop
    4964:	0002a4b8 	.word	0x0002a4b8
    4968:	200007dc 	.word	0x200007dc

0000496c <thread_ble_entry>:


/* Thread for searching and discovery of BLE devices */
void thread_ble_entry(void)
{
    496c:	b500      	push	{lr}
	int err;
	err = bt_enable(NULL);
    496e:	2000      	movs	r0, #0
{
    4970:	b089      	sub	sp, #36	; 0x24
	err = bt_enable(NULL);
    4972:	f005 ff0f 	bl	a794 <bt_enable>
	if (err)
    4976:	4601      	mov	r1, r0
    4978:	b128      	cbz	r0, 4986 <thread_ble_entry+0x1a>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    497a:	480b      	ldr	r0, [pc, #44]	; (49a8 <thread_ble_entry+0x3c>)
		return;
	}
	LOG_INF("Bluetooth initialized");
	start_scan();
}
    497c:	b009      	add	sp, #36	; 0x24
    497e:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Bluetooth init failed (err %d)\n", err);
    4982:	f01d bebf 	b.w	22704 <printk>
	LOG_INF("Bluetooth initialized");
    4986:	4b09      	ldr	r3, [pc, #36]	; (49ac <thread_ble_entry+0x40>)
    4988:	9306      	str	r3, [sp, #24]
    498a:	4809      	ldr	r0, [pc, #36]	; (49b0 <thread_ble_entry+0x44>)
    498c:	2302      	movs	r3, #2
    498e:	aa05      	add	r2, sp, #20
    4990:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4994:	9301      	str	r3, [sp, #4]
    4996:	9305      	str	r3, [sp, #20]
    4998:	f01d fe44 	bl	22624 <z_log_msg2_static_create.constprop.0>
}
    499c:	b009      	add	sp, #36	; 0x24
    499e:	f85d eb04 	ldr.w	lr, [sp], #4
	start_scan();
    49a2:	f7ff be6f 	b.w	4684 <start_scan>
    49a6:	bf00      	nop
    49a8:	0002a4c6 	.word	0x0002a4c6
    49ac:	0002a4e6 	.word	0x0002a4e6
    49b0:	00028888 	.word	0x00028888

000049b4 <thread_base_read>:



void thread_base_read(void) {
    49b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;
	int err;
	int64_t baseUptime;
	while (1) {
		//printk("THis device is actually working youre just tripping\n");
		if (dev_found) {
    49b6:	4d0c      	ldr	r5, [pc, #48]	; (49e8 <thread_base_read+0x34>)
			bt_gatt_read(default_conn, &read_params_bpm_spo);
    49b8:	4e0c      	ldr	r6, [pc, #48]	; (49ec <thread_base_read+0x38>)
    49ba:	4f0d      	ldr	r7, [pc, #52]	; (49f0 <thread_base_read+0x3c>)
		if (dev_found) {
    49bc:	782b      	ldrb	r3, [r5, #0]
    49be:	b163      	cbz	r3, 49da <thread_base_read+0x26>
			printk("BPM: %d \n", bpm_spo2[i]);
    49c0:	4c0c      	ldr	r4, [pc, #48]	; (49f4 <thread_base_read+0x40>)
			bt_gatt_read(default_conn, &read_params_bpm_spo);
    49c2:	6830      	ldr	r0, [r6, #0]
    49c4:	4639      	mov	r1, r7
    49c6:	f00a fa67 	bl	ee98 <bt_gatt_read>
			printk("BPM: %d \n", bpm_spo2[i]);
    49ca:	7821      	ldrb	r1, [r4, #0]
    49cc:	480a      	ldr	r0, [pc, #40]	; (49f8 <thread_base_read+0x44>)
    49ce:	f01d fe99 	bl	22704 <printk>
			printk("SPO2: %d\n", bpm_spo2[i]);
    49d2:	7821      	ldrb	r1, [r4, #0]
    49d4:	4809      	ldr	r0, [pc, #36]	; (49fc <thread_base_read+0x48>)
    49d6:	f01d fe95 	bl	22704 <printk>
    49da:	2100      	movs	r1, #0
    49dc:	f44f 70a4 	mov.w	r0, #328	; 0x148
    49e0:	f01d faee 	bl	21fc0 <z_impl_k_sleep>
	while (1) {
    49e4:	e7ea      	b.n	49bc <thread_base_read+0x8>
    49e6:	bf00      	nop
    49e8:	20003de2 	.word	0x20003de2
    49ec:	20001df8 	.word	0x20001df8
    49f0:	20000168 	.word	0x20000168
    49f4:	20003de0 	.word	0x20003de0
    49f8:	0002a4fc 	.word	0x0002a4fc
    49fc:	0002a506 	.word	0x0002a506

00004a00 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    4a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a04:	4605      	mov	r5, r0
    4a06:	b08b      	sub	sp, #44	; 0x2c
    4a08:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    4a0a:	f015 0303 	ands.w	r3, r5, #3
    4a0e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    4a12:	9203      	str	r2, [sp, #12]
    4a14:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    4a16:	9301      	str	r3, [sp, #4]
    4a18:	f040 81f3 	bne.w	4e02 <cbvprintf_package+0x402>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    4a1c:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    4a1e:	2d00      	cmp	r5, #0
    4a20:	f040 81f2 	bne.w	4e08 <cbvprintf_package+0x408>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    4a24:	f001 0607 	and.w	r6, r1, #7
    4a28:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    4a2a:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    4a2e:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    4a32:	2704      	movs	r7, #4
	s = fmt--;
    4a34:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    4a36:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    4a3a:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    4a3e:	4652      	mov	r2, sl
	size = sizeof(char *);
    4a40:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    4a42:	b105      	cbz	r5, 4a46 <cbvprintf_package+0x46>
				*(const char **)buf = s;
    4a44:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    4a46:	9b03      	ldr	r3, [sp, #12]
    4a48:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    4a4c:	4bcd      	ldr	r3, [pc, #820]	; (4d84 <cbvprintf_package+0x384>)
    4a4e:	4298      	cmp	r0, r3
    4a50:	f0c0 812a 	bcc.w	4ca8 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    4a54:	4bcc      	ldr	r3, [pc, #816]	; (4d88 <cbvprintf_package+0x388>)
    4a56:	4298      	cmp	r0, r3
    4a58:	f080 8126 	bcs.w	4ca8 <cbvprintf_package+0x2a8>
    4a5c:	f1be 0f00 	cmp.w	lr, #0
    4a60:	f000 813b 	beq.w	4cda <cbvprintf_package+0x2da>
	return ((addr >= (const char *)RO_START) &&
    4a64:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    4a68:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    4a6c:	f1be 0f00 	cmp.w	lr, #0
    4a70:	f000 811d 	beq.w	4cae <cbvprintf_package+0x2ae>
    4a74:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    4a78:	f0c0 8119 	bcc.w	4cae <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    4a7c:	f06f 0015 	mvn.w	r0, #21
    4a80:	e0f5      	b.n	4c6e <cbvprintf_package+0x26e>
		if (!parsing) {
    4a82:	b932      	cbnz	r2, 4a92 <cbvprintf_package+0x92>
			if (*fmt == '%') {
    4a84:	2b25      	cmp	r3, #37	; 0x25
    4a86:	f040 812b 	bne.w	4ce0 <cbvprintf_package+0x2e0>
				parsing = true;
    4a8a:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    4a8c:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    4a8e:	46b9      	mov	r9, r7
    4a90:	e126      	b.n	4ce0 <cbvprintf_package+0x2e0>
		switch (*fmt) {
    4a92:	2b2b      	cmp	r3, #43	; 0x2b
    4a94:	d824      	bhi.n	4ae0 <cbvprintf_package+0xe0>
    4a96:	2b1f      	cmp	r3, #31
    4a98:	d801      	bhi.n	4a9e <cbvprintf_package+0x9e>
			parsing = false;
    4a9a:	2200      	movs	r2, #0
    4a9c:	e120      	b.n	4ce0 <cbvprintf_package+0x2e0>
		switch (*fmt) {
    4a9e:	f1a3 0020 	sub.w	r0, r3, #32
    4aa2:	280b      	cmp	r0, #11
    4aa4:	d8f9      	bhi.n	4a9a <cbvprintf_package+0x9a>
    4aa6:	f20f 0c08 	addw	ip, pc, #8
    4aaa:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    4aae:	bf00      	nop
    4ab0:	00004ce1 	.word	0x00004ce1
    4ab4:	00004a9b 	.word	0x00004a9b
    4ab8:	00004a9b 	.word	0x00004a9b
    4abc:	00004ce1 	.word	0x00004ce1
    4ac0:	00004a9b 	.word	0x00004a9b
    4ac4:	00004a9b 	.word	0x00004a9b
    4ac8:	00004a9b 	.word	0x00004a9b
    4acc:	00004a9b 	.word	0x00004a9b
    4ad0:	00004a9b 	.word	0x00004a9b
    4ad4:	00004a9b 	.word	0x00004a9b
    4ad8:	00004c87 	.word	0x00004c87
    4adc:	00004ce1 	.word	0x00004ce1
    4ae0:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    4ae4:	fa5f fc80 	uxtb.w	ip, r0
    4ae8:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    4aec:	d8d5      	bhi.n	4a9a <cbvprintf_package+0x9a>
    4aee:	284d      	cmp	r0, #77	; 0x4d
    4af0:	d8d3      	bhi.n	4a9a <cbvprintf_package+0x9a>
    4af2:	f20f 0c08 	addw	ip, pc, #8
    4af6:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    4afa:	bf00      	nop
    4afc:	00004ce1 	.word	0x00004ce1
    4b00:	00004ce1 	.word	0x00004ce1
    4b04:	00004a9b 	.word	0x00004a9b
    4b08:	00004ce1 	.word	0x00004ce1
    4b0c:	00004ce1 	.word	0x00004ce1
    4b10:	00004ce1 	.word	0x00004ce1
    4b14:	00004ce1 	.word	0x00004ce1
    4b18:	00004ce1 	.word	0x00004ce1
    4b1c:	00004ce1 	.word	0x00004ce1
    4b20:	00004ce1 	.word	0x00004ce1
    4b24:	00004ce1 	.word	0x00004ce1
    4b28:	00004ce1 	.word	0x00004ce1
    4b2c:	00004ce1 	.word	0x00004ce1
    4b30:	00004a9b 	.word	0x00004a9b
    4b34:	00004a9b 	.word	0x00004a9b
    4b38:	00004a9b 	.word	0x00004a9b
    4b3c:	00004a9b 	.word	0x00004a9b
    4b40:	00004a9b 	.word	0x00004a9b
    4b44:	00004a9b 	.word	0x00004a9b
    4b48:	00004a9b 	.word	0x00004a9b
    4b4c:	00004c4f 	.word	0x00004c4f
    4b50:	00004a9b 	.word	0x00004a9b
    4b54:	00004a9b 	.word	0x00004a9b
    4b58:	00004a9b 	.word	0x00004a9b
    4b5c:	00004c4f 	.word	0x00004c4f
    4b60:	00004c4f 	.word	0x00004c4f
    4b64:	00004c4f 	.word	0x00004c4f
    4b68:	00004a9b 	.word	0x00004a9b
    4b6c:	00004a9b 	.word	0x00004a9b
    4b70:	00004a9b 	.word	0x00004a9b
    4b74:	00004a9b 	.word	0x00004a9b
    4b78:	00004ce1 	.word	0x00004ce1
    4b7c:	00004a9b 	.word	0x00004a9b
    4b80:	00004a9b 	.word	0x00004a9b
    4b84:	00004a9b 	.word	0x00004a9b
    4b88:	00004a9b 	.word	0x00004a9b
    4b8c:	00004a9b 	.word	0x00004a9b
    4b90:	00004a9b 	.word	0x00004a9b
    4b94:	00004a9b 	.word	0x00004a9b
    4b98:	00004a9b 	.word	0x00004a9b
    4b9c:	00004a9b 	.word	0x00004a9b
    4ba0:	00004a9b 	.word	0x00004a9b
    4ba4:	00004a9b 	.word	0x00004a9b
    4ba8:	00004c35 	.word	0x00004c35
    4bac:	00004a9b 	.word	0x00004a9b
    4bb0:	00004a9b 	.word	0x00004a9b
    4bb4:	00004a9b 	.word	0x00004a9b
    4bb8:	00004a9b 	.word	0x00004a9b
    4bbc:	00004a9b 	.word	0x00004a9b
    4bc0:	00004a9b 	.word	0x00004a9b
    4bc4:	00004a9b 	.word	0x00004a9b
    4bc8:	00004a9b 	.word	0x00004a9b
    4bcc:	00004c4f 	.word	0x00004c4f
    4bd0:	00004a9b 	.word	0x00004a9b
    4bd4:	00004c35 	.word	0x00004c35
    4bd8:	00004c35 	.word	0x00004c35
    4bdc:	00004c4f 	.word	0x00004c4f
    4be0:	00004c4f 	.word	0x00004c4f
    4be4:	00004c4f 	.word	0x00004c4f
    4be8:	00004ce1 	.word	0x00004ce1
    4bec:	00004c35 	.word	0x00004c35
    4bf0:	00004c7d 	.word	0x00004c7d
    4bf4:	00004a9b 	.word	0x00004a9b
    4bf8:	00004ce1 	.word	0x00004ce1
    4bfc:	00004a9b 	.word	0x00004a9b
    4c00:	00004c81 	.word	0x00004c81
    4c04:	00004c35 	.word	0x00004c35
    4c08:	00004c81 	.word	0x00004c81
    4c0c:	00004a9b 	.word	0x00004a9b
    4c10:	00004a9b 	.word	0x00004a9b
    4c14:	00004c81 	.word	0x00004c81
    4c18:	00004a8d 	.word	0x00004a8d
    4c1c:	00004c35 	.word	0x00004c35
    4c20:	00004a9b 	.word	0x00004a9b
    4c24:	00004a9b 	.word	0x00004a9b
    4c28:	00004c35 	.word	0x00004c35
    4c2c:	00004a9b 	.word	0x00004a9b
    4c30:	00004a8d 	.word	0x00004a8d
			if (fmt[-1] == 'l') {
    4c34:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    4c38:	2a6c      	cmp	r2, #108	; 0x6c
    4c3a:	d123      	bne.n	4c84 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    4c3c:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    4c40:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    4c42:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    4c46:	d02d      	beq.n	4ca4 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    4c48:	2704      	movs	r7, #4
					size = sizeof(long long);
    4c4a:	46b9      	mov	r9, r7
    4c4c:	e01b      	b.n	4c86 <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    4c4e:	f108 0807 	add.w	r8, r8, #7
    4c52:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    4c56:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    4c58:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    4c5c:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    4c60:	b155      	cbz	r5, 4c78 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    4c62:	eb0e 0004 	add.w	r0, lr, r4
    4c66:	42b0      	cmp	r0, r6
    4c68:	d904      	bls.n	4c74 <cbvprintf_package+0x274>
					return -ENOSPC;
    4c6a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    4c6e:	b00b      	add	sp, #44	; 0x2c
    4c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    4c74:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    4c78:	3408      	adds	r4, #8
			parsing = false;
    4c7a:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    4c7c:	2708      	movs	r7, #8
    4c7e:	e706      	b.n	4a8e <cbvprintf_package+0x8e>
			parsing = false;
    4c80:	2200      	movs	r2, #0
    4c82:	e7e1      	b.n	4c48 <cbvprintf_package+0x248>
			parsing = false;
    4c84:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    4c86:	3c01      	subs	r4, #1
    4c88:	443c      	add	r4, r7
    4c8a:	4278      	negs	r0, r7
    4c8c:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    4c8e:	b125      	cbz	r5, 4c9a <cbvprintf_package+0x29a>
    4c90:	eba9 0005 	sub.w	r0, r9, r5
    4c94:	4420      	add	r0, r4
    4c96:	42b0      	cmp	r0, r6
    4c98:	d8e7      	bhi.n	4c6a <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    4c9a:	2b73      	cmp	r3, #115	; 0x73
    4c9c:	d142      	bne.n	4d24 <cbvprintf_package+0x324>
			s = va_arg(ap, char *);
    4c9e:	f858 0b04 	ldr.w	r0, [r8], #4
    4ca2:	e6ce      	b.n	4a42 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    4ca4:	2708      	movs	r7, #8
    4ca6:	e7d0      	b.n	4c4a <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    4ca8:	f04f 0c00 	mov.w	ip, #0
    4cac:	e6dc      	b.n	4a68 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    4cae:	9b00      	ldr	r3, [sp, #0]
    4cb0:	2b0f      	cmp	r3, #15
    4cb2:	f63f aee3 	bhi.w	4a7c <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    4cb6:	b33d      	cbz	r5, 4d08 <cbvprintf_package+0x308>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4cb8:	9800      	ldr	r0, [sp, #0]
    4cba:	3028      	adds	r0, #40	; 0x28
    4cbc:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    4cc0:	4468      	add	r0, sp
    4cc2:	f1bc 0f00 	cmp.w	ip, #0
    4cc6:	d019      	beq.n	4cfc <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    4cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ccc:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    4cd0:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    4cd4:	9b00      	ldr	r3, [sp, #0]
    4cd6:	3301      	adds	r3, #1
    4cd8:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    4cda:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    4cdc:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    4ce0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	f47f aecc 	bne.w	4a82 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    4cea:	1b60      	subs	r0, r4, r5
    4cec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4cf0:	f4bf aec4 	bcs.w	4a7c <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    4cf4:	bb9d      	cbnz	r5, 4d5e <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    4cf6:	3e08      	subs	r6, #8
    4cf8:	4430      	add	r0, r6
    4cfa:	e7b8      	b.n	4c6e <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4cfc:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    4d00:	9b02      	ldr	r3, [sp, #8]
    4d02:	3301      	adds	r3, #1
    4d04:	9302      	str	r3, [sp, #8]
    4d06:	e7e5      	b.n	4cd4 <cbvprintf_package+0x2d4>
				} else if (is_ro) {
    4d08:	f1bc 0f00 	cmp.w	ip, #0
    4d0c:	d001      	beq.n	4d12 <cbvprintf_package+0x312>
					len += 1;
    4d0e:	3601      	adds	r6, #1
    4d10:	e7e0      	b.n	4cd4 <cbvprintf_package+0x2d4>
    4d12:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    4d16:	f01f fe15 	bl	24944 <strlen>
    4d1a:	3602      	adds	r6, #2
    4d1c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4d20:	4406      	add	r6, r0
    4d22:	e7d7      	b.n	4cd4 <cbvprintf_package+0x2d4>
		} else if (size == sizeof(int)) {
    4d24:	f1b9 0f04 	cmp.w	r9, #4
    4d28:	d108      	bne.n	4d3c <cbvprintf_package+0x33c>
			int v = va_arg(ap, int);
    4d2a:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    4d2e:	b115      	cbz	r5, 4d36 <cbvprintf_package+0x336>
			int v = va_arg(ap, int);
    4d30:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    4d34:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    4d36:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    4d38:	4680      	mov	r8, r0
    4d3a:	e7d1      	b.n	4ce0 <cbvprintf_package+0x2e0>
		} else if (size == sizeof(long long)) {
    4d3c:	f1b9 0f08 	cmp.w	r9, #8
    4d40:	f47f ae9c 	bne.w	4a7c <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    4d44:	f108 0307 	add.w	r3, r8, #7
    4d48:	f023 0307 	bic.w	r3, r3, #7
    4d4c:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    4d50:	b11d      	cbz	r5, 4d5a <cbvprintf_package+0x35a>
			long long v = va_arg(ap, long long);
    4d52:	e9d3 bc00 	ldrd	fp, ip, [r3]
    4d56:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    4d5a:	3408      	adds	r4, #8
    4d5c:	e7c0      	b.n	4ce0 <cbvprintf_package+0x2e0>
	buf0[1] = s_rw_cnt;
    4d5e:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    4d60:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    4d62:	0880      	lsrs	r0, r0, #2
    4d64:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    4d66:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    4d68:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    4d6c:	f1ba 0f00 	cmp.w	sl, #0
    4d70:	d005      	beq.n	4d7e <cbvprintf_package+0x37e>
    4d72:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    4d74:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    4d78:	9a00      	ldr	r2, [sp, #0]
    4d7a:	429a      	cmp	r2, r3
    4d7c:	d106      	bne.n	4d8c <cbvprintf_package+0x38c>
		if (BUF_OFFSET + 1 + size > len) {
    4d7e:	f1c5 0901 	rsb	r9, r5, #1
    4d82:	e038      	b.n	4df6 <cbvprintf_package+0x3f6>
    4d84:	00028570 	.word	0x00028570
    4d88:	0002c998 	.word	0x0002c998
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    4d8c:	f811 2b01 	ldrb.w	r2, [r1], #1
    4d90:	0617      	lsls	r7, r2, #24
    4d92:	d507      	bpl.n	4da4 <cbvprintf_package+0x3a4>
			if (BUF_OFFSET + 1 > len) {
    4d94:	1827      	adds	r7, r4, r0
    4d96:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    4d98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    4d9c:	f63f af65 	bhi.w	4c6a <cbvprintf_package+0x26a>
			*buf++ = pos;
    4da0:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    4da4:	3301      	adds	r3, #1
    4da6:	e7e7      	b.n	4d78 <cbvprintf_package+0x378>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    4da8:	9b01      	ldr	r3, [sp, #4]
    4daa:	aa06      	add	r2, sp, #24
    4dac:	f812 8003 	ldrb.w	r8, [r2, r3]
    4db0:	f1ba 0f00 	cmp.w	sl, #0
    4db4:	d002      	beq.n	4dbc <cbvprintf_package+0x3bc>
    4db6:	f018 0f80 	tst.w	r8, #128	; 0x80
    4dba:	d119      	bne.n	4df0 <cbvprintf_package+0x3f0>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4dbc:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4dc0:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4dc2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4dc6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    4dca:	4608      	mov	r0, r1
    4dcc:	9102      	str	r1, [sp, #8]
    4dce:	f01f fdb9 	bl	24944 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    4dd2:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    4dd6:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    4dd8:	443a      	add	r2, r7
    4dda:	42b2      	cmp	r2, r6
    4ddc:	f63f af45 	bhi.w	4c6a <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    4de0:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
    4de4:	9902      	ldr	r1, [sp, #8]
    4de6:	4620      	mov	r0, r4
    4de8:	463a      	mov	r2, r7
    4dea:	f01f fdd8 	bl	2499e <memcpy>
		buf += size;
    4dee:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    4df0:	9b01      	ldr	r3, [sp, #4]
    4df2:	3301      	adds	r3, #1
    4df4:	9301      	str	r3, [sp, #4]
    4df6:	e9dd 2300 	ldrd	r2, r3, [sp]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d1d4      	bne.n	4da8 <cbvprintf_package+0x3a8>
	return BUF_OFFSET;
    4dfe:	1b60      	subs	r0, r4, r5
    4e00:	e735      	b.n	4c6e <cbvprintf_package+0x26e>
		return -EFAULT;
    4e02:	f06f 000d 	mvn.w	r0, #13
    4e06:	e732      	b.n	4c6e <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    4e08:	2907      	cmp	r1, #7
    4e0a:	f63f ae10 	bhi.w	4a2e <cbvprintf_package+0x2e>
    4e0e:	e72c      	b.n	4c6a <cbvprintf_package+0x26a>

00004e10 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    4e10:	4b01      	ldr	r3, [pc, #4]	; (4e18 <__printk_hook_install+0x8>)
    4e12:	6018      	str	r0, [r3, #0]
}
    4e14:	4770      	bx	lr
    4e16:	bf00      	nop
    4e18:	20000178 	.word	0x20000178

00004e1c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4e1c:	b530      	push	{r4, r5, lr}
    4e1e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4e20:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4e24:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4e26:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4e28:	a901      	add	r1, sp, #4
    4e2a:	4805      	ldr	r0, [pc, #20]	; (4e40 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4e2c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4e2e:	f000 f8e9 	bl	5004 <cbvprintf>

	if (ctx.count < ctx.max) {
    4e32:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4e36:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4e38:	bfb8      	it	lt
    4e3a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4e3c:	b005      	add	sp, #20
    4e3e:	bd30      	pop	{r4, r5, pc}
    4e40:	000226df 	.word	0x000226df

00004e44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e48:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4e4c:	f019 0808 	ands.w	r8, r9, #8
{
    4e50:	4604      	mov	r4, r0
    4e52:	4693      	mov	fp, r2
	if (processing) {
    4e54:	d00d      	beq.n	4e72 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4e56:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4e58:	bf0c      	ite	eq
    4e5a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4e5e:	f049 0920 	orrne.w	r9, r9, #32
    4e62:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4e66:	f38b 8811 	msr	BASEPRI, fp
    4e6a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e72:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4e76:	2902      	cmp	r1, #2
    4e78:	d107      	bne.n	4e8a <process_event+0x46>
			evt = process_recheck(mgr);
    4e7a:	4620      	mov	r0, r4
    4e7c:	f01d fc76 	bl	2276c <process_recheck>
		if (evt == EVT_NOP) {
    4e80:	2800      	cmp	r0, #0
    4e82:	d0f0      	beq.n	4e66 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4e84:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e86:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4e88:	d14e      	bne.n	4f28 <process_event+0xe4>
			res = mgr->last_res;
    4e8a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e8c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4e8e:	2f00      	cmp	r7, #0
    4e90:	da15      	bge.n	4ebe <process_event+0x7a>
		*clients = mgr->clients;
    4e92:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e94:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4e98:	e9c4 8800 	strd	r8, r8, [r4]
    4e9c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4ea0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4ea2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4ea4:	8b21      	ldrh	r1, [r4, #24]
    4ea6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4eaa:	45ca      	cmp	sl, r9
    4eac:	d002      	beq.n	4eb4 <process_event+0x70>
		if (do_monitors
    4eae:	68a3      	ldr	r3, [r4, #8]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d15a      	bne.n	4f6a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4eb4:	b90d      	cbnz	r5, 4eba <process_event+0x76>
		    || (transit != NULL)) {
    4eb6:	2e00      	cmp	r6, #0
    4eb8:	d071      	beq.n	4f9e <process_event+0x15a>
    4eba:	2300      	movs	r3, #0
    4ebc:	e056      	b.n	4f6c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4ebe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4ec2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4ec4:	2a01      	cmp	r2, #1
    4ec6:	d81e      	bhi.n	4f06 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ec8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4ecc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4ece:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ed0:	b289      	uxth	r1, r1
    4ed2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4ed6:	d10a      	bne.n	4eee <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ed8:	b13d      	cbz	r5, 4eea <process_event+0xa6>
    4eda:	8b63      	ldrh	r3, [r4, #26]
    4edc:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4ede:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4ee0:	3301      	adds	r3, #1
    4ee2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ee4:	2a00      	cmp	r2, #0
    4ee6:	d1fa      	bne.n	4ede <process_event+0x9a>
    4ee8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4eea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4eee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4ef0:	4620      	mov	r0, r4
    4ef2:	f01d fc3b 	bl	2276c <process_recheck>
    4ef6:	4606      	mov	r6, r0
    4ef8:	2800      	cmp	r0, #0
    4efa:	d0d3      	beq.n	4ea4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4efc:	8b23      	ldrh	r3, [r4, #24]
    4efe:	f043 0320 	orr.w	r3, r3, #32
    4f02:	8323      	strh	r3, [r4, #24]
    4f04:	e7cd      	b.n	4ea2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4f06:	2b04      	cmp	r3, #4
    4f08:	d10c      	bne.n	4f24 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f0a:	f021 0107 	bic.w	r1, r1, #7
    4f0e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f10:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4f12:	4620      	mov	r0, r4
    4f14:	f01d fc2a 	bl	2276c <process_recheck>
    4f18:	4605      	mov	r5, r0
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d0c1      	beq.n	4ea2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4f1e:	f041 0120 	orr.w	r1, r1, #32
    4f22:	8321      	strh	r1, [r4, #24]
    4f24:	2500      	movs	r5, #0
    4f26:	e7bc      	b.n	4ea2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    4f28:	2803      	cmp	r0, #3
    4f2a:	d109      	bne.n	4f40 <process_event+0xfc>
			transit = mgr->transitions->start;
    4f2c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f2e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4f32:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f34:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f38:	8323      	strh	r3, [r4, #24]
}
    4f3a:	2500      	movs	r5, #0
		res = 0;
    4f3c:	462f      	mov	r7, r5
    4f3e:	e7b1      	b.n	4ea4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4f40:	2804      	cmp	r0, #4
    4f42:	d106      	bne.n	4f52 <process_event+0x10e>
			transit = mgr->transitions->stop;
    4f44:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f46:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4f4a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f4c:	f043 0304 	orr.w	r3, r3, #4
    4f50:	e7f2      	b.n	4f38 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    4f52:	2805      	cmp	r0, #5
    4f54:	d106      	bne.n	4f64 <process_event+0x120>
			transit = mgr->transitions->reset;
    4f56:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f58:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4f5c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f5e:	f043 0305 	orr.w	r3, r3, #5
    4f62:	e7e9      	b.n	4f38 <process_event+0xf4>
    4f64:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4f66:	462e      	mov	r6, r5
    4f68:	e7e8      	b.n	4f3c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    4f6a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4f6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4f70:	8321      	strh	r1, [r4, #24]
    4f72:	f38b 8811 	msr	BASEPRI, fp
    4f76:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4f7a:	b9fb      	cbnz	r3, 4fbc <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4f7c:	bb85      	cbnz	r5, 4fe0 <process_event+0x19c>
			if (transit != NULL) {
    4f7e:	b116      	cbz	r6, 4f86 <process_event+0x142>
				transit(mgr, transition_complete);
    4f80:	491f      	ldr	r1, [pc, #124]	; (5000 <process_event+0x1bc>)
    4f82:	4620      	mov	r0, r4
    4f84:	47b0      	blx	r6
	__asm__ volatile(
    4f86:	f04f 0320 	mov.w	r3, #32
    4f8a:	f3ef 8b11 	mrs	fp, BASEPRI
    4f8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f92:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4f96:	8b23      	ldrh	r3, [r4, #24]
    4f98:	f023 0308 	bic.w	r3, r3, #8
    4f9c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4f9e:	8b23      	ldrh	r3, [r4, #24]
    4fa0:	06da      	lsls	r2, r3, #27
    4fa2:	d525      	bpl.n	4ff0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4fa4:	f023 0310 	bic.w	r3, r3, #16
    4fa8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4faa:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4fac:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4fb0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4fb4:	2900      	cmp	r1, #0
    4fb6:	f47f af5e 	bne.w	4e76 <process_event+0x32>
out:
    4fba:	e754      	b.n	4e66 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4fbc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4fbe:	2900      	cmp	r1, #0
    4fc0:	d0dc      	beq.n	4f7c <process_event+0x138>
	return node->next;
    4fc2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    4fc6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4fca:	463b      	mov	r3, r7
    4fcc:	4652      	mov	r2, sl
    4fce:	4620      	mov	r0, r4
    4fd0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4fd2:	f1b9 0f00 	cmp.w	r9, #0
    4fd6:	d0d1      	beq.n	4f7c <process_event+0x138>
    4fd8:	4649      	mov	r1, r9
    4fda:	f8d9 9000 	ldr.w	r9, [r9]
    4fde:	e7f2      	b.n	4fc6 <process_event+0x182>
    4fe0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4fe2:	463b      	mov	r3, r7
    4fe4:	4652      	mov	r2, sl
    4fe6:	4620      	mov	r0, r4
    4fe8:	682d      	ldr	r5, [r5, #0]
    4fea:	f01d fbdb 	bl	227a4 <notify_one>
    4fee:	e7c5      	b.n	4f7c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4ff0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4ff4:	bf1e      	ittt	ne
    4ff6:	f023 0320 	bicne.w	r3, r3, #32
    4ffa:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4ffc:	2102      	movne	r1, #2
    4ffe:	e7d5      	b.n	4fac <process_event+0x168>
    5000:	000227d1 	.word	0x000227d1

00005004 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    5004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5008:	4681      	mov	r9, r0
    500a:	b09b      	sub	sp, #108	; 0x6c
    500c:	468a      	mov	sl, r1
    500e:	4615      	mov	r5, r2
    5010:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    5012:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    5014:	7828      	ldrb	r0, [r5, #0]
    5016:	b910      	cbnz	r0, 501e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    5018:	4630      	mov	r0, r6
    501a:	f000 bdee 	b.w	5bfa <cbvprintf+0xbf6>
			OUTC(*fp++);
    501e:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    5020:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    5022:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    5024:	d006      	beq.n	5034 <cbvprintf+0x30>
			OUTC(*fp++);
    5026:	4651      	mov	r1, sl
			OUTC('%');
    5028:	47c8      	blx	r9
    502a:	2800      	cmp	r0, #0
    502c:	f2c0 85e5 	blt.w	5bfa <cbvprintf+0xbf6>
    5030:	3601      	adds	r6, #1
		if (bps == NULL) {
    5032:	e24c      	b.n	54ce <cbvprintf+0x4ca>
		} state = {
    5034:	2218      	movs	r2, #24
    5036:	2100      	movs	r1, #0
    5038:	a80c      	add	r0, sp, #48	; 0x30
    503a:	f01f fcbb 	bl	249b4 <memset>
	if (*sp == '%') {
    503e:	786b      	ldrb	r3, [r5, #1]
    5040:	2b25      	cmp	r3, #37	; 0x25
    5042:	d07c      	beq.n	513e <cbvprintf+0x13a>
    5044:	2200      	movs	r2, #0
    5046:	1c68      	adds	r0, r5, #1
    5048:	4696      	mov	lr, r2
    504a:	4690      	mov	r8, r2
    504c:	4694      	mov	ip, r2
    504e:	4617      	mov	r7, r2
    5050:	4601      	mov	r1, r0
		switch (*sp) {
    5052:	f810 3b01 	ldrb.w	r3, [r0], #1
    5056:	2b2b      	cmp	r3, #43	; 0x2b
    5058:	f000 80a0 	beq.w	519c <cbvprintf+0x198>
    505c:	f200 8097 	bhi.w	518e <cbvprintf+0x18a>
    5060:	2b20      	cmp	r3, #32
    5062:	f000 809e 	beq.w	51a2 <cbvprintf+0x19e>
    5066:	2b23      	cmp	r3, #35	; 0x23
    5068:	f000 809e 	beq.w	51a8 <cbvprintf+0x1a4>
    506c:	b12f      	cbz	r7, 507a <cbvprintf+0x76>
    506e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5072:	f040 0004 	orr.w	r0, r0, #4
    5076:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    507a:	f1bc 0f00 	cmp.w	ip, #0
    507e:	d005      	beq.n	508c <cbvprintf+0x88>
    5080:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5084:	f040 0008 	orr.w	r0, r0, #8
    5088:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    508c:	f1b8 0f00 	cmp.w	r8, #0
    5090:	d005      	beq.n	509e <cbvprintf+0x9a>
    5092:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5096:	f040 0010 	orr.w	r0, r0, #16
    509a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    509e:	f1be 0f00 	cmp.w	lr, #0
    50a2:	d005      	beq.n	50b0 <cbvprintf+0xac>
    50a4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    50a8:	f040 0020 	orr.w	r0, r0, #32
    50ac:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    50b0:	b12a      	cbz	r2, 50be <cbvprintf+0xba>
    50b2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    50b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    50ba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    50be:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    50c2:	f002 0044 	and.w	r0, r2, #68	; 0x44
    50c6:	2844      	cmp	r0, #68	; 0x44
    50c8:	d103      	bne.n	50d2 <cbvprintf+0xce>
		conv->flag_zero = false;
    50ca:	f36f 1286 	bfc	r2, #6, #1
    50ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    50d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    50d6:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    50d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    50dc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    50e0:	d17e      	bne.n	51e0 <cbvprintf+0x1dc>
		conv->width_star = true;
    50e2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    50e6:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    50ea:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    50ec:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    50f0:	781a      	ldrb	r2, [r3, #0]
    50f2:	2a2e      	cmp	r2, #46	; 0x2e
    50f4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    50f8:	bf0c      	ite	eq
    50fa:	2101      	moveq	r1, #1
    50fc:	2100      	movne	r1, #0
    50fe:	f361 0241 	bfi	r2, r1, #1, #1
    5102:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    5106:	d177      	bne.n	51f8 <cbvprintf+0x1f4>
	if (*sp == '*') {
    5108:	785a      	ldrb	r2, [r3, #1]
    510a:	2a2a      	cmp	r2, #42	; 0x2a
    510c:	d06d      	beq.n	51ea <cbvprintf+0x1e6>
	++sp;
    510e:	3301      	adds	r3, #1
	size_t val = 0;
    5110:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    5112:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5116:	4618      	mov	r0, r3
    5118:	f810 2b01 	ldrb.w	r2, [r0], #1
    511c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5120:	2f09      	cmp	r7, #9
    5122:	f240 80ab 	bls.w	527c <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    5126:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    512a:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    512c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    5130:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    5134:	f361 0241 	bfi	r2, r1, #1, #1
    5138:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    513c:	e05c      	b.n	51f8 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    513e:	1caa      	adds	r2, r5, #2
    5140:	9202      	str	r2, [sp, #8]
    5142:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    5146:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    514a:	07df      	lsls	r7, r3, #31
    514c:	f140 8173 	bpl.w	5436 <cbvprintf+0x432>
			width = va_arg(ap, int);
    5150:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    5154:	f1bb 0f00 	cmp.w	fp, #0
    5158:	da07      	bge.n	516a <cbvprintf+0x166>
				conv->flag_dash = true;
    515a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    515e:	f042 0204 	orr.w	r2, r2, #4
    5162:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    5166:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    516a:	0758      	lsls	r0, r3, #29
    516c:	f140 816c 	bpl.w	5448 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    5170:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    5174:	f1b8 0f00 	cmp.w	r8, #0
    5178:	f280 816b 	bge.w	5452 <cbvprintf+0x44e>
				conv->prec_present = false;
    517c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5180:	f36f 0341 	bfc	r3, #1, #1
    5184:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    5188:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    518c:	e161      	b.n	5452 <cbvprintf+0x44e>
		switch (*sp) {
    518e:	2b2d      	cmp	r3, #45	; 0x2d
    5190:	d00d      	beq.n	51ae <cbvprintf+0x1aa>
    5192:	2b30      	cmp	r3, #48	; 0x30
    5194:	f47f af6a 	bne.w	506c <cbvprintf+0x68>
			conv->flag_zero = true;
    5198:	2201      	movs	r2, #1
	} while (loop);
    519a:	e759      	b.n	5050 <cbvprintf+0x4c>
			conv->flag_plus = true;
    519c:	f04f 0c01 	mov.w	ip, #1
    51a0:	e756      	b.n	5050 <cbvprintf+0x4c>
			conv->flag_space = true;
    51a2:	f04f 0801 	mov.w	r8, #1
    51a6:	e753      	b.n	5050 <cbvprintf+0x4c>
			conv->flag_hash = true;
    51a8:	f04f 0e01 	mov.w	lr, #1
    51ac:	e750      	b.n	5050 <cbvprintf+0x4c>
		switch (*sp) {
    51ae:	2701      	movs	r7, #1
    51b0:	e74e      	b.n	5050 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    51b2:	fb0c 7202 	mla	r2, ip, r2, r7
    51b6:	3a30      	subs	r2, #48	; 0x30
    51b8:	4603      	mov	r3, r0
    51ba:	4618      	mov	r0, r3
    51bc:	f810 7b01 	ldrb.w	r7, [r0], #1
    51c0:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    51c4:	f1be 0f09 	cmp.w	lr, #9
    51c8:	d9f3      	bls.n	51b2 <cbvprintf+0x1ae>
	if (sp != wp) {
    51ca:	4299      	cmp	r1, r3
    51cc:	d090      	beq.n	50f0 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    51ce:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    51d2:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    51d4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    51d6:	f362 0141 	bfi	r1, r2, #1, #1
    51da:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    51de:	e787      	b.n	50f0 <cbvprintf+0xec>
    51e0:	460b      	mov	r3, r1
	size_t val = 0;
    51e2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    51e4:	f04f 0c0a 	mov.w	ip, #10
    51e8:	e7e7      	b.n	51ba <cbvprintf+0x1b6>
		conv->prec_star = true;
    51ea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    51ee:	f042 0204 	orr.w	r2, r2, #4
    51f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    51f6:	3302      	adds	r3, #2
	switch (*sp) {
    51f8:	4619      	mov	r1, r3
    51fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    51fe:	2a6c      	cmp	r2, #108	; 0x6c
    5200:	d05c      	beq.n	52bc <cbvprintf+0x2b8>
    5202:	d840      	bhi.n	5286 <cbvprintf+0x282>
    5204:	2a68      	cmp	r2, #104	; 0x68
    5206:	d046      	beq.n	5296 <cbvprintf+0x292>
    5208:	2a6a      	cmp	r2, #106	; 0x6a
    520a:	d061      	beq.n	52d0 <cbvprintf+0x2cc>
    520c:	2a4c      	cmp	r2, #76	; 0x4c
    520e:	d067      	beq.n	52e0 <cbvprintf+0x2dc>
    5210:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    5212:	460b      	mov	r3, r1
    5214:	f813 2b01 	ldrb.w	r2, [r3], #1
    5218:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    521a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    521c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5220:	f200 80df 	bhi.w	53e2 <cbvprintf+0x3de>
    5224:	2a57      	cmp	r2, #87	; 0x57
    5226:	d868      	bhi.n	52fa <cbvprintf+0x2f6>
    5228:	2a41      	cmp	r2, #65	; 0x41
    522a:	d004      	beq.n	5236 <cbvprintf+0x232>
    522c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5230:	2b02      	cmp	r3, #2
    5232:	f200 80d6 	bhi.w	53e2 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    5236:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    523a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    523e:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    5240:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    5244:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    5248:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    524c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    5250:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5254:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    5258:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    525c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    525e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    5262:	b2cb      	uxtb	r3, r1
    5264:	f100 80e5 	bmi.w	5432 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    5268:	f003 0278 	and.w	r2, r3, #120	; 0x78
    526c:	2a18      	cmp	r2, #24
    526e:	f040 80b5 	bne.w	53dc <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    5272:	f36f 03c6 	bfc	r3, #3, #4
    5276:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    527a:	e09c      	b.n	53b6 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    527c:	fb0c 2101 	mla	r1, ip, r1, r2
    5280:	3930      	subs	r1, #48	; 0x30
    5282:	4603      	mov	r3, r0
    5284:	e747      	b.n	5116 <cbvprintf+0x112>
	switch (*sp) {
    5286:	2a74      	cmp	r2, #116	; 0x74
    5288:	d026      	beq.n	52d8 <cbvprintf+0x2d4>
    528a:	2a7a      	cmp	r2, #122	; 0x7a
    528c:	d1c0      	bne.n	5210 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    528e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5292:	2206      	movs	r2, #6
    5294:	e00d      	b.n	52b2 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    5296:	785a      	ldrb	r2, [r3, #1]
    5298:	2a68      	cmp	r2, #104	; 0x68
    529a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    529e:	d106      	bne.n	52ae <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    52a0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    52a2:	f361 02c6 	bfi	r2, r1, #3, #4
    52a6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    52aa:	1c99      	adds	r1, r3, #2
    52ac:	e7b1      	b.n	5212 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    52ae:	4613      	mov	r3, r2
    52b0:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    52b2:	f362 03c6 	bfi	r3, r2, #3, #4
    52b6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    52ba:	e7aa      	b.n	5212 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    52bc:	785a      	ldrb	r2, [r3, #1]
    52be:	2a6c      	cmp	r2, #108	; 0x6c
    52c0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    52c4:	d101      	bne.n	52ca <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    52c6:	2104      	movs	r1, #4
    52c8:	e7eb      	b.n	52a2 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    52ca:	4613      	mov	r3, r2
    52cc:	2203      	movs	r2, #3
    52ce:	e7f0      	b.n	52b2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    52d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52d4:	2205      	movs	r2, #5
    52d6:	e7ec      	b.n	52b2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    52d8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    52dc:	2207      	movs	r2, #7
    52de:	e7e8      	b.n	52b2 <cbvprintf+0x2ae>
		conv->unsupported = true;
    52e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    52e4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    52e8:	f023 0302 	bic.w	r3, r3, #2
    52ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    52f0:	f043 0302 	orr.w	r3, r3, #2
    52f4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    52f8:	e78b      	b.n	5212 <cbvprintf+0x20e>
	switch (conv->specifier) {
    52fa:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    52fe:	2b20      	cmp	r3, #32
    5300:	d86f      	bhi.n	53e2 <cbvprintf+0x3de>
    5302:	a101      	add	r1, pc, #4	; (adr r1, 5308 <cbvprintf+0x304>)
    5304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5308:	000053bb 	.word	0x000053bb
    530c:	000053e3 	.word	0x000053e3
    5310:	000053e3 	.word	0x000053e3
    5314:	000053e3 	.word	0x000053e3
    5318:	000053e3 	.word	0x000053e3
    531c:	000053e3 	.word	0x000053e3
    5320:	000053e3 	.word	0x000053e3
    5324:	000053e3 	.word	0x000053e3
    5328:	000053e3 	.word	0x000053e3
    532c:	00005237 	.word	0x00005237
    5330:	000053e3 	.word	0x000053e3
    5334:	000053bb 	.word	0x000053bb
    5338:	0000538d 	.word	0x0000538d
    533c:	00005237 	.word	0x00005237
    5340:	00005237 	.word	0x00005237
    5344:	00005237 	.word	0x00005237
    5348:	000053e3 	.word	0x000053e3
    534c:	0000538d 	.word	0x0000538d
    5350:	000053e3 	.word	0x000053e3
    5354:	000053e3 	.word	0x000053e3
    5358:	000053e3 	.word	0x000053e3
    535c:	000053e3 	.word	0x000053e3
    5360:	000053f1 	.word	0x000053f1
    5364:	000053bb 	.word	0x000053bb
    5368:	00005415 	.word	0x00005415
    536c:	000053e3 	.word	0x000053e3
    5370:	000053e3 	.word	0x000053e3
    5374:	00005415 	.word	0x00005415
    5378:	000053e3 	.word	0x000053e3
    537c:	000053bb 	.word	0x000053bb
    5380:	000053e3 	.word	0x000053e3
    5384:	000053e3 	.word	0x000053e3
    5388:	000053bb 	.word	0x000053bb
		conv->specifier_cat = SPECIFIER_SINT;
    538c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5390:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    5392:	f361 0302 	bfi	r3, r1, #0, #3
    5396:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    539a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    539e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    53a2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    53a4:	bf02      	ittt	eq
    53a6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    53aa:	f041 0101 	orreq.w	r1, r1, #1
    53ae:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    53b2:	2a63      	cmp	r2, #99	; 0x63
    53b4:	d005      	beq.n	53c2 <cbvprintf+0x3be>
	bool unsupported = false;
    53b6:	2300      	movs	r3, #0
    53b8:	e006      	b.n	53c8 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    53ba:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    53be:	2102      	movs	r1, #2
    53c0:	e7e7      	b.n	5392 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    53c2:	3b00      	subs	r3, #0
    53c4:	bf18      	it	ne
    53c6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    53c8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    53cc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    53d0:	430b      	orrs	r3, r1
    53d2:	f363 0241 	bfi	r2, r3, #1, #1
    53d6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    53da:	e6b4      	b.n	5146 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    53dc:	f013 0f38 	tst.w	r3, #56	; 0x38
    53e0:	d0e9      	beq.n	53b6 <cbvprintf+0x3b2>
			conv->invalid = true;
    53e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    53e6:	f043 0301 	orr.w	r3, r3, #1
    53ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    53ee:	e7e2      	b.n	53b6 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    53f0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    53f4:	2203      	movs	r2, #3
    53f6:	f362 0302 	bfi	r3, r2, #0, #3
    53fa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    53fe:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5402:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5406:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    540a:	f1dc 0300 	rsbs	r3, ip, #0
    540e:	eb43 030c 	adc.w	r3, r3, ip
    5412:	e7d9      	b.n	53c8 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    5414:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5418:	2203      	movs	r2, #3
    541a:	f362 0302 	bfi	r3, r2, #0, #3
    541e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5422:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5426:	f013 0f78 	tst.w	r3, #120	; 0x78
    542a:	bf14      	ite	ne
    542c:	2301      	movne	r3, #1
    542e:	2300      	moveq	r3, #0
    5430:	e7ca      	b.n	53c8 <cbvprintf+0x3c4>
			unsupported = true;
    5432:	2301      	movs	r3, #1
    5434:	e7c8      	b.n	53c8 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    5436:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    543a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    543c:	bfb4      	ite	lt
    543e:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    5442:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    5446:	e690      	b.n	516a <cbvprintf+0x166>
		} else if (conv->prec_present) {
    5448:	0799      	lsls	r1, r3, #30
    544a:	f57f ae9d 	bpl.w	5188 <cbvprintf+0x184>
			precision = conv->prec_value;
    544e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    5452:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5456:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5458:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    545c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    5460:	f003 0207 	and.w	r2, r3, #7
    5464:	2a04      	cmp	r2, #4
    5466:	d109      	bne.n	547c <cbvprintf+0x478>
		    && !conv->prec_present) {
    5468:	078a      	lsls	r2, r1, #30
    546a:	d407      	bmi.n	547c <cbvprintf+0x478>
			if (conv->specifier_a) {
    546c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    5470:	2a00      	cmp	r2, #0
    5472:	bfb4      	ite	lt
    5474:	f04f 080d 	movlt.w	r8, #13
    5478:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    547c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    5480:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5482:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5486:	d137      	bne.n	54f8 <cbvprintf+0x4f4>
			switch (length_mod) {
    5488:	1ecb      	subs	r3, r1, #3
    548a:	2b04      	cmp	r3, #4
    548c:	d821      	bhi.n	54d2 <cbvprintf+0x4ce>
    548e:	e8df f003 	tbb	[pc, r3]
    5492:	0903      	.short	0x0903
    5494:	2009      	.short	0x2009
    5496:	20          	.byte	0x20
    5497:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5498:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    549c:	17da      	asrs	r2, r3, #31
    549e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    54a2:	e006      	b.n	54b2 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    54a4:	3407      	adds	r4, #7
    54a6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    54aa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    54ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    54b2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    54b6:	07bb      	lsls	r3, r7, #30
    54b8:	d056      	beq.n	5568 <cbvprintf+0x564>
			OUTS(sp, fp);
    54ba:	9b02      	ldr	r3, [sp, #8]
    54bc:	462a      	mov	r2, r5
    54be:	4651      	mov	r1, sl
    54c0:	4648      	mov	r0, r9
    54c2:	f01d fc84 	bl	22dce <outs>
    54c6:	2800      	cmp	r0, #0
    54c8:	f2c0 8397 	blt.w	5bfa <cbvprintf+0xbf6>
    54cc:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    54ce:	9d02      	ldr	r5, [sp, #8]
    54d0:	e5a0      	b.n	5014 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    54d2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    54d6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    54d8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    54dc:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    54e0:	d105      	bne.n	54ee <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    54e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    54e6:	930c      	str	r3, [sp, #48]	; 0x30
    54e8:	2300      	movs	r3, #0
    54ea:	930d      	str	r3, [sp, #52]	; 0x34
    54ec:	e7e1      	b.n	54b2 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    54ee:	2902      	cmp	r1, #2
    54f0:	d1df      	bne.n	54b2 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    54f2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    54f6:	e7d1      	b.n	549c <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    54f8:	2b02      	cmp	r3, #2
    54fa:	d123      	bne.n	5544 <cbvprintf+0x540>
			switch (length_mod) {
    54fc:	1ecb      	subs	r3, r1, #3
    54fe:	2b04      	cmp	r3, #4
    5500:	d813      	bhi.n	552a <cbvprintf+0x526>
    5502:	e8df f003 	tbb	[pc, r3]
    5506:	0a03      	.short	0x0a03
    5508:	120a      	.short	0x120a
    550a:	12          	.byte	0x12
    550b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    550c:	6822      	ldr	r2, [r4, #0]
    550e:	920c      	str	r2, [sp, #48]	; 0x30
    5510:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    5512:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    5514:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    5516:	4604      	mov	r4, r0
    5518:	e7cb      	b.n	54b2 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    551a:	1de0      	adds	r0, r4, #7
    551c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    5520:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5524:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    5528:	e7f5      	b.n	5516 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    552a:	f854 3b04 	ldr.w	r3, [r4], #4
    552e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5530:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    5532:	f04f 0300 	mov.w	r3, #0
    5536:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5538:	d0d3      	beq.n	54e2 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    553a:	2902      	cmp	r1, #2
    553c:	d1b9      	bne.n	54b2 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    553e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5542:	e7d0      	b.n	54e6 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    5544:	2b04      	cmp	r3, #4
    5546:	d109      	bne.n	555c <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    5548:	1de3      	adds	r3, r4, #7
    554a:	f023 0307 	bic.w	r3, r3, #7
    554e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    5552:	e9d3 2300 	ldrd	r2, r3, [r3]
    5556:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    555a:	e7aa      	b.n	54b2 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    555c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    555e:	bf04      	itt	eq
    5560:	f854 3b04 	ldreq.w	r3, [r4], #4
    5564:	930c      	streq	r3, [sp, #48]	; 0x30
    5566:	e7a4      	b.n	54b2 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    5568:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    556c:	2a78      	cmp	r2, #120	; 0x78
    556e:	d8ae      	bhi.n	54ce <cbvprintf+0x4ca>
    5570:	2a57      	cmp	r2, #87	; 0x57
    5572:	f200 808c 	bhi.w	568e <cbvprintf+0x68a>
    5576:	2a25      	cmp	r2, #37	; 0x25
    5578:	f000 80d4 	beq.w	5724 <cbvprintf+0x720>
    557c:	2a24      	cmp	r2, #36	; 0x24
    557e:	d9a6      	bls.n	54ce <cbvprintf+0x4ca>
    5580:	2a41      	cmp	r2, #65	; 0x41
    5582:	d003      	beq.n	558c <cbvprintf+0x588>
    5584:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5588:	2b02      	cmp	r3, #2
    558a:	d8a0      	bhi.n	54ce <cbvprintf+0x4ca>
	} u = {
    558c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    5590:	2b00      	cmp	r3, #0
    5592:	f2c0 81be 	blt.w	5912 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    5596:	0738      	lsls	r0, r7, #28
    5598:	f100 81bd 	bmi.w	5916 <cbvprintf+0x912>
		*sign = ' ';
    559c:	f017 0710 	ands.w	r7, r7, #16
    55a0:	bf18      	it	ne
    55a2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    55a4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    55a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    55ac:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    55b0:	2d00      	cmp	r5, #0
    55b2:	f040 81b2 	bne.w	591a <cbvprintf+0x916>
    55b6:	ea51 0003 	orrs.w	r0, r1, r3
    55ba:	bf14      	ite	ne
    55bc:	2001      	movne	r0, #1
    55be:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    55c0:	02db      	lsls	r3, r3, #11
    55c2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    55c6:	02c9      	lsls	r1, r1, #11
		c = 'f';
    55c8:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    55ca:	ea45 0e01 	orr.w	lr, r5, r1
    55ce:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    55d2:	bf08      	it	eq
    55d4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    55d6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    55da:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    55de:	f000 8206 	beq.w	59ee <cbvprintf+0x9ea>
		if (is_subnormal) {
    55e2:	2800      	cmp	r0, #0
    55e4:	f040 81ce 	bne.w	5984 <cbvprintf+0x980>
		fract |= BIT_63;
    55e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    55ec:	f04f 0c00 	mov.w	ip, #0
    55f0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    55f4:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    55f8:	9109      	str	r1, [sp, #36]	; 0x24
    55fa:	4663      	mov	r3, ip
		fract *= 5U;
    55fc:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    5600:	f115 0f02 	cmn.w	r5, #2
    5604:	f2c0 81c5 	blt.w	5992 <cbvprintf+0x98e>
    5608:	f1bc 0f00 	cmp.w	ip, #0
    560c:	d001      	beq.n	5612 <cbvprintf+0x60e>
    560e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    5612:	2d00      	cmp	r5, #0
		fract += 2;
    5614:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    5618:	f300 81d0 	bgt.w	59bc <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    561c:	9809      	ldr	r0, [sp, #36]	; 0x24
    561e:	9908      	ldr	r1, [sp, #32]
    5620:	f1c5 0c04 	rsb	ip, r5, #4
    5624:	351c      	adds	r5, #28
    5626:	fa00 f505 	lsl.w	r5, r0, r5
    562a:	f1ac 0e20 	sub.w	lr, ip, #32
    562e:	fa21 f10c 	lsr.w	r1, r1, ip
    5632:	fa20 fe0e 	lsr.w	lr, r0, lr
    5636:	4329      	orrs	r1, r5
    5638:	ea41 010e 	orr.w	r1, r1, lr
    563c:	fa20 f00c 	lsr.w	r0, r0, ip
    5640:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    5644:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5648:	2947      	cmp	r1, #71	; 0x47
    564a:	f040 81d7 	bne.w	59fc <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    564e:	1cdd      	adds	r5, r3, #3
    5650:	db02      	blt.n	5658 <cbvprintf+0x654>
    5652:	4598      	cmp	r8, r3
    5654:	f280 81ce 	bge.w	59f4 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    5658:	3a02      	subs	r2, #2
			if (precision > 0) {
    565a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    565e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    5660:	dd01      	ble.n	5666 <cbvprintf+0x662>
				precision--;
    5662:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    5666:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    566a:	0688      	lsls	r0, r1, #26
    566c:	f100 81c6 	bmi.w	59fc <cbvprintf+0x9f8>
    5670:	f1b8 0f00 	cmp.w	r8, #0
    5674:	bfd4      	ite	le
    5676:	2100      	movle	r1, #0
    5678:	2101      	movgt	r1, #1
	if (c == 'f') {
    567a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    567c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    567e:	f040 81bf 	bne.w	5a00 <cbvprintf+0x9fc>
		if (decimals < 0) {
    5682:	eb18 0503 	adds.w	r5, r8, r3
    5686:	f140 81bd 	bpl.w	5a04 <cbvprintf+0xa00>
			decimals = 0;
    568a:	2500      	movs	r5, #0
    568c:	e1bd      	b.n	5a0a <cbvprintf+0xa06>
		switch (conv->specifier) {
    568e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    5692:	2b20      	cmp	r3, #32
    5694:	f63f af1b 	bhi.w	54ce <cbvprintf+0x4ca>
    5698:	a001      	add	r0, pc, #4	; (adr r0, 56a0 <cbvprintf+0x69c>)
    569a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    569e:	bf00      	nop
    56a0:	000058b5 	.word	0x000058b5
    56a4:	000054cf 	.word	0x000054cf
    56a8:	000054cf 	.word	0x000054cf
    56ac:	000054cf 	.word	0x000054cf
    56b0:	000054cf 	.word	0x000054cf
    56b4:	000054cf 	.word	0x000054cf
    56b8:	000054cf 	.word	0x000054cf
    56bc:	000054cf 	.word	0x000054cf
    56c0:	000054cf 	.word	0x000054cf
    56c4:	0000558d 	.word	0x0000558d
    56c8:	000054cf 	.word	0x000054cf
    56cc:	00005751 	.word	0x00005751
    56d0:	00005855 	.word	0x00005855
    56d4:	0000558d 	.word	0x0000558d
    56d8:	0000558d 	.word	0x0000558d
    56dc:	0000558d 	.word	0x0000558d
    56e0:	000054cf 	.word	0x000054cf
    56e4:	00005855 	.word	0x00005855
    56e8:	000054cf 	.word	0x000054cf
    56ec:	000054cf 	.word	0x000054cf
    56f0:	000054cf 	.word	0x000054cf
    56f4:	000054cf 	.word	0x000054cf
    56f8:	000058eb 	.word	0x000058eb
    56fc:	000058b5 	.word	0x000058b5
    5700:	000058b9 	.word	0x000058b9
    5704:	000054cf 	.word	0x000054cf
    5708:	000054cf 	.word	0x000054cf
    570c:	0000572b 	.word	0x0000572b
    5710:	000054cf 	.word	0x000054cf
    5714:	000058b5 	.word	0x000058b5
    5718:	000054cf 	.word	0x000054cf
    571c:	000054cf 	.word	0x000054cf
    5720:	000058b5 	.word	0x000058b5
			OUTC('%');
    5724:	4651      	mov	r1, sl
    5726:	4610      	mov	r0, r2
    5728:	e47e      	b.n	5028 <cbvprintf+0x24>
			if (precision >= 0) {
    572a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    572e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    5730:	db09      	blt.n	5746 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    5732:	4641      	mov	r1, r8
    5734:	4610      	mov	r0, r2
    5736:	9203      	str	r2, [sp, #12]
    5738:	f01f f90b 	bl	24952 <strnlen>
				len = strlen(bps);
    573c:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    573e:	2700      	movs	r7, #0
			bpe = bps + len;
    5740:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    5742:	b962      	cbnz	r2, 575e <cbvprintf+0x75a>
    5744:	e6c3      	b.n	54ce <cbvprintf+0x4ca>
				len = strlen(bps);
    5746:	4610      	mov	r0, r2
    5748:	9203      	str	r2, [sp, #12]
    574a:	f01f f8fb 	bl	24944 <strlen>
    574e:	e7f5      	b.n	573c <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5752:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    5756:	2700      	movs	r7, #0
			bpe = buf + 1;
    5758:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    575c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    575e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    5760:	b107      	cbz	r7, 5764 <cbvprintf+0x760>
			nj_len += 1U;
    5762:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    5764:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    5768:	06c1      	lsls	r1, r0, #27
    576a:	f140 823a 	bpl.w	5be2 <cbvprintf+0xbde>
			nj_len += 2U;
    576e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    5770:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    5772:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    5774:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    5776:	bf44      	itt	mi
    5778:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    577a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    577c:	f1bb 0f00 	cmp.w	fp, #0
    5780:	dd23      	ble.n	57ca <cbvprintf+0x7c6>
			width -= (int)nj_len;
    5782:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    5786:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    578a:	0759      	lsls	r1, r3, #29
    578c:	f3c3 0880 	ubfx	r8, r3, #2, #1
    5790:	d41b      	bmi.n	57ca <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    5792:	0658      	lsls	r0, r3, #25
    5794:	f140 8234 	bpl.w	5c00 <cbvprintf+0xbfc>
					if (sign != 0) {
    5798:	2f00      	cmp	r7, #0
    579a:	f000 8234 	beq.w	5c06 <cbvprintf+0xc02>
						OUTC(sign);
    579e:	4651      	mov	r1, sl
    57a0:	4638      	mov	r0, r7
    57a2:	9203      	str	r2, [sp, #12]
    57a4:	47c8      	blx	r9
    57a6:	2800      	cmp	r0, #0
    57a8:	f2c0 8227 	blt.w	5bfa <cbvprintf+0xbf6>
    57ac:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    57ae:	4647      	mov	r7, r8
						OUTC(sign);
    57b0:	3601      	adds	r6, #1
					pad = '0';
    57b2:	f04f 0830 	mov.w	r8, #48	; 0x30
    57b6:	445e      	add	r6, fp
    57b8:	465b      	mov	r3, fp
				while (width-- > 0) {
    57ba:	2b00      	cmp	r3, #0
    57bc:	eba6 000b 	sub.w	r0, r6, fp
    57c0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    57c4:	f300 8211 	bgt.w	5bea <cbvprintf+0xbe6>
    57c8:	4606      	mov	r6, r0
		if (sign != 0) {
    57ca:	b147      	cbz	r7, 57de <cbvprintf+0x7da>
			OUTC(sign);
    57cc:	4651      	mov	r1, sl
    57ce:	4638      	mov	r0, r7
    57d0:	9203      	str	r2, [sp, #12]
    57d2:	47c8      	blx	r9
    57d4:	2800      	cmp	r0, #0
    57d6:	f2c0 8210 	blt.w	5bfa <cbvprintf+0xbf6>
    57da:	9a03      	ldr	r2, [sp, #12]
    57dc:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    57de:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    57e2:	0659      	lsls	r1, r3, #25
    57e4:	f140 8265 	bpl.w	5cb2 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    57e8:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    57ec:	2b00      	cmp	r3, #0
    57ee:	eba6 0302 	sub.w	r3, r6, r2
    57f2:	9303      	str	r3, [sp, #12]
    57f4:	f2c0 820a 	blt.w	5c0c <cbvprintf+0xc08>
    57f8:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    57fa:	7838      	ldrb	r0, [r7, #0]
    57fc:	9b03      	ldr	r3, [sp, #12]
    57fe:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    5802:	2a09      	cmp	r2, #9
    5804:	46b8      	mov	r8, r7
    5806:	eb03 0607 	add.w	r6, r3, r7
    580a:	f107 0701 	add.w	r7, r7, #1
    580e:	f240 8229 	bls.w	5c64 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    5812:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    5816:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    5818:	0693      	lsls	r3, r2, #26
    581a:	d408      	bmi.n	582e <cbvprintf+0x82a>
    581c:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    581e:	2f00      	cmp	r7, #0
    5820:	eba6 0307 	sub.w	r3, r6, r7
    5824:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    5828:	f300 8222 	bgt.w	5c70 <cbvprintf+0xc6c>
    582c:	461e      	mov	r6, r3
				if (*cp == '.') {
    582e:	f898 0000 	ldrb.w	r0, [r8]
    5832:	282e      	cmp	r0, #46	; 0x2e
    5834:	d10b      	bne.n	584e <cbvprintf+0x84a>
					OUTC(*cp++);
    5836:	4651      	mov	r1, sl
    5838:	47c8      	blx	r9
						OUTC('0');
    583a:	2800      	cmp	r0, #0
    583c:	f2c0 81dd 	blt.w	5bfa <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    5840:	2f00      	cmp	r7, #0
						OUTC('0');
    5842:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    5846:	f300 821a 	bgt.w	5c7e <cbvprintf+0xc7a>
					OUTC(*cp++);
    584a:	f108 0801 	add.w	r8, r8, #1
    584e:	eba6 0608 	sub.w	r6, r6, r8
    5852:	e21d      	b.n	5c90 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    5854:	073d      	lsls	r5, r7, #28
    5856:	d42b      	bmi.n	58b0 <cbvprintf+0x8ac>
				sign = ' ';
    5858:	f017 0710 	ands.w	r7, r7, #16
    585c:	bf18      	it	ne
    585e:	2720      	movne	r7, #32
			sint = value->sint;
    5860:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    5864:	2b00      	cmp	r3, #0
    5866:	da05      	bge.n	5874 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    5868:	4252      	negs	r2, r2
    586a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    586e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5872:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    5874:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    5878:	9300      	str	r3, [sp, #0]
    587a:	aa0e      	add	r2, sp, #56	; 0x38
    587c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    5880:	ab13      	add	r3, sp, #76	; 0x4c
    5882:	f01d fa5e 	bl	22d42 <encode_uint>
    5886:	4602      	mov	r2, r0
			if (precision >= 0) {
    5888:	f1b8 0f00 	cmp.w	r8, #0
    588c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    5890:	f6ff af57 	blt.w	5742 <cbvprintf+0x73e>
				conv->flag_zero = false;
    5894:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5898:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    589a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    589e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    58a0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    58a4:	f67f af4d 	bls.w	5742 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    58a8:	eba8 0303 	sub.w	r3, r8, r3
    58ac:	930f      	str	r3, [sp, #60]	; 0x3c
    58ae:	e748      	b.n	5742 <cbvprintf+0x73e>
				sign = '+';
    58b0:	272b      	movs	r7, #43	; 0x2b
    58b2:	e7d5      	b.n	5860 <cbvprintf+0x85c>
		switch (conv->specifier) {
    58b4:	2700      	movs	r7, #0
    58b6:	e7dd      	b.n	5874 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    58b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    58ba:	2800      	cmp	r0, #0
    58bc:	f000 818d 	beq.w	5bda <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    58c0:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    58c4:	9300      	str	r3, [sp, #0]
    58c6:	aa0e      	add	r2, sp, #56	; 0x38
    58c8:	ab13      	add	r3, sp, #76	; 0x4c
    58ca:	2100      	movs	r1, #0
    58cc:	f01d fa39 	bl	22d42 <encode_uint>
				conv->altform_0c = true;
    58d0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    58d4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    58d8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    58dc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    58e0:	4602      	mov	r2, r0
				conv->altform_0c = true;
    58e2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    58e6:	2700      	movs	r7, #0
				goto prec_int_pad0;
    58e8:	e7ce      	b.n	5888 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    58ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    58ec:	2907      	cmp	r1, #7
    58ee:	f63f adee 	bhi.w	54ce <cbvprintf+0x4ca>
    58f2:	e8df f001 	tbb	[pc, r1]
    58f6:	040c      	.short	0x040c
    58f8:	08080c06 	.word	0x08080c06
    58fc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    58fe:	701e      	strb	r6, [r3, #0]
		break;
    5900:	e5e5      	b.n	54ce <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    5902:	801e      	strh	r6, [r3, #0]
		break;
    5904:	e5e3      	b.n	54ce <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    5906:	17f2      	asrs	r2, r6, #31
    5908:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    590c:	e5df      	b.n	54ce <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    590e:	601e      	str	r6, [r3, #0]
		break;
    5910:	e5dd      	b.n	54ce <cbvprintf+0x4ca>
		*sign = '-';
    5912:	272d      	movs	r7, #45	; 0x2d
    5914:	e646      	b.n	55a4 <cbvprintf+0x5a0>
		*sign = '+';
    5916:	272b      	movs	r7, #43	; 0x2b
    5918:	e644      	b.n	55a4 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    591a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    591e:	4285      	cmp	r5, r0
    5920:	d12d      	bne.n	597e <cbvprintf+0x97a>
		if (fract == 0) {
    5922:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5924:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    5928:	d11b      	bne.n	5962 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    592a:	2a19      	cmp	r2, #25
    592c:	d811      	bhi.n	5952 <cbvprintf+0x94e>
				*buf++ = 'I';
    592e:	2349      	movs	r3, #73	; 0x49
    5930:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    5934:	234e      	movs	r3, #78	; 0x4e
    5936:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    593a:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    593c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    5940:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5944:	f36f 1386 	bfc	r3, #6, #1
    5948:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    594c:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    5950:	e704      	b.n	575c <cbvprintf+0x758>
				*buf++ = 'i';
    5952:	2369      	movs	r3, #105	; 0x69
    5954:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5958:	236e      	movs	r3, #110	; 0x6e
    595a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    595e:	2366      	movs	r3, #102	; 0x66
    5960:	e7ec      	b.n	593c <cbvprintf+0x938>
			if (isupper((int)c)) {
    5962:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    5964:	bf99      	ittee	ls
    5966:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    5968:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    596a:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    596c:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    596e:	bf94      	ite	ls
    5970:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5974:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    5978:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    597c:	e7de      	b.n	593c <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    597e:	2000      	movs	r0, #0
    5980:	e61e      	b.n	55c0 <cbvprintf+0x5bc>
				expo--;
    5982:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    5984:	1849      	adds	r1, r1, r1
    5986:	415b      	adcs	r3, r3
    5988:	2b00      	cmp	r3, #0
    598a:	dafa      	bge.n	5982 <cbvprintf+0x97e>
    598c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    5990:	e62a      	b.n	55e8 <cbvprintf+0x5e4>
			fract >>= 1;
    5992:	0840      	lsrs	r0, r0, #1
    5994:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    5998:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    599a:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    599e:	46ac      	mov	ip, r5
			expo++;
    59a0:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    59a4:	d2f5      	bcs.n	5992 <cbvprintf+0x98e>
		fract *= 5U;
    59a6:	fb0e f501 	mul.w	r5, lr, r1
    59aa:	fba0 010e 	umull	r0, r1, r0, lr
    59ae:	4429      	add	r1, r5
		decexp--;
    59b0:	3b01      	subs	r3, #1
		expo++;
    59b2:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    59b6:	f04f 0c01 	mov.w	ip, #1
    59ba:	e621      	b.n	5600 <cbvprintf+0x5fc>
		fract += 2;
    59bc:	3102      	adds	r1, #2
    59be:	f140 0000 	adc.w	r0, r0, #0
    59c2:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    59c6:	a808      	add	r0, sp, #32
    59c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    59cc:	f01d f98a 	bl	22ce4 <_ldiv5>
		decexp++;
    59d0:	9b04      	ldr	r3, [sp, #16]
    59d2:	9a03      	ldr	r2, [sp, #12]
    59d4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    59d8:	3d01      	subs	r5, #1
		decexp++;
    59da:	3301      	adds	r3, #1
			fract <<= 1;
    59dc:	1849      	adds	r1, r1, r1
    59de:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    59e0:	2800      	cmp	r0, #0
			expo--;
    59e2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    59e6:	daf9      	bge.n	59dc <cbvprintf+0x9d8>
    59e8:	e9cd 1008 	strd	r1, r0, [sp, #32]
    59ec:	e611      	b.n	5612 <cbvprintf+0x60e>
    59ee:	2300      	movs	r3, #0
    59f0:	461d      	mov	r5, r3
    59f2:	e613      	b.n	561c <cbvprintf+0x618>
			precision -= decexp;
    59f4:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    59f8:	2266      	movs	r2, #102	; 0x66
    59fa:	e634      	b.n	5666 <cbvprintf+0x662>
	bool prune_zero = false;
    59fc:	2100      	movs	r1, #0
    59fe:	e63c      	b.n	567a <cbvprintf+0x676>
		decimals = precision + 1;
    5a00:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    5a04:	2d10      	cmp	r5, #16
    5a06:	bfa8      	it	ge
    5a08:	2510      	movge	r5, #16
    5a0a:	2110      	movs	r1, #16
    5a0c:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    5a0e:	2000      	movs	r0, #0
    5a10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5a14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    5a18:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    5a1c:	b9a5      	cbnz	r5, 5a48 <cbvprintf+0xa44>
	fract += round;
    5a1e:	9d08      	ldr	r5, [sp, #32]
    5a20:	1949      	adds	r1, r1, r5
    5a22:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5a24:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    5a28:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    5a2c:	d21b      	bcs.n	5a66 <cbvprintf+0xa62>
	fract += round;
    5a2e:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    5a32:	2a66      	cmp	r2, #102	; 0x66
    5a34:	f040 8099 	bne.w	5b6a <cbvprintf+0xb66>
		if (decexp > 0) {
    5a38:	2b00      	cmp	r3, #0
    5a3a:	dc23      	bgt.n	5a84 <cbvprintf+0xa80>
			*buf++ = '0';
    5a3c:	2130      	movs	r1, #48	; 0x30
    5a3e:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    5a42:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5a46:	e02f      	b.n	5aa8 <cbvprintf+0xaa4>
	*v >>= 1;
    5a48:	0849      	lsrs	r1, r1, #1
    5a4a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    5a4e:	0840      	lsrs	r0, r0, #1
    5a50:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    5a54:	a80a      	add	r0, sp, #40	; 0x28
    5a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a5a:	3d01      	subs	r5, #1
    5a5c:	f01d f942 	bl	22ce4 <_ldiv5>
    5a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    5a64:	e7d8      	b.n	5a18 <cbvprintf+0xa14>
	*v >>= 1;
    5a66:	0849      	lsrs	r1, r1, #1
    5a68:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    5a6c:	a808      	add	r0, sp, #32
	*v >>= 1;
    5a6e:	086d      	lsrs	r5, r5, #1
    5a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a74:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5a78:	f01d f934 	bl	22ce4 <_ldiv5>
		decexp++;
    5a7c:	9b05      	ldr	r3, [sp, #20]
    5a7e:	9a04      	ldr	r2, [sp, #16]
    5a80:	3301      	adds	r3, #1
    5a82:	e7d6      	b.n	5a32 <cbvprintf+0xa2e>
	char *buf = bps;
    5a84:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    5a86:	9907      	ldr	r1, [sp, #28]
    5a88:	2900      	cmp	r1, #0
    5a8a:	dd0b      	ble.n	5aa4 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    5a8c:	a907      	add	r1, sp, #28
    5a8e:	a808      	add	r0, sp, #32
    5a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a94:	f01d f93e 	bl	22d14 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    5a98:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    5a9a:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    5a9e:	3b01      	subs	r3, #1
    5aa0:	9a04      	ldr	r2, [sp, #16]
    5aa2:	d1f0      	bne.n	5a86 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    5aa4:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    5aa6:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    5aa8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5aac:	0689      	lsls	r1, r1, #26
    5aae:	d402      	bmi.n	5ab6 <cbvprintf+0xab2>
    5ab0:	f1b8 0f00 	cmp.w	r8, #0
    5ab4:	dd1d      	ble.n	5af2 <cbvprintf+0xaee>
			*buf++ = '.';
    5ab6:	212e      	movs	r1, #46	; 0x2e
    5ab8:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    5abc:	b19b      	cbz	r3, 5ae6 <cbvprintf+0xae2>
    5abe:	f1b8 0f00 	cmp.w	r8, #0
    5ac2:	dd16      	ble.n	5af2 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    5ac4:	4259      	negs	r1, r3
    5ac6:	4541      	cmp	r1, r8
    5ac8:	bfa8      	it	ge
    5aca:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    5acc:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    5ad0:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    5ad2:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    5ad4:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    5ad8:	bfd4      	ite	le
    5ada:	2100      	movle	r1, #0
    5adc:	2101      	movgt	r1, #1
    5ade:	f361 1045 	bfi	r0, r1, #5, #1
    5ae2:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    5ae6:	f1b8 0f00 	cmp.w	r8, #0
    5aea:	dd02      	ble.n	5af2 <cbvprintf+0xaee>
    5aec:	9907      	ldr	r1, [sp, #28]
    5aee:	2900      	cmp	r1, #0
    5af0:	dc56      	bgt.n	5ba0 <cbvprintf+0xb9c>
	if (prune_zero) {
    5af2:	9903      	ldr	r1, [sp, #12]
    5af4:	2900      	cmp	r1, #0
    5af6:	d163      	bne.n	5bc0 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    5af8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    5afc:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5b00:	2945      	cmp	r1, #69	; 0x45
    5b02:	d121      	bne.n	5b48 <cbvprintf+0xb44>
		if (decexp < 0) {
    5b04:	2b00      	cmp	r3, #0
		*buf++ = c;
    5b06:	4629      	mov	r1, r5
			decexp = -decexp;
    5b08:	bfb8      	it	lt
    5b0a:	425b      	neglt	r3, r3
		*buf++ = c;
    5b0c:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    5b10:	bfb4      	ite	lt
    5b12:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    5b14:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    5b16:	2b63      	cmp	r3, #99	; 0x63
    5b18:	706a      	strb	r2, [r5, #1]
    5b1a:	dd09      	ble.n	5b30 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    5b1c:	2064      	movs	r0, #100	; 0x64
    5b1e:	fbb3 f2f0 	udiv	r2, r3, r0
    5b22:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    5b26:	1ce9      	adds	r1, r5, #3
    5b28:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    5b2c:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5b30:	200a      	movs	r0, #10
    5b32:	460d      	mov	r5, r1
    5b34:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5b38:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5b3c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    5b40:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    5b42:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    5b46:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	dc43      	bgt.n	5bd6 <cbvprintf+0xbd2>
    5b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b50:	2b00      	cmp	r3, #0
    5b52:	bfd4      	ite	le
    5b54:	2300      	movle	r3, #0
    5b56:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5b58:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5b5c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    5b60:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    5b62:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    5b66:	702b      	strb	r3, [r5, #0]
	return bps;
    5b68:	e5f8      	b.n	575c <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    5b6a:	a907      	add	r1, sp, #28
    5b6c:	a808      	add	r0, sp, #32
    5b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5b72:	f01d f8cf 	bl	22d14 <_get_digit>
		if (*buf++ != '0') {
    5b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    5b7a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    5b7e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    5b82:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5b84:	bf18      	it	ne
    5b86:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    5b8a:	0688      	lsls	r0, r1, #26
    5b8c:	d402      	bmi.n	5b94 <cbvprintf+0xb90>
    5b8e:	f1b8 0f00 	cmp.w	r8, #0
    5b92:	dd12      	ble.n	5bba <cbvprintf+0xbb6>
			*buf++ = '.';
    5b94:	212e      	movs	r1, #46	; 0x2e
    5b96:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    5b9a:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    5b9e:	e7a2      	b.n	5ae6 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    5ba0:	a907      	add	r1, sp, #28
    5ba2:	a808      	add	r0, sp, #32
    5ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5ba8:	f01d f8b4 	bl	22d14 <_get_digit>
		precision--;
    5bac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    5bb4:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    5bb8:	e795      	b.n	5ae6 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    5bba:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5bbe:	e798      	b.n	5af2 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    5bc0:	2100      	movs	r1, #0
    5bc2:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    5bc4:	4628      	mov	r0, r5
    5bc6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    5bca:	2930      	cmp	r1, #48	; 0x30
    5bcc:	d0fa      	beq.n	5bc4 <cbvprintf+0xbc0>
		if (*buf != '.') {
    5bce:	292e      	cmp	r1, #46	; 0x2e
    5bd0:	bf18      	it	ne
    5bd2:	4605      	movne	r5, r0
    5bd4:	e792      	b.n	5afc <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    5bd6:	2301      	movs	r3, #1
    5bd8:	e7be      	b.n	5b58 <cbvprintf+0xb54>
			bpe = bps + 5;
    5bda:	4d4b      	ldr	r5, [pc, #300]	; (5d08 <cbvprintf+0xd04>)
		char sign = 0;
    5bdc:	4607      	mov	r7, r0
			bps = "(nil)";
    5bde:	1f6a      	subs	r2, r5, #5
    5be0:	e5bd      	b.n	575e <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    5be2:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    5be4:	bf48      	it	mi
    5be6:	3301      	addmi	r3, #1
    5be8:	e5c2      	b.n	5770 <cbvprintf+0x76c>
					OUTC(pad);
    5bea:	4651      	mov	r1, sl
    5bec:	4640      	mov	r0, r8
    5bee:	9203      	str	r2, [sp, #12]
    5bf0:	47c8      	blx	r9
    5bf2:	2800      	cmp	r0, #0
    5bf4:	9a03      	ldr	r2, [sp, #12]
    5bf6:	f6bf addf 	bge.w	57b8 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    5bfa:	b01b      	add	sp, #108	; 0x6c
    5bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5c00:	f04f 0820 	mov.w	r8, #32
    5c04:	e5d7      	b.n	57b6 <cbvprintf+0x7b2>
					pad = '0';
    5c06:	f04f 0830 	mov.w	r8, #48	; 0x30
    5c0a:	e5d4      	b.n	57b6 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    5c0c:	4690      	mov	r8, r2
    5c0e:	9b03      	ldr	r3, [sp, #12]
    5c10:	4647      	mov	r7, r8
    5c12:	4443      	add	r3, r8
				while (*cp != 'p') {
    5c14:	f818 0b01 	ldrb.w	r0, [r8], #1
    5c18:	2870      	cmp	r0, #112	; 0x70
    5c1a:	d11e      	bne.n	5c5a <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    5c1c:	461e      	mov	r6, r3
    5c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c20:	eb03 0806 	add.w	r8, r3, r6
    5c24:	eba8 0306 	sub.w	r3, r8, r6
    5c28:	2b00      	cmp	r3, #0
    5c2a:	dc3b      	bgt.n	5ca4 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    5c2c:	462b      	mov	r3, r5
    5c2e:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    5c30:	4651      	mov	r1, sl
    5c32:	4648      	mov	r0, r9
    5c34:	f01d f8cb 	bl	22dce <outs>
    5c38:	2800      	cmp	r0, #0
    5c3a:	dbde      	blt.n	5bfa <cbvprintf+0xbf6>
    5c3c:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    5c3e:	4606      	mov	r6, r0
    5c40:	4483      	add	fp, r0
		while (width > 0) {
    5c42:	ebab 0306 	sub.w	r3, fp, r6
    5c46:	2b00      	cmp	r3, #0
    5c48:	f77f ac41 	ble.w	54ce <cbvprintf+0x4ca>
			OUTC(' ');
    5c4c:	4651      	mov	r1, sl
    5c4e:	2020      	movs	r0, #32
    5c50:	47c8      	blx	r9
    5c52:	2800      	cmp	r0, #0
    5c54:	dbd1      	blt.n	5bfa <cbvprintf+0xbf6>
    5c56:	3601      	adds	r6, #1
			--width;
    5c58:	e7f3      	b.n	5c42 <cbvprintf+0xc3e>
					OUTC(*cp++);
    5c5a:	4651      	mov	r1, sl
    5c5c:	47c8      	blx	r9
    5c5e:	2800      	cmp	r0, #0
    5c60:	dad5      	bge.n	5c0e <cbvprintf+0xc0a>
    5c62:	e7ca      	b.n	5bfa <cbvprintf+0xbf6>
					OUTC(*cp++);
    5c64:	4651      	mov	r1, sl
    5c66:	47c8      	blx	r9
    5c68:	2800      	cmp	r0, #0
    5c6a:	f6bf adc6 	bge.w	57fa <cbvprintf+0x7f6>
    5c6e:	e7c4      	b.n	5bfa <cbvprintf+0xbf6>
						OUTC('0');
    5c70:	4651      	mov	r1, sl
    5c72:	2030      	movs	r0, #48	; 0x30
    5c74:	47c8      	blx	r9
    5c76:	2800      	cmp	r0, #0
    5c78:	f6bf add1 	bge.w	581e <cbvprintf+0x81a>
    5c7c:	e7bd      	b.n	5bfa <cbvprintf+0xbf6>
						OUTC('0');
    5c7e:	4651      	mov	r1, sl
    5c80:	2030      	movs	r0, #48	; 0x30
    5c82:	47c8      	blx	r9
    5c84:	3f01      	subs	r7, #1
    5c86:	e5d8      	b.n	583a <cbvprintf+0x836>
					OUTC(*cp++);
    5c88:	4651      	mov	r1, sl
    5c8a:	47c8      	blx	r9
    5c8c:	2800      	cmp	r0, #0
    5c8e:	dbb4      	blt.n	5bfa <cbvprintf+0xbf6>
    5c90:	4647      	mov	r7, r8
    5c92:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    5c96:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5c9a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    5c9e:	2a09      	cmp	r2, #9
    5ca0:	d9f2      	bls.n	5c88 <cbvprintf+0xc84>
    5ca2:	e7bb      	b.n	5c1c <cbvprintf+0xc18>
				OUTC('0');
    5ca4:	4651      	mov	r1, sl
    5ca6:	2030      	movs	r0, #48	; 0x30
    5ca8:	47c8      	blx	r9
    5caa:	2800      	cmp	r0, #0
    5cac:	dba5      	blt.n	5bfa <cbvprintf+0xbf6>
    5cae:	3601      	adds	r6, #1
    5cb0:	e7b8      	b.n	5c24 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    5cb2:	06d8      	lsls	r0, r3, #27
    5cb4:	d401      	bmi.n	5cba <cbvprintf+0xcb6>
    5cb6:	0719      	lsls	r1, r3, #28
    5cb8:	d507      	bpl.n	5cca <cbvprintf+0xcc6>
				OUTC('0');
    5cba:	4651      	mov	r1, sl
    5cbc:	2030      	movs	r0, #48	; 0x30
    5cbe:	9203      	str	r2, [sp, #12]
    5cc0:	47c8      	blx	r9
    5cc2:	2800      	cmp	r0, #0
    5cc4:	db99      	blt.n	5bfa <cbvprintf+0xbf6>
    5cc6:	9a03      	ldr	r2, [sp, #12]
    5cc8:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    5cca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5cce:	06db      	lsls	r3, r3, #27
    5cd0:	d508      	bpl.n	5ce4 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    5cd2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5cd6:	9203      	str	r2, [sp, #12]
    5cd8:	4651      	mov	r1, sl
    5cda:	47c8      	blx	r9
    5cdc:	2800      	cmp	r0, #0
    5cde:	db8c      	blt.n	5bfa <cbvprintf+0xbf6>
    5ce0:	9a03      	ldr	r2, [sp, #12]
    5ce2:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5ce4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5ce6:	4437      	add	r7, r6
    5ce8:	1bbb      	subs	r3, r7, r6
    5cea:	2b00      	cmp	r3, #0
    5cec:	dc01      	bgt.n	5cf2 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    5cee:	462b      	mov	r3, r5
    5cf0:	e79e      	b.n	5c30 <cbvprintf+0xc2c>
				OUTC('0');
    5cf2:	4651      	mov	r1, sl
    5cf4:	2030      	movs	r0, #48	; 0x30
    5cf6:	9203      	str	r2, [sp, #12]
    5cf8:	47c8      	blx	r9
    5cfa:	2800      	cmp	r0, #0
    5cfc:	f6ff af7d 	blt.w	5bfa <cbvprintf+0xbf6>
    5d00:	9a03      	ldr	r2, [sp, #12]
    5d02:	3601      	adds	r6, #1
    5d04:	e7f0      	b.n	5ce8 <cbvprintf+0xce4>
    5d06:	bf00      	nop
    5d08:	0002a520 	.word	0x0002a520

00005d0c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5d0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    5d0e:	4910      	ldr	r1, [pc, #64]	; (5d50 <enable_logger+0x44>)
    5d10:	4810      	ldr	r0, [pc, #64]	; (5d54 <enable_logger+0x48>)
{
    5d12:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5d14:	2200      	movs	r2, #0
    5d16:	f022 faa8 	bl	2826a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5d1a:	4d0f      	ldr	r5, [pc, #60]	; (5d58 <enable_logger+0x4c>)
    5d1c:	490f      	ldr	r1, [pc, #60]	; (5d5c <enable_logger+0x50>)
    5d1e:	2200      	movs	r2, #0
    5d20:	2300      	movs	r3, #0
    5d22:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5d26:	2400      	movs	r4, #0
    5d28:	230e      	movs	r3, #14
    5d2a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5d2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5d32:	4b0b      	ldr	r3, [pc, #44]	; (5d60 <enable_logger+0x54>)
    5d34:	9400      	str	r4, [sp, #0]
    5d36:	f44f 7240 	mov.w	r2, #768	; 0x300
    5d3a:	4628      	mov	r0, r5
    5d3c:	f01b faca 	bl	212d4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5d40:	4908      	ldr	r1, [pc, #32]	; (5d64 <enable_logger+0x58>)
    5d42:	4628      	mov	r0, r5
    5d44:	f021 ff2f 	bl	27ba6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5d48:	4620      	mov	r0, r4
    5d4a:	b009      	add	sp, #36	; 0x24
    5d4c:	bd30      	pop	{r4, r5, pc}
    5d4e:	bf00      	nop
    5d50:	00005d69 	.word	0x00005d69
    5d54:	200011d0 	.word	0x200011d0
    5d58:	20001208 	.word	0x20001208
    5d5c:	20004de0 	.word	0x20004de0
    5d60:	00005f81 	.word	0x00005f81
    5d64:	0002a521 	.word	0x0002a521

00005d68 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5d68:	4801      	ldr	r0, [pc, #4]	; (5d70 <log_process_thread_timer_expiry_fn+0x8>)
    5d6a:	f01b bc45 	b.w	215f8 <z_impl_k_sem_give>
    5d6e:	bf00      	nop
    5d70:	200009ec 	.word	0x200009ec

00005d74 <log_init>:
{
    5d74:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5d76:	4b12      	ldr	r3, [pc, #72]	; (5dc0 <log_init+0x4c>)
    5d78:	f3bf 8f5b 	dmb	ish
    5d7c:	e853 5f00 	ldrex	r5, [r3]
    5d80:	1c6a      	adds	r2, r5, #1
    5d82:	e843 2100 	strex	r1, r2, [r3]
    5d86:	2900      	cmp	r1, #0
    5d88:	d1f8      	bne.n	5d7c <log_init+0x8>
    5d8a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    5d8e:	b92d      	cbnz	r5, 5d9c <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    5d90:	4c0c      	ldr	r4, [pc, #48]	; (5dc4 <log_init+0x50>)
    5d92:	4e0d      	ldr	r6, [pc, #52]	; (5dc8 <log_init+0x54>)
    5d94:	1b36      	subs	r6, r6, r4
    5d96:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5d98:	42b5      	cmp	r5, r6
    5d9a:	db00      	blt.n	5d9e <log_init+0x2a>
}
    5d9c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    5d9e:	7b23      	ldrb	r3, [r4, #12]
    5da0:	b153      	cbz	r3, 5db8 <log_init+0x44>
			if (backend->api->init != NULL) {
    5da2:	6823      	ldr	r3, [r4, #0]
    5da4:	699b      	ldr	r3, [r3, #24]
    5da6:	b10b      	cbz	r3, 5dac <log_init+0x38>
				backend->api->init(backend);
    5da8:	4620      	mov	r0, r4
    5daa:	4798      	blx	r3
			log_backend_enable(backend,
    5dac:	6863      	ldr	r3, [r4, #4]
    5dae:	2204      	movs	r2, #4
    5db0:	6819      	ldr	r1, [r3, #0]
    5db2:	4620      	mov	r0, r4
    5db4:	f000 f992 	bl	60dc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5db8:	3501      	adds	r5, #1
    5dba:	3410      	adds	r4, #16
    5dbc:	e7ec      	b.n	5d98 <log_init+0x24>
    5dbe:	bf00      	nop
    5dc0:	20001e18 	.word	0x20001e18
    5dc4:	00028a30 	.word	0x00028a30
    5dc8:	00028a40 	.word	0x00028a40

00005dcc <z_log_notify_backend_enabled>:
{
    5dcc:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    5dce:	4c04      	ldr	r4, [pc, #16]	; (5de0 <z_log_notify_backend_enabled+0x14>)
    5dd0:	7823      	ldrb	r3, [r4, #0]
    5dd2:	b913      	cbnz	r3, 5dda <z_log_notify_backend_enabled+0xe>
    5dd4:	4803      	ldr	r0, [pc, #12]	; (5de4 <z_log_notify_backend_enabled+0x18>)
    5dd6:	f01b fc0f 	bl	215f8 <z_impl_k_sem_give>
	backend_attached = true;
    5dda:	2301      	movs	r3, #1
    5ddc:	7023      	strb	r3, [r4, #0]
}
    5dde:	bd10      	pop	{r4, pc}
    5de0:	20003de4 	.word	0x20003de4
    5de4:	200009ec 	.word	0x200009ec

00005de8 <z_log_dropped>:
    5de8:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <z_log_dropped+0x34>)
    5dea:	f3bf 8f5b 	dmb	ish
    5dee:	e853 2f00 	ldrex	r2, [r3]
    5df2:	3201      	adds	r2, #1
    5df4:	e843 2100 	strex	r1, r2, [r3]
    5df8:	2900      	cmp	r1, #0
    5dfa:	d1f8      	bne.n	5dee <z_log_dropped+0x6>
    5dfc:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    5e00:	b158      	cbz	r0, 5e1a <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5e02:	f3bf 8f5b 	dmb	ish
    5e06:	4b06      	ldr	r3, [pc, #24]	; (5e20 <z_log_dropped+0x38>)
    5e08:	e853 2f00 	ldrex	r2, [r3]
    5e0c:	3a01      	subs	r2, #1
    5e0e:	e843 2100 	strex	r1, r2, [r3]
    5e12:	2900      	cmp	r1, #0
    5e14:	d1f8      	bne.n	5e08 <z_log_dropped+0x20>
    5e16:	f3bf 8f5b 	dmb	ish
}
    5e1a:	4770      	bx	lr
    5e1c:	20001e14 	.word	0x20001e14
    5e20:	20001e10 	.word	0x20001e10

00005e24 <z_log_dropped_read_and_clear>:
}
    5e24:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5e26:	4b06      	ldr	r3, [pc, #24]	; (5e40 <z_log_dropped_read_and_clear+0x1c>)
    5e28:	f3bf 8f5b 	dmb	ish
    5e2c:	4602      	mov	r2, r0
    5e2e:	e853 0f00 	ldrex	r0, [r3]
    5e32:	e843 2100 	strex	r1, r2, [r3]
    5e36:	2900      	cmp	r1, #0
    5e38:	d1f9      	bne.n	5e2e <z_log_dropped_read_and_clear+0xa>
    5e3a:	f3bf 8f5b 	dmb	ish
    5e3e:	4770      	bx	lr
    5e40:	20001e14 	.word	0x20001e14

00005e44 <dropped_notify>:
{
    5e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    5e46:	f7ff ffed 	bl	5e24 <z_log_dropped_read_and_clear>
    5e4a:	4c0a      	ldr	r4, [pc, #40]	; (5e74 <dropped_notify+0x30>)
    5e4c:	4d0a      	ldr	r5, [pc, #40]	; (5e78 <dropped_notify+0x34>)
    5e4e:	1b2d      	subs	r5, r5, r4
    5e50:	4607      	mov	r7, r0
    5e52:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5e54:	2600      	movs	r6, #0
    5e56:	42ae      	cmp	r6, r5
    5e58:	db00      	blt.n	5e5c <dropped_notify+0x18>
}
    5e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    5e5c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5e5e:	795b      	ldrb	r3, [r3, #5]
    5e60:	b12b      	cbz	r3, 5e6e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    5e62:	6823      	ldr	r3, [r4, #0]
    5e64:	691b      	ldr	r3, [r3, #16]
    5e66:	b113      	cbz	r3, 5e6e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    5e68:	4639      	mov	r1, r7
    5e6a:	4620      	mov	r0, r4
    5e6c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5e6e:	3601      	adds	r6, #1
    5e70:	3410      	adds	r4, #16
    5e72:	e7f0      	b.n	5e56 <dropped_notify+0x12>
    5e74:	00028a30 	.word	0x00028a30
    5e78:	00028a40 	.word	0x00028a40

00005e7c <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    5e7c:	4901      	ldr	r1, [pc, #4]	; (5e84 <z_log_msg2_init+0x8>)
    5e7e:	4802      	ldr	r0, [pc, #8]	; (5e88 <z_log_msg2_init+0xc>)
    5e80:	f01d b933 	b.w	230ea <mpsc_pbuf_init>
    5e84:	00028b18 	.word	0x00028b18
    5e88:	20001e1c 	.word	0x20001e1c

00005e8c <log_core_init>:
	panic_mode = false;
    5e8c:	4a08      	ldr	r2, [pc, #32]	; (5eb0 <log_core_init+0x24>)
{
    5e8e:	b508      	push	{r3, lr}
	panic_mode = false;
    5e90:	2300      	movs	r3, #0
    5e92:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    5e94:	4a07      	ldr	r2, [pc, #28]	; (5eb4 <log_core_init+0x28>)
    5e96:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    5e98:	4b07      	ldr	r3, [pc, #28]	; (5eb8 <log_core_init+0x2c>)
    5e9a:	4a08      	ldr	r2, [pc, #32]	; (5ebc <log_core_init+0x30>)
    5e9c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5e9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5ea2:	f000 fafb 	bl	649c <log_output_timestamp_freq_set>
}
    5ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    5eaa:	f7ff bfe7 	b.w	5e7c <z_log_msg2_init>
    5eae:	bf00      	nop
    5eb0:	20003de5 	.word	0x20003de5
    5eb4:	20001e14 	.word	0x20001e14
    5eb8:	2000017c 	.word	0x2000017c
    5ebc:	00023389 	.word	0x00023389

00005ec0 <z_log_msg2_alloc>:
{
    5ec0:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    5ec2:	2200      	movs	r2, #0
    5ec4:	4801      	ldr	r0, [pc, #4]	; (5ecc <z_log_msg2_alloc+0xc>)
    5ec6:	2300      	movs	r3, #0
    5ec8:	f01d b92e 	b.w	23128 <mpsc_pbuf_alloc>
    5ecc:	20001e1c 	.word	0x20001e1c

00005ed0 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    5ed0:	4801      	ldr	r0, [pc, #4]	; (5ed8 <z_log_msg2_claim+0x8>)
    5ed2:	f01d b9bc 	b.w	2324e <mpsc_pbuf_claim>
    5ed6:	bf00      	nop
    5ed8:	20001e1c 	.word	0x20001e1c

00005edc <z_log_msg2_free>:
{
    5edc:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5ede:	4801      	ldr	r0, [pc, #4]	; (5ee4 <z_log_msg2_free+0x8>)
    5ee0:	f01d ba01 	b.w	232e6 <mpsc_pbuf_free>
    5ee4:	20001e1c 	.word	0x20001e1c

00005ee8 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    5ee8:	4801      	ldr	r0, [pc, #4]	; (5ef0 <z_log_msg2_pending+0x8>)
    5eea:	f01d ba30 	b.w	2334e <mpsc_pbuf_is_pending>
    5eee:	bf00      	nop
    5ef0:	20001e1c 	.word	0x20001e1c

00005ef4 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    5ef4:	4b1d      	ldr	r3, [pc, #116]	; (5f6c <z_impl_log_process+0x78>)
    5ef6:	781b      	ldrb	r3, [r3, #0]
{
    5ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5efc:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    5efe:	b903      	cbnz	r3, 5f02 <z_impl_log_process+0xe>
    5f00:	b388      	cbz	r0, 5f66 <z_impl_log_process+0x72>
	msg = get_msg();
    5f02:	f01d fa55 	bl	233b0 <get_msg>
	if (msg.msg) {
    5f06:	4606      	mov	r6, r0
    5f08:	b118      	cbz	r0, 5f12 <z_impl_log_process+0x1e>
		if (!bypass) {
    5f0a:	b16d      	cbz	r5, 5f28 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7ff ffe5 	bl	5edc <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    5f12:	b92d      	cbnz	r5, 5f20 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    5f14:	4b16      	ldr	r3, [pc, #88]	; (5f70 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	2b00      	cmp	r3, #0
    5f1a:	dd01      	ble.n	5f20 <z_impl_log_process+0x2c>
		dropped_notify();
    5f1c:	f7ff ff92 	bl	5e44 <dropped_notify>
}
    5f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    5f24:	f7ff bfe0 	b.w	5ee8 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5f28:	4b12      	ldr	r3, [pc, #72]	; (5f74 <z_impl_log_process+0x80>)
    5f2a:	f3bf 8f5b 	dmb	ish
    5f2e:	e853 2f00 	ldrex	r2, [r3]
    5f32:	3a01      	subs	r2, #1
    5f34:	e843 2100 	strex	r1, r2, [r3]
    5f38:	2900      	cmp	r1, #0
    5f3a:	d1f8      	bne.n	5f2e <z_impl_log_process+0x3a>
    5f3c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    5f40:	4c0d      	ldr	r4, [pc, #52]	; (5f78 <z_impl_log_process+0x84>)
    5f42:	4f0e      	ldr	r7, [pc, #56]	; (5f7c <z_impl_log_process+0x88>)
    5f44:	1b3f      	subs	r7, r7, r4
    5f46:	113f      	asrs	r7, r7, #4
    5f48:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    5f4a:	45b8      	cmp	r8, r7
    5f4c:	dade      	bge.n	5f0c <z_impl_log_process+0x18>
	return backend->cb->active;
    5f4e:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    5f50:	795b      	ldrb	r3, [r3, #5]
    5f52:	b123      	cbz	r3, 5f5e <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    5f54:	6823      	ldr	r3, [r4, #0]
    5f56:	4631      	mov	r1, r6
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	4620      	mov	r0, r4
    5f5c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5f5e:	f108 0801 	add.w	r8, r8, #1
    5f62:	3410      	adds	r4, #16
    5f64:	e7f1      	b.n	5f4a <z_impl_log_process+0x56>
}
    5f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f6a:	bf00      	nop
    5f6c:	20003de4 	.word	0x20003de4
    5f70:	20001e14 	.word	0x20001e14
    5f74:	20001e10 	.word	0x20001e10
    5f78:	00028a30 	.word	0x00028a30
    5f7c:	00028a40 	.word	0x00028a40

00005f80 <log_process_thread_func>:
{
    5f80:	b510      	push	{r4, lr}
	log_init();
    5f82:	f7ff fef7 	bl	5d74 <log_init>
	return z_impl_z_current_get();
    5f86:	f01c f835 	bl	21ff4 <z_impl_z_current_get>
	proc_tid = process_tid;
    5f8a:	4b0c      	ldr	r3, [pc, #48]	; (5fbc <log_process_thread_func+0x3c>)
    5f8c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5f8e:	b130      	cbz	r0, 5f9e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5f90:	4b0b      	ldr	r3, [pc, #44]	; (5fc0 <log_process_thread_func+0x40>)
	    process_tid &&
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	2b09      	cmp	r3, #9
    5f96:	dd02      	ble.n	5f9e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5f98:	480a      	ldr	r0, [pc, #40]	; (5fc4 <log_process_thread_func+0x44>)
    5f9a:	f01b fb2d 	bl	215f8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5f9e:	4c09      	ldr	r4, [pc, #36]	; (5fc4 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5fa0:	2000      	movs	r0, #0
    5fa2:	f7ff ffa7 	bl	5ef4 <z_impl_log_process>
		if (log_process(false) == false) {
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d1fa      	bne.n	5fa0 <log_process_thread_func+0x20>
    5faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fb2:	4620      	mov	r0, r4
    5fb4:	f01b fb46 	bl	21644 <z_impl_k_sem_take>
    5fb8:	e7f2      	b.n	5fa0 <log_process_thread_func+0x20>
    5fba:	bf00      	nop
    5fbc:	20001e58 	.word	0x20001e58
    5fc0:	20001e10 	.word	0x20001e10
    5fc4:	200009ec 	.word	0x200009ec

00005fc8 <z_log_msg_post_finalize>:
{
    5fc8:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5fca:	4b1d      	ldr	r3, [pc, #116]	; (6040 <z_log_msg_post_finalize+0x78>)
    5fcc:	f3bf 8f5b 	dmb	ish
    5fd0:	e853 2f00 	ldrex	r2, [r3]
    5fd4:	1c51      	adds	r1, r2, #1
    5fd6:	e843 1000 	strex	r0, r1, [r3]
    5fda:	2800      	cmp	r0, #0
    5fdc:	d1f8      	bne.n	5fd0 <z_log_msg_post_finalize+0x8>
    5fde:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5fe2:	4b18      	ldr	r3, [pc, #96]	; (6044 <z_log_msg_post_finalize+0x7c>)
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	b183      	cbz	r3, 600a <z_log_msg_post_finalize+0x42>
    5fe8:	f04f 0320 	mov.w	r3, #32
    5fec:	f3ef 8411 	mrs	r4, BASEPRI
    5ff0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ff4:	f3bf 8f6f 	isb	sy
    5ff8:	2000      	movs	r0, #0
    5ffa:	f7ff ff7b 	bl	5ef4 <z_impl_log_process>
	__asm__ volatile(
    5ffe:	f384 8811 	msr	BASEPRI, r4
    6002:	f3bf 8f6f 	isb	sy
}
    6006:	b002      	add	sp, #8
    6008:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    600a:	4b0f      	ldr	r3, [pc, #60]	; (6048 <z_log_msg_post_finalize+0x80>)
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	2b00      	cmp	r3, #0
    6010:	d0f9      	beq.n	6006 <z_log_msg_post_finalize+0x3e>
    6012:	b952      	cbnz	r2, 602a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    6014:	2200      	movs	r2, #0
    6016:	2300      	movs	r3, #0
    6018:	e9cd 2300 	strd	r2, r3, [sp]
    601c:	480b      	ldr	r0, [pc, #44]	; (604c <z_log_msg_post_finalize+0x84>)
    601e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6022:	2300      	movs	r3, #0
    6024:	f01c f9f8 	bl	22418 <z_impl_k_timer_start>
    6028:	e7ed      	b.n	6006 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    602a:	2a0a      	cmp	r2, #10
    602c:	d1eb      	bne.n	6006 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    602e:	4807      	ldr	r0, [pc, #28]	; (604c <z_log_msg_post_finalize+0x84>)
    6030:	f022 f927 	bl	28282 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    6034:	4806      	ldr	r0, [pc, #24]	; (6050 <z_log_msg_post_finalize+0x88>)
}
    6036:	b002      	add	sp, #8
    6038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    603c:	f01b badc 	b.w	215f8 <z_impl_k_sem_give>
    6040:	20001e10 	.word	0x20001e10
    6044:	20003de5 	.word	0x20003de5
    6048:	20001e58 	.word	0x20001e58
    604c:	200011d0 	.word	0x200011d0
    6050:	200009ec 	.word	0x200009ec

00006054 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    6054:	4b06      	ldr	r3, [pc, #24]	; (6070 <z_log_msg2_commit+0x1c>)
{
    6056:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    6058:	681b      	ldr	r3, [r3, #0]
{
    605a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    605c:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    605e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    6060:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6062:	4804      	ldr	r0, [pc, #16]	; (6074 <z_log_msg2_commit+0x20>)
    6064:	f01d f8d6 	bl	23214 <mpsc_pbuf_commit>
}
    6068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    606c:	f7ff bfac 	b.w	5fc8 <z_log_msg_post_finalize>
    6070:	2000017c 	.word	0x2000017c
    6074:	20001e1c 	.word	0x20001e1c

00006078 <z_impl_log_panic>:
{
    6078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    607a:	4f0e      	ldr	r7, [pc, #56]	; (60b4 <z_impl_log_panic+0x3c>)
    607c:	783d      	ldrb	r5, [r7, #0]
    607e:	b975      	cbnz	r5, 609e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    6080:	4c0d      	ldr	r4, [pc, #52]	; (60b8 <z_impl_log_panic+0x40>)
    6082:	4e0e      	ldr	r6, [pc, #56]	; (60bc <z_impl_log_panic+0x44>)
	log_init();
    6084:	f7ff fe76 	bl	5d74 <log_init>
    6088:	1b36      	subs	r6, r6, r4
    608a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    608c:	42b5      	cmp	r5, r6
    608e:	db07      	blt.n	60a0 <z_impl_log_panic+0x28>
    6090:	2000      	movs	r0, #0
    6092:	f7ff ff2f 	bl	5ef4 <z_impl_log_process>
		while (log_process(false) == true) {
    6096:	2800      	cmp	r0, #0
    6098:	d1fa      	bne.n	6090 <z_impl_log_panic+0x18>
	panic_mode = true;
    609a:	2301      	movs	r3, #1
    609c:	703b      	strb	r3, [r7, #0]
}
    609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    60a0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    60a2:	795b      	ldrb	r3, [r3, #5]
    60a4:	b11b      	cbz	r3, 60ae <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    60a6:	6823      	ldr	r3, [r4, #0]
    60a8:	4620      	mov	r0, r4
    60aa:	695b      	ldr	r3, [r3, #20]
    60ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    60ae:	3501      	adds	r5, #1
    60b0:	3410      	adds	r4, #16
    60b2:	e7eb      	b.n	608c <z_impl_log_panic+0x14>
    60b4:	20003de5 	.word	0x20003de5
    60b8:	00028a30 	.word	0x00028a30
    60bc:	00028a40 	.word	0x00028a40

000060c0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    60c0:	4a04      	ldr	r2, [pc, #16]	; (60d4 <log_source_name_get+0x14>)
    60c2:	4b05      	ldr	r3, [pc, #20]	; (60d8 <log_source_name_get+0x18>)
    60c4:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    60c6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    60ca:	bf34      	ite	cc
    60cc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    60d0:	2000      	movcs	r0, #0
}
    60d2:	4770      	bx	lr
    60d4:	00028888 	.word	0x00028888
    60d8:	00028a30 	.word	0x00028a30

000060dc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    60dc:	4a05      	ldr	r2, [pc, #20]	; (60f4 <log_backend_enable+0x18>)
	backend->cb->id = id;
    60de:	6843      	ldr	r3, [r0, #4]
    60e0:	1a80      	subs	r0, r0, r2
    60e2:	1100      	asrs	r0, r0, #4
    60e4:	3001      	adds	r0, #1
	backend->cb->active = true;
    60e6:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    60e8:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    60ea:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    60ec:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    60ee:	f7ff be6d 	b.w	5dcc <z_log_notify_backend_enabled>
    60f2:	bf00      	nop
    60f4:	00028a30 	.word	0x00028a30

000060f8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    60f8:	b40e      	push	{r1, r2, r3}
    60fa:	b503      	push	{r0, r1, lr}
    60fc:	ab03      	add	r3, sp, #12
    60fe:	4601      	mov	r1, r0
    6100:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    6104:	4804      	ldr	r0, [pc, #16]	; (6118 <print_formatted+0x20>)
	va_start(args, fmt);
    6106:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    6108:	f7fe ff7c 	bl	5004 <cbvprintf>
	va_end(args);

	return length;
}
    610c:	b002      	add	sp, #8
    610e:	f85d eb04 	ldr.w	lr, [sp], #4
    6112:	b003      	add	sp, #12
    6114:	4770      	bx	lr
    6116:	bf00      	nop
    6118:	000233f1 	.word	0x000233f1

0000611c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6120:	461d      	mov	r5, r3
    6122:	9b08      	ldr	r3, [sp, #32]
    6124:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6126:	06da      	lsls	r2, r3, #27
{
    6128:	4604      	mov	r4, r0
    612a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    612c:	d405      	bmi.n	613a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    612e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    6130:	bf4c      	ite	mi
    6132:	492a      	ldrmi	r1, [pc, #168]	; (61dc <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    6134:	492a      	ldrpl	r1, [pc, #168]	; (61e0 <hexdump_line_print+0xc4>)
    6136:	f7ff ffdf 	bl	60f8 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    613a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 61e4 <hexdump_line_print+0xc8>
{
    613e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    6142:	45a8      	cmp	r8, r5
    6144:	db2a      	blt.n	619c <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    6146:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 61e8 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    614a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 61ec <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    614e:	f8df a094 	ldr.w	sl, [pc, #148]	; 61e4 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6152:	2500      	movs	r5, #0
		if (i < length) {
    6154:	42bd      	cmp	r5, r7
    6156:	d22f      	bcs.n	61b8 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    6158:	5d72      	ldrb	r2, [r6, r5]
    615a:	4649      	mov	r1, r9
    615c:	4620      	mov	r0, r4
    615e:	f7ff ffcb 	bl	60f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6162:	3501      	adds	r5, #1
    6164:	2d10      	cmp	r5, #16
    6166:	d120      	bne.n	61aa <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    6168:	4921      	ldr	r1, [pc, #132]	; (61f0 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    616a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 61e4 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    616e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 61f4 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    6172:	4620      	mov	r0, r4
    6174:	f7ff ffc0 	bl	60f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6178:	2500      	movs	r5, #0
		if (i < length) {
    617a:	42af      	cmp	r7, r5
    617c:	d928      	bls.n	61d0 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    617e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    6180:	f1a2 0320 	sub.w	r3, r2, #32
    6184:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    6186:	bf28      	it	cs
    6188:	222e      	movcs	r2, #46	; 0x2e
    618a:	4649      	mov	r1, r9
    618c:	4620      	mov	r0, r4
    618e:	f7ff ffb3 	bl	60f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6192:	3501      	adds	r5, #1
    6194:	2d10      	cmp	r5, #16
    6196:	d114      	bne.n	61c2 <hexdump_line_print+0xa6>
		}
	}
}
    6198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    619c:	4649      	mov	r1, r9
    619e:	4620      	mov	r0, r4
    61a0:	f7ff ffaa 	bl	60f8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    61a4:	f108 0801 	add.w	r8, r8, #1
    61a8:	e7cb      	b.n	6142 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    61aa:	076a      	lsls	r2, r5, #29
    61ac:	d1d2      	bne.n	6154 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    61ae:	4651      	mov	r1, sl
    61b0:	4620      	mov	r0, r4
    61b2:	f7ff ffa1 	bl	60f8 <print_formatted>
    61b6:	e7cd      	b.n	6154 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    61b8:	4641      	mov	r1, r8
    61ba:	4620      	mov	r0, r4
    61bc:	f7ff ff9c 	bl	60f8 <print_formatted>
    61c0:	e7cf      	b.n	6162 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    61c2:	076b      	lsls	r3, r5, #29
    61c4:	d1d9      	bne.n	617a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    61c6:	4641      	mov	r1, r8
    61c8:	4620      	mov	r0, r4
    61ca:	f7ff ff95 	bl	60f8 <print_formatted>
    61ce:	e7d4      	b.n	617a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    61d0:	4641      	mov	r1, r8
    61d2:	4620      	mov	r0, r4
    61d4:	f7ff ff90 	bl	60f8 <print_formatted>
    61d8:	e7db      	b.n	6192 <hexdump_line_print+0x76>
    61da:	bf00      	nop
    61dc:	0002a52e 	.word	0x0002a52e
    61e0:	0002a52d 	.word	0x0002a52d
    61e4:	0002a538 	.word	0x0002a538
    61e8:	0002a536 	.word	0x0002a536
    61ec:	0002a530 	.word	0x0002a530
    61f0:	0002a53a 	.word	0x0002a53a
    61f4:	0002a53c 	.word	0x0002a53c

000061f8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    61f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61fc:	b087      	sub	sp, #28
    61fe:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6200:	f001 0301 	and.w	r3, r1, #1
{
    6204:	9205      	str	r2, [sp, #20]
    6206:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    620a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    620e:	9304      	str	r3, [sp, #16]
{
    6210:	4607      	mov	r7, r0
    6212:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    6214:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    6218:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    621c:	f01d f8cc 	bl	233b8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    6220:	4602      	mov	r2, r0
    6222:	2800      	cmp	r0, #0
    6224:	d044      	beq.n	62b0 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    6226:	493a      	ldr	r1, [pc, #232]	; (6310 <prefix_print+0x118>)
    6228:	4638      	mov	r0, r7
    622a:	f7ff ff65 	bl	60f8 <print_formatted>
    622e:	4605      	mov	r5, r0
	}

	if (stamp) {
    6230:	f1bb 0f00 	cmp.w	fp, #0
    6234:	d008      	beq.n	6248 <prefix_print+0x50>
	if (!format) {
    6236:	f018 0f44 	tst.w	r8, #68	; 0x44
    623a:	d13b      	bne.n	62b4 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    623c:	4935      	ldr	r1, [pc, #212]	; (6314 <prefix_print+0x11c>)
    623e:	4622      	mov	r2, r4
    6240:	4638      	mov	r0, r7
    6242:	f7ff ff59 	bl	60f8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    6246:	4405      	add	r5, r0
	if (color) {
    6248:	9b04      	ldr	r3, [sp, #16]
    624a:	b153      	cbz	r3, 6262 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    624c:	4b32      	ldr	r3, [pc, #200]	; (6318 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    624e:	4933      	ldr	r1, [pc, #204]	; (631c <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    6250:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    6254:	4b32      	ldr	r3, [pc, #200]	; (6320 <prefix_print+0x128>)
    6256:	4638      	mov	r0, r7
    6258:	2a00      	cmp	r2, #0
    625a:	bf08      	it	eq
    625c:	461a      	moveq	r2, r3
    625e:	f7ff ff4b 	bl	60f8 <print_formatted>
	if (level_on) {
    6262:	b13e      	cbz	r6, 6274 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    6264:	4b2f      	ldr	r3, [pc, #188]	; (6324 <prefix_print+0x12c>)
    6266:	4930      	ldr	r1, [pc, #192]	; (6328 <prefix_print+0x130>)
    6268:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    626c:	4638      	mov	r0, r7
    626e:	f7ff ff43 	bl	60f8 <print_formatted>
    6272:	4606      	mov	r6, r0
	if (source_id >= 0) {
    6274:	f1ba 0f00 	cmp.w	sl, #0
    6278:	db16      	blt.n	62a8 <prefix_print+0xb0>
		total += print_formatted(output,
    627a:	9b05      	ldr	r3, [sp, #20]
    627c:	2b00      	cmp	r3, #0
    627e:	d045      	beq.n	630c <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    6280:	2301      	movs	r3, #1
    6282:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    6286:	4b29      	ldr	r3, [pc, #164]	; (632c <prefix_print+0x134>)
    6288:	4c29      	ldr	r4, [pc, #164]	; (6330 <prefix_print+0x138>)
    628a:	f019 0f10 	tst.w	r9, #16
    628e:	bf18      	it	ne
    6290:	461c      	movne	r4, r3
    6292:	4651      	mov	r1, sl
    6294:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    6298:	f7ff ff12 	bl	60c0 <log_source_name_get>
    629c:	4621      	mov	r1, r4
    629e:	4602      	mov	r2, r0
    62a0:	4638      	mov	r0, r7
    62a2:	f7ff ff29 	bl	60f8 <print_formatted>
    62a6:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    62a8:	1970      	adds	r0, r6, r5
    62aa:	b007      	add	sp, #28
    62ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    62b0:	4605      	mov	r5, r0
    62b2:	e7bd      	b.n	6230 <prefix_print+0x38>
	} else if (freq != 0U) {
    62b4:	4b1f      	ldr	r3, [pc, #124]	; (6334 <prefix_print+0x13c>)
    62b6:	6818      	ldr	r0, [r3, #0]
    62b8:	2800      	cmp	r0, #0
    62ba:	d0c4      	beq.n	6246 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    62bc:	4b1e      	ldr	r3, [pc, #120]	; (6338 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    62be:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    62c2:	681b      	ldr	r3, [r3, #0]
    62c4:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    62c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    62cc:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    62d0:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    62d4:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    62d8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    62dc:	fbb3 f2f1 	udiv	r2, r3, r1
    62e0:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    62e4:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    62e8:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    62ec:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    62f0:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    62f4:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    62f8:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    62fa:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    62fe:	490f      	ldr	r1, [pc, #60]	; (633c <prefix_print+0x144>)
    6300:	e9cd e001 	strd	lr, r0, [sp, #4]
    6304:	4638      	mov	r0, r7
    6306:	f7ff fef7 	bl	60f8 <print_formatted>
    630a:	e79c      	b.n	6246 <prefix_print+0x4e>
		total += print_formatted(output,
    630c:	4c08      	ldr	r4, [pc, #32]	; (6330 <prefix_print+0x138>)
    630e:	e7c0      	b.n	6292 <prefix_print+0x9a>
    6310:	0002a54d 	.word	0x0002a54d
    6314:	0002a551 	.word	0x0002a551
    6318:	00028b2c 	.word	0x00028b2c
    631c:	0002c798 	.word	0x0002c798
    6320:	0002a53f 	.word	0x0002a53f
    6324:	00028b40 	.word	0x00028b40
    6328:	0002a576 	.word	0x0002a576
    632c:	0002a549 	.word	0x0002a549
    6330:	0002a544 	.word	0x0002a544
    6334:	20001e5c 	.word	0x20001e5c
    6338:	20001e60 	.word	0x20001e60
    633c:	0002a55a 	.word	0x0002a55a

00006340 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    6340:	b538      	push	{r3, r4, r5, lr}
    6342:	460c      	mov	r4, r1
	if (color) {
    6344:	07e1      	lsls	r1, r4, #31
{
    6346:	4605      	mov	r5, r0
	if (color) {
    6348:	d503      	bpl.n	6352 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    634a:	4a08      	ldr	r2, [pc, #32]	; (636c <postfix_print+0x2c>)
    634c:	4908      	ldr	r1, [pc, #32]	; (6370 <postfix_print+0x30>)
    634e:	f7ff fed3 	bl	60f8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6352:	06e2      	lsls	r2, r4, #27
    6354:	d408      	bmi.n	6368 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    6356:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    6358:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    635a:	bf4c      	ite	mi
    635c:	4905      	ldrmi	r1, [pc, #20]	; (6374 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    635e:	4906      	ldrpl	r1, [pc, #24]	; (6378 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    6360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    6364:	f7ff bec8 	b.w	60f8 <print_formatted>
}
    6368:	bd38      	pop	{r3, r4, r5, pc}
    636a:	bf00      	nop
    636c:	0002a53f 	.word	0x0002a53f
    6370:	0002c798 	.word	0x0002c798
    6374:	0002a52e 	.word	0x0002a52e
    6378:	0002a52d 	.word	0x0002a52d

0000637c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    637c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    6380:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    6382:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    6386:	4606      	mov	r6, r0
    6388:	460c      	mov	r4, r1
    638a:	4690      	mov	r8, r2
    638c:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    6390:	d04d      	beq.n	642e <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    6392:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    6394:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    6396:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    639a:	2b00      	cmp	r3, #0
    639c:	d044      	beq.n	6428 <log_output_msg2_process+0xac>
    639e:	4925      	ldr	r1, [pc, #148]	; (6434 <log_output_msg2_process+0xb8>)
    63a0:	1a5b      	subs	r3, r3, r1
    63a2:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    63a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    63aa:	f8cd 9000 	str.w	r9, [sp]
    63ae:	68a3      	ldr	r3, [r4, #8]
    63b0:	2200      	movs	r2, #0
    63b2:	4641      	mov	r1, r8
    63b4:	4630      	mov	r0, r6
    63b6:	f7ff ff1f 	bl	61f8 <prefix_print>
    63ba:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    63bc:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    63be:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    63c2:	f3c3 2349 	ubfx	r3, r3, #9, #10
    63c6:	b153      	cbz	r3, 63de <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    63c8:	4f1b      	ldr	r7, [pc, #108]	; (6438 <log_output_msg2_process+0xbc>)
    63ca:	481c      	ldr	r0, [pc, #112]	; (643c <log_output_msg2_process+0xc0>)
    63cc:	491c      	ldr	r1, [pc, #112]	; (6440 <log_output_msg2_process+0xc4>)
    63ce:	462b      	mov	r3, r5
    63d0:	4632      	mov	r2, r6
    63d2:	f1b9 0f00 	cmp.w	r9, #0
    63d6:	bf08      	it	eq
    63d8:	4638      	moveq	r0, r7
    63da:	f01c f926 	bl	2262a <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    63de:	8867      	ldrh	r7, [r4, #2]
    63e0:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    63e4:	b197      	cbz	r7, 640c <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    63e6:	6823      	ldr	r3, [r4, #0]
    63e8:	f3c3 2349 	ubfx	r3, r3, #9, #10
    63ec:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    63ee:	2f10      	cmp	r7, #16
    63f0:	463c      	mov	r4, r7
    63f2:	bf28      	it	cs
    63f4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    63f6:	4629      	mov	r1, r5
    63f8:	f8cd 8000 	str.w	r8, [sp]
    63fc:	4653      	mov	r3, sl
    63fe:	4622      	mov	r2, r4
    6400:	4630      	mov	r0, r6
    6402:	f7ff fe8b 	bl	611c <hexdump_line_print>
	} while (len);
    6406:	1b3f      	subs	r7, r7, r4
		data += length;
    6408:	4425      	add	r5, r4
	} while (len);
    640a:	d1f0      	bne.n	63ee <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    640c:	f1b9 0f00 	cmp.w	r9, #0
    6410:	d004      	beq.n	641c <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    6412:	464a      	mov	r2, r9
    6414:	4641      	mov	r1, r8
    6416:	4630      	mov	r0, r6
    6418:	f7ff ff92 	bl	6340 <postfix_print>
	}

	log_output_flush(output);
    641c:	4630      	mov	r0, r6
}
    641e:	b004      	add	sp, #16
    6420:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    6424:	f01c bfd7 	b.w	233d6 <log_output_flush>
		int16_t source_id = source ?
    6428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    642c:	e7bb      	b.n	63a6 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    642e:	46ca      	mov	sl, r9
    6430:	e7c4      	b.n	63bc <log_output_msg2_process+0x40>
    6432:	bf00      	nop
    6434:	00028888 	.word	0x00028888
    6438:	00023427 	.word	0x00023427
    643c:	000233f1 	.word	0x000233f1
    6440:	00005005 	.word	0x00005005

00006444 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    6444:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6446:	f242 730f 	movw	r3, #9999	; 0x270f
    644a:	428b      	cmp	r3, r1
    644c:	bf28      	it	cs
    644e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    6450:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6452:	4a0f      	ldr	r2, [pc, #60]	; (6490 <log_output_dropped_process+0x4c>)
{
    6454:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6456:	2105      	movs	r1, #5
    6458:	4668      	mov	r0, sp
    645a:	f01c f960 	bl	2271e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    645e:	6863      	ldr	r3, [r4, #4]
    6460:	490c      	ldr	r1, [pc, #48]	; (6494 <log_output_dropped_process+0x50>)
    6462:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6464:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6466:	220b      	movs	r2, #11
    6468:	4628      	mov	r0, r5
    646a:	f01c ffa7 	bl	233bc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    646e:	6863      	ldr	r3, [r4, #4]
    6470:	4632      	mov	r2, r6
    6472:	4669      	mov	r1, sp
    6474:	4628      	mov	r0, r5
    6476:	685b      	ldr	r3, [r3, #4]
    6478:	f01c ffa0 	bl	233bc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    647c:	6863      	ldr	r3, [r4, #4]
    647e:	4906      	ldr	r1, [pc, #24]	; (6498 <log_output_dropped_process+0x54>)
    6480:	685b      	ldr	r3, [r3, #4]
    6482:	221b      	movs	r2, #27
    6484:	4628      	mov	r0, r5
    6486:	f01c ff99 	bl	233bc <buffer_write>
		     output->control_block->ctx);
}
    648a:	b002      	add	sp, #8
    648c:	bd70      	pop	{r4, r5, r6, pc}
    648e:	bf00      	nop
    6490:	0002a40f 	.word	0x0002a40f
    6494:	0002a5b8 	.word	0x0002a5b8
    6498:	0002a59c 	.word	0x0002a59c

0000649c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    649c:	4a08      	ldr	r2, [pc, #32]	; (64c0 <log_output_timestamp_freq_set+0x24>)
{
    649e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    64a0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    64a2:	4c08      	ldr	r4, [pc, #32]	; (64c4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    64a4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    64a6:	2100      	movs	r1, #0
    64a8:	42a0      	cmp	r0, r4
    64aa:	d804      	bhi.n	64b6 <log_output_timestamp_freq_set+0x1a>
    64ac:	b101      	cbz	r1, 64b0 <log_output_timestamp_freq_set+0x14>
    64ae:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    64b0:	4b05      	ldr	r3, [pc, #20]	; (64c8 <log_output_timestamp_freq_set+0x2c>)
    64b2:	6018      	str	r0, [r3, #0]
}
    64b4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    64b6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    64b8:	005b      	lsls	r3, r3, #1
    64ba:	2101      	movs	r1, #1
    64bc:	e7f4      	b.n	64a8 <log_output_timestamp_freq_set+0xc>
    64be:	bf00      	nop
    64c0:	20001e60 	.word	0x20001e60
    64c4:	000f4240 	.word	0x000f4240
    64c8:	20001e5c 	.word	0x20001e5c

000064cc <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    64cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64d0:	b085      	sub	sp, #20
    64d2:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    64d6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    64da:	4605      	mov	r5, r0
    64dc:	4688      	mov	r8, r1
    64de:	4614      	mov	r4, r2
    64e0:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    64e2:	f1bb 0f00 	cmp.w	fp, #0
    64e6:	d037      	beq.n	6558 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    64e8:	2200      	movs	r2, #0
    64ea:	f8cd a000 	str.w	sl, [sp]
    64ee:	465b      	mov	r3, fp
    64f0:	210c      	movs	r1, #12
    64f2:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    64f4:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    64f8:	f7fe fa82 	bl	4a00 <cbvprintf_package>
    64fc:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    64fe:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6502:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    6506:	f005 0407 	and.w	r4, r5, #7
    650a:	4d14      	ldr	r5, [pc, #80]	; (655c <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    650c:	4b14      	ldr	r3, [pc, #80]	; (6560 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    650e:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6510:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    6512:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    6516:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    651a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    651e:	432c      	orrs	r4, r5
    6520:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    6524:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    6526:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    6528:	f7ff fcca 	bl	5ec0 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    652c:	4605      	mov	r5, r0
    652e:	b150      	cbz	r0, 6546 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    6530:	f1bb 0f00 	cmp.w	fp, #0
    6534:	d007      	beq.n	6546 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    6536:	f8cd a000 	str.w	sl, [sp]
    653a:	465b      	mov	r3, fp
    653c:	2200      	movs	r2, #0
    653e:	4639      	mov	r1, r7
    6540:	300c      	adds	r0, #12
    6542:	f7fe fa5d 	bl	4a00 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    6546:	464b      	mov	r3, r9
    6548:	4622      	mov	r2, r4
    654a:	4641      	mov	r1, r8
    654c:	4628      	mov	r0, r5
}
    654e:	b005      	add	sp, #20
    6550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    6554:	f01c bf74 	b.w	23440 <z_log_msg2_finalize>
		plen = 0;
    6558:	465f      	mov	r7, fp
    655a:	e7d0      	b.n	64fe <z_impl_z_log_msg2_runtime_vcreate+0x32>
    655c:	0007fe00 	.word	0x0007fe00
    6560:	7ff80000 	.word	0x7ff80000

00006564 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    6564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    6566:	4f07      	ldr	r7, [pc, #28]	; (6584 <char_out+0x20>)
{
    6568:	460d      	mov	r5, r1
    656a:	4604      	mov	r4, r0
    656c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    656e:	42b4      	cmp	r4, r6
    6570:	d101      	bne.n	6576 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    6572:	4628      	mov	r0, r5
    6574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    6576:	6838      	ldr	r0, [r7, #0]
    6578:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    657c:	6883      	ldr	r3, [r0, #8]
    657e:	685b      	ldr	r3, [r3, #4]
    6580:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    6582:	e7f4      	b.n	656e <char_out+0xa>
    6584:	20001e78 	.word	0x20001e78

00006588 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6588:	4b01      	ldr	r3, [pc, #4]	; (6590 <log_backend_uart_init+0x8>)
    658a:	4a02      	ldr	r2, [pc, #8]	; (6594 <log_backend_uart_init+0xc>)
    658c:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    658e:	4770      	bx	lr
    6590:	20001e78 	.word	0x20001e78
    6594:	00028668 	.word	0x00028668

00006598 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    6598:	4b02      	ldr	r3, [pc, #8]	; (65a4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    659a:	4803      	ldr	r0, [pc, #12]	; (65a8 <panic+0x10>)
    659c:	2201      	movs	r2, #1
    659e:	701a      	strb	r2, [r3, #0]
    65a0:	f01c bf19 	b.w	233d6 <log_output_flush>
    65a4:	20003de6 	.word	0x20003de6
    65a8:	00028b70 	.word	0x00028b70

000065ac <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    65ac:	4801      	ldr	r0, [pc, #4]	; (65b4 <dropped+0x8>)
    65ae:	f7ff bf49 	b.w	6444 <log_output_dropped_process>
    65b2:	bf00      	nop
    65b4:	00028b70 	.word	0x00028b70

000065b8 <process>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
    65b8:	4801      	ldr	r0, [pc, #4]	; (65c0 <process+0x8>)
    65ba:	220f      	movs	r2, #15
    65bc:	f7ff bede 	b.w	637c <log_output_msg2_process>
    65c0:	00028b70 	.word	0x00028b70

000065c4 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    65c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    65c6:	2407      	movs	r4, #7
    65c8:	9402      	str	r4, [sp, #8]
    65ca:	4c04      	ldr	r4, [pc, #16]	; (65dc <read_pnp_id+0x18>)
    65cc:	9401      	str	r4, [sp, #4]
    65ce:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    65d2:	9400      	str	r4, [sp, #0]
    65d4:	f01f fee1 	bl	2639a <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    65d8:	b004      	add	sp, #16
    65da:	bd10      	pop	{r4, pc}
    65dc:	2000089a 	.word	0x2000089a

000065e0 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    65e0:	4b0c      	ldr	r3, [pc, #48]	; (6614 <class_handler+0x34>)
{
    65e2:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    65e4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    65e6:	4e0c      	ldr	r6, [pc, #48]	; (6618 <class_handler+0x38>)
    65e8:	4b0c      	ldr	r3, [pc, #48]	; (661c <class_handler+0x3c>)
    65ea:	42b3      	cmp	r3, r6
    65ec:	d303      	bcc.n	65f6 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    65ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
    65f2:	bcf0      	pop	{r4, r5, r6, r7}
    65f4:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    65f6:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    65f8:	42bd      	cmp	r5, r7
    65fa:	d309      	bcc.n	6610 <class_handler+0x30>
		if (iface->class_handler &&
    65fc:	691c      	ldr	r4, [r3, #16]
    65fe:	b13c      	cbz	r4, 6610 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    6600:	f895 c002 	ldrb.w	ip, [r5, #2]
    6604:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    6606:	45ac      	cmp	ip, r5
    6608:	d102      	bne.n	6610 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    660a:	4623      	mov	r3, r4
}
    660c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    660e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6610:	3324      	adds	r3, #36	; 0x24
    6612:	e7ea      	b.n	65ea <class_handler+0xa>
    6614:	20001e7c 	.word	0x20001e7c
    6618:	20000c4c 	.word	0x20000c4c
    661c:	20000c28 	.word	0x20000c28

00006620 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    6620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6624:	4c13      	ldr	r4, [pc, #76]	; (6674 <custom_handler+0x54>)
    6626:	f8df 8050 	ldr.w	r8, [pc, #80]	; 6678 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    662a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 667c <custom_handler+0x5c>
{
    662e:	4605      	mov	r5, r0
    6630:	460e      	mov	r6, r1
    6632:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6634:	4544      	cmp	r4, r8
    6636:	d303      	bcc.n	6640 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    6638:	f06f 0085 	mvn.w	r0, #133	; 0x85
    663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    6640:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    6642:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    6646:	429a      	cmp	r2, r3
    6648:	d312      	bcc.n	6670 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    664a:	69a3      	ldr	r3, [r4, #24]
    664c:	b183      	cbz	r3, 6670 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    664e:	7890      	ldrb	r0, [r2, #2]
    6650:	7929      	ldrb	r1, [r5, #4]
    6652:	4288      	cmp	r0, r1
    6654:	d105      	bne.n	6662 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    6656:	463a      	mov	r2, r7
    6658:	4631      	mov	r1, r6
    665a:	4628      	mov	r0, r5
}
    665c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    6660:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    6662:	7952      	ldrb	r2, [r2, #5]
    6664:	2a01      	cmp	r2, #1
    6666:	d103      	bne.n	6670 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    6668:	463a      	mov	r2, r7
    666a:	4631      	mov	r1, r6
    666c:	4628      	mov	r0, r5
    666e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6670:	3424      	adds	r4, #36	; 0x24
    6672:	e7df      	b.n	6634 <custom_handler+0x14>
    6674:	20000c28 	.word	0x20000c28
    6678:	20000c4c 	.word	0x20000c4c
    667c:	20001e7c 	.word	0x20001e7c

00006680 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    6680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6684:	4c0b      	ldr	r4, [pc, #44]	; (66b4 <vendor_handler+0x34>)
    6686:	f8df 8030 	ldr.w	r8, [pc, #48]	; 66b8 <vendor_handler+0x38>
{
    668a:	4605      	mov	r5, r0
    668c:	460e      	mov	r6, r1
    668e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6690:	4544      	cmp	r4, r8
    6692:	d302      	bcc.n	669a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    6694:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6698:	e009      	b.n	66ae <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    669a:	6963      	ldr	r3, [r4, #20]
    669c:	b90b      	cbnz	r3, 66a2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    669e:	3424      	adds	r4, #36	; 0x24
    66a0:	e7f6      	b.n	6690 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    66a2:	463a      	mov	r2, r7
    66a4:	4631      	mov	r1, r6
    66a6:	4628      	mov	r0, r5
    66a8:	4798      	blx	r3
    66aa:	2800      	cmp	r0, #0
    66ac:	d1f7      	bne.n	669e <vendor_handler+0x1e>
}
    66ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b2:	bf00      	nop
    66b4:	20000c28 	.word	0x20000c28
    66b8:	20000c4c 	.word	0x20000c4c

000066bc <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    66bc:	4802      	ldr	r0, [pc, #8]	; (66c8 <usb_reset_alt_setting+0xc>)
    66be:	2208      	movs	r2, #8
    66c0:	2100      	movs	r1, #0
    66c2:	f01e b977 	b.w	249b4 <memset>
    66c6:	bf00      	nop
    66c8:	20001f37 	.word	0x20001f37

000066cc <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    66cc:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    66ce:	4b0b      	ldr	r3, [pc, #44]	; (66fc <is_ep_valid.part.0+0x30>)
    66d0:	4c0b      	ldr	r4, [pc, #44]	; (6700 <is_ep_valid.part.0+0x34>)
    66d2:	42a3      	cmp	r3, r4
    66d4:	d301      	bcc.n	66da <is_ep_valid.part.0+0xe>
	return false;
    66d6:	2000      	movs	r0, #0
}
    66d8:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    66da:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    66dc:	7f1e      	ldrb	r6, [r3, #28]
    66de:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    66e0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    66e2:	b2d5      	uxtb	r5, r2
    66e4:	42ae      	cmp	r6, r5
    66e6:	d801      	bhi.n	66ec <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    66e8:	3324      	adds	r3, #36	; 0x24
    66ea:	e7f2      	b.n	66d2 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    66ec:	3201      	adds	r2, #1
    66ee:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    66f2:	4285      	cmp	r5, r0
    66f4:	d1f5      	bne.n	66e2 <is_ep_valid.part.0+0x16>
				return true;
    66f6:	2001      	movs	r0, #1
    66f8:	e7ee      	b.n	66d8 <is_ep_valid.part.0+0xc>
    66fa:	bf00      	nop
    66fc:	20000c28 	.word	0x20000c28
    6700:	20000c4c 	.word	0x20000c4c

00006704 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    6704:	4809      	ldr	r0, [pc, #36]	; (672c <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    6706:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    6708:	7803      	ldrb	r3, [r0, #0]
    670a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    670e:	330a      	adds	r3, #10
    6710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    6714:	b13b      	cbz	r3, 6726 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    6716:	f100 0208 	add.w	r2, r0, #8
    671a:	f100 0110 	add.w	r1, r0, #16
    671e:	4798      	blx	r3
    6720:	43c0      	mvns	r0, r0
    6722:	0fc0      	lsrs	r0, r0, #31
}
    6724:	bd08      	pop	{r3, pc}
		return false;
    6726:	4618      	mov	r0, r3
    6728:	e7fc      	b.n	6724 <usb_handle_request.constprop.0+0x20>
    672a:	bf00      	nop
    672c:	20001e7c 	.word	0x20001e7c

00006730 <set_endpoint>:
{
    6730:	b500      	push	{lr}
    6732:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    6734:	7883      	ldrb	r3, [r0, #2]
    6736:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    673a:	7903      	ldrb	r3, [r0, #4]
    673c:	7942      	ldrb	r2, [r0, #5]
    673e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6742:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    6746:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    6748:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    674a:	f003 0303 	and.w	r3, r3, #3
    674e:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    6752:	f017 f8db 	bl	1d90c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    6756:	f110 0f78 	cmn.w	r0, #120	; 0x78
    675a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    675e:	d125      	bne.n	67ac <set_endpoint+0x7c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    6760:	4a1e      	ldr	r2, [pc, #120]	; (67dc <set_endpoint+0xac>)
    6762:	481f      	ldr	r0, [pc, #124]	; (67e0 <set_endpoint+0xb0>)
    6764:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6768:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    676c:	2303      	movs	r3, #3
    676e:	aa07      	add	r2, sp, #28
    6770:	9301      	str	r3, [sp, #4]
    6772:	9307      	str	r3, [sp, #28]
    6774:	f01c feb9 	bl	234ea <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    6778:	f89d 0008 	ldrb.w	r0, [sp, #8]
    677c:	f017 f970 	bl	1da60 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    6780:	f110 0f78 	cmn.w	r0, #120	; 0x78
    6784:	d124      	bne.n	67d0 <set_endpoint+0xa0>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    6786:	f89d 3008 	ldrb.w	r3, [sp, #8]
    678a:	4a16      	ldr	r2, [pc, #88]	; (67e4 <set_endpoint+0xb4>)
    678c:	4814      	ldr	r0, [pc, #80]	; (67e0 <set_endpoint+0xb0>)
    678e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6792:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6796:	2303      	movs	r3, #3
    6798:	aa07      	add	r2, sp, #28
    679a:	9301      	str	r3, [sp, #4]
    679c:	9307      	str	r3, [sp, #28]
    679e:	f01c fea4 	bl	234ea <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    67a2:	4b11      	ldr	r3, [pc, #68]	; (67e8 <set_endpoint+0xb8>)
    67a4:	2001      	movs	r0, #1
    67a6:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    67aa:	e00e      	b.n	67ca <set_endpoint+0x9a>
	} else if (ret) {
    67ac:	2800      	cmp	r0, #0
    67ae:	d0e3      	beq.n	6778 <set_endpoint+0x48>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    67b0:	4a0e      	ldr	r2, [pc, #56]	; (67ec <set_endpoint+0xbc>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    67b2:	480b      	ldr	r0, [pc, #44]	; (67e0 <set_endpoint+0xb0>)
    67b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    67b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    67bc:	2303      	movs	r3, #3
    67be:	aa07      	add	r2, sp, #28
    67c0:	9301      	str	r3, [sp, #4]
    67c2:	9307      	str	r3, [sp, #28]
    67c4:	f01c fe91 	bl	234ea <z_log_msg2_static_create.constprop.0>
		return false;
    67c8:	2000      	movs	r0, #0
}
    67ca:	b00b      	add	sp, #44	; 0x2c
    67cc:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (ret) {
    67d0:	2800      	cmp	r0, #0
    67d2:	d0e6      	beq.n	67a2 <set_endpoint+0x72>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    67d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    67d8:	4a05      	ldr	r2, [pc, #20]	; (67f0 <set_endpoint+0xc0>)
    67da:	e7ea      	b.n	67b2 <set_endpoint+0x82>
    67dc:	0002a600 	.word	0x0002a600
    67e0:	00028a18 	.word	0x00028a18
    67e4:	0002a647 	.word	0x0002a647
    67e8:	20001e7c 	.word	0x20001e7c
    67ec:	0002a623 	.word	0x0002a623
    67f0:	0002a667 	.word	0x0002a667

000067f4 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    67f4:	2804      	cmp	r0, #4
{
    67f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 6884 <forward_status_cb+0x90>
    67fe:	4604      	mov	r4, r0
    6800:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    6802:	d10e      	bne.n	6822 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    6804:	f7ff ff5a 	bl	66bc <usb_reset_alt_setting>
		if (usb_dev.configured) {
    6808:	f8df 907c 	ldr.w	r9, [pc, #124]	; 6888 <forward_status_cb+0x94>
    680c:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    6810:	b15b      	cbz	r3, 682a <forward_status_cb+0x36>
			usb_cancel_transfers();
    6812:	f000 ff0f 	bl	7634 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    6816:	2c04      	cmp	r4, #4
    6818:	d001      	beq.n	681e <forward_status_cb+0x2a>
    681a:	2c01      	cmp	r4, #1
    681c:	d105      	bne.n	682a <forward_status_cb+0x36>
    681e:	4d1b      	ldr	r5, [pc, #108]	; (688c <forward_status_cb+0x98>)
    6820:	e016      	b.n	6850 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    6822:	2805      	cmp	r0, #5
    6824:	d0f0      	beq.n	6808 <forward_status_cb+0x14>
    6826:	2801      	cmp	r0, #1
    6828:	d0ee      	beq.n	6808 <forward_status_cb+0x14>
    682a:	4d18      	ldr	r5, [pc, #96]	; (688c <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    682c:	4545      	cmp	r5, r8
    682e:	d31e      	bcc.n	686e <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    6830:	4b15      	ldr	r3, [pc, #84]	; (6888 <forward_status_cb+0x94>)
    6832:	6a1b      	ldr	r3, [r3, #32]
    6834:	b31b      	cbz	r3, 687e <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    6836:	4631      	mov	r1, r6
    6838:	4620      	mov	r0, r4
}
    683a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    683e:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    6840:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    6844:	2700      	movs	r7, #0
    6846:	7f2a      	ldrb	r2, [r5, #28]
    6848:	b2fb      	uxtb	r3, r7
    684a:	429a      	cmp	r2, r3
    684c:	d803      	bhi.n	6856 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    684e:	3524      	adds	r5, #36	; 0x24
    6850:	4545      	cmp	r5, r8
    6852:	d3f5      	bcc.n	6840 <forward_status_cb+0x4c>
    6854:	e007      	b.n	6866 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    6856:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    685a:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    685c:	7918      	ldrb	r0, [r3, #4]
    685e:	f017 f929 	bl	1dab4 <usb_dc_ep_disable>
			if (ret < 0) {
    6862:	2800      	cmp	r0, #0
    6864:	daef      	bge.n	6846 <forward_status_cb+0x52>
				usb_dev.configured = false;
    6866:	2300      	movs	r3, #0
    6868:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    686c:	e7dd      	b.n	682a <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    686e:	68eb      	ldr	r3, [r5, #12]
    6870:	b11b      	cbz	r3, 687a <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    6872:	4632      	mov	r2, r6
    6874:	4621      	mov	r1, r4
    6876:	4628      	mov	r0, r5
    6878:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    687a:	3524      	adds	r5, #36	; 0x24
    687c:	e7d6      	b.n	682c <forward_status_cb+0x38>
}
    687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6882:	bf00      	nop
    6884:	20000c4c 	.word	0x20000c4c
    6888:	20001e7c 	.word	0x20001e7c
    688c:	20000c28 	.word	0x20000c28

00006890 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    6890:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    6892:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    6894:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    6896:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    6898:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    689a:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    689e:	d007      	beq.n	68b0 <usb_halt_endpoint_req.isra.0+0x20>
    68a0:	4620      	mov	r0, r4
    68a2:	f7ff ff13 	bl	66cc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    68a6:	b1f0      	cbz	r0, 68e6 <usb_halt_endpoint_req.isra.0+0x56>
	return (usb_dev.configuration != 0);
    68a8:	4b1b      	ldr	r3, [pc, #108]	; (6918 <usb_halt_endpoint_req.isra.0+0x88>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    68aa:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    68ae:	b1d0      	cbz	r0, 68e6 <usb_halt_endpoint_req.isra.0+0x56>
		if (halt) {
    68b0:	4e19      	ldr	r6, [pc, #100]	; (6918 <usb_halt_endpoint_req.isra.0+0x88>)
    68b2:	2303      	movs	r3, #3
    68b4:	b1cd      	cbz	r5, 68ea <usb_halt_endpoint_req.isra.0+0x5a>
			LOG_INF("Set halt ep 0x%02x", ep);
    68b6:	4a19      	ldr	r2, [pc, #100]	; (691c <usb_halt_endpoint_req.isra.0+0x8c>)
    68b8:	4819      	ldr	r0, [pc, #100]	; (6920 <usb_halt_endpoint_req.isra.0+0x90>)
    68ba:	9301      	str	r3, [sp, #4]
    68bc:	e9cd 2406 	strd	r2, r4, [sp, #24]
    68c0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    68c4:	aa05      	add	r2, sp, #20
    68c6:	9305      	str	r3, [sp, #20]
    68c8:	f01c fe0f 	bl	234ea <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    68cc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    68d0:	f017 f850 	bl	1d974 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    68d4:	69f3      	ldr	r3, [r6, #28]
    68d6:	b90b      	cbnz	r3, 68dc <usb_halt_endpoint_req.isra.0+0x4c>
		return true;
    68d8:	2001      	movs	r0, #1
    68da:	e004      	b.n	68e6 <usb_halt_endpoint_req.isra.0+0x56>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    68dc:	2008      	movs	r0, #8
    68de:	f10d 0103 	add.w	r1, sp, #3
    68e2:	4798      	blx	r3
		return true;
    68e4:	4628      	mov	r0, r5
}
    68e6:	b008      	add	sp, #32
    68e8:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    68ea:	4a0e      	ldr	r2, [pc, #56]	; (6924 <usb_halt_endpoint_req.isra.0+0x94>)
    68ec:	480c      	ldr	r0, [pc, #48]	; (6920 <usb_halt_endpoint_req.isra.0+0x90>)
    68ee:	9301      	str	r3, [sp, #4]
    68f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
    68f4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    68f8:	aa05      	add	r2, sp, #20
    68fa:	9305      	str	r3, [sp, #20]
    68fc:	f01c fdf5 	bl	234ea <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    6900:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6904:	f017 f870 	bl	1d9e8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    6908:	69f3      	ldr	r3, [r6, #28]
    690a:	2b00      	cmp	r3, #0
    690c:	d0e4      	beq.n	68d8 <usb_halt_endpoint_req.isra.0+0x48>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    690e:	f10d 0103 	add.w	r1, sp, #3
    6912:	2009      	movs	r0, #9
    6914:	4798      	blx	r3
    6916:	e7df      	b.n	68d8 <usb_halt_endpoint_req.isra.0+0x48>
    6918:	20001e7c 	.word	0x20001e7c
    691c:	0002a688 	.word	0x0002a688
    6920:	00028a18 	.word	0x00028a18
    6924:	0002a69b 	.word	0x0002a69b

00006928 <usb_handle_standard_request>:
{
    6928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    692c:	f8df a27c 	ldr.w	sl, [pc, #636]	; 6bac <usb_handle_standard_request+0x284>
    6930:	f8da 5018 	ldr.w	r5, [sl, #24]
{
    6934:	b089      	sub	sp, #36	; 0x24
    6936:	4604      	mov	r4, r0
    6938:	460e      	mov	r6, r1
    693a:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    693c:	b965      	cbnz	r5, 6958 <usb_handle_standard_request+0x30>
	switch (setup->RequestType.recipient) {
    693e:	7820      	ldrb	r0, [r4, #0]
    6940:	f000 001f 	and.w	r0, r0, #31
    6944:	2801      	cmp	r0, #1
    6946:	f000 80a6 	beq.w	6a96 <usb_handle_standard_request+0x16e>
    694a:	2802      	cmp	r0, #2
    694c:	f000 8138 	beq.w	6bc0 <usb_handle_standard_request+0x298>
    6950:	b138      	cbz	r0, 6962 <usb_handle_standard_request+0x3a>
		switch (setup->bRequest) {
    6952:	f06f 0015 	mvn.w	r0, #21
    6956:	e094      	b.n	6a82 <usb_handle_standard_request+0x15a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    6958:	47a8      	blx	r5
	if (usb_dev.custom_req_handler &&
    695a:	2800      	cmp	r0, #0
    695c:	d1ef      	bne.n	693e <usb_handle_standard_request+0x16>
	int rc = 0;
    695e:	2000      	movs	r0, #0
    6960:	e08f      	b.n	6a82 <usb_handle_standard_request+0x15a>
	if (usb_reqtype_is_to_host(setup)) {
    6962:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    6966:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    6968:	2a00      	cmp	r2, #0
    696a:	da30      	bge.n	69ce <usb_handle_standard_request+0xa6>
		switch (setup->bRequest) {
    696c:	2d06      	cmp	r5, #6
	uint8_t *data = *data_buf;
    696e:	683a      	ldr	r2, [r7, #0]
		switch (setup->bRequest) {
    6970:	d00f      	beq.n	6992 <usb_handle_standard_request+0x6a>
    6972:	2d08      	cmp	r5, #8
    6974:	d025      	beq.n	69c2 <usb_handle_standard_request+0x9a>
    6976:	2d00      	cmp	r5, #0
    6978:	d1eb      	bne.n	6952 <usb_handle_standard_request+0x2a>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    697a:	2101      	movs	r1, #1
	data[1] = 0U;
    697c:	7055      	strb	r5, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    697e:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    6980:	f89a 30c3 	ldrb.w	r3, [sl, #195]	; 0xc3
    6984:	2b00      	cmp	r3, #0
    6986:	bf18      	it	ne
    6988:	2502      	movne	r5, #2
    698a:	430d      	orrs	r5, r1
    698c:	7015      	strb	r5, [r2, #0]
		*len = 2;
    698e:	2302      	movs	r3, #2
    6990:	e01b      	b.n	69ca <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    6992:	8861      	ldrh	r1, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    6994:	0a0a      	lsrs	r2, r1, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    6996:	1f14      	subs	r4, r2, #4
    6998:	2c01      	cmp	r4, #1
    699a:	d9da      	bls.n	6952 <usb_handle_standard_request+0x2a>
    699c:	2a07      	cmp	r2, #7
    699e:	d8d8      	bhi.n	6952 <usb_handle_standard_request+0x2a>
	p = (uint8_t *)usb_dev.descriptors;
    69a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    69a4:	b2c9      	uxtb	r1, r1
	while (p[DESC_bLength] != 0U) {
    69a6:	781c      	ldrb	r4, [r3, #0]
    69a8:	2c00      	cmp	r4, #0
    69aa:	d0d2      	beq.n	6952 <usb_handle_standard_request+0x2a>
		if (p[DESC_bDescriptorType] == type) {
    69ac:	785d      	ldrb	r5, [r3, #1]
    69ae:	4295      	cmp	r5, r2
    69b0:	d103      	bne.n	69ba <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    69b2:	4281      	cmp	r1, r0
    69b4:	f000 8138 	beq.w	6c28 <usb_handle_standard_request+0x300>
			cur_index++;
    69b8:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    69ba:	4423      	add	r3, r4
    69bc:	e7f3      	b.n	69a6 <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	e137      	b.n	6c32 <usb_handle_standard_request+0x30a>
			data[0] = usb_dev.configuration;
    69c2:	f89a 30ba 	ldrb.w	r3, [sl, #186]	; 0xba
    69c6:	7013      	strb	r3, [r2, #0]
			*len = 1;
    69c8:	2301      	movs	r3, #1
		*len = 2;
    69ca:	6033      	str	r3, [r6, #0]
		return true;
    69cc:	e059      	b.n	6a82 <usb_handle_standard_request+0x15a>
		switch (setup->bRequest) {
    69ce:	3d01      	subs	r5, #1
    69d0:	2d08      	cmp	r5, #8
    69d2:	d8be      	bhi.n	6952 <usb_handle_standard_request+0x2a>
    69d4:	a301      	add	r3, pc, #4	; (adr r3, 69dc <usb_handle_standard_request+0xb4>)
    69d6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    69da:	bf00      	nop
    69dc:	00006a75 	.word	0x00006a75
    69e0:	00006953 	.word	0x00006953
    69e4:	00006a89 	.word	0x00006a89
    69e8:	00006953 	.word	0x00006953
    69ec:	00006a01 	.word	0x00006a01
    69f0:	00006953 	.word	0x00006953
    69f4:	00006953 	.word	0x00006953
    69f8:	00006953 	.word	0x00006953
    69fc:	00006a0d 	.word	0x00006a0d
			return !usb_dc_set_address(setup->wValue);
    6a00:	78a0      	ldrb	r0, [r4, #2]
    6a02:	f016 ff3d 	bl	1d880 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    6a06:	2800      	cmp	r0, #0
    6a08:	d0a9      	beq.n	695e <usb_handle_standard_request+0x36>
    6a0a:	e7a2      	b.n	6952 <usb_handle_standard_request+0x2a>
	if (setup->wValue == 0U) {
    6a0c:	8865      	ldrh	r5, [r4, #2]
    6a0e:	b145      	cbz	r5, 6a22 <usb_handle_standard_request+0xfa>
	uint8_t cur_config = 0xFF;
    6a10:	27ff      	movs	r7, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    6a12:	f8da 6024 	ldr.w	r6, [sl, #36]	; 0x24
	bool found = false;
    6a16:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    6a18:	46b8      	mov	r8, r7
	while (p[DESC_bLength] != 0U) {
    6a1a:	7835      	ldrb	r5, [r6, #0]
    6a1c:	b975      	cbnz	r5, 6a3c <usb_handle_standard_request+0x114>
	if (found) {
    6a1e:	2800      	cmp	r0, #0
    6a20:	d097      	beq.n	6952 <usb_handle_standard_request+0x2a>
		usb_reset_alt_setting();
    6a22:	f7ff fe4b 	bl	66bc <usb_reset_alt_setting>
		if (usb_dev.status_callback) {
    6a26:	f8da 301c 	ldr.w	r3, [sl, #28]
		usb_dev.configuration = setup->wValue;
    6a2a:	8862      	ldrh	r2, [r4, #2]
    6a2c:	f88a 20ba 	strb.w	r2, [sl, #186]	; 0xba
		if (usb_dev.status_callback) {
    6a30:	2b00      	cmp	r3, #0
    6a32:	d094      	beq.n	695e <usb_handle_standard_request+0x36>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    6a34:	495e      	ldr	r1, [pc, #376]	; (6bb0 <usb_handle_standard_request+0x288>)
    6a36:	2003      	movs	r0, #3
    6a38:	4798      	blx	r3
    6a3a:	e790      	b.n	695e <usb_handle_standard_request+0x36>
		switch (p[DESC_bDescriptorType]) {
    6a3c:	7872      	ldrb	r2, [r6, #1]
    6a3e:	2a04      	cmp	r2, #4
    6a40:	d00b      	beq.n	6a5a <usb_handle_standard_request+0x132>
    6a42:	2a05      	cmp	r2, #5
    6a44:	d00c      	beq.n	6a60 <usb_handle_standard_request+0x138>
    6a46:	2a02      	cmp	r2, #2
    6a48:	d104      	bne.n	6a54 <usb_handle_standard_request+0x12c>
			cur_config = p[CONF_DESC_bConfigurationValue];
    6a4a:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
    6a4c:	8861      	ldrh	r1, [r4, #2]
				found = true;
    6a4e:	42b9      	cmp	r1, r7
    6a50:	bf08      	it	eq
    6a52:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    6a54:	7832      	ldrb	r2, [r6, #0]
    6a56:	4416      	add	r6, r2
    6a58:	e7df      	b.n	6a1a <usb_handle_standard_request+0xf2>
			cur_alt_setting =
    6a5a:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
    6a5e:	e7f9      	b.n	6a54 <usb_handle_standard_request+0x12c>
			if ((cur_config != setup->wValue) ||
    6a60:	8862      	ldrh	r2, [r4, #2]
    6a62:	42ba      	cmp	r2, r7
    6a64:	d1f6      	bne.n	6a54 <usb_handle_standard_request+0x12c>
    6a66:	f1b8 0f00 	cmp.w	r8, #0
    6a6a:	d1f3      	bne.n	6a54 <usb_handle_standard_request+0x12c>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    6a6c:	4630      	mov	r0, r6
    6a6e:	f7ff fe5f 	bl	6730 <set_endpoint>
			break;
    6a72:	e7ef      	b.n	6a54 <usb_handle_standard_request+0x12c>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    6a74:	8862      	ldrh	r2, [r4, #2]
    6a76:	2a01      	cmp	r2, #1
    6a78:	f47f af6b 	bne.w	6952 <usb_handle_standard_request+0x2a>
					usb_dev.remote_wakeup = false;
    6a7c:	2000      	movs	r0, #0
    6a7e:	f88a 00c3 	strb.w	r0, [sl, #195]	; 0xc3
}
    6a82:	b009      	add	sp, #36	; 0x24
    6a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    6a88:	8862      	ldrh	r2, [r4, #2]
    6a8a:	2a01      	cmp	r2, #1
    6a8c:	f47f af61 	bne.w	6952 <usb_handle_standard_request+0x2a>
					usb_dev.remote_wakeup = true;
    6a90:	f88a 20c3 	strb.w	r2, [sl, #195]	; 0xc3
					return true;
    6a94:	e763      	b.n	695e <usb_handle_standard_request+0x36>
	if (!is_device_configured() ||
    6a96:	f89a 20ba 	ldrb.w	r2, [sl, #186]	; 0xba
    6a9a:	2a00      	cmp	r2, #0
    6a9c:	f43f af59 	beq.w	6952 <usb_handle_standard_request+0x2a>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    6aa0:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    6aa4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6aa8:	7920      	ldrb	r0, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    6aaa:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    6aac:	7811      	ldrb	r1, [r2, #0]
    6aae:	2900      	cmp	r1, #0
    6ab0:	f43f af4f 	beq.w	6952 <usb_handle_standard_request+0x2a>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    6ab4:	7853      	ldrb	r3, [r2, #1]
    6ab6:	2b02      	cmp	r3, #2
    6ab8:	d104      	bne.n	6ac4 <usb_handle_standard_request+0x19c>
			if (interface < cfg_descr->bNumInterfaces) {
    6aba:	f892 8004 	ldrb.w	r8, [r2, #4]
    6abe:	4580      	cmp	r8, r0
    6ac0:	f200 80b9 	bhi.w	6c36 <usb_handle_standard_request+0x30e>
		p += p[DESC_bLength];
    6ac4:	440a      	add	r2, r1
    6ac6:	e7f1      	b.n	6aac <usb_handle_standard_request+0x184>
			data[0] = 0U;
    6ac8:	7008      	strb	r0, [r1, #0]
			data[1] = 0U;
    6aca:	7048      	strb	r0, [r1, #1]
			*len = 2;
    6acc:	e77d      	b.n	69ca <usb_handle_standard_request+0xa2>
		p += p[DESC_bLength];
    6ace:	4405      	add	r5, r0
    6ad0:	e0be      	b.n	6c50 <usb_handle_standard_request+0x328>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    6ad2:	280b      	cmp	r0, #11
    6ad4:	f47f af3d 	bne.w	6952 <usb_handle_standard_request+0x2a>
	bool ret = false;
    6ad8:	f04f 0b00 	mov.w	fp, #0
	uint8_t cur_iface = 0xFF;
    6adc:	f04f 08ff 	mov.w	r8, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    6ae0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 6bb4 <usb_handle_standard_request+0x28c>
	uint8_t cur_alt_setting = 0xFF;
    6ae4:	4646      	mov	r6, r8
	const uint8_t *if_desc = NULL;
    6ae6:	465f      	mov	r7, fp
    6ae8:	e006      	b.n	6af8 <usb_handle_standard_request+0x1d0>
		switch (p[DESC_bDescriptorType]) {
    6aea:	7869      	ldrb	r1, [r5, #1]
    6aec:	2904      	cmp	r1, #4
    6aee:	d011      	beq.n	6b14 <usb_handle_standard_request+0x1ec>
    6af0:	2905      	cmp	r1, #5
    6af2:	d024      	beq.n	6b3e <usb_handle_standard_request+0x216>
		p += p[DESC_bLength];
    6af4:	7829      	ldrb	r1, [r5, #0]
    6af6:	440d      	add	r5, r1
	while (p[DESC_bLength] != 0U) {
    6af8:	7829      	ldrb	r1, [r5, #0]
    6afa:	2900      	cmp	r1, #0
    6afc:	d1f5      	bne.n	6aea <usb_handle_standard_request+0x1c2>
	if (usb_dev.status_callback) {
    6afe:	f8da 301c 	ldr.w	r3, [sl, #28]
    6b02:	b113      	cbz	r3, 6b0a <usb_handle_standard_request+0x1e2>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    6b04:	4639      	mov	r1, r7
    6b06:	2007      	movs	r0, #7
    6b08:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    6b0a:	f1bb 0f00 	cmp.w	fp, #0
    6b0e:	f47f af26 	bne.w	695e <usb_handle_standard_request+0x36>
    6b12:	e71e      	b.n	6952 <usb_handle_standard_request+0x2a>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    6b14:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    6b18:	88a0      	ldrh	r0, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    6b1a:	78ee      	ldrb	r6, [r5, #3]
			if (cur_iface == setup->wIndex &&
    6b1c:	4580      	cmp	r8, r0
    6b1e:	4641      	mov	r1, r8
    6b20:	d1e8      	bne.n	6af4 <usb_handle_standard_request+0x1cc>
			    cur_alt_setting == setup->wValue) {
    6b22:	f8b4 c002 	ldrh.w	ip, [r4, #2]
			if (cur_iface == setup->wIndex &&
    6b26:	4566      	cmp	r6, ip
    6b28:	b2b0      	uxth	r0, r6
    6b2a:	d1e3      	bne.n	6af4 <usb_handle_standard_request+0x1cc>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    6b2c:	2907      	cmp	r1, #7
    6b2e:	d83a      	bhi.n	6ba6 <usb_handle_standard_request+0x27e>
		usb_dev.alt_setting[iface] = alt_setting;
    6b30:	4451      	add	r1, sl
		return true;
    6b32:	462f      	mov	r7, r5
				ret = usb_set_alt_setting(setup->wIndex,
    6b34:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    6b38:	f04f 0b01 	mov.w	fp, #1
    6b3c:	e7da      	b.n	6af4 <usb_handle_standard_request+0x1cc>
			if (cur_iface == setup->wIndex) {
    6b3e:	88a1      	ldrh	r1, [r4, #4]
    6b40:	4541      	cmp	r1, r8
    6b42:	d1d7      	bne.n	6af4 <usb_handle_standard_request+0x1cc>
	if (cur_alt_setting != alt_setting) {
    6b44:	78a2      	ldrb	r2, [r4, #2]
    6b46:	42b2      	cmp	r2, r6
    6b48:	d028      	beq.n	6b9c <usb_handle_standard_request+0x274>
		ret = reset_endpoint(ep_desc);
    6b4a:	f895 b002 	ldrb.w	fp, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    6b4e:	4658      	mov	r0, fp
    6b50:	f000 fd52 	bl	75f8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    6b54:	4658      	mov	r0, fp
    6b56:	f016 ffad 	bl	1dab4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    6b5a:	f110 0f78 	cmn.w	r0, #120	; 0x78
    6b5e:	d10c      	bne.n	6b7a <usb_handle_standard_request+0x252>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    6b60:	2203      	movs	r2, #3
    6b62:	4b15      	ldr	r3, [pc, #84]	; (6bb8 <usb_handle_standard_request+0x290>)
    6b64:	9201      	str	r2, [sp, #4]
    6b66:	9205      	str	r2, [sp, #20]
    6b68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6b6c:	aa05      	add	r2, sp, #20
    6b6e:	4648      	mov	r0, r9
    6b70:	e9cd 3b06 	strd	r3, fp, [sp, #24]
    6b74:	f01c fcb9 	bl	234ea <z_log_msg2_static_create.constprop.0>
    6b78:	e7de      	b.n	6b38 <usb_handle_standard_request+0x210>
	} else if (ret) {
    6b7a:	2800      	cmp	r0, #0
    6b7c:	d0dc      	beq.n	6b38 <usb_handle_standard_request+0x210>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    6b7e:	2203      	movs	r2, #3
    6b80:	4b0e      	ldr	r3, [pc, #56]	; (6bbc <usb_handle_standard_request+0x294>)
    6b82:	9201      	str	r2, [sp, #4]
    6b84:	9205      	str	r2, [sp, #20]
    6b86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6b8a:	aa05      	add	r2, sp, #20
    6b8c:	4648      	mov	r0, r9
    6b8e:	e9cd 3b06 	strd	r3, fp, [sp, #24]
    6b92:	f01c fcaa 	bl	234ea <z_log_msg2_static_create.constprop.0>
	return false;
    6b96:	f04f 0b00 	mov.w	fp, #0
    6b9a:	e7ab      	b.n	6af4 <usb_handle_standard_request+0x1cc>
		ret = set_endpoint(ep_desc);
    6b9c:	4628      	mov	r0, r5
    6b9e:	f7ff fdc7 	bl	6730 <set_endpoint>
    6ba2:	4683      	mov	fp, r0
    6ba4:	e7a6      	b.n	6af4 <usb_handle_standard_request+0x1cc>
    6ba6:	462f      	mov	r7, r5
    6ba8:	e7f5      	b.n	6b96 <usb_handle_standard_request+0x26e>
    6baa:	bf00      	nop
    6bac:	20001e7c 	.word	0x20001e7c
    6bb0:	20001f36 	.word	0x20001f36
    6bb4:	00028a18 	.word	0x00028a18
    6bb8:	0002a6b0 	.word	0x0002a6b0
    6bbc:	0002a6d1 	.word	0x0002a6d1
	if (usb_reqtype_is_to_host(setup)) {
    6bc0:	f994 1000 	ldrsb.w	r1, [r4]
		switch (setup->bRequest) {
    6bc4:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    6bc6:	2900      	cmp	r1, #0
    6bc8:	da18      	bge.n	6bfc <usb_handle_standard_request+0x2d4>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    6bca:	2a00      	cmp	r2, #0
    6bcc:	f47f aec1 	bne.w	6952 <usb_handle_standard_request+0x2a>
	uint8_t ep = setup->wIndex;
    6bd0:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    6bd2:	0663      	lsls	r3, r4, #25
    6bd4:	d00a      	beq.n	6bec <usb_handle_standard_request+0x2c4>
    6bd6:	4620      	mov	r0, r4
    6bd8:	f7ff fd78 	bl	66cc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    6bdc:	2800      	cmp	r0, #0
    6bde:	f43f aeb8 	beq.w	6952 <usb_handle_standard_request+0x2a>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    6be2:	f89a 30ba 	ldrb.w	r3, [sl, #186]	; 0xba
    6be6:	2b00      	cmp	r3, #0
    6be8:	f43f aeb3 	beq.w	6952 <usb_handle_standard_request+0x2a>
    6bec:	683d      	ldr	r5, [r7, #0]
		usb_dc_ep_is_stalled(ep, &data[0]);
    6bee:	4620      	mov	r0, r4
    6bf0:	4629      	mov	r1, r5
    6bf2:	f016 ff19 	bl	1da28 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    6bf6:	2000      	movs	r0, #0
    6bf8:	7068      	strb	r0, [r5, #1]
    6bfa:	e6c8      	b.n	698e <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    6bfc:	2a01      	cmp	r2, #1
    6bfe:	d008      	beq.n	6c12 <usb_handle_standard_request+0x2ea>
    6c00:	2a03      	cmp	r2, #3
    6c02:	f47f aea6 	bne.w	6952 <usb_handle_standard_request+0x2a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    6c06:	8863      	ldrh	r3, [r4, #2]
    6c08:	2b00      	cmp	r3, #0
    6c0a:	f47f aea2 	bne.w	6952 <usb_handle_standard_request+0x2a>
				return usb_halt_endpoint_req(setup, true);
    6c0e:	2101      	movs	r1, #1
    6c10:	e003      	b.n	6c1a <usb_handle_standard_request+0x2f2>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    6c12:	8861      	ldrh	r1, [r4, #2]
    6c14:	2900      	cmp	r1, #0
    6c16:	f47f ae9c 	bne.w	6952 <usb_handle_standard_request+0x2a>
				return usb_halt_endpoint_req(setup, true);
    6c1a:	88a0      	ldrh	r0, [r4, #4]
    6c1c:	f7ff fe38 	bl	6890 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    6c20:	2800      	cmp	r0, #0
    6c22:	f47f ae9c 	bne.w	695e <usb_handle_standard_request+0x36>
    6c26:	e694      	b.n	6952 <usb_handle_standard_request+0x2a>
		if (type == USB_DESC_CONFIGURATION) {
    6c28:	2a02      	cmp	r2, #2
		*data = p;
    6c2a:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
    6c2c:	f47f aec7 	bne.w	69be <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    6c30:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    6c32:	6033      	str	r3, [r6, #0]
    6c34:	e693      	b.n	695e <usb_handle_standard_request+0x36>
	if (usb_reqtype_is_to_host(setup)) {
    6c36:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    6c3a:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    6c3c:	2a00      	cmp	r2, #0
    6c3e:	f6bf af48 	bge.w	6ad2 <usb_handle_standard_request+0x1aa>
    6c42:	6839      	ldr	r1, [r7, #0]
		switch (setup->bRequest) {
    6c44:	2800      	cmp	r0, #0
    6c46:	f43f af3f 	beq.w	6ac8 <usb_handle_standard_request+0x1a0>
    6c4a:	280a      	cmp	r0, #10
    6c4c:	f47f ae81 	bne.w	6952 <usb_handle_standard_request+0x2a>
	while (p[DESC_bLength] != 0U) {
    6c50:	7828      	ldrb	r0, [r5, #0]
    6c52:	2800      	cmp	r0, #0
    6c54:	f43f ae7d 	beq.w	6952 <usb_handle_standard_request+0x2a>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    6c58:	786a      	ldrb	r2, [r5, #1]
    6c5a:	2a04      	cmp	r2, #4
    6c5c:	f47f af37 	bne.w	6ace <usb_handle_standard_request+0x1a6>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    6c60:	78aa      	ldrb	r2, [r5, #2]
			if (cur_iface == setup->wIndex) {
    6c62:	4596      	cmp	lr, r2
    6c64:	f47f af33 	bne.w	6ace <usb_handle_standard_request+0x1a6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    6c68:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
    6c6a:	bf96      	itet	ls
    6c6c:	eb0a 0302 	addls.w	r3, sl, r2
	return 0;
    6c70:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    6c72:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    6c76:	700b      	strb	r3, [r1, #0]
				*len = 1;
    6c78:	2301      	movs	r3, #1
    6c7a:	e7da      	b.n	6c32 <usb_handle_standard_request+0x30a>

00006c7c <usb_write>:
{
    6c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    6c80:	f8df a050 	ldr.w	sl, [pc, #80]	; 6cd4 <usb_write+0x58>
{
    6c84:	b089      	sub	sp, #36	; 0x24
    6c86:	4604      	mov	r4, r0
    6c88:	460e      	mov	r6, r1
    6c8a:	4617      	mov	r7, r2
    6c8c:	4698      	mov	r8, r3
    6c8e:	2504      	movs	r5, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    6c90:	f04f 0903 	mov.w	r9, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    6c94:	4643      	mov	r3, r8
    6c96:	463a      	mov	r2, r7
    6c98:	4631      	mov	r1, r6
    6c9a:	4620      	mov	r0, r4
    6c9c:	f016 ff30 	bl	1db00 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    6ca0:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    6ca4:	4683      	mov	fp, r0
		if (ret == -EAGAIN) {
    6ca6:	d110      	bne.n	6cca <usb_write+0x4e>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    6ca8:	4b0b      	ldr	r3, [pc, #44]	; (6cd8 <usb_write+0x5c>)
    6caa:	f8cd 9004 	str.w	r9, [sp, #4]
    6cae:	aa05      	add	r2, sp, #20
    6cb0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    6cb4:	4650      	mov	r0, sl
    6cb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    6cba:	f8cd 9014 	str.w	r9, [sp, #20]
    6cbe:	f01c fc14 	bl	234ea <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    6cc2:	f01b f8f5 	bl	21eb0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    6cc6:	3d01      	subs	r5, #1
    6cc8:	d1e4      	bne.n	6c94 <usb_write+0x18>
}
    6cca:	4658      	mov	r0, fp
    6ccc:	b009      	add	sp, #36	; 0x24
    6cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cd2:	bf00      	nop
    6cd4:	00028a18 	.word	0x00028a18
    6cd8:	0002a6f3 	.word	0x0002a6f3

00006cdc <usb_data_to_host>:
{
    6cdc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    6cde:	4c13      	ldr	r4, [pc, #76]	; (6d2c <usb_data_to_host+0x50>)
    6ce0:	7d23      	ldrb	r3, [r4, #20]
    6ce2:	b9cb      	cbnz	r3, 6d18 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    6ce4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    6ce6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    6ce8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    6cea:	ab01      	add	r3, sp, #4
    6cec:	2080      	movs	r0, #128	; 0x80
    6cee:	f7ff ffc5 	bl	6c7c <usb_write>
		usb_dev.data_buf += chunk;
    6cf2:	9a01      	ldr	r2, [sp, #4]
    6cf4:	68a3      	ldr	r3, [r4, #8]
    6cf6:	4413      	add	r3, r2
    6cf8:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    6cfa:	68e3      	ldr	r3, [r4, #12]
    6cfc:	1a9b      	subs	r3, r3, r2
    6cfe:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    6d00:	b943      	cbnz	r3, 6d14 <usb_data_to_host+0x38>
    6d02:	b13a      	cbz	r2, 6d14 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    6d04:	6923      	ldr	r3, [r4, #16]
    6d06:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    6d08:	429a      	cmp	r2, r3
    6d0a:	dd03      	ble.n	6d14 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    6d0c:	069b      	lsls	r3, r3, #26
    6d0e:	d101      	bne.n	6d14 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    6d10:	2301      	movs	r3, #1
    6d12:	7523      	strb	r3, [r4, #20]
}
    6d14:	b002      	add	sp, #8
    6d16:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    6d18:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    6d1a:	461a      	mov	r2, r3
    6d1c:	4619      	mov	r1, r3
    6d1e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    6d20:	7523      	strb	r3, [r4, #20]
}
    6d22:	b002      	add	sp, #8
    6d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    6d28:	f016 beea 	b.w	1db00 <usb_dc_ep_write>
    6d2c:	20001e7c 	.word	0x20001e7c

00006d30 <usb_handle_control_transfer>:
{
    6d30:	b570      	push	{r4, r5, r6, lr}
    6d32:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    6d34:	2300      	movs	r3, #0
{
    6d36:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    6d38:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    6d3a:	4606      	mov	r6, r0
    6d3c:	2800      	cmp	r0, #0
    6d3e:	d16f      	bne.n	6e20 <usb_handle_control_transfer+0xf0>
    6d40:	2900      	cmp	r1, #0
    6d42:	d147      	bne.n	6dd4 <usb_handle_control_transfer+0xa4>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    6d44:	2208      	movs	r2, #8
    6d46:	460b      	mov	r3, r1
    6d48:	eb0d 0102 	add.w	r1, sp, r2
    6d4c:	f020 fa1b 	bl	27186 <usb_dc_ep_read>
    6d50:	2800      	cmp	r0, #0
    6d52:	da04      	bge.n	6d5e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    6d54:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    6d56:	f016 fe0d 	bl	1d974 <usb_dc_ep_set_stall>
}
    6d5a:	b00a      	add	sp, #40	; 0x28
    6d5c:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    6d5e:	4c35      	ldr	r4, [pc, #212]	; (6e34 <usb_handle_control_transfer+0x104>)
		setup->bRequest = setup_raw.bRequest;
    6d60:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    6d64:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    6d68:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    6d6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6d6e:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    6d70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    6d74:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    6d76:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    6d78:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    6d7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d80:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    6d82:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    6d84:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    6d88:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    6d8a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    6d8c:	d415      	bmi.n	6dba <usb_handle_control_transfer+0x8a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    6d8e:	2b80      	cmp	r3, #128	; 0x80
    6d90:	d90f      	bls.n	6db2 <usb_handle_control_transfer+0x82>
				LOG_ERR("Request buffer too small");
    6d92:	4b29      	ldr	r3, [pc, #164]	; (6e38 <usb_handle_control_transfer+0x108>)
    6d94:	4829      	ldr	r0, [pc, #164]	; (6e3c <usb_handle_control_transfer+0x10c>)
    6d96:	9308      	str	r3, [sp, #32]
    6d98:	aa07      	add	r2, sp, #28
    6d9a:	2302      	movs	r3, #2
    6d9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6da0:	9301      	str	r3, [sp, #4]
    6da2:	9307      	str	r3, [sp, #28]
    6da4:	f01c fba1 	bl	234ea <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    6da8:	2080      	movs	r0, #128	; 0x80
    6daa:	f016 fde3 	bl	1d974 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    6dae:	4628      	mov	r0, r5
    6db0:	e7d1      	b.n	6d56 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    6db2:	b113      	cbz	r3, 6dba <usb_handle_control_transfer+0x8a>
				usb_dev.data_buf_residue = setup->wLength;
    6db4:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    6db8:	e7cf      	b.n	6d5a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    6dba:	f7ff fca3 	bl	6704 <usb_handle_request.constprop.0>
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d0c8      	beq.n	6d54 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    6dc2:	88e2      	ldrh	r2, [r4, #6]
    6dc4:	6923      	ldr	r3, [r4, #16]
    6dc6:	429a      	cmp	r2, r3
    6dc8:	bfd4      	ite	le
    6dca:	60e2      	strle	r2, [r4, #12]
    6dcc:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    6dce:	f7ff ff85 	bl	6cdc <usb_data_to_host>
    6dd2:	e7c2      	b.n	6d5a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    6dd4:	4c17      	ldr	r4, [pc, #92]	; (6e34 <usb_handle_control_transfer+0x104>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    6dd6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    6dda:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    6ddc:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    6dde:	dc05      	bgt.n	6dec <usb_handle_control_transfer+0xbc>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    6de0:	4602      	mov	r2, r0
    6de2:	f020 f9d0 	bl	27186 <usb_dc_ep_read>
    6de6:	2800      	cmp	r0, #0
    6de8:	dab7      	bge.n	6d5a <usb_handle_control_transfer+0x2a>
    6dea:	e7b3      	b.n	6d54 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    6dec:	f020 f9cb 	bl	27186 <usb_dc_ep_read>
    6df0:	2800      	cmp	r0, #0
    6df2:	da04      	bge.n	6dfe <usb_handle_control_transfer+0xce>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    6df4:	2080      	movs	r0, #128	; 0x80
    6df6:	f016 fdbd 	bl	1d974 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    6dfa:	4630      	mov	r0, r6
    6dfc:	e7ab      	b.n	6d56 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    6dfe:	9900      	ldr	r1, [sp, #0]
    6e00:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    6e02:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    6e04:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    6e06:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    6e08:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    6e0a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d1a4      	bne.n	6d5a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    6e10:	f104 0338 	add.w	r3, r4, #56	; 0x38
    6e14:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    6e16:	f7ff fc75 	bl	6704 <usb_handle_request.constprop.0>
    6e1a:	2800      	cmp	r0, #0
    6e1c:	d1d7      	bne.n	6dce <usb_handle_control_transfer+0x9e>
    6e1e:	e799      	b.n	6d54 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    6e20:	2880      	cmp	r0, #128	; 0x80
    6e22:	d19a      	bne.n	6d5a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    6e24:	4b03      	ldr	r3, [pc, #12]	; (6e34 <usb_handle_control_transfer+0x104>)
    6e26:	68da      	ldr	r2, [r3, #12]
    6e28:	2a00      	cmp	r2, #0
    6e2a:	d1d0      	bne.n	6dce <usb_handle_control_transfer+0x9e>
    6e2c:	7d1b      	ldrb	r3, [r3, #20]
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d1cd      	bne.n	6dce <usb_handle_control_transfer+0x9e>
    6e32:	e792      	b.n	6d5a <usb_handle_control_transfer+0x2a>
    6e34:	20001e7c 	.word	0x20001e7c
    6e38:	0002a71a 	.word	0x0002a71a
    6e3c:	00028a18 	.word	0x00028a18

00006e40 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    6e40:	4b05      	ldr	r3, [pc, #20]	; (6e58 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    6e42:	4a06      	ldr	r2, [pc, #24]	; (6e5c <usb_set_config+0x1c>)
    6e44:	629a      	str	r2, [r3, #40]	; 0x28
    6e46:	4a06      	ldr	r2, [pc, #24]	; (6e60 <usb_set_config+0x20>)
    6e48:	62da      	str	r2, [r3, #44]	; 0x2c
    6e4a:	4a06      	ldr	r2, [pc, #24]	; (6e64 <usb_set_config+0x24>)
    6e4c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    6e4e:	4a06      	ldr	r2, [pc, #24]	; (6e68 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    6e50:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    6e52:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    6e54:	2000      	movs	r0, #0
    6e56:	4770      	bx	lr
    6e58:	20001e7c 	.word	0x20001e7c
    6e5c:	00006929 	.word	0x00006929
    6e60:	000065e1 	.word	0x000065e1
    6e64:	00006681 	.word	0x00006681
    6e68:	00006621 	.word	0x00006621

00006e6c <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    6e6c:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    6e6e:	4b0f      	ldr	r3, [pc, #60]	; (6eac <usb_device_init+0x40>)
    6e70:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    6e74:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    6e76:	b9ac      	cbnz	r4, 6ea4 <usb_device_init+0x38>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    6e78:	f000 f9fe 	bl	7278 <usb_get_device_descriptor>
	if (!device_descriptor) {
    6e7c:	b970      	cbnz	r0, 6e9c <usb_device_init+0x30>
		LOG_ERR("Failed to configure USB device stack");
    6e7e:	4b0c      	ldr	r3, [pc, #48]	; (6eb0 <usb_device_init+0x44>)
    6e80:	480c      	ldr	r0, [pc, #48]	; (6eb4 <usb_device_init+0x48>)
    6e82:	9306      	str	r3, [sp, #24]
    6e84:	aa05      	add	r2, sp, #20
    6e86:	2302      	movs	r3, #2
    6e88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e8c:	9301      	str	r3, [sp, #4]
    6e8e:	9305      	str	r3, [sp, #20]
    6e90:	f01c fb2b 	bl	234ea <z_log_msg2_static_create.constprop.0>
		return -1;
    6e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    6e98:	b008      	add	sp, #32
    6e9a:	bd10      	pop	{r4, pc}
	usb_set_config(device_descriptor);
    6e9c:	f7ff ffd0 	bl	6e40 <usb_set_config>
	return 0;
    6ea0:	4620      	mov	r0, r4
    6ea2:	e7f9      	b.n	6e98 <usb_device_init+0x2c>
		return -EALREADY;
    6ea4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6ea8:	e7f6      	b.n	6e98 <usb_device_init+0x2c>
    6eaa:	bf00      	nop
    6eac:	20001e7c 	.word	0x20001e7c
    6eb0:	0002a733 	.word	0x0002a733
    6eb4:	00028a18 	.word	0x00028a18

00006eb8 <usb_enable>:
{
    6eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ebc:	4604      	mov	r4, r0
    6ebe:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    6ec0:	4d3a      	ldr	r5, [pc, #232]	; (6fac <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    6ec2:	483b      	ldr	r0, [pc, #236]	; (6fb0 <usb_enable+0xf8>)
    6ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ecc:	f01a faa6 	bl	2141c <z_impl_k_mutex_lock>
    6ed0:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    6ed4:	b19e      	cbz	r6, 6efe <usb_enable+0x46>
		LOG_WRN("USB device support already enabled");
    6ed6:	4b37      	ldr	r3, [pc, #220]	; (6fb4 <usb_enable+0xfc>)
    6ed8:	9306      	str	r3, [sp, #24]
    6eda:	4837      	ldr	r0, [pc, #220]	; (6fb8 <usb_enable+0x100>)
    6edc:	2302      	movs	r3, #2
    6ede:	aa05      	add	r2, sp, #20
    6ee0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		ret = -EALREADY;
    6ee4:	f06f 0477 	mvn.w	r4, #119	; 0x77
		LOG_WRN("USB device support already enabled");
    6ee8:	9301      	str	r3, [sp, #4]
    6eea:	9305      	str	r3, [sp, #20]
    6eec:	f01c fafd 	bl	234ea <z_log_msg2_static_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
    6ef0:	482f      	ldr	r0, [pc, #188]	; (6fb0 <usb_enable+0xf8>)
    6ef2:	f01a fb0b 	bl	2150c <z_impl_k_mutex_unlock>
}
    6ef6:	4620      	mov	r0, r4
    6ef8:	b008      	add	sp, #32
    6efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_dev.status_callback = cb;
    6efe:	482f      	ldr	r0, [pc, #188]	; (6fbc <usb_enable+0x104>)
	usb_dev.user_status_callback = status_cb;
    6f00:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    6f02:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    6f04:	f016 ff58 	bl	1ddb8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    6f08:	f016 fc7c 	bl	1d804 <usb_dc_attach>
	if (ret < 0) {
    6f0c:	1e04      	subs	r4, r0, #0
    6f0e:	dbef      	blt.n	6ef0 <usb_enable+0x38>
	ret = usb_transfer_init();
    6f10:	f000 fbb8 	bl	7684 <usb_transfer_init>
	if (ret < 0) {
    6f14:	1e04      	subs	r4, r0, #0
    6f16:	dbeb      	blt.n	6ef0 <usb_enable+0x38>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    6f18:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    6f1a:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    6f1c:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    6f20:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    6f24:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    6f28:	f016 fcf0 	bl	1d90c <usb_dc_ep_configure>
	if (ret < 0) {
    6f2c:	1e04      	subs	r4, r0, #0
    6f2e:	dbdf      	blt.n	6ef0 <usb_enable+0x38>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    6f30:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    6f32:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    6f34:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    6f38:	f016 fce8 	bl	1d90c <usb_dc_ep_configure>
	if (ret < 0) {
    6f3c:	1e04      	subs	r4, r0, #0
    6f3e:	dbd7      	blt.n	6ef0 <usb_enable+0x38>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    6f40:	491f      	ldr	r1, [pc, #124]	; (6fc0 <usb_enable+0x108>)
    6f42:	4630      	mov	r0, r6
    6f44:	f016 ff24 	bl	1dd90 <usb_dc_ep_set_callback>
	if (ret < 0) {
    6f48:	1e04      	subs	r4, r0, #0
    6f4a:	dbd1      	blt.n	6ef0 <usb_enable+0x38>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    6f4c:	491c      	ldr	r1, [pc, #112]	; (6fc0 <usb_enable+0x108>)
    6f4e:	4638      	mov	r0, r7
    6f50:	f016 ff1e 	bl	1dd90 <usb_dc_ep_set_callback>
	if (ret < 0) {
    6f54:	1e04      	subs	r4, r0, #0
    6f56:	dbcb      	blt.n	6ef0 <usb_enable+0x38>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6f58:	4c1a      	ldr	r4, [pc, #104]	; (6fc4 <usb_enable+0x10c>)
    6f5a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6fc8 <usb_enable+0x110>
    6f5e:	4544      	cmp	r4, r8
    6f60:	d30e      	bcc.n	6f80 <usb_enable+0xc8>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    6f62:	2000      	movs	r0, #0
    6f64:	f016 fd7c 	bl	1da60 <usb_dc_ep_enable>
	if (ret < 0) {
    6f68:	1e04      	subs	r4, r0, #0
    6f6a:	dbc1      	blt.n	6ef0 <usb_enable+0x38>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    6f6c:	2080      	movs	r0, #128	; 0x80
    6f6e:	f016 fd77 	bl	1da60 <usb_dc_ep_enable>
	if (ret < 0) {
    6f72:	1e04      	subs	r4, r0, #0
    6f74:	dbbc      	blt.n	6ef0 <usb_enable+0x38>
	usb_dev.enabled = true;
    6f76:	2301      	movs	r3, #1
    6f78:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    6f7c:	2400      	movs	r4, #0
    6f7e:	e7b7      	b.n	6ef0 <usb_enable+0x38>
		ep_data = cfg_data->endpoint;
    6f80:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    6f82:	2600      	movs	r6, #0
    6f84:	7f22      	ldrb	r2, [r4, #28]
    6f86:	b2f3      	uxtb	r3, r6
    6f88:	429a      	cmp	r2, r3
    6f8a:	d801      	bhi.n	6f90 <usb_enable+0xd8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    6f8c:	3424      	adds	r4, #36	; 0x24
    6f8e:	e7e6      	b.n	6f5e <usb_enable+0xa6>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    6f90:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    6f94:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6f98:	7910      	ldrb	r0, [r2, #4]
    6f9a:	f016 fef9 	bl	1dd90 <usb_dc_ep_set_callback>
    6f9e:	3601      	adds	r6, #1
    6fa0:	2800      	cmp	r0, #0
    6fa2:	d0ef      	beq.n	6f84 <usb_enable+0xcc>
    6fa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    6fa8:	e7a2      	b.n	6ef0 <usb_enable+0x38>
    6faa:	bf00      	nop
    6fac:	20001e7c 	.word	0x20001e7c
    6fb0:	200009c0 	.word	0x200009c0
    6fb4:	0002a758 	.word	0x0002a758
    6fb8:	00028a18 	.word	0x00028a18
    6fbc:	000067f5 	.word	0x000067f5
    6fc0:	00006d31 	.word	0x00006d31
    6fc4:	20000c28 	.word	0x20000c28
    6fc8:	20000c4c 	.word	0x20000c4c

00006fcc <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    6fcc:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    6fce:	4b1f      	ldr	r3, [pc, #124]	; (704c <usb_update_sn_string_descriptor+0x80>)
{
    6fd0:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    6fd2:	aa05      	add	r2, sp, #20
    6fd4:	f103 0510 	add.w	r5, r3, #16
    6fd8:	6818      	ldr	r0, [r3, #0]
    6fda:	6859      	ldr	r1, [r3, #4]
    6fdc:	4614      	mov	r4, r2
    6fde:	c403      	stmia	r4!, {r0, r1}
    6fe0:	3308      	adds	r3, #8
    6fe2:	42ab      	cmp	r3, r5
    6fe4:	4622      	mov	r2, r4
    6fe6:	d1f7      	bne.n	6fd8 <usb_update_sn_string_descriptor+0xc>
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    6fec:	2210      	movs	r2, #16
    6fee:	2100      	movs	r1, #0
    6ff0:	a801      	add	r0, sp, #4
    6ff2:	f01d fcdf 	bl	249b4 <memset>
	memset(sn, 0, sizeof(sn));
    6ff6:	2212      	movs	r2, #18
    6ff8:	2100      	movs	r1, #0
    6ffa:	4815      	ldr	r0, [pc, #84]	; (7050 <usb_update_sn_string_descriptor+0x84>)
    6ffc:	f01d fcda 	bl	249b4 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    7000:	2110      	movs	r1, #16
    7002:	a801      	add	r0, sp, #4
    7004:	f020 f9bd 	bl	27382 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    7008:	2800      	cmp	r0, #0
    700a:	dd1b      	ble.n	7044 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    700c:	2808      	cmp	r0, #8
    700e:	bfb8      	it	lt
    7010:	2008      	movlt	r0, #8
    7012:	3808      	subs	r0, #8
    7014:	ab01      	add	r3, sp, #4
    7016:	4a0e      	ldr	r2, [pc, #56]	; (7050 <usb_update_sn_string_descriptor+0x84>)
    7018:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    701a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    701c:	f810 3b01 	ldrb.w	r3, [r0], #1
    7020:	ac0a      	add	r4, sp, #40	; 0x28
    7022:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    7026:	f003 030f 	and.w	r3, r3, #15
    702a:	3328      	adds	r3, #40	; 0x28
    702c:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    702e:	3101      	adds	r1, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    7030:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    7034:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    7038:	7014      	strb	r4, [r2, #0]
		for (int i = 0; i < usblen; i++) {
    703a:	2908      	cmp	r1, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    703c:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    703e:	f102 0202 	add.w	r2, r2, #2
    7042:	d1eb      	bne.n	701c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    7044:	4802      	ldr	r0, [pc, #8]	; (7050 <usb_update_sn_string_descriptor+0x84>)
    7046:	b00b      	add	sp, #44	; 0x2c
    7048:	bd30      	pop	{r4, r5, pc}
    704a:	bf00      	nop
    704c:	0002a786 	.word	0x0002a786
    7050:	20003de8 	.word	0x20003de8

00007054 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    7054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7058:	4604      	mov	r4, r0
    705a:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    705c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    705e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    7062:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    7064:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    7066:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    7068:	7820      	ldrb	r0, [r4, #0]
    706a:	b930      	cbnz	r0, 707a <usb_fix_descriptor+0x26>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    706c:	4b78      	ldr	r3, [pc, #480]	; (7250 <usb_fix_descriptor+0x1fc>)
    706e:	3402      	adds	r4, #2
    7070:	429c      	cmp	r4, r3
    7072:	d1f3      	bne.n	705c <usb_fix_descriptor+0x8>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    7074:	b00b      	add	sp, #44	; 0x2c
    7076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    707a:	7863      	ldrb	r3, [r4, #1]
    707c:	2b05      	cmp	r3, #5
    707e:	d805      	bhi.n	708c <usb_fix_descriptor+0x38>
    7080:	e8df f003 	tbb	[pc, r3]
    7084:	95030495 	.word	0x95030495
    7088:	2607      	.short	0x2607
    708a:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    708c:	7823      	ldrb	r3, [r4, #0]
    708e:	441c      	add	r4, r3
    7090:	e7ea      	b.n	7068 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    7092:	78e3      	ldrb	r3, [r4, #3]
    7094:	2b00      	cmp	r3, #0
    7096:	d1f9      	bne.n	708c <usb_fix_descriptor+0x38>
			if (if_descr->bInterfaceNumber == 0U) {
    7098:	78a3      	ldrb	r3, [r4, #2]
    709a:	b1b3      	cbz	r3, 70ca <usb_fix_descriptor+0x76>
			numof_ifaces++;
    709c:	f10a 0a01 	add.w	sl, sl, #1
    70a0:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    70a4:	e7f2      	b.n	708c <usb_fix_descriptor+0x38>
		if (cfg_data->interface_descriptor == iface) {
    70a6:	686a      	ldr	r2, [r5, #4]
    70a8:	4294      	cmp	r4, r2
    70aa:	f000 80c8 	beq.w	723e <usb_fix_descriptor+0x1ea>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    70ae:	3524      	adds	r5, #36	; 0x24
    70b0:	429d      	cmp	r5, r3
    70b2:	d3f8      	bcc.n	70a6 <usb_fix_descriptor+0x52>
					LOG_ERR("There is no usb_cfg_data "
    70b4:	4b67      	ldr	r3, [pc, #412]	; (7254 <usb_fix_descriptor+0x200>)
    70b6:	e9cd 3408 	strd	r3, r4, [sp, #32]
    70ba:	2303      	movs	r3, #3
    70bc:	9303      	str	r3, [sp, #12]
    70be:	9307      	str	r3, [sp, #28]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    70c0:	2300      	movs	r3, #0
    70c2:	aa07      	add	r2, sp, #28
    70c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    70c8:	e00d      	b.n	70e6 <usb_fix_descriptor+0x92>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    70ca:	4d63      	ldr	r5, [pc, #396]	; (7258 <usb_fix_descriptor+0x204>)
    70cc:	4b63      	ldr	r3, [pc, #396]	; (725c <usb_fix_descriptor+0x208>)
    70ce:	e7ef      	b.n	70b0 <usb_fix_descriptor+0x5c>
			if (!cfg_data) {
    70d0:	2d00      	cmp	r5, #0
    70d2:	d169      	bne.n	71a8 <usb_fix_descriptor+0x154>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    70d4:	4b62      	ldr	r3, [pc, #392]	; (7260 <usb_fix_descriptor+0x20c>)
				LOG_ERR("Failed to validate endpoints");
    70d6:	9308      	str	r3, [sp, #32]
    70d8:	2302      	movs	r3, #2
    70da:	9303      	str	r3, [sp, #12]
    70dc:	9307      	str	r3, [sp, #28]
    70de:	2300      	movs	r3, #0
    70e0:	aa07      	add	r2, sp, #28
    70e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    70e6:	485f      	ldr	r0, [pc, #380]	; (7264 <usb_fix_descriptor+0x210>)
    70e8:	f01c f9c5 	bl	23476 <z_impl_z_log_msg2_static_create>
					return -1;
    70ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70f0:	e7c0      	b.n	7074 <usb_fix_descriptor+0x20>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    70f2:	6a2a      	ldr	r2, [r5, #32]
    70f4:	f894 c002 	ldrb.w	ip, [r4, #2]
    70f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    70fc:	7910      	ldrb	r0, [r2, #4]
    70fe:	4584      	cmp	ip, r0
    7100:	d005      	beq.n	710e <usb_fix_descriptor+0xba>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    7102:	3301      	adds	r3, #1
    7104:	7f2a      	ldrb	r2, [r5, #28]
    7106:	4293      	cmp	r3, r2
    7108:	d3f3      	bcc.n	70f2 <usb_fix_descriptor+0x9e>
				LOG_ERR("Failed to validate endpoints");
    710a:	4b57      	ldr	r3, [pc, #348]	; (7268 <usb_fix_descriptor+0x214>)
    710c:	e7e3      	b.n	70d6 <usb_fix_descriptor+0x82>
    710e:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    7112:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    7114:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    7118:	f000 0003 	and.w	r0, r0, #3
    711c:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    7120:	7920      	ldrb	r0, [r4, #4]
    7122:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    7126:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    712a:	f994 0002 	ldrsb.w	r0, [r4, #2]
    712e:	2800      	cmp	r0, #0
    7130:	fa5f f988 	uxtb.w	r9, r8
    7134:	da2a      	bge.n	718c <usb_fix_descriptor+0x138>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    7136:	f108 0010 	add.w	r0, r8, #16
    713a:	fa01 f000 	lsl.w	r0, r1, r0
    713e:	ea10 0f0b 	tst.w	r0, fp
    7142:	d12b      	bne.n	719c <usb_fix_descriptor+0x148>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    7144:	f069 007f 	orn	r0, r9, #127	; 0x7f
    7148:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    714c:	a804      	add	r0, sp, #16
    714e:	e9cd 3200 	strd	r3, r2, [sp]
    7152:	f016 fba7 	bl	1d8a4 <usb_dc_ep_check_cap>
    7156:	e9dd 3200 	ldrd	r3, r2, [sp]
    715a:	2101      	movs	r1, #1
    715c:	b9f0      	cbnz	r0, 719c <usb_fix_descriptor+0x148>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    715e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7162:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    7164:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    7168:	bf1c      	itt	ne
    716a:	f109 0910 	addne.w	r9, r9, #16
    716e:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    7172:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    7174:	bf18      	it	ne
    7176:	fa01 f909 	lslne.w	r9, r1, r9
    717a:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    717c:	bf0a      	itet	eq
    717e:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    7182:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    7186:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    718a:	e77f      	b.n	708c <usb_fix_descriptor+0x38>
				if ((*requested_ep & (1U << (idx)))) {
    718c:	fa01 f008 	lsl.w	r0, r1, r8
    7190:	ea10 0f0b 	tst.w	r0, fp
    7194:	d102      	bne.n	719c <usb_fix_descriptor+0x148>
				ep_cfg.ep_addr = idx;
    7196:	f88d 9010 	strb.w	r9, [sp, #16]
    719a:	e7d7      	b.n	714c <usb_fix_descriptor+0xf8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    719c:	f108 0801 	add.w	r8, r8, #1
    71a0:	f1b8 0f10 	cmp.w	r8, #16
    71a4:	d1b5      	bne.n	7112 <usb_fix_descriptor+0xbe>
    71a6:	e7ac      	b.n	7102 <usb_fix_descriptor+0xae>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    71a8:	2300      	movs	r3, #0
    71aa:	2101      	movs	r1, #1
    71ac:	e7aa      	b.n	7104 <usb_fix_descriptor+0xb0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    71ae:	2e03      	cmp	r6, #3
    71b0:	d12a      	bne.n	7208 <usb_fix_descriptor+0x1b4>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    71b2:	f7ff ff0b 	bl	6fcc <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    71b6:	4680      	mov	r8, r0
    71b8:	b1a0      	cbz	r0, 71e4 <usb_fix_descriptor+0x190>
	runtime_sn_len = strlen(runtime_sn);
    71ba:	f01d fbc3 	bl	24944 <strlen>
	if (!runtime_sn_len) {
    71be:	4681      	mov	r9, r0
    71c0:	b180      	cbz	r0, 71e4 <usb_fix_descriptor+0x190>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    71c2:	482a      	ldr	r0, [pc, #168]	; (726c <usb_fix_descriptor+0x218>)
    71c4:	f01d fbbe 	bl	24944 <strlen>
	if (runtime_sn_len != default_sn_len) {
    71c8:	4581      	cmp	r9, r0
    71ca:	d017      	beq.n	71fc <usb_fix_descriptor+0x1a8>
		LOG_ERR("the new SN descriptor doesn't have the same "
    71cc:	4b28      	ldr	r3, [pc, #160]	; (7270 <usb_fix_descriptor+0x21c>)
    71ce:	9308      	str	r3, [sp, #32]
    71d0:	2302      	movs	r3, #2
    71d2:	9303      	str	r3, [sp, #12]
    71d4:	9307      	str	r3, [sp, #28]
    71d6:	4823      	ldr	r0, [pc, #140]	; (7264 <usb_fix_descriptor+0x210>)
    71d8:	2300      	movs	r3, #0
    71da:	aa07      	add	r2, sp, #28
    71dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    71e0:	f01c f949 	bl	23476 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    71e4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    71e6:	f06f 0102 	mvn.w	r1, #2
    71ea:	18e2      	adds	r2, r4, r3
    71ec:	1b09      	subs	r1, r1, r4
    71ee:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    71f2:	42d1      	cmn	r1, r2
    71f4:	d512      	bpl.n	721c <usb_fix_descriptor+0x1c8>
			str_descr_idx += 1U;
    71f6:	3601      	adds	r6, #1
    71f8:	b2f6      	uxtb	r6, r6
			break;
    71fa:	e747      	b.n	708c <usb_fix_descriptor+0x38>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    71fc:	464a      	mov	r2, r9
    71fe:	4641      	mov	r1, r8
    7200:	1ca0      	adds	r0, r4, #2
    7202:	f01d fbcc 	bl	2499e <memcpy>
    7206:	e7ed      	b.n	71e4 <usb_fix_descriptor+0x190>
			if (str_descr_idx) {
    7208:	2e00      	cmp	r6, #0
    720a:	d1eb      	bne.n	71e4 <usb_fix_descriptor+0x190>
				if (!cfg_descr) {
    720c:	b97f      	cbnz	r7, 722e <usb_fix_descriptor+0x1da>
					LOG_ERR("Incomplete device descriptor");
    720e:	4b19      	ldr	r3, [pc, #100]	; (7274 <usb_fix_descriptor+0x220>)
    7210:	9308      	str	r3, [sp, #32]
    7212:	2302      	movs	r3, #2
    7214:	9303      	str	r3, [sp, #12]
    7216:	9307      	str	r3, [sp, #28]
    7218:	463b      	mov	r3, r7
    721a:	e761      	b.n	70e0 <usb_fix_descriptor+0x8c>
		buf[i] = 0U;
    721c:	f04f 0000 	mov.w	r0, #0
    7220:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    7224:	f813 0901 	ldrb.w	r0, [r3], #-1
    7228:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    722c:	e7e1      	b.n	71f2 <usb_fix_descriptor+0x19e>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    722e:	1be3      	subs	r3, r4, r7
	dst[0] = val;
    7230:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    7232:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7236:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    7238:	f887 a004 	strb.w	sl, [r7, #4]
    723c:	e7db      	b.n	71f6 <usb_fix_descriptor+0x1a2>
				if (cfg_data->interface_config) {
    723e:	68ab      	ldr	r3, [r5, #8]
    7240:	2b00      	cmp	r3, #0
    7242:	f43f af2b 	beq.w	709c <usb_fix_descriptor+0x48>
					cfg_data->interface_config(head,
    7246:	4651      	mov	r1, sl
    7248:	4620      	mov	r0, r4
    724a:	4798      	blx	r3
    724c:	e726      	b.n	709c <usb_fix_descriptor+0x48>
    724e:	bf00      	nop
    7250:	20000c27 	.word	0x20000c27
    7254:	0002a85d 	.word	0x0002a85d
    7258:	20000c28 	.word	0x20000c28
    725c:	20000c4c 	.word	0x20000c4c
    7260:	0002a797 	.word	0x0002a797
    7264:	00028a10 	.word	0x00028a10
    7268:	0002a7d8 	.word	0x0002a7d8
    726c:	0002a786 	.word	0x0002a786
    7270:	0002a7f5 	.word	0x0002a7f5
    7274:	0002a840 	.word	0x0002a840

00007278 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    7278:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    727a:	480b      	ldr	r0, [pc, #44]	; (72a8 <usb_get_device_descriptor+0x30>)
{
    727c:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    727e:	f7ff fee9 	bl	7054 <usb_fix_descriptor>
    7282:	b178      	cbz	r0, 72a4 <usb_get_device_descriptor+0x2c>
		LOG_ERR("Failed to fixup USB descriptor");
    7284:	4b09      	ldr	r3, [pc, #36]	; (72ac <usb_get_device_descriptor+0x34>)
    7286:	9306      	str	r3, [sp, #24]
    7288:	2302      	movs	r3, #2
    728a:	9301      	str	r3, [sp, #4]
    728c:	9305      	str	r3, [sp, #20]
    728e:	4808      	ldr	r0, [pc, #32]	; (72b0 <usb_get_device_descriptor+0x38>)
    7290:	2300      	movs	r3, #0
    7292:	aa05      	add	r2, sp, #20
    7294:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7298:	f01c f8ed 	bl	23476 <z_impl_z_log_msg2_static_create>
		return NULL;
    729c:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    729e:	b009      	add	sp, #36	; 0x24
    72a0:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    72a4:	4800      	ldr	r0, [pc, #0]	; (72a8 <usb_get_device_descriptor+0x30>)
    72a6:	e7fa      	b.n	729e <usb_get_device_descriptor+0x26>
    72a8:	20000b84 	.word	0x20000b84
    72ac:	0002a87d 	.word	0x0002a87d
    72b0:	00028a10 	.word	0x00028a10

000072b4 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    72b4:	b510      	push	{r4, lr}
    72b6:	4b09      	ldr	r3, [pc, #36]	; (72dc <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    72b8:	2100      	movs	r1, #0
    72ba:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    72bc:	781c      	ldrb	r4, [r3, #0]
    72be:	4284      	cmp	r4, r0
    72c0:	d105      	bne.n	72ce <usb_ep_get_transfer+0x1a>
    72c2:	685c      	ldr	r4, [r3, #4]
    72c4:	b11c      	cbz	r4, 72ce <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    72c6:	2048      	movs	r0, #72	; 0x48
    72c8:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    72cc:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    72ce:	3101      	adds	r1, #1
    72d0:	2904      	cmp	r1, #4
    72d2:	f103 0348 	add.w	r3, r3, #72	; 0x48
    72d6:	d1f1      	bne.n	72bc <usb_ep_get_transfer+0x8>
	return NULL;
    72d8:	2000      	movs	r0, #0
    72da:	e7f7      	b.n	72cc <usb_ep_get_transfer+0x18>
    72dc:	20001f40 	.word	0x20001f40

000072e0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    72e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    72e4:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    72e6:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    72ea:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    72ee:	3310      	adds	r3, #16
{
    72f0:	af00      	add	r7, sp, #0
    72f2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    72f4:	d111      	bne.n	731a <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    72f6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    72f8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    72fc:	f013 0602 	ands.w	r6, r3, #2
    7300:	d04f      	beq.n	73a2 <usb_transfer_work+0xc2>
		if (!trans->bsize) {
    7302:	bb0a      	cbnz	r2, 7348 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    7304:	f013 0304 	ands.w	r3, r3, #4
    7308:	d104      	bne.n	7314 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    730a:	461a      	mov	r2, r3
    730c:	4619      	mov	r1, r3
    730e:	4628      	mov	r0, r5
    7310:	f7ff fcb4 	bl	6c7c <usb_write>
			}
			trans->status = 0;
    7314:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    7316:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    731a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    731e:	3310      	adds	r3, #16
    7320:	d00e      	beq.n	7340 <usb_transfer_work+0x60>
    7322:	f854 6c20 	ldr.w	r6, [r4, #-32]
    7326:	b15e      	cbz	r6, 7340 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    7328:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    732c:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    7330:	f020 fc33 	bl	27b9a <k_is_in_isr>
    7334:	2800      	cmp	r0, #0
    7336:	d072      	beq.n	741e <usb_transfer_work+0x13e>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    7338:	4840      	ldr	r0, [pc, #256]	; (743c <usb_transfer_work+0x15c>)
    733a:	4621      	mov	r1, r4
    733c:	f020 fda6 	bl	27e8c <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    7340:	370c      	adds	r7, #12
    7342:	46bd      	mov	sp, r7
    7344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    7348:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    734c:	463b      	mov	r3, r7
    734e:	4628      	mov	r0, r5
    7350:	f7ff fc94 	bl	6c7c <usb_write>
		if (ret) {
    7354:	b1a0      	cbz	r0, 7380 <usb_transfer_work+0xa0>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    7356:	4b3a      	ldr	r3, [pc, #232]	; (7440 <usb_transfer_work+0x160>)
    7358:	466e      	mov	r6, sp
    735a:	b088      	sub	sp, #32
    735c:	466a      	mov	r2, sp
    735e:	e9c2 3004 	strd	r3, r0, [r2, #16]
    7362:	2304      	movs	r3, #4
    7364:	6195      	str	r5, [r2, #24]
    7366:	607b      	str	r3, [r7, #4]
    7368:	f842 3f0c 	str.w	r3, [r2, #12]!
    736c:	4835      	ldr	r0, [pc, #212]	; (7444 <usb_transfer_work+0x164>)
    736e:	2300      	movs	r3, #0
    7370:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7374:	f01c f87f 	bl	23476 <z_impl_z_log_msg2_static_create>
    7378:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    737a:	f06f 0315 	mvn.w	r3, #21
    737e:	e7ca      	b.n	7316 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    7380:	683a      	ldr	r2, [r7, #0]
    7382:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    7386:	4413      	add	r3, r2
    7388:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    738c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    7390:	1a9b      	subs	r3, r3, r2
    7392:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    7396:	f854 3c24 	ldr.w	r3, [r4, #-36]
    739a:	4413      	add	r3, r2
    739c:	f844 3c24 	str.w	r3, [r4, #-36]
    73a0:	e7bb      	b.n	731a <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    73a2:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    73a6:	463b      	mov	r3, r7
    73a8:	4628      	mov	r0, r5
    73aa:	f016 fc3d 	bl	1dc28 <usb_dc_ep_read_wait>
		if (ret) {
    73ae:	b190      	cbz	r0, 73d6 <usb_transfer_work+0xf6>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    73b0:	4b23      	ldr	r3, [pc, #140]	; (7440 <usb_transfer_work+0x160>)
    73b2:	46e8      	mov	r8, sp
    73b4:	b088      	sub	sp, #32
    73b6:	466a      	mov	r2, sp
    73b8:	e9c2 3004 	strd	r3, r0, [r2, #16]
    73bc:	2304      	movs	r3, #4
    73be:	6195      	str	r5, [r2, #24]
    73c0:	607b      	str	r3, [r7, #4]
    73c2:	f842 3f0c 	str.w	r3, [r2, #12]!
    73c6:	481f      	ldr	r0, [pc, #124]	; (7444 <usb_transfer_work+0x164>)
    73c8:	4633      	mov	r3, r6
    73ca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    73ce:	f01c f852 	bl	23476 <z_impl_z_log_msg2_static_create>
    73d2:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    73d4:	e7d1      	b.n	737a <usb_transfer_work+0x9a>
		trans->buffer += bytes;
    73d6:	683e      	ldr	r6, [r7, #0]
    73d8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    73dc:	4433      	add	r3, r6
    73de:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    73e2:	f854 3c28 	ldr.w	r3, [r4, #-40]
    73e6:	1b9b      	subs	r3, r3, r6
    73e8:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    73ec:	f854 3c24 	ldr.w	r3, [r4, #-36]
    73f0:	4433      	add	r3, r6
    73f2:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    73f6:	2e00      	cmp	r6, #0
    73f8:	d08c      	beq.n	7314 <usb_transfer_work+0x34>
    73fa:	4628      	mov	r0, r5
    73fc:	f016 fce2 	bl	1ddc4 <usb_dc_ep_mps>
    7400:	fbb6 f3f0 	udiv	r3, r6, r0
    7404:	fb03 6610 	mls	r6, r3, r0, r6
    7408:	2e00      	cmp	r6, #0
    740a:	d183      	bne.n	7314 <usb_transfer_work+0x34>
    740c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    7410:	2b00      	cmp	r3, #0
    7412:	f43f af7f 	beq.w	7314 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    7416:	4628      	mov	r0, r5
    7418:	f016 fc64 	bl	1dce4 <usb_dc_ep_read_continue>
    741c:	e77d      	b.n	731a <usb_transfer_work+0x3a>
		trans->cb = NULL;
    741e:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    7422:	f1a4 0018 	sub.w	r0, r4, #24
    7426:	f01a f8e7 	bl	215f8 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    742a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    742e:	338c      	adds	r3, #140	; 0x8c
    7430:	d086      	beq.n	7340 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    7432:	464a      	mov	r2, r9
    7434:	4641      	mov	r1, r8
    7436:	4628      	mov	r0, r5
    7438:	47b0      	blx	r6
    743a:	e781      	b.n	7340 <usb_transfer_work+0x60>
    743c:	20001288 	.word	0x20001288
    7440:	0002a8ab 	.word	0x0002a8ab
    7444:	00028a28 	.word	0x00028a28

00007448 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    7448:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    744a:	1e4b      	subs	r3, r1, #1
    744c:	2b01      	cmp	r3, #1
{
    744e:	b088      	sub	sp, #32
    7450:	4606      	mov	r6, r0
    7452:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    7454:	d819      	bhi.n	748a <usb_transfer_ep_callback+0x42>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    7456:	f7ff ff2d 	bl	72b4 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    745a:	4604      	mov	r4, r0
    745c:	b9b8      	cbnz	r0, 748e <usb_transfer_ep_callback+0x46>
		if (status == USB_DC_EP_DATA_OUT) {
    745e:	2d01      	cmp	r5, #1
    7460:	d113      	bne.n	748a <usb_transfer_ep_callback+0x42>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    7462:	466b      	mov	r3, sp
    7464:	2201      	movs	r2, #1
    7466:	a902      	add	r1, sp, #8
    7468:	4630      	mov	r0, r6
    746a:	f016 fbdd 	bl	1dc28 <usb_dc_ep_read_wait>
			} while (bytes);
    746e:	9b00      	ldr	r3, [sp, #0]
    7470:	2b00      	cmp	r3, #0
    7472:	d1f6      	bne.n	7462 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    7474:	4a0f      	ldr	r2, [pc, #60]	; (74b4 <usb_transfer_ep_callback+0x6c>)
    7476:	9206      	str	r2, [sp, #24]
    7478:	2202      	movs	r2, #2
    747a:	9201      	str	r2, [sp, #4]
    747c:	9205      	str	r2, [sp, #20]
    747e:	480e      	ldr	r0, [pc, #56]	; (74b8 <usb_transfer_ep_callback+0x70>)
    7480:	aa05      	add	r2, sp, #20
    7482:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7486:	f01b fff6 	bl	23476 <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    748a:	b008      	add	sp, #32
    748c:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    748e:	f020 fb84 	bl	27b9a <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    7492:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    7496:	b108      	cbz	r0, 749c <usb_transfer_ep_callback+0x54>
    7498:	2d01      	cmp	r5, #1
    749a:	d105      	bne.n	74a8 <usb_transfer_ep_callback+0x60>
		usb_transfer_work(&trans->work);
    749c:	4608      	mov	r0, r1
}
    749e:	b008      	add	sp, #32
    74a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    74a4:	f7ff bf1c 	b.w	72e0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    74a8:	4804      	ldr	r0, [pc, #16]	; (74bc <usb_transfer_ep_callback+0x74>)
}
    74aa:	b008      	add	sp, #32
    74ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    74b0:	f020 bcec 	b.w	27e8c <k_work_submit_to_queue>
    74b4:	0002a8c8 	.word	0x0002a8c8
    74b8:	00028a28 	.word	0x00028a28
    74bc:	20001288 	.word	0x20001288

000074c0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    74c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74c4:	b08b      	sub	sp, #44	; 0x2c
    74c6:	4605      	mov	r5, r0
    74c8:	9100      	str	r1, [sp, #0]
    74ca:	4616      	mov	r6, r2
    74cc:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    74ce:	f01c f83f 	bl	23550 <usb_transfer_is_busy>
    74d2:	4604      	mov	r4, r0
    74d4:	2800      	cmp	r0, #0
    74d6:	d17f      	bne.n	75d8 <usb_transfer+0x118>
	__asm__ volatile(
    74d8:	f04f 0320 	mov.w	r3, #32
    74dc:	f3ef 8211 	mrs	r2, BASEPRI
    74e0:	f383 8812 	msr	BASEPRI_MAX, r3
    74e4:	f3bf 8f6f 	isb	sy
    74e8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 75e0 <usb_transfer+0x120>
    74ec:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    74ee:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    74f2:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    74f6:	2300      	movs	r3, #0
    74f8:	2200      	movs	r2, #0
    74fa:	4648      	mov	r0, r9
    74fc:	f01a f8a2 	bl	21644 <z_impl_k_sem_take>
    7500:	4603      	mov	r3, r0
    7502:	bb00      	cbnz	r0, 7546 <usb_transfer+0x86>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    7504:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 75e4 <usb_transfer+0x124>
    7508:	eb0a 0b07 	add.w	fp, sl, r7
    750c:	f8db 4004 	ldr.w	r4, [fp, #4]
    7510:	f114 0f10 	cmn.w	r4, #16
    7514:	d12b      	bne.n	756e <usb_transfer+0xae>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    7516:	4a34      	ldr	r2, [pc, #208]	; (75e8 <usb_transfer+0x128>)
    7518:	e9cd 2508 	strd	r2, r5, [sp, #32]
    751c:	2203      	movs	r2, #3
    751e:	9203      	str	r2, [sp, #12]
    7520:	9207      	str	r2, [sp, #28]
    7522:	4832      	ldr	r0, [pc, #200]	; (75ec <usb_transfer+0x12c>)
    7524:	aa07      	add	r2, sp, #28
    7526:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    752a:	f01b ffa4 	bl	23476 <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    752e:	4648      	mov	r0, r9
    7530:	f01a f862 	bl	215f8 <z_impl_k_sem_give>
	__asm__ volatile(
    7534:	9b01      	ldr	r3, [sp, #4]
    7536:	f383 8811 	msr	BASEPRI, r3
    753a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    753e:	4620      	mov	r0, r4
    7540:	b00b      	add	sp, #44	; 0x2c
    7542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    7546:	3401      	adds	r4, #1
    7548:	2c04      	cmp	r4, #4
    754a:	f109 0948 	add.w	r9, r9, #72	; 0x48
    754e:	d1d0      	bne.n	74f2 <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
    7550:	4b27      	ldr	r3, [pc, #156]	; (75f0 <usb_transfer+0x130>)
    7552:	9308      	str	r3, [sp, #32]
    7554:	2302      	movs	r3, #2
    7556:	9303      	str	r3, [sp, #12]
    7558:	9307      	str	r3, [sp, #28]
    755a:	4824      	ldr	r0, [pc, #144]	; (75ec <usb_transfer+0x12c>)
    755c:	2300      	movs	r3, #0
    755e:	aa07      	add	r2, sp, #28
    7560:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7564:	f01b ff87 	bl	23476 <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    7568:	f06f 040b 	mvn.w	r4, #11
		goto done;
    756c:	e7e2      	b.n	7534 <usb_transfer+0x74>
	trans->cb = cb;
    756e:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    7570:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    7572:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    7576:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7578:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    757c:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    7580:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    7584:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    7588:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    758c:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    7590:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    7594:	4628      	mov	r0, r5
    7596:	f016 fc15 	bl	1ddc4 <usb_dc_ep_mps>
    759a:	b168      	cbz	r0, 75b8 <usb_transfer+0xf8>
    759c:	4628      	mov	r0, r5
    759e:	f016 fc11 	bl	1ddc4 <usb_dc_ep_mps>
    75a2:	fbb6 f3f0 	udiv	r3, r6, r0
    75a6:	fb03 6610 	mls	r6, r3, r0, r6
    75aa:	b12e      	cbz	r6, 75b8 <usb_transfer+0xf8>
		trans->flags |= USB_TRANS_NO_ZLP;
    75ac:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    75b0:	f043 0304 	orr.w	r3, r3, #4
    75b4:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    75b8:	f018 0f02 	tst.w	r8, #2
    75bc:	d007      	beq.n	75ce <usb_transfer+0x10e>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    75be:	3734      	adds	r7, #52	; 0x34
    75c0:	480c      	ldr	r0, [pc, #48]	; (75f4 <usb_transfer+0x134>)
    75c2:	eb0a 0107 	add.w	r1, sl, r7
    75c6:	f020 fc61 	bl	27e8c <k_work_submit_to_queue>
	int i, key, ret = 0;
    75ca:	2400      	movs	r4, #0
    75cc:	e7b2      	b.n	7534 <usb_transfer+0x74>
		ret = usb_dc_ep_read_continue(ep);
    75ce:	4628      	mov	r0, r5
    75d0:	f016 fb88 	bl	1dce4 <usb_dc_ep_read_continue>
    75d4:	4604      	mov	r4, r0
    75d6:	e7ad      	b.n	7534 <usb_transfer+0x74>
		return -EBUSY;
    75d8:	f06f 040f 	mvn.w	r4, #15
    75dc:	e7af      	b.n	753e <usb_transfer+0x7e>
    75de:	bf00      	nop
    75e0:	20001f5c 	.word	0x20001f5c
    75e4:	20001f40 	.word	0x20001f40
    75e8:	0002a8e2 	.word	0x0002a8e2
    75ec:	00028a28 	.word	0x00028a28
    75f0:	0002a90b 	.word	0x0002a90b
    75f4:	20001288 	.word	0x20001288

000075f8 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    75f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    75fa:	f04f 0320 	mov.w	r3, #32
    75fe:	f3ef 8411 	mrs	r4, BASEPRI
    7602:	f383 8812 	msr	BASEPRI_MAX, r3
    7606:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    760a:	f7ff fe53 	bl	72b4 <usb_ep_get_transfer>
	if (!trans) {
    760e:	b150      	cbz	r0, 7626 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    7610:	6843      	ldr	r3, [r0, #4]
    7612:	3310      	adds	r3, #16
    7614:	d107      	bne.n	7626 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    7616:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    761a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    761c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7620:	4803      	ldr	r0, [pc, #12]	; (7630 <usb_cancel_transfer+0x38>)
    7622:	f020 fc33 	bl	27e8c <k_work_submit_to_queue>
	__asm__ volatile(
    7626:	f384 8811 	msr	BASEPRI, r4
    762a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    762e:	bd10      	pop	{r4, pc}
    7630:	20001288 	.word	0x20001288

00007634 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    7634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7638:	4c10      	ldr	r4, [pc, #64]	; (767c <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    763a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 7680 <usb_cancel_transfers+0x4c>
{
    763e:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    7640:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    7644:	f04f 0320 	mov.w	r3, #32
    7648:	f3ef 8611 	mrs	r6, BASEPRI
    764c:	f383 8812 	msr	BASEPRI_MAX, r3
    7650:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    7654:	6863      	ldr	r3, [r4, #4]
    7656:	3310      	adds	r3, #16
    7658:	d105      	bne.n	7666 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    765a:	f104 0134 	add.w	r1, r4, #52	; 0x34
    765e:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    7660:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    7662:	f020 fc13 	bl	27e8c <k_work_submit_to_queue>
	__asm__ volatile(
    7666:	f386 8811 	msr	BASEPRI, r6
    766a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    766e:	3d01      	subs	r5, #1
    7670:	f104 0448 	add.w	r4, r4, #72	; 0x48
    7674:	d1e6      	bne.n	7644 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    7676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    767a:	bf00      	nop
    767c:	20001f40 	.word	0x20001f40
    7680:	20001288 	.word	0x20001288

00007684 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    7684:	b570      	push	{r4, r5, r6, lr}
    7686:	4c0a      	ldr	r4, [pc, #40]	; (76b0 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    7688:	4e0a      	ldr	r6, [pc, #40]	; (76b4 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    768a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    768c:	4631      	mov	r1, r6
    768e:	4620      	mov	r0, r4
    7690:	f020 fbf3 	bl	27e7a <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7694:	2201      	movs	r2, #1
    7696:	f1a4 0018 	sub.w	r0, r4, #24
    769a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    769c:	3501      	adds	r5, #1
    769e:	f020 fb6c 	bl	27d7a <z_impl_k_sem_init>
    76a2:	2d04      	cmp	r5, #4
    76a4:	f104 0448 	add.w	r4, r4, #72	; 0x48
    76a8:	d1f0      	bne.n	768c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    76aa:	2000      	movs	r0, #0
    76ac:	bd70      	pop	{r4, r5, r6, pc}
    76ae:	bf00      	nop
    76b0:	20001f74 	.word	0x20001f74
    76b4:	000072e1 	.word	0x000072e1

000076b8 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    76b8:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    76ba:	2301      	movs	r3, #1
    76bc:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    76c0:	680b      	ldr	r3, [r1, #0]
    76c2:	b133      	cbz	r3, 76d2 <cdc_acm_irq_rx_enable+0x1a>
    76c4:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    76c8:	b11b      	cbz	r3, 76d2 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    76ca:	4802      	ldr	r0, [pc, #8]	; (76d4 <cdc_acm_irq_rx_enable+0x1c>)
    76cc:	3108      	adds	r1, #8
    76ce:	f020 bbdd 	b.w	27e8c <k_work_submit_to_queue>
	}
}
    76d2:	4770      	bx	lr
    76d4:	20001288 	.word	0x20001288

000076d8 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    76d8:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    76da:	2301      	movs	r3, #1
    76dc:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    76e0:	680b      	ldr	r3, [r1, #0]
    76e2:	b133      	cbz	r3, 76f2 <cdc_acm_irq_tx_enable+0x1a>
    76e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    76e8:	b11b      	cbz	r3, 76f2 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    76ea:	4802      	ldr	r0, [pc, #8]	; (76f4 <cdc_acm_irq_tx_enable+0x1c>)
    76ec:	3108      	adds	r1, #8
    76ee:	f020 bbcd 	b.w	27e8c <k_work_submit_to_queue>
}
    76f2:	4770      	bx	lr
    76f4:	20001288 	.word	0x20001288

000076f8 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    76f8:	4a0b      	ldr	r2, [pc, #44]	; (7728 <cdc_acm_reset_port+0x30>)
{
    76fa:	4603      	mov	r3, r0
	dev_data->configured = false;
    76fc:	2100      	movs	r1, #0
    76fe:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    7702:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    7704:	6810      	ldr	r0, [r2, #0]
    7706:	6758      	str	r0, [r3, #116]	; 0x74
    7708:	8890      	ldrh	r0, [r2, #4]
    770a:	7992      	ldrb	r2, [r2, #6]
    770c:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    7710:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    7714:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    7718:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    771c:	2240      	movs	r2, #64	; 0x40
    771e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7722:	f01d b947 	b.w	249b4 <memset>
    7726:	bf00      	nop
    7728:	00028ac7 	.word	0x00028ac7

0000772c <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    772c:	2301      	movs	r3, #1
    772e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    7732:	6813      	ldr	r3, [r2, #0]
{
    7734:	b510      	push	{r4, lr}
    7736:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    7738:	b13b      	cbz	r3, 774a <cdc_acm_write_cb+0x1e>
    773a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    773e:	b123      	cbz	r3, 774a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    7740:	4808      	ldr	r0, [pc, #32]	; (7764 <cdc_acm_write_cb+0x38>)
    7742:	f102 0108 	add.w	r1, r2, #8
    7746:	f020 fba1 	bl	27e8c <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    774a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    774c:	f01b fb58 	bl	22e00 <ring_buf_is_empty>
    7750:	b930      	cbnz	r0, 7760 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    7752:	f104 0118 	add.w	r1, r4, #24
    7756:	4803      	ldr	r0, [pc, #12]	; (7764 <cdc_acm_write_cb+0x38>)
}
    7758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    775c:	f020 bb96 	b.w	27e8c <k_work_submit_to_queue>
}
    7760:	bd10      	pop	{r4, pc}
    7762:	bf00      	nop
    7764:	20001288 	.word	0x20001288

00007768 <tx_work_handler>:
{
    7768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    776a:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    776c:	685b      	ldr	r3, [r3, #4]
    776e:	6a1b      	ldr	r3, [r3, #32]
    7770:	7d1e      	ldrb	r6, [r3, #20]
{
    7772:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    7774:	4630      	mov	r0, r6
    7776:	f01b feeb 	bl	23550 <usb_transfer_is_busy>
    777a:	b9d0      	cbnz	r0, 77b2 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    777c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    777e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7782:	a903      	add	r1, sp, #12
    7784:	f01b fbb5 	bl	22ef2 <ring_buf_get_claim>
	if (!len) {
    7788:	4604      	mov	r4, r0
    778a:	b190      	cbz	r0, 77b2 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    778c:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    778e:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    7792:	bf08      	it	eq
    7794:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    7798:	9301      	str	r3, [sp, #4]
    779a:	4b07      	ldr	r3, [pc, #28]	; (77b8 <tx_work_handler+0x50>)
    779c:	9903      	ldr	r1, [sp, #12]
    779e:	9300      	str	r3, [sp, #0]
    77a0:	4622      	mov	r2, r4
    77a2:	2302      	movs	r3, #2
    77a4:	4630      	mov	r0, r6
    77a6:	f7ff fe8b 	bl	74c0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    77aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
    77ac:	4621      	mov	r1, r4
    77ae:	f01b fbcb 	bl	22f48 <ring_buf_get_finish>
}
    77b2:	b004      	add	sp, #16
    77b4:	bd70      	pop	{r4, r5, r6, pc}
    77b6:	bf00      	nop
    77b8:	0000772d 	.word	0x0000772d

000077bc <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    77bc:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    77be:	6904      	ldr	r4, [r0, #16]
{
    77c0:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    77c2:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    77c6:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    77ca:	b113      	cbz	r3, 77d2 <cdc_acm_poll_out+0x16>
    77cc:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    77d0:	b163      	cbz	r3, 77ec <cdc_acm_poll_out+0x30>
		LOG_INF("USB device not ready, drop data");
    77d2:	4b1f      	ldr	r3, [pc, #124]	; (7850 <cdc_acm_poll_out+0x94>)
    77d4:	9308      	str	r3, [sp, #32]
    77d6:	2302      	movs	r3, #2
    77d8:	9303      	str	r3, [sp, #12]
    77da:	9307      	str	r3, [sp, #28]
    77dc:	aa07      	add	r2, sp, #28
    77de:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    77e2:	481c      	ldr	r0, [pc, #112]	; (7854 <cdc_acm_poll_out+0x98>)
    77e4:	f01b ff27 	bl	23636 <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    77e8:	b00b      	add	sp, #44	; 0x2c
    77ea:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    77ec:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    77ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    77f2:	2201      	movs	r2, #1
    77f4:	f10d 0107 	add.w	r1, sp, #7
    77f8:	f01b fb5c 	bl	22eb4 <ring_buf_put>
    77fc:	4605      	mov	r5, r0
    77fe:	bb08      	cbnz	r0, 7844 <cdc_acm_poll_out+0x88>
		LOG_INF("Ring buffer full, drain buffer");
    7800:	4b15      	ldr	r3, [pc, #84]	; (7858 <cdc_acm_poll_out+0x9c>)
    7802:	4814      	ldr	r0, [pc, #80]	; (7854 <cdc_acm_poll_out+0x98>)
    7804:	9308      	str	r3, [sp, #32]
    7806:	aa07      	add	r2, sp, #28
    7808:	2302      	movs	r3, #2
    780a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    780e:	9303      	str	r3, [sp, #12]
    7810:	9307      	str	r3, [sp, #28]
    7812:	f01b ff10 	bl	23636 <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    7816:	2201      	movs	r2, #1
    7818:	6f20      	ldr	r0, [r4, #112]	; 0x70
    781a:	4629      	mov	r1, r5
    781c:	f01b fbb2 	bl	22f84 <ring_buf_get>
    7820:	b940      	cbnz	r0, 7834 <cdc_acm_poll_out+0x78>
			LOG_ERR("Failed to drain buffer");
    7822:	4b0e      	ldr	r3, [pc, #56]	; (785c <cdc_acm_poll_out+0xa0>)
    7824:	9308      	str	r3, [sp, #32]
    7826:	2302      	movs	r3, #2
    7828:	9303      	str	r3, [sp, #12]
    782a:	9307      	str	r3, [sp, #28]
    782c:	aa07      	add	r2, sp, #28
    782e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7832:	e7d6      	b.n	77e2 <cdc_acm_poll_out+0x26>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    7834:	6f20      	ldr	r0, [r4, #112]	; 0x70
    7836:	2201      	movs	r2, #1
    7838:	f10d 0107 	add.w	r1, sp, #7
    783c:	f01b fb3a 	bl	22eb4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    7840:	2800      	cmp	r0, #0
    7842:	d0ee      	beq.n	7822 <cdc_acm_poll_out+0x66>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    7844:	f104 0118 	add.w	r1, r4, #24
    7848:	4805      	ldr	r0, [pc, #20]	; (7860 <cdc_acm_poll_out+0xa4>)
    784a:	f020 fb1f 	bl	27e8c <k_work_submit_to_queue>
    784e:	e7cb      	b.n	77e8 <cdc_acm_poll_out+0x2c>
    7850:	0002a933 	.word	0x0002a933
    7854:	00028a08 	.word	0x00028a08
    7858:	0002a953 	.word	0x0002a953
    785c:	0002a972 	.word	0x0002a972
    7860:	20001288 	.word	0x20001288

00007864 <cdc_acm_read_cb>:
{
    7864:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    7866:	1e0d      	subs	r5, r1, #0
{
    7868:	b08b      	sub	sp, #44	; 0x2c
    786a:	4606      	mov	r6, r0
    786c:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    786e:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    7872:	dd20      	ble.n	78b6 <cdc_acm_read_cb+0x52>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    7874:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7876:	462a      	mov	r2, r5
    7878:	4639      	mov	r1, r7
    787a:	f01b fb1b 	bl	22eb4 <ring_buf_put>
	if (wrote < size) {
    787e:	4285      	cmp	r5, r0
    7880:	d90c      	bls.n	789c <cdc_acm_read_cb+0x38>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    7882:	4b12      	ldr	r3, [pc, #72]	; (78cc <cdc_acm_read_cb+0x68>)
    7884:	9308      	str	r3, [sp, #32]
    7886:	1a2d      	subs	r5, r5, r0
    7888:	2303      	movs	r3, #3
    788a:	4811      	ldr	r0, [pc, #68]	; (78d0 <cdc_acm_read_cb+0x6c>)
    788c:	9509      	str	r5, [sp, #36]	; 0x24
    788e:	aa07      	add	r2, sp, #28
    7890:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7894:	9303      	str	r3, [sp, #12]
    7896:	9307      	str	r3, [sp, #28]
    7898:	f01b fecd 	bl	23636 <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    789c:	2301      	movs	r3, #1
    789e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    78a2:	6823      	ldr	r3, [r4, #0]
    78a4:	b13b      	cbz	r3, 78b6 <cdc_acm_read_cb+0x52>
    78a6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    78aa:	b123      	cbz	r3, 78b6 <cdc_acm_read_cb+0x52>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    78ac:	4809      	ldr	r0, [pc, #36]	; (78d4 <cdc_acm_read_cb+0x70>)
    78ae:	f104 0108 	add.w	r1, r4, #8
    78b2:	f020 faeb 	bl	27e8c <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    78b6:	4b08      	ldr	r3, [pc, #32]	; (78d8 <cdc_acm_read_cb+0x74>)
    78b8:	9300      	str	r3, [sp, #0]
    78ba:	9401      	str	r4, [sp, #4]
    78bc:	2301      	movs	r3, #1
    78be:	2240      	movs	r2, #64	; 0x40
    78c0:	4639      	mov	r1, r7
    78c2:	4630      	mov	r0, r6
    78c4:	f7ff fdfc 	bl	74c0 <usb_transfer>
}
    78c8:	b00b      	add	sp, #44	; 0x2c
    78ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78cc:	0002a989 	.word	0x0002a989
    78d0:	00028a08 	.word	0x00028a08
    78d4:	20001288 	.word	0x20001288
    78d8:	00007865 	.word	0x00007865

000078dc <cdc_acm_dev_status_cb>:
{
    78dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    78de:	4605      	mov	r5, r0
    78e0:	b089      	sub	sp, #36	; 0x24
    78e2:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    78e4:	4601      	mov	r1, r0
    78e6:	484f      	ldr	r0, [pc, #316]	; (7a24 <cdc_acm_dev_status_cb+0x148>)
    78e8:	f01b fe02 	bl	234f0 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    78ec:	4604      	mov	r4, r0
    78ee:	b968      	cbnz	r0, 790c <cdc_acm_dev_status_cb+0x30>
		LOG_WRN("Device data not found for cfg %p", cfg);
    78f0:	4b4d      	ldr	r3, [pc, #308]	; (7a28 <cdc_acm_dev_status_cb+0x14c>)
    78f2:	484e      	ldr	r0, [pc, #312]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    78f4:	e9cd 3506 	strd	r3, r5, [sp, #24]
    78f8:	aa05      	add	r2, sp, #20
    78fa:	2303      	movs	r3, #3
    78fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7900:	9301      	str	r3, [sp, #4]
    7902:	9305      	str	r3, [sp, #20]
    7904:	f01b fe97 	bl	23636 <z_log_msg2_static_create.constprop.0>
}
    7908:	b009      	add	sp, #36	; 0x24
    790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    790c:	4605      	mov	r5, r0
	switch (status) {
    790e:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    7910:	f855 3980 	ldr.w	r3, [r5], #-128
    7914:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    7916:	2905      	cmp	r1, #5
    7918:	d8f6      	bhi.n	7908 <cdc_acm_dev_status_cb+0x2c>
    791a:	a301      	add	r3, pc, #4	; (adr r3, 7920 <cdc_acm_dev_status_cb+0x44>)
    791c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    7920:	000079a9 	.word	0x000079a9
    7924:	00007909 	.word	0x00007909
    7928:	00007939 	.word	0x00007939
    792c:	00007993 	.word	0x00007993
    7930:	000079b5 	.word	0x000079b5
    7934:	000079d3 	.word	0x000079d3
		LOG_INF("Device configured");
    7938:	4b3d      	ldr	r3, [pc, #244]	; (7a30 <cdc_acm_dev_status_cb+0x154>)
    793a:	9306      	str	r3, [sp, #24]
    793c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    7940:	2302      	movs	r3, #2
    7942:	483a      	ldr	r0, [pc, #232]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    7944:	9301      	str	r3, [sp, #4]
    7946:	aa05      	add	r2, sp, #20
    7948:	9305      	str	r3, [sp, #20]
    794a:	f01b fe74 	bl	23636 <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    794e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    7952:	b939      	cbnz	r1, 7964 <cdc_acm_dev_status_cb+0x88>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    7954:	6a3b      	ldr	r3, [r7, #32]
    7956:	462a      	mov	r2, r5
    7958:	7b18      	ldrb	r0, [r3, #12]
    795a:	f7ff ff83 	bl	7864 <cdc_acm_read_cb>
			dev_data->configured = true;
    795e:	2301      	movs	r3, #1
    7960:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    7964:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    7968:	2b00      	cmp	r3, #0
    796a:	d1cd      	bne.n	7908 <cdc_acm_dev_status_cb+0x2c>
			dev_data->tx_ready = true;
    796c:	2301      	movs	r3, #1
    796e:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    7972:	f854 3c80 	ldr.w	r3, [r4, #-128]
    7976:	2b00      	cmp	r3, #0
    7978:	d0c6      	beq.n	7908 <cdc_acm_dev_status_cb+0x2c>
    797a:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    797e:	2b00      	cmp	r3, #0
    7980:	d0c2      	beq.n	7908 <cdc_acm_dev_status_cb+0x2c>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    7982:	482c      	ldr	r0, [pc, #176]	; (7a34 <cdc_acm_dev_status_cb+0x158>)
    7984:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    7988:	b009      	add	sp, #36	; 0x24
    798a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    798e:	f020 ba7d 	b.w	27e8c <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    7992:	4b29      	ldr	r3, [pc, #164]	; (7a38 <cdc_acm_dev_status_cb+0x15c>)
    7994:	9306      	str	r3, [sp, #24]
    7996:	4825      	ldr	r0, [pc, #148]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    7998:	2302      	movs	r3, #2
    799a:	aa05      	add	r2, sp, #20
    799c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    79a0:	9301      	str	r3, [sp, #4]
    79a2:	9305      	str	r3, [sp, #20]
    79a4:	f01b fe47 	bl	23636 <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    79a8:	4628      	mov	r0, r5
}
    79aa:	b009      	add	sp, #36	; 0x24
    79ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    79b0:	f7ff bea2 	b.w	76f8 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    79b4:	4b21      	ldr	r3, [pc, #132]	; (7a3c <cdc_acm_dev_status_cb+0x160>)
    79b6:	9306      	str	r3, [sp, #24]
    79b8:	481c      	ldr	r0, [pc, #112]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    79ba:	2302      	movs	r3, #2
    79bc:	aa05      	add	r2, sp, #20
    79be:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    79c2:	9301      	str	r3, [sp, #4]
    79c4:	9305      	str	r3, [sp, #20]
    79c6:	f01b fe36 	bl	23636 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    79ca:	2301      	movs	r3, #1
    79cc:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    79d0:	e79a      	b.n	7908 <cdc_acm_dev_status_cb+0x2c>
		LOG_INF("Device resumed");
    79d2:	4b1b      	ldr	r3, [pc, #108]	; (7a40 <cdc_acm_dev_status_cb+0x164>)
    79d4:	4815      	ldr	r0, [pc, #84]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    79d6:	9306      	str	r3, [sp, #24]
    79d8:	2602      	movs	r6, #2
    79da:	aa05      	add	r2, sp, #20
    79dc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    79e0:	9601      	str	r6, [sp, #4]
    79e2:	9605      	str	r6, [sp, #20]
    79e4:	f01b fe27 	bl	23636 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    79e8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d08b      	beq.n	7908 <cdc_acm_dev_status_cb+0x2c>
			LOG_INF("from suspend");
    79f0:	4b14      	ldr	r3, [pc, #80]	; (7a44 <cdc_acm_dev_status_cb+0x168>)
    79f2:	480e      	ldr	r0, [pc, #56]	; (7a2c <cdc_acm_dev_status_cb+0x150>)
    79f4:	9306      	str	r3, [sp, #24]
    79f6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    79fa:	aa05      	add	r2, sp, #20
    79fc:	9601      	str	r6, [sp, #4]
    79fe:	9605      	str	r6, [sp, #20]
    7a00:	f01b fe19 	bl	23636 <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    7a04:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    7a08:	2100      	movs	r1, #0
    7a0a:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    7a0e:	2b00      	cmp	r3, #0
    7a10:	f43f af7a 	beq.w	7908 <cdc_acm_dev_status_cb+0x2c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    7a14:	6a3b      	ldr	r3, [r7, #32]
    7a16:	7b18      	ldrb	r0, [r3, #12]
    7a18:	462a      	mov	r2, r5
}
    7a1a:	b009      	add	sp, #36	; 0x24
    7a1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    7a20:	f7ff bf20 	b.w	7864 <cdc_acm_read_cb>
    7a24:	20002060 	.word	0x20002060
    7a28:	0002a9aa 	.word	0x0002a9aa
    7a2c:	00028a08 	.word	0x00028a08
    7a30:	0002a9cb 	.word	0x0002a9cb
    7a34:	20001288 	.word	0x20001288
    7a38:	0002a9dd 	.word	0x0002a9dd
    7a3c:	0002a9f1 	.word	0x0002a9f1
    7a40:	0002aa02 	.word	0x0002aa02
    7a44:	0002aa11 	.word	0x0002aa11

00007a48 <cdc_acm_fifo_fill>:
{
    7a48:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    7a4a:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    7a4c:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    7a50:	b088      	sub	sp, #32
    7a52:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    7a54:	b113      	cbz	r3, 7a5c <cdc_acm_fifo_fill+0x14>
    7a56:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    7a5a:	b173      	cbz	r3, 7a7a <cdc_acm_fifo_fill+0x32>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    7a5c:	4b15      	ldr	r3, [pc, #84]	; (7ab4 <cdc_acm_fifo_fill+0x6c>)
    7a5e:	4816      	ldr	r0, [pc, #88]	; (7ab8 <cdc_acm_fifo_fill+0x70>)
    7a60:	e9cd 3506 	strd	r3, r5, [sp, #24]
    7a64:	aa05      	add	r2, sp, #20
    7a66:	2303      	movs	r3, #3
    7a68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7a6c:	9301      	str	r3, [sp, #4]
    7a6e:	9305      	str	r3, [sp, #20]
    7a70:	f01b fde1 	bl	23636 <z_log_msg2_static_create.constprop.0>
		return 0;
    7a74:	2000      	movs	r0, #0
}
    7a76:	b008      	add	sp, #32
    7a78:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    7a7a:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    7a7c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    7a80:	f01b fa18 	bl	22eb4 <ring_buf_put>
	if (wrote < len) {
    7a84:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    7a86:	4604      	mov	r4, r0
	if (wrote < len) {
    7a88:	d20c      	bcs.n	7aa4 <cdc_acm_fifo_fill+0x5c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    7a8a:	4b0c      	ldr	r3, [pc, #48]	; (7abc <cdc_acm_fifo_fill+0x74>)
    7a8c:	9306      	str	r3, [sp, #24]
    7a8e:	1a2d      	subs	r5, r5, r0
    7a90:	2303      	movs	r3, #3
    7a92:	4809      	ldr	r0, [pc, #36]	; (7ab8 <cdc_acm_fifo_fill+0x70>)
    7a94:	9507      	str	r5, [sp, #28]
    7a96:	aa05      	add	r2, sp, #20
    7a98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7a9c:	9301      	str	r3, [sp, #4]
    7a9e:	9305      	str	r3, [sp, #20]
    7aa0:	f01b fdc9 	bl	23636 <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    7aa4:	4806      	ldr	r0, [pc, #24]	; (7ac0 <cdc_acm_fifo_fill+0x78>)
    7aa6:	f106 0118 	add.w	r1, r6, #24
    7aaa:	f020 f9ef 	bl	27e8c <k_work_submit_to_queue>
	return wrote;
    7aae:	4620      	mov	r0, r4
    7ab0:	e7e1      	b.n	7a76 <cdc_acm_fifo_fill+0x2e>
    7ab2:	bf00      	nop
    7ab4:	0002aa1e 	.word	0x0002aa1e
    7ab8:	00028a08 	.word	0x00028a08
    7abc:	0002a989 	.word	0x0002a989
    7ac0:	20001288 	.word	0x20001288

00007ac4 <cdc_acm_int_in>:
{
    7ac4:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    7ac6:	4601      	mov	r1, r0
{
    7ac8:	b088      	sub	sp, #32
    7aca:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    7acc:	480a      	ldr	r0, [pc, #40]	; (7af8 <cdc_acm_int_in+0x34>)
    7ace:	f01b fd29 	bl	23524 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    7ad2:	b968      	cbnz	r0, 7af0 <cdc_acm_int_in+0x2c>
		LOG_WRN("Device data not found for endpoint %u", ep);
    7ad4:	4b09      	ldr	r3, [pc, #36]	; (7afc <cdc_acm_int_in+0x38>)
    7ad6:	480a      	ldr	r0, [pc, #40]	; (7b00 <cdc_acm_int_in+0x3c>)
    7ad8:	e9cd 3406 	strd	r3, r4, [sp, #24]
    7adc:	aa05      	add	r2, sp, #20
    7ade:	2303      	movs	r3, #3
    7ae0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7ae4:	9301      	str	r3, [sp, #4]
    7ae6:	9305      	str	r3, [sp, #20]
    7ae8:	f01b fda5 	bl	23636 <z_log_msg2_static_create.constprop.0>
}
    7aec:	b008      	add	sp, #32
    7aee:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    7af0:	2301      	movs	r3, #1
    7af2:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    7af6:	e7f9      	b.n	7aec <cdc_acm_int_in+0x28>
    7af8:	20002060 	.word	0x20002060
    7afc:	0002aa50 	.word	0x0002aa50
    7b00:	00028a08 	.word	0x00028a08

00007b04 <cdc_acm_class_handle_req>:
{
    7b04:	b570      	push	{r4, r5, r6, lr}
    7b06:	4604      	mov	r4, r0
    7b08:	b088      	sub	sp, #32
    7b0a:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    7b0c:	7901      	ldrb	r1, [r0, #4]
    7b0e:	481a      	ldr	r0, [pc, #104]	; (7b78 <cdc_acm_class_handle_req+0x74>)
{
    7b10:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    7b12:	f01b fcf9 	bl	23508 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    7b16:	b980      	cbnz	r0, 7b3a <cdc_acm_class_handle_req+0x36>
		LOG_WRN("Device data not found for interface %u",
    7b18:	88a3      	ldrh	r3, [r4, #4]
    7b1a:	4a18      	ldr	r2, [pc, #96]	; (7b7c <cdc_acm_class_handle_req+0x78>)
    7b1c:	4818      	ldr	r0, [pc, #96]	; (7b80 <cdc_acm_class_handle_req+0x7c>)
    7b1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7b22:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7b26:	2303      	movs	r3, #3
    7b28:	aa05      	add	r2, sp, #20
    7b2a:	9301      	str	r3, [sp, #4]
    7b2c:	9305      	str	r3, [sp, #20]
    7b2e:	f01b fd82 	bl	23636 <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    7b32:	f06f 0012 	mvn.w	r0, #18
}
    7b36:	b008      	add	sp, #32
    7b38:	bd70      	pop	{r4, r5, r6, pc}
	if (usb_reqtype_is_to_device(setup)) {
    7b3a:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    7b3e:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    7b40:	2a00      	cmp	r2, #0
    7b42:	db11      	blt.n	7b68 <cdc_acm_class_handle_req+0x64>
		switch (setup->bRequest) {
    7b44:	2b20      	cmp	r3, #32
    7b46:	d004      	beq.n	7b52 <cdc_acm_class_handle_req+0x4e>
    7b48:	2b22      	cmp	r3, #34	; 0x22
    7b4a:	d009      	beq.n	7b60 <cdc_acm_class_handle_req+0x5c>
	return -ENOTSUP;
    7b4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7b50:	e7f1      	b.n	7b36 <cdc_acm_class_handle_req+0x32>
			memcpy(&dev_data->line_coding, *data,
    7b52:	6829      	ldr	r1, [r5, #0]
    7b54:	2207      	movs	r2, #7
    7b56:	380c      	subs	r0, #12
    7b58:	f01c ff21 	bl	2499e <memcpy>
			return 0;
    7b5c:	2000      	movs	r0, #0
    7b5e:	e7ea      	b.n	7b36 <cdc_acm_class_handle_req+0x32>
			dev_data->line_state = (uint8_t)setup->wValue;
    7b60:	8863      	ldrh	r3, [r4, #2]
    7b62:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    7b66:	e7f9      	b.n	7b5c <cdc_acm_class_handle_req+0x58>
		if (setup->bRequest == GET_LINE_CODING) {
    7b68:	2b21      	cmp	r3, #33	; 0x21
    7b6a:	d1ef      	bne.n	7b4c <cdc_acm_class_handle_req+0x48>
			*data = (uint8_t *)(&dev_data->line_coding);
    7b6c:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    7b6e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    7b70:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    7b72:	6033      	str	r3, [r6, #0]
    7b74:	e7f2      	b.n	7b5c <cdc_acm_class_handle_req+0x58>
    7b76:	bf00      	nop
    7b78:	20002060 	.word	0x20002060
    7b7c:	0002aa76 	.word	0x0002aa76
    7b80:	00028a08 	.word	0x00028a08

00007b84 <cdc_acm_init>:
{
    7b84:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    7b86:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    7b88:	2300      	movs	r3, #0
    7b8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    7b8e:	4b0c      	ldr	r3, [pc, #48]	; (7bc0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    7b90:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    7b94:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    7b96:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    7b9a:	b969      	cbnz	r1, 7bb8 <cdc_acm_init+0x34>
	list->head = node;
    7b9c:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    7ba0:	f104 0008 	add.w	r0, r4, #8
    7ba4:	4907      	ldr	r1, [pc, #28]	; (7bc4 <cdc_acm_init+0x40>)
    7ba6:	f020 f968 	bl	27e7a <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    7baa:	f104 0018 	add.w	r0, r4, #24
    7bae:	4906      	ldr	r1, [pc, #24]	; (7bc8 <cdc_acm_init+0x44>)
    7bb0:	f020 f963 	bl	27e7a <k_work_init>
}
    7bb4:	2000      	movs	r0, #0
    7bb6:	bd10      	pop	{r4, pc}
	parent->next = child;
    7bb8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    7bba:	605a      	str	r2, [r3, #4]
}
    7bbc:	e7f0      	b.n	7ba0 <cdc_acm_init+0x1c>
    7bbe:	bf00      	nop
    7bc0:	20002060 	.word	0x20002060
    7bc4:	0002357b 	.word	0x0002357b
    7bc8:	00007769 	.word	0x00007769

00007bcc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    7bcc:	b530      	push	{r4, r5, lr}
    7bce:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    7bd0:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    7bd2:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    7bd4:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    7bd8:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    7bda:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    7bdc:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    7be0:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    7be2:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    7be6:	2002      	movs	r0, #2
    7be8:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    7bec:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    7bee:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    7bf2:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    7bf6:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    7bf8:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    7bfc:	220a      	movs	r2, #10
    7bfe:	a901      	add	r1, sp, #4
    7c00:	f7ff f83c 	bl	6c7c <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    7c04:	4c05      	ldr	r4, [pc, #20]	; (7c1c <cdc_acm_send_notification.isra.0+0x50>)
    7c06:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    7c0a:	b923      	cbnz	r3, 7c16 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    7c0c:	2001      	movs	r0, #1
    7c0e:	f020 fafd 	bl	2820c <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    7c12:	3c01      	subs	r4, #1
    7c14:	d1f7      	bne.n	7c06 <cdc_acm_send_notification.isra.0+0x3a>
}
    7c16:	b005      	add	sp, #20
    7c18:	bd30      	pop	{r4, r5, pc}
    7c1a:	bf00      	nop
    7c1c:	000186a1 	.word	0x000186a1

00007c20 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    7c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    7c22:	4d09      	ldr	r5, [pc, #36]	; (7c48 <z_usb_work_q_init+0x28>)
    7c24:	4909      	ldr	r1, [pc, #36]	; (7c4c <z_usb_work_q_init+0x2c>)
    7c26:	2400      	movs	r4, #0
    7c28:	9400      	str	r4, [sp, #0]
    7c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7c32:	4628      	mov	r0, r5
    7c34:	f019 fe52 	bl	218dc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    7c38:	4905      	ldr	r1, [pc, #20]	; (7c50 <z_usb_work_q_init+0x30>)
    7c3a:	4628      	mov	r0, r5
    7c3c:	f01f ffb3 	bl	27ba6 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    7c40:	4620      	mov	r0, r4
    7c42:	b003      	add	sp, #12
    7c44:	bd30      	pop	{r4, r5, pc}
    7c46:	bf00      	nop
    7c48:	20001288 	.word	0x20001288
    7c4c:	20005100 	.word	0x20005100
    7c50:	0002aab3 	.word	0x0002aab3

00007c54 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    7c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c58:	4605      	mov	r5, r0
	__asm__ volatile(
    7c5a:	f04f 0320 	mov.w	r3, #32
    7c5e:	f3ef 8611 	mrs	r6, BASEPRI
    7c62:	f383 8812 	msr	BASEPRI_MAX, r3
    7c66:	f3bf 8f6f 	isb	sy
	return list->head;
    7c6a:	4b0e      	ldr	r3, [pc, #56]	; (7ca4 <pm_state_notify+0x50>)
    7c6c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    7c6e:	b19c      	cbz	r4, 7c98 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    7c70:	4f0d      	ldr	r7, [pc, #52]	; (7ca8 <pm_state_notify+0x54>)
    7c72:	f8df 8038 	ldr.w	r8, [pc, #56]	; 7cac <pm_state_notify+0x58>
    7c76:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    7c7a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    7c7e:	2d00      	cmp	r5, #0
    7c80:	bf08      	it	eq
    7c82:	4613      	moveq	r3, r2
		if (callback) {
    7c84:	b12b      	cbz	r3, 7c92 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    7c86:	f898 2014 	ldrb.w	r2, [r8, #20]
    7c8a:	fb09 f202 	mul.w	r2, r9, r2
    7c8e:	5cb8      	ldrb	r0, [r7, r2]
    7c90:	4798      	blx	r3
	return node->next;
    7c92:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    7c94:	2c00      	cmp	r4, #0
    7c96:	d1f0      	bne.n	7c7a <pm_state_notify+0x26>
	__asm__ volatile(
    7c98:	f386 8811 	msr	BASEPRI, r6
    7c9c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    7ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ca4:	20002068 	.word	0x20002068
    7ca8:	20002070 	.word	0x20002070
    7cac:	20003d78 	.word	0x20003d78

00007cb0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cb0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    7cb2:	2301      	movs	r3, #1
    7cb4:	f000 001f 	and.w	r0, r0, #31
    7cb8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cbc:	4b07      	ldr	r3, [pc, #28]	; (7cdc <atomic_clear_bit.constprop.0+0x2c>)
    7cbe:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cc2:	43c0      	mvns	r0, r0
    7cc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7cc8:	e853 2f00 	ldrex	r2, [r3]
    7ccc:	4002      	ands	r2, r0
    7cce:	e843 2100 	strex	r1, r2, [r3]
    7cd2:	2900      	cmp	r1, #0
    7cd4:	d1f8      	bne.n	7cc8 <atomic_clear_bit.constprop.0+0x18>
    7cd6:	f3bf 8f5b 	dmb	ish
}
    7cda:	4770      	bx	lr
    7cdc:	2000207c 	.word	0x2000207c

00007ce0 <pm_system_resume>:

void pm_system_resume(void)
{
    7ce0:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    7ce2:	4b1d      	ldr	r3, [pc, #116]	; (7d58 <pm_system_resume+0x78>)
    7ce4:	7d1c      	ldrb	r4, [r3, #20]
    7ce6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    7cea:	f004 031f 	and.w	r3, r4, #31
    7cee:	2201      	movs	r2, #1
    7cf0:	409a      	lsls	r2, r3
    7cf2:	4b1a      	ldr	r3, [pc, #104]	; (7d5c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cf4:	0961      	lsrs	r1, r4, #5
{
    7cf6:	b085      	sub	sp, #20
    7cf8:	43d0      	mvns	r0, r2
    7cfa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7cfe:	e853 1f00 	ldrex	r1, [r3]
    7d02:	ea01 0500 	and.w	r5, r1, r0
    7d06:	e843 5c00 	strex	ip, r5, [r3]
    7d0a:	f1bc 0f00 	cmp.w	ip, #0
    7d0e:	d1f6      	bne.n	7cfe <pm_system_resume+0x1e>
    7d10:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    7d14:	4211      	tst	r1, r2
    7d16:	d017      	beq.n	7d48 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    7d18:	4d11      	ldr	r5, [pc, #68]	; (7d60 <pm_system_resume+0x80>)
    7d1a:	220c      	movs	r2, #12
    7d1c:	fb02 5204 	mla	r2, r2, r4, r5
    7d20:	ca07      	ldmia	r2, {r0, r1, r2}
    7d22:	ab01      	add	r3, sp, #4
    7d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    7d28:	4a0e      	ldr	r2, [pc, #56]	; (7d64 <pm_system_resume+0x84>)
    7d2a:	b17a      	cbz	r2, 7d4c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    7d2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7d30:	f01c fe5f 	bl	249f2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    7d34:	2000      	movs	r0, #0
    7d36:	f7ff ff8d 	bl	7c54 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    7d3a:	230c      	movs	r3, #12
    7d3c:	435c      	muls	r4, r3
    7d3e:	192a      	adds	r2, r5, r4
    7d40:	2300      	movs	r3, #0
    7d42:	512b      	str	r3, [r5, r4]
    7d44:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    7d48:	b005      	add	sp, #20
    7d4a:	bd30      	pop	{r4, r5, pc}
    7d4c:	f382 8811 	msr	BASEPRI, r2
    7d50:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    7d54:	e7ee      	b.n	7d34 <pm_system_resume+0x54>
    7d56:	bf00      	nop
    7d58:	20003d78 	.word	0x20003d78
    7d5c:	20002080 	.word	0x20002080
    7d60:	20002070 	.word	0x20002070
    7d64:	000249f3 	.word	0x000249f3

00007d68 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    7d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    7d6c:	4b35      	ldr	r3, [pc, #212]	; (7e44 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d6e:	4a36      	ldr	r2, [pc, #216]	; (7e48 <pm_system_suspend+0xe0>)
    7d70:	7d1c      	ldrb	r4, [r3, #20]
    7d72:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7d76:	0963      	lsrs	r3, r4, #5
    7d78:	ea4f 0983 	mov.w	r9, r3, lsl #2
    7d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d80:	4d32      	ldr	r5, [pc, #200]	; (7e4c <pm_system_suspend+0xe4>)
    7d82:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7d86:	f004 081f 	and.w	r8, r4, #31
    7d8a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7d8e:	f013 0f01 	tst.w	r3, #1
{
    7d92:	b085      	sub	sp, #20
    7d94:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7d96:	d10a      	bne.n	7dae <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    7d98:	4601      	mov	r1, r0
    7d9a:	4620      	mov	r0, r4
    7d9c:	f000 f876 	bl	7e8c <pm_policy_next_state>
		if (info != NULL) {
    7da0:	b128      	cbz	r0, 7dae <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    7da2:	c807      	ldmia	r0, {r0, r1, r2}
    7da4:	230c      	movs	r3, #12
    7da6:	fb03 5304 	mla	r3, r3, r4, r5
    7daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    7dae:	230c      	movs	r3, #12
    7db0:	4363      	muls	r3, r4
    7db2:	18ea      	adds	r2, r5, r3
    7db4:	5cee      	ldrb	r6, [r5, r3]
    7db6:	b936      	cbnz	r6, 7dc6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    7db8:	4620      	mov	r0, r4
    7dba:	f7ff ff79 	bl	7cb0 <atomic_clear_bit.constprop.0>
		ret = false;
    7dbe:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    7dc0:	b005      	add	sp, #20
    7dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    7dc6:	1c7b      	adds	r3, r7, #1
    7dc8:	d00f      	beq.n	7dea <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    7dca:	f8d2 c008 	ldr.w	ip, [r2, #8]
    7dce:	4820      	ldr	r0, [pc, #128]	; (7e50 <pm_system_suspend+0xe8>)
    7dd0:	4a20      	ldr	r2, [pc, #128]	; (7e54 <pm_system_suspend+0xec>)
    7dd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7dd6:	2100      	movs	r1, #0
    7dd8:	2300      	movs	r3, #0
    7dda:	fbec 0106 	umlal	r0, r1, ip, r6
    7dde:	f7f9 f98f 	bl	1100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    7de2:	2101      	movs	r1, #1
    7de4:	1a38      	subs	r0, r7, r0
    7de6:	f020 f9f1 	bl	281cc <z_set_timeout_expiry>
	k_sched_lock();
    7dea:	f019 fe6b 	bl	21ac4 <k_sched_lock>
	pm_state_notify(true);
    7dee:	2001      	movs	r0, #1
    7df0:	f7ff ff30 	bl	7c54 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7df4:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    7df8:	2301      	movs	r3, #1
    7dfa:	fa03 f808 	lsl.w	r8, r3, r8
    7dfe:	4b16      	ldr	r3, [pc, #88]	; (7e58 <pm_system_suspend+0xf0>)
    7e00:	4499      	add	r9, r3
    7e02:	e859 3f00 	ldrex	r3, [r9]
    7e06:	ea43 0308 	orr.w	r3, r3, r8
    7e0a:	e849 3200 	strex	r2, r3, [r9]
    7e0e:	2a00      	cmp	r2, #0
    7e10:	d1f7      	bne.n	7e02 <pm_system_suspend+0x9a>
    7e12:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    7e16:	230c      	movs	r3, #12
    7e18:	fb03 5504 	mla	r5, r3, r4, r5
    7e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    7e20:	ab01      	add	r3, sp, #4
    7e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    7e26:	4a0d      	ldr	r2, [pc, #52]	; (7e5c <pm_system_suspend+0xf4>)
    7e28:	b11a      	cbz	r2, 7e32 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    7e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7e2e:	f01c fdcd 	bl	249cc <pm_power_state_set>
	pm_system_resume();
    7e32:	f7ff ff55 	bl	7ce0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    7e36:	4620      	mov	r0, r4
    7e38:	f7ff ff3a 	bl	7cb0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    7e3c:	f01a f810 	bl	21e60 <k_sched_unlock>
	bool ret = true;
    7e40:	2001      	movs	r0, #1
    7e42:	e7bd      	b.n	7dc0 <pm_system_suspend+0x58>
    7e44:	20003d78 	.word	0x20003d78
    7e48:	2000207c 	.word	0x2000207c
    7e4c:	20002070 	.word	0x20002070
    7e50:	000f423f 	.word	0x000f423f
    7e54:	000f4240 	.word	0x000f4240
    7e58:	20002080 	.word	0x20002080
    7e5c:	000249cd 	.word	0x000249cd

00007e60 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e60:	4b05      	ldr	r3, [pc, #20]	; (7e78 <pm_constraint_get+0x18>)
    7e62:	f3bf 8f5b 	dmb	ish
    7e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7e6a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    7e6e:	fab0 f080 	clz	r0, r0
    7e72:	0940      	lsrs	r0, r0, #5
    7e74:	4770      	bx	lr
    7e76:	bf00      	nop
    7e78:	20002084 	.word	0x20002084

00007e7c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    7e7c:	b908      	cbnz	r0, 7e82 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    7e7e:	4b02      	ldr	r3, [pc, #8]	; (7e88 <pm_state_cpu_get_all+0xc>)
    7e80:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    7e82:	2000      	movs	r0, #0
    7e84:	4770      	bx	lr
    7e86:	bf00      	nop
    7e88:	00028c60 	.word	0x00028c60

00007e8c <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    7e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e90:	b085      	sub	sp, #20
    7e92:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    7e94:	a903      	add	r1, sp, #12
    7e96:	f7ff fff1 	bl	7e7c <pm_state_cpu_get_all>
    7e9a:	f8df a074 	ldr.w	sl, [pc, #116]	; 7f10 <pm_policy_next_state+0x84>
    7e9e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7f14 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    7ea2:	1e44      	subs	r4, r0, #1
    7ea4:	b224      	sxth	r4, r4
    7ea6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7eaa:	f04f 0900 	mov.w	r9, #0
    7eae:	1c63      	adds	r3, r4, #1
    7eb0:	d104      	bne.n	7ebc <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    7eb2:	2500      	movs	r5, #0
}
    7eb4:	4628      	mov	r0, r5
    7eb6:	b005      	add	sp, #20
    7eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    7ebc:	9a03      	ldr	r2, [sp, #12]
    7ebe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    7ec2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    7ec6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    7eca:	f7ff ffc9 	bl	7e60 <pm_constraint_get>
    7ece:	b1e0      	cbz	r0, 7f0a <pm_policy_next_state+0x7e>
    7ed0:	6868      	ldr	r0, [r5, #4]
    7ed2:	f04f 0b00 	mov.w	fp, #0
    7ed6:	46d4      	mov	ip, sl
    7ed8:	4659      	mov	r1, fp
    7eda:	fbe0 c107 	umlal	ip, r1, r0, r7
    7ede:	4642      	mov	r2, r8
    7ee0:	464b      	mov	r3, r9
    7ee2:	4660      	mov	r0, ip
    7ee4:	f7f9 f90c 	bl	1100 <__aeabi_uldivmod>
    7ee8:	9001      	str	r0, [sp, #4]
    7eea:	68a8      	ldr	r0, [r5, #8]
    7eec:	46d4      	mov	ip, sl
    7eee:	4659      	mov	r1, fp
    7ef0:	fbe0 c107 	umlal	ip, r1, r0, r7
    7ef4:	4642      	mov	r2, r8
    7ef6:	464b      	mov	r3, r9
    7ef8:	4660      	mov	r0, ip
    7efa:	f7f9 f901 	bl	1100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    7efe:	1c72      	adds	r2, r6, #1
    7f00:	d0d8      	beq.n	7eb4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    7f02:	9b01      	ldr	r3, [sp, #4]
    7f04:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    7f06:	42b0      	cmp	r0, r6
    7f08:	d9d4      	bls.n	7eb4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    7f0a:	3c01      	subs	r4, #1
    7f0c:	b224      	sxth	r4, r4
    7f0e:	e7ce      	b.n	7eae <pm_policy_next_state+0x22>
    7f10:	000f423f 	.word	0x000f423f
    7f14:	000f4240 	.word	0x000f4240

00007f18 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    7f18:	4b01      	ldr	r3, [pc, #4]	; (7f20 <uECC_get_rng+0x8>)
    7f1a:	6818      	ldr	r0, [r3, #0]
    7f1c:	4770      	bx	lr
    7f1e:	bf00      	nop
    7f20:	20000270 	.word	0x20000270

00007f24 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7f26:	2208      	movs	r2, #8
{
    7f28:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7f2a:	f01b fd97 	bl	23a5c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    7f2e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7f30:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    7f32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    7f34:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    7f36:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7f38:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    7f3a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7f3c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    7f3e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7f40:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f42:	4613      	mov	r3, r2
    7f44:	466a      	mov	r2, sp
{
    7f46:	460c      	mov	r4, r1
    7f48:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    7f4a:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f4c:	4611      	mov	r1, r2
    7f4e:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    7f50:	e9cd 7701 	strd	r7, r7, [sp, #4]
    7f54:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f56:	f01b fc97 	bl	23888 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7f5a:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f5c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7f5e:	4630      	mov	r0, r6
    7f60:	f01b fc92 	bl	23888 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    7f64:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7f66:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    7f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7f6a:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    7f6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7f6e:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    7f70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7f72:	4405      	add	r5, r0
	tmp[7] = 0;
    7f74:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f78:	4610      	mov	r0, r2
    7f7a:	4611      	mov	r1, r2
    7f7c:	f01b fc84 	bl	23888 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7f80:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7f82:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7f84:	4630      	mov	r0, r6
    7f86:	f01b fc7f 	bl	23888 <uECC_vli_add>
    7f8a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    7f8c:	6a20      	ldr	r0, [r4, #32]
    7f8e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    7f90:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f92:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    7f94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f96:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    7f98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7f9a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    7f9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7f9e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7fa0:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7fa2:	e9cd 7704 	strd	r7, r7, [sp, #16]
    7fa6:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7fa8:	f01b fc6e 	bl	23888 <uECC_vli_add>
    7fac:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    7fae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7fb0:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    7fb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    7fb4:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    7fb8:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    7fba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7fbc:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    7fbe:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    7fc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7fc4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7fc8:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    7fca:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    7fce:	6a20      	ldr	r0, [r4, #32]
    7fd0:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7fd2:	4630      	mov	r0, r6
    7fd4:	f01b fc58 	bl	23888 <uECC_vli_add>
    7fd8:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    7fda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7fdc:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    7fde:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7fe0:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    7fe2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7fe4:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    7fe6:	6a20      	ldr	r0, [r4, #32]
    7fe8:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    7fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7fec:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7fee:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7ff0:	e9cd 7704 	strd	r7, r7, [sp, #16]
    7ff4:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7ff6:	f01b fd64 	bl	23ac2 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    7ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7ffc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    7ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8000:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    8002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8004:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    8006:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8008:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    800a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    800c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    800e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8010:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    8012:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    8014:	2308      	movs	r3, #8
    8016:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    8018:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    801c:	f01b fd51 	bl	23ac2 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    8020:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8022:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    8024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8026:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    8028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    802a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    802c:	6a23      	ldr	r3, [r4, #32]
    802e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    8030:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8032:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    8034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    8036:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    803a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    803c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    803e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    8040:	2308      	movs	r3, #8
    8042:	4630      	mov	r0, r6
    8044:	f01b fd3d 	bl	23ac2 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    8048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    804a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    804c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    804e:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    8052:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8054:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    8056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8058:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    805a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    805c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    8060:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8062:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    8064:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    8066:	2308      	movs	r3, #8
    8068:	4630      	mov	r0, r6
    806a:	f01b fd2a 	bl	23ac2 <uECC_vli_sub>

	if (carry < 0) {
    806e:	1a2d      	subs	r5, r5, r0
    8070:	d410      	bmi.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    8072:	4c0d      	ldr	r4, [pc, #52]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
		while (carry || 
    8074:	b935      	cbnz	r5, 8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    8076:	2208      	movs	r2, #8
    8078:	4631      	mov	r1, r6
    807a:	4620      	mov	r0, r4
    807c:	f01b fcfa 	bl	23a74 <uECC_vli_cmp_unsafe>
		while (carry || 
    8080:	2801      	cmp	r0, #1
    8082:	d00f      	beq.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    8084:	2308      	movs	r3, #8
    8086:	4622      	mov	r2, r4
    8088:	4631      	mov	r1, r6
    808a:	4630      	mov	r0, r6
    808c:	f01b fd19 	bl	23ac2 <uECC_vli_sub>
    8090:	1a2d      	subs	r5, r5, r0
    8092:	e7ef      	b.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    8094:	4a04      	ldr	r2, [pc, #16]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    8096:	2308      	movs	r3, #8
    8098:	4631      	mov	r1, r6
    809a:	4630      	mov	r0, r6
    809c:	f01b fbf4 	bl	23888 <uECC_vli_add>
		while (carry < 0);
    80a0:	182d      	adds	r5, r5, r0
    80a2:	d4f8      	bmi.n	8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
		}
	}
}
    80a4:	b009      	add	sp, #36	; 0x24
    80a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80a8:	00028c64 	.word	0x00028c64

000080ac <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    80ac:	4904      	ldr	r1, [pc, #16]	; (80c0 <sub_bytes+0x14>)
    80ae:	1e43      	subs	r3, r0, #1
    80b0:	300f      	adds	r0, #15
    80b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    80b6:	5c8a      	ldrb	r2, [r1, r2]
    80b8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    80ba:	4283      	cmp	r3, r0
    80bc:	d1f9      	bne.n	80b2 <sub_bytes+0x6>
	}
}
    80be:	4770      	bx	lr
    80c0:	0002aabf 	.word	0x0002aabf

000080c4 <tc_aes128_set_encrypt_key>:
{
    80c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    80c6:	4e26      	ldr	r6, [pc, #152]	; (8160 <tc_aes128_set_encrypt_key+0x9c>)
{
    80c8:	4607      	mov	r7, r0
    80ca:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    80cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    80ce:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    80d0:	ad01      	add	r5, sp, #4
    80d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    80d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    80d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    80d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    80dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    80e0:	4638      	mov	r0, r7
    80e2:	2f00      	cmp	r7, #0
    80e4:	d038      	beq.n	8158 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    80e6:	2c00      	cmp	r4, #0
    80e8:	d038      	beq.n	815c <tc_aes128_set_encrypt_key+0x98>
    80ea:	1f38      	subs	r0, r7, #4
    80ec:	4621      	mov	r1, r4
    80ee:	4602      	mov	r2, r0
    80f0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    80f2:	784b      	ldrb	r3, [r1, #1]
    80f4:	780d      	ldrb	r5, [r1, #0]
    80f6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    80f8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    80fc:	78cd      	ldrb	r5, [r1, #3]
    80fe:	432b      	orrs	r3, r5
    8100:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    8102:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    8104:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    8108:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    810a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    810e:	d1f0      	bne.n	80f2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    8110:	4c14      	ldr	r4, [pc, #80]	; (8164 <tc_aes128_set_encrypt_key+0xa0>)
    8112:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    8114:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    8116:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    8118:	d116      	bne.n	8148 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    811a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    811e:	5ca5      	ldrb	r5, [r4, r2]
    8120:	0e1a      	lsrs	r2, r3, #24
    8122:	5ca2      	ldrb	r2, [r4, r2]
    8124:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    8128:	f3c3 2507 	ubfx	r5, r3, #8, #8
    812c:	b2db      	uxtb	r3, r3
    812e:	5d65      	ldrb	r5, [r4, r5]
    8130:	5ce3      	ldrb	r3, [r4, r3]
    8132:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    8136:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    813a:	f021 0303 	bic.w	r3, r1, #3
    813e:	3330      	adds	r3, #48	; 0x30
    8140:	446b      	add	r3, sp
    8142:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    8146:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    8148:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    814c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    814e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    8150:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    8152:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    8154:	d1de      	bne.n	8114 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    8156:	2001      	movs	r0, #1
}
    8158:	b00d      	add	sp, #52	; 0x34
    815a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    815c:	4620      	mov	r0, r4
    815e:	e7fb      	b.n	8158 <tc_aes128_set_encrypt_key+0x94>
    8160:	00028a94 	.word	0x00028a94
    8164:	0002aabf 	.word	0x0002aabf

00008168 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    8168:	4901      	ldr	r1, [pc, #4]	; (8170 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    816a:	2210      	movs	r2, #16
	str	r2, [r1]
    816c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    816e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    8170:	e000ed10 	.word	0xe000ed10

00008174 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    8174:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    8176:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    8178:	f380 8811 	msr	BASEPRI, r0
	isb
    817c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    8180:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    8184:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    8186:	b662      	cpsie	i
	isb
    8188:	f3bf 8f6f 	isb	sy

	bx	lr
    818c:	4770      	bx	lr
    818e:	bf00      	nop

00008190 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    8190:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    8192:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    8194:	f381 8811 	msr	BASEPRI, r1

	wfe
    8198:	bf20      	wfe

	msr	BASEPRI, r0
    819a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    819e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    81a0:	4770      	bx	lr
    81a2:	bf00      	nop

000081a4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    81a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81a8:	b088      	sub	sp, #32
    81aa:	4681      	mov	r9, r0
    81ac:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    81ae:	460c      	mov	r4, r1
    81b0:	2900      	cmp	r1, #0
    81b2:	d04b      	beq.n	824c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    81b4:	46ea      	mov	sl, sp
    81b6:	b088      	sub	sp, #32
    81b8:	466d      	mov	r5, sp
    81ba:	e9d1 1200 	ldrd	r1, r2, [r1]
    81be:	68a3      	ldr	r3, [r4, #8]
    81c0:	4826      	ldr	r0, [pc, #152]	; (825c <z_arm_fatal_error+0xb8>)
    81c2:	462e      	mov	r6, r5
    81c4:	f04f 0805 	mov.w	r8, #5
    81c8:	e9c5 0104 	strd	r0, r1, [r5, #16]
    81cc:	e9c5 2306 	strd	r2, r3, [r5, #24]
    81d0:	f8c7 8008 	str.w	r8, [r7, #8]
    81d4:	f846 8f0c 	str.w	r8, [r6, #12]!
    81d8:	4821      	ldr	r0, [pc, #132]	; (8260 <z_arm_fatal_error+0xbc>)
    81da:	4632      	mov	r2, r6
    81dc:	2300      	movs	r3, #0
    81de:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    81e2:	f01b f948 	bl	23476 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    81e6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    81ea:	6963      	ldr	r3, [r4, #20]
    81ec:	481d      	ldr	r0, [pc, #116]	; (8264 <z_arm_fatal_error+0xc0>)
    81ee:	f8c7 8008 	str.w	r8, [r7, #8]
    81f2:	46d5      	mov	sp, sl
    81f4:	e9c5 0104 	strd	r0, r1, [r5, #16]
    81f8:	e9c5 2306 	strd	r2, r3, [r5, #24]
    81fc:	46ad      	mov	sp, r5
    81fe:	f8c5 800c 	str.w	r8, [r5, #12]
    8202:	4817      	ldr	r0, [pc, #92]	; (8260 <z_arm_fatal_error+0xbc>)
    8204:	4632      	mov	r2, r6
    8206:	2300      	movs	r3, #0
    8208:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    820c:	f01b f933 	bl	23476 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    8210:	4a15      	ldr	r2, [pc, #84]	; (8268 <z_arm_fatal_error+0xc4>)
    8212:	69e3      	ldr	r3, [r4, #28]
    8214:	2503      	movs	r5, #3
    8216:	e9c7 2306 	strd	r2, r3, [r7, #24]
    821a:	46d5      	mov	sp, sl
    821c:	607d      	str	r5, [r7, #4]
    821e:	617d      	str	r5, [r7, #20]
    8220:	480f      	ldr	r0, [pc, #60]	; (8260 <z_arm_fatal_error+0xbc>)
    8222:	f107 0214 	add.w	r2, r7, #20
    8226:	2300      	movs	r3, #0
    8228:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    822c:	f01b f923 	bl	23476 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    8230:	4a0e      	ldr	r2, [pc, #56]	; (826c <z_arm_fatal_error+0xc8>)
    8232:	69a3      	ldr	r3, [r4, #24]
    8234:	607d      	str	r5, [r7, #4]
    8236:	e9c7 2306 	strd	r2, r3, [r7, #24]
    823a:	617d      	str	r5, [r7, #20]
    823c:	4808      	ldr	r0, [pc, #32]	; (8260 <z_arm_fatal_error+0xbc>)
    823e:	2300      	movs	r3, #0
    8240:	f107 0214 	add.w	r2, r7, #20
    8244:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8248:	f01b f915 	bl	23476 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    824c:	4621      	mov	r1, r4
    824e:	4648      	mov	r0, r9
    8250:	f018 fe82 	bl	20f58 <z_fatal_error>
}
    8254:	3720      	adds	r7, #32
    8256:	46bd      	mov	sp, r7
    8258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    825c:	0002abbf 	.word	0x0002abbf
    8260:	000289e0 	.word	0x000289e0
    8264:	0002abee 	.word	0x0002abee
    8268:	0002ac1d 	.word	0x0002ac1d
    826c:	0002ac2c 	.word	0x0002ac2c

00008270 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    8270:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    8272:	2b00      	cmp	r3, #0
    8274:	db08      	blt.n	8288 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8276:	2201      	movs	r2, #1
    8278:	f000 001f 	and.w	r0, r0, #31
    827c:	fa02 f000 	lsl.w	r0, r2, r0
    8280:	095b      	lsrs	r3, r3, #5
    8282:	4a02      	ldr	r2, [pc, #8]	; (828c <arch_irq_enable+0x1c>)
    8284:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    8288:	4770      	bx	lr
    828a:	bf00      	nop
    828c:	e000e100 	.word	0xe000e100

00008290 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    8290:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    8292:	2b00      	cmp	r3, #0
    8294:	db0d      	blt.n	82b2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8296:	2201      	movs	r2, #1
    8298:	095b      	lsrs	r3, r3, #5
    829a:	f000 001f 	and.w	r0, r0, #31
    829e:	fa02 f000 	lsl.w	r0, r2, r0
    82a2:	3320      	adds	r3, #32
    82a4:	4a03      	ldr	r2, [pc, #12]	; (82b4 <arch_irq_disable+0x24>)
    82a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    82aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82ae:	f3bf 8f6f 	isb	sy
}
    82b2:	4770      	bx	lr
    82b4:	e000e100 	.word	0xe000e100

000082b8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    82b8:	4b05      	ldr	r3, [pc, #20]	; (82d0 <arch_irq_is_enabled+0x18>)
    82ba:	0942      	lsrs	r2, r0, #5
    82bc:	f000 001f 	and.w	r0, r0, #31
    82c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    82c4:	2301      	movs	r3, #1
    82c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    82ca:	4010      	ands	r0, r2
    82cc:	4770      	bx	lr
    82ce:	bf00      	nop
    82d0:	e000e100 	.word	0xe000e100

000082d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    82d4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    82d6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82d8:	bfa8      	it	ge
    82da:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    82de:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82e2:	bfb8      	it	lt
    82e4:	4b06      	ldrlt	r3, [pc, #24]	; (8300 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    82ea:	bfac      	ite	ge
    82ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82f4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82f6:	bfb4      	ite	lt
    82f8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    82fa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    82fe:	4770      	bx	lr
    8300:	e000ed14 	.word	0xe000ed14

00008304 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    8304:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    8306:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    8308:	4b04      	ldr	r3, [pc, #16]	; (831c <_arch_isr_direct_pm+0x18>)
    830a:	699a      	ldr	r2, [r3, #24]
    830c:	b11a      	cbz	r2, 8316 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    830e:	2200      	movs	r2, #0
    8310:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    8312:	f01f fc4f 	bl	27bb4 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    8316:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    8318:	bd08      	pop	{r3, pc}
    831a:	bf00      	nop
    831c:	20003d78 	.word	0x20003d78

00008320 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    8320:	bf30      	wfi
    b z_SysNmiOnReset
    8322:	f7ff bffd 	b.w	8320 <z_SysNmiOnReset>
    8326:	bf00      	nop

00008328 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    8328:	4a0f      	ldr	r2, [pc, #60]	; (8368 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    832a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    832c:	4b0f      	ldr	r3, [pc, #60]	; (836c <z_arm_prep_c+0x44>)
    832e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    8332:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    8334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8338:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    833c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    8340:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    8344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    8348:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    834c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    8350:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    8354:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    8358:	f018 fea8 	bl	210ac <z_bss_zero>
	z_data_copy();
    835c:	f019 fec4 	bl	220e8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    8360:	f000 fba8 	bl	8ab4 <z_arm_interrupt_init>
	z_cstart();
    8364:	f018 feac 	bl	210c0 <z_cstart>
    8368:	00001000 	.word	0x00001000
    836c:	e000ed00 	.word	0xe000ed00

00008370 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    8370:	4a09      	ldr	r2, [pc, #36]	; (8398 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    8372:	490a      	ldr	r1, [pc, #40]	; (839c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    8374:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    8376:	6809      	ldr	r1, [r1, #0]
    8378:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    837a:	4909      	ldr	r1, [pc, #36]	; (83a0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    837c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    837e:	684b      	ldr	r3, [r1, #4]
    8380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8384:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    8386:	2300      	movs	r3, #0
    8388:	f383 8811 	msr	BASEPRI, r3
    838c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    8390:	6893      	ldr	r3, [r2, #8]
}
    8392:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    8394:	4770      	bx	lr
    8396:	bf00      	nop
    8398:	20003d78 	.word	0x20003d78
    839c:	0002a2cc 	.word	0x0002a2cc
    83a0:	e000ed00 	.word	0xe000ed00

000083a4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    83a4:	4912      	ldr	r1, [pc, #72]	; (83f0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    83a6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    83a8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    83ac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    83ae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    83b2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    83b6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    83b8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    83bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    83c0:	4f0c      	ldr	r7, [pc, #48]	; (83f4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    83c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    83c6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    83c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    83ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    83cc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    83ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    83d0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    83d2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    83d6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    83d8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    83da:	f000 fbad 	bl	8b38 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    83de:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    83e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    83e6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    83ea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    83ee:	4770      	bx	lr
    ldr r1, =_kernel
    83f0:	20003d78 	.word	0x20003d78
    ldr v4, =_SCS_ICSR
    83f4:	e000ed04 	.word	0xe000ed04

000083f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    83f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    83fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    83fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    8402:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    8406:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    8408:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    840c:	2902      	cmp	r1, #2
    beq _oops
    840e:	d0ff      	beq.n	8410 <_oops>

00008410 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    8410:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    8412:	f01c fa7b 	bl	2490c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    8416:	bd01      	pop	{r0, pc}

00008418 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    8418:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    841c:	9b00      	ldr	r3, [sp, #0]
    841e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    8422:	490a      	ldr	r1, [pc, #40]	; (844c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    8424:	9b01      	ldr	r3, [sp, #4]
    8426:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    842a:	9b02      	ldr	r3, [sp, #8]
    842c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    8430:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    8434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    8438:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    843c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    8440:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    8442:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    8444:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    8446:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    8448:	4770      	bx	lr
    844a:	bf00      	nop
    844c:	00022945 	.word	0x00022945

00008450 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    8450:	4a09      	ldr	r2, [pc, #36]	; (8478 <z_check_thread_stack_fail+0x28>)
{
    8452:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    8454:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    8456:	b170      	cbz	r0, 8476 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    8458:	f113 0f16 	cmn.w	r3, #22
    845c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    845e:	d005      	beq.n	846c <z_check_thread_stack_fail+0x1c>
    8460:	f1a0 0220 	sub.w	r2, r0, #32
    8464:	429a      	cmp	r2, r3
    8466:	d805      	bhi.n	8474 <z_check_thread_stack_fail+0x24>
    8468:	4283      	cmp	r3, r0
    846a:	d203      	bcs.n	8474 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    846c:	4281      	cmp	r1, r0
    846e:	bf28      	it	cs
    8470:	2000      	movcs	r0, #0
    8472:	4770      	bx	lr
    8474:	2000      	movs	r0, #0
}
    8476:	4770      	bx	lr
    8478:	20003d78 	.word	0x20003d78

0000847c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    847c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    847e:	4b09      	ldr	r3, [pc, #36]	; (84a4 <arch_switch_to_main_thread+0x28>)
    8480:	6098      	str	r0, [r3, #8]
{
    8482:	460d      	mov	r5, r1
    8484:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    8486:	f000 fb57 	bl	8b38 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    848a:	4620      	mov	r0, r4
    848c:	f385 8809 	msr	PSP, r5
    8490:	2100      	movs	r1, #0
    8492:	b663      	cpsie	if
    8494:	f381 8811 	msr	BASEPRI, r1
    8498:	f3bf 8f6f 	isb	sy
    849c:	2200      	movs	r2, #0
    849e:	2300      	movs	r3, #0
    84a0:	f01a fa50 	bl	22944 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    84a4:	20003d78 	.word	0x20003d78

000084a8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    84a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    84aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    84ac:	4a0b      	ldr	r2, [pc, #44]	; (84dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    84ae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    84b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    84b2:	bf1e      	ittt	ne
	movne	r1, #0
    84b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    84b6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    84b8:	f01f fb7c 	blne	27bb4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    84bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    84be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    84c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    84c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    84ca:	4905      	ldr	r1, [pc, #20]	; (84e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    84cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    84ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    84d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    84d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    84d6:	4903      	ldr	r1, [pc, #12]	; (84e4 <_isr_wrapper+0x3c>)
	bx r1
    84d8:	4708      	bx	r1
    84da:	0000      	.short	0x0000
	ldr r2, =_kernel
    84dc:	20003d78 	.word	0x20003d78
	ldr r1, =_sw_isr_table
    84e0:	000286b0 	.word	0x000286b0
	ldr r1, =z_arm_int_exit
    84e4:	000084e9 	.word	0x000084e9

000084e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    84e8:	4b04      	ldr	r3, [pc, #16]	; (84fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    84ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    84ec:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    84ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    84f0:	d003      	beq.n	84fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    84f2:	4903      	ldr	r1, [pc, #12]	; (8500 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    84f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    84f8:	600a      	str	r2, [r1, #0]

000084fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    84fa:	4770      	bx	lr
	ldr r3, =_kernel
    84fc:	20003d78 	.word	0x20003d78
	ldr r1, =_SCS_ICSR
    8500:	e000ed04 	.word	0xe000ed04

00008504 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    8504:	b570      	push	{r4, r5, r6, lr}
    8506:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    8508:	4b3c      	ldr	r3, [pc, #240]	; (85fc <bus_fault.constprop.0+0xf8>)
    850a:	9306      	str	r3, [sp, #24]
    850c:	2402      	movs	r4, #2
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    850e:	4606      	mov	r6, r0
    8510:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    8512:	483b      	ldr	r0, [pc, #236]	; (8600 <bus_fault.constprop.0+0xfc>)
    8514:	9401      	str	r4, [sp, #4]
    8516:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    851a:	aa05      	add	r2, sp, #20
    851c:	9405      	str	r4, [sp, #20]
    851e:	f01c fa04 	bl	2492a <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    8522:	4b38      	ldr	r3, [pc, #224]	; (8604 <bus_fault.constprop.0+0x100>)
    8524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8526:	04d9      	lsls	r1, r3, #19
    8528:	d509      	bpl.n	853e <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    852a:	4b37      	ldr	r3, [pc, #220]	; (8608 <bus_fault.constprop.0+0x104>)
    852c:	4834      	ldr	r0, [pc, #208]	; (8600 <bus_fault.constprop.0+0xfc>)
    852e:	9306      	str	r3, [sp, #24]
    8530:	aa05      	add	r2, sp, #20
    8532:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8536:	9401      	str	r4, [sp, #4]
    8538:	9405      	str	r4, [sp, #20]
    853a:	f01c f9f6 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    853e:	4b31      	ldr	r3, [pc, #196]	; (8604 <bus_fault.constprop.0+0x100>)
    8540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8542:	051a      	lsls	r2, r3, #20
    8544:	d50a      	bpl.n	855c <bus_fault.constprop.0+0x58>
		PR_FAULT_INFO("  Unstacking error");
    8546:	4b31      	ldr	r3, [pc, #196]	; (860c <bus_fault.constprop.0+0x108>)
    8548:	9306      	str	r3, [sp, #24]
    854a:	482d      	ldr	r0, [pc, #180]	; (8600 <bus_fault.constprop.0+0xfc>)
    854c:	2302      	movs	r3, #2
    854e:	aa05      	add	r2, sp, #20
    8550:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8554:	9301      	str	r3, [sp, #4]
    8556:	9305      	str	r3, [sp, #20]
    8558:	f01c f9e7 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    855c:	4c29      	ldr	r4, [pc, #164]	; (8604 <bus_fault.constprop.0+0x100>)
    855e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8560:	059b      	lsls	r3, r3, #22
    8562:	d51f      	bpl.n	85a4 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Precise data bus error");
    8564:	4b2a      	ldr	r3, [pc, #168]	; (8610 <bus_fault.constprop.0+0x10c>)
    8566:	4826      	ldr	r0, [pc, #152]	; (8600 <bus_fault.constprop.0+0xfc>)
    8568:	9306      	str	r3, [sp, #24]
    856a:	aa05      	add	r2, sp, #20
    856c:	2302      	movs	r3, #2
    856e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8572:	9301      	str	r3, [sp, #4]
    8574:	9305      	str	r3, [sp, #20]
    8576:	f01c f9d8 	bl	2492a <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    857a:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    857c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    857e:	0410      	lsls	r0, r2, #16
    8580:	d510      	bpl.n	85a4 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    8582:	4a24      	ldr	r2, [pc, #144]	; (8614 <bus_fault.constprop.0+0x110>)
    8584:	481e      	ldr	r0, [pc, #120]	; (8600 <bus_fault.constprop.0+0xfc>)
    8586:	e9cd 2306 	strd	r2, r3, [sp, #24]
    858a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    858e:	2303      	movs	r3, #3
    8590:	aa05      	add	r2, sp, #20
    8592:	9301      	str	r3, [sp, #4]
    8594:	9305      	str	r3, [sp, #20]
    8596:	f01c f9c8 	bl	2492a <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    859a:	b11e      	cbz	r6, 85a4 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    859c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    859e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    85a2:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    85a4:	4b17      	ldr	r3, [pc, #92]	; (8604 <bus_fault.constprop.0+0x100>)
    85a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85a8:	0559      	lsls	r1, r3, #21
    85aa:	d50a      	bpl.n	85c2 <bus_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Imprecise data bus error");
    85ac:	4b1a      	ldr	r3, [pc, #104]	; (8618 <bus_fault.constprop.0+0x114>)
    85ae:	9306      	str	r3, [sp, #24]
    85b0:	4813      	ldr	r0, [pc, #76]	; (8600 <bus_fault.constprop.0+0xfc>)
    85b2:	2302      	movs	r3, #2
    85b4:	aa05      	add	r2, sp, #20
    85b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    85ba:	9301      	str	r3, [sp, #4]
    85bc:	9305      	str	r3, [sp, #20]
    85be:	f01c f9b4 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    85c2:	4b10      	ldr	r3, [pc, #64]	; (8604 <bus_fault.constprop.0+0x100>)
    85c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    85c6:	05d2      	lsls	r2, r2, #23
    85c8:	d513      	bpl.n	85f2 <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Instruction bus error");
    85ca:	4b14      	ldr	r3, [pc, #80]	; (861c <bus_fault.constprop.0+0x118>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    85cc:	9306      	str	r3, [sp, #24]
    85ce:	480c      	ldr	r0, [pc, #48]	; (8600 <bus_fault.constprop.0+0xfc>)
    85d0:	2302      	movs	r3, #2
    85d2:	aa05      	add	r2, sp, #20
    85d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    85d8:	9301      	str	r3, [sp, #4]
    85da:	9305      	str	r3, [sp, #20]
    85dc:	f01c f9a5 	bl	2492a <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    85e0:	4a08      	ldr	r2, [pc, #32]	; (8604 <bus_fault.constprop.0+0x100>)
    85e2:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    85e4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    85e6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    85ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    85ec:	7028      	strb	r0, [r5, #0]

	return reason;
}
    85ee:	b008      	add	sp, #32
    85f0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    85f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85f4:	049b      	lsls	r3, r3, #18
    85f6:	d5f3      	bpl.n	85e0 <bus_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    85f8:	4b09      	ldr	r3, [pc, #36]	; (8620 <bus_fault.constprop.0+0x11c>)
    85fa:	e7e7      	b.n	85cc <bus_fault.constprop.0+0xc8>
    85fc:	0002ac5a 	.word	0x0002ac5a
    8600:	000289e0 	.word	0x000289e0
    8604:	e000ed00 	.word	0xe000ed00
    8608:	0002ac70 	.word	0x0002ac70
    860c:	0002ac81 	.word	0x0002ac81
    8610:	0002ac94 	.word	0x0002ac94
    8614:	0002acad 	.word	0x0002acad
    8618:	0002acc2 	.word	0x0002acc2
    861c:	0002acdd 	.word	0x0002acdd
    8620:	0002acf5 	.word	0x0002acf5

00008624 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    8624:	b510      	push	{r4, lr}
    8626:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    8628:	4b36      	ldr	r3, [pc, #216]	; (8704 <usage_fault.constprop.0+0xe0>)
    862a:	4837      	ldr	r0, [pc, #220]	; (8708 <usage_fault.constprop.0+0xe4>)
    862c:	9306      	str	r3, [sp, #24]
    862e:	2402      	movs	r4, #2
    8630:	aa05      	add	r2, sp, #20
    8632:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8636:	9401      	str	r4, [sp, #4]
    8638:	9405      	str	r4, [sp, #20]
    863a:	f01c f976 	bl	2492a <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    863e:	4b33      	ldr	r3, [pc, #204]	; (870c <usage_fault.constprop.0+0xe8>)
    8640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8642:	019b      	lsls	r3, r3, #6
    8644:	d509      	bpl.n	865a <usage_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Division by zero");
    8646:	4b32      	ldr	r3, [pc, #200]	; (8710 <usage_fault.constprop.0+0xec>)
    8648:	482f      	ldr	r0, [pc, #188]	; (8708 <usage_fault.constprop.0+0xe4>)
    864a:	9306      	str	r3, [sp, #24]
    864c:	aa05      	add	r2, sp, #20
    864e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8652:	9401      	str	r4, [sp, #4]
    8654:	9405      	str	r4, [sp, #20]
    8656:	f01c f968 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    865a:	4b2c      	ldr	r3, [pc, #176]	; (870c <usage_fault.constprop.0+0xe8>)
    865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    865e:	01dc      	lsls	r4, r3, #7
    8660:	d50a      	bpl.n	8678 <usage_fault.constprop.0+0x54>
		PR_FAULT_INFO("  Unaligned memory access");
    8662:	4b2c      	ldr	r3, [pc, #176]	; (8714 <usage_fault.constprop.0+0xf0>)
    8664:	9306      	str	r3, [sp, #24]
    8666:	4828      	ldr	r0, [pc, #160]	; (8708 <usage_fault.constprop.0+0xe4>)
    8668:	2302      	movs	r3, #2
    866a:	aa05      	add	r2, sp, #20
    866c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8670:	9301      	str	r3, [sp, #4]
    8672:	9305      	str	r3, [sp, #20]
    8674:	f01c f959 	bl	2492a <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    8678:	4b24      	ldr	r3, [pc, #144]	; (870c <usage_fault.constprop.0+0xe8>)
    867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    867c:	0318      	lsls	r0, r3, #12
    867e:	d50a      	bpl.n	8696 <usage_fault.constprop.0+0x72>
		PR_FAULT_INFO("  No coprocessor instructions");
    8680:	4b25      	ldr	r3, [pc, #148]	; (8718 <usage_fault.constprop.0+0xf4>)
    8682:	9306      	str	r3, [sp, #24]
    8684:	4820      	ldr	r0, [pc, #128]	; (8708 <usage_fault.constprop.0+0xe4>)
    8686:	2302      	movs	r3, #2
    8688:	aa05      	add	r2, sp, #20
    868a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    868e:	9301      	str	r3, [sp, #4]
    8690:	9305      	str	r3, [sp, #20]
    8692:	f01c f94a 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    8696:	4b1d      	ldr	r3, [pc, #116]	; (870c <usage_fault.constprop.0+0xe8>)
    8698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    869a:	0359      	lsls	r1, r3, #13
    869c:	d50a      	bpl.n	86b4 <usage_fault.constprop.0+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    869e:	4b1f      	ldr	r3, [pc, #124]	; (871c <usage_fault.constprop.0+0xf8>)
    86a0:	9306      	str	r3, [sp, #24]
    86a2:	4819      	ldr	r0, [pc, #100]	; (8708 <usage_fault.constprop.0+0xe4>)
    86a4:	2302      	movs	r3, #2
    86a6:	aa05      	add	r2, sp, #20
    86a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    86ac:	9301      	str	r3, [sp, #4]
    86ae:	9305      	str	r3, [sp, #20]
    86b0:	f01c f93b 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    86b4:	4b15      	ldr	r3, [pc, #84]	; (870c <usage_fault.constprop.0+0xe8>)
    86b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86b8:	039a      	lsls	r2, r3, #14
    86ba:	d50a      	bpl.n	86d2 <usage_fault.constprop.0+0xae>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    86bc:	4b18      	ldr	r3, [pc, #96]	; (8720 <usage_fault.constprop.0+0xfc>)
    86be:	9306      	str	r3, [sp, #24]
    86c0:	4811      	ldr	r0, [pc, #68]	; (8708 <usage_fault.constprop.0+0xe4>)
    86c2:	2302      	movs	r3, #2
    86c4:	aa05      	add	r2, sp, #20
    86c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    86ca:	9301      	str	r3, [sp, #4]
    86cc:	9305      	str	r3, [sp, #20]
    86ce:	f01c f92c 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    86d2:	4b0e      	ldr	r3, [pc, #56]	; (870c <usage_fault.constprop.0+0xe8>)
    86d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86d6:	03db      	lsls	r3, r3, #15
    86d8:	d50a      	bpl.n	86f0 <usage_fault.constprop.0+0xcc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    86da:	4b12      	ldr	r3, [pc, #72]	; (8724 <usage_fault.constprop.0+0x100>)
    86dc:	9306      	str	r3, [sp, #24]
    86de:	480a      	ldr	r0, [pc, #40]	; (8708 <usage_fault.constprop.0+0xe4>)
    86e0:	2302      	movs	r3, #2
    86e2:	aa05      	add	r2, sp, #20
    86e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    86e8:	9301      	str	r3, [sp, #4]
    86ea:	9305      	str	r3, [sp, #20]
    86ec:	f01c f91d 	bl	2492a <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    86f0:	4a06      	ldr	r2, [pc, #24]	; (870c <usage_fault.constprop.0+0xe8>)
    86f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    86f4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    86f8:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    86fc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    86fe:	6293      	str	r3, [r2, #40]	; 0x28
}
    8700:	b008      	add	sp, #32
    8702:	bd10      	pop	{r4, pc}
    8704:	0002ad24 	.word	0x0002ad24
    8708:	000289e0 	.word	0x000289e0
    870c:	e000ed00 	.word	0xe000ed00
    8710:	0002ad3c 	.word	0x0002ad3c
    8714:	0002ad4f 	.word	0x0002ad4f
    8718:	0002ad69 	.word	0x0002ad69
    871c:	0002ad87 	.word	0x0002ad87
    8720:	0002adac 	.word	0x0002adac
    8724:	0002adc6 	.word	0x0002adc6

00008728 <mem_manage_fault>:
{
    8728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    872c:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** MPU FAULT *****");
    872e:	4b48      	ldr	r3, [pc, #288]	; (8850 <mem_manage_fault+0x128>)
    8730:	9306      	str	r3, [sp, #24]
    8732:	2402      	movs	r4, #2
{
    8734:	4607      	mov	r7, r0
    8736:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    8738:	4846      	ldr	r0, [pc, #280]	; (8854 <mem_manage_fault+0x12c>)
    873a:	9401      	str	r4, [sp, #4]
{
    873c:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    873e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8742:	aa05      	add	r2, sp, #20
    8744:	9405      	str	r4, [sp, #20]
    8746:	f01c f8f0 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    874a:	4b43      	ldr	r3, [pc, #268]	; (8858 <mem_manage_fault+0x130>)
    874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    874e:	06d8      	lsls	r0, r3, #27
    8750:	d509      	bpl.n	8766 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    8752:	4b42      	ldr	r3, [pc, #264]	; (885c <mem_manage_fault+0x134>)
    8754:	483f      	ldr	r0, [pc, #252]	; (8854 <mem_manage_fault+0x12c>)
    8756:	9306      	str	r3, [sp, #24]
    8758:	aa05      	add	r2, sp, #20
    875a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    875e:	9401      	str	r4, [sp, #4]
    8760:	9405      	str	r4, [sp, #20]
    8762:	f01c f8e2 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    8766:	4b3c      	ldr	r3, [pc, #240]	; (8858 <mem_manage_fault+0x130>)
    8768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    876a:	0719      	lsls	r1, r3, #28
    876c:	d50a      	bpl.n	8784 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    876e:	4b3c      	ldr	r3, [pc, #240]	; (8860 <mem_manage_fault+0x138>)
    8770:	9306      	str	r3, [sp, #24]
    8772:	4838      	ldr	r0, [pc, #224]	; (8854 <mem_manage_fault+0x12c>)
    8774:	2302      	movs	r3, #2
    8776:	aa05      	add	r2, sp, #20
    8778:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    877c:	9301      	str	r3, [sp, #4]
    877e:	9305      	str	r3, [sp, #20]
    8780:	f01c f8d3 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    8784:	4c34      	ldr	r4, [pc, #208]	; (8858 <mem_manage_fault+0x130>)
    8786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8788:	079a      	lsls	r2, r3, #30
    878a:	d431      	bmi.n	87f0 <mem_manage_fault+0xc8>
	uint32_t mmfar = -EINVAL;
    878c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    8790:	4b31      	ldr	r3, [pc, #196]	; (8858 <mem_manage_fault+0x130>)
    8792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8794:	07dc      	lsls	r4, r3, #31
    8796:	d50a      	bpl.n	87ae <mem_manage_fault+0x86>
		PR_FAULT_INFO("  Instruction Access Violation");
    8798:	4b32      	ldr	r3, [pc, #200]	; (8864 <mem_manage_fault+0x13c>)
    879a:	9306      	str	r3, [sp, #24]
    879c:	482d      	ldr	r0, [pc, #180]	; (8854 <mem_manage_fault+0x12c>)
    879e:	2302      	movs	r3, #2
    87a0:	aa05      	add	r2, sp, #20
    87a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87a6:	9301      	str	r3, [sp, #4]
    87a8:	9305      	str	r3, [sp, #20]
    87aa:	f01c f8be 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    87ae:	4b2a      	ldr	r3, [pc, #168]	; (8858 <mem_manage_fault+0x130>)
    87b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87b2:	0698      	lsls	r0, r3, #26
    87b4:	d50a      	bpl.n	87cc <mem_manage_fault+0xa4>
		PR_FAULT_INFO(
    87b6:	4b2c      	ldr	r3, [pc, #176]	; (8868 <mem_manage_fault+0x140>)
    87b8:	9306      	str	r3, [sp, #24]
    87ba:	4826      	ldr	r0, [pc, #152]	; (8854 <mem_manage_fault+0x12c>)
    87bc:	2302      	movs	r3, #2
    87be:	aa05      	add	r2, sp, #20
    87c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87c4:	9301      	str	r3, [sp, #4]
    87c6:	9305      	str	r3, [sp, #20]
    87c8:	f01c f8af 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    87cc:	4b22      	ldr	r3, [pc, #136]	; (8858 <mem_manage_fault+0x130>)
    87ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    87d0:	06d1      	lsls	r1, r2, #27
    87d2:	d430      	bmi.n	8836 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    87d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    87d6:	0792      	lsls	r2, r2, #30
    87d8:	d42d      	bmi.n	8836 <mem_manage_fault+0x10e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    87da:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    87dc:	4a1e      	ldr	r2, [pc, #120]	; (8858 <mem_manage_fault+0x130>)
    87de:	6a93      	ldr	r3, [r2, #40]	; 0x28
    87e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    87e4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    87e6:	2300      	movs	r3, #0
    87e8:	702b      	strb	r3, [r5, #0]
}
    87ea:	b008      	add	sp, #32
    87ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    87f0:	4b1e      	ldr	r3, [pc, #120]	; (886c <mem_manage_fault+0x144>)
    87f2:	9306      	str	r3, [sp, #24]
    87f4:	4817      	ldr	r0, [pc, #92]	; (8854 <mem_manage_fault+0x12c>)
    87f6:	2302      	movs	r3, #2
    87f8:	aa05      	add	r2, sp, #20
    87fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87fe:	9301      	str	r3, [sp, #4]
    8800:	9305      	str	r3, [sp, #20]
    8802:	f01c f892 	bl	2492a <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    8806:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    8808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    880a:	061b      	lsls	r3, r3, #24
    880c:	d5be      	bpl.n	878c <mem_manage_fault+0x64>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    880e:	4b18      	ldr	r3, [pc, #96]	; (8870 <mem_manage_fault+0x148>)
    8810:	4810      	ldr	r0, [pc, #64]	; (8854 <mem_manage_fault+0x12c>)
    8812:	e9cd 3606 	strd	r3, r6, [sp, #24]
    8816:	aa05      	add	r2, sp, #20
    8818:	2303      	movs	r3, #3
    881a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    881e:	9301      	str	r3, [sp, #4]
    8820:	9305      	str	r3, [sp, #20]
    8822:	f01c f882 	bl	2492a <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    8826:	f1b8 0f00 	cmp.w	r8, #0
    882a:	d0b1      	beq.n	8790 <mem_manage_fault+0x68>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    882c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    882e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8832:	62a3      	str	r3, [r4, #40]	; 0x28
    8834:	e7ac      	b.n	8790 <mem_manage_fault+0x68>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    8836:	685b      	ldr	r3, [r3, #4]
    8838:	051b      	lsls	r3, r3, #20
    883a:	d5ce      	bpl.n	87da <mem_manage_fault+0xb2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    883c:	4639      	mov	r1, r7
    883e:	4630      	mov	r0, r6
    8840:	f7ff fe06 	bl	8450 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    8844:	2800      	cmp	r0, #0
    8846:	d0c8      	beq.n	87da <mem_manage_fault+0xb2>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    8848:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    884c:	2002      	movs	r0, #2
    884e:	e7c5      	b.n	87dc <mem_manage_fault+0xb4>
    8850:	0002adf1 	.word	0x0002adf1
    8854:	000289e0 	.word	0x000289e0
    8858:	e000ed00 	.word	0xe000ed00
    885c:	0002ae07 	.word	0x0002ae07
    8860:	0002ac81 	.word	0x0002ac81
    8864:	0002ae68 	.word	0x0002ae68
    8868:	0002acf5 	.word	0x0002acf5
    886c:	0002ae3a 	.word	0x0002ae3a
    8870:	0002ae52 	.word	0x0002ae52

00008874 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8876:	ab0a      	add	r3, sp, #40	; 0x28
    8878:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    887a:	9302      	str	r3, [sp, #8]
    887c:	4b05      	ldr	r3, [pc, #20]	; (8894 <z_log_msg2_runtime_create.constprop.0+0x20>)
    887e:	9301      	str	r3, [sp, #4]
    8880:	2300      	movs	r3, #0
    8882:	9300      	str	r3, [sp, #0]
    8884:	2201      	movs	r2, #1
    8886:	4618      	mov	r0, r3
    8888:	f7fd fe20 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
    888c:	b007      	add	sp, #28
    888e:	f85d fb04 	ldr.w	pc, [sp], #4
    8892:	bf00      	nop
    8894:	0002ae87 	.word	0x0002ae87

00008898 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    8898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    889c:	4b70      	ldr	r3, [pc, #448]	; (8a60 <z_arm_fault+0x1c8>)
    889e:	685d      	ldr	r5, [r3, #4]
{
    88a0:	b08f      	sub	sp, #60	; 0x3c
    88a2:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    88a4:	f3c5 0408 	ubfx	r4, r5, #0, #9
    88a8:	f04f 0800 	mov.w	r8, #0
    88ac:	f388 8811 	msr	BASEPRI, r8
    88b0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    88b4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    88b8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    88bc:	d10e      	bne.n	88dc <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    88be:	f002 030c 	and.w	r3, r2, #12
    88c2:	2b08      	cmp	r3, #8
    88c4:	d10c      	bne.n	88e0 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    88c6:	4b67      	ldr	r3, [pc, #412]	; (8a64 <z_arm_fault+0x1cc>)
    88c8:	930a      	str	r3, [sp, #40]	; 0x28
    88ca:	4867      	ldr	r0, [pc, #412]	; (8a68 <z_arm_fault+0x1d0>)
    88cc:	2302      	movs	r3, #2
    88ce:	aa09      	add	r2, sp, #36	; 0x24
    88d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88d4:	9305      	str	r3, [sp, #20]
    88d6:	9309      	str	r3, [sp, #36]	; 0x24
    88d8:	f01c f827 	bl	2492a <z_log_msg2_static_create.constprop.0>
		return NULL;
    88dc:	4647      	mov	r7, r8
    88de:	e004      	b.n	88ea <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    88e0:	0712      	lsls	r2, r2, #28
    88e2:	d402      	bmi.n	88ea <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    88e4:	4607      	mov	r7, r0
			*nested_exc = true;
    88e6:	f04f 0801 	mov.w	r8, #1
	*recoverable = false;
    88ea:	2300      	movs	r3, #0
    88ec:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    88f0:	1ee3      	subs	r3, r4, #3
    88f2:	2b09      	cmp	r3, #9
    88f4:	f200 809a 	bhi.w	8a2c <z_arm_fault+0x194>
    88f8:	e8df f003 	tbb	[pc, r3]
    88fc:	878e8a05 	.word	0x878e8a05
    8900:	98989898 	.word	0x98989898
    8904:	9298      	.short	0x9298
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8906:	4e56      	ldr	r6, [pc, #344]	; (8a60 <z_arm_fault+0x1c8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    8908:	4b58      	ldr	r3, [pc, #352]	; (8a6c <z_arm_fault+0x1d4>)
    890a:	4857      	ldr	r0, [pc, #348]	; (8a68 <z_arm_fault+0x1d0>)
    890c:	930a      	str	r3, [sp, #40]	; 0x28
    890e:	2502      	movs	r5, #2
    8910:	aa09      	add	r2, sp, #36	; 0x24
    8912:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8916:	9505      	str	r5, [sp, #20]
    8918:	9509      	str	r5, [sp, #36]	; 0x24
    891a:	f01c f806 	bl	2492a <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    891e:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    8920:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8924:	402c      	ands	r4, r5
	*recoverable = false;
    8926:	f88d 9013 	strb.w	r9, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    892a:	d00b      	beq.n	8944 <z_arm_fault+0xac>
		PR_EXC("  Bus fault on vector table read");
    892c:	4b50      	ldr	r3, [pc, #320]	; (8a70 <z_arm_fault+0x1d8>)
    892e:	930a      	str	r3, [sp, #40]	; 0x28
    8930:	9505      	str	r5, [sp, #20]
    8932:	9509      	str	r5, [sp, #36]	; 0x24
	PR_FAULT_INFO(
    8934:	484c      	ldr	r0, [pc, #304]	; (8a68 <z_arm_fault+0x1d0>)
    8936:	aa09      	add	r2, sp, #36	; 0x24
    8938:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    893c:	f01b fff5 	bl	2492a <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8940:	2400      	movs	r4, #0
}
    8942:	e00c      	b.n	895e <z_arm_fault+0xc6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    8944:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8946:	2b00      	cmp	r3, #0
    8948:	da24      	bge.n	8994 <z_arm_fault+0xfc>
		PR_EXC("  Debug event");
    894a:	4b4a      	ldr	r3, [pc, #296]	; (8a74 <z_arm_fault+0x1dc>)
    894c:	4846      	ldr	r0, [pc, #280]	; (8a68 <z_arm_fault+0x1d0>)
    894e:	930a      	str	r3, [sp, #40]	; 0x28
    8950:	aa09      	add	r2, sp, #36	; 0x24
    8952:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8956:	9505      	str	r5, [sp, #20]
    8958:	9509      	str	r5, [sp, #36]	; 0x24
    895a:	f01b ffe6 	bl	2492a <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    895e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8962:	b9a3      	cbnz	r3, 898e <z_arm_fault+0xf6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    8964:	2220      	movs	r2, #32
    8966:	4639      	mov	r1, r7
    8968:	a806      	add	r0, sp, #24
    896a:	f01c f818 	bl	2499e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    896e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8970:	f1b8 0f00 	cmp.w	r8, #0
    8974:	d06e      	beq.n	8a54 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    8976:	f3c3 0208 	ubfx	r2, r3, #0, #9
    897a:	b922      	cbnz	r2, 8986 <z_arm_fault+0xee>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    897c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    8980:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8984:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    8986:	a906      	add	r1, sp, #24
    8988:	4620      	mov	r0, r4
    898a:	f7ff fc0b 	bl	81a4 <z_arm_fatal_error>
}
    898e:	b00f      	add	sp, #60	; 0x3c
    8990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    8994:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8996:	005b      	lsls	r3, r3, #1
    8998:	d5e1      	bpl.n	895e <z_arm_fault+0xc6>
		PR_EXC("  Fault escalation (see below)");
    899a:	4b37      	ldr	r3, [pc, #220]	; (8a78 <z_arm_fault+0x1e0>)
    899c:	4832      	ldr	r0, [pc, #200]	; (8a68 <z_arm_fault+0x1d0>)
    899e:	930a      	str	r3, [sp, #40]	; 0x28
    89a0:	aa09      	add	r2, sp, #36	; 0x24
    89a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    89a6:	9505      	str	r5, [sp, #20]
    89a8:	9509      	str	r5, [sp, #36]	; 0x24
    89aa:	f01b ffbe 	bl	2492a <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    89ae:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    89b0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    89b4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    89b8:	429a      	cmp	r2, r3
    89ba:	d00a      	beq.n	89d2 <z_arm_fault+0x13a>
		} else if (SCB_MMFSR != 0) {
    89bc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    89c0:	b1b3      	cbz	r3, 89f0 <z_arm_fault+0x158>
			reason = mem_manage_fault(esf, 1, recoverable);
    89c2:	f10d 0213 	add.w	r2, sp, #19
    89c6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    89c8:	4638      	mov	r0, r7
    89ca:	f7ff fead 	bl	8728 <mem_manage_fault>
    89ce:	4604      	mov	r4, r0
		break;
    89d0:	e7c5      	b.n	895e <z_arm_fault+0xc6>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    89d2:	683b      	ldr	r3, [r7, #0]
    89d4:	4a29      	ldr	r2, [pc, #164]	; (8a7c <z_arm_fault+0x1e4>)
    89d6:	4824      	ldr	r0, [pc, #144]	; (8a68 <z_arm_fault+0x1d0>)
    89d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    89dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    89e0:	2303      	movs	r3, #3
    89e2:	aa09      	add	r2, sp, #36	; 0x24
    89e4:	9305      	str	r3, [sp, #20]
    89e6:	9309      	str	r3, [sp, #36]	; 0x24
    89e8:	f01b ff9f 	bl	2492a <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    89ec:	683c      	ldr	r4, [r7, #0]
    89ee:	e7b6      	b.n	895e <z_arm_fault+0xc6>
		} else if (SCB_BFSR != 0) {
    89f0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    89f4:	b12b      	cbz	r3, 8a02 <z_arm_fault+0x16a>
			reason = bus_fault(esf, 1, recoverable);
    89f6:	f10d 0113 	add.w	r1, sp, #19
    89fa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    89fc:	f7ff fd82 	bl	8504 <bus_fault.constprop.0>
    8a00:	e7e5      	b.n	89ce <z_arm_fault+0x136>
		} else if (SCB_UFSR != 0) {
    8a02:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    8a04:	b29b      	uxth	r3, r3
    8a06:	2b00      	cmp	r3, #0
    8a08:	d0a9      	beq.n	895e <z_arm_fault+0xc6>
		reason = usage_fault(esf);
    8a0a:	f7ff fe0b 	bl	8624 <usage_fault.constprop.0>
    8a0e:	e7de      	b.n	89ce <z_arm_fault+0x136>
		reason = mem_manage_fault(esf, 0, recoverable);
    8a10:	f10d 0213 	add.w	r2, sp, #19
    8a14:	2100      	movs	r1, #0
    8a16:	e7d7      	b.n	89c8 <z_arm_fault+0x130>
		reason = bus_fault(esf, 0, recoverable);
    8a18:	f10d 0113 	add.w	r1, sp, #19
    8a1c:	2000      	movs	r0, #0
    8a1e:	e7ed      	b.n	89fc <z_arm_fault+0x164>
	PR_FAULT_INFO(
    8a20:	4b17      	ldr	r3, [pc, #92]	; (8a80 <z_arm_fault+0x1e8>)
    8a22:	930a      	str	r3, [sp, #40]	; 0x28
    8a24:	2302      	movs	r3, #2
    8a26:	9305      	str	r3, [sp, #20]
    8a28:	9309      	str	r3, [sp, #36]	; 0x24
    8a2a:	e783      	b.n	8934 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    8a2c:	4a15      	ldr	r2, [pc, #84]	; (8a84 <z_arm_fault+0x1ec>)
    8a2e:	4b16      	ldr	r3, [pc, #88]	; (8a88 <z_arm_fault+0x1f0>)
    8a30:	490d      	ldr	r1, [pc, #52]	; (8a68 <z_arm_fault+0x1d0>)
    8a32:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
    8a36:	bf18      	it	ne
    8a38:	4613      	movne	r3, r2
    8a3a:	3c10      	subs	r4, #16
    8a3c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    8a40:	2400      	movs	r4, #0
    8a42:	4b12      	ldr	r3, [pc, #72]	; (8a8c <z_arm_fault+0x1f4>)
    8a44:	9301      	str	r3, [sp, #4]
    8a46:	9400      	str	r4, [sp, #0]
    8a48:	4623      	mov	r3, r4
    8a4a:	2201      	movs	r2, #1
    8a4c:	4620      	mov	r0, r4
    8a4e:	f7ff ff11 	bl	8874 <z_log_msg2_runtime_create.constprop.0>
}
    8a52:	e784      	b.n	895e <z_arm_fault+0xc6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8a54:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    8a58:	f023 0301 	bic.w	r3, r3, #1
    8a5c:	e792      	b.n	8984 <z_arm_fault+0xec>
    8a5e:	bf00      	nop
    8a60:	e000ed00 	.word	0xe000ed00
    8a64:	0002aec8 	.word	0x0002aec8
    8a68:	000289e0 	.word	0x000289e0
    8a6c:	0002aef3 	.word	0x0002aef3
    8a70:	0002af0a 	.word	0x0002af0a
    8a74:	0002af2b 	.word	0x0002af2b
    8a78:	0002af39 	.word	0x0002af39
    8a7c:	0002af58 	.word	0x0002af58
    8a80:	0002af74 	.word	0x0002af74
    8a84:	0002aeaf 	.word	0x0002aeaf
    8a88:	0002ae9a 	.word	0x0002ae9a
    8a8c:	0002ae87 	.word	0x0002ae87

00008a90 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    8a90:	4a02      	ldr	r2, [pc, #8]	; (8a9c <z_arm_fault_init+0xc>)
    8a92:	6953      	ldr	r3, [r2, #20]
    8a94:	f043 0310 	orr.w	r3, r3, #16
    8a98:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    8a9a:	4770      	bx	lr
    8a9c:	e000ed00 	.word	0xe000ed00

00008aa0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    8aa0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    8aa4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    8aa8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    8aaa:	4672      	mov	r2, lr
	bl z_arm_fault
    8aac:	f7ff fef4 	bl	8898 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    8ab0:	bd01      	pop	{r0, pc}
    8ab2:	bf00      	nop

00008ab4 <z_arm_interrupt_init>:
    8ab4:	4804      	ldr	r0, [pc, #16]	; (8ac8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    8ab6:	2300      	movs	r3, #0
    8ab8:	2120      	movs	r1, #32
    8aba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    8abc:	3301      	adds	r3, #1
    8abe:	2b30      	cmp	r3, #48	; 0x30
    8ac0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    8ac4:	d1f9      	bne.n	8aba <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    8ac6:	4770      	bx	lr
    8ac8:	e000e100 	.word	0xe000e100

00008acc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    8acc:	f01f fd4a 	bl	28564 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    8ad0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    8ad2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    8ad6:	4808      	ldr	r0, [pc, #32]	; (8af8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    8ad8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    8adc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    8ade:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    8ae2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    8ae6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    8ae8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    8aea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    8aee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    8af2:	f7ff fc19 	bl	8328 <z_arm_prep_c>
    8af6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    8af8:	20006d80 	.word	0x20006d80

00008afc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    8afc:	4b06      	ldr	r3, [pc, #24]	; (8b18 <z_impl_k_thread_abort+0x1c>)
    8afe:	689b      	ldr	r3, [r3, #8]
    8b00:	4283      	cmp	r3, r0
    8b02:	d107      	bne.n	8b14 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8b04:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    8b08:	b123      	cbz	r3, 8b14 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    8b0a:	4a04      	ldr	r2, [pc, #16]	; (8b1c <z_impl_k_thread_abort+0x20>)
    8b0c:	6853      	ldr	r3, [r2, #4]
    8b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8b12:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    8b14:	f019 ba84 	b.w	22020 <z_thread_abort>
    8b18:	20003d78 	.word	0x20003d78
    8b1c:	e000ed00 	.word	0xe000ed00

00008b20 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    8b20:	4b02      	ldr	r3, [pc, #8]	; (8b2c <z_arm_configure_static_mpu_regions+0xc>)
    8b22:	4a03      	ldr	r2, [pc, #12]	; (8b30 <z_arm_configure_static_mpu_regions+0x10>)
    8b24:	4803      	ldr	r0, [pc, #12]	; (8b34 <z_arm_configure_static_mpu_regions+0x14>)
    8b26:	2101      	movs	r1, #1
    8b28:	f000 b888 	b.w	8c3c <arm_core_mpu_configure_static_mpu_regions>
    8b2c:	20040000 	.word	0x20040000
    8b30:	20000000 	.word	0x20000000
    8b34:	00028d10 	.word	0x00028d10

00008b38 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    8b38:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    8b3a:	4b05      	ldr	r3, [pc, #20]	; (8b50 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    8b3c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    8b3e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    8b40:	4a04      	ldr	r2, [pc, #16]	; (8b54 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    8b42:	2120      	movs	r1, #32
    8b44:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    8b48:	4618      	mov	r0, r3
    8b4a:	2101      	movs	r1, #1
    8b4c:	f000 b880 	b.w	8c50 <arm_core_mpu_configure_dynamic_mpu_regions>
    8b50:	200020a0 	.word	0x200020a0
    8b54:	150b0000 	.word	0x150b0000

00008b58 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    8b58:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    8b5a:	4f29      	ldr	r7, [pc, #164]	; (8c00 <mpu_configure_regions+0xa8>)
    8b5c:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    8b5e:	2600      	movs	r6, #0
    8b60:	428e      	cmp	r6, r1
    8b62:	da17      	bge.n	8b94 <mpu_configure_regions+0x3c>
		if (regions[i].size == 0U) {
    8b64:	6844      	ldr	r4, [r0, #4]
    8b66:	2c00      	cmp	r4, #0
    8b68:	d046      	beq.n	8bf8 <mpu_configure_regions+0xa0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    8b6a:	b1e3      	cbz	r3, 8ba6 <mpu_configure_regions+0x4e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    8b6c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    8b70:	ea14 0f0c 	tst.w	r4, ip
    8b74:	d011      	beq.n	8b9a <mpu_configure_regions+0x42>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    8b76:	4b23      	ldr	r3, [pc, #140]	; (8c04 <mpu_configure_regions+0xac>)
    8b78:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    8b7c:	2303      	movs	r3, #3
    8b7e:	9301      	str	r3, [sp, #4]
    8b80:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    8b82:	4821      	ldr	r0, [pc, #132]	; (8c08 <mpu_configure_regions+0xb0>)
    8b84:	aa05      	add	r2, sp, #20
    8b86:	2300      	movs	r3, #0
    8b88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8b8c:	f01a fc73 	bl	23476 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8b90:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    8b94:	4610      	mov	r0, r2
    8b96:	b009      	add	sp, #36	; 0x24
    8b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    8b9a:	2c1f      	cmp	r4, #31
    8b9c:	d9eb      	bls.n	8b76 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    8b9e:	6805      	ldr	r5, [r0, #0]
		&&
    8ba0:	ea1c 0f05 	tst.w	ip, r5
    8ba4:	d1e7      	bne.n	8b76 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    8ba6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    8ba8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8baa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8bae:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    8bb0:	d910      	bls.n	8bd4 <mpu_configure_regions+0x7c>
	if (size > (1UL << 31)) {
    8bb2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    8bb6:	d80f      	bhi.n	8bd8 <mpu_configure_regions+0x80>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8bb8:	3c01      	subs	r4, #1
    8bba:	fab4 f484 	clz	r4, r4
    8bbe:	f1c4 041f 	rsb	r4, r4, #31
    8bc2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    8bc4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8bc6:	ea4c 0404 	orr.w	r4, ip, r4
    8bca:	d907      	bls.n	8bdc <mpu_configure_regions+0x84>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    8bcc:	4b0f      	ldr	r3, [pc, #60]	; (8c0c <mpu_configure_regions+0xb4>)
    8bce:	e9cd 3206 	strd	r3, r2, [sp, #24]
    8bd2:	e7d3      	b.n	8b7c <mpu_configure_regions+0x24>
		return REGION_32B;
    8bd4:	2408      	movs	r4, #8
    8bd6:	e7f5      	b.n	8bc4 <mpu_configure_regions+0x6c>
		return REGION_4G;
    8bd8:	243e      	movs	r4, #62	; 0x3e
    8bda:	e7f3      	b.n	8bc4 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8bdc:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    8be0:	4315      	orrs	r5, r2
    8be2:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8be6:	f044 0401 	orr.w	r4, r4, #1
    8bea:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8bee:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    8bf2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8bf4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    8bf8:	3601      	adds	r6, #1
    8bfa:	300c      	adds	r0, #12
    8bfc:	e7b0      	b.n	8b60 <mpu_configure_regions+0x8>
    8bfe:	bf00      	nop
    8c00:	e000ed00 	.word	0xe000ed00
    8c04:	0002af9c 	.word	0x0002af9c
    8c08:	000289d0 	.word	0x000289d0
    8c0c:	0002afbf 	.word	0x0002afbf

00008c10 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    8c10:	4b04      	ldr	r3, [pc, #16]	; (8c24 <arm_core_mpu_enable+0x14>)
    8c12:	2205      	movs	r2, #5
    8c14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    8c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8c1c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    8c20:	4770      	bx	lr
    8c22:	bf00      	nop
    8c24:	e000ed00 	.word	0xe000ed00

00008c28 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    8c28:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    8c2c:	4b02      	ldr	r3, [pc, #8]	; (8c38 <arm_core_mpu_disable+0x10>)
    8c2e:	2200      	movs	r2, #0
    8c30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8c34:	4770      	bx	lr
    8c36:	bf00      	nop
    8c38:	e000ed00 	.word	0xe000ed00

00008c3c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    8c3c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    8c3e:	4c03      	ldr	r4, [pc, #12]	; (8c4c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    8c40:	2301      	movs	r3, #1
    8c42:	7822      	ldrb	r2, [r4, #0]
    8c44:	f7ff ff88 	bl	8b58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8c48:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    8c4a:	bd10      	pop	{r4, pc}
    8c4c:	20003dfa 	.word	0x20003dfa

00008c50 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    8c50:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    8c52:	4a09      	ldr	r2, [pc, #36]	; (8c78 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    8c54:	2300      	movs	r3, #0
    8c56:	7812      	ldrb	r2, [r2, #0]
    8c58:	f7ff ff7e 	bl	8b58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    8c5c:	f110 0f16 	cmn.w	r0, #22
    8c60:	d003      	beq.n	8c6a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    8c62:	4b06      	ldr	r3, [pc, #24]	; (8c7c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    8c64:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    8c66:	2807      	cmp	r0, #7
    8c68:	dd00      	ble.n	8c6c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    8c6a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    8c6c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    8c70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    8c74:	3001      	adds	r0, #1
    8c76:	e7f6      	b.n	8c66 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    8c78:	20003dfa 	.word	0x20003dfa
    8c7c:	e000ed00 	.word	0xe000ed00

00008c80 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    8c80:	4914      	ldr	r1, [pc, #80]	; (8cd4 <z_arm_mpu_init+0x54>)
    8c82:	6808      	ldr	r0, [r1, #0]
    8c84:	2808      	cmp	r0, #8
{
    8c86:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    8c88:	d821      	bhi.n	8cce <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    8c8a:	f7ff ffcd 	bl	8c28 <arm_core_mpu_disable>
    8c8e:	4c12      	ldr	r4, [pc, #72]	; (8cd8 <z_arm_mpu_init+0x58>)
    8c90:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8c92:	2200      	movs	r2, #0
    8c94:	4290      	cmp	r0, r2
    8c96:	f101 010c 	add.w	r1, r1, #12
    8c9a:	d105      	bne.n	8ca8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    8c9c:	4b0f      	ldr	r3, [pc, #60]	; (8cdc <z_arm_mpu_init+0x5c>)
    8c9e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    8ca0:	f7ff ffb6 	bl	8c10 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    8ca4:	2000      	movs	r0, #0
}
    8ca6:	bd10      	pop	{r4, pc}
    8ca8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8cac:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    8cb0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    8cb4:	4313      	orrs	r3, r2
    8cb6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8cba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8cc2:	f043 0301 	orr.w	r3, r3, #1
    8cc6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8cca:	3201      	adds	r2, #1
    8ccc:	e7e2      	b.n	8c94 <z_arm_mpu_init+0x14>
		return -1;
    8cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8cd2:	e7e8      	b.n	8ca6 <z_arm_mpu_init+0x26>
    8cd4:	00028d1c 	.word	0x00028d1c
    8cd8:	e000ed00 	.word	0xe000ed00
    8cdc:	20003dfa 	.word	0x20003dfa

00008ce0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    8ce0:	4b01      	ldr	r3, [pc, #4]	; (8ce8 <__stdout_hook_install+0x8>)
    8ce2:	6018      	str	r0, [r3, #0]
}
    8ce4:	4770      	bx	lr
    8ce6:	bf00      	nop
    8ce8:	20000274 	.word	0x20000274

00008cec <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    8cec:	b510      	push	{r4, lr}
	__asm__ volatile(
    8cee:	f04f 0320 	mov.w	r3, #32
    8cf2:	f3ef 8011 	mrs	r0, BASEPRI
    8cf6:	f383 8812 	msr	BASEPRI_MAX, r3
    8cfa:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    8cfe:	4a11      	ldr	r2, [pc, #68]	; (8d44 <nordicsemi_nrf52_init+0x58>)
    8d00:	2301      	movs	r3, #1
    8d02:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8d0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    8d0e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8d12:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    8d16:	2c08      	cmp	r4, #8
    8d18:	d108      	bne.n	8d2c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8d1a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    8d1e:	2905      	cmp	r1, #5
    8d20:	d804      	bhi.n	8d2c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    8d22:	4c09      	ldr	r4, [pc, #36]	; (8d48 <nordicsemi_nrf52_init+0x5c>)
    8d24:	5c61      	ldrb	r1, [r4, r1]
    8d26:	b109      	cbz	r1, 8d2c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    8d28:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d30:	2201      	movs	r2, #1
    8d32:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    8d36:	f380 8811 	msr	BASEPRI, r0
    8d3a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    8d3e:	2000      	movs	r0, #0
    8d40:	bd10      	pop	{r4, pc}
    8d42:	bf00      	nop
    8d44:	4001e000 	.word	0x4001e000
    8d48:	0002aff8 	.word	0x0002aff8

00008d4c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8d4c:	b120      	cbz	r0, 8d58 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    8d4e:	4b03      	ldr	r3, [pc, #12]	; (8d5c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    8d50:	0180      	lsls	r0, r0, #6
    8d52:	f043 0301 	orr.w	r3, r3, #1
    8d56:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8d58:	4770      	bx	lr
    8d5a:	bf00      	nop
    8d5c:	00028b10 	.word	0x00028b10

00008d60 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    8d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d64:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    8d68:	07db      	lsls	r3, r3, #31
    8d6a:	d52e      	bpl.n	8dca <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    8d6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8d70:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    8d74:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    8d78:	2b07      	cmp	r3, #7
    8d7a:	d126      	bne.n	8dca <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8d7c:	4a14      	ldr	r2, [pc, #80]	; (8dd0 <board_nrf52840dongle_nrf52840_init+0x70>)
    8d7e:	2301      	movs	r3, #1
    8d80:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    8d84:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d0fb      	beq.n	8d84 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    8d8c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    8d90:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    8d94:	f023 0307 	bic.w	r3, r3, #7
    8d98:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    8d9c:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    8da0:	2300      	movs	r3, #0
    8da2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    8da6:	4a0a      	ldr	r2, [pc, #40]	; (8dd0 <board_nrf52840dongle_nrf52840_init+0x70>)
    8da8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8dac:	2b00      	cmp	r3, #0
    8dae:	d0fb      	beq.n	8da8 <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    8db0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8db4:	4907      	ldr	r1, [pc, #28]	; (8dd4 <board_nrf52840dongle_nrf52840_init+0x74>)
    8db6:	4b08      	ldr	r3, [pc, #32]	; (8dd8 <board_nrf52840dongle_nrf52840_init+0x78>)
    8db8:	68ca      	ldr	r2, [r1, #12]
    8dba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8dbe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8dc0:	60cb      	str	r3, [r1, #12]
    8dc2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    8dc6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8dc8:	e7fd      	b.n	8dc6 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    8dca:	2000      	movs	r0, #0
    8dcc:	4770      	bx	lr
    8dce:	bf00      	nop
    8dd0:	4001e000 	.word	0x4001e000
    8dd4:	e000ed00 	.word	0xe000ed00
    8dd8:	05fa0004 	.word	0x05fa0004

00008ddc <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    8ddc:	4b0e      	ldr	r3, [pc, #56]	; (8e18 <bt_hex_real+0x3c>)
    8dde:	2940      	cmp	r1, #64	; 0x40
{
    8de0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    8de2:	bf28      	it	cs
    8de4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    8de6:	4c0d      	ldr	r4, [pc, #52]	; (8e1c <bt_hex_real+0x40>)
    8de8:	1846      	adds	r6, r0, r1
    8dea:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    8dec:	42b0      	cmp	r0, r6
    8dee:	f103 0302 	add.w	r3, r3, #2
    8df2:	d104      	bne.n	8dfe <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    8df4:	2300      	movs	r3, #0
    8df6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    8dfa:	4807      	ldr	r0, [pc, #28]	; (8e18 <bt_hex_real+0x3c>)
    8dfc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    8dfe:	7802      	ldrb	r2, [r0, #0]
    8e00:	0912      	lsrs	r2, r2, #4
    8e02:	5ca2      	ldrb	r2, [r4, r2]
    8e04:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    8e08:	f810 2b01 	ldrb.w	r2, [r0], #1
    8e0c:	f002 020f 	and.w	r2, r2, #15
    8e10:	5ca2      	ldrb	r2, [r4, r2]
    8e12:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    8e16:	e7e9      	b.n	8dec <bt_hex_real+0x10>
    8e18:	20003e19 	.word	0x20003e19
    8e1c:	0002affe 	.word	0x0002affe

00008e20 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    8e20:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    8e22:	7803      	ldrb	r3, [r0, #0]
    8e24:	b08b      	sub	sp, #44	; 0x2c
    8e26:	4604      	mov	r4, r0
    8e28:	ad07      	add	r5, sp, #28
    8e2a:	2b03      	cmp	r3, #3
    8e2c:	d821      	bhi.n	8e72 <bt_addr_le_str_real+0x52>
    8e2e:	e8df f003 	tbb	[pc, r3]
    8e32:	1a02      	.short	0x1a02
    8e34:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    8e36:	4912      	ldr	r1, [pc, #72]	; (8e80 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    8e38:	4628      	mov	r0, r5
    8e3a:	f01b fd79 	bl	24930 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8e3e:	7863      	ldrb	r3, [r4, #1]
    8e40:	9304      	str	r3, [sp, #16]
    8e42:	78a3      	ldrb	r3, [r4, #2]
    8e44:	9303      	str	r3, [sp, #12]
    8e46:	78e3      	ldrb	r3, [r4, #3]
    8e48:	9302      	str	r3, [sp, #8]
    8e4a:	7923      	ldrb	r3, [r4, #4]
    8e4c:	9301      	str	r3, [sp, #4]
    8e4e:	7963      	ldrb	r3, [r4, #5]
    8e50:	9300      	str	r3, [sp, #0]
    8e52:	4a0c      	ldr	r2, [pc, #48]	; (8e84 <bt_addr_le_str_real+0x64>)
    8e54:	79a3      	ldrb	r3, [r4, #6]
    8e56:	9505      	str	r5, [sp, #20]
    8e58:	211e      	movs	r1, #30
    8e5a:	480b      	ldr	r0, [pc, #44]	; (8e88 <bt_addr_le_str_real+0x68>)
    8e5c:	f019 fc5f 	bl	2271e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8e60:	4809      	ldr	r0, [pc, #36]	; (8e88 <bt_addr_le_str_real+0x68>)
    8e62:	b00b      	add	sp, #44	; 0x2c
    8e64:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    8e66:	4909      	ldr	r1, [pc, #36]	; (8e8c <bt_addr_le_str_real+0x6c>)
    8e68:	e7e6      	b.n	8e38 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    8e6a:	4909      	ldr	r1, [pc, #36]	; (8e90 <bt_addr_le_str_real+0x70>)
    8e6c:	e7e4      	b.n	8e38 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    8e6e:	4909      	ldr	r1, [pc, #36]	; (8e94 <bt_addr_le_str_real+0x74>)
    8e70:	e7e2      	b.n	8e38 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8e72:	4a09      	ldr	r2, [pc, #36]	; (8e98 <bt_addr_le_str_real+0x78>)
    8e74:	210a      	movs	r1, #10
    8e76:	4628      	mov	r0, r5
    8e78:	f019 fc51 	bl	2271e <snprintk>
		break;
    8e7c:	e7df      	b.n	8e3e <bt_addr_le_str_real+0x1e>
    8e7e:	bf00      	nop
    8e80:	0002a3b5 	.word	0x0002a3b5
    8e84:	0002a3d7 	.word	0x0002a3d7
    8e88:	20003dfb 	.word	0x20003dfb
    8e8c:	0002a3bc 	.word	0x0002a3bc
    8e90:	0002a3c3 	.word	0x0002a3c3
    8e94:	0002a3cd 	.word	0x0002a3cd
    8e98:	0002c621 	.word	0x0002c621

00008e9c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    8e9c:	b570      	push	{r4, r5, r6, lr}
    8e9e:	4c21      	ldr	r4, [pc, #132]	; (8f24 <le_gen_dhkey+0x88>)
    8ea0:	f3bf 8f5b 	dmb	ish
    8ea4:	6823      	ldr	r3, [r4, #0]
    8ea6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8eaa:	07da      	lsls	r2, r3, #31
{
    8eac:	4606      	mov	r6, r0
    8eae:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8eb0:	d501      	bpl.n	8eb6 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8eb2:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    8eb4:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    8eb6:	2901      	cmp	r1, #1
    8eb8:	d831      	bhi.n	8f1e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8eba:	f3bf 8f5b 	dmb	ish
    8ebe:	e854 3f00 	ldrex	r3, [r4]
    8ec2:	f043 0202 	orr.w	r2, r3, #2
    8ec6:	e844 2100 	strex	r1, r2, [r4]
    8eca:	2900      	cmp	r1, #0
    8ecc:	d1f7      	bne.n	8ebe <le_gen_dhkey+0x22>
    8ece:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    8ed2:	079b      	lsls	r3, r3, #30
    8ed4:	d4ed      	bmi.n	8eb2 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    8ed6:	4814      	ldr	r0, [pc, #80]	; (8f28 <le_gen_dhkey+0x8c>)
    8ed8:	4631      	mov	r1, r6
    8eda:	f01b fe00 	bl	24ade <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    8ede:	4813      	ldr	r0, [pc, #76]	; (8f2c <le_gen_dhkey+0x90>)
    8ee0:	f106 0120 	add.w	r1, r6, #32
    8ee4:	f01b fdfb 	bl	24ade <sys_memcpy_swap.constprop.0>
    8ee8:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    8eec:	b175      	cbz	r5, 8f0c <le_gen_dhkey+0x70>
    8eee:	e854 3f00 	ldrex	r3, [r4]
    8ef2:	f043 0304 	orr.w	r3, r3, #4
    8ef6:	e844 3200 	strex	r2, r3, [r4]
    8efa:	2a00      	cmp	r2, #0
    8efc:	d1f7      	bne.n	8eee <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8efe:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    8f02:	480b      	ldr	r0, [pc, #44]	; (8f30 <le_gen_dhkey+0x94>)
    8f04:	f018 fb78 	bl	215f8 <z_impl_k_sem_give>
    8f08:	2000      	movs	r0, #0
    8f0a:	e7d3      	b.n	8eb4 <le_gen_dhkey+0x18>
    8f0c:	e854 3f00 	ldrex	r3, [r4]
    8f10:	f023 0304 	bic.w	r3, r3, #4
    8f14:	e844 3200 	strex	r2, r3, [r4]
    8f18:	2a00      	cmp	r2, #0
    8f1a:	d0f0      	beq.n	8efe <le_gen_dhkey+0x62>
    8f1c:	e7f6      	b.n	8f0c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    8f1e:	2012      	movs	r0, #18
    8f20:	e7c8      	b.n	8eb4 <le_gen_dhkey+0x18>
    8f22:	bf00      	nop
    8f24:	200020ac 	.word	0x200020ac
    8f28:	20003eba 	.word	0x20003eba
    8f2c:	20003eda 	.word	0x20003eda
    8f30:	200009d4 	.word	0x200009d4

00008f34 <ecc_thread>:
{
    8f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8f38:	4e6d      	ldr	r6, [pc, #436]	; (90f0 <ecc_thread+0x1bc>)
	return z_impl_k_sem_take(sem, timeout);
    8f3a:	4f6e      	ldr	r7, [pc, #440]	; (90f4 <ecc_thread+0x1c0>)
    8f3c:	b089      	sub	sp, #36	; 0x24
    8f3e:	4635      	mov	r5, r6
    8f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f48:	4638      	mov	r0, r7
    8f4a:	f018 fb7b 	bl	21644 <z_impl_k_sem_take>
    8f4e:	f3bf 8f5b 	dmb	ish
    8f52:	6834      	ldr	r4, [r6, #0]
    8f54:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8f58:	f014 0401 	ands.w	r4, r4, #1
    8f5c:	d062      	beq.n	9024 <ecc_thread+0xf0>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    8f5e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 90f8 <ecc_thread+0x1c4>
    8f62:	4c66      	ldr	r4, [pc, #408]	; (90fc <ecc_thread+0x1c8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    8f64:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9100 <ecc_thread+0x1cc>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    8f68:	4866      	ldr	r0, [pc, #408]	; (9104 <ecc_thread+0x1d0>)
    8f6a:	464a      	mov	r2, r9
    8f6c:	4621      	mov	r1, r4
    8f6e:	f01a fbdf 	bl	23730 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    8f72:	4603      	mov	r3, r0
    8f74:	2800      	cmp	r0, #0
    8f76:	d142      	bne.n	8ffe <ecc_thread+0xca>
			BT_ERR("Failed to create ECC public/private pair");
    8f78:	4a63      	ldr	r2, [pc, #396]	; (9108 <ecc_thread+0x1d4>)
    8f7a:	9206      	str	r2, [sp, #24]
    8f7c:	2202      	movs	r2, #2
    8f7e:	9201      	str	r2, [sp, #4]
    8f80:	9205      	str	r2, [sp, #20]
    8f82:	4862      	ldr	r0, [pc, #392]	; (910c <ecc_thread+0x1d8>)
    8f84:	aa05      	add	r2, sp, #20
    8f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return BT_HCI_ERR_UNSPECIFIED;
    8f8a:	f04f 091f 	mov.w	r9, #31
    8f8e:	f01a fa72 	bl	23476 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f9a:	2001      	movs	r0, #1
    8f9c:	f000 f982 	bl	92a4 <bt_buf_get_rx>
    8fa0:	f100 0808 	add.w	r8, r0, #8
    8fa4:	2102      	movs	r1, #2
    8fa6:	4604      	mov	r4, r0
    8fa8:	4640      	mov	r0, r8
    8faa:	f01e f87d 	bl	270a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    8fae:	233e      	movs	r3, #62	; 0x3e
    8fb0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    8fb2:	2342      	movs	r3, #66	; 0x42
    8fb4:	7043      	strb	r3, [r0, #1]
    8fb6:	2101      	movs	r1, #1
    8fb8:	4640      	mov	r0, r8
    8fba:	f01e f875 	bl	270a8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    8fbe:	2308      	movs	r3, #8
    8fc0:	7003      	strb	r3, [r0, #0]
    8fc2:	2141      	movs	r1, #65	; 0x41
    8fc4:	4640      	mov	r0, r8
    8fc6:	f01e f86f 	bl	270a8 <net_buf_simple_add>
    8fca:	4680      	mov	r8, r0
	evt->status = status;
    8fcc:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    8fd0:	f1b9 0f00 	cmp.w	r9, #0
    8fd4:	d01d      	beq.n	9012 <ecc_thread+0xde>
		(void)memset(evt->key, 0, sizeof(evt->key));
    8fd6:	2240      	movs	r2, #64	; 0x40
    8fd8:	2100      	movs	r1, #0
    8fda:	f01b fceb 	bl	249b4 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8fde:	f3bf 8f5b 	dmb	ish
    8fe2:	e855 3f00 	ldrex	r3, [r5]
    8fe6:	f023 0301 	bic.w	r3, r3, #1
    8fea:	e845 3200 	strex	r2, r3, [r5]
    8fee:	2a00      	cmp	r2, #0
    8ff0:	d1f7      	bne.n	8fe2 <ecc_thread+0xae>
    8ff2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    8ff6:	4620      	mov	r0, r4
	bt_recv(buf);
    8ff8:	f001 fac6 	bl	a588 <bt_recv>
	while (true) {
    8ffc:	e7a0      	b.n	8f40 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    8ffe:	2220      	movs	r2, #32
    9000:	4641      	mov	r1, r8
    9002:	4620      	mov	r0, r4
    9004:	f01b fcba 	bl	2497c <memcmp>
    9008:	2800      	cmp	r0, #0
    900a:	d0ad      	beq.n	8f68 <ecc_thread+0x34>
	return 0;
    900c:	f04f 0900 	mov.w	r9, #0
    9010:	e7bf      	b.n	8f92 <ecc_thread+0x5e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    9012:	493c      	ldr	r1, [pc, #240]	; (9104 <ecc_thread+0x1d0>)
    9014:	f01b fd63 	bl	24ade <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    9018:	3120      	adds	r1, #32
    901a:	f108 0021 	add.w	r0, r8, #33	; 0x21
    901e:	f01b fd5e 	bl	24ade <sys_memcpy_swap.constprop.0>
    9022:	e7dc      	b.n	8fde <ecc_thread+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9024:	f3bf 8f5b 	dmb	ish
    9028:	6833      	ldr	r3, [r6, #0]
    902a:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    902e:	079b      	lsls	r3, r3, #30
    9030:	d586      	bpl.n	8f40 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    9032:	4931      	ldr	r1, [pc, #196]	; (90f8 <ecc_thread+0x1c4>)
    9034:	4833      	ldr	r0, [pc, #204]	; (9104 <ecc_thread+0x1d0>)
    9036:	f01b fa34 	bl	244a2 <uECC_valid_public_key>
	if (ret < 0) {
    903a:	2800      	cmp	r0, #0
    903c:	da3f      	bge.n	90be <ecc_thread+0x18a>
		BT_ERR("public key is not valid (ret %d)", ret);
    903e:	4b34      	ldr	r3, [pc, #208]	; (9110 <ecc_thread+0x1dc>)
    9040:	e9cd 3006 	strd	r3, r0, [sp, #24]
    9044:	2303      	movs	r3, #3
    9046:	9301      	str	r3, [sp, #4]
    9048:	9305      	str	r3, [sp, #20]
    904a:	4830      	ldr	r0, [pc, #192]	; (910c <ecc_thread+0x1d8>)
    904c:	4623      	mov	r3, r4
    904e:	aa05      	add	r2, sp, #20
    9050:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9054:	f01a fa0f 	bl	23476 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    905c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9060:	2001      	movs	r0, #1
    9062:	f000 f91f 	bl	92a4 <bt_buf_get_rx>
    9066:	f100 0908 	add.w	r9, r0, #8
    906a:	2102      	movs	r1, #2
    906c:	4680      	mov	r8, r0
    906e:	4648      	mov	r0, r9
    9070:	f01e f81a 	bl	270a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    9074:	233e      	movs	r3, #62	; 0x3e
    9076:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    9078:	2322      	movs	r3, #34	; 0x22
    907a:	7043      	strb	r3, [r0, #1]
    907c:	2101      	movs	r1, #1
    907e:	4648      	mov	r0, r9
    9080:	f01e f812 	bl	270a8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    9084:	2309      	movs	r3, #9
    9086:	7003      	strb	r3, [r0, #0]
    9088:	2121      	movs	r1, #33	; 0x21
    908a:	4648      	mov	r0, r9
    908c:	f01e f80c 	bl	270a8 <net_buf_simple_add>
    9090:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    9092:	3001      	adds	r0, #1
    9094:	bb34      	cbnz	r4, 90e4 <ecc_thread+0x1b0>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    9096:	221f      	movs	r2, #31
    9098:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    909a:	21ff      	movs	r1, #255	; 0xff
    909c:	2220      	movs	r2, #32
    909e:	f01b fc89 	bl	249b4 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90a2:	f3bf 8f5b 	dmb	ish
    90a6:	e855 3f00 	ldrex	r3, [r5]
    90aa:	f023 0302 	bic.w	r3, r3, #2
    90ae:	e845 3200 	strex	r2, r3, [r5]
    90b2:	2a00      	cmp	r2, #0
    90b4:	d1f7      	bne.n	90a6 <ecc_thread+0x172>
    90b6:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    90ba:	4640      	mov	r0, r8
    90bc:	e79c      	b.n	8ff8 <ecc_thread+0xc4>
		ret = uECC_shared_secret(ecc.public_key_be,
    90be:	490f      	ldr	r1, [pc, #60]	; (90fc <ecc_thread+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    90c0:	f3bf 8f5b 	dmb	ish
    90c4:	6833      	ldr	r3, [r6, #0]
    90c6:	480e      	ldr	r0, [pc, #56]	; (9100 <ecc_thread+0x1cc>)
    90c8:	f3bf 8f5b 	dmb	ish
    90cc:	f013 0f04 	tst.w	r3, #4
    90d0:	f101 0220 	add.w	r2, r1, #32
    90d4:	4b08      	ldr	r3, [pc, #32]	; (90f8 <ecc_thread+0x1c4>)
    90d6:	bf18      	it	ne
    90d8:	4601      	movne	r1, r0
    90da:	4610      	mov	r0, r2
    90dc:	f01a fb77 	bl	237ce <uECC_shared_secret>
    90e0:	4604      	mov	r4, r0
    90e2:	e7b9      	b.n	9058 <ecc_thread+0x124>
		evt->status = 0U;
    90e4:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    90e6:	4907      	ldr	r1, [pc, #28]	; (9104 <ecc_thread+0x1d0>)
		evt->status = 0U;
    90e8:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    90ea:	f01b fcf8 	bl	24ade <sys_memcpy_swap.constprop.0>
    90ee:	e7d8      	b.n	90a2 <ecc_thread+0x16e>
    90f0:	200020ac 	.word	0x200020ac
    90f4:	200009d4 	.word	0x200009d4
    90f8:	00028d3c 	.word	0x00028d3c
    90fc:	20003e9a 	.word	0x20003e9a
    9100:	0002b072 	.word	0x0002b072
    9104:	20003eba 	.word	0x20003eba
    9108:	0002b016 	.word	0x0002b016
    910c:	00028978 	.word	0x00028978
    9110:	0002b03f 	.word	0x0002b03f

00009114 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    9114:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9116:	7d06      	ldrb	r6, [r0, #20]
    9118:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    911a:	b976      	cbnz	r6, 913a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    911c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    911e:	881d      	ldrh	r5, [r3, #0]
    9120:	f242 0226 	movw	r2, #8230	; 0x2026
    9124:	4295      	cmp	r5, r2
    9126:	d045      	beq.n	91b4 <bt_hci_ecc_send+0xa0>
    9128:	d80f      	bhi.n	914a <bt_hci_ecc_send+0x36>
    912a:	f242 0201 	movw	r2, #8193	; 0x2001
    912e:	4295      	cmp	r5, r2
    9130:	d04f      	beq.n	91d2 <bt_hci_ecc_send+0xbe>
    9132:	f242 0325 	movw	r3, #8229	; 0x2025
    9136:	429d      	cmp	r5, r3
    9138:	d013      	beq.n	9162 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    913a:	4b2a      	ldr	r3, [pc, #168]	; (91e4 <bt_hci_ecc_send+0xd0>)
    913c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    9140:	4620      	mov	r0, r4
    9142:	691b      	ldr	r3, [r3, #16]
}
    9144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    9148:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    914a:	f242 035e 	movw	r3, #8286	; 0x205e
    914e:	429d      	cmp	r5, r3
    9150:	d1f3      	bne.n	913a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    9152:	2103      	movs	r1, #3
    9154:	3008      	adds	r0, #8
    9156:	f01d ffd0 	bl	270fa <net_buf_simple_pull>
	cmd = (void *)buf->data;
    915a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    915c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9160:	e02e      	b.n	91c0 <bt_hci_ecc_send+0xac>
    9162:	2103      	movs	r1, #3
    9164:	3008      	adds	r0, #8
    9166:	f01d ffc8 	bl	270fa <net_buf_simple_pull>
	net_buf_unref(buf);
    916a:	4620      	mov	r0, r4
    916c:	f013 fefc 	bl	1cf68 <net_buf_unref>
    9170:	f3bf 8f5b 	dmb	ish
    9174:	4b1c      	ldr	r3, [pc, #112]	; (91e8 <bt_hci_ecc_send+0xd4>)
    9176:	681a      	ldr	r2, [r3, #0]
    9178:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    917c:	0792      	lsls	r2, r2, #30
    917e:	d507      	bpl.n	9190 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    9180:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    9182:	4631      	mov	r1, r6
    9184:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    9188:	f01b fc85 	bl	24a96 <send_cmd_status>
}
    918c:	2000      	movs	r0, #0
    918e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9190:	f3bf 8f5b 	dmb	ish
    9194:	e853 2f00 	ldrex	r2, [r3]
    9198:	f042 0101 	orr.w	r1, r2, #1
    919c:	e843 1000 	strex	r0, r1, [r3]
    91a0:	2800      	cmp	r0, #0
    91a2:	d1f7      	bne.n	9194 <bt_hci_ecc_send+0x80>
    91a4:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    91a8:	07d3      	lsls	r3, r2, #31
    91aa:	d4e9      	bmi.n	9180 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    91ac:	480f      	ldr	r0, [pc, #60]	; (91ec <bt_hci_ecc_send+0xd8>)
    91ae:	f018 fa23 	bl	215f8 <z_impl_k_sem_give>
}
    91b2:	e7e6      	b.n	9182 <bt_hci_ecc_send+0x6e>
    91b4:	2103      	movs	r1, #3
    91b6:	3008      	adds	r0, #8
    91b8:	f01d ff9f 	bl	270fa <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    91bc:	68a0      	ldr	r0, [r4, #8]
    91be:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    91c0:	f7ff fe6c 	bl	8e9c <le_gen_dhkey>
    91c4:	4606      	mov	r6, r0
	net_buf_unref(buf);
    91c6:	4620      	mov	r0, r4
    91c8:	f013 fece 	bl	1cf68 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    91cc:	4631      	mov	r1, r6
    91ce:	4628      	mov	r0, r5
    91d0:	e7da      	b.n	9188 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    91d2:	78da      	ldrb	r2, [r3, #3]
    91d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    91d8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    91da:	791a      	ldrb	r2, [r3, #4]
    91dc:	f022 0201 	bic.w	r2, r2, #1
    91e0:	711a      	strb	r2, [r3, #4]
}
    91e2:	e7aa      	b.n	913a <bt_hci_ecc_send+0x26>
    91e4:	20000000 	.word	0x20000000
    91e8:	200020ac 	.word	0x200020ac
    91ec:	200009d4 	.word	0x200009d4

000091f0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    91f0:	b510      	push	{r4, lr}
    91f2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    91f4:	4c0c      	ldr	r4, [pc, #48]	; (9228 <bt_hci_ecc_init+0x38>)
    91f6:	490d      	ldr	r1, [pc, #52]	; (922c <bt_hci_ecc_init+0x3c>)
    91f8:	2200      	movs	r2, #0
    91fa:	2300      	movs	r3, #0
    91fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9200:	2300      	movs	r3, #0
    9202:	220a      	movs	r2, #10
    9204:	e9cd 2303 	strd	r2, r3, [sp, #12]
    9208:	e9cd 3301 	strd	r3, r3, [sp, #4]
    920c:	9300      	str	r3, [sp, #0]
    920e:	f44f 628f 	mov.w	r2, #1144	; 0x478
    9212:	4b07      	ldr	r3, [pc, #28]	; (9230 <bt_hci_ecc_init+0x40>)
    9214:	4620      	mov	r0, r4
    9216:	f018 f85d 	bl	212d4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    921a:	4906      	ldr	r1, [pc, #24]	; (9234 <bt_hci_ecc_init+0x44>)
    921c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    921e:	b008      	add	sp, #32
    9220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9224:	f01e bcbf 	b.w	27ba6 <z_impl_k_thread_name_set>
    9228:	20001328 	.word	0x20001328
    922c:	20005520 	.word	0x20005520
    9230:	00008f35 	.word	0x00008f35
    9234:	0002b060 	.word	0x0002b060

00009238 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    9238:	b430      	push	{r4, r5}
    923a:	4603      	mov	r3, r0
    923c:	4608      	mov	r0, r1
	switch (src->type) {
    923e:	781a      	ldrb	r2, [r3, #0]
    9240:	2a01      	cmp	r2, #1
    9242:	d013      	beq.n	926c <uuid_to_uuid128+0x34>
    9244:	2a02      	cmp	r2, #2
    9246:	d026      	beq.n	9296 <uuid_to_uuid128+0x5e>
    9248:	b972      	cbnz	r2, 9268 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    924a:	4a15      	ldr	r2, [pc, #84]	; (92a0 <uuid_to_uuid128+0x68>)
    924c:	f102 0410 	add.w	r4, r2, #16
    9250:	f852 5b04 	ldr.w	r5, [r2], #4
    9254:	f841 5b04 	str.w	r5, [r1], #4
    9258:	42a2      	cmp	r2, r4
    925a:	d1f9      	bne.n	9250 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    925c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    925e:	7812      	ldrb	r2, [r2, #0]
    9260:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    9262:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    9264:	0a1b      	lsrs	r3, r3, #8
    9266:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    9268:	bc30      	pop	{r4, r5}
    926a:	4770      	bx	lr
		*dst = uuid128_base;
    926c:	4a0c      	ldr	r2, [pc, #48]	; (92a0 <uuid_to_uuid128+0x68>)
    926e:	f102 0410 	add.w	r4, r2, #16
    9272:	f852 5b04 	ldr.w	r5, [r2], #4
    9276:	f841 5b04 	str.w	r5, [r1], #4
    927a:	42a2      	cmp	r2, r4
    927c:	d1f9      	bne.n	9272 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    927e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    9280:	7812      	ldrb	r2, [r2, #0]
    9282:	700a      	strb	r2, [r1, #0]
    9284:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    9288:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    928a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    928c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    928e:	0a1b      	lsrs	r3, r3, #8
    9290:	7382      	strb	r2, [r0, #14]
    9292:	7403      	strb	r3, [r0, #16]
}
    9294:	e7e8      	b.n	9268 <uuid_to_uuid128+0x30>
}
    9296:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    9298:	2211      	movs	r2, #17
    929a:	4619      	mov	r1, r3
    929c:	f01b bb7f 	b.w	2499e <memcpy>
    92a0:	0002b092 	.word	0x0002b092

000092a4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    92a4:	b538      	push	{r3, r4, r5, lr}
    92a6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    92a8:	4805      	ldr	r0, [pc, #20]	; (92c0 <bt_buf_get_rx+0x1c>)
    92aa:	f01d fe95 	bl	26fd8 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    92ae:	4604      	mov	r4, r0
    92b0:	b120      	cbz	r0, 92bc <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    92b2:	2100      	movs	r1, #0
    92b4:	3008      	adds	r0, #8
    92b6:	f01d feb4 	bl	27022 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    92ba:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    92bc:	4620      	mov	r0, r4
    92be:	bd38      	pop	{r3, r4, r5, pc}
    92c0:	20000b2c 	.word	0x20000b2c

000092c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    92c4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    92c6:	490b      	ldr	r1, [pc, #44]	; (92f4 <bt_buf_get_cmd_complete+0x30>)
{
    92c8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    92ca:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    92ce:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    92d0:	b920      	cbnz	r0, 92dc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    92d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    92d6:	2001      	movs	r0, #1
    92d8:	f7ff bfe4 	b.w	92a4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    92dc:	f01d feb2 	bl	27044 <net_buf_ref>
    92e0:	2301      	movs	r3, #1
		buf->len = 0U;
    92e2:	2100      	movs	r1, #0
    92e4:	7503      	strb	r3, [r0, #20]
    92e6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    92e8:	4604      	mov	r4, r0
    92ea:	3008      	adds	r0, #8
    92ec:	f01d fe99 	bl	27022 <net_buf_simple_reserve>
}
    92f0:	4620      	mov	r0, r4
    92f2:	bd10      	pop	{r4, pc}
    92f4:	20000000 	.word	0x20000000

000092f8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    92f8:	b570      	push	{r4, r5, r6, lr}
    92fa:	4604      	mov	r4, r0
	switch (evt) {
    92fc:	2c0f      	cmp	r4, #15
{
    92fe:	460d      	mov	r5, r1
    9300:	4610      	mov	r0, r2
    9302:	4619      	mov	r1, r3
	switch (evt) {
    9304:	d805      	bhi.n	9312 <bt_buf_get_evt+0x1a>
    9306:	2c0d      	cmp	r4, #13
    9308:	d912      	bls.n	9330 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    930e:	f7ff bfd9 	b.w	92c4 <bt_buf_get_cmd_complete>
	switch (evt) {
    9312:	2c13      	cmp	r4, #19
    9314:	d10c      	bne.n	9330 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    9316:	480b      	ldr	r0, [pc, #44]	; (9344 <bt_buf_get_evt+0x4c>)
    9318:	f01d fe5e 	bl	26fd8 <net_buf_alloc_fixed>
			if (buf) {
    931c:	4604      	mov	r4, r0
    931e:	b128      	cbz	r0, 932c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    9320:	2100      	movs	r1, #0
    9322:	3008      	adds	r0, #8
    9324:	f01d fe7d 	bl	27022 <net_buf_simple_reserve>
    9328:	2301      	movs	r3, #1
    932a:	7523      	strb	r3, [r4, #20]
}
    932c:	4620      	mov	r0, r4
    932e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    9330:	4602      	mov	r2, r0
    9332:	460b      	mov	r3, r1
		if (discardable) {
    9334:	b10d      	cbz	r5, 933a <bt_buf_get_evt+0x42>
    9336:	4804      	ldr	r0, [pc, #16]	; (9348 <bt_buf_get_evt+0x50>)
    9338:	e7ee      	b.n	9318 <bt_buf_get_evt+0x20>
}
    933a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    933e:	2001      	movs	r0, #1
    9340:	f7ff bfb0 	b.w	92a4 <bt_buf_get_rx>
    9344:	20000b58 	.word	0x20000b58
    9348:	20000aa8 	.word	0x20000aa8

0000934c <hci_disconn_complete_prio>:
{
    934c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    934e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    9350:	781a      	ldrb	r2, [r3, #0]
    9352:	b972      	cbnz	r2, 9372 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9354:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9358:	4620      	mov	r0, r4
    935a:	f002 fc59 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    935e:	4605      	mov	r5, r0
    9360:	b940      	cbnz	r0, 9374 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    9362:	4b08      	ldr	r3, [pc, #32]	; (9384 <hci_disconn_complete_prio+0x38>)
    9364:	881a      	ldrh	r2, [r3, #0]
    9366:	b922      	cbnz	r2, 9372 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    9368:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    936c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    9370:	8018      	strh	r0, [r3, #0]
}
    9372:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    9374:	2101      	movs	r1, #1
    9376:	f002 fc53 	bl	bc20 <bt_conn_set_state>
	bt_conn_unref(conn);
    937a:	4628      	mov	r0, r5
}
    937c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    9380:	f01b bec4 	b.w	2510c <bt_conn_unref>
    9384:	20003dbc 	.word	0x20003dbc

00009388 <hci_data_buf_overflow>:
{
    9388:	b500      	push	{lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    938a:	6883      	ldr	r3, [r0, #8]
    938c:	4a07      	ldr	r2, [pc, #28]	; (93ac <hci_data_buf_overflow+0x24>)
    938e:	781b      	ldrb	r3, [r3, #0]
    9390:	4807      	ldr	r0, [pc, #28]	; (93b0 <hci_data_buf_overflow+0x28>)
{
    9392:	b089      	sub	sp, #36	; 0x24
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    9394:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9398:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    939c:	2303      	movs	r3, #3
    939e:	aa05      	add	r2, sp, #20
    93a0:	9305      	str	r3, [sp, #20]
    93a2:	f01b fc4d 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    93a6:	b009      	add	sp, #36	; 0x24
    93a8:	f85d fb04 	ldr.w	pc, [sp], #4
    93ac:	0002b0aa 	.word	0x0002b0aa
    93b0:	00028970 	.word	0x00028970

000093b4 <le_conn_update_complete>:
{
    93b4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    93b6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    93b8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    93bc:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    93be:	4630      	mov	r0, r6
    93c0:	f002 fc26 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    93c4:	4604      	mov	r4, r0
    93c6:	b968      	cbnz	r0, 93e4 <le_conn_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    93c8:	4b25      	ldr	r3, [pc, #148]	; (9460 <le_conn_update_complete+0xac>)
    93ca:	4826      	ldr	r0, [pc, #152]	; (9464 <le_conn_update_complete+0xb0>)
    93cc:	e9cd 3606 	strd	r3, r6, [sp, #24]
    93d0:	aa05      	add	r2, sp, #20
    93d2:	2303      	movs	r3, #3
    93d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    93d8:	9301      	str	r3, [sp, #4]
    93da:	9305      	str	r3, [sp, #20]
    93dc:	f01b fc30 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    93e0:	b008      	add	sp, #32
    93e2:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    93e4:	782b      	ldrb	r3, [r5, #0]
    93e6:	b9cb      	cbnz	r3, 941c <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    93e8:	792a      	ldrb	r2, [r5, #4]
    93ea:	78eb      	ldrb	r3, [r5, #3]
    93ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    93f0:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    93f4:	79aa      	ldrb	r2, [r5, #6]
    93f6:	796b      	ldrb	r3, [r5, #5]
    93f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    93fc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9400:	79eb      	ldrb	r3, [r5, #7]
    9402:	7a2a      	ldrb	r2, [r5, #8]
    9404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9408:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    940c:	f002 fd50 	bl	beb0 <notify_le_param_updated>
	bt_conn_unref(conn);
    9410:	4620      	mov	r0, r4
}
    9412:	b008      	add	sp, #32
    9414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9418:	f01b be78 	b.w	2510c <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    941c:	2b1a      	cmp	r3, #26
    941e:	d1f7      	bne.n	9410 <le_conn_update_complete+0x5c>
    9420:	78c3      	ldrb	r3, [r0, #3]
    9422:	2b01      	cmp	r3, #1
    9424:	d1f4      	bne.n	9410 <le_conn_update_complete+0x5c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9426:	f44f 6180 	mov.w	r1, #1024	; 0x400
    942a:	3004      	adds	r0, #4
    942c:	f01b fbf9 	bl	24c22 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    9430:	0543      	lsls	r3, r0, #21
    9432:	d4ed      	bmi.n	9410 <le_conn_update_complete+0x5c>
		param.interval_min = conn->le.interval_min;
    9434:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    9438:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    943c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    9440:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    9444:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    9448:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    944c:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    944e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    9452:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    9456:	4620      	mov	r0, r4
    9458:	f003 fab6 	bl	c9c8 <bt_l2cap_update_conn_param>
    945c:	e7d8      	b.n	9410 <le_conn_update_complete+0x5c>
    945e:	bf00      	nop
    9460:	0002b0d2 	.word	0x0002b0d2
    9464:	00028970 	.word	0x00028970

00009468 <hci_hardware_error>:
{
    9468:	b500      	push	{lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    946a:	2101      	movs	r1, #1
    946c:	b089      	sub	sp, #36	; 0x24
    946e:	3008      	adds	r0, #8
    9470:	f01d fe4b 	bl	2710a <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    9474:	4a07      	ldr	r2, [pc, #28]	; (9494 <hci_hardware_error+0x2c>)
    9476:	7803      	ldrb	r3, [r0, #0]
    9478:	4807      	ldr	r0, [pc, #28]	; (9498 <hci_hardware_error+0x30>)
    947a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    947e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9482:	2303      	movs	r3, #3
    9484:	aa05      	add	r2, sp, #20
    9486:	9305      	str	r3, [sp, #20]
    9488:	f01b fbda 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    948c:	b009      	add	sp, #36	; 0x24
    948e:	f85d fb04 	ldr.w	pc, [sp], #4
    9492:	bf00      	nop
    9494:	0002b0f6 	.word	0x0002b0f6
    9498:	00028970 	.word	0x00028970

0000949c <le_data_len_change>:
{
    949c:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    949e:	6883      	ldr	r3, [r0, #8]
    94a0:	881c      	ldrh	r4, [r3, #0]
{
    94a2:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    94a4:	4620      	mov	r0, r4
    94a6:	f002 fbb3 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    94aa:	b968      	cbnz	r0, 94c8 <le_data_len_change+0x2c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    94ac:	4b09      	ldr	r3, [pc, #36]	; (94d4 <le_data_len_change+0x38>)
    94ae:	480a      	ldr	r0, [pc, #40]	; (94d8 <le_data_len_change+0x3c>)
    94b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
    94b4:	aa05      	add	r2, sp, #20
    94b6:	2303      	movs	r3, #3
    94b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    94bc:	9301      	str	r3, [sp, #4]
    94be:	9305      	str	r3, [sp, #20]
    94c0:	f01b fbbe 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    94c4:	b008      	add	sp, #32
    94c6:	bd10      	pop	{r4, pc}
    94c8:	b008      	add	sp, #32
    94ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    94ce:	f01b be1d 	b.w	2510c <bt_conn_unref>
    94d2:	bf00      	nop
    94d4:	0002b0d2 	.word	0x0002b0d2
    94d8:	00028970 	.word	0x00028970

000094dc <hci_vendor_event>:
{
    94dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    94de:	8981      	ldrh	r1, [r0, #12]
    94e0:	6880      	ldr	r0, [r0, #8]
    94e2:	f7ff fc7b 	bl	8ddc <bt_hex_real>
    94e6:	4b06      	ldr	r3, [pc, #24]	; (9500 <hci_vendor_event+0x24>)
    94e8:	9301      	str	r3, [sp, #4]
    94ea:	2300      	movs	r3, #0
    94ec:	9002      	str	r0, [sp, #8]
    94ee:	4905      	ldr	r1, [pc, #20]	; (9504 <hci_vendor_event+0x28>)
    94f0:	9300      	str	r3, [sp, #0]
    94f2:	2202      	movs	r2, #2
    94f4:	4618      	mov	r0, r3
    94f6:	f01b fba6 	bl	24c46 <z_log_msg2_runtime_create.constprop.0>
}
    94fa:	b005      	add	sp, #20
    94fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9500:	0002b118 	.word	0x0002b118
    9504:	00028970 	.word	0x00028970

00009508 <handle_event>:
{
    9508:	b5b0      	push	{r4, r5, r7, lr}
    950a:	b088      	sub	sp, #32
    950c:	4604      	mov	r4, r0
    950e:	af06      	add	r7, sp, #24
    9510:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    9512:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    9516:	7811      	ldrb	r1, [r2, #0]
    9518:	42a1      	cmp	r1, r4
    951a:	d014      	beq.n	9546 <handle_event+0x3e>
	for (i = 0; i < num_handlers; i++) {
    951c:	3208      	adds	r2, #8
    951e:	429a      	cmp	r2, r3
    9520:	d1f9      	bne.n	9516 <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    9522:	8985      	ldrh	r5, [r0, #12]
    9524:	6880      	ldr	r0, [r0, #8]
    9526:	4629      	mov	r1, r5
    9528:	f7ff fc58 	bl	8ddc <bt_hex_real>
    952c:	4b13      	ldr	r3, [pc, #76]	; (957c <handle_event+0x74>)
    952e:	9301      	str	r3, [sp, #4]
    9530:	2300      	movs	r3, #0
    9532:	e9cd 5003 	strd	r5, r0, [sp, #12]
    9536:	4912      	ldr	r1, [pc, #72]	; (9580 <handle_event+0x78>)
    9538:	9402      	str	r4, [sp, #8]
    953a:	9300      	str	r3, [sp, #0]
    953c:	2202      	movs	r2, #2
    953e:	4618      	mov	r0, r3
    9540:	f01b fb81 	bl	24c46 <z_log_msg2_runtime_create.constprop.0>
    9544:	e014      	b.n	9570 <handle_event+0x68>
		if (buf->len < handler->min_len) {
    9546:	8983      	ldrh	r3, [r0, #12]
    9548:	7851      	ldrb	r1, [r2, #1]
    954a:	4299      	cmp	r1, r3
    954c:	d913      	bls.n	9576 <handle_event+0x6e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    954e:	490d      	ldr	r1, [pc, #52]	; (9584 <handle_event+0x7c>)
    9550:	480b      	ldr	r0, [pc, #44]	; (9580 <handle_event+0x78>)
    9552:	466d      	mov	r5, sp
    9554:	b088      	sub	sp, #32
    9556:	aa06      	add	r2, sp, #24
    9558:	e9c2 1304 	strd	r1, r3, [r2, #16]
    955c:	2304      	movs	r3, #4
    955e:	6194      	str	r4, [r2, #24]
    9560:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9564:	f842 3f0c 	str.w	r3, [r2, #12]!
    9568:	607b      	str	r3, [r7, #4]
    956a:	f01b fb69 	bl	24c40 <z_log_msg2_static_create.constprop.0>
    956e:	46ad      	mov	sp, r5
}
    9570:	3708      	adds	r7, #8
    9572:	46bd      	mov	sp, r7
    9574:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    9576:	6853      	ldr	r3, [r2, #4]
    9578:	4798      	blx	r3
		return;
    957a:	e7f9      	b.n	9570 <handle_event+0x68>
    957c:	0002b15e 	.word	0x0002b15e
    9580:	00028970 	.word	0x00028970
    9584:	0002b13c 	.word	0x0002b13c

00009588 <hci_le_meta_event>:
{
    9588:	b510      	push	{r4, lr}
    958a:	2101      	movs	r1, #1
    958c:	4604      	mov	r4, r0
    958e:	3008      	adds	r0, #8
    9590:	f01d fdbb 	bl	2710a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    9594:	4621      	mov	r1, r4
    9596:	4a03      	ldr	r2, [pc, #12]	; (95a4 <hci_le_meta_event+0x1c>)
    9598:	7800      	ldrb	r0, [r0, #0]
}
    959a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    959e:	230b      	movs	r3, #11
    95a0:	f7ff bfb2 	b.w	9508 <handle_event>
    95a4:	00028e1c 	.word	0x00028e1c

000095a8 <hci_cmd_done>:
{
    95a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95ac:	b082      	sub	sp, #8
    95ae:	4680      	mov	r8, r0
    95b0:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    95b2:	7990      	ldrb	r0, [r2, #6]
    95b4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9700 <hci_cmd_done+0x158>
{
    95b8:	460e      	mov	r6, r1
    95ba:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    95bc:	f013 fc10 	bl	1cde0 <net_buf_pool_get>
    95c0:	4581      	cmp	r9, r0
    95c2:	d020      	beq.n	9606 <hci_cmd_done+0x5e>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    95c4:	79a0      	ldrb	r0, [r4, #6]
    95c6:	f013 fc0b 	bl	1cde0 <net_buf_pool_get>
    95ca:	466e      	mov	r6, sp
    95cc:	b08a      	sub	sp, #40	; 0x28
    95ce:	466d      	mov	r5, sp
    95d0:	4b4c      	ldr	r3, [pc, #304]	; (9704 <hci_cmd_done+0x15c>)
    95d2:	79a0      	ldrb	r0, [r4, #6]
    95d4:	61a8      	str	r0, [r5, #24]
    95d6:	e9c5 3804 	strd	r3, r8, [r5, #16]
    95da:	f013 fc01 	bl	1cde0 <net_buf_pool_get>
    95de:	79a0      	ldrb	r0, [r4, #6]
    95e0:	f013 fbfe 	bl	1cde0 <net_buf_pool_get>
    95e4:	462a      	mov	r2, r5
    95e6:	2306      	movs	r3, #6
    95e8:	e9c5 0907 	strd	r0, r9, [r5, #28]
    95ec:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    95f0:	f842 3f0c 	str.w	r3, [r2, #12]!
    95f4:	4844      	ldr	r0, [pc, #272]	; (9708 <hci_cmd_done+0x160>)
    95f6:	607b      	str	r3, [r7, #4]
    95f8:	f01b fb22 	bl	24c40 <z_log_msg2_static_create.constprop.0>
    95fc:	46b5      	mov	sp, r6
}
    95fe:	3708      	adds	r7, #8
    9600:	46bd      	mov	sp, r7
    9602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
    9606:	4620      	mov	r0, r4
    9608:	f013 fbf2 	bl	1cdf0 <net_buf_id>
    960c:	4d3f      	ldr	r5, [pc, #252]	; (970c <hci_cmd_done+0x164>)
    960e:	f04f 0a0c 	mov.w	sl, #12
    9612:	fb0a 5000 	mla	r0, sl, r0, r5
    9616:	8843      	ldrh	r3, [r0, #2]
    9618:	4543      	cmp	r3, r8
    961a:	d01e      	beq.n	965a <hci_cmd_done+0xb2>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    961c:	4620      	mov	r0, r4
    961e:	f013 fbe7 	bl	1cdf0 <net_buf_id>
    9622:	46e9      	mov	r9, sp
    9624:	4b3a      	ldr	r3, [pc, #232]	; (9710 <hci_cmd_done+0x168>)
    9626:	b088      	sub	sp, #32
    9628:	466e      	mov	r6, sp
    962a:	e9c6 3804 	strd	r3, r8, [r6, #16]
    962e:	4620      	mov	r0, r4
    9630:	f013 fbde 	bl	1cdf0 <net_buf_id>
    9634:	4620      	mov	r0, r4
    9636:	f013 fbdb 	bl	1cdf0 <net_buf_id>
    963a:	fb0a 5500 	mla	r5, sl, r0, r5
    963e:	4632      	mov	r2, r6
    9640:	886b      	ldrh	r3, [r5, #2]
    9642:	61b3      	str	r3, [r6, #24]
    9644:	2304      	movs	r3, #4
    9646:	f842 3f0c 	str.w	r3, [r2, #12]!
    964a:	482f      	ldr	r0, [pc, #188]	; (9708 <hci_cmd_done+0x160>)
    964c:	607b      	str	r3, [r7, #4]
    964e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    9652:	f01b faf5 	bl	24c40 <z_log_msg2_static_create.constprop.0>
    9656:	46cd      	mov	sp, r9
		return;
    9658:	e7d1      	b.n	95fe <hci_cmd_done+0x56>
	if (bt_dev.sent_cmd) {
    965a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9714 <hci_cmd_done+0x16c>
    965e:	f8d8 0138 	ldr.w	r0, [r8, #312]	; 0x138
    9662:	b120      	cbz	r0, 966e <hci_cmd_done+0xc6>
		net_buf_unref(bt_dev.sent_cmd);
    9664:	f013 fc80 	bl	1cf68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    9668:	2300      	movs	r3, #0
    966a:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    966e:	4620      	mov	r0, r4
    9670:	f013 fbbe 	bl	1cdf0 <net_buf_id>
    9674:	f04f 080c 	mov.w	r8, #12
    9678:	fb08 5000 	mla	r0, r8, r0, r5
    967c:	6843      	ldr	r3, [r0, #4]
    967e:	b1b3      	cbz	r3, 96ae <hci_cmd_done+0x106>
    9680:	b9ae      	cbnz	r6, 96ae <hci_cmd_done+0x106>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    9682:	4620      	mov	r0, r4
    9684:	f013 fbb4 	bl	1cdf0 <net_buf_id>
    9688:	fb08 5000 	mla	r0, r8, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    968c:	2301      	movs	r3, #1
    968e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9692:	e9dc 2000 	ldrd	r2, r0, [ip]
    9696:	f000 011f 	and.w	r1, r0, #31
    969a:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
    969e:	f89c 3008 	ldrb.w	r3, [ip, #8]
    96a2:	0940      	lsrs	r0, r0, #5
    96a4:	b1e3      	cbz	r3, 96e0 <hci_cmd_done+0x138>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    96a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    96aa:	f01b faba 	bl	24c22 <atomic_or>
	if (cmd(buf)->sync) {
    96ae:	4620      	mov	r0, r4
    96b0:	f013 fb9e 	bl	1cdf0 <net_buf_id>
    96b4:	f04f 080c 	mov.w	r8, #12
    96b8:	fb08 5000 	mla	r0, r8, r0, r5
    96bc:	6883      	ldr	r3, [r0, #8]
    96be:	2b00      	cmp	r3, #0
    96c0:	d09d      	beq.n	95fe <hci_cmd_done+0x56>
		cmd(buf)->status = status;
    96c2:	4620      	mov	r0, r4
    96c4:	f013 fb94 	bl	1cdf0 <net_buf_id>
    96c8:	fb08 f000 	mul.w	r0, r8, r0
    96cc:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    96ce:	4620      	mov	r0, r4
    96d0:	f013 fb8e 	bl	1cdf0 <net_buf_id>
    96d4:	fb08 5500 	mla	r5, r8, r0, r5
    96d8:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    96da:	f017 ff8d 	bl	215f8 <z_impl_k_sem_give>
}
    96de:	e78e      	b.n	95fe <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    96e0:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96e2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    96e6:	f3bf 8f5b 	dmb	ish
    96ea:	e852 1f00 	ldrex	r1, [r2]
    96ee:	4019      	ands	r1, r3
    96f0:	e842 1000 	strex	r0, r1, [r2]
    96f4:	2800      	cmp	r0, #0
    96f6:	d1f8      	bne.n	96ea <hci_cmd_done+0x142>
    96f8:	f3bf 8f5b 	dmb	ish
    96fc:	e7d7      	b.n	96ae <hci_cmd_done+0x106>
    96fe:	bf00      	nop
    9700:	20000b00 	.word	0x20000b00
    9704:	0002b180 	.word	0x0002b180
    9708:	00028970 	.word	0x00028970
    970c:	200020b4 	.word	0x200020b4
    9710:	0002b1b5 	.word	0x0002b1b5
    9714:	20000000 	.word	0x20000000

00009718 <hci_cmd_status>:
{
    9718:	b538      	push	{r3, r4, r5, lr}
    971a:	2104      	movs	r1, #4
    971c:	4604      	mov	r4, r0
    971e:	3008      	adds	r0, #8
    9720:	f01d fcf3 	bl	2710a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    9724:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    9726:	7801      	ldrb	r1, [r0, #0]
    9728:	8840      	ldrh	r0, [r0, #2]
    972a:	4622      	mov	r2, r4
    972c:	f7ff ff3c 	bl	95a8 <hci_cmd_done>
	if (ncmd) {
    9730:	b125      	cbz	r5, 973c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    9732:	4803      	ldr	r0, [pc, #12]	; (9740 <hci_cmd_status+0x28>)
}
    9734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9738:	f017 bf5e 	b.w	215f8 <z_impl_k_sem_give>
    973c:	bd38      	pop	{r3, r4, r5, pc}
    973e:	bf00      	nop
    9740:	20000120 	.word	0x20000120

00009744 <hci_cmd_complete>:
{
    9744:	b538      	push	{r3, r4, r5, lr}
    9746:	2103      	movs	r1, #3
    9748:	4604      	mov	r4, r0
    974a:	3008      	adds	r0, #8
    974c:	f01d fcdd 	bl	2710a <net_buf_simple_pull_mem>
	status = buf->data[0];
    9750:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    9752:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    9754:	7819      	ldrb	r1, [r3, #0]
    9756:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    975a:	4622      	mov	r2, r4
    975c:	f7ff ff24 	bl	95a8 <hci_cmd_done>
	if (ncmd) {
    9760:	b125      	cbz	r5, 976c <hci_cmd_complete+0x28>
    9762:	4803      	ldr	r0, [pc, #12]	; (9770 <hci_cmd_complete+0x2c>)
}
    9764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9768:	f017 bf46 	b.w	215f8 <z_impl_k_sem_give>
    976c:	bd38      	pop	{r3, r4, r5, pc}
    976e:	bf00      	nop
    9770:	20000120 	.word	0x20000120

00009774 <hci_tx_thread>:
{
    9774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    9778:	f8df 8158 	ldr.w	r8, [pc, #344]	; 98d4 <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
    977c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 98d8 <hci_tx_thread+0x164>
{
    9780:	b089      	sub	sp, #36	; 0x24
			ev_count += bt_conn_prepare_events(&events[1]);
    9782:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    9786:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    978a:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    978c:	f36f 3352 	bfc	r3, #13, #6
    9790:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    9794:	f002 fa08 	bl	bba8 <bt_conn_prepare_events>
    9798:	1c46      	adds	r6, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    979a:	484e      	ldr	r0, [pc, #312]	; (98d4 <hci_tx_thread+0x160>)
    979c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    97a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    97a4:	4631      	mov	r1, r6
    97a6:	f018 fe89 	bl	224bc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    97aa:	b160      	cbz	r0, 97c6 <hci_tx_thread+0x52>
    97ac:	494b      	ldr	r1, [pc, #300]	; (98dc <hci_tx_thread+0x168>)
    97ae:	484c      	ldr	r0, [pc, #304]	; (98e0 <hci_tx_thread+0x16c>)
    97b0:	f640 1393 	movw	r3, #2451	; 0x993
    97b4:	464a      	mov	r2, r9
    97b6:	f018 ffa5 	bl	22704 <printk>
    97ba:	4040      	eors	r0, r0
    97bc:	f380 8811 	msr	BASEPRI, r0
    97c0:	f04f 0003 	mov.w	r0, #3
    97c4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    97c6:	4d47      	ldr	r5, [pc, #284]	; (98e4 <hci_tx_thread+0x170>)
{
    97c8:	4f42      	ldr	r7, [pc, #264]	; (98d4 <hci_tx_thread+0x160>)
    97ca:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
    97ce:	b916      	cbnz	r6, 97d6 <hci_tx_thread+0x62>
	z_impl_k_yield();
    97d0:	f018 fb6e 	bl	21eb0 <z_impl_k_yield>
	while (1) {
    97d4:	e7d7      	b.n	9786 <hci_tx_thread+0x12>
		switch (ev->state) {
    97d6:	68fb      	ldr	r3, [r7, #12]
    97d8:	f3c3 3345 	ubfx	r3, r3, #13, #6
    97dc:	2b01      	cmp	r3, #1
    97de:	d962      	bls.n	98a6 <hci_tx_thread+0x132>
    97e0:	2b04      	cmp	r3, #4
    97e2:	d16a      	bne.n	98ba <hci_tx_thread+0x146>
			if (ev->tag == BT_EVENT_CMD_TX) {
    97e4:	7b3b      	ldrb	r3, [r7, #12]
    97e6:	2b00      	cmp	r3, #0
    97e8:	d160      	bne.n	98ac <hci_tx_thread+0x138>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    97ea:	483f      	ldr	r0, [pc, #252]	; (98e8 <hci_tx_thread+0x174>)
    97ec:	2200      	movs	r2, #0
    97ee:	2300      	movs	r3, #0
    97f0:	f01d fbf7 	bl	26fe2 <net_buf_get>
	BT_ASSERT(buf);
    97f4:	4604      	mov	r4, r0
    97f6:	b960      	cbnz	r0, 9812 <hci_tx_thread+0x9e>
    97f8:	493c      	ldr	r1, [pc, #240]	; (98ec <hci_tx_thread+0x178>)
    97fa:	4839      	ldr	r0, [pc, #228]	; (98e0 <hci_tx_thread+0x16c>)
    97fc:	f640 132a 	movw	r3, #2346	; 0x92a
    9800:	464a      	mov	r2, r9
    9802:	f018 ff7f 	bl	22704 <printk>
    9806:	4040      	eors	r0, r0
    9808:	f380 8811 	msr	BASEPRI, r0
    980c:	f04f 0003 	mov.w	r0, #3
    9810:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    981a:	4658      	mov	r0, fp
    981c:	f017 ff12 	bl	21644 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    9820:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    9824:	b18b      	cbz	r3, 984a <hci_tx_thread+0xd6>
		BT_ERR("Uncleared pending sent_cmd");
    9826:	4b32      	ldr	r3, [pc, #200]	; (98f0 <hci_tx_thread+0x17c>)
    9828:	4832      	ldr	r0, [pc, #200]	; (98f4 <hci_tx_thread+0x180>)
    982a:	9306      	str	r3, [sp, #24]
    982c:	aa05      	add	r2, sp, #20
    982e:	2302      	movs	r3, #2
    9830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9834:	9301      	str	r3, [sp, #4]
    9836:	9305      	str	r3, [sp, #20]
    9838:	f01b fa02 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    983c:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    9840:	f013 fb92 	bl	1cf68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    9844:	2300      	movs	r3, #0
    9846:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    984a:	4620      	mov	r0, r4
    984c:	f01d fbfa 	bl	27044 <net_buf_ref>
    9850:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    9854:	4620      	mov	r0, r4
    9856:	f7ff fc5d 	bl	9114 <bt_hci_ecc_send>
	if (err) {
    985a:	b320      	cbz	r0, 98a6 <hci_tx_thread+0x132>
		BT_ERR("Unable to send to driver (err %d)", err);
    985c:	4b26      	ldr	r3, [pc, #152]	; (98f8 <hci_tx_thread+0x184>)
    985e:	aa05      	add	r2, sp, #20
    9860:	e9cd 3006 	strd	r3, r0, [sp, #24]
    9864:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9868:	2303      	movs	r3, #3
    986a:	4822      	ldr	r0, [pc, #136]	; (98f4 <hci_tx_thread+0x180>)
    986c:	9301      	str	r3, [sp, #4]
    986e:	9305      	str	r3, [sp, #20]
    9870:	f01b f9e6 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
    9874:	4821      	ldr	r0, [pc, #132]	; (98fc <hci_tx_thread+0x188>)
    9876:	f017 febf 	bl	215f8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    987a:	4620      	mov	r0, r4
    987c:	f013 fab8 	bl	1cdf0 <net_buf_id>
    9880:	4b1f      	ldr	r3, [pc, #124]	; (9900 <hci_tx_thread+0x18c>)
    9882:	220c      	movs	r2, #12
    9884:	fb02 3000 	mla	r0, r2, r0, r3
    9888:	211f      	movs	r1, #31
    988a:	8840      	ldrh	r0, [r0, #2]
    988c:	4622      	mov	r2, r4
    988e:	f7ff fe8b 	bl	95a8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    9892:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    9896:	f013 fb67 	bl	1cf68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    989a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    989c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    989e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
    98a2:	f013 fb61 	bl	1cf68 <net_buf_unref>
	for (; count; ev++, count--) {
    98a6:	3714      	adds	r7, #20
    98a8:	3e01      	subs	r6, #1
    98aa:	e790      	b.n	97ce <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    98ac:	2b01      	cmp	r3, #1
    98ae:	d1fa      	bne.n	98a6 <hci_tx_thread+0x132>
					conn = CONTAINER_OF(ev->fifo,
    98b0:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    98b2:	3838      	subs	r0, #56	; 0x38
    98b4:	f002 fe42 	bl	c53c <bt_conn_process_tx>
    98b8:	e7f5      	b.n	98a6 <hci_tx_thread+0x132>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    98ba:	4a12      	ldr	r2, [pc, #72]	; (9904 <hci_tx_thread+0x190>)
    98bc:	480d      	ldr	r0, [pc, #52]	; (98f4 <hci_tx_thread+0x180>)
		switch (ev->state) {
    98be:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    98c2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    98c6:	2303      	movs	r3, #3
    98c8:	aa05      	add	r2, sp, #20
    98ca:	9301      	str	r3, [sp, #4]
    98cc:	9305      	str	r3, [sp, #20]
    98ce:	f01b f9b7 	bl	24c40 <z_log_msg2_static_create.constprop.0>
			break;
    98d2:	e7e8      	b.n	98a6 <hci_tx_thread+0x132>
    98d4:	20000278 	.word	0x20000278
    98d8:	0002b1e8 	.word	0x0002b1e8
    98dc:	0002b21c 	.word	0x0002b21c
    98e0:	0002b225 	.word	0x0002b225
    98e4:	20000000 	.word	0x20000000
    98e8:	2000013c 	.word	0x2000013c
    98ec:	0002b0a6 	.word	0x0002b0a6
    98f0:	0002b242 	.word	0x0002b242
    98f4:	00028970 	.word	0x00028970
    98f8:	0002b25d 	.word	0x0002b25d
    98fc:	20000120 	.word	0x20000120
    9900:	200020b4 	.word	0x200020b4
    9904:	0002b27f 	.word	0x0002b27f

00009908 <hci_num_completed_packets>:
{
    9908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    990c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    990e:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
    9910:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 9a00 <hci_num_completed_packets+0xf8>
{
    9914:	b088      	sub	sp, #32
			tx->pending_no_cb = 0U;
    9916:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    9918:	783b      	ldrb	r3, [r7, #0]
    991a:	429d      	cmp	r5, r3
    991c:	db02      	blt.n	9924 <hci_num_completed_packets+0x1c>
}
    991e:	b008      	add	sp, #32
    9920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    9924:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    9928:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    992c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    9930:	4650      	mov	r0, sl
    9932:	f002 f96d 	bl	bc10 <bt_conn_lookup_handle>
		if (!conn) {
    9936:	4604      	mov	r4, r0
    9938:	b1d8      	cbz	r0, 9972 <hci_num_completed_packets+0x6a>
			k_work_submit(&conn->tx_complete_work);
    993a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    993e:	2e00      	cmp	r6, #0
    9940:	d03d      	beq.n	99be <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    9942:	f04f 0320 	mov.w	r3, #32
    9946:	f3ef 8211 	mrs	r2, BASEPRI
    994a:	f383 8812 	msr	BASEPRI_MAX, r3
    994e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    9952:	69e3      	ldr	r3, [r4, #28]
    9954:	b1db      	cbz	r3, 998e <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    9956:	3b01      	subs	r3, #1
    9958:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    995a:	f382 8811 	msr	BASEPRI, r2
    995e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    9962:	4620      	mov	r0, r4
    9964:	f001 ffe8 	bl	b938 <bt_conn_get_pkts>
    9968:	3e01      	subs	r6, #1
    996a:	f017 fe45 	bl	215f8 <z_impl_k_sem_give>
    996e:	b2b6      	uxth	r6, r6
    9970:	e7e5      	b.n	993e <hci_num_completed_packets+0x36>
			BT_ERR("No connection for handle %u", handle);
    9972:	4b24      	ldr	r3, [pc, #144]	; (9a04 <hci_num_completed_packets+0xfc>)
    9974:	4824      	ldr	r0, [pc, #144]	; (9a08 <hci_num_completed_packets+0x100>)
    9976:	e9cd 3a06 	strd	r3, sl, [sp, #24]
    997a:	aa05      	add	r2, sp, #20
    997c:	2303      	movs	r3, #3
    997e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9982:	9301      	str	r3, [sp, #4]
    9984:	9305      	str	r3, [sp, #20]
    9986:	f01b f95b 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
    998a:	3501      	adds	r5, #1
    998c:	e7c4      	b.n	9918 <hci_num_completed_packets+0x10>
	return list->head;
    998e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9990:	b12b      	cbz	r3, 999e <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9992:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    9994:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    9996:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9998:	428b      	cmp	r3, r1
	list->tail = node;
    999a:	bf08      	it	eq
    999c:	61a0      	streq	r0, [r4, #24]
    999e:	f382 8811 	msr	BASEPRI, r2
    99a2:	f3bf 8f6f 	isb	sy
			if (!node) {
    99a6:	b973      	cbnz	r3, 99c6 <hci_num_completed_packets+0xbe>
				BT_ERR("packets count mismatch");
    99a8:	2302      	movs	r3, #2
    99aa:	4817      	ldr	r0, [pc, #92]	; (9a08 <hci_num_completed_packets+0x100>)
    99ac:	f8cd 9018 	str.w	r9, [sp, #24]
    99b0:	aa05      	add	r2, sp, #20
    99b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    99b6:	9301      	str	r3, [sp, #4]
    99b8:	9305      	str	r3, [sp, #20]
    99ba:	f01b f941 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    99be:	4620      	mov	r0, r4
    99c0:	f01b fba4 	bl	2510c <bt_conn_unref>
    99c4:	e7e1      	b.n	998a <hci_num_completed_packets+0x82>
	__asm__ volatile(
    99c6:	f04f 0220 	mov.w	r2, #32
    99ca:	f3ef 8111 	mrs	r1, BASEPRI
    99ce:	f382 8812 	msr	BASEPRI_MAX, r2
    99d2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    99d6:	68da      	ldr	r2, [r3, #12]
    99d8:	61e2      	str	r2, [r4, #28]
	return list->tail;
    99da:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    99dc:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    99e0:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    99e4:	b94a      	cbnz	r2, 99fa <hci_num_completed_packets+0xf2>
	list->head = node;
    99e6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    99ea:	f381 8811 	msr	BASEPRI, r1
    99ee:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    99f2:	4650      	mov	r0, sl
    99f4:	f017 ff6c 	bl	218d0 <k_work_submit>
    99f8:	e7b3      	b.n	9962 <hci_num_completed_packets+0x5a>
	parent->next = child;
    99fa:	6013      	str	r3, [r2, #0]
	list->tail = node;
    99fc:	6263      	str	r3, [r4, #36]	; 0x24
}
    99fe:	e7f4      	b.n	99ea <hci_num_completed_packets+0xe2>
    9a00:	0002b2bc 	.word	0x0002b2bc
    9a04:	0002b2a0 	.word	0x0002b2a0
    9a08:	00028970 	.word	0x00028970

00009a0c <hci_disconn_complete>:
{
    9a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    9a0e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    9a10:	7835      	ldrb	r5, [r6, #0]
{
    9a12:	b089      	sub	sp, #36	; 0x24
	if (evt->status) {
    9a14:	b995      	cbnz	r5, 9a3c <hci_disconn_complete+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9a16:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    9a1a:	4638      	mov	r0, r7
    9a1c:	f002 f8f8 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    9a20:	4604      	mov	r4, r0
    9a22:	b968      	cbnz	r0, 9a40 <hci_disconn_complete+0x34>
		BT_ERR("Unable to look up conn with handle %u", handle);
    9a24:	4b15      	ldr	r3, [pc, #84]	; (9a7c <hci_disconn_complete+0x70>)
    9a26:	4816      	ldr	r0, [pc, #88]	; (9a80 <hci_disconn_complete+0x74>)
    9a28:	e9cd 3706 	strd	r3, r7, [sp, #24]
    9a2c:	aa05      	add	r2, sp, #20
    9a2e:	2303      	movs	r3, #3
    9a30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9a34:	9301      	str	r3, [sp, #4]
    9a36:	9305      	str	r3, [sp, #20]
    9a38:	f01b f902 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    9a3c:	b009      	add	sp, #36	; 0x24
    9a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
    9a40:	78f3      	ldrb	r3, [r6, #3]
    9a42:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9a44:	4629      	mov	r1, r5
    9a46:	f002 f8eb 	bl	bc20 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    9a4a:	78a3      	ldrb	r3, [r4, #2]
    9a4c:	2b01      	cmp	r3, #1
    9a4e:	d005      	beq.n	9a5c <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
    9a50:	4620      	mov	r0, r4
}
    9a52:	b009      	add	sp, #36	; 0x24
    9a54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9a58:	f01b bb58 	b.w	2510c <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9a5c:	f3bf 8f5b 	dmb	ish
    9a60:	6863      	ldr	r3, [r4, #4]
    9a62:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9a66:	07db      	lsls	r3, r3, #31
    9a68:	d5f2      	bpl.n	9a50 <hci_disconn_complete+0x44>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9a6a:	4620      	mov	r0, r4
    9a6c:	2102      	movs	r1, #2
    9a6e:	f002 f8d7 	bl	bc20 <bt_conn_set_state>
		bt_le_scan_update(false);
    9a72:	4628      	mov	r0, r5
    9a74:	f001 fb70 	bl	b158 <bt_le_scan_update>
    9a78:	e7ea      	b.n	9a50 <hci_disconn_complete+0x44>
    9a7a:	bf00      	nop
    9a7c:	0002b2d3 	.word	0x0002b2d3
    9a80:	00028970 	.word	0x00028970

00009a84 <bt_hci_cmd_state_set_init>:
{
    9a84:	b510      	push	{r4, lr}
	state->bit = bit;
    9a86:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    9a8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9a8e:	720b      	strb	r3, [r1, #8]
{
    9a90:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    9a92:	f013 f9ad 	bl	1cdf0 <net_buf_id>
    9a96:	4b03      	ldr	r3, [pc, #12]	; (9aa4 <bt_hci_cmd_state_set_init+0x20>)
    9a98:	220c      	movs	r2, #12
    9a9a:	fb02 3300 	mla	r3, r2, r0, r3
    9a9e:	605c      	str	r4, [r3, #4]
}
    9aa0:	bd10      	pop	{r4, pc}
    9aa2:	bf00      	nop
    9aa4:	200020b4 	.word	0x200020b4

00009aa8 <bt_hci_cmd_create>:
{
    9aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    9aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9ab4:	4606      	mov	r6, r0
    9ab6:	4817      	ldr	r0, [pc, #92]	; (9b14 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    9ab8:	4d17      	ldr	r5, [pc, #92]	; (9b18 <bt_hci_cmd_create+0x70>)
{
    9aba:	460f      	mov	r7, r1
    9abc:	f01d fa8c 	bl	26fd8 <net_buf_alloc_fixed>
    9ac0:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    9ac2:	f100 0a08 	add.w	sl, r0, #8
    9ac6:	2100      	movs	r1, #0
    9ac8:	f04f 0800 	mov.w	r8, #0
    9acc:	4650      	mov	r0, sl
    9ace:	f01d faa8 	bl	27022 <net_buf_simple_reserve>
    9ad2:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    9ad6:	4620      	mov	r0, r4
    9ad8:	f013 f98a 	bl	1cdf0 <net_buf_id>
    9adc:	f04f 090c 	mov.w	r9, #12
    9ae0:	fb09 5000 	mla	r0, r9, r0, r5
    9ae4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    9ae6:	4620      	mov	r0, r4
    9ae8:	f013 f982 	bl	1cdf0 <net_buf_id>
    9aec:	fb09 5000 	mla	r0, r9, r0, r5
    9af0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    9af4:	4620      	mov	r0, r4
    9af6:	f013 f97b 	bl	1cdf0 <net_buf_id>
    9afa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    9afe:	2103      	movs	r1, #3
    9b00:	f8c5 8004 	str.w	r8, [r5, #4]
    9b04:	4650      	mov	r0, sl
    9b06:	f01d facf 	bl	270a8 <net_buf_simple_add>
	hdr->param_len = param_len;
    9b0a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    9b0c:	8006      	strh	r6, [r0, #0]
}
    9b0e:	4620      	mov	r0, r4
    9b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b14:	20000b00 	.word	0x20000b00
    9b18:	200020b4 	.word	0x200020b4

00009b1c <bt_hci_cmd_send>:
{
    9b1c:	b530      	push	{r4, r5, lr}
    9b1e:	4605      	mov	r5, r0
    9b20:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    9b22:	460c      	mov	r4, r1
    9b24:	b919      	cbnz	r1, 9b2e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    9b26:	f7ff ffbf 	bl	9aa8 <bt_hci_cmd_create>
		if (!buf) {
    9b2a:	4604      	mov	r4, r0
    9b2c:	b300      	cbz	r0, 9b70 <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    9b2e:	f640 4335 	movw	r3, #3125	; 0xc35
    9b32:	429d      	cmp	r5, r3
    9b34:	d116      	bne.n	9b64 <bt_hci_cmd_send+0x48>
		return bt_hci_ecc_send(buf);
    9b36:	4620      	mov	r0, r4
    9b38:	f7ff faec 	bl	9114 <bt_hci_ecc_send>
		if (err) {
    9b3c:	4605      	mov	r5, r0
    9b3e:	b170      	cbz	r0, 9b5e <bt_hci_cmd_send+0x42>
			BT_ERR("Unable to send to driver (err %d)", err);
    9b40:	4b0d      	ldr	r3, [pc, #52]	; (9b78 <bt_hci_cmd_send+0x5c>)
    9b42:	aa05      	add	r2, sp, #20
    9b44:	e9cd 3006 	strd	r3, r0, [sp, #24]
    9b48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9b4c:	2303      	movs	r3, #3
    9b4e:	480b      	ldr	r0, [pc, #44]	; (9b7c <bt_hci_cmd_send+0x60>)
    9b50:	9301      	str	r3, [sp, #4]
    9b52:	9305      	str	r3, [sp, #20]
    9b54:	f01b f874 	bl	24c40 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    9b58:	4620      	mov	r0, r4
    9b5a:	f013 fa05 	bl	1cf68 <net_buf_unref>
}
    9b5e:	4628      	mov	r0, r5
    9b60:	b009      	add	sp, #36	; 0x24
    9b62:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9b64:	4806      	ldr	r0, [pc, #24]	; (9b80 <bt_hci_cmd_send+0x64>)
    9b66:	4621      	mov	r1, r4
    9b68:	f01d fa5f 	bl	2702a <net_buf_put>
	return 0;
    9b6c:	2500      	movs	r5, #0
    9b6e:	e7f6      	b.n	9b5e <bt_hci_cmd_send+0x42>
			return -ENOBUFS;
    9b70:	f06f 0568 	mvn.w	r5, #104	; 0x68
    9b74:	e7f3      	b.n	9b5e <bt_hci_cmd_send+0x42>
    9b76:	bf00      	nop
    9b78:	0002b25d 	.word	0x0002b25d
    9b7c:	00028970 	.word	0x00028970
    9b80:	2000013c 	.word	0x2000013c

00009b84 <le_ltk_request>:
{
    9b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    9b86:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9b88:	8826      	ldrh	r6, [r4, #0]
    9b8a:	b2b7      	uxth	r7, r6
{
    9b8c:	b08f      	sub	sp, #60	; 0x3c
	conn = bt_conn_lookup_handle(handle);
    9b8e:	4638      	mov	r0, r7
    9b90:	f002 f83e 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    9b94:	4605      	mov	r5, r0
    9b96:	b968      	cbnz	r0, 9bb4 <le_ltk_request+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9b98:	4b27      	ldr	r3, [pc, #156]	; (9c38 <le_ltk_request+0xb4>)
    9b9a:	4828      	ldr	r0, [pc, #160]	; (9c3c <le_ltk_request+0xb8>)
    9b9c:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    9ba0:	aa0b      	add	r2, sp, #44	; 0x2c
    9ba2:	2303      	movs	r3, #3
    9ba4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9ba8:	9304      	str	r3, [sp, #16]
    9baa:	930b      	str	r3, [sp, #44]	; 0x2c
    9bac:	f01b f848 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    9bb0:	b00f      	add	sp, #60	; 0x3c
    9bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    9bb4:	af04      	add	r7, sp, #16
    9bb6:	f8d4 2002 	ldr.w	r2, [r4, #2]
    9bba:	f8d4 3006 	ldr.w	r3, [r4, #6]
    9bbe:	9701      	str	r7, [sp, #4]
    9bc0:	8961      	ldrh	r1, [r4, #10]
    9bc2:	9100      	str	r1, [sp, #0]
    9bc4:	f01d f812 	bl	26bec <bt_smp_request_ltk>
    9bc8:	b328      	cbz	r0, 9c16 <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    9bca:	2112      	movs	r1, #18
    9bcc:	f242 001a 	movw	r0, #8218	; 0x201a
    9bd0:	f7ff ff6a 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9bd4:	4604      	mov	r4, r0
    9bd6:	b970      	cbnz	r0, 9bf6 <le_ltk_request+0x72>
		BT_ERR("Out of command buffers");
    9bd8:	4b19      	ldr	r3, [pc, #100]	; (9c40 <le_ltk_request+0xbc>)
    9bda:	930c      	str	r3, [sp, #48]	; 0x30
    9bdc:	4817      	ldr	r0, [pc, #92]	; (9c3c <le_ltk_request+0xb8>)
    9bde:	2302      	movs	r3, #2
    9be0:	aa0b      	add	r2, sp, #44	; 0x2c
    9be2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9be6:	9303      	str	r3, [sp, #12]
    9be8:	930b      	str	r3, [sp, #44]	; 0x2c
    9bea:	f01b f829 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
    9bee:	4628      	mov	r0, r5
    9bf0:	f01b fa8c 	bl	2510c <bt_conn_unref>
    9bf4:	e7dc      	b.n	9bb0 <le_ltk_request+0x2c>
    9bf6:	2112      	movs	r1, #18
    9bf8:	3008      	adds	r0, #8
    9bfa:	f01d fa55 	bl	270a8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    9bfe:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    9c00:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    9c04:	2210      	movs	r2, #16
    9c06:	f01a feca 	bl	2499e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    9c0a:	4621      	mov	r1, r4
    9c0c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9c10:	f7ff ff84 	bl	9b1c <bt_hci_cmd_send>
    9c14:	e7eb      	b.n	9bee <le_ltk_request+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    9c16:	2102      	movs	r1, #2
    9c18:	f242 001b 	movw	r0, #8219	; 0x201b
    9c1c:	f7ff ff44 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9c20:	4604      	mov	r4, r0
    9c22:	2800      	cmp	r0, #0
    9c24:	d0d8      	beq.n	9bd8 <le_ltk_request+0x54>
    9c26:	2102      	movs	r1, #2
    9c28:	3008      	adds	r0, #8
    9c2a:	f01d fa3d 	bl	270a8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9c2e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    9c30:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9c32:	f242 001b 	movw	r0, #8219	; 0x201b
    9c36:	e7eb      	b.n	9c10 <le_ltk_request+0x8c>
    9c38:	0002b0d2 	.word	0x0002b0d2
    9c3c:	00028970 	.word	0x00028970
    9c40:	0002b2f9 	.word	0x0002b2f9

00009c44 <le_conn_param_neg_reply>:
{
    9c44:	b570      	push	{r4, r5, r6, lr}
    9c46:	4606      	mov	r6, r0
    9c48:	b088      	sub	sp, #32
    9c4a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    9c4c:	f242 0021 	movw	r0, #8225	; 0x2021
    9c50:	2103      	movs	r1, #3
    9c52:	f7ff ff29 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9c56:	4604      	mov	r4, r0
    9c58:	b960      	cbnz	r0, 9c74 <le_conn_param_neg_reply+0x30>
		BT_ERR("Unable to allocate buffer");
    9c5a:	4b0d      	ldr	r3, [pc, #52]	; (9c90 <le_conn_param_neg_reply+0x4c>)
    9c5c:	9306      	str	r3, [sp, #24]
    9c5e:	480d      	ldr	r0, [pc, #52]	; (9c94 <le_conn_param_neg_reply+0x50>)
    9c60:	2302      	movs	r3, #2
    9c62:	aa05      	add	r2, sp, #20
    9c64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9c68:	9301      	str	r3, [sp, #4]
    9c6a:	9305      	str	r3, [sp, #20]
    9c6c:	f01a ffe8 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    9c70:	b008      	add	sp, #32
    9c72:	bd70      	pop	{r4, r5, r6, pc}
    9c74:	2103      	movs	r1, #3
    9c76:	3008      	adds	r0, #8
    9c78:	f01d fa16 	bl	270a8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9c7c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    9c7e:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    9c80:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9c82:	f242 0021 	movw	r0, #8225	; 0x2021
}
    9c86:	b008      	add	sp, #32
    9c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9c8c:	f7ff bf46 	b.w	9b1c <bt_hci_cmd_send>
    9c90:	0002b310 	.word	0x0002b310
    9c94:	00028970 	.word	0x00028970

00009c98 <le_conn_param_req>:
{
    9c98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    9c9a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9c9c:	78d9      	ldrb	r1, [r3, #3]
    9c9e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9ca0:	881f      	ldrh	r7, [r3, #0]
{
    9ca2:	b08b      	sub	sp, #44	; 0x2c
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9ca4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9ca8:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9cac:	7959      	ldrb	r1, [r3, #5]
    9cae:	791a      	ldrb	r2, [r3, #4]
    9cb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9cb4:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    9cb8:	799a      	ldrb	r2, [r3, #6]
    9cba:	79d9      	ldrb	r1, [r3, #7]
    9cbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9cc0:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9cc4:	7a1a      	ldrb	r2, [r3, #8]
    9cc6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    9cc8:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9cca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9cce:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9cd0:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
    9cd4:	f001 ff9c 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    9cd8:	4606      	mov	r6, r0
    9cda:	b988      	cbnz	r0, 9d00 <le_conn_param_req+0x68>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9cdc:	4b20      	ldr	r3, [pc, #128]	; (9d60 <le_conn_param_req+0xc8>)
    9cde:	4821      	ldr	r0, [pc, #132]	; (9d64 <le_conn_param_req+0xcc>)
    9ce0:	e9cd 3408 	strd	r3, r4, [sp, #32]
    9ce4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9ce8:	2303      	movs	r3, #3
    9cea:	aa07      	add	r2, sp, #28
    9cec:	9301      	str	r3, [sp, #4]
    9cee:	9307      	str	r3, [sp, #28]
    9cf0:	f01a ffa6 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    9cf4:	2102      	movs	r1, #2
    9cf6:	4620      	mov	r0, r4
    9cf8:	f7ff ffa4 	bl	9c44 <le_conn_param_neg_reply>
}
    9cfc:	b00b      	add	sp, #44	; 0x2c
    9cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    9d00:	a902      	add	r1, sp, #8
    9d02:	f002 f917 	bl	bf34 <le_param_req>
    9d06:	b938      	cbnz	r0, 9d18 <le_conn_param_req+0x80>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    9d08:	211e      	movs	r1, #30
    9d0a:	4620      	mov	r0, r4
    9d0c:	f7ff ff9a 	bl	9c44 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    9d10:	4630      	mov	r0, r6
    9d12:	f01b f9fb 	bl	2510c <bt_conn_unref>
    9d16:	e7f1      	b.n	9cfc <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    9d18:	210e      	movs	r1, #14
    9d1a:	f242 0020 	movw	r0, #8224	; 0x2020
    9d1e:	f7ff fec3 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9d22:	4605      	mov	r5, r0
    9d24:	2800      	cmp	r0, #0
    9d26:	d0f3      	beq.n	9d10 <le_conn_param_req+0x78>
    9d28:	210e      	movs	r1, #14
    9d2a:	3008      	adds	r0, #8
    9d2c:	f01d f9bc 	bl	270a8 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    9d30:	220e      	movs	r2, #14
    9d32:	4604      	mov	r4, r0
    9d34:	2100      	movs	r1, #0
    9d36:	f01a fe3d 	bl	249b4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    9d3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    9d3e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    9d40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9d44:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    9d46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9d4a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    9d4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	cp->handle = sys_cpu_to_le16(handle);
    9d50:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    9d52:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    9d54:	4629      	mov	r1, r5
    9d56:	f242 0020 	movw	r0, #8224	; 0x2020
    9d5a:	f7ff fedf 	bl	9b1c <bt_hci_cmd_send>
    9d5e:	e7d7      	b.n	9d10 <le_conn_param_req+0x78>
    9d60:	0002b0d2 	.word	0x0002b0d2
    9d64:	00028970 	.word	0x00028970

00009d68 <bt_hci_cmd_send_sync>:
{
    9d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9d6c:	b089      	sub	sp, #36	; 0x24
    9d6e:	4680      	mov	r8, r0
    9d70:	af00      	add	r7, sp, #0
    9d72:	4615      	mov	r5, r2
	if (!buf) {
    9d74:	460c      	mov	r4, r1
    9d76:	b921      	cbnz	r1, 9d82 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    9d78:	f7ff fe96 	bl	9aa8 <bt_hci_cmd_create>
		if (!buf) {
    9d7c:	4604      	mov	r4, r0
    9d7e:	2800      	cmp	r0, #0
    9d80:	d05e      	beq.n	9e40 <bt_hci_cmd_send_sync+0xd8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9d82:	f107 0608 	add.w	r6, r7, #8
    9d86:	2201      	movs	r2, #1
    9d88:	2100      	movs	r1, #0
    9d8a:	4630      	mov	r0, r6
    9d8c:	f01d fff5 	bl	27d7a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    9d90:	4620      	mov	r0, r4
    9d92:	f013 f82d 	bl	1cdf0 <net_buf_id>
    9d96:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 9e48 <bt_hci_cmd_send_sync+0xe0>
    9d9a:	230c      	movs	r3, #12
    9d9c:	fb03 9000 	mla	r0, r3, r0, r9
    9da0:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    9da2:	4620      	mov	r0, r4
    9da4:	f01d f94e 	bl	27044 <net_buf_ref>
    9da8:	4601      	mov	r1, r0
    9daa:	4828      	ldr	r0, [pc, #160]	; (9e4c <bt_hci_cmd_send_sync+0xe4>)
    9dac:	f01d f93d 	bl	2702a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    9db0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    9db4:	4630      	mov	r0, r6
    9db6:	2300      	movs	r3, #0
    9db8:	f017 fc44 	bl	21644 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    9dbc:	4606      	mov	r6, r0
    9dbe:	b180      	cbz	r0, 9de2 <bt_hci_cmd_send_sync+0x7a>
    9dc0:	4a23      	ldr	r2, [pc, #140]	; (9e50 <bt_hci_cmd_send_sync+0xe8>)
    9dc2:	4924      	ldr	r1, [pc, #144]	; (9e54 <bt_hci_cmd_send_sync+0xec>)
    9dc4:	4824      	ldr	r0, [pc, #144]	; (9e58 <bt_hci_cmd_send_sync+0xf0>)
    9dc6:	f240 1331 	movw	r3, #305	; 0x131
    9dca:	f018 fc9b 	bl	22704 <printk>
    9dce:	4823      	ldr	r0, [pc, #140]	; (9e5c <bt_hci_cmd_send_sync+0xf4>)
    9dd0:	4631      	mov	r1, r6
    9dd2:	f018 fc97 	bl	22704 <printk>
    9dd6:	4040      	eors	r0, r0
    9dd8:	f380 8811 	msr	BASEPRI, r0
    9ddc:	f04f 0003 	mov.w	r0, #3
    9de0:	df02      	svc	2
	status = cmd(buf)->status;
    9de2:	4620      	mov	r0, r4
    9de4:	f013 f804 	bl	1cdf0 <net_buf_id>
    9de8:	230c      	movs	r3, #12
    9dea:	4358      	muls	r0, r3
    9dec:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    9df0:	b1ee      	cbz	r6, 9e2e <bt_hci_cmd_send_sync+0xc6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    9df2:	4b1b      	ldr	r3, [pc, #108]	; (9e60 <bt_hci_cmd_send_sync+0xf8>)
    9df4:	481b      	ldr	r0, [pc, #108]	; (9e64 <bt_hci_cmd_send_sync+0xfc>)
    9df6:	466d      	mov	r5, sp
    9df8:	b088      	sub	sp, #32
    9dfa:	466a      	mov	r2, sp
    9dfc:	e9c2 3804 	strd	r3, r8, [r2, #16]
    9e00:	2304      	movs	r3, #4
    9e02:	6196      	str	r6, [r2, #24]
    9e04:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    9e08:	f842 3f0c 	str.w	r3, [r2, #12]!
    9e0c:	607b      	str	r3, [r7, #4]
    9e0e:	f01a ff17 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    9e12:	4620      	mov	r0, r4
    9e14:	46ad      	mov	sp, r5
    9e16:	f013 f8a7 	bl	1cf68 <net_buf_unref>
			return -EIO;
    9e1a:	2e09      	cmp	r6, #9
    9e1c:	bf0c      	ite	eq
    9e1e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    9e22:	f06f 0004 	mvnne.w	r0, #4
}
    9e26:	3724      	adds	r7, #36	; 0x24
    9e28:	46bd      	mov	sp, r7
    9e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    9e2e:	b115      	cbz	r5, 9e36 <bt_hci_cmd_send_sync+0xce>
		*rsp = buf;
    9e30:	602c      	str	r4, [r5, #0]
	return 0;
    9e32:	4630      	mov	r0, r6
    9e34:	e7f7      	b.n	9e26 <bt_hci_cmd_send_sync+0xbe>
		net_buf_unref(buf);
    9e36:	4620      	mov	r0, r4
    9e38:	f013 f896 	bl	1cf68 <net_buf_unref>
	return 0;
    9e3c:	4628      	mov	r0, r5
    9e3e:	e7f2      	b.n	9e26 <bt_hci_cmd_send_sync+0xbe>
			return -ENOBUFS;
    9e40:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9e44:	e7ef      	b.n	9e26 <bt_hci_cmd_send_sync+0xbe>
    9e46:	bf00      	nop
    9e48:	200020b4 	.word	0x200020b4
    9e4c:	2000013c 	.word	0x2000013c
    9e50:	0002b1e8 	.word	0x0002b1e8
    9e54:	0002b21c 	.word	0x0002b21c
    9e58:	0002b225 	.word	0x0002b225
    9e5c:	0002b32a 	.word	0x0002b32a
    9e60:	0002b34a 	.word	0x0002b34a
    9e64:	00028970 	.word	0x00028970

00009e68 <hci_le_read_max_data_len>:
{
    9e68:	b570      	push	{r4, r5, r6, lr}
    9e6a:	b088      	sub	sp, #32
    9e6c:	4606      	mov	r6, r0
    9e6e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    9e70:	466a      	mov	r2, sp
    9e72:	2100      	movs	r1, #0
    9e74:	f242 002f 	movw	r0, #8239	; 0x202f
    9e78:	f7ff ff76 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    9e7c:	4604      	mov	r4, r0
    9e7e:	b168      	cbz	r0, 9e9c <hci_le_read_max_data_len+0x34>
		BT_ERR("Failed to read DLE max data len");
    9e80:	4b0c      	ldr	r3, [pc, #48]	; (9eb4 <hci_le_read_max_data_len+0x4c>)
    9e82:	9306      	str	r3, [sp, #24]
    9e84:	480c      	ldr	r0, [pc, #48]	; (9eb8 <hci_le_read_max_data_len+0x50>)
    9e86:	2302      	movs	r3, #2
    9e88:	aa05      	add	r2, sp, #20
    9e8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9e8e:	9301      	str	r3, [sp, #4]
    9e90:	9305      	str	r3, [sp, #20]
    9e92:	f01a fed5 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    9e96:	4620      	mov	r0, r4
    9e98:	b008      	add	sp, #32
    9e9a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9e9c:	9800      	ldr	r0, [sp, #0]
    9e9e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    9ea0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9ea4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    9ea6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    9eaa:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    9eac:	f013 f85c 	bl	1cf68 <net_buf_unref>
	return 0;
    9eb0:	e7f1      	b.n	9e96 <hci_le_read_max_data_len+0x2e>
    9eb2:	bf00      	nop
    9eb4:	0002b366 	.word	0x0002b366
    9eb8:	00028970 	.word	0x00028970

00009ebc <bt_le_create_conn_legacy>:
{
    9ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ec0:	b086      	sub	sp, #24
    9ec2:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    9ec4:	f10d 010b 	add.w	r1, sp, #11
    9ec8:	2000      	movs	r0, #0
    9eca:	f001 f85f 	bl	af8c <bt_id_set_create_conn_own_addr>
	if (err) {
    9ece:	4605      	mov	r5, r0
    9ed0:	2800      	cmp	r0, #0
    9ed2:	d147      	bne.n	9f64 <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    9ed4:	2119      	movs	r1, #25
    9ed6:	f242 000d 	movw	r0, #8205	; 0x200d
    9eda:	f7ff fde5 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9ede:	4607      	mov	r7, r0
    9ee0:	2800      	cmp	r0, #0
    9ee2:	d046      	beq.n	9f72 <bt_le_create_conn_legacy+0xb6>
    9ee4:	2119      	movs	r1, #25
    9ee6:	3008      	adds	r0, #8
    9ee8:	f01d f8de 	bl	270a8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    9eec:	4629      	mov	r1, r5
    9eee:	4604      	mov	r4, r0
    9ef0:	2219      	movs	r2, #25
    9ef2:	f01a fd5f 	bl	249b4 <memset>
		if (!bt_dev.le.rl_size ||
    9ef6:	4d20      	ldr	r5, [pc, #128]	; (9f78 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
    9ef8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9efc:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    9efe:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    9f02:	b39b      	cbz	r3, 9f6c <bt_le_create_conn_legacy+0xb0>
    9f04:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    9f08:	429a      	cmp	r2, r3
    9f0a:	d82f      	bhi.n	9f6c <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    9f0c:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    9f10:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    9f12:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    9f16:	f01a fe81 	bl	24c1c <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    9f1a:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    9f1e:	89ab      	ldrh	r3, [r5, #12]
    9f20:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    9f22:	89eb      	ldrh	r3, [r5, #14]
    9f24:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    9f26:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    9f2a:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    9f2e:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    9f32:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    9f36:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    9f3a:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    9f3e:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    9f42:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    9f46:	2301      	movs	r3, #1
    9f48:	4a0c      	ldr	r2, [pc, #48]	; (9f7c <bt_le_create_conn_legacy+0xc0>)
    9f4a:	9300      	str	r3, [sp, #0]
    9f4c:	a903      	add	r1, sp, #12
    9f4e:	230b      	movs	r3, #11
    9f50:	4638      	mov	r0, r7
    9f52:	f7ff fd97 	bl	9a84 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    9f56:	4642      	mov	r2, r8
    9f58:	4639      	mov	r1, r7
    9f5a:	f242 000d 	movw	r0, #8205	; 0x200d
    9f5e:	f7ff ff03 	bl	9d68 <bt_hci_cmd_send_sync>
    9f62:	4605      	mov	r5, r0
}
    9f64:	4628      	mov	r0, r5
    9f66:	b006      	add	sp, #24
    9f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    9f6c:	f106 0196 	add.w	r1, r6, #150	; 0x96
    9f70:	e7ce      	b.n	9f10 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
    9f72:	f06f 0568 	mvn.w	r5, #104	; 0x68
    9f76:	e7f5      	b.n	9f64 <bt_le_create_conn_legacy+0xa8>
    9f78:	20000000 	.word	0x20000000
    9f7c:	200000cc 	.word	0x200000cc

00009f80 <bt_le_create_conn_cancel>:
{
    9f80:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9f82:	2100      	movs	r1, #0
{
    9f84:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9f86:	f242 000e 	movw	r0, #8206	; 0x200e
    9f8a:	f7ff fd8d 	bl	9aa8 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    9f8e:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9f90:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    9f92:	230b      	movs	r3, #11
    9f94:	a903      	add	r1, sp, #12
    9f96:	4a06      	ldr	r2, [pc, #24]	; (9fb0 <bt_le_create_conn_cancel+0x30>)
    9f98:	9500      	str	r5, [sp, #0]
    9f9a:	f7ff fd73 	bl	9a84 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    9f9e:	462a      	mov	r2, r5
    9fa0:	4621      	mov	r1, r4
    9fa2:	f242 000e 	movw	r0, #8206	; 0x200e
    9fa6:	f7ff fedf 	bl	9d68 <bt_hci_cmd_send_sync>
}
    9faa:	b007      	add	sp, #28
    9fac:	bd30      	pop	{r4, r5, pc}
    9fae:	bf00      	nop
    9fb0:	200000cc 	.word	0x200000cc

00009fb4 <conn_auto_initiate>:
{
    9fb4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9fb6:	7b43      	ldrb	r3, [r0, #13]
    9fb8:	2b07      	cmp	r3, #7
{
    9fba:	b08a      	sub	sp, #40	; 0x28
    9fbc:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9fbe:	d170      	bne.n	a0a2 <conn_auto_initiate+0xee>
    9fc0:	f3bf 8f5b 	dmb	ish
    9fc4:	6843      	ldr	r3, [r0, #4]
    9fc6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9fca:	049b      	lsls	r3, r3, #18
    9fcc:	f100 0604 	add.w	r6, r0, #4
    9fd0:	d41b      	bmi.n	a00a <conn_auto_initiate+0x56>
    9fd2:	78c3      	ldrb	r3, [r0, #3]
    9fd4:	b123      	cbz	r3, 9fe0 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    9fd6:	4b34      	ldr	r3, [pc, #208]	; (a0a8 <conn_auto_initiate+0xf4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    9fd8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    9fdc:	071d      	lsls	r5, r3, #28
    9fde:	d514      	bpl.n	a00a <conn_auto_initiate+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9fe0:	2102      	movs	r1, #2
    9fe2:	f242 0016 	movw	r0, #8214	; 0x2016
    9fe6:	f7ff fd5f 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    9fea:	4605      	mov	r5, r0
    9fec:	b168      	cbz	r0, a00a <conn_auto_initiate+0x56>
    9fee:	2102      	movs	r1, #2
    9ff0:	3008      	adds	r0, #8
    9ff2:	f01d f859 	bl	270a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9ff6:	8823      	ldrh	r3, [r4, #0]
    9ff8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9ffa:	4629      	mov	r1, r5
    9ffc:	f242 0016 	movw	r0, #8214	; 0x2016
}
    a000:	b00a      	add	sp, #40	; 0x28
    a002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    a006:	f7ff bd89 	b.w	9b1c <bt_hci_cmd_send>
    a00a:	f3bf 8f5b 	dmb	ish
    a00e:	6863      	ldr	r3, [r4, #4]
    a010:	4d25      	ldr	r5, [pc, #148]	; (a0a8 <conn_auto_initiate+0xf4>)
    a012:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    a016:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    a01a:	f3c3 3100 	ubfx	r1, r3, #12, #1
    a01e:	d11d      	bne.n	a05c <conn_auto_initiate+0xa8>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    a020:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    a024:	07d8      	lsls	r0, r3, #31
    a026:	d519      	bpl.n	a05c <conn_auto_initiate+0xa8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    a028:	2302      	movs	r3, #2
    a02a:	9100      	str	r1, [sp, #0]
    a02c:	461a      	mov	r2, r3
    a02e:	4620      	mov	r0, r4
    a030:	f01a fe61 	bl	24cf6 <bt_le_set_phy>
		if (!err) {
    a034:	b930      	cbnz	r0, a044 <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a036:	2180      	movs	r1, #128	; 0x80
    a038:	4630      	mov	r0, r6
}
    a03a:	b00a      	add	sp, #40	; 0x28
    a03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a040:	f01a bdef 	b.w	24c22 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    a044:	4b19      	ldr	r3, [pc, #100]	; (a0ac <conn_auto_initiate+0xf8>)
    a046:	aa07      	add	r2, sp, #28
    a048:	e9cd 3008 	strd	r3, r0, [sp, #32]
    a04c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a050:	2303      	movs	r3, #3
    a052:	4817      	ldr	r0, [pc, #92]	; (a0b0 <conn_auto_initiate+0xfc>)
    a054:	9303      	str	r3, [sp, #12]
    a056:	9307      	str	r3, [sp, #28]
    a058:	f01a fdf2 	bl	24c40 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    a05c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    a060:	069a      	lsls	r2, r3, #26
    a062:	d51e      	bpl.n	a0a2 <conn_auto_initiate+0xee>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    a064:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    a068:	689b      	ldr	r3, [r3, #8]
    a06a:	079b      	lsls	r3, r3, #30
    a06c:	d519      	bpl.n	a0a2 <conn_auto_initiate+0xee>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    a06e:	f10d 010a 	add.w	r1, sp, #10
    a072:	a802      	add	r0, sp, #8
    a074:	f7ff fef8 	bl	9e68 <hci_le_read_max_data_len>
			if (!err) {
    a078:	b998      	cbnz	r0, a0a2 <conn_auto_initiate+0xee>
				err = bt_le_set_data_len(conn,
    a07a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    a07e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a082:	4620      	mov	r0, r4
    a084:	f01a fe1a 	bl	24cbc <bt_le_set_data_len>
				if (err) {
    a088:	b158      	cbz	r0, a0a2 <conn_auto_initiate+0xee>
					BT_ERR("Failed to set data len (%d)", err);
    a08a:	4b0a      	ldr	r3, [pc, #40]	; (a0b4 <conn_auto_initiate+0x100>)
    a08c:	aa07      	add	r2, sp, #28
    a08e:	e9cd 3008 	strd	r3, r0, [sp, #32]
    a092:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a096:	2303      	movs	r3, #3
    a098:	4805      	ldr	r0, [pc, #20]	; (a0b0 <conn_auto_initiate+0xfc>)
    a09a:	9303      	str	r3, [sp, #12]
    a09c:	9307      	str	r3, [sp, #28]
    a09e:	f01a fdcf 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    a0a2:	b00a      	add	sp, #40	; 0x28
    a0a4:	bd70      	pop	{r4, r5, r6, pc}
    a0a6:	bf00      	nop
    a0a8:	20000000 	.word	0x20000000
    a0ac:	0002b386 	.word	0x0002b386
    a0b0:	00028970 	.word	0x00028970
    a0b4:	0002b3a0 	.word	0x0002b3a0

0000a0b8 <le_phy_update_complete>:
{
    a0b8:	b530      	push	{r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a0ba:	6883      	ldr	r3, [r0, #8]
    a0bc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    a0c0:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    a0c2:	4628      	mov	r0, r5
    a0c4:	f001 fda4 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    a0c8:	4604      	mov	r4, r0
    a0ca:	b968      	cbnz	r0, a0e8 <le_phy_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    a0cc:	4b14      	ldr	r3, [pc, #80]	; (a120 <le_phy_update_complete+0x68>)
    a0ce:	4815      	ldr	r0, [pc, #84]	; (a124 <le_phy_update_complete+0x6c>)
    a0d0:	e9cd 3506 	strd	r3, r5, [sp, #24]
    a0d4:	aa05      	add	r2, sp, #20
    a0d6:	2303      	movs	r3, #3
    a0d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a0dc:	9301      	str	r3, [sp, #4]
    a0de:	9305      	str	r3, [sp, #20]
    a0e0:	f01a fdae 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    a0e4:	b009      	add	sp, #36	; 0x24
    a0e6:	bd30      	pop	{r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    a0e8:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a0ea:	f3bf 8f5b 	dmb	ish
    a0ee:	e850 3f00 	ldrex	r3, [r0]
    a0f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a0f6:	e840 2100 	strex	r1, r2, [r0]
    a0fa:	2900      	cmp	r1, #0
    a0fc:	d1f7      	bne.n	a0ee <le_phy_update_complete+0x36>
    a0fe:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    a102:	061b      	lsls	r3, r3, #24
    a104:	d506      	bpl.n	a114 <le_phy_update_complete+0x5c>
    a106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a10a:	f01a fd8a 	bl	24c22 <atomic_or>
		conn_auto_initiate(conn);
    a10e:	4620      	mov	r0, r4
    a110:	f7ff ff50 	bl	9fb4 <conn_auto_initiate>
	bt_conn_unref(conn);
    a114:	4620      	mov	r0, r4
}
    a116:	b009      	add	sp, #36	; 0x24
    a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    a11c:	f01a bff6 	b.w	2510c <bt_conn_unref>
    a120:	0002b0d2 	.word	0x0002b0d2
    a124:	00028970 	.word	0x00028970

0000a128 <le_remote_feat_complete>:
{
    a128:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    a12a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a12c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    a130:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    a132:	4630      	mov	r0, r6
    a134:	f001 fd6c 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    a138:	4604      	mov	r4, r0
    a13a:	b968      	cbnz	r0, a158 <le_remote_feat_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    a13c:	4b11      	ldr	r3, [pc, #68]	; (a184 <le_remote_feat_complete+0x5c>)
    a13e:	4812      	ldr	r0, [pc, #72]	; (a188 <le_remote_feat_complete+0x60>)
    a140:	e9cd 3606 	strd	r3, r6, [sp, #24]
    a144:	aa05      	add	r2, sp, #20
    a146:	2303      	movs	r3, #3
    a148:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a14c:	9301      	str	r3, [sp, #4]
    a14e:	9305      	str	r3, [sp, #20]
    a150:	f01a fd76 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    a154:	b008      	add	sp, #32
    a156:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    a158:	782b      	ldrb	r3, [r5, #0]
    a15a:	b923      	cbnz	r3, a166 <le_remote_feat_complete+0x3e>
		memcpy(conn->le.features, evt->features,
    a15c:	2208      	movs	r2, #8
    a15e:	1ce9      	adds	r1, r5, #3
    a160:	30ac      	adds	r0, #172	; 0xac
    a162:	f01a fc1c 	bl	2499e <memcpy>
    a166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    a16a:	1d20      	adds	r0, r4, #4
    a16c:	f01a fd59 	bl	24c22 <atomic_or>
	conn_auto_initiate(conn);
    a170:	4620      	mov	r0, r4
    a172:	f7ff ff1f 	bl	9fb4 <conn_auto_initiate>
	bt_conn_unref(conn);
    a176:	4620      	mov	r0, r4
}
    a178:	b008      	add	sp, #32
    a17a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    a17e:	f01a bfc5 	b.w	2510c <bt_conn_unref>
    a182:	bf00      	nop
    a184:	0002b0d2 	.word	0x0002b0d2
    a188:	00028970 	.word	0x00028970

0000a18c <bt_hci_le_enh_conn_complete>:
{
    a18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a190:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    a194:	4a73      	ldr	r2, [pc, #460]	; (a364 <bt_hci_le_enh_conn_complete+0x1d8>)
	handle |= ~BT_ACL_HANDLE_MASK;
    a196:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    a19a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    a19c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    a1a0:	b29b      	uxth	r3, r3
    a1a2:	4299      	cmp	r1, r3
{
    a1a4:	4605      	mov	r5, r0
    a1a6:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    a1aa:	bf08      	it	eq
    a1ac:	8016      	strheq	r6, [r2, #0]
{
    a1ae:	b08d      	sub	sp, #52	; 0x34
			return true;
    a1b0:	bf08      	it	eq
    a1b2:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    a1b4:	f000 fcdc 	bl	ab70 <bt_id_pending_keys_update>
	if (evt->status) {
    a1b8:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a1ba:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    a1be:	2c00      	cmp	r4, #0
    a1c0:	d038      	beq.n	a234 <bt_hci_le_enh_conn_complete+0xa8>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a1c2:	2c02      	cmp	r4, #2
    a1c4:	d129      	bne.n	a21a <bt_hci_le_enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    a1c6:	2100      	movs	r1, #0
    a1c8:	2206      	movs	r2, #6
    a1ca:	4608      	mov	r0, r1
    a1cc:	f001 ffa2 	bl	c114 <bt_conn_lookup_state_le>
	if (!conn) {
    a1d0:	4605      	mov	r5, r0
    a1d2:	b978      	cbnz	r0, a1f4 <bt_hci_le_enh_conn_complete+0x68>
		BT_ERR("No pending central connection");
    a1d4:	4b64      	ldr	r3, [pc, #400]	; (a368 <bt_hci_le_enh_conn_complete+0x1dc>)
    a1d6:	4865      	ldr	r0, [pc, #404]	; (a36c <bt_hci_le_enh_conn_complete+0x1e0>)
    a1d8:	930a      	str	r3, [sp, #40]	; 0x28
    a1da:	aa09      	add	r2, sp, #36	; 0x24
    a1dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a1e0:	9404      	str	r4, [sp, #16]
    a1e2:	9409      	str	r4, [sp, #36]	; 0x24
    a1e4:	f01a fd2c 	bl	24c40 <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    a1e8:	2000      	movs	r0, #0
    a1ea:	f000 ffb5 	bl	b158 <bt_le_scan_update>
}
    a1ee:	b00d      	add	sp, #52	; 0x34
    a1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    a1f4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a1f6:	2100      	movs	r1, #0
    a1f8:	f001 fd12 	bl	bc20 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a1fc:	f3bf 8f5b 	dmb	ish
    a200:	686b      	ldr	r3, [r5, #4]
    a202:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    a206:	07db      	lsls	r3, r3, #31
    a208:	d503      	bpl.n	a212 <bt_hci_le_enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a20a:	4621      	mov	r1, r4
    a20c:	4628      	mov	r0, r5
    a20e:	f001 fd07 	bl	bc20 <bt_conn_set_state>
	bt_conn_unref(conn);
    a212:	4628      	mov	r0, r5
    a214:	f01a ff7a 	bl	2510c <bt_conn_unref>
    a218:	e7e6      	b.n	a1e8 <bt_hci_le_enh_conn_complete+0x5c>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    a21a:	4b55      	ldr	r3, [pc, #340]	; (a370 <bt_hci_le_enh_conn_complete+0x1e4>)
    a21c:	4853      	ldr	r0, [pc, #332]	; (a36c <bt_hci_le_enh_conn_complete+0x1e0>)
    a21e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    a222:	aa09      	add	r2, sp, #36	; 0x24
    a224:	2303      	movs	r3, #3
    a226:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a22a:	9304      	str	r3, [sp, #16]
    a22c:	9309      	str	r3, [sp, #36]	; 0x24
    a22e:	f01a fd07 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		return;
    a232:	e7dc      	b.n	a1ee <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a234:	792b      	ldrb	r3, [r5, #4]
    a236:	3b02      	subs	r3, #2
    a238:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a23a:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a23e:	d83b      	bhi.n	a2b8 <bt_hci_le_enh_conn_complete+0x12c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a240:	4649      	mov	r1, r9
    a242:	a806      	add	r0, sp, #24
    a244:	f01a fcea 	bl	24c1c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a248:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
    a24c:	2206      	movs	r2, #6
    a24e:	3b02      	subs	r3, #2
    a250:	f105 0111 	add.w	r1, r5, #17
    a254:	f10d 0011 	add.w	r0, sp, #17
    a258:	f88d 3018 	strb.w	r3, [sp, #24]
    a25c:	f01a fb9f 	bl	2499e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    a260:	2301      	movs	r3, #1
    a262:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    a266:	78e8      	ldrb	r0, [r5, #3]
    a268:	b9a0      	cbnz	r0, a294 <bt_hci_le_enh_conn_complete+0x108>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    a26a:	2206      	movs	r2, #6
    a26c:	a906      	add	r1, sp, #24
    a26e:	f001 ff51 	bl	c114 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a272:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    a274:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a276:	b963      	cbnz	r3, a292 <bt_hci_le_enh_conn_complete+0x106>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a278:	f3bf 8f5b 	dmb	ish
    a27c:	4b3d      	ldr	r3, [pc, #244]	; (a374 <bt_hci_le_enh_conn_complete+0x1e8>)
    a27e:	e853 2f00 	ldrex	r2, [r3]
    a282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    a286:	e843 2100 	strex	r1, r2, [r3]
    a28a:	2900      	cmp	r1, #0
    a28c:	d1f7      	bne.n	a27e <bt_hci_le_enh_conn_complete+0xf2>
    a28e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    a292:	bb24      	cbnz	r4, a2de <bt_hci_le_enh_conn_complete+0x152>
		BT_ERR("No pending conn for peer %s",
    a294:	4648      	mov	r0, r9
    a296:	f7fe fdc3 	bl	8e20 <bt_addr_le_str_real>
    a29a:	4b37      	ldr	r3, [pc, #220]	; (a378 <bt_hci_le_enh_conn_complete+0x1ec>)
    a29c:	9301      	str	r3, [sp, #4]
    a29e:	2300      	movs	r3, #0
    a2a0:	9002      	str	r0, [sp, #8]
    a2a2:	4932      	ldr	r1, [pc, #200]	; (a36c <bt_hci_le_enh_conn_complete+0x1e0>)
    a2a4:	9300      	str	r3, [sp, #0]
    a2a6:	4618      	mov	r0, r3
    a2a8:	2201      	movs	r2, #1
    a2aa:	f01a fccc 	bl	24c46 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    a2ae:	211f      	movs	r1, #31
    a2b0:	4640      	mov	r0, r8
    a2b2:	f01a fce8 	bl	24c86 <bt_hci_disconnect>
		return;
    a2b6:	e79a      	b.n	a1ee <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    a2b8:	78eb      	ldrb	r3, [r5, #3]
    a2ba:	2b01      	cmp	r3, #1
    a2bc:	bf04      	itt	eq
    a2be:	4b2f      	ldreq	r3, [pc, #188]	; (a37c <bt_hci_le_enh_conn_complete+0x1f0>)
    a2c0:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    a2c4:	4649      	mov	r1, r9
    a2c6:	4620      	mov	r0, r4
    a2c8:	f01a fe28 	bl	24f1c <bt_lookup_id_addr>
    a2cc:	4601      	mov	r1, r0
    a2ce:	a806      	add	r0, sp, #24
    a2d0:	f01a fca4 	bl	24c1c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    a2d4:	4649      	mov	r1, r9
    a2d6:	a804      	add	r0, sp, #16
    a2d8:	f01a fca0 	bl	24c1c <bt_addr_le_copy>
    a2dc:	e7c3      	b.n	a266 <bt_hci_le_enh_conn_complete+0xda>
	conn->handle = handle;
    a2de:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a2e0:	a906      	add	r1, sp, #24
	conn->handle = handle;
    a2e2:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a2e6:	f01a fc99 	bl	24c1c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    a2ea:	7e2a      	ldrb	r2, [r5, #24]
    a2ec:	7deb      	ldrb	r3, [r5, #23]
    a2ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a2f2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    a2f6:	7eaa      	ldrb	r2, [r5, #26]
    a2f8:	7e6b      	ldrb	r3, [r5, #25]
    a2fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a2fe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    a302:	7f2a      	ldrb	r2, [r5, #28]
    a304:	7eeb      	ldrb	r3, [r5, #27]
    a306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a30a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    a30e:	78eb      	ldrb	r3, [r5, #3]
    a310:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    a312:	2200      	movs	r2, #0
    a314:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a316:	b96b      	cbnz	r3, a334 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    a318:	a904      	add	r1, sp, #16
    a31a:	f104 0096 	add.w	r0, r4, #150	; 0x96
    a31e:	f01a fc7d 	bl	24c1c <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    a322:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    a324:	4b15      	ldr	r3, [pc, #84]	; (a37c <bt_hci_le_enh_conn_complete+0x1f0>)
					&bt_dev.id_addr[conn->id]);
    a326:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    a32a:	4419      	add	r1, r3
    a32c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    a330:	f01a fc74 	bl	24c1c <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    a334:	2107      	movs	r1, #7
    a336:	4620      	mov	r0, r4
    a338:	f001 fc72 	bl	bc20 <bt_conn_set_state>
	if (is_disconnected) {
    a33c:	b11e      	cbz	r6, a346 <bt_hci_le_enh_conn_complete+0x1ba>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    a33e:	2101      	movs	r1, #1
    a340:	4620      	mov	r0, r4
    a342:	f001 fc6d 	bl	bc20 <bt_conn_set_state>
	bt_conn_connected(conn);
    a346:	4620      	mov	r0, r4
    a348:	f01a fee3 	bl	25112 <bt_conn_connected>
	conn_auto_initiate(conn);
    a34c:	4620      	mov	r0, r4
    a34e:	f7ff fe31 	bl	9fb4 <conn_auto_initiate>
	bt_conn_unref(conn);
    a352:	4620      	mov	r0, r4
    a354:	f01a feda 	bl	2510c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a358:	78e3      	ldrb	r3, [r4, #3]
    a35a:	2b00      	cmp	r3, #0
    a35c:	f47f af47 	bne.w	a1ee <bt_hci_le_enh_conn_complete+0x62>
    a360:	e742      	b.n	a1e8 <bt_hci_le_enh_conn_complete+0x5c>
    a362:	bf00      	nop
    a364:	20003dbc 	.word	0x20003dbc
    a368:	0002b3bc 	.word	0x0002b3bc
    a36c:	00028970 	.word	0x00028970
    a370:	0002b3da 	.word	0x0002b3da
    a374:	200000cc 	.word	0x200000cc
    a378:	0002b3f3 	.word	0x0002b3f3
    a37c:	20000000 	.word	0x20000000

0000a380 <bt_security_err_get>:
	switch (hci_err) {
    a380:	2829      	cmp	r0, #41	; 0x29
    a382:	bf9a      	itte	ls
    a384:	4b01      	ldrls	r3, [pc, #4]	; (a38c <bt_security_err_get+0xc>)
    a386:	5c18      	ldrbls	r0, [r3, r0]
{
    a388:	2009      	movhi	r0, #9
}
    a38a:	4770      	bx	lr
    a38c:	0002b62a 	.word	0x0002b62a

0000a390 <hci_encrypt_key_refresh_complete>:
{
    a390:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    a392:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    a394:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    a398:	781d      	ldrb	r5, [r3, #0]
{
    a39a:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    a39c:	4630      	mov	r0, r6
    a39e:	f001 fc37 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    a3a2:	4604      	mov	r4, r0
    a3a4:	b968      	cbnz	r0, a3c2 <hci_encrypt_key_refresh_complete+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    a3a6:	4b21      	ldr	r3, [pc, #132]	; (a42c <hci_encrypt_key_refresh_complete+0x9c>)
    a3a8:	4821      	ldr	r0, [pc, #132]	; (a430 <hci_encrypt_key_refresh_complete+0xa0>)
    a3aa:	e9cd 3606 	strd	r3, r6, [sp, #24]
    a3ae:	aa05      	add	r2, sp, #20
    a3b0:	2303      	movs	r3, #3
    a3b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a3b6:	9301      	str	r3, [sp, #4]
    a3b8:	9305      	str	r3, [sp, #20]
    a3ba:	f01a fc41 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    a3be:	b008      	add	sp, #32
    a3c0:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
    a3c2:	b16d      	cbz	r5, a3e0 <hci_encrypt_key_refresh_complete+0x50>
		bt_conn_security_changed(conn, status,
    a3c4:	4628      	mov	r0, r5
    a3c6:	f7ff ffdb 	bl	a380 <bt_security_err_get>
    a3ca:	4629      	mov	r1, r5
    a3cc:	4602      	mov	r2, r0
    a3ce:	4620      	mov	r0, r4
    a3d0:	f001 fe18 	bl	c004 <bt_conn_security_changed>
	bt_conn_unref(conn);
    a3d4:	4620      	mov	r0, r4
}
    a3d6:	b008      	add	sp, #32
    a3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    a3dc:	f01a be96 	b.w	2510c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    a3e0:	7883      	ldrb	r3, [r0, #2]
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d107      	bne.n	a3f6 <hci_encrypt_key_refresh_complete+0x66>
		bt_smp_update_keys(conn);
    a3e6:	f006 fce5 	bl	10db4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    a3ea:	4620      	mov	r0, r4
    a3ec:	f01a fbfe 	bl	24bec <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    a3f0:	2800      	cmp	r0, #0
    a3f2:	bf08      	it	eq
    a3f4:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    a3f6:	4628      	mov	r0, r5
    a3f8:	f7ff ffc2 	bl	a380 <bt_security_err_get>
    a3fc:	4629      	mov	r1, r5
    a3fe:	4602      	mov	r2, r0
    a400:	4620      	mov	r0, r4
    a402:	f001 fdff 	bl	c004 <bt_conn_security_changed>
	if (status) {
    a406:	2d00      	cmp	r5, #0
    a408:	d0e4      	beq.n	a3d4 <hci_encrypt_key_refresh_complete+0x44>
		BT_ERR("Failed to set required security level");
    a40a:	4b0a      	ldr	r3, [pc, #40]	; (a434 <hci_encrypt_key_refresh_complete+0xa4>)
    a40c:	9306      	str	r3, [sp, #24]
    a40e:	4808      	ldr	r0, [pc, #32]	; (a430 <hci_encrypt_key_refresh_complete+0xa0>)
    a410:	2302      	movs	r3, #2
    a412:	aa05      	add	r2, sp, #20
    a414:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a418:	9301      	str	r3, [sp, #4]
    a41a:	9305      	str	r3, [sp, #20]
    a41c:	f01a fc10 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    a420:	4629      	mov	r1, r5
    a422:	4620      	mov	r0, r4
    a424:	f01a ff0d 	bl	25242 <bt_conn_disconnect>
    a428:	e7d4      	b.n	a3d4 <hci_encrypt_key_refresh_complete+0x44>
    a42a:	bf00      	nop
    a42c:	0002b2d3 	.word	0x0002b2d3
    a430:	00028970 	.word	0x00028970
    a434:	0002b40f 	.word	0x0002b40f

0000a438 <hci_encrypt_change>:
{
    a438:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    a43a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a43c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    a440:	7835      	ldrb	r5, [r6, #0]
{
    a442:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    a444:	4638      	mov	r0, r7
    a446:	f001 fbe3 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    a44a:	4604      	mov	r4, r0
    a44c:	b968      	cbnz	r0, a46a <hci_encrypt_change+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    a44e:	4b22      	ldr	r3, [pc, #136]	; (a4d8 <hci_encrypt_change+0xa0>)
    a450:	4822      	ldr	r0, [pc, #136]	; (a4dc <hci_encrypt_change+0xa4>)
    a452:	e9cd 3706 	strd	r3, r7, [sp, #24]
    a456:	aa05      	add	r2, sp, #20
    a458:	2303      	movs	r3, #3
    a45a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a45e:	9301      	str	r3, [sp, #4]
    a460:	9305      	str	r3, [sp, #20]
    a462:	f01a fbed 	bl	24c40 <z_log_msg2_static_create.constprop.0>
}
    a466:	b009      	add	sp, #36	; 0x24
    a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    a46a:	b16d      	cbz	r5, a488 <hci_encrypt_change+0x50>
		bt_conn_security_changed(conn, status,
    a46c:	4628      	mov	r0, r5
    a46e:	f7ff ff87 	bl	a380 <bt_security_err_get>
    a472:	4629      	mov	r1, r5
    a474:	4602      	mov	r2, r0
    a476:	4620      	mov	r0, r4
    a478:	f001 fdc4 	bl	c004 <bt_conn_security_changed>
	bt_conn_unref(conn);
    a47c:	4620      	mov	r0, r4
}
    a47e:	b009      	add	sp, #36	; 0x24
    a480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    a484:	f01a be42 	b.w	2510c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    a488:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    a48a:	78f3      	ldrb	r3, [r6, #3]
    a48c:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    a48e:	2a01      	cmp	r2, #1
    a490:	d108      	bne.n	a4a4 <hci_encrypt_change+0x6c>
		if (conn->encrypt) {
    a492:	b10b      	cbz	r3, a498 <hci_encrypt_change+0x60>
			bt_smp_update_keys(conn);
    a494:	f006 fc8e 	bl	10db4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    a498:	4620      	mov	r0, r4
    a49a:	f01a fba7 	bl	24bec <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    a49e:	2800      	cmp	r0, #0
    a4a0:	bf08      	it	eq
    a4a2:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    a4a4:	4628      	mov	r0, r5
    a4a6:	f7ff ff6b 	bl	a380 <bt_security_err_get>
    a4aa:	4629      	mov	r1, r5
    a4ac:	4602      	mov	r2, r0
    a4ae:	4620      	mov	r0, r4
    a4b0:	f001 fda8 	bl	c004 <bt_conn_security_changed>
	if (status) {
    a4b4:	2d00      	cmp	r5, #0
    a4b6:	d0e1      	beq.n	a47c <hci_encrypt_change+0x44>
		BT_ERR("Failed to set required security level");
    a4b8:	4b09      	ldr	r3, [pc, #36]	; (a4e0 <hci_encrypt_change+0xa8>)
    a4ba:	9306      	str	r3, [sp, #24]
    a4bc:	4807      	ldr	r0, [pc, #28]	; (a4dc <hci_encrypt_change+0xa4>)
    a4be:	2302      	movs	r3, #2
    a4c0:	aa05      	add	r2, sp, #20
    a4c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a4c6:	9301      	str	r3, [sp, #4]
    a4c8:	9305      	str	r3, [sp, #20]
    a4ca:	f01a fbb9 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    a4ce:	4629      	mov	r1, r5
    a4d0:	4620      	mov	r0, r4
    a4d2:	f01a feb6 	bl	25242 <bt_conn_disconnect>
    a4d6:	e7d1      	b.n	a47c <hci_encrypt_change+0x44>
    a4d8:	0002b2d3 	.word	0x0002b2d3
    a4dc:	00028970 	.word	0x00028970
    a4e0:	0002b40f 	.word	0x0002b40f

0000a4e4 <hci_event_prio>:
{
    a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4e8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    a4ea:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    a4ee:	4630      	mov	r0, r6
    a4f0:	f01c fe23 	bl	2713a <net_buf_simple_headroom>
	state->len = buf->len;
    a4f4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a4f8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    a4fc:	4605      	mov	r5, r0
    a4fe:	d80c      	bhi.n	a51a <hci_event_prio+0x36>
    a500:	4a1c      	ldr	r2, [pc, #112]	; (a574 <hci_event_prio+0x90>)
    a502:	491d      	ldr	r1, [pc, #116]	; (a578 <hci_event_prio+0x94>)
    a504:	481d      	ldr	r0, [pc, #116]	; (a57c <hci_event_prio+0x98>)
    a506:	f640 532f 	movw	r3, #3375	; 0xd2f
    a50a:	f018 f8fb 	bl	22704 <printk>
    a50e:	4040      	eors	r0, r0
    a510:	f380 8811 	msr	BASEPRI, r0
    a514:	f04f 0003 	mov.w	r0, #3
    a518:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a51a:	4630      	mov	r0, r6
    a51c:	2102      	movs	r1, #2
    a51e:	f01c fdf4 	bl	2710a <net_buf_simple_pull_mem>
    a522:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a524:	7800      	ldrb	r0, [r0, #0]
    a526:	f01a fb4f 	bl	24bc8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a52a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a52c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a52e:	d40c      	bmi.n	a54a <hci_event_prio+0x66>
    a530:	4a10      	ldr	r2, [pc, #64]	; (a574 <hci_event_prio+0x90>)
    a532:	4913      	ldr	r1, [pc, #76]	; (a580 <hci_event_prio+0x9c>)
    a534:	4811      	ldr	r0, [pc, #68]	; (a57c <hci_event_prio+0x98>)
    a536:	f640 5333 	movw	r3, #3379	; 0xd33
    a53a:	f018 f8e3 	bl	22704 <printk>
    a53e:	4040      	eors	r0, r0
    a540:	f380 8811 	msr	BASEPRI, r0
    a544:	f04f 0003 	mov.w	r0, #3
    a548:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    a54a:	2305      	movs	r3, #5
    a54c:	4a0d      	ldr	r2, [pc, #52]	; (a584 <hci_event_prio+0xa0>)
    a54e:	7838      	ldrb	r0, [r7, #0]
    a550:	4621      	mov	r1, r4
    a552:	f7fe ffd9 	bl	9508 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    a556:	07b3      	lsls	r3, r6, #30
    a558:	d507      	bpl.n	a56a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    a55a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a55c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a560:	fa10 f585 	uxtah	r5, r0, r5
    a564:	60a5      	str	r5, [r4, #8]
}
    a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    a56a:	4620      	mov	r0, r4
}
    a56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    a570:	f012 bcfa 	b.w	1cf68 <net_buf_unref>
    a574:	0002b1e8 	.word	0x0002b1e8
    a578:	0002b435 	.word	0x0002b435
    a57c:	0002b225 	.word	0x0002b225
    a580:	0002b44e 	.word	0x0002b44e
    a584:	00028eb4 	.word	0x00028eb4

0000a588 <bt_recv>:
{
    a588:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    a58a:	4d53      	ldr	r5, [pc, #332]	; (a6d8 <bt_recv+0x150>)
{
    a58c:	b089      	sub	sp, #36	; 0x24
	if (bt_recv_thread_id == NULL) {
    a58e:	682b      	ldr	r3, [r5, #0]
{
    a590:	af00      	add	r7, sp, #0
    a592:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    a594:	b913      	cbnz	r3, a59c <bt_recv+0x14>
	return z_impl_z_current_get();
    a596:	f017 fd2d 	bl	21ff4 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    a59a:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a59c:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    a59e:	2b01      	cmp	r3, #1
    a5a0:	d058      	beq.n	a654 <bt_recv+0xcc>
    a5a2:	2b03      	cmp	r3, #3
    a5a4:	f040 8085 	bne.w	a6b2 <bt_recv+0x12a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a5a8:	89a3      	ldrh	r3, [r4, #12]
    a5aa:	2b03      	cmp	r3, #3
    a5ac:	d80c      	bhi.n	a5c8 <bt_recv+0x40>
    a5ae:	4a4b      	ldr	r2, [pc, #300]	; (a6dc <bt_recv+0x154>)
    a5b0:	494b      	ldr	r1, [pc, #300]	; (a6e0 <bt_recv+0x158>)
    a5b2:	484c      	ldr	r0, [pc, #304]	; (a6e4 <bt_recv+0x15c>)
    a5b4:	f240 13b5 	movw	r3, #437	; 0x1b5
    a5b8:	f018 f8a4 	bl	22704 <printk>
    a5bc:	4040      	eors	r0, r0
    a5be:	f380 8811 	msr	BASEPRI, r0
    a5c2:	f04f 0003 	mov.w	r0, #3
    a5c6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a5c8:	2104      	movs	r1, #4
    a5ca:	f104 0008 	add.w	r0, r4, #8
    a5ce:	f01c fd9c 	bl	2710a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a5d2:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    a5d4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    a5d6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a5d8:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    a5da:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    a5de:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    a5e0:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a5e2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    a5e4:	d014      	beq.n	a610 <bt_recv+0x88>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    a5e6:	466d      	mov	r5, sp
    a5e8:	b088      	sub	sp, #32
    a5ea:	466a      	mov	r2, sp
    a5ec:	483e      	ldr	r0, [pc, #248]	; (a6e8 <bt_recv+0x160>)
    a5ee:	6193      	str	r3, [r2, #24]
    a5f0:	2304      	movs	r3, #4
    a5f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
    a5f6:	f842 3f0c 	str.w	r3, [r2, #12]!
    a5fa:	483c      	ldr	r0, [pc, #240]	; (a6ec <bt_recv+0x164>)
    a5fc:	60bb      	str	r3, [r7, #8]
    a5fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a602:	f01a fb1d 	bl	24c40 <z_log_msg2_static_create.constprop.0>
    a606:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    a608:	4620      	mov	r0, r4
    a60a:	f012 fcad 	bl	1cf68 <net_buf_unref>
    a60e:	e01d      	b.n	a64c <bt_recv+0xc4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    a610:	f001 fafe 	bl	bc10 <bt_conn_lookup_handle>
	if (!conn) {
    a614:	4605      	mov	r5, r0
    a616:	b970      	cbnz	r0, a636 <bt_recv+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    a618:	8ae3      	ldrh	r3, [r4, #22]
    a61a:	4a35      	ldr	r2, [pc, #212]	; (a6f0 <bt_recv+0x168>)
    a61c:	4833      	ldr	r0, [pc, #204]	; (a6ec <bt_recv+0x164>)
    a61e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    a622:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a626:	2303      	movs	r3, #3
    a628:	f107 0214 	add.w	r2, r7, #20
    a62c:	607b      	str	r3, [r7, #4]
    a62e:	617b      	str	r3, [r7, #20]
    a630:	f01a fb06 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    a634:	e7e8      	b.n	a608 <bt_recv+0x80>
	acl(buf)->index = bt_conn_index(conn);
    a636:	f001 fc0b 	bl	be50 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    a63a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    a63c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    a63e:	4621      	mov	r1, r4
    a640:	4628      	mov	r0, r5
    a642:	f001 f9b1 	bl	b9a8 <bt_conn_recv>
	bt_conn_unref(conn);
    a646:	4628      	mov	r0, r5
    a648:	f01a fd60 	bl	2510c <bt_conn_unref>
		return 0;
    a64c:	2000      	movs	r0, #0
}
    a64e:	3724      	adds	r7, #36	; 0x24
    a650:	46bd      	mov	sp, r7
    a652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a654:	89a3      	ldrh	r3, [r4, #12]
    a656:	2b01      	cmp	r3, #1
    a658:	d80c      	bhi.n	a674 <bt_recv+0xec>
    a65a:	4a20      	ldr	r2, [pc, #128]	; (a6dc <bt_recv+0x154>)
    a65c:	4920      	ldr	r1, [pc, #128]	; (a6e0 <bt_recv+0x158>)
    a65e:	4821      	ldr	r0, [pc, #132]	; (a6e4 <bt_recv+0x15c>)
    a660:	f640 1317 	movw	r3, #2327	; 0x917
    a664:	f018 f84e 	bl	22704 <printk>
    a668:	4040      	eors	r0, r0
    a66a:	f380 8811 	msr	BASEPRI, r0
    a66e:	f04f 0003 	mov.w	r0, #3
    a672:	df02      	svc	2
    a674:	2102      	movs	r1, #2
    a676:	f104 0008 	add.w	r0, r4, #8
    a67a:	f01c fd46 	bl	2710a <net_buf_simple_pull_mem>
    a67e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    a680:	7800      	ldrb	r0, [r0, #0]
    a682:	f01a faa1 	bl	24bc8 <bt_hci_evt_get_flags>
    a686:	0783      	lsls	r3, r0, #30
    a688:	d40c      	bmi.n	a6a4 <bt_recv+0x11c>
    a68a:	4a14      	ldr	r2, [pc, #80]	; (a6dc <bt_recv+0x154>)
    a68c:	4919      	ldr	r1, [pc, #100]	; (a6f4 <bt_recv+0x16c>)
    a68e:	4815      	ldr	r0, [pc, #84]	; (a6e4 <bt_recv+0x15c>)
    a690:	f640 131b 	movw	r3, #2331	; 0x91b
    a694:	f018 f836 	bl	22704 <printk>
    a698:	4040      	eors	r0, r0
    a69a:	f380 8811 	msr	BASEPRI, r0
    a69e:	f04f 0003 	mov.w	r0, #3
    a6a2:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    a6a4:	4a14      	ldr	r2, [pc, #80]	; (a6f8 <bt_recv+0x170>)
    a6a6:	7828      	ldrb	r0, [r5, #0]
    a6a8:	2306      	movs	r3, #6
    a6aa:	4621      	mov	r1, r4
    a6ac:	f7fe ff2c 	bl	9508 <handle_event>
    a6b0:	e7aa      	b.n	a608 <bt_recv+0x80>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    a6b2:	4a12      	ldr	r2, [pc, #72]	; (a6fc <bt_recv+0x174>)
    a6b4:	480d      	ldr	r0, [pc, #52]	; (a6ec <bt_recv+0x164>)
	switch (bt_buf_get_type(buf)) {
    a6b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    a6ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a6be:	2303      	movs	r3, #3
    a6c0:	f107 0214 	add.w	r2, r7, #20
    a6c4:	607b      	str	r3, [r7, #4]
    a6c6:	617b      	str	r3, [r7, #20]
    a6c8:	f01a faba 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    a6cc:	4620      	mov	r0, r4
    a6ce:	f012 fc4b 	bl	1cf68 <net_buf_unref>
		return -EINVAL;
    a6d2:	f06f 0015 	mvn.w	r0, #21
    a6d6:	e7ba      	b.n	a64e <bt_recv+0xc6>
    a6d8:	200020b0 	.word	0x200020b0
    a6dc:	0002b1e8 	.word	0x0002b1e8
    a6e0:	0002b435 	.word	0x0002b435
    a6e4:	0002b225 	.word	0x0002b225
    a6e8:	0002b467 	.word	0x0002b467
    a6ec:	00028970 	.word	0x00028970
    a6f0:	0002b48b 	.word	0x0002b48b
    a6f4:	0002b4ad 	.word	0x0002b4ad
    a6f8:	00028e84 	.word	0x00028e84
    a6fc:	0002b4db 	.word	0x0002b4db

0000a700 <bt_recv_prio>:
{
    a700:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a702:	7d03      	ldrb	r3, [r0, #20]
    a704:	2b01      	cmp	r3, #1
{
    a706:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a708:	d00c      	beq.n	a724 <bt_recv_prio+0x24>
    a70a:	4a09      	ldr	r2, [pc, #36]	; (a730 <bt_recv_prio+0x30>)
    a70c:	4909      	ldr	r1, [pc, #36]	; (a734 <bt_recv_prio+0x34>)
    a70e:	480a      	ldr	r0, [pc, #40]	; (a738 <bt_recv_prio+0x38>)
    a710:	f640 537c 	movw	r3, #3452	; 0xd7c
    a714:	f017 fff6 	bl	22704 <printk>
    a718:	4040      	eors	r0, r0
    a71a:	f380 8811 	msr	BASEPRI, r0
    a71e:	f04f 0003 	mov.w	r0, #3
    a722:	df02      	svc	2
	hci_event_prio(buf);
    a724:	4620      	mov	r0, r4
    a726:	f7ff fedd 	bl	a4e4 <hci_event_prio>
}
    a72a:	2000      	movs	r0, #0
    a72c:	bd10      	pop	{r4, pc}
    a72e:	bf00      	nop
    a730:	0002b1e8 	.word	0x0002b1e8
    a734:	0002b4ef 	.word	0x0002b4ef
    a738:	0002b225 	.word	0x0002b225

0000a73c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    a73c:	4a08      	ldr	r2, [pc, #32]	; (a760 <bt_hci_driver_register+0x24>)
{
    a73e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    a740:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    a744:	b930      	cbnz	r0, a754 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    a746:	68d9      	ldr	r1, [r3, #12]
    a748:	b139      	cbz	r1, a75a <bt_hci_driver_register+0x1e>
    a74a:	6919      	ldr	r1, [r3, #16]
    a74c:	b129      	cbz	r1, a75a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    a74e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    a752:	4770      	bx	lr
		return -EALREADY;
    a754:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a758:	4770      	bx	lr
		return -EINVAL;
    a75a:	f06f 0015 	mvn.w	r0, #21
}
    a75e:	4770      	bx	lr
    a760:	20000000 	.word	0x20000000

0000a764 <bt_finalize_init>:
{
    a764:	b508      	push	{r3, lr}
    a766:	4804      	ldr	r0, [pc, #16]	; (a778 <bt_finalize_init+0x14>)
    a768:	2102      	movs	r1, #2
    a76a:	f01a fa5a 	bl	24c22 <atomic_or>
}
    a76e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    a772:	2000      	movs	r0, #0
    a774:	f000 bcf0 	b.w	b158 <bt_le_scan_update>
    a778:	200000cc 	.word	0x200000cc

0000a77c <init_work>:

static void init_work(struct k_work *work)
{
    a77c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    a77e:	f7f6 fe43 	bl	1408 <bt_init>
	if (ready_cb) {
    a782:	4b03      	ldr	r3, [pc, #12]	; (a790 <init_work+0x14>)
    a784:	681b      	ldr	r3, [r3, #0]
    a786:	b113      	cbz	r3, a78e <init_work+0x12>
		ready_cb(err);
	}
}
    a788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a78c:	4718      	bx	r3
}
    a78e:	bd10      	pop	{r4, pc}
    a790:	200020cc 	.word	0x200020cc

0000a794 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    a794:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    a796:	4d2c      	ldr	r5, [pc, #176]	; (a848 <bt_enable+0xb4>)
    a798:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    a79c:	b090      	sub	sp, #64	; 0x40
    a79e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a7a0:	b97b      	cbnz	r3, a7c2 <bt_enable+0x2e>
		BT_ERR("No HCI driver registered");
    a7a2:	4b2a      	ldr	r3, [pc, #168]	; (a84c <bt_enable+0xb8>)
    a7a4:	930e      	str	r3, [sp, #56]	; 0x38
    a7a6:	482a      	ldr	r0, [pc, #168]	; (a850 <bt_enable+0xbc>)
    a7a8:	2302      	movs	r3, #2
    a7aa:	aa0d      	add	r2, sp, #52	; 0x34
    a7ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    a7b0:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    a7b4:	9309      	str	r3, [sp, #36]	; 0x24
    a7b6:	930d      	str	r3, [sp, #52]	; 0x34
    a7b8:	f01a fa42 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    a7bc:	4620      	mov	r0, r4
    a7be:	b010      	add	sp, #64	; 0x40
    a7c0:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a7c2:	2101      	movs	r1, #1
    a7c4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    a7c8:	f01a fa2b 	bl	24c22 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a7cc:	ea10 0301 	ands.w	r3, r0, r1
    a7d0:	d137      	bne.n	a842 <bt_enable+0xae>
	ready_cb = cb;
    a7d2:	4a20      	ldr	r2, [pc, #128]	; (a854 <bt_enable+0xc0>)
    a7d4:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a7d6:	2000      	movs	r0, #0
    a7d8:	2100      	movs	r1, #0
    a7da:	f06f 0208 	mvn.w	r2, #8
    a7de:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a7e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a7e6:	e9cd 3300 	strd	r3, r3, [sp]
    a7ea:	9304      	str	r3, [sp, #16]
    a7ec:	491a      	ldr	r1, [pc, #104]	; (a858 <bt_enable+0xc4>)
    a7ee:	4b1b      	ldr	r3, [pc, #108]	; (a85c <bt_enable+0xc8>)
    a7f0:	481b      	ldr	r0, [pc, #108]	; (a860 <bt_enable+0xcc>)
    a7f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a7f6:	f016 fd6d 	bl	212d4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a7fa:	491a      	ldr	r1, [pc, #104]	; (a864 <bt_enable+0xd0>)
    a7fc:	4818      	ldr	r0, [pc, #96]	; (a860 <bt_enable+0xcc>)
    a7fe:	f01d f9d2 	bl	27ba6 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a802:	f7fe fcf5 	bl	91f0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a806:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    a80a:	68db      	ldr	r3, [r3, #12]
    a80c:	4798      	blx	r3
	if (err) {
    a80e:	4604      	mov	r4, r0
    a810:	b160      	cbz	r0, a82c <bt_enable+0x98>
		BT_ERR("HCI driver open failed (%d)", err);
    a812:	4b15      	ldr	r3, [pc, #84]	; (a868 <bt_enable+0xd4>)
    a814:	aa0d      	add	r2, sp, #52	; 0x34
    a816:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
    a81a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a81e:	2303      	movs	r3, #3
    a820:	480b      	ldr	r0, [pc, #44]	; (a850 <bt_enable+0xbc>)
    a822:	9309      	str	r3, [sp, #36]	; 0x24
    a824:	930d      	str	r3, [sp, #52]	; 0x34
    a826:	f01a fa0b 	bl	24c40 <z_log_msg2_static_create.constprop.0>
		return err;
    a82a:	e7c7      	b.n	a7bc <bt_enable+0x28>
	if (!cb) {
    a82c:	b926      	cbnz	r6, a838 <bt_enable+0xa4>
}
    a82e:	b010      	add	sp, #64	; 0x40
    a830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    a834:	f7f6 bde8 	b.w	1408 <bt_init>
	k_work_submit(&bt_dev.init);
    a838:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    a83c:	f017 f848 	bl	218d0 <k_work_submit>
	return 0;
    a840:	e7bc      	b.n	a7bc <bt_enable+0x28>
		return -EALREADY;
    a842:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a846:	e7b9      	b.n	a7bc <bt_enable+0x28>
    a848:	20000000 	.word	0x20000000
    a84c:	0002b5cf 	.word	0x0002b5cf
    a850:	00028970 	.word	0x00028970
    a854:	200020cc 	.word	0x200020cc
    a858:	200059c0 	.word	0x200059c0
    a85c:	00009775 	.word	0x00009775
    a860:	200013a8 	.word	0x200013a8
    a864:	0002b5e8 	.word	0x0002b5e8
    a868:	0002b5ee 	.word	0x0002b5ee

0000a86c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    a86c:	4800      	ldr	r0, [pc, #0]	; (a870 <bt_get_name+0x4>)
    a86e:	4770      	bx	lr
    a870:	0002b60a 	.word	0x0002b60a

0000a874 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
    a874:	b5f0      	push	{r4, r5, r6, r7, lr}
    a876:	4604      	mov	r4, r0
    a878:	b089      	sub	sp, #36	; 0x24
    a87a:	460e      	mov	r6, r1
    a87c:	4617      	mov	r7, r2
	while (ad->len > 1) {
    a87e:	88a3      	ldrh	r3, [r4, #4]
    a880:	2b01      	cmp	r3, #1
    a882:	d913      	bls.n	a8ac <bt_data_parse+0x38>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
    a884:	4620      	mov	r0, r4
    a886:	f01c fc48 	bl	2711a <net_buf_simple_pull_u8>
		if (len == 0U) {
    a88a:	4605      	mov	r5, r0
    a88c:	b170      	cbz	r0, a8ac <bt_data_parse+0x38>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
    a88e:	88a2      	ldrh	r2, [r4, #4]
    a890:	b283      	uxth	r3, r0
    a892:	429a      	cmp	r2, r3
    a894:	d20c      	bcs.n	a8b0 <bt_data_parse+0x3c>
			BT_WARN("Malformed data");
    a896:	4b10      	ldr	r3, [pc, #64]	; (a8d8 <bt_data_parse+0x64>)
    a898:	9306      	str	r3, [sp, #24]
    a89a:	4810      	ldr	r0, [pc, #64]	; (a8dc <bt_data_parse+0x68>)
    a89c:	2302      	movs	r3, #2
    a89e:	aa05      	add	r2, sp, #20
    a8a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a8a4:	9301      	str	r3, [sp, #4]
    a8a6:	9305      	str	r3, [sp, #20]
    a8a8:	f01a f9ca 	bl	24c40 <z_log_msg2_static_create.constprop.0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
    a8ac:	b009      	add	sp, #36	; 0x24
    a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    a8b0:	4620      	mov	r0, r4
    a8b2:	f01c fc32 	bl	2711a <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    a8b6:	3d01      	subs	r5, #1
		data.data = ad->data;
    a8b8:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    a8ba:	f88d 0008 	strb.w	r0, [sp, #8]
		if (!func(&data, user_data)) {
    a8be:	4639      	mov	r1, r7
    a8c0:	a802      	add	r0, sp, #8
		data.data_len = len - 1;
    a8c2:	f88d 5009 	strb.w	r5, [sp, #9]
		data.data = ad->data;
    a8c6:	9303      	str	r3, [sp, #12]
		if (!func(&data, user_data)) {
    a8c8:	47b0      	blx	r6
    a8ca:	2800      	cmp	r0, #0
    a8cc:	d0ee      	beq.n	a8ac <bt_data_parse+0x38>
		net_buf_simple_pull(ad, len - 1);
    a8ce:	4629      	mov	r1, r5
    a8d0:	4620      	mov	r0, r4
    a8d2:	f01c fc12 	bl	270fa <net_buf_simple_pull>
    a8d6:	e7d2      	b.n	a87e <bt_data_parse+0xa>
    a8d8:	0002b60f 	.word	0x0002b60f
    a8dc:	00028970 	.word	0x00028970

0000a8e0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    a8e2:	4f0b      	ldr	r7, [pc, #44]	; (a910 <id_find+0x30>)
{
    a8e4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    a8e6:	2500      	movs	r5, #0
    a8e8:	79fb      	ldrb	r3, [r7, #7]
    a8ea:	b2ec      	uxtb	r4, r5
    a8ec:	42a3      	cmp	r3, r4
    a8ee:	d802      	bhi.n	a8f6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    a8f0:	f06f 0401 	mvn.w	r4, #1
    a8f4:	e009      	b.n	a90a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    a8f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    a8fa:	2207      	movs	r2, #7
    a8fc:	4439      	add	r1, r7
    a8fe:	4630      	mov	r0, r6
    a900:	f01a f83c 	bl	2497c <memcmp>
    a904:	3501      	adds	r5, #1
    a906:	2800      	cmp	r0, #0
    a908:	d1ee      	bne.n	a8e8 <id_find+0x8>
}
    a90a:	4620      	mov	r0, r4
    a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a90e:	bf00      	nop
    a910:	20000000 	.word	0x20000000

0000a914 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a914:	4b03      	ldr	r3, [pc, #12]	; (a924 <atomic_get.constprop.0+0x10>)
    a916:	f3bf 8f5b 	dmb	ish
    a91a:	6818      	ldr	r0, [r3, #0]
    a91c:	f3bf 8f5b 	dmb	ish
}
    a920:	4770      	bx	lr
    a922:	bf00      	nop
    a924:	200000cc 	.word	0x200000cc

0000a928 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
    a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a92c:	2100      	movs	r1, #0
    a92e:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
    a930:	b088      	sub	sp, #32
    a932:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a934:	4608      	mov	r0, r1
    a936:	f001 fbed 	bl	c114 <bt_conn_lookup_state_le>
	if (conn) {
    a93a:	4602      	mov	r2, r0
    a93c:	b1a8      	cbz	r0, a96a <bt_id_add.part.0+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a93e:	f3bf 8f5b 	dmb	ish
    a942:	4b52      	ldr	r3, [pc, #328]	; (aa8c <bt_id_add.part.0+0x164>)
    a944:	e853 2f00 	ldrex	r2, [r3]
    a948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a94c:	e843 2100 	strex	r1, r2, [r3]
    a950:	2900      	cmp	r1, #0
    a952:	d1f7      	bne.n	a944 <bt_id_add.part.0+0x1c>
    a954:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    a958:	7a23      	ldrb	r3, [r4, #8]
    a95a:	f043 0301 	orr.w	r3, r3, #1
    a95e:	7223      	strb	r3, [r4, #8]
}
    a960:	b008      	add	sp, #32
    a962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    a966:	f01a bbd1 	b.w	2510c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a96a:	f7ff ffd3 	bl	a914 <atomic_get.constprop.0>
	if (scan_enabled) {
    a96e:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a970:	f3c0 1740 	ubfx	r7, r0, #5, #1
    a974:	d502      	bpl.n	a97c <bt_id_add.part.0+0x54>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    a976:	4610      	mov	r0, r2
    a978:	f01a fb0b 	bl	24f92 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    a97c:	4d44      	ldr	r5, [pc, #272]	; (aa90 <bt_id_add.part.0+0x168>)
    a97e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    a982:	b17b      	cbz	r3, a9a4 <bt_id_add.part.0+0x7c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a984:	2000      	movs	r0, #0
    a986:	f01a fab1 	bl	24eec <addr_res_enable>
		if (err) {
    a98a:	b158      	cbz	r0, a9a4 <bt_id_add.part.0+0x7c>
			BT_WARN("Failed to disable address resolution");
    a98c:	4b41      	ldr	r3, [pc, #260]	; (aa94 <bt_id_add.part.0+0x16c>)
		BT_WARN("Set privacy mode command is not supported");
    a98e:	9306      	str	r3, [sp, #24]
    a990:	2302      	movs	r3, #2
    a992:	9301      	str	r3, [sp, #4]
    a994:	9305      	str	r3, [sp, #20]
    a996:	aa05      	add	r2, sp, #20
    a998:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a99c:	483e      	ldr	r0, [pc, #248]	; (aa98 <bt_id_add.part.0+0x170>)
    a99e:	f01a faa2 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
	if (err) {
    a9a2:	e028      	b.n	a9f6 <bt_id_add.part.0+0xce>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    a9a4:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    a9a8:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    a9ac:	429a      	cmp	r2, r3
    a9ae:	d12d      	bne.n	aa0c <bt_id_add.part.0+0xe4>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    a9b0:	4b3a      	ldr	r3, [pc, #232]	; (aa9c <bt_id_add.part.0+0x174>)
    a9b2:	4839      	ldr	r0, [pc, #228]	; (aa98 <bt_id_add.part.0+0x170>)
    a9b4:	9306      	str	r3, [sp, #24]
    a9b6:	2602      	movs	r6, #2
    a9b8:	aa05      	add	r2, sp, #20
    a9ba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9be:	9601      	str	r6, [sp, #4]
    a9c0:	9605      	str	r6, [sp, #20]
    a9c2:	f01a fa90 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    a9c6:	2200      	movs	r2, #0
    a9c8:	4611      	mov	r1, r2
    a9ca:	f242 0029 	movw	r0, #8233	; 0x2029
    a9ce:	f7ff f9cb 	bl	9d68 <bt_hci_cmd_send_sync>
		if (err) {
    a9d2:	b138      	cbz	r0, a9e4 <bt_id_add.part.0+0xbc>
			BT_ERR("Failed to clear resolution list");
    a9d4:	4b32      	ldr	r3, [pc, #200]	; (aaa0 <bt_id_add.part.0+0x178>)
    a9d6:	9306      	str	r3, [sp, #24]
    a9d8:	9601      	str	r6, [sp, #4]
    a9da:	9605      	str	r6, [sp, #20]
		BT_ERR("Failed to set privacy mode");
    a9dc:	aa05      	add	r2, sp, #20
    a9de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a9e2:	e7db      	b.n	a99c <bt_id_add.part.0+0x74>
		bt_dev.le.rl_entries++;
    a9e4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    a9e8:	3301      	adds	r3, #1
    a9ea:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    a9ee:	7a23      	ldrb	r3, [r4, #8]
    a9f0:	f043 0304 	orr.w	r3, r3, #4
    a9f4:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a9f6:	2001      	movs	r0, #1
    a9f8:	f01a fa78 	bl	24eec <addr_res_enable>
	if (scan_enabled) {
    a9fc:	2f00      	cmp	r7, #0
    a9fe:	d042      	beq.n	aa86 <bt_id_add.part.0+0x15e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    aa00:	2001      	movs	r0, #1
}
    aa02:	b008      	add	sp, #32
    aa04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    aa08:	f01a bac3 	b.w	24f92 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    aa0c:	f104 0801 	add.w	r8, r4, #1
    aa10:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    aa14:	4640      	mov	r0, r8
    aa16:	f01a fa35 	bl	24e84 <hci_id_add.constprop.0>
	if (err) {
    aa1a:	4606      	mov	r6, r0
    aa1c:	b128      	cbz	r0, aa2a <bt_id_add.part.0+0x102>
		BT_ERR("Failed to add IRK to controller");
    aa1e:	4b21      	ldr	r3, [pc, #132]	; (aaa4 <bt_id_add.part.0+0x17c>)
		BT_ERR("Failed to set privacy mode");
    aa20:	9306      	str	r3, [sp, #24]
    aa22:	2302      	movs	r3, #2
    aa24:	9301      	str	r3, [sp, #4]
    aa26:	9305      	str	r3, [sp, #20]
    aa28:	e7d8      	b.n	a9dc <bt_id_add.part.0+0xb4>
	bt_dev.le.rl_entries++;
    aa2a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    aa2e:	3301      	adds	r3, #1
    aa30:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    aa34:	7a23      	ldrb	r3, [r4, #8]
    aa36:	f043 0304 	orr.w	r3, r3, #4
    aa3a:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    aa3c:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    aa40:	075b      	lsls	r3, r3, #29
    aa42:	d401      	bmi.n	aa48 <bt_id_add.part.0+0x120>
		BT_WARN("Set privacy mode command is not supported");
    aa44:	4b18      	ldr	r3, [pc, #96]	; (aaa8 <bt_id_add.part.0+0x180>)
    aa46:	e7a2      	b.n	a98e <bt_id_add.part.0+0x66>
	bt_addr_le_copy(&cp.id_addr, addr);
    aa48:	4641      	mov	r1, r8
    aa4a:	a802      	add	r0, sp, #8
    aa4c:	f01a fa17 	bl	24e7e <bt_addr_le_copy>
	cp.mode = mode;
    aa50:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    aa52:	2108      	movs	r1, #8
    aa54:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    aa58:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    aa5c:	f7ff f824 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    aa60:	4604      	mov	r4, r0
    aa62:	b908      	cbnz	r0, aa68 <bt_id_add.part.0+0x140>
		BT_ERR("Failed to set privacy mode");
    aa64:	4b11      	ldr	r3, [pc, #68]	; (aaac <bt_id_add.part.0+0x184>)
    aa66:	e7db      	b.n	aa20 <bt_id_add.part.0+0xf8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aa68:	2208      	movs	r2, #8
    aa6a:	eb0d 0102 	add.w	r1, sp, r2
    aa6e:	4410      	add	r0, r2
    aa70:	f01c fb20 	bl	270b4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    aa74:	4632      	mov	r2, r6
    aa76:	4621      	mov	r1, r4
    aa78:	f242 004e 	movw	r0, #8270	; 0x204e
    aa7c:	f7ff f974 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    aa80:	2800      	cmp	r0, #0
    aa82:	d0b8      	beq.n	a9f6 <bt_id_add.part.0+0xce>
    aa84:	e7ee      	b.n	aa64 <bt_id_add.part.0+0x13c>
}
    aa86:	b008      	add	sp, #32
    aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa8c:	200000cc 	.word	0x200000cc
    aa90:	20000000 	.word	0x20000000
    aa94:	0002b654 	.word	0x0002b654
    aa98:	00028980 	.word	0x00028980
    aa9c:	0002b679 	.word	0x0002b679
    aaa0:	0002b6aa 	.word	0x0002b6aa
    aaa4:	0002b6ca 	.word	0x0002b6ca
    aaa8:	0002b6ea 	.word	0x0002b6ea
    aaac:	0002b714 	.word	0x0002b714

0000aab0 <set_random_address>:
{
    aab0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    aab2:	4914      	ldr	r1, [pc, #80]	; (ab04 <set_random_address+0x54>)
    aab4:	2206      	movs	r2, #6
    aab6:	4605      	mov	r5, r0
    aab8:	f019 ff60 	bl	2497c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    aabc:	4604      	mov	r4, r0
    aabe:	b1e0      	cbz	r0, aafa <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    aac0:	2106      	movs	r1, #6
    aac2:	f242 0005 	movw	r0, #8197	; 0x2005
    aac6:	f7fe ffef 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    aaca:	4604      	mov	r4, r0
    aacc:	b1b8      	cbz	r0, aafe <set_random_address+0x4e>
    aace:	2206      	movs	r2, #6
    aad0:	4629      	mov	r1, r5
    aad2:	3008      	adds	r0, #8
    aad4:	f01c faee 	bl	270b4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    aad8:	4621      	mov	r1, r4
    aada:	2200      	movs	r2, #0
    aadc:	f242 0005 	movw	r0, #8197	; 0x2005
    aae0:	f7ff f942 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    aae4:	4604      	mov	r4, r0
    aae6:	b940      	cbnz	r0, aafa <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    aae8:	2206      	movs	r2, #6
    aaea:	4806      	ldr	r0, [pc, #24]	; (ab04 <set_random_address+0x54>)
    aaec:	4629      	mov	r1, r5
    aaee:	f019 ff56 	bl	2499e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    aaf2:	4b05      	ldr	r3, [pc, #20]	; (ab08 <set_random_address+0x58>)
    aaf4:	2201      	movs	r2, #1
    aaf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    aafa:	4620      	mov	r0, r4
    aafc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    aafe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ab02:	e7fa      	b.n	aafa <set_random_address+0x4a>
    ab04:	20000061 	.word	0x20000061
    ab08:	20000000 	.word	0x20000000

0000ab0c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ab0c:	b530      	push	{r4, r5, lr}
    ab0e:	4604      	mov	r4, r0
    ab10:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ab12:	460d      	mov	r5, r1
    ab14:	b199      	cbz	r1, ab3e <id_create.constprop.0+0x32>
    ab16:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    ab18:	2207      	movs	r2, #7
    ab1a:	a902      	add	r1, sp, #8
    ab1c:	4628      	mov	r0, r5
    ab1e:	9302      	str	r3, [sp, #8]
    ab20:	f8cd 300b 	str.w	r3, [sp, #11]
    ab24:	f019 ff2a 	bl	2497c <memcmp>
    ab28:	b148      	cbz	r0, ab3e <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ab2a:	4810      	ldr	r0, [pc, #64]	; (ab6c <id_create.constprop.0+0x60>)
    ab2c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ab30:	4629      	mov	r1, r5
    ab32:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ab34:	f01a f9a3 	bl	24e7e <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    ab38:	2000      	movs	r0, #0
}
    ab3a:	b005      	add	sp, #20
    ab3c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    ab3e:	4668      	mov	r0, sp
    ab40:	f01a f834 	bl	24bac <bt_addr_le_create_static>
			if (err) {
    ab44:	2800      	cmp	r0, #0
    ab46:	d1f8      	bne.n	ab3a <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
    ab48:	4668      	mov	r0, sp
    ab4a:	f7ff fec9 	bl	a8e0 <id_find>
    ab4e:	2800      	cmp	r0, #0
    ab50:	daf5      	bge.n	ab3e <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ab52:	4806      	ldr	r0, [pc, #24]	; (ab6c <id_create.constprop.0+0x60>)
    ab54:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ab58:	4404      	add	r4, r0
    ab5a:	4669      	mov	r1, sp
    ab5c:	4620      	mov	r0, r4
    ab5e:	f01a f98e 	bl	24e7e <bt_addr_le_copy>
		if (addr) {
    ab62:	2d00      	cmp	r5, #0
    ab64:	d0e8      	beq.n	ab38 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ab66:	4621      	mov	r1, r4
    ab68:	4628      	mov	r0, r5
    ab6a:	e7e3      	b.n	ab34 <id_create.constprop.0+0x28>
    ab6c:	20000000 	.word	0x20000000

0000ab70 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab70:	4b0a      	ldr	r3, [pc, #40]	; (ab9c <bt_id_pending_keys_update+0x2c>)
    ab72:	f3bf 8f5b 	dmb	ish
    ab76:	e853 2f00 	ldrex	r2, [r3]
    ab7a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    ab7e:	e843 1000 	strex	r0, r1, [r3]
    ab82:	2800      	cmp	r0, #0
    ab84:	d1f7      	bne.n	ab76 <bt_id_pending_keys_update+0x6>
    ab86:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ab8a:	0493      	lsls	r3, r2, #18
    ab8c:	d504      	bpl.n	ab98 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    ab8e:	4904      	ldr	r1, [pc, #16]	; (aba0 <bt_id_pending_keys_update+0x30>)
    ab90:	2200      	movs	r2, #0
    ab92:	2002      	movs	r0, #2
    ab94:	f006 b9d8 	b.w	10f48 <bt_keys_foreach>
}
    ab98:	4770      	bx	lr
    ab9a:	bf00      	nop
    ab9c:	200000cc 	.word	0x200000cc
    aba0:	00024f55 	.word	0x00024f55

0000aba4 <bt_id_add>:
{
    aba4:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    aba6:	490a      	ldr	r1, [pc, #40]	; (abd0 <bt_id_add+0x2c>)
    aba8:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    abac:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
    abb0:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    abb2:	b10c      	cbz	r4, abb8 <bt_id_add+0x14>
    abb4:	4294      	cmp	r4, r2
    abb6:	d208      	bcs.n	abca <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    abb8:	3201      	adds	r2, #1
    abba:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    abbe:	7a1a      	ldrb	r2, [r3, #8]
}
    abc0:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
    abc2:	f042 0204 	orr.w	r2, r2, #4
    abc6:	721a      	strb	r2, [r3, #8]
}
    abc8:	4770      	bx	lr
    abca:	bc10      	pop	{r4}
    abcc:	f7ff beac 	b.w	a928 <bt_id_add.part.0>
    abd0:	20000000 	.word	0x20000000

0000abd4 <bt_id_del>:
{
    abd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    abd8:	4c4c      	ldr	r4, [pc, #304]	; (ad0c <bt_id_del+0x138>)
    abda:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    abde:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
    abe2:	b089      	sub	sp, #36	; 0x24
    abe4:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    abe6:	b112      	cbz	r2, abee <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    abe8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    abea:	4293      	cmp	r3, r2
    abec:	dd09      	ble.n	ac02 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
    abee:	3b01      	subs	r3, #1
    abf0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    abf4:	7a2b      	ldrb	r3, [r5, #8]
    abf6:	f023 0304 	bic.w	r3, r3, #4
    abfa:	722b      	strb	r3, [r5, #8]
}
    abfc:	b009      	add	sp, #36	; 0x24
    abfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    ac02:	2100      	movs	r1, #0
    ac04:	2206      	movs	r2, #6
    ac06:	4608      	mov	r0, r1
    ac08:	f001 fa84 	bl	c114 <bt_conn_lookup_state_le>
	if (conn) {
    ac0c:	4602      	mov	r2, r0
    ac0e:	b1a8      	cbz	r0, ac3c <bt_id_del+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac10:	f3bf 8f5b 	dmb	ish
    ac14:	34cc      	adds	r4, #204	; 0xcc
    ac16:	e854 3f00 	ldrex	r3, [r4]
    ac1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ac1e:	e844 3200 	strex	r2, r3, [r4]
    ac22:	2a00      	cmp	r2, #0
    ac24:	d1f7      	bne.n	ac16 <bt_id_del+0x42>
    ac26:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    ac2a:	7a2b      	ldrb	r3, [r5, #8]
    ac2c:	f043 0302 	orr.w	r3, r3, #2
    ac30:	722b      	strb	r3, [r5, #8]
}
    ac32:	b009      	add	sp, #36	; 0x24
    ac34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    ac38:	f01a ba68 	b.w	2510c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ac3c:	f7ff fe6a 	bl	a914 <atomic_get.constprop.0>
	if (scan_enabled) {
    ac40:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ac42:	f3c0 1840 	ubfx	r8, r0, #5, #1
    ac46:	d502      	bpl.n	ac4e <bt_id_del+0x7a>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    ac48:	4610      	mov	r0, r2
    ac4a:	f01a f9a2 	bl	24f92 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    ac4e:	2000      	movs	r0, #0
    ac50:	f01a f94c 	bl	24eec <addr_res_enable>
	if (err) {
    ac54:	4606      	mov	r6, r0
    ac56:	b160      	cbz	r0, ac72 <bt_id_del+0x9e>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    ac58:	4b2d      	ldr	r3, [pc, #180]	; (ad10 <bt_id_del+0x13c>)
    ac5a:	e9cd 3006 	strd	r3, r0, [sp, #24]
    ac5e:	2303      	movs	r3, #3
    ac60:	9301      	str	r3, [sp, #4]
    ac62:	9305      	str	r3, [sp, #20]
    ac64:	aa05      	add	r2, sp, #20
    ac66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
    ac6a:	482a      	ldr	r0, [pc, #168]	; (ad14 <bt_id_del+0x140>)
    ac6c:	f01a f93b 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
		goto done;
    ac70:	e011      	b.n	ac96 <bt_id_del+0xc2>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    ac72:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    ac76:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    ac7a:	429a      	cmp	r2, r3
    ac7c:	d21a      	bcs.n	acb4 <bt_id_del+0xe0>
		bt_dev.le.rl_entries--;
    ac7e:	3b01      	subs	r3, #1
    ac80:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    ac84:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    ac86:	4924      	ldr	r1, [pc, #144]	; (ad18 <bt_id_del+0x144>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    ac88:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    ac8c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    ac8e:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    ac90:	2002      	movs	r0, #2
    ac92:	f006 f959 	bl	10f48 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    ac96:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    ac9a:	b113      	cbz	r3, aca2 <bt_id_del+0xce>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    ac9c:	2001      	movs	r0, #1
    ac9e:	f01a f925 	bl	24eec <addr_res_enable>
	if (scan_enabled) {
    aca2:	f1b8 0f00 	cmp.w	r8, #0
    aca6:	d0a9      	beq.n	abfc <bt_id_del+0x28>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    aca8:	2001      	movs	r0, #1
}
    acaa:	b009      	add	sp, #36	; 0x24
    acac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    acb0:	f01a b96f 	b.w	24f92 <bt_le_scan_set_enable>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    acb4:	2107      	movs	r1, #7
    acb6:	f242 0028 	movw	r0, #8232	; 0x2028
    acba:	f7fe fef5 	bl	9aa8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    acbe:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    acc2:	4607      	mov	r7, r0
    acc4:	b940      	cbnz	r0, acd8 <bt_id_del+0x104>
		BT_ERR("Failed to remove IRK from controller");
    acc6:	4b15      	ldr	r3, [pc, #84]	; (ad1c <bt_id_del+0x148>)
    acc8:	9306      	str	r3, [sp, #24]
    acca:	2302      	movs	r3, #2
    accc:	9301      	str	r3, [sp, #4]
    acce:	9305      	str	r3, [sp, #20]
    acd0:	aa05      	add	r2, sp, #20
    acd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    acd6:	e7c8      	b.n	ac6a <bt_id_del+0x96>
	return net_buf_simple_add(&buf->b, len);
    acd8:	2107      	movs	r1, #7
    acda:	3008      	adds	r0, #8
    acdc:	f01c f9e4 	bl	270a8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    ace0:	4649      	mov	r1, r9
    ace2:	f01a f8cc 	bl	24e7e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    ace6:	4632      	mov	r2, r6
    ace8:	4639      	mov	r1, r7
    acea:	f242 0028 	movw	r0, #8232	; 0x2028
    acee:	f7ff f83b 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    acf2:	2800      	cmp	r0, #0
    acf4:	d1e7      	bne.n	acc6 <bt_id_del+0xf2>
	bt_dev.le.rl_entries--;
    acf6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    acfa:	3b01      	subs	r3, #1
    acfc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    ad00:	7a2b      	ldrb	r3, [r5, #8]
    ad02:	f023 0304 	bic.w	r3, r3, #4
    ad06:	722b      	strb	r3, [r5, #8]
    ad08:	e7c5      	b.n	ac96 <bt_id_del+0xc2>
    ad0a:	bf00      	nop
    ad0c:	20000000 	.word	0x20000000
    ad10:	0002b72f 	.word	0x0002b72f
    ad14:	00028980 	.word	0x00028980
    ad18:	00024ed5 	.word	0x00024ed5
    ad1c:	0002b75c 	.word	0x0002b75c

0000ad20 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    ad20:	b570      	push	{r4, r5, r6, lr}
    ad22:	460c      	mov	r4, r1
    ad24:	b08a      	sub	sp, #40	; 0x28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ad26:	4605      	mov	r5, r0
    ad28:	b918      	cbnz	r0, ad32 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    ad2a:	b34c      	cbz	r4, ad80 <bt_id_create+0x60>
		return -EINVAL;
    ad2c:	f06f 0015 	mvn.w	r0, #21
    ad30:	e024      	b.n	ad7c <bt_id_create+0x5c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ad32:	2300      	movs	r3, #0
    ad34:	2207      	movs	r2, #7
    ad36:	a902      	add	r1, sp, #8
    ad38:	9302      	str	r3, [sp, #8]
    ad3a:	f8cd 300b 	str.w	r3, [sp, #11]
    ad3e:	f019 fe1d 	bl	2497c <memcmp>
    ad42:	2800      	cmp	r0, #0
    ad44:	d0f1      	beq.n	ad2a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    ad46:	782b      	ldrb	r3, [r5, #0]
    ad48:	2b01      	cmp	r3, #1
    ad4a:	d104      	bne.n	ad56 <bt_id_create+0x36>
    ad4c:	79ab      	ldrb	r3, [r5, #6]
    ad4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ad52:	2bc0      	cmp	r3, #192	; 0xc0
    ad54:	d00b      	beq.n	ad6e <bt_id_create+0x4e>
			BT_ERR("Only static random identity address supported");
    ad56:	4b1b      	ldr	r3, [pc, #108]	; (adc4 <bt_id_create+0xa4>)
    ad58:	9308      	str	r3, [sp, #32]
    ad5a:	481b      	ldr	r0, [pc, #108]	; (adc8 <bt_id_create+0xa8>)
    ad5c:	2302      	movs	r3, #2
    ad5e:	aa07      	add	r2, sp, #28
    ad60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ad64:	9301      	str	r3, [sp, #4]
    ad66:	9307      	str	r3, [sp, #28]
    ad68:	f01a f8bd 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
    ad6c:	e7de      	b.n	ad2c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    ad6e:	4628      	mov	r0, r5
    ad70:	f7ff fdb6 	bl	a8e0 <id_find>
    ad74:	2800      	cmp	r0, #0
    ad76:	dbd8      	blt.n	ad2a <bt_id_create+0xa>
			return -EALREADY;
    ad78:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    ad7c:	b00a      	add	sp, #40	; 0x28
    ad7e:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    ad80:	4e12      	ldr	r6, [pc, #72]	; (adcc <bt_id_create+0xac>)
    ad82:	79f3      	ldrb	r3, [r6, #7]
    ad84:	2b01      	cmp	r3, #1
    ad86:	d01a      	beq.n	adbe <bt_id_create+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ad88:	f7ff fdc4 	bl	a914 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ad8c:	07c3      	lsls	r3, r0, #31
    ad8e:	d40b      	bmi.n	ada8 <bt_id_create+0x88>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    ad90:	2d00      	cmp	r5, #0
    ad92:	d0cb      	beq.n	ad2c <bt_id_create+0xc>
    ad94:	2207      	movs	r2, #7
    ad96:	a904      	add	r1, sp, #16
    ad98:	4628      	mov	r0, r5
    ad9a:	9404      	str	r4, [sp, #16]
    ad9c:	f8cd 4013 	str.w	r4, [sp, #19]
    ada0:	f019 fdec 	bl	2497c <memcmp>
    ada4:	2800      	cmp	r0, #0
    ada6:	d0c1      	beq.n	ad2c <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
    ada8:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    adaa:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    adac:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    adae:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    adb0:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    adb2:	f7ff feab 	bl	ab0c <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    adb6:	2800      	cmp	r0, #0
    adb8:	bf08      	it	eq
    adba:	4620      	moveq	r0, r4
    adbc:	e7de      	b.n	ad7c <bt_id_create+0x5c>
		return -ENOMEM;
    adbe:	f06f 000b 	mvn.w	r0, #11
    adc2:	e7db      	b.n	ad7c <bt_id_create+0x5c>
    adc4:	0002b781 	.word	0x0002b781
    adc8:	00028980 	.word	0x00028980
    adcc:	20000000 	.word	0x20000000

0000add0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    add0:	b570      	push	{r4, r5, r6, lr}
    add2:	b08a      	sub	sp, #40	; 0x28
    add4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    add6:	aa01      	add	r2, sp, #4
    add8:	2100      	movs	r1, #0
    adda:	f241 0009 	movw	r0, #4105	; 0x1009
    adde:	f7fe ffc3 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    ade2:	4604      	mov	r4, r0
    ade4:	b168      	cbz	r0, ae02 <bt_id_read_public_addr+0x32>
		BT_WARN("Failed to read public address");
    ade6:	4b1e      	ldr	r3, [pc, #120]	; (ae60 <bt_id_read_public_addr+0x90>)
    ade8:	9308      	str	r3, [sp, #32]
    adea:	481e      	ldr	r0, [pc, #120]	; (ae64 <bt_id_read_public_addr+0x94>)
    adec:	2302      	movs	r3, #2
    adee:	aa07      	add	r2, sp, #28
    adf0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    adf4:	9302      	str	r3, [sp, #8]
    adf6:	9307      	str	r3, [sp, #28]
    adf8:	f01a f875 	bl	24ee6 <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    adfc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    adfe:	b00a      	add	sp, #40	; 0x28
    ae00:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    ae02:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ae04:	689d      	ldr	r5, [r3, #8]
    ae06:	9002      	str	r0, [sp, #8]
    ae08:	3501      	adds	r5, #1
    ae0a:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    ae0e:	2206      	movs	r2, #6
    ae10:	a902      	add	r1, sp, #8
    ae12:	4628      	mov	r0, r5
    ae14:	f019 fdb2 	bl	2497c <memcmp>
    ae18:	b918      	cbnz	r0, ae22 <bt_id_read_public_addr+0x52>
		net_buf_unref(rsp);
    ae1a:	9801      	ldr	r0, [sp, #4]
    ae1c:	f012 f8a4 	bl	1cf68 <net_buf_unref>
    ae20:	e7ec      	b.n	adfc <bt_id_read_public_addr+0x2c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    ae22:	23ff      	movs	r3, #255	; 0xff
    ae24:	2206      	movs	r2, #6
    ae26:	a904      	add	r1, sp, #16
    ae28:	4628      	mov	r0, r5
    ae2a:	f88d 3010 	strb.w	r3, [sp, #16]
    ae2e:	f88d 3011 	strb.w	r3, [sp, #17]
    ae32:	f88d 3012 	strb.w	r3, [sp, #18]
    ae36:	f88d 3013 	strb.w	r3, [sp, #19]
    ae3a:	f88d 3014 	strb.w	r3, [sp, #20]
    ae3e:	f88d 3015 	strb.w	r3, [sp, #21]
    ae42:	f019 fd9b 	bl	2497c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ae46:	2800      	cmp	r0, #0
    ae48:	d0e7      	beq.n	ae1a <bt_id_read_public_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    ae4a:	2206      	movs	r2, #6
    ae4c:	4629      	mov	r1, r5
    ae4e:	1c70      	adds	r0, r6, #1
    ae50:	f019 fda5 	bl	2499e <memcpy>
	net_buf_unref(rsp);
    ae54:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    ae56:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    ae58:	f012 f886 	bl	1cf68 <net_buf_unref>
	return 1U;
    ae5c:	2001      	movs	r0, #1
    ae5e:	e7ce      	b.n	adfe <bt_id_read_public_addr+0x2e>
    ae60:	0002b7af 	.word	0x0002b7af
    ae64:	00028980 	.word	0x00028980

0000ae68 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    ae68:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    ae6a:	4668      	mov	r0, sp
    ae6c:	f7ff ffb0 	bl	add0 <bt_id_read_public_addr>
    ae70:	4b04      	ldr	r3, [pc, #16]	; (ae84 <bt_setup_public_id_addr+0x1c>)
    ae72:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    ae74:	b118      	cbz	r0, ae7e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    ae76:	4669      	mov	r1, sp
    ae78:	2000      	movs	r0, #0
    ae7a:	f7ff fe47 	bl	ab0c <id_create.constprop.0>
}
    ae7e:	b003      	add	sp, #12
    ae80:	f85d fb04 	ldr.w	pc, [sp], #4
    ae84:	20000000 	.word	0x20000000

0000ae88 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ae8c:	4b23      	ldr	r3, [pc, #140]	; (af1c <bt_read_static_addr+0x94>)
    ae8e:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    ae92:	f014 0401 	ands.w	r4, r4, #1
{
    ae96:	b088      	sub	sp, #32
    ae98:	4607      	mov	r7, r0
    ae9a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ae9c:	d10b      	bne.n	aeb6 <bt_read_static_addr+0x2e>
		BT_WARN("Read Static Addresses command not available");
    ae9e:	4b20      	ldr	r3, [pc, #128]	; (af20 <bt_read_static_addr+0x98>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    aea0:	9306      	str	r3, [sp, #24]
    aea2:	4820      	ldr	r0, [pc, #128]	; (af24 <bt_read_static_addr+0x9c>)
    aea4:	2302      	movs	r3, #2
    aea6:	aa05      	add	r2, sp, #20
    aea8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    aeac:	9301      	str	r3, [sp, #4]
    aeae:	9305      	str	r3, [sp, #20]
    aeb0:	f01a f819 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
    aeb4:	e013      	b.n	aede <bt_read_static_addr+0x56>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    aeb6:	466a      	mov	r2, sp
    aeb8:	2100      	movs	r1, #0
    aeba:	f64f 4009 	movw	r0, #64521	; 0xfc09
    aebe:	f7fe ff53 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    aec2:	4605      	mov	r5, r0
    aec4:	b178      	cbz	r0, aee6 <bt_read_static_addr+0x5e>
		BT_WARN("Failed to read static addresses");
    aec6:	4b18      	ldr	r3, [pc, #96]	; (af28 <bt_read_static_addr+0xa0>)
    aec8:	9306      	str	r3, [sp, #24]
    aeca:	4816      	ldr	r0, [pc, #88]	; (af24 <bt_read_static_addr+0x9c>)
    aecc:	2302      	movs	r3, #2
    aece:	aa05      	add	r2, sp, #20
    aed0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
    aed4:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
    aed6:	9301      	str	r3, [sp, #4]
    aed8:	9305      	str	r3, [sp, #20]
    aeda:	f01a f804 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
	}

	return cnt;
}
    aede:	4620      	mov	r0, r4
    aee0:	b008      	add	sp, #32
    aee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    aee6:	9b00      	ldr	r3, [sp, #0]
    aee8:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    aeea:	785c      	ldrb	r4, [r3, #1]
    aeec:	42b4      	cmp	r4, r6
    aeee:	bf28      	it	cs
    aef0:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    aef2:	f04f 0816 	mov.w	r8, #22
    aef6:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    aef8:	42ac      	cmp	r4, r5
    aefa:	dc06      	bgt.n	af0a <bt_read_static_addr+0x82>
	net_buf_unref(rsp);
    aefc:	9800      	ldr	r0, [sp, #0]
    aefe:	f012 f833 	bl	1cf68 <net_buf_unref>
	if (!cnt) {
    af02:	2c00      	cmp	r4, #0
    af04:	d1eb      	bne.n	aede <bt_read_static_addr+0x56>
		BT_WARN("No static addresses stored in controller");
    af06:	4b09      	ldr	r3, [pc, #36]	; (af2c <bt_read_static_addr+0xa4>)
    af08:	e7ca      	b.n	aea0 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    af0a:	fb08 7005 	mla	r0, r8, r5, r7
    af0e:	2216      	movs	r2, #22
    af10:	4631      	mov	r1, r6
    af12:	f019 fd44 	bl	2499e <memcpy>
	for (i = 0; i < cnt; i++) {
    af16:	3501      	adds	r5, #1
    af18:	e7ee      	b.n	aef8 <bt_read_static_addr+0x70>
    af1a:	bf00      	nop
    af1c:	20000000 	.word	0x20000000
    af20:	0002b7cd 	.word	0x0002b7cd
    af24:	00028980 	.word	0x00028980
    af28:	0002b7f9 	.word	0x0002b7f9
    af2c:	0002b819 	.word	0x0002b819

0000af30 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    af30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    af32:	4e15      	ldr	r6, [pc, #84]	; (af88 <bt_setup_random_id_addr+0x58>)
    af34:	79f4      	ldrb	r4, [r6, #7]
{
    af36:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    af38:	b9f4      	cbnz	r4, af78 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    af3a:	2101      	movs	r1, #1
    af3c:	a802      	add	r0, sp, #8
    af3e:	f7ff ffa3 	bl	ae88 <bt_read_static_addr>
    af42:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    af44:	b1c0      	cbz	r0, af78 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    af46:	2716      	movs	r7, #22
    af48:	ab02      	add	r3, sp, #8
    af4a:	b2e5      	uxtb	r5, r4
    af4c:	fb07 3105 	mla	r1, r7, r5, r3
    af50:	2206      	movs	r2, #6
    af52:	f10d 0001 	add.w	r0, sp, #1
    af56:	f019 fd22 	bl	2499e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    af5a:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    af5c:	4669      	mov	r1, sp
    af5e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    af60:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    af64:	f7ff fdd2 	bl	ab0c <id_create.constprop.0>
				if (err) {
    af68:	b920      	cbnz	r0, af74 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    af6a:	79f2      	ldrb	r2, [r6, #7]
    af6c:	3401      	adds	r4, #1
    af6e:	b2e3      	uxtb	r3, r4
    af70:	429a      	cmp	r2, r3
    af72:	d8e9      	bhi.n	af48 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    af74:	b009      	add	sp, #36	; 0x24
    af76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    af78:	2100      	movs	r1, #0
    af7a:	4608      	mov	r0, r1
}
    af7c:	b009      	add	sp, #36	; 0x24
    af7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    af82:	f7ff becd 	b.w	ad20 <bt_id_create>
    af86:	bf00      	nop
    af88:	20000000 	.word	0x20000000

0000af8c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    af8c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    af8e:	4c07      	ldr	r4, [pc, #28]	; (afac <bt_id_set_create_conn_own_addr+0x20>)
    af90:	7823      	ldrb	r3, [r4, #0]
    af92:	2b01      	cmp	r3, #1
{
    af94:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    af96:	d003      	beq.n	afa0 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    af98:	7823      	ldrb	r3, [r4, #0]
    af9a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    af9c:	2000      	movs	r0, #0
}
    af9e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    afa0:	1c60      	adds	r0, r4, #1
    afa2:	f7ff fd85 	bl	aab0 <set_random_address>
			if (err) {
    afa6:	2800      	cmp	r0, #0
    afa8:	d0f6      	beq.n	af98 <bt_id_set_create_conn_own_addr+0xc>
    afaa:	e7f8      	b.n	af9e <bt_id_set_create_conn_own_addr+0x12>
    afac:	20000000 	.word	0x20000000

0000afb0 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    afb0:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    afb2:	4b05      	ldr	r3, [pc, #20]	; (afc8 <bt_id_set_scan_own_addr+0x18>)
    afb4:	781b      	ldrb	r3, [r3, #0]
    afb6:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    afb8:	2000      	movs	r0, #0
{
    afba:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    afbc:	f019 ffb6 	bl	24f2c <bt_id_set_private_addr>
			if (err) {
    afc0:	b908      	cbnz	r0, afc6 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    afc2:	2301      	movs	r3, #1
    afc4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    afc6:	bd10      	pop	{r4, pc}
    afc8:	20000000 	.word	0x20000000

0000afcc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    afcc:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    afce:	4d14      	ldr	r5, [pc, #80]	; (b020 <bt_id_init+0x54>)
    afd0:	79eb      	ldrb	r3, [r5, #7]
{
    afd2:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    afd4:	b11b      	cbz	r3, afde <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    afd6:	2400      	movs	r4, #0
}
    afd8:	4620      	mov	r0, r4
    afda:	b009      	add	sp, #36	; 0x24
    afdc:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    afde:	f7ff ff43 	bl	ae68 <bt_setup_public_id_addr>
		if (err) {
    afe2:	4604      	mov	r4, r0
    afe4:	b158      	cbz	r0, affe <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
    afe6:	4b0f      	ldr	r3, [pc, #60]	; (b024 <bt_id_init+0x58>)
			BT_ERR("Unable to set random address");
    afe8:	9306      	str	r3, [sp, #24]
    afea:	480f      	ldr	r0, [pc, #60]	; (b028 <bt_id_init+0x5c>)
    afec:	2302      	movs	r3, #2
    afee:	aa05      	add	r2, sp, #20
    aff0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aff4:	9301      	str	r3, [sp, #4]
    aff6:	9305      	str	r3, [sp, #20]
    aff8:	f019 ff75 	bl	24ee6 <z_log_msg2_static_create.constprop.0>
			return err;
    affc:	e7ec      	b.n	afd8 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    affe:	79eb      	ldrb	r3, [r5, #7]
    b000:	2b00      	cmp	r3, #0
    b002:	d1e8      	bne.n	afd6 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    b004:	f7ff ff94 	bl	af30 <bt_setup_random_id_addr>
		if (err) {
    b008:	4604      	mov	r4, r0
    b00a:	2800      	cmp	r0, #0
    b00c:	d1eb      	bne.n	afe6 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    b00e:	1c68      	adds	r0, r5, #1
    b010:	f7ff fd4e 	bl	aab0 <set_random_address>
		if (err) {
    b014:	4604      	mov	r4, r0
    b016:	2800      	cmp	r0, #0
    b018:	d0de      	beq.n	afd8 <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    b01a:	4b04      	ldr	r3, [pc, #16]	; (b02c <bt_id_init+0x60>)
    b01c:	e7e4      	b.n	afe8 <bt_id_init+0x1c>
    b01e:	bf00      	nop
    b020:	20000000 	.word	0x20000000
    b024:	0002b842 	.word	0x0002b842
    b028:	00028980 	.word	0x00028980
    b02c:	0002b861 	.word	0x0002b861

0000b030 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b030:	4b03      	ldr	r3, [pc, #12]	; (b040 <atomic_get.constprop.0+0x10>)
    b032:	f3bf 8f5b 	dmb	ish
    b036:	6818      	ldr	r0, [r3, #0]
    b038:	f3bf 8f5b 	dmb	ish
}
    b03c:	4770      	bx	lr
    b03e:	bf00      	nop
    b040:	200000cc 	.word	0x200000cc

0000b044 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    b044:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    b046:	2102      	movs	r1, #2
{
    b048:	b087      	sub	sp, #28
    b04a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    b04c:	f242 000c 	movw	r0, #8204	; 0x200c
    b050:	f7fe fd2a 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    b054:	4605      	mov	r5, r0
    b056:	b308      	cbz	r0, b09c <bt_le_scan_set_enable_legacy+0x58>
    b058:	2102      	movs	r1, #2
    b05a:	3008      	adds	r0, #8
    b05c:	f01c f824 	bl	270a8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    b060:	2c01      	cmp	r4, #1
    b062:	4602      	mov	r2, r0
    b064:	d117      	bne.n	b096 <bt_le_scan_set_enable_legacy+0x52>
    b066:	f7ff ffe3 	bl	b030 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b06a:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b06e:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    b070:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    b072:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    b074:	425c      	negs	r4, r3
    b076:	415c      	adcs	r4, r3
    b078:	4a0a      	ldr	r2, [pc, #40]	; (b0a4 <bt_le_scan_set_enable_legacy+0x60>)
    b07a:	9400      	str	r4, [sp, #0]
    b07c:	a903      	add	r1, sp, #12
    b07e:	4628      	mov	r0, r5
    b080:	2305      	movs	r3, #5
    b082:	f7fe fcff 	bl	9a84 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    b086:	2200      	movs	r2, #0
    b088:	4629      	mov	r1, r5
    b08a:	f242 000c 	movw	r0, #8204	; 0x200c
    b08e:	f7fe fe6b 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    b092:	b007      	add	sp, #28
    b094:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    b096:	2300      	movs	r3, #0
    b098:	7043      	strb	r3, [r0, #1]
    b09a:	e7e9      	b.n	b070 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    b09c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b0a0:	e7f7      	b.n	b092 <bt_le_scan_set_enable_legacy+0x4e>
    b0a2:	bf00      	nop
    b0a4:	200000cc 	.word	0x200000cc

0000b0a8 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    b0a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b0aa:	4605      	mov	r5, r0
    b0ac:	4614      	mov	r4, r2
    b0ae:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    b0b0:	2207      	movs	r2, #7
    b0b2:	2100      	movs	r1, #0
    b0b4:	4668      	mov	r0, sp
    b0b6:	f019 fc7d 	bl	249b4 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    b0ba:	2300      	movs	r3, #0
    b0bc:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    b0c0:	1e6b      	subs	r3, r5, #1
    b0c2:	4258      	negs	r0, r3
    b0c4:	f10d 0105 	add.w	r1, sp, #5
    b0c8:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    b0ca:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    b0ce:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    b0d2:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    b0d6:	f7ff ff6b 	bl	afb0 <bt_id_set_scan_own_addr>
	if (err) {
    b0da:	4604      	mov	r4, r0
    b0dc:	bb38      	cbnz	r0, b12e <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    b0de:	2107      	movs	r1, #7
    b0e0:	f242 000b 	movw	r0, #8203	; 0x200b
    b0e4:	f7fe fce0 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    b0e8:	4606      	mov	r6, r0
    b0ea:	b348      	cbz	r0, b140 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b0ec:	2207      	movs	r2, #7
    b0ee:	4669      	mov	r1, sp
    b0f0:	3008      	adds	r0, #8
    b0f2:	f01b ffdf 	bl	270b4 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    b0f6:	4622      	mov	r2, r4
    b0f8:	4631      	mov	r1, r6
    b0fa:	f242 000b 	movw	r0, #8203	; 0x200b
    b0fe:	f7fe fe33 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    b102:	4604      	mov	r4, r0
    b104:	b998      	cbnz	r0, b12e <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    b106:	2001      	movs	r0, #1
    b108:	f7ff ff9c 	bl	b044 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    b10c:	4604      	mov	r4, r0
    b10e:	b970      	cbnz	r0, b12e <start_le_scan_legacy+0x86>
	if (val) {
    b110:	2d01      	cmp	r5, #1
    b112:	d10f      	bne.n	b134 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b114:	f3bf 8f5b 	dmb	ish
    b118:	4b0b      	ldr	r3, [pc, #44]	; (b148 <start_le_scan_legacy+0xa0>)
    b11a:	e853 2f00 	ldrex	r2, [r3]
    b11e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b122:	e843 2100 	strex	r1, r2, [r3]
    b126:	2900      	cmp	r1, #0
    b128:	d1f7      	bne.n	b11a <start_le_scan_legacy+0x72>
    b12a:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    b12e:	4620      	mov	r0, r4
    b130:	b002      	add	sp, #8
    b132:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b134:	f06f 0180 	mvn.w	r1, #128	; 0x80
    b138:	4803      	ldr	r0, [pc, #12]	; (b148 <start_le_scan_legacy+0xa0>)
    b13a:	f019 ff1b 	bl	24f74 <atomic_and>
    b13e:	e7f6      	b.n	b12e <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    b140:	f06f 0468 	mvn.w	r4, #104	; 0x68
    b144:	e7f3      	b.n	b12e <start_le_scan_legacy+0x86>
    b146:	bf00      	nop
    b148:	200000cc 	.word	0x200000cc

0000b14c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    b14c:	4b01      	ldr	r3, [pc, #4]	; (b154 <bt_scan_reset+0x8>)
    b14e:	2200      	movs	r2, #0
    b150:	601a      	str	r2, [r3, #0]
}
    b152:	4770      	bx	lr
    b154:	200020d8 	.word	0x200020d8

0000b158 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    b158:	b538      	push	{r3, r4, r5, lr}
    b15a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b15c:	f7ff ff68 	bl	b030 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    b160:	0641      	lsls	r1, r0, #25
    b162:	f3c0 1280 	ubfx	r2, r0, #6, #1
    b166:	d501      	bpl.n	b16c <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    b168:	2000      	movs	r0, #0
    b16a:	e031      	b.n	b1d0 <bt_le_scan_update+0x78>
    b16c:	f7ff ff60 	bl	b030 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    b170:	0683      	lsls	r3, r0, #26
    b172:	d428      	bmi.n	b1c6 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    b174:	2100      	movs	r1, #0
    b176:	2206      	movs	r2, #6
    b178:	4608      	mov	r0, r1
    b17a:	f000 ffcb 	bl	c114 <bt_conn_lookup_state_le>
		if (conn) {
    b17e:	4604      	mov	r4, r0
    b180:	bb38      	cbnz	r0, b1d2 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    b182:	2202      	movs	r2, #2
    b184:	4601      	mov	r1, r0
    b186:	f000 ffc5 	bl	c114 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    b18a:	2800      	cmp	r0, #0
    b18c:	d0ec      	beq.n	b168 <bt_le_scan_update+0x10>
    b18e:	f3bf 8f5b 	dmb	ish
    b192:	4b11      	ldr	r3, [pc, #68]	; (b1d8 <bt_le_scan_update+0x80>)
    b194:	e853 2f00 	ldrex	r2, [r3]
    b198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b19c:	e843 2100 	strex	r1, r2, [r3]
    b1a0:	2900      	cmp	r1, #0
    b1a2:	d1f7      	bne.n	b194 <bt_le_scan_update+0x3c>
    b1a4:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    b1a8:	f019 ffb0 	bl	2510c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    b1ac:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    b1ae:	4620      	mov	r0, r4
    b1b0:	bf18      	it	ne
    b1b2:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    b1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    b1b8:	bf0a      	itet	eq
    b1ba:	2212      	moveq	r2, #18
    b1bc:	2160      	movne	r1, #96	; 0x60
    b1be:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    b1c2:	f7ff bf71 	b.w	b0a8 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    b1c6:	4610      	mov	r0, r2
    b1c8:	f7ff ff3c 	bl	b044 <bt_le_scan_set_enable_legacy>
		if (err) {
    b1cc:	2800      	cmp	r0, #0
    b1ce:	d0d1      	beq.n	b174 <bt_le_scan_update+0x1c>
}
    b1d0:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    b1d2:	f019 ff9b 	bl	2510c <bt_conn_unref>
    b1d6:	e7c7      	b.n	b168 <bt_le_scan_update+0x10>
    b1d8:	200000cc 	.word	0x200000cc

0000b1dc <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    b1e0:	f100 0808 	add.w	r8, r0, #8
    b1e4:	b08f      	sub	sp, #60	; 0x3c
    b1e6:	4604      	mov	r4, r0
    b1e8:	4640      	mov	r0, r8
    b1ea:	f01b ff96 	bl	2711a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    b1ee:	f8df a1c4 	ldr.w	sl, [pc, #452]	; b3b4 <bt_hci_le_adv_report+0x1d8>
    b1f2:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    b1f4:	b176      	cbz	r6, b214 <bt_hci_le_adv_report+0x38>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    b1f6:	89a3      	ldrh	r3, [r4, #12]
    b1f8:	2b08      	cmp	r3, #8
    b1fa:	d80e      	bhi.n	b21a <bt_hci_le_adv_report+0x3e>
			BT_ERR("Unexpected end of buffer");
    b1fc:	4b6e      	ldr	r3, [pc, #440]	; (b3b8 <bt_hci_le_adv_report+0x1dc>)
    b1fe:	930c      	str	r3, [sp, #48]	; 0x30
    b200:	2302      	movs	r3, #2
    b202:	9306      	str	r3, [sp, #24]
    b204:	930b      	str	r3, [sp, #44]	; 0x2c
    b206:	486d      	ldr	r0, [pc, #436]	; (b3bc <bt_hci_le_adv_report+0x1e0>)
    b208:	2300      	movs	r3, #0
    b20a:	aa0b      	add	r2, sp, #44	; 0x2c
    b20c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b210:	f018 f931 	bl	23476 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    b214:	b00f      	add	sp, #60	; 0x3c
    b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    b21a:	2109      	movs	r1, #9
    b21c:	4640      	mov	r0, r8
    b21e:	f01b ff74 	bl	2710a <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    b222:	237f      	movs	r3, #127	; 0x7f
    b224:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    b228:	7a01      	ldrb	r1, [r0, #8]
    b22a:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    b22c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    b22e:	7a5b      	ldrb	r3, [r3, #9]
    b230:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    b234:	23ff      	movs	r3, #255	; 0xff
    b236:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    b23a:	2300      	movs	r3, #0
    b23c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    b240:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    b244:	7802      	ldrb	r2, [r0, #0]
    b246:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    b24a:	2a04      	cmp	r2, #4
    b24c:	bf9c      	itt	ls
    b24e:	4b5c      	ldrls	r3, [pc, #368]	; (b3c0 <bt_hci_le_adv_report+0x1e4>)
    b250:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    b252:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    b256:	b28b      	uxth	r3, r1
    b258:	4605      	mov	r5, r0
    b25a:	f100 0901 	add.w	r9, r0, #1
    b25e:	9301      	str	r3, [sp, #4]
    b260:	f7ff fee6 	bl	b030 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    b264:	0647      	lsls	r7, r0, #25
    b266:	d50b      	bpl.n	b280 <bt_hci_le_adv_report+0xa4>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    b268:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b26c:	0758      	lsls	r0, r3, #29
    b26e:	d507      	bpl.n	b280 <bt_hci_le_adv_report+0xa4>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    b270:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    b272:	4640      	mov	r0, r8
    b274:	3101      	adds	r1, #1
    b276:	3e01      	subs	r6, #1
    b278:	f01b ff3f 	bl	270fa <net_buf_simple_pull>
    b27c:	b2f6      	uxtb	r6, r6
    b27e:	e7b9      	b.n	b1f4 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    b280:	786b      	ldrb	r3, [r5, #1]
    b282:	1e9a      	subs	r2, r3, #2
    b284:	2a01      	cmp	r2, #1
    b286:	d848      	bhi.n	b31a <bt_hci_le_adv_report+0x13e>
	memcpy(dst, src, sizeof(*dst));
    b288:	2207      	movs	r2, #7
    b28a:	4649      	mov	r1, r9
    b28c:	a804      	add	r0, sp, #16
    b28e:	f019 fb86 	bl	2499e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    b292:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b296:	3b02      	subs	r3, #2
    b298:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    b29c:	ab04      	add	r3, sp, #16
    b29e:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    b2a0:	f8da 3000 	ldr.w	r3, [sl]
    b2a4:	b1a3      	cbz	r3, b2d0 <bt_hci_le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    b2a6:	4640      	mov	r0, r8
    b2a8:	f01b ff47 	bl	2713a <net_buf_simple_headroom>
		buf->len = len;
    b2ac:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    b2ae:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    b2b0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    b2b4:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b2b6:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    b2b8:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    b2bc:	f8da c000 	ldr.w	ip, [sl]
    b2c0:	a804      	add	r0, sp, #16
    b2c2:	4643      	mov	r3, r8
    b2c4:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    b2c6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b2c8:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b2ca:	fa10 f08b 	uxtah	r0, r0, fp
    b2ce:	60a0      	str	r0, [r4, #8]
	return list->head;
    b2d0:	4b3c      	ldr	r3, [pc, #240]	; (b3c4 <bt_hci_le_adv_report+0x1e8>)
    b2d2:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    b2d4:	2a00      	cmp	r2, #0
    b2d6:	d033      	beq.n	b340 <bt_hci_le_adv_report+0x164>
	return node->next;
    b2d8:	f852 7908 	ldr.w	r7, [r2], #-8
    b2dc:	b107      	cbz	r7, b2e0 <bt_hci_le_adv_report+0x104>
    b2de:	3f08      	subs	r7, #8
		if (listener->recv) {
    b2e0:	6813      	ldr	r3, [r2, #0]
    b2e2:	9203      	str	r2, [sp, #12]
    b2e4:	b193      	cbz	r3, b30c <bt_hci_le_adv_report+0x130>
	state->offset = net_buf_simple_headroom(buf);
    b2e6:	4640      	mov	r0, r8
    b2e8:	f01b ff27 	bl	2713a <net_buf_simple_headroom>
	state->len = buf->len;
    b2ec:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    b2ee:	9a03      	ldr	r2, [sp, #12]
    b2f0:	9302      	str	r3, [sp, #8]
			buf->len = len;
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b2f6:	4683      	mov	fp, r0
			listener->recv(info, buf);
    b2f8:	6812      	ldr	r2, [r2, #0]
    b2fa:	a808      	add	r0, sp, #32
    b2fc:	4641      	mov	r1, r8
    b2fe:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    b300:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b302:	9b02      	ldr	r3, [sp, #8]
    b304:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b306:	fa10 f08b 	uxtah	r0, r0, fp
    b30a:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    b30c:	b1c7      	cbz	r7, b340 <bt_hci_le_adv_report+0x164>
    b30e:	68bb      	ldr	r3, [r7, #8]
    b310:	b103      	cbz	r3, b314 <bt_hci_le_adv_report+0x138>
    b312:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    b314:	463a      	mov	r2, r7
    b316:	461f      	mov	r7, r3
    b318:	e7e2      	b.n	b2e0 <bt_hci_le_adv_report+0x104>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    b31a:	2bff      	cmp	r3, #255	; 0xff
    b31c:	d109      	bne.n	b332 <bt_hci_le_adv_report+0x156>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    b31e:	2300      	movs	r3, #0
    b320:	9306      	str	r3, [sp, #24]
    b322:	2207      	movs	r2, #7
    b324:	f8cd 301b 	str.w	r3, [sp, #27]
    b328:	a906      	add	r1, sp, #24
    b32a:	a804      	add	r0, sp, #16
    b32c:	f019 fb37 	bl	2499e <memcpy>
}
    b330:	e7b4      	b.n	b29c <bt_hci_le_adv_report+0xc0>
		bt_addr_le_copy(&id_addr,
    b332:	4649      	mov	r1, r9
    b334:	2000      	movs	r0, #0
    b336:	f019 fdf1 	bl	24f1c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    b33a:	2207      	movs	r2, #7
    b33c:	4601      	mov	r1, r0
    b33e:	e7f4      	b.n	b32a <bt_hci_le_adv_report+0x14e>
	check_pending_conn(&id_addr, addr, info->adv_props);
    b340:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    b344:	f7ff fe74 	bl	b030 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    b348:	0641      	lsls	r1, r0, #25
    b34a:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    b34e:	d48f      	bmi.n	b270 <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    b350:	07d2      	lsls	r2, r2, #31
    b352:	d58d      	bpl.n	b270 <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    b354:	2202      	movs	r2, #2
    b356:	a904      	add	r1, sp, #16
    b358:	4658      	mov	r0, fp
    b35a:	f000 fedb 	bl	c114 <bt_conn_lookup_state_le>
	if (!conn) {
    b35e:	4607      	mov	r7, r0
    b360:	2800      	cmp	r0, #0
    b362:	d085      	beq.n	b270 <bt_hci_le_adv_report+0x94>
    b364:	f7ff fe64 	bl	b030 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    b368:	0683      	lsls	r3, r0, #26
    b36a:	d411      	bmi.n	b390 <bt_hci_le_adv_report+0x1b4>
    b36c:	2207      	movs	r2, #7
    b36e:	4649      	mov	r1, r9
    b370:	f107 0096 	add.w	r0, r7, #150	; 0x96
    b374:	f019 fb13 	bl	2499e <memcpy>
	if (bt_le_create_conn(conn)) {
    b378:	4638      	mov	r0, r7
    b37a:	f019 fc82 	bl	24c82 <bt_le_create_conn>
    b37e:	b960      	cbnz	r0, b39a <bt_hci_le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    b380:	4638      	mov	r0, r7
    b382:	2106      	movs	r1, #6
    b384:	f000 fc4c 	bl	bc20 <bt_conn_set_state>
	bt_conn_unref(conn);
    b388:	4638      	mov	r0, r7
    b38a:	f019 febf 	bl	2510c <bt_conn_unref>
	return;
    b38e:	e76f      	b.n	b270 <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
    b390:	4658      	mov	r0, fp
    b392:	f7ff fe57 	bl	b044 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    b396:	2800      	cmp	r0, #0
    b398:	d0e8      	beq.n	b36c <bt_hci_le_adv_report+0x190>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    b39a:	231f      	movs	r3, #31
    b39c:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b39e:	2100      	movs	r1, #0
    b3a0:	4638      	mov	r0, r7
    b3a2:	f000 fc3d 	bl	bc20 <bt_conn_set_state>
	bt_conn_unref(conn);
    b3a6:	4638      	mov	r0, r7
    b3a8:	f019 feb0 	bl	2510c <bt_conn_unref>
	bt_le_scan_update(false);
    b3ac:	2000      	movs	r0, #0
    b3ae:	f7ff fed3 	bl	b158 <bt_le_scan_update>
    b3b2:	e75d      	b.n	b270 <bt_hci_le_adv_report+0x94>
    b3b4:	200020d8 	.word	0x200020d8
    b3b8:	0002b884 	.word	0x0002b884
    b3bc:	000289a0 	.word	0x000289a0
    b3c0:	0002b8a5 	.word	0x0002b8a5
    b3c4:	200020d0 	.word	0x200020d0

0000b3c8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3cc:	4605      	mov	r5, r0
    b3ce:	f7ff fe2f 	bl	b030 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b3d2:	0780      	lsls	r0, r0, #30
{
    b3d4:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b3d6:	d56f      	bpl.n	b4b8 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    b3d8:	782a      	ldrb	r2, [r5, #0]
    b3da:	2a01      	cmp	r2, #1
    b3dc:	d904      	bls.n	b3e8 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    b3de:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    b3e2:	4620      	mov	r0, r4
    b3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    b3e8:	686b      	ldr	r3, [r5, #4]
    b3ea:	f033 030f 	bics.w	r3, r3, #15
    b3ee:	d1f6      	bne.n	b3de <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    b3f0:	8928      	ldrh	r0, [r5, #8]
    b3f2:	1f03      	subs	r3, r0, #4
    b3f4:	b29b      	uxth	r3, r3
    b3f6:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    b3fa:	42a3      	cmp	r3, r4
    b3fc:	d8ef      	bhi.n	b3de <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    b3fe:	8969      	ldrh	r1, [r5, #10]
    b400:	1f0b      	subs	r3, r1, #4
    b402:	b29b      	uxth	r3, r3
    b404:	42a3      	cmp	r3, r4
    b406:	d8ea      	bhi.n	b3de <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    b408:	4288      	cmp	r0, r1
    b40a:	d3e8      	bcc.n	b3de <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    b40c:	b99a      	cbnz	r2, b436 <bt_le_scan_start+0x6e>
    b40e:	f3bf 8f5b 	dmb	ish
    b412:	4e2b      	ldr	r6, [pc, #172]	; (b4c0 <bt_le_scan_start+0xf8>)
    b414:	e856 0f00 	ldrex	r0, [r6]
    b418:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    b41c:	e846 3200 	strex	r2, r3, [r6]
    b420:	2a00      	cmp	r2, #0
    b422:	d1f7      	bne.n	b414 <bt_le_scan_start+0x4c>
    b424:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    b428:	f010 0240 	ands.w	r2, r0, #64	; 0x40
    b42c:	46b0      	mov	r8, r6
    b42e:	d007      	beq.n	b440 <bt_le_scan_start+0x78>
		return -EALREADY;
    b430:	f06f 0477 	mvn.w	r4, #119	; 0x77
    b434:	e7d5      	b.n	b3e2 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    b436:	f019 fd8b 	bl	24f50 <bt_id_scan_random_addr_check>
    b43a:	2800      	cmp	r0, #0
    b43c:	d1e7      	bne.n	b40e <bt_le_scan_start+0x46>
    b43e:	e7ce      	b.n	b3de <bt_le_scan_start+0x16>
    b440:	f7ff fdf6 	bl	b030 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    b444:	0681      	lsls	r1, r0, #26
    b446:	d50a      	bpl.n	b45e <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    b448:	4610      	mov	r0, r2
    b44a:	f7ff fdfb 	bl	b044 <bt_le_scan_set_enable_legacy>
		if (err) {
    b44e:	4604      	mov	r4, r0
    b450:	b128      	cbz	r0, b45e <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b452:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b456:	4630      	mov	r0, r6
    b458:	f019 fd8c 	bl	24f74 <atomic_and>
		return err;
    b45c:	e7c1      	b.n	b3e2 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    b45e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    b460:	07db      	lsls	r3, r3, #31
    b462:	d515      	bpl.n	b490 <bt_le_scan_start+0xc8>
    b464:	f3bf 8f5b 	dmb	ish
    b468:	e858 3f00 	ldrex	r3, [r8]
    b46c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b470:	e848 3200 	strex	r2, r3, [r8]
    b474:	2a00      	cmp	r2, #0
    b476:	d1f7      	bne.n	b468 <bt_le_scan_start+0xa0>
    b478:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    b47c:	89ab      	ldrh	r3, [r5, #12]
    b47e:	b16b      	cbz	r3, b49c <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b480:	480f      	ldr	r0, [pc, #60]	; (b4c0 <bt_le_scan_start+0xf8>)
    b482:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b486:	f019 fd75 	bl	24f74 <atomic_and>
			return -ENOTSUP;
    b48a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b48e:	e7a8      	b.n	b3e2 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b490:	f46f 7180 	mvn.w	r1, #256	; 0x100
    b494:	480a      	ldr	r0, [pc, #40]	; (b4c0 <bt_le_scan_start+0xf8>)
    b496:	f019 fd6d 	bl	24f74 <atomic_and>
    b49a:	e7ef      	b.n	b47c <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    b49c:	896a      	ldrh	r2, [r5, #10]
    b49e:	8929      	ldrh	r1, [r5, #8]
    b4a0:	7828      	ldrb	r0, [r5, #0]
    b4a2:	f7ff fe01 	bl	b0a8 <start_le_scan_legacy>
	if (err) {
    b4a6:	4604      	mov	r4, r0
    b4a8:	b118      	cbz	r0, b4b2 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b4aa:	4805      	ldr	r0, [pc, #20]	; (b4c0 <bt_le_scan_start+0xf8>)
    b4ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b4b0:	e7d2      	b.n	b458 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    b4b2:	4b04      	ldr	r3, [pc, #16]	; (b4c4 <bt_le_scan_start+0xfc>)
    b4b4:	601f      	str	r7, [r3, #0]
	return 0;
    b4b6:	e794      	b.n	b3e2 <bt_le_scan_start+0x1a>
		return -EAGAIN;
    b4b8:	f06f 040a 	mvn.w	r4, #10
    b4bc:	e791      	b.n	b3e2 <bt_le_scan_start+0x1a>
    b4be:	bf00      	nop
    b4c0:	200000cc 	.word	0x200000cc
    b4c4:	200020d8 	.word	0x200020d8

0000b4c8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    b4c8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b4ca:	4808      	ldr	r0, [pc, #32]	; (b4ec <bt_le_scan_stop+0x24>)
    b4cc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b4d0:	f019 fd50 	bl	24f74 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    b4d4:	0643      	lsls	r3, r0, #25
    b4d6:	d506      	bpl.n	b4e6 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    b4d8:	4b05      	ldr	r3, [pc, #20]	; (b4f0 <bt_le_scan_stop+0x28>)
    b4da:	2000      	movs	r0, #0
    b4dc:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    b4de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    b4e2:	f7ff be39 	b.w	b158 <bt_le_scan_update>
}
    b4e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b4ea:	bd08      	pop	{r3, pc}
    b4ec:	200000cc 	.word	0x200000cc
    b4f0:	200020d8 	.word	0x200020d8

0000b4f4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    b4f4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    b4f6:	4904      	ldr	r1, [pc, #16]	; (b508 <bt_pub_key_is_debug+0x14>)
    b4f8:	2240      	movs	r2, #64	; 0x40
    b4fa:	f019 fa3f 	bl	2497c <memcmp>
}
    b4fe:	fab0 f080 	clz	r0, r0
    b502:	0940      	lsrs	r0, r0, #5
    b504:	bd08      	pop	{r3, pc}
    b506:	bf00      	nop
    b508:	0002b938 	.word	0x0002b938

0000b50c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    b50e:	4b45      	ldr	r3, [pc, #276]	; (b624 <bt_pub_key_gen+0x118>)
    b510:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    b514:	f003 0306 	and.w	r3, r3, #6
    b518:	2b06      	cmp	r3, #6
{
    b51a:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    b51c:	d010      	beq.n	b540 <bt_pub_key_gen+0x34>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    b51e:	4b42      	ldr	r3, [pc, #264]	; (b628 <bt_pub_key_gen+0x11c>)
    b520:	9306      	str	r3, [sp, #24]
    b522:	2302      	movs	r3, #2
    b524:	9301      	str	r3, [sp, #4]
    b526:	9305      	str	r3, [sp, #20]
    b528:	4840      	ldr	r0, [pc, #256]	; (b62c <bt_pub_key_gen+0x120>)
    b52a:	2300      	movs	r3, #0
    b52c:	aa05      	add	r2, sp, #20
    b52e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
    b532:	f06f 0585 	mvn.w	r5, #133	; 0x85
    b536:	f017 ff9e 	bl	23476 <z_impl_z_log_msg2_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    b53a:	4628      	mov	r0, r5
    b53c:	b009      	add	sp, #36	; 0x24
    b53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
    b540:	2800      	cmp	r0, #0
    b542:	d06b      	beq.n	b61c <bt_pub_key_gen+0x110>
	return list->head;
    b544:	4e3a      	ldr	r6, [pc, #232]	; (b630 <bt_pub_key_gen+0x124>)
    b546:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b548:	b1aa      	cbz	r2, b576 <bt_pub_key_gen+0x6a>
    b54a:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    b54c:	4298      	cmp	r0, r3
    b54e:	d10e      	bne.n	b56e <bt_pub_key_gen+0x62>
			BT_WARN("Callback already registered");
    b550:	4b38      	ldr	r3, [pc, #224]	; (b634 <bt_pub_key_gen+0x128>)
    b552:	9306      	str	r3, [sp, #24]
    b554:	2302      	movs	r3, #2
    b556:	9301      	str	r3, [sp, #4]
    b558:	9305      	str	r3, [sp, #20]
    b55a:	4834      	ldr	r0, [pc, #208]	; (b62c <bt_pub_key_gen+0x120>)
    b55c:	2300      	movs	r3, #0
    b55e:	aa05      	add	r2, sp, #20
    b560:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b564:	f017 ff87 	bl	23476 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
    b568:	f06f 0577 	mvn.w	r5, #119	; 0x77
    b56c:	e7e5      	b.n	b53a <bt_pub_key_gen+0x2e>
	return node->next;
    b56e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b570:	b10b      	cbz	r3, b576 <bt_pub_key_gen+0x6a>
    b572:	3b04      	subs	r3, #4
    b574:	e7ea      	b.n	b54c <bt_pub_key_gen+0x40>
	parent->next = child;
    b576:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    b578:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    b57a:	1d03      	adds	r3, r0, #4
	list->head = node;
    b57c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    b57e:	b902      	cbnz	r2, b582 <bt_pub_key_gen+0x76>
	list->tail = node;
    b580:	6073      	str	r3, [r6, #4]
    b582:	4c2d      	ldr	r4, [pc, #180]	; (b638 <bt_pub_key_gen+0x12c>)
    b584:	f3bf 8f5b 	dmb	ish
    b588:	e854 7f00 	ldrex	r7, [r4]
    b58c:	f047 0310 	orr.w	r3, r7, #16
    b590:	e844 3200 	strex	r2, r3, [r4]
    b594:	2a00      	cmp	r2, #0
    b596:	d1f7      	bne.n	b588 <bt_pub_key_gen+0x7c>
    b598:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b59c:	f017 0710 	ands.w	r7, r7, #16
    b5a0:	d001      	beq.n	b5a6 <bt_pub_key_gen+0x9a>
		return 0;
    b5a2:	2500      	movs	r5, #0
    b5a4:	e7c9      	b.n	b53a <bt_pub_key_gen+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b5a6:	f3bf 8f5b 	dmb	ish
    b5aa:	e854 3f00 	ldrex	r3, [r4]
    b5ae:	f023 0308 	bic.w	r3, r3, #8
    b5b2:	e844 3200 	strex	r2, r3, [r4]
    b5b6:	2a00      	cmp	r2, #0
    b5b8:	d1f7      	bne.n	b5aa <bt_pub_key_gen+0x9e>
    b5ba:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    b5be:	463a      	mov	r2, r7
    b5c0:	4639      	mov	r1, r7
    b5c2:	f242 0025 	movw	r0, #8229	; 0x2025
    b5c6:	f7fe fbcf 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    b5ca:	4605      	mov	r5, r0
    b5cc:	2800      	cmp	r0, #0
    b5ce:	d0e8      	beq.n	b5a2 <bt_pub_key_gen+0x96>
		BT_ERR("Sending LE P256 Public Key command failed");
    b5d0:	4b1a      	ldr	r3, [pc, #104]	; (b63c <bt_pub_key_gen+0x130>)
    b5d2:	9306      	str	r3, [sp, #24]
    b5d4:	2302      	movs	r3, #2
    b5d6:	9301      	str	r3, [sp, #4]
    b5d8:	9305      	str	r3, [sp, #20]
    b5da:	4814      	ldr	r0, [pc, #80]	; (b62c <bt_pub_key_gen+0x120>)
    b5dc:	463b      	mov	r3, r7
    b5de:	aa05      	add	r2, sp, #20
    b5e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b5e4:	f017 ff47 	bl	23476 <z_impl_z_log_msg2_static_create>
    b5e8:	f3bf 8f5b 	dmb	ish
    b5ec:	e854 3f00 	ldrex	r3, [r4]
    b5f0:	f023 0310 	bic.w	r3, r3, #16
    b5f4:	e844 3200 	strex	r2, r3, [r4]
    b5f8:	2a00      	cmp	r2, #0
    b5fa:	d1f7      	bne.n	b5ec <bt_pub_key_gen+0xe0>
    b5fc:	f3bf 8f5b 	dmb	ish
	return list->head;
    b600:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b602:	b13c      	cbz	r4, b614 <bt_pub_key_gen+0x108>
			if (cb->func) {
    b604:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b608:	3c04      	subs	r4, #4
			if (cb->func) {
    b60a:	b10b      	cbz	r3, b610 <bt_pub_key_gen+0x104>
				cb->func(NULL);
    b60c:	2000      	movs	r0, #0
    b60e:	4798      	blx	r3
	return node->next;
    b610:	6864      	ldr	r4, [r4, #4]
    b612:	e7f6      	b.n	b602 <bt_pub_key_gen+0xf6>
	list->head = NULL;
    b614:	2300      	movs	r3, #0
	list->tail = NULL;
    b616:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    b61a:	e78e      	b.n	b53a <bt_pub_key_gen+0x2e>
		return -EINVAL;
    b61c:	f06f 0515 	mvn.w	r5, #21
    b620:	e78b      	b.n	b53a <bt_pub_key_gen+0x2e>
    b622:	bf00      	nop
    b624:	20000000 	.word	0x20000000
    b628:	0002b8aa 	.word	0x0002b8aa
    b62c:	00028960 	.word	0x00028960
    b630:	200020e0 	.word	0x200020e0
    b634:	0002b8c9 	.word	0x0002b8c9
    b638:	200000cc 	.word	0x200000cc
    b63c:	0002b8e5 	.word	0x0002b8e5

0000b640 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b640:	4b05      	ldr	r3, [pc, #20]	; (b658 <bt_pub_key_get+0x18>)
    b642:	f3bf 8f5b 	dmb	ish
    b646:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    b648:	4804      	ldr	r0, [pc, #16]	; (b65c <bt_pub_key_get+0x1c>)
    b64a:	f3bf 8f5b 	dmb	ish
		return pub_key;
    b64e:	f013 0f08 	tst.w	r3, #8
}
    b652:	bf08      	it	eq
    b654:	2000      	moveq	r0, #0
    b656:	4770      	bx	lr
    b658:	200000cc 	.word	0x200000cc
    b65c:	20003efa 	.word	0x20003efa

0000b660 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    b660:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    b662:	4d27      	ldr	r5, [pc, #156]	; (b700 <bt_dh_key_gen+0xa0>)
    b664:	682b      	ldr	r3, [r5, #0]
    b666:	428b      	cmp	r3, r1
{
    b668:	b089      	sub	sp, #36	; 0x24
    b66a:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    b66c:	d041      	beq.n	b6f2 <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b66e:	b123      	cbz	r3, b67a <bt_dh_key_gen+0x1a>
		return -EBUSY;
    b670:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    b674:	4620      	mov	r0, r4
    b676:	b009      	add	sp, #36	; 0x24
    b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b67a:	4b22      	ldr	r3, [pc, #136]	; (b704 <bt_dh_key_gen+0xa4>)
    b67c:	f3bf 8f5b 	dmb	ish
    b680:	681a      	ldr	r2, [r3, #0]
    b682:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b686:	f3c2 1700 	ubfx	r7, r2, #4, #1
    b68a:	06d2      	lsls	r2, r2, #27
    b68c:	d4f0      	bmi.n	b670 <bt_dh_key_gen+0x10>
    b68e:	f3bf 8f5b 	dmb	ish
    b692:	681b      	ldr	r3, [r3, #0]
    b694:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    b698:	071b      	lsls	r3, r3, #28
    b69a:	d52d      	bpl.n	b6f8 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
    b69c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    b69e:	f242 0026 	movw	r0, #8230	; 0x2026
    b6a2:	2140      	movs	r1, #64	; 0x40
    b6a4:	f7fe fa00 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
    b6a8:	4604      	mov	r4, r0
    b6aa:	b1f8      	cbz	r0, b6ec <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
    b6ac:	2140      	movs	r1, #64	; 0x40
    b6ae:	3008      	adds	r0, #8
    b6b0:	f01b fcfa 	bl	270a8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    b6b4:	2240      	movs	r2, #64	; 0x40
    b6b6:	4631      	mov	r1, r6
    b6b8:	f019 f971 	bl	2499e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    b6bc:	4621      	mov	r1, r4
    b6be:	463a      	mov	r2, r7
    b6c0:	f242 0026 	movw	r0, #8230	; 0x2026
    b6c4:	f7fe fb50 	bl	9d68 <bt_hci_cmd_send_sync>
	if (err) {
    b6c8:	4604      	mov	r4, r0
    b6ca:	2800      	cmp	r0, #0
    b6cc:	d0d2      	beq.n	b674 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b6ce:	4a0e      	ldr	r2, [pc, #56]	; (b708 <bt_dh_key_gen+0xa8>)
		dh_key_cb = NULL;
    b6d0:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b6d2:	e9cd 2406 	strd	r2, r4, [sp, #24]
    b6d6:	2203      	movs	r2, #3
		dh_key_cb = NULL;
    b6d8:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b6da:	9201      	str	r2, [sp, #4]
    b6dc:	9205      	str	r2, [sp, #20]
    b6de:	480b      	ldr	r0, [pc, #44]	; (b70c <bt_dh_key_gen+0xac>)
    b6e0:	aa05      	add	r2, sp, #20
    b6e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b6e6:	f017 fec6 	bl	23476 <z_impl_z_log_msg2_static_create>
		return err;
    b6ea:	e7c3      	b.n	b674 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
    b6ec:	f06f 0468 	mvn.w	r4, #104	; 0x68
    b6f0:	e7ed      	b.n	b6ce <bt_dh_key_gen+0x6e>
		return -EALREADY;
    b6f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    b6f6:	e7bd      	b.n	b674 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    b6f8:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    b6fc:	e7ba      	b.n	b674 <bt_dh_key_gen+0x14>
    b6fe:	bf00      	nop
    b700:	200020dc 	.word	0x200020dc
    b704:	200000cc 	.word	0x200000cc
    b708:	0002b90f 	.word	0x0002b90f
    b70c:	00028960 	.word	0x00028960

0000b710 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b712:	4c1b      	ldr	r4, [pc, #108]	; (b780 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    b714:	6886      	ldr	r6, [r0, #8]
    b716:	f3bf 8f5b 	dmb	ish
    b71a:	e854 3f00 	ldrex	r3, [r4]
    b71e:	f023 0310 	bic.w	r3, r3, #16
    b722:	e844 3200 	strex	r2, r3, [r4]
    b726:	2a00      	cmp	r2, #0
    b728:	d1f7      	bne.n	b71a <bt_hci_evt_le_pkey_complete+0xa>
    b72a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    b72e:	7833      	ldrb	r3, [r6, #0]
    b730:	b983      	cbnz	r3, b754 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    b732:	4814      	ldr	r0, [pc, #80]	; (b784 <bt_hci_evt_le_pkey_complete+0x74>)
    b734:	2240      	movs	r2, #64	; 0x40
    b736:	1c71      	adds	r1, r6, #1
    b738:	f019 f931 	bl	2499e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b73c:	f3bf 8f5b 	dmb	ish
    b740:	e854 3f00 	ldrex	r3, [r4]
    b744:	f043 0308 	orr.w	r3, r3, #8
    b748:	e844 3200 	strex	r2, r3, [r4]
    b74c:	2a00      	cmp	r2, #0
    b74e:	d1f7      	bne.n	b740 <bt_hci_evt_le_pkey_complete+0x30>
    b750:	f3bf 8f5b 	dmb	ish
	return list->head;
    b754:	4d0c      	ldr	r5, [pc, #48]	; (b788 <bt_hci_evt_le_pkey_complete+0x78>)
    b756:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b758:	b16c      	cbz	r4, b776 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    b75a:	4f0a      	ldr	r7, [pc, #40]	; (b784 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b75c:	3c04      	subs	r4, #4
		if (cb->func) {
    b75e:	6823      	ldr	r3, [r4, #0]
    b760:	b12b      	cbz	r3, b76e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
    b762:	7832      	ldrb	r2, [r6, #0]
    b764:	2a00      	cmp	r2, #0
    b766:	bf0c      	ite	eq
    b768:	4638      	moveq	r0, r7
    b76a:	2000      	movne	r0, #0
    b76c:	4798      	blx	r3
	return node->next;
    b76e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b770:	b10c      	cbz	r4, b776 <bt_hci_evt_le_pkey_complete+0x66>
    b772:	3c04      	subs	r4, #4
    b774:	e7f3      	b.n	b75e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
    b776:	2300      	movs	r3, #0
	list->tail = NULL;
    b778:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    b77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b77e:	bf00      	nop
    b780:	200000cc 	.word	0x200000cc
    b784:	20003efa 	.word	0x20003efa
    b788:	200020e0 	.word	0x200020e0

0000b78c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    b78c:	4905      	ldr	r1, [pc, #20]	; (b7a4 <bt_hci_evt_le_dhkey_complete+0x18>)
    b78e:	680b      	ldr	r3, [r1, #0]
    b790:	b133      	cbz	r3, b7a0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    b792:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    b794:	2000      	movs	r0, #0
    b796:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    b798:	7811      	ldrb	r1, [r2, #0]
    b79a:	b901      	cbnz	r1, b79e <bt_hci_evt_le_dhkey_complete+0x12>
    b79c:	1c50      	adds	r0, r2, #1
    b79e:	4718      	bx	r3
	}
}
    b7a0:	4770      	bx	lr
    b7a2:	bf00      	nop
    b7a4:	200020dc 	.word	0x200020dc

0000b7a8 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    b7a8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    b7aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    b7ae:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    b7b0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    b7b2:	4801      	ldr	r0, [pc, #4]	; (b7b8 <tx_free+0x10>)
    b7b4:	f01c ba90 	b.w	27cd8 <k_queue_append>
    b7b8:	20000a34 	.word	0x20000a34

0000b7bc <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    b7bc:	4b0e      	ldr	r3, [pc, #56]	; (b7f8 <notify_connected+0x3c>)
{
    b7be:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    b7c0:	681d      	ldr	r5, [r3, #0]
{
    b7c2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    b7c4:	b955      	cbnz	r5, b7dc <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b7c6:	4d0d      	ldr	r5, [pc, #52]	; (b7fc <notify_connected+0x40>)
    b7c8:	4e0d      	ldr	r6, [pc, #52]	; (b800 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    b7ca:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b7cc:	42b5      	cmp	r5, r6
    b7ce:	d30c      	bcc.n	b7ea <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    b7d0:	b989      	cbnz	r1, b7f6 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    b7d2:	4620      	mov	r0, r4
	}
}
    b7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    b7d8:	f003 bc82 	b.w	f0e0 <bt_gatt_connected>
		if (cb->connected) {
    b7dc:	682b      	ldr	r3, [r5, #0]
    b7de:	b113      	cbz	r3, b7e6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    b7e0:	7b21      	ldrb	r1, [r4, #12]
    b7e2:	4620      	mov	r0, r4
    b7e4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b7e6:	69ad      	ldr	r5, [r5, #24]
    b7e8:	e7ec      	b.n	b7c4 <notify_connected+0x8>
		if (cb->connected) {
    b7ea:	682b      	ldr	r3, [r5, #0]
    b7ec:	b10b      	cbz	r3, b7f2 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    b7ee:	4620      	mov	r0, r4
    b7f0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b7f2:	351c      	adds	r5, #28
    b7f4:	e7e9      	b.n	b7ca <notify_connected+0xe>
}
    b7f6:	bd70      	pop	{r4, r5, r6, pc}
    b7f8:	200020ec 	.word	0x200020ec
    b7fc:	00028854 	.word	0x00028854
    b800:	00028870 	.word	0x00028870

0000b804 <send_frag>:
{
    b804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    b808:	694d      	ldr	r5, [r1, #20]
{
    b80a:	b089      	sub	sp, #36	; 0x24
    b80c:	4604      	mov	r4, r0
    b80e:	460e      	mov	r6, r1
    b810:	4690      	mov	r8, r2
    b812:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    b814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b818:	4844      	ldr	r0, [pc, #272]	; (b92c <send_frag+0x128>)
    b81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b81e:	f015 ff11 	bl	21644 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    b822:	7b63      	ldrb	r3, [r4, #13]
    b824:	2b07      	cmp	r3, #7
    b826:	d152      	bne.n	b8ce <send_frag+0xca>
	__asm__ volatile(
    b828:	f04f 0320 	mov.w	r3, #32
    b82c:	f3ef 8211 	mrs	r2, BASEPRI
    b830:	f383 8812 	msr	BASEPRI_MAX, r3
    b834:	f3bf 8f6f 	isb	sy
	if (tx) {
    b838:	69a3      	ldr	r3, [r4, #24]
    b83a:	2d00      	cmp	r5, #0
    b83c:	d05a      	beq.n	b8f4 <send_frag+0xf0>
	parent->next = child;
    b83e:	2100      	movs	r1, #0
    b840:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    b842:	2b00      	cmp	r3, #0
    b844:	d153      	bne.n	b8ee <send_frag+0xea>
	list->head = node;
    b846:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    b84a:	f382 8811 	msr	BASEPRI, r2
    b84e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    b852:	2104      	movs	r1, #4
    b854:	f106 0008 	add.w	r0, r6, #8
    b858:	f01b fc47 	bl	270ea <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b85c:	8823      	ldrh	r3, [r4, #0]
    b85e:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    b862:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b866:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b868:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b86c:	3b04      	subs	r3, #4
    b86e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b870:	2302      	movs	r3, #2
    b872:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    b874:	4630      	mov	r0, r6
    b876:	f019 fac0 	bl	24dfa <bt_send>
	if (err) {
    b87a:	2800      	cmp	r0, #0
    b87c:	d054      	beq.n	b928 <send_frag+0x124>
		BT_ERR("Unable to send to driver (err %d)", err);
    b87e:	4b2c      	ldr	r3, [pc, #176]	; (b930 <send_frag+0x12c>)
    b880:	aa05      	add	r2, sp, #20
    b882:	e9cd 3006 	strd	r3, r0, [sp, #24]
    b886:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b88a:	2303      	movs	r3, #3
    b88c:	4829      	ldr	r0, [pc, #164]	; (b934 <send_frag+0x130>)
    b88e:	9301      	str	r3, [sp, #4]
    b890:	9305      	str	r3, [sp, #20]
    b892:	f019 fb95 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
    b896:	f04f 0320 	mov.w	r3, #32
    b89a:	f3ef 8011 	mrs	r0, BASEPRI
    b89e:	f383 8812 	msr	BASEPRI_MAX, r3
    b8a2:	f3bf 8f6f 	isb	sy
		if (tx) {
    b8a6:	2d00      	cmp	r5, #0
    b8a8:	d038      	beq.n	b91c <send_frag+0x118>
	return list->head;
    b8aa:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b8ac:	2200      	movs	r2, #0
    b8ae:	b153      	cbz	r3, b8c6 <send_frag+0xc2>
    b8b0:	429d      	cmp	r5, r3
    b8b2:	d130      	bne.n	b916 <send_frag+0x112>
	return node->next;
    b8b4:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    b8b6:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    b8b8:	bb42      	cbnz	r2, b90c <send_frag+0x108>
    b8ba:	428d      	cmp	r5, r1
	list->head = node;
    b8bc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    b8be:	d100      	bne.n	b8c2 <send_frag+0xbe>
	list->tail = node;
    b8c0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    b8c2:	2300      	movs	r3, #0
    b8c4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    b8c6:	f380 8811 	msr	BASEPRI, r0
    b8ca:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b8ce:	4817      	ldr	r0, [pc, #92]	; (b92c <send_frag+0x128>)
    b8d0:	f015 fe92 	bl	215f8 <z_impl_k_sem_give>
	if (tx) {
    b8d4:	b115      	cbz	r5, b8dc <send_frag+0xd8>
		tx_free(tx);
    b8d6:	4628      	mov	r0, r5
    b8d8:	f7ff ff66 	bl	b7a8 <tx_free>
	if (always_consume) {
    b8dc:	b11f      	cbz	r7, b8e6 <send_frag+0xe2>
		net_buf_unref(buf);
    b8de:	4630      	mov	r0, r6
    b8e0:	f011 fb42 	bl	1cf68 <net_buf_unref>
	return false;
    b8e4:	2700      	movs	r7, #0
}
    b8e6:	4638      	mov	r0, r7
    b8e8:	b009      	add	sp, #36	; 0x24
    b8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b8ee:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b8f0:	61a5      	str	r5, [r4, #24]
}
    b8f2:	e7aa      	b.n	b84a <send_frag+0x46>
		if (tail_tx) {
    b8f4:	b133      	cbz	r3, b904 <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
    b8f6:	f103 090c 	add.w	r9, r3, #12
    b8fa:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    b8fc:	3301      	adds	r3, #1
    b8fe:	f8c9 3000 	str.w	r3, [r9]
    b902:	e7a2      	b.n	b84a <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    b904:	69e3      	ldr	r3, [r4, #28]
    b906:	f104 091c 	add.w	r9, r4, #28
    b90a:	e7f7      	b.n	b8fc <send_frag+0xf8>
Z_GENLIST_REMOVE(slist, snode)
    b90c:	428d      	cmp	r5, r1
	parent->next = child;
    b90e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b910:	bf08      	it	eq
    b912:	61a2      	streq	r2, [r4, #24]
}
    b914:	e7d5      	b.n	b8c2 <send_frag+0xbe>
	return node->next;
    b916:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b918:	681b      	ldr	r3, [r3, #0]
    b91a:	e7c8      	b.n	b8ae <send_frag+0xaa>
			(*pending_no_cb)--;
    b91c:	f8d9 3000 	ldr.w	r3, [r9]
    b920:	3b01      	subs	r3, #1
    b922:	f8c9 3000 	str.w	r3, [r9]
    b926:	e7ce      	b.n	b8c6 <send_frag+0xc2>
	return true;
    b928:	2701      	movs	r7, #1
    b92a:	e7dc      	b.n	b8e6 <send_frag+0xe2>
    b92c:	20000100 	.word	0x20000100
    b930:	0002b25d 	.word	0x0002b25d
    b934:	000288a0 	.word	0x000288a0

0000b938 <bt_conn_get_pkts>:
}
    b938:	4800      	ldr	r0, [pc, #0]	; (b93c <bt_conn_get_pkts+0x4>)
    b93a:	4770      	bx	lr
    b93c:	20000100 	.word	0x20000100

0000b940 <bt_conn_new>:
{
    b940:	b538      	push	{r3, r4, r5, lr}
    b942:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    b944:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b946:	2501      	movs	r5, #1
    b948:	428b      	cmp	r3, r1
    b94a:	d102      	bne.n	b952 <bt_conn_new+0x12>
		return NULL;
    b94c:	2400      	movs	r4, #0
}
    b94e:	4620      	mov	r0, r4
    b950:	bd38      	pop	{r3, r4, r5, pc}
    b952:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    b956:	f3bf 8f5b 	dmb	ish
    b95a:	e852 0f00 	ldrex	r0, [r2]
    b95e:	2800      	cmp	r0, #0
    b960:	d104      	bne.n	b96c <bt_conn_new+0x2c>
    b962:	e842 5c00 	strex	ip, r5, [r2]
    b966:	f1bc 0f00 	cmp.w	ip, #0
    b96a:	d1f6      	bne.n	b95a <bt_conn_new+0x1a>
    b96c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    b970:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b974:	d002      	beq.n	b97c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    b976:	3301      	adds	r3, #1
    b978:	4604      	mov	r4, r0
    b97a:	e7e5      	b.n	b948 <bt_conn_new+0x8>
	if (!conn) {
    b97c:	2c00      	cmp	r4, #0
    b97e:	d0e6      	beq.n	b94e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    b980:	22b8      	movs	r2, #184	; 0xb8
    b982:	2100      	movs	r1, #0
    b984:	4620      	mov	r0, r4
    b986:	f019 f815 	bl	249b4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    b98a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b98e:	4904      	ldr	r1, [pc, #16]	; (b9a0 <bt_conn_new+0x60>)
    b990:	f01c fa99 	bl	27ec6 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    b994:	4903      	ldr	r1, [pc, #12]	; (b9a4 <bt_conn_new+0x64>)
    b996:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b99a:	f01c fa6e 	bl	27e7a <k_work_init>
	return conn;
    b99e:	e7d6      	b.n	b94e <bt_conn_new+0xe>
    b9a0:	0000c3f9 	.word	0x0000c3f9
    b9a4:	00025043 	.word	0x00025043

0000b9a8 <bt_conn_recv>:
{
    b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9aa:	b089      	sub	sp, #36	; 0x24
    b9ac:	4616      	mov	r6, r2
    b9ae:	af00      	add	r7, sp, #0
    b9b0:	4604      	mov	r4, r0
    b9b2:	460d      	mov	r5, r1
	tx_notify(conn);
    b9b4:	f019 fb22 	bl	24ffc <tx_notify>
	switch (flags) {
    b9b8:	2e01      	cmp	r6, #1
    b9ba:	d033      	beq.n	ba24 <bt_conn_recv+0x7c>
    b9bc:	2e02      	cmp	r6, #2
    b9be:	d16e      	bne.n	ba9e <bt_conn_recv+0xf6>
		if (conn->rx) {
    b9c0:	6923      	ldr	r3, [r4, #16]
    b9c2:	b16b      	cbz	r3, b9e0 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    b9c4:	4b3f      	ldr	r3, [pc, #252]	; (bac4 <bt_conn_recv+0x11c>)
    b9c6:	4840      	ldr	r0, [pc, #256]	; (bac8 <bt_conn_recv+0x120>)
    b9c8:	61bb      	str	r3, [r7, #24]
    b9ca:	f107 0214 	add.w	r2, r7, #20
    b9ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9d2:	607e      	str	r6, [r7, #4]
    b9d4:	617e      	str	r6, [r7, #20]
    b9d6:	f019 faf3 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    b9da:	4620      	mov	r0, r4
    b9dc:	f019 fb34 	bl	25048 <bt_conn_reset_rx_state>
		conn->rx = buf;
    b9e0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b9e2:	6921      	ldr	r1, [r4, #16]
    b9e4:	898a      	ldrh	r2, [r1, #12]
    b9e6:	2a01      	cmp	r2, #1
    b9e8:	d933      	bls.n	ba52 <bt_conn_recv+0xaa>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b9ea:	688b      	ldr	r3, [r1, #8]
    b9ec:	881b      	ldrh	r3, [r3, #0]
    b9ee:	3304      	adds	r3, #4
    b9f0:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    b9f2:	429a      	cmp	r2, r3
    b9f4:	d32d      	bcc.n	ba52 <bt_conn_recv+0xaa>
	if (conn->rx->len > acl_total_len) {
    b9f6:	d95d      	bls.n	bab4 <bt_conn_recv+0x10c>
		BT_ERR("ACL len mismatch (%u > %u)",
    b9f8:	466d      	mov	r5, sp
    b9fa:	b088      	sub	sp, #32
    b9fc:	466a      	mov	r2, sp
    b9fe:	4833      	ldr	r0, [pc, #204]	; (bacc <bt_conn_recv+0x124>)
    ba00:	6110      	str	r0, [r2, #16]
    ba02:	8989      	ldrh	r1, [r1, #12]
    ba04:	4830      	ldr	r0, [pc, #192]	; (bac8 <bt_conn_recv+0x120>)
    ba06:	e9c2 1305 	strd	r1, r3, [r2, #20]
    ba0a:	2304      	movs	r3, #4
    ba0c:	f842 3f0c 	str.w	r3, [r2, #12]!
    ba10:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ba14:	60bb      	str	r3, [r7, #8]
    ba16:	f019 fad3 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    ba1a:	4620      	mov	r0, r4
    ba1c:	46ad      	mov	sp, r5
    ba1e:	f019 fb13 	bl	25048 <bt_conn_reset_rx_state>
		return;
    ba22:	e016      	b.n	ba52 <bt_conn_recv+0xaa>
		if (!conn->rx) {
    ba24:	6920      	ldr	r0, [r4, #16]
    ba26:	b978      	cbnz	r0, ba48 <bt_conn_recv+0xa0>
			BT_ERR("Unexpected L2CAP continuation");
    ba28:	4b29      	ldr	r3, [pc, #164]	; (bad0 <bt_conn_recv+0x128>)
    ba2a:	61bb      	str	r3, [r7, #24]
    ba2c:	2302      	movs	r3, #2
    ba2e:	607b      	str	r3, [r7, #4]
    ba30:	617b      	str	r3, [r7, #20]
    ba32:	f107 0214 	add.w	r2, r7, #20
    ba36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    ba3a:	4823      	ldr	r0, [pc, #140]	; (bac8 <bt_conn_recv+0x120>)
    ba3c:	f019 fac0 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    ba40:	4620      	mov	r0, r4
    ba42:	f019 fb01 	bl	25048 <bt_conn_reset_rx_state>
    ba46:	e001      	b.n	ba4c <bt_conn_recv+0xa4>
		if (!buf->len) {
    ba48:	89ae      	ldrh	r6, [r5, #12]
    ba4a:	b92e      	cbnz	r6, ba58 <bt_conn_recv+0xb0>
		net_buf_unref(buf);
    ba4c:	4628      	mov	r0, r5
    ba4e:	f011 fa8b 	bl	1cf68 <net_buf_unref>
}
    ba52:	3724      	adds	r7, #36	; 0x24
    ba54:	46bd      	mov	sp, r7
    ba56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    ba58:	3008      	adds	r0, #8
    ba5a:	f01b fb72 	bl	27142 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    ba5e:	4286      	cmp	r6, r0
    ba60:	d913      	bls.n	ba8a <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
    ba62:	4b1c      	ldr	r3, [pc, #112]	; (bad4 <bt_conn_recv+0x12c>)
    ba64:	4818      	ldr	r0, [pc, #96]	; (bac8 <bt_conn_recv+0x120>)
    ba66:	61bb      	str	r3, [r7, #24]
    ba68:	f107 0214 	add.w	r2, r7, #20
    ba6c:	2302      	movs	r3, #2
    ba6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba72:	607b      	str	r3, [r7, #4]
    ba74:	617b      	str	r3, [r7, #20]
    ba76:	f019 faa3 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    ba7a:	2200      	movs	r2, #0
    ba7c:	6921      	ldr	r1, [r4, #16]
    ba7e:	4620      	mov	r0, r4
    ba80:	f000 ff6a 	bl	c958 <bt_l2cap_recv>
			conn->rx = NULL;
    ba84:	2300      	movs	r3, #0
    ba86:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    ba88:	e7e0      	b.n	ba4c <bt_conn_recv+0xa4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ba8a:	6920      	ldr	r0, [r4, #16]
    ba8c:	89aa      	ldrh	r2, [r5, #12]
    ba8e:	68a9      	ldr	r1, [r5, #8]
    ba90:	3008      	adds	r0, #8
    ba92:	f01b fb0f 	bl	270b4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    ba96:	4628      	mov	r0, r5
    ba98:	f011 fa66 	bl	1cf68 <net_buf_unref>
		break;
    ba9c:	e7a1      	b.n	b9e2 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    ba9e:	4b0e      	ldr	r3, [pc, #56]	; (bad8 <bt_conn_recv+0x130>)
	switch (flags) {
    baa0:	e9c7 3606 	strd	r3, r6, [r7, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    baa4:	2303      	movs	r3, #3
    baa6:	607b      	str	r3, [r7, #4]
    baa8:	617b      	str	r3, [r7, #20]
    baaa:	f107 0214 	add.w	r2, r7, #20
    baae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bab2:	e7c2      	b.n	ba3a <bt_conn_recv+0x92>
	conn->rx = NULL;
    bab4:	2300      	movs	r3, #0
    bab6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    bab8:	2201      	movs	r2, #1
    baba:	4620      	mov	r0, r4
    babc:	f000 ff4c 	bl	c958 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    bac0:	e7c7      	b.n	ba52 <bt_conn_recv+0xaa>
    bac2:	bf00      	nop
    bac4:	0002b978 	.word	0x0002b978
    bac8:	000288a0 	.word	0x000288a0
    bacc:	0002b9f8 	.word	0x0002b9f8
    bad0:	0002b995 	.word	0x0002b995
    bad4:	0002b9b3 	.word	0x0002b9b3
    bad8:	0002b9da 	.word	0x0002b9da

0000badc <bt_conn_send_cb>:
{
    badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bae0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    bae2:	7b43      	ldrb	r3, [r0, #13]
    bae4:	2b07      	cmp	r3, #7
{
    bae6:	b088      	sub	sp, #32
    bae8:	4605      	mov	r5, r0
    baea:	460e      	mov	r6, r1
    baec:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    baee:	d00d      	beq.n	bb0c <bt_conn_send_cb+0x30>
		BT_ERR("not connected!");
    baf0:	4b27      	ldr	r3, [pc, #156]	; (bb90 <bt_conn_send_cb+0xb4>)
    baf2:	9306      	str	r3, [sp, #24]
    baf4:	4827      	ldr	r0, [pc, #156]	; (bb94 <bt_conn_send_cb+0xb8>)
    baf6:	2302      	movs	r3, #2
    baf8:	aa05      	add	r2, sp, #20
    bafa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bafe:	9301      	str	r3, [sp, #4]
    bb00:	9305      	str	r3, [sp, #20]
    bb02:	f019 fa5d 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    bb06:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    bb0a:	e01e      	b.n	bb4a <bt_conn_send_cb+0x6e>
	if (cb) {
    bb0c:	2a00      	cmp	r2, #0
    bb0e:	d03d      	beq.n	bb8c <bt_conn_send_cb+0xb0>
	return z_impl_z_current_get();
    bb10:	f016 fa70 	bl	21ff4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    bb14:	4b20      	ldr	r3, [pc, #128]	; (bb98 <bt_conn_send_cb+0xbc>)
    bb16:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    bb18:	4820      	ldr	r0, [pc, #128]	; (bb9c <bt_conn_send_cb+0xc0>)
    bb1a:	bf07      	ittee	eq
    bb1c:	2200      	moveq	r2, #0
    bb1e:	2300      	moveq	r3, #0
    bb20:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    bb24:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    bb28:	f015 fd32 	bl	21590 <z_impl_k_queue_get>
    bb2c:	4604      	mov	r4, r0
		if (!tx) {
    bb2e:	b978      	cbnz	r0, bb50 <bt_conn_send_cb+0x74>
			BT_ERR("Unable to allocate TX context");
    bb30:	4b1b      	ldr	r3, [pc, #108]	; (bba0 <bt_conn_send_cb+0xc4>)
    bb32:	4818      	ldr	r0, [pc, #96]	; (bb94 <bt_conn_send_cb+0xb8>)
    bb34:	9306      	str	r3, [sp, #24]
    bb36:	aa05      	add	r2, sp, #20
    bb38:	2302      	movs	r3, #2
    bb3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bb3e:	9301      	str	r3, [sp, #4]
    bb40:	9305      	str	r3, [sp, #20]
    bb42:	f019 fa3d 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    bb46:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    bb4a:	b008      	add	sp, #32
    bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    bb50:	7b6b      	ldrb	r3, [r5, #13]
    bb52:	2b07      	cmp	r3, #7
    bb54:	d00e      	beq.n	bb74 <bt_conn_send_cb+0x98>
			BT_WARN("Disconnected while allocating context");
    bb56:	4b13      	ldr	r3, [pc, #76]	; (bba4 <bt_conn_send_cb+0xc8>)
    bb58:	9306      	str	r3, [sp, #24]
    bb5a:	480e      	ldr	r0, [pc, #56]	; (bb94 <bt_conn_send_cb+0xb8>)
    bb5c:	2302      	movs	r3, #2
    bb5e:	aa05      	add	r2, sp, #20
    bb60:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    bb64:	9301      	str	r3, [sp, #4]
    bb66:	9305      	str	r3, [sp, #20]
    bb68:	f019 fa2a 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    bb6c:	4620      	mov	r0, r4
    bb6e:	f7ff fe1b 	bl	b7a8 <tx_free>
    bb72:	e7c8      	b.n	bb06 <bt_conn_send_cb+0x2a>
		tx->pending_no_cb = 0U;
    bb74:	2300      	movs	r3, #0
		tx->user_data = user_data;
    bb76:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    bb7a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    bb7c:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    bb7e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    bb82:	4631      	mov	r1, r6
    bb84:	f01b fa51 	bl	2702a <net_buf_put>
	return 0;
    bb88:	2000      	movs	r0, #0
    bb8a:	e7de      	b.n	bb4a <bt_conn_send_cb+0x6e>
		tx_data(buf)->tx = NULL;
    bb8c:	614a      	str	r2, [r1, #20]
    bb8e:	e7f6      	b.n	bb7e <bt_conn_send_cb+0xa2>
    bb90:	0002ba13 	.word	0x0002ba13
    bb94:	000288a0 	.word	0x000288a0
    bb98:	20001d50 	.word	0x20001d50
    bb9c:	20000a34 	.word	0x20000a34
    bba0:	0002ba22 	.word	0x0002ba22
    bba4:	0002ba40 	.word	0x0002ba40

0000bba8 <bt_conn_prepare_events>:
{
    bba8:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    bbaa:	4b16      	ldr	r3, [pc, #88]	; (bc04 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    bbac:	4c16      	ldr	r4, [pc, #88]	; (bc08 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    bbae:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    bbb0:	2101      	movs	r1, #1
{
    bbb2:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    bbb4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    bbb6:	f01c fcb0 	bl	2851a <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    bbba:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    bbbe:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    bbc2:	f019 f9f7 	bl	24fb4 <atomic_get>
    bbc6:	b908      	cbnz	r0, bbcc <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    bbc8:	2001      	movs	r0, #1
}
    bbca:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    bbcc:	7b63      	ldrb	r3, [r4, #13]
    bbce:	b953      	cbnz	r3, bbe6 <bt_conn_prepare_events+0x3e>
    bbd0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    bbd4:	1d20      	adds	r0, r4, #4
    bbd6:	f019 f9de 	bl	24f96 <atomic_and>
    bbda:	0643      	lsls	r3, r0, #25
    bbdc:	d503      	bpl.n	bbe6 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    bbde:	4620      	mov	r0, r4
    bbe0:	f019 fa3b 	bl	2505a <conn_cleanup>
    bbe4:	e7f0      	b.n	bbc8 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    bbe6:	7b63      	ldrb	r3, [r4, #13]
    bbe8:	2b07      	cmp	r3, #7
    bbea:	d1ed      	bne.n	bbc8 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    bbec:	4b07      	ldr	r3, [pc, #28]	; (bc0c <bt_conn_prepare_events+0x64>)
    bbee:	4630      	mov	r0, r6
    bbf0:	2200      	movs	r2, #0
    bbf2:	2104      	movs	r1, #4
    bbf4:	f01c fc91 	bl	2851a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    bbf8:	2301      	movs	r3, #1
    bbfa:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    bbfe:	2002      	movs	r0, #2
	return ev_count;
    bc00:	e7e3      	b.n	bbca <bt_conn_prepare_events+0x22>
    bc02:	bf00      	nop
    bc04:	200002b4 	.word	0x200002b4
    bc08:	20001428 	.word	0x20001428
    bc0c:	20001460 	.word	0x20001460

0000bc10 <bt_conn_lookup_handle>:
{
    bc10:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    bc12:	2101      	movs	r1, #1
    bc14:	4801      	ldr	r0, [pc, #4]	; (bc1c <bt_conn_lookup_handle+0xc>)
    bc16:	f019 ba59 	b.w	250cc <conn_lookup_handle>
    bc1a:	bf00      	nop
    bc1c:	20001428 	.word	0x20001428

0000bc20 <bt_conn_set_state>:
{
    bc20:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    bc22:	7b46      	ldrb	r6, [r0, #13]
    bc24:	42b1      	cmp	r1, r6
{
    bc26:	b08c      	sub	sp, #48	; 0x30
    bc28:	4604      	mov	r4, r0
    bc2a:	460d      	mov	r5, r1
	if (conn->state == state) {
    bc2c:	d111      	bne.n	bc52 <bt_conn_set_state+0x32>
	switch (state) {
    bc2e:	2908      	cmp	r1, #8
    bc30:	bf96      	itet	ls
    bc32:	4b7e      	ldrls	r3, [pc, #504]	; (be2c <bt_conn_set_state+0x20c>)
	if (conn->state == state) {
    bc34:	4b7e      	ldrhi	r3, [pc, #504]	; (be30 <bt_conn_set_state+0x210>)
    bc36:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    bc3a:	9302      	str	r3, [sp, #8]
    bc3c:	4b7d      	ldr	r3, [pc, #500]	; (be34 <bt_conn_set_state+0x214>)
    bc3e:	9301      	str	r3, [sp, #4]
    bc40:	2300      	movs	r3, #0
    bc42:	497d      	ldr	r1, [pc, #500]	; (be38 <bt_conn_set_state+0x218>)
    bc44:	9300      	str	r3, [sp, #0]
    bc46:	2202      	movs	r2, #2
    bc48:	4618      	mov	r0, r3
    bc4a:	f019 f9bc 	bl	24fc6 <z_log_msg2_runtime_create.constprop.0>
}
    bc4e:	b00c      	add	sp, #48	; 0x30
    bc50:	bd70      	pop	{r4, r5, r6, pc}
	conn->state = state;
    bc52:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    bc54:	b1d6      	cbz	r6, bc8c <bt_conn_set_state+0x6c>
    bc56:	2e06      	cmp	r6, #6
    bc58:	d01e      	beq.n	bc98 <bt_conn_set_state+0x78>
	switch (conn->state) {
    bc5a:	7b63      	ldrb	r3, [r4, #13]
    bc5c:	2b08      	cmp	r3, #8
    bc5e:	f200 80e2 	bhi.w	be26 <bt_conn_set_state+0x206>
    bc62:	a201      	add	r2, pc, #4	; (adr r2, bc68 <bt_conn_set_state+0x48>)
    bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bc68:	0000bcf5 	.word	0x0000bcf5
    bc6c:	0000bca7 	.word	0x0000bca7
    bc70:	0000bc4f 	.word	0x0000bc4f
    bc74:	0000bc4f 	.word	0x0000bc4f
    bc78:	0000bc4f 	.word	0x0000bc4f
    bc7c:	0000bc4f 	.word	0x0000bc4f
    bc80:	0000bd9d 	.word	0x0000bd9d
    bc84:	0000bcd7 	.word	0x0000bcd7
    bc88:	0000bc4f 	.word	0x0000bc4f
		if (conn->type != BT_CONN_TYPE_ISO) {
    bc8c:	7883      	ldrb	r3, [r0, #2]
    bc8e:	2b08      	cmp	r3, #8
    bc90:	d0e3      	beq.n	bc5a <bt_conn_set_state+0x3a>
			bt_conn_ref(conn);
    bc92:	f019 fa00 	bl	25096 <bt_conn_ref>
    bc96:	e7e0      	b.n	bc5a <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc98:	7883      	ldrb	r3, [r0, #2]
    bc9a:	2b01      	cmp	r3, #1
    bc9c:	d1dd      	bne.n	bc5a <bt_conn_set_state+0x3a>
			k_work_cancel_delayable(&conn->deferred_work);
    bc9e:	3058      	adds	r0, #88	; 0x58
    bca0:	f01c f91d 	bl	27ede <k_work_cancel_delayable>
    bca4:	e7d9      	b.n	bc5a <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    bca6:	4d65      	ldr	r5, [pc, #404]	; (be3c <bt_conn_set_state+0x21c>)
		tx->pending_no_cb = 0U;
    bca8:	2600      	movs	r6, #0
	__asm__ volatile(
    bcaa:	f04f 0320 	mov.w	r3, #32
    bcae:	f3ef 8211 	mrs	r2, BASEPRI
    bcb2:	f383 8812 	msr	BASEPRI_MAX, r3
    bcb6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    bcba:	69e3      	ldr	r3, [r4, #28]
    bcbc:	2b00      	cmp	r3, #0
    bcbe:	f000 8091 	beq.w	bde4 <bt_conn_set_state+0x1c4>
			conn->pending_no_cb--;
    bcc2:	3b01      	subs	r3, #1
    bcc4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    bcc6:	f382 8811 	msr	BASEPRI, r2
    bcca:	f3bf 8f6f 	isb	sy
    bcce:	4628      	mov	r0, r5
    bcd0:	f015 fc92 	bl	215f8 <z_impl_k_sem_give>
}
    bcd4:	e7e9      	b.n	bcaa <bt_conn_set_state+0x8a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    bcd6:	78a3      	ldrb	r3, [r4, #2]
    bcd8:	2b04      	cmp	r3, #4
    bcda:	d0b8      	beq.n	bc4e <bt_conn_set_state+0x2e>
	z_impl_k_queue_init(queue);
    bcdc:	f104 0038 	add.w	r0, r4, #56	; 0x38
    bce0:	f01b ffee 	bl	27cc0 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    bce4:	4856      	ldr	r0, [pc, #344]	; (be40 <bt_conn_set_state+0x220>)
    bce6:	2100      	movs	r1, #0
    bce8:	f016 fc44 	bl	22574 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    bcec:	2300      	movs	r3, #0
	list->tail = NULL;
    bcee:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    bcf2:	e7ac      	b.n	bc4e <bt_conn_set_state+0x2e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    bcf4:	78a3      	ldrb	r3, [r4, #2]
    bcf6:	2b04      	cmp	r3, #4
    bcf8:	d106      	bne.n	bd08 <bt_conn_set_state+0xe8>
	old = atomic_dec(&conn->ref);
    bcfa:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    bcfe:	b00c      	add	sp, #48	; 0x30
    bd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
    bd04:	f019 b96e 	b.w	24fe4 <atomic_dec.isra.0>
		switch (old_state) {
    bd08:	2e08      	cmp	r6, #8
    bd0a:	d8a0      	bhi.n	bc4e <bt_conn_set_state+0x2e>
    bd0c:	a301      	add	r3, pc, #4	; (adr r3, bd14 <bt_conn_set_state+0xf4>)
    bd0e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    bd12:	bf00      	nop
    bd14:	0000bd83 	.word	0x0000bd83
    bd18:	0000bd39 	.word	0x0000bd39
    bd1c:	0000bd75 	.word	0x0000bd75
    bd20:	0000bcfb 	.word	0x0000bcfb
    bd24:	0000bcfb 	.word	0x0000bcfb
    bd28:	0000bd75 	.word	0x0000bd75
    bd2c:	0000bd75 	.word	0x0000bd75
    bd30:	0000bd83 	.word	0x0000bd83
    bd34:	0000bd83 	.word	0x0000bd83
			tx_notify(conn);
    bd38:	4620      	mov	r0, r4
    bd3a:	f019 f95f 	bl	24ffc <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    bd3e:	78a3      	ldrb	r3, [r4, #2]
    bd40:	2b01      	cmp	r3, #1
    bd42:	d103      	bne.n	bd4c <bt_conn_set_state+0x12c>
				k_work_cancel_delayable(&conn->deferred_work);
    bd44:	f104 0058 	add.w	r0, r4, #88	; 0x58
    bd48:	f01c f8c9 	bl	27ede <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd4c:	f3bf 8f5b 	dmb	ish
    bd50:	3404      	adds	r4, #4
    bd52:	e854 3f00 	ldrex	r3, [r4]
    bd56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd5a:	e844 3200 	strex	r2, r3, [r4]
    bd5e:	2a00      	cmp	r2, #0
    bd60:	d1f7      	bne.n	bd52 <bt_conn_set_state+0x132>
    bd62:	f3bf 8f5b 	dmb	ish
    bd66:	4836      	ldr	r0, [pc, #216]	; (be40 <bt_conn_set_state+0x220>)
    bd68:	2100      	movs	r1, #0
}
    bd6a:	b00c      	add	sp, #48	; 0x30
    bd6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd70:	f016 bc00 	b.w	22574 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    bd74:	7b23      	ldrb	r3, [r4, #12]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d0bf      	beq.n	bcfa <bt_conn_set_state+0xda>
				notify_connected(conn);
    bd7a:	4620      	mov	r0, r4
    bd7c:	f7ff fd1e 	bl	b7bc <notify_connected>
    bd80:	e7bb      	b.n	bcfa <bt_conn_set_state+0xda>
			BT_WARN("Invalid (%u) old state", state);
    bd82:	4b30      	ldr	r3, [pc, #192]	; (be44 <bt_conn_set_state+0x224>)
		BT_WARN("no valid (%u) state was set", state);
    bd84:	482c      	ldr	r0, [pc, #176]	; (be38 <bt_conn_set_state+0x218>)
    bd86:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
    bd8a:	aa09      	add	r2, sp, #36	; 0x24
    bd8c:	2303      	movs	r3, #3
    bd8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    bd92:	9305      	str	r3, [sp, #20]
    bd94:	9309      	str	r3, [sp, #36]	; 0x24
    bd96:	f019 f913 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
		break;
    bd9a:	e758      	b.n	bc4e <bt_conn_set_state+0x2e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bd9c:	78a3      	ldrb	r3, [r4, #2]
    bd9e:	2b01      	cmp	r3, #1
    bda0:	f47f af55 	bne.w	bc4e <bt_conn_set_state+0x2e>
					K_MSEC(10 * bt_dev.create_param.timeout));
    bda4:	4b28      	ldr	r3, [pc, #160]	; (be48 <bt_conn_set_state+0x228>)
    bda6:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    bda8:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    bdaa:	b1c8      	cbz	r0, bde0 <bt_conn_set_state+0x1c0>
    bdac:	230a      	movs	r3, #10
    bdae:	4358      	muls	r0, r3
    bdb0:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    bdb2:	03c9      	lsls	r1, r1, #15
    bdb4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    bdb8:	f240 33e7 	movw	r3, #999	; 0x3e7
    bdbc:	03c0      	lsls	r0, r0, #15
    bdbe:	18c0      	adds	r0, r0, r3
    bdc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bdc4:	f04f 0300 	mov.w	r3, #0
    bdc8:	f141 0100 	adc.w	r1, r1, #0
    bdcc:	f7f5 f998 	bl	1100 <__aeabi_uldivmod>
    bdd0:	4602      	mov	r2, r0
    bdd2:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    bdd4:	4620      	mov	r0, r4
}
    bdd6:	b00c      	add	sp, #48	; 0x30
    bdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    bddc:	f015 bde0 	b.w	219a0 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
    bde0:	4601      	mov	r1, r0
    bde2:	e7e6      	b.n	bdb2 <bt_conn_set_state+0x192>
	return list->head;
    bde4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    bde6:	b128      	cbz	r0, bdf4 <bt_conn_set_state+0x1d4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bde8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    bdea:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    bdec:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bdee:	4288      	cmp	r0, r1
	list->tail = node;
    bdf0:	bf08      	it	eq
    bdf2:	61a3      	streq	r3, [r4, #24]
    bdf4:	f382 8811 	msr	BASEPRI, r2
    bdf8:	f3bf 8f6f 	isb	sy
		if (!node) {
    bdfc:	2800      	cmp	r0, #0
    bdfe:	f43f af26 	beq.w	bc4e <bt_conn_set_state+0x2e>
	__asm__ volatile(
    be02:	f04f 0220 	mov.w	r2, #32
    be06:	f3ef 8311 	mrs	r3, BASEPRI
    be0a:	f382 8812 	msr	BASEPRI_MAX, r2
    be0e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    be12:	68c2      	ldr	r2, [r0, #12]
    be14:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    be16:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    be18:	f383 8811 	msr	BASEPRI, r3
    be1c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    be20:	f7ff fcc2 	bl	b7a8 <tx_free>
    be24:	e753      	b.n	bcce <bt_conn_set_state+0xae>
		BT_WARN("no valid (%u) state was set", state);
    be26:	4b09      	ldr	r3, [pc, #36]	; (be4c <bt_conn_set_state+0x22c>)
    be28:	e7ac      	b.n	bd84 <bt_conn_set_state+0x164>
    be2a:	bf00      	nop
    be2c:	00028edc 	.word	0x00028edc
    be30:	0002ba66 	.word	0x0002ba66
    be34:	0002ba70 	.word	0x0002ba70
    be38:	000288a0 	.word	0x000288a0
    be3c:	20000100 	.word	0x20000100
    be40:	200002b4 	.word	0x200002b4
    be44:	0002ba81 	.word	0x0002ba81
    be48:	20000000 	.word	0x20000000
    be4c:	0002ba98 	.word	0x0002ba98

0000be50 <bt_conn_index>:
		index = conn - acl_conns;
    be50:	4b03      	ldr	r3, [pc, #12]	; (be60 <bt_conn_index+0x10>)
    be52:	1ac0      	subs	r0, r0, r3
    be54:	4b03      	ldr	r3, [pc, #12]	; (be64 <bt_conn_index+0x14>)
    be56:	1180      	asrs	r0, r0, #6
    be58:	4358      	muls	r0, r3
}
    be5a:	b2c0      	uxtb	r0, r0
    be5c:	4770      	bx	lr
    be5e:	bf00      	nop
    be60:	20001428 	.word	0x20001428
    be64:	aaaaaaab 	.word	0xaaaaaaab

0000be68 <bt_conn_create_pdu_timeout>:
{
    be68:	b530      	push	{r4, r5, lr}
    be6a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    be6c:	490d      	ldr	r1, [pc, #52]	; (bea4 <bt_conn_create_pdu_timeout+0x3c>)
    be6e:	b089      	sub	sp, #36	; 0x24
    be70:	2800      	cmp	r0, #0
    be72:	bf08      	it	eq
    be74:	4608      	moveq	r0, r1
    be76:	f01b f8af 	bl	26fd8 <net_buf_alloc_fixed>
	if (!buf) {
    be7a:	4604      	mov	r4, r0
    be7c:	b968      	cbnz	r0, be9a <bt_conn_create_pdu_timeout+0x32>
		BT_WARN("Unable to allocate buffer within timeout");
    be7e:	4b0a      	ldr	r3, [pc, #40]	; (bea8 <bt_conn_create_pdu_timeout+0x40>)
    be80:	9306      	str	r3, [sp, #24]
    be82:	480a      	ldr	r0, [pc, #40]	; (beac <bt_conn_create_pdu_timeout+0x44>)
    be84:	2302      	movs	r3, #2
    be86:	aa05      	add	r2, sp, #20
    be88:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    be8c:	9301      	str	r3, [sp, #4]
    be8e:	9305      	str	r3, [sp, #20]
    be90:	f019 f896 	bl	24fc0 <z_log_msg2_static_create.constprop.0>
}
    be94:	4620      	mov	r0, r4
    be96:	b009      	add	sp, #36	; 0x24
    be98:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    be9a:	1d29      	adds	r1, r5, #4
    be9c:	3008      	adds	r0, #8
    be9e:	f01b f8c0 	bl	27022 <net_buf_simple_reserve>
	return buf;
    bea2:	e7f7      	b.n	be94 <bt_conn_create_pdu_timeout+0x2c>
    bea4:	20000a7c 	.word	0x20000a7c
    bea8:	0002bab4 	.word	0x0002bab4
    beac:	000288a0 	.word	0x000288a0

0000beb0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    beb2:	1d03      	adds	r3, r0, #4
{
    beb4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    beb6:	4618      	mov	r0, r3
    beb8:	f019 f87c 	bl	24fb4 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    bebc:	0582      	lsls	r2, r0, #22
    bebe:	d512      	bpl.n	bee6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    bec0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    bec4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    bec8:	4291      	cmp	r1, r2
    beca:	d80c      	bhi.n	bee6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    becc:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    bed0:	4291      	cmp	r1, r2
    bed2:	d308      	bcc.n	bee6 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    bed4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    bed8:	4291      	cmp	r1, r2
    beda:	d104      	bne.n	bee6 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bedc:	f46f 7100 	mvn.w	r1, #512	; 0x200
    bee0:	4618      	mov	r0, r3
    bee2:	f019 f858 	bl	24f96 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    bee6:	4b10      	ldr	r3, [pc, #64]	; (bf28 <notify_le_param_updated+0x78>)
    bee8:	681d      	ldr	r5, [r3, #0]
    beea:	b925      	cbnz	r5, bef6 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    beec:	4d0f      	ldr	r5, [pc, #60]	; (bf2c <notify_le_param_updated+0x7c>)
    beee:	4f10      	ldr	r7, [pc, #64]	; (bf30 <notify_le_param_updated+0x80>)
    bef0:	42bd      	cmp	r5, r7
    bef2:	d30c      	bcc.n	bf0e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    bef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    bef6:	68ee      	ldr	r6, [r5, #12]
    bef8:	b13e      	cbz	r6, bf0a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
    befa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    befe:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    bf02:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    bf06:	4620      	mov	r0, r4
    bf08:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    bf0a:	69ad      	ldr	r5, [r5, #24]
    bf0c:	e7ed      	b.n	beea <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
    bf0e:	68ee      	ldr	r6, [r5, #12]
    bf10:	b13e      	cbz	r6, bf22 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
    bf12:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    bf16:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    bf1a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    bf1e:	4620      	mov	r0, r4
    bf20:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bf22:	351c      	adds	r5, #28
    bf24:	e7e4      	b.n	bef0 <notify_le_param_updated+0x40>
    bf26:	bf00      	nop
    bf28:	200020ec 	.word	0x200020ec
    bf2c:	00028854 	.word	0x00028854
    bf30:	00028870 	.word	0x00028870

0000bf34 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf38:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    bf3a:	4608      	mov	r0, r1
{
    bf3c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    bf3e:	f018 ff3b 	bl	24db8 <bt_le_conn_params_valid>
    bf42:	4605      	mov	r5, r0
    bf44:	b918      	cbnz	r0, bf4e <le_param_req+0x1a>
		return false;
    bf46:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    bf48:	4628      	mov	r0, r5
    bf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    bf4e:	4b13      	ldr	r3, [pc, #76]	; (bf9c <le_param_req+0x68>)
    bf50:	681e      	ldr	r6, [r3, #0]
    bf52:	b946      	cbnz	r6, bf66 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bf54:	4e12      	ldr	r6, [pc, #72]	; (bfa0 <le_param_req+0x6c>)
    bf56:	f8df 804c 	ldr.w	r8, [pc, #76]	; bfa4 <le_param_req+0x70>
    bf5a:	4546      	cmp	r6, r8
    bf5c:	d2f4      	bcs.n	bf48 <le_param_req+0x14>
		if (!cb->le_param_req) {
    bf5e:	68b3      	ldr	r3, [r6, #8]
    bf60:	b983      	cbnz	r3, bf84 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bf62:	361c      	adds	r6, #28
    bf64:	e7f9      	b.n	bf5a <le_param_req+0x26>
		if (!cb->le_param_req) {
    bf66:	68b3      	ldr	r3, [r6, #8]
    bf68:	b90b      	cbnz	r3, bf6e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    bf6a:	69b6      	ldr	r6, [r6, #24]
    bf6c:	e7f1      	b.n	bf52 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    bf6e:	4621      	mov	r1, r4
    bf70:	4638      	mov	r0, r7
    bf72:	4798      	blx	r3
    bf74:	2800      	cmp	r0, #0
    bf76:	d0e6      	beq.n	bf46 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    bf78:	4620      	mov	r0, r4
    bf7a:	f018 ff1d 	bl	24db8 <bt_le_conn_params_valid>
    bf7e:	2800      	cmp	r0, #0
    bf80:	d1f3      	bne.n	bf6a <le_param_req+0x36>
    bf82:	e7e0      	b.n	bf46 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    bf84:	4621      	mov	r1, r4
    bf86:	4638      	mov	r0, r7
    bf88:	4798      	blx	r3
    bf8a:	2800      	cmp	r0, #0
    bf8c:	d0db      	beq.n	bf46 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    bf8e:	4620      	mov	r0, r4
    bf90:	f018 ff12 	bl	24db8 <bt_le_conn_params_valid>
    bf94:	2800      	cmp	r0, #0
    bf96:	d1e4      	bne.n	bf62 <le_param_req+0x2e>
    bf98:	e7d5      	b.n	bf46 <le_param_req+0x12>
    bf9a:	bf00      	nop
    bf9c:	200020ec 	.word	0x200020ec
    bfa0:	00028854 	.word	0x00028854
    bfa4:	00028870 	.word	0x00028870

0000bfa8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    bfac:	78c3      	ldrb	r3, [r0, #3]
{
    bfae:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    bfb0:	b973      	cbnz	r3, bfd0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    bfb2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    bfb6:	4b10      	ldr	r3, [pc, #64]	; (bff8 <bt_conn_identity_resolved+0x50>)
    bfb8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    bfba:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    bfbe:	b955      	cbnz	r5, bfd6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bfc0:	4d0e      	ldr	r5, [pc, #56]	; (bffc <bt_conn_identity_resolved+0x54>)
    bfc2:	4f0f      	ldr	r7, [pc, #60]	; (c000 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    bfc4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bfc8:	42bd      	cmp	r5, r7
    bfca:	d30c      	bcc.n	bfe6 <bt_conn_identity_resolved+0x3e>
		}
	}
}
    bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    bfd0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    bfd4:	e7ef      	b.n	bfb6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    bfd6:	692b      	ldr	r3, [r5, #16]
    bfd8:	b11b      	cbz	r3, bfe2 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    bfda:	463a      	mov	r2, r7
    bfdc:	4631      	mov	r1, r6
    bfde:	4620      	mov	r0, r4
    bfe0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    bfe2:	69ad      	ldr	r5, [r5, #24]
    bfe4:	e7eb      	b.n	bfbe <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    bfe6:	692b      	ldr	r3, [r5, #16]
    bfe8:	b11b      	cbz	r3, bff2 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    bfea:	4642      	mov	r2, r8
    bfec:	4631      	mov	r1, r6
    bfee:	4620      	mov	r0, r4
    bff0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bff2:	351c      	adds	r5, #28
    bff4:	e7e8      	b.n	bfc8 <bt_conn_identity_resolved+0x20>
    bff6:	bf00      	nop
    bff8:	200020ec 	.word	0x200020ec
    bffc:	00028854 	.word	0x00028854
    c000:	00028870 	.word	0x00028870

0000c004 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    c006:	7a43      	ldrb	r3, [r0, #9]
    c008:	7283      	strb	r3, [r0, #10]
{
    c00a:	4604      	mov	r4, r0
    c00c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    c00e:	f019 f9c4 	bl	2539a <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    c012:	4b0c      	ldr	r3, [pc, #48]	; (c044 <bt_conn_security_changed+0x40>)
    c014:	681d      	ldr	r5, [r3, #0]
    c016:	b925      	cbnz	r5, c022 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    c018:	4d0b      	ldr	r5, [pc, #44]	; (c048 <bt_conn_security_changed+0x44>)
    c01a:	4f0c      	ldr	r7, [pc, #48]	; (c04c <bt_conn_security_changed+0x48>)
    c01c:	42bd      	cmp	r5, r7
    c01e:	d308      	bcc.n	c032 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    c020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    c022:	696b      	ldr	r3, [r5, #20]
    c024:	b11b      	cbz	r3, c02e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    c026:	7a61      	ldrb	r1, [r4, #9]
    c028:	4632      	mov	r2, r6
    c02a:	4620      	mov	r0, r4
    c02c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    c02e:	69ad      	ldr	r5, [r5, #24]
    c030:	e7f1      	b.n	c016 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    c032:	696b      	ldr	r3, [r5, #20]
    c034:	b11b      	cbz	r3, c03e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    c036:	7a61      	ldrb	r1, [r4, #9]
    c038:	4632      	mov	r2, r6
    c03a:	4620      	mov	r0, r4
    c03c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    c03e:	351c      	adds	r5, #28
    c040:	e7ec      	b.n	c01c <bt_conn_security_changed+0x18>
    c042:	bf00      	nop
    c044:	200020ec 	.word	0x200020ec
    c048:	00028854 	.word	0x00028854
    c04c:	00028870 	.word	0x00028870

0000c050 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    c050:	b570      	push	{r4, r5, r6, lr}
    c052:	4606      	mov	r6, r0
    c054:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    c056:	480a      	ldr	r0, [pc, #40]	; (c080 <bt_conn_add_le+0x30>)
    c058:	2101      	movs	r1, #1
    c05a:	f7ff fc71 	bl	b940 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    c05e:	4604      	mov	r4, r0
    c060:	b160      	cbz	r0, c07c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    c062:	7206      	strb	r6, [r0, #8]
    c064:	2207      	movs	r2, #7
    c066:	4629      	mov	r1, r5
    c068:	3088      	adds	r0, #136	; 0x88
    c06a:	f018 fc98 	bl	2499e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    c06e:	2301      	movs	r3, #1
    c070:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    c072:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    c074:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    c076:	4b03      	ldr	r3, [pc, #12]	; (c084 <bt_conn_add_le+0x34>)
    c078:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    c07c:	4620      	mov	r0, r4
    c07e:	bd70      	pop	{r4, r5, r6, pc}
    c080:	20001428 	.word	0x20001428
    c084:	00280018 	.word	0x00280018

0000c088 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    c088:	b570      	push	{r4, r5, r6, lr}
    c08a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    c08c:	480d      	ldr	r0, [pc, #52]	; (c0c4 <bt_conn_lookup_addr_le+0x3c>)
{
    c08e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    c090:	f019 f801 	bl	25096 <bt_conn_ref>

		if (!conn) {
    c094:	4604      	mov	r4, r0
    c096:	b130      	cbz	r0, c0a6 <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    c098:	7883      	ldrb	r3, [r0, #2]
    c09a:	2b01      	cmp	r3, #1
    c09c:	d005      	beq.n	c0aa <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    c09e:	30b8      	adds	r0, #184	; 0xb8
    c0a0:	f018 ffa0 	bl	24fe4 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    c0a4:	2400      	movs	r4, #0
}
    c0a6:	4620      	mov	r0, r4
    c0a8:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    c0aa:	4629      	mov	r1, r5
    c0ac:	4632      	mov	r2, r6
    c0ae:	f019 f8a6 	bl	251fe <bt_conn_is_peer_addr_le>
    c0b2:	4601      	mov	r1, r0
    c0b4:	2800      	cmp	r0, #0
    c0b6:	d1f6      	bne.n	c0a6 <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    c0b8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c0bc:	f018 ff92 	bl	24fe4 <atomic_dec.isra.0>
	return NULL;
    c0c0:	460c      	mov	r4, r1
			continue;
    c0c2:	e7f0      	b.n	c0a6 <bt_conn_lookup_addr_le+0x1e>
    c0c4:	20001428 	.word	0x20001428

0000c0c8 <bt_conn_exists_le>:
{
    c0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    c0ca:	f7ff ffdd 	bl	c088 <bt_conn_lookup_addr_le>
	if (conn) {
    c0ce:	4604      	mov	r4, r0
    c0d0:	b1a8      	cbz	r0, c0fe <bt_conn_exists_le+0x36>
		BT_WARN("Found valid connection in %s state",
    c0d2:	7b43      	ldrb	r3, [r0, #13]
    c0d4:	490b      	ldr	r1, [pc, #44]	; (c104 <bt_conn_exists_le+0x3c>)
    c0d6:	2b08      	cmp	r3, #8
    c0d8:	bf96      	itet	ls
    c0da:	4a0b      	ldrls	r2, [pc, #44]	; (c108 <bt_conn_exists_le+0x40>)
    c0dc:	4b0b      	ldrhi	r3, [pc, #44]	; (c10c <bt_conn_exists_le+0x44>)
    c0de:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    c0e2:	9302      	str	r3, [sp, #8]
    c0e4:	4b0a      	ldr	r3, [pc, #40]	; (c110 <bt_conn_exists_le+0x48>)
    c0e6:	9301      	str	r3, [sp, #4]
    c0e8:	2300      	movs	r3, #0
    c0ea:	4618      	mov	r0, r3
    c0ec:	9300      	str	r3, [sp, #0]
    c0ee:	2202      	movs	r2, #2
    c0f0:	f018 ff69 	bl	24fc6 <z_log_msg2_runtime_create.constprop.0>
	old = atomic_dec(&conn->ref);
    c0f4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c0f8:	f018 ff74 	bl	24fe4 <atomic_dec.isra.0>
		return true;
    c0fc:	2001      	movs	r0, #1
}
    c0fe:	b004      	add	sp, #16
    c100:	bd10      	pop	{r4, pc}
    c102:	bf00      	nop
    c104:	000288a0 	.word	0x000288a0
    c108:	00028edc 	.word	0x00028edc
    c10c:	0002ba66 	.word	0x0002ba66
    c110:	0002badd 	.word	0x0002badd

0000c114 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c116:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    c118:	480f      	ldr	r0, [pc, #60]	; (c158 <bt_conn_lookup_state_le+0x44>)
{
    c11a:	460e      	mov	r6, r1
    c11c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    c11e:	f018 ffba 	bl	25096 <bt_conn_ref>

		if (!conn) {
    c122:	4604      	mov	r4, r0
    c124:	b1a8      	cbz	r0, c152 <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    c126:	7883      	ldrb	r3, [r0, #2]
    c128:	2b01      	cmp	r3, #1
    c12a:	d005      	beq.n	c138 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    c12c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c130:	f018 ff58 	bl	24fe4 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    c134:	2400      	movs	r4, #0
			continue;
    c136:	e00c      	b.n	c152 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    c138:	b12e      	cbz	r6, c146 <bt_conn_lookup_state_le+0x32>
    c13a:	4632      	mov	r2, r6
    c13c:	4629      	mov	r1, r5
    c13e:	f019 f85e 	bl	251fe <bt_conn_is_peer_addr_le>
    c142:	2800      	cmp	r0, #0
    c144:	d0f2      	beq.n	c12c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    c146:	7b63      	ldrb	r3, [r4, #13]
    c148:	42bb      	cmp	r3, r7
    c14a:	d1ef      	bne.n	c12c <bt_conn_lookup_state_le+0x18>
    c14c:	7a23      	ldrb	r3, [r4, #8]
    c14e:	42ab      	cmp	r3, r5
    c150:	d1ec      	bne.n	c12c <bt_conn_lookup_state_le+0x18>
}
    c152:	4620      	mov	r0, r4
    c154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c156:	bf00      	nop
    c158:	20001428 	.word	0x20001428

0000c15c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    c15c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c160:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c162:	4851      	ldr	r0, [pc, #324]	; (c2a8 <bt_conn_le_create+0x14c>)
    c164:	f018 ff26 	bl	24fb4 <atomic_get>
    c168:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c16a:	0781      	lsls	r1, r0, #30
{
    c16c:	4615      	mov	r5, r2
    c16e:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c170:	d405      	bmi.n	c17e <bt_conn_le_create+0x22>
		return -EAGAIN;
    c172:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    c176:	4628      	mov	r0, r5
    c178:	b002      	add	sp, #8
    c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
    c17e:	4610      	mov	r0, r2
    c180:	f018 fe1a 	bl	24db8 <bt_le_conn_params_valid>
    c184:	b910      	cbnz	r0, c18c <bt_conn_le_create+0x30>
		return -EINVAL;
    c186:	f06f 0515 	mvn.w	r5, #21
    c18a:	e7f4      	b.n	c176 <bt_conn_le_create+0x1a>
    c18c:	4846      	ldr	r0, [pc, #280]	; (c2a8 <bt_conn_le_create+0x14c>)
    c18e:	f018 ff11 	bl	24fb4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    c192:	0642      	lsls	r2, r0, #25
    c194:	d4ed      	bmi.n	c172 <bt_conn_le_create+0x16>
    c196:	4844      	ldr	r0, [pc, #272]	; (c2a8 <bt_conn_le_create+0x14c>)
    c198:	f018 ff0c 	bl	24fb4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    c19c:	0503      	lsls	r3, r0, #20
    c19e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    c1a2:	d47a      	bmi.n	c29a <bt_conn_le_create+0x13e>
	if (!bt_id_scan_random_addr_check()) {
    c1a4:	f018 fed4 	bl	24f50 <bt_id_scan_random_addr_check>
    c1a8:	2800      	cmp	r0, #0
    c1aa:	d0ec      	beq.n	c186 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    c1ac:	4621      	mov	r1, r4
    c1ae:	4640      	mov	r0, r8
    c1b0:	f7ff ff8a 	bl	c0c8 <bt_conn_exists_le>
    c1b4:	2800      	cmp	r0, #0
    c1b6:	d1e6      	bne.n	c186 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    c1b8:	7823      	ldrb	r3, [r4, #0]
    c1ba:	3b02      	subs	r3, #2
    c1bc:	2b01      	cmp	r3, #1
    c1be:	d84a      	bhi.n	c256 <bt_conn_le_create+0xfa>
    c1c0:	2207      	movs	r2, #7
    c1c2:	4621      	mov	r1, r4
    c1c4:	4668      	mov	r0, sp
    c1c6:	f018 fbea 	bl	2499e <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    c1ca:	f89d 3000 	ldrb.w	r3, [sp]
    c1ce:	3b02      	subs	r3, #2
    c1d0:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    c1d4:	4669      	mov	r1, sp
    c1d6:	2000      	movs	r0, #0
    c1d8:	f7ff ff3a 	bl	c050 <bt_conn_add_le>
	if (!conn) {
    c1dc:	4604      	mov	r4, r0
    c1de:	2800      	cmp	r0, #0
    c1e0:	d05e      	beq.n	c2a0 <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
    c1e2:	882b      	ldrh	r3, [r5, #0]
    c1e4:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    c1e8:	886b      	ldrh	r3, [r5, #2]
    c1ea:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    c1ee:	88ab      	ldrh	r3, [r5, #4]
    c1f0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    c1f4:	88eb      	ldrh	r3, [r5, #6]
    c1f6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    c1fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    c1fe:	4d2b      	ldr	r5, [pc, #172]	; (c2ac <bt_conn_le_create+0x150>)
    c200:	f105 0c08 	add.w	ip, r5, #8
    c204:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    c208:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    c20a:	2b00      	cmp	r3, #0
    c20c:	bf08      	it	eq
    c20e:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    c212:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    c214:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    c216:	b903      	cbnz	r3, c21a <bt_conn_le_create+0xbe>
    c218:	89ab      	ldrh	r3, [r5, #12]
    c21a:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
    c21c:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
    c21e:	b903      	cbnz	r3, c222 <bt_conn_le_create+0xc6>
    c220:	89eb      	ldrh	r3, [r5, #14]
    c222:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    c224:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    c228:	b11b      	cbz	r3, c232 <bt_conn_le_create+0xd6>
    c22a:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    c22e:	429a      	cmp	r2, r3
    c230:	d91a      	bls.n	c268 <bt_conn_le_create+0x10c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    c232:	2102      	movs	r1, #2
    c234:	4620      	mov	r0, r4
    c236:	f7ff fcf3 	bl	bc20 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    c23a:	2001      	movs	r0, #1
    c23c:	f7fe ff8c 	bl	b158 <bt_le_scan_update>
		if (err) {
    c240:	4605      	mov	r5, r0
    c242:	b340      	cbz	r0, c296 <bt_conn_le_create+0x13a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c244:	4620      	mov	r0, r4
    c246:	2100      	movs	r1, #0
    c248:	f7ff fcea 	bl	bc20 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    c24c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c250:	f018 fec8 	bl	24fe4 <atomic_dec.isra.0>
			return err;
    c254:	e78f      	b.n	c176 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    c256:	4621      	mov	r1, r4
    c258:	f018 fe60 	bl	24f1c <bt_lookup_id_addr>
    c25c:	2207      	movs	r2, #7
    c25e:	4601      	mov	r1, r0
    c260:	4668      	mov	r0, sp
    c262:	f018 fb9c 	bl	2499e <memcpy>
}
    c266:	e7b5      	b.n	c1d4 <bt_conn_le_create+0x78>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    c268:	2106      	movs	r1, #6
    c26a:	4620      	mov	r0, r4
    c26c:	f7ff fcd8 	bl	bc20 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    c270:	4620      	mov	r0, r4
    c272:	f018 fd06 	bl	24c82 <bt_le_create_conn>
	if (err) {
    c276:	4605      	mov	r5, r0
    c278:	b168      	cbz	r0, c296 <bt_conn_le_create+0x13a>
		conn->err = 0;
    c27a:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c27c:	4620      	mov	r0, r4
		conn->err = 0;
    c27e:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c280:	4631      	mov	r1, r6
    c282:	f7ff fccd 	bl	bc20 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    c286:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c28a:	f018 feab 	bl	24fe4 <atomic_dec.isra.0>
		bt_le_scan_update(false);
    c28e:	4630      	mov	r0, r6
    c290:	f7fe ff62 	bl	b158 <bt_le_scan_update>
		return err;
    c294:	e76f      	b.n	c176 <bt_conn_le_create+0x1a>
	*ret_conn = conn;
    c296:	603c      	str	r4, [r7, #0]
	return 0;
    c298:	e76d      	b.n	c176 <bt_conn_le_create+0x1a>
		return -EALREADY;
    c29a:	f06f 0577 	mvn.w	r5, #119	; 0x77
    c29e:	e76a      	b.n	c176 <bt_conn_le_create+0x1a>
		return -ENOMEM;
    c2a0:	f06f 050b 	mvn.w	r5, #11
    c2a4:	e767      	b.n	c176 <bt_conn_le_create+0x1a>
    c2a6:	bf00      	nop
    c2a8:	200000cc 	.word	0x200000cc
    c2ac:	20000000 	.word	0x20000000

0000c2b0 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    c2b0:	b570      	push	{r4, r5, r6, lr}
    c2b2:	4606      	mov	r6, r0
    c2b4:	4835      	ldr	r0, [pc, #212]	; (c38c <bt_le_set_auto_conn+0xdc>)
    c2b6:	f018 fe7d 	bl	24fb4 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c2ba:	0780      	lsls	r0, r0, #30
{
    c2bc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c2be:	d55e      	bpl.n	c37e <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    c2c0:	b929      	cbnz	r1, c2ce <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    c2c2:	f018 fe45 	bl	24f50 <bt_id_scan_random_addr_check>
    c2c6:	b940      	cbnz	r0, c2da <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    c2c8:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    c2cc:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    c2ce:	4608      	mov	r0, r1
    c2d0:	f018 fd72 	bl	24db8 <bt_le_conn_params_valid>
    c2d4:	2800      	cmp	r0, #0
    c2d6:	d1f4      	bne.n	c2c2 <bt_le_set_auto_conn+0x12>
    c2d8:	e7f6      	b.n	c2c8 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    c2da:	4631      	mov	r1, r6
    c2dc:	2000      	movs	r0, #0
    c2de:	f7ff fed3 	bl	c088 <bt_conn_lookup_addr_le>
	if (!conn) {
    c2e2:	4604      	mov	r4, r0
    c2e4:	b928      	cbnz	r0, c2f2 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    c2e6:	4631      	mov	r1, r6
    c2e8:	f7ff feb2 	bl	c050 <bt_conn_add_le>
		if (!conn) {
    c2ec:	4604      	mov	r4, r0
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d048      	beq.n	c384 <bt_le_set_auto_conn+0xd4>
		if (!atomic_test_and_set_bit(conn->flags,
    c2f2:	1d20      	adds	r0, r4, #4
	old = atomic_dec(&conn->ref);
    c2f4:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
    c2f8:	b385      	cbz	r5, c35c <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    c2fa:	882b      	ldrh	r3, [r5, #0]
    c2fc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    c300:	886b      	ldrh	r3, [r5, #2]
    c302:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    c306:	88ab      	ldrh	r3, [r5, #4]
    c308:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    c30c:	88eb      	ldrh	r3, [r5, #6]
    c30e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    c312:	f3bf 8f5b 	dmb	ish
    c316:	e850 3f00 	ldrex	r3, [r0]
    c31a:	f043 0201 	orr.w	r2, r3, #1
    c31e:	e840 2100 	strex	r1, r2, [r0]
    c322:	2900      	cmp	r1, #0
    c324:	d1f7      	bne.n	c316 <bt_le_set_auto_conn+0x66>
    c326:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    c32a:	07d9      	lsls	r1, r3, #31
    c32c:	d402      	bmi.n	c334 <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
    c32e:	4620      	mov	r0, r4
    c330:	f018 feb1 	bl	25096 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    c334:	7b63      	ldrb	r3, [r4, #13]
    c336:	b963      	cbnz	r3, c352 <bt_le_set_auto_conn+0xa2>
    c338:	4814      	ldr	r0, [pc, #80]	; (c38c <bt_le_set_auto_conn+0xdc>)
    c33a:	f018 fe3b 	bl	24fb4 <atomic_get>
    c33e:	0783      	lsls	r3, r0, #30
    c340:	d507      	bpl.n	c352 <bt_le_set_auto_conn+0xa2>
		if (param) {
    c342:	b11d      	cbz	r5, c34c <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    c344:	2102      	movs	r1, #2
    c346:	4620      	mov	r0, r4
    c348:	f7ff fc6a 	bl	bc20 <bt_conn_set_state>
		bt_le_scan_update(false);
    c34c:	2000      	movs	r0, #0
    c34e:	f7fe ff03 	bl	b158 <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
    c352:	4630      	mov	r0, r6
    c354:	f018 fe46 	bl	24fe4 <atomic_dec.isra.0>
	return 0;
    c358:	2000      	movs	r0, #0
    c35a:	e7b7      	b.n	c2cc <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c35c:	f06f 0101 	mvn.w	r1, #1
    c360:	f018 fe19 	bl	24f96 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    c364:	07c2      	lsls	r2, r0, #31
    c366:	d5e5      	bpl.n	c334 <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
    c368:	4630      	mov	r0, r6
    c36a:	f018 fe3b 	bl	24fe4 <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    c36e:	7b63      	ldrb	r3, [r4, #13]
    c370:	2b02      	cmp	r3, #2
    c372:	d1df      	bne.n	c334 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c374:	4629      	mov	r1, r5
    c376:	4620      	mov	r0, r4
    c378:	f7ff fc52 	bl	bc20 <bt_conn_set_state>
    c37c:	e7da      	b.n	c334 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    c37e:	f06f 000a 	mvn.w	r0, #10
    c382:	e7a3      	b.n	c2cc <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    c384:	f06f 000b 	mvn.w	r0, #11
    c388:	e7a0      	b.n	c2cc <bt_le_set_auto_conn+0x1c>
    c38a:	bf00      	nop
    c38c:	200000cc 	.word	0x200000cc

0000c390 <send_conn_le_param_update>:
{
    c390:	b538      	push	{r3, r4, r5, lr}
    c392:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    c394:	4608      	mov	r0, r1
{
    c396:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    c398:	f018 fd0e 	bl	24db8 <bt_le_conn_params_valid>
    c39c:	b338      	cbz	r0, c3ee <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    c39e:	4b15      	ldr	r3, [pc, #84]	; (c3f4 <send_conn_le_param_update+0x64>)
    c3a0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    c3a4:	0799      	lsls	r1, r3, #30
    c3a6:	d407      	bmi.n	c3b8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    c3a8:	78e3      	ldrb	r3, [r4, #3]
    c3aa:	b173      	cbz	r3, c3ca <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    c3ac:	4629      	mov	r1, r5
    c3ae:	4620      	mov	r0, r4
}
    c3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    c3b4:	f000 bb08 	b.w	c9c8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    c3b8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    c3bc:	079a      	lsls	r2, r3, #30
    c3be:	d5f3      	bpl.n	c3a8 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c3c0:	1d20      	adds	r0, r4, #4
    c3c2:	f018 fdf7 	bl	24fb4 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    c3c6:	0543      	lsls	r3, r0, #21
    c3c8:	d4ee      	bmi.n	c3a8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    c3ca:	4629      	mov	r1, r5
    c3cc:	4620      	mov	r0, r4
    c3ce:	f018 ff71 	bl	252b4 <bt_conn_le_conn_update>
		if (rc == 0) {
    c3d2:	b958      	cbnz	r0, c3ec <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    c3d4:	882b      	ldrh	r3, [r5, #0]
    c3d6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    c3da:	886b      	ldrh	r3, [r5, #2]
    c3dc:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    c3e0:	88ab      	ldrh	r3, [r5, #4]
    c3e2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    c3e6:	88eb      	ldrh	r3, [r5, #6]
    c3e8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    c3ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c3ee:	f06f 0015 	mvn.w	r0, #21
    c3f2:	e7fb      	b.n	c3ec <send_conn_le_param_update+0x5c>
    c3f4:	20000000 	.word	0x20000000

0000c3f8 <deferred_work>:
{
    c3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    c3fa:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    c3fe:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    c400:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    c404:	bb03      	cbnz	r3, c448 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
    c406:	4628      	mov	r0, r5
    c408:	f018 ffb6 	bl	25378 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    c40c:	4b2a      	ldr	r3, [pc, #168]	; (c4b8 <deferred_work+0xc0>)
    c40e:	681e      	ldr	r6, [r3, #0]
    c410:	b956      	cbnz	r6, c428 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    c412:	4e2a      	ldr	r6, [pc, #168]	; (c4bc <deferred_work+0xc4>)
    c414:	4f2a      	ldr	r7, [pc, #168]	; (c4c0 <deferred_work+0xc8>)
    c416:	42be      	cmp	r6, r7
    c418:	d30e      	bcc.n	c438 <deferred_work+0x40>
	old = atomic_dec(&conn->ref);
    c41a:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    c41e:	b003      	add	sp, #12
    c420:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
    c424:	f018 bdde 	b.w	24fe4 <atomic_dec.isra.0>
		if (cb->disconnected) {
    c428:	6873      	ldr	r3, [r6, #4]
    c42a:	b11b      	cbz	r3, c434 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
    c42c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    c430:	4628      	mov	r0, r5
    c432:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    c434:	69b6      	ldr	r6, [r6, #24]
    c436:	e7eb      	b.n	c410 <deferred_work+0x18>
		if (cb->disconnected) {
    c438:	6873      	ldr	r3, [r6, #4]
    c43a:	b11b      	cbz	r3, c444 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
    c43c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    c440:	4628      	mov	r0, r5
    c442:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    c444:	361c      	adds	r6, #28
    c446:	e7e6      	b.n	c416 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    c448:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    c44c:	2b01      	cmp	r3, #1
    c44e:	d130      	bne.n	c4b2 <deferred_work+0xba>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c450:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    c454:	b923      	cbnz	r3, c460 <deferred_work+0x68>
}
    c456:	b003      	add	sp, #12
    c458:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    c45c:	f7fd bd90 	b.w	9f80 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    c460:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c464:	f46f 7100 	mvn.w	r1, #512	; 0x200
    c468:	4630      	mov	r0, r6
    c46a:	f018 fd94 	bl	24f96 <atomic_and>
    c46e:	0583      	lsls	r3, r0, #22
    c470:	d513      	bpl.n	c49a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    c472:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c476:	f8ad 3000 	strh.w	r3, [sp]
    c47a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    c47e:	f8ad 3002 	strh.w	r3, [sp, #2]
    c482:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    c486:	f8ad 3004 	strh.w	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    c48a:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    c48c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c490:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    c494:	4628      	mov	r0, r5
    c496:	f7ff ff7b 	bl	c390 <send_conn_le_param_update>
    c49a:	f3bf 8f5b 	dmb	ish
    c49e:	e856 3f00 	ldrex	r3, [r6]
    c4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c4a6:	e846 3200 	strex	r2, r3, [r6]
    c4aa:	2a00      	cmp	r2, #0
    c4ac:	d1f7      	bne.n	c49e <deferred_work+0xa6>
    c4ae:	f3bf 8f5b 	dmb	ish
}
    c4b2:	b003      	add	sp, #12
    c4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4b6:	bf00      	nop
    c4b8:	200020ec 	.word	0x200020ec
    c4bc:	00028854 	.word	0x00028854
    c4c0:	00028870 	.word	0x00028870

0000c4c4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    c4c4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    c4c6:	4801      	ldr	r0, [pc, #4]	; (c4cc <bt_conn_create_frag_timeout+0x8>)
    c4c8:	f7ff bcce 	b.w	be68 <bt_conn_create_pdu_timeout>
    c4cc:	20000ad4 	.word	0x20000ad4

0000c4d0 <create_frag>:
{
    c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4d4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    c4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c4de:	2000      	movs	r0, #0
{
    c4e0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    c4e2:	f7ff ffef 	bl	c4c4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    c4e6:	7b73      	ldrb	r3, [r6, #13]
    c4e8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    c4ea:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    c4ec:	f04f 0600 	mov.w	r6, #0
    c4f0:	d005      	beq.n	c4fe <create_frag+0x2e>
		net_buf_unref(frag);
    c4f2:	f010 fd39 	bl	1cf68 <net_buf_unref>
		return NULL;
    c4f6:	4635      	mov	r5, r6
}
    c4f8:	4628      	mov	r0, r5
    c4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    c4fe:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    c500:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    c504:	4e0c      	ldr	r6, [pc, #48]	; (c538 <create_frag+0x68>)
    c506:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    c508:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    c50c:	f01a fe19 	bl	27142 <net_buf_simple_tailroom>
    c510:	4580      	cmp	r8, r0
    c512:	d20c      	bcs.n	c52e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    c514:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c518:	f854 1f08 	ldr.w	r1, [r4, #8]!
    c51c:	4632      	mov	r2, r6
    c51e:	4638      	mov	r0, r7
    c520:	f01a fdc8 	bl	270b4 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    c524:	4631      	mov	r1, r6
    c526:	4620      	mov	r0, r4
    c528:	f01a fde7 	bl	270fa <net_buf_simple_pull>
    c52c:	e7e4      	b.n	c4f8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    c52e:	4638      	mov	r0, r7
    c530:	f01a fe07 	bl	27142 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    c534:	b286      	uxth	r6, r0
    c536:	e7ef      	b.n	c518 <create_frag+0x48>
    c538:	20000000 	.word	0x20000000

0000c53c <bt_conn_process_tx>:
{
    c53c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    c53e:	7b43      	ldrb	r3, [r0, #13]
{
    c540:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    c542:	b95b      	cbnz	r3, c55c <CONFIG_USB_DEVICE_VID+0x9>
    c544:	f06f 0140 	mvn.w	r1, #64	; 0x40
    c548:	3004      	adds	r0, #4
    c54a:	f018 fd24 	bl	24f96 <atomic_and>
    c54e:	0643      	lsls	r3, r0, #25
    c550:	d504      	bpl.n	c55c <CONFIG_USB_DEVICE_VID+0x9>
		conn_cleanup(conn);
    c552:	4620      	mov	r0, r4
}
    c554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    c558:	f018 bd7f 	b.w	2505a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    c55c:	2200      	movs	r2, #0
    c55e:	2300      	movs	r3, #0
    c560:	f104 0038 	add.w	r0, r4, #56	; 0x38
    c564:	f01a fd3d 	bl	26fe2 <net_buf_get>
	BT_ASSERT(buf);
    c568:	4605      	mov	r5, r0
    c56a:	b960      	cbnz	r0, c586 <CONFIG_USB_DEVICE_VID+0x33>
    c56c:	4a1f      	ldr	r2, [pc, #124]	; (c5ec <CONFIG_USB_DEVICE_VID+0x99>)
    c56e:	4920      	ldr	r1, [pc, #128]	; (c5f0 <CONFIG_USB_DEVICE_VID+0x9d>)
    c570:	4820      	ldr	r0, [pc, #128]	; (c5f4 <CONFIG_USB_DEVICE_VID+0xa1>)
    c572:	f240 23e7 	movw	r3, #743	; 0x2e7
    c576:	f016 f8c5 	bl	22704 <printk>
    c57a:	4040      	eors	r0, r0
    c57c:	f380 8811 	msr	BASEPRI, r0
    c580:	f04f 0003 	mov.w	r0, #3
    c584:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    c586:	4e1c      	ldr	r6, [pc, #112]	; (c5f8 <CONFIG_USB_DEVICE_VID+0xa5>)
	if (buf->len <= conn_mtu(conn)) {
    c588:	89aa      	ldrh	r2, [r5, #12]
    c58a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    c58e:	429a      	cmp	r2, r3
    c590:	d807      	bhi.n	c5a2 <CONFIG_USB_DEVICE_VID+0x4f>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    c592:	2300      	movs	r3, #0
    c594:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    c596:	4629      	mov	r1, r5
    c598:	4620      	mov	r0, r4
    c59a:	f7ff f933 	bl	b804 <send_frag>
	if (!send_buf(conn, buf)) {
    c59e:	b130      	cbz	r0, c5ae <CONFIG_USB_DEVICE_VID+0x5b>
}
    c5a0:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    c5a2:	4629      	mov	r1, r5
    c5a4:	4620      	mov	r0, r4
    c5a6:	f7ff ff93 	bl	c4d0 <create_frag>
	if (!frag) {
    c5aa:	4601      	mov	r1, r0
    c5ac:	b920      	cbnz	r0, c5b8 <CONFIG_USB_DEVICE_VID+0x65>
		net_buf_unref(buf);
    c5ae:	4628      	mov	r0, r5
}
    c5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    c5b4:	f010 bcd8 	b.w	1cf68 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    c5b8:	2301      	movs	r3, #1
    c5ba:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    c5bc:	4620      	mov	r0, r4
    c5be:	f7ff f921 	bl	b804 <send_frag>
    c5c2:	2800      	cmp	r0, #0
    c5c4:	d0f3      	beq.n	c5ae <CONFIG_USB_DEVICE_VID+0x5b>
	while (buf->len > conn_mtu(conn)) {
    c5c6:	89aa      	ldrh	r2, [r5, #12]
    c5c8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    c5cc:	429a      	cmp	r2, r3
    c5ce:	d802      	bhi.n	c5d6 <CONFIG_USB_DEVICE_VID+0x83>
	return send_frag(conn, buf, FRAG_END, false);
    c5d0:	2300      	movs	r3, #0
    c5d2:	2203      	movs	r2, #3
    c5d4:	e7df      	b.n	c596 <CONFIG_USB_DEVICE_VID+0x43>
		frag = create_frag(conn, buf);
    c5d6:	4629      	mov	r1, r5
    c5d8:	4620      	mov	r0, r4
    c5da:	f7ff ff79 	bl	c4d0 <create_frag>
		if (!frag) {
    c5de:	4601      	mov	r1, r0
    c5e0:	2800      	cmp	r0, #0
    c5e2:	d0e4      	beq.n	c5ae <CONFIG_USB_DEVICE_VID+0x5b>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    c5e4:	2301      	movs	r3, #1
    c5e6:	461a      	mov	r2, r3
    c5e8:	e7e8      	b.n	c5bc <CONFIG_USB_DEVICE_VID+0x69>
    c5ea:	bf00      	nop
    c5ec:	0002bb00 	.word	0x0002bb00
    c5f0:	0002b0a6 	.word	0x0002b0a6
    c5f4:	0002b225 	.word	0x0002b225
    c5f8:	20000000 	.word	0x20000000

0000c5fc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    c5fc:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    c5fe:	4914      	ldr	r1, [pc, #80]	; (c650 <bt_conn_init+0x54>)
    c600:	4814      	ldr	r0, [pc, #80]	; (c654 <bt_conn_init+0x58>)
    c602:	f01b fb69 	bl	27cd8 <k_queue_append>
    c606:	4914      	ldr	r1, [pc, #80]	; (c658 <bt_conn_init+0x5c>)
    c608:	4812      	ldr	r0, [pc, #72]	; (c654 <bt_conn_init+0x58>)
    c60a:	f01b fb65 	bl	27cd8 <k_queue_append>
    c60e:	4913      	ldr	r1, [pc, #76]	; (c65c <bt_conn_init+0x60>)
    c610:	4810      	ldr	r0, [pc, #64]	; (c654 <bt_conn_init+0x58>)
    c612:	f01b fb61 	bl	27cd8 <k_queue_append>
	}

	bt_att_init();
    c616:	f019 fa69 	bl	25aec <bt_att_init>

	err = bt_smp_init();
    c61a:	f004 fc57 	bl	10ecc <bt_smp_init>
	if (err) {
    c61e:	4605      	mov	r5, r0
    c620:	b9a0      	cbnz	r0, c64c <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    c622:	f018 ff1f 	bl	25464 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    c626:	480e      	ldr	r0, [pc, #56]	; (c660 <bt_conn_init+0x64>)
    c628:	f018 fd35 	bl	25096 <bt_conn_ref>

			if (!conn) {
    c62c:	4604      	mov	r4, r0
    c62e:	b168      	cbz	r0, c64c <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c630:	3004      	adds	r0, #4
    c632:	f018 fcbf 	bl	24fb4 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    c636:	07c3      	lsls	r3, r0, #31
    c638:	d504      	bpl.n	c644 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    c63a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    c63c:	2102      	movs	r1, #2
    c63e:	4620      	mov	r0, r4
    c640:	f7ff faee 	bl	bc20 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    c644:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c648:	f018 fccc 	bl	24fe4 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    c64c:	4628      	mov	r0, r5
    c64e:	bd38      	pop	{r3, r4, r5, pc}
    c650:	200020f0 	.word	0x200020f0
    c654:	20000a34 	.word	0x20000a34
    c658:	20002100 	.word	0x20002100
    c65c:	20002110 	.word	0x20002110
    c660:	20001428 	.word	0x20001428

0000c664 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    c664:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
    c666:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    c668:	b089      	sub	sp, #36	; 0x24
    c66a:	4605      	mov	r5, r0
    c66c:	460f      	mov	r7, r1
    c66e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    c670:	2104      	movs	r1, #4
    c672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c676:	2000      	movs	r0, #0
    c678:	f7ff fbf6 	bl	be68 <bt_conn_create_pdu_timeout>
	if (!buf) {
    c67c:	4604      	mov	r4, r0
    c67e:	b970      	cbnz	r0, c69e <l2cap_create_le_sig_pdu.constprop.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    c680:	4b0b      	ldr	r3, [pc, #44]	; (c6b0 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    c682:	480c      	ldr	r0, [pc, #48]	; (c6b4 <l2cap_create_le_sig_pdu.constprop.0+0x50>)
    c684:	e9cd 3506 	strd	r3, r5, [sp, #24]
    c688:	aa05      	add	r2, sp, #20
    c68a:	2303      	movs	r3, #3
    c68c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c690:	9301      	str	r3, [sp, #4]
    c692:	9305      	str	r3, [sp, #20]
    c694:	f018 fe3a 	bl	2530c <z_log_msg2_static_create.constprop.0>
}
    c698:	4620      	mov	r0, r4
    c69a:	b009      	add	sp, #36	; 0x24
    c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    c69e:	2104      	movs	r1, #4
    c6a0:	3008      	adds	r0, #8
    c6a2:	f01a fd01 	bl	270a8 <net_buf_simple_add>
	hdr->code = code;
    c6a6:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    c6a8:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    c6aa:	8046      	strh	r6, [r0, #2]
	return buf;
    c6ac:	e7f4      	b.n	c698 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    c6ae:	bf00      	nop
    c6b0:	0002bb8d 	.word	0x0002bb8d
    c6b4:	00028990 	.word	0x00028990

0000c6b8 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    c6b8:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    c6ba:	4a0d      	ldr	r2, [pc, #52]	; (c6f0 <l2cap_accept+0x38>)
{
    c6bc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    c6be:	6810      	ldr	r0, [r2, #0]
{
    c6c0:	b089      	sub	sp, #36	; 0x24
		if (l2cap->chan.chan.conn) {
    c6c2:	b928      	cbnz	r0, c6d0 <l2cap_accept+0x18>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    c6c4:	4b0b      	ldr	r3, [pc, #44]	; (c6f4 <l2cap_accept+0x3c>)
    c6c6:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    c6c8:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    c6ca:	b009      	add	sp, #36	; 0x24
    c6cc:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    c6d0:	4a09      	ldr	r2, [pc, #36]	; (c6f8 <l2cap_accept+0x40>)
    c6d2:	480a      	ldr	r0, [pc, #40]	; (c6fc <l2cap_accept+0x44>)
    c6d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c6d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c6dc:	2303      	movs	r3, #3
    c6de:	aa05      	add	r2, sp, #20
    c6e0:	9301      	str	r3, [sp, #4]
    c6e2:	9305      	str	r3, [sp, #20]
    c6e4:	f018 fe12 	bl	2530c <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    c6e8:	f06f 000b 	mvn.w	r0, #11
    c6ec:	e7ed      	b.n	c6ca <l2cap_accept+0x12>
    c6ee:	bf00      	nop
    c6f0:	200014e8 	.word	0x200014e8
    c6f4:	00028f20 	.word	0x00028f20
    c6f8:	0002bbb5 	.word	0x0002bbb5
    c6fc:	00028990 	.word	0x00028990

0000c700 <l2cap_rtx_timeout>:
{
    c700:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    c702:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    c704:	4b0c      	ldr	r3, [pc, #48]	; (c738 <l2cap_rtx_timeout+0x38>)
	struct bt_conn *conn = chan->chan.conn;
    c706:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    c70a:	480c      	ldr	r0, [pc, #48]	; (c73c <l2cap_rtx_timeout+0x3c>)
{
    c70c:	b089      	sub	sp, #36	; 0x24
	BT_ERR("chan %p timeout", chan);
    c70e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    c712:	aa05      	add	r2, sp, #20
    c714:	2303      	movs	r3, #3
    c716:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c71a:	9301      	str	r3, [sp, #4]
    c71c:	9305      	str	r3, [sp, #20]
    c71e:	f018 fdf5 	bl	2530c <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
    c722:	4628      	mov	r0, r5
    c724:	4621      	mov	r1, r4
    c726:	f018 fdf4 	bl	25312 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    c72a:	4620      	mov	r0, r4
}
    c72c:	b009      	add	sp, #36	; 0x24
    c72e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    c732:	f018 be0c 	b.w	2534e <bt_l2cap_chan_del>
    c736:	bf00      	nop
    c738:	0002bbdc 	.word	0x0002bbdc
    c73c:	00028990 	.word	0x00028990

0000c740 <bt_l2cap_connected>:
{
    c740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c744:	4e29      	ldr	r6, [pc, #164]	; (c7ec <bt_l2cap_connected+0xac>)
    c746:	4f2a      	ldr	r7, [pc, #168]	; (c7f0 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c748:	f8df 80a8 	ldr.w	r8, [pc, #168]	; c7f4 <bt_l2cap_connected+0xb4>
{
    c74c:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c74e:	42be      	cmp	r6, r7
    c750:	d302      	bcc.n	c758 <bt_l2cap_connected+0x18>
}
    c752:	b003      	add	sp, #12
    c754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    c758:	6873      	ldr	r3, [r6, #4]
    c75a:	a901      	add	r1, sp, #4
    c75c:	4620      	mov	r0, r4
    c75e:	4798      	blx	r3
    c760:	2800      	cmp	r0, #0
    c762:	db3d      	blt.n	c7e0 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    c764:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    c766:	8833      	ldrh	r3, [r6, #0]
    c768:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    c76c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c770:	4641      	mov	r1, r8
    c772:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    c776:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c77a:	f01b fba4 	bl	27ec6 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c77e:	f3bf 8f5b 	dmb	ish
    c782:	f105 0368 	add.w	r3, r5, #104	; 0x68
    c786:	2200      	movs	r2, #0
    c788:	e853 1f00 	ldrex	r1, [r3]
    c78c:	e843 2000 	strex	r0, r2, [r3]
    c790:	2800      	cmp	r0, #0
    c792:	d1f9      	bne.n	c788 <bt_l2cap_connected+0x48>
    c794:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    c798:	60aa      	str	r2, [r5, #8]
	return list->tail;
    c79a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    c79c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    c7a0:	bb02      	cbnz	r2, c7e4 <bt_l2cap_connected+0xa4>
	list->head = node;
    c7a2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    c7a6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    c7a8:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    c7aa:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    c7ac:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	b103      	cbz	r3, c7b6 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    c7b4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	f3bf 8f5b 	dmb	ish
    c7bc:	3368      	adds	r3, #104	; 0x68
    c7be:	e853 2f00 	ldrex	r2, [r3]
    c7c2:	f042 0201 	orr.w	r2, r2, #1
    c7c6:	e843 2100 	strex	r1, r2, [r3]
    c7ca:	2900      	cmp	r1, #0
    c7cc:	d1f7      	bne.n	c7be <bt_l2cap_connected+0x7e>
    c7ce:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    c7d2:	9801      	ldr	r0, [sp, #4]
    c7d4:	6843      	ldr	r3, [r0, #4]
    c7d6:	699b      	ldr	r3, [r3, #24]
    c7d8:	b113      	cbz	r3, c7e0 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    c7da:	f100 0168 	add.w	r1, r0, #104	; 0x68
    c7de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c7e0:	360c      	adds	r6, #12
    c7e2:	e7b4      	b.n	c74e <bt_l2cap_connected+0xe>
	parent->next = child;
    c7e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c7e6:	6563      	str	r3, [r4, #84]	; 0x54
}
    c7e8:	e7dd      	b.n	c7a6 <bt_l2cap_connected+0x66>
    c7ea:	bf00      	nop
    c7ec:	00028830 	.word	0x00028830
    c7f0:	00028854 	.word	0x00028854
    c7f4:	0000c701 	.word	0x0000c701

0000c7f8 <l2cap_recv>:
{
    c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7fc:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
    c7fe:	898b      	ldrh	r3, [r1, #12]
    c800:	2b03      	cmp	r3, #3
{
    c802:	af02      	add	r7, sp, #8
    c804:	4606      	mov	r6, r0
    c806:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c808:	d80c      	bhi.n	c824 <l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP signaling PDU");
    c80a:	4b4c      	ldr	r3, [pc, #304]	; (c93c <l2cap_recv+0x144>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    c80c:	61bb      	str	r3, [r7, #24]
    c80e:	484c      	ldr	r0, [pc, #304]	; (c940 <l2cap_recv+0x148>)
    c810:	2302      	movs	r3, #2
    c812:	f107 0214 	add.w	r2, r7, #20
    c816:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c81a:	607b      	str	r3, [r7, #4]
    c81c:	617b      	str	r3, [r7, #20]
    c81e:	f018 fd75 	bl	2530c <z_log_msg2_static_create.constprop.0>
		return 0;
    c822:	e01a      	b.n	c85a <l2cap_recv+0x62>
	return net_buf_simple_pull_mem(&buf->b, len);
    c824:	2104      	movs	r1, #4
    c826:	f105 0008 	add.w	r0, r5, #8
    c82a:	f01a fc6e 	bl	2710a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    c82e:	89ab      	ldrh	r3, [r5, #12]
    c830:	4604      	mov	r4, r0
	len = sys_le16_to_cpu(hdr->len);
    c832:	8840      	ldrh	r0, [r0, #2]
	if (buf->len != len) {
    c834:	4298      	cmp	r0, r3
    c836:	d015      	beq.n	c864 <l2cap_recv+0x6c>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    c838:	4942      	ldr	r1, [pc, #264]	; (c944 <l2cap_recv+0x14c>)
    c83a:	466c      	mov	r4, sp
    c83c:	b088      	sub	sp, #32
    c83e:	aa02      	add	r2, sp, #8
    c840:	e9c2 1304 	strd	r1, r3, [r2, #16]
    c844:	2304      	movs	r3, #4
    c846:	6190      	str	r0, [r2, #24]
    c848:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c84c:	f842 3f0c 	str.w	r3, [r2, #12]!
    c850:	483b      	ldr	r0, [pc, #236]	; (c940 <l2cap_recv+0x148>)
    c852:	60bb      	str	r3, [r7, #8]
    c854:	f018 fd5a 	bl	2530c <z_log_msg2_static_create.constprop.0>
    c858:	46a5      	mov	sp, r4
}
    c85a:	2000      	movs	r0, #0
    c85c:	3720      	adds	r7, #32
    c85e:	46bd      	mov	sp, r7
    c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
    c864:	7861      	ldrb	r1, [r4, #1]
    c866:	b909      	cbnz	r1, c86c <l2cap_recv+0x74>
		BT_ERR("Invalid ident value in L2CAP PDU");
    c868:	4b37      	ldr	r3, [pc, #220]	; (c948 <l2cap_recv+0x150>)
    c86a:	e7cf      	b.n	c80c <l2cap_recv+0x14>
	switch (hdr->code) {
    c86c:	7823      	ldrb	r3, [r4, #0]
    c86e:	2b12      	cmp	r3, #18
    c870:	d017      	beq.n	c8a2 <l2cap_recv+0xaa>
    c872:	2b13      	cmp	r3, #19
    c874:	d011      	beq.n	c89a <l2cap_recv+0xa2>
    c876:	2b01      	cmp	r3, #1
    c878:	d0ef      	beq.n	c85a <l2cap_recv+0x62>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c87a:	4a34      	ldr	r2, [pc, #208]	; (c94c <l2cap_recv+0x154>)
    c87c:	4830      	ldr	r0, [pc, #192]	; (c940 <l2cap_recv+0x148>)
	switch (hdr->code) {
    c87e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c882:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c886:	2303      	movs	r3, #3
    c888:	f107 0214 	add.w	r2, r7, #20
    c88c:	607b      	str	r3, [r7, #4]
    c88e:	617b      	str	r3, [r7, #20]
    c890:	f018 fd3c 	bl	2530c <z_log_msg2_static_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
    c894:	7861      	ldrb	r1, [r4, #1]
    c896:	6830      	ldr	r0, [r6, #0]
    c898:	e00e      	b.n	c8b8 <l2cap_recv+0xc0>
	if (buf->len < sizeof(*rsp)) {
    c89a:	2801      	cmp	r0, #1
    c89c:	d8dd      	bhi.n	c85a <l2cap_recv+0x62>
		BT_ERR("Too small LE conn param rsp");
    c89e:	4b2c      	ldr	r3, [pc, #176]	; (c950 <l2cap_recv+0x158>)
    c8a0:	e7b4      	b.n	c80c <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    c8a2:	2807      	cmp	r0, #7
    c8a4:	d801      	bhi.n	c8aa <l2cap_recv+0xb2>
		BT_ERR("Too small LE conn update param req");
    c8a6:	4b2b      	ldr	r3, [pc, #172]	; (c954 <l2cap_recv+0x15c>)
    c8a8:	e7b0      	b.n	c80c <l2cap_recv+0x14>
    c8aa:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
    c8ac:	f896 8003 	ldrb.w	r8, [r6, #3]
    c8b0:	f1b8 0f00 	cmp.w	r8, #0
    c8b4:	d003      	beq.n	c8be <l2cap_recv+0xc6>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    c8b6:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    c8b8:	f018 fda0 	bl	253fc <l2cap_send_reject.constprop.0>
		break;
    c8bc:	e7cd      	b.n	c85a <l2cap_recv+0x62>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    c8be:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    c8c0:	7850      	ldrb	r0, [r2, #1]
    c8c2:	7813      	ldrb	r3, [r2, #0]
    c8c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c8c8:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    c8ca:	78d0      	ldrb	r0, [r2, #3]
    c8cc:	7893      	ldrb	r3, [r2, #2]
    c8ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c8d2:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    c8d4:	7950      	ldrb	r0, [r2, #5]
    c8d6:	7913      	ldrb	r3, [r2, #4]
    c8d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c8dc:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    c8de:	7993      	ldrb	r3, [r2, #6]
    c8e0:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c8e2:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    c8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c8e8:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    c8ea:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c8ec:	f7ff feba 	bl	c664 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    c8f0:	4604      	mov	r4, r0
    c8f2:	2800      	cmp	r0, #0
    c8f4:	d0b1      	beq.n	c85a <l2cap_recv+0x62>
	accepted = le_param_req(conn, &param);
    c8f6:	f107 0108 	add.w	r1, r7, #8
    c8fa:	4630      	mov	r0, r6
    c8fc:	f7ff fb1a 	bl	bf34 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
    c900:	2102      	movs	r1, #2
    c902:	4605      	mov	r5, r0
    c904:	f104 0008 	add.w	r0, r4, #8
    c908:	f01a fbce 	bl	270a8 <net_buf_simple_add>
	if (accepted) {
    c90c:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    c910:	b2db      	uxtb	r3, r3
    c912:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    c914:	4622      	mov	r2, r4
    c916:	f8cd 8000 	str.w	r8, [sp]
    c91a:	4643      	mov	r3, r8
    c91c:	2105      	movs	r1, #5
    c91e:	4630      	mov	r0, r6
    c920:	f018 fd53 	bl	253ca <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    c924:	b110      	cbz	r0, c92c <l2cap_recv+0x134>
		net_buf_unref(buf);
    c926:	4620      	mov	r0, r4
    c928:	f010 fb1e 	bl	1cf68 <net_buf_unref>
	if (accepted) {
    c92c:	2d00      	cmp	r5, #0
    c92e:	d094      	beq.n	c85a <l2cap_recv+0x62>
		bt_conn_le_conn_update(conn, &param);
    c930:	f107 0108 	add.w	r1, r7, #8
    c934:	4630      	mov	r0, r6
    c936:	f018 fcbd 	bl	252b4 <bt_conn_le_conn_update>
    c93a:	e78e      	b.n	c85a <l2cap_recv+0x62>
    c93c:	0002bbec 	.word	0x0002bbec
    c940:	00028990 	.word	0x00028990
    c944:	0002bc0a 	.word	0x0002bc0a
    c948:	0002bc2b 	.word	0x0002bc2b
    c94c:	0002bc8b 	.word	0x0002bc8b
    c950:	0002bc4c 	.word	0x0002bc4c
    c954:	0002bc68 	.word	0x0002bc68

0000c958 <bt_l2cap_recv>:
{
    c958:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    c95a:	898b      	ldrh	r3, [r1, #12]
    c95c:	2b03      	cmp	r3, #3
{
    c95e:	b089      	sub	sp, #36	; 0x24
    c960:	4605      	mov	r5, r0
    c962:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    c964:	d810      	bhi.n	c988 <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
    c966:	4b15      	ldr	r3, [pc, #84]	; (c9bc <bt_l2cap_recv+0x64>)
    c968:	9306      	str	r3, [sp, #24]
    c96a:	2302      	movs	r3, #2
    c96c:	9301      	str	r3, [sp, #4]
    c96e:	9305      	str	r3, [sp, #20]
    c970:	aa05      	add	r2, sp, #20
    c972:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c976:	4812      	ldr	r0, [pc, #72]	; (c9c0 <bt_l2cap_recv+0x68>)
    c978:	f018 fcc8 	bl	2530c <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
    c97c:	4620      	mov	r0, r4
}
    c97e:	b009      	add	sp, #36	; 0x24
    c980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
    c984:	f010 baf0 	b.w	1cf68 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    c988:	2104      	movs	r1, #4
    c98a:	f104 0008 	add.w	r0, r4, #8
    c98e:	f01a fbbc 	bl	2710a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    c992:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    c994:	4628      	mov	r0, r5
    c996:	f018 fd5a 	bl	2544e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c99a:	b948      	cbnz	r0, c9b0 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c99c:	4b09      	ldr	r3, [pc, #36]	; (c9c4 <bt_l2cap_recv+0x6c>)
    c99e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c9a2:	2303      	movs	r3, #3
    c9a4:	9301      	str	r3, [sp, #4]
    c9a6:	9305      	str	r3, [sp, #20]
    c9a8:	aa05      	add	r2, sp, #20
    c9aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c9ae:	e7e2      	b.n	c976 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    c9b0:	6843      	ldr	r3, [r0, #4]
    c9b2:	4621      	mov	r1, r4
    c9b4:	691b      	ldr	r3, [r3, #16]
    c9b6:	4798      	blx	r3
    c9b8:	e7e0      	b.n	c97c <bt_l2cap_recv+0x24>
    c9ba:	bf00      	nop
    c9bc:	0002bca9 	.word	0x0002bca9
    c9c0:	00028990 	.word	0x00028990
    c9c4:	0002bcc6 	.word	0x0002bcc6

0000c9c8 <bt_l2cap_update_conn_param>:
{
    c9c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c9ca:	460d      	mov	r5, r1
	ident++;
    c9cc:	4916      	ldr	r1, [pc, #88]	; (ca28 <bt_l2cap_update_conn_param+0x60>)
    c9ce:	780b      	ldrb	r3, [r1, #0]
    c9d0:	3301      	adds	r3, #1
	if (!ident) {
    c9d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    c9d6:	bf08      	it	eq
    c9d8:	2301      	moveq	r3, #1
    c9da:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    c9dc:	7809      	ldrb	r1, [r1, #0]
{
    c9de:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    c9e0:	2208      	movs	r2, #8
    c9e2:	2012      	movs	r0, #18
    c9e4:	f7ff fe3e 	bl	c664 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    c9e8:	4604      	mov	r4, r0
    c9ea:	b1d0      	cbz	r0, ca22 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    c9ec:	2108      	movs	r1, #8
    c9ee:	4408      	add	r0, r1
    c9f0:	f01a fb5a 	bl	270a8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    c9f4:	882b      	ldrh	r3, [r5, #0]
    c9f6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    c9f8:	886b      	ldrh	r3, [r5, #2]
    c9fa:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    c9fc:	88ab      	ldrh	r3, [r5, #4]
    c9fe:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ca00:	88eb      	ldrh	r3, [r5, #6]
    ca02:	80c3      	strh	r3, [r0, #6]
    ca04:	2300      	movs	r3, #0
    ca06:	9300      	str	r3, [sp, #0]
    ca08:	4622      	mov	r2, r4
    ca0a:	2105      	movs	r1, #5
    ca0c:	4630      	mov	r0, r6
    ca0e:	f018 fcdc 	bl	253ca <bt_l2cap_send_cb>
	if (err) {
    ca12:	4605      	mov	r5, r0
    ca14:	b110      	cbz	r0, ca1c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    ca16:	4620      	mov	r0, r4
    ca18:	f010 faa6 	bl	1cf68 <net_buf_unref>
}
    ca1c:	4628      	mov	r0, r5
    ca1e:	b002      	add	sp, #8
    ca20:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ca22:	f06f 050b 	mvn.w	r5, #11
    ca26:	e7f9      	b.n	ca1c <bt_l2cap_update_conn_param+0x54>
    ca28:	20003f3a 	.word	0x20003f3a

0000ca2c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    ca2c:	4b02      	ldr	r3, [pc, #8]	; (ca38 <att_cfm_sent+0xc>)
    ca2e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    ca32:	f018 bd2a 	b.w	2548a <att_sent>
    ca36:	bf00      	nop
    ca38:	000258ef 	.word	0x000258ef

0000ca3c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    ca3c:	4b02      	ldr	r3, [pc, #8]	; (ca48 <att_rsp_sent+0xc>)
    ca3e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    ca42:	f018 bd22 	b.w	2548a <att_sent>
    ca46:	bf00      	nop
    ca48:	000258d3 	.word	0x000258d3

0000ca4c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    ca4c:	4b02      	ldr	r3, [pc, #8]	; (ca58 <att_req_sent+0xc>)
    ca4e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    ca52:	f018 bd1a 	b.w	2548a <att_sent>
    ca56:	bf00      	nop
    ca58:	00025681 	.word	0x00025681

0000ca5c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    ca5c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    ca5e:	3808      	subs	r0, #8
    ca60:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    ca62:	a901      	add	r1, sp, #4
    ca64:	4802      	ldr	r0, [pc, #8]	; (ca70 <bt_att_released+0x14>)
    ca66:	f01b f86f 	bl	27b48 <k_mem_slab_free>
}
    ca6a:	b003      	add	sp, #12
    ca6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca70:	2000096c 	.word	0x2000096c

0000ca74 <find_type_cb>:
{
    ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    ca78:	f8d2 9000 	ldr.w	r9, [r2]
{
    ca7c:	b099      	sub	sp, #100	; 0x64
    ca7e:	4606      	mov	r6, r0
    ca80:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ca82:	2500      	movs	r5, #0
    ca84:	f642 0301 	movw	r3, #10241	; 0x2801
    ca88:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    ca8a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ca8e:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    ca92:	a912      	add	r1, sp, #72	; 0x48
{
    ca94:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ca96:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    ca9a:	f018 f83e 	bl	24b1a <bt_uuid_cmp>
    ca9e:	2800      	cmp	r0, #0
    caa0:	d069      	beq.n	cb76 <find_type_cb+0x102>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    caa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    caa6:	6830      	ldr	r0, [r6, #0]
    caa8:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    caac:	a912      	add	r1, sp, #72	; 0x48
    caae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    cab2:	f018 f832 	bl	24b1a <bt_uuid_cmp>
    cab6:	b138      	cbz	r0, cac8 <find_type_cb+0x54>
		if (data->group &&
    cab8:	68a3      	ldr	r3, [r4, #8]
    caba:	b11b      	cbz	r3, cac4 <find_type_cb+0x50>
    cabc:	885a      	ldrh	r2, [r3, #2]
    cabe:	42ba      	cmp	r2, r7
    cac0:	d200      	bcs.n	cac4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    cac2:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    cac4:	2001      	movs	r0, #1
    cac6:	e009      	b.n	cadc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    cac8:	6861      	ldr	r1, [r4, #4]
    caca:	4608      	mov	r0, r1
    cacc:	f018 fcd5 	bl	2547a <net_buf_frags_len>
    cad0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    cad4:	1a1b      	subs	r3, r3, r0
    cad6:	2b03      	cmp	r3, #3
    cad8:	d803      	bhi.n	cae2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    cada:	2000      	movs	r0, #0
}
    cadc:	b019      	add	sp, #100	; 0x64
    cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    cae2:	4608      	mov	r0, r1
    cae4:	f01a fab2 	bl	2704c <net_buf_frag_last>
    cae8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    caea:	6860      	ldr	r0, [r4, #4]
    caec:	f018 fcc5 	bl	2547a <net_buf_frags_len>
    caf0:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    caf4:	f105 0b08 	add.w	fp, r5, #8
    caf8:	ebaa 0a00 	sub.w	sl, sl, r0
    cafc:	4658      	mov	r0, fp
    cafe:	f01a fb20 	bl	27142 <net_buf_simple_tailroom>
    cb02:	4550      	cmp	r0, sl
    cb04:	d93a      	bls.n	cb7c <find_type_cb+0x108>
    cb06:	6860      	ldr	r0, [r4, #4]
    cb08:	f018 fcb7 	bl	2547a <net_buf_frags_len>
    cb0c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    cb10:	1a18      	subs	r0, r3, r0
	if (!len) {
    cb12:	b970      	cbnz	r0, cb32 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    cb14:	6863      	ldr	r3, [r4, #4]
    cb16:	7998      	ldrb	r0, [r3, #6]
    cb18:	f010 f962 	bl	1cde0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    cb1c:	2200      	movs	r2, #0
    cb1e:	2300      	movs	r3, #0
    cb20:	f01a fa5a 	bl	26fd8 <net_buf_alloc_fixed>
		if (!frag) {
    cb24:	4605      	mov	r5, r0
    cb26:	2800      	cmp	r0, #0
    cb28:	d0d7      	beq.n	cada <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    cb2a:	4601      	mov	r1, r0
    cb2c:	6860      	ldr	r0, [r4, #4]
    cb2e:	f01a fa9e 	bl	2706e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    cb32:	2300      	movs	r3, #0
    cb34:	9300      	str	r3, [sp, #0]
    cb36:	2310      	movs	r3, #16
    cb38:	f8d6 9004 	ldr.w	r9, [r6, #4]
    cb3c:	4631      	mov	r1, r6
    cb3e:	eb0d 0203 	add.w	r2, sp, r3
    cb42:	4640      	mov	r0, r8
    cb44:	47c8      	blx	r9
	if (read < 0) {
    cb46:	1e06      	subs	r6, r0, #0
    cb48:	db15      	blt.n	cb76 <find_type_cb+0x102>
	if (read != data->value_len) {
    cb4a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    cb4c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    cb4e:	4296      	cmp	r6, r2
    cb50:	d035      	beq.n	cbbe <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    cb52:	4601      	mov	r1, r0
    cb54:	a80d      	add	r0, sp, #52	; 0x34
    cb56:	f018 f80e 	bl	24b76 <bt_uuid_create>
    cb5a:	b998      	cbnz	r0, cb84 <find_type_cb+0x110>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    cb5c:	7c23      	ldrb	r3, [r4, #16]
    cb5e:	4a1a      	ldr	r2, [pc, #104]	; (cbc8 <find_type_cb+0x154>)
    cb60:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    cb64:	2303      	movs	r3, #3
    cb66:	9308      	str	r3, [sp, #32]
			BT_WARN("Unable to create UUID: size %d", read);
    cb68:	4818      	ldr	r0, [pc, #96]	; (cbcc <find_type_cb+0x158>)
    cb6a:	9315      	str	r3, [sp, #84]	; 0x54
    cb6c:	aa15      	add	r2, sp, #84	; 0x54
    cb6e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cb72:	f018 fdc2 	bl	256fa <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
    cb76:	2300      	movs	r3, #0
    cb78:	60a3      	str	r3, [r4, #8]
    cb7a:	e7a3      	b.n	cac4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    cb7c:	4658      	mov	r0, fp
    cb7e:	f01a fae0 	bl	27142 <net_buf_simple_tailroom>
    cb82:	e7c6      	b.n	cb12 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    cb84:	b2f2      	uxtb	r2, r6
    cb86:	a904      	add	r1, sp, #16
    cb88:	a808      	add	r0, sp, #32
    cb8a:	f017 fff4 	bl	24b76 <bt_uuid_create>
    cb8e:	b928      	cbnz	r0, cb9c <find_type_cb+0x128>
			BT_WARN("Unable to create UUID: size %d", read);
    cb90:	4b0f      	ldr	r3, [pc, #60]	; (cbd0 <find_type_cb+0x15c>)
    cb92:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
    cb96:	2303      	movs	r3, #3
    cb98:	9303      	str	r3, [sp, #12]
    cb9a:	e7e5      	b.n	cb68 <find_type_cb+0xf4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    cb9c:	a908      	add	r1, sp, #32
    cb9e:	a80d      	add	r0, sp, #52	; 0x34
    cba0:	f017 ffbb 	bl	24b1a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    cba4:	2800      	cmp	r0, #0
    cba6:	d1e6      	bne.n	cb76 <find_type_cb+0x102>
	data->err = 0x00;
    cba8:	2300      	movs	r3, #0
    cbaa:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    cbac:	2104      	movs	r1, #4
    cbae:	f105 0008 	add.w	r0, r5, #8
    cbb2:	f01a fa79 	bl	270a8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    cbb6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    cbb8:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    cbba:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    cbbc:	e782      	b.n	cac4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    cbbe:	4632      	mov	r2, r6
    cbc0:	a904      	add	r1, sp, #16
    cbc2:	f017 fedb 	bl	2497c <memcmp>
    cbc6:	e7ed      	b.n	cba4 <find_type_cb+0x130>
    cbc8:	0002bd02 	.word	0x0002bd02
    cbcc:	00028890 	.word	0x00028890
    cbd0:	0002bd21 	.word	0x0002bd21

0000cbd4 <att_get>:
{
    cbd4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    cbd6:	7b43      	ldrb	r3, [r0, #13]
    cbd8:	2b07      	cmp	r3, #7
{
    cbda:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
    cbdc:	d00c      	beq.n	cbf8 <att_get+0x24>
		BT_WARN("Not connected");
    cbde:	4b16      	ldr	r3, [pc, #88]	; (cc38 <att_get+0x64>)
		BT_WARN("ATT channel flagged as disconnected");
    cbe0:	9306      	str	r3, [sp, #24]
    cbe2:	4816      	ldr	r0, [pc, #88]	; (cc3c <att_get+0x68>)
    cbe4:	2302      	movs	r3, #2
    cbe6:	aa05      	add	r2, sp, #20
    cbe8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    cbec:	9301      	str	r3, [sp, #4]
    cbee:	9305      	str	r3, [sp, #20]
		return NULL;
    cbf0:	2400      	movs	r4, #0
		BT_WARN("ATT channel flagged as disconnected");
    cbf2:	f018 fd82 	bl	256fa <z_log_msg2_static_create.constprop.0>
		return NULL;
    cbf6:	e00f      	b.n	cc18 <att_get+0x44>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    cbf8:	2104      	movs	r1, #4
    cbfa:	f018 fc28 	bl	2544e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    cbfe:	4604      	mov	r4, r0
    cc00:	b968      	cbnz	r0, cc1e <att_get+0x4a>
		BT_ERR("Unable to find ATT channel");
    cc02:	4b0f      	ldr	r3, [pc, #60]	; (cc40 <att_get+0x6c>)
    cc04:	9306      	str	r3, [sp, #24]
    cc06:	480d      	ldr	r0, [pc, #52]	; (cc3c <att_get+0x68>)
    cc08:	2302      	movs	r3, #2
    cc0a:	aa05      	add	r2, sp, #20
    cc0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc10:	9301      	str	r3, [sp, #4]
    cc12:	9305      	str	r3, [sp, #20]
    cc14:	f018 fd71 	bl	256fa <z_log_msg2_static_create.constprop.0>
}
    cc18:	4620      	mov	r0, r4
    cc1a:	b008      	add	sp, #32
    cc1c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc1e:	f3bf 8f5b 	dmb	ish
    cc22:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    cc26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    cc2a:	075b      	lsls	r3, r3, #29
    cc2c:	d501      	bpl.n	cc32 <att_get+0x5e>
		BT_WARN("ATT channel flagged as disconnected");
    cc2e:	4b05      	ldr	r3, [pc, #20]	; (cc44 <att_get+0x70>)
    cc30:	e7d6      	b.n	cbe0 <att_get+0xc>
	return att_chan->att;
    cc32:	f850 4c08 	ldr.w	r4, [r0, #-8]
    cc36:	e7ef      	b.n	cc18 <att_get+0x44>
    cc38:	0002bd40 	.word	0x0002bd40
    cc3c:	00028890 	.word	0x00028890
    cc40:	0002bd4e 	.word	0x0002bd4e
    cc44:	0002bd69 	.word	0x0002bd69

0000cc48 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc4a:	b08b      	sub	sp, #44	; 0x2c
    cc4c:	4607      	mov	r7, r0
    cc4e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    cc50:	4827      	ldr	r0, [pc, #156]	; (ccf0 <bt_att_accept+0xa8>)
    cc52:	2200      	movs	r2, #0
    cc54:	2300      	movs	r3, #0
    cc56:	a901      	add	r1, sp, #4
    cc58:	f014 fadc 	bl	21214 <k_mem_slab_alloc>
    cc5c:	4604      	mov	r4, r0
    cc5e:	b180      	cbz	r0, cc82 <bt_att_accept+0x3a>
		BT_ERR("No available ATT context for conn %p", conn);
    cc60:	4b24      	ldr	r3, [pc, #144]	; (ccf4 <bt_att_accept+0xac>)
    cc62:	e9cd 3708 	strd	r3, r7, [sp, #32]
		BT_ERR("No available ATT channel for conn %p", att->conn);
    cc66:	2303      	movs	r3, #3
    cc68:	4823      	ldr	r0, [pc, #140]	; (ccf8 <bt_att_accept+0xb0>)
    cc6a:	9303      	str	r3, [sp, #12]
    cc6c:	aa07      	add	r2, sp, #28
    cc6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    cc72:	f06f 040b 	mvn.w	r4, #11
		BT_ERR("No available ATT channel for conn %p", att->conn);
    cc76:	9307      	str	r3, [sp, #28]
    cc78:	f018 fd3f 	bl	256fa <z_log_msg2_static_create.constprop.0>
	}

	*ch = &chan->chan.chan;

	return 0;
}
    cc7c:	4620      	mov	r0, r4
    cc7e:	b00b      	add	sp, #44	; 0x2c
    cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    cc82:	4601      	mov	r1, r0
    cc84:	222c      	movs	r2, #44	; 0x2c
    cc86:	9801      	ldr	r0, [sp, #4]
    cc88:	f017 fe94 	bl	249b4 <memset>
	att->conn = conn;
    cc8c:	9d01      	ldr	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    cc8e:	481b      	ldr	r0, [pc, #108]	; (ccfc <bt_att_accept+0xb4>)
	list->tail = NULL;
    cc90:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    cc92:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    cc96:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    cc9a:	2200      	movs	r2, #0
    cc9c:	2300      	movs	r3, #0
    cc9e:	a902      	add	r1, sp, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    cca0:	9402      	str	r4, [sp, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    cca2:	f014 fab7 	bl	21214 <k_mem_slab_alloc>
    cca6:	4604      	mov	r4, r0
    cca8:	b120      	cbz	r0, ccb4 <bt_att_accept+0x6c>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    ccaa:	682b      	ldr	r3, [r5, #0]
    ccac:	4a14      	ldr	r2, [pc, #80]	; (cd00 <bt_att_accept+0xb8>)
    ccae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ccb2:	e7d8      	b.n	cc66 <bt_att_accept+0x1e>
	(void)memset(chan, 0, sizeof(*chan));
    ccb4:	4601      	mov	r1, r0
    ccb6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ccba:	9802      	ldr	r0, [sp, #8]
    ccbc:	f017 fe7a 	bl	249b4 <memset>
	chan->chan.chan.ops = &ops;
    ccc0:	9802      	ldr	r0, [sp, #8]
    ccc2:	4b10      	ldr	r3, [pc, #64]	; (cd04 <bt_att_accept+0xbc>)
    ccc4:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    ccc6:	30f8      	adds	r0, #248	; 0xf8
    ccc8:	f01a fffa 	bl	27cc0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cccc:	9b02      	ldr	r3, [sp, #8]
    ccce:	f3bf 8f5b 	dmb	ish
    ccd2:	33f0      	adds	r3, #240	; 0xf0
    ccd4:	e853 2f00 	ldrex	r2, [r3]
    ccd8:	e843 4100 	strex	r1, r4, [r3]
    ccdc:	2900      	cmp	r1, #0
    ccde:	d1f9      	bne.n	ccd4 <bt_att_accept+0x8c>
    cce0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    cce4:	9b02      	ldr	r3, [sp, #8]
    cce6:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    ccea:	6033      	str	r3, [r6, #0]
	return 0;
    ccec:	e7c6      	b.n	cc7c <bt_att_accept+0x34>
    ccee:	bf00      	nop
    ccf0:	20000950 	.word	0x20000950
    ccf4:	0002bd8d 	.word	0x0002bd8d
    ccf8:	00028890 	.word	0x00028890
    ccfc:	2000096c 	.word	0x2000096c
    cd00:	0002bdb2 	.word	0x0002bdb2
    cd04:	200002c4 	.word	0x200002c4

0000cd08 <read_group_cb>:
{
    cd08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cd0c:	4605      	mov	r5, r0
    cd0e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cd10:	f04f 0800 	mov.w	r8, #0
    cd14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cd18:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    cd1a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cd1c:	f88d 8008 	strb.w	r8, [sp, #8]
    cd20:	a902      	add	r1, sp, #8
{
    cd22:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cd24:	f8ad 300a 	strh.w	r3, [sp, #10]
    cd28:	f017 fef7 	bl	24b1a <bt_uuid_cmp>
    cd2c:	b1a0      	cbz	r0, cd58 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    cd2e:	f642 0301 	movw	r3, #10241	; 0x2801
    cd32:	6828      	ldr	r0, [r5, #0]
    cd34:	f88d 800c 	strb.w	r8, [sp, #12]
    cd38:	a903      	add	r1, sp, #12
    cd3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    cd3e:	f017 feec 	bl	24b1a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    cd42:	b148      	cbz	r0, cd58 <read_group_cb+0x50>
		if (data->group &&
    cd44:	6923      	ldr	r3, [r4, #16]
    cd46:	b11b      	cbz	r3, cd50 <read_group_cb+0x48>
    cd48:	885a      	ldrh	r2, [r3, #2]
    cd4a:	42b2      	cmp	r2, r6
    cd4c:	d200      	bcs.n	cd50 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    cd4e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    cd50:	2001      	movs	r0, #1
}
    cd52:	b004      	add	sp, #16
    cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    cd58:	6861      	ldr	r1, [r4, #4]
    cd5a:	6828      	ldr	r0, [r5, #0]
    cd5c:	f017 fedd 	bl	24b1a <bt_uuid_cmp>
    cd60:	b110      	cbz	r0, cd68 <read_group_cb+0x60>
		data->group = NULL;
    cd62:	2300      	movs	r3, #0
    cd64:	6123      	str	r3, [r4, #16]
    cd66:	e7f3      	b.n	cd50 <read_group_cb+0x48>
	if (data->rsp->len &&
    cd68:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    cd6a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    cd6c:	781a      	ldrb	r2, [r3, #0]
    cd6e:	b13a      	cbz	r2, cd80 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    cd70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    cd74:	8981      	ldrh	r1, [r0, #12]
    cd76:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    cd78:	4293      	cmp	r3, r2
    cd7a:	da01      	bge.n	cd80 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    cd7c:	2000      	movs	r0, #0
    cd7e:	e7e8      	b.n	cd52 <read_group_cb+0x4a>
    cd80:	2104      	movs	r1, #4
    cd82:	3008      	adds	r0, #8
    cd84:	f01a f990 	bl	270a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    cd88:	4b09      	ldr	r3, [pc, #36]	; (cdb0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    cd8a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    cd8c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    cd8e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    cd90:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    cd92:	4629      	mov	r1, r5
    cd94:	9300      	str	r3, [sp, #0]
    cd96:	9401      	str	r4, [sp, #4]
    cd98:	2300      	movs	r3, #0
    cd9a:	4638      	mov	r0, r7
    cd9c:	f018 fcb0 	bl	25700 <att_chan_read>
	if (read < 0) {
    cda0:	2800      	cmp	r0, #0
    cda2:	dbeb      	blt.n	cd7c <read_group_cb+0x74>
	if (!data->group) {
    cda4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    cda6:	3800      	subs	r0, #0
    cda8:	bf18      	it	ne
    cdaa:	2001      	movne	r0, #1
    cdac:	e7d1      	b.n	cd52 <read_group_cb+0x4a>
    cdae:	bf00      	nop
    cdb0:	00025661 	.word	0x00025661

0000cdb4 <chan_send>:
{
    cdb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    cdb8:	688b      	ldr	r3, [r1, #8]
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	2bd2      	cmp	r3, #210	; 0xd2
{
    cdbe:	b08b      	sub	sp, #44	; 0x2c
    cdc0:	4606      	mov	r6, r0
    cdc2:	460c      	mov	r4, r1
    cdc4:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    cdc6:	d117      	bne.n	cdf8 <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
    cdc8:	6803      	ldr	r3, [r0, #0]
    cdca:	6818      	ldr	r0, [r3, #0]
    cdcc:	f003 fc3a 	bl	10644 <bt_smp_sign>
		if (err) {
    cdd0:	4605      	mov	r5, r0
    cdd2:	b188      	cbz	r0, cdf8 <chan_send+0x44>
			BT_ERR("Error signing data");
    cdd4:	4b24      	ldr	r3, [pc, #144]	; (ce68 <chan_send+0xb4>)
    cdd6:	4825      	ldr	r0, [pc, #148]	; (ce6c <chan_send+0xb8>)
    cdd8:	9308      	str	r3, [sp, #32]
    cdda:	aa07      	add	r2, sp, #28
    cddc:	2302      	movs	r3, #2
    cdde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cde2:	9303      	str	r3, [sp, #12]
    cde4:	9307      	str	r3, [sp, #28]
    cde6:	f018 fc88 	bl	256fa <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    cdea:	4620      	mov	r0, r4
    cdec:	f010 f8bc 	bl	1cf68 <net_buf_unref>
}
    cdf0:	4628      	mov	r0, r5
    cdf2:	b00b      	add	sp, #44	; 0x2c
    cdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    cdf8:	f104 0008 	add.w	r0, r4, #8
    cdfc:	f01a f99d 	bl	2713a <net_buf_simple_headroom>
	state->len = buf->len;
    ce00:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    ce04:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    ce06:	b957      	cbnz	r7, ce1e <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    ce08:	68a3      	ldr	r3, [r4, #8]
    ce0a:	7818      	ldrb	r0, [r3, #0]
    ce0c:	f018 fb55 	bl	254ba <att_op_get_type>
    ce10:	1e43      	subs	r3, r0, #1
    ce12:	b2db      	uxtb	r3, r3
    ce14:	2b04      	cmp	r3, #4
    ce16:	bf9c      	itt	ls
    ce18:	4a15      	ldrls	r2, [pc, #84]	; (ce70 <chan_send+0xbc>)
    ce1a:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ce1e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    ce20:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ce24:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    ce26:	4b13      	ldr	r3, [pc, #76]	; (ce74 <chan_send+0xc0>)
    ce28:	429f      	cmp	r7, r3
    ce2a:	d018      	beq.n	ce5e <chan_send+0xaa>
	} else if (cb == chan_cfm_sent) {
    ce2c:	4b12      	ldr	r3, [pc, #72]	; (ce78 <chan_send+0xc4>)
    ce2e:	429f      	cmp	r7, r3
    ce30:	d017      	beq.n	ce62 <chan_send+0xae>
		return att_sent;
    ce32:	4912      	ldr	r1, [pc, #72]	; (ce7c <chan_send+0xc8>)
    ce34:	4b12      	ldr	r3, [pc, #72]	; (ce80 <chan_send+0xcc>)
    ce36:	4a13      	ldr	r2, [pc, #76]	; (ce84 <chan_send+0xd0>)
    ce38:	428f      	cmp	r7, r1
    ce3a:	bf18      	it	ne
    ce3c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    ce3e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ce40:	9600      	str	r6, [sp, #0]
    ce42:	4622      	mov	r2, r4
    ce44:	2104      	movs	r1, #4
    ce46:	f018 fac0 	bl	253ca <bt_l2cap_send_cb>
	if (err) {
    ce4a:	4605      	mov	r5, r0
    ce4c:	2800      	cmp	r0, #0
    ce4e:	d0cf      	beq.n	cdf0 <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
    ce50:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ce52:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ce56:	fa10 f088 	uxtah	r0, r0, r8
    ce5a:	60a0      	str	r0, [r4, #8]
}
    ce5c:	e7c8      	b.n	cdf0 <chan_send+0x3c>
		return att_rsp_sent;
    ce5e:	4b0a      	ldr	r3, [pc, #40]	; (ce88 <chan_send+0xd4>)
    ce60:	e7ed      	b.n	ce3e <chan_send+0x8a>
		return att_cfm_sent;
    ce62:	4b0a      	ldr	r3, [pc, #40]	; (ce8c <chan_send+0xd8>)
    ce64:	e7eb      	b.n	ce3e <chan_send+0x8a>
    ce66:	bf00      	nop
    ce68:	0002bdd7 	.word	0x0002bdd7
    ce6c:	00028890 	.word	0x00028890
    ce70:	00028f44 	.word	0x00028f44
    ce74:	000258d3 	.word	0x000258d3
    ce78:	000258ef 	.word	0x000258ef
    ce7c:	00025681 	.word	0x00025681
    ce80:	0000ca4d 	.word	0x0000ca4d
    ce84:	0002548b 	.word	0x0002548b
    ce88:	0000ca3d 	.word	0x0000ca3d
    ce8c:	0000ca2d 	.word	0x0000ca2d

0000ce90 <read_type_cb>:
{
    ce90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    ce94:	f8d2 8000 	ldr.w	r8, [r2]
{
    ce98:	4606      	mov	r6, r0
    ce9a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    ce9c:	6800      	ldr	r0, [r0, #0]
    ce9e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    cea0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    cea4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    cea6:	f017 fe38 	bl	24b1a <bt_uuid_cmp>
    ceaa:	4607      	mov	r7, r0
    ceac:	2800      	cmp	r0, #0
    ceae:	d13e      	bne.n	cf2e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    ceb0:	4628      	mov	r0, r5
    ceb2:	2215      	movs	r2, #21
    ceb4:	4631      	mov	r1, r6
    ceb6:	f019 fae2 	bl	2647e <bt_gatt_check_perm>
    ceba:	4605      	mov	r5, r0
    cebc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    cebe:	b148      	cbz	r0, ced4 <read_type_cb+0x44>
		if (data->rsp->len) {
    cec0:	68e3      	ldr	r3, [r4, #12]
    cec2:	781b      	ldrb	r3, [r3, #0]
    cec4:	b923      	cbnz	r3, ced0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    cec6:	2500      	movs	r5, #0
}
    cec8:	4628      	mov	r0, r5
    ceca:	b003      	add	sp, #12
    cecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    ced0:	7527      	strb	r7, [r4, #20]
    ced2:	e7f8      	b.n	cec6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    ced4:	68a0      	ldr	r0, [r4, #8]
    ced6:	f01a f8b9 	bl	2704c <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    ceda:	2102      	movs	r1, #2
    cedc:	3008      	adds	r0, #8
    cede:	f01a f8e3 	bl	270a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    cee2:	4b14      	ldr	r3, [pc, #80]	; (cf34 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    cee4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    cee6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    cee8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    ceec:	4631      	mov	r1, r6
    ceee:	9300      	str	r3, [sp, #0]
    cef0:	9401      	str	r4, [sp, #4]
    cef2:	462b      	mov	r3, r5
    cef4:	4640      	mov	r0, r8
    cef6:	f018 fc03 	bl	25700 <att_chan_read>
	if (read < 0) {
    cefa:	2800      	cmp	r0, #0
    cefc:	da07      	bge.n	cf0e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    cefe:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    cf02:	bf26      	itte	cs
    cf04:	4240      	negcs	r0, r0
    cf06:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    cf08:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    cf0a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    cf0c:	e7dc      	b.n	cec8 <read_type_cb+0x38>
	if (!data->item) {
    cf0e:	6923      	ldr	r3, [r4, #16]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d0d8      	beq.n	cec6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    cf14:	68a0      	ldr	r0, [r4, #8]
    cf16:	f018 fab0 	bl	2547a <net_buf_frags_len>
    cf1a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    cf1e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    cf20:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    cf22:	7818      	ldrb	r0, [r3, #0]
    cf24:	4285      	cmp	r5, r0
    cf26:	bf94      	ite	ls
    cf28:	2500      	movls	r5, #0
    cf2a:	2501      	movhi	r5, #1
    cf2c:	e7cc      	b.n	cec8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    cf2e:	2501      	movs	r5, #1
    cf30:	e7ca      	b.n	cec8 <read_type_cb+0x38>
    cf32:	bf00      	nop
    cf34:	00025497 	.word	0x00025497

0000cf38 <bt_att_connected>:
{
    cf38:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    cf3a:	4606      	mov	r6, r0
{
    cf3c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    cf3e:	2104      	movs	r1, #4
    cf40:	f856 0908 	ldr.w	r0, [r6], #-8
    cf44:	f018 fa78 	bl	25438 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    cf48:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    cf4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cf4e:	b91b      	cbnz	r3, cf58 <bt_att_connected+0x20>
    cf50:	f105 000c 	add.w	r0, r5, #12
    cf54:	f01a feb4 	bl	27cc0 <z_impl_k_queue_init>
	parent->next = child;
    cf58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    cf5a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    cf5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    cf60:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    cf64:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    cf66:	b902      	cbnz	r2, cf6a <bt_att_connected+0x32>
	list->tail = node;
    cf68:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf6a:	f3bf 8f5b 	dmb	ish
    cf6e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    cf72:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    cf76:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cf78:	bf58      	it	pl
    cf7a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    cf7c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cf7e:	bf5c      	itt	pl
    cf80:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cf84:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    cf88:	f018 fadd 	bl	25546 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    cf8c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    cf90:	4902      	ldr	r1, [pc, #8]	; (cf9c <bt_att_connected+0x64>)
}
    cf92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    cf96:	f01a bf96 	b.w	27ec6 <k_work_init_delayable>
    cf9a:	bf00      	nop
    cf9c:	0000dacd 	.word	0x0000dacd

0000cfa0 <bt_att_chan_create_pdu>:
{
    cfa0:	b5b0      	push	{r4, r5, r7, lr}
    cfa2:	b088      	sub	sp, #32
    cfa4:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    cfa6:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    cfaa:	1c53      	adds	r3, r2, #1
    cfac:	428b      	cmp	r3, r1
{
    cfae:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    cfb0:	d915      	bls.n	cfde <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    cfb2:	466c      	mov	r4, sp
    cfb4:	b088      	sub	sp, #32
    cfb6:	466a      	mov	r2, sp
    cfb8:	481d      	ldr	r0, [pc, #116]	; (d030 <bt_att_chan_create_pdu+0x90>)
    cfba:	6193      	str	r3, [r2, #24]
    cfbc:	2304      	movs	r3, #4
    cfbe:	e9c2 0104 	strd	r0, r1, [r2, #16]
    cfc2:	f842 3f0c 	str.w	r3, [r2, #12]!
    cfc6:	481b      	ldr	r0, [pc, #108]	; (d034 <bt_att_chan_create_pdu+0x94>)
    cfc8:	60bb      	str	r3, [r7, #8]
    cfca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    cfce:	f018 fb94 	bl	256fa <z_log_msg2_static_create.constprop.0>
    cfd2:	46a5      	mov	sp, r4
		return NULL;
    cfd4:	2400      	movs	r4, #0
}
    cfd6:	4620      	mov	r0, r4
    cfd8:	3720      	adds	r7, #32
    cfda:	46bd      	mov	sp, r7
    cfdc:	bdb0      	pop	{r4, r5, r7, pc}
	switch (att_op_get_type(op)) {
    cfde:	4628      	mov	r0, r5
    cfe0:	f018 fa6b 	bl	254ba <att_op_get_type>
    cfe4:	2802      	cmp	r0, #2
    cfe6:	d001      	beq.n	cfec <bt_att_chan_create_pdu+0x4c>
    cfe8:	2804      	cmp	r0, #4
    cfea:	d116      	bne.n	d01a <bt_att_chan_create_pdu+0x7a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    cfec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    cff0:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    cff2:	2100      	movs	r1, #0
    cff4:	4608      	mov	r0, r1
    cff6:	f018 f9e5 	bl	253c4 <bt_l2cap_create_pdu_timeout>
    cffa:	4604      	mov	r4, r0
	if (!buf) {
    cffc:	b990      	cbnz	r0, d024 <bt_att_chan_create_pdu+0x84>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    cffe:	4b0e      	ldr	r3, [pc, #56]	; (d038 <bt_att_chan_create_pdu+0x98>)
    d000:	480c      	ldr	r0, [pc, #48]	; (d034 <bt_att_chan_create_pdu+0x94>)
    d002:	e9c7 3506 	strd	r3, r5, [r7, #24]
    d006:	f107 0214 	add.w	r2, r7, #20
    d00a:	2303      	movs	r3, #3
    d00c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d010:	607b      	str	r3, [r7, #4]
    d012:	617b      	str	r3, [r7, #20]
    d014:	f018 fb71 	bl	256fa <z_log_msg2_static_create.constprop.0>
		return NULL;
    d018:	e7dd      	b.n	cfd6 <bt_att_chan_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    d01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d022:	e7e6      	b.n	cff2 <bt_att_chan_create_pdu+0x52>
    d024:	2101      	movs	r1, #1
    d026:	3008      	adds	r0, #8
    d028:	f01a f83e 	bl	270a8 <net_buf_simple_add>
	hdr->code = op;
    d02c:	7005      	strb	r5, [r0, #0]
	return buf;
    d02e:	e7d2      	b.n	cfd6 <bt_att_chan_create_pdu+0x36>
    d030:	0002bdea 	.word	0x0002bdea
    d034:	00028890 	.word	0x00028890
    d038:	0002bb8d 	.word	0x0002bb8d

0000d03c <att_indicate>:
{
    d03c:	b570      	push	{r4, r5, r6, lr}
    d03e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    d040:	f101 0008 	add.w	r0, r1, #8
    d044:	460d      	mov	r5, r1
    d046:	f01a f870 	bl	2712a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    d04a:	6826      	ldr	r6, [r4, #0]
    d04c:	89ab      	ldrh	r3, [r5, #12]
    d04e:	68aa      	ldr	r2, [r5, #8]
    d050:	4601      	mov	r1, r0
    d052:	6830      	ldr	r0, [r6, #0]
    d054:	f019 fb2e 	bl	266b4 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    d058:	211e      	movs	r1, #30
    d05a:	2200      	movs	r2, #0
    d05c:	4620      	mov	r0, r4
    d05e:	f7ff ff9f 	bl	cfa0 <bt_att_chan_create_pdu>
	if (!buf) {
    d062:	4601      	mov	r1, r0
    d064:	b118      	cbz	r0, d06e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    d066:	4a03      	ldr	r2, [pc, #12]	; (d074 <att_indicate+0x38>)
    d068:	4620      	mov	r0, r4
    d06a:	f018 fc0a 	bl	25882 <bt_att_chan_send_rsp>
}
    d06e:	2000      	movs	r0, #0
    d070:	bd70      	pop	{r4, r5, r6, pc}
    d072:	bf00      	nop
    d074:	000258ef 	.word	0x000258ef

0000d078 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    d078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d07c:	4688      	mov	r8, r1
    d07e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    d080:	2101      	movs	r1, #1
    d082:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    d084:	4605      	mov	r5, r0
    d086:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    d088:	f7ff ff8a 	bl	cfa0 <bt_att_chan_create_pdu>
	if (!buf) {
    d08c:	4604      	mov	r4, r0
    d08e:	b178      	cbz	r0, d0b0 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    d090:	2104      	movs	r1, #4
    d092:	3008      	adds	r0, #8
    d094:	f01a f808 	bl	270a8 <net_buf_simple_add>
	rsp->request = req;
    d098:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    d09c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    d09e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    d0a2:	4621      	mov	r1, r4
    d0a4:	4628      	mov	r0, r5
    d0a6:	4a03      	ldr	r2, [pc, #12]	; (d0b4 <send_err_rsp.part.0+0x3c>)
}
    d0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    d0ac:	f018 bbe9 	b.w	25882 <bt_att_chan_send_rsp>
}
    d0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0b4:	000258d3 	.word	0x000258d3

0000d0b8 <bt_att_recv>:
{
    d0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0bc:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    d0be:	898b      	ldrh	r3, [r1, #12]
{
    d0c0:	af00      	add	r7, sp, #0
    d0c2:	4604      	mov	r4, r0
    d0c4:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
    d0c6:	b983      	cbnz	r3, d0ea <bt_att_recv+0x32>
		BT_ERR("Too small ATT PDU received");
    d0c8:	4b54      	ldr	r3, [pc, #336]	; (d21c <bt_att_recv+0x164>)
    d0ca:	61bb      	str	r3, [r7, #24]
    d0cc:	2302      	movs	r3, #2
    d0ce:	607b      	str	r3, [r7, #4]
    d0d0:	617b      	str	r3, [r7, #20]
    d0d2:	f107 0214 	add.w	r2, r7, #20
    d0d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
    d0da:	4851      	ldr	r0, [pc, #324]	; (d220 <bt_att_recv+0x168>)
    d0dc:	f018 fb0d 	bl	256fa <z_log_msg2_static_create.constprop.0>
}
    d0e0:	2000      	movs	r0, #0
    d0e2:	3724      	adds	r7, #36	; 0x24
    d0e4:	46bd      	mov	sp, r7
    d0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    d0ea:	2101      	movs	r1, #1
    d0ec:	f109 0008 	add.w	r0, r9, #8
    d0f0:	f01a f80b 	bl	2710a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    d0f4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d0f8:	4605      	mov	r5, r0
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d0f0      	beq.n	d0e0 <bt_att_recv+0x28>
		if (hdr->code == handlers[i].op) {
    d0fe:	7801      	ldrb	r1, [r0, #0]
    d100:	4a48      	ldr	r2, [pc, #288]	; (d224 <bt_att_recv+0x16c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    d102:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d106:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    d108:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    d10c:	4288      	cmp	r0, r1
    d10e:	d121      	bne.n	d154 <bt_att_recv+0x9c>
		if (handler->type == ATT_REQUEST &&
    d110:	00d9      	lsls	r1, r3, #3
    d112:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d116:	f893 8002 	ldrb.w	r8, [r3, #2]
    d11a:	f1b8 0f01 	cmp.w	r8, #1
    d11e:	d139      	bne.n	d194 <bt_att_recv+0xdc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d120:	f3bf 8f5b 	dmb	ish
    d124:	34e8      	adds	r4, #232	; 0xe8
    d126:	e854 3f00 	ldrex	r3, [r4]
    d12a:	f043 0001 	orr.w	r0, r3, #1
    d12e:	e844 0c00 	strex	ip, r0, [r4]
    d132:	f1bc 0f00 	cmp.w	ip, #0
    d136:	d1f6      	bne.n	d126 <bt_att_recv+0x6e>
    d138:	f3bf 8f5b 	dmb	ish
    d13c:	07d8      	lsls	r0, r3, #31
    d13e:	d53e      	bpl.n	d1be <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected request");
    d140:	4b39      	ldr	r3, [pc, #228]	; (d228 <bt_att_recv+0x170>)
			BT_WARN("Ignoring unexpected indication");
    d142:	61bb      	str	r3, [r7, #24]
    d144:	2302      	movs	r3, #2
    d146:	607b      	str	r3, [r7, #4]
    d148:	617b      	str	r3, [r7, #20]
    d14a:	f107 0214 	add.w	r2, r7, #20
    d14e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d152:	e7c2      	b.n	d0da <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d154:	3301      	adds	r3, #1
    d156:	2b1d      	cmp	r3, #29
    d158:	d1d6      	bne.n	d108 <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    d15a:	4b34      	ldr	r3, [pc, #208]	; (d22c <bt_att_recv+0x174>)
    d15c:	4830      	ldr	r0, [pc, #192]	; (d220 <bt_att_recv+0x168>)
    d15e:	e9c7 3106 	strd	r3, r1, [r7, #24]
    d162:	f107 0214 	add.w	r2, r7, #20
    d166:	2303      	movs	r3, #3
    d168:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d16c:	607b      	str	r3, [r7, #4]
    d16e:	617b      	str	r3, [r7, #20]
    d170:	f018 fac3 	bl	256fa <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    d174:	7829      	ldrb	r1, [r5, #0]
    d176:	4608      	mov	r0, r1
    d178:	f018 f99f 	bl	254ba <att_op_get_type>
    d17c:	2800      	cmp	r0, #0
    d17e:	d0af      	beq.n	d0e0 <bt_att_recv+0x28>
    d180:	2805      	cmp	r0, #5
    d182:	d0ad      	beq.n	d0e0 <bt_att_recv+0x28>
	if (!req) {
    d184:	2900      	cmp	r1, #0
    d186:	d0ab      	beq.n	d0e0 <bt_att_recv+0x28>
    d188:	2306      	movs	r3, #6
    d18a:	2200      	movs	r2, #0
    d18c:	4630      	mov	r0, r6
    d18e:	f7ff ff73 	bl	d078 <send_err_rsp.part.0>
    d192:	e7a5      	b.n	d0e0 <bt_att_recv+0x28>
		} else if (handler->type == ATT_INDICATION &&
    d194:	f1b8 0f05 	cmp.w	r8, #5
    d198:	d111      	bne.n	d1be <bt_att_recv+0x106>
    d19a:	f3bf 8f5b 	dmb	ish
    d19e:	34e8      	adds	r4, #232	; 0xe8
    d1a0:	e854 3f00 	ldrex	r3, [r4]
    d1a4:	f043 0002 	orr.w	r0, r3, #2
    d1a8:	e844 0c00 	strex	ip, r0, [r4]
    d1ac:	f1bc 0f00 	cmp.w	ip, #0
    d1b0:	d1f6      	bne.n	d1a0 <bt_att_recv+0xe8>
    d1b2:	f3bf 8f5b 	dmb	ish
    d1b6:	079b      	lsls	r3, r3, #30
    d1b8:	d501      	bpl.n	d1be <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected indication");
    d1ba:	4b1d      	ldr	r3, [pc, #116]	; (d230 <bt_att_recv+0x178>)
    d1bc:	e7c1      	b.n	d142 <bt_att_recv+0x8a>
	if (buf->len < handler->expect_len) {
    d1be:	440a      	add	r2, r1
    d1c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    d1c4:	7851      	ldrb	r1, [r2, #1]
    d1c6:	4299      	cmp	r1, r3
    d1c8:	d917      	bls.n	d1fa <bt_att_recv+0x142>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d1ca:	46e9      	mov	r9, sp
    d1cc:	b088      	sub	sp, #32
    d1ce:	466a      	mov	r2, sp
    d1d0:	4818      	ldr	r0, [pc, #96]	; (d234 <bt_att_recv+0x17c>)
    d1d2:	7829      	ldrb	r1, [r5, #0]
    d1d4:	6191      	str	r1, [r2, #24]
    d1d6:	2404      	movs	r4, #4
    d1d8:	e9c2 0304 	strd	r0, r3, [r2, #16]
    d1dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d1e0:	f842 4f0c 	str.w	r4, [r2, #12]!
    d1e4:	480e      	ldr	r0, [pc, #56]	; (d220 <bt_att_recv+0x168>)
    d1e6:	60bc      	str	r4, [r7, #8]
    d1e8:	f018 fa87 	bl	256fa <z_log_msg2_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
    d1ec:	f1b8 0f01 	cmp.w	r8, #1
    d1f0:	46cd      	mov	sp, r9
    d1f2:	f47f af75 	bne.w	d0e0 <bt_att_recv+0x28>
		err = BT_ATT_ERR_INVALID_PDU;
    d1f6:	4623      	mov	r3, r4
    d1f8:	e00b      	b.n	d212 <bt_att_recv+0x15a>
		err = handler->func(att_chan, buf);
    d1fa:	6853      	ldr	r3, [r2, #4]
    d1fc:	4649      	mov	r1, r9
    d1fe:	4630      	mov	r0, r6
    d200:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    d202:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    d206:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    d208:	f47f af6a 	bne.w	d0e0 <bt_att_recv+0x28>
    d20c:	2800      	cmp	r0, #0
    d20e:	f43f af67 	beq.w	d0e0 <bt_att_recv+0x28>
		send_err_rsp(att_chan, hdr->code, 0, err);
    d212:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    d214:	2900      	cmp	r1, #0
    d216:	f43f af63 	beq.w	d0e0 <bt_att_recv+0x28>
    d21a:	e7b6      	b.n	d18a <bt_att_recv+0xd2>
    d21c:	0002be0f 	.word	0x0002be0f
    d220:	00028890 	.word	0x00028890
    d224:	00028f58 	.word	0x00028f58
    d228:	0002be2a 	.word	0x0002be2a
    d22c:	0002be84 	.word	0x0002be84
    d230:	0002be46 	.word	0x0002be46
    d234:	0002be65 	.word	0x0002be65

0000d238 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    d238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d23c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    d23e:	6803      	ldr	r3, [r0, #0]
    d240:	460e      	mov	r6, r1
    d242:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    d244:	b087      	sub	sp, #28
    d246:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    d248:	bf18      	it	ne
    d24a:	2101      	movne	r1, #1
    d24c:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    d24e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    d250:	f019 fa5c 	bl	2670c <bt_gatt_change_aware>
    d254:	2800      	cmp	r0, #0
    d256:	d04b      	beq.n	d2f0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    d258:	2f00      	cmp	r7, #0
    d25a:	d04b      	beq.n	d2f4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    d25c:	2218      	movs	r2, #24
    d25e:	2100      	movs	r1, #0
    d260:	4668      	mov	r0, sp
    d262:	f017 fba7 	bl	249b4 <memset>
	if (rsp) {
    d266:	f1b8 0f00 	cmp.w	r8, #0
    d26a:	d122      	bne.n	d2b2 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    d26c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    d26e:	4a22      	ldr	r2, [pc, #136]	; (d2f8 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    d270:	681b      	ldr	r3, [r3, #0]
    d272:	9300      	str	r3, [sp, #0]
	data.value = value;
    d274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d276:	9303      	str	r3, [sp, #12]
	data.len = len;
    d278:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    d27c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d280:	2301      	movs	r3, #1
    d282:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    d286:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    d28a:	466b      	mov	r3, sp
    d28c:	4639      	mov	r1, r7
    d28e:	4638      	mov	r0, r7
	data.req = req;
    d290:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    d294:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    d298:	f018 f98b 	bl	255b2 <bt_gatt_foreach_attr>
	if (data.err) {
    d29c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    d2a0:	b1f4      	cbz	r4, d2e0 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    d2a2:	f1b8 0f00 	cmp.w	r8, #0
    d2a6:	d10e      	bne.n	d2c6 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    d2a8:	2400      	movs	r4, #0
}
    d2aa:	4620      	mov	r0, r4
    d2ac:	b007      	add	sp, #28
    d2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    d2b2:	2200      	movs	r2, #0
    d2b4:	4641      	mov	r1, r8
    d2b6:	4628      	mov	r0, r5
    d2b8:	f7ff fe72 	bl	cfa0 <bt_att_chan_create_pdu>
    d2bc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    d2be:	2800      	cmp	r0, #0
    d2c0:	d1d4      	bne.n	d26c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    d2c2:	240e      	movs	r4, #14
    d2c4:	e7f1      	b.n	d2aa <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    d2c6:	9801      	ldr	r0, [sp, #4]
    d2c8:	f00f fe4e 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d2cc:	2e00      	cmp	r6, #0
    d2ce:	d0eb      	beq.n	d2a8 <att_write_rsp.constprop.0+0x70>
    d2d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d2d4:	463a      	mov	r2, r7
    d2d6:	4631      	mov	r1, r6
    d2d8:	4628      	mov	r0, r5
    d2da:	f7ff fecd 	bl	d078 <send_err_rsp.part.0>
    d2de:	e7e3      	b.n	d2a8 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    d2e0:	9901      	ldr	r1, [sp, #4]
    d2e2:	2900      	cmp	r1, #0
    d2e4:	d0e0      	beq.n	d2a8 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d2e6:	4a05      	ldr	r2, [pc, #20]	; (d2fc <att_write_rsp.constprop.0+0xc4>)
    d2e8:	4628      	mov	r0, r5
    d2ea:	f018 faca 	bl	25882 <bt_att_chan_send_rsp>
    d2ee:	e7dc      	b.n	d2aa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d2f0:	2412      	movs	r4, #18
    d2f2:	e7da      	b.n	d2aa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    d2f4:	2401      	movs	r4, #1
    d2f6:	e7d8      	b.n	d2aa <att_write_rsp.constprop.0+0x72>
    d2f8:	00025697 	.word	0x00025697
    d2fc:	000258d3 	.word	0x000258d3

0000d300 <att_signed_write_cmd>:
{
    d300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d304:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d308:	f3bf 8f5b 	dmb	ish
    d30c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    d310:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d314:	071b      	lsls	r3, r3, #28
{
    d316:	b08b      	sub	sp, #44	; 0x2c
    d318:	4606      	mov	r6, r0
    d31a:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d31c:	d419      	bmi.n	d352 <att_signed_write_cmd+0x52>
	handle = sys_le16_to_cpu(req->handle);
    d31e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
    d320:	2101      	movs	r1, #1
    d322:	f857 3f08 	ldr.w	r3, [r7, #8]!
    d326:	4638      	mov	r0, r7
    d328:	f8b3 8000 	ldrh.w	r8, [r3]
    d32c:	f019 fedd 	bl	270ea <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    d330:	4648      	mov	r0, r9
    d332:	4629      	mov	r1, r5
    d334:	f003 f916 	bl	10564 <bt_smp_sign_verify>
	if (err) {
    d338:	4681      	mov	r9, r0
    d33a:	b160      	cbz	r0, d356 <att_signed_write_cmd+0x56>
		BT_ERR("Error verifying data");
    d33c:	4b11      	ldr	r3, [pc, #68]	; (d384 <att_signed_write_cmd+0x84>)
    d33e:	9308      	str	r3, [sp, #32]
    d340:	4811      	ldr	r0, [pc, #68]	; (d388 <att_signed_write_cmd+0x88>)
    d342:	2302      	movs	r3, #2
    d344:	aa07      	add	r2, sp, #28
    d346:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d34a:	9303      	str	r3, [sp, #12]
    d34c:	9307      	str	r3, [sp, #28]
    d34e:	f018 f9d4 	bl	256fa <z_log_msg2_static_create.constprop.0>
		return 0;
    d352:	2000      	movs	r0, #0
    d354:	e013      	b.n	d37e <att_signed_write_cmd+0x7e>
	return net_buf_simple_pull(&buf->b, len);
    d356:	2101      	movs	r1, #1
    d358:	4638      	mov	r0, r7
    d35a:	f019 fece 	bl	270fa <net_buf_simple_pull>
    d35e:	2102      	movs	r1, #2
    d360:	4638      	mov	r0, r7
    d362:	f019 feca 	bl	270fa <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    d366:	89ab      	ldrh	r3, [r5, #12]
    d368:	3b0c      	subs	r3, #12
    d36a:	b29b      	uxth	r3, r3
    d36c:	9301      	str	r3, [sp, #4]
    d36e:	68ab      	ldr	r3, [r5, #8]
    d370:	9300      	str	r3, [sp, #0]
    d372:	464a      	mov	r2, r9
    d374:	4643      	mov	r3, r8
    d376:	4649      	mov	r1, r9
    d378:	4630      	mov	r0, r6
    d37a:	f7ff ff5d 	bl	d238 <att_write_rsp.constprop.0>
}
    d37e:	b00b      	add	sp, #44	; 0x2c
    d380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d384:	0002be9e 	.word	0x0002be9e
    d388:	00028890 	.word	0x00028890

0000d38c <bt_att_create_pdu>:
{
    d38c:	b570      	push	{r4, r5, r6, lr}
    d38e:	b088      	sub	sp, #32
    d390:	460e      	mov	r6, r1
    d392:	4615      	mov	r5, r2
	att = att_get(conn);
    d394:	f7ff fc1e 	bl	cbd4 <att_get>
	if (!att) {
    d398:	b1c8      	cbz	r0, d3ce <bt_att_create_pdu+0x42>
	return list->head;
    d39a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d39c:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d39e:	b153      	cbz	r3, d3b6 <bt_att_create_pdu+0x2a>
    d3a0:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	b10b      	cbz	r3, d3ac <bt_att_create_pdu+0x20>
    d3a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    d3ac:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    d3b0:	428a      	cmp	r2, r1
    d3b2:	d90f      	bls.n	d3d4 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d3b4:	b9ab      	cbnz	r3, d3e2 <bt_att_create_pdu+0x56>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    d3b6:	4b0f      	ldr	r3, [pc, #60]	; (d3f4 <bt_att_create_pdu+0x68>)
    d3b8:	480f      	ldr	r0, [pc, #60]	; (d3f8 <bt_att_create_pdu+0x6c>)
    d3ba:	e9cd 3206 	strd	r3, r2, [sp, #24]
    d3be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d3c2:	2303      	movs	r3, #3
    d3c4:	aa05      	add	r2, sp, #20
    d3c6:	9301      	str	r3, [sp, #4]
    d3c8:	9305      	str	r3, [sp, #20]
    d3ca:	f018 f996 	bl	256fa <z_log_msg2_static_create.constprop.0>
}
    d3ce:	2000      	movs	r0, #0
    d3d0:	b008      	add	sp, #32
    d3d2:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    d3d4:	462a      	mov	r2, r5
    d3d6:	4631      	mov	r1, r6
}
    d3d8:	b008      	add	sp, #32
    d3da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    d3de:	f7ff bddf 	b.w	cfa0 <bt_att_chan_create_pdu>
    d3e2:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d3e6:	b10c      	cbz	r4, d3ec <bt_att_create_pdu+0x60>
    d3e8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    d3ec:	4618      	mov	r0, r3
    d3ee:	4623      	mov	r3, r4
    d3f0:	e7dc      	b.n	d3ac <bt_att_create_pdu+0x20>
    d3f2:	bf00      	nop
    d3f4:	0002beb3 	.word	0x0002beb3
    d3f8:	00028890 	.word	0x00028890

0000d3fc <att_read_group_req>:
{
    d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d400:	898c      	ldrh	r4, [r1, #12]
    d402:	3c04      	subs	r4, #4
    d404:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d406:	2c02      	cmp	r4, #2
{
    d408:	4605      	mov	r5, r0
    d40a:	b08c      	sub	sp, #48	; 0x30
    d40c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d40e:	d001      	beq.n	d414 <att_read_group_req+0x18>
    d410:	2c10      	cmp	r4, #16
    d412:	d16f      	bne.n	d4f4 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    d414:	2104      	movs	r1, #4
    d416:	3008      	adds	r0, #8
    d418:	f019 fe77 	bl	2710a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d41c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    d420:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d422:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d424:	1d01      	adds	r1, r0, #4
    d426:	4622      	mov	r2, r4
    d428:	4640      	mov	r0, r8
    d42a:	f017 fba4 	bl	24b76 <bt_uuid_create>
    d42e:	2800      	cmp	r0, #0
    d430:	d062      	beq.n	d4f8 <att_read_group_req+0xfc>
	if (!start || !end) {
    d432:	2e00      	cmp	r6, #0
    d434:	d03a      	beq.n	d4ac <att_read_group_req+0xb0>
    d436:	2400      	movs	r4, #0
    d438:	2f00      	cmp	r7, #0
    d43a:	d036      	beq.n	d4aa <att_read_group_req+0xae>
	if (start > end) {
    d43c:	42b7      	cmp	r7, r6
    d43e:	d335      	bcc.n	d4ac <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d444:	a901      	add	r1, sp, #4
    d446:	4640      	mov	r0, r8
    d448:	f88d 4004 	strb.w	r4, [sp, #4]
    d44c:	f8ad 3006 	strh.w	r3, [sp, #6]
    d450:	f017 fb63 	bl	24b1a <bt_uuid_cmp>
    d454:	2800      	cmp	r0, #0
    d456:	d134      	bne.n	d4c2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    d458:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d45a:	2214      	movs	r2, #20
    d45c:	2100      	movs	r1, #0
    d45e:	a807      	add	r0, sp, #28
    d460:	f017 faa8 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    d464:	2201      	movs	r2, #1
    d466:	2111      	movs	r1, #17
    d468:	4620      	mov	r0, r4
    d46a:	f7ff ff8f 	bl	d38c <bt_att_create_pdu>
    d46e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    d470:	2800      	cmp	r0, #0
    d472:	d041      	beq.n	d4f8 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    d474:	2101      	movs	r1, #1
    d476:	3008      	adds	r0, #8
	data.uuid = uuid;
    d478:	e9cd 5807 	strd	r5, r8, [sp, #28]
    d47c:	f019 fe14 	bl	270a8 <net_buf_simple_add>
	data.rsp->len = 0U;
    d480:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d484:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d486:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    d488:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d48c:	4a1b      	ldr	r2, [pc, #108]	; (d4fc <att_read_group_req+0x100>)
	data.group = NULL;
    d48e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    d492:	4639      	mov	r1, r7
    d494:	4630      	mov	r0, r6
    d496:	f018 f88c 	bl	255b2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    d49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d49c:	781c      	ldrb	r4, [r3, #0]
    d49e:	bb1c      	cbnz	r4, d4e8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    d4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4a2:	f00f fd61 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d4a6:	230a      	movs	r3, #10
    d4a8:	e018      	b.n	d4dc <att_read_group_req+0xe0>
			*err = 0U;
    d4aa:	463e      	mov	r6, r7
	if (!req) {
    d4ac:	2301      	movs	r3, #1
    d4ae:	4632      	mov	r2, r6
    d4b0:	2110      	movs	r1, #16
    d4b2:	4628      	mov	r0, r5
    d4b4:	f7ff fde0 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d4b8:	2400      	movs	r4, #0
}
    d4ba:	4620      	mov	r0, r4
    d4bc:	b00c      	add	sp, #48	; 0x30
    d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    d4c2:	f642 0301 	movw	r3, #10241	; 0x2801
    d4c6:	a907      	add	r1, sp, #28
    d4c8:	4640      	mov	r0, r8
    d4ca:	f88d 401c 	strb.w	r4, [sp, #28]
    d4ce:	f8ad 301e 	strh.w	r3, [sp, #30]
    d4d2:	f017 fb22 	bl	24b1a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    d4d6:	2800      	cmp	r0, #0
    d4d8:	d0be      	beq.n	d458 <att_read_group_req+0x5c>
	if (!req) {
    d4da:	2310      	movs	r3, #16
    d4dc:	4632      	mov	r2, r6
    d4de:	2110      	movs	r1, #16
    d4e0:	4628      	mov	r0, r5
    d4e2:	f7ff fdc9 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d4e6:	e7e8      	b.n	d4ba <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d4e8:	4a05      	ldr	r2, [pc, #20]	; (d500 <att_read_group_req+0x104>)
    d4ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    d4ec:	4628      	mov	r0, r5
    d4ee:	f018 f9c8 	bl	25882 <bt_att_chan_send_rsp>
	return 0;
    d4f2:	e7e1      	b.n	d4b8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    d4f4:	2404      	movs	r4, #4
    d4f6:	e7e0      	b.n	d4ba <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    d4f8:	240e      	movs	r4, #14
    d4fa:	e7de      	b.n	d4ba <att_read_group_req+0xbe>
    d4fc:	0000cd09 	.word	0x0000cd09
    d500:	000258d3 	.word	0x000258d3

0000d504 <att_read_mult_req>:
{
    d504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d508:	6886      	ldr	r6, [r0, #8]
{
    d50a:	b085      	sub	sp, #20
    d50c:	4604      	mov	r4, r0
    d50e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    d510:	4630      	mov	r0, r6
    d512:	2101      	movs	r1, #1
    d514:	f019 f8fa 	bl	2670c <bt_gatt_change_aware>
    d518:	2800      	cmp	r0, #0
    d51a:	d038      	beq.n	d58e <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
    d51c:	2210      	movs	r2, #16
    d51e:	2100      	movs	r1, #0
    d520:	4668      	mov	r0, sp
    d522:	f017 fa47 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    d526:	2200      	movs	r2, #0
    d528:	210f      	movs	r1, #15
    d52a:	4630      	mov	r0, r6
    d52c:	f7ff ff2e 	bl	d38c <bt_att_create_pdu>
    d530:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d532:	b370      	cbz	r0, d592 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d534:	f8df 9060 	ldr.w	r9, [pc, #96]	; d598 <att_read_mult_req+0x94>
	data.chan = chan;
    d538:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    d53a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d53e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    d542:	89ab      	ldrh	r3, [r5, #12]
    d544:	2b01      	cmp	r3, #1
    d546:	d805      	bhi.n	d554 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d548:	4a14      	ldr	r2, [pc, #80]	; (d59c <att_read_mult_req+0x98>)
    d54a:	9902      	ldr	r1, [sp, #8]
    d54c:	4620      	mov	r0, r4
    d54e:	f018 f998 	bl	25882 <bt_att_chan_send_rsp>
    d552:	e018      	b.n	d586 <att_read_mult_req+0x82>
    d554:	4638      	mov	r0, r7
    d556:	f019 fde8 	bl	2712a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d55a:	466b      	mov	r3, sp
    d55c:	464a      	mov	r2, r9
    d55e:	4601      	mov	r1, r0
    d560:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d562:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d566:	f018 f824 	bl	255b2 <bt_gatt_foreach_attr>
		if (data.err) {
    d56a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d56e:	2b00      	cmp	r3, #0
    d570:	d0e7      	beq.n	d542 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
    d572:	9802      	ldr	r0, [sp, #8]
    d574:	f00f fcf8 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d578:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d57c:	4632      	mov	r2, r6
    d57e:	210e      	movs	r1, #14
    d580:	4620      	mov	r0, r4
    d582:	f7ff fd79 	bl	d078 <send_err_rsp.part.0>
	return 0;
    d586:	2000      	movs	r0, #0
}
    d588:	b005      	add	sp, #20
    d58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d58e:	2012      	movs	r0, #18
    d590:	e7fa      	b.n	d588 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
    d592:	200e      	movs	r0, #14
    d594:	e7f8      	b.n	d588 <att_read_mult_req+0x84>
    d596:	bf00      	nop
    d598:	0002590b 	.word	0x0002590b
    d59c:	000258d3 	.word	0x000258d3

0000d5a0 <att_read_rsp>:
{
    d5a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    d5a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    d5a8:	4605      	mov	r5, r0
    d5aa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    d5ac:	4640      	mov	r0, r8
    d5ae:	2101      	movs	r1, #1
{
    d5b0:	4614      	mov	r4, r2
    d5b2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    d5b4:	f019 f8aa 	bl	2670c <bt_gatt_change_aware>
    d5b8:	b390      	cbz	r0, d620 <att_read_rsp+0x80>
	if (!handle) {
    d5ba:	b39e      	cbz	r6, d624 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    d5bc:	2210      	movs	r2, #16
    d5be:	2100      	movs	r1, #0
    d5c0:	4668      	mov	r0, sp
    d5c2:	f017 f9f7 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    d5c6:	2200      	movs	r2, #0
    d5c8:	4621      	mov	r1, r4
    d5ca:	4640      	mov	r0, r8
    d5cc:	f7ff fede 	bl	d38c <bt_att_create_pdu>
    d5d0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d5d2:	b348      	cbz	r0, d628 <att_read_rsp+0x88>
	data.offset = offset;
    d5d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d5d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d5dc:	2301      	movs	r3, #1
    d5de:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d5e2:	4a12      	ldr	r2, [pc, #72]	; (d62c <att_read_rsp+0x8c>)
	data.chan = chan;
    d5e4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    d5e6:	466b      	mov	r3, sp
    d5e8:	4631      	mov	r1, r6
    d5ea:	4630      	mov	r0, r6
    d5ec:	f017 ffe1 	bl	255b2 <bt_gatt_foreach_attr>
	if (data.err) {
    d5f0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    d5f4:	b174      	cbz	r4, d614 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    d5f6:	9802      	ldr	r0, [sp, #8]
    d5f8:	f00f fcb6 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d5fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d600:	4632      	mov	r2, r6
    d602:	4639      	mov	r1, r7
    d604:	4628      	mov	r0, r5
    d606:	f7ff fd37 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d60a:	2400      	movs	r4, #0
}
    d60c:	4620      	mov	r0, r4
    d60e:	b004      	add	sp, #16
    d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d614:	4a06      	ldr	r2, [pc, #24]	; (d630 <att_read_rsp+0x90>)
    d616:	9902      	ldr	r1, [sp, #8]
    d618:	4628      	mov	r0, r5
    d61a:	f018 f932 	bl	25882 <bt_att_chan_send_rsp>
	return 0;
    d61e:	e7f5      	b.n	d60c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d620:	2412      	movs	r4, #18
    d622:	e7f3      	b.n	d60c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    d624:	2401      	movs	r4, #1
    d626:	e7f1      	b.n	d60c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    d628:	240e      	movs	r4, #14
    d62a:	e7ef      	b.n	d60c <att_read_rsp+0x6c>
    d62c:	0002590b 	.word	0x0002590b
    d630:	000258d3 	.word	0x000258d3

0000d634 <att_read_type_req>:
{
    d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    d638:	898c      	ldrh	r4, [r1, #12]
    d63a:	3c04      	subs	r4, #4
    d63c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    d63e:	2c02      	cmp	r4, #2
{
    d640:	4605      	mov	r5, r0
    d642:	b08c      	sub	sp, #48	; 0x30
    d644:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    d646:	d001      	beq.n	d64c <att_read_type_req+0x18>
    d648:	2c10      	cmp	r4, #16
    d64a:	d150      	bne.n	d6ee <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    d64c:	2104      	movs	r1, #4
    d64e:	3008      	adds	r0, #8
    d650:	f019 fd5b 	bl	2710a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d654:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    d658:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    d65a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    d65c:	1d01      	adds	r1, r0, #4
    d65e:	4622      	mov	r2, r4
    d660:	4640      	mov	r0, r8
    d662:	f017 fa88 	bl	24b76 <bt_uuid_create>
    d666:	b188      	cbz	r0, d68c <att_read_type_req+0x58>
	if (!start || !end) {
    d668:	b19e      	cbz	r6, d692 <att_read_type_req+0x5e>
    d66a:	b18f      	cbz	r7, d690 <att_read_type_req+0x5c>
	if (start > end) {
    d66c:	42be      	cmp	r6, r7
    d66e:	d810      	bhi.n	d692 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    d670:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    d672:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d674:	2100      	movs	r1, #0
    d676:	eb0d 0002 	add.w	r0, sp, r2
    d67a:	f017 f99b 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    d67e:	2201      	movs	r2, #1
    d680:	2109      	movs	r1, #9
    d682:	4620      	mov	r0, r4
    d684:	f7ff fe82 	bl	d38c <bt_att_create_pdu>
    d688:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    d68a:	b968      	cbnz	r0, d6a8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    d68c:	240e      	movs	r4, #14
    d68e:	e007      	b.n	d6a0 <att_read_type_req+0x6c>
			*err = 0U;
    d690:	463e      	mov	r6, r7
	if (!req) {
    d692:	2301      	movs	r3, #1
    d694:	4632      	mov	r2, r6
    d696:	2108      	movs	r1, #8
    d698:	4628      	mov	r0, r5
    d69a:	f7ff fced 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d69e:	2400      	movs	r4, #0
}
    d6a0:	4620      	mov	r0, r4
    d6a2:	b00c      	add	sp, #48	; 0x30
    d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    d6a8:	2101      	movs	r1, #1
    d6aa:	3008      	adds	r0, #8
	data.uuid = uuid;
    d6ac:	e9cd 5806 	strd	r5, r8, [sp, #24]
    d6b0:	f019 fcfa 	bl	270a8 <net_buf_simple_add>
	data.rsp->len = 0U;
    d6b4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d6b8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d6ba:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d6bc:	4a0d      	ldr	r2, [pc, #52]	; (d6f4 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    d6be:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d6c2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d6c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    d6c8:	4630      	mov	r0, r6
    d6ca:	ab06      	add	r3, sp, #24
    d6cc:	f017 ff71 	bl	255b2 <bt_gatt_foreach_attr>
	if (data.err) {
    d6d0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    d6d4:	b12c      	cbz	r4, d6e2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    d6d6:	9808      	ldr	r0, [sp, #32]
    d6d8:	f00f fc46 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d6dc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    d6e0:	e7d8      	b.n	d694 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d6e2:	4a05      	ldr	r2, [pc, #20]	; (d6f8 <att_read_type_req+0xc4>)
    d6e4:	9908      	ldr	r1, [sp, #32]
    d6e6:	4628      	mov	r0, r5
    d6e8:	f018 f8cb 	bl	25882 <bt_att_chan_send_rsp>
	return 0;
    d6ec:	e7d8      	b.n	d6a0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    d6ee:	2404      	movs	r4, #4
    d6f0:	e7d6      	b.n	d6a0 <att_read_type_req+0x6c>
    d6f2:	bf00      	nop
    d6f4:	0000ce91 	.word	0x0000ce91
    d6f8:	000258d3 	.word	0x000258d3

0000d6fc <att_find_type_req>:
{
    d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d700:	4688      	mov	r8, r1
    d702:	b086      	sub	sp, #24
    d704:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    d706:	2106      	movs	r1, #6
    d708:	f108 0008 	add.w	r0, r8, #8
    d70c:	f019 fcfd 	bl	2710a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    d710:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    d712:	b317      	cbz	r7, d75a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d714:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    d718:	f1b9 0f00 	cmp.w	r9, #0
    d71c:	d01c      	beq.n	d758 <att_find_type_req+0x5c>
	if (start > end) {
    d71e:	45b9      	cmp	r9, r7
    d720:	d31b      	bcc.n	d75a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    d722:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d724:	f8ad 3002 	strh.w	r3, [sp, #2]
    d728:	2400      	movs	r4, #0
    d72a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d72e:	a901      	add	r1, sp, #4
    d730:	4668      	mov	r0, sp
	value = buf->data;
    d732:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d736:	f88d 4000 	strb.w	r4, [sp]
    d73a:	f88d 4004 	strb.w	r4, [sp, #4]
    d73e:	f8ad 3006 	strh.w	r3, [sp, #6]
    d742:	f017 f9ea 	bl	24b1a <bt_uuid_cmp>
    d746:	4606      	mov	r6, r0
    d748:	b190      	cbz	r0, d770 <att_find_type_req+0x74>
	if (!req) {
    d74a:	230a      	movs	r3, #10
    d74c:	463a      	mov	r2, r7
    d74e:	2106      	movs	r1, #6
    d750:	4628      	mov	r0, r5
    d752:	f7ff fc91 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d756:	e007      	b.n	d768 <att_find_type_req+0x6c>
			*err = 0U;
    d758:	464f      	mov	r7, r9
	if (!req) {
    d75a:	2301      	movs	r3, #1
    d75c:	463a      	mov	r2, r7
    d75e:	2106      	movs	r1, #6
    d760:	4628      	mov	r0, r5
    d762:	f7ff fc89 	bl	d078 <send_err_rsp.part.0>
		return 0;
    d766:	2400      	movs	r4, #0
}
    d768:	4620      	mov	r0, r4
    d76a:	b006      	add	sp, #24
    d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d770:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    d774:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d778:	4601      	mov	r1, r0
    d77a:	2214      	movs	r2, #20
    d77c:	a801      	add	r0, sp, #4
    d77e:	f017 f919 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    d782:	4632      	mov	r2, r6
    d784:	2107      	movs	r1, #7
    d786:	4640      	mov	r0, r8
    d788:	f7ff fe00 	bl	d38c <bt_att_create_pdu>
    d78c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d78e:	b1e0      	cbz	r0, d7ca <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d790:	230a      	movs	r3, #10
    d792:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d796:	4a0e      	ldr	r2, [pc, #56]	; (d7d0 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    d798:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d79c:	ab01      	add	r3, sp, #4
    d79e:	4649      	mov	r1, r9
    d7a0:	4638      	mov	r0, r7
	data.value = value;
    d7a2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    d7a6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d7a8:	f017 ff03 	bl	255b2 <bt_gatt_foreach_attr>
	if (data.err) {
    d7ac:	f89d 4015 	ldrb.w	r4, [sp, #21]
    d7b0:	b12c      	cbz	r4, d7be <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    d7b2:	9802      	ldr	r0, [sp, #8]
    d7b4:	f00f fbd8 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d7b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d7bc:	e7ce      	b.n	d75c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d7be:	4a05      	ldr	r2, [pc, #20]	; (d7d4 <att_find_type_req+0xd8>)
    d7c0:	9902      	ldr	r1, [sp, #8]
    d7c2:	4628      	mov	r0, r5
    d7c4:	f018 f85d 	bl	25882 <bt_att_chan_send_rsp>
	return 0;
    d7c8:	e7ce      	b.n	d768 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    d7ca:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d7cc:	e7cc      	b.n	d768 <att_find_type_req+0x6c>
    d7ce:	bf00      	nop
    d7d0:	0000ca75 	.word	0x0000ca75
    d7d4:	000258d3 	.word	0x000258d3

0000d7d8 <att_find_info_req>:
{
    d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    d7da:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    d7dc:	881e      	ldrh	r6, [r3, #0]
{
    d7de:	b085      	sub	sp, #20
    d7e0:	4605      	mov	r5, r0
	if (!start || !end) {
    d7e2:	b19e      	cbz	r6, d80c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d7e4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    d7e6:	b184      	cbz	r4, d80a <att_find_info_req+0x32>
	if (start > end) {
    d7e8:	42a6      	cmp	r6, r4
    d7ea:	d80f      	bhi.n	d80c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    d7ec:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    d7ee:	2210      	movs	r2, #16
    d7f0:	2100      	movs	r1, #0
    d7f2:	4668      	mov	r0, sp
    d7f4:	f017 f8de 	bl	249b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    d7f8:	2200      	movs	r2, #0
    d7fa:	2105      	movs	r1, #5
    d7fc:	4638      	mov	r0, r7
    d7fe:	f7ff fdc5 	bl	d38c <bt_att_create_pdu>
    d802:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    d804:	b958      	cbnz	r0, d81e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    d806:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    d808:	e007      	b.n	d81a <att_find_info_req+0x42>
			*err = 0U;
    d80a:	4626      	mov	r6, r4
	if (!req) {
    d80c:	2301      	movs	r3, #1
    d80e:	4632      	mov	r2, r6
    d810:	2104      	movs	r1, #4
    d812:	4628      	mov	r0, r5
    d814:	f7ff fc30 	bl	d078 <send_err_rsp.part.0>
	return 0;
    d818:	2000      	movs	r0, #0
}
    d81a:	b005      	add	sp, #20
    d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d81e:	4621      	mov	r1, r4
    d820:	4a09      	ldr	r2, [pc, #36]	; (d848 <att_find_info_req+0x70>)
	data.chan = chan;
    d822:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d824:	466b      	mov	r3, sp
    d826:	4630      	mov	r0, r6
    d828:	f017 fec3 	bl	255b2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    d82c:	9c02      	ldr	r4, [sp, #8]
    d82e:	b924      	cbnz	r4, d83a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    d830:	9801      	ldr	r0, [sp, #4]
    d832:	f00f fb99 	bl	1cf68 <net_buf_unref>
	if (!req) {
    d836:	230a      	movs	r3, #10
    d838:	e7e9      	b.n	d80e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d83a:	4a04      	ldr	r2, [pc, #16]	; (d84c <att_find_info_req+0x74>)
    d83c:	9901      	ldr	r1, [sp, #4]
    d83e:	4628      	mov	r0, r5
    d840:	f018 f81f 	bl	25882 <bt_att_chan_send_rsp>
    d844:	e7e8      	b.n	d818 <att_find_info_req+0x40>
    d846:	bf00      	nop
    d848:	000255c9 	.word	0x000255c9
    d84c:	000258d3 	.word	0x000258d3

0000d850 <att_mtu_req>:
{
    d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    d852:	6803      	ldr	r3, [r0, #0]
{
    d854:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
    d856:	6818      	ldr	r0, [r3, #0]
    d858:	f3bf 8f5b 	dmb	ish
    d85c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    d860:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d864:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    d868:	071b      	lsls	r3, r3, #28
    d86a:	d421      	bmi.n	d8b0 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
    d86c:	688b      	ldr	r3, [r1, #8]
    d86e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d870:	2e16      	cmp	r6, #22
    d872:	d91f      	bls.n	d8b4 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    d874:	2202      	movs	r2, #2
    d876:	2103      	movs	r1, #3
    d878:	f7ff fd88 	bl	d38c <bt_att_create_pdu>
	if (!pdu) {
    d87c:	4607      	mov	r7, r0
    d87e:	b1d8      	cbz	r0, d8b8 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
    d880:	2102      	movs	r1, #2
    d882:	3008      	adds	r0, #8
    d884:	f019 fc10 	bl	270a8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d888:	2341      	movs	r3, #65	; 0x41
    d88a:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d88c:	4a0b      	ldr	r2, [pc, #44]	; (d8bc <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d88e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d890:	4639      	mov	r1, r7
    d892:	4620      	mov	r0, r4
    d894:	f017 fff5 	bl	25882 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d898:	2e41      	cmp	r6, #65	; 0x41
    d89a:	bf28      	it	cs
    d89c:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
    d89e:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d8a0:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    d8a4:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
    d8a8:	f017 fe4d 	bl	25546 <att_chan_mtu_updated>
	return 0;
    d8ac:	4628      	mov	r0, r5
}
    d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    d8b0:	2006      	movs	r0, #6
    d8b2:	e7fc      	b.n	d8ae <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
    d8b4:	2004      	movs	r0, #4
    d8b6:	e7fa      	b.n	d8ae <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
    d8b8:	200e      	movs	r0, #14
    d8ba:	e7f8      	b.n	d8ae <att_mtu_req+0x5e>
    d8bc:	000258d3 	.word	0x000258d3

0000d8c0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    d8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    d8c2:	2300      	movs	r3, #0
{
    d8c4:	4605      	mov	r5, r0
    d8c6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    d8c8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    d8ca:	f014 fb93 	bl	21ff4 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    d8ce:	4b0b      	ldr	r3, [pc, #44]	; (d8fc <bt_att_req_alloc+0x3c>)
    d8d0:	681b      	ldr	r3, [r3, #0]
    d8d2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    d8d4:	bf04      	itt	eq
    d8d6:	2500      	moveq	r5, #0
    d8d8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d8da:	a901      	add	r1, sp, #4
    d8dc:	4808      	ldr	r0, [pc, #32]	; (d900 <bt_att_req_alloc+0x40>)
    d8de:	462a      	mov	r2, r5
    d8e0:	4623      	mov	r3, r4
    d8e2:	f013 fc97 	bl	21214 <k_mem_slab_alloc>
    d8e6:	4601      	mov	r1, r0
    d8e8:	b930      	cbnz	r0, d8f8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    d8ea:	9801      	ldr	r0, [sp, #4]
    d8ec:	221c      	movs	r2, #28
    d8ee:	f017 f861 	bl	249b4 <memset>

	return req;
    d8f2:	9801      	ldr	r0, [sp, #4]
}
    d8f4:	b003      	add	sp, #12
    d8f6:	bd30      	pop	{r4, r5, pc}
		return NULL;
    d8f8:	2000      	movs	r0, #0
    d8fa:	e7fb      	b.n	d8f4 <bt_att_req_alloc+0x34>
    d8fc:	200020b0 	.word	0x200020b0
    d900:	200009a4 	.word	0x200009a4

0000d904 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    d904:	b507      	push	{r0, r1, r2, lr}
    d906:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    d908:	6880      	ldr	r0, [r0, #8]
    d90a:	b120      	cbz	r0, d916 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    d90c:	f00f fb2c 	bl	1cf68 <net_buf_unref>
		req->buf = NULL;
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	2200      	movs	r2, #0
    d914:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    d916:	4803      	ldr	r0, [pc, #12]	; (d924 <bt_att_req_free+0x20>)
    d918:	a901      	add	r1, sp, #4
    d91a:	f01a f915 	bl	27b48 <k_mem_slab_free>
}
    d91e:	b003      	add	sp, #12
    d920:	f85d fb04 	ldr.w	pc, [sp], #4
    d924:	200009a4 	.word	0x200009a4

0000d928 <att_handle_rsp>:
{
    d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d92c:	4604      	mov	r4, r0
    d92e:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
    d930:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    d934:	4689      	mov	r9, r1
    d936:	4692      	mov	sl, r2
    d938:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
    d93a:	f01a fad0 	bl	27ede <k_work_cancel_delayable>
	if (!chan->req) {
    d93e:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    d942:	b9dd      	cbnz	r5, d97c <att_handle_rsp+0x54>
		BT_WARN("No pending ATT request");
    d944:	4b17      	ldr	r3, [pc, #92]	; (d9a4 <att_handle_rsp+0x7c>)
    d946:	9308      	str	r3, [sp, #32]
    d948:	4817      	ldr	r0, [pc, #92]	; (d9a8 <att_handle_rsp+0x80>)
    d94a:	2302      	movs	r3, #2
    d94c:	aa07      	add	r2, sp, #28
    d94e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
    d952:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
    d954:	9303      	str	r3, [sp, #12]
    d956:	9307      	str	r3, [sp, #28]
    d958:	f017 fecf 	bl	256fa <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
    d95c:	6820      	ldr	r0, [r4, #0]
    d95e:	f018 f83b 	bl	259d8 <att_req_send_process>
	if (func) {
    d962:	b13e      	cbz	r6, d974 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    d964:	6820      	ldr	r0, [r4, #0]
    d966:	f8cd b000 	str.w	fp, [sp]
    d96a:	6800      	ldr	r0, [r0, #0]
    d96c:	4653      	mov	r3, sl
    d96e:	464a      	mov	r2, r9
    d970:	4641      	mov	r1, r8
    d972:	47b0      	blx	r6
}
    d974:	2000      	movs	r0, #0
    d976:	b00b      	add	sp, #44	; 0x2c
    d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    d97c:	4b0b      	ldr	r3, [pc, #44]	; (d9ac <att_handle_rsp+0x84>)
    d97e:	429d      	cmp	r5, r3
    d980:	f04f 0700 	mov.w	r7, #0
    d984:	d103      	bne.n	d98e <att_handle_rsp+0x66>
		chan->req = NULL;
    d986:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    d98a:	463e      	mov	r6, r7
		goto process;
    d98c:	e7e6      	b.n	d95c <att_handle_rsp+0x34>
	func = chan->req->func;
    d98e:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
    d990:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
    d992:	4628      	mov	r0, r5
	params = chan->req->user_data;
    d994:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
    d998:	f7ff ffb4 	bl	d904 <bt_att_req_free>
	chan->req = NULL;
    d99c:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
    d9a0:	e7dc      	b.n	d95c <att_handle_rsp+0x34>
    d9a2:	bf00      	nop
    d9a4:	0002bece 	.word	0x0002bece
    d9a8:	00028890 	.word	0x00028890
    d9ac:	20002120 	.word	0x20002120

0000d9b0 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    d9b0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
    d9b4:	b570      	push	{r4, r5, r6, lr}
    d9b6:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    d9b8:	b313      	cbz	r3, da00 <att_error_rsp+0x50>
    d9ba:	4a16      	ldr	r2, [pc, #88]	; (da14 <att_error_rsp+0x64>)
    d9bc:	4293      	cmp	r3, r2
    d9be:	d01f      	beq.n	da00 <att_error_rsp+0x50>
	err = rsp->error;
    d9c0:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d9c2:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
    d9c4:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
    d9c6:	2d05      	cmp	r5, #5
    d9c8:	d006      	beq.n	d9d8 <att_error_rsp+0x28>
    d9ca:	2d0f      	cmp	r5, #15
    d9cc:	d119      	bne.n	da02 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
    d9ce:	7a43      	ldrb	r3, [r0, #9]
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d816      	bhi.n	da02 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
    d9d4:	2102      	movs	r1, #2
    d9d6:	e007      	b.n	d9e8 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
    d9d8:	7a43      	ldrb	r3, [r0, #9]
    d9da:	2b01      	cmp	r3, #1
    d9dc:	d9fa      	bls.n	d9d4 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    d9de:	2b02      	cmp	r3, #2
    d9e0:	d00c      	beq.n	d9fc <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    d9e2:	2b03      	cmp	r3, #3
    d9e4:	d10d      	bne.n	da02 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
    d9e6:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    d9e8:	f017 fbd7 	bl	2519a <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d9ec:	b948      	cbnz	r0, da02 <att_error_rsp+0x52>
		chan->req->retrying = true;
    d9ee:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
    d9f2:	7c13      	ldrb	r3, [r2, #16]
    d9f4:	f043 0301 	orr.w	r3, r3, #1
    d9f8:	7413      	strb	r3, [r2, #16]
}
    d9fa:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    d9fc:	2103      	movs	r1, #3
    d9fe:	e7f3      	b.n	d9e8 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
    da00:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    da02:	2200      	movs	r2, #0
    da04:	462b      	mov	r3, r5
    da06:	4620      	mov	r0, r4
    da08:	4611      	mov	r1, r2
}
    da0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    da0e:	f7ff bf8b 	b.w	d928 <att_handle_rsp>
    da12:	bf00      	nop
    da14:	20002120 	.word	0x20002120

0000da18 <bt_att_disconnected>:
{
    da18:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    da1a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    da1e:	b085      	sub	sp, #20
    da20:	4604      	mov	r4, r0
	if (!att_chan->att) {
    da22:	2d00      	cmp	r5, #0
    da24:	d04d      	beq.n	dac2 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    da26:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    da2a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    da2e:	f017 ff36 	bl	2589e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    da32:	f1a4 0608 	sub.w	r6, r4, #8
    da36:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    da3a:	2200      	movs	r2, #0
    da3c:	2300      	movs	r3, #0
    da3e:	4638      	mov	r0, r7
    da40:	f019 facf 	bl	26fe2 <net_buf_get>
    da44:	4602      	mov	r2, r0
    da46:	bb18      	cbnz	r0, da90 <bt_att_disconnected+0x78>
	if (chan->req) {
    da48:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    da4c:	b123      	cbz	r3, da58 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    da4e:	4601      	mov	r1, r0
    da50:	230e      	movs	r3, #14
    da52:	4630      	mov	r0, r6
    da54:	f7ff ff68 	bl	d928 <att_handle_rsp>
	chan->att = NULL;
    da58:	2300      	movs	r3, #0
    da5a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    da5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    da60:	2b00      	cmp	r3, #0
    da62:	d12e      	bne.n	dac2 <bt_att_disconnected+0xaa>
	att_reset(att);
    da64:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    da66:	9803      	ldr	r0, [sp, #12]
    da68:	2200      	movs	r2, #0
    da6a:	2300      	movs	r3, #0
    da6c:	300c      	adds	r0, #12
    da6e:	f019 fab8 	bl	26fe2 <net_buf_get>
    da72:	b980      	cbnz	r0, da96 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    da74:	9803      	ldr	r0, [sp, #12]
	return list->head;
    da76:	6845      	ldr	r5, [r0, #4]
    da78:	b985      	cbnz	r5, da9c <bt_att_disconnected+0x84>
	att->conn = NULL;
    da7a:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    da7c:	a903      	add	r1, sp, #12
    da7e:	4812      	ldr	r0, [pc, #72]	; (dac8 <bt_att_disconnected+0xb0>)
    da80:	f01a f862 	bl	27b48 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    da84:	6820      	ldr	r0, [r4, #0]
}
    da86:	b005      	add	sp, #20
    da88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    da8c:	f001 bbc2 	b.w	f214 <bt_gatt_disconnected>
		net_buf_unref(buf);
    da90:	f00f fa6a 	bl	1cf68 <net_buf_unref>
    da94:	e7d1      	b.n	da3a <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    da96:	f00f fa67 	bl	1cf68 <net_buf_unref>
    da9a:	e7e4      	b.n	da66 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    da9c:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    da9e:	686e      	ldr	r6, [r5, #4]
	return node->next;
    daa0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    daa2:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    daa4:	4295      	cmp	r5, r2
	list->tail = node;
    daa6:	bf08      	it	eq
    daa8:	6083      	streq	r3, [r0, #8]
    daaa:	b136      	cbz	r6, daba <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    daac:	69ab      	ldr	r3, [r5, #24]
    daae:	9300      	str	r3, [sp, #0]
    dab0:	2300      	movs	r3, #0
    dab2:	6800      	ldr	r0, [r0, #0]
    dab4:	461a      	mov	r2, r3
    dab6:	210e      	movs	r1, #14
    dab8:	47b0      	blx	r6
		bt_att_req_free(req);
    daba:	4628      	mov	r0, r5
    dabc:	f7ff ff22 	bl	d904 <bt_att_req_free>
    dac0:	e7d8      	b.n	da74 <bt_att_disconnected+0x5c>
}
    dac2:	b005      	add	sp, #20
    dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dac6:	bf00      	nop
    dac8:	20000950 	.word	0x20000950

0000dacc <att_timeout>:
{
    dacc:	b510      	push	{r4, lr}
    dace:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
    dad0:	4b09      	ldr	r3, [pc, #36]	; (daf8 <att_timeout+0x2c>)
    dad2:	9306      	str	r3, [sp, #24]
{
    dad4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    dad6:	2302      	movs	r3, #2
    dad8:	4808      	ldr	r0, [pc, #32]	; (dafc <att_timeout+0x30>)
    dada:	9301      	str	r3, [sp, #4]
    dadc:	aa05      	add	r2, sp, #20
    dade:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dae2:	9305      	str	r3, [sp, #20]
    dae4:	f017 fe09 	bl	256fa <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
    dae8:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    daec:	b008      	add	sp, #32
    daee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    daf2:	f7ff bf91 	b.w	da18 <bt_att_disconnected>
    daf6:	bf00      	nop
    daf8:	0002bee5 	.word	0x0002bee5
    dafc:	00028890 	.word	0x00028890

0000db00 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    db00:	b510      	push	{r4, lr}
    db02:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    db04:	b330      	cbz	r0, db54 <bt_att_req_cancel+0x54>
    db06:	b329      	cbz	r1, db54 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
    db08:	f7ff f864 	bl	cbd4 <att_get>
	if (!att) {
    db0c:	b310      	cbz	r0, db54 <bt_att_req_cancel+0x54>
	return list->head;
    db0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    db10:	b153      	cbz	r3, db28 <bt_att_req_cancel+0x28>
    db12:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
    db16:	681b      	ldr	r3, [r3, #0]
    db18:	b10b      	cbz	r3, db1e <bt_att_req_cancel+0x1e>
    db1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
    db1e:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
    db22:	4294      	cmp	r4, r2
    db24:	d006      	beq.n	db34 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    db26:	b96b      	cbnz	r3, db44 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    db28:	3004      	adds	r0, #4
    db2a:	4621      	mov	r1, r4
    db2c:	f017 feb7 	bl	2589e <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
    db30:	4620      	mov	r0, r4
    db32:	e003      	b.n	db3c <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
    db34:	4b08      	ldr	r3, [pc, #32]	; (db58 <bt_att_req_cancel+0x58>)
    db36:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
    db3a:	4620      	mov	r0, r4
}
    db3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    db40:	f7ff bee0 	b.w	d904 <bt_att_req_free>
    db44:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    db48:	b10a      	cbz	r2, db4e <bt_att_req_cancel+0x4e>
    db4a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
    db4e:	4619      	mov	r1, r3
    db50:	4613      	mov	r3, r2
    db52:	e7e4      	b.n	db1e <bt_att_req_cancel+0x1e>
}
    db54:	bd10      	pop	{r4, pc}
    db56:	bf00      	nop
    db58:	20002120 	.word	0x20002120

0000db5c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    db5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db5e:	4c15      	ldr	r4, [pc, #84]	; (dbb4 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    db60:	4605      	mov	r5, r0
    db62:	b140      	cbz	r0, db76 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    db64:	4622      	mov	r2, r4
    db66:	f812 1b01 	ldrb.w	r1, [r2], #1
    db6a:	f017 fb48 	bl	251fe <bt_conn_is_peer_addr_le>
    db6e:	b1b0      	cbz	r0, db9e <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    db70:	4620      	mov	r0, r4
    db72:	b003      	add	sp, #12
    db74:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    db76:	9000      	str	r0, [sp, #0]
    db78:	4669      	mov	r1, sp
    db7a:	f8cd 0003 	str.w	r0, [sp, #3]
    db7e:	1c60      	adds	r0, r4, #1
    db80:	f018 f93e 	bl	25e00 <bt_addr_le_cmp>
    db84:	2800      	cmp	r0, #0
    db86:	d0f3      	beq.n	db70 <find_cf_cfg+0x14>
    db88:	4669      	mov	r1, sp
    db8a:	f104 0011 	add.w	r0, r4, #17
    db8e:	9500      	str	r5, [sp, #0]
    db90:	f8cd 5003 	str.w	r5, [sp, #3]
    db94:	f018 f934 	bl	25e00 <bt_addr_le_cmp>
    db98:	b948      	cbnz	r0, dbae <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    db9a:	3410      	adds	r4, #16
    db9c:	e7e8      	b.n	db70 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    db9e:	7c21      	ldrb	r1, [r4, #16]
    dba0:	f104 0211 	add.w	r2, r4, #17
    dba4:	4628      	mov	r0, r5
    dba6:	f017 fb2a 	bl	251fe <bt_conn_is_peer_addr_le>
    dbaa:	2800      	cmp	r0, #0
    dbac:	d1f5      	bne.n	db9a <find_cf_cfg+0x3e>
	return NULL;
    dbae:	2400      	movs	r4, #0
    dbb0:	e7de      	b.n	db70 <find_cf_cfg+0x14>
    dbb2:	bf00      	nop
    dbb4:	20002144 	.word	0x20002144

0000dbb8 <find_sc_cfg>:
{
    dbb8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    dbba:	4c0d      	ldr	r4, [pc, #52]	; (dbf0 <find_sc_cfg+0x38>)
    dbbc:	7823      	ldrb	r3, [r4, #0]
    dbbe:	4283      	cmp	r3, r0
{
    dbc0:	4605      	mov	r5, r0
    dbc2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    dbc4:	d009      	beq.n	dbda <find_sc_cfg+0x22>
    dbc6:	7b23      	ldrb	r3, [r4, #12]
    dbc8:	42ab      	cmp	r3, r5
    dbca:	d10f      	bne.n	dbec <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    dbcc:	4809      	ldr	r0, [pc, #36]	; (dbf4 <find_sc_cfg+0x3c>)
    dbce:	4631      	mov	r1, r6
    dbd0:	f018 f916 	bl	25e00 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    dbd4:	b950      	cbnz	r0, dbec <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dbd6:	2001      	movs	r0, #1
    dbd8:	e004      	b.n	dbe4 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    dbda:	1c60      	adds	r0, r4, #1
    dbdc:	f018 f910 	bl	25e00 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    dbe0:	2800      	cmp	r0, #0
    dbe2:	d1f0      	bne.n	dbc6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    dbe4:	230c      	movs	r3, #12
    dbe6:	fb03 4000 	mla	r0, r3, r0, r4
    dbea:	e000      	b.n	dbee <find_sc_cfg+0x36>
	return NULL;
    dbec:	2000      	movs	r0, #0
}
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    dbf0:	20003dc0 	.word	0x20003dc0
    dbf4:	20003dcd 	.word	0x20003dcd

0000dbf8 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    dbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dbfa:	4c15      	ldr	r4, [pc, #84]	; (dc50 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    dbfc:	4605      	mov	r5, r0
    dbfe:	b140      	cbz	r0, dc12 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    dc00:	4622      	mov	r2, r4
    dc02:	f812 1b01 	ldrb.w	r1, [r2], #1
    dc06:	f017 fafa 	bl	251fe <bt_conn_is_peer_addr_le>
    dc0a:	b1b0      	cbz	r0, dc3a <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    dc0c:	4620      	mov	r0, r4
    dc0e:	b003      	add	sp, #12
    dc10:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    dc12:	9000      	str	r0, [sp, #0]
    dc14:	4669      	mov	r1, sp
    dc16:	f8cd 0003 	str.w	r0, [sp, #3]
    dc1a:	1c60      	adds	r0, r4, #1
    dc1c:	f018 f8f0 	bl	25e00 <bt_addr_le_cmp>
    dc20:	2800      	cmp	r0, #0
    dc22:	d0f3      	beq.n	dc0c <gatt_sub_find+0x14>
    dc24:	4669      	mov	r1, sp
    dc26:	f104 0011 	add.w	r0, r4, #17
    dc2a:	9500      	str	r5, [sp, #0]
    dc2c:	f8cd 5003 	str.w	r5, [sp, #3]
    dc30:	f018 f8e6 	bl	25e00 <bt_addr_le_cmp>
    dc34:	b948      	cbnz	r0, dc4a <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    dc36:	3410      	adds	r4, #16
    dc38:	e7e8      	b.n	dc0c <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    dc3a:	7c21      	ldrb	r1, [r4, #16]
    dc3c:	f104 0211 	add.w	r2, r4, #17
    dc40:	4628      	mov	r0, r5
    dc42:	f017 fadc 	bl	251fe <bt_conn_is_peer_addr_le>
    dc46:	2800      	cmp	r0, #0
    dc48:	d1f5      	bne.n	dc36 <gatt_sub_find+0x3e>
	return NULL;
    dc4a:	2400      	movs	r4, #0
    dc4c:	e7de      	b.n	dc0c <gatt_sub_find+0x14>
    dc4e:	bf00      	nop
    dc50:	20002184 	.word	0x20002184

0000dc54 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    dc54:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    dc56:	2312      	movs	r3, #18
{
    dc58:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    dc5a:	2104      	movs	r1, #4
    dc5c:	e9cd 3100 	strd	r3, r1, [sp]
    dc60:	4b03      	ldr	r3, [pc, #12]	; (dc70 <gatt_write_ccc+0x1c>)
    dc62:	4904      	ldr	r1, [pc, #16]	; (dc74 <gatt_write_ccc+0x20>)
    dc64:	f018 f929 	bl	25eba <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
    dc68:	b003      	add	sp, #12
    dc6a:	f85d fb04 	ldr.w	pc, [sp], #4
    dc6e:	bf00      	nop
    dc70:	00026131 	.word	0x00026131
    dc74:	0002615b 	.word	0x0002615b

0000dc78 <bt_gatt_attr_write_ccc>:
{
    dc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dc7c:	b089      	sub	sp, #36	; 0x24
    dc7e:	461f      	mov	r7, r3
    dc80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    dc84:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    dc88:	4606      	mov	r6, r0
    dc8a:	4688      	mov	r8, r1
	if (offset) {
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d14f      	bne.n	dd30 <bt_gatt_attr_write_ccc+0xb8>
	if (!len || len > sizeof(uint16_t)) {
    dc90:	1e7b      	subs	r3, r7, #1
    dc92:	2b01      	cmp	r3, #1
    dc94:	d84f      	bhi.n	dd36 <bt_gatt_attr_write_ccc+0xbe>
		value = *(uint8_t *)buf;
    dc96:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    dc98:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    dc9a:	4649      	mov	r1, r9
    dc9c:	bf14      	ite	ne
    dc9e:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    dca0:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    dca2:	f018 f8b0 	bl	25e06 <find_ccc_cfg>
	if (!cfg) {
    dca6:	4604      	mov	r4, r0
    dca8:	b9f0      	cbnz	r0, dce8 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    dcaa:	b91d      	cbnz	r5, dcb4 <bt_gatt_attr_write_ccc+0x3c>
			return len;
    dcac:	4638      	mov	r0, r7
}
    dcae:	b009      	add	sp, #36	; 0x24
    dcb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    dcb4:	4649      	mov	r1, r9
    dcb6:	f018 f8a6 	bl	25e06 <find_ccc_cfg>
		if (!cfg) {
    dcba:	4604      	mov	r4, r0
    dcbc:	b968      	cbnz	r0, dcda <bt_gatt_attr_write_ccc+0x62>
			BT_WARN("No space to store CCC cfg");
    dcbe:	4b1f      	ldr	r3, [pc, #124]	; (dd3c <bt_gatt_attr_write_ccc+0xc4>)
    dcc0:	481f      	ldr	r0, [pc, #124]	; (dd40 <bt_gatt_attr_write_ccc+0xc8>)
    dcc2:	9306      	str	r3, [sp, #24]
    dcc4:	aa05      	add	r2, sp, #20
    dcc6:	2302      	movs	r3, #2
    dcc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dccc:	9301      	str	r3, [sp, #4]
    dcce:	9305      	str	r3, [sp, #20]
    dcd0:	f018 f9be 	bl	26050 <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    dcd4:	f06f 0010 	mvn.w	r0, #16
    dcd8:	e7e9      	b.n	dcae <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    dcda:	f106 0188 	add.w	r1, r6, #136	; 0x88
    dcde:	3001      	adds	r0, #1
    dce0:	f018 f8bd 	bl	25e5e <bt_addr_le_copy>
		cfg->id = conn->id;
    dce4:	7a33      	ldrb	r3, [r6, #8]
    dce6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    dce8:	f8d9 301c 	ldr.w	r3, [r9, #28]
    dcec:	b9a3      	cbnz	r3, dd18 <bt_gatt_attr_write_ccc+0xa0>
	if (cfg->value != ccc->value) {
    dcee:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    dcf2:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    dcf4:	42ab      	cmp	r3, r5
    dcf6:	d003      	beq.n	dd00 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    dcf8:	4649      	mov	r1, r9
    dcfa:	4640      	mov	r0, r8
    dcfc:	f018 f800 	bl	25d00 <gatt_ccc_changed>
	if (!value) {
    dd00:	2d00      	cmp	r5, #0
    dd02:	d1d3      	bne.n	dcac <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    dd04:	a902      	add	r1, sp, #8
    dd06:	1c60      	adds	r0, r4, #1
    dd08:	9502      	str	r5, [sp, #8]
    dd0a:	f8cd 500b 	str.w	r5, [sp, #11]
    dd0e:	f018 f8a6 	bl	25e5e <bt_addr_le_copy>
	cfg->id = 0U;
    dd12:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    dd14:	8125      	strh	r5, [r4, #8]
}
    dd16:	e7c9      	b.n	dcac <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    dd18:	462a      	mov	r2, r5
    dd1a:	4641      	mov	r1, r8
    dd1c:	4630      	mov	r0, r6
    dd1e:	4798      	blx	r3
		if (write < 0) {
    dd20:	2800      	cmp	r0, #0
    dd22:	dbc4      	blt.n	dcae <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
    dd24:	3801      	subs	r0, #1
    dd26:	2801      	cmp	r0, #1
    dd28:	d9e1      	bls.n	dcee <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    dd2a:	f06f 000d 	mvn.w	r0, #13
    dd2e:	e7be      	b.n	dcae <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    dd30:	f06f 0006 	mvn.w	r0, #6
    dd34:	e7bb      	b.n	dcae <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    dd36:	f06f 000c 	mvn.w	r0, #12
    dd3a:	e7b8      	b.n	dcae <bt_gatt_attr_write_ccc+0x36>
    dd3c:	0002bef8 	.word	0x0002bef8
    dd40:	00028968 	.word	0x00028968

0000dd44 <sc_save>:
{
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	b08a      	sub	sp, #40	; 0x28
    dd4a:	4680      	mov	r8, r0
    dd4c:	460f      	mov	r7, r1
    dd4e:	4616      	mov	r6, r2
    dd50:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    dd52:	f7ff ff31 	bl	dbb8 <find_sc_cfg>
	if (!cfg) {
    dd56:	4604      	mov	r4, r0
    dd58:	b9d0      	cbnz	r0, dd90 <sc_save+0x4c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    dd5a:	a902      	add	r1, sp, #8
    dd5c:	9002      	str	r0, [sp, #8]
    dd5e:	f8cd 000b 	str.w	r0, [sp, #11]
    dd62:	f7ff ff29 	bl	dbb8 <find_sc_cfg>
		if (!cfg) {
    dd66:	4604      	mov	r4, r0
    dd68:	b968      	cbnz	r0, dd86 <sc_save+0x42>
			BT_ERR("unable to save SC: no cfg left");
    dd6a:	4b10      	ldr	r3, [pc, #64]	; (ddac <sc_save+0x68>)
    dd6c:	9308      	str	r3, [sp, #32]
    dd6e:	4810      	ldr	r0, [pc, #64]	; (ddb0 <sc_save+0x6c>)
    dd70:	2302      	movs	r3, #2
    dd72:	aa07      	add	r2, sp, #28
    dd74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dd78:	9301      	str	r3, [sp, #4]
    dd7a:	9307      	str	r3, [sp, #28]
    dd7c:	f018 f968 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    dd80:	b00a      	add	sp, #40	; 0x28
    dd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    dd86:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    dd8a:	4639      	mov	r1, r7
    dd8c:	f018 f867 	bl	25e5e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    dd90:	8922      	ldrh	r2, [r4, #8]
    dd92:	8963      	ldrh	r3, [r4, #10]
    dd94:	b91a      	cbnz	r2, dd9e <sc_save+0x5a>
    dd96:	b923      	cbnz	r3, dda2 <sc_save+0x5e>
		cfg->data.start = start;
    dd98:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    dd9a:	8165      	strh	r5, [r4, #10]
    dd9c:	e7f0      	b.n	dd80 <sc_save+0x3c>
	if (new_start >= *start && new_end <= *end) {
    dd9e:	4296      	cmp	r6, r2
    dda0:	d302      	bcc.n	dda8 <sc_save+0x64>
    dda2:	429d      	cmp	r5, r3
    dda4:	d9ec      	bls.n	dd80 <sc_save+0x3c>
    dda6:	e7f8      	b.n	dd9a <sc_save+0x56>
		*start = new_start;
    dda8:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    ddaa:	e7fa      	b.n	dda2 <sc_save+0x5e>
    ddac:	0002bf12 	.word	0x0002bf12
    ddb0:	00028968 	.word	0x00028968

0000ddb4 <cf_write>:
{
    ddb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddb8:	b088      	sub	sp, #32
    ddba:	4698      	mov	r8, r3
    ddbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
    ddc0:	2b01      	cmp	r3, #1
{
    ddc2:	4606      	mov	r6, r0
    ddc4:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    ddc6:	d83f      	bhi.n	de48 <cf_write+0x94>
	if (offset + len > sizeof(cfg->data)) {
    ddc8:	4443      	add	r3, r8
    ddca:	2b01      	cmp	r3, #1
    ddcc:	4645      	mov	r5, r8
    ddce:	dc3e      	bgt.n	de4e <cf_write+0x9a>
	cfg = find_cf_cfg(conn);
    ddd0:	f7ff fec4 	bl	db5c <find_cf_cfg>
	if (!cfg) {
    ddd4:	4604      	mov	r4, r0
    ddd6:	b918      	cbnz	r0, dde0 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
    ddd8:	f7ff fec0 	bl	db5c <find_cf_cfg>
	if (!cfg) {
    dddc:	4604      	mov	r4, r0
    ddde:	b180      	cbz	r0, de02 <cf_write+0x4e>
{
    dde0:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    dde2:	f1b8 0f00 	cmp.w	r8, #0
    dde6:	d11d      	bne.n	de24 <cf_write+0x70>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    dde8:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ddec:	1c60      	adds	r0, r4, #1
    ddee:	f018 f836 	bl	25e5e <bt_addr_le_copy>
	cfg->id = conn->id;
    ddf2:	4620      	mov	r0, r4
    ddf4:	7a33      	ldrb	r3, [r6, #8]
    ddf6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    ddfa:	2100      	movs	r1, #0
    ddfc:	f018 f96e 	bl	260dc <atomic_set_bit>
	return len;
    de00:	e00c      	b.n	de1c <cf_write+0x68>
		BT_WARN("No space to store Client Supported Features");
    de02:	4b16      	ldr	r3, [pc, #88]	; (de5c <cf_write+0xa8>)
    de04:	9306      	str	r3, [sp, #24]
    de06:	4816      	ldr	r0, [pc, #88]	; (de60 <cf_write+0xac>)
    de08:	2302      	movs	r3, #2
    de0a:	aa05      	add	r2, sp, #20
    de0c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    de10:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
    de14:	9301      	str	r3, [sp, #4]
    de16:	9305      	str	r3, [sp, #20]
    de18:	f018 f91a 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    de1c:	4628      	mov	r0, r5
    de1e:	b008      	add	sp, #32
    de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    de24:	7a20      	ldrb	r0, [r4, #8]
    de26:	fa20 f301 	lsr.w	r3, r0, r1
    de2a:	07da      	lsls	r2, r3, #31
    de2c:	d503      	bpl.n	de36 <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
    de2e:	783b      	ldrb	r3, [r7, #0]
    de30:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    de32:	07db      	lsls	r3, r3, #31
    de34:	d50e      	bpl.n	de54 <cf_write+0xa0>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    de36:	3101      	adds	r1, #1
    de38:	2903      	cmp	r1, #3
    de3a:	d1d2      	bne.n	dde2 <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    de3c:	783b      	ldrb	r3, [r7, #0]
    de3e:	f003 0307 	and.w	r3, r3, #7
    de42:	4318      	orrs	r0, r3
    de44:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    de46:	e7cf      	b.n	dde8 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    de48:	f06f 0506 	mvn.w	r5, #6
    de4c:	e7e6      	b.n	de1c <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    de4e:	f06f 050c 	mvn.w	r5, #12
    de52:	e7e3      	b.n	de1c <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    de54:	f06f 0512 	mvn.w	r5, #18
    de58:	e7e0      	b.n	de1c <cf_write+0x68>
    de5a:	bf00      	nop
    de5c:	0002bf31 	.word	0x0002bf31
    de60:	00028968 	.word	0x00028968

0000de64 <sc_indicate_rsp>:
{
    de64:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    de66:	4913      	ldr	r1, [pc, #76]	; (deb4 <sc_indicate_rsp+0x50>)
    de68:	f3bf 8f5b 	dmb	ish
    de6c:	4604      	mov	r4, r0
    de6e:	e851 3f00 	ldrex	r3, [r1]
    de72:	f023 0302 	bic.w	r3, r3, #2
    de76:	e841 3200 	strex	r2, r3, [r1]
    de7a:	2a00      	cmp	r2, #0
    de7c:	d1f7      	bne.n	de6e <sc_indicate_rsp+0xa>
    de7e:	f3bf 8f5b 	dmb	ish
    de82:	4608      	mov	r0, r1
    de84:	f017 ff61 	bl	25d4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    de88:	07c2      	lsls	r2, r0, #31
    de8a:	d505      	bpl.n	de98 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
    de8c:	2200      	movs	r2, #0
    de8e:	2300      	movs	r3, #0
    de90:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    de94:	f013 fdb8 	bl	21a08 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    de98:	4620      	mov	r0, r4
    de9a:	f7ff fe5f 	bl	db5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    de9e:	b140      	cbz	r0, deb2 <sc_indicate_rsp+0x4e>
    dea0:	7a03      	ldrb	r3, [r0, #8]
    dea2:	07db      	lsls	r3, r3, #31
    dea4:	d505      	bpl.n	deb2 <sc_indicate_rsp+0x4e>
}
    dea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    deaa:	2100      	movs	r1, #0
    deac:	300c      	adds	r0, #12
    deae:	f018 b915 	b.w	260dc <atomic_set_bit>
}
    deb2:	bd10      	pop	{r4, pc}
    deb4:	20001688 	.word	0x20001688

0000deb8 <disconnected_cb>:
{
    deb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    debc:	4b2b      	ldr	r3, [pc, #172]	; (df6c <disconnected_cb+0xb4>)
{
    debe:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    dec0:	6882      	ldr	r2, [r0, #8]
    dec2:	429a      	cmp	r2, r3
{
    dec4:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    dec6:	d12f      	bne.n	df28 <disconnected_cb+0x70>
	ccc = attr->user_data;
    dec8:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    deca:	8aab      	ldrh	r3, [r5, #20]
    decc:	b363      	cbz	r3, df28 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    dece:	f8df b0a0 	ldr.w	fp, [pc, #160]	; df70 <disconnected_cb+0xb8>
    ded2:	1c6c      	adds	r4, r5, #1
    ded4:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    ded8:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dedc:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    dee0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    dee4:	b19b      	cbz	r3, df0e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    dee6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    deea:	4622      	mov	r2, r4
    deec:	4630      	mov	r0, r6
    deee:	f017 f986 	bl	251fe <bt_conn_is_peer_addr_le>
    def2:	b9e8      	cbnz	r0, df30 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    def4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    def8:	4621      	mov	r1, r4
    defa:	f7fe f8c5 	bl	c088 <bt_conn_lookup_addr_le>
			if (tmp) {
    defe:	b130      	cbz	r0, df0e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    df00:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    df02:	2b07      	cmp	r3, #7
    df04:	bf08      	it	eq
    df06:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    df0a:	f017 f8ff 	bl	2510c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    df0e:	340a      	adds	r4, #10
    df10:	4554      	cmp	r4, sl
    df12:	d1e5      	bne.n	dee0 <disconnected_cb+0x28>
	if (!value_used) {
    df14:	f1b8 0f00 	cmp.w	r8, #0
    df18:	d106      	bne.n	df28 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    df1a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    df1c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    df20:	b113      	cbz	r3, df28 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    df22:	4641      	mov	r1, r8
    df24:	4638      	mov	r0, r7
    df26:	4798      	blx	r3
}
    df28:	2001      	movs	r0, #1
    df2a:	b003      	add	sp, #12
    df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    df30:	7a30      	ldrb	r0, [r6, #8]
    df32:	4649      	mov	r1, r9
    df34:	f016 ff63 	bl	24dfe <bt_addr_le_is_bonded>
    df38:	b990      	cbnz	r0, df60 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    df3a:	455d      	cmp	r5, fp
    df3c:	d102      	bne.n	df44 <disconnected_cb+0x8c>
					sc_clear(conn);
    df3e:	4630      	mov	r0, r6
    df40:	f018 f961 	bl	26206 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    df44:	2300      	movs	r3, #0
    df46:	4669      	mov	r1, sp
    df48:	4620      	mov	r0, r4
    df4a:	9300      	str	r3, [sp, #0]
    df4c:	f8cd 3003 	str.w	r3, [sp, #3]
    df50:	f017 ff85 	bl	25e5e <bt_addr_le_copy>
	cfg->id = 0U;
    df54:	2300      	movs	r3, #0
    df56:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    df5a:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    df5e:	e7d6      	b.n	df0e <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    df60:	4649      	mov	r1, r9
    df62:	4620      	mov	r0, r4
    df64:	f017 ff7b 	bl	25e5e <bt_addr_le_copy>
    df68:	e7d1      	b.n	df0e <disconnected_cb+0x56>
    df6a:	bf00      	nop
    df6c:	0000dc79 	.word	0x0000dc79
    df70:	20000310 	.word	0x20000310

0000df74 <bt_gatt_init>:
{
    df74:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    df76:	4b20      	ldr	r3, [pc, #128]	; (dff8 <bt_gatt_init+0x84>)
    df78:	f3bf 8f5b 	dmb	ish
    df7c:	2201      	movs	r2, #1
    df7e:	e853 1f00 	ldrex	r1, [r3]
    df82:	2900      	cmp	r1, #0
    df84:	d103      	bne.n	df8e <bt_gatt_init+0x1a>
    df86:	e843 2000 	strex	r0, r2, [r3]
    df8a:	2800      	cmp	r0, #0
    df8c:	d1f7      	bne.n	df7e <bt_gatt_init+0xa>
    df8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    df92:	d130      	bne.n	dff6 <bt_gatt_init+0x82>
    df94:	f3bf 8f5b 	dmb	ish
    df98:	4b18      	ldr	r3, [pc, #96]	; (dffc <bt_gatt_init+0x88>)
    df9a:	e853 1f00 	ldrex	r1, [r3]
    df9e:	2900      	cmp	r1, #0
    dfa0:	d103      	bne.n	dfaa <bt_gatt_init+0x36>
    dfa2:	e843 2000 	strex	r0, r2, [r3]
    dfa6:	2800      	cmp	r0, #0
    dfa8:	d1f7      	bne.n	df9a <bt_gatt_init+0x26>
    dfaa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    dfae:	d108      	bne.n	dfc2 <bt_gatt_init+0x4e>
    dfb0:	4913      	ldr	r1, [pc, #76]	; (e000 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dfb2:	4a14      	ldr	r2, [pc, #80]	; (e004 <bt_gatt_init+0x90>)
    dfb4:	880b      	ldrh	r3, [r1, #0]
    dfb6:	4c14      	ldr	r4, [pc, #80]	; (e008 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    dfb8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dfba:	42a2      	cmp	r2, r4
    dfbc:	d315      	bcc.n	dfea <bt_gatt_init+0x76>
    dfbe:	b100      	cbz	r0, dfc2 <bt_gatt_init+0x4e>
    dfc0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    dfc2:	4b12      	ldr	r3, [pc, #72]	; (e00c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    dfc4:	4912      	ldr	r1, [pc, #72]	; (e010 <bt_gatt_init+0x9c>)
    dfc6:	4813      	ldr	r0, [pc, #76]	; (e014 <bt_gatt_init+0xa0>)
    dfc8:	2200      	movs	r2, #0
	list->tail = NULL;
    dfca:	e9c3 2200 	strd	r2, r2, [r3]
    dfce:	f019 ff7a 	bl	27ec6 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    dfd2:	4810      	ldr	r0, [pc, #64]	; (e014 <bt_gatt_init+0xa0>)
    dfd4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dfd8:	2300      	movs	r3, #0
    dfda:	f013 fce1 	bl	219a0 <k_work_schedule>
}
    dfde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    dfe2:	490d      	ldr	r1, [pc, #52]	; (e018 <bt_gatt_init+0xa4>)
    dfe4:	480d      	ldr	r0, [pc, #52]	; (e01c <bt_gatt_init+0xa8>)
    dfe6:	f019 bf6e 	b.w	27ec6 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    dfea:	6850      	ldr	r0, [r2, #4]
    dfec:	4403      	add	r3, r0
    dfee:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dff0:	3208      	adds	r2, #8
    dff2:	2001      	movs	r0, #1
    dff4:	e7e1      	b.n	dfba <bt_gatt_init+0x46>
}
    dff6:	bd10      	pop	{r4, pc}
    dff8:	20002164 	.word	0x20002164
    dffc:	20002180 	.word	0x20002180
    e000:	20003dbe 	.word	0x20003dbe
    e004:	00028870 	.word	0x00028870
    e008:	00028888 	.word	0x00028888
    e00c:	2000213c 	.word	0x2000213c
    e010:	0002647b 	.word	0x0002647b
    e014:	200015e0 	.word	0x200015e0
    e018:	0000e399 	.word	0x0000e399
    e01c:	20001658 	.word	0x20001658

0000e020 <bt_gatt_attr_get_handle>:
{
    e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    e024:	4603      	mov	r3, r0
    e026:	b148      	cbz	r0, e03c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    e028:	8a00      	ldrh	r0, [r0, #16]
    e02a:	b938      	cbnz	r0, e03c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e02c:	4912      	ldr	r1, [pc, #72]	; (e078 <bt_gatt_attr_get_handle+0x58>)
    e02e:	f8df e04c 	ldr.w	lr, [pc, #76]	; e07c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    e032:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    e034:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e038:	4571      	cmp	r1, lr
    e03a:	d301      	bcc.n	e040 <bt_gatt_attr_get_handle+0x20>
}
    e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    e040:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    e044:	42bb      	cmp	r3, r7
    e046:	d304      	bcc.n	e052 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    e048:	fb0c 7206 	mla	r2, ip, r6, r7
    e04c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    e04e:	4293      	cmp	r3, r2
    e050:	d90e      	bls.n	e070 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    e052:	19a2      	adds	r2, r4, r6
    e054:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e056:	3108      	adds	r1, #8
    e058:	4614      	mov	r4, r2
    e05a:	e7ed      	b.n	e038 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    e05c:	fb0c 7805 	mla	r8, ip, r5, r7
    e060:	4543      	cmp	r3, r8
    e062:	d007      	beq.n	e074 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    e064:	3501      	adds	r5, #1
    e066:	1962      	adds	r2, r4, r5
    e068:	42b5      	cmp	r5, r6
    e06a:	b292      	uxth	r2, r2
    e06c:	d1f6      	bne.n	e05c <bt_gatt_attr_get_handle+0x3c>
    e06e:	e7f2      	b.n	e056 <bt_gatt_attr_get_handle+0x36>
    e070:	2500      	movs	r5, #0
    e072:	e7f8      	b.n	e066 <bt_gatt_attr_get_handle+0x46>
    e074:	4610      	mov	r0, r2
    e076:	e7e1      	b.n	e03c <bt_gatt_attr_get_handle+0x1c>
    e078:	00028870 	.word	0x00028870
    e07c:	00028888 	.word	0x00028888

0000e080 <bt_gatt_foreach_attr_type>:
{
    e080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e084:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    e088:	9100      	str	r1, [sp, #0]
    e08a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    e08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e090:	2d00      	cmp	r5, #0
    e092:	bf08      	it	eq
    e094:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    e096:	4b24      	ldr	r3, [pc, #144]	; (e128 <bt_gatt_foreach_attr_type+0xa8>)
    e098:	881b      	ldrh	r3, [r3, #0]
    e09a:	4283      	cmp	r3, r0
{
    e09c:	4607      	mov	r7, r0
    e09e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    e0a0:	d23c      	bcs.n	e11c <bt_gatt_foreach_attr_type+0x9c>
}
    e0a2:	b003      	add	sp, #12
    e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    e0a8:	6873      	ldr	r3, [r6, #4]
    e0aa:	4423      	add	r3, r4
    e0ac:	42bb      	cmp	r3, r7
    e0ae:	d232      	bcs.n	e116 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    e0b0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e0b2:	3608      	adds	r6, #8
    e0b4:	4b1d      	ldr	r3, [pc, #116]	; (e12c <bt_gatt_foreach_attr_type+0xac>)
    e0b6:	429e      	cmp	r6, r3
    e0b8:	d3f6      	bcc.n	e0a8 <bt_gatt_foreach_attr_type+0x28>
    e0ba:	e7f2      	b.n	e0a2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e0bc:	5889      	ldr	r1, [r1, r2]
    e0be:	9301      	str	r3, [sp, #4]
    e0c0:	4640      	mov	r0, r8
    e0c2:	f016 fd2a 	bl	24b1a <bt_uuid_cmp>
    e0c6:	9b01      	ldr	r3, [sp, #4]
    e0c8:	b190      	cbz	r0, e0f0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e0ca:	3401      	adds	r4, #1
    e0cc:	f10a 0a01 	add.w	sl, sl, #1
    e0d0:	b2a4      	uxth	r4, r4
    e0d2:	6873      	ldr	r3, [r6, #4]
    e0d4:	4553      	cmp	r3, sl
    e0d6:	d9ec      	bls.n	e0b2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    e0d8:	9b00      	ldr	r3, [sp, #0]
    e0da:	429c      	cmp	r4, r3
    e0dc:	d8e1      	bhi.n	e0a2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    e0de:	42bc      	cmp	r4, r7
    e0e0:	d3f3      	bcc.n	e0ca <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    e0e2:	6831      	ldr	r1, [r6, #0]
    e0e4:	fb0b f20a 	mul.w	r2, fp, sl
    e0e8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    e0ea:	f1b8 0f00 	cmp.w	r8, #0
    e0ee:	d1e5      	bne.n	e0bc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    e0f0:	f1b9 0f00 	cmp.w	r9, #0
    e0f4:	d10b      	bne.n	e10e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    e0f6:	3d01      	subs	r5, #1
    e0f8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    e0fa:	4618      	mov	r0, r3
    e0fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e100:	4621      	mov	r1, r4
    e102:	4798      	blx	r3
	if (!*num_matches) {
    e104:	2d00      	cmp	r5, #0
    e106:	d0cc      	beq.n	e0a2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    e108:	2800      	cmp	r0, #0
    e10a:	d1de      	bne.n	e0ca <bt_gatt_foreach_attr_type+0x4a>
    e10c:	e7c9      	b.n	e0a2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    e10e:	68da      	ldr	r2, [r3, #12]
    e110:	4591      	cmp	r9, r2
    e112:	d1da      	bne.n	e0ca <bt_gatt_foreach_attr_type+0x4a>
    e114:	e7ef      	b.n	e0f6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e116:	f04f 0a00 	mov.w	sl, #0
    e11a:	e7da      	b.n	e0d2 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e11c:	4e04      	ldr	r6, [pc, #16]	; (e130 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    e11e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    e120:	f04f 0b14 	mov.w	fp, #20
    e124:	e7c6      	b.n	e0b4 <bt_gatt_foreach_attr_type+0x34>
    e126:	bf00      	nop
    e128:	20003dbe 	.word	0x20003dbe
    e12c:	00028888 	.word	0x00028888
    e130:	00028870 	.word	0x00028870

0000e134 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    e134:	b510      	push	{r4, lr}
    e136:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
    e138:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e13a:	aa24      	add	r2, sp, #144	; 0x90
    e13c:	a902      	add	r1, sp, #8
    e13e:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
    e140:	e9cd 4402 	strd	r4, r4, [sp, #8]
    e144:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e148:	f016 fb15 	bl	24776 <tc_cmac_setup>
    e14c:	b960      	cbnz	r0, e168 <db_hash_gen.constprop.0+0x34>
		BT_ERR("Unable to setup AES CMAC");
    e14e:	4b1a      	ldr	r3, [pc, #104]	; (e1b8 <db_hash_gen.constprop.0+0x84>)
		BT_ERR("Unable to calculate hash");
    e150:	930a      	str	r3, [sp, #40]	; 0x28
    e152:	481a      	ldr	r0, [pc, #104]	; (e1bc <db_hash_gen.constprop.0+0x88>)
    e154:	2302      	movs	r3, #2
    e156:	aa09      	add	r2, sp, #36	; 0x24
    e158:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e15c:	9301      	str	r3, [sp, #4]
    e15e:	9309      	str	r3, [sp, #36]	; 0x24
    e160:	f017 ff76 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    e164:	b050      	add	sp, #320	; 0x140
    e166:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    e168:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e16c:	2001      	movs	r0, #1
    e16e:	4a14      	ldr	r2, [pc, #80]	; (e1c0 <db_hash_gen.constprop.0+0x8c>)
    e170:	ab0c      	add	r3, sp, #48	; 0x30
    e172:	f018 f977 	bl	26464 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    e176:	4813      	ldr	r0, [pc, #76]	; (e1c4 <db_hash_gen.constprop.0+0x90>)
    e178:	a90c      	add	r1, sp, #48	; 0x30
    e17a:	f016 fb92 	bl	248a2 <tc_cmac_final>
    e17e:	b908      	cbnz	r0, e184 <db_hash_gen.constprop.0+0x50>
		BT_ERR("Unable to calculate hash");
    e180:	4b11      	ldr	r3, [pc, #68]	; (e1c8 <db_hash_gen.constprop.0+0x94>)
    e182:	e7e5      	b.n	e150 <db_hash_gen.constprop.0+0x1c>
    e184:	4b0f      	ldr	r3, [pc, #60]	; (e1c4 <db_hash_gen.constprop.0+0x90>)
    e186:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    e18a:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    e18c:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    e18e:	7810      	ldrb	r0, [r2, #0]
    e190:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    e194:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    e196:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
    e19a:	d1f6      	bne.n	e18a <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e19c:	f3bf 8f5b 	dmb	ish
    e1a0:	4b0a      	ldr	r3, [pc, #40]	; (e1cc <db_hash_gen.constprop.0+0x98>)
    e1a2:	e853 2f00 	ldrex	r2, [r3]
    e1a6:	f042 0204 	orr.w	r2, r2, #4
    e1aa:	e843 2100 	strex	r1, r2, [r3]
    e1ae:	2900      	cmp	r1, #0
    e1b0:	d1f7      	bne.n	e1a2 <db_hash_gen.constprop.0+0x6e>
    e1b2:	f3bf 8f5b 	dmb	ish
    e1b6:	e7d5      	b.n	e164 <db_hash_gen.constprop.0+0x30>
    e1b8:	0002bf5d 	.word	0x0002bf5d
    e1bc:	00028968 	.word	0x00028968
    e1c0:	00025d57 	.word	0x00025d57
    e1c4:	200015d0 	.word	0x200015d0
    e1c8:	0002bf76 	.word	0x0002bf76
    e1cc:	20001688 	.word	0x20001688

0000e1d0 <gatt_indicate>:
{
    e1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1d4:	4615      	mov	r5, r2
    e1d6:	b088      	sub	sp, #32
    e1d8:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    e1da:	2214      	movs	r2, #20
    e1dc:	6869      	ldr	r1, [r5, #4]
{
    e1de:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    e1e0:	f018 f94d 	bl	2647e <bt_gatt_check_perm>
    e1e4:	4607      	mov	r7, r0
    e1e6:	b180      	cbz	r0, e20a <gatt_indicate+0x3a>
		BT_WARN("Link is not encrypted");
    e1e8:	4b2b      	ldr	r3, [pc, #172]	; (e298 <gatt_indicate+0xc8>)
    e1ea:	9306      	str	r3, [sp, #24]
    e1ec:	482b      	ldr	r0, [pc, #172]	; (e29c <gatt_indicate+0xcc>)
    e1ee:	2302      	movs	r3, #2
    e1f0:	aa05      	add	r2, sp, #20
    e1f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
    e1f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		BT_WARN("Link is not encrypted");
    e1fa:	9301      	str	r3, [sp, #4]
    e1fc:	9305      	str	r3, [sp, #20]
    e1fe:	f017 ff27 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    e202:	4628      	mov	r0, r5
    e204:	b008      	add	sp, #32
    e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    e20a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    e20e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    e210:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    e212:	f7ff fb55 	bl	d8c0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    e216:	3602      	adds	r6, #2
	if (!req) {
    e218:	4604      	mov	r4, r0
    e21a:	b910      	cbnz	r0, e222 <gatt_indicate+0x52>
		return -ENOMEM;
    e21c:	f06f 050b 	mvn.w	r5, #11
    e220:	e7ef      	b.n	e202 <gatt_indicate+0x32>
	req->func = func;
    e222:	4b1f      	ldr	r3, [pc, #124]	; (e2a0 <gatt_indicate+0xd0>)
	req->len = len;
    e224:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    e226:	211d      	movs	r1, #29
    e228:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
    e22a:	60c7      	str	r7, [r0, #12]
	req->func = func;
    e22c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    e22e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    e230:	4632      	mov	r2, r6
    e232:	4640      	mov	r0, r8
    e234:	f7ff f8aa 	bl	d38c <bt_att_create_pdu>
	if (!buf) {
    e238:	4606      	mov	r6, r0
    e23a:	b970      	cbnz	r0, e25a <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
    e23c:	4b19      	ldr	r3, [pc, #100]	; (e2a4 <gatt_indicate+0xd4>)
    e23e:	9306      	str	r3, [sp, #24]
    e240:	4816      	ldr	r0, [pc, #88]	; (e29c <gatt_indicate+0xcc>)
    e242:	2302      	movs	r3, #2
    e244:	aa05      	add	r2, sp, #20
    e246:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e24a:	9301      	str	r3, [sp, #4]
    e24c:	9305      	str	r3, [sp, #20]
    e24e:	f017 feff 	bl	26050 <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
    e252:	4620      	mov	r0, r4
    e254:	f7ff fb56 	bl	d904 <bt_att_req_free>
    e258:	e7e0      	b.n	e21c <gatt_indicate+0x4c>
    e25a:	f100 0a08 	add.w	sl, r0, #8
    e25e:	2102      	movs	r1, #2
    e260:	4650      	mov	r0, sl
    e262:	f018 ff21 	bl	270a8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    e266:	4607      	mov	r7, r0
    e268:	8aa9      	ldrh	r1, [r5, #20]
    e26a:	f827 9b02 	strh.w	r9, [r7], #2
    e26e:	4650      	mov	r0, sl
    e270:	f018 ff1a 	bl	270a8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    e274:	8aaa      	ldrh	r2, [r5, #20]
    e276:	6929      	ldr	r1, [r5, #16]
    e278:	4638      	mov	r0, r7
    e27a:	f016 fb90 	bl	2499e <memcpy>
	req->buf = buf;
    e27e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    e280:	4621      	mov	r1, r4
    e282:	4640      	mov	r0, r8
    e284:	f017 fd0d 	bl	25ca2 <bt_att_req_send>
	if (err) {
    e288:	4605      	mov	r5, r0
    e28a:	2800      	cmp	r0, #0
    e28c:	d0b9      	beq.n	e202 <gatt_indicate+0x32>
		bt_att_req_free(req);
    e28e:	4620      	mov	r0, r4
    e290:	f7ff fb38 	bl	d904 <bt_att_req_free>
    e294:	e7b5      	b.n	e202 <gatt_indicate+0x32>
    e296:	bf00      	nop
    e298:	0002bf8f 	.word	0x0002bf8f
    e29c:	00028968 	.word	0x00028968
    e2a0:	00025d1d 	.word	0x00025d1d
    e2a4:	0002bfa5 	.word	0x0002bfa5

0000e2a8 <bt_gatt_indicate>:
{
    e2a8:	b530      	push	{r4, r5, lr}
    e2aa:	4604      	mov	r4, r0
    e2ac:	b08b      	sub	sp, #44	; 0x2c
    e2ae:	4837      	ldr	r0, [pc, #220]	; (e38c <bt_gatt_indicate+0xe4>)
    e2b0:	f017 fd4b 	bl	25d4a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e2b4:	0782      	lsls	r2, r0, #30
{
    e2b6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e2b8:	d561      	bpl.n	e37e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e2ba:	b114      	cbz	r4, e2c2 <bt_gatt_indicate+0x1a>
    e2bc:	7b63      	ldrb	r3, [r4, #13]
    e2be:	2b07      	cmp	r3, #7
    e2c0:	d160      	bne.n	e384 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    e2c2:	6868      	ldr	r0, [r5, #4]
    e2c4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e2c6:	f7ff feab 	bl	e020 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    e2ca:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e2cc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    e2d0:	b33a      	cbz	r2, e322 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e2d2:	a905      	add	r1, sp, #20
    e2d4:	9102      	str	r1, [sp, #8]
    e2d6:	492e      	ldr	r1, [pc, #184]	; (e390 <bt_gatt_indicate+0xe8>)
    e2d8:	9101      	str	r1, [sp, #4]
    e2da:	2101      	movs	r1, #1
	found->attr = NULL;
    e2dc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e2de:	9100      	str	r1, [sp, #0]
    e2e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    e2e4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e2e6:	f7ff fecb 	bl	e080 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    e2ea:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e2ec:	b91b      	cbnz	r3, e2f6 <bt_gatt_indicate+0x4e>
			return -ENOENT;
    e2ee:	f06f 0001 	mvn.w	r0, #1
}
    e2f2:	b00b      	add	sp, #44	; 0x2c
    e2f4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    e2f6:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    e2f8:	9b05      	ldr	r3, [sp, #20]
    e2fa:	6818      	ldr	r0, [r3, #0]
    e2fc:	2300      	movs	r3, #0
    e2fe:	f88d 3010 	strb.w	r3, [sp, #16]
    e302:	a904      	add	r1, sp, #16
    e304:	f642 0303 	movw	r3, #10243	; 0x2803
    e308:	f8ad 3012 	strh.w	r3, [sp, #18]
    e30c:	f016 fc05 	bl	24b1a <bt_uuid_cmp>
    e310:	b970      	cbnz	r0, e330 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    e312:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e314:	68c3      	ldr	r3, [r0, #12]
    e316:	799b      	ldrb	r3, [r3, #6]
    e318:	069b      	lsls	r3, r3, #26
    e31a:	d405      	bmi.n	e328 <bt_gatt_indicate+0x80>
			return -EINVAL;
    e31c:	f06f 0015 	mvn.w	r0, #21
    e320:	e7e7      	b.n	e2f2 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    e322:	2800      	cmp	r0, #0
    e324:	d1e8      	bne.n	e2f8 <bt_gatt_indicate+0x50>
    e326:	e7e2      	b.n	e2ee <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e328:	f018 f84e 	bl	263c8 <bt_gatt_attr_value_handle>
    e32c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    e330:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    e334:	b13c      	cbz	r4, e346 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    e336:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    e338:	4601      	mov	r1, r0
		params->_ref = 1;
    e33a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    e33c:	462a      	mov	r2, r5
    e33e:	4620      	mov	r0, r4
    e340:	f7ff ff46 	bl	e1d0 <gatt_indicate>
    e344:	e7d5      	b.n	e2f2 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    e346:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    e34a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e34c:	2302      	movs	r3, #2
    e34e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e352:	f642 1302 	movw	r3, #10498	; 0x2902
    e356:	f8ad 3012 	strh.w	r3, [sp, #18]
    e35a:	ab05      	add	r3, sp, #20
    e35c:	9302      	str	r3, [sp, #8]
    e35e:	4b0d      	ldr	r3, [pc, #52]	; (e394 <bt_gatt_indicate+0xec>)
    e360:	9301      	str	r3, [sp, #4]
    e362:	2301      	movs	r3, #1
    e364:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    e366:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e368:	4623      	mov	r3, r4
    e36a:	aa04      	add	r2, sp, #16
    e36c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e370:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e372:	f88d 4010 	strb.w	r4, [sp, #16]
    e376:	f7ff fe83 	bl	e080 <bt_gatt_foreach_attr_type>
	return data.err;
    e37a:	9807      	ldr	r0, [sp, #28]
    e37c:	e7b9      	b.n	e2f2 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    e37e:	f06f 000a 	mvn.w	r0, #10
    e382:	e7b6      	b.n	e2f2 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    e384:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    e388:	e7b3      	b.n	e2f2 <bt_gatt_indicate+0x4a>
    e38a:	bf00      	nop
    e38c:	200000cc 	.word	0x200000cc
    e390:	00025d43 	.word	0x00025d43
    e394:	0000e4ad 	.word	0x0000e4ad

0000e398 <sc_process>:
{
    e398:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e39a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    e39e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    e3a2:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    e3a6:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    e3aa:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e3ac:	f1a0 0120 	sub.w	r1, r0, #32
    e3b0:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e3b4:	f3bf 8f5b 	dmb	ish
    e3b8:	e854 2f00 	ldrex	r2, [r4]
    e3bc:	f022 0201 	bic.w	r2, r2, #1
    e3c0:	e844 2000 	strex	r0, r2, [r4]
    e3c4:	2800      	cmp	r0, #0
    e3c6:	d1f7      	bne.n	e3b8 <sc_process+0x20>
    e3c8:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e3cc:	4a0c      	ldr	r2, [pc, #48]	; (e400 <sc_process+0x68>)
    e3ce:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    e3d2:	4a0c      	ldr	r2, [pc, #48]	; (e404 <sc_process+0x6c>)
    e3d4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    e3d8:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    e3da:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e3dc:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    e3e0:	2204      	movs	r2, #4
	sc->start = 0U;
    e3e2:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    e3e6:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    e3ea:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e3ee:	f7ff ff5b 	bl	e2a8 <bt_gatt_indicate>
    e3f2:	b918      	cbnz	r0, e3fc <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    e3f4:	2101      	movs	r1, #1
    e3f6:	4620      	mov	r0, r4
    e3f8:	f017 fe70 	bl	260dc <atomic_set_bit>
}
    e3fc:	b002      	add	sp, #8
    e3fe:	bd10      	pop	{r4, pc}
    e400:	00029068 	.word	0x00029068
    e404:	0000de65 	.word	0x0000de65

0000e408 <gatt_notify>:
{
    e408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e40c:	4614      	mov	r4, r2
    e40e:	b089      	sub	sp, #36	; 0x24
    e410:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    e412:	2214      	movs	r2, #20
    e414:	6861      	ldr	r1, [r4, #4]
{
    e416:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    e418:	f018 f831 	bl	2647e <bt_gatt_check_perm>
    e41c:	b178      	cbz	r0, e43e <gatt_notify+0x36>
		BT_WARN("Link is not encrypted");
    e41e:	4b20      	ldr	r3, [pc, #128]	; (e4a0 <gatt_notify+0x98>)
    e420:	4820      	ldr	r0, [pc, #128]	; (e4a4 <gatt_notify+0x9c>)
    e422:	9306      	str	r3, [sp, #24]
    e424:	aa05      	add	r2, sp, #20
    e426:	2302      	movs	r3, #2
    e428:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e42c:	9301      	str	r3, [sp, #4]
    e42e:	9305      	str	r3, [sp, #20]
    e430:	f017 fe0e 	bl	26050 <z_log_msg2_static_create.constprop.0>
		return -EPERM;
    e434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e438:	b009      	add	sp, #36	; 0x24
    e43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
    e43e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    e440:	211b      	movs	r1, #27
    e442:	3202      	adds	r2, #2
    e444:	4638      	mov	r0, r7
    e446:	f7fe ffa1 	bl	d38c <bt_att_create_pdu>
	if (!buf) {
    e44a:	4605      	mov	r5, r0
    e44c:	b968      	cbnz	r0, e46a <gatt_notify+0x62>
		BT_WARN("No buffer available to send notification");
    e44e:	4b16      	ldr	r3, [pc, #88]	; (e4a8 <gatt_notify+0xa0>)
    e450:	4814      	ldr	r0, [pc, #80]	; (e4a4 <gatt_notify+0x9c>)
    e452:	9306      	str	r3, [sp, #24]
    e454:	aa05      	add	r2, sp, #20
    e456:	2302      	movs	r3, #2
    e458:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e45c:	9301      	str	r3, [sp, #4]
    e45e:	9305      	str	r3, [sp, #20]
    e460:	f017 fdf6 	bl	26050 <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
    e464:	f06f 000b 	mvn.w	r0, #11
    e468:	e7e6      	b.n	e438 <gatt_notify+0x30>
    e46a:	f100 0908 	add.w	r9, r0, #8
    e46e:	2102      	movs	r1, #2
    e470:	4648      	mov	r0, r9
    e472:	f018 fe19 	bl	270a8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    e476:	4606      	mov	r6, r0
    e478:	89a1      	ldrh	r1, [r4, #12]
    e47a:	f826 8b02 	strh.w	r8, [r6], #2
    e47e:	4648      	mov	r0, r9
    e480:	f018 fe12 	bl	270a8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    e484:	89a2      	ldrh	r2, [r4, #12]
    e486:	68a1      	ldr	r1, [r4, #8]
    e488:	4630      	mov	r0, r6
    e48a:	f016 fa88 	bl	2499e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    e48e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    e492:	4629      	mov	r1, r5
    e494:	4638      	mov	r0, r7
}
    e496:	b009      	add	sp, #36	; 0x24
    e498:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    e49c:	f017 bbba 	b.w	25c14 <bt_att_send>
    e4a0:	0002bf8f 	.word	0x0002bf8f
    e4a4:	00028968 	.word	0x00028968
    e4a8:	0002bfcc 	.word	0x0002bfcc

0000e4ac <notify_cb>:
{
    e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e4b0:	4b43      	ldr	r3, [pc, #268]	; (e5c0 <notify_cb+0x114>)
{
    e4b2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    e4b4:	6882      	ldr	r2, [r0, #8]
    e4b6:	429a      	cmp	r2, r3
{
    e4b8:	b08b      	sub	sp, #44	; 0x2c
    e4ba:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e4bc:	d004      	beq.n	e4c8 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
    e4be:	2701      	movs	r7, #1
}
    e4c0:	4638      	mov	r0, r7
    e4c2:	b00b      	add	sp, #44	; 0x2c
    e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    e4c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    e4cc:	4b3d      	ldr	r3, [pc, #244]	; (e5c4 <notify_cb+0x118>)
    e4ce:	4598      	cmp	r8, r3
    e4d0:	d01c      	beq.n	e50c <notify_cb+0x60>
    e4d2:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
    e4d6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; e5c8 <notify_cb+0x11c>
    e4da:	9301      	str	r3, [sp, #4]
    e4dc:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
    e4e0:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    e4e4:	89a3      	ldrh	r3, [r4, #12]
    e4e6:	429a      	cmp	r2, r3
    e4e8:	d10b      	bne.n	e502 <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e4ea:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    e4ee:	4629      	mov	r1, r5
    e4f0:	f7fd fdca 	bl	c088 <bt_conn_lookup_addr_le>
		if (!conn) {
    e4f4:	4681      	mov	r9, r0
    e4f6:	b120      	cbz	r0, e502 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    e4f8:	7b42      	ldrb	r2, [r0, #13]
    e4fa:	2a07      	cmp	r2, #7
    e4fc:	d02a      	beq.n	e554 <notify_cb+0xa8>
			bt_conn_unref(conn);
    e4fe:	f016 fe05 	bl	2510c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e502:	9b01      	ldr	r3, [sp, #4]
    e504:	350a      	adds	r5, #10
    e506:	429d      	cmp	r5, r3
    e508:	d0d9      	beq.n	e4be <notify_cb+0x12>
    e50a:	e7e9      	b.n	e4e0 <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    e50c:	2700      	movs	r7, #0
    e50e:	4d2f      	ldr	r5, [pc, #188]	; (e5cc <notify_cb+0x120>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    e510:	46b9      	mov	r9, r7
    e512:	a904      	add	r1, sp, #16
    e514:	4628      	mov	r0, r5
    e516:	f8cd 9010 	str.w	r9, [sp, #16]
    e51a:	f8cd 9013 	str.w	r9, [sp, #19]
    e51e:	f017 fc6f 	bl	25e00 <bt_addr_le_cmp>
    e522:	b178      	cbz	r0, e544 <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    e524:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    e528:	2207      	movs	r2, #7
    e52a:	4629      	mov	r1, r5
    e52c:	f7fd fdf2 	bl	c114 <bt_conn_lookup_state_le>
			if (!conn) {
    e530:	b968      	cbnz	r0, e54e <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
    e532:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    e534:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    e538:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    e53a:	4629      	mov	r1, r5
    e53c:	8853      	ldrh	r3, [r2, #2]
    e53e:	8812      	ldrh	r2, [r2, #0]
    e540:	f7ff fc00 	bl	dd44 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    e544:	350c      	adds	r5, #12
    e546:	2f00      	cmp	r7, #0
    e548:	d1c3      	bne.n	e4d2 <notify_cb+0x26>
    e54a:	2701      	movs	r7, #1
    e54c:	e7e1      	b.n	e512 <notify_cb+0x66>
			bt_conn_unref(conn);
    e54e:	f016 fddd 	bl	2510c <bt_conn_unref>
    e552:	e7f7      	b.n	e544 <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    e554:	f8d8 2020 	ldr.w	r2, [r8, #32]
    e558:	b122      	cbz	r2, e564 <notify_cb+0xb8>
    e55a:	4631      	mov	r1, r6
    e55c:	4790      	blx	r2
    e55e:	b908      	cbnz	r0, e564 <notify_cb+0xb8>
			bt_conn_unref(conn);
    e560:	4648      	mov	r0, r9
    e562:	e7cc      	b.n	e4fe <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
    e564:	2214      	movs	r2, #20
    e566:	4631      	mov	r1, r6
    e568:	4648      	mov	r0, r9
    e56a:	f017 ff88 	bl	2647e <bt_gatt_check_perm>
    e56e:	4607      	mov	r7, r0
    e570:	b158      	cbz	r0, e58a <notify_cb+0xde>
			BT_WARN("Link is not encrypted");
    e572:	4b17      	ldr	r3, [pc, #92]	; (e5d0 <notify_cb+0x124>)
    e574:	9308      	str	r3, [sp, #32]
    e576:	aa07      	add	r2, sp, #28
    e578:	2302      	movs	r3, #2
    e57a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e57e:	4658      	mov	r0, fp
    e580:	9303      	str	r3, [sp, #12]
    e582:	9307      	str	r3, [sp, #28]
    e584:	f017 fd64 	bl	26050 <z_log_msg2_static_create.constprop.0>
			continue;
    e588:	e7bb      	b.n	e502 <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
    e58a:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    e58c:	88a1      	ldrh	r1, [r4, #4]
    e58e:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    e590:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
    e592:	4648      	mov	r0, r9
		if (data->type == BT_GATT_CCC_INDICATE) {
    e594:	d110      	bne.n	e5b8 <notify_cb+0x10c>
			err = gatt_indicate(conn, data->handle,
    e596:	f7ff fe1b 	bl	e1d0 <gatt_indicate>
			if (err == 0) {
    e59a:	4682      	mov	sl, r0
    e59c:	b918      	cbnz	r0, e5a6 <notify_cb+0xfa>
				data->ind_params->_ref++;
    e59e:	6920      	ldr	r0, [r4, #16]
    e5a0:	7d81      	ldrb	r1, [r0, #22]
    e5a2:	3101      	adds	r1, #1
    e5a4:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
    e5a6:	4648      	mov	r0, r9
    e5a8:	f016 fdb0 	bl	2510c <bt_conn_unref>
		if (err < 0) {
    e5ac:	f1ba 0f00 	cmp.w	sl, #0
    e5b0:	db86      	blt.n	e4c0 <notify_cb+0x14>
		data->err = 0;
    e5b2:	2300      	movs	r3, #0
    e5b4:	60a3      	str	r3, [r4, #8]
    e5b6:	e7a4      	b.n	e502 <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    e5b8:	f7ff ff26 	bl	e408 <gatt_notify>
    e5bc:	4682      	mov	sl, r0
    e5be:	e7f2      	b.n	e5a6 <notify_cb+0xfa>
    e5c0:	0000dc79 	.word	0x0000dc79
    e5c4:	20000310 	.word	0x20000310
    e5c8:	00028968 	.word	0x00028968
    e5cc:	20003dc1 	.word	0x20003dc1
    e5d0:	0002bf8f 	.word	0x0002bf8f

0000e5d4 <update_ccc>:
{
    e5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e5d8:	4b3f      	ldr	r3, [pc, #252]	; (e6d8 <update_ccc+0x104>)
{
    e5da:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    e5dc:	6882      	ldr	r2, [r0, #8]
    e5de:	429a      	cmp	r2, r3
{
    e5e0:	b089      	sub	sp, #36	; 0x24
    e5e2:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e5e4:	d173      	bne.n	e6ce <update_ccc+0xfa>
	ccc = attr->user_data;
    e5e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    e5ea:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    e5ec:	f8df b0ec 	ldr.w	fp, [pc, #236]	; e6dc <update_ccc+0x108>
    e5f0:	f108 0601 	add.w	r6, r8, #1
    e5f4:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
    e5f8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
    e5fc:	b1cb      	cbz	r3, e632 <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e5fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    e602:	4632      	mov	r2, r6
    e604:	4620      	mov	r0, r4
    e606:	f016 fdfa 	bl	251fe <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e60a:	b190      	cbz	r0, e632 <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e60c:	222a      	movs	r2, #42	; 0x2a
    e60e:	4629      	mov	r1, r5
    e610:	4620      	mov	r0, r4
    e612:	f017 ff34 	bl	2647e <bt_gatt_check_perm>
		if (err) {
    e616:	b308      	cbz	r0, e65c <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e618:	2803      	cmp	r0, #3
    e61a:	d10e      	bne.n	e63a <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
    e61c:	4b30      	ldr	r3, [pc, #192]	; (e6e0 <update_ccc+0x10c>)
    e61e:	9001      	str	r0, [sp, #4]
    e620:	9005      	str	r0, [sp, #20]
    e622:	aa05      	add	r2, sp, #20
    e624:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e628:	4658      	mov	r0, fp
    e62a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    e62e:	f017 fd0f 	bl	26050 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e632:	360a      	adds	r6, #10
    e634:	45b1      	cmp	r9, r6
    e636:	d04a      	beq.n	e6ce <update_ccc+0xfa>
    e638:	e7de      	b.n	e5f8 <update_ccc+0x24>
				sec = BT_SECURITY_L3;
    e63a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    e63c:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
    e63e:	bf14      	ite	ne
    e640:	f04f 0a02 	movne.w	sl, #2
    e644:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
    e648:	f016 fdd7 	bl	251fa <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e64c:	4582      	cmp	sl, r0
    e64e:	d905      	bls.n	e65c <update_ccc+0x88>
				if (data->sec < sec) {
    e650:	793a      	ldrb	r2, [r7, #4]
    e652:	4552      	cmp	r2, sl
    e654:	d2ed      	bcs.n	e632 <update_ccc+0x5e>
					data->sec = sec;
    e656:	f887 a004 	strb.w	sl, [r7, #4]
    e65a:	e7ea      	b.n	e632 <update_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
    e65c:	4641      	mov	r1, r8
    e65e:	4628      	mov	r0, r5
    e660:	f017 fb4e 	bl	25d00 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e664:	4b1f      	ldr	r3, [pc, #124]	; (e6e4 <update_ccc+0x110>)
    e666:	4598      	cmp	r8, r3
    e668:	d131      	bne.n	e6ce <update_ccc+0xfa>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e66a:	7a20      	ldrb	r0, [r4, #8]
    e66c:	f104 0188 	add.w	r1, r4, #136	; 0x88
    e670:	f7ff faa2 	bl	dbb8 <find_sc_cfg>
	if (!cfg) {
    e674:	b358      	cbz	r0, e6ce <update_ccc+0xfa>
	if (!(cfg->data.start || cfg->data.end)) {
    e676:	8902      	ldrh	r2, [r0, #8]
    e678:	8943      	ldrh	r3, [r0, #10]
    e67a:	ea53 0102 	orrs.w	r1, r3, r2
    e67e:	d026      	beq.n	e6ce <update_ccc+0xfa>
	index = bt_conn_index(conn);
    e680:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e682:	f8ad 2000 	strh.w	r2, [sp]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e686:	f8ad 3002 	strh.w	r3, [sp, #2]
	index = bt_conn_index(conn);
    e68a:	f7fd fbe1 	bl	be50 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e68e:	4916      	ldr	r1, [pc, #88]	; (e6e8 <update_ccc+0x114>)
    e690:	4a16      	ldr	r2, [pc, #88]	; (e6ec <update_ccc+0x118>)
    e692:	2318      	movs	r3, #24
    e694:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e698:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e69a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e69c:	4a14      	ldr	r2, [pc, #80]	; (e6f0 <update_ccc+0x11c>)
    e69e:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e6a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
    e6a4:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e6a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
    e6aa:	f8c3 d010 	str.w	sp, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    e6ae:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e6b0:	4620      	mov	r0, r4
    e6b2:	f7ff fdf9 	bl	e2a8 <bt_gatt_indicate>
    e6b6:	b150      	cbz	r0, e6ce <update_ccc+0xfa>
		BT_ERR("SC restore indication failed");
    e6b8:	4b0e      	ldr	r3, [pc, #56]	; (e6f4 <update_ccc+0x120>)
    e6ba:	9306      	str	r3, [sp, #24]
    e6bc:	4807      	ldr	r0, [pc, #28]	; (e6dc <update_ccc+0x108>)
    e6be:	2302      	movs	r3, #2
    e6c0:	aa05      	add	r2, sp, #20
    e6c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e6c6:	9301      	str	r3, [sp, #4]
    e6c8:	9305      	str	r3, [sp, #20]
    e6ca:	f017 fcc1 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    e6ce:	2001      	movs	r0, #1
    e6d0:	b009      	add	sp, #36	; 0x24
    e6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6d6:	bf00      	nop
    e6d8:	0000dc79 	.word	0x0000dc79
    e6dc:	00028968 	.word	0x00028968
    e6e0:	0002bff5 	.word	0x0002bff5
    e6e4:	20000310 	.word	0x20000310
    e6e8:	20002168 	.word	0x20002168
    e6ec:	00029068 	.word	0x00029068
    e6f0:	000260f9 	.word	0x000260f9
    e6f4:	0002c009 	.word	0x0002c009

0000e6f8 <bt_gatt_discover>:
{
    e6f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e6fa:	7b43      	ldrb	r3, [r0, #13]
    e6fc:	2b07      	cmp	r3, #7
{
    e6fe:	b08c      	sub	sp, #48	; 0x30
    e700:	4605      	mov	r5, r0
    e702:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e704:	f040 80aa 	bne.w	e85c <bt_gatt_discover+0x164>
	switch (params->type) {
    e708:	7c0b      	ldrb	r3, [r1, #16]
    e70a:	2b06      	cmp	r3, #6
    e70c:	f200 80a4 	bhi.w	e858 <bt_gatt_discover+0x160>
    e710:	e8df f003 	tbb	[pc, r3]
    e714:	61610404 	.word	0x61610404
    e718:	9b69      	.short	0x9b69
    e71a:	2d          	.byte	0x2d
    e71b:	00          	.byte	0x00
		if (params->uuid) {
    e71c:	680b      	ldr	r3, [r1, #0]
    e71e:	b1f3      	cbz	r3, e75e <bt_gatt_discover+0x66>
	switch (params->uuid->type) {
    e720:	781b      	ldrb	r3, [r3, #0]
    e722:	b173      	cbz	r3, e742 <bt_gatt_discover+0x4a>
    e724:	2b02      	cmp	r3, #2
    e726:	d018      	beq.n	e75a <bt_gatt_discover+0x62>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    e728:	4a4e      	ldr	r2, [pc, #312]	; (e864 <bt_gatt_discover+0x16c>)
		BT_ERR("Invalid discovery type: %u", params->type);
    e72a:	484f      	ldr	r0, [pc, #316]	; (e868 <bt_gatt_discover+0x170>)
	switch (params->type) {
    e72c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		BT_ERR("Invalid discovery type: %u", params->type);
    e730:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e734:	2303      	movs	r3, #3
    e736:	aa09      	add	r2, sp, #36	; 0x24
    e738:	9305      	str	r3, [sp, #20]
    e73a:	9309      	str	r3, [sp, #36]	; 0x24
    e73c:	f017 fc88 	bl	26050 <z_log_msg2_static_create.constprop.0>
    e740:	e017      	b.n	e772 <bt_gatt_discover+0x7a>
		len += BT_UUID_SIZE_16;
    e742:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
    e744:	9301      	str	r3, [sp, #4]
    e746:	2306      	movs	r3, #6
    e748:	9300      	str	r3, [sp, #0]
    e74a:	4948      	ldr	r1, [pc, #288]	; (e86c <bt_gatt_discover+0x174>)
    e74c:	4b48      	ldr	r3, [pc, #288]	; (e870 <bt_gatt_discover+0x178>)
    e74e:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    e750:	4628      	mov	r0, r5
    e752:	f017 fbb2 	bl	25eba <gatt_req_send>
}
    e756:	b00c      	add	sp, #48	; 0x30
    e758:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
    e75a:	2316      	movs	r3, #22
    e75c:	e7f2      	b.n	e744 <bt_gatt_discover+0x4c>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
    e75e:	2310      	movs	r3, #16
    e760:	2104      	movs	r1, #4
    e762:	e9cd 3100 	strd	r3, r1, [sp]
    e766:	4622      	mov	r2, r4
    e768:	4b42      	ldr	r3, [pc, #264]	; (e874 <bt_gatt_discover+0x17c>)
    e76a:	4943      	ldr	r1, [pc, #268]	; (e878 <bt_gatt_discover+0x180>)
    e76c:	e7f0      	b.n	e750 <bt_gatt_discover+0x58>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e76e:	6808      	ldr	r0, [r1, #0]
    e770:	b910      	cbnz	r0, e778 <bt_gatt_discover+0x80>
	return -EINVAL;
    e772:	f06f 0015 	mvn.w	r0, #21
    e776:	e7ee      	b.n	e756 <bt_gatt_discover+0x5e>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e778:	7806      	ldrb	r6, [r0, #0]
    e77a:	2e00      	cmp	r6, #0
    e77c:	d1f9      	bne.n	e772 <bt_gatt_discover+0x7a>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    e77e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
    e782:	a903      	add	r1, sp, #12
    e784:	f88d 600c 	strb.w	r6, [sp, #12]
    e788:	f8ad 300e 	strh.w	r3, [sp, #14]
    e78c:	f016 f9c5 	bl	24b1a <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e790:	b308      	cbz	r0, e7d6 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    e792:	f642 1302 	movw	r3, #10498	; 0x2902
    e796:	6820      	ldr	r0, [r4, #0]
    e798:	f88d 6010 	strb.w	r6, [sp, #16]
    e79c:	a904      	add	r1, sp, #16
    e79e:	f8ad 3012 	strh.w	r3, [sp, #18]
    e7a2:	f016 f9ba 	bl	24b1a <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    e7a6:	b1b0      	cbz	r0, e7d6 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    e7a8:	f642 1303 	movw	r3, #10499	; 0x2903
    e7ac:	6820      	ldr	r0, [r4, #0]
    e7ae:	f88d 6014 	strb.w	r6, [sp, #20]
    e7b2:	a905      	add	r1, sp, #20
    e7b4:	f8ad 3016 	strh.w	r3, [sp, #22]
    e7b8:	f016 f9af 	bl	24b1a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    e7bc:	b158      	cbz	r0, e7d6 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
    e7be:	f642 1304 	movw	r3, #10500	; 0x2904
    e7c2:	6820      	ldr	r0, [r4, #0]
    e7c4:	f88d 6018 	strb.w	r6, [sp, #24]
    e7c8:	a906      	add	r1, sp, #24
    e7ca:	f8ad 301a 	strh.w	r3, [sp, #26]
    e7ce:	f016 f9a4 	bl	24b1a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    e7d2:	2800      	cmp	r0, #0
    e7d4:	d1cd      	bne.n	e772 <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
    e7d6:	2308      	movs	r3, #8
    e7d8:	2204      	movs	r2, #4
    e7da:	e9cd 3200 	strd	r3, r2, [sp]
    e7de:	4927      	ldr	r1, [pc, #156]	; (e87c <bt_gatt_discover+0x184>)
    e7e0:	4b27      	ldr	r3, [pc, #156]	; (e880 <bt_gatt_discover+0x188>)
    e7e2:	4622      	mov	r2, r4
    e7e4:	e7b4      	b.n	e750 <bt_gatt_discover+0x58>
		if (params->uuid &&
    e7e6:	6808      	ldr	r0, [r1, #0]
    e7e8:	b378      	cbz	r0, e84a <bt_gatt_discover+0x152>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e7ea:	2600      	movs	r6, #0
    e7ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e7f0:	a903      	add	r1, sp, #12
    e7f2:	f88d 600c 	strb.w	r6, [sp, #12]
    e7f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    e7fa:	f016 f98e 	bl	24b1a <bt_uuid_cmp>
		if (params->uuid &&
    e7fe:	2800      	cmp	r0, #0
    e800:	d0b7      	beq.n	e772 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e802:	f642 0301 	movw	r3, #10241	; 0x2801
    e806:	6820      	ldr	r0, [r4, #0]
    e808:	f88d 6010 	strb.w	r6, [sp, #16]
    e80c:	a904      	add	r1, sp, #16
    e80e:	f8ad 3012 	strh.w	r3, [sp, #18]
    e812:	f016 f982 	bl	24b1a <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e816:	2800      	cmp	r0, #0
    e818:	d0ab      	beq.n	e772 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e81a:	f642 0302 	movw	r3, #10242	; 0x2802
    e81e:	6820      	ldr	r0, [r4, #0]
    e820:	f88d 6014 	strb.w	r6, [sp, #20]
    e824:	a905      	add	r1, sp, #20
    e826:	f8ad 3016 	strh.w	r3, [sp, #22]
    e82a:	f016 f976 	bl	24b1a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e82e:	2800      	cmp	r0, #0
    e830:	d09f      	beq.n	e772 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    e832:	f642 0303 	movw	r3, #10243	; 0x2803
    e836:	6820      	ldr	r0, [r4, #0]
    e838:	f88d 6018 	strb.w	r6, [sp, #24]
    e83c:	a906      	add	r1, sp, #24
    e83e:	f8ad 301a 	strh.w	r3, [sp, #26]
    e842:	f016 f96a 	bl	24b1a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e846:	2800      	cmp	r0, #0
    e848:	d093      	beq.n	e772 <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    e84a:	2304      	movs	r3, #4
    e84c:	e9cd 3300 	strd	r3, r3, [sp]
    e850:	490c      	ldr	r1, [pc, #48]	; (e884 <bt_gatt_discover+0x18c>)
    e852:	4b0d      	ldr	r3, [pc, #52]	; (e888 <bt_gatt_discover+0x190>)
    e854:	4622      	mov	r2, r4
    e856:	e77b      	b.n	e750 <bt_gatt_discover+0x58>
		BT_ERR("Invalid discovery type: %u", params->type);
    e858:	4a0c      	ldr	r2, [pc, #48]	; (e88c <bt_gatt_discover+0x194>)
    e85a:	e766      	b.n	e72a <bt_gatt_discover+0x32>
		return -ENOTCONN;
    e85c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    e860:	e779      	b.n	e756 <bt_gatt_discover+0x5e>
    e862:	bf00      	nop
    e864:	0002c026 	.word	0x0002c026
    e868:	00028968 	.word	0x00028968
    e86c:	0002650f 	.word	0x0002650f
    e870:	00026091 	.word	0x00026091
    e874:	00025f87 	.word	0x00025f87
    e878:	0000e891 	.word	0x0000e891
    e87c:	0000e9ad 	.word	0x0000e9ad
    e880:	00025fb7 	.word	0x00025fb7
    e884:	0000ed39 	.word	0x0000ed39
    e888:	00025f43 	.word	0x00025f43
    e88c:	0002c03b 	.word	0x0002c03b

0000e890 <gatt_read_group_rsp>:
{
    e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e894:	b08f      	sub	sp, #60	; 0x3c
    e896:	4681      	mov	r9, r0
    e898:	9d18      	ldr	r5, [sp, #96]	; 0x60
    e89a:	4617      	mov	r7, r2
	if (err) {
    e89c:	b131      	cbz	r1, e8ac <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
    e89e:	686b      	ldr	r3, [r5, #4]
    e8a0:	462a      	mov	r2, r5
    e8a2:	2100      	movs	r1, #0
}
    e8a4:	b00f      	add	sp, #60	; 0x3c
    e8a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
    e8aa:	4718      	bx	r3
	switch (rsp->len) {
    e8ac:	7812      	ldrb	r2, [r2, #0]
    e8ae:	2a06      	cmp	r2, #6
    e8b0:	d015      	beq.n	e8de <gatt_read_group_rsp+0x4e>
    e8b2:	2a14      	cmp	r2, #20
    e8b4:	d029      	beq.n	e90a <gatt_read_group_rsp+0x7a>
		BT_ERR("Invalid data len %u", rsp->len);
    e8b6:	4b3b      	ldr	r3, [pc, #236]	; (e9a4 <gatt_read_group_rsp+0x114>)
    e8b8:	483b      	ldr	r0, [pc, #236]	; (e9a8 <gatt_read_group_rsp+0x118>)
	switch (rsp->len) {
    e8ba:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
		BT_ERR("Invalid data len %u", rsp->len);
    e8be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e8c2:	2303      	movs	r3, #3
    e8c4:	aa0b      	add	r2, sp, #44	; 0x2c
    e8c6:	9303      	str	r3, [sp, #12]
    e8c8:	930b      	str	r3, [sp, #44]	; 0x2c
    e8ca:	f017 fbc1 	bl	26050 <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    e8ce:	686b      	ldr	r3, [r5, #4]
    e8d0:	462a      	mov	r2, r5
    e8d2:	2100      	movs	r1, #0
    e8d4:	4648      	mov	r0, r9
    e8d6:	4798      	blx	r3
}
    e8d8:	b00f      	add	sp, #60	; 0x3c
    e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
    e8de:	f88d 100c 	strb.w	r1, [sp, #12]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e8e2:	3b01      	subs	r3, #1
    e8e4:	b29c      	uxth	r4, r3
    e8e6:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
    e8ea:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e8ec:	783b      	ldrb	r3, [r7, #0]
    e8ee:	42a3      	cmp	r3, r4
    e8f0:	d90f      	bls.n	e912 <gatt_read_group_rsp+0x82>
	if (length == 0U && end_handle) {
    e8f2:	2c00      	cmp	r4, #0
    e8f4:	d1eb      	bne.n	e8ce <gatt_read_group_rsp+0x3e>
    e8f6:	2e00      	cmp	r6, #0
    e8f8:	d0e9      	beq.n	e8ce <gatt_read_group_rsp+0x3e>
	gatt_discover_next(conn, handle, params);
    e8fa:	462a      	mov	r2, r5
    e8fc:	4631      	mov	r1, r6
    e8fe:	4648      	mov	r0, r9
}
    e900:	b00f      	add	sp, #60	; 0x3c
    e902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    e906:	f017 bde5 	b.w	264d4 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    e90a:	2202      	movs	r2, #2
    e90c:	f88d 200c 	strb.w	r2, [sp, #12]
		break;
    e910:	e7e7      	b.n	e8e2 <gatt_read_group_rsp+0x52>
		struct bt_gatt_attr attr = {};
    e912:	2214      	movs	r2, #20
    e914:	2100      	movs	r1, #0
    e916:	a808      	add	r0, sp, #32
    e918:	f016 f84c 	bl	249b4 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    e91c:	f8b8 a000 	ldrh.w	sl, [r8]
    e920:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    e924:	2b00      	cmp	r3, #0
    e926:	d0d2      	beq.n	e8ce <gatt_read_group_rsp+0x3e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    e928:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    e92c:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    e930:	2e00      	cmp	r6, #0
    e932:	d0cc      	beq.n	e8ce <gatt_read_group_rsp+0x3e>
    e934:	42b3      	cmp	r3, r6
    e936:	d8ca      	bhi.n	e8ce <gatt_read_group_rsp+0x3e>
		switch (u.uuid.type) {
    e938:	f89d 300c 	ldrb.w	r3, [sp, #12]
    e93c:	b323      	cbz	r3, e988 <gatt_read_group_rsp+0xf8>
    e93e:	2b02      	cmp	r3, #2
    e940:	d02a      	beq.n	e998 <gatt_read_group_rsp+0x108>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    e942:	f04f 0300 	mov.w	r3, #0
    e946:	f88d 3000 	strb.w	r3, [sp]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    e94a:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    e94c:	f8ad b008 	strh.w	fp, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    e950:	2b00      	cmp	r3, #0
    e952:	f642 0301 	movw	r3, #10241	; 0x2801
    e956:	bf08      	it	eq
    e958:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    e95c:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = &u.uuid;
    e960:	ab03      	add	r3, sp, #12
    e962:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
    e964:	ab01      	add	r3, sp, #4
    e966:	930b      	str	r3, [sp, #44]	; 0x2c
		attr.uuid = &uuid_svc.uuid;
    e968:	f8cd d020 	str.w	sp, [sp, #32]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e96c:	686b      	ldr	r3, [r5, #4]
		attr.handle = start_handle;
    e96e:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e972:	462a      	mov	r2, r5
    e974:	a908      	add	r1, sp, #32
    e976:	4648      	mov	r0, r9
    e978:	4798      	blx	r3
    e97a:	2800      	cmp	r0, #0
    e97c:	d0ac      	beq.n	e8d8 <gatt_read_group_rsp+0x48>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e97e:	783a      	ldrb	r2, [r7, #0]
    e980:	1aa4      	subs	r4, r4, r2
    e982:	b2a4      	uxth	r4, r4
    e984:	4490      	add	r8, r2
    e986:	e7b1      	b.n	e8ec <gatt_read_group_rsp+0x5c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    e988:	2202      	movs	r2, #2
    e98a:	f108 0104 	add.w	r1, r8, #4
    e98e:	f10d 000e 	add.w	r0, sp, #14
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    e992:	f016 f804 	bl	2499e <memcpy>
			break;
    e996:	e7d4      	b.n	e942 <gatt_read_group_rsp+0xb2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    e998:	2210      	movs	r2, #16
    e99a:	f108 0104 	add.w	r1, r8, #4
    e99e:	f10d 000d 	add.w	r0, sp, #13
    e9a2:	e7f6      	b.n	e992 <gatt_read_group_rsp+0x102>
    e9a4:	0002c056 	.word	0x0002c056
    e9a8:	00028968 	.word	0x00028968

0000e9ac <gatt_read_type_rsp>:
{
    e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9b0:	b093      	sub	sp, #76	; 0x4c
    e9b2:	4680      	mov	r8, r0
    e9b4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    e9b6:	4617      	mov	r7, r2
	if (err) {
    e9b8:	b131      	cbz	r1, e9c8 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
    e9ba:	686b      	ldr	r3, [r5, #4]
    e9bc:	462a      	mov	r2, r5
    e9be:	2100      	movs	r1, #0
}
    e9c0:	b013      	add	sp, #76	; 0x4c
    e9c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
    e9c6:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    e9c8:	7c2a      	ldrb	r2, [r5, #16]
    e9ca:	2a02      	cmp	r2, #2
    e9cc:	f040 8088 	bne.w	eae0 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    e9d0:	7838      	ldrb	r0, [r7, #0]
    e9d2:	2806      	cmp	r0, #6
    e9d4:	d018      	beq.n	ea08 <gatt_read_type_rsp+0x5c>
    e9d6:	2808      	cmp	r0, #8
    e9d8:	d119      	bne.n	ea0e <gatt_read_type_rsp+0x62>
		u.uuid.type = BT_UUID_TYPE_16;
    e9da:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e9de:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    e9e0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e9e2:	b2a4      	uxth	r4, r4
    e9e4:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
    e9e8:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e9ec:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    e9ee:	783b      	ldrb	r3, [r7, #0]
    e9f0:	42a3      	cmp	r3, r4
    e9f2:	d91e      	bls.n	ea32 <gatt_read_type_rsp+0x86>
	if (length == 0U && handle) {
    e9f4:	b9bc      	cbnz	r4, ea26 <gatt_read_type_rsp+0x7a>
    e9f6:	b1b6      	cbz	r6, ea26 <gatt_read_type_rsp+0x7a>
	gatt_discover_next(conn, handle, params);
    e9f8:	462a      	mov	r2, r5
    e9fa:	4631      	mov	r1, r6
    e9fc:	4640      	mov	r0, r8
}
    e9fe:	b013      	add	sp, #76	; 0x4c
    ea00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    ea04:	f017 bd66 	b.w	264d4 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    ea08:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    ea0c:	e7e7      	b.n	e9de <gatt_read_type_rsp+0x32>
		BT_ERR("Invalid data len %u", rsp->len);
    ea0e:	4b9b      	ldr	r3, [pc, #620]	; (ec7c <gatt_read_type_rsp+0x2d0>)
	switch (rsp->len) {
    ea10:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    ea14:	2303      	movs	r3, #3
    ea16:	9307      	str	r3, [sp, #28]
    ea18:	930f      	str	r3, [sp, #60]	; 0x3c
		BT_ERR("Invalid data len %u", rsp->len);
    ea1a:	4899      	ldr	r0, [pc, #612]	; (ec80 <gatt_read_type_rsp+0x2d4>)
    ea1c:	aa0f      	add	r2, sp, #60	; 0x3c
    ea1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ea22:	f017 fb15 	bl	26050 <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    ea26:	686b      	ldr	r3, [r5, #4]
    ea28:	462a      	mov	r2, r5
    ea2a:	2100      	movs	r1, #0
    ea2c:	4640      	mov	r0, r8
    ea2e:	4798      	blx	r3
	if (!handle) {
    ea30:	e03a      	b.n	eaa8 <gatt_read_type_rsp+0xfc>
		handle = sys_le16_to_cpu(data->handle);
    ea32:	f8b9 3000 	ldrh.w	r3, [r9]
    ea36:	b29e      	uxth	r6, r3
		if (!handle) {
    ea38:	2e00      	cmp	r6, #0
    ea3a:	d0f4      	beq.n	ea26 <gatt_read_type_rsp+0x7a>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    ea3c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    ea40:	f8ad 2018 	strh.w	r2, [sp, #24]
    ea44:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    ea46:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    ea4a:	f8ad 201a 	strh.w	r2, [sp, #26]
    ea4e:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
    ea50:	f89d 201c 	ldrb.w	r2, [sp, #28]
    ea54:	b172      	cbz	r2, ea74 <gatt_read_type_rsp+0xc8>
    ea56:	2a02      	cmp	r2, #2
    ea58:	d017      	beq.n	ea8a <gatt_read_type_rsp+0xde>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ea5a:	6829      	ldr	r1, [r5, #0]
    ea5c:	b339      	cbz	r1, eaae <gatt_read_type_rsp+0x102>
    ea5e:	4650      	mov	r0, sl
    ea60:	9303      	str	r3, [sp, #12]
    ea62:	f016 f85a 	bl	24b1a <bt_uuid_cmp>
    ea66:	9b03      	ldr	r3, [sp, #12]
    ea68:	b308      	cbz	r0, eaae <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    ea6a:	783a      	ldrb	r2, [r7, #0]
    ea6c:	1aa4      	subs	r4, r4, r2
    ea6e:	b2a4      	uxth	r4, r4
    ea70:	4491      	add	r9, r2
    ea72:	e7bc      	b.n	e9ee <gatt_read_type_rsp+0x42>
			value.uuid = &u.uuid;
    ea74:	f8cd a014 	str.w	sl, [sp, #20]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    ea78:	f899 2006 	ldrb.w	r2, [r9, #6]
    ea7c:	f899 1007 	ldrb.w	r1, [r9, #7]
    ea80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea84:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
    ea88:	e7e7      	b.n	ea5a <gatt_read_type_rsp+0xae>
	return gatt_req_send(conn, read_included_uuid_cb, params,
    ea8a:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
    ea8c:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
    ea8e:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
    ea90:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
    ea92:	497c      	ldr	r1, [pc, #496]	; (ec84 <gatt_read_type_rsp+0x2d8>)
    ea94:	9201      	str	r2, [sp, #4]
    ea96:	9300      	str	r3, [sp, #0]
    ea98:	462a      	mov	r2, r5
    ea9a:	4b7b      	ldr	r3, [pc, #492]	; (ec88 <gatt_read_type_rsp+0x2dc>)
    ea9c:	4640      	mov	r0, r8
    ea9e:	f017 fa0c 	bl	25eba <gatt_req_send>
			return read_included_uuid(conn, params);
    eaa2:	b286      	uxth	r6, r0
	if (!handle) {
    eaa4:	2e00      	cmp	r6, #0
    eaa6:	d1a7      	bne.n	e9f8 <gatt_read_type_rsp+0x4c>
}
    eaa8:	b013      	add	sp, #76	; 0x4c
    eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    eaae:	f642 0202 	movw	r2, #10242	; 0x2802
    eab2:	f8ad 2012 	strh.w	r2, [sp, #18]
    eab6:	aa04      	add	r2, sp, #16
    eab8:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
    eabc:	aa05      	add	r2, sp, #20
    eabe:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
    eac0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    eac4:	f88d b010 	strb.w	fp, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    eac8:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    eaca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    eace:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ead2:	462a      	mov	r2, r5
    ead4:	a90c      	add	r1, sp, #48	; 0x30
    ead6:	4640      	mov	r0, r8
    ead8:	4798      	blx	r3
    eada:	2800      	cmp	r0, #0
    eadc:	d1c5      	bne.n	ea6a <gatt_read_type_rsp+0xbe>
    eade:	e7e3      	b.n	eaa8 <gatt_read_type_rsp+0xfc>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
    eae0:	2a03      	cmp	r2, #3
    eae2:	d165      	bne.n	ebb0 <gatt_read_type_rsp+0x204>
	switch (rsp->len) {
    eae4:	7838      	ldrb	r0, [r7, #0]
    eae6:	2807      	cmp	r0, #7
    eae8:	d007      	beq.n	eafa <gatt_read_type_rsp+0x14e>
    eaea:	2815      	cmp	r0, #21
    eaec:	d028      	beq.n	eb40 <gatt_read_type_rsp+0x194>
		BT_ERR("Invalid data len %u", rsp->len);
    eaee:	4b63      	ldr	r3, [pc, #396]	; (ec7c <gatt_read_type_rsp+0x2d0>)
    eaf0:	9207      	str	r2, [sp, #28]
	switch (rsp->len) {
    eaf2:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    eaf6:	920f      	str	r2, [sp, #60]	; 0x3c
    eaf8:	e78f      	b.n	ea1a <gatt_read_type_rsp+0x6e>
		u.uuid.type = BT_UUID_TYPE_16;
    eafa:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    eafe:	1e5c      	subs	r4, r3, #1
    eb00:	b2a4      	uxth	r4, r4
    eb02:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
    eb06:	2600      	movs	r6, #0
    eb08:	f10d 0a1c 	add.w	sl, sp, #28
	for (length--, pdu = rsp->data; length >= rsp->len;
    eb0c:	783b      	ldrb	r3, [r7, #0]
    eb0e:	42a3      	cmp	r3, r4
    eb10:	f63f af70 	bhi.w	e9f4 <gatt_read_type_rsp+0x48>
		handle = sys_le16_to_cpu(data->handle);
    eb14:	f8b9 b000 	ldrh.w	fp, [r9]
    eb18:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    eb1c:	2e00      	cmp	r6, #0
    eb1e:	d082      	beq.n	ea26 <gatt_read_type_rsp+0x7a>
		switch (u.uuid.type) {
    eb20:	f89d 301c 	ldrb.w	r3, [sp, #28]
    eb24:	b183      	cbz	r3, eb48 <gatt_read_type_rsp+0x19c>
    eb26:	2b02      	cmp	r3, #2
    eb28:	d017      	beq.n	eb5a <gatt_read_type_rsp+0x1ae>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    eb2a:	6829      	ldr	r1, [r5, #0]
    eb2c:	b1e9      	cbz	r1, eb6a <gatt_read_type_rsp+0x1be>
    eb2e:	4650      	mov	r0, sl
    eb30:	f015 fff3 	bl	24b1a <bt_uuid_cmp>
    eb34:	b1c8      	cbz	r0, eb6a <gatt_read_type_rsp+0x1be>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    eb36:	783a      	ldrb	r2, [r7, #0]
    eb38:	1aa4      	subs	r4, r4, r2
    eb3a:	b2a4      	uxth	r4, r4
    eb3c:	4491      	add	r9, r2
    eb3e:	e7e5      	b.n	eb0c <gatt_read_type_rsp+0x160>
		u.uuid.type = BT_UUID_TYPE_128;
    eb40:	2202      	movs	r2, #2
    eb42:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    eb46:	e7da      	b.n	eafe <gatt_read_type_rsp+0x152>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    eb48:	f899 3005 	ldrb.w	r3, [r9, #5]
    eb4c:	f899 2006 	ldrb.w	r2, [r9, #6]
    eb50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    eb54:	f8ad 301e 	strh.w	r3, [sp, #30]
			break;
    eb58:	e7e7      	b.n	eb2a <gatt_read_type_rsp+0x17e>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    eb5a:	2210      	movs	r2, #16
    eb5c:	f109 0105 	add.w	r1, r9, #5
    eb60:	f10d 001d 	add.w	r0, sp, #29
    eb64:	f015 ff1b 	bl	2499e <memcpy>
			break;
    eb68:	e7df      	b.n	eb2a <gatt_read_type_rsp+0x17e>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    eb6a:	f8b9 2003 	ldrh.w	r2, [r9, #3]
    eb6e:	f899 3002 	ldrb.w	r3, [r9, #2]
    eb72:	f8ad 2018 	strh.w	r2, [sp, #24]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    eb76:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    eb7a:	f88d 301a 	strb.w	r3, [sp, #26]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    eb7e:	f8ad 2012 	strh.w	r2, [sp, #18]
    eb82:	2300      	movs	r3, #0
    eb84:	aa04      	add	r2, sp, #16
    eb86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    eb8a:	aa05      	add	r2, sp, #20
    eb8c:	f88d 3010 	strb.w	r3, [sp, #16]
    eb90:	930e      	str	r3, [sp, #56]	; 0x38
    eb92:	920f      	str	r2, [sp, #60]	; 0x3c
    eb94:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    eb98:	f8cd a014 	str.w	sl, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    eb9c:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
    eb9e:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    eba2:	462a      	mov	r2, r5
    eba4:	a90c      	add	r1, sp, #48	; 0x30
    eba6:	4640      	mov	r0, r8
    eba8:	4798      	blx	r3
    ebaa:	2800      	cmp	r0, #0
    ebac:	d1c3      	bne.n	eb36 <gatt_read_type_rsp+0x18a>
    ebae:	e77b      	b.n	eaa8 <gatt_read_type_rsp+0xfc>
	if (params->uuid->type != BT_UUID_TYPE_16) {
    ebb0:	682a      	ldr	r2, [r5, #0]
    ebb2:	7816      	ldrb	r6, [r2, #0]
    ebb4:	b976      	cbnz	r6, ebd4 <gatt_read_type_rsp+0x228>
	uuid_val = BT_UUID_16(params->uuid)->val;
    ebb6:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
    ebb8:	1e5c      	subs	r4, r3, #1
    ebba:	b2a4      	uxth	r4, r4
    ebbc:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
    ebc0:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ebc4:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    ebc6:	783b      	ldrb	r3, [r7, #0]
    ebc8:	42a3      	cmp	r3, r4
    ebca:	d908      	bls.n	ebde <gatt_read_type_rsp+0x232>
	if (length == 0U && handle) {
    ebcc:	b914      	cbnz	r4, ebd4 <gatt_read_type_rsp+0x228>
    ebce:	2e00      	cmp	r6, #0
    ebd0:	f47f af12 	bne.w	e9f8 <gatt_read_type_rsp+0x4c>
	params->func(conn, NULL, params);
    ebd4:	686b      	ldr	r3, [r5, #4]
    ebd6:	462a      	mov	r2, r5
    ebd8:	2100      	movs	r1, #0
    ebda:	4640      	mov	r0, r8
    ebdc:	e6f0      	b.n	e9c0 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
    ebde:	f8b9 2000 	ldrh.w	r2, [r9]
    ebe2:	b296      	uxth	r6, r2
		if (!handle) {
    ebe4:	2e00      	cmp	r6, #0
    ebe6:	d0f5      	beq.n	ebd4 <gatt_read_type_rsp+0x228>
		switch (uuid_val) {
    ebe8:	f1bb 0f04 	cmp.w	fp, #4
    ebec:	d8f2      	bhi.n	ebd4 <gatt_read_type_rsp+0x228>
    ebee:	a301      	add	r3, pc, #4	; (adr r3, ebf4 <gatt_read_type_rsp+0x248>)
    ebf0:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
    ebf4:	0000ec09 	.word	0x0000ec09
    ebf8:	0000ebd5 	.word	0x0000ebd5
    ebfc:	0000ec09 	.word	0x0000ec09
    ec00:	0000ec09 	.word	0x0000ec09
    ec04:	0000ec41 	.word	0x0000ec41
			value.scc.flags = sys_get_le16(data->value);
    ec08:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    ec0c:	f8ad 301c 	strh.w	r3, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ec10:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
    ec12:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ec16:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
    ec1a:	ab07      	add	r3, sp, #28
    ec1c:	930f      	str	r3, [sp, #60]	; 0x3c
    ec1e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ec22:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ec24:	f88d a042 	strb.w	sl, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ec28:	462a      	mov	r2, r5
    ec2a:	a90c      	add	r1, sp, #48	; 0x30
    ec2c:	4640      	mov	r0, r8
    ec2e:	4798      	blx	r3
    ec30:	2800      	cmp	r0, #0
    ec32:	f43f af39 	beq.w	eaa8 <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    ec36:	783a      	ldrb	r2, [r7, #0]
    ec38:	1aa4      	subs	r4, r4, r2
    ec3a:	b2a4      	uxth	r4, r4
    ec3c:	4491      	add	r9, r2
    ec3e:	e7c2      	b.n	ebc6 <gatt_read_type_rsp+0x21a>
			value.cpf.format = cpf->format;
    ec40:	f899 3002 	ldrb.w	r3, [r9, #2]
    ec44:	f88d 301c 	strb.w	r3, [sp, #28]
			value.cpf.exponent = cpf->exponent;
    ec48:	f899 3003 	ldrb.w	r3, [r9, #3]
    ec4c:	f88d 301d 	strb.w	r3, [sp, #29]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
    ec50:	f899 1005 	ldrb.w	r1, [r9, #5]
    ec54:	f899 3004 	ldrb.w	r3, [r9, #4]
    ec58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ec5c:	f8ad 301e 	strh.w	r3, [sp, #30]
			value.cpf.name_space = cpf->name_space;
    ec60:	f899 3006 	ldrb.w	r3, [r9, #6]
    ec64:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
    ec68:	f899 3007 	ldrb.w	r3, [r9, #7]
    ec6c:	f899 1008 	ldrb.w	r1, [r9, #8]
    ec70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ec74:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
    ec78:	e7ca      	b.n	ec10 <gatt_read_type_rsp+0x264>
    ec7a:	bf00      	nop
    ec7c:	0002c056 	.word	0x0002c056
    ec80:	00028968 	.word	0x00028968
    ec84:	0000ec8d 	.word	0x0000ec8d
    ec88:	00025f2f 	.word	0x00025f2f

0000ec8c <read_included_uuid_cb>:
{
    ec8c:	b570      	push	{r4, r5, r6, lr}
    ec8e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    ec90:	2b10      	cmp	r3, #16
{
    ec92:	4611      	mov	r1, r2
    ec94:	9c12      	ldr	r4, [sp, #72]	; 0x48
    ec96:	4605      	mov	r5, r0
    ec98:	461a      	mov	r2, r3
	if (length != 16U) {
    ec9a:	d013      	beq.n	ecc4 <read_included_uuid_cb+0x38>
		BT_ERR("Invalid data len %u", length);
    ec9c:	4b24      	ldr	r3, [pc, #144]	; (ed30 <read_included_uuid_cb+0xa4>)
    ec9e:	4825      	ldr	r0, [pc, #148]	; (ed34 <read_included_uuid_cb+0xa8>)
    eca0:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    eca4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eca8:	2303      	movs	r3, #3
    ecaa:	aa0b      	add	r2, sp, #44	; 0x2c
    ecac:	9303      	str	r3, [sp, #12]
    ecae:	930b      	str	r3, [sp, #44]	; 0x2c
    ecb0:	f017 f9ce 	bl	26050 <z_log_msg2_static_create.constprop.0>
		params->func(conn, NULL, params);
    ecb4:	6863      	ldr	r3, [r4, #4]
    ecb6:	4622      	mov	r2, r4
    ecb8:	2100      	movs	r1, #0
    ecba:	4628      	mov	r0, r5
}
    ecbc:	b00e      	add	sp, #56	; 0x38
    ecbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
    ecc2:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
    ecc4:	8963      	ldrh	r3, [r4, #10]
    ecc6:	f8ad 3008 	strh.w	r3, [sp, #8]
	value.end_handle = params->_included.end_handle;
    ecca:	89a3      	ldrh	r3, [r4, #12]
    eccc:	f8ad 300a 	strh.w	r3, [sp, #10]
	value.uuid = &u.uuid;
    ecd0:	ae03      	add	r6, sp, #12
	u.uuid.type = BT_UUID_TYPE_128;
    ecd2:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
    ecd4:	f10d 000d 	add.w	r0, sp, #13
	value.uuid = &u.uuid;
    ecd8:	9601      	str	r6, [sp, #4]
	u.uuid.type = BT_UUID_TYPE_128;
    ecda:	f88d 300c 	strb.w	r3, [sp, #12]
	memcpy(u.u128.val, pdu, length);
    ecde:	f015 fe5e 	bl	2499e <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ece2:	6821      	ldr	r1, [r4, #0]
    ece4:	b9c9      	cbnz	r1, ed1a <read_included_uuid_cb+0x8e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ece6:	2300      	movs	r3, #0
    ece8:	f642 0202 	movw	r2, #10242	; 0x2802
    ecec:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    ecf0:	f88d 3000 	strb.w	r3, [sp]
    ecf4:	f8ad 2002 	strh.w	r2, [sp, #2]
    ecf8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    ecfc:	aa01      	add	r2, sp, #4
	attr.handle = params->_included.attr_handle;
    ecfe:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ed00:	920b      	str	r2, [sp, #44]	; 0x2c
	attr.handle = params->_included.attr_handle;
    ed02:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ed06:	f8cd d020 	str.w	sp, [sp, #32]
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ed0a:	6863      	ldr	r3, [r4, #4]
    ed0c:	4622      	mov	r2, r4
    ed0e:	a908      	add	r1, sp, #32
    ed10:	4628      	mov	r0, r5
    ed12:	4798      	blx	r3
    ed14:	b930      	cbnz	r0, ed24 <read_included_uuid_cb+0x98>
}
    ed16:	b00e      	add	sp, #56	; 0x38
    ed18:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ed1a:	4630      	mov	r0, r6
    ed1c:	f015 fefd 	bl	24b1a <bt_uuid_cmp>
    ed20:	2800      	cmp	r0, #0
    ed22:	d0e0      	beq.n	ece6 <read_included_uuid_cb+0x5a>
	gatt_discover_next(conn, params->start_handle, params);
    ed24:	8921      	ldrh	r1, [r4, #8]
    ed26:	4622      	mov	r2, r4
    ed28:	4628      	mov	r0, r5
    ed2a:	f017 fbd3 	bl	264d4 <gatt_discover_next>
	return;
    ed2e:	e7f2      	b.n	ed16 <read_included_uuid_cb+0x8a>
    ed30:	0002c056 	.word	0x0002c056
    ed34:	00028968 	.word	0x00028968

0000ed38 <gatt_find_info_rsp>:
{
    ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed3c:	b091      	sub	sp, #68	; 0x44
    ed3e:	4680      	mov	r8, r0
    ed40:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    ed42:	b981      	cbnz	r1, ed66 <gatt_find_info_rsp+0x2e>
	switch (rsp->format) {
    ed44:	7810      	ldrb	r0, [r2, #0]
    ed46:	2801      	cmp	r0, #1
    ed48:	d013      	beq.n	ed72 <gatt_find_info_rsp+0x3a>
    ed4a:	2802      	cmp	r0, #2
    ed4c:	d02a      	beq.n	eda4 <gatt_find_info_rsp+0x6c>
		BT_ERR("Invalid format %u", rsp->format);
    ed4e:	4b50      	ldr	r3, [pc, #320]	; (ee90 <gatt_find_info_rsp+0x158>)
    ed50:	aa0d      	add	r2, sp, #52	; 0x34
	switch (rsp->format) {
    ed52:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
		BT_ERR("Invalid format %u", rsp->format);
    ed56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ed5a:	2303      	movs	r3, #3
    ed5c:	484d      	ldr	r0, [pc, #308]	; (ee94 <gatt_find_info_rsp+0x15c>)
    ed5e:	9305      	str	r3, [sp, #20]
    ed60:	930d      	str	r3, [sp, #52]	; 0x34
    ed62:	f017 f975 	bl	26050 <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    ed66:	6873      	ldr	r3, [r6, #4]
    ed68:	4632      	mov	r2, r6
    ed6a:	2100      	movs	r1, #0
    ed6c:	4640      	mov	r0, r8
    ed6e:	4798      	blx	r3
    ed70:	e08a      	b.n	ee88 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_16;
    ed72:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i16);
    ed76:	f04f 0a04 	mov.w	sl, #4
	length--;
    ed7a:	3b01      	subs	r3, #1
    ed7c:	b29b      	uxth	r3, r3
	if (length < len) {
    ed7e:	4553      	cmp	r3, sl
    ed80:	d3f1      	bcc.n	ed66 <gatt_find_info_rsp+0x2e>
	for (i = length / len, pdu = rsp->info; i != 0;
    ed82:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    ed86:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    ed8a:	9300      	str	r3, [sp, #0]
    ed8c:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    ed8e:	46cb      	mov	fp, r9
			skip = false;
    ed90:	464d      	mov	r5, r9
    ed92:	af05      	add	r7, sp, #20
	for (i = length / len, pdu = rsp->info; i != 0;
    ed94:	9b00      	ldr	r3, [sp, #0]
    ed96:	b953      	cbnz	r3, edae <gatt_find_info_rsp+0x76>
	gatt_discover_next(conn, handle, params);
    ed98:	4632      	mov	r2, r6
    ed9a:	4659      	mov	r1, fp
    ed9c:	4640      	mov	r0, r8
    ed9e:	f017 fb99 	bl	264d4 <gatt_discover_next>
	return;
    eda2:	e071      	b.n	ee88 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_128;
    eda4:	f88d 0014 	strb.w	r0, [sp, #20]
		len = sizeof(*info.i128);
    eda8:	f04f 0a12 	mov.w	sl, #18
		break;
    edac:	e7e5      	b.n	ed7a <gatt_find_info_rsp+0x42>
		handle = sys_le16_to_cpu(info.i16->handle);
    edae:	8823      	ldrh	r3, [r4, #0]
    edb0:	9301      	str	r3, [sp, #4]
    edb2:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
    edb6:	f1b9 0f00 	cmp.w	r9, #0
    edba:	d151      	bne.n	ee60 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
    edbc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    edc0:	2b00      	cmp	r3, #0
    edc2:	d03a      	beq.n	ee3a <gatt_find_info_rsp+0x102>
    edc4:	2b02      	cmp	r3, #2
    edc6:	d03f      	beq.n	ee48 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    edc8:	6831      	ldr	r1, [r6, #0]
    edca:	2900      	cmp	r1, #0
    edcc:	d143      	bne.n	ee56 <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    edce:	7c33      	ldrb	r3, [r6, #16]
    edd0:	2b04      	cmp	r3, #4
    edd2:	d148      	bne.n	ee66 <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    edd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    edd8:	a903      	add	r1, sp, #12
    edda:	4638      	mov	r0, r7
    eddc:	f88d 500c 	strb.w	r5, [sp, #12]
    ede0:	f8ad 300e 	strh.w	r3, [sp, #14]
    ede4:	f015 fe99 	bl	24b1a <bt_uuid_cmp>
    ede8:	b310      	cbz	r0, ee30 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    edea:	f642 0301 	movw	r3, #10241	; 0x2801
    edee:	a904      	add	r1, sp, #16
    edf0:	4638      	mov	r0, r7
    edf2:	f88d 5010 	strb.w	r5, [sp, #16]
    edf6:	f8ad 3012 	strh.w	r3, [sp, #18]
    edfa:	f015 fe8e 	bl	24b1a <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    edfe:	b1b8      	cbz	r0, ee30 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    ee00:	f642 0302 	movw	r3, #10242	; 0x2802
    ee04:	a90a      	add	r1, sp, #40	; 0x28
    ee06:	4638      	mov	r0, r7
    ee08:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    ee0c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    ee10:	f015 fe83 	bl	24b1a <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    ee14:	b160      	cbz	r0, ee30 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    ee16:	f642 0303 	movw	r3, #10243	; 0x2803
    ee1a:	a90a      	add	r1, sp, #40	; 0x28
    ee1c:	4638      	mov	r0, r7
    ee1e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    ee22:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    ee26:	f015 fe78 	bl	24b1a <bt_uuid_cmp>
    ee2a:	b9e0      	cbnz	r0, ee66 <gatt_find_info_rsp+0x12e>
				skip = true;
    ee2c:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    ee30:	9b00      	ldr	r3, [sp, #0]
    ee32:	3b01      	subs	r3, #1
    ee34:	9300      	str	r3, [sp, #0]
    ee36:	4454      	add	r4, sl
    ee38:	e7ac      	b.n	ed94 <gatt_find_info_rsp+0x5c>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    ee3a:	78a3      	ldrb	r3, [r4, #2]
    ee3c:	78e2      	ldrb	r2, [r4, #3]
    ee3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee42:	f8ad 3016 	strh.w	r3, [sp, #22]
			break;
    ee46:	e7bf      	b.n	edc8 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    ee48:	2210      	movs	r2, #16
    ee4a:	1ca1      	adds	r1, r4, #2
    ee4c:	f10d 0015 	add.w	r0, sp, #21
    ee50:	f015 fda5 	bl	2499e <memcpy>
			break;
    ee54:	e7b8      	b.n	edc8 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ee56:	4638      	mov	r0, r7
    ee58:	f015 fe5f 	bl	24b1a <bt_uuid_cmp>
    ee5c:	2800      	cmp	r0, #0
    ee5e:	d0b6      	beq.n	edce <gatt_find_info_rsp+0x96>
			skip = false;
    ee60:	f04f 0900 	mov.w	r9, #0
    ee64:	e7e4      	b.n	ee30 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    ee66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ee6a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ee6e:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
    ee72:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ee76:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ee78:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ee7c:	4632      	mov	r2, r6
    ee7e:	a90a      	add	r1, sp, #40	; 0x28
    ee80:	4640      	mov	r0, r8
    ee82:	4798      	blx	r3
    ee84:	2800      	cmp	r0, #0
    ee86:	d1d3      	bne.n	ee30 <gatt_find_info_rsp+0xf8>
}
    ee88:	b011      	add	sp, #68	; 0x44
    ee8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee8e:	bf00      	nop
    ee90:	0002c06a 	.word	0x0002c06a
    ee94:	00028968 	.word	0x00028968

0000ee98 <bt_gatt_read>:
{
    ee98:	b507      	push	{r0, r1, r2, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    ee9a:	7b43      	ldrb	r3, [r0, #13]
    ee9c:	2b07      	cmp	r3, #7
{
    ee9e:	460a      	mov	r2, r1
	if (conn->state != BT_CONN_CONNECTED) {
    eea0:	d127      	bne.n	eef2 <bt_gatt_read+0x5a>
	if (params->handle_count == 0) {
    eea2:	684b      	ldr	r3, [r1, #4]
    eea4:	b93b      	cbnz	r3, eeb6 <bt_gatt_read+0x1e>
	return gatt_req_send(conn, gatt_read_rsp, params,
    eea6:	2308      	movs	r3, #8
    eea8:	f04f 0e04 	mov.w	lr, #4
    eeac:	e9cd 3e00 	strd	r3, lr, [sp]
    eeb0:	4b13      	ldr	r3, [pc, #76]	; (ef00 <bt_gatt_read+0x68>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
    eeb2:	4914      	ldr	r1, [pc, #80]	; (ef04 <bt_gatt_read+0x6c>)
    eeb4:	e009      	b.n	eeca <bt_gatt_read+0x32>
	if (params->handle_count > 1) {
    eeb6:	2b01      	cmp	r3, #1
    eeb8:	d00c      	beq.n	eed4 <bt_gatt_read+0x3c>
		if (params->multiple.variable) {
    eeba:	7b09      	ldrb	r1, [r1, #12]
    eebc:	b9e1      	cbnz	r1, eef8 <bt_gatt_read+0x60>
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
    eebe:	005b      	lsls	r3, r3, #1
    eec0:	9301      	str	r3, [sp, #4]
    eec2:	230e      	movs	r3, #14
    eec4:	9300      	str	r3, [sp, #0]
    eec6:	4910      	ldr	r1, [pc, #64]	; (ef08 <bt_gatt_read+0x70>)
    eec8:	4b10      	ldr	r3, [pc, #64]	; (ef0c <bt_gatt_read+0x74>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
    eeca:	f016 fff6 	bl	25eba <gatt_req_send>
}
    eece:	b003      	add	sp, #12
    eed0:	f85d fb04 	ldr.w	pc, [sp], #4
	if (params->single.offset) {
    eed4:	894b      	ldrh	r3, [r1, #10]
    eed6:	b133      	cbz	r3, eee6 <bt_gatt_read+0x4e>
	return gatt_req_send(conn, gatt_read_rsp, params,
    eed8:	230c      	movs	r3, #12
    eeda:	f04f 0c04 	mov.w	ip, #4
    eede:	e9cd 3c00 	strd	r3, ip, [sp]
    eee2:	4b0b      	ldr	r3, [pc, #44]	; (ef10 <bt_gatt_read+0x78>)
    eee4:	e7e5      	b.n	eeb2 <bt_gatt_read+0x1a>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
    eee6:	230a      	movs	r3, #10
    eee8:	2102      	movs	r1, #2
    eeea:	e9cd 3100 	strd	r3, r1, [sp]
    eeee:	4b09      	ldr	r3, [pc, #36]	; (ef14 <bt_gatt_read+0x7c>)
    eef0:	e7df      	b.n	eeb2 <bt_gatt_read+0x1a>
		return -ENOTCONN;
    eef2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    eef6:	e7ea      	b.n	eece <bt_gatt_read+0x36>
			return gatt_read_mult_vl(conn, params);
    eef8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    eefc:	e7e7      	b.n	eece <bt_gatt_read+0x36>
    eefe:	bf00      	nop
    ef00:	000261d1 	.word	0x000261d1
    ef04:	0000ef19 	.word	0x0000ef19
    ef08:	0002601b 	.word	0x0002601b
    ef0c:	00025ff3 	.word	0x00025ff3
    ef10:	00025f6f 	.word	0x00025f6f
    ef14:	00025f5b 	.word	0x00025f5b

0000ef18 <gatt_read_rsp>:
{
    ef18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ef1c:	b08b      	sub	sp, #44	; 0x2c
    ef1e:	4606      	mov	r6, r0
    ef20:	9c12      	ldr	r4, [sp, #72]	; 0x48
    ef22:	4690      	mov	r8, r2
    ef24:	461d      	mov	r5, r3
	if (err || !length) {
    ef26:	460f      	mov	r7, r1
    ef28:	b901      	cbnz	r1, ef2c <gatt_read_rsp+0x14>
    ef2a:	b953      	cbnz	r3, ef42 <gatt_read_rsp+0x2a>
		params->func(conn, err, params, NULL, 0);
    ef2c:	2300      	movs	r3, #0
    ef2e:	9312      	str	r3, [sp, #72]	; 0x48
    ef30:	6825      	ldr	r5, [r4, #0]
    ef32:	4622      	mov	r2, r4
    ef34:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    ef36:	4630      	mov	r0, r6
    ef38:	46ac      	mov	ip, r5
}
    ef3a:	b00b      	add	sp, #44	; 0x2c
    ef3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    ef40:	4760      	bx	ip
	if (!params->handle_count) {
    ef42:	6863      	ldr	r3, [r4, #4]
    ef44:	2b00      	cmp	r3, #0
    ef46:	d148      	bne.n	efda <gatt_read_rsp+0xc2>
	for (length--, pdu = rsp->data; length;
    ef48:	3d01      	subs	r5, #1
    ef4a:	b2ad      	uxth	r5, r5
    ef4c:	f102 0901 	add.w	r9, r2, #1
    ef50:	b33d      	cbz	r5, efa2 <gatt_read_rsp+0x8a>
		handle = sys_le16_to_cpu(data->handle);
    ef52:	f8b9 3000 	ldrh.w	r3, [r9]
    ef56:	b29a      	uxth	r2, r3
		if (!handle) {
    ef58:	b96a      	cbnz	r2, ef76 <gatt_read_rsp+0x5e>
			BT_ERR("Invalid handle");
    ef5a:	4b2f      	ldr	r3, [pc, #188]	; (f018 <gatt_read_rsp+0x100>)
    ef5c:	9308      	str	r3, [sp, #32]
    ef5e:	482f      	ldr	r0, [pc, #188]	; (f01c <gatt_read_rsp+0x104>)
    ef60:	2302      	movs	r3, #2
    ef62:	aa07      	add	r2, sp, #28
    ef64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef68:	9303      	str	r3, [sp, #12]
    ef6a:	9307      	str	r3, [sp, #28]
    ef6c:	f017 f870 	bl	26050 <z_log_msg2_static_create.constprop.0>
}
    ef70:	b00b      	add	sp, #44	; 0x2c
    ef72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    ef76:	f898 1000 	ldrb.w	r1, [r8]
		params->by_uuid.start_handle = handle;
    ef7a:	8123      	strh	r3, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    ef7c:	42a9      	cmp	r1, r5
    ef7e:	bf8c      	ite	hi
    ef80:	1ea9      	subhi	r1, r5, #2
    ef82:	3902      	subls	r1, #2
    ef84:	b289      	uxth	r1, r1
		if (params->func(conn, 0, params, data->value, len) ==
    ef86:	9100      	str	r1, [sp, #0]
    ef88:	6827      	ldr	r7, [r4, #0]
    ef8a:	f109 0302 	add.w	r3, r9, #2
    ef8e:	4622      	mov	r2, r4
    ef90:	2100      	movs	r1, #0
    ef92:	4630      	mov	r0, r6
    ef94:	47b8      	blx	r7
    ef96:	2800      	cmp	r0, #0
    ef98:	d0ea      	beq.n	ef70 <gatt_read_rsp+0x58>
		if (rsp->len > length) {
    ef9a:	f898 1000 	ldrb.w	r1, [r8]
    ef9e:	428d      	cmp	r5, r1
    efa0:	d20b      	bcs.n	efba <gatt_read_rsp+0xa2>
	if (bt_gatt_read(conn, params) < 0) {
    efa2:	4621      	mov	r1, r4
    efa4:	4630      	mov	r0, r6
    efa6:	f7ff ff77 	bl	ee98 <bt_gatt_read>
    efaa:	2800      	cmp	r0, #0
    efac:	dae0      	bge.n	ef70 <gatt_read_rsp+0x58>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    efae:	2300      	movs	r3, #0
    efb0:	9312      	str	r3, [sp, #72]	; 0x48
    efb2:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    efb4:	4622      	mov	r2, r4
    efb6:	210e      	movs	r1, #14
    efb8:	e7bd      	b.n	ef36 <gatt_read_rsp+0x1e>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    efba:	8922      	ldrh	r2, [r4, #8]
    efbc:	8960      	ldrh	r0, [r4, #10]
    efbe:	4290      	cmp	r0, r2
    efc0:	d105      	bne.n	efce <gatt_read_rsp+0xb6>
			params->func(conn, 0, params, NULL, 0);
    efc2:	2300      	movs	r3, #0
    efc4:	9312      	str	r3, [sp, #72]	; 0x48
    efc6:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    efc8:	4622      	mov	r2, r4
    efca:	4619      	mov	r1, r3
    efcc:	e7b3      	b.n	ef36 <gatt_read_rsp+0x1e>
		params->by_uuid.start_handle++;
    efce:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    efd0:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
    efd2:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    efd4:	b2ad      	uxth	r5, r5
    efd6:	4489      	add	r9, r1
    efd8:	e7ba      	b.n	ef50 <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    efda:	9500      	str	r5, [sp, #0]
    efdc:	4613      	mov	r3, r2
    efde:	f8d4 c000 	ldr.w	ip, [r4]
    efe2:	4622      	mov	r2, r4
    efe4:	47e0      	blx	ip
    efe6:	2800      	cmp	r0, #0
    efe8:	d0c2      	beq.n	ef70 <gatt_read_rsp+0x58>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    efea:	4630      	mov	r0, r6
    efec:	f016 fd80 	bl	25af0 <bt_att_get_mtu>
    eff0:	3801      	subs	r0, #1
    eff2:	4285      	cmp	r5, r0
    eff4:	da03      	bge.n	effe <gatt_read_rsp+0xe6>
		params->func(conn, 0, params, NULL, 0);
    eff6:	9712      	str	r7, [sp, #72]	; 0x48
    eff8:	6825      	ldr	r5, [r4, #0]
    effa:	463b      	mov	r3, r7
    effc:	e7e4      	b.n	efc8 <gatt_read_rsp+0xb0>
	params->single.offset += length;
    effe:	8963      	ldrh	r3, [r4, #10]
    f000:	441d      	add	r5, r3
    f002:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    f004:	4621      	mov	r1, r4
    f006:	4630      	mov	r0, r6
    f008:	f7ff ff46 	bl	ee98 <bt_gatt_read>
    f00c:	2800      	cmp	r0, #0
    f00e:	daaf      	bge.n	ef70 <gatt_read_rsp+0x58>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    f010:	9712      	str	r7, [sp, #72]	; 0x48
    f012:	6825      	ldr	r5, [r4, #0]
    f014:	463b      	mov	r3, r7
    f016:	e7cd      	b.n	efb4 <gatt_read_rsp+0x9c>
    f018:	0002c07c 	.word	0x0002c07c
    f01c:	00028968 	.word	0x00028968

0000f020 <bt_gatt_mult_notification>:
{
    f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f024:	b087      	sub	sp, #28
    f026:	af00      	add	r7, sp, #0
    f028:	4681      	mov	r9, r0
    f02a:	460c      	mov	r4, r1
    f02c:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
    f02e:	f7fe fde3 	bl	dbf8 <gatt_sub_find>
	if (!sub) {
    f032:	4606      	mov	r6, r0
    f034:	b328      	cbz	r0, f082 <bt_gatt_mult_notification+0x62>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    f036:	4652      	mov	r2, sl
    f038:	4621      	mov	r1, r4
    f03a:	f107 000c 	add.w	r0, r7, #12
    f03e:	f017 ffea 	bl	27016 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    f042:	8a3b      	ldrh	r3, [r7, #16]
    f044:	2b04      	cmp	r3, #4
    f046:	d91c      	bls.n	f082 <bt_gatt_mult_notification+0x62>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    f048:	2104      	movs	r1, #4
    f04a:	f107 000c 	add.w	r0, r7, #12
    f04e:	f018 f85c 	bl	2710a <net_buf_simple_pull_mem>
		if (len > buf.len) {
    f052:	8a39      	ldrh	r1, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
    f054:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    f058:	4541      	cmp	r1, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    f05a:	4602      	mov	r2, r0
		if (len > buf.len) {
    f05c:	d215      	bcs.n	f08a <bt_gatt_mult_notification+0x6a>
			BT_ERR("Invalid data len %u > %u", len, length);
    f05e:	466c      	mov	r4, sp
    f060:	b088      	sub	sp, #32
    f062:	466a      	mov	r2, sp
    f064:	491c      	ldr	r1, [pc, #112]	; (f0d8 <bt_gatt_mult_notification+0xb8>)
    f066:	f8c2 a018 	str.w	sl, [r2, #24]
    f06a:	2304      	movs	r3, #4
    f06c:	e9c2 1804 	strd	r1, r8, [r2, #16]
    f070:	481a      	ldr	r0, [pc, #104]	; (f0dc <bt_gatt_mult_notification+0xbc>)
    f072:	f842 3f0c 	str.w	r3, [r2, #12]!
    f076:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f07a:	60bb      	str	r3, [r7, #8]
    f07c:	f016 ffe8 	bl	26050 <z_log_msg2_static_create.constprop.0>
    f080:	46a5      	mov	sp, r4
}
    f082:	371c      	adds	r7, #28
    f084:	46bd      	mov	sp, r7
    f086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    f08a:	68b4      	ldr	r4, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    f08c:	b1f4      	cbz	r4, f0cc <bt_gatt_mult_notification+0xac>
	return node->next;
    f08e:	f854 5914 	ldr.w	r5, [r4], #-20
    f092:	b105      	cbz	r5, f096 <bt_gatt_mult_notification+0x76>
    f094:	3d14      	subs	r5, #20
		handle = sys_cpu_to_le16(nfy->handle);
    f096:	4693      	mov	fp, r2
    f098:	f83b 3b04 	ldrh.w	r3, [fp], #4
    f09c:	607b      	str	r3, [r7, #4]
			if (handle != params->value_handle) {
    f09e:	8921      	ldrh	r1, [r4, #8]
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	4299      	cmp	r1, r3
    f0a4:	d10b      	bne.n	f0be <bt_gatt_mult_notification+0x9e>
			if (params->notify(conn, params, nfy->value, len) ==
    f0a6:	f8d4 c000 	ldr.w	ip, [r4]
    f0aa:	4643      	mov	r3, r8
    f0ac:	465a      	mov	r2, fp
    f0ae:	4621      	mov	r1, r4
    f0b0:	4648      	mov	r0, r9
    f0b2:	47e0      	blx	ip
    f0b4:	b918      	cbnz	r0, f0be <bt_gatt_mult_notification+0x9e>
				bt_gatt_unsubscribe(conn, params);
    f0b6:	4621      	mov	r1, r4
    f0b8:	4648      	mov	r0, r9
    f0ba:	f017 fa96 	bl	265ea <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    f0be:	b12d      	cbz	r5, f0cc <bt_gatt_mult_notification+0xac>
    f0c0:	6969      	ldr	r1, [r5, #20]
    f0c2:	b101      	cbz	r1, f0c6 <bt_gatt_mult_notification+0xa6>
    f0c4:	3914      	subs	r1, #20
{
    f0c6:	462c      	mov	r4, r5
    f0c8:	460d      	mov	r5, r1
    f0ca:	e7e8      	b.n	f09e <bt_gatt_mult_notification+0x7e>
		net_buf_simple_pull_mem(&buf, len);
    f0cc:	4641      	mov	r1, r8
    f0ce:	f107 000c 	add.w	r0, r7, #12
    f0d2:	f018 f81a 	bl	2710a <net_buf_simple_pull_mem>
    f0d6:	e7b4      	b.n	f042 <bt_gatt_mult_notification+0x22>
    f0d8:	0002c08b 	.word	0x0002c08b
    f0dc:	00028968 	.word	0x00028968

0000f0e0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    f0e0:	b570      	push	{r4, r5, r6, lr}
    f0e2:	b08a      	sub	sp, #40	; 0x28
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f0e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f0e8:	4a1e      	ldr	r2, [pc, #120]	; (f164 <bt_gatt_connected+0x84>)
	data.conn = conn;
    f0ea:	9002      	str	r0, [sp, #8]
{
    f0ec:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f0ee:	ab02      	add	r3, sp, #8
	data.sec = BT_SECURITY_L1;
    f0f0:	2001      	movs	r0, #1
    f0f2:	f88d 000c 	strb.w	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f0f6:	f017 f9b5 	bl	26464 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
    f0fa:	4628      	mov	r0, r5
    f0fc:	f016 f87d 	bl	251fa <bt_conn_get_security>
    f100:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    f104:	4288      	cmp	r0, r1
    f106:	d20f      	bcs.n	f128 <bt_gatt_connected+0x48>
		int err = bt_conn_set_security(conn, data.sec);
    f108:	4628      	mov	r0, r5
    f10a:	f016 f846 	bl	2519a <bt_conn_set_security>

		if (err) {
    f10e:	b158      	cbz	r0, f128 <bt_gatt_connected+0x48>
			BT_WARN("Failed to set security for bonded peer (%d)",
    f110:	4b15      	ldr	r3, [pc, #84]	; (f168 <bt_gatt_connected+0x88>)
    f112:	aa07      	add	r2, sp, #28
    f114:	e9cd 3008 	strd	r3, r0, [sp, #32]
    f118:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f11c:	2303      	movs	r3, #3
    f11e:	4813      	ldr	r0, [pc, #76]	; (f16c <bt_gatt_connected+0x8c>)
    f120:	9301      	str	r3, [sp, #4]
    f122:	9307      	str	r3, [sp, #28]
    f124:	f016 ff94 	bl	26050 <z_log_msg2_static_create.constprop.0>
	sub = gatt_sub_find(conn);
    f128:	4628      	mov	r0, r5
    f12a:	f7fe fd65 	bl	dbf8 <gatt_sub_find>
	if (!sub) {
    f12e:	b1b8      	cbz	r0, f160 <bt_gatt_connected+0x80>
	return list->head;
    f130:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    f132:	b1ac      	cbz	r4, f160 <bt_gatt_connected+0x80>
    f134:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    f136:	f105 0688 	add.w	r6, r5, #136	; 0x88
    f13a:	7a28      	ldrb	r0, [r5, #8]
    f13c:	4631      	mov	r1, r6
    f13e:	f015 fe5e 	bl	24dfe <bt_addr_le_is_bonded>
    f142:	b148      	cbz	r0, f158 <bt_gatt_connected+0x78>
    f144:	f104 0010 	add.w	r0, r4, #16
    f148:	f016 fdff 	bl	25d4a <atomic_get>
    f14c:	0783      	lsls	r3, r0, #30
    f14e:	d403      	bmi.n	f158 <bt_gatt_connected+0x78>
			gatt_write_ccc(conn, params);
    f150:	4621      	mov	r1, r4
    f152:	4628      	mov	r0, r5
    f154:	f7fe fd7e 	bl	dc54 <gatt_write_ccc>
	return node->next;
    f158:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    f15a:	b10c      	cbz	r4, f160 <bt_gatt_connected+0x80>
    f15c:	3c14      	subs	r4, #20
    f15e:	e7ec      	b.n	f13a <bt_gatt_connected+0x5a>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    f160:	b00a      	add	sp, #40	; 0x28
    f162:	bd70      	pop	{r4, r5, r6, pc}
    f164:	0000e5d5 	.word	0x0000e5d5
    f168:	0002c0a4 	.word	0x0002c0a4
    f16c:	00028968 	.word	0x00028968

0000f170 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    f172:	4b08      	ldr	r3, [pc, #32]	; (f194 <bt_gatt_att_max_mtu_changed+0x24>)
    f174:	681c      	ldr	r4, [r3, #0]
    f176:	4605      	mov	r5, r0
    f178:	460e      	mov	r6, r1
    f17a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    f17c:	b14c      	cbz	r4, f192 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    f17e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    f182:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    f184:	b11b      	cbz	r3, f18e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    f186:	463a      	mov	r2, r7
    f188:	4631      	mov	r1, r6
    f18a:	4628      	mov	r0, r5
    f18c:	4798      	blx	r3
	return node->next;
    f18e:	6864      	ldr	r4, [r4, #4]
    f190:	e7f4      	b.n	f17c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    f192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f194:	2000213c 	.word	0x2000213c

0000f198 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    f198:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f19a:	4a06      	ldr	r2, [pc, #24]	; (f1b4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    f19c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f19e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    f1a0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f1a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    f1a6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    f1aa:	f017 f95b 	bl	26464 <bt_gatt_foreach_attr>
}
    f1ae:	b003      	add	sp, #12
    f1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f1b4:	0000e5d5 	.word	0x0000e5d5

0000f1b8 <db_hash_read>:
{
    f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    f1ba:	4913      	ldr	r1, [pc, #76]	; (f208 <db_hash_read+0x50>)
{
    f1bc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    f1c0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    f1c2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    f1c6:	461f      	mov	r7, r3
    f1c8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    f1ca:	f018 fe9c 	bl	27f06 <k_work_cancel_delayable_sync>
    f1ce:	480f      	ldr	r0, [pc, #60]	; (f20c <db_hash_read+0x54>)
    f1d0:	f016 fdbb 	bl	25d4a <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    f1d4:	0743      	lsls	r3, r0, #29
    f1d6:	d401      	bmi.n	f1dc <db_hash_read+0x24>
		db_hash_gen(true);
    f1d8:	f7fe ffac 	bl	e134 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    f1dc:	2101      	movs	r1, #1
    f1de:	4620      	mov	r0, r4
    f1e0:	f017 fa94 	bl	2670c <bt_gatt_change_aware>
	if (offset > value_len) {
    f1e4:	2e10      	cmp	r6, #16
    f1e6:	d80c      	bhi.n	f202 <db_hash_read+0x4a>
	len = MIN(buf_len, value_len - offset);
    f1e8:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    f1ec:	4908      	ldr	r1, [pc, #32]	; (f210 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
    f1ee:	42bc      	cmp	r4, r7
    f1f0:	bfa8      	it	ge
    f1f2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    f1f4:	4622      	mov	r2, r4
    f1f6:	4431      	add	r1, r6
    f1f8:	4628      	mov	r0, r5
    f1fa:	f015 fbd0 	bl	2499e <memcpy>
}
    f1fe:	4620      	mov	r0, r4
    f200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    f202:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    f206:	e7fa      	b.n	f1fe <db_hash_read+0x46>
    f208:	20001610 	.word	0x20001610
    f20c:	20001688 	.word	0x20001688
    f210:	200015d0 	.word	0x200015d0

0000f214 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    f214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    f218:	4a30      	ldr	r2, [pc, #192]	; (f2dc <bt_gatt_disconnected+0xc8>)
    f21a:	4603      	mov	r3, r0
{
    f21c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    f21e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f222:	2001      	movs	r0, #1
    f224:	f017 f91e 	bl	26464 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    f228:	4620      	mov	r0, r4
    f22a:	f7fe fce5 	bl	dbf8 <gatt_sub_find>
	if (!sub) {
    f22e:	4607      	mov	r7, r0
    f230:	b378      	cbz	r0, f292 <bt_gatt_disconnected+0x7e>
	return list->head;
    f232:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    f234:	b36d      	cbz	r5, f292 <bt_gatt_disconnected+0x7e>
	return node->next;
    f236:	f855 6914 	ldr.w	r6, [r5], #-20
    f23a:	b106      	cbz	r6, f23e <bt_gatt_disconnected+0x2a>
    f23c:	3e14      	subs	r6, #20
{
    f23e:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    f242:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    f246:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
    f24a:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    f24c:	7a20      	ldrb	r0, [r4, #8]
    f24e:	4649      	mov	r1, r9
    f250:	f015 fdd5 	bl	24dfe <bt_addr_le_is_bonded>
    f254:	b970      	cbnz	r0, f274 <bt_gatt_disconnected+0x60>
			params->value = 0U;
    f256:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
    f25a:	462b      	mov	r3, r5
    f25c:	4642      	mov	r2, r8
    f25e:	4639      	mov	r1, r7
    f260:	4620      	mov	r0, r4
    f262:	f016 fe0b 	bl	25e7c <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    f266:	b1a6      	cbz	r6, f292 <bt_gatt_disconnected+0x7e>
    f268:	6973      	ldr	r3, [r6, #20]
    f26a:	b103      	cbz	r3, f26e <bt_gatt_disconnected+0x5a>
    f26c:	3b14      	subs	r3, #20
{
    f26e:	4635      	mov	r5, r6
    f270:	461e      	mov	r6, r3
    f272:	e7eb      	b.n	f24c <bt_gatt_disconnected+0x38>
    f274:	f105 0010 	add.w	r0, r5, #16
    f278:	f016 fd67 	bl	25d4a <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    f27c:	07c3      	lsls	r3, r0, #31
    f27e:	d4ea      	bmi.n	f256 <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    f280:	787b      	ldrb	r3, [r7, #1]
    f282:	b11b      	cbz	r3, f28c <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    f284:	4649      	mov	r1, r9
    f286:	4650      	mov	r0, sl
    f288:	f016 fde9 	bl	25e5e <bt_addr_le_copy>
			prev = &params->node;
    f28c:	f105 0814 	add.w	r8, r5, #20
    f290:	e7e9      	b.n	f266 <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
    f292:	4620      	mov	r0, r4
    f294:	f7fe fc62 	bl	db5c <find_cf_cfg>
	if (!cfg) {
    f298:	4605      	mov	r5, r0
    f29a:	b1e0      	cbz	r0, f2d6 <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    f29c:	f104 0688 	add.w	r6, r4, #136	; 0x88
    f2a0:	7a20      	ldrb	r0, [r4, #8]
    f2a2:	4631      	mov	r1, r6
    f2a4:	f015 fdab 	bl	24dfe <bt_addr_le_is_bonded>
    f2a8:	b920      	cbnz	r0, f2b4 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
    f2aa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    f2ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    f2b0:	f016 bed1 	b.w	26056 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    f2b4:	1c68      	adds	r0, r5, #1
    f2b6:	4631      	mov	r1, r6
    f2b8:	350c      	adds	r5, #12
    f2ba:	f016 fdd0 	bl	25e5e <bt_addr_le_copy>
    f2be:	f3bf 8f5b 	dmb	ish
    f2c2:	e855 3f00 	ldrex	r3, [r5]
    f2c6:	f023 0302 	bic.w	r3, r3, #2
    f2ca:	e845 3200 	strex	r2, r3, [r5]
    f2ce:	2a00      	cmp	r2, #0
    f2d0:	d1f7      	bne.n	f2c2 <bt_gatt_disconnected+0xae>
    f2d2:	f3bf 8f5b 	dmb	ish
}
    f2d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2da:	bf00      	nop
    f2dc:	0000deb9 	.word	0x0000deb9

0000f2e0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    f2e0:	4b10      	ldr	r3, [pc, #64]	; (f324 <get_io_capa+0x44>)
    f2e2:	681b      	ldr	r3, [r3, #0]
    f2e4:	b1bb      	cbz	r3, f316 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    f2e6:	681a      	ldr	r2, [r3, #0]
    f2e8:	b142      	cbz	r2, f2fc <get_io_capa+0x1c>
    f2ea:	6859      	ldr	r1, [r3, #4]
    f2ec:	b131      	cbz	r1, f2fc <get_io_capa+0x1c>
    f2ee:	6899      	ldr	r1, [r3, #8]
    f2f0:	b911      	cbnz	r1, f2f8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    f2f2:	490d      	ldr	r1, [pc, #52]	; (f328 <get_io_capa+0x48>)
    f2f4:	7809      	ldrb	r1, [r1, #0]
    f2f6:	b939      	cbnz	r1, f308 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    f2f8:	2004      	movs	r0, #4
    f2fa:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    f2fc:	490a      	ldr	r1, [pc, #40]	; (f328 <get_io_capa+0x48>)
    f2fe:	7809      	ldrb	r1, [r1, #0]
    f300:	b111      	cbz	r1, f308 <get_io_capa+0x28>
    f302:	b10a      	cbz	r2, f308 <get_io_capa+0x28>
    f304:	6899      	ldr	r1, [r3, #8]
    f306:	b941      	cbnz	r1, f31a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    f308:	685b      	ldr	r3, [r3, #4]
    f30a:	b943      	cbnz	r3, f31e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    f30c:	2a00      	cmp	r2, #0
    f30e:	bf0c      	ite	eq
    f310:	2003      	moveq	r0, #3
    f312:	2000      	movne	r0, #0
    f314:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    f316:	2003      	movs	r0, #3
    f318:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    f31a:	2001      	movs	r0, #1
    f31c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    f31e:	2002      	movs	r0, #2
	}
}
    f320:	4770      	bx	lr
    f322:	bf00      	nop
    f324:	200020e8 	.word	0x200020e8
    f328:	20003f3c 	.word	0x20003f3c

0000f32c <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    f32c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    f32e:	1d14      	adds	r4, r2, #4
{
    f330:	b091      	sub	sp, #68	; 0x44
    f332:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    f334:	588b      	ldr	r3, [r1, r2]
    f336:	9300      	str	r3, [sp, #0]
{
    f338:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    f33a:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    f33c:	4628      	mov	r0, r5
    f33e:	4621      	mov	r1, r4
    f340:	f017 fa1c 	bl	2677c <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    f344:	4631      	mov	r1, r6
    f346:	2210      	movs	r2, #16
    f348:	a802      	add	r0, sp, #8
    f34a:	f017 fa0d 	bl	26768 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    f34e:	ab06      	add	r3, sp, #24
    f350:	4622      	mov	r2, r4
    f352:	4629      	mov	r1, r5
    f354:	a802      	add	r0, sp, #8
    f356:	f017 fa20 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
    f35a:	4606      	mov	r6, r0
    f35c:	b168      	cbz	r0, f37a <smp_sign_buf+0x4e>
		BT_ERR("Data signing failed");
    f35e:	4b10      	ldr	r3, [pc, #64]	; (f3a0 <smp_sign_buf+0x74>)
    f360:	930e      	str	r3, [sp, #56]	; 0x38
    f362:	4810      	ldr	r0, [pc, #64]	; (f3a4 <smp_sign_buf+0x78>)
    f364:	2302      	movs	r3, #2
    f366:	aa0d      	add	r2, sp, #52	; 0x34
    f368:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f36c:	9301      	str	r3, [sp, #4]
    f36e:	930d      	str	r3, [sp, #52]	; 0x34
    f370:	f017 face 	bl	26910 <z_log_msg2_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    f374:	4630      	mov	r0, r6
    f376:	b011      	add	sp, #68	; 0x44
    f378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    f37a:	a806      	add	r0, sp, #24
    f37c:	2110      	movs	r1, #16
    f37e:	f017 f9fd 	bl	2677c <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    f382:	2204      	movs	r2, #4
    f384:	4669      	mov	r1, sp
    f386:	a807      	add	r0, sp, #28
    f388:	f015 fb09 	bl	2499e <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    f38c:	4621      	mov	r1, r4
    f38e:	4628      	mov	r0, r5
    f390:	f017 f9f4 	bl	2677c <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    f394:	220c      	movs	r2, #12
    f396:	a907      	add	r1, sp, #28
    f398:	4638      	mov	r0, r7
    f39a:	f015 fb00 	bl	2499e <memcpy>
	return 0;
    f39e:	e7e9      	b.n	f374 <smp_sign_buf+0x48>
    f3a0:	0002c0df 	.word	0x0002c0df
    f3a4:	000289a8 	.word	0x000289a8

0000f3a8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    f3a8:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    f3aa:	4b0e      	ldr	r3, [pc, #56]	; (f3e4 <bt_smp_accept+0x3c>)
{
    f3ac:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    f3ae:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
{
    f3b2:	b089      	sub	sp, #36	; 0x24
		if (smp->chan.chan.conn) {
    f3b4:	b938      	cbnz	r0, f3c6 <bt_smp_accept+0x1e>
			continue;
		}

		smp->chan.chan.ops = &ops;
    f3b6:	4a0c      	ldr	r2, [pc, #48]	; (f3e8 <bt_smp_accept+0x40>)
    f3b8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
    f3bc:	33f0      	adds	r3, #240	; 0xf0
    f3be:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    f3c0:	b009      	add	sp, #36	; 0x24
    f3c2:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    f3c6:	4b09      	ldr	r3, [pc, #36]	; (f3ec <bt_smp_accept+0x44>)
    f3c8:	4809      	ldr	r0, [pc, #36]	; (f3f0 <bt_smp_accept+0x48>)
    f3ca:	e9cd 3206 	strd	r3, r2, [sp, #24]
    f3ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f3d2:	2303      	movs	r3, #3
    f3d4:	aa05      	add	r2, sp, #20
    f3d6:	9301      	str	r3, [sp, #4]
    f3d8:	9305      	str	r3, [sp, #20]
    f3da:	f017 fa99 	bl	26910 <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    f3de:	f06f 000b 	mvn.w	r0, #11
    f3e2:	e7ed      	b.n	f3c0 <bt_smp_accept+0x18>
    f3e4:	20001690 	.word	0x20001690
    f3e8:	000291bc 	.word	0x000291bc
    f3ec:	0002c0f3 	.word	0x0002c0f3
    f3f0:	000289a8 	.word	0x000289a8

0000f3f4 <smp_chan_get>:
{
    f3f4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    f3f6:	2106      	movs	r1, #6
{
    f3f8:	b088      	sub	sp, #32
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    f3fa:	f016 f828 	bl	2544e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    f3fe:	4604      	mov	r4, r0
    f400:	b968      	cbnz	r0, f41e <smp_chan_get+0x2a>
		BT_ERR("Unable to find SMP channel");
    f402:	4b08      	ldr	r3, [pc, #32]	; (f424 <smp_chan_get+0x30>)
    f404:	9306      	str	r3, [sp, #24]
    f406:	4808      	ldr	r0, [pc, #32]	; (f428 <smp_chan_get+0x34>)
    f408:	2302      	movs	r3, #2
    f40a:	aa05      	add	r2, sp, #20
    f40c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f410:	9301      	str	r3, [sp, #4]
    f412:	9305      	str	r3, [sp, #20]
    f414:	f017 fa7c 	bl	26910 <z_log_msg2_static_create.constprop.0>
}
    f418:	4620      	mov	r0, r4
    f41a:	b008      	add	sp, #32
    f41c:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
    f41e:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    f422:	e7f9      	b.n	f418 <smp_chan_get+0x24>
    f424:	0002c118 	.word	0x0002c118
    f428:	000289a8 	.word	0x000289a8

0000f42c <smp_find>:
{
    f42c:	4601      	mov	r1, r0
    f42e:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    f430:	4803      	ldr	r0, [pc, #12]	; (f440 <smp_find+0x14>)
    f432:	f017 fa7f 	bl	26934 <atomic_test_bit>
	return NULL;
    f436:	2800      	cmp	r0, #0
}
    f438:	4802      	ldr	r0, [pc, #8]	; (f444 <smp_find+0x18>)
    f43a:	bf08      	it	eq
    f43c:	2000      	moveq	r0, #0
    f43e:	bd08      	pop	{r3, pc}
    f440:	20001694 	.word	0x20001694
    f444:	20001690 	.word	0x20001690

0000f448 <smp_dhkey_check>:
{
    f448:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f44a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    f44e:	78dd      	ldrb	r5, [r3, #3]
{
    f450:	b097      	sub	sp, #92	; 0x5c
    f452:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f454:	2d00      	cmp	r5, #0
    f456:	d173      	bne.n	f540 <smp_dhkey_check+0xf8>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    f458:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
    f45a:	2210      	movs	r2, #16
    f45c:	4629      	mov	r1, r5
    f45e:	a80c      	add	r0, sp, #48	; 0x30
    f460:	f015 faa8 	bl	249b4 <memset>
		switch (smp->method) {
    f464:	7a23      	ldrb	r3, [r4, #8]
    f466:	2b05      	cmp	r3, #5
    f468:	d853      	bhi.n	f512 <smp_dhkey_check+0xca>
    f46a:	e8df f003 	tbb	[pc, r3]
    f46e:	0309      	.short	0x0309
    f470:	4c520903 	.word	0x4c520903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    f474:	2204      	movs	r2, #4
    f476:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
    f47a:	a80c      	add	r0, sp, #48	; 0x30
    f47c:	f015 fa8f 	bl	2499e <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    f480:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
    f484:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
    f488:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f48a:	ae08      	add	r6, sp, #32
    f48c:	9301      	str	r3, [sp, #4]
    f48e:	f104 0311 	add.w	r3, r4, #17
    f492:	9202      	str	r2, [sp, #8]
    f494:	9300      	str	r3, [sp, #0]
    f496:	9603      	str	r6, [sp, #12]
    f498:	ab0c      	add	r3, sp, #48	; 0x30
    f49a:	f104 0227 	add.w	r2, r4, #39	; 0x27
    f49e:	f104 0137 	add.w	r1, r4, #55	; 0x37
    f4a2:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    f4a6:	f017 f9ba 	bl	2681e <smp_f6>
    f4aa:	2800      	cmp	r0, #0
    f4ac:	d13d      	bne.n	f52a <smp_dhkey_check+0xe2>
		if (memcmp(e, req->e, 16)) {
    f4ae:	4630      	mov	r0, r6
    f4b0:	2210      	movs	r2, #16
    f4b2:	4639      	mov	r1, r7
    f4b4:	f015 fa62 	bl	2497c <memcmp>
    f4b8:	4606      	mov	r6, r0
    f4ba:	2800      	cmp	r0, #0
    f4bc:	d13e      	bne.n	f53c <smp_dhkey_check+0xf4>
	return MIN(req->max_key_size, rsp->max_key_size);
    f4be:	7b63      	ldrb	r3, [r4, #13]
    f4c0:	7d27      	ldrb	r7, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
    f4c2:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
    f4c4:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
    f4c6:	f04f 0202 	mov.w	r2, #2
    f4ca:	a804      	add	r0, sp, #16
	return MIN(req->max_key_size, rsp->max_key_size);
    f4cc:	bf28      	it	cs
    f4ce:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
    f4d0:	f015 fa70 	bl	249b4 <memset>
		(void)memset(rand, 0, sizeof(rand));
    f4d4:	2208      	movs	r2, #8
    f4d6:	4631      	mov	r1, r6
    f4d8:	a806      	add	r0, sp, #24
    f4da:	f015 fa6b 	bl	249b4 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    f4de:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    f4e2:	9700      	str	r7, [sp, #0]
    f4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    f4e8:	aa04      	add	r2, sp, #16
    f4ea:	a906      	add	r1, sp, #24
    f4ec:	f015 fe1a 	bl	25124 <bt_conn_le_start_encryption>
    f4f0:	2800      	cmp	r0, #0
    f4f2:	da1c      	bge.n	f52e <smp_dhkey_check+0xe6>
			BT_ERR("Failed to start encryption");
    f4f4:	4b13      	ldr	r3, [pc, #76]	; (f544 <smp_dhkey_check+0xfc>)
    f4f6:	9314      	str	r3, [sp, #80]	; 0x50
    f4f8:	2302      	movs	r3, #2
    f4fa:	9305      	str	r3, [sp, #20]
    f4fc:	9313      	str	r3, [sp, #76]	; 0x4c
    f4fe:	aa13      	add	r2, sp, #76	; 0x4c
    f500:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f504:	e00e      	b.n	f524 <smp_dhkey_check+0xdc>
			if (smp->oobd_local) {
    f506:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    f50a:	2900      	cmp	r1, #0
    f50c:	d0b8      	beq.n	f480 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
    f50e:	2210      	movs	r2, #16
    f510:	e7b3      	b.n	f47a <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    f512:	4a0d      	ldr	r2, [pc, #52]	; (f548 <smp_dhkey_check+0x100>)
		switch (smp->method) {
    f514:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_ERR("Unknown pairing method (%u)", smp->method);
    f518:	2303      	movs	r3, #3
    f51a:	9308      	str	r3, [sp, #32]
    f51c:	9313      	str	r3, [sp, #76]	; 0x4c
    f51e:	aa13      	add	r2, sp, #76	; 0x4c
    f520:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_ERR("Failed to start encryption");
    f524:	4809      	ldr	r0, [pc, #36]	; (f54c <smp_dhkey_check+0x104>)
    f526:	f017 f9f3 	bl	26910 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f52a:	2508      	movs	r5, #8
    f52c:	e003      	b.n	f536 <smp_dhkey_check+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f52e:	2101      	movs	r1, #1
    f530:	1d20      	adds	r0, r4, #4
    f532:	f017 fa41 	bl	269b8 <atomic_set_bit>
}
    f536:	4628      	mov	r0, r5
    f538:	b017      	add	sp, #92	; 0x5c
    f53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    f53c:	250b      	movs	r5, #11
    f53e:	e7fa      	b.n	f536 <smp_dhkey_check+0xee>
	return 0;
    f540:	2500      	movs	r5, #0
    f542:	e7f8      	b.n	f536 <smp_dhkey_check+0xee>
    f544:	0002c14f 	.word	0x0002c14f
    f548:	0002c133 	.word	0x0002c133
    f54c:	000289a8 	.word	0x000289a8

0000f550 <smp_dhkey_generate>:
{
    f550:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f552:	1d05      	adds	r5, r0, #4
{
    f554:	b089      	sub	sp, #36	; 0x24
    f556:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f558:	2108      	movs	r1, #8
    f55a:	4628      	mov	r0, r5
    f55c:	f017 fa2c 	bl	269b8 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    f560:	490b      	ldr	r1, [pc, #44]	; (f590 <smp_dhkey_generate+0x40>)
    f562:	f104 0057 	add.w	r0, r4, #87	; 0x57
    f566:	f7fc f87b 	bl	b660 <bt_dh_key_gen>
	if (err) {
    f56a:	b178      	cbz	r0, f58c <smp_dhkey_generate+0x3c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f56c:	2108      	movs	r1, #8
    f56e:	4628      	mov	r0, r5
    f570:	f017 f9a2 	bl	268b8 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
    f574:	4b07      	ldr	r3, [pc, #28]	; (f594 <smp_dhkey_generate+0x44>)
    f576:	4808      	ldr	r0, [pc, #32]	; (f598 <smp_dhkey_generate+0x48>)
    f578:	9306      	str	r3, [sp, #24]
    f57a:	aa05      	add	r2, sp, #20
    f57c:	2302      	movs	r3, #2
    f57e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f582:	9301      	str	r3, [sp, #4]
    f584:	9305      	str	r3, [sp, #20]
    f586:	f017 f9c3 	bl	26910 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f58a:	2008      	movs	r0, #8
}
    f58c:	b009      	add	sp, #36	; 0x24
    f58e:	bd30      	pop	{r4, r5, pc}
    f590:	00026e61 	.word	0x00026e61
    f594:	0002c16a 	.word	0x0002c16a
    f598:	000289a8 	.word	0x000289a8

0000f59c <smp_ident_info>:
{
    f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f59e:	460b      	mov	r3, r1
    f5a0:	b085      	sub	sp, #20
    f5a2:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f5a4:	210d      	movs	r1, #13
    f5a6:	3004      	adds	r0, #4
    f5a8:	f017 f9c4 	bl	26934 <atomic_test_bit>
    f5ac:	b300      	cbz	r0, f5f0 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    f5ae:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f5b0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f5b4:	f103 0688 	add.w	r6, r3, #136	; 0x88
    f5b8:	7a19      	ldrb	r1, [r3, #8]
    f5ba:	4632      	mov	r2, r6
    f5bc:	2002      	movs	r0, #2
    f5be:	f017 fce8 	bl	26f92 <bt_keys_get_type>
		if (!keys) {
    f5c2:	4604      	mov	r4, r0
    f5c4:	b978      	cbnz	r0, f5e6 <smp_ident_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    f5c6:	4630      	mov	r0, r6
    f5c8:	f7f9 fc2a 	bl	8e20 <bt_addr_le_str_real>
    f5cc:	4b0b      	ldr	r3, [pc, #44]	; (f5fc <smp_ident_info+0x60>)
    f5ce:	9002      	str	r0, [sp, #8]
    f5d0:	e9cd 4300 	strd	r4, r3, [sp]
    f5d4:	4620      	mov	r0, r4
    f5d6:	490a      	ldr	r1, [pc, #40]	; (f600 <smp_ident_info+0x64>)
    f5d8:	4623      	mov	r3, r4
    f5da:	2201      	movs	r2, #1
    f5dc:	f017 f99b 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f5e0:	2008      	movs	r0, #8
}
    f5e2:	b005      	add	sp, #20
    f5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
    f5e6:	2210      	movs	r2, #16
    f5e8:	4639      	mov	r1, r7
    f5ea:	302a      	adds	r0, #42	; 0x2a
    f5ec:	f015 f9d7 	bl	2499e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    f5f0:	4628      	mov	r0, r5
    f5f2:	2109      	movs	r1, #9
    f5f4:	f017 f9e0 	bl	269b8 <atomic_set_bit>
	return 0;
    f5f8:	2000      	movs	r0, #0
    f5fa:	e7f2      	b.n	f5e2 <smp_ident_info+0x46>
    f5fc:	0002c183 	.word	0x0002c183
    f600:	000289a8 	.word	0x000289a8

0000f604 <smp_encrypt_info>:
{
    f604:	b5f0      	push	{r4, r5, r6, r7, lr}
    f606:	460b      	mov	r3, r1
    f608:	b085      	sub	sp, #20
    f60a:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f60c:	210d      	movs	r1, #13
    f60e:	3004      	adds	r0, #4
    f610:	f017 f990 	bl	26934 <atomic_test_bit>
    f614:	b300      	cbz	r0, f658 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    f616:	689f      	ldr	r7, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f618:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f61c:	f103 0688 	add.w	r6, r3, #136	; 0x88
    f620:	7a19      	ldrb	r1, [r3, #8]
    f622:	4632      	mov	r2, r6
    f624:	2004      	movs	r0, #4
    f626:	f017 fcb4 	bl	26f92 <bt_keys_get_type>
		if (!keys) {
    f62a:	4604      	mov	r4, r0
    f62c:	b978      	cbnz	r0, f64e <smp_encrypt_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    f62e:	4630      	mov	r0, r6
    f630:	f7f9 fbf6 	bl	8e20 <bt_addr_le_str_real>
    f634:	4b0b      	ldr	r3, [pc, #44]	; (f664 <smp_encrypt_info+0x60>)
    f636:	9002      	str	r0, [sp, #8]
    f638:	e9cd 4300 	strd	r4, r3, [sp]
    f63c:	4620      	mov	r0, r4
    f63e:	490a      	ldr	r1, [pc, #40]	; (f668 <smp_encrypt_info+0x64>)
    f640:	4623      	mov	r3, r4
    f642:	2201      	movs	r2, #1
    f644:	f017 f967 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f648:	2008      	movs	r0, #8
}
    f64a:	b005      	add	sp, #20
    f64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    f64e:	2210      	movs	r2, #16
    f650:	4639      	mov	r1, r7
    f652:	301a      	adds	r0, #26
    f654:	f015 f9a3 	bl	2499e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
    f658:	4628      	mov	r0, r5
    f65a:	2107      	movs	r1, #7
    f65c:	f017 f9ac 	bl	269b8 <atomic_set_bit>
	return 0;
    f660:	2000      	movs	r0, #0
    f662:	e7f2      	b.n	f64a <smp_encrypt_info+0x46>
    f664:	0002c183 	.word	0x0002c183
    f668:	000289a8 	.word	0x000289a8

0000f66c <bt_smp_distribute_keys>:
{
    f66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f670:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    f672:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
    f676:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
{
    f67a:	b094      	sub	sp, #80	; 0x50
	if (!keys) {
    f67c:	b975      	cbnz	r5, f69c <bt_smp_distribute_keys+0x30>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f67e:	3088      	adds	r0, #136	; 0x88
    f680:	f7f9 fbce 	bl	8e20 <bt_addr_le_str_real>
    f684:	4b60      	ldr	r3, [pc, #384]	; (f808 <bt_smp_distribute_keys+0x19c>)
    f686:	9002      	str	r0, [sp, #8]
    f688:	e9cd 5300 	strd	r5, r3, [sp]
    f68c:	495f      	ldr	r1, [pc, #380]	; (f80c <bt_smp_distribute_keys+0x1a0>)
    f68e:	462b      	mov	r3, r5
    f690:	2201      	movs	r2, #1
    f692:	4628      	mov	r0, r5
    f694:	f017 f93f 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f698:	2008      	movs	r0, #8
    f69a:	e0b2      	b.n	f802 <bt_smp_distribute_keys+0x196>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f69c:	f104 0804 	add.w	r8, r4, #4
    f6a0:	2105      	movs	r1, #5
    f6a2:	4640      	mov	r0, r8
    f6a4:	f017 f946 	bl	26934 <atomic_test_bit>
    f6a8:	b9c0      	cbnz	r0, f6dc <bt_smp_distribute_keys+0x70>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    f6aa:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    f6ae:	07db      	lsls	r3, r3, #31
    f6b0:	d514      	bpl.n	f6dc <bt_smp_distribute_keys+0x70>
	struct bt_keys *keys = conn->le.keys;
    f6b2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f6b6:	211a      	movs	r1, #26
    f6b8:	a80c      	add	r0, sp, #48	; 0x30
	struct bt_keys *keys = conn->le.keys;
    f6ba:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f6be:	f004 fec7 	bl	14450 <bt_rand>
    f6c2:	4681      	mov	r9, r0
    f6c4:	b318      	cbz	r0, f70e <bt_smp_distribute_keys+0xa2>
			BT_ERR("Unable to get random bytes");
    f6c6:	4b52      	ldr	r3, [pc, #328]	; (f810 <bt_smp_distribute_keys+0x1a4>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f6c8:	930a      	str	r3, [sp, #40]	; 0x28
    f6ca:	4850      	ldr	r0, [pc, #320]	; (f80c <bt_smp_distribute_keys+0x1a0>)
    f6cc:	2302      	movs	r3, #2
    f6ce:	aa09      	add	r2, sp, #36	; 0x24
    f6d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f6d4:	9305      	str	r3, [sp, #20]
    f6d6:	9309      	str	r3, [sp, #36]	; 0x24
    f6d8:	f017 f91a 	bl	26910 <z_log_msg2_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    f6dc:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    f6e0:	f010 0004 	ands.w	r0, r0, #4
    f6e4:	f000 808d 	beq.w	f802 <bt_smp_distribute_keys+0x196>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    f6e8:	210a      	movs	r1, #10
    f6ea:	4620      	mov	r0, r4
    f6ec:	f017 f978 	bl	269e0 <smp_create_pdu.constprop.0>
		if (!buf) {
    f6f0:	4606      	mov	r6, r0
    f6f2:	2800      	cmp	r0, #0
    f6f4:	d163      	bne.n	f7be <bt_smp_distribute_keys+0x152>
			BT_ERR("Unable to allocate Signing Info buffer");
    f6f6:	4b47      	ldr	r3, [pc, #284]	; (f814 <bt_smp_distribute_keys+0x1a8>)
    f6f8:	9310      	str	r3, [sp, #64]	; 0x40
    f6fa:	4844      	ldr	r0, [pc, #272]	; (f80c <bt_smp_distribute_keys+0x1a0>)
    f6fc:	2302      	movs	r3, #2
    f6fe:	aa0f      	add	r2, sp, #60	; 0x3c
    f700:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f704:	9306      	str	r3, [sp, #24]
    f706:	930f      	str	r3, [sp, #60]	; 0x3c
    f708:	f017 f902 	bl	26910 <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f70c:	e7c4      	b.n	f698 <bt_smp_distribute_keys+0x2c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    f70e:	2106      	movs	r1, #6
    f710:	4620      	mov	r0, r4
    f712:	f017 f965 	bl	269e0 <smp_create_pdu.constprop.0>
		if (!buf) {
    f716:	4607      	mov	r7, r0
    f718:	b908      	cbnz	r0, f71e <bt_smp_distribute_keys+0xb2>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f71a:	4b3f      	ldr	r3, [pc, #252]	; (f818 <bt_smp_distribute_keys+0x1ac>)
    f71c:	e7d4      	b.n	f6c8 <bt_smp_distribute_keys+0x5c>
    f71e:	2110      	movs	r1, #16
    f720:	3008      	adds	r0, #8
    f722:	f017 fcc1 	bl	270a8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    f726:	7b32      	ldrb	r2, [r6, #12]
    f728:	a90c      	add	r1, sp, #48	; 0x30
    f72a:	4682      	mov	sl, r0
    f72c:	f015 f937 	bl	2499e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    f730:	7b30      	ldrb	r0, [r6, #12]
    f732:	280f      	cmp	r0, #15
    f734:	d805      	bhi.n	f742 <bt_smp_distribute_keys+0xd6>
			(void)memset(info->ltk + keys->enc_size, 0,
    f736:	f1c0 0210 	rsb	r2, r0, #16
    f73a:	4649      	mov	r1, r9
    f73c:	4450      	add	r0, sl
    f73e:	f015 f939 	bl	249b4 <memset>
		smp_send(smp, buf, NULL, NULL);
    f742:	4639      	mov	r1, r7
    f744:	2200      	movs	r2, #0
    f746:	4620      	mov	r0, r4
    f748:	f017 f8c5 	bl	268d6 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
    f74c:	2107      	movs	r1, #7
    f74e:	4620      	mov	r0, r4
    f750:	f017 f946 	bl	269e0 <smp_create_pdu.constprop.0>
		if (!buf) {
    f754:	4607      	mov	r7, r0
    f756:	b908      	cbnz	r0, f75c <bt_smp_distribute_keys+0xf0>
			BT_ERR("Unable to allocate Central Ident buffer");
    f758:	4b30      	ldr	r3, [pc, #192]	; (f81c <bt_smp_distribute_keys+0x1b0>)
    f75a:	e7b5      	b.n	f6c8 <bt_smp_distribute_keys+0x5c>
    f75c:	210a      	movs	r1, #10
    f75e:	3008      	adds	r0, #8
    f760:	f017 fca2 	bl	270a8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    f764:	2208      	movs	r2, #8
    f766:	4681      	mov	r9, r0
    f768:	a910      	add	r1, sp, #64	; 0x40
    f76a:	3002      	adds	r0, #2
    f76c:	f015 f917 	bl	2499e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    f770:	2202      	movs	r2, #2
    f772:	a912      	add	r1, sp, #72	; 0x48
    f774:	4648      	mov	r0, r9
    f776:	f015 f912 	bl	2499e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    f77a:	4639      	mov	r1, r7
    f77c:	4620      	mov	r0, r4
    f77e:	4a28      	ldr	r2, [pc, #160]	; (f820 <bt_smp_distribute_keys+0x1b4>)
    f780:	f017 f8a9 	bl	268d6 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f784:	210d      	movs	r1, #13
    f786:	4640      	mov	r0, r8
    f788:	f017 f8d4 	bl	26934 <atomic_test_bit>
    f78c:	2800      	cmp	r0, #0
    f78e:	d0a5      	beq.n	f6dc <bt_smp_distribute_keys+0x70>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
    f790:	4630      	mov	r0, r6
    f792:	2101      	movs	r1, #1
    f794:	f017 fc0d 	bl	26fb2 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
    f798:	a90c      	add	r1, sp, #48	; 0x30
    f79a:	2210      	movs	r2, #16
    f79c:	f106 0072 	add.w	r0, r6, #114	; 0x72
    f7a0:	f015 f8fd 	bl	2499e <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
    f7a4:	a910      	add	r1, sp, #64	; 0x40
    f7a6:	2208      	movs	r2, #8
    f7a8:	f106 0068 	add.w	r0, r6, #104	; 0x68
    f7ac:	f015 f8f7 	bl	2499e <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
    f7b0:	2202      	movs	r2, #2
    f7b2:	a912      	add	r1, sp, #72	; 0x48
    f7b4:	f106 0070 	add.w	r0, r6, #112	; 0x70
    f7b8:	f015 f8f1 	bl	2499e <memcpy>
    f7bc:	e78e      	b.n	f6dc <bt_smp_distribute_keys+0x70>
    f7be:	2110      	movs	r1, #16
    f7c0:	3008      	adds	r0, #8
    f7c2:	f017 fc71 	bl	270a8 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
    f7c6:	2110      	movs	r1, #16
    f7c8:	4681      	mov	r9, r0
    f7ca:	f004 fe41 	bl	14450 <bt_rand>
    f7ce:	4607      	mov	r7, r0
    f7d0:	2800      	cmp	r0, #0
    f7d2:	f47f af61 	bne.w	f698 <bt_smp_distribute_keys+0x2c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f7d6:	210d      	movs	r1, #13
    f7d8:	4640      	mov	r0, r8
    f7da:	f017 f8ab 	bl	26934 <atomic_test_bit>
    f7de:	b150      	cbz	r0, f7f6 <bt_smp_distribute_keys+0x18a>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    f7e0:	2108      	movs	r1, #8
    f7e2:	4628      	mov	r0, r5
    f7e4:	f017 fbe5 	bl	26fb2 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    f7e8:	2210      	movs	r2, #16
    f7ea:	4649      	mov	r1, r9
    f7ec:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f7f0:	f015 f8d5 	bl	2499e <memcpy>
			keys->local_csrk.cnt = 0U;
    f7f4:	652f      	str	r7, [r5, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    f7f6:	4620      	mov	r0, r4
    f7f8:	4a0a      	ldr	r2, [pc, #40]	; (f824 <bt_smp_distribute_keys+0x1b8>)
    f7fa:	4631      	mov	r1, r6
    f7fc:	f017 f86b 	bl	268d6 <smp_send.constprop.0>
	return 0;
    f800:	2000      	movs	r0, #0
}
    f802:	b014      	add	sp, #80	; 0x50
    f804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f808:	0002c19d 	.word	0x0002c19d
    f80c:	000289a8 	.word	0x000289a8
    f810:	0002c1b2 	.word	0x0002c1b2
    f814:	0002c21c 	.word	0x0002c21c
    f818:	0002c1cd 	.word	0x0002c1cd
    f81c:	0002c1f4 	.word	0x0002c1f4
    f820:	00026f15 	.word	0x00026f15
    f824:	00026f21 	.word	0x00026f21

0000f828 <smp_send_pairing_req>:
{
    f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f82c:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    f82e:	f7ff fde1 	bl	f3f4 <smp_chan_get>
	if (!smp) {
    f832:	4604      	mov	r4, r0
    f834:	2800      	cmp	r0, #0
    f836:	f000 80be 	beq.w	f9b6 <smp_send_pairing_req+0x18e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f83a:	1d06      	adds	r6, r0, #4
    f83c:	2104      	movs	r1, #4
    f83e:	4630      	mov	r0, r6
    f840:	f017 f878 	bl	26934 <atomic_test_bit>
    f844:	4603      	mov	r3, r0
    f846:	2800      	cmp	r0, #0
    f848:	f040 80b8 	bne.w	f9bc <smp_send_pairing_req+0x194>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f84c:	2102      	movs	r1, #2
    f84e:	4630      	mov	r0, r6
    f850:	f017 f870 	bl	26934 <atomic_test_bit>
    f854:	2800      	cmp	r0, #0
    f856:	f040 80b4 	bne.w	f9c2 <smp_send_pairing_req+0x19a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f85a:	2103      	movs	r1, #3
    f85c:	4630      	mov	r0, r6
    f85e:	f017 f869 	bl	26934 <atomic_test_bit>
    f862:	b120      	cbz	r0, f86e <smp_send_pairing_req+0x46>
		return -EBUSY;
    f864:	f06f 050f 	mvn.w	r5, #15
}
    f868:	4628      	mov	r0, r5
    f86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f86e:	2101      	movs	r1, #1
    f870:	4630      	mov	r0, r6
    f872:	f017 f85f 	bl	26934 <atomic_test_bit>
    f876:	2800      	cmp	r0, #0
    f878:	d1f4      	bne.n	f864 <smp_send_pairing_req+0x3c>
	if (!sec_level_reachable(conn)) {
    f87a:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    f87c:	2b03      	cmp	r3, #3
    f87e:	d016      	beq.n	f8ae <smp_send_pairing_req+0x86>
    f880:	d805      	bhi.n	f88e <smp_send_pairing_req+0x66>
    f882:	3b01      	subs	r3, #1
    f884:	428b      	cmp	r3, r1
    f886:	d91f      	bls.n	f8c8 <smp_send_pairing_req+0xa0>
		return -EINVAL;
    f888:	f06f 0515 	mvn.w	r5, #21
    f88c:	e7ec      	b.n	f868 <smp_send_pairing_req+0x40>
	switch (conn->required_sec_level) {
    f88e:	2b04      	cmp	r3, #4
    f890:	d1fa      	bne.n	f888 <smp_send_pairing_req+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f892:	f7ff fd25 	bl	f2e0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f896:	2803      	cmp	r0, #3
    f898:	d104      	bne.n	f8a4 <smp_send_pairing_req+0x7c>
    f89a:	4b4b      	ldr	r3, [pc, #300]	; (f9c8 <smp_send_pairing_req+0x1a0>)
    f89c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f89e:	b33b      	cbz	r3, f8f0 <smp_send_pairing_req+0xc8>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f8a0:	68db      	ldr	r3, [r3, #12]
    f8a2:	b10b      	cbz	r3, f8a8 <smp_send_pairing_req+0x80>
    f8a4:	4b49      	ldr	r3, [pc, #292]	; (f9cc <smp_send_pairing_req+0x1a4>)
    f8a6:	781b      	ldrb	r3, [r3, #0]
    f8a8:	f003 0301 	and.w	r3, r3, #1
    f8ac:	e00a      	b.n	f8c4 <smp_send_pairing_req+0x9c>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f8ae:	f7ff fd17 	bl	f2e0 <get_io_capa>
    f8b2:	2803      	cmp	r0, #3
    f8b4:	d11a      	bne.n	f8ec <smp_send_pairing_req+0xc4>
		       (bt_auth && bt_auth->oob_data_request);
    f8b6:	4b44      	ldr	r3, [pc, #272]	; (f9c8 <smp_send_pairing_req+0x1a0>)
    f8b8:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f8ba:	b11b      	cbz	r3, f8c4 <smp_send_pairing_req+0x9c>
		       (bt_auth && bt_auth->oob_data_request);
    f8bc:	68db      	ldr	r3, [r3, #12]
    f8be:	3b00      	subs	r3, #0
    f8c0:	bf18      	it	ne
    f8c2:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    f8c4:	2b00      	cmp	r3, #0
    f8c6:	d0df      	beq.n	f888 <smp_send_pairing_req+0x60>
	if (!conn->le.keys) {
    f8c8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f8cc:	b193      	cbz	r3, f8f4 <smp_send_pairing_req+0xcc>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
    f8ce:	22f0      	movs	r2, #240	; 0xf0
    f8d0:	2100      	movs	r1, #0
    f8d2:	4620      	mov	r0, r4
    f8d4:	f015 f86e 	bl	249b4 <memset>
	if (bt_rand(smp->prnd, 16)) {
    f8d8:	2110      	movs	r1, #16
    f8da:	f104 0027 	add.w	r0, r4, #39	; 0x27
    f8de:	f004 fdb7 	bl	14450 <bt_rand>
    f8e2:	4605      	mov	r5, r0
    f8e4:	b190      	cbz	r0, f90c <smp_send_pairing_req+0xe4>
		return -ENOBUFS;
    f8e6:	f06f 0568 	mvn.w	r5, #104	; 0x68
    f8ea:	e7bd      	b.n	f868 <smp_send_pairing_req+0x40>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f8ec:	2301      	movs	r3, #1
    f8ee:	e7e9      	b.n	f8c4 <smp_send_pairing_req+0x9c>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f8f0:	2300      	movs	r3, #0
    f8f2:	e7d9      	b.n	f8a8 <smp_send_pairing_req+0x80>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f8f4:	7a28      	ldrb	r0, [r5, #8]
    f8f6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f8fa:	f001 fafd 	bl	10ef8 <bt_keys_get_addr>
    f8fe:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f902:	2800      	cmp	r0, #0
    f904:	d1e3      	bne.n	f8ce <smp_send_pairing_req+0xa6>
			return -ENOMEM;
    f906:	f06f 050b 	mvn.w	r5, #11
    f90a:	e7ad      	b.n	f868 <smp_send_pairing_req+0x40>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    f90c:	2105      	movs	r1, #5
    f90e:	4620      	mov	r0, r4
    f910:	f017 f852 	bl	269b8 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    f914:	f7fb fe94 	bl	b640 <bt_pub_key_get>
    f918:	4b2d      	ldr	r3, [pc, #180]	; (f9d0 <smp_send_pairing_req+0x1a8>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    f91a:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    f91c:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    f91e:	4620      	mov	r0, r4
    f920:	f017 f85e 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f924:	4681      	mov	r9, r0
    f926:	2800      	cmp	r0, #0
    f928:	d0dd      	beq.n	f8e6 <smp_send_pairing_req+0xbe>
    f92a:	2106      	movs	r1, #6
    f92c:	3008      	adds	r0, #8
    f92e:	f017 fbbb 	bl	270a8 <net_buf_simple_add>
	if (sc_supported) {
    f932:	4b26      	ldr	r3, [pc, #152]	; (f9cc <smp_send_pairing_req+0x1a4>)
    f934:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    f936:	2b00      	cmp	r3, #0
    f938:	bf14      	ite	ne
    f93a:	f04f 0809 	movne.w	r8, #9
    f93e:	f04f 0801 	moveq.w	r8, #1
    f942:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    f944:	f7ff fccc 	bl	f2e0 <get_io_capa>
	if (bondable) {
    f948:	4b22      	ldr	r3, [pc, #136]	; (f9d4 <smp_send_pairing_req+0x1ac>)
    f94a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    f94c:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
    f94e:	bf18      	it	ne
    f950:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    f954:	b363      	cbz	r3, f9b0 <smp_send_pairing_req+0x188>
		auth |= BT_SMP_AUTH_BONDING;
    f956:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f95a:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    f95e:	f7ff fcbf 	bl	f2e0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f962:	4b1d      	ldr	r3, [pc, #116]	; (f9d8 <smp_send_pairing_req+0x1b0>)
	req->io_capability = get_io_capa();
    f964:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f966:	781b      	ldrb	r3, [r3, #0]
    f968:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f96a:	2310      	movs	r3, #16
    f96c:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
    f96e:	2305      	movs	r3, #5
    f970:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    f972:	2307      	movs	r3, #7
    f974:	717b      	strb	r3, [r7, #5]
	smp->local_dist = SEND_KEYS;
    f976:	f240 7305 	movw	r3, #1797	; 0x705
    f97a:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f97e:	2301      	movs	r3, #1
    f980:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
    f982:	4639      	mov	r1, r7
    f984:	2206      	movs	r2, #6
    f986:	f104 000a 	add.w	r0, r4, #10
    f98a:	f015 f808 	bl	2499e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    f98e:	2200      	movs	r2, #0
    f990:	4649      	mov	r1, r9
    f992:	4620      	mov	r0, r4
    f994:	f016 ff9f 	bl	268d6 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    f998:	4620      	mov	r0, r4
    f99a:	2102      	movs	r1, #2
    f99c:	f017 f80c 	bl	269b8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    f9a0:	210b      	movs	r1, #11
    f9a2:	f017 f809 	bl	269b8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f9a6:	2103      	movs	r1, #3
    f9a8:	4630      	mov	r0, r6
    f9aa:	f017 f805 	bl	269b8 <atomic_set_bit>
	return 0;
    f9ae:	e75b      	b.n	f868 <smp_send_pairing_req+0x40>
		auth &= ~BT_SMP_AUTH_BONDING;
    f9b0:	f008 080c 	and.w	r8, r8, #12
    f9b4:	e7d1      	b.n	f95a <smp_send_pairing_req+0x132>
		return -ENOTCONN;
    f9b6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    f9ba:	e755      	b.n	f868 <smp_send_pairing_req+0x40>
		return -EIO;
    f9bc:	f06f 0504 	mvn.w	r5, #4
    f9c0:	e752      	b.n	f868 <smp_send_pairing_req+0x40>
		return 0;
    f9c2:	461d      	mov	r5, r3
    f9c4:	e750      	b.n	f868 <smp_send_pairing_req+0x40>
    f9c6:	bf00      	nop
    f9c8:	200020e8 	.word	0x200020e8
    f9cc:	20003f3c 	.word	0x20003f3c
    f9d0:	200021a4 	.word	0x200021a4
    f9d4:	200008a1 	.word	0x200008a1
    f9d8:	20003f3b 	.word	0x20003f3b

0000f9dc <smp_security_request>:
{
    f9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f9de:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
    f9e0:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
    f9e4:	688b      	ldr	r3, [r1, #8]
{
    f9e6:	b08b      	sub	sp, #44	; 0x2c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f9e8:	2102      	movs	r1, #2
    f9ea:	4620      	mov	r0, r4
    f9ec:	f016 ffa2 	bl	26934 <atomic_test_bit>
    f9f0:	b110      	cbz	r0, f9f8 <smp_security_request+0x1c>
	return 0;
    f9f2:	2000      	movs	r0, #0
}
    f9f4:	b00b      	add	sp, #44	; 0x2c
    f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f9f8:	2103      	movs	r1, #3
    f9fa:	4620      	mov	r0, r4
    f9fc:	f016 ff9a 	bl	26934 <atomic_test_bit>
    fa00:	2800      	cmp	r0, #0
    fa02:	d1f6      	bne.n	f9f2 <smp_security_request+0x16>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fa04:	2101      	movs	r1, #1
    fa06:	4620      	mov	r0, r4
    fa08:	f016 ff94 	bl	26934 <atomic_test_bit>
    fa0c:	2800      	cmp	r0, #0
    fa0e:	d1f0      	bne.n	f9f2 <smp_security_request+0x16>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    fa10:	781e      	ldrb	r6, [r3, #0]
	if (sc_supported) {
    fa12:	4b36      	ldr	r3, [pc, #216]	; (faec <smp_security_request+0x110>)
    fa14:	781b      	ldrb	r3, [r3, #0]
    fa16:	b17b      	cbz	r3, fa38 <smp_security_request+0x5c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    fa18:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
    fa1c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    fa20:	b16b      	cbz	r3, fa3e <smp_security_request+0x62>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    fa22:	89db      	ldrh	r3, [r3, #14]
    fa24:	f003 0324 	and.w	r3, r3, #36	; 0x24
    fa28:	b9d3      	cbnz	r3, fa60 <smp_security_request+0x84>
	if (smp_send_pairing_req(conn) < 0) {
    fa2a:	4628      	mov	r0, r5
    fa2c:	f7ff fefc 	bl	f828 <smp_send_pairing_req>
    fa30:	2800      	cmp	r0, #0
    fa32:	db54      	blt.n	fade <smp_security_request+0x102>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    fa34:	210f      	movs	r1, #15
    fa36:	e055      	b.n	fae4 <smp_security_request+0x108>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    fa38:	f006 0607 	and.w	r6, r6, #7
    fa3c:	e7ee      	b.n	fa1c <smp_security_request+0x40>
					     &conn->le.dst);
    fa3e:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    fa42:	7a29      	ldrb	r1, [r5, #8]
    fa44:	463a      	mov	r2, r7
    fa46:	2020      	movs	r0, #32
    fa48:	f001 fa8c 	bl	10f64 <bt_keys_find>
    fa4c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    fa50:	b930      	cbnz	r0, fa60 <smp_security_request+0x84>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    fa52:	7a29      	ldrb	r1, [r5, #8]
    fa54:	463a      	mov	r2, r7
    fa56:	2004      	movs	r0, #4
    fa58:	f001 fa84 	bl	10f64 <bt_keys_find>
    fa5c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
    fa60:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    fa64:	2900      	cmp	r1, #0
    fa66:	d0e0      	beq.n	fa2a <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    fa68:	0777      	lsls	r7, r6, #29
    fa6a:	d51c      	bpl.n	faa6 <smp_security_request+0xca>
    fa6c:	7b4b      	ldrb	r3, [r1, #13]
    fa6e:	07d8      	lsls	r0, r3, #31
    fa70:	d419      	bmi.n	faa6 <smp_security_request+0xca>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    fa72:	f7ff fc35 	bl	f2e0 <get_io_capa>
    fa76:	2803      	cmp	r0, #3
    fa78:	d009      	beq.n	fa8e <smp_security_request+0xb2>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    fa7a:	4b1d      	ldr	r3, [pc, #116]	; (faf0 <smp_security_request+0x114>)
    fa7c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    fa80:	2303      	movs	r3, #3
    fa82:	9303      	str	r3, [sp, #12]
    fa84:	9307      	str	r3, [sp, #28]
    fa86:	aa07      	add	r2, sp, #28
    fa88:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    fa8c:	e007      	b.n	fa9e <smp_security_request+0xc2>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    fa8e:	4b19      	ldr	r3, [pc, #100]	; (faf4 <smp_security_request+0x118>)
    fa90:	9003      	str	r0, [sp, #12]
    fa92:	e9cd 3608 	strd	r3, r6, [sp, #32]
    fa96:	9007      	str	r0, [sp, #28]
    fa98:	aa07      	add	r2, sp, #28
    fa9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    fa9e:	4816      	ldr	r0, [pc, #88]	; (faf8 <smp_security_request+0x11c>)
    faa0:	f016 ff36 	bl	26910 <z_log_msg2_static_create.constprop.0>
		goto pair;
    faa4:	e7c1      	b.n	fa2a <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_SC) &&
    faa6:	0732      	lsls	r2, r6, #28
    faa8:	d502      	bpl.n	fab0 <smp_security_request+0xd4>
    faaa:	89cb      	ldrh	r3, [r1, #14]
    faac:	069b      	lsls	r3, r3, #26
    faae:	d5e4      	bpl.n	fa7a <smp_security_request+0x9e>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    fab0:	7b0b      	ldrb	r3, [r1, #12]
    fab2:	9300      	str	r3, [sp, #0]
    fab4:	f101 0218 	add.w	r2, r1, #24
    fab8:	f101 031a 	add.w	r3, r1, #26
    fabc:	4628      	mov	r0, r5
    fabe:	3110      	adds	r1, #16
    fac0:	f015 fb30 	bl	25124 <bt_conn_le_start_encryption>
    fac4:	2800      	cmp	r0, #0
    fac6:	da0c      	bge.n	fae2 <smp_security_request+0x106>
		BT_ERR("Failed to start encryption");
    fac8:	4b0c      	ldr	r3, [pc, #48]	; (fafc <smp_security_request+0x120>)
    faca:	9308      	str	r3, [sp, #32]
    facc:	480a      	ldr	r0, [pc, #40]	; (faf8 <smp_security_request+0x11c>)
    face:	2302      	movs	r3, #2
    fad0:	aa07      	add	r2, sp, #28
    fad2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fad6:	9303      	str	r3, [sp, #12]
    fad8:	9307      	str	r3, [sp, #28]
    fada:	f016 ff19 	bl	26910 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    fade:	2008      	movs	r0, #8
    fae0:	e788      	b.n	f9f4 <smp_security_request+0x18>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fae2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    fae4:	4620      	mov	r0, r4
    fae6:	f016 ff67 	bl	269b8 <atomic_set_bit>
    faea:	e782      	b.n	f9f2 <smp_security_request+0x16>
    faec:	20003f3c 	.word	0x20003f3c
    faf0:	0002c243 	.word	0x0002c243
    faf4:	0002c26a 	.word	0x0002c26a
    faf8:	000289a8 	.word	0x000289a8
    fafc:	0002c14f 	.word	0x0002c14f

0000fb00 <sc_send_public_key>:
{
    fb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    fb02:	210c      	movs	r1, #12
{
    fb04:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    fb06:	f016 ff6b 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    fb0a:	4604      	mov	r4, r0
    fb0c:	b1b0      	cbz	r0, fb3c <sc_send_public_key+0x3c>
    fb0e:	2140      	movs	r1, #64	; 0x40
    fb10:	3008      	adds	r0, #8
    fb12:	f017 fac9 	bl	270a8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    fb16:	4f0a      	ldr	r7, [pc, #40]	; (fb40 <sc_send_public_key+0x40>)
    fb18:	2220      	movs	r2, #32
    fb1a:	6839      	ldr	r1, [r7, #0]
    fb1c:	4606      	mov	r6, r0
    fb1e:	f014 ff3e 	bl	2499e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    fb22:	6839      	ldr	r1, [r7, #0]
    fb24:	2220      	movs	r2, #32
    fb26:	4411      	add	r1, r2
    fb28:	18b0      	adds	r0, r6, r2
    fb2a:	f014 ff38 	bl	2499e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    fb2e:	4628      	mov	r0, r5
    fb30:	2200      	movs	r2, #0
    fb32:	4621      	mov	r1, r4
    fb34:	f016 fecf 	bl	268d6 <smp_send.constprop.0>
	return 0;
    fb38:	2000      	movs	r0, #0
}
    fb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    fb3c:	2008      	movs	r0, #8
    fb3e:	e7fc      	b.n	fb3a <sc_send_public_key+0x3a>
    fb40:	200021a4 	.word	0x200021a4

0000fb44 <compute_and_send_central_dhcheck>:
{
    fb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
    fb48:	2210      	movs	r2, #16
{
    fb4a:	b0a2      	sub	sp, #136	; 0x88
    fb4c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    fb4e:	2100      	movs	r1, #0
    fb50:	eb0d 0002 	add.w	r0, sp, r2
    fb54:	f014 ff2e 	bl	249b4 <memset>
	switch (smp->method) {
    fb58:	7a23      	ldrb	r3, [r4, #8]
    fb5a:	2b05      	cmp	r3, #5
    fb5c:	f200 8098 	bhi.w	fc90 <compute_and_send_central_dhcheck+0x14c>
    fb60:	e8df f003 	tbb	[pc, r3]
    fb64:	09030309 	.word	0x09030309
    fb68:	8d96      	.short	0x8d96
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    fb6a:	2204      	movs	r2, #4
    fb6c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
    fb70:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    fb72:	f014 ff14 	bl	2499e <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    fb76:	4b5d      	ldr	r3, [pc, #372]	; (fcec <compute_and_send_central_dhcheck+0x1a8>)
		   &smp->chan.chan.conn->le.init_addr,
    fb78:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
    fb7c:	aa14      	add	r2, sp, #80	; 0x50
    fb7e:	f103 0730 	add.w	r7, r3, #48	; 0x30
    fb82:	4691      	mov	r9, r2
    fb84:	6818      	ldr	r0, [r3, #0]
    fb86:	6859      	ldr	r1, [r3, #4]
    fb88:	4616      	mov	r6, r2
    fb8a:	c603      	stmia	r6!, {r0, r1}
    fb8c:	3308      	adds	r3, #8
    fb8e:	42bb      	cmp	r3, r7
    fb90:	4632      	mov	r2, r6
    fb92:	d1f7      	bne.n	fb84 <compute_and_send_central_dhcheck+0x40>
    fb94:	6818      	ldr	r0, [r3, #0]
    fb96:	791b      	ldrb	r3, [r3, #4]
    fb98:	6030      	str	r0, [r6, #0]
	sys_memcpy_swap(ws, w, 32);
    fb9a:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t m[53] = { 0x00, /* counter */
    fb9c:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    fb9e:	2220      	movs	r2, #32
    fba0:	f104 0197 	add.w	r1, r4, #151	; 0x97
    fba4:	4638      	mov	r0, r7
    fba6:	f016 fddf 	bl	26768 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    fbaa:	4851      	ldr	r0, [pc, #324]	; (fcf0 <compute_and_send_central_dhcheck+0x1ac>)
    fbac:	ab08      	add	r3, sp, #32
    fbae:	2220      	movs	r2, #32
    fbb0:	4639      	mov	r1, r7
    fbb2:	f016 fdf2 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
    fbb6:	2800      	cmp	r0, #0
    fbb8:	f040 8093 	bne.w	fce2 <compute_and_send_central_dhcheck+0x19e>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    fbbc:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
    fbc0:	2210      	movs	r2, #16
    fbc2:	4641      	mov	r1, r8
    fbc4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    fbc8:	f104 0a37 	add.w	sl, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
    fbcc:	f016 fdcc 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    fbd0:	2210      	movs	r2, #16
    fbd2:	4651      	mov	r1, sl
    fbd4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    fbd8:	f016 fdc6 	bl	26768 <sys_memcpy_swap>
	m[37] = a1->type;
    fbdc:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
    fbe0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    fbe4:	2206      	movs	r2, #6
    fbe6:	f105 0190 	add.w	r1, r5, #144	; 0x90
    fbea:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    fbee:	f016 fdbb 	bl	26768 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    fbf2:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
    fbf6:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
    fbfa:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    fbfe:	2206      	movs	r2, #6
    fc00:	f105 0197 	add.w	r1, r5, #151	; 0x97
    fc04:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    fc08:	f016 fdae 	bl	26768 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    fc0c:	4633      	mov	r3, r6
    fc0e:	2235      	movs	r2, #53	; 0x35
    fc10:	4649      	mov	r1, r9
    fc12:	a808      	add	r0, sp, #32
    fc14:	f016 fdc1 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
    fc18:	2800      	cmp	r0, #0
    fc1a:	d162      	bne.n	fce2 <compute_and_send_central_dhcheck+0x19e>
	sys_mem_swap(mackey, 16);
    fc1c:	2110      	movs	r1, #16
    fc1e:	4630      	mov	r0, r6
    fc20:	f016 fdac 	bl	2677c <sys_mem_swap>
		   smp->tk)) {
    fc24:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
    fc28:	2301      	movs	r3, #1
    fc2a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    fc2e:	2235      	movs	r2, #53	; 0x35
    fc30:	462b      	mov	r3, r5
    fc32:	4649      	mov	r1, r9
    fc34:	a808      	add	r0, sp, #32
    fc36:	f016 fdb0 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
    fc3a:	2800      	cmp	r0, #0
    fc3c:	d151      	bne.n	fce2 <compute_and_send_central_dhcheck+0x19e>
	sys_mem_swap(ltk, 16);
    fc3e:	4628      	mov	r0, r5
    fc40:	2110      	movs	r1, #16
    fc42:	f016 fd9b 	bl	2677c <sys_mem_swap>
		   &smp->chan.chan.conn->le.init_addr,
    fc46:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    fc4a:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    fc4c:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    fc50:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    fc52:	9301      	str	r3, [sp, #4]
    fc54:	f104 030a 	add.w	r3, r4, #10
    fc58:	9202      	str	r2, [sp, #8]
    fc5a:	9300      	str	r3, [sp, #0]
    fc5c:	4652      	mov	r2, sl
    fc5e:	ab04      	add	r3, sp, #16
    fc60:	4641      	mov	r1, r8
    fc62:	4630      	mov	r0, r6
    fc64:	f016 fddb 	bl	2681e <smp_f6>
    fc68:	4605      	mov	r5, r0
    fc6a:	b1f8      	cbz	r0, fcac <compute_and_send_central_dhcheck+0x168>
		BT_ERR("Calculate local DHKey check failed");
    fc6c:	4b21      	ldr	r3, [pc, #132]	; (fcf4 <compute_and_send_central_dhcheck+0x1b0>)
    fc6e:	9318      	str	r3, [sp, #96]	; 0x60
    fc70:	2302      	movs	r3, #2
    fc72:	9308      	str	r3, [sp, #32]
		BT_ERR("Calculate LTK failed");
    fc74:	9317      	str	r3, [sp, #92]	; 0x5c
    fc76:	aa17      	add	r2, sp, #92	; 0x5c
    fc78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fc7c:	e011      	b.n	fca2 <compute_and_send_central_dhcheck+0x15e>
		if (smp->oobd_remote) {
    fc7e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    fc82:	2900      	cmp	r1, #0
    fc84:	f43f af77 	beq.w	fb76 <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    fc88:	2210      	movs	r2, #16
    fc8a:	eb0d 0002 	add.w	r0, sp, r2
    fc8e:	e770      	b.n	fb72 <compute_and_send_central_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fc90:	4a19      	ldr	r2, [pc, #100]	; (fcf8 <compute_and_send_central_dhcheck+0x1b4>)
	switch (smp->method) {
    fc92:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fc96:	2303      	movs	r3, #3
    fc98:	930c      	str	r3, [sp, #48]	; 0x30
    fc9a:	9317      	str	r3, [sp, #92]	; 0x5c
    fc9c:	aa17      	add	r2, sp, #92	; 0x5c
    fc9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate LTK failed");
    fca2:	4816      	ldr	r0, [pc, #88]	; (fcfc <compute_and_send_central_dhcheck+0x1b8>)
    fca4:	f016 fe34 	bl	26910 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    fca8:	2008      	movs	r0, #8
    fcaa:	e017      	b.n	fcdc <compute_and_send_central_dhcheck+0x198>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    fcac:	210d      	movs	r1, #13
    fcae:	4620      	mov	r0, r4
    fcb0:	f016 fe82 	bl	269b8 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    fcb4:	210d      	movs	r1, #13
    fcb6:	f016 fe93 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!buf) {
    fcba:	4606      	mov	r6, r0
    fcbc:	2800      	cmp	r0, #0
    fcbe:	d0f3      	beq.n	fca8 <compute_and_send_central_dhcheck+0x164>
    fcc0:	2110      	movs	r1, #16
    fcc2:	3008      	adds	r0, #8
    fcc4:	f017 f9f0 	bl	270a8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    fcc8:	2210      	movs	r2, #16
    fcca:	4639      	mov	r1, r7
    fccc:	f014 fe67 	bl	2499e <memcpy>
	smp_send(smp, buf, NULL, NULL);
    fcd0:	4620      	mov	r0, r4
    fcd2:	462a      	mov	r2, r5
    fcd4:	4631      	mov	r1, r6
    fcd6:	f016 fdfe 	bl	268d6 <smp_send.constprop.0>
	return 0;
    fcda:	4628      	mov	r0, r5
}
    fcdc:	b022      	add	sp, #136	; 0x88
    fcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_ERR("Calculate LTK failed");
    fce2:	4b07      	ldr	r3, [pc, #28]	; (fd00 <compute_and_send_central_dhcheck+0x1bc>)
    fce4:	9318      	str	r3, [sp, #96]	; 0x60
    fce6:	2302      	movs	r3, #2
    fce8:	930c      	str	r3, [sp, #48]	; 0x30
    fcea:	e7c3      	b.n	fc74 <compute_and_send_central_dhcheck+0x130>
    fcec:	00028ace 	.word	0x00028ace
    fcf0:	0002c51b 	.word	0x0002c51b
    fcf4:	0002c299 	.word	0x0002c299
    fcf8:	0002c133 	.word	0x0002c133
    fcfc:	000289a8 	.word	0x000289a8
    fd00:	0002c2bc 	.word	0x0002c2bc

0000fd04 <smp_send_pairing_confirm>:
{
    fd04:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
    fd06:	7a04      	ldrb	r4, [r0, #8]
    fd08:	2c02      	cmp	r4, #2
{
    fd0a:	b08a      	sub	sp, #40	; 0x28
    fd0c:	4605      	mov	r5, r0
	switch (smp->method) {
    fd0e:	d823      	bhi.n	fd58 <smp_send_pairing_confirm+0x54>
    fd10:	b144      	cbz	r4, fd24 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    fd12:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
    fd16:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
    fd1a:	40dc      	lsrs	r4, r3
    fd1c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    fd20:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    fd24:	2103      	movs	r1, #3
    fd26:	4628      	mov	r0, r5
    fd28:	f016 fe5a 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!buf) {
    fd2c:	4606      	mov	r6, r0
    fd2e:	b308      	cbz	r0, fd74 <smp_send_pairing_confirm+0x70>
    fd30:	2110      	movs	r1, #16
    fd32:	3008      	adds	r0, #8
    fd34:	f017 f9b8 	bl	270a8 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    fd38:	9000      	str	r0, [sp, #0]
    fd3a:	4816      	ldr	r0, [pc, #88]	; (fd94 <smp_send_pairing_confirm+0x90>)
    fd3c:	4623      	mov	r3, r4
    fd3e:	6800      	ldr	r0, [r0, #0]
    fd40:	f105 0227 	add.w	r2, r5, #39	; 0x27
    fd44:	f105 0157 	add.w	r1, r5, #87	; 0x57
    fd48:	f016 fd43 	bl	267d2 <smp_f4>
    fd4c:	4604      	mov	r4, r0
    fd4e:	b1a8      	cbz	r0, fd7c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    fd50:	4630      	mov	r0, r6
    fd52:	f00d f909 	bl	1cf68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    fd56:	e00d      	b.n	fd74 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    fd58:	2c03      	cmp	r4, #3
    fd5a:	d00d      	beq.n	fd78 <smp_send_pairing_confirm+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fd5c:	4b0e      	ldr	r3, [pc, #56]	; (fd98 <smp_send_pairing_confirm+0x94>)
    fd5e:	480f      	ldr	r0, [pc, #60]	; (fd9c <smp_send_pairing_confirm+0x98>)
	switch (smp->method) {
    fd60:	e9cd 3408 	strd	r3, r4, [sp, #32]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fd64:	aa07      	add	r2, sp, #28
    fd66:	2303      	movs	r3, #3
    fd68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fd6c:	9303      	str	r3, [sp, #12]
    fd6e:	9307      	str	r3, [sp, #28]
    fd70:	f016 fdce 	bl	26910 <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    fd74:	2008      	movs	r0, #8
    fd76:	e00b      	b.n	fd90 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    fd78:	2400      	movs	r4, #0
    fd7a:	e7d3      	b.n	fd24 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    fd7c:	4602      	mov	r2, r0
    fd7e:	4631      	mov	r1, r6
    fd80:	4628      	mov	r0, r5
    fd82:	f016 fda8 	bl	268d6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    fd86:	1d28      	adds	r0, r5, #4
    fd88:	4621      	mov	r1, r4
    fd8a:	f016 fd95 	bl	268b8 <atomic_clear_bit>
	return 0;
    fd8e:	4620      	mov	r0, r4
}
    fd90:	b00a      	add	sp, #40	; 0x28
    fd92:	bd70      	pop	{r4, r5, r6, pc}
    fd94:	200021a4 	.word	0x200021a4
    fd98:	0002c133 	.word	0x0002c133
    fd9c:	000289a8 	.word	0x000289a8

0000fda0 <smp_public_key>:
{
    fda0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    fda2:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    fda4:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
    fda8:	b088      	sub	sp, #32
    fdaa:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    fdac:	2220      	movs	r2, #32
    fdae:	4629      	mov	r1, r5
    fdb0:	4630      	mov	r0, r6
    fdb2:	f014 fdf4 	bl	2499e <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
    fdb6:	2220      	movs	r2, #32
    fdb8:	18a9      	adds	r1, r5, r2
    fdba:	f104 0077 	add.w	r0, r4, #119	; 0x77
    fdbe:	f014 fdee 	bl	2499e <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
    fdc2:	4630      	mov	r0, r6
    fdc4:	f7fb fb96 	bl	b4f4 <bt_pub_key_is_debug>
    fdc8:	b9f8      	cbnz	r0, fe0a <smp_public_key+0x6a>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    fdca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fdce:	78db      	ldrb	r3, [r3, #3]
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	d144      	bne.n	fe5e <smp_public_key+0xbe>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    fdd4:	1d25      	adds	r5, r4, #4
    fdd6:	210e      	movs	r1, #14
    fdd8:	4628      	mov	r0, r5
    fdda:	f016 fdab 	bl	26934 <atomic_test_bit>
    fdde:	2800      	cmp	r0, #0
    fde0:	d13f      	bne.n	fe62 <smp_public_key+0xc2>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    fde2:	4b6c      	ldr	r3, [pc, #432]	; (ff94 <smp_public_key+0x1f4>)
    fde4:	2220      	movs	r2, #32
    fde6:	6819      	ldr	r1, [r3, #0]
    fde8:	4630      	mov	r0, r6
    fdea:	f014 fdc7 	bl	2497c <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    fdee:	2800      	cmp	r0, #0
    fdf0:	d137      	bne.n	fe62 <smp_public_key+0xc2>
			BT_WARN("Remote public key rejected");
    fdf2:	4b69      	ldr	r3, [pc, #420]	; (ff98 <smp_public_key+0x1f8>)
    fdf4:	9306      	str	r3, [sp, #24]
    fdf6:	2302      	movs	r3, #2
    fdf8:	9301      	str	r3, [sp, #4]
    fdfa:	9305      	str	r3, [sp, #20]
    fdfc:	aa05      	add	r2, sp, #20
    fdfe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Unknown pairing method (%u)", smp->method);
    fe02:	4866      	ldr	r0, [pc, #408]	; (ff9c <smp_public_key+0x1fc>)
    fe04:	f016 fd84 	bl	26910 <z_log_msg2_static_create.constprop.0>
    fe08:	e03f      	b.n	fe8a <smp_public_key+0xea>
		BT_INFO("Remote is using Debug Public key");
    fe0a:	4b65      	ldr	r3, [pc, #404]	; (ffa0 <smp_public_key+0x200>)
    fe0c:	4863      	ldr	r0, [pc, #396]	; (ff9c <smp_public_key+0x1fc>)
    fe0e:	9306      	str	r3, [sp, #24]
    fe10:	aa05      	add	r2, sp, #20
    fe12:	2302      	movs	r3, #2
    fe14:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    fe18:	9301      	str	r3, [sp, #4]
    fe1a:	9305      	str	r3, [sp, #20]
    fe1c:	f016 fd78 	bl	26910 <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    fe20:	210e      	movs	r1, #14
    fe22:	1d20      	adds	r0, r4, #4
    fe24:	f016 fdc8 	bl	269b8 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    fe28:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
    fe2c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    fe30:	b933      	cbnz	r3, fe40 <smp_public_key+0xa0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    fe32:	7a28      	ldrb	r0, [r5, #8]
    fe34:	f105 0188 	add.w	r1, r5, #136	; 0x88
    fe38:	f001 f85e 	bl	10ef8 <bt_keys_get_addr>
    fe3c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    fe40:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    fe44:	2b00      	cmp	r3, #0
    fe46:	d0c0      	beq.n	fdca <smp_public_key+0x2a>
    fe48:	89da      	ldrh	r2, [r3, #14]
    fe4a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    fe4e:	2a00      	cmp	r2, #0
    fe50:	d0bb      	beq.n	fdca <smp_public_key+0x2a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    fe52:	7b5b      	ldrb	r3, [r3, #13]
    fe54:	0799      	lsls	r1, r3, #30
    fe56:	d4b8      	bmi.n	fdca <smp_public_key+0x2a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    fe58:	2003      	movs	r0, #3
}
    fe5a:	b008      	add	sp, #32
    fe5c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    fe5e:	2000      	movs	r0, #0
    fe60:	e7fb      	b.n	fe5a <smp_public_key+0xba>
		switch (smp->method) {
    fe62:	7a23      	ldrb	r3, [r4, #8]
    fe64:	2b05      	cmp	r3, #5
    fe66:	f200 8083 	bhi.w	ff70 <smp_public_key+0x1d0>
    fe6a:	e8df f003 	tbb	[pc, r3]
    fe6e:	4503      	.short	0x4503
    fe70:	51810308 	.word	0x51810308
			atomic_set_bit(smp->allowed_cmds,
    fe74:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
    fe76:	4620      	mov	r0, r4
    fe78:	f016 fd9e 	bl	269b8 <atomic_set_bit>
			break;
    fe7c:	e02d      	b.n	feda <smp_public_key+0x13a>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    fe7e:	2104      	movs	r1, #4
    fe80:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    fe84:	f004 fae4 	bl	14450 <bt_rand>
    fe88:	b108      	cbz	r0, fe8e <smp_public_key+0xee>
			return BT_SMP_ERR_UNSPECIFIED;
    fe8a:	2008      	movs	r0, #8
    fe8c:	e7e5      	b.n	fe5a <smp_public_key+0xba>
		smp->passkey %= 1000000;
    fe8e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    fe92:	4a44      	ldr	r2, [pc, #272]	; (ffa4 <smp_public_key+0x204>)
	if (bt_auth && bt_auth->passkey_display) {
    fe94:	4e44      	ldr	r6, [pc, #272]	; (ffa8 <smp_public_key+0x208>)
		smp->passkey %= 1000000;
    fe96:	fbb3 f1f2 	udiv	r1, r3, r2
    fe9a:	fb02 3311 	mls	r3, r2, r1, r3
    fe9e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
    fea2:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    fea4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
    fea8:	b163      	cbz	r3, fec4 <smp_public_key+0x124>
    feaa:	681b      	ldr	r3, [r3, #0]
    feac:	b153      	cbz	r3, fec4 <smp_public_key+0x124>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    feae:	210b      	movs	r1, #11
    feb0:	4628      	mov	r0, r5
    feb2:	f016 fd81 	bl	269b8 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    feb6:	6833      	ldr	r3, [r6, #0]
    feb8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    febc:	681b      	ldr	r3, [r3, #0]
    febe:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    fec2:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
    fec4:	2103      	movs	r1, #3
    fec6:	4620      	mov	r0, r4
    fec8:	f016 fd76 	bl	269b8 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
    fecc:	210e      	movs	r1, #14
    fece:	f016 fd73 	bl	269b8 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    fed2:	f7ff ff17 	bl	fd04 <smp_send_pairing_confirm>
			if (err) {
    fed6:	2800      	cmp	r0, #0
    fed8:	d1bf      	bne.n	fe5a <smp_public_key+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    feda:	4628      	mov	r0, r5
    fedc:	2107      	movs	r1, #7
    fede:	f016 fd6b 	bl	269b8 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    fee2:	2008      	movs	r0, #8
    fee4:	f7ff faa2 	bl	f42c <smp_find>
    fee8:	2800      	cmp	r0, #0
    feea:	d1b8      	bne.n	fe5e <smp_public_key+0xbe>
		return smp_dhkey_generate(smp);
    feec:	4620      	mov	r0, r4
}
    feee:	b008      	add	sp, #32
    fef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_dhkey_generate(smp);
    fef4:	f7ff bb2c 	b.w	f550 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fef8:	210a      	movs	r1, #10
    fefa:	4628      	mov	r0, r5
    fefc:	f016 fd5c 	bl	269b8 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ff00:	4b29      	ldr	r3, [pc, #164]	; (ffa8 <smp_public_key+0x208>)
    ff02:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    ff06:	681b      	ldr	r3, [r3, #0]
    ff08:	685b      	ldr	r3, [r3, #4]
    ff0a:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
    ff0c:	210e      	movs	r1, #14
    ff0e:	e7b2      	b.n	fe76 <smp_public_key+0xd6>
			if (bt_rand(smp->prnd, 16)) {
    ff10:	2110      	movs	r1, #16
    ff12:	f104 0027 	add.w	r0, r4, #39	; 0x27
    ff16:	f004 fa9b 	bl	14450 <bt_rand>
    ff1a:	2800      	cmp	r0, #0
    ff1c:	d1b5      	bne.n	fe8a <smp_public_key+0xea>
			if (bt_auth && bt_auth->oob_data_request) {
    ff1e:	4e22      	ldr	r6, [pc, #136]	; (ffa8 <smp_public_key+0x208>)
    ff20:	6833      	ldr	r3, [r6, #0]
    ff22:	b37b      	cbz	r3, ff84 <smp_public_key+0x1e4>
    ff24:	68db      	ldr	r3, [r3, #12]
    ff26:	b36b      	cbz	r3, ff84 <smp_public_key+0x1e4>
				struct bt_conn_oob_info info = {
    ff28:	4b20      	ldr	r3, [pc, #128]	; (ffac <smp_public_key+0x20c>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    ff2a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
				struct bt_conn_oob_info info = {
    ff2e:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    ff32:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff36:	78c9      	ldrb	r1, [r1, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ff38:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ff3a:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff3c:	b939      	cbnz	r1, ff4e <smp_public_key+0x1ae>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    ff3e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ff40:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    ff44:	d420      	bmi.n	ff88 <smp_public_key+0x1e8>
	int oob_config = BT_CONN_OOB_NO_DATA;
    ff46:	2b00      	cmp	r3, #0
    ff48:	bf08      	it	eq
    ff4a:	2003      	moveq	r0, #3
    ff4c:	e000      	b.n	ff50 <smp_public_key+0x1b0>
    ff4e:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    ff50:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
    ff52:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
    ff56:	f88d 0009 	strb.w	r0, [sp, #9]
				atomic_set_bit(smp->flags,
    ff5a:	210c      	movs	r1, #12
    ff5c:	4628      	mov	r0, r5
    ff5e:	f016 fd2b 	bl	269b8 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    ff62:	6833      	ldr	r3, [r6, #0]
    ff64:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    ff68:	68db      	ldr	r3, [r3, #12]
    ff6a:	a902      	add	r1, sp, #8
    ff6c:	4798      	blx	r3
			break;
    ff6e:	e7b4      	b.n	feda <smp_public_key+0x13a>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    ff70:	4a0f      	ldr	r2, [pc, #60]	; (ffb0 <smp_public_key+0x210>)
		switch (smp->method) {
    ff72:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_ERR("Unknown pairing method (%u)", smp->method);
    ff76:	2303      	movs	r3, #3
    ff78:	9301      	str	r3, [sp, #4]
    ff7a:	9305      	str	r3, [sp, #20]
    ff7c:	aa05      	add	r2, sp, #20
    ff7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ff82:	e73e      	b.n	fe02 <smp_public_key+0x62>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    ff84:	2002      	movs	r0, #2
    ff86:	e768      	b.n	fe5a <smp_public_key+0xba>
				     BT_CONN_OOB_BOTH_PEERS :
    ff88:	2b00      	cmp	r3, #0
    ff8a:	bf0c      	ite	eq
    ff8c:	2001      	moveq	r0, #1
    ff8e:	2002      	movne	r0, #2
    ff90:	e7de      	b.n	ff50 <smp_public_key+0x1b0>
    ff92:	bf00      	nop
    ff94:	200021a4 	.word	0x200021a4
    ff98:	0002c2f2 	.word	0x0002c2f2
    ff9c:	000289a8 	.word	0x000289a8
    ffa0:	0002c2d1 	.word	0x0002c2d1
    ffa4:	000f4240 	.word	0x000f4240
    ffa8:	200020e8 	.word	0x200020e8
    ffac:	00028ace 	.word	0x00028ace
    ffb0:	0002c133 	.word	0x0002c133

0000ffb4 <bt_smp_connected>:
{
    ffb4:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
    ffb6:	4905      	ldr	r1, [pc, #20]	; (ffcc <bt_smp_connected+0x18>)
    ffb8:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    ffbc:	30e8      	adds	r0, #232	; 0xe8
    ffbe:	f017 ff82 	bl	27ec6 <k_work_init_delayable>
	smp_reset(smp);
    ffc2:	4620      	mov	r0, r4
}
    ffc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ffc8:	f016 bd5d 	b.w	26a86 <smp_reset>
    ffcc:	00010d75 	.word	0x00010d75

0000ffd0 <smp_pairing_rsp>:
{
    ffd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ffd4:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ffd6:	78fb      	ldrb	r3, [r7, #3]
    ffd8:	3b07      	subs	r3, #7
    ffda:	2b09      	cmp	r3, #9
{
    ffdc:	b088      	sub	sp, #32
    ffde:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ffe0:	d904      	bls.n	ffec <smp_pairing_rsp+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    ffe2:	2706      	movs	r7, #6
}
    ffe4:	4638      	mov	r0, r7
    ffe6:	b008      	add	sp, #32
    ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    ffec:	793a      	ldrb	r2, [r7, #4]
    ffee:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
    fff2:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
    fff6:	4013      	ands	r3, r2
    fff8:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
    fffc:	797a      	ldrb	r2, [r7, #5]
    fffe:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   10002:	4013      	ands	r3, r2
   10004:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   10008:	2302      	movs	r3, #2
   1000a:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1000c:	2206      	movs	r2, #6
   1000e:	4639      	mov	r1, r7
   10010:	3011      	adds	r0, #17
   10012:	f014 fcc4 	bl	2499e <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   10016:	78bb      	ldrb	r3, [r7, #2]
   10018:	0718      	lsls	r0, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1001a:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1001e:	d506      	bpl.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
   10020:	7b23      	ldrb	r3, [r4, #12]
   10022:	0719      	lsls	r1, r3, #28
   10024:	d503      	bpl.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   10026:	2105      	movs	r1, #5
   10028:	4628      	mov	r0, r5
   1002a:	f016 fcc5 	bl	269b8 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1002e:	78bb      	ldrb	r3, [r7, #2]
   10030:	069a      	lsls	r2, r3, #26
   10032:	d506      	bpl.n	10042 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43>
   10034:	7b23      	ldrb	r3, [r4, #12]
   10036:	069b      	lsls	r3, r3, #26
   10038:	d503      	bpl.n	10042 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1003a:	2114      	movs	r1, #20
   1003c:	4628      	mov	r0, r5
   1003e:	f016 fcbb 	bl	269b8 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   10042:	78bb      	ldrb	r3, [r7, #2]
   10044:	07d8      	lsls	r0, r3, #31
   10046:	d506      	bpl.n	10056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x57>
   10048:	7b23      	ldrb	r3, [r4, #12]
   1004a:	07d9      	lsls	r1, r3, #31
   1004c:	d503      	bpl.n	10056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x57>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1004e:	210d      	movs	r1, #13
   10050:	4628      	mov	r0, r5
   10052:	f016 fcb1 	bl	269b8 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10056:	2105      	movs	r1, #5
   10058:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1005a:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1005c:	f016 fc6a 	bl	26934 <atomic_test_bit>
   10060:	bb28      	cbnz	r0, 100ae <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   10062:	2f04      	cmp	r7, #4
   10064:	d841      	bhi.n	100ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xeb>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   10066:	7ca2      	ldrb	r2, [r4, #18]
   10068:	7ae3      	ldrb	r3, [r4, #11]
   1006a:	4013      	ands	r3, r2
   1006c:	07da      	lsls	r2, r3, #31
   1006e:	d43a      	bmi.n	100e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   10070:	7b21      	ldrb	r1, [r4, #12]
   10072:	7ce0      	ldrb	r0, [r4, #19]
   10074:	4301      	orrs	r1, r0
   10076:	f011 0104 	ands.w	r1, r1, #4
   1007a:	d00f      	beq.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1007c:	f7ff f930 	bl	f2e0 <get_io_capa>
   10080:	4b9a      	ldr	r3, [pc, #616]	; (102ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2ed>)
   10082:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   10086:	441f      	add	r7, r3
   10088:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   1008a:	2904      	cmp	r1, #4
   1008c:	d106      	bne.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1008e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   10092:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   10094:	2b00      	cmp	r3, #0
   10096:	bf0c      	ite	eq
   10098:	2102      	moveq	r1, #2
   1009a:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   1009c:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1009e:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   100a2:	4620      	mov	r0, r4
   100a4:	f016 fc4f 	bl	26946 <update_keys_check>
   100a8:	bb08      	cbnz	r0, 100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   100aa:	2703      	movs	r7, #3
   100ac:	e79a      	b.n	ffe4 <smp_pairing_rsp+0x14>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   100ae:	7b20      	ldrb	r0, [r4, #12]
   100b0:	7ce2      	ldrb	r2, [r4, #19]
   100b2:	ea00 0302 	and.w	r3, r0, r2
   100b6:	071b      	lsls	r3, r3, #28
   100b8:	d506      	bpl.n	100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   100ba:	7ae3      	ldrb	r3, [r4, #11]
   100bc:	f894 c012 	ldrb.w	ip, [r4, #18]
   100c0:	ea43 030c 	orr.w	r3, r3, ip
   100c4:	07db      	lsls	r3, r3, #31
   100c6:	d4e9      	bmi.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   100c8:	2f04      	cmp	r7, #4
   100ca:	d80e      	bhi.n	100ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xeb>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   100cc:	ea40 0102 	orr.w	r1, r0, r2
   100d0:	f011 0104 	ands.w	r1, r1, #4
   100d4:	d0e2      	beq.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
	return gen_method_sc[remote_io][get_io_capa()];
   100d6:	f7ff f903 	bl	f2e0 <get_io_capa>
   100da:	4b85      	ldr	r3, [pc, #532]	; (102f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f1>)
   100dc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   100e0:	441f      	add	r7, r3
   100e2:	5c39      	ldrb	r1, [r7, r0]
   100e4:	e7da      	b.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
		return LEGACY_OOB;
   100e6:	2106      	movs	r1, #6
   100e8:	e7d8      	b.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
		return JUST_WORKS;
   100ea:	2100      	movs	r1, #0
   100ec:	e7d6      	b.n	1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   100ee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   100f2:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   100f4:	2b03      	cmp	r3, #3
   100f6:	d015      	beq.n	10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>
   100f8:	d804      	bhi.n	10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>
   100fa:	3b01      	subs	r3, #1
   100fc:	2b01      	cmp	r3, #1
   100fe:	d914      	bls.n	1012a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12b>
   10100:	2708      	movs	r7, #8
   10102:	e76f      	b.n	ffe4 <smp_pairing_rsp+0x14>
   10104:	2b04      	cmp	r3, #4
   10106:	d1fb      	bne.n	10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>
	return MIN(req->max_key_size, rsp->max_key_size);
   10108:	7d23      	ldrb	r3, [r4, #20]
   1010a:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1010c:	4293      	cmp	r3, r2
   1010e:	bf28      	it	cs
   10110:	4613      	movcs	r3, r2
   10112:	2b10      	cmp	r3, #16
   10114:	f47f af65 	bne.w	ffe2 <smp_pairing_rsp+0x12>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10118:	2105      	movs	r1, #5
   1011a:	4628      	mov	r0, r5
   1011c:	f016 fc0a 	bl	26934 <atomic_test_bit>
   10120:	2800      	cmp	r0, #0
   10122:	d0c2      	beq.n	100aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xab>
		if (smp->method == JUST_WORKS) {
   10124:	7a23      	ldrb	r3, [r4, #8]
   10126:	2b00      	cmp	r3, #0
   10128:	d0bf      	beq.n	100aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xab>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1012a:	2105      	movs	r1, #5
   1012c:	4628      	mov	r0, r5
   1012e:	f016 fc01 	bl	26934 <atomic_test_bit>
   10132:	2800      	cmp	r0, #0
   10134:	f040 80a5 	bne.w	10282 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x283>
	struct bt_conn *conn = smp->chan.chan.conn;
   10138:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1013c:	7a30      	ldrb	r0, [r6, #8]
   1013e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   10142:	f000 ff5d 	bl	11000 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   10146:	7a23      	ldrb	r3, [r4, #8]
   10148:	b178      	cbz	r0, 1016a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16b>
   1014a:	7b42      	ldrb	r2, [r0, #13]
   1014c:	07d2      	lsls	r2, r2, #31
   1014e:	d50c      	bpl.n	1016a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16b>
   10150:	b95b      	cbnz	r3, 1016a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16b>
		BT_ERR("JustWorks failed, authenticated keys present");
   10152:	4b68      	ldr	r3, [pc, #416]	; (102f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f5>)
   10154:	9306      	str	r3, [sp, #24]
   10156:	2302      	movs	r3, #2
   10158:	9301      	str	r3, [sp, #4]
   1015a:	9305      	str	r3, [sp, #20]
   1015c:	aa05      	add	r2, sp, #20
   1015e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   10162:	4865      	ldr	r0, [pc, #404]	; (102f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f9>)
   10164:	f016 fbd4 	bl	26910 <z_log_msg2_static_create.constprop.0>
	if (ret) {
   10168:	e7ca      	b.n	10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>
	switch (smp->method) {
   1016a:	2b06      	cmp	r3, #6
   1016c:	d867      	bhi.n	1023e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23f>
   1016e:	e8df f003 	tbb	[pc, r3]
   10172:	5c1b      	.short	0x5c1b
   10174:	66666633 	.word	0x66666633
   10178:	04          	.byte	0x04
   10179:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1017a:	4e60      	ldr	r6, [pc, #384]	; (102fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fd>)
   1017c:	6833      	ldr	r3, [r6, #0]
   1017e:	2b00      	cmp	r3, #0
   10180:	d067      	beq.n	10252 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x253>
   10182:	68db      	ldr	r3, [r3, #12]
   10184:	2b00      	cmp	r3, #0
   10186:	d064      	beq.n	10252 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x253>
			struct bt_conn_oob_info info = {
   10188:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1018a:	210a      	movs	r1, #10
   1018c:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1018e:	f8ad 3008 	strh.w	r3, [sp, #8]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10192:	f016 fc11 	bl	269b8 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   10196:	6833      	ldr	r3, [r6, #0]
   10198:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1019c:	68db      	ldr	r3, [r3, #12]
   1019e:	a902      	add	r1, sp, #8
   101a0:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   101a2:	7a23      	ldrb	r3, [r4, #8]
   101a4:	2b00      	cmp	r3, #0
   101a6:	d156      	bne.n	10256 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x257>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   101a8:	210f      	movs	r1, #15
   101aa:	4628      	mov	r0, r5
   101ac:	f016 fbc2 	bl	26934 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   101b0:	2800      	cmp	r0, #0
   101b2:	d050      	beq.n	10256 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x257>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   101b4:	4e51      	ldr	r6, [pc, #324]	; (102fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fd>)
   101b6:	6833      	ldr	r3, [r6, #0]
   101b8:	2b00      	cmp	r3, #0
   101ba:	d04c      	beq.n	10256 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x257>
	    bt_auth && bt_auth->pairing_confirm) {
   101bc:	695b      	ldr	r3, [r3, #20]
   101be:	2b00      	cmp	r3, #0
   101c0:	d049      	beq.n	10256 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x257>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   101c2:	4628      	mov	r0, r5
   101c4:	210a      	movs	r1, #10
   101c6:	f016 fbf7 	bl	269b8 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   101ca:	6833      	ldr	r3, [r6, #0]
   101cc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   101d0:	695b      	ldr	r3, [r3, #20]
   101d2:	4798      	blx	r3
	return 0;
   101d4:	2700      	movs	r7, #0
   101d6:	e705      	b.n	ffe4 <smp_pairing_rsp+0x14>
			if (bt_rand(&passkey, sizeof(passkey))) {
   101d8:	2104      	movs	r1, #4
   101da:	a802      	add	r0, sp, #8
   101dc:	f004 f938 	bl	14450 <bt_rand>
   101e0:	2800      	cmp	r0, #0
   101e2:	d18d      	bne.n	10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>
			passkey %= 1000000;
   101e4:	9b02      	ldr	r3, [sp, #8]
   101e6:	4a46      	ldr	r2, [pc, #280]	; (10300 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x301>)
		if (bt_auth && bt_auth->passkey_display) {
   101e8:	4f44      	ldr	r7, [pc, #272]	; (102fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fd>)
			passkey %= 1000000;
   101ea:	fbb3 f1f2 	udiv	r1, r3, r2
   101ee:	fb02 3311 	mls	r3, r2, r1, r3
   101f2:	9302      	str	r3, [sp, #8]
		if (bt_auth && bt_auth->passkey_display) {
   101f4:	683b      	ldr	r3, [r7, #0]
   101f6:	b153      	cbz	r3, 1020e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20f>
   101f8:	681b      	ldr	r3, [r3, #0]
   101fa:	b143      	cbz	r3, 1020e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20f>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   101fc:	210b      	movs	r1, #11
   101fe:	4628      	mov	r0, r5
   10200:	f016 fbda 	bl	269b8 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   10204:	683b      	ldr	r3, [r7, #0]
   10206:	9902      	ldr	r1, [sp, #8]
   10208:	681b      	ldr	r3, [r3, #0]
   1020a:	4630      	mov	r0, r6
   1020c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1020e:	9b02      	ldr	r3, [sp, #8]
	dst[0] = val;
   10210:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   10214:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   10218:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1021a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1021e:	0a1b      	lsrs	r3, r3, #8
   10220:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   10224:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   10228:	e7bb      	b.n	101a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a3>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1022a:	4628      	mov	r0, r5
   1022c:	210a      	movs	r1, #10
   1022e:	f016 fbc3 	bl	269b8 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   10232:	4b32      	ldr	r3, [pc, #200]	; (102fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fd>)
   10234:	681b      	ldr	r3, [r3, #0]
   10236:	4630      	mov	r0, r6
   10238:	685b      	ldr	r3, [r3, #4]
   1023a:	4798      	blx	r3
	if (ret) {
   1023c:	e7b1      	b.n	101a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a3>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1023e:	4a31      	ldr	r2, [pc, #196]	; (10304 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x305>)
	switch (smp->method) {
   10240:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   10244:	2303      	movs	r3, #3
   10246:	9301      	str	r3, [sp, #4]
   10248:	9305      	str	r3, [sp, #20]
   1024a:	aa05      	add	r2, sp, #20
   1024c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10250:	e787      	b.n	10162 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x163>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   10252:	2702      	movs	r7, #2
   10254:	e6c6      	b.n	ffe4 <smp_pairing_rsp+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   10256:	210a      	movs	r1, #10
   10258:	4628      	mov	r0, r5
   1025a:	f016 fb6b 	bl	26934 <atomic_test_bit>
   1025e:	b958      	cbnz	r0, 10278 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x279>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   10260:	4620      	mov	r0, r4
   10262:	2103      	movs	r1, #3
   10264:	f016 fba8 	bl	269b8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   10268:	210e      	movs	r1, #14
   1026a:	f016 fba5 	bl	269b8 <atomic_set_bit>
}
   1026e:	b008      	add	sp, #32
   10270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   10274:	f016 bc8a 	b.w	26b8c <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   10278:	2100      	movs	r1, #0
   1027a:	4628      	mov	r0, r5
   1027c:	f016 fb9c 	bl	269b8 <atomic_set_bit>
   10280:	e7a8      	b.n	101d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d5>
	smp->local_dist &= SEND_KEYS_SC;
   10282:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   10286:	7a27      	ldrb	r7, [r4, #8]
	smp->local_dist &= SEND_KEYS_SC;
   10288:	f423 4379 	bic.w	r3, r3, #63744	; 0xf900
   1028c:	f023 03fb 	bic.w	r3, r3, #251	; 0xfb
   10290:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   10294:	b9af      	cbnz	r7, 102c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c3>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   10296:	210f      	movs	r1, #15
   10298:	4628      	mov	r0, r5
   1029a:	f016 fb4b 	bl	26934 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1029e:	b180      	cbz	r0, 102c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c3>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   102a0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 102fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fd>
   102a4:	f8d8 3000 	ldr.w	r3, [r8]
   102a8:	b15b      	cbz	r3, 102c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c3>
	    bt_auth && bt_auth->pairing_confirm) {
   102aa:	695b      	ldr	r3, [r3, #20]
   102ac:	b14b      	cbz	r3, 102c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c3>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   102ae:	4628      	mov	r0, r5
   102b0:	210a      	movs	r1, #10
   102b2:	f016 fb81 	bl	269b8 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   102b6:	f8d8 3000 	ldr.w	r3, [r8]
   102ba:	4630      	mov	r0, r6
   102bc:	695b      	ldr	r3, [r3, #20]
   102be:	4798      	blx	r3
		return 0;
   102c0:	e690      	b.n	ffe4 <smp_pairing_rsp+0x14>
	if (!sc_public_key) {
   102c2:	4b11      	ldr	r3, [pc, #68]	; (10308 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x309>)
   102c4:	681f      	ldr	r7, [r3, #0]
   102c6:	b927      	cbnz	r7, 102d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d3>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   102c8:	2106      	movs	r1, #6
   102ca:	4628      	mov	r0, r5
   102cc:	f016 fb74 	bl	269b8 <atomic_set_bit>
		return 0;
   102d0:	e688      	b.n	ffe4 <smp_pairing_rsp+0x14>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   102d2:	4620      	mov	r0, r4
   102d4:	210c      	movs	r1, #12
   102d6:	f016 fb6f 	bl	269b8 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   102da:	210b      	movs	r1, #11
   102dc:	f016 faec 	bl	268b8 <atomic_clear_bit>
}
   102e0:	b008      	add	sp, #32
   102e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   102e6:	f7ff bc0b 	b.w	fb00 <sc_send_public_key>
   102ea:	bf00      	nop
   102ec:	0002c4e9 	.word	0x0002c4e9
   102f0:	0002c502 	.word	0x0002c502
   102f4:	0002c30d 	.word	0x0002c30d
   102f8:	000289a8 	.word	0x000289a8
   102fc:	200020e8 	.word	0x200020e8
   10300:	000f4240 	.word	0x000f4240
   10304:	0002c133 	.word	0x0002c133
   10308:	200021a4 	.word	0x200021a4

0001030c <smp_pairing_random>:
{
   1030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10310:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   10312:	f100 0737 	add.w	r7, r0, #55	; 0x37
   10316:	6889      	ldr	r1, [r1, #8]
{
   10318:	b0a0      	sub	sp, #128	; 0x80
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1031a:	2210      	movs	r2, #16
   1031c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1031e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   10320:	f014 fb3d 	bl	2499e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10324:	2105      	movs	r1, #5
   10326:	4630      	mov	r0, r6
   10328:	f016 fb04 	bl	26934 <atomic_test_bit>
   1032c:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
   10330:	2800      	cmp	r0, #0
   10332:	d160      	bne.n	103f6 <smp_pairing_random+0xea>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10334:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10338:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1033c:	f10d 0820 	add.w	r8, sp, #32
   10340:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10342:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10346:	9300      	str	r3, [sp, #0]
   10348:	f8cd 8008 	str.w	r8, [sp, #8]
   1034c:	f104 0310 	add.w	r3, r4, #16
   10350:	f104 0209 	add.w	r2, r4, #9
   10354:	4639      	mov	r1, r7
   10356:	4650      	mov	r0, sl
   10358:	f016 fbbd 	bl	26ad6 <smp_c1>
	if (err) {
   1035c:	2800      	cmp	r0, #0
   1035e:	d13e      	bne.n	103de <smp_pairing_random+0xd2>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   10360:	2210      	movs	r2, #16
   10362:	4641      	mov	r1, r8
   10364:	f104 0017 	add.w	r0, r4, #23
   10368:	f014 fb08 	bl	2497c <memcmp>
   1036c:	2800      	cmp	r0, #0
   1036e:	d173      	bne.n	10458 <smp_pairing_random+0x14c>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   10370:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10374:	2d00      	cmp	r5, #0
   10376:	d139      	bne.n	103ec <smp_pairing_random+0xe0>
	memcpy(out, r2, 8);
   10378:	2208      	movs	r2, #8
   1037a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1037e:	4640      	mov	r0, r8
   10380:	f014 fb0d 	bl	2499e <memcpy>
	memcpy(out + 8, r1, 8);
   10384:	2208      	movs	r2, #8
   10386:	4639      	mov	r1, r7
   10388:	a80a      	add	r0, sp, #40	; 0x28
   1038a:	f014 fb08 	bl	2499e <memcpy>
	return bt_encrypt_le(k, out, out);
   1038e:	4642      	mov	r2, r8
   10390:	4641      	mov	r1, r8
   10392:	4650      	mov	r0, sl
   10394:	f004 f85e 	bl	14454 <bt_encrypt_le>
		if (err) {
   10398:	bb08      	cbnz	r0, 103de <smp_pairing_random+0xd2>
		(void)memset(ediv, 0, sizeof(ediv));
   1039a:	2202      	movs	r2, #2
   1039c:	4629      	mov	r1, r5
   1039e:	a804      	add	r0, sp, #16
   103a0:	f014 fb08 	bl	249b4 <memset>
		(void)memset(rand, 0, sizeof(rand));
   103a4:	2208      	movs	r2, #8
   103a6:	4629      	mov	r1, r5
   103a8:	a806      	add	r0, sp, #24
   103aa:	f014 fb03 	bl	249b4 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   103ae:	7d22      	ldrb	r2, [r4, #20]
   103b0:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   103b2:	429a      	cmp	r2, r3
   103b4:	bf94      	ite	ls
   103b6:	9200      	strls	r2, [sp, #0]
   103b8:	9300      	strhi	r3, [sp, #0]
   103ba:	a906      	add	r1, sp, #24
   103bc:	4643      	mov	r3, r8
   103be:	aa04      	add	r2, sp, #16
   103c0:	4648      	mov	r0, r9
   103c2:	f014 feaf 	bl	25124 <bt_conn_le_start_encryption>
   103c6:	b160      	cbz	r0, 103e2 <smp_pairing_random+0xd6>
			BT_ERR("Failed to start encryption");
   103c8:	4b5f      	ldr	r3, [pc, #380]	; (10548 <smp_pairing_random+0x23c>)
   103ca:	9310      	str	r3, [sp, #64]	; 0x40
   103cc:	2302      	movs	r3, #2
   103ce:	9305      	str	r3, [sp, #20]
		BT_ERR("Calculate confirm failed");
   103d0:	930f      	str	r3, [sp, #60]	; 0x3c
   103d2:	aa0f      	add	r2, sp, #60	; 0x3c
   103d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   103d8:	485c      	ldr	r0, [pc, #368]	; (1054c <smp_pairing_random+0x240>)
   103da:	f016 fa99 	bl	26910 <z_log_msg2_static_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   103de:	2508      	movs	r5, #8
   103e0:	e005      	b.n	103ee <smp_pairing_random+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   103e2:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   103e4:	4630      	mov	r0, r6
   103e6:	f016 fae7 	bl	269b8 <atomic_set_bit>
			return 0;
   103ea:	e000      	b.n	103ee <smp_pairing_random+0xe2>
	return 0;
   103ec:	4605      	mov	r5, r0
}
   103ee:	4628      	mov	r0, r5
   103f0:	b020      	add	sp, #128	; 0x80
   103f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   103f6:	f899 5003 	ldrb.w	r5, [r9, #3]
   103fa:	2d00      	cmp	r5, #0
   103fc:	f040 80a1 	bne.w	10542 <smp_pairing_random+0x236>
	switch (smp->method) {
   10400:	7a23      	ldrb	r3, [r4, #8]
   10402:	2b05      	cmp	r3, #5
   10404:	f200 8086 	bhi.w	10514 <smp_pairing_random+0x208>
   10408:	e8df f003 	tbb	[pc, r3]
   1040c:	1d03031d 	.word	0x1d03031d
   10410:	2884      	.short	0x2884
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   10412:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   10416:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1041a:	40d3      	lsrs	r3, r2
   1041c:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   10420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   10424:	494a      	ldr	r1, [pc, #296]	; (10550 <smp_pairing_random+0x244>)
   10426:	f10d 0820 	add.w	r8, sp, #32
   1042a:	f8cd 8000 	str.w	r8, [sp]
   1042e:	6809      	ldr	r1, [r1, #0]
   10430:	463a      	mov	r2, r7
   10432:	f104 0057 	add.w	r0, r4, #87	; 0x57
   10436:	f016 f9cc 	bl	267d2 <smp_f4>
   1043a:	b130      	cbz	r0, 1044a <smp_pairing_random+0x13e>
		BT_ERR("Calculate confirm failed");
   1043c:	4b45      	ldr	r3, [pc, #276]	; (10554 <smp_pairing_random+0x248>)
   1043e:	9310      	str	r3, [sp, #64]	; 0x40
   10440:	2302      	movs	r3, #2
   10442:	9306      	str	r3, [sp, #24]
   10444:	e7c4      	b.n	103d0 <smp_pairing_random+0xc4>
	switch (smp->method) {
   10446:	2300      	movs	r3, #0
   10448:	e7ec      	b.n	10424 <smp_pairing_random+0x118>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1044a:	2210      	movs	r2, #16
   1044c:	4641      	mov	r1, r8
   1044e:	f104 0017 	add.w	r0, r4, #23
   10452:	f014 fa93 	bl	2497c <memcmp>
   10456:	b108      	cbz	r0, 1045c <smp_pairing_random+0x150>
		return BT_SMP_ERR_CONFIRM_FAILED;
   10458:	2504      	movs	r5, #4
   1045a:	e7c8      	b.n	103ee <smp_pairing_random+0xe2>
		switch (smp->method) {
   1045c:	7a23      	ldrb	r3, [r4, #8]
   1045e:	2b05      	cmp	r3, #5
   10460:	d858      	bhi.n	10514 <smp_pairing_random+0x208>
   10462:	e8df f003 	tbb	[pc, r3]
   10466:	3e61      	.short	0x3e61
   10468:	6157033e 	.word	0x6157033e
	sys_memcpy_swap(m, u, 32);
   1046c:	4b38      	ldr	r3, [pc, #224]	; (10550 <smp_pairing_random+0x244>)
   1046e:	2220      	movs	r2, #32
   10470:	6819      	ldr	r1, [r3, #0]
   10472:	a80c      	add	r0, sp, #48	; 0x30
   10474:	f016 f978 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   10478:	2220      	movs	r2, #32
   1047a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1047e:	a814      	add	r0, sp, #80	; 0x50
   10480:	f016 f972 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   10484:	2210      	movs	r2, #16
   10486:	4639      	mov	r1, r7
   10488:	a81c      	add	r0, sp, #112	; 0x70
   1048a:	f016 f96d 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1048e:	2210      	movs	r2, #16
   10490:	f104 0127 	add.w	r1, r4, #39	; 0x27
   10494:	a808      	add	r0, sp, #32
   10496:	f016 f967 	bl	26768 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1049a:	ab08      	add	r3, sp, #32
   1049c:	2250      	movs	r2, #80	; 0x50
   1049e:	a90c      	add	r1, sp, #48	; 0x30
   104a0:	4618      	mov	r0, r3
   104a2:	f016 f97a 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
   104a6:	2800      	cmp	r0, #0
   104a8:	d199      	bne.n	103de <smp_pairing_random+0xd2>
	memcpy(passkey, xs + 12, 4);
   104aa:	a90b      	add	r1, sp, #44	; 0x2c
   104ac:	2204      	movs	r2, #4
   104ae:	a806      	add	r0, sp, #24
   104b0:	f014 fa75 	bl	2499e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   104b4:	9b06      	ldr	r3, [sp, #24]
   104b6:	4a28      	ldr	r2, [pc, #160]	; (10558 <smp_pairing_random+0x24c>)
   104b8:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   104ba:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   104bc:	fbb3 f1f2 	udiv	r1, r3, r2
   104c0:	fb02 3311 	mls	r3, r2, r1, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   104c4:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   104c6:	9306      	str	r3, [sp, #24]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   104c8:	f016 fa76 	bl	269b8 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   104cc:	2109      	movs	r1, #9
   104ce:	f016 fa73 	bl	269b8 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   104d2:	4b22      	ldr	r3, [pc, #136]	; (1055c <smp_pairing_random+0x250>)
   104d4:	9906      	ldr	r1, [sp, #24]
   104d6:	681b      	ldr	r3, [r3, #0]
   104d8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   104dc:	689b      	ldr	r3, [r3, #8]
   104de:	4798      	blx	r3
			return 0;
   104e0:	e785      	b.n	103ee <smp_pairing_random+0xe2>
			smp->passkey_round++;
   104e2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   104e6:	3301      	adds	r3, #1
   104e8:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   104ea:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   104ec:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   104f0:	d01a      	beq.n	10528 <smp_pairing_random+0x21c>
			if (bt_rand(smp->prnd, 16)) {
   104f2:	2110      	movs	r1, #16
   104f4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   104f8:	f003 ffaa 	bl	14450 <bt_rand>
   104fc:	2800      	cmp	r0, #0
   104fe:	f47f af6e 	bne.w	103de <smp_pairing_random+0xd2>
			atomic_set_bit(smp->allowed_cmds,
   10502:	2103      	movs	r1, #3
   10504:	4620      	mov	r0, r4
   10506:	f016 fa57 	bl	269b8 <atomic_set_bit>
}
   1050a:	b020      	add	sp, #128	; 0x80
   1050c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   10510:	f7ff bbf8 	b.w	fd04 <smp_send_pairing_confirm>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   10514:	4a12      	ldr	r2, [pc, #72]	; (10560 <smp_pairing_random+0x254>)
		switch (smp->method) {
   10516:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1051a:	2303      	movs	r3, #3
   1051c:	9308      	str	r3, [sp, #32]
   1051e:	930f      	str	r3, [sp, #60]	; 0x3c
   10520:	aa0f      	add	r2, sp, #60	; 0x3c
   10522:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10526:	e757      	b.n	103d8 <smp_pairing_random+0xcc>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   10528:	2107      	movs	r1, #7
   1052a:	4630      	mov	r0, r6
   1052c:	f016 fa02 	bl	26934 <atomic_test_bit>
   10530:	b108      	cbz	r0, 10536 <smp_pairing_random+0x22a>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   10532:	2109      	movs	r1, #9
   10534:	e756      	b.n	103e4 <smp_pairing_random+0xd8>
		return compute_and_send_central_dhcheck(smp);
   10536:	4620      	mov	r0, r4
}
   10538:	b020      	add	sp, #128	; 0x80
   1053a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   1053e:	f7ff bb01 	b.w	fb44 <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   10542:	460d      	mov	r5, r1
   10544:	e753      	b.n	103ee <smp_pairing_random+0xe2>
   10546:	bf00      	nop
   10548:	0002c14f 	.word	0x0002c14f
   1054c:	000289a8 	.word	0x000289a8
   10550:	200021a4 	.word	0x200021a4
   10554:	0002c33a 	.word	0x0002c33a
   10558:	000f4240 	.word	0x000f4240
   1055c:	200020e8 	.word	0x200020e8
   10560:	0002c133 	.word	0x0002c133

00010564 <bt_smp_sign_verify>:
{
   10564:	b5f0      	push	{r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   10566:	898b      	ldrh	r3, [r1, #12]
   10568:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1056a:	6889      	ldr	r1, [r1, #8]
{
   1056c:	4605      	mov	r5, r0
   1056e:	b089      	sub	sp, #36	; 0x24
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   10570:	3b0c      	subs	r3, #12
   10572:	4419      	add	r1, r3
   10574:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10576:	f105 0788 	add.w	r7, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1057a:	a805      	add	r0, sp, #20
   1057c:	f014 fa0f 	bl	2499e <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10580:	7a29      	ldrb	r1, [r5, #8]
   10582:	463a      	mov	r2, r7
   10584:	2010      	movs	r0, #16
   10586:	f000 fced 	bl	10f64 <bt_keys_find>
	if (!keys) {
   1058a:	4605      	mov	r5, r0
   1058c:	b980      	cbnz	r0, 105b0 <bt_smp_sign_verify+0x4c>
		BT_ERR("Unable to find Remote CSRK for %s",
   1058e:	4638      	mov	r0, r7
   10590:	f7f8 fc46 	bl	8e20 <bt_addr_le_str_real>
   10594:	4b27      	ldr	r3, [pc, #156]	; (10634 <bt_smp_sign_verify+0xd0>)
   10596:	9002      	str	r0, [sp, #8]
   10598:	e9cd 5300 	strd	r5, r3, [sp]
   1059c:	4628      	mov	r0, r5
   1059e:	4926      	ldr	r1, [pc, #152]	; (10638 <bt_smp_sign_verify+0xd4>)
   105a0:	462b      	mov	r3, r5
   105a2:	2201      	movs	r2, #1
   105a4:	f016 f9b7 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   105a8:	f06f 0001 	mvn.w	r0, #1
}
   105ac:	b009      	add	sp, #36	; 0x24
   105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   105b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
   105b2:	9304      	str	r3, [sp, #16]
   105b4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   105b6:	68a0      	ldr	r0, [r4, #8]
   105b8:	3b0c      	subs	r3, #12
   105ba:	2204      	movs	r2, #4
   105bc:	a904      	add	r1, sp, #16
   105be:	4418      	add	r0, r3
   105c0:	f014 f9ed 	bl	2499e <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   105c4:	89a2      	ldrh	r2, [r4, #12]
   105c6:	68a1      	ldr	r1, [r4, #8]
   105c8:	3a0c      	subs	r2, #12
   105ca:	b292      	uxth	r2, r2
   105cc:	f105 0054 	add.w	r0, r5, #84	; 0x54
   105d0:	f7fe feac 	bl	f32c <smp_sign_buf>
	if (err) {
   105d4:	4606      	mov	r6, r0
   105d6:	b178      	cbz	r0, 105f8 <bt_smp_sign_verify+0x94>
		BT_ERR("Unable to create signature for %s",
   105d8:	4638      	mov	r0, r7
   105da:	f7f8 fc21 	bl	8e20 <bt_addr_le_str_real>
   105de:	4b17      	ldr	r3, [pc, #92]	; (1063c <bt_smp_sign_verify+0xd8>)
   105e0:	9301      	str	r3, [sp, #4]
   105e2:	2300      	movs	r3, #0
   105e4:	9002      	str	r0, [sp, #8]
   105e6:	4914      	ldr	r1, [pc, #80]	; (10638 <bt_smp_sign_verify+0xd4>)
   105e8:	9300      	str	r3, [sp, #0]
   105ea:	4618      	mov	r0, r3
   105ec:	2201      	movs	r2, #1
   105ee:	f016 f992 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   105f2:	f06f 0004 	mvn.w	r0, #4
   105f6:	e7d9      	b.n	105ac <bt_smp_sign_verify+0x48>
   105f8:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   105fa:	68a1      	ldr	r1, [r4, #8]
   105fc:	3b0c      	subs	r3, #12
   105fe:	220c      	movs	r2, #12
   10600:	4419      	add	r1, r3
   10602:	a805      	add	r0, sp, #20
   10604:	f014 f9ba 	bl	2497c <memcmp>
   10608:	b178      	cbz	r0, 1062a <bt_smp_sign_verify+0xc6>
		BT_ERR("Unable to verify signature for %s",
   1060a:	4638      	mov	r0, r7
   1060c:	f7f8 fc08 	bl	8e20 <bt_addr_le_str_real>
   10610:	4b0b      	ldr	r3, [pc, #44]	; (10640 <bt_smp_sign_verify+0xdc>)
   10612:	9002      	str	r0, [sp, #8]
   10614:	e9cd 6300 	strd	r6, r3, [sp]
   10618:	4630      	mov	r0, r6
   1061a:	4907      	ldr	r1, [pc, #28]	; (10638 <bt_smp_sign_verify+0xd4>)
   1061c:	4633      	mov	r3, r6
   1061e:	2201      	movs	r2, #1
   10620:	f016 f979 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return -EBADMSG;
   10624:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10628:	e7c0      	b.n	105ac <bt_smp_sign_verify+0x48>
	keys->remote_csrk.cnt++;
   1062a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1062c:	3301      	adds	r3, #1
   1062e:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   10630:	e7bc      	b.n	105ac <bt_smp_sign_verify+0x48>
   10632:	bf00      	nop
   10634:	0002c353 	.word	0x0002c353
   10638:	000289a8 	.word	0x000289a8
   1063c:	0002c375 	.word	0x0002c375
   10640:	0002c397 	.word	0x0002c397

00010644 <bt_smp_sign>:
{
   10644:	b570      	push	{r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   10646:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1064a:	b086      	sub	sp, #24
   1064c:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1064e:	4632      	mov	r2, r6
   10650:	7a01      	ldrb	r1, [r0, #8]
   10652:	2008      	movs	r0, #8
   10654:	f000 fc86 	bl	10f64 <bt_keys_find>
	if (!keys) {
   10658:	4604      	mov	r4, r0
   1065a:	b980      	cbnz	r0, 1067e <bt_smp_sign+0x3a>
		BT_ERR("Unable to find local CSRK for %s",
   1065c:	4630      	mov	r0, r6
   1065e:	f7f8 fbdf 	bl	8e20 <bt_addr_le_str_real>
   10662:	4b1d      	ldr	r3, [pc, #116]	; (106d8 <bt_smp_sign+0x94>)
   10664:	9002      	str	r0, [sp, #8]
   10666:	e9cd 4300 	strd	r4, r3, [sp]
   1066a:	4620      	mov	r0, r4
   1066c:	491b      	ldr	r1, [pc, #108]	; (106dc <bt_smp_sign+0x98>)
   1066e:	4623      	mov	r3, r4
   10670:	2201      	movs	r2, #1
   10672:	f016 f950 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return -ENOENT;
   10676:	f06f 0001 	mvn.w	r0, #1
}
   1067a:	b006      	add	sp, #24
   1067c:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
   1067e:	210c      	movs	r1, #12
   10680:	f105 0008 	add.w	r0, r5, #8
   10684:	f016 fd10 	bl	270a8 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   10688:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1068a:	9305      	str	r3, [sp, #20]
	return buf->data + buf->len;
   1068c:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1068e:	68a8      	ldr	r0, [r5, #8]
   10690:	3b0c      	subs	r3, #12
   10692:	2204      	movs	r2, #4
   10694:	a905      	add	r1, sp, #20
   10696:	4418      	add	r0, r3
   10698:	f014 f981 	bl	2499e <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1069c:	89aa      	ldrh	r2, [r5, #12]
   1069e:	68a9      	ldr	r1, [r5, #8]
   106a0:	3a0c      	subs	r2, #12
   106a2:	b292      	uxth	r2, r2
   106a4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   106a8:	f7fe fe40 	bl	f32c <smp_sign_buf>
	if (err) {
   106ac:	b178      	cbz	r0, 106ce <bt_smp_sign+0x8a>
		BT_ERR("Unable to create signature for %s",
   106ae:	4630      	mov	r0, r6
   106b0:	f7f8 fbb6 	bl	8e20 <bt_addr_le_str_real>
   106b4:	4b0a      	ldr	r3, [pc, #40]	; (106e0 <bt_smp_sign+0x9c>)
   106b6:	9301      	str	r3, [sp, #4]
   106b8:	2300      	movs	r3, #0
   106ba:	9002      	str	r0, [sp, #8]
   106bc:	4907      	ldr	r1, [pc, #28]	; (106dc <bt_smp_sign+0x98>)
   106be:	9300      	str	r3, [sp, #0]
   106c0:	4618      	mov	r0, r3
   106c2:	2201      	movs	r2, #1
   106c4:	f016 f927 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
   106c8:	f06f 0004 	mvn.w	r0, #4
   106cc:	e7d5      	b.n	1067a <bt_smp_sign+0x36>
	keys->local_csrk.cnt++;
   106ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   106d0:	3301      	adds	r3, #1
   106d2:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   106d4:	e7d1      	b.n	1067a <bt_smp_sign+0x36>
   106d6:	bf00      	nop
   106d8:	0002c3b9 	.word	0x0002c3b9
   106dc:	000289a8 	.word	0x000289a8
   106e0:	0002c375 	.word	0x0002c375

000106e4 <smp_pairing_complete>:
{
   106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   106e6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   106ea:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   106ec:	1d07      	adds	r7, r0, #4
	if (!status) {
   106ee:	b9b9      	cbnz	r1, 10720 <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   106f0:	210d      	movs	r1, #13
		if (bt_auth && bt_auth->pairing_complete) {
   106f2:	4b28      	ldr	r3, [pc, #160]	; (10794 <smp_pairing_complete+0xb0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   106f4:	4638      	mov	r0, r7
   106f6:	f016 f91d 	bl	26934 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   106fa:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   106fc:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   106fe:	b11b      	cbz	r3, 10708 <smp_pairing_complete+0x24>
   10700:	699b      	ldr	r3, [r3, #24]
   10702:	b10b      	cbz	r3, 10708 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   10704:	4620      	mov	r0, r4
   10706:	4798      	blx	r3
	smp_reset(smp);
   10708:	4628      	mov	r0, r5
   1070a:	f016 f9bc 	bl	26a86 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1070e:	7a62      	ldrb	r2, [r4, #9]
   10710:	7aa3      	ldrb	r3, [r4, #10]
   10712:	429a      	cmp	r2, r3
   10714:	d03c      	beq.n	10790 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
   10716:	4620      	mov	r0, r4
}
   10718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1071c:	f016 bb05 	b.w	26d2a <bt_smp_start_security>
	switch (smp_err) {
   10720:	3901      	subs	r1, #1
   10722:	b2c9      	uxtb	r1, r1
   10724:	290e      	cmp	r1, #14
   10726:	bf9c      	itt	ls
   10728:	4b1b      	ldrls	r3, [pc, #108]	; (10798 <smp_pairing_complete+0xb4>)
   1072a:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1072c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   10730:	bf88      	it	hi
   10732:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   10734:	b143      	cbz	r3, 10748 <smp_pairing_complete+0x64>
   10736:	7b1b      	ldrb	r3, [r3, #12]
   10738:	bb1b      	cbnz	r3, 10782 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
   1073a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1073e:	f016 fc3c 	bl	26fba <bt_keys_clear>
			conn->le.keys = NULL;
   10742:	2300      	movs	r3, #0
   10744:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   10748:	2102      	movs	r1, #2
   1074a:	4638      	mov	r0, r7
   1074c:	f016 f8f2 	bl	26934 <atomic_test_bit>
   10750:	b940      	cbnz	r0, 10764 <smp_pairing_complete+0x80>
	switch (err) {
   10752:	2e07      	cmp	r6, #7
   10754:	bf96      	itet	ls
   10756:	4b11      	ldrls	r3, [pc, #68]	; (1079c <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   10758:	211f      	movhi	r1, #31
   1075a:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1075c:	4632      	mov	r2, r6
   1075e:	4620      	mov	r0, r4
   10760:	f7fb fc50 	bl	c004 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   10764:	2103      	movs	r1, #3
   10766:	4638      	mov	r0, r7
   10768:	f016 f8e4 	bl	26934 <atomic_test_bit>
   1076c:	2800      	cmp	r0, #0
   1076e:	d0cb      	beq.n	10708 <smp_pairing_complete+0x24>
   10770:	4b08      	ldr	r3, [pc, #32]	; (10794 <smp_pairing_complete+0xb0>)
   10772:	681b      	ldr	r3, [r3, #0]
   10774:	2b00      	cmp	r3, #0
   10776:	d0c7      	beq.n	10708 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
   10778:	69db      	ldr	r3, [r3, #28]
   1077a:	2b00      	cmp	r3, #0
   1077c:	d0c4      	beq.n	10708 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   1077e:	4631      	mov	r1, r6
   10780:	e7c0      	b.n	10704 <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   10782:	2102      	movs	r1, #2
   10784:	4638      	mov	r0, r7
   10786:	f016 f8d5 	bl	26934 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1078a:	2800      	cmp	r0, #0
   1078c:	d1d5      	bne.n	1073a <smp_pairing_complete+0x56>
   1078e:	e7db      	b.n	10748 <smp_pairing_complete+0x64>
}
   10790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10792:	bf00      	nop
   10794:	200020e8 	.word	0x200020e8
   10798:	0002c4c9 	.word	0x0002c4c9
   1079c:	0002c4e1 	.word	0x0002c4e1

000107a0 <bt_smp_recv>:
{
   107a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107a4:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   107a6:	898b      	ldrh	r3, [r1, #12]
{
   107a8:	af00      	add	r7, sp, #0
   107aa:	4680      	mov	r8, r0
   107ac:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   107ae:	b983      	cbnz	r3, 107d2 <bt_smp_recv+0x32>
		BT_ERR("Too small SMP PDU received");
   107b0:	4b3f      	ldr	r3, [pc, #252]	; (108b0 <bt_smp_recv+0x110>)
   107b2:	61bb      	str	r3, [r7, #24]
   107b4:	2302      	movs	r3, #2
   107b6:	607b      	str	r3, [r7, #4]
   107b8:	617b      	str	r3, [r7, #20]
   107ba:	f107 0214 	add.w	r2, r7, #20
   107be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   107c2:	483c      	ldr	r0, [pc, #240]	; (108b4 <bt_smp_recv+0x114>)
   107c4:	f016 f8a4 	bl	26910 <z_log_msg2_static_create.constprop.0>
}
   107c8:	2000      	movs	r0, #0
   107ca:	3720      	adds	r7, #32
   107cc:	46bd      	mov	sp, r7
   107ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   107d2:	2101      	movs	r1, #1
   107d4:	f105 0008 	add.w	r0, r5, #8
   107d8:	f016 fc97 	bl	2710a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   107dc:	2104      	movs	r1, #4
   107de:	4606      	mov	r6, r0
   107e0:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
   107e4:	f016 f8a6 	bl	26934 <atomic_test_bit>
   107e8:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
   107ec:	7831      	ldrb	r1, [r6, #0]
   107ee:	b150      	cbz	r0, 10806 <bt_smp_recv+0x66>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   107f0:	4b31      	ldr	r3, [pc, #196]	; (108b8 <bt_smp_recv+0x118>)
   107f2:	e9c7 3106 	strd	r3, r1, [r7, #24]
   107f6:	2303      	movs	r3, #3
   107f8:	607b      	str	r3, [r7, #4]
   107fa:	617b      	str	r3, [r7, #20]
   107fc:	f107 0214 	add.w	r2, r7, #20
   10800:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10804:	e7dd      	b.n	107c2 <bt_smp_recv+0x22>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   10806:	290e      	cmp	r1, #14
   10808:	d901      	bls.n	1080e <bt_smp_recv+0x6e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1080a:	4b2c      	ldr	r3, [pc, #176]	; (108bc <bt_smp_recv+0x11c>)
   1080c:	e7f1      	b.n	107f2 <bt_smp_recv+0x52>
	if (!handlers[hdr->code].func) {
   1080e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 108c0 <bt_smp_recv+0x120>
   10812:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   10816:	b98b      	cbnz	r3, 1083c <bt_smp_recv+0x9c>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   10818:	4b2a      	ldr	r3, [pc, #168]	; (108c4 <bt_smp_recv+0x124>)
   1081a:	4826      	ldr	r0, [pc, #152]	; (108b4 <bt_smp_recv+0x114>)
   1081c:	e9c7 3106 	strd	r3, r1, [r7, #24]
   10820:	f107 0214 	add.w	r2, r7, #20
   10824:	2303      	movs	r3, #3
   10826:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1082a:	607b      	str	r3, [r7, #4]
   1082c:	617b      	str	r3, [r7, #20]
   1082e:	f016 f86f 	bl	26910 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   10832:	2107      	movs	r1, #7
		smp_error(smp, err);
   10834:	4620      	mov	r0, r4
   10836:	f016 fadb 	bl	26df0 <smp_error>
   1083a:	e7c5      	b.n	107c8 <bt_smp_recv+0x28>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1083c:	4620      	mov	r0, r4
   1083e:	f016 f8a3 	bl	26988 <atomic_test_and_clear_bit>
   10842:	7833      	ldrb	r3, [r6, #0]
   10844:	b988      	cbnz	r0, 1086a <bt_smp_recv+0xca>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   10846:	4a20      	ldr	r2, [pc, #128]	; (108c8 <bt_smp_recv+0x128>)
   10848:	481a      	ldr	r0, [pc, #104]	; (108b4 <bt_smp_recv+0x114>)
   1084a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1084e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10852:	2303      	movs	r3, #3
   10854:	f107 0214 	add.w	r2, r7, #20
   10858:	607b      	str	r3, [r7, #4]
   1085a:	617b      	str	r3, [r7, #20]
   1085c:	f016 f858 	bl	26910 <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   10860:	7833      	ldrb	r3, [r6, #0]
   10862:	2b05      	cmp	r3, #5
   10864:	d0b0      	beq.n	107c8 <bt_smp_recv+0x28>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10866:	2108      	movs	r1, #8
   10868:	e7e4      	b.n	10834 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   1086a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1086e:	89a9      	ldrh	r1, [r5, #12]
   10870:	7912      	ldrb	r2, [r2, #4]
   10872:	428a      	cmp	r2, r1
   10874:	d012      	beq.n	1089c <bt_smp_recv+0xfc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   10876:	466d      	mov	r5, sp
   10878:	b088      	sub	sp, #32
   1087a:	466a      	mov	r2, sp
   1087c:	4813      	ldr	r0, [pc, #76]	; (108cc <bt_smp_recv+0x12c>)
   1087e:	6193      	str	r3, [r2, #24]
   10880:	2304      	movs	r3, #4
   10882:	e9c2 0104 	strd	r0, r1, [r2, #16]
   10886:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1088a:	f842 3f0c 	str.w	r3, [r2, #12]!
   1088e:	4809      	ldr	r0, [pc, #36]	; (108b4 <bt_smp_recv+0x114>)
   10890:	60bb      	str	r3, [r7, #8]
   10892:	f016 f83d 	bl	26910 <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   10896:	210a      	movs	r1, #10
   10898:	46ad      	mov	sp, r5
   1089a:	e7cb      	b.n	10834 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   1089c:	4629      	mov	r1, r5
   1089e:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   108a2:	4620      	mov	r0, r4
   108a4:	4798      	blx	r3
	if (err) {
   108a6:	4601      	mov	r1, r0
   108a8:	2800      	cmp	r0, #0
   108aa:	d08d      	beq.n	107c8 <bt_smp_recv+0x28>
   108ac:	e7c2      	b.n	10834 <bt_smp_recv+0x94>
   108ae:	bf00      	nop
   108b0:	0002c3da 	.word	0x0002c3da
   108b4:	000289a8 	.word	0x000289a8
   108b8:	0002c3f5 	.word	0x0002c3f5
   108bc:	0002c426 	.word	0x0002c426
   108c0:	00029144 	.word	0x00029144
   108c4:	0002c448 	.word	0x0002c448
   108c8:	0002c462 	.word	0x0002c462
   108cc:	0002be65 	.word	0x0002be65

000108d0 <bt_smp_pkey_ready>:
{
   108d0:	b530      	push	{r4, r5, lr}
	sc_public_key = pkey;
   108d2:	4b1c      	ldr	r3, [pc, #112]	; (10944 <bt_smp_pkey_ready+0x74>)
{
   108d4:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
   108d6:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   108d8:	b960      	cbnz	r0, 108f4 <bt_smp_pkey_ready+0x24>
		BT_WARN("Public key not available");
   108da:	4b1b      	ldr	r3, [pc, #108]	; (10948 <bt_smp_pkey_ready+0x78>)
   108dc:	9306      	str	r3, [sp, #24]
   108de:	481b      	ldr	r0, [pc, #108]	; (1094c <bt_smp_pkey_ready+0x7c>)
   108e0:	2302      	movs	r3, #2
   108e2:	aa05      	add	r2, sp, #20
   108e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   108e8:	9301      	str	r3, [sp, #4]
   108ea:	9305      	str	r3, [sp, #20]
   108ec:	f016 f810 	bl	26910 <z_log_msg2_static_create.constprop.0>
}
   108f0:	b009      	add	sp, #36	; 0x24
   108f2:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   108f4:	4c16      	ldr	r4, [pc, #88]	; (10950 <bt_smp_pkey_ready+0x80>)
	z_impl_k_sem_give(sem);
   108f6:	4817      	ldr	r0, [pc, #92]	; (10954 <bt_smp_pkey_ready+0x84>)
   108f8:	f010 fe7e 	bl	215f8 <z_impl_k_sem_give>
   108fc:	f3bf 8f5b 	dmb	ish
   10900:	6863      	ldr	r3, [r4, #4]
   10902:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   10906:	f013 0f40 	tst.w	r3, #64	; 0x40
   1090a:	4625      	mov	r5, r4
   1090c:	d0f0      	beq.n	108f0 <bt_smp_pkey_ready+0x20>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1090e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10912:	78db      	ldrb	r3, [r3, #3]
   10914:	2b00      	cmp	r3, #0
   10916:	d1eb      	bne.n	108f0 <bt_smp_pkey_ready+0x20>
			err = sc_send_public_key(smp);
   10918:	4620      	mov	r0, r4
   1091a:	f7ff f8f1 	bl	fb00 <sc_send_public_key>
			if (err) {
   1091e:	4601      	mov	r1, r0
   10920:	b110      	cbz	r0, 10928 <bt_smp_pkey_ready+0x58>
				smp_error(smp, err);
   10922:	4620      	mov	r0, r4
   10924:	f016 fa64 	bl	26df0 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10928:	f3bf 8f5b 	dmb	ish
   1092c:	e855 3f00 	ldrex	r3, [r5]
   10930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   10934:	e845 3200 	strex	r2, r3, [r5]
   10938:	2a00      	cmp	r2, #0
   1093a:	d1f7      	bne.n	1092c <bt_smp_pkey_ready+0x5c>
   1093c:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   10940:	e7d6      	b.n	108f0 <bt_smp_pkey_ready+0x20>
   10942:	bf00      	nop
   10944:	200021a4 	.word	0x200021a4
   10948:	0002c47d 	.word	0x0002c47d
   1094c:	000289a8 	.word	0x000289a8
   10950:	20001690 	.word	0x20001690
   10954:	20000a04 	.word	0x20000a04

00010958 <smp_signing_info>:
{
   10958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1095c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   10960:	4605      	mov	r5, r0
   10962:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10964:	3004      	adds	r0, #4
   10966:	210d      	movs	r1, #13
   10968:	f015 ffe4 	bl	26934 <atomic_test_bit>
   1096c:	b300      	cbz	r0, 109b0 <smp_signing_info+0x58>
					&conn->le.dst);
   1096e:	f106 0788 	add.w	r7, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   10972:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   10974:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   10978:	463a      	mov	r2, r7
   1097a:	2010      	movs	r0, #16
   1097c:	f016 fb09 	bl	26f92 <bt_keys_get_type>
		if (!keys) {
   10980:	4604      	mov	r4, r0
   10982:	b980      	cbnz	r0, 109a6 <smp_signing_info+0x4e>
			BT_ERR("Unable to get keys for %s",
   10984:	4638      	mov	r0, r7
   10986:	f7f8 fa4b 	bl	8e20 <bt_addr_le_str_real>
   1098a:	4b16      	ldr	r3, [pc, #88]	; (109e4 <smp_signing_info+0x8c>)
   1098c:	9002      	str	r0, [sp, #8]
   1098e:	e9cd 4300 	strd	r4, r3, [sp]
   10992:	4620      	mov	r0, r4
   10994:	4914      	ldr	r1, [pc, #80]	; (109e8 <smp_signing_info+0x90>)
   10996:	4623      	mov	r3, r4
   10998:	2201      	movs	r2, #1
   1099a:	f015 ffbc 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1099e:	2008      	movs	r0, #8
}
   109a0:	b004      	add	sp, #16
   109a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   109a6:	2210      	movs	r2, #16
   109a8:	4641      	mov	r1, r8
   109aa:	3054      	adds	r0, #84	; 0x54
   109ac:	f013 fff7 	bl	2499e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   109b0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   109b4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   109b8:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   109bc:	78f2      	ldrb	r2, [r6, #3]
   109be:	4313      	orrs	r3, r2
   109c0:	d004      	beq.n	109cc <smp_signing_info+0x74>
	if (!smp->local_dist && !smp->remote_dist) {
   109c2:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   109c6:	b13c      	cbz	r4, 109d8 <smp_signing_info+0x80>
	return 0;
   109c8:	2000      	movs	r0, #0
   109ca:	e7e9      	b.n	109a0 <smp_signing_info+0x48>
		err = bt_smp_distribute_keys(smp);
   109cc:	4628      	mov	r0, r5
   109ce:	f7fe fe4d 	bl	f66c <bt_smp_distribute_keys>
		if (err) {
   109d2:	2800      	cmp	r0, #0
   109d4:	d0f5      	beq.n	109c2 <smp_signing_info+0x6a>
   109d6:	e7e3      	b.n	109a0 <smp_signing_info+0x48>
		smp_pairing_complete(smp, 0);
   109d8:	4628      	mov	r0, r5
   109da:	4621      	mov	r1, r4
   109dc:	f7ff fe82 	bl	106e4 <smp_pairing_complete>
	return 0;
   109e0:	4620      	mov	r0, r4
   109e2:	e7dd      	b.n	109a0 <smp_signing_info+0x48>
   109e4:	0002c183 	.word	0x0002c183
   109e8:	000289a8 	.word	0x000289a8

000109ec <smp_ident_addr_info>:
{
   109ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   109f0:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   109f2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   109f6:	783b      	ldrb	r3, [r7, #0]
{
   109f8:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   109fa:	f104 0888 	add.w	r8, r4, #136	; 0x88
   109fe:	b31b      	cbz	r3, 10a48 <smp_ident_addr_info+0x5c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   10a00:	79bb      	ldrb	r3, [r7, #6]
   10a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10a06:	2bc0      	cmp	r3, #192	; 0xc0
   10a08:	d01e      	beq.n	10a48 <smp_ident_addr_info+0x5c>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   10a0a:	4638      	mov	r0, r7
   10a0c:	f7f8 fa08 	bl	8e20 <bt_addr_le_str_real>
   10a10:	2400      	movs	r4, #0
   10a12:	4b4d      	ldr	r3, [pc, #308]	; (10b48 <smp_ident_addr_info+0x15c>)
   10a14:	494d      	ldr	r1, [pc, #308]	; (10b4c <smp_ident_addr_info+0x160>)
   10a16:	9002      	str	r0, [sp, #8]
   10a18:	2201      	movs	r2, #1
   10a1a:	9301      	str	r3, [sp, #4]
   10a1c:	4620      	mov	r0, r4
   10a1e:	4623      	mov	r3, r4
   10a20:	9400      	str	r4, [sp, #0]
   10a22:	f015 ff78 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   10a26:	4640      	mov	r0, r8
   10a28:	f7f8 f9fa 	bl	8e20 <bt_addr_le_str_real>
   10a2c:	4b48      	ldr	r3, [pc, #288]	; (10b50 <smp_ident_addr_info+0x164>)
   10a2e:	9002      	str	r0, [sp, #8]
   10a30:	e9cd 4300 	strd	r4, r3, [sp]
   10a34:	4620      	mov	r0, r4
   10a36:	4945      	ldr	r1, [pc, #276]	; (10b4c <smp_ident_addr_info+0x160>)
   10a38:	4623      	mov	r3, r4
   10a3a:	2201      	movs	r2, #1
   10a3c:	f015 ff6b 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   10a40:	200a      	movs	r0, #10
}
   10a42:	b004      	add	sp, #16
   10a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   10a48:	2207      	movs	r2, #7
   10a4a:	4639      	mov	r1, r7
   10a4c:	4640      	mov	r0, r8
   10a4e:	f013 ff95 	bl	2497c <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   10a52:	b168      	cbz	r0, 10a70 <smp_ident_addr_info+0x84>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   10a54:	7a20      	ldrb	r0, [r4, #8]
   10a56:	4639      	mov	r1, r7
   10a58:	f000 fad2 	bl	11000 <bt_keys_find_addr>
		if (keys) {
   10a5c:	4606      	mov	r6, r0
   10a5e:	b138      	cbz	r0, 10a70 <smp_ident_addr_info+0x84>
			if (!update_keys_check(smp, keys)) {
   10a60:	4601      	mov	r1, r0
   10a62:	4628      	mov	r0, r5
   10a64:	f015 ff6f 	bl	26946 <update_keys_check>
   10a68:	b1e0      	cbz	r0, 10aa4 <smp_ident_addr_info+0xb8>
			bt_keys_clear(keys);
   10a6a:	4630      	mov	r0, r6
   10a6c:	f016 faa5 	bl	26fba <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10a70:	210d      	movs	r1, #13
   10a72:	1d28      	adds	r0, r5, #4
   10a74:	f015 ff5e 	bl	26934 <atomic_test_bit>
   10a78:	2800      	cmp	r0, #0
   10a7a:	d040      	beq.n	10afe <smp_ident_addr_info+0x112>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   10a7c:	7a21      	ldrb	r1, [r4, #8]
   10a7e:	4642      	mov	r2, r8
   10a80:	2002      	movs	r0, #2
   10a82:	f016 fa86 	bl	26f92 <bt_keys_get_type>
		if (!keys) {
   10a86:	4606      	mov	r6, r0
   10a88:	b970      	cbnz	r0, 10aa8 <smp_ident_addr_info+0xbc>
			BT_ERR("Unable to get keys for %s",
   10a8a:	4640      	mov	r0, r8
   10a8c:	f7f8 f9c8 	bl	8e20 <bt_addr_le_str_real>
   10a90:	4b30      	ldr	r3, [pc, #192]	; (10b54 <smp_ident_addr_info+0x168>)
   10a92:	9002      	str	r0, [sp, #8]
   10a94:	e9cd 6300 	strd	r6, r3, [sp]
   10a98:	492c      	ldr	r1, [pc, #176]	; (10b4c <smp_ident_addr_info+0x160>)
   10a9a:	4633      	mov	r3, r6
   10a9c:	2201      	movs	r2, #1
   10a9e:	4630      	mov	r0, r6
   10aa0:	f015 ff39 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   10aa4:	2008      	movs	r0, #8
   10aa6:	e7cc      	b.n	10a42 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   10aa8:	78e3      	ldrb	r3, [r4, #3]
   10aaa:	bbdb      	cbnz	r3, 10b24 <smp_ident_addr_info+0x138>
			dst = &conn->le.resp_addr;
   10aac:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   10ab0:	780b      	ldrb	r3, [r1, #0]
   10ab2:	2b01      	cmp	r3, #1
   10ab4:	d120      	bne.n	10af8 <smp_ident_addr_info+0x10c>
		if (bt_addr_le_is_rpa(dst)) {
   10ab6:	798b      	ldrb	r3, [r1, #6]
   10ab8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10abc:	2b40      	cmp	r3, #64	; 0x40
   10abe:	d11b      	bne.n	10af8 <smp_ident_addr_info+0x10c>
	memcpy(dst, src, sizeof(*dst));
   10ac0:	2206      	movs	r2, #6
   10ac2:	3101      	adds	r1, #1
   10ac4:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   10ac8:	f013 ff69 	bl	2499e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   10acc:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   10ad0:	b193      	cbz	r3, 10af8 <smp_ident_addr_info+0x10c>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   10ad2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   10ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10ada:	2bc0      	cmp	r3, #192	; 0xc0
   10adc:	d00c      	beq.n	10af8 <smp_ident_addr_info+0x10c>
	memcpy(dst, src, sizeof(*dst));
   10ade:	2207      	movs	r2, #7
   10ae0:	4639      	mov	r1, r7
   10ae2:	1c70      	adds	r0, r6, #1
   10ae4:	f013 ff5b 	bl	2499e <memcpy>
   10ae8:	2207      	movs	r2, #7
   10aea:	4639      	mov	r1, r7
   10aec:	4640      	mov	r0, r8
   10aee:	f013 ff56 	bl	2499e <memcpy>
				bt_conn_identity_resolved(conn);
   10af2:	4620      	mov	r0, r4
   10af4:	f7fb fa58 	bl	bfa8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   10af8:	4630      	mov	r0, r6
   10afa:	f7fa f853 	bl	aba4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   10afe:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   10b02:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10b06:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   10b08:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10b0c:	d503      	bpl.n	10b16 <smp_ident_addr_info+0x12a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10b0e:	210a      	movs	r1, #10
   10b10:	4628      	mov	r0, r5
   10b12:	f015 ff51 	bl	269b8 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10b16:	78e3      	ldrb	r3, [r4, #3]
   10b18:	b13b      	cbz	r3, 10b2a <smp_ident_addr_info+0x13e>
	if (!smp->local_dist && !smp->remote_dist) {
   10b1a:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   10b1e:	b174      	cbz	r4, 10b3e <smp_ident_addr_info+0x152>
	return 0;
   10b20:	2000      	movs	r0, #0
   10b22:	e78e      	b.n	10a42 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   10b24:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   10b28:	e7c2      	b.n	10ab0 <smp_ident_addr_info+0xc4>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   10b2a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d1f3      	bne.n	10b1a <smp_ident_addr_info+0x12e>
		err = bt_smp_distribute_keys(smp);
   10b32:	4628      	mov	r0, r5
   10b34:	f7fe fd9a 	bl	f66c <bt_smp_distribute_keys>
		if (err) {
   10b38:	2800      	cmp	r0, #0
   10b3a:	d0ee      	beq.n	10b1a <smp_ident_addr_info+0x12e>
   10b3c:	e781      	b.n	10a42 <smp_ident_addr_info+0x56>
		smp_pairing_complete(smp, 0);
   10b3e:	4621      	mov	r1, r4
   10b40:	4628      	mov	r0, r5
   10b42:	f7ff fdcf 	bl	106e4 <smp_pairing_complete>
   10b46:	e7eb      	b.n	10b20 <smp_ident_addr_info+0x134>
   10b48:	0002c496 	.word	0x0002c496
   10b4c:	000289a8 	.word	0x000289a8
   10b50:	0002c36d 	.word	0x0002c36d
   10b54:	0002c183 	.word	0x0002c183

00010b58 <smp_central_ident>:
{
   10b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   10b5c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   10b60:	4604      	mov	r4, r0
   10b62:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10b64:	3004      	adds	r0, #4
   10b66:	210d      	movs	r1, #13
   10b68:	f015 fee4 	bl	26934 <atomic_test_bit>
   10b6c:	b328      	cbz	r0, 10bba <smp_central_ident+0x62>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   10b6e:	f106 0888 	add.w	r8, r6, #136	; 0x88
   10b72:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   10b74:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   10b76:	4642      	mov	r2, r8
   10b78:	2004      	movs	r0, #4
   10b7a:	f016 fa0a 	bl	26f92 <bt_keys_get_type>
		if (!keys) {
   10b7e:	4605      	mov	r5, r0
   10b80:	b980      	cbnz	r0, 10ba4 <smp_central_ident+0x4c>
			BT_ERR("Unable to get keys for %s",
   10b82:	4640      	mov	r0, r8
   10b84:	f7f8 f94c 	bl	8e20 <bt_addr_le_str_real>
   10b88:	4b1f      	ldr	r3, [pc, #124]	; (10c08 <smp_central_ident+0xb0>)
   10b8a:	9002      	str	r0, [sp, #8]
   10b8c:	e9cd 5300 	strd	r5, r3, [sp]
   10b90:	4628      	mov	r0, r5
   10b92:	491e      	ldr	r1, [pc, #120]	; (10c0c <smp_central_ident+0xb4>)
   10b94:	462b      	mov	r3, r5
   10b96:	2201      	movs	r2, #1
   10b98:	f015 febd 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   10b9c:	2008      	movs	r0, #8
}
   10b9e:	b004      	add	sp, #16
   10ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   10ba4:	2202      	movs	r2, #2
   10ba6:	4639      	mov	r1, r7
   10ba8:	3018      	adds	r0, #24
   10baa:	f013 fef8 	bl	2499e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   10bae:	2208      	movs	r2, #8
   10bb0:	1cb9      	adds	r1, r7, #2
   10bb2:	f105 0010 	add.w	r0, r5, #16
   10bb6:	f013 fef2 	bl	2499e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   10bba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   10bbe:	f023 0201 	bic.w	r2, r3, #1
   10bc2:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   10bc6:	079a      	lsls	r2, r3, #30
   10bc8:	d50a      	bpl.n	10be0 <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   10bca:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10bcc:	4620      	mov	r0, r4
   10bce:	f015 fef3 	bl	269b8 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10bd2:	78f3      	ldrb	r3, [r6, #3]
   10bd4:	b143      	cbz	r3, 10be8 <smp_central_ident+0x90>
	if (!smp->local_dist && !smp->remote_dist) {
   10bd6:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   10bda:	b17d      	cbz	r5, 10bfc <smp_central_ident+0xa4>
	return 0;
   10bdc:	2000      	movs	r0, #0
   10bde:	e7de      	b.n	10b9e <smp_central_ident+0x46>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10be0:	075b      	lsls	r3, r3, #29
   10be2:	d5f6      	bpl.n	10bd2 <smp_central_ident+0x7a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10be4:	210a      	movs	r1, #10
   10be6:	e7f1      	b.n	10bcc <smp_central_ident+0x74>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   10be8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   10bec:	2b00      	cmp	r3, #0
   10bee:	d1f2      	bne.n	10bd6 <smp_central_ident+0x7e>
		err = bt_smp_distribute_keys(smp);
   10bf0:	4620      	mov	r0, r4
   10bf2:	f7fe fd3b 	bl	f66c <bt_smp_distribute_keys>
		if (err) {
   10bf6:	2800      	cmp	r0, #0
   10bf8:	d0ed      	beq.n	10bd6 <smp_central_ident+0x7e>
   10bfa:	e7d0      	b.n	10b9e <smp_central_ident+0x46>
		smp_pairing_complete(smp, 0);
   10bfc:	4620      	mov	r0, r4
   10bfe:	4629      	mov	r1, r5
   10c00:	f7ff fd70 	bl	106e4 <smp_pairing_complete>
	return 0;
   10c04:	4628      	mov	r0, r5
   10c06:	e7ca      	b.n	10b9e <smp_central_ident+0x46>
   10c08:	0002c183 	.word	0x0002c183
   10c0c:	000289a8 	.word	0x000289a8

00010c10 <smp_pairing_failed>:
{
   10c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   10c12:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
   10c14:	4a16      	ldr	r2, [pc, #88]	; (10c70 <smp_pairing_failed+0x60>)
   10c16:	782b      	ldrb	r3, [r5, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
   10c18:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
{
   10c1c:	b089      	sub	sp, #36	; 0x24
   10c1e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   10c20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c24:	4813      	ldr	r0, [pc, #76]	; (10c74 <smp_pairing_failed+0x64>)
   10c26:	2303      	movs	r3, #3
   10c28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10c2c:	aa05      	add	r2, sp, #20
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   10c2e:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   10c30:	9301      	str	r3, [sp, #4]
   10c32:	9305      	str	r3, [sp, #20]
   10c34:	f015 fe6c 	bl	26910 <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   10c38:	210a      	movs	r1, #10
   10c3a:	4630      	mov	r0, r6
   10c3c:	f015 fea4 	bl	26988 <atomic_test_and_clear_bit>
   10c40:	b148      	cbz	r0, 10c56 <smp_pairing_failed+0x46>
		if (bt_auth && bt_auth->cancel) {
   10c42:	4b0d      	ldr	r3, [pc, #52]	; (10c78 <smp_pairing_failed+0x68>)
   10c44:	681b      	ldr	r3, [r3, #0]
   10c46:	b96b      	cbnz	r3, 10c64 <smp_pairing_failed+0x54>
	smp_pairing_complete(smp, req->reason);
   10c48:	4620      	mov	r0, r4
   10c4a:	7829      	ldrb	r1, [r5, #0]
   10c4c:	f7ff fd4a 	bl	106e4 <smp_pairing_complete>
}
   10c50:	2000      	movs	r0, #0
   10c52:	b009      	add	sp, #36	; 0x24
   10c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   10c56:	210b      	movs	r1, #11
   10c58:	4630      	mov	r0, r6
   10c5a:	f015 fe95 	bl	26988 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   10c5e:	2800      	cmp	r0, #0
   10c60:	d1ef      	bne.n	10c42 <smp_pairing_failed+0x32>
   10c62:	e7f1      	b.n	10c48 <smp_pairing_failed+0x38>
		if (bt_auth && bt_auth->cancel) {
   10c64:	691b      	ldr	r3, [r3, #16]
   10c66:	2b00      	cmp	r3, #0
   10c68:	d0ee      	beq.n	10c48 <smp_pairing_failed+0x38>
			bt_auth->cancel(conn);
   10c6a:	4638      	mov	r0, r7
   10c6c:	4798      	blx	r3
   10c6e:	e7eb      	b.n	10c48 <smp_pairing_failed+0x38>
   10c70:	0002c4aa 	.word	0x0002c4aa
   10c74:	000289a8 	.word	0x000289a8
   10c78:	200020e8 	.word	0x200020e8

00010c7c <bt_smp_encrypt_change>:
{
   10c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   10c80:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   10c82:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   10c86:	4604      	mov	r4, r0
   10c88:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   10c8a:	4630      	mov	r0, r6
   10c8c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   10c8e:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   10c92:	f015 fe79 	bl	26988 <atomic_test_and_clear_bit>
   10c96:	2800      	cmp	r0, #0
   10c98:	d05f      	beq.n	10d5a <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   10c9a:	b1cf      	cbz	r7, 10cd0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10c9c:	2103      	movs	r1, #3
   10c9e:	4630      	mov	r0, r6
   10ca0:	f015 fe48 	bl	26934 <atomic_test_bit>
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d058      	beq.n	10d5a <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   10ca8:	4638      	mov	r0, r7
   10caa:	f7f9 fb69 	bl	a380 <bt_security_err_get>
	switch (auth_err) {
   10cae:	3801      	subs	r0, #1
   10cb0:	b2c0      	uxtb	r0, r0
   10cb2:	2808      	cmp	r0, #8
   10cb4:	bf9a      	itte	ls
   10cb6:	4b2e      	ldrls	r3, [pc, #184]	; (10d70 <bt_smp_encrypt_change+0xf4>)
   10cb8:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   10cba:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   10cbc:	2102      	movs	r1, #2
   10cbe:	4630      	mov	r0, r6
   10cc0:	f015 fe7a 	bl	269b8 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   10cc4:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   10cc6:	4628      	mov	r0, r5
}
   10cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   10ccc:	f7ff bd0a 	b.w	106e4 <smp_pairing_complete>
	if (!conn->encrypt) {
   10cd0:	f898 300b 	ldrb.w	r3, [r8, #11]
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	d040      	beq.n	10d5a <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10cd8:	2103      	movs	r1, #3
   10cda:	4630      	mov	r0, r6
   10cdc:	f015 fe2a 	bl	26934 <atomic_test_bit>
   10ce0:	b920      	cbnz	r0, 10cec <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   10ce2:	4628      	mov	r0, r5
}
   10ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   10ce8:	f015 becd 	b.w	26a86 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10cec:	2105      	movs	r1, #5
   10cee:	4630      	mov	r0, r6
   10cf0:	f015 fe20 	bl	26934 <atomic_test_bit>
   10cf4:	b1b8      	cbz	r0, 10d26 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   10cf6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   10cfa:	071f      	lsls	r7, r3, #28
   10cfc:	d507      	bpl.n	10d0e <bt_smp_encrypt_change+0x92>
   10cfe:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   10d02:	0718      	lsls	r0, r3, #28
   10d04:	d503      	bpl.n	10d0e <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   10d06:	2111      	movs	r1, #17
   10d08:	4630      	mov	r0, r6
   10d0a:	f015 fe55 	bl	269b8 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   10d0e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   10d12:	f023 0308 	bic.w	r3, r3, #8
   10d16:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   10d1a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   10d1e:	f023 0308 	bic.w	r3, r3, #8
   10d22:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   10d26:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   10d2a:	07d9      	lsls	r1, r3, #31
   10d2c:	d517      	bpl.n	10d5e <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   10d2e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10d30:	4628      	mov	r0, r5
   10d32:	f015 fe41 	bl	269b8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   10d36:	2102      	movs	r1, #2
   10d38:	4630      	mov	r0, r6
   10d3a:	f015 fe3d 	bl	269b8 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d3e:	f898 3003 	ldrb.w	r3, [r8, #3]
   10d42:	b913      	cbnz	r3, 10d4a <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   10d44:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   10d48:	b93b      	cbnz	r3, 10d5a <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
   10d4a:	4628      	mov	r0, r5
   10d4c:	f7fe fc8e 	bl	f66c <bt_smp_distribute_keys>
   10d50:	b918      	cbnz	r0, 10d5a <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   10d52:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   10d56:	2900      	cmp	r1, #0
   10d58:	d0b5      	beq.n	10cc6 <bt_smp_encrypt_change+0x4a>
}
   10d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   10d5e:	079a      	lsls	r2, r3, #30
   10d60:	d501      	bpl.n	10d66 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   10d62:	2108      	movs	r1, #8
   10d64:	e7e4      	b.n	10d30 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10d66:	075b      	lsls	r3, r3, #29
   10d68:	d5e5      	bpl.n	10d36 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10d6a:	210a      	movs	r1, #10
   10d6c:	e7e0      	b.n	10d30 <bt_smp_encrypt_change+0xb4>
   10d6e:	bf00      	nop
   10d70:	0002c4d8 	.word	0x0002c4d8

00010d74 <smp_timeout>:
{
   10d74:	b510      	push	{r4, lr}
   10d76:	b088      	sub	sp, #32
	BT_ERR("SMP Timeout");
   10d78:	4b0c      	ldr	r3, [pc, #48]	; (10dac <smp_timeout+0x38>)
   10d7a:	9306      	str	r3, [sp, #24]
{
   10d7c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   10d7e:	2302      	movs	r3, #2
   10d80:	aa05      	add	r2, sp, #20
   10d82:	480b      	ldr	r0, [pc, #44]	; (10db0 <smp_timeout+0x3c>)
   10d84:	9301      	str	r3, [sp, #4]
   10d86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d8a:	9305      	str	r3, [sp, #20]
   10d8c:	f015 fdc0 	bl	26910 <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   10d90:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   10d94:	2108      	movs	r1, #8
   10d96:	f7ff fca5 	bl	106e4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10d9a:	2104      	movs	r1, #4
   10d9c:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
   10da0:	b008      	add	sp, #32
   10da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10da6:	f015 be07 	b.w	269b8 <atomic_set_bit>
   10daa:	bf00      	nop
   10dac:	0002c4b6 	.word	0x0002c4b6
   10db0:	000289a8 	.word	0x000289a8

00010db4 <bt_smp_update_keys>:
{
   10db4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10db8:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10dba:	f7fe fb1b 	bl	f3f4 <smp_chan_get>
	if (!smp) {
   10dbe:	4605      	mov	r5, r0
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d07b      	beq.n	10ebc <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10dc4:	1d07      	adds	r7, r0, #4
   10dc6:	2103      	movs	r1, #3
   10dc8:	4638      	mov	r0, r7
   10dca:	f015 fdb3 	bl	26934 <atomic_test_bit>
   10dce:	2800      	cmp	r0, #0
   10dd0:	d074      	beq.n	10ebc <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   10dd2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10dd6:	b108      	cbz	r0, 10ddc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   10dd8:	f016 f8ef 	bl	26fba <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   10ddc:	f104 0888 	add.w	r8, r4, #136	; 0x88
   10de0:	7a20      	ldrb	r0, [r4, #8]
   10de2:	4641      	mov	r1, r8
   10de4:	f000 f888 	bl	10ef8 <bt_keys_get_addr>
   10de8:	4606      	mov	r6, r0
   10dea:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   10dee:	b998      	cbnz	r0, 10e18 <bt_smp_update_keys+0x64>
		BT_ERR("Unable to get keys for %s",
   10df0:	4640      	mov	r0, r8
   10df2:	f7f8 f815 	bl	8e20 <bt_addr_le_str_real>
   10df6:	4b33      	ldr	r3, [pc, #204]	; (10ec4 <bt_smp_update_keys+0x110>)
   10df8:	9002      	str	r0, [sp, #8]
   10dfa:	e9cd 6300 	strd	r6, r3, [sp]
   10dfe:	4630      	mov	r0, r6
   10e00:	4931      	ldr	r1, [pc, #196]	; (10ec8 <bt_smp_update_keys+0x114>)
   10e02:	4633      	mov	r3, r6
   10e04:	2201      	movs	r2, #1
   10e06:	f015 fd86 	bl	26916 <z_log_msg2_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10e0a:	2108      	movs	r1, #8
   10e0c:	4628      	mov	r0, r5
}
   10e0e:	b004      	add	sp, #16
   10e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10e14:	f015 bfec 	b.w	26df0 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   10e18:	210e      	movs	r1, #14
   10e1a:	4638      	mov	r0, r7
   10e1c:	f015 fd8a 	bl	26934 <atomic_test_bit>
   10e20:	b128      	cbz	r0, 10e2e <bt_smp_update_keys+0x7a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10e22:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   10e26:	7b53      	ldrb	r3, [r2, #13]
   10e28:	f043 0302 	orr.w	r3, r3, #2
   10e2c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   10e2e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10e30:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   10e34:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10e36:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   10e38:	d837      	bhi.n	10eaa <bt_smp_update_keys+0xf6>
   10e3a:	b3ca      	cbz	r2, 10eb0 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10e3c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10e40:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   10e42:	7d2b      	ldrb	r3, [r5, #20]
   10e44:	7b6a      	ldrb	r2, [r5, #13]
   10e46:	4293      	cmp	r3, r2
   10e48:	bf28      	it	cs
   10e4a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   10e4c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10e4e:	4638      	mov	r0, r7
   10e50:	2105      	movs	r1, #5
   10e52:	f015 fd6f 	bl	26934 <atomic_test_bit>
   10e56:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   10e5a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10e5c:	b358      	cbz	r0, 10eb6 <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   10e5e:	f042 0210 	orr.w	r2, r2, #16
   10e62:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10e64:	210d      	movs	r1, #13
   10e66:	4638      	mov	r0, r7
   10e68:	f015 fd64 	bl	26934 <atomic_test_bit>
   10e6c:	b330      	cbz	r0, 10ebc <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   10e6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10e72:	2120      	movs	r1, #32
   10e74:	f016 f89d 	bl	26fb2 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   10e78:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10e7c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   10e80:	2210      	movs	r2, #16
   10e82:	301a      	adds	r0, #26
   10e84:	f013 fd8b 	bl	2499e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   10e88:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10e8c:	2208      	movs	r2, #8
   10e8e:	2100      	movs	r1, #0
   10e90:	3010      	adds	r0, #16
   10e92:	f013 fd8f 	bl	249b4 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10e96:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10e9a:	2202      	movs	r2, #2
   10e9c:	2100      	movs	r1, #0
   10e9e:	3018      	adds	r0, #24
}
   10ea0:	b004      	add	sp, #16
   10ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10ea6:	f013 bd85 	b.w	249b4 <memset>
	switch (smp->method) {
   10eaa:	3a05      	subs	r2, #5
   10eac:	2a01      	cmp	r2, #1
   10eae:	d9c5      	bls.n	10e3c <bt_smp_update_keys+0x88>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10eb0:	f023 0301 	bic.w	r3, r3, #1
   10eb4:	e7c4      	b.n	10e40 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   10eb6:	f022 0210 	bic.w	r2, r2, #16
   10eba:	735a      	strb	r2, [r3, #13]
}
   10ebc:	b004      	add	sp, #16
   10ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ec2:	bf00      	nop
   10ec4:	0002c183 	.word	0x0002c183
   10ec8:	000289a8 	.word	0x000289a8

00010ecc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   10ecc:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   10ece:	4b07      	ldr	r3, [pc, #28]	; (10eec <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   10ed0:	4807      	ldr	r0, [pc, #28]	; (10ef0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   10ed2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   10ed6:	f003 0306 	and.w	r3, r3, #6
   10eda:	1f9a      	subs	r2, r3, #6
   10edc:	4253      	negs	r3, r2
   10ede:	4153      	adcs	r3, r2
   10ee0:	4a04      	ldr	r2, [pc, #16]	; (10ef4 <bt_smp_init+0x28>)
   10ee2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   10ee4:	f7fa fb12 	bl	b50c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   10ee8:	2000      	movs	r0, #0
   10eea:	bd08      	pop	{r3, pc}
   10eec:	20000000 	.word	0x20000000
   10ef0:	20000334 	.word	0x20000334
   10ef4:	20003f3c 	.word	0x20003f3c

00010ef8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   10ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10efa:	4d11      	ldr	r5, [pc, #68]	; (10f40 <bt_keys_get_addr+0x48>)
   10efc:	782b      	ldrb	r3, [r5, #0]
   10efe:	4283      	cmp	r3, r0
{
   10f00:	4606      	mov	r6, r0
   10f02:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10f04:	d00b      	beq.n	10f1e <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10f06:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   10f08:	480e      	ldr	r0, [pc, #56]	; (10f44 <bt_keys_get_addr+0x4c>)
   10f0a:	9400      	str	r4, [sp, #0]
   10f0c:	2207      	movs	r2, #7
   10f0e:	4669      	mov	r1, sp
   10f10:	f8cd 4003 	str.w	r4, [sp, #3]
   10f14:	f013 fd32 	bl	2497c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10f18:	b150      	cbz	r0, 10f30 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   10f1a:	4620      	mov	r0, r4
   10f1c:	e006      	b.n	10f2c <bt_keys_get_addr+0x34>
   10f1e:	2207      	movs	r2, #7
   10f20:	1c68      	adds	r0, r5, #1
   10f22:	f013 fd2b 	bl	2497c <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10f26:	2800      	cmp	r0, #0
   10f28:	d1ed      	bne.n	10f06 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   10f2a:	4628      	mov	r0, r5
}
   10f2c:	b003      	add	sp, #12
   10f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   10f30:	4804      	ldr	r0, [pc, #16]	; (10f44 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   10f32:	702e      	strb	r6, [r5, #0]
   10f34:	2207      	movs	r2, #7
   10f36:	4639      	mov	r1, r7
   10f38:	f013 fd31 	bl	2499e <memcpy>
		return keys;
   10f3c:	4800      	ldr	r0, [pc, #0]	; (10f40 <bt_keys_get_addr+0x48>)
}
   10f3e:	e7f5      	b.n	10f2c <bt_keys_get_addr+0x34>
   10f40:	200021a8 	.word	0x200021a8
   10f44:	200021a9 	.word	0x200021a9

00010f48 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   10f48:	460b      	mov	r3, r1
   10f4a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10f4c:	4a04      	ldr	r2, [pc, #16]	; (10f60 <bt_keys_foreach+0x18>)
{
   10f4e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   10f50:	89d4      	ldrh	r4, [r2, #14]
   10f52:	4204      	tst	r4, r0
   10f54:	d002      	beq.n	10f5c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   10f56:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   10f58:	4610      	mov	r0, r2
   10f5a:	4718      	bx	r3
}
   10f5c:	bc10      	pop	{r4}
   10f5e:	4770      	bx	lr
   10f60:	200021a8 	.word	0x200021a8

00010f64 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   10f64:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10f66:	4c09      	ldr	r4, [pc, #36]	; (10f8c <bt_keys_find+0x28>)
{
   10f68:	460b      	mov	r3, r1
   10f6a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10f6c:	89e2      	ldrh	r2, [r4, #14]
   10f6e:	4202      	tst	r2, r0
   10f70:	d007      	beq.n	10f82 <bt_keys_find+0x1e>
   10f72:	7822      	ldrb	r2, [r4, #0]
   10f74:	429a      	cmp	r2, r3
   10f76:	d104      	bne.n	10f82 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   10f78:	2207      	movs	r2, #7
   10f7a:	1c60      	adds	r0, r4, #1
   10f7c:	f013 fcfe 	bl	2497c <memcmp>
   10f80:	b108      	cbz	r0, 10f86 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   10f82:	2000      	movs	r0, #0
}
   10f84:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10f86:	4620      	mov	r0, r4
   10f88:	e7fc      	b.n	10f84 <bt_keys_find+0x20>
   10f8a:	bf00      	nop
   10f8c:	200021a8 	.word	0x200021a8

00010f90 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   10f90:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   10f92:	780b      	ldrb	r3, [r1, #0]
   10f94:	2b01      	cmp	r3, #1
   10f96:	4606      	mov	r6, r0
   10f98:	460d      	mov	r5, r1
   10f9a:	d001      	beq.n	10fa0 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   10f9c:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   10f9e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   10fa0:	798b      	ldrb	r3, [r1, #6]
   10fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10fa6:	2b40      	cmp	r3, #64	; 0x40
   10fa8:	d1f8      	bne.n	10f9c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10faa:	4c12      	ldr	r4, [pc, #72]	; (10ff4 <bt_keys_find_irk+0x64>)
   10fac:	89e3      	ldrh	r3, [r4, #14]
   10fae:	079b      	lsls	r3, r3, #30
   10fb0:	d5f4      	bpl.n	10f9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   10fb2:	7823      	ldrb	r3, [r4, #0]
   10fb4:	42b3      	cmp	r3, r6
   10fb6:	d10b      	bne.n	10fd0 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   10fb8:	2206      	movs	r2, #6
   10fba:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   10fbe:	1c68      	adds	r0, r5, #1
   10fc0:	f013 fcdc 	bl	2497c <memcmp>
   10fc4:	b908      	cbnz	r0, 10fca <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   10fc6:	4620      	mov	r0, r4
   10fc8:	e7e9      	b.n	10f9e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10fca:	89e3      	ldrh	r3, [r4, #14]
   10fcc:	079a      	lsls	r2, r3, #30
   10fce:	d5e5      	bpl.n	10f9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   10fd0:	7823      	ldrb	r3, [r4, #0]
   10fd2:	42b3      	cmp	r3, r6
   10fd4:	d1e2      	bne.n	10f9c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   10fd6:	3501      	adds	r5, #1
   10fd8:	4807      	ldr	r0, [pc, #28]	; (10ff8 <bt_keys_find_irk+0x68>)
   10fda:	4629      	mov	r1, r5
   10fdc:	f013 fd31 	bl	24a42 <bt_rpa_irk_matches>
   10fe0:	2800      	cmp	r0, #0
   10fe2:	d0db      	beq.n	10f9c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   10fe4:	4805      	ldr	r0, [pc, #20]	; (10ffc <bt_keys_find_irk+0x6c>)
   10fe6:	2206      	movs	r2, #6
   10fe8:	4629      	mov	r1, r5
   10fea:	f013 fcd8 	bl	2499e <memcpy>
			return &key_pool[i];
   10fee:	4801      	ldr	r0, [pc, #4]	; (10ff4 <bt_keys_find_irk+0x64>)
}
   10ff0:	e7d5      	b.n	10f9e <bt_keys_find_irk+0xe>
   10ff2:	bf00      	nop
   10ff4:	200021a8 	.word	0x200021a8
   10ff8:	200021d2 	.word	0x200021d2
   10ffc:	200021e2 	.word	0x200021e2

00011000 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   11000:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   11002:	4c06      	ldr	r4, [pc, #24]	; (1101c <bt_keys_find_addr+0x1c>)
   11004:	7823      	ldrb	r3, [r4, #0]
   11006:	4283      	cmp	r3, r0
   11008:	d104      	bne.n	11014 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1100a:	2207      	movs	r2, #7
   1100c:	1c60      	adds	r0, r4, #1
   1100e:	f013 fcb5 	bl	2497c <memcmp>
   11012:	b108      	cbz	r0, 11018 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   11014:	2000      	movs	r0, #0
}
   11016:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   11018:	4620      	mov	r0, r4
   1101a:	e7fc      	b.n	11016 <bt_keys_find_addr+0x16>
   1101c:	200021a8 	.word	0x200021a8

00011020 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   11020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11024:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   11026:	1dc2      	adds	r2, r0, #7
   11028:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1102c:	1e75      	subs	r5, r6, #1
{
   1102e:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   11030:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   11032:	6018      	str	r0, [r3, #0]
{
   11034:	b082      	sub	sp, #8
   11036:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   11038:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1103a:	2100      	movs	r1, #0
   1103c:	2204      	movs	r2, #4
   1103e:	fb07 0005 	mla	r0, r7, r5, r0
   11042:	f013 fcb7 	bl	249b4 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   11046:	b1bd      	cbz	r5, 11078 <mem_init+0x58>
   11048:	3e02      	subs	r6, #2
   1104a:	b2b6      	uxth	r6, r6
   1104c:	fb06 7307 	mla	r3, r6, r7, r7
   11050:	fb06 f807 	mul.w	r8, r6, r7
   11054:	441c      	add	r4, r3
   11056:	eba8 0803 	sub.w	r8, r8, r3
   1105a:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1105c:	2204      	movs	r2, #4
   1105e:	eb04 0008 	add.w	r0, r4, r8
   11062:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   11066:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   11068:	f013 fc99 	bl	2499e <memcpy>
	while (mem_count--) {
   1106c:	42b5      	cmp	r5, r6
   1106e:	eba4 0407 	sub.w	r4, r4, r7
   11072:	f105 0501 	add.w	r5, r5, #1
   11076:	d1f1      	bne.n	1105c <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   11078:	b002      	add	sp, #8
   1107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1107e:	bf00      	nop

00011080 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   11080:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   11082:	6805      	ldr	r5, [r0, #0]
{
   11084:	b082      	sub	sp, #8
	if (*mem_head) {
   11086:	b195      	cbz	r5, 110ae <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   11088:	1deb      	adds	r3, r5, #7
   1108a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1108e:	2204      	movs	r2, #4
   11090:	4604      	mov	r4, r0
   11092:	4629      	mov	r1, r5
   11094:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   11098:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1109a:	f013 fc80 	bl	2499e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1109e:	9b01      	ldr	r3, [sp, #4]
   110a0:	b123      	cbz	r3, 110ac <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   110a2:	1dda      	adds	r2, r3, #7
   110a4:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   110a8:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   110aa:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   110ac:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   110ae:	4628      	mov	r0, r5
   110b0:	b002      	add	sp, #8
   110b2:	bd70      	pop	{r4, r5, r6, pc}

000110b4 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   110b4:	680b      	ldr	r3, [r1, #0]
{
   110b6:	b570      	push	{r4, r5, r6, lr}
   110b8:	460c      	mov	r4, r1
   110ba:	4605      	mov	r5, r0
	if (*mem_head) {
   110bc:	b183      	cbz	r3, 110e0 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   110be:	3307      	adds	r3, #7
   110c0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   110c4:	881e      	ldrh	r6, [r3, #0]
   110c6:	3601      	adds	r6, #1
   110c8:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   110ca:	2204      	movs	r2, #4
   110cc:	4621      	mov	r1, r4
   110ce:	4628      	mov	r0, r5
   110d0:	f013 fc65 	bl	2499e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   110d4:	1deb      	adds	r3, r5, #7
   110d6:	f023 0303 	bic.w	r3, r3, #3
   110da:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   110dc:	6025      	str	r5, [r4, #0]
}
   110de:	bd70      	pop	{r4, r5, r6, pc}
   110e0:	2601      	movs	r6, #1
   110e2:	e7f2      	b.n	110ca <mem_release+0x16>

000110e4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   110e4:	fb02 0001 	mla	r0, r2, r1, r0
   110e8:	4770      	bx	lr
   110ea:	bf00      	nop

000110ec <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   110ec:	1a40      	subs	r0, r0, r1
   110ee:	b280      	uxth	r0, r0
}
   110f0:	fbb0 f0f2 	udiv	r0, r0, r2
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop

000110f8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   110f8:	1e53      	subs	r3, r2, #1
	src += len;
   110fa:	4411      	add	r1, r2
	while (len--) {
   110fc:	b29b      	uxth	r3, r3
   110fe:	b142      	cbz	r2, 11112 <mem_rcopy+0x1a>
   11100:	43db      	mvns	r3, r3
   11102:	3801      	subs	r0, #1
   11104:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   11106:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1110a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   1110e:	4291      	cmp	r1, r2
   11110:	d1f9      	bne.n	11106 <mem_rcopy+0xe>
	}
}
   11112:	4770      	bx	lr

00011114 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   11114:	4401      	add	r1, r0
   11116:	e002      	b.n	1111e <mem_nz+0xa>
		if (*src++) {
   11118:	f810 3b01 	ldrb.w	r3, [r0], #1
   1111c:	b91b      	cbnz	r3, 11126 <mem_nz+0x12>
	while (len--) {
   1111e:	4288      	cmp	r0, r1
   11120:	d1fa      	bne.n	11118 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   11122:	2000      	movs	r0, #0
   11124:	4770      	bx	lr
			return 1;
   11126:	2001      	movs	r0, #1
}
   11128:	4770      	bx	lr
   1112a:	bf00      	nop

0001112c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1112c:	6010      	str	r0, [r2, #0]
   1112e:	6008      	str	r0, [r1, #0]

	return link;
}
   11130:	4770      	bx	lr
   11132:	bf00      	nop

00011134 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   11134:	680a      	ldr	r2, [r1, #0]
{
   11136:	4603      	mov	r3, r0
	if (*head != *tail) {
   11138:	6800      	ldr	r0, [r0, #0]
   1113a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1113c:	bf05      	ittet	eq
   1113e:	2200      	moveq	r2, #0
   11140:	600a      	streq	r2, [r1, #0]
		return NULL;
   11142:	2000      	movne	r0, #0
	*head = *tail = NULL;
   11144:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   11146:	4770      	bx	lr

00011148 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   11148:	f8d2 c000 	ldr.w	ip, [r2]
   1114c:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   11150:	f8d2 c000 	ldr.w	ip, [r2]
   11154:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   11158:	6010      	str	r0, [r2, #0]

	return link;
}
   1115a:	4770      	bx	lr

0001115c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1115c:	4288      	cmp	r0, r1
   1115e:	d003      	beq.n	11168 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   11160:	b11a      	cbz	r2, 1116a <memq_peek+0xe>
		*mem = head->mem;
   11162:	6843      	ldr	r3, [r0, #4]
   11164:	6013      	str	r3, [r2, #0]
   11166:	4770      	bx	lr
		return NULL;
   11168:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1116a:	4770      	bx	lr

0001116c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1116c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1116e:	4283      	cmp	r3, r0
   11170:	d009      	beq.n	11186 <memq_dequeue+0x1a>
	if (mem) {
   11172:	b12a      	cbz	r2, 11180 <memq_dequeue+0x14>
		*mem = head->mem;
   11174:	6858      	ldr	r0, [r3, #4]
   11176:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   11178:	681a      	ldr	r2, [r3, #0]
   1117a:	600a      	str	r2, [r1, #0]

	return old_head;
}
   1117c:	4618      	mov	r0, r3
   1117e:	4770      	bx	lr
	if (old_head == NULL) {
   11180:	2b00      	cmp	r3, #0
   11182:	d1f9      	bne.n	11178 <memq_dequeue+0xc>
   11184:	e7fa      	b.n	1117c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   11186:	2300      	movs	r3, #0
   11188:	e7f8      	b.n	1117c <memq_dequeue+0x10>
   1118a:	bf00      	nop

0001118c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   1118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11190:	f8df 8030 	ldr.w	r8, [pc, #48]	; 111c4 <mayfly_init+0x38>
   11194:	4e0c      	ldr	r6, [pc, #48]	; (111c8 <mayfly_init+0x3c>)
   11196:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   11198:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   1119c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   1119e:	1d22      	adds	r2, r4, #4
   111a0:	4621      	mov	r1, r4
   111a2:	4628      	mov	r0, r5
		while (caller_id--) {
   111a4:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   111a6:	f7ff ffc1 	bl	1112c <memq_init>
		while (caller_id--) {
   111aa:	42b4      	cmp	r4, r6
   111ac:	f1a5 0508 	sub.w	r5, r5, #8
   111b0:	d1f5      	bne.n	1119e <mayfly_init+0x12>
	while (callee_id--) {
   111b2:	3f04      	subs	r7, #4
   111b4:	1d3b      	adds	r3, r7, #4
   111b6:	f1a8 0820 	sub.w	r8, r8, #32
   111ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   111be:	d1eb      	bne.n	11198 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   111c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111c4:	200022a4 	.word	0x200022a4
   111c8:	20002334 	.word	0x20002334

000111cc <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   111cc:	b410      	push	{r4}
   111ce:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   111d0:	4c15      	ldr	r4, [pc, #84]	; (11228 <mayfly_enable+0x5c>)
{
   111d2:	468c      	mov	ip, r1
	if (enable) {
   111d4:	b192      	cbz	r2, 111fc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   111d6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   111da:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   111de:	0100      	lsls	r0, r0, #4
   111e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   111e4:	4421      	add	r1, r4
   111e6:	7a48      	ldrb	r0, [r1, #9]
   111e8:	7a0c      	ldrb	r4, [r1, #8]
   111ea:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   111ec:	bf04      	itt	eq
   111ee:	3001      	addeq	r0, #1
   111f0:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   111f2:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   111f4:	4661      	mov	r1, ip
   111f6:	4618      	mov	r0, r3
   111f8:	f00b bbda 	b.w	1c9b0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   111fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   11200:	0112      	lsls	r2, r2, #4
   11202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   11206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1120a:	4423      	add	r3, r4
   1120c:	7a9c      	ldrb	r4, [r3, #10]
   1120e:	7ada      	ldrb	r2, [r3, #11]
   11210:	42a2      	cmp	r2, r4
   11212:	d001      	beq.n	11218 <mayfly_enable+0x4c>
}
   11214:	bc10      	pop	{r4}
   11216:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   11218:	3201      	adds	r2, #1
   1121a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   1121c:	4b03      	ldr	r3, [pc, #12]	; (1122c <mayfly_enable+0x60>)
   1121e:	2201      	movs	r2, #1
   11220:	545a      	strb	r2, [r3, r1]
}
   11222:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   11224:	f00b bc1a 	b.w	1ca5c <mayfly_pend>
   11228:	200022b0 	.word	0x200022b0
   1122c:	200022ac 	.word	0x200022ac

00011230 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   11230:	b570      	push	{r4, r5, r6, lr}
   11232:	b082      	sub	sp, #8
   11234:	4606      	mov	r6, r0
   11236:	9301      	str	r3, [sp, #4]
   11238:	460d      	mov	r5, r1
   1123a:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1123c:	b32a      	cbz	r2, 1128a <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1123e:	7823      	ldrb	r3, [r4, #0]
	ack = m->_ack;
   11240:	7861      	ldrb	r1, [r4, #1]
	state = (m->_req - ack) & 0x03;
   11242:	1a5b      	subs	r3, r3, r1
	if (state != 0U) {
   11244:	f013 0303 	ands.w	r3, r3, #3
   11248:	d005      	beq.n	11256 <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   1124a:	2b01      	cmp	r3, #1
   1124c:	d042      	beq.n	112d4 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1124e:	3101      	adds	r1, #1
   11250:	b2c9      	uxtb	r1, r1
   11252:	7021      	strb	r1, [r4, #0]

				goto mayfly_enqueue_pend;
   11254:	e00f      	b.n	11276 <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   11256:	3101      	adds	r1, #1
   11258:	b2c9      	uxtb	r1, r1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1125a:	2330      	movs	r3, #48	; 0x30
	m->_req = ack + 1;
   1125c:	7021      	strb	r1, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1125e:	2104      	movs	r1, #4
   11260:	fb13 1105 	smlabb	r1, r3, r5, r1
   11264:	4a1c      	ldr	r2, [pc, #112]	; (112d8 <mayfly_enqueue+0xa8>)
   11266:	6860      	ldr	r0, [r4, #4]
   11268:	230c      	movs	r3, #12
   1126a:	fb13 1306 	smlabb	r3, r3, r6, r1
   1126e:	441a      	add	r2, r3
   11270:	4621      	mov	r1, r4
   11272:	f7ff ff69 	bl	11148 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   11276:	4b19      	ldr	r3, [pc, #100]	; (112dc <mayfly_enqueue+0xac>)
   11278:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1127a:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   1127c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1127e:	4629      	mov	r1, r5
   11280:	f00b fbec 	bl	1ca5c <mayfly_pend>

	return 0;
   11284:	2000      	movs	r0, #0
}
   11286:	b002      	add	sp, #8
   11288:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1128a:	f00b fbd1 	bl	1ca30 <mayfly_prio_is_equal>
   1128e:	2800      	cmp	r0, #0
   11290:	d0d5      	beq.n	1123e <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   11292:	4629      	mov	r1, r5
   11294:	4630      	mov	r0, r6
   11296:	f00b fbab 	bl	1c9f0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1129a:	2800      	cmp	r0, #0
   1129c:	d0cf      	beq.n	1123e <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   1129e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   112a2:	0112      	lsls	r2, r2, #4
   112a4:	490c      	ldr	r1, [pc, #48]	; (112d8 <mayfly_enqueue+0xa8>)
   112a6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   112aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   112ae:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   112b0:	7a9a      	ldrb	r2, [r3, #10]
   112b2:	7adb      	ldrb	r3, [r3, #11]
   112b4:	429a      	cmp	r2, r3
   112b6:	d1c2      	bne.n	1123e <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   112b8:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   112ba:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   112bc:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   112be:	0792      	lsls	r2, r2, #30
   112c0:	d002      	beq.n	112c8 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   112c2:	3302      	adds	r3, #2
   112c4:	b2db      	uxtb	r3, r3
   112c6:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   112c8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   112cc:	4798      	blx	r3
		return 0;
   112ce:	2000      	movs	r0, #0
}
   112d0:	b002      	add	sp, #8
   112d2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   112d4:	4618      	mov	r0, r3
   112d6:	e7d6      	b.n	11286 <mayfly_enqueue+0x56>
   112d8:	200022b0 	.word	0x200022b0
   112dc:	200022ac 	.word	0x200022ac

000112e0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   112e0:	4a50      	ldr	r2, [pc, #320]	; (11424 <mayfly_run+0x144>)
   112e2:	5c13      	ldrb	r3, [r2, r0]
   112e4:	2b00      	cmp	r3, #0
   112e6:	f000 809b 	beq.w	11420 <mayfly_run+0x140>
{
   112ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   112ee:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   112f0:	4f4d      	ldr	r7, [pc, #308]	; (11428 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   112f2:	5413      	strb	r3, [r2, r0]
{
   112f4:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   112f6:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   112f8:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   112fc:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   11300:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   11304:	9303      	str	r3, [sp, #12]
   11306:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1130a:	f10b 0804 	add.w	r8, fp, #4
   1130e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   11312:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   11316:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   11318:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1131c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   1131e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   11320:	f7ff ff1c 	bl	1115c <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   11324:	f107 0624 	add.w	r6, r7, #36	; 0x24
   11328:	4683      	mov	fp, r0
   1132a:	2800      	cmp	r0, #0
   1132c:	d034      	beq.n	11398 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   1132e:	9c05      	ldr	r4, [sp, #20]
   11330:	7863      	ldrb	r3, [r4, #1]
   11332:	7825      	ldrb	r5, [r4, #0]
   11334:	1aed      	subs	r5, r5, r3
   11336:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1133a:	2d01      	cmp	r5, #1
   1133c:	d106      	bne.n	1134c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   1133e:	3b01      	subs	r3, #1
   11340:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   11342:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   11346:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   11348:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1134a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   1134c:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   1134e:	1ac3      	subs	r3, r0, r3
   11350:	f003 0303 	and.w	r3, r3, #3
   11354:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   11356:	f04f 0200 	mov.w	r2, #0
   1135a:	4631      	mov	r1, r6
	req = m->_req;
   1135c:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   11360:	d00f      	beq.n	11382 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   11362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11364:	f7ff ff02 	bl	1116c <memq_dequeue>
		ack = m->_ack;
   11368:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1136c:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   1136e:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   11372:	eba3 030c 	sub.w	r3, r3, ip
   11376:	f003 0303 	and.w	r3, r3, #3
   1137a:	2b01      	cmp	r3, #1
		m->_ack = req;
   1137c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   11380:	d046      	beq.n	11410 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   11382:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   11386:	aa05      	add	r2, sp, #20
   11388:	f7ff fee8 	bl	1115c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1138c:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1138e:	9000      	str	r0, [sp, #0]
   11390:	4683      	mov	fp, r0
			if (state == 1U) {
   11392:	d02b      	beq.n	113ec <mayfly_run+0x10c>
		while (link) {
   11394:	2800      	cmp	r0, #0
   11396:	d1ca      	bne.n	1132e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   11398:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1139c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   113a0:	429a      	cmp	r2, r3
   113a2:	d003      	beq.n	113ac <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   113a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   113a8:	2301      	movs	r3, #1
   113aa:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   113ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   113b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   113b4:	429a      	cmp	r2, r3
   113b6:	d003      	beq.n	113c0 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   113b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   113bc:	2301      	movs	r3, #1
   113be:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   113c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   113c4:	fa5f f989 	uxtb.w	r9, r9
   113c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   113cc:	f1a7 070c 	sub.w	r7, r7, #12
   113d0:	d1a1      	bne.n	11316 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   113d2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   113d6:	b1c3      	cbz	r3, 1140a <mayfly_run+0x12a>
   113d8:	9b03      	ldr	r3, [sp, #12]
   113da:	b9b3      	cbnz	r3, 1140a <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   113dc:	461a      	mov	r2, r3
   113de:	4651      	mov	r1, sl
   113e0:	4650      	mov	r0, sl
	}
}
   113e2:	b007      	add	sp, #28
   113e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   113e8:	f00b bae2 	b.w	1c9b0 <mayfly_enable_cb>
				if (caller_id || link) {
   113ec:	f1b9 0f00 	cmp.w	r9, #0
   113f0:	d101      	bne.n	113f6 <mayfly_run+0x116>
   113f2:	2800      	cmp	r0, #0
   113f4:	d0d0      	beq.n	11398 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   113f6:	f8dd a008 	ldr.w	sl, [sp, #8]
   113fa:	4a0a      	ldr	r2, [pc, #40]	; (11424 <mayfly_run+0x144>)
   113fc:	2301      	movs	r3, #1
   113fe:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   11402:	4651      	mov	r1, sl
   11404:	4650      	mov	r0, sl
   11406:	f00b fb29 	bl	1ca5c <mayfly_pend>
}
   1140a:	b007      	add	sp, #28
   1140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   11410:	4642      	mov	r2, r8
   11412:	4621      	mov	r1, r4
   11414:	4658      	mov	r0, fp
			m->_ack = ack;
   11416:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1141a:	f7ff fe95 	bl	11148 <memq_enqueue>
   1141e:	e7b0      	b.n	11382 <mayfly_run+0xa2>
   11420:	4770      	bx	lr
   11422:	bf00      	nop
   11424:	200022ac 	.word	0x200022ac
   11428:	200022b0 	.word	0x200022b0

0001142c <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   1142c:	1e4b      	subs	r3, r1, #1
   1142e:	b2db      	uxtb	r3, r3
   11430:	b171      	cbz	r1, 11450 <util_ones_count_get+0x24>
   11432:	1e41      	subs	r1, r0, #1
   11434:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   11438:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1143a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1143e:	b123      	cbz	r3, 1144a <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   11440:	1e5a      	subs	r2, r3, #1
			one_count++;
   11442:	3001      	adds	r0, #1
		while (bite) {
   11444:	4013      	ands	r3, r2
			one_count++;
   11446:	b2c0      	uxtb	r0, r0
		while (bite) {
   11448:	d1fa      	bne.n	11440 <util_ones_count_get+0x14>
	while (octets_len--) {
   1144a:	4561      	cmp	r1, ip
   1144c:	d1f5      	bne.n	1143a <util_ones_count_get+0xe>
   1144e:	4770      	bx	lr
	uint8_t one_count = 0U;
   11450:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   11452:	4770      	bx	lr

00011454 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   11454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   11458:	4d49      	ldr	r5, [pc, #292]	; (11580 <util_aa_le32+0x12c>)
{
   1145a:	b083      	sub	sp, #12
   1145c:	4607      	mov	r7, r0
   1145e:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   11460:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   11462:	2104      	movs	r1, #4
   11464:	4638      	mov	r0, r7
   11466:	f009 f975 	bl	1a754 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1146a:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   1146c:	231e      	movs	r3, #30
   1146e:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   11472:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   11476:	f04f 0901 	mov.w	r9, #1
   1147a:	e00c      	b.n	11496 <util_aa_le32+0x42>
			transitions++;
   1147c:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   11480:	2b1b      	cmp	r3, #27
			transitions++;
   11482:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   11484:	d968      	bls.n	11558 <util_aa_le32+0x104>
				consecutive_cnt = 1U;
   11486:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   1148a:	2919      	cmp	r1, #25
   1148c:	d04f      	beq.n	1152e <util_aa_le32+0xda>
   1148e:	468e      	mov	lr, r1
   11490:	4694      	mov	ip, r2
	while (bit_idx--) {
   11492:	3b01      	subs	r3, #1
   11494:	d31e      	bcc.n	114d4 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   11496:	fa20 f203 	lsr.w	r2, r0, r3
   1149a:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   1149e:	4594      	cmp	ip, r2
   114a0:	d1ec      	bne.n	1147c <util_aa_le32+0x28>
			consecutive_cnt++;
   114a2:	f109 0801 	add.w	r8, r9, #1
   114a6:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   114aa:	f1b8 0f06 	cmp.w	r8, #6
   114ae:	d90d      	bls.n	114cc <util_aa_le32+0x78>
   114b0:	4671      	mov	r1, lr
			if (consecutive_bit) {
   114b2:	b3b2      	cbz	r2, 11522 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   114b4:	fa04 f203 	lsl.w	r2, r4, r3
   114b8:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   114bc:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   114c0:	4571      	cmp	r1, lr
   114c2:	d1e6      	bne.n	11492 <util_aa_le32+0x3e>
				transitions++;
   114c4:	3101      	adds	r1, #1
   114c6:	b2c9      	uxtb	r1, r1
   114c8:	4662      	mov	r2, ip
   114ca:	e7dc      	b.n	11486 <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   114cc:	d14a      	bne.n	11564 <util_aa_le32+0x110>
		     (((bit_idx < 29) && (transitions < 1)) ||
   114ce:	46c1      	mov	r9, r8
	while (bit_idx--) {
   114d0:	3b01      	subs	r3, #1
   114d2:	d2e0      	bcs.n	11496 <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   114d4:	ea80 0305 	eor.w	r3, r0, r5
   114d8:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   114da:	f10d 0c04 	add.w	ip, sp, #4
   114de:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   114e2:	2200      	movs	r2, #0
		bite = *octets;
   114e4:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   114e8:	b123      	cbz	r3, 114f4 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   114ea:	1e59      	subs	r1, r3, #1
			one_count++;
   114ec:	3201      	adds	r2, #1
		while (bite) {
   114ee:	400b      	ands	r3, r1
			one_count++;
   114f0:	b2d2      	uxtb	r2, r2
		while (bite) {
   114f2:	d1fa      	bne.n	114ea <util_aa_le32+0x96>
	while (octets_len--) {
   114f4:	45e6      	cmp	lr, ip
   114f6:	d1f5      	bne.n	114e4 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   114f8:	2a01      	cmp	r2, #1
   114fa:	d909      	bls.n	11510 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   114fc:	b283      	uxth	r3, r0
   114fe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   11502:	ea4f 4210 	mov.w	r2, r0, lsr #16
   11506:	d11c      	bne.n	11542 <util_aa_le32+0xee>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   11508:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   1150a:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   1150e:	d118      	bne.n	11542 <util_aa_le32+0xee>
	if (!retry) {
   11510:	3e01      	subs	r6, #1
   11512:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11516:	d1a4      	bne.n	11462 <util_aa_le32+0xe>
		return -EFAULT;
   11518:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   1151c:	b003      	add	sp, #12
   1151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   11522:	fa04 f203 	lsl.w	r2, r4, r3
   11526:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   11528:	f04f 0c01 	mov.w	ip, #1
   1152c:	e7c8      	b.n	114c0 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   1152e:	3301      	adds	r3, #1
   11530:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   11534:	b112      	cbz	r2, 1153c <util_aa_le32+0xe8>
				aa &= ~(BIT(bit_idx + 1) - 1);
   11536:	425b      	negs	r3, r3
   11538:	4018      	ands	r0, r3
   1153a:	e7cb      	b.n	114d4 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   1153c:	3b01      	subs	r3, #1
   1153e:	4318      	orrs	r0, r3
   11540:	e7c8      	b.n	114d4 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   11542:	f3c0 2107 	ubfx	r1, r0, #8, #8
   11546:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   11548:	7038      	strb	r0, [r7, #0]
	return 0;
   1154a:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   1154c:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   1154e:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   11550:	70fb      	strb	r3, [r7, #3]
}
   11552:	b003      	add	sp, #12
   11554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   11558:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   1155c:	2901      	cmp	r1, #1
   1155e:	d9a8      	bls.n	114b2 <util_aa_le32+0x5e>
   11560:	46c1      	mov	r9, r8
   11562:	e792      	b.n	1148a <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   11564:	2b1c      	cmp	r3, #28
   11566:	d904      	bls.n	11572 <util_aa_le32+0x11e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   11568:	2b1b      	cmp	r3, #27
   1156a:	d907      	bls.n	1157c <util_aa_le32+0x128>
   1156c:	4694      	mov	ip, r2
   1156e:	46c1      	mov	r9, r8
   11570:	e7ae      	b.n	114d0 <util_aa_le32+0x7c>
   11572:	f1be 0f00 	cmp.w	lr, #0
   11576:	d1f7      	bne.n	11568 <util_aa_le32+0x114>
   11578:	4671      	mov	r1, lr
   1157a:	e79a      	b.n	114b2 <util_aa_le32+0x5e>
   1157c:	4671      	mov	r1, lr
   1157e:	e7ed      	b.n	1155c <util_aa_le32+0x108>
   11580:	8e89bed6 	.word	0x8e89bed6

00011584 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   11584:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   11586:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   11588:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1158a:	2bff      	cmp	r3, #255	; 0xff
   1158c:	d014      	beq.n	115b8 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1158e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   11592:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   11594:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   11598:	d028      	beq.n	115ec <ticker_dequeue+0x68>
	total = 0U;
   1159a:	f04f 0c00 	mov.w	ip, #0
   1159e:	e001      	b.n	115a4 <ticker_dequeue+0x20>
		if (current == id) {
   115a0:	4299      	cmp	r1, r3
   115a2:	d00b      	beq.n	115bc <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   115a4:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   115a6:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   115a8:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   115aa:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   115ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   115b0:	44a4      	add	ip, r4
		ticker_current = &node[current];
   115b2:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   115b6:	d1f3      	bne.n	115a0 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   115b8:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   115ba:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   115bc:	4571      	cmp	r1, lr
   115be:	d018      	beq.n	115f2 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   115c0:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   115c2:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   115c4:	fa0f fe8e 	sxth.w	lr, lr
   115c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   115cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   115d0:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   115d4:	7813      	ldrb	r3, [r2, #0]
   115d6:	2bff      	cmp	r3, #255	; 0xff
   115d8:	d006      	beq.n	115e8 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   115da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   115de:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   115e2:	68ab      	ldr	r3, [r5, #8]
   115e4:	4403      	add	r3, r0
   115e6:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   115e8:	4460      	add	r0, ip
}
   115ea:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   115ec:	469e      	mov	lr, r3
	total = 0U;
   115ee:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   115f2:	7813      	ldrb	r3, [r2, #0]
   115f4:	7743      	strb	r3, [r0, #29]
   115f6:	e7e4      	b.n	115c2 <ticker_dequeue+0x3e>

000115f8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   115f8:	eba2 0c01 	sub.w	ip, r2, r1
   115fc:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   11600:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   11602:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   11604:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11606:	d10a      	bne.n	1161e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11608:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1160c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1160e:	42a3      	cmp	r3, r4
   11610:	d914      	bls.n	1163c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   11612:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   11614:	2100      	movs	r1, #0
}
   11616:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   11618:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1161a:	6141      	str	r1, [r0, #20]
}
   1161c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1161e:	1a89      	subs	r1, r1, r2
   11620:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   11624:	428b      	cmp	r3, r1
   11626:	d806      	bhi.n	11636 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   11628:	4421      	add	r1, r4
   1162a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   1162c:	2300      	movs	r3, #0
}
   1162e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   11630:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11632:	6141      	str	r1, [r0, #20]
}
   11634:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   11636:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   11638:	42a3      	cmp	r3, r4
   1163a:	d8ea      	bhi.n	11612 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1163c:	1ae1      	subs	r1, r4, r3
   1163e:	e7f5      	b.n	1162c <ticks_to_expire_prep+0x34>

00011640 <ticker_job_list_insert>:
{
   11640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11644:	b087      	sub	sp, #28
   11646:	4603      	mov	r3, r0
	count_user = instance->count_user;
   11648:	7a42      	ldrb	r2, [r0, #9]
{
   1164a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   1164c:	6800      	ldr	r0, [r0, #0]
   1164e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   11650:	6858      	ldr	r0, [r3, #4]
   11652:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   11654:	2a00      	cmp	r2, #0
   11656:	f000 80f6 	beq.w	11846 <ticker_job_list_insert+0x206>
   1165a:	1e53      	subs	r3, r2, #1
   1165c:	b2db      	uxtb	r3, r3
   1165e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   11662:	460f      	mov	r7, r1
   11664:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   11666:	9b03      	ldr	r3, [sp, #12]
   11668:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1166a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   1166c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1166e:	2fff      	cmp	r7, #255	; 0xff
   11670:	d05e      	beq.n	11730 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   11672:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   11676:	9b02      	ldr	r3, [sp, #8]
   11678:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   1167c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1167e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   11682:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   11686:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   11688:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   1168a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1168e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   11692:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   11696:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   11698:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1169c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1169e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   116a2:	d10f      	bne.n	116c4 <ticker_job_list_insert+0x84>
   116a4:	e0ca      	b.n	1183c <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   116a6:	1a09      	subs	r1, r1, r0
   116a8:	d106      	bne.n	116b8 <ticker_job_list_insert+0x78>
   116aa:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   116ae:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   116b2:	45e2      	cmp	sl, ip
   116b4:	f200 8086 	bhi.w	117c4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   116b8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   116bc:	2bff      	cmp	r3, #255	; 0xff
   116be:	4691      	mov	r9, r2
   116c0:	d072      	beq.n	117a8 <ticker_job_list_insert+0x168>
   116c2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   116c4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   116c8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   116cc:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   116ce:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   116d2:	4288      	cmp	r0, r1
   116d4:	d9e7      	bls.n	116a6 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   116d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   116da:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   116de:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   116e2:	d166      	bne.n	117b2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   116e4:	9b01      	ldr	r3, [sp, #4]
   116e6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   116ea:	2aff      	cmp	r2, #255	; 0xff
   116ec:	d008      	beq.n	11700 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   116ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   116f2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   116f6:	f8de 3008 	ldr.w	r3, [lr, #8]
   116fa:	1a5b      	subs	r3, r3, r1
   116fc:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   11700:	78a3      	ldrb	r3, [r4, #2]
   11702:	3301      	adds	r3, #1
   11704:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   11706:	2d00      	cmp	r5, #0
   11708:	d0b1      	beq.n	1166e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1170a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1170e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11710:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   11712:	2200      	movs	r2, #0
   11714:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   11716:	b113      	cbz	r3, 1171e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11718:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1171a:	4610      	mov	r0, r2
   1171c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1171e:	6863      	ldr	r3, [r4, #4]
   11720:	2b00      	cmp	r3, #0
   11722:	d1a4      	bne.n	1166e <ticker_job_list_insert+0x2e>
					ticker->op_context =
   11724:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   11728:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   1172a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1172e:	d1a0      	bne.n	11672 <ticker_job_list_insert+0x32>
   11730:	9b03      	ldr	r3, [sp, #12]
   11732:	7898      	ldrb	r0, [r3, #2]
   11734:	42b0      	cmp	r0, r6
   11736:	d02f      	beq.n	11798 <ticker_job_list_insert+0x158>
   11738:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   1173c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   11740:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   11744:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11748:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   1174c:	3601      	adds	r6, #1
   1174e:	b2f6      	uxtb	r6, r6
					first = 0U;
   11750:	42b1      	cmp	r1, r6
   11752:	bf08      	it	eq
   11754:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11756:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   11758:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1175c:	d11a      	bne.n	11794 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1175e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   11762:	9902      	ldr	r1, [sp, #8]
   11764:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   11768:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   1176c:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   11770:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   11772:	7862      	ldrb	r2, [r4, #1]
   11774:	1a52      	subs	r2, r2, r1
   11776:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1177a:	d025      	beq.n	117c8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1177c:	f04f 0200 	mov.w	r2, #0
   11780:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   11784:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11786:	2001      	movs	r0, #1
	user_op->status = status;
   11788:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1178a:	b10b      	cbz	r3, 11790 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1178c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1178e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   11790:	f89b 0002 	ldrb.w	r0, [fp, #2]
   11794:	42b0      	cmp	r0, r6
   11796:	d1d1      	bne.n	1173c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   11798:	9a03      	ldr	r2, [sp, #12]
   1179a:	9905      	ldr	r1, [sp, #20]
   1179c:	4291      	cmp	r1, r2
   1179e:	f1a2 0308 	sub.w	r3, r2, #8
   117a2:	d050      	beq.n	11846 <ticker_job_list_insert+0x206>
   117a4:	9303      	str	r3, [sp, #12]
   117a6:	e75e      	b.n	11666 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   117a8:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   117ac:	f88b 3000 	strb.w	r3, [fp]
   117b0:	461a      	mov	r2, r3
		node[previous].next = id;
   117b2:	fa0f f989 	sxth.w	r9, r9
   117b6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   117ba:	ea4f 1909 	mov.w	r9, r9, lsl #4
   117be:	f80e 8009 	strb.w	r8, [lr, r9]
   117c2:	e792      	b.n	116ea <ticker_job_list_insert+0xaa>
   117c4:	4601      	mov	r1, r0
   117c6:	e786      	b.n	116d6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   117c8:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   117ca:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   117cc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   117d0:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   117d2:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   117d4:	d02a      	beq.n	1182c <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   117d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   117da:	1a9a      	subs	r2, r3, r2
   117dc:	fab2 f282 	clz	r2, r2
   117e0:	0952      	lsrs	r2, r2, #5
   117e2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   117e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   117e8:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   117ea:	68ea      	ldr	r2, [r5, #12]
   117ec:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   117ee:	692a      	ldr	r2, [r5, #16]
   117f0:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   117f2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   117f6:	4293      	cmp	r3, r2
   117f8:	bf88      	it	hi
   117fa:	2300      	movhi	r3, #0
   117fc:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   117fe:	69ab      	ldr	r3, [r5, #24]
   11800:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   11802:	69eb      	ldr	r3, [r5, #28]
   11804:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   11806:	6a2b      	ldr	r3, [r5, #32]
   11808:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1180a:	68ab      	ldr	r3, [r5, #8]
   1180c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1180e:	2300      	movs	r3, #0
   11810:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11812:	686a      	ldr	r2, [r5, #4]
   11814:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   11816:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11818:	f7ff feee 	bl	115f8 <ticks_to_expire_prep>
	ticker->force = 1U;
   1181c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   11820:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   11824:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   11828:	70e3      	strb	r3, [r4, #3]
}
   1182a:	e72d      	b.n	11688 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   1182c:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   1182e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   11830:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   11832:	68ea      	ldr	r2, [r5, #12]
   11834:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11836:	692a      	ldr	r2, [r5, #16]
   11838:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   1183a:	e7df      	b.n	117fc <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   1183c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   11840:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   11844:	e75c      	b.n	11700 <ticker_job_list_insert+0xc0>
}
   11846:	b007      	add	sp, #28
   11848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001184c <ticker_worker>:
{
   1184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   11850:	7f82      	ldrb	r2, [r0, #30]
{
   11852:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   11854:	2301      	movs	r3, #1
	if (instance->job_guard) {
   11856:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   11858:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1185a:	2a00      	cmp	r2, #0
   1185c:	d159      	bne.n	11912 <ticker_worker+0xc6>
	if (instance->ticker_id_head == TICKER_NULL) {
   1185e:	7f43      	ldrb	r3, [r0, #29]
   11860:	2bff      	cmp	r3, #255	; 0xff
   11862:	4681      	mov	r9, r0
   11864:	d054      	beq.n	11910 <ticker_worker+0xc4>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   11866:	f00a fbc3 	bl	1bff0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1186a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1186e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   11872:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11876:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   11878:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1187a:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1187e:	f000 813f 	beq.w	11b00 <ticker_worker+0x2b4>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   11882:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   11886:	455b      	cmp	r3, fp
   11888:	bf94      	ite	ls
   1188a:	2300      	movls	r3, #0
   1188c:	2301      	movhi	r3, #1
   1188e:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   11890:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   11892:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   11896:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   1189a:	d044      	beq.n	11926 <ticker_worker+0xda>
			must_expire_skip = 1U;
   1189c:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   118a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   118a4:	eb07 1406 	add.w	r4, r7, r6, lsl #4
   118a8:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
   118aa:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   118ac:	455b      	cmp	r3, fp
   118ae:	d838      	bhi.n	11922 <ticker_worker+0xd6>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   118b0:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   118b4:	5dbe      	ldrb	r6, [r7, r6]
		ticks_elapsed -= ticks_to_expire;
   118b6:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
   118ba:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   118bc:	7863      	ldrb	r3, [r4, #1]
   118be:	eba3 030a 	sub.w	r3, r3, sl
   118c2:	b2db      	uxtb	r3, r3
   118c4:	2b01      	cmp	r3, #1
   118c6:	d12a      	bne.n	1191e <ticker_worker+0xd2>
		if (ticker->ticks_slot != 0U &&
   118c8:	69a0      	ldr	r0, [r4, #24]
   118ca:	2800      	cmp	r0, #0
   118cc:	d053      	beq.n	11976 <ticker_worker+0x12a>
   118ce:	9b03      	ldr	r3, [sp, #12]
   118d0:	2b00      	cmp	r3, #0
   118d2:	d04b      	beq.n	1196c <ticker_worker+0x120>
		int32_t lazy_current = ticker->lazy_current;
   118d4:	8be3      	ldrh	r3, [r4, #30]
   118d6:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   118d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   118da:	b13a      	cbz	r2, 118ec <ticker_worker+0xa0>
   118dc:	6813      	ldr	r3, [r2, #0]
   118de:	b11b      	cbz	r3, 118e8 <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
   118e0:	7a13      	ldrb	r3, [r2, #8]
   118e2:	2b00      	cmp	r3, #0
   118e4:	f000 80f3 	beq.w	11ace <ticker_worker+0x282>
				ext_data->reschedule_state =
   118e8:	2300      	movs	r3, #0
   118ea:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   118ec:	9b05      	ldr	r3, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   118ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   118f2:	3301      	adds	r3, #1
   118f4:	b29b      	uxth	r3, r3
   118f6:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   118f8:	b171      	cbz	r1, 11918 <ticker_worker+0xcc>
   118fa:	8ba1      	ldrh	r1, [r4, #28]
   118fc:	4299      	cmp	r1, r3
   118fe:	d20b      	bcs.n	11918 <ticker_worker+0xcc>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   11900:	2a00      	cmp	r2, #0
   11902:	f000 8100 	beq.w	11b06 <ticker_worker+0x2ba>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   11906:	7a13      	ldrb	r3, [r2, #8]
   11908:	2b01      	cmp	r3, #1
   1190a:	d005      	beq.n	11918 <ticker_worker+0xcc>
			must_expire_skip = 1U;
   1190c:	2301      	movs	r3, #1
   1190e:	e035      	b.n	1197c <ticker_worker+0x130>
		instance->worker_trigger = 0U;
   11910:	77c2      	strb	r2, [r0, #31]
}
   11912:	b00f      	add	sp, #60	; 0x3c
   11914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   11918:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1191c:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   1191e:	2eff      	cmp	r6, #255	; 0xff
   11920:	d1be      	bne.n	118a0 <ticker_worker+0x54>
   11922:	f8dd 9010 	ldr.w	r9, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   11926:	f899 300b 	ldrb.w	r3, [r9, #11]
   1192a:	f899 200a 	ldrb.w	r2, [r9, #10]
   1192e:	429a      	cmp	r2, r3
   11930:	d10a      	bne.n	11948 <ticker_worker+0xfc>
	uint8_t idx = *ticks_elapsed_index + 1;
   11932:	3201      	adds	r2, #1
   11934:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   11936:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11938:	bf1c      	itt	ne
   1193a:	4613      	movne	r3, r2
   1193c:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   1193e:	9a06      	ldr	r2, [sp, #24]
   11940:	f889 200b 	strb.w	r2, [r9, #11]
   11944:	bf08      	it	eq
   11946:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11948:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1194c:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11950:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   11954:	2200      	movs	r2, #0
   11956:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1195a:	464b      	mov	r3, r9
   1195c:	2201      	movs	r2, #1
   1195e:	2104      	movs	r1, #4
   11960:	2003      	movs	r0, #3
   11962:	46a4      	mov	ip, r4
}
   11964:	b00f      	add	sp, #60	; 0x3c
   11966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1196a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1196c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   11970:	9307      	str	r3, [sp, #28]
   11972:	3380      	adds	r3, #128	; 0x80
   11974:	d143      	bne.n	119fe <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   11976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   11978:	b1ea      	cbz	r2, 119b6 <ticker_worker+0x16a>
   1197a:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   1197c:	2000      	movs	r0, #0
			ticker->ext_data->reschedule_state =
   1197e:	7210      	strb	r0, [r2, #8]
		if (ticker->timeout_func) {
   11980:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   11982:	6851      	ldr	r1, [r2, #4]
			ticker->ext_data->ticks_drift = 0U;
   11984:	6050      	str	r0, [r2, #4]
		ticker->ack--;
   11986:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
   1198a:	f884 c002 	strb.w	ip, [r4, #2]
		if (ticker->timeout_func) {
   1198e:	2d00      	cmp	r5, #0
   11990:	d0c5      	beq.n	1191e <ticker_worker+0xd2>
					   ticks_expired -
   11992:	9a04      	ldr	r2, [sp, #16]
   11994:	6960      	ldr	r0, [r4, #20]
   11996:	6952      	ldr	r2, [r2, #20]
   11998:	eba8 0000 	sub.w	r0, r8, r0
   1199c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   1199e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   119a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   119a4:	b1bb      	cbz	r3, 119d6 <ticker_worker+0x18a>
   119a6:	6923      	ldr	r3, [r4, #16]
   119a8:	9301      	str	r3, [sp, #4]
   119aa:	78e3      	ldrb	r3, [r4, #3]
   119ac:	9300      	str	r3, [sp, #0]
   119ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   119b2:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   119b4:	e7b3      	b.n	1191e <ticker_worker+0xd2>
		if (ticker->timeout_func) {
   119b6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   119b8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   119bc:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   119be:	2d00      	cmp	r5, #0
   119c0:	d0ad      	beq.n	1191e <ticker_worker+0xd2>
					   ticks_expired -
   119c2:	6963      	ldr	r3, [r4, #20]
   119c4:	eba8 0003 	sub.w	r0, r8, r3
   119c8:	9b04      	ldr	r3, [sp, #16]
   119ca:	695b      	ldr	r3, [r3, #20]
			ticks_drift = 0U;
   119cc:	4611      	mov	r1, r2
					   ticks_expired -
   119ce:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   119d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			ticks_at_expire = (instance->ticks_current +
   119d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   119d6:	f8d4 c010 	ldr.w	ip, [r4, #16]
   119da:	8be3      	ldrh	r3, [r4, #30]
   119dc:	f8cd c004 	str.w	ip, [sp, #4]
   119e0:	f894 c003 	ldrb.w	ip, [r4, #3]
   119e4:	f8cd c000 	str.w	ip, [sp]
   119e8:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   119ea:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   119ec:	2b00      	cmp	r3, #0
   119ee:	9b03      	ldr	r3, [sp, #12]
   119f0:	bf18      	it	ne
   119f2:	2301      	movne	r3, #1
   119f4:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   119f6:	2300      	movs	r3, #0
   119f8:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   119fa:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   119fc:	e78f      	b.n	1191e <ticker_worker+0xd2>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   119fe:	2eff      	cmp	r6, #255	; 0xff
   11a00:	d0b9      	beq.n	11976 <ticker_worker+0x12a>
		int32_t lazy_current = ticker->lazy_current;
   11a02:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   11a04:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   11a06:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   11a0a:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   11a0c:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   11a0e:	bf28      	it	cs
   11a10:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   11a12:	fb02 c10c 	mla	r1, r2, ip, ip
   11a16:	9108      	str	r1, [sp, #32]
				(lazy_current - ticker->priority);
   11a18:	9907      	ldr	r1, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   11a1a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   11a1e:	e9cd b80b 	strd	fp, r8, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
   11a22:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   11a24:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   11a26:	4633      	mov	r3, r6
				(lazy_current - ticker->priority);
   11a28:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   11a2a:	2500      	movs	r5, #0
   11a2c:	960d      	str	r6, [sp, #52]	; 0x34
   11a2e:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   11a30:	b21b      	sxth	r3, r3
   11a32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11a36:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   11a3a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   11a3c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   11a40:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   11a42:	42a8      	cmp	r0, r5
   11a44:	d33c      	bcc.n	11ac0 <ticker_worker+0x274>
			if (ticker_next->ticks_slot == 0U) {
   11a46:	6991      	ldr	r1, [r2, #24]
   11a48:	2900      	cmp	r1, #0
   11a4a:	d036      	beq.n	11aba <ticker_worker+0x26e>
			int32_t lazy_next = ticker_next->lazy_current;
   11a4c:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   11a4e:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   11a50:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   11a54:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   11a58:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   11a5a:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   11a5c:	bf28      	it	cs
   11a5e:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   11a62:	f1ba 0f00 	cmp.w	sl, #0
   11a66:	d03f      	beq.n	11ae8 <ticker_worker+0x29c>
   11a68:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   11a6c:	2c00      	cmp	r4, #0
   11a6e:	d037      	beq.n	11ae0 <ticker_worker+0x294>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   11a70:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   11a74:	f8dd a020 	ldr.w	sl, [sp, #32]
   11a78:	45c2      	cmp	sl, r8
   11a7a:	bf8c      	ite	hi
   11a7c:	f04f 0801 	movhi.w	r8, #1
   11a80:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   11a84:	bf34      	ite	cc
   11a86:	f04f 0a01 	movcc.w	sl, #1
   11a8a:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   11a8e:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   11a90:	f892 b003 	ldrb.w	fp, [r2, #3]
   11a94:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   11a98:	d30f      	bcc.n	11aba <ticker_worker+0x26e>
   11a9a:	4593      	cmp	fp, r2
   11a9c:	d829      	bhi.n	11af2 <ticker_worker+0x2a6>
			    (next_force ||
   11a9e:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   11aa2:	d026      	beq.n	11af2 <ticker_worker+0x2a6>
			     next_is_critical ||
   11aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   11aa6:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   11aaa:	4594      	cmp	ip, r2
   11aac:	dd02      	ble.n	11ab4 <ticker_worker+0x268>
			     (next_has_priority && !current_is_older) ||
   11aae:	f1b8 0f00 	cmp.w	r8, #0
   11ab2:	d01e      	beq.n	11af2 <ticker_worker+0x2a6>
   11ab4:	9a07      	ldr	r2, [sp, #28]
   11ab6:	4572      	cmp	r2, lr
   11ab8:	d018      	beq.n	11aec <ticker_worker+0x2a0>
			id_head = ticker_next->next;
   11aba:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   11abc:	2bff      	cmp	r3, #255	; 0xff
   11abe:	d1b7      	bne.n	11a30 <ticker_worker+0x1e4>
   11ac0:	e9dd b80b 	ldrd	fp, r8, [sp, #44]	; 0x2c
   11ac4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   11ac8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11aca:	464c      	mov	r4, r9
   11acc:	e753      	b.n	11976 <ticker_worker+0x12a>
			    TICKER_RESCHEDULE_STATE_NONE &&
   11ace:	8ba3      	ldrh	r3, [r4, #28]
   11ad0:	9905      	ldr	r1, [sp, #20]
   11ad2:	428b      	cmp	r3, r1
   11ad4:	f63f af08 	bhi.w	118e8 <ticker_worker+0x9c>
				ext_data->reschedule_state =
   11ad8:	f04f 0301 	mov.w	r3, #1
   11adc:	7213      	strb	r3, [r2, #8]
   11ade:	e705      	b.n	118ec <ticker_worker+0xa0>
				(ticker->ticks_periodic == 0U) ||
   11ae0:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   11ae4:	46a2      	mov	sl, r4
   11ae6:	e7d2      	b.n	11a8e <ticker_worker+0x242>
					  0U :
   11ae8:	46d0      	mov	r8, sl
   11aea:	e7bf      	b.n	11a6c <ticker_worker+0x220>
			     (equal_priority && next_is_older))) {
   11aec:	f1ba 0f00 	cmp.w	sl, #0
   11af0:	d0e3      	beq.n	11aba <ticker_worker+0x26e>
   11af2:	e9dd b80b 	ldrd	fp, r8, [sp, #44]	; 0x2c
   11af6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   11afa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11afc:	464c      	mov	r4, r9
   11afe:	e6eb      	b.n	118d8 <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
   11b00:	9b06      	ldr	r3, [sp, #24]
   11b02:	9303      	str	r3, [sp, #12]
   11b04:	e6c4      	b.n	11890 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   11b06:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   11b08:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   11b0c:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   11b0e:	2d00      	cmp	r5, #0
   11b10:	f43f af05 	beq.w	1191e <ticker_worker+0xd2>
					   ticks_expired -
   11b14:	6963      	ldr	r3, [r4, #20]
   11b16:	eba8 0003 	sub.w	r0, r8, r3
   11b1a:	9b04      	ldr	r3, [sp, #16]
   11b1c:	695b      	ldr	r3, [r3, #20]
   11b1e:	4418      	add	r0, r3
			ticks_drift = 0U;
   11b20:	4611      	mov	r1, r2
			ticks_at_expire = (instance->ticks_current +
   11b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   11b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11b28:	e73d      	b.n	119a6 <ticker_worker+0x15a>
   11b2a:	bf00      	nop

00011b2c <ticker_job>:
	if (instance->worker_trigger) {
   11b2c:	7fc3      	ldrb	r3, [r0, #31]
   11b2e:	2b00      	cmp	r3, #0
   11b30:	f040 8434 	bne.w	1239c <ticker_job+0x870>
{
   11b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   11b38:	7f82      	ldrb	r2, [r0, #30]
{
   11b3a:	b08d      	sub	sp, #52	; 0x34
   11b3c:	4683      	mov	fp, r0
	if (instance->job_guard) {
   11b3e:	2a00      	cmp	r2, #0
   11b40:	f040 808c 	bne.w	11c5c <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11b44:	7a83      	ldrb	r3, [r0, #10]
   11b46:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   11b48:	2001      	movs	r0, #1
   11b4a:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11b4e:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   11b50:	f8db 0014 	ldr.w	r0, [fp, #20]
   11b54:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11b56:	f000 8443 	beq.w	123e0 <ticker_job+0x8b4>
	uint8_t idx = *ticks_elapsed_index + 1;
   11b5a:	3301      	adds	r3, #1
   11b5c:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   11b5e:	2b02      	cmp	r3, #2
		idx = 0U;
   11b60:	bf08      	it	eq
   11b62:	4613      	moveq	r3, r2
		ticks_elapsed =
   11b64:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   11b68:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   11b6c:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   11b70:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   11b72:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   11b74:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   11b76:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   11b78:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   11b7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   11b7e:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   11b82:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   11b86:	f8db 3000 	ldr.w	r3, [fp]
   11b8a:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   11b8c:	f8db 3004 	ldr.w	r3, [fp, #4]
   11b90:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   11b92:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   11b94:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   11b96:	b2db      	uxtb	r3, r3
   11b98:	2a00      	cmp	r2, #0
   11b9a:	f000 81d5 	beq.w	11f48 <ticker_job+0x41c>
		flag_elapsed = 1U;
   11b9e:	2201      	movs	r2, #1
   11ba0:	920b      	str	r2, [sp, #44]	; 0x2c
   11ba2:	9a05      	ldr	r2, [sp, #20]
   11ba4:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   11ba8:	2300      	movs	r3, #0
   11baa:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   11bac:	23ff      	movs	r3, #255	; 0xff
   11bae:	9301      	str	r3, [sp, #4]
   11bb0:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   11bb2:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   11bb6:	f89a c003 	ldrb.w	ip, [sl, #3]
   11bba:	f89a 7002 	ldrb.w	r7, [sl, #2]
   11bbe:	4567      	cmp	r7, ip
   11bc0:	d044      	beq.n	11c4c <ticker_job+0x120>
			if (middle == user->count_user_op) {
   11bc2:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   11bc6:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   11bc8:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   11bca:	b2db      	uxtb	r3, r3
				middle = 0U;
   11bcc:	429a      	cmp	r2, r3
   11bce:	bf08      	it	eq
   11bd0:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   11bd2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   11bd6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   11bda:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11bde:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   11be2:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   11be4:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11be8:	d942      	bls.n	11c70 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11bea:	2808      	cmp	r0, #8
   11bec:	d842      	bhi.n	11c74 <ticker_job+0x148>
			ticker = &node[user_op->id];
   11bee:	7861      	ldrb	r1, [r4, #1]
   11bf0:	9a00      	ldr	r2, [sp, #0]
   11bf2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   11bf6:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   11bfa:	786a      	ldrb	r2, [r5, #1]
   11bfc:	f895 e002 	ldrb.w	lr, [r5, #2]
   11c00:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11c04:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   11c08:	d034      	beq.n	11c74 <ticker_job+0x148>
			    (state == 0U) ||
   11c0a:	2805      	cmp	r0, #5
   11c0c:	d041      	beq.n	11c92 <ticker_job+0x166>
			if (state == 1U) {
   11c0e:	2a01      	cmp	r2, #1
   11c10:	f040 8118 	bne.w	11e44 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   11c14:	2806      	cmp	r0, #6
   11c16:	d006      	beq.n	11c26 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   11c18:	4658      	mov	r0, fp
   11c1a:	f7ff fcb3 	bl	11584 <ticker_dequeue>
			ticker->req = ticker->ack;
   11c1e:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   11c20:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   11c22:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11c24:	7861      	ldrb	r1, [r4, #1]
   11c26:	f89b 301c 	ldrb.w	r3, [fp, #28]
   11c2a:	428b      	cmp	r3, r1
   11c2c:	f000 80d9 	beq.w	11de2 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11c30:	2000      	movs	r0, #0
   11c32:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   11c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   11c38:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   11c3a:	b10b      	cbz	r3, 11c40 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11c3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11c3e:	4798      	blx	r3
		while (user->middle != user->last) {
   11c40:	f89a c003 	ldrb.w	ip, [sl, #3]
   11c44:	f89a 7002 	ldrb.w	r7, [sl, #2]
   11c48:	4567      	cmp	r7, ip
   11c4a:	d1ba      	bne.n	11bc2 <ticker_job+0x96>
	while (count_user--) {
   11c4c:	9a05      	ldr	r2, [sp, #20]
   11c4e:	4552      	cmp	r2, sl
   11c50:	f1aa 0308 	sub.w	r3, sl, #8
   11c54:	f000 8107 	beq.w	11e66 <ticker_job+0x33a>
   11c58:	469a      	mov	sl, r3
   11c5a:	e7aa      	b.n	11bb2 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   11c5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11c5e:	2104      	movs	r1, #4
   11c60:	4603      	mov	r3, r0
   11c62:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11c64:	2004      	movs	r0, #4
   11c66:	46a4      	mov	ip, r4
}
   11c68:	b00d      	add	sp, #52	; 0x34
   11c6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11c6e:	4760      	bx	ip
   11c70:	461f      	mov	r7, r3
   11c72:	e7a4      	b.n	11bbe <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11c74:	2200      	movs	r2, #0
   11c76:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   11c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   11c7c:	2001      	movs	r0, #1
   11c7e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   11c80:	2a00      	cmp	r2, #0
   11c82:	d0f5      	beq.n	11c70 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11c84:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11c86:	4790      	blx	r2
		while (user->middle != user->last) {
   11c88:	f89a c003 	ldrb.w	ip, [sl, #3]
   11c8c:	f89a 7002 	ldrb.w	r7, [sl, #2]
   11c90:	e795      	b.n	11bbe <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   11c92:	6860      	ldr	r0, [r4, #4]
   11c94:	b948      	cbnz	r0, 11caa <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   11c96:	68a0      	ldr	r0, [r4, #8]
   11c98:	b938      	cbnz	r0, 11caa <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   11c9a:	68e0      	ldr	r0, [r4, #12]
   11c9c:	b928      	cbnz	r0, 11caa <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   11c9e:	6920      	ldr	r0, [r4, #16]
   11ca0:	b918      	cbnz	r0, 11caa <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   11ca2:	6960      	ldr	r0, [r4, #20]
   11ca4:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   11ca8:	d0e4      	beq.n	11c74 <ticker_job+0x148>
			if (state == 1U) {
   11caa:	2a01      	cmp	r2, #1
   11cac:	f040 80ca 	bne.w	11e44 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11cb0:	4658      	mov	r0, fp
   11cb2:	f7ff fc67 	bl	11584 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11cb6:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11cba:	60a8      	str	r0, [r5, #8]
   11cbc:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11cbe:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   11cc0:	f00a f996 	bl	1bff0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11cc4:	9b02      	ldr	r3, [sp, #8]
   11cc6:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11cc8:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11cca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11cce:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   11cd0:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   11cd2:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   11cd4:	f240 80af 	bls.w	11e36 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   11cd8:	696b      	ldr	r3, [r5, #20]
   11cda:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   11cdc:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   11cde:	f8d5 c004 	ldr.w	ip, [r5, #4]
   11ce2:	f1bc 0f00 	cmp.w	ip, #0
   11ce6:	d051      	beq.n	11d8c <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   11ce8:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   11cea:	2b00      	cmp	r3, #0
   11cec:	d04e      	beq.n	11d8c <ticker_job+0x260>
		user_op->params.update.lazy--;
   11cee:	3b01      	subs	r3, #1
   11cf0:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11cf2:	4594      	cmp	ip, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   11cf4:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   11cf6:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11cf8:	d223      	bcs.n	11d42 <ticker_job+0x216>
   11cfa:	f10c 0e01 	add.w	lr, ip, #1
   11cfe:	f8cd 8018 	str.w	r8, [sp, #24]
   11d02:	940a      	str	r4, [sp, #40]	; 0x28
   11d04:	e018      	b.n	11d38 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   11d06:	6a69      	ldr	r1, [r5, #36]	; 0x24
   11d08:	f8df 8228 	ldr.w	r8, [pc, #552]	; 11f34 <ticker_job+0x408>
   11d0c:	4c8a      	ldr	r4, [pc, #552]	; (11f38 <ticker_job+0x40c>)
   11d0e:	4488      	add	r8, r1
   11d10:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11d12:	bf84      	itt	hi
   11d14:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   11d18:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   11d1c:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   11d1e:	6a2c      	ldr	r4, [r5, #32]
   11d20:	bf94      	ite	ls
   11d22:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11d24:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   11d28:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   11d2a:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   11d2c:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   11d2e:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11d30:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   11d32:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   11d34:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11d36:	d201      	bcs.n	11d3c <ticker_job+0x210>
   11d38:	429f      	cmp	r7, r3
   11d3a:	d3e4      	bcc.n	11d06 <ticker_job+0x1da>
   11d3c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11d40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d42:	42bb      	cmp	r3, r7
   11d44:	d221      	bcs.n	11d8a <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   11d46:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11d4a:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   11d4e:	9006      	str	r0, [sp, #24]
   11d50:	940a      	str	r4, [sp, #40]	; 0x28
   11d52:	e005      	b.n	11d60 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d54:	3301      	adds	r3, #1
   11d56:	b29b      	uxth	r3, r3
   11d58:	4660      	mov	r0, ip
   11d5a:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   11d5c:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d5e:	d011      	beq.n	11d84 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   11d60:	4874      	ldr	r0, [pc, #464]	; (11f34 <ticker_job+0x408>)
   11d62:	4c75      	ldr	r4, [pc, #468]	; (11f38 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   11d64:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   11d66:	1808      	adds	r0, r1, r0
   11d68:	42a0      	cmp	r0, r4
   11d6a:	d8f3      	bhi.n	11d54 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d6c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   11d6e:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11d70:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d74:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11d76:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d7a:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11d7c:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   11d80:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11d82:	d1ed      	bne.n	11d60 <ticker_job+0x234>
   11d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11d86:	6269      	str	r1, [r5, #36]	; 0x24
   11d88:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   11d8a:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   11d8c:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   11d8e:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11d90:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   11d92:	440a      	add	r2, r1
   11d94:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   11d96:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   11d98:	4403      	add	r3, r0
   11d9a:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   11d9c:	b11a      	cbz	r2, 11da6 <ticker_job+0x27a>
   11d9e:	6813      	ldr	r3, [r2, #0]
   11da0:	b10b      	cbz	r3, 11da6 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   11da2:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   11da4:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11da6:	464a      	mov	r2, r9
   11da8:	9902      	ldr	r1, [sp, #8]
   11daa:	4628      	mov	r0, r5
   11dac:	f7ff fc24 	bl	115f8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11db0:	68e2      	ldr	r2, [r4, #12]
   11db2:	69ab      	ldr	r3, [r5, #24]
   11db4:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11db6:	6922      	ldr	r2, [r4, #16]
   11db8:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11dba:	bf8c      	ite	hi
   11dbc:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   11dbe:	2300      	movls	r3, #0
   11dc0:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   11dc2:	7da3      	ldrb	r3, [r4, #22]
   11dc4:	b103      	cbz	r3, 11dc8 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   11dc6:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   11dc8:	7de3      	ldrb	r3, [r4, #23]
   11dca:	b113      	cbz	r3, 11dd2 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   11dcc:	3b01      	subs	r3, #1
   11dce:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   11dd2:	9b01      	ldr	r3, [sp, #4]
   11dd4:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   11dd6:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   11dd8:	7862      	ldrb	r2, [r4, #1]
   11dda:	9201      	str	r2, [sp, #4]
		ticker->req++;
   11ddc:	3301      	adds	r3, #1
   11dde:	706b      	strb	r3, [r5, #1]
   11de0:	e726      	b.n	11c30 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11de2:	23ff      	movs	r3, #255	; 0xff
   11de4:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   11de8:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   11dec:	2b06      	cmp	r3, #6
   11dee:	d013      	beq.n	11e18 <ticker_job+0x2ec>
   11df0:	2b08      	cmp	r3, #8
   11df2:	d011      	beq.n	11e18 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   11df4:	f00a f8fc 	bl	1bff0 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   11df8:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   11dfc:	1a83      	subs	r3, r0, r2
   11dfe:	021d      	lsls	r5, r3, #8
   11e00:	d410      	bmi.n	11e24 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   11e02:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   11e08:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   11e0a:	f8db 2018 	ldr.w	r2, [fp, #24]
   11e0e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   11e10:	bf88      	it	hi
   11e12:	f8cb 3018 	strhi.w	r3, [fp, #24]
   11e16:	e70b      	b.n	11c30 <ticker_job+0x104>
				ticks_at_yield =
   11e18:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   11e1a:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   11e1e:	1a83      	subs	r3, r0, r2
   11e20:	021d      	lsls	r5, r3, #8
   11e22:	d5ee      	bpl.n	11e02 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11e24:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   11e26:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   11e2c:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   11e2e:	bf34      	ite	cc
   11e30:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   11e32:	2300      	movcs	r3, #0
   11e34:	e7e9      	b.n	11e0a <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   11e36:	696b      	ldr	r3, [r5, #20]
   11e38:	1bda      	subs	r2, r3, r7
   11e3a:	1853      	adds	r3, r2, r1
   11e3c:	9304      	str	r3, [sp, #16]
   11e3e:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   11e40:	2200      	movs	r2, #0
   11e42:	e74c      	b.n	11cde <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11e44:	2104      	movs	r1, #4
   11e46:	465b      	mov	r3, fp
   11e48:	2201      	movs	r2, #1
   11e4a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11e4e:	4608      	mov	r0, r1
   11e50:	47a0      	blx	r4
	while (count_user--) {
   11e52:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   11e54:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   11e58:	2301      	movs	r3, #1
	while (count_user--) {
   11e5a:	4552      	cmp	r2, sl
				pending = 1U;
   11e5c:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   11e5e:	f1aa 0308 	sub.w	r3, sl, #8
   11e62:	f47f aef9 	bne.w	11c58 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11e66:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   11e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e6c:	1a9b      	subs	r3, r3, r2
   11e6e:	bf18      	it	ne
   11e70:	2301      	movne	r3, #1
   11e72:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   11e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11e76:	2b00      	cmp	r3, #0
   11e78:	d16a      	bne.n	11f50 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   11e7a:	9901      	ldr	r1, [sp, #4]
   11e7c:	4658      	mov	r0, fp
   11e7e:	f7ff fbdf 	bl	11640 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11e82:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11e86:	9300      	str	r3, [sp, #0]
   11e88:	9b00      	ldr	r3, [sp, #0]
   11e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e8c:	4293      	cmp	r3, r2
   11e8e:	f000 826f 	beq.w	12370 <ticker_job+0x844>
	if (!pending) {
   11e92:	9b08      	ldr	r3, [sp, #32]
   11e94:	2b00      	cmp	r3, #0
   11e96:	f000 81e2 	beq.w	1225e <ticker_job+0x732>
	if (instance->ticker_id_head == TICKER_NULL) {
   11e9a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11e9e:	9300      	str	r3, [sp, #0]
   11ea0:	9b00      	ldr	r3, [sp, #0]
   11ea2:	2bff      	cmp	r3, #255	; 0xff
   11ea4:	f000 82c7 	beq.w	12436 <ticker_job+0x90a>
	if (ticker_id_old_head == TICKER_NULL) {
   11ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11eaa:	2bff      	cmp	r3, #255	; 0xff
   11eac:	f000 82da 	beq.w	12464 <ticker_job+0x938>
	ticker = &instance->nodes[instance->ticker_id_head];
   11eb0:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   11eb2:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   11eb6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 11f3c <ticker_job+0x410>
   11eba:	f8df 8084 	ldr.w	r8, [pc, #132]	; 11f40 <ticker_job+0x414>
   11ebe:	4f21      	ldr	r7, [pc, #132]	; (11f44 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   11ec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   11ec4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   11ec8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   11eca:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   11ecc:	f00a f890 	bl	1bff0 <cntr_cnt_get>
		cc = instance->ticks_current;
   11ed0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ed4:	1b03      	subs	r3, r0, r4
   11ed6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11eda:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   11edc:	42b3      	cmp	r3, r6
   11ede:	bf2c      	ite	cs
   11ee0:	18e4      	addcs	r4, r4, r3
   11ee2:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   11ee4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   11ee8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   11eec:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   11eee:	4620      	mov	r0, r4
   11ef0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11ef2:	f00a f87d 	bl	1bff0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ef6:	eba0 030a 	sub.w	r3, r0, sl
   11efa:	eba4 040a 	sub.w	r4, r4, sl
   11efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11f02:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11f04:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   11f08:	42a3      	cmp	r3, r4
		i--;
   11f0a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   11f0e:	f240 8236 	bls.w	1237e <ticker_job+0x852>
		LL_ASSERT(i);
   11f12:	2d00      	cmp	r5, #0
   11f14:	d1da      	bne.n	11ecc <ticker_job+0x3a0>
   11f16:	f640 133e 	movw	r3, #2366	; 0x93e
   11f1a:	464a      	mov	r2, r9
   11f1c:	4641      	mov	r1, r8
   11f1e:	4638      	mov	r0, r7
   11f20:	f010 fbf0 	bl	22704 <printk>
   11f24:	4040      	eors	r0, r0
   11f26:	f380 8811 	msr	BASEPRI, r0
   11f2a:	f04f 0003 	mov.w	r0, #3
   11f2e:	df02      	svc	2
   11f30:	e7cc      	b.n	11ecc <ticker_job+0x3a0>
   11f32:	bf00      	nop
   11f34:	ff172b5a 	.word	0xff172b5a
   11f38:	7f172b59 	.word	0x7f172b59
   11f3c:	000291e0 	.word	0x000291e0
   11f40:	000292e4 	.word	0x000292e4
   11f44:	00029220 	.word	0x00029220
	pending = 0U;
   11f48:	9b06      	ldr	r3, [sp, #24]
   11f4a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   11f4c:	23ff      	movs	r3, #255	; 0xff
   11f4e:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   11f50:	f00a f84e 	bl	1bff0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11f54:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   11f56:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11f5a:	1ac3      	subs	r3, r0, r3
   11f5c:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   11f60:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   11f62:	f8db 3000 	ldr.w	r3, [fp]
   11f66:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   11f68:	d04f      	beq.n	1200a <ticker_job+0x4de>
	ticks_expired = 0U;
   11f6a:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   11f6c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 121e4 <ticker_job+0x6b8>
   11f70:	f8df 9274 	ldr.w	r9, [pc, #628]	; 121e8 <ticker_job+0x6bc>
	while (instance->ticker_id_head != TICKER_NULL) {
   11f74:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   11f76:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   11f78:	9a00      	ldr	r2, [sp, #0]
   11f7a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   11f7e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   11f82:	011b      	lsls	r3, r3, #4
   11f84:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   11f86:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11f88:	429f      	cmp	r7, r3
   11f8a:	f0c0 8247 	bcc.w	1241c <ticker_job+0x8f0>
		ticks_expired += ticks_to_expire;
   11f8e:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   11f90:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   11f94:	441a      	add	r2, r3
   11f96:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11f98:	f8db 2018 	ldr.w	r2, [fp, #24]
   11f9c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11f9e:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   11fa2:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11fa6:	bf25      	ittet	cs
   11fa8:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   11fac:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   11fb0:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   11fb2:	2300      	movcs	r3, #0
   11fb4:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11fb8:	78a1      	ldrb	r1, [r4, #2]
   11fba:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11fbc:	69a2      	ldr	r2, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11fbe:	1a5b      	subs	r3, r3, r1
   11fc0:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11fc2:	b112      	cbz	r2, 11fca <ticker_job+0x49e>
   11fc4:	2b02      	cmp	r3, #2
   11fc6:	f000 8138 	beq.w	1223a <ticker_job+0x70e>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11fca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   11fcc:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   11fce:	2200      	movs	r2, #0
   11fd0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11fd2:	9a00      	ldr	r2, [sp, #0]
   11fd4:	5d52      	ldrb	r2, [r2, r5]
   11fd6:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11fda:	6865      	ldr	r5, [r4, #4]
   11fdc:	2d00      	cmp	r5, #0
   11fde:	d151      	bne.n	12084 <ticker_job+0x558>
   11fe0:	b110      	cbz	r0, 11fe8 <ticker_job+0x4bc>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   11fe2:	7a02      	ldrb	r2, [r0, #8]
   11fe4:	2a01      	cmp	r2, #1
   11fe6:	d054      	beq.n	12092 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   11fe8:	b153      	cbz	r3, 12000 <ticker_job+0x4d4>
   11fea:	2b01      	cmp	r3, #1
   11fec:	d002      	beq.n	11ff4 <ticker_job+0x4c8>
   11fee:	f1be 0f00 	cmp.w	lr, #0
   11ff2:	d005      	beq.n	12000 <ticker_job+0x4d4>
			    ticker->fp_op_func) {
   11ff4:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   11ff6:	b11b      	cbz	r3, 12000 <ticker_job+0x4d4>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   11ff8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11ffa:	2001      	movs	r0, #1
   11ffc:	4798      	blx	r3
			ticker->req = ticker->ack;
   11ffe:	78a1      	ldrb	r1, [r4, #2]
   12000:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   12002:	f89b 601d 	ldrb.w	r6, [fp, #29]
   12006:	2eff      	cmp	r6, #255	; 0xff
   12008:	d1b6      	bne.n	11f78 <ticker_job+0x44c>
			flag_compare_update = 1U;
   1200a:	9b06      	ldr	r3, [sp, #24]
   1200c:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   1200e:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   12010:	4296      	cmp	r6, r2
   12012:	bf18      	it	ne
   12014:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   12016:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   12018:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   1201a:	f7ff fb11 	bl	11640 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   1201e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   12022:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   12026:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   1202a:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1202c:	9b00      	ldr	r3, [sp, #0]
   1202e:	2bff      	cmp	r3, #255	; 0xff
   12030:	d00f      	beq.n	12052 <ticker_job+0x526>
   12032:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   12034:	b233      	sxth	r3, r6
   12036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1203a:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   1203e:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   12040:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   12042:	b117      	cbz	r7, 1204a <ticker_job+0x51e>
   12044:	7a39      	ldrb	r1, [r7, #8]
   12046:	2901      	cmp	r1, #1
   12048:	d03b      	beq.n	120c2 <ticker_job+0x596>
			ticker_id_head = ticker->next;
   1204a:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   1204e:	2eff      	cmp	r6, #255	; 0xff
   12050:	d1f0      	bne.n	12034 <ticker_job+0x508>
	return rescheduled;
   12052:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   12056:	2a00      	cmp	r2, #0
   12058:	f43f af16 	beq.w	11e88 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1205c:	9b00      	ldr	r3, [sp, #0]
   1205e:	9909      	ldr	r1, [sp, #36]	; 0x24
   12060:	428b      	cmp	r3, r1
   12062:	f47f af16 	bne.w	11e92 <ticker_job+0x366>
	if (!pending) {
   12066:	9b08      	ldr	r3, [sp, #32]
   12068:	2b00      	cmp	r3, #0
   1206a:	f47f af19 	bne.w	11ea0 <ticker_job+0x374>
	count_user = instance->count_user;
   1206e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   12072:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   12076:	1e5f      	subs	r7, r3, #1
   12078:	b2ff      	uxtb	r7, r7
   1207a:	2b00      	cmp	r3, #0
   1207c:	f43f af10 	beq.w	11ea0 <ticker_job+0x374>
			flag_compare_update = 1U;
   12080:	9206      	str	r2, [sp, #24]
   12082:	e0f7      	b.n	12274 <ticker_job+0x748>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   12084:	2800      	cmp	r0, #0
   12086:	f000 80a0 	beq.w	121ca <ticker_job+0x69e>
   1208a:	7a03      	ldrb	r3, [r0, #8]
   1208c:	2b01      	cmp	r3, #1
   1208e:	f040 809c 	bne.w	121ca <ticker_job+0x69e>
				ticker->req = ticker->ack;
   12092:	7061      	strb	r1, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   12094:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   12096:	9b07      	ldr	r3, [sp, #28]
   12098:	9a02      	ldr	r2, [sp, #8]
   1209a:	f8db 1014 	ldr.w	r1, [fp, #20]
   1209e:	189a      	adds	r2, r3, r2
   120a0:	4620      	mov	r0, r4
   120a2:	f7ff faa9 	bl	115f8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   120a6:	9a00      	ldr	r2, [sp, #0]
   120a8:	9904      	ldr	r1, [sp, #16]
   120aa:	9b01      	ldr	r3, [sp, #4]
   120ac:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   120ae:	7863      	ldrb	r3, [r4, #1]
   120b0:	9601      	str	r6, [sp, #4]
   120b2:	3301      	adds	r3, #1
   120b4:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   120b6:	f89b 601d 	ldrb.w	r6, [fp, #29]
   120ba:	2eff      	cmp	r6, #255	; 0xff
   120bc:	f47f af5c 	bne.w	11f78 <ticker_job+0x44c>
   120c0:	e7a3      	b.n	1200a <ticker_job+0x4de>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   120c2:	9b01      	ldr	r3, [sp, #4]
   120c4:	7f1b      	ldrb	r3, [r3, #28]
   120c6:	2bff      	cmp	r3, #255	; 0xff
   120c8:	d04a      	beq.n	12160 <ticker_job+0x634>
			instance->ticks_slot_previous > ticks_elapsed) {
   120ca:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   120cc:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   120ce:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   120d0:	4293      	cmp	r3, r2
   120d2:	d945      	bls.n	12160 <ticker_job+0x634>
			window_start_ticks = instance->ticks_slot_previous -
   120d4:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   120d8:	687b      	ldr	r3, [r7, #4]
   120da:	9302      	str	r3, [sp, #8]
   120dc:	461a      	mov	r2, r3
   120de:	683b      	ldr	r3, [r7, #0]
		ticker_id_iter = nodes[ticker_id_head].next;
   120e0:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   120e4:	429a      	cmp	r2, r3
   120e6:	f080 80a1 	bcs.w	1222c <ticker_job+0x700>
		while (ticker_id_iter != TICKER_NULL &&
   120ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   120ee:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   120f2:	f000 809b 	beq.w	1222c <ticker_job+0x700>
		       ticks_start_offset + ticker->ticks_slot <=
   120f6:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   120fa:	45f0      	cmp	r8, lr
   120fc:	f04f 0300 	mov.w	r3, #0
   12100:	d331      	bcc.n	12166 <ticker_job+0x63a>
   12102:	46f1      	mov	r9, lr
   12104:	465a      	mov	r2, fp
   12106:	461c      	mov	r4, r3
   12108:	e01c      	b.n	12144 <ticker_job+0x618>
			if (node->ticks_to_expire >
   1210a:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   1210c:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   1210e:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   12110:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   12112:	d909      	bls.n	12128 <ticker_job+0x5fc>
				window_end_ticks =
   12114:	4543      	cmp	r3, r8
   12116:	bf28      	it	cs
   12118:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   1211a:	4599      	cmp	r9, r3
   1211c:	d204      	bcs.n	12128 <ticker_job+0x5fc>
			if (ticks_to_expire != 0U &&
   1211e:	ebb3 030e 	subs.w	r3, r3, lr
   12122:	d001      	beq.n	12128 <ticker_job+0x5fc>
   12124:	459c      	cmp	ip, r3
   12126:	d91e      	bls.n	12166 <ticker_job+0x63a>
			window_start_ticks  = node->ticks_to_expire +
   12128:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   1212a:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   1212e:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   12132:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   12134:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   12138:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1213a:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   1213e:	d012      	beq.n	12166 <ticker_job+0x63a>
   12140:	45c8      	cmp	r8, r9
   12142:	d310      	bcc.n	12166 <ticker_job+0x63a>
			node = &nodes[ticker_id_iter];
   12144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12148:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   1214c:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   1214e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   12150:	2900      	cmp	r1, #0
   12152:	d0da      	beq.n	1210a <ticker_job+0x5de>
   12154:	7a09      	ldrb	r1, [r1, #8]
   12156:	2901      	cmp	r1, #1
   12158:	d1d7      	bne.n	1210a <ticker_job+0x5de>
				ticker_id_iter = node->next;
   1215a:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   1215e:	e7eb      	b.n	12138 <ticker_job+0x60c>
		window_start_ticks = 0U;
   12160:	f04f 0c00 	mov.w	ip, #0
   12164:	e7b8      	b.n	120d8 <ticker_job+0x5ac>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   12166:	68aa      	ldr	r2, [r5, #8]
   12168:	9902      	ldr	r1, [sp, #8]
   1216a:	1a8a      	subs	r2, r1, r2
   1216c:	441a      	add	r2, r3
   1216e:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   12170:	465c      	mov	r4, fp
   12172:	60ab      	str	r3, [r5, #8]
   12174:	f04f 0eff 	mov.w	lr, #255	; 0xff
   12178:	e000      	b.n	1217c <ticker_job+0x650>
   1217a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   1217c:	b221      	sxth	r1, r4
   1217e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   12182:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   12186:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   12188:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1218c:	4298      	cmp	r0, r3
   1218e:	f080 813b 	bcs.w	12408 <ticker_job+0x8dc>
				ticker->ticks_to_expire -=
   12192:	1a1b      	subs	r3, r3, r0
   12194:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   12196:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1219a:	2aff      	cmp	r2, #255	; 0xff
   1219c:	46a6      	mov	lr, r4
   1219e:	d1ec      	bne.n	1217a <ticker_job+0x64e>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   121a0:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   121a2:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   121a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   121aa:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   121ac:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   121b0:	f81a 3001 	ldrb.w	r3, [sl, r1]
   121b4:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   121b6:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   121ba:	8beb      	ldrh	r3, [r5, #30]
   121bc:	3b01      	subs	r3, #1
   121be:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   121c0:	f04f 0302 	mov.w	r3, #2
   121c4:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   121c6:	2201      	movs	r2, #1
   121c8:	e730      	b.n	1202c <ticker_job+0x500>
				if (!ticker->lazy_current) {
   121ca:	f1be 0f00 	cmp.w	lr, #0
   121ce:	d143      	bne.n	12258 <ticker_job+0x72c>
					lazy_periodic = ticker->lazy_periodic;
   121d0:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   121d4:	4672      	mov	r2, lr
				while (count--) {
   121d6:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   121d8:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   121dc:	2100      	movs	r1, #0
   121de:	9005      	str	r0, [sp, #20]
   121e0:	e009      	b.n	121f6 <ticker_job+0x6ca>
   121e2:	bf00      	nop
   121e4:	ff172b5a 	.word	0xff172b5a
   121e8:	7f172b59 	.word	0x7f172b59
   121ec:	4628      	mov	r0, r5
				while (count--) {
   121ee:	3a01      	subs	r2, #1
					ticks_to_expire +=
   121f0:	4401      	add	r1, r0
				while (count--) {
   121f2:	1c50      	adds	r0, r2, #1
   121f4:	d00f      	beq.n	12216 <ticker_job+0x6ea>
	ticker->remainder_current += ticker->remainder_periodic;
   121f6:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   121f8:	eb03 0008 	add.w	r0, r3, r8
   121fc:	4548      	cmp	r0, r9
   121fe:	d8f5      	bhi.n	121ec <ticker_job+0x6c0>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12200:	9805      	ldr	r0, [sp, #20]
   12202:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   12206:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12208:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1220c:	4401      	add	r1, r0
				while (count--) {
   1220e:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12210:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   12214:	d1ef      	bne.n	121f6 <ticker_job+0x6ca>
				} else if (!ticker->must_expire) {
   12216:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1221a:	6263      	str	r3, [r4, #36]	; 0x24
   1221c:	2a00      	cmp	r2, #0
   1221e:	f000 80be 	beq.w	1239e <ticker_job+0x872>
				lazy = 0U;
   12222:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   12224:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   12226:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   12228:	83e2      	strh	r2, [r4, #30]
   1222a:	e734      	b.n	12096 <ticker_job+0x56a>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1222c:	68ab      	ldr	r3, [r5, #8]
   1222e:	9a02      	ldr	r2, [sp, #8]
   12230:	1ad3      	subs	r3, r2, r3
   12232:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   12234:	2300      	movs	r3, #0
   12236:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   12238:	e7bf      	b.n	121ba <ticker_job+0x68e>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1223a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1223c:	f1be 0f00 	cmp.w	lr, #0
   12240:	f47f aec4 	bne.w	11fcc <ticker_job+0x4a0>
   12244:	b118      	cbz	r0, 1224e <ticker_job+0x722>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   12246:	7a05      	ldrb	r5, [r0, #8]
   12248:	2d01      	cmp	r5, #1
   1224a:	f000 80ff 	beq.w	1244c <ticker_job+0x920>
			instance->ticks_slot_previous = ticker->ticks_slot;
   1224e:	f8cb 2018 	str.w	r2, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   12252:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   12256:	e6b9      	b.n	11fcc <ticker_job+0x4a0>
					ticker->req = ticker->ack;
   12258:	7061      	strb	r1, [r4, #1]
   1225a:	2200      	movs	r2, #0
   1225c:	e7bb      	b.n	121d6 <ticker_job+0x6aa>
	count_user = instance->count_user;
   1225e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   12262:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   12266:	1e5f      	subs	r7, r3, #1
   12268:	b2ff      	uxtb	r7, r7
   1226a:	2b00      	cmp	r3, #0
   1226c:	f43f ae15 	beq.w	11e9a <ticker_job+0x36e>
		flag_compare_update = 1U;
   12270:	2301      	movs	r3, #1
   12272:	9306      	str	r3, [sp, #24]
   12274:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   12278:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   1227a:	f04f 0a01 	mov.w	sl, #1
   1227e:	9600      	str	r6, [sp, #0]
		while (user->first != user->last) {
   12280:	787b      	ldrb	r3, [r7, #1]
   12282:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   12284:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   12286:	429a      	cmp	r2, r3
   12288:	d10c      	bne.n	122a4 <ticker_job+0x778>
   1228a:	e060      	b.n	1234e <ticker_job+0x822>
	switch (uop->op) {
   1228c:	2b01      	cmp	r3, #1
   1228e:	d058      	beq.n	12342 <ticker_job+0x816>
			first = user->first + 1;
   12290:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   12292:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   12294:	3301      	adds	r3, #1
   12296:	b2db      	uxtb	r3, r3
				first = 0U;
   12298:	4299      	cmp	r1, r3
   1229a:	bf08      	it	eq
   1229c:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   1229e:	429a      	cmp	r2, r3
			user->first = first;
   122a0:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   122a2:	d054      	beq.n	1234e <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   122a4:	b21b      	sxth	r3, r3
   122a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   122aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   122ae:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   122b2:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   122b6:	2b02      	cmp	r3, #2
   122b8:	d017      	beq.n	122ea <ticker_job+0x7be>
   122ba:	2b03      	cmp	r3, #3
   122bc:	d1e6      	bne.n	1228c <ticker_job+0x760>
		if (uop->id < instance->count_node) {
   122be:	7843      	ldrb	r3, [r0, #1]
   122c0:	f89b 2008 	ldrb.w	r2, [fp, #8]
   122c4:	429a      	cmp	r2, r3
   122c6:	d93f      	bls.n	12348 <ticker_job+0x81c>
			node[uop->id].priority =
   122c8:	f8db 2000 	ldr.w	r2, [fp]
   122cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   122d0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   122d4:	7902      	ldrb	r2, [r0, #4]
   122d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   122da:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   122dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   122de:	b113      	cbz	r3, 122e6 <ticker_job+0x7ba>
		fp_op_func(uop->status, uop->op_context);
   122e0:	6b01      	ldr	r1, [r0, #48]	; 0x30
   122e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   122e4:	4798      	blx	r3
   122e6:	78fa      	ldrb	r2, [r7, #3]
   122e8:	e7d2      	b.n	12290 <ticker_job+0x764>
		ticker_by_next_slot_get(instance,
   122ea:	e9d0 e101 	ldrd	lr, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   122ee:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   122f2:	f8d0 800c 	ldr.w	r8, [r0, #12]
	node = instance->nodes;
   122f6:	f8db c000 	ldr.w	ip, [fp]
	    (*ticks_current != instance->ticks_current)) {
   122fa:	f8db 4014 	ldr.w	r4, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   122fe:	2aff      	cmp	r2, #255	; 0xff
   12300:	d002      	beq.n	12308 <ticker_job+0x7dc>
   12302:	680b      	ldr	r3, [r1, #0]
   12304:	42a3      	cmp	r3, r4
   12306:	d02b      	beq.n	12360 <ticker_job+0x834>
		_ticker_id_head = instance->ticker_id_head;
   12308:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   1230c:	600c      	str	r4, [r1, #0]
		_ticks_to_expire = 0U;
   1230e:	2400      	movs	r4, #0
	while (_ticker_id_head != TICKER_NULL) {
   12310:	2aff      	cmp	r2, #255	; 0xff
   12312:	d012      	beq.n	1233a <ticker_job+0x80e>
   12314:	4681      	mov	r9, r0
   12316:	e005      	b.n	12324 <ticker_job+0x7f8>
		_ticker_id_head = ticker->next;
   12318:	f81c 2003 	ldrb.w	r2, [ip, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   1231c:	6889      	ldr	r1, [r1, #8]
	while (_ticker_id_head != TICKER_NULL) {
   1231e:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   12320:	440c      	add	r4, r1
	while (_ticker_id_head != TICKER_NULL) {
   12322:	d01b      	beq.n	1235c <ticker_job+0x830>
		ticker = &node[_ticker_id_head];
   12324:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   12328:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
   1232c:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   1232e:	6988      	ldr	r0, [r1, #24]
   12330:	2800      	cmp	r0, #0
   12332:	d0f1      	beq.n	12318 <ticker_job+0x7ec>
		_ticks_to_expire += ticker->ticks_to_expire;
   12334:	688b      	ldr	r3, [r1, #8]
   12336:	4648      	mov	r0, r9
   12338:	441c      	add	r4, r3
	*ticker_id_head = _ticker_id_head;
   1233a:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   1233e:	f8c8 4000 	str.w	r4, [r8]
		fp_op_func = uop->fp_op_func;
   12342:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   12344:	6285      	str	r5, [r0, #40]	; 0x28
		break;
   12346:	e7ca      	b.n	122de <ticker_job+0x7b2>
			uop->status = TICKER_STATUS_FAILURE;
   12348:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   1234c:	e7c6      	b.n	122dc <ticker_job+0x7b0>
	while (count_user--) {
   1234e:	9a00      	ldr	r2, [sp, #0]
   12350:	42ba      	cmp	r2, r7
   12352:	f1a7 0308 	sub.w	r3, r7, #8
   12356:	d00e      	beq.n	12376 <ticker_job+0x84a>
   12358:	461f      	mov	r7, r3
   1235a:	e791      	b.n	12280 <ticker_job+0x754>
   1235c:	4648      	mov	r0, r9
   1235e:	e7ec      	b.n	1233a <ticker_job+0x80e>
		ticker = &node[_ticker_id_head];
   12360:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12364:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   12366:	f8d8 4000 	ldr.w	r4, [r8]
		_ticker_id_head = ticker->next;
   1236a:	f81c 2003 	ldrb.w	r2, [ip, r3]
   1236e:	e7cf      	b.n	12310 <ticker_job+0x7e4>
	if (!pending) {
   12370:	9b08      	ldr	r3, [sp, #32]
   12372:	2b00      	cmp	r3, #0
   12374:	d055      	beq.n	12422 <ticker_job+0x8f6>
	if (flag_compare_update) {
   12376:	9b06      	ldr	r3, [sp, #24]
   12378:	2b00      	cmp	r3, #0
   1237a:	f47f ad8e 	bne.w	11e9a <ticker_job+0x36e>
	if (instance->worker_trigger) {
   1237e:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   12382:	2200      	movs	r2, #0
   12384:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   12388:	b12b      	cbz	r3, 12396 <ticker_job+0x86a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1238a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1238e:	465b      	mov	r3, fp
   12390:	2201      	movs	r2, #1
   12392:	2103      	movs	r1, #3
   12394:	e466      	b.n	11c64 <ticker_job+0x138>
}
   12396:	b00d      	add	sp, #52	; 0x34
   12398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1239c:	4770      	bx	lr
					while (ticks_to_expire <
   1239e:	458a      	cmp	sl, r1
   123a0:	f67f af40 	bls.w	12224 <ticker_job+0x6f8>
   123a4:	1c68      	adds	r0, r5, #1
   123a6:	9405      	str	r4, [sp, #20]
   123a8:	4604      	mov	r4, r0
   123aa:	e005      	b.n	123b8 <ticker_job+0x88c>
   123ac:	4628      	mov	r0, r5
						ticks_to_expire +=
   123ae:	4401      	add	r1, r0
						lazy++;
   123b0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   123b2:	458a      	cmp	sl, r1
						lazy++;
   123b4:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   123b6:	d910      	bls.n	123da <ticker_job+0x8ae>
	ticker->remainder_current += ticker->remainder_periodic;
   123b8:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   123ba:	eb03 0008 	add.w	r0, r3, r8
   123be:	4548      	cmp	r0, r9
   123c0:	d8f4      	bhi.n	123ac <ticker_job+0x880>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   123c2:	4620      	mov	r0, r4
   123c4:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   123c8:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   123ca:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   123ce:	3201      	adds	r2, #1
					while (ticks_to_expire <
   123d0:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   123d2:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   123d6:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   123d8:	d8ee      	bhi.n	123b8 <ticker_job+0x88c>
   123da:	9c05      	ldr	r4, [sp, #20]
   123dc:	6263      	str	r3, [r4, #36]	; 0x24
   123de:	e721      	b.n	12224 <ticker_job+0x6f8>
	ticker_id_old_head = instance->ticker_id_head;
   123e0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   123e4:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   123e8:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   123ea:	f8db 3000 	ldr.w	r3, [fp]
   123ee:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   123f0:	f8db 3004 	ldr.w	r3, [fp, #4]
   123f4:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   123f6:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   123f8:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   123fa:	b2db      	uxtb	r3, r3
   123fc:	2900      	cmp	r1, #0
   123fe:	d03f      	beq.n	12480 <ticker_job+0x954>
		flag_elapsed = 0U;
   12400:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   12402:	9203      	str	r2, [sp, #12]
   12404:	f7ff bbcd 	b.w	11ba2 <ticker_job+0x76>
				node->ticks_to_expire -=
   12408:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   1240a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1240e:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   12412:	f43f aed2 	beq.w	121ba <ticker_job+0x68e>
   12416:	fa0f f18e 	sxth.w	r1, lr
   1241a:	e6c1      	b.n	121a0 <ticker_job+0x674>
			ticker->ticks_to_expire -= ticks_elapsed;
   1241c:	1bdb      	subs	r3, r3, r7
   1241e:	60a3      	str	r3, [r4, #8]
			break;
   12420:	e5f3      	b.n	1200a <ticker_job+0x4de>
	count_user = instance->count_user;
   12422:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   12426:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   1242a:	1e5f      	subs	r7, r3, #1
   1242c:	b2ff      	uxtb	r7, r7
   1242e:	2b00      	cmp	r3, #0
   12430:	f47f af20 	bne.w	12274 <ticker_job+0x748>
   12434:	e79f      	b.n	12376 <ticker_job+0x84a>
		if (cntr_stop() == 0) {
   12436:	f009 fdb5 	bl	1bfa4 <cntr_stop>
   1243a:	2800      	cmp	r0, #0
   1243c:	d19f      	bne.n	1237e <ticker_job+0x852>
			instance->ticks_slot_previous = 0U;
   1243e:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   12442:	f009 fdd5 	bl	1bff0 <cntr_cnt_get>
   12446:	f8cb 0014 	str.w	r0, [fp, #20]
   1244a:	e798      	b.n	1237e <ticker_job+0x852>
		instance->ticker_id_head = ticker->next;
   1244c:	9a00      	ldr	r2, [sp, #0]
   1244e:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   12450:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   12454:	5d52      	ldrb	r2, [r2, r5]
   12456:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1245a:	6862      	ldr	r2, [r4, #4]
   1245c:	2a00      	cmp	r2, #0
   1245e:	f43f adc0 	beq.w	11fe2 <ticker_job+0x4b6>
   12462:	e616      	b.n	12092 <ticker_job+0x566>
		ticks_current = cntr_cnt_get();
   12464:	f009 fdc4 	bl	1bff0 <cntr_cnt_get>
   12468:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   1246a:	f009 fd8b 	bl	1bf84 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1246e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   12472:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   12474:	2800      	cmp	r0, #0
   12476:	f47f ad1b 	bne.w	11eb0 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   1247a:	f8cb 4014 	str.w	r4, [fp, #20]
   1247e:	e517      	b.n	11eb0 <ticker_job+0x384>
	insert_head = TICKER_NULL;
   12480:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   12482:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   12484:	9301      	str	r3, [sp, #4]
   12486:	e4f8      	b.n	11e7a <ticker_job+0x34e>

00012488 <ticker_init>:
{
   12488:	b4f0      	push	{r4, r5, r6, r7}
   1248a:	9d04      	ldr	r5, [sp, #16]
   1248c:	f89d 7014 	ldrb.w	r7, [sp, #20]
   12490:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   12492:	2800      	cmp	r0, #0
   12494:	d137      	bne.n	12506 <ticker_init+0x7e>
	instance->count_node = count_node;
   12496:	4e1d      	ldr	r6, [pc, #116]	; (1250c <ticker_init+0x84>)
	while (count_node--) {
   12498:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   1249c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   1249e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   124a0:	fa5f fc8c 	uxtb.w	ip, ip
   124a4:	b149      	cbz	r1, 124ba <ticker_init+0x32>
   124a6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   124aa:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   124ae:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   124b0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   124b4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   124b8:	d1f9      	bne.n	124ae <ticker_init+0x26>
	while (count_user--) {
   124ba:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   124bc:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   124be:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   124c0:	b2d2      	uxtb	r2, r2
   124c2:	b183      	cbz	r3, 124e6 <ticker_init+0x5e>
   124c4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   124c8:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   124ca:	4610      	mov	r0, r2
   124cc:	f812 3908 	ldrb.w	r3, [r2], #-8
   124d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   124d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   124d8:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   124da:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   124de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   124e2:	b2df      	uxtb	r7, r3
	while (count_user--) {
   124e4:	d1f0      	bne.n	124c8 <ticker_init+0x40>
	if (count_op) {
   124e6:	b977      	cbnz	r7, 12506 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   124e8:	9a07      	ldr	r2, [sp, #28]
   124ea:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   124ec:	9a08      	ldr	r2, [sp, #32]
   124ee:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   124f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   124f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   124f6:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   124f8:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   124fa:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   124fe:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   12500:	8177      	strh	r7, [r6, #10]
}
   12502:	bcf0      	pop	{r4, r5, r6, r7}
   12504:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   12506:	2001      	movs	r0, #1
}
   12508:	bcf0      	pop	{r4, r5, r6, r7}
   1250a:	4770      	bx	lr
   1250c:	20002370 	.word	0x20002370

00012510 <ticker_trigger>:
	if (instance->sched_cb) {
   12510:	4b0a      	ldr	r3, [pc, #40]	; (1253c <ticker_trigger+0x2c>)
   12512:	222c      	movs	r2, #44	; 0x2c
   12514:	fb02 3200 	mla	r2, r2, r0, r3
{
   12518:	b410      	push	{r4}
	if (instance->sched_cb) {
   1251a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   1251c:	b15c      	cbz	r4, 12536 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1251e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   12522:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   12526:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1252a:	46a4      	mov	ip, r4
   1252c:	2201      	movs	r2, #1
}
   1252e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   12530:	2103      	movs	r1, #3
   12532:	2002      	movs	r0, #2
   12534:	4760      	bx	ip
}
   12536:	bc10      	pop	{r4}
   12538:	4770      	bx	lr
   1253a:	bf00      	nop
   1253c:	20002370 	.word	0x20002370

00012540 <ticker_start_ext>:
{
   12540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12544:	4e28      	ldr	r6, [pc, #160]	; (125e8 <ticker_start_ext+0xa8>)
{
   12546:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1254a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1254c:	252c      	movs	r5, #44	; 0x2c
   1254e:	fb05 6504 	mla	r5, r5, r4, r6
{
   12552:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   12554:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   12558:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   1255c:	6869      	ldr	r1, [r5, #4]
   1255e:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   12562:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   12566:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   1256a:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1256e:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   12570:	f10e 0c01 	add.w	ip, lr, #1
   12574:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   12578:	4564      	cmp	r4, ip
   1257a:	bf98      	it	ls
   1257c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   12580:	4561      	cmp	r1, ip
   12582:	d02e      	beq.n	125e2 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   12584:	6879      	ldr	r1, [r7, #4]
   12586:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1258a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1258e:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   12592:	f04f 0904 	mov.w	r9, #4
   12596:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1259a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1259c:	9b08      	ldr	r3, [sp, #32]
   1259e:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   125a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   125a2:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   125a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   125a6:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   125a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   125aa:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   125ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   125ae:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   125b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   125b2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   125b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   125b6:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   125b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   125ba:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   125bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   125be:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   125c0:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   125c2:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   125c4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   125c6:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   125ca:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   125ce:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   125d2:	4798      	blx	r3
   125d4:	4633      	mov	r3, r6
   125d6:	4649      	mov	r1, r9
   125d8:	2200      	movs	r2, #0
   125da:	47a8      	blx	r5
	return user_op->status;
   125dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   125de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   125e2:	2001      	movs	r0, #1
}
   125e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   125e8:	20002370 	.word	0x20002370

000125ec <ticker_start>:
{
   125ec:	b510      	push	{r4, lr}
   125ee:	b08a      	sub	sp, #40	; 0x28
   125f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   125f2:	9400      	str	r4, [sp, #0]
{
   125f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   125f6:	9401      	str	r4, [sp, #4]
{
   125f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   125fa:	9402      	str	r4, [sp, #8]
{
   125fc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12600:	9403      	str	r4, [sp, #12]
{
   12602:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12604:	9404      	str	r4, [sp, #16]
{
   12606:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12608:	9405      	str	r4, [sp, #20]
{
   1260a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1260c:	9406      	str	r4, [sp, #24]
{
   1260e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12610:	9407      	str	r4, [sp, #28]
{
   12612:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12614:	9408      	str	r4, [sp, #32]
   12616:	2400      	movs	r4, #0
   12618:	9409      	str	r4, [sp, #36]	; 0x24
   1261a:	f7ff ff91 	bl	12540 <ticker_start_ext>
}
   1261e:	b00a      	add	sp, #40	; 0x28
   12620:	bd10      	pop	{r4, pc}
   12622:	bf00      	nop

00012624 <ticker_update_ext>:
{
   12624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12628:	4d28      	ldr	r5, [pc, #160]	; (126cc <ticker_update_ext+0xa8>)
{
   1262a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1262e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   12632:	4604      	mov	r4, r0
   12634:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   12636:	212c      	movs	r1, #44	; 0x2c
   12638:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1263c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   12640:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   12644:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   12648:	684c      	ldr	r4, [r1, #4]
   1264a:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1264e:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   12652:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   12656:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   12658:	f10e 0c01 	add.w	ip, lr, #1
   1265c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   12660:	45e1      	cmp	r9, ip
   12662:	bf98      	it	ls
   12664:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   12668:	4564      	cmp	r4, ip
{
   1266a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1266e:	d02a      	beq.n	126c6 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   12670:	f8d6 a004 	ldr.w	sl, [r6, #4]
   12674:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   12678:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1267c:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   12680:	f04f 0b05 	mov.w	fp, #5
   12684:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   12688:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1268a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1268c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1268e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12690:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   12692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12694:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   12696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12698:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1269a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1269c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1269e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   126a0:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   126a2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   126a4:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   126a6:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   126aa:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   126ae:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   126b2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   126b6:	4798      	blx	r3
   126b8:	462b      	mov	r3, r5
   126ba:	2200      	movs	r2, #0
   126bc:	2104      	movs	r1, #4
   126be:	47b0      	blx	r6
	return user_op->status;
   126c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   126c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   126c6:	2001      	movs	r0, #1
}
   126c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126cc:	20002370 	.word	0x20002370

000126d0 <ticker_update>:
{
   126d0:	b510      	push	{r4, lr}
   126d2:	b088      	sub	sp, #32
   126d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126d6:	9400      	str	r4, [sp, #0]
{
   126d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126da:	9401      	str	r4, [sp, #4]
{
   126dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126de:	9402      	str	r4, [sp, #8]
{
   126e0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126e4:	9403      	str	r4, [sp, #12]
{
   126e6:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126ea:	9404      	str	r4, [sp, #16]
{
   126ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126ee:	9405      	str	r4, [sp, #20]
{
   126f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   126f2:	9406      	str	r4, [sp, #24]
   126f4:	2400      	movs	r4, #0
   126f6:	9407      	str	r4, [sp, #28]
   126f8:	f7ff ff94 	bl	12624 <ticker_update_ext>
}
   126fc:	b008      	add	sp, #32
   126fe:	bd10      	pop	{r4, pc}

00012700 <ticker_stop>:
{
   12700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12704:	4c1e      	ldr	r4, [pc, #120]	; (12780 <ticker_stop+0x80>)
{
   12706:	4684      	mov	ip, r0
   12708:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1270a:	212c      	movs	r1, #44	; 0x2c
   1270c:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   12710:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   12714:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   12718:	684d      	ldr	r5, [r1, #4]
   1271a:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   1271e:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   12722:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   12726:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   12728:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   1272c:	f10e 0c01 	add.w	ip, lr, #1
   12730:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   12734:	4567      	cmp	r7, ip
   12736:	bf98      	it	ls
   12738:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   1273c:	4565      	cmp	r5, ip
   1273e:	d01c      	beq.n	1277a <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   12740:	6877      	ldr	r7, [r6, #4]
   12742:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   12746:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   1274a:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1274e:	f04f 0807 	mov.w	r8, #7
   12752:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   12756:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   12758:	9b06      	ldr	r3, [sp, #24]
   1275a:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1275c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1275e:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   12760:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   12762:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12766:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1276a:	4798      	blx	r3
   1276c:	4623      	mov	r3, r4
   1276e:	2200      	movs	r2, #0
   12770:	2104      	movs	r1, #4
   12772:	47b0      	blx	r6
	return user_op->status;
   12774:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   12776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1277a:	2001      	movs	r0, #1
}
   1277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12780:	20002370 	.word	0x20002370

00012784 <ticker_next_slot_get>:
{
   12784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12788:	4d20      	ldr	r5, [pc, #128]	; (1280c <ticker_next_slot_get+0x88>)
{
   1278a:	4684      	mov	ip, r0
   1278c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1278e:	212c      	movs	r1, #44	; 0x2c
   12790:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   12794:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   12798:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   1279c:	684c      	ldr	r4, [r1, #4]
   1279e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   127a2:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   127a6:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   127aa:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   127ac:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   127b0:	f10e 0c01 	add.w	ip, lr, #1
   127b4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   127b8:	4567      	cmp	r7, ip
   127ba:	bf98      	it	ls
   127bc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   127c0:	4564      	cmp	r4, ip
   127c2:	d020      	beq.n	12806 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   127c4:	6877      	ldr	r7, [r6, #4]
   127c6:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   127ca:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   127ce:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   127d2:	f64f 7802 	movw	r8, #65282	; 0xff02
   127d6:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   127da:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   127de:	9b06      	ldr	r3, [sp, #24]
   127e0:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   127e2:	9b07      	ldr	r3, [sp, #28]
   127e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   127e6:	9b08      	ldr	r3, [sp, #32]
   127e8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   127ea:	2302      	movs	r3, #2
   127ec:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   127ee:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   127f2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   127f6:	4798      	blx	r3
   127f8:	462b      	mov	r3, r5
   127fa:	2200      	movs	r2, #0
   127fc:	2104      	movs	r1, #4
   127fe:	47b0      	blx	r6
	return user_op->status;
   12800:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   12802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12806:	2001      	movs	r0, #1
}
   12808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1280c:	20002370 	.word	0x20002370

00012810 <ticker_job_sched>:
{
   12810:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12812:	4d0a      	ldr	r5, [pc, #40]	; (1283c <ticker_job_sched+0x2c>)
   12814:	222c      	movs	r2, #44	; 0x2c
   12816:	fb02 5200 	mla	r2, r2, r0, r5
   1281a:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   1281e:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12820:	4608      	mov	r0, r1
   12822:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   12824:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12828:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1282c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12830:	46b4      	mov	ip, r6
   12832:	2200      	movs	r2, #0
}
   12834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12838:	2104      	movs	r1, #4
   1283a:	4760      	bx	ip
   1283c:	20002370 	.word	0x20002370

00012840 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   12840:	f009 bbd6 	b.w	1bff0 <cntr_cnt_get>

00012844 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12844:	1a40      	subs	r0, r0, r1
}
   12846:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1284a:	4770      	bx	lr

0001284c <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   1284c:	b570      	push	{r4, r5, r6, lr}
   1284e:	4604      	mov	r4, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   12850:	2000      	movs	r0, #0
{
   12852:	460e      	mov	r6, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   12854:	f003 f85a 	bl	1590c <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   12858:	f010 0506 	ands.w	r5, r0, #6
   1285c:	d10e      	bne.n	1287c <ll_addr_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1285e:	b134      	cbz	r4, 1286e <ll_addr_set+0x22>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   12860:	2206      	movs	r2, #6
   12862:	4631      	mov	r1, r6
   12864:	4806      	ldr	r0, [pc, #24]	; (12880 <ll_addr_set+0x34>)
   12866:	f012 f89a 	bl	2499e <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   1286a:	4628      	mov	r0, r5
}
   1286c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   1286e:	2206      	movs	r2, #6
   12870:	4631      	mov	r1, r6
   12872:	4804      	ldr	r0, [pc, #16]	; (12884 <ll_addr_set+0x38>)
   12874:	f012 f893 	bl	2499e <memcpy>
	return 0;
   12878:	4620      	mov	r0, r4
}
   1287a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1287c:	200c      	movs	r0, #12
}
   1287e:	bd70      	pop	{r4, r5, r6, pc}
   12880:	200023a4 	.word	0x200023a4
   12884:	2000239c 	.word	0x2000239c

00012888 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   12888:	2801      	cmp	r0, #1
{
   1288a:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1288c:	d805      	bhi.n	1289a <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   1288e:	4a04      	ldr	r2, [pc, #16]	; (128a0 <ll_addr_get+0x18>)
   12890:	4804      	ldr	r0, [pc, #16]	; (128a4 <ll_addr_get+0x1c>)
   12892:	2b00      	cmp	r3, #0
   12894:	bf18      	it	ne
   12896:	4610      	movne	r0, r2
   12898:	4770      	bx	lr
		return NULL;
   1289a:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   1289c:	4770      	bx	lr
   1289e:	bf00      	nop
   128a0:	200023a4 	.word	0x200023a4
   128a4:	2000239c 	.word	0x2000239c

000128a8 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   128a8:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   128aa:	b510      	push	{r4, lr}
   128ac:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   128ae:	d80b      	bhi.n	128c8 <ll_addr_read+0x20>
	if (addr_type) {
   128b0:	4608      	mov	r0, r1
		return rnd_addr;
   128b2:	4c07      	ldr	r4, [pc, #28]	; (128d0 <ll_addr_read+0x28>)
   128b4:	4907      	ldr	r1, [pc, #28]	; (128d4 <ll_addr_read+0x2c>)
   128b6:	2b00      	cmp	r3, #0
   128b8:	bf18      	it	ne
   128ba:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   128bc:	2206      	movs	r2, #6
   128be:	4621      	mov	r1, r4
   128c0:	f012 f86d 	bl	2499e <memcpy>
	}

	return addr;
}
   128c4:	4620      	mov	r0, r4
   128c6:	bd10      	pop	{r4, pc}
		return NULL;
   128c8:	2400      	movs	r4, #0
}
   128ca:	4620      	mov	r0, r4
   128cc:	bd10      	pop	{r4, pc}
   128ce:	bf00      	nop
   128d0:	2000239c 	.word	0x2000239c
   128d4:	200023a4 	.word	0x200023a4

000128d8 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   128d8:	2802      	cmp	r0, #2
   128da:	d001      	beq.n	128e0 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   128dc:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   128de:	4770      	bx	lr
{
   128e0:	b538      	push	{r3, r4, r5, lr}
   128e2:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   128e4:	4608      	mov	r0, r1
   128e6:	461d      	mov	r5, r3
   128e8:	f003 fc90 	bl	1620c <ll_connected_get>
			if (!conn) {
   128ec:	b118      	cbz	r0, 128f6 <ll_tx_pwr_lvl_get+0x1e>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   128ee:	2308      	movs	r3, #8
   128f0:	702b      	strb	r3, [r5, #0]
	return BT_HCI_ERR_SUCCESS;
   128f2:	2000      	movs	r0, #0
}
   128f4:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   128f6:	4620      	mov	r0, r4
}
   128f8:	bd38      	pop	{r3, r4, r5, pc}
   128fa:	bf00      	nop

000128fc <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   128fc:	2308      	movs	r3, #8
   128fe:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   12900:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   12902:	4770      	bx	lr

00012904 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   12904:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   12906:	4802      	ldr	r0, [pc, #8]	; (12910 <hci_driver_init+0xc>)
   12908:	f7f7 ff18 	bl	a73c <bt_hci_driver_register>

	return 0;
}
   1290c:	2000      	movs	r0, #0
   1290e:	bd08      	pop	{r3, pc}
   12910:	00029310 	.word	0x00029310

00012914 <hci_driver_send>:
{
   12914:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   12916:	8983      	ldrh	r3, [r0, #12]
{
   12918:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   1291a:	2b00      	cmp	r3, #0
   1291c:	d03c      	beq.n	12998 <hci_driver_send+0x84>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1291e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   12920:	4604      	mov	r4, r0
   12922:	b32b      	cbz	r3, 12970 <hci_driver_send+0x5c>
   12924:	2b02      	cmp	r3, #2
   12926:	d011      	beq.n	1294c <hci_driver_send+0x38>
		BT_ERR("Unknown HCI type %u", type);
   12928:	4922      	ldr	r1, [pc, #136]	; (129b4 <hci_driver_send+0xa0>)
   1292a:	2203      	movs	r2, #3
	switch (type) {
   1292c:	e9cd 1306 	strd	r1, r3, [sp, #24]
		BT_ERR("Unknown HCI type %u", type);
   12930:	9201      	str	r2, [sp, #4]
   12932:	9205      	str	r2, [sp, #20]
   12934:	4820      	ldr	r0, [pc, #128]	; (129b8 <hci_driver_send+0xa4>)
   12936:	2300      	movs	r3, #0
   12938:	aa05      	add	r2, sp, #20
   1293a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1293e:	f010 fd9a 	bl	23476 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   12942:	f06f 0515 	mvn.w	r5, #21
}
   12946:	4628      	mov	r0, r5
   12948:	b009      	add	sp, #36	; 0x24
   1294a:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   1294c:	a902      	add	r1, sp, #8
   1294e:	f000 ffdf 	bl	13910 <hci_acl_handle>
	if (evt) {
   12952:	9b02      	ldr	r3, [sp, #8]
	err = hci_acl_handle(buf, &evt);
   12954:	4605      	mov	r5, r0
	if (evt) {
   12956:	b113      	cbz	r3, 1295e <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   12958:	4618      	mov	r0, r3
   1295a:	f7f7 fed1 	bl	a700 <bt_recv_prio>
	if (!err) {
   1295e:	2d00      	cmp	r5, #0
   12960:	d1f1      	bne.n	12946 <hci_driver_send+0x32>
		net_buf_unref(buf);
   12962:	4620      	mov	r0, r4
   12964:	f00a fb00 	bl	1cf68 <net_buf_unref>
   12968:	2500      	movs	r5, #0
}
   1296a:	4628      	mov	r0, r5
   1296c:	b009      	add	sp, #36	; 0x24
   1296e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   12970:	a902      	add	r1, sp, #8
	struct node_rx_pdu *node_rx = NULL;
   12972:	9302      	str	r3, [sp, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   12974:	f000 fac8 	bl	12f08 <hci_cmd_handle>
	if (evt) {
   12978:	2800      	cmp	r0, #0
   1297a:	d0f2      	beq.n	12962 <hci_driver_send+0x4e>
		bt_recv_prio(evt);
   1297c:	f7f7 fec0 	bl	a700 <bt_recv_prio>
		if (node_rx) {
   12980:	9d02      	ldr	r5, [sp, #8]
   12982:	2d00      	cmp	r5, #0
   12984:	d0ed      	beq.n	12962 <hci_driver_send+0x4e>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12986:	4628      	mov	r0, r5
   12988:	f001 fd26 	bl	143d8 <hci_get_class>
   1298c:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1298e:	9902      	ldr	r1, [sp, #8]
   12990:	480a      	ldr	r0, [pc, #40]	; (129bc <hci_driver_send+0xa8>)
   12992:	f015 f9a1 	bl	27cd8 <k_queue_append>
	if (!err) {
   12996:	e7e4      	b.n	12962 <hci_driver_send+0x4e>
		BT_ERR("Empty HCI packet");
   12998:	2202      	movs	r2, #2
   1299a:	4909      	ldr	r1, [pc, #36]	; (129c0 <hci_driver_send+0xac>)
   1299c:	9106      	str	r1, [sp, #24]
   1299e:	9201      	str	r2, [sp, #4]
   129a0:	9205      	str	r2, [sp, #20]
   129a2:	4805      	ldr	r0, [pc, #20]	; (129b8 <hci_driver_send+0xa4>)
   129a4:	aa05      	add	r2, sp, #20
   129a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   129aa:	f010 fd64 	bl	23476 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   129ae:	f06f 0515 	mvn.w	r5, #21
   129b2:	e7c8      	b.n	12946 <hci_driver_send+0x32>
   129b4:	00029264 	.word	0x00029264
   129b8:	000288d8 	.word	0x000288d8
   129bc:	20000a4c 	.word	0x20000a4c
   129c0:	00029250 	.word	0x00029250

000129c4 <recv_thread>:
{
   129c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   129c6:	4e41      	ldr	r6, [pc, #260]	; (12acc <recv_thread+0x108>)
		LL_ASSERT(0);
   129c8:	4f41      	ldr	r7, [pc, #260]	; (12ad0 <recv_thread+0x10c>)
{
   129ca:	b083      	sub	sp, #12
   129cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129d4:	4630      	mov	r0, r6
   129d6:	f00e fddb 	bl	21590 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   129da:	2800      	cmp	r0, #0
   129dc:	d0f6      	beq.n	129cc <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   129de:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   129e0:	9001      	str	r0, [sp, #4]
	switch (class) {
   129e2:	2b04      	cmp	r3, #4
   129e4:	d821      	bhi.n	12a2a <recv_thread+0x66>
   129e6:	2b00      	cmp	r3, #0
   129e8:	d14b      	bne.n	12a82 <recv_thread+0xbe>
		LL_ASSERT(0);
   129ea:	493a      	ldr	r1, [pc, #232]	; (12ad4 <recv_thread+0x110>)
   129ec:	483a      	ldr	r0, [pc, #232]	; (12ad8 <recv_thread+0x114>)
   129ee:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   129f2:	463a      	mov	r2, r7
   129f4:	f00f fe86 	bl	22704 <printk>
   129f8:	4040      	eors	r0, r0
   129fa:	f380 8811 	msr	BASEPRI, r0
   129fe:	f04f 0003 	mov.w	r0, #3
   12a02:	df02      	svc	2
	node_rx->hdr.next = NULL;
   12a04:	9b01      	ldr	r3, [sp, #4]
   12a06:	2200      	movs	r2, #0
   12a08:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12a0a:	a801      	add	r0, sp, #4
   12a0c:	f002 f91e 	bl	14c4c <ll_rx_mem_release>
   12a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a18:	4630      	mov	r0, r6
   12a1a:	f00e fdb9 	bl	21590 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   12a1e:	2800      	cmp	r0, #0
   12a20:	d0d4      	beq.n	129cc <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   12a22:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   12a24:	9001      	str	r0, [sp, #4]
	switch (class) {
   12a26:	2b04      	cmp	r3, #4
   12a28:	d9dd      	bls.n	129e6 <recv_thread+0x22>
   12a2a:	2b05      	cmp	r3, #5
   12a2c:	d1dd      	bne.n	129ea <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a36:	2003      	movs	r0, #3
   12a38:	f7f6 fc34 	bl	92a4 <bt_buf_get_rx>
   12a3c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   12a3e:	4621      	mov	r1, r4
   12a40:	9801      	ldr	r0, [sp, #4]
   12a42:	f001 f82f 	bl	13aa4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   12a46:	9b01      	ldr	r3, [sp, #4]
   12a48:	2200      	movs	r2, #0
   12a4a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12a4c:	a801      	add	r0, sp, #4
   12a4e:	f002 f8fd 	bl	14c4c <ll_rx_mem_release>
		while (buf) {
   12a52:	2c00      	cmp	r4, #0
   12a54:	d0ba      	beq.n	129cc <recv_thread+0x8>
			frag = net_buf_ref(buf);
   12a56:	4620      	mov	r0, r4
   12a58:	f014 faf4 	bl	27044 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   12a5c:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   12a5e:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   12a60:	2000      	movs	r0, #0
   12a62:	f014 fb15 	bl	27090 <net_buf_frag_del>
			if (frag->len) {
   12a66:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   12a68:	4604      	mov	r4, r0
				bt_recv(frag);
   12a6a:	4628      	mov	r0, r5
			if (frag->len) {
   12a6c:	b133      	cbz	r3, 12a7c <recv_thread+0xb8>
				bt_recv(frag);
   12a6e:	f7f7 fd8b 	bl	a588 <bt_recv>
	z_impl_k_yield();
   12a72:	f00f fa1d 	bl	21eb0 <z_impl_k_yield>
		while (buf) {
   12a76:	2c00      	cmp	r4, #0
   12a78:	d1ed      	bne.n	12a56 <recv_thread+0x92>
   12a7a:	e7a7      	b.n	129cc <recv_thread+0x8>
				net_buf_unref(frag);
   12a7c:	f00a fa74 	bl	1cf68 <net_buf_unref>
   12a80:	e7f7      	b.n	12a72 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   12a82:	2b02      	cmp	r3, #2
   12a84:	d013      	beq.n	12aae <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a8e:	2001      	movs	r0, #1
   12a90:	f7f6 fc08 	bl	92a4 <bt_buf_get_rx>
   12a94:	4604      	mov	r4, r0
		if (buf) {
   12a96:	b19c      	cbz	r4, 12ac0 <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
   12a98:	9801      	ldr	r0, [sp, #4]
   12a9a:	4621      	mov	r1, r4
   12a9c:	f001 f83c 	bl	13b18 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   12aa0:	9b01      	ldr	r3, [sp, #4]
   12aa2:	2200      	movs	r2, #0
   12aa4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12aa6:	a801      	add	r0, sp, #4
   12aa8:	f002 f8d0 	bl	14c4c <ll_rx_mem_release>
		while (buf) {
   12aac:	e7d3      	b.n	12a56 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   12aae:	2200      	movs	r2, #0
   12ab0:	2300      	movs	r3, #0
   12ab2:	2101      	movs	r1, #1
   12ab4:	2000      	movs	r0, #0
   12ab6:	f7f6 fc1f 	bl	92f8 <bt_buf_get_evt>
   12aba:	4604      	mov	r4, r0
		if (buf) {
   12abc:	2c00      	cmp	r4, #0
   12abe:	d1eb      	bne.n	12a98 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
   12ac0:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   12ac2:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   12ac4:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12ac6:	f002 f8c1 	bl	14c4c <ll_rx_mem_release>
		while (buf) {
   12aca:	e77f      	b.n	129cc <recv_thread+0x8>
   12acc:	20000a4c 	.word	0x20000a4c
   12ad0:	00029278 	.word	0x00029278
   12ad4:	000292b8 	.word	0x000292b8
   12ad8:	00029220 	.word	0x00029220

00012adc <prio_recv_thread>:
{
   12adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   12ae0:	4f2e      	ldr	r7, [pc, #184]	; (12b9c <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   12ae2:	4e2f      	ldr	r6, [pc, #188]	; (12ba0 <prio_recv_thread+0xc4>)
{
   12ae4:	b082      	sub	sp, #8
   12ae6:	e00c      	b.n	12b02 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12ae8:	f7f6 fc06 	bl	92f8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12aec:	4622      	mov	r2, r4
   12aee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12af2:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12af4:	f001 fc58 	bl	143a8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   12af8:	4620      	mov	r0, r4
   12afa:	f7f7 fe01 	bl	a700 <bt_recv_prio>
	z_impl_k_yield();
   12afe:	f00f f9d7 	bl	21eb0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12b02:	f10d 0102 	add.w	r1, sp, #2
   12b06:	a801      	add	r0, sp, #4
   12b08:	f001 ff4a 	bl	149a0 <ll_rx_get>
   12b0c:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b16:	2100      	movs	r1, #0
   12b18:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12b1a:	2c00      	cmp	r4, #0
   12b1c:	d1e4      	bne.n	12ae8 <prio_recv_thread+0xc>
		if (node_rx) {
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	b1b3      	cbz	r3, 12b50 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   12b22:	f002 f81f 	bl	14b64 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12b26:	f8dd 8004 	ldr.w	r8, [sp, #4]
   12b2a:	4640      	mov	r0, r8
   12b2c:	f001 fc54 	bl	143d8 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   12b30:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12b32:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   12b36:	796b      	ldrb	r3, [r5, #5]
   12b38:	2b03      	cmp	r3, #3
   12b3a:	d102      	bne.n	12b42 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   12b3c:	792b      	ldrb	r3, [r5, #4]
   12b3e:	2b17      	cmp	r3, #23
   12b40:	d00e      	beq.n	12b60 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   12b42:	4629      	mov	r1, r5
   12b44:	4630      	mov	r0, r6
   12b46:	f015 f8c7 	bl	27cd8 <k_queue_append>
		if (iso_received || node_rx) {
   12b4a:	9b01      	ldr	r3, [sp, #4]
   12b4c:	2b00      	cmp	r3, #0
   12b4e:	d1d8      	bne.n	12b02 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   12b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b58:	4638      	mov	r0, r7
   12b5a:	f00e fd73 	bl	21644 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12b5e:	e7d0      	b.n	12b02 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   12b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b64:	4621      	mov	r1, r4
   12b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b6a:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   12b6c:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   12b70:	f7f6 fbc2 	bl	92f8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   12b74:	4641      	mov	r1, r8
   12b76:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   12b78:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   12b7a:	f105 001c 	add.w	r0, r5, #28
   12b7e:	f000 ff69 	bl	13a54 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   12b82:	4640      	mov	r0, r8
   12b84:	f000 ff86 	bl	13a94 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   12b88:	4620      	mov	r0, r4
			if (buf) {
   12b8a:	b124      	cbz	r4, 12b96 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   12b8c:	f7f7 fdb8 	bl	a700 <bt_recv_prio>
					net_buf_unref(buf);
   12b90:	4620      	mov	r0, r4
   12b92:	f00a f9e9 	bl	1cf68 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   12b96:	9d01      	ldr	r5, [sp, #4]
   12b98:	e7d3      	b.n	12b42 <prio_recv_thread+0x66>
   12b9a:	bf00      	nop
   12b9c:	20000a1c 	.word	0x20000a1c
   12ba0:	20000a4c 	.word	0x20000a4c

00012ba4 <hci_driver_open>:
{
   12ba4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   12ba6:	4822      	ldr	r0, [pc, #136]	; (12c30 <hci_driver_open+0x8c>)
{
   12ba8:	b090      	sub	sp, #64	; 0x40
	err = ll_init(&sem_prio_recv);
   12baa:	f002 fc7b 	bl	154a4 <ll_init>
	if (err) {
   12bae:	4604      	mov	r4, r0
   12bb0:	bb70      	cbnz	r0, 12c10 <hci_driver_open+0x6c>
	hci_init(NULL);
   12bb2:	f001 fc27 	bl	14404 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   12bb6:	2600      	movs	r6, #0
   12bb8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12bba:	f06f 0209 	mvn.w	r2, #9
   12bbe:	e9cd 2403 	strd	r2, r4, [sp, #12]
   12bc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12bc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12bca:	4b1a      	ldr	r3, [pc, #104]	; (12c34 <hci_driver_open+0x90>)
   12bcc:	491a      	ldr	r1, [pc, #104]	; (12c38 <hci_driver_open+0x94>)
   12bce:	9400      	str	r4, [sp, #0]
   12bd0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   12bd4:	4819      	ldr	r0, [pc, #100]	; (12c3c <hci_driver_open+0x98>)
   12bd6:	f00e fb7d 	bl	212d4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12bda:	4919      	ldr	r1, [pc, #100]	; (12c40 <hci_driver_open+0x9c>)
   12bdc:	4817      	ldr	r0, [pc, #92]	; (12c3c <hci_driver_open+0x98>)
   12bde:	f014 ffe2 	bl	27ba6 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12be2:	f06f 0207 	mvn.w	r2, #7
   12be6:	e9cd 2403 	strd	r2, r4, [sp, #12]
   12bea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12bee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12bf2:	4b14      	ldr	r3, [pc, #80]	; (12c44 <hci_driver_open+0xa0>)
   12bf4:	4914      	ldr	r1, [pc, #80]	; (12c48 <hci_driver_open+0xa4>)
   12bf6:	9400      	str	r4, [sp, #0]
   12bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12bfc:	4813      	ldr	r0, [pc, #76]	; (12c4c <hci_driver_open+0xa8>)
   12bfe:	f00e fb69 	bl	212d4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12c02:	4913      	ldr	r1, [pc, #76]	; (12c50 <hci_driver_open+0xac>)
   12c04:	4811      	ldr	r0, [pc, #68]	; (12c4c <hci_driver_open+0xa8>)
   12c06:	f014 ffce 	bl	27ba6 <z_impl_k_thread_name_set>
}
   12c0a:	4620      	mov	r0, r4
   12c0c:	b010      	add	sp, #64	; 0x40
   12c0e:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   12c10:	4a10      	ldr	r2, [pc, #64]	; (12c54 <hci_driver_open+0xb0>)
   12c12:	2303      	movs	r3, #3
   12c14:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
   12c18:	9309      	str	r3, [sp, #36]	; 0x24
   12c1a:	930d      	str	r3, [sp, #52]	; 0x34
   12c1c:	480e      	ldr	r0, [pc, #56]	; (12c58 <hci_driver_open+0xb4>)
   12c1e:	2300      	movs	r3, #0
   12c20:	aa0d      	add	r2, sp, #52	; 0x34
   12c22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c26:	f010 fc26 	bl	23476 <z_impl_z_log_msg2_static_create>
}
   12c2a:	4620      	mov	r0, r4
   12c2c:	b010      	add	sp, #64	; 0x40
   12c2e:	bdd0      	pop	{r4, r6, r7, pc}
   12c30:	20000a1c 	.word	0x20000a1c
   12c34:	00012add 	.word	0x00012add
   12c38:	20005de0 	.word	0x20005de0
   12c3c:	20001898 	.word	0x20001898
   12c40:	000292dc 	.word	0x000292dc
   12c44:	000129c5 	.word	0x000129c5
   12c48:	20005fc0 	.word	0x20005fc0
   12c4c:	20001918 	.word	0x20001918
   12c50:	000292e8 	.word	0x000292e8
   12c54:	000292bc 	.word	0x000292bc
   12c58:	000288d8 	.word	0x000288d8

00012c5c <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   12c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   12c60:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 12d0c <dup_found.part.0+0xb0>
   12c64:	f8d9 3000 	ldr.w	r3, [r9]
   12c68:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   12c6a:	4680      	mov	r8, r0
   12c6c:	460f      	mov	r7, r1
   12c6e:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   12c70:	dd12      	ble.n	12c98 <dup_found.part.0+0x3c>
   12c72:	4c27      	ldr	r4, [pc, #156]	; (12d10 <dup_found.part.0+0xb4>)
   12c74:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   12c76:	4621      	mov	r1, r4
   12c78:	2206      	movs	r2, #6
   12c7a:	4630      	mov	r0, r6
   12c7c:	f011 fe7e 	bl	2497c <memcmp>
   12c80:	b918      	cbnz	r0, 12c8a <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   12c82:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   12c86:	42bb      	cmp	r3, r7
   12c88:	d029      	beq.n	12cde <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
   12c8a:	f8d9 3000 	ldr.w	r3, [r9]
   12c8e:	3501      	adds	r5, #1
   12c90:	429d      	cmp	r5, r3
   12c92:	f104 0408 	add.w	r4, r4, #8
   12c96:	dbee      	blt.n	12c76 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   12c98:	4d1e      	ldr	r5, [pc, #120]	; (12d14 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   12c9a:	4c1f      	ldr	r4, [pc, #124]	; (12d18 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
   12c9c:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   12ca0:	4631      	mov	r1, r6
   12ca2:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   12ca6:	1c70      	adds	r0, r6, #1
   12ca8:	4420      	add	r0, r4
   12caa:	2206      	movs	r2, #6
   12cac:	f011 fe77 	bl	2499e <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   12cb0:	2301      	movs	r3, #1
   12cb2:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12cb6:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   12cba:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
   12cbe:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12cc0:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   12cc2:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12cc6:	dc1c      	bgt.n	12d02 <dup_found.part.0+0xa6>
			dup_count++;
   12cc8:	3301      	adds	r3, #1
			dup_curr = dup_count;
   12cca:	461a      	mov	r2, r3
			dup_count++;
   12ccc:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   12cd0:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
   12cd2:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12cd4:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   12cd6:	bf08      	it	eq
   12cd8:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
   12cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   12cde:	4b0e      	ldr	r3, [pc, #56]	; (12d18 <dup_found.part.0+0xbc>)
   12ce0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   12ce4:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   12ce6:	79ea      	ldrb	r2, [r5, #7]
   12ce8:	fa22 f308 	lsr.w	r3, r2, r8
   12cec:	f013 0301 	ands.w	r3, r3, #1
   12cf0:	d1f3      	bne.n	12cda <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
   12cf2:	fa00 f808 	lsl.w	r8, r0, r8
   12cf6:	ea42 0208 	orr.w	r2, r2, r8
   12cfa:	71ea      	strb	r2, [r5, #7]
		return false;
   12cfc:	4618      	mov	r0, r3
}
   12cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   12d02:	682a      	ldr	r2, [r5, #0]
   12d04:	3201      	adds	r2, #1
   12d06:	602a      	str	r2, [r5, #0]
   12d08:	e7e3      	b.n	12cd2 <dup_found.part.0+0x76>
   12d0a:	bf00      	nop
   12d0c:	200023b0 	.word	0x200023b0
   12d10:	200023b9 	.word	0x200023b9
   12d14:	200023b4 	.word	0x200023b4
   12d18:	200023b8 	.word	0x200023b8

00012d1c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   12d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d1e:	4c19      	ldr	r4, [pc, #100]	; (12d84 <le_remote_feat_complete+0x68>)
   12d20:	6864      	ldr	r4, [r4, #4]
   12d22:	00a4      	lsls	r4, r4, #2
   12d24:	d504      	bpl.n	12d30 <le_remote_feat_complete+0x14>
   12d26:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   12d28:	4a17      	ldr	r2, [pc, #92]	; (12d88 <le_remote_feat_complete+0x6c>)
   12d2a:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d2c:	0712      	lsls	r2, r2, #28
   12d2e:	d400      	bmi.n	12d32 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   12d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   12d32:	f103 0408 	add.w	r4, r3, #8
   12d36:	4607      	mov	r7, r0
   12d38:	460e      	mov	r6, r1
   12d3a:	4620      	mov	r0, r4
   12d3c:	2102      	movs	r1, #2
   12d3e:	f014 f9b3 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   12d42:	233e      	movs	r3, #62	; 0x3e
   12d44:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12d46:	230c      	movs	r3, #12
   12d48:	7043      	strb	r3, [r0, #1]
   12d4a:	2101      	movs	r1, #1
   12d4c:	4620      	mov	r0, r4
   12d4e:	f014 f9ab 	bl	270a8 <net_buf_simple_add>
   12d52:	4603      	mov	r3, r0
	me->subevent = subevt;
   12d54:	2204      	movs	r2, #4
   12d56:	701a      	strb	r2, [r3, #0]
   12d58:	4620      	mov	r0, r4
   12d5a:	210b      	movs	r1, #11
   12d5c:	f014 f9a4 	bl	270a8 <net_buf_simple_add>
		memcpy(&sep->features[0],
   12d60:	2208      	movs	r2, #8
	sep->status = status;
   12d62:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   12d64:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   12d68:	b92f      	cbnz	r7, 12d76 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   12d6a:	1d31      	adds	r1, r6, #4
   12d6c:	3003      	adds	r0, #3
}
   12d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   12d72:	f011 be14 	b.w	2499e <memcpy>
}
   12d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   12d7a:	2100      	movs	r1, #0
   12d7c:	3003      	adds	r0, #3
   12d7e:	f011 be19 	b.w	249b4 <memset>
   12d82:	bf00      	nop
   12d84:	20000158 	.word	0x20000158
   12d88:	20000160 	.word	0x20000160

00012d8c <hci_vendor_cmd_handle_common>:
{
   12d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   12d8e:	3801      	subs	r0, #1
{
   12d90:	b087      	sub	sp, #28
   12d92:	4615      	mov	r5, r2
	switch (ocf) {
   12d94:	2809      	cmp	r0, #9
   12d96:	d806      	bhi.n	12da6 <hci_vendor_cmd_handle_common+0x1a>
   12d98:	e8df f000 	tbb	[pc, r0]
   12d9c:	05432609 	.word	0x05432609
   12da0:	6b055705 	.word	0x6b055705
   12da4:	9d88      	.short	0x9d88
   12da6:	f06f 0015 	mvn.w	r0, #21
}
   12daa:	b007      	add	sp, #28
   12dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12dae:	4b54      	ldr	r3, [pc, #336]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12db0:	210d      	movs	r1, #13
   12db2:	8818      	ldrh	r0, [r3, #0]
   12db4:	f012 f83f 	bl	24e36 <bt_hci_cmd_complete_create>
   12db8:	210d      	movs	r1, #13
   12dba:	6028      	str	r0, [r5, #0]
   12dbc:	3008      	adds	r0, #8
   12dbe:	f014 f973 	bl	270a8 <net_buf_simple_add>
   12dc2:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12dc4:	2202      	movs	r2, #2
	rp->status = 0x00;
   12dc6:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12dc8:	2103      	movs	r1, #3
	rp->status = 0x00;
   12dca:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12dcc:	705a      	strb	r2, [r3, #1]
   12dce:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12dd0:	70da      	strb	r2, [r3, #3]
   12dd2:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   12dd4:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12dd6:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12dd8:	71d8      	strb	r0, [r3, #7]
   12dda:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   12ddc:	7258      	strb	r0, [r3, #9]
   12dde:	7298      	strb	r0, [r3, #10]
   12de0:	72d8      	strb	r0, [r3, #11]
   12de2:	7318      	strb	r0, [r3, #12]
}
   12de4:	b007      	add	sp, #28
   12de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12de8:	4b45      	ldr	r3, [pc, #276]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12dea:	2141      	movs	r1, #65	; 0x41
   12dec:	8818      	ldrh	r0, [r3, #0]
   12dee:	f012 f822 	bl	24e36 <bt_hci_cmd_complete_create>
   12df2:	2141      	movs	r1, #65	; 0x41
   12df4:	6028      	str	r0, [r5, #0]
   12df6:	3008      	adds	r0, #8
   12df8:	f014 f956 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   12dfc:	2400      	movs	r4, #0
   12dfe:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12e00:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   12e02:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12e06:	4621      	mov	r1, r4
   12e08:	f011 fdd4 	bl	249b4 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   12e0c:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12e0e:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   12e10:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   12e14:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   12e18:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   12e1a:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12e1c:	70ab      	strb	r3, [r5, #2]
}
   12e1e:	b007      	add	sp, #28
   12e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e22:	4b37      	ldr	r3, [pc, #220]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12e24:	2109      	movs	r1, #9
   12e26:	8818      	ldrh	r0, [r3, #0]
   12e28:	f012 f805 	bl	24e36 <bt_hci_cmd_complete_create>
   12e2c:	2109      	movs	r1, #9
   12e2e:	6028      	str	r0, [r5, #0]
   12e30:	3008      	adds	r0, #8
   12e32:	f014 f939 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   12e36:	2400      	movs	r4, #0
   12e38:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12e3c:	2208      	movs	r2, #8
   12e3e:	4621      	mov	r1, r4
   12e40:	f011 fdb8 	bl	249b4 <memset>
	return 0;
   12e44:	4620      	mov	r0, r4
}
   12e46:	b007      	add	sp, #28
   12e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   12e4a:	6889      	ldr	r1, [r1, #8]
   12e4c:	2000      	movs	r0, #0
   12e4e:	f7ff fcfd 	bl	1284c <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12e52:	4b2b      	ldr	r3, [pc, #172]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12e54:	2101      	movs	r1, #1
   12e56:	8818      	ldrh	r0, [r3, #0]
   12e58:	f011 ffed 	bl	24e36 <bt_hci_cmd_complete_create>
   12e5c:	2101      	movs	r1, #1
   12e5e:	4604      	mov	r4, r0
   12e60:	3008      	adds	r0, #8
   12e62:	f014 f921 	bl	270a8 <net_buf_simple_add>
   12e66:	4603      	mov	r3, r0
	ccst->status = status;
   12e68:	2000      	movs	r0, #0
   12e6a:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   12e6c:	602c      	str	r4, [r5, #0]
}
   12e6e:	b007      	add	sp, #28
   12e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   12e72:	4e24      	ldr	r6, [pc, #144]	; (12f04 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e74:	4f22      	ldr	r7, [pc, #136]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   12e76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12e78:	f10d 0c04 	add.w	ip, sp, #4
   12e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12e80:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e82:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   12e84:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e88:	2112      	movs	r1, #18
   12e8a:	f011 ffd4 	bl	24e36 <bt_hci_cmd_complete_create>
   12e8e:	2112      	movs	r1, #18
   12e90:	6028      	str	r0, [r5, #0]
   12e92:	3008      	adds	r0, #8
   12e94:	f014 f908 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   12e98:	2400      	movs	r4, #0
   12e9a:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   12e9e:	2211      	movs	r2, #17
   12ea0:	a901      	add	r1, sp, #4
   12ea2:	f011 fd7c 	bl	2499e <memcpy>
	return 0;
   12ea6:	4620      	mov	r0, r4
}
   12ea8:	b007      	add	sp, #28
   12eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12eac:	4b14      	ldr	r3, [pc, #80]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12eae:	2118      	movs	r1, #24
   12eb0:	8818      	ldrh	r0, [r3, #0]
   12eb2:	f011 ffc0 	bl	24e36 <bt_hci_cmd_complete_create>
   12eb6:	2118      	movs	r1, #24
   12eb8:	6028      	str	r0, [r5, #0]
   12eba:	3008      	adds	r0, #8
   12ebc:	f014 f8f4 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   12ec0:	2400      	movs	r4, #0
   12ec2:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12ec4:	2101      	movs	r1, #1
	rp->status = 0x00;
   12ec6:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12eca:	f009 fecd 	bl	1cc68 <hci_vendor_read_static_addr>
   12ece:	7068      	strb	r0, [r5, #1]
	return 0;
   12ed0:	4620      	mov	r0, r4
}
   12ed2:	b007      	add	sp, #28
   12ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ed6:	4b0a      	ldr	r3, [pc, #40]	; (12f00 <hci_vendor_cmd_handle_common+0x174>)
   12ed8:	2121      	movs	r1, #33	; 0x21
   12eda:	8818      	ldrh	r0, [r3, #0]
   12edc:	f011 ffab 	bl	24e36 <bt_hci_cmd_complete_create>
   12ee0:	2121      	movs	r1, #33	; 0x21
   12ee2:	6028      	str	r0, [r5, #0]
   12ee4:	3008      	adds	r0, #8
   12ee6:	f014 f8df 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   12eea:	4601      	mov	r1, r0
   12eec:	2400      	movs	r4, #0
   12eee:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   12ef2:	3001      	adds	r0, #1
   12ef4:	f009 ff2c 	bl	1cd50 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   12ef8:	4620      	mov	r0, r4
}
   12efa:	b007      	add	sp, #28
   12efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12efe:	bf00      	nop
   12f00:	20003dd8 	.word	0x20003dd8
   12f04:	00029324 	.word	0x00029324

00012f08 <hci_cmd_handle>:
{
   12f08:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12f0a:	8983      	ldrh	r3, [r0, #12]
{
   12f0c:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   12f0e:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   12f10:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   12f12:	9408      	str	r4, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   12f14:	f240 811e 	bls.w	13154 <hci_cmd_handle+0x24c>
	return net_buf_simple_pull_mem(&buf->b, len);
   12f18:	4605      	mov	r5, r0
   12f1a:	460e      	mov	r6, r1
   12f1c:	3008      	adds	r0, #8
   12f1e:	2103      	movs	r1, #3
   12f20:	f014 f8f3 	bl	2710a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   12f24:	89aa      	ldrh	r2, [r5, #12]
   12f26:	7883      	ldrb	r3, [r0, #2]
   12f28:	429a      	cmp	r2, r3
   12f2a:	f0c0 8153 	bcc.w	131d4 <hci_cmd_handle+0x2cc>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12f2e:	8802      	ldrh	r2, [r0, #0]
   12f30:	4fbc      	ldr	r7, [pc, #752]	; (13224 <hci_cmd_handle+0x31c>)
	switch (BT_OGF(_opcode)) {
   12f32:	f3c2 2385 	ubfx	r3, r2, #10, #6
   12f36:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12f38:	b290      	uxth	r0, r2
   12f3a:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   12f3c:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   12f40:	d809      	bhi.n	12f56 <hci_cmd_handle+0x4e>
   12f42:	b1a3      	cbz	r3, 12f6e <hci_cmd_handle+0x66>
   12f44:	3b01      	subs	r3, #1
   12f46:	2b07      	cmp	r3, #7
   12f48:	d811      	bhi.n	12f6e <hci_cmd_handle+0x66>
   12f4a:	e8df f003 	tbb	[pc, r3]
   12f4e:	1017      	.short	0x1017
   12f50:	1010eac9 	.word	0x1010eac9
   12f54:	2610      	.short	0x2610
   12f56:	2b3f      	cmp	r3, #63	; 0x3f
   12f58:	d109      	bne.n	12f6e <hci_cmd_handle+0x66>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12f5a:	4629      	mov	r1, r5
   12f5c:	aa08      	add	r2, sp, #32
   12f5e:	4620      	mov	r0, r4
   12f60:	f7ff ff14 	bl	12d8c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   12f64:	3016      	adds	r0, #22
	return evt;
   12f66:	bf18      	it	ne
   12f68:	9d08      	ldrne	r5, [sp, #32]
	if (err == -EINVAL) {
   12f6a:	d104      	bne.n	12f76 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   12f6c:	8838      	ldrh	r0, [r7, #0]
   12f6e:	2101      	movs	r1, #1
   12f70:	f011 ff73 	bl	24e5a <bt_hci_cmd_status_create>
   12f74:	4605      	mov	r5, r0
}
   12f76:	4628      	mov	r0, r5
   12f78:	b011      	add	sp, #68	; 0x44
   12f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12f7c:	2c06      	cmp	r4, #6
   12f7e:	f000 8459 	beq.w	13834 <hci_cmd_handle+0x92c>
   12f82:	2c1d      	cmp	r4, #29
   12f84:	d1f3      	bne.n	12f6e <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
   12f86:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   12f88:	8818      	ldrh	r0, [r3, #0]
   12f8a:	f003 faa7 	bl	164dc <ll_version_ind_send>
   12f8e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12f90:	8838      	ldrh	r0, [r7, #0]
   12f92:	f011 ff62 	bl	24e5a <bt_hci_cmd_status_create>
   12f96:	4605      	mov	r5, r0
}
   12f98:	e7ed      	b.n	12f76 <hci_cmd_handle+0x6e>
	switch (ocf) {
   12f9a:	1e62      	subs	r2, r4, #1
   12f9c:	2a4d      	cmp	r2, #77	; 0x4d
   12f9e:	d8e6      	bhi.n	12f6e <hci_cmd_handle+0x66>
   12fa0:	a301      	add	r3, pc, #4	; (adr r3, 12fa8 <hci_cmd_handle+0xa0>)
   12fa2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   12fa6:	bf00      	nop
   12fa8:	00013327 	.word	0x00013327
   12fac:	00013573 	.word	0x00013573
   12fb0:	0001352b 	.word	0x0001352b
   12fb4:	00012f6f 	.word	0x00012f6f
   12fb8:	00013521 	.word	0x00013521
   12fbc:	00012f6f 	.word	0x00012f6f
   12fc0:	00012f6f 	.word	0x00012f6f
   12fc4:	00012f6f 	.word	0x00012f6f
   12fc8:	00012f6f 	.word	0x00012f6f
   12fcc:	00012f6f 	.word	0x00012f6f
   12fd0:	00013509 	.word	0x00013509
   12fd4:	00013635 	.word	0x00013635
   12fd8:	000135fd 	.word	0x000135fd
   12fdc:	000135f5 	.word	0x000135f5
   12fe0:	000135d3 	.word	0x000135d3
   12fe4:	000135cd 	.word	0x000135cd
   12fe8:	000135c5 	.word	0x000135c5
   12fec:	000135bd 	.word	0x000135bd
   12ff0:	00013597 	.word	0x00013597
   12ff4:	000137af 	.word	0x000137af
   12ff8:	00013783 	.word	0x00013783
   12ffc:	0001376d 	.word	0x0001376d
   13000:	00013739 	.word	0x00013739
   13004:	00013717 	.word	0x00013717
   13008:	000136f9 	.word	0x000136f9
   1300c:	00012f6f 	.word	0x00012f6f
   13010:	00012f6f 	.word	0x00012f6f
   13014:	000136c3 	.word	0x000136c3
   13018:	00012f6f 	.word	0x00012f6f
   1301c:	00012f6f 	.word	0x00012f6f
   13020:	00012f6f 	.word	0x00012f6f
   13024:	00013687 	.word	0x00013687
   13028:	00013809 	.word	0x00013809
   1302c:	000137f9 	.word	0x000137f9
   13030:	000137c3 	.word	0x000137c3
   13034:	000137b7 	.word	0x000137b7
   13038:	00012f6f 	.word	0x00012f6f
   1303c:	00012f6f 	.word	0x00012f6f
   13040:	00013821 	.word	0x00013821
   13044:	00013819 	.word	0x00013819
   13048:	0001382f 	.word	0x0001382f
   1304c:	00013665 	.word	0x00013665
   13050:	000134ad 	.word	0x000134ad
   13054:	0001347f 	.word	0x0001347f
   13058:	00013475 	.word	0x00013475
   1305c:	00013467 	.word	0x00013467
   13060:	0001341d 	.word	0x0001341d
   13064:	000133c3 	.word	0x000133c3
   13068:	0001338f 	.word	0x0001338f
   1306c:	00013333 	.word	0x00013333
   13070:	00012f6f 	.word	0x00012f6f
   13074:	00012f6f 	.word	0x00012f6f
   13078:	00012f6f 	.word	0x00012f6f
   1307c:	00012f6f 	.word	0x00012f6f
   13080:	00012f6f 	.word	0x00012f6f
   13084:	00012f6f 	.word	0x00012f6f
   13088:	00012f6f 	.word	0x00012f6f
   1308c:	00012f6f 	.word	0x00012f6f
   13090:	00012f6f 	.word	0x00012f6f
   13094:	00012f6f 	.word	0x00012f6f
   13098:	00012f6f 	.word	0x00012f6f
   1309c:	00012f6f 	.word	0x00012f6f
   130a0:	00012f6f 	.word	0x00012f6f
   130a4:	00012f6f 	.word	0x00012f6f
   130a8:	00012f6f 	.word	0x00012f6f
   130ac:	00012f6f 	.word	0x00012f6f
   130b0:	00012f6f 	.word	0x00012f6f
   130b4:	00012f6f 	.word	0x00012f6f
   130b8:	00012f6f 	.word	0x00012f6f
   130bc:	00012f6f 	.word	0x00012f6f
   130c0:	00012f6f 	.word	0x00012f6f
   130c4:	00012f6f 	.word	0x00012f6f
   130c8:	00012f6f 	.word	0x00012f6f
   130cc:	00012f6f 	.word	0x00012f6f
   130d0:	000134e5 	.word	0x000134e5
   130d4:	00012f6f 	.word	0x00012f6f
   130d8:	00012f6f 	.word	0x00012f6f
   130dc:	000134db 	.word	0x000134db
	switch (ocf) {
   130e0:	2c63      	cmp	r4, #99	; 0x63
   130e2:	f000 83d9 	beq.w	13898 <hci_cmd_handle+0x990>
   130e6:	d859      	bhi.n	1319c <hci_cmd_handle+0x294>
   130e8:	2c03      	cmp	r4, #3
   130ea:	f000 83af 	beq.w	1384c <hci_cmd_handle+0x944>
   130ee:	2c2d      	cmp	r4, #45	; 0x2d
   130f0:	d140      	bne.n	13174 <hci_cmd_handle+0x26c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   130f2:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   130f4:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   130f6:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   130f8:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   130fa:	f011 fe9c 	bl	24e36 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   130fe:	2104      	movs	r1, #4
   13100:	9008      	str	r0, [sp, #32]
   13102:	3008      	adds	r0, #8
   13104:	f013 ffd0 	bl	270a8 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   13108:	b2b5      	uxth	r5, r6
   1310a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   1310c:	1cc3      	adds	r3, r0, #3
   1310e:	4629      	mov	r1, r5
   13110:	463a      	mov	r2, r7
   13112:	2002      	movs	r0, #2
   13114:	f7ff fbe0 	bl	128d8 <ll_tx_pwr_lvl_get>
	rp->status = status;
   13118:	7020      	strb	r0, [r4, #0]
	return evt;
   1311a:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   1311c:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   13120:	e729      	b.n	12f76 <hci_cmd_handle+0x6e>
	switch (ocf) {
   13122:	1e62      	subs	r2, r4, #1
   13124:	2a08      	cmp	r2, #8
   13126:	f63f af22 	bhi.w	12f6e <hci_cmd_handle+0x66>
   1312a:	a301      	add	r3, pc, #4	; (adr r3, 13130 <hci_cmd_handle+0x228>)
   1312c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   13130:	000132f1 	.word	0x000132f1
   13134:	00013239 	.word	0x00013239
   13138:	000131fd 	.word	0x000131fd
   1313c:	00012f6f 	.word	0x00012f6f
   13140:	00012f6f 	.word	0x00012f6f
   13144:	00012f6f 	.word	0x00012f6f
   13148:	00012f6f 	.word	0x00012f6f
   1314c:	00012f6f 	.word	0x00012f6f
   13150:	000131db 	.word	0x000131db
		BT_ERR("No HCI Command header");
   13154:	4a34      	ldr	r2, [pc, #208]	; (13228 <hci_cmd_handle+0x320>)
   13156:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI CMD packet length");
   13158:	920e      	str	r2, [sp, #56]	; 0x38
   1315a:	9309      	str	r3, [sp, #36]	; 0x24
   1315c:	930d      	str	r3, [sp, #52]	; 0x34
   1315e:	4833      	ldr	r0, [pc, #204]	; (1322c <hci_cmd_handle+0x324>)
   13160:	4623      	mov	r3, r4
   13162:	aa0d      	add	r2, sp, #52	; 0x34
   13164:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13168:	f010 f985 	bl	23476 <z_impl_z_log_msg2_static_create>
		return NULL;
   1316c:	4625      	mov	r5, r4
}
   1316e:	4628      	mov	r0, r5
   13170:	b011      	add	sp, #68	; 0x44
   13172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   13174:	2c01      	cmp	r4, #1
   13176:	f47f aefa 	bne.w	12f6e <hci_cmd_handle+0x66>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1317a:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   1317c:	4b2c      	ldr	r3, [pc, #176]	; (13230 <hci_cmd_handle+0x328>)
   1317e:	6811      	ldr	r1, [r2, #0]
   13180:	6852      	ldr	r2, [r2, #4]
   13182:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13184:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   13186:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13188:	f011 fe55 	bl	24e36 <bt_hci_cmd_complete_create>
   1318c:	2101      	movs	r1, #1
   1318e:	4605      	mov	r5, r0
   13190:	3008      	adds	r0, #8
   13192:	f013 ff89 	bl	270a8 <net_buf_simple_add>
	ccst->status = status;
   13196:	2300      	movs	r3, #0
   13198:	7003      	strb	r3, [r0, #0]
}
   1319a:	e6ec      	b.n	12f76 <hci_cmd_handle+0x6e>
	switch (ocf) {
   1319c:	2c7b      	cmp	r4, #123	; 0x7b
   1319e:	f000 837e 	beq.w	1389e <hci_cmd_handle+0x996>
   131a2:	2c7c      	cmp	r4, #124	; 0x7c
   131a4:	f47f aee3 	bne.w	12f6e <hci_cmd_handle+0x66>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   131a8:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   131aa:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   131ac:	8859      	ldrh	r1, [r3, #2]
   131ae:	b2b0      	uxth	r0, r6
   131b0:	f003 fab0 	bl	16714 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   131b4:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   131b6:	2103      	movs	r1, #3
   131b8:	8838      	ldrh	r0, [r7, #0]
   131ba:	f011 fe3c 	bl	24e36 <bt_hci_cmd_complete_create>
   131be:	2103      	movs	r1, #3
   131c0:	4603      	mov	r3, r0
   131c2:	3008      	adds	r0, #8
   131c4:	9308      	str	r3, [sp, #32]
   131c6:	f013 ff6f 	bl	270a8 <net_buf_simple_add>
	status = ll_length_req_send(handle, tx_octets, tx_time);
   131ca:	7004      	strb	r4, [r0, #0]
	return evt;
   131cc:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   131ce:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   131d2:	e6d0      	b.n	12f76 <hci_cmd_handle+0x6e>
		BT_ERR("Invalid HCI CMD packet length");
   131d4:	4a17      	ldr	r2, [pc, #92]	; (13234 <hci_cmd_handle+0x32c>)
   131d6:	2302      	movs	r3, #2
   131d8:	e7be      	b.n	13158 <hci_cmd_handle+0x250>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   131da:	2107      	movs	r1, #7
   131dc:	f011 fe2b 	bl	24e36 <bt_hci_cmd_complete_create>
   131e0:	2107      	movs	r1, #7
   131e2:	4603      	mov	r3, r0
   131e4:	3008      	adds	r0, #8
   131e6:	9308      	str	r3, [sp, #32]
   131e8:	f013 ff5e 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   131ec:	4601      	mov	r1, r0
   131ee:	2000      	movs	r0, #0
   131f0:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   131f4:	f7ff fb58 	bl	128a8 <ll_addr_read>
	return evt;
   131f8:	9d08      	ldr	r5, [sp, #32]
   131fa:	e6bc      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   131fc:	2109      	movs	r1, #9
   131fe:	f011 fe1a 	bl	24e36 <bt_hci_cmd_complete_create>
   13202:	2109      	movs	r1, #9
   13204:	4603      	mov	r3, r0
   13206:	3008      	adds	r0, #8
   13208:	9308      	str	r3, [sp, #32]
   1320a:	f013 ff4d 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   1320e:	2100      	movs	r1, #0
   13210:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   13212:	2208      	movs	r2, #8
	rp->status = 0x00;
   13214:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   13218:	f011 fbcc 	bl	249b4 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1321c:	2360      	movs	r3, #96	; 0x60
	return evt;
   1321e:	9d08      	ldr	r5, [sp, #32]
	rp->features[4] = (1 << 5) | (1 << 6);
   13220:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   13222:	e6a8      	b.n	12f76 <hci_cmd_handle+0x6e>
   13224:	20003dd8 	.word	0x20003dd8
   13228:	00029338 	.word	0x00029338
   1322c:	000288d0 	.word	0x000288d0
   13230:	20000158 	.word	0x20000158
   13234:	00029350 	.word	0x00029350
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13238:	2141      	movs	r1, #65	; 0x41
   1323a:	f011 fdfc 	bl	24e36 <bt_hci_cmd_complete_create>
   1323e:	2141      	movs	r1, #65	; 0x41
   13240:	4603      	mov	r3, r0
   13242:	3008      	adds	r0, #8
   13244:	9308      	str	r3, [sp, #32]
   13246:	f013 ff2f 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   1324a:	2100      	movs	r1, #0
   1324c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1324e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   13250:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   13254:	f011 fbae 	bl	249b4 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   13258:	79a1      	ldrb	r1, [r4, #6]
	rp->commands[0] |= BIT(5);
   1325a:	7860      	ldrb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   1325c:	7ae3      	ldrb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1325e:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[5] |= BIT(6) | BIT(7);
   13260:	f061 013f 	orn	r1, r1, #63	; 0x3f
   13264:	71a1      	strb	r1, [r4, #6]
	rp->commands[22] |= BIT(2);
   13266:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[0] |= BIT(5);
   13268:	f040 0020 	orr.w	r0, r0, #32
	rp->commands[10] |= BIT(2);
   1326c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[22] |= BIT(2);
   13270:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[0] |= BIT(5);
   13274:	7060      	strb	r0, [r4, #1]
	rp->commands[10] |= BIT(2);
   13276:	72e3      	strb	r3, [r4, #11]
	rp->commands[15] |= BIT(1);
   13278:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   1327a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[22] |= BIT(2);
   1327e:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   13280:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[15] |= BIT(1);
   13282:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[33] |= BIT(6) | BIT(7);
   13286:	f063 030f 	orn	r3, r3, #15
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   1328a:	f041 0117 	orr.w	r1, r1, #23
	rp->commands[33] |= BIT(6) | BIT(7);
   1328e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[15] |= BIT(1);
   13292:	7420      	strb	r0, [r4, #16]
	rp->commands[35] |= BIT(3);
   13294:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[28] |= BIT(3);
   13298:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   1329a:	76a1      	strb	r1, [r4, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   1329c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   132a0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   132a4:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
   132a8:	f040 0009 	orr.w	r0, r0, #9
	rp->commands[32] |= BIT(4) | BIT(5);
   132ac:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	rp->commands[14] |= BIT(3) | BIT(5);
   132b0:	73e2      	strb	r2, [r4, #15]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   132b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   132b6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   132ba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
   132be:	7760      	strb	r0, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   132c0:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
   132c4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   132c6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   132ca:	25ff      	movs	r5, #255	; 0xff
	rp->commands[39] |= BIT(2);
   132cc:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   132d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   132d4:	f060 0003 	orn	r0, r0, #3
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   132d8:	f061 0106 	orn	r1, r1, #6
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   132dc:	7725      	strb	r5, [r4, #28]
	rp->commands[26] |= BIT(4) | BIT(5);
   132de:	76e0      	strb	r0, [r4, #27]
	return evt;
   132e0:	9d08      	ldr	r5, [sp, #32]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   132e2:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   132e6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   132ea:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   132ee:	e642      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   132f0:	2109      	movs	r1, #9
   132f2:	f011 fda0 	bl	24e36 <bt_hci_cmd_complete_create>
   132f6:	2109      	movs	r1, #9
   132f8:	4603      	mov	r3, r0
   132fa:	3008      	adds	r0, #8
   132fc:	9308      	str	r3, [sp, #32]
   132fe:	f013 fed3 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   13302:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   13304:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   13306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1330a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1330c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1330e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   13312:	7083      	strb	r3, [r0, #2]
   13314:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   13316:	2305      	movs	r3, #5
	return evt;
   13318:	9d08      	ldr	r5, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   1331a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1331c:	7144      	strb	r4, [r0, #5]
   1331e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   13320:	71c2      	strb	r2, [r0, #7]
   13322:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   13324:	e627      	b.n	12f76 <hci_cmd_handle+0x6e>
   13326:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   13328:	4bc1      	ldr	r3, [pc, #772]	; (13630 <hci_cmd_handle+0x728>)
   1332a:	6811      	ldr	r1, [r2, #0]
   1332c:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1332e:	6019      	str	r1, [r3, #0]
   13330:	e728      	b.n	13184 <hci_cmd_handle+0x27c>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   13332:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   13334:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   13336:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   13338:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1333a:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1333e:	07de      	lsls	r6, r3, #31
		cmd->tx_phys |= mask_phys;
   13340:	bf44      	itt	mi
   13342:	f041 0103 	orrmi.w	r1, r1, #3
   13346:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   13348:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   1334c:	7913      	ldrb	r3, [r2, #4]
   1334e:	bf1c      	itt	ne
   13350:	f043 0303 	orrne.w	r3, r3, #3
   13354:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   13356:	ea43 0201 	orr.w	r2, r3, r1
   1335a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   1335e:	f040 82c4 	bne.w	138ea <hci_cmd_handle+0x9e2>
	if (!(cmd->tx_phys & 0x07) ||
   13362:	074e      	lsls	r6, r1, #29
   13364:	f000 82bb 	beq.w	138de <hci_cmd_handle+0x9d6>
   13368:	075a      	lsls	r2, r3, #29
   1336a:	f000 82b8 	beq.w	138de <hci_cmd_handle+0x9d6>
	if (phy_opts & 0x03) {
   1336e:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   13372:	bf1c      	itt	ne
   13374:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   13378:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   1337c:	4628      	mov	r0, r5
   1337e:	f003 f95d 	bl	1663c <ll_phy_req_send>
   13382:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13384:	8838      	ldrh	r0, [r7, #0]
   13386:	f011 fd68 	bl	24e5a <bt_hci_cmd_status_create>
   1338a:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1338c:	e5f3      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   1338e:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   13390:	781a      	ldrb	r2, [r3, #0]
   13392:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   13394:	bf4a      	itet	mi
   13396:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   13398:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1339a:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1339c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1339e:	bf4a      	itet	mi
   133a0:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   133a2:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   133a4:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   133a6:	f003 f93f 	bl	16628 <ll_phy_default_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   133aa:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   133ac:	8838      	ldrh	r0, [r7, #0]
   133ae:	2101      	movs	r1, #1
   133b0:	f011 fd41 	bl	24e36 <bt_hci_cmd_complete_create>
   133b4:	2101      	movs	r1, #1
   133b6:	4605      	mov	r5, r0
   133b8:	3008      	adds	r0, #8
   133ba:	f013 fe75 	bl	270a8 <net_buf_simple_add>
	ccst->status = status;
   133be:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   133c0:	e5d9      	b.n	12f76 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   133c2:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   133c4:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   133c6:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   133c8:	f011 fd35 	bl	24e36 <bt_hci_cmd_complete_create>
   133cc:	2105      	movs	r1, #5
   133ce:	4603      	mov	r3, r0
   133d0:	3008      	adds	r0, #8
   133d2:	9308      	str	r3, [sp, #32]
   133d4:	f013 fe68 	bl	270a8 <net_buf_simple_add>
   133d8:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   133da:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   133dc:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   133de:	1ce1      	adds	r1, r4, #3
   133e0:	f003 f904 	bl	165ec <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   133e4:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   133e6:	7020      	strb	r0, [r4, #0]
   133e8:	2b00      	cmp	r3, #0
   133ea:	fa93 f2a3 	rbit	r2, r3
   133ee:	7923      	ldrb	r3, [r4, #4]
   133f0:	fab2 f282 	clz	r2, r2
   133f4:	bf08      	it	eq
   133f6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   133fa:	2b00      	cmp	r3, #0
   133fc:	fa93 f3a3 	rbit	r3, r3
   13400:	fab3 f383 	clz	r3, r3
   13404:	f102 0201 	add.w	r2, r2, #1
   13408:	bf08      	it	eq
   1340a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1340e:	70e2      	strb	r2, [r4, #3]
   13410:	3301      	adds	r3, #1
	return evt;
   13412:	9d08      	ldr	r5, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   13414:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   13416:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1341a:	e5ac      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1341c:	2109      	movs	r1, #9
   1341e:	f011 fd0a 	bl	24e36 <bt_hci_cmd_complete_create>
   13422:	2109      	movs	r1, #9
   13424:	4603      	mov	r3, r0
   13426:	3008      	adds	r0, #8
   13428:	9308      	str	r3, [sp, #32]
   1342a:	f013 fe3d 	bl	270a8 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1342e:	ab0a      	add	r3, sp, #40	; 0x28
   13430:	4604      	mov	r4, r0
   13432:	aa09      	add	r2, sp, #36	; 0x24
   13434:	f10d 011e 	add.w	r1, sp, #30
   13438:	a807      	add	r0, sp, #28
   1343a:	f003 f8cb 	bl	165d4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1343e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   13442:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   13446:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1344a:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1344e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   13452:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   13456:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   13458:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1345c:	7022      	strb	r2, [r4, #0]
	return evt;
   1345e:	9d08      	ldr	r5, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   13460:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   13464:	e587      	b.n	12f76 <hci_cmd_handle+0x6e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   13466:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   13468:	8818      	ldrh	r0, [r3, #0]
   1346a:	f006 fa57 	bl	1991c <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1346e:	8838      	ldrh	r0, [r7, #0]
   13470:	2101      	movs	r1, #1
   13472:	e689      	b.n	13188 <hci_cmd_handle+0x280>
	status = ll_rl_enable(cmd->enable);
   13474:	68ab      	ldr	r3, [r5, #8]
   13476:	7818      	ldrb	r0, [r3, #0]
   13478:	f006 fa38 	bl	198ec <ll_rl_enable>
   1347c:	e795      	b.n	133aa <hci_cmd_handle+0x4a2>
	memcpy(dst, src, sizeof(*dst));
   1347e:	2207      	movs	r2, #7
   13480:	68a9      	ldr	r1, [r5, #8]
   13482:	a80a      	add	r0, sp, #40	; 0x28
   13484:	f011 fa8b 	bl	2499e <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13488:	2107      	movs	r1, #7
   1348a:	8838      	ldrh	r0, [r7, #0]
   1348c:	f011 fcd3 	bl	24e36 <bt_hci_cmd_complete_create>
   13490:	2107      	movs	r1, #7
   13492:	4603      	mov	r3, r0
   13494:	3008      	adds	r0, #8
   13496:	9308      	str	r3, [sp, #32]
   13498:	f013 fe06 	bl	270a8 <net_buf_simple_add>
   1349c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1349e:	1c41      	adds	r1, r0, #1
   134a0:	a80a      	add	r0, sp, #40	; 0x28
   134a2:	f006 f9f1 	bl	19888 <ll_rl_lrpa_get>
   134a6:	7020      	strb	r0, [r4, #0]
	return evt;
   134a8:	9d08      	ldr	r5, [sp, #32]
   134aa:	e564      	b.n	12f76 <hci_cmd_handle+0x6e>
   134ac:	2207      	movs	r2, #7
   134ae:	68a9      	ldr	r1, [r5, #8]
   134b0:	a80a      	add	r0, sp, #40	; 0x28
   134b2:	f011 fa74 	bl	2499e <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   134b6:	2107      	movs	r1, #7
   134b8:	8838      	ldrh	r0, [r7, #0]
   134ba:	f011 fcbc 	bl	24e36 <bt_hci_cmd_complete_create>
   134be:	2107      	movs	r1, #7
   134c0:	4603      	mov	r3, r0
   134c2:	3008      	adds	r0, #8
   134c4:	9308      	str	r3, [sp, #32]
   134c6:	f013 fdef 	bl	270a8 <net_buf_simple_add>
   134ca:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   134cc:	1c41      	adds	r1, r0, #1
   134ce:	a80a      	add	r0, sp, #40	; 0x28
   134d0:	f006 f9a0 	bl	19814 <ll_rl_crpa_get>
   134d4:	7020      	strb	r0, [r4, #0]
	return evt;
   134d6:	9d08      	ldr	r5, [sp, #32]
   134d8:	e54d      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   134da:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   134dc:	79c1      	ldrb	r1, [r0, #7]
   134de:	f006 fa27 	bl	19930 <ll_priv_mode_set>
   134e2:	e762      	b.n	133aa <hci_cmd_handle+0x4a2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   134e4:	2103      	movs	r1, #3
   134e6:	f011 fca6 	bl	24e36 <bt_hci_cmd_complete_create>
   134ea:	2103      	movs	r1, #3
   134ec:	4603      	mov	r3, r0
   134ee:	3008      	adds	r0, #8
   134f0:	9308      	str	r3, [sp, #32]
   134f2:	f013 fdd9 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   134f6:	4601      	mov	r1, r0
   134f8:	2300      	movs	r3, #0
   134fa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   134fe:	3001      	adds	r0, #1
   13500:	f7ff f9fc 	bl	128fc <ll_tx_pwr_get>
	return evt;
   13504:	9d08      	ldr	r5, [sp, #32]
   13506:	e536      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   13508:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1350a:	7963      	ldrb	r3, [r4, #5]
   1350c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   13510:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   13514:	7820      	ldrb	r0, [r4, #0]
   13516:	79a4      	ldrb	r4, [r4, #6]
   13518:	9400      	str	r4, [sp, #0]
   1351a:	f7ee f9b1 	bl	1880 <ll_scan_params_set>
   1351e:	e744      	b.n	133aa <hci_cmd_handle+0x4a2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   13520:	68a9      	ldr	r1, [r5, #8]
   13522:	2001      	movs	r0, #1
   13524:	f7ff f992 	bl	1284c <ll_addr_set>
   13528:	e73f      	b.n	133aa <hci_cmd_handle+0x4a2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1352a:	2109      	movs	r1, #9
   1352c:	f011 fc83 	bl	24e36 <bt_hci_cmd_complete_create>
   13530:	2109      	movs	r1, #9
   13532:	4603      	mov	r3, r0
   13534:	3008      	adds	r0, #8
   13536:	9308      	str	r3, [sp, #32]
   13538:	f013 fdb6 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   1353c:	2100      	movs	r1, #0
   1353e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   13540:	2208      	movs	r2, #8
	rp->status = 0x00;
   13542:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   13546:	f011 fa35 	bl	249b4 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   1354a:	f000 ff89 	bl	14460 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   1354e:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   13550:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   13554:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   13556:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   13558:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   1355a:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   1355c:	70a5      	strb	r5, [r4, #2]
   1355e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   13562:	7123      	strb	r3, [r4, #4]
   13564:	0a13      	lsrs	r3, r2, #8
	return evt;
   13566:	9d08      	ldr	r5, [sp, #32]
	dst[0] = val;
   13568:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   1356a:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   1356c:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   1356e:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   13570:	e501      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13572:	2104      	movs	r1, #4
   13574:	f011 fc5f 	bl	24e36 <bt_hci_cmd_complete_create>
   13578:	2104      	movs	r1, #4
   1357a:	4603      	mov	r3, r0
   1357c:	3008      	adds	r0, #8
   1357e:	9308      	str	r3, [sp, #32]
   13580:	f013 fd92 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   13584:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   13586:	2103      	movs	r1, #3
	rp->status = 0x00;
   13588:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1358a:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1358c:	70c1      	strb	r1, [r0, #3]
	return evt;
   1358e:	9d08      	ldr	r5, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   13590:	7042      	strb	r2, [r0, #1]
   13592:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   13594:	e4ef      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   13596:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   13598:	890a      	ldrh	r2, [r1, #8]
   1359a:	884b      	ldrh	r3, [r1, #2]
   1359c:	8808      	ldrh	r0, [r1, #0]
   1359e:	9202      	str	r2, [sp, #8]
   135a0:	88ca      	ldrh	r2, [r1, #6]
   135a2:	9201      	str	r2, [sp, #4]
   135a4:	8889      	ldrh	r1, [r1, #4]
   135a6:	9100      	str	r1, [sp, #0]
   135a8:	2200      	movs	r2, #0
   135aa:	4611      	mov	r1, r2
   135ac:	f002 fe8e 	bl	162cc <ll_conn_update>
   135b0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   135b2:	8838      	ldrh	r0, [r7, #0]
   135b4:	f011 fc51 	bl	24e5a <bt_hci_cmd_status_create>
   135b8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   135ba:	e4dc      	b.n	12f76 <hci_cmd_handle+0x6e>
	status = ll_fal_remove(&cmd->addr);
   135bc:	68a8      	ldr	r0, [r5, #8]
   135be:	f005 ff57 	bl	19470 <ll_fal_remove>
   135c2:	e6f2      	b.n	133aa <hci_cmd_handle+0x4a2>
	status = ll_fal_add(&cmd->addr);
   135c4:	68a8      	ldr	r0, [r5, #8]
   135c6:	f005 feb7 	bl	19338 <ll_fal_add>
   135ca:	e6ee      	b.n	133aa <hci_cmd_handle+0x4a2>
	status = ll_fal_clear();
   135cc:	f005 fe8c 	bl	192e8 <ll_fal_clear>
   135d0:	e6eb      	b.n	133aa <hci_cmd_handle+0x4a2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   135d2:	2102      	movs	r1, #2
   135d4:	f011 fc2f 	bl	24e36 <bt_hci_cmd_complete_create>
   135d8:	2102      	movs	r1, #2
   135da:	4603      	mov	r3, r0
   135dc:	3008      	adds	r0, #8
   135de:	9308      	str	r3, [sp, #32]
   135e0:	f013 fd62 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   135e4:	2300      	movs	r3, #0
   135e6:	7003      	strb	r3, [r0, #0]
   135e8:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   135ea:	f005 fe7b 	bl	192e4 <ll_fal_size_get>
   135ee:	7060      	strb	r0, [r4, #1]
	return evt;
   135f0:	9d08      	ldr	r5, [sp, #32]
   135f2:	e4c0      	b.n	12f76 <hci_cmd_handle+0x6e>
	status = ll_connect_disable(node_rx);
   135f4:	4630      	mov	r0, r6
   135f6:	f005 fa25 	bl	18a44 <ll_connect_disable>
   135fa:	e6d6      	b.n	133aa <hci_cmd_handle+0x4a2>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   135fc:	68ac      	ldr	r4, [r5, #8]
	status = ll_create_connection(scan_interval, scan_window,
   135fe:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   13602:	7963      	ldrb	r3, [r4, #5]
   13604:	7922      	ldrb	r2, [r4, #4]
   13606:	8861      	ldrh	r1, [r4, #2]
   13608:	8820      	ldrh	r0, [r4, #0]
   1360a:	9504      	str	r5, [sp, #16]
   1360c:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   13610:	9503      	str	r5, [sp, #12]
   13612:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   13616:	9502      	str	r5, [sp, #8]
   13618:	7b25      	ldrb	r5, [r4, #12]
   1361a:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   1361c:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   1361e:	9400      	str	r4, [sp, #0]
   13620:	f7ef ffa2 	bl	3568 <ll_create_connection>
   13624:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13626:	8838      	ldrh	r0, [r7, #0]
   13628:	f011 fc17 	bl	24e5a <bt_hci_cmd_status_create>
   1362c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1362e:	e4a2      	b.n	12f76 <hci_cmd_handle+0x6e>
   13630:	20000160 	.word	0x20000160
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   13634:	68ab      	ldr	r3, [r5, #8]
	if (cmd->enable && cmd->filter_dup) {
   13636:	7818      	ldrb	r0, [r3, #0]
   13638:	2800      	cmp	r0, #0
   1363a:	f000 814b 	beq.w	138d4 <hci_cmd_handle+0x9cc>
   1363e:	785b      	ldrb	r3, [r3, #1]
   13640:	2b00      	cmp	r3, #0
   13642:	f000 8147 	beq.w	138d4 <hci_cmd_handle+0x9cc>
			dup_count = 0;
   13646:	49ac      	ldr	r1, [pc, #688]	; (138f8 <hci_cmd_handle+0x9f0>)
			dup_curr = 0U;
   13648:	4aac      	ldr	r2, [pc, #688]	; (138fc <hci_cmd_handle+0x9f4>)
			dup_count = 0;
   1364a:	2300      	movs	r3, #0
   1364c:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   1364e:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   13650:	f002 f8b2 	bl	157b8 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   13654:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   13656:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13658:	f04f 0101 	mov.w	r1, #1
   1365c:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   1365e:	bf08      	it	eq
   13660:	2600      	moveq	r6, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13662:	e6a5      	b.n	133b0 <hci_cmd_handle+0x4a8>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13664:	2102      	movs	r1, #2
   13666:	f011 fbe6 	bl	24e36 <bt_hci_cmd_complete_create>
   1366a:	2102      	movs	r1, #2
   1366c:	4603      	mov	r3, r0
   1366e:	3008      	adds	r0, #8
   13670:	9308      	str	r3, [sp, #32]
   13672:	f013 fd19 	bl	270a8 <net_buf_simple_add>
   13676:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   13678:	f005 ff8a 	bl	19590 <ll_rl_size_get>
	rp->status = 0x00;
   1367c:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1367e:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   13680:	7023      	strb	r3, [r4, #0]
	return evt;
   13682:	9d08      	ldr	r5, [sp, #32]
   13684:	e477      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   13686:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   13688:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1368a:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1368c:	8853      	ldrh	r3, [r2, #2]
   1368e:	9102      	str	r1, [sp, #8]
   13690:	88d1      	ldrh	r1, [r2, #6]
   13692:	9101      	str	r1, [sp, #4]
   13694:	8891      	ldrh	r1, [r2, #4]
   13696:	9100      	str	r1, [sp, #0]
   13698:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1369a:	2102      	movs	r1, #2
   1369c:	b2a0      	uxth	r0, r4
   1369e:	f002 fe15 	bl	162cc <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   136a2:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   136a4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   136a6:	8838      	ldrh	r0, [r7, #0]
   136a8:	f011 fbc5 	bl	24e36 <bt_hci_cmd_complete_create>
   136ac:	2103      	movs	r1, #3
   136ae:	4603      	mov	r3, r0
   136b0:	3008      	adds	r0, #8
   136b2:	9308      	str	r3, [sp, #32]
   136b4:	f013 fcf8 	bl	270a8 <net_buf_simple_add>
	rp->status = status;
   136b8:	7005      	strb	r5, [r0, #0]
	return evt;
   136ba:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   136bc:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   136c0:	e459      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   136c2:	2109      	movs	r1, #9
   136c4:	f011 fbb7 	bl	24e36 <bt_hci_cmd_complete_create>
   136c8:	2109      	movs	r1, #9
   136ca:	4603      	mov	r3, r0
   136cc:	3008      	adds	r0, #8
   136ce:	9308      	str	r3, [sp, #32]
   136d0:	f013 fcea 	bl	270a8 <net_buf_simple_add>
	dst[0] = val;
   136d4:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
   136d6:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   136d8:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
   136da:	220f      	movs	r2, #15
   136dc:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   136de:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   136e0:	70c2      	strb	r2, [r0, #3]
   136e2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   136e4:	2413      	movs	r4, #19
	dst[0] = val;
   136e6:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
   136e8:	2202      	movs	r2, #2
	return evt;
   136ea:	9d08      	ldr	r5, [sp, #32]
   136ec:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   136ee:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   136f0:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   136f2:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   136f4:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   136f6:	e43e      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   136f8:	68aa      	ldr	r2, [r5, #8]
				 (uint8_t *)&cmd->rand,
   136fa:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   136fc:	f102 030c 	add.w	r3, r2, #12
   13700:	f831 0b02 	ldrh.w	r0, [r1], #2
   13704:	320a      	adds	r2, #10
   13706:	f005 f9eb 	bl	18ae0 <ll_enc_req_send>
   1370a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1370c:	8838      	ldrh	r0, [r7, #0]
   1370e:	f011 fba4 	bl	24e5a <bt_hci_cmd_status_create>
   13712:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   13714:	e42f      	b.n	12f76 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13716:	2109      	movs	r1, #9
   13718:	f011 fb8d 	bl	24e36 <bt_hci_cmd_complete_create>
   1371c:	2109      	movs	r1, #9
   1371e:	4603      	mov	r3, r0
   13720:	3008      	adds	r0, #8
   13722:	9308      	str	r3, [sp, #32]
   13724:	f013 fcc0 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   13728:	2300      	movs	r3, #0
   1372a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1372e:	2108      	movs	r1, #8
   13730:	f007 f810 	bl	1a754 <lll_csrand_get>
	return evt;
   13734:	9d08      	ldr	r5, [sp, #32]
   13736:	e41e      	b.n	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   13738:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1373a:	aa0a      	add	r2, sp, #40	; 0x28
   1373c:	2300      	movs	r3, #0
   1373e:	f100 0110 	add.w	r1, r0, #16
   13742:	f008 fc8b 	bl	1c05c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13746:	2111      	movs	r1, #17
   13748:	8838      	ldrh	r0, [r7, #0]
   1374a:	f011 fb74 	bl	24e36 <bt_hci_cmd_complete_create>
   1374e:	2111      	movs	r1, #17
   13750:	4603      	mov	r3, r0
   13752:	3008      	adds	r0, #8
   13754:	9308      	str	r3, [sp, #32]
   13756:	f013 fca7 	bl	270a8 <net_buf_simple_add>
	rp->status = 0x00;
   1375a:	2300      	movs	r3, #0
   1375c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   13760:	2210      	movs	r2, #16
   13762:	a90a      	add	r1, sp, #40	; 0x28
   13764:	f011 f91b 	bl	2499e <memcpy>
	return evt;
   13768:	9d08      	ldr	r5, [sp, #32]
   1376a:	e404      	b.n	12f76 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   1376c:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   1376e:	8818      	ldrh	r0, [r3, #0]
   13770:	f002 fe98 	bl	164a4 <ll_feature_req_send>
   13774:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13776:	8838      	ldrh	r0, [r7, #0]
   13778:	f011 fb6f 	bl	24e5a <bt_hci_cmd_status_create>
   1377c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1377e:	f7ff bbfa 	b.w	12f76 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   13782:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13784:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   13786:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13788:	f011 fb55 	bl	24e36 <bt_hci_cmd_complete_create>
   1378c:	2108      	movs	r1, #8
   1378e:	4603      	mov	r3, r0
   13790:	4408      	add	r0, r1
   13792:	9308      	str	r3, [sp, #32]
   13794:	f013 fc88 	bl	270a8 <net_buf_simple_add>
   13798:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1379a:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   1379c:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   1379e:	f002 fe1f 	bl	163e0 <ll_chm_get>
	rp->status = status;
   137a2:	7020      	strb	r0, [r4, #0]
	return evt;
   137a4:	9d08      	ldr	r5, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   137a6:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   137aa:	f7ff bbe4 	b.w	12f76 <hci_cmd_handle+0x6e>
	status = ll_chm_update(&cmd->ch_map[0]);
   137ae:	68a8      	ldr	r0, [r5, #8]
   137b0:	f005 fc48 	bl	19044 <ll_chm_update>
   137b4:	e5f9      	b.n	133aa <hci_cmd_handle+0x4a2>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   137b6:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   137b8:	8859      	ldrh	r1, [r3, #2]
   137ba:	8818      	ldrh	r0, [r3, #0]
   137bc:	f002 ff00 	bl	165c0 <ll_length_default_set>
   137c0:	e5f3      	b.n	133aa <hci_cmd_handle+0x4a2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   137c2:	2105      	movs	r1, #5
   137c4:	f011 fb37 	bl	24e36 <bt_hci_cmd_complete_create>
   137c8:	2105      	movs	r1, #5
   137ca:	4603      	mov	r3, r0
   137cc:	3008      	adds	r0, #8
   137ce:	9308      	str	r3, [sp, #32]
   137d0:	f013 fc6a 	bl	270a8 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   137d4:	a90a      	add	r1, sp, #40	; 0x28
   137d6:	4604      	mov	r4, r0
   137d8:	a809      	add	r0, sp, #36	; 0x24
   137da:	f002 fee5 	bl	165a8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   137de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   137e2:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   137e6:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   137e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   137ec:	7022      	strb	r2, [r4, #0]
	return evt;
   137ee:	9d08      	ldr	r5, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   137f0:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   137f4:	f7ff bbbf 	b.w	12f76 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   137f8:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   137fa:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   137fc:	889a      	ldrh	r2, [r3, #4]
   137fe:	8859      	ldrh	r1, [r3, #2]
   13800:	b2b0      	uxth	r0, r6
   13802:	f002 fe87 	bl	16514 <ll_length_req_send>
   13806:	e4d5      	b.n	131b4 <hci_cmd_handle+0x2ac>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   13808:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1380a:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1380c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1380e:	7892      	ldrb	r2, [r2, #2]
   13810:	9300      	str	r3, [sp, #0]
   13812:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13816:	e740      	b.n	1369a <hci_cmd_handle+0x792>
	status = ll_rl_remove(&cmd->peer_id_addr);
   13818:	68a8      	ldr	r0, [r5, #8]
   1381a:	f005 fefb 	bl	19614 <ll_rl_remove>
   1381e:	e5c4      	b.n	133aa <hci_cmd_handle+0x4a2>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   13820:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   13822:	f100 0217 	add.w	r2, r0, #23
   13826:	1dc1      	adds	r1, r0, #7
   13828:	f006 faa2 	bl	19d70 <ll_rl_add>
   1382c:	e5bd      	b.n	133aa <hci_cmd_handle+0x4a2>
	status = ll_rl_clear();
   1382e:	f005 feb1 	bl	19594 <ll_rl_clear>
   13832:	e5ba      	b.n	133aa <hci_cmd_handle+0x4a2>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   13834:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   13836:	7899      	ldrb	r1, [r3, #2]
   13838:	8818      	ldrh	r0, [r3, #0]
   1383a:	f002 fdf1 	bl	16420 <ll_terminate_ind_send>
   1383e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13840:	8838      	ldrh	r0, [r7, #0]
   13842:	f011 fb0a 	bl	24e5a <bt_hci_cmd_status_create>
   13846:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   13848:	f7ff bb95 	b.w	12f76 <hci_cmd_handle+0x6e>
	dup_count = DUP_FILTER_DISABLED;
   1384c:	482a      	ldr	r0, [pc, #168]	; (138f8 <hci_cmd_handle+0x9f0>)
	event_mask = DEFAULT_EVENT_MASK;
   1384e:	492c      	ldr	r1, [pc, #176]	; (13900 <hci_cmd_handle+0x9f8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13850:	4a2c      	ldr	r2, [pc, #176]	; (13904 <hci_cmd_handle+0x9fc>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13852:	4b2d      	ldr	r3, [pc, #180]	; (13908 <hci_cmd_handle+0xa00>)
	dup_count = DUP_FILTER_DISABLED;
   13854:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13858:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   1385a:	f641 75ff 	movw	r5, #8191	; 0x1fff
   1385e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13862:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13866:	2000      	movs	r0, #0
   13868:	2100      	movs	r1, #0
   1386a:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1386e:	201f      	movs	r0, #31
   13870:	2100      	movs	r1, #0
   13872:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   13876:	f001 fe83 	bl	15580 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1387a:	2101      	movs	r1, #1
   1387c:	8838      	ldrh	r0, [r7, #0]
   1387e:	f011 fada 	bl	24e36 <bt_hci_cmd_complete_create>
   13882:	2101      	movs	r1, #1
   13884:	4605      	mov	r5, r0
   13886:	3008      	adds	r0, #8
   13888:	f013 fc0e 	bl	270a8 <net_buf_simple_add>
	conn_count = 0U;
   1388c:	4a1f      	ldr	r2, [pc, #124]	; (1390c <hci_cmd_handle+0xa04>)
	ccst->status = status;
   1388e:	2300      	movs	r3, #0
   13890:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   13892:	6013      	str	r3, [r2, #0]
}
   13894:	f7ff bb6f 	b.w	12f76 <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13898:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1389a:	4b1a      	ldr	r3, [pc, #104]	; (13904 <hci_cmd_handle+0x9fc>)
   1389c:	e545      	b.n	1332a <hci_cmd_handle+0x422>
	handle = sys_le16_to_cpu(cmd->handle);
   1389e:	68ab      	ldr	r3, [r5, #8]
   138a0:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   138a2:	a90a      	add	r1, sp, #40	; 0x28
   138a4:	b2a8      	uxth	r0, r5
   138a6:	f002 ff11 	bl	166cc <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   138aa:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   138ac:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   138ae:	8838      	ldrh	r0, [r7, #0]
   138b0:	f011 fac1 	bl	24e36 <bt_hci_cmd_complete_create>
   138b4:	2105      	movs	r1, #5
   138b6:	4603      	mov	r3, r0
   138b8:	3008      	adds	r0, #8
   138ba:	9308      	str	r3, [sp, #32]
   138bc:	f013 fbf4 	bl	270a8 <net_buf_simple_add>
	rp->status = status;
   138c0:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   138c2:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   138c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   138ca:	9d08      	ldr	r5, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   138cc:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   138d0:	f7ff bb51 	b.w	12f76 <hci_cmd_handle+0x6e>
		dup_count = DUP_FILTER_DISABLED;
   138d4:	4b08      	ldr	r3, [pc, #32]	; (138f8 <hci_cmd_handle+0x9f0>)
   138d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138da:	601a      	str	r2, [r3, #0]
   138dc:	e6b8      	b.n	13650 <hci_cmd_handle+0x748>
	return bt_hci_cmd_status_create(_opcode, status);
   138de:	2112      	movs	r1, #18
   138e0:	f011 fabb 	bl	24e5a <bt_hci_cmd_status_create>
   138e4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   138e6:	f7ff bb46 	b.w	12f76 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   138ea:	2111      	movs	r1, #17
   138ec:	f011 fab5 	bl	24e5a <bt_hci_cmd_status_create>
   138f0:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   138f2:	f7ff bb40 	b.w	12f76 <hci_cmd_handle+0x6e>
   138f6:	bf00      	nop
   138f8:	200023b0 	.word	0x200023b0
   138fc:	200023b4 	.word	0x200023b4
   13900:	20000158 	.word	0x20000158
   13904:	20001998 	.word	0x20001998
   13908:	20000160 	.word	0x20000160
   1390c:	200023ac 	.word	0x200023ac

00013910 <hci_acl_handle>:
{
   13910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   13914:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   13916:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   13918:	2b03      	cmp	r3, #3
{
   1391a:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   1391c:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1391e:	d947      	bls.n	139b0 <hci_acl_handle+0xa0>
	return net_buf_simple_pull_mem(&buf->b, len);
   13920:	4605      	mov	r5, r0
   13922:	4688      	mov	r8, r1
   13924:	3008      	adds	r0, #8
   13926:	2104      	movs	r1, #4
   13928:	f013 fbef 	bl	2710a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1392c:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1392e:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   13930:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   13934:	42b3      	cmp	r3, r6
   13936:	d34d      	bcc.n	139d4 <hci_acl_handle+0xc4>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   13938:	2e1b      	cmp	r6, #27
   1393a:	d848      	bhi.n	139ce <hci_acl_handle+0xbe>
	node_tx = ll_tx_mem_acquire();
   1393c:	f002 fc78 	bl	16230 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   13940:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   13944:	4604      	mov	r4, r0
   13946:	2800      	cmp	r0, #0
   13948:	d047      	beq.n	139da <hci_acl_handle+0xca>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1394a:	08bb      	lsrs	r3, r7, #2
   1394c:	d102      	bne.n	13954 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   1394e:	b34f      	cbz	r7, 139a4 <hci_acl_handle+0x94>
   13950:	2f01      	cmp	r7, #1
   13952:	d004      	beq.n	1395e <hci_acl_handle+0x4e>
		return -EINVAL;
   13954:	f06f 0015 	mvn.w	r0, #21
}
   13958:	b009      	add	sp, #36	; 0x24
   1395a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1395e:	7903      	ldrb	r3, [r0, #4]
   13960:	f367 0301 	bfi	r3, r7, #0, #2
   13964:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   13966:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   13968:	68a9      	ldr	r1, [r5, #8]
   1396a:	4632      	mov	r2, r6
   1396c:	1de0      	adds	r0, r4, #7
   1396e:	f011 f816 	bl	2499e <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   13972:	4621      	mov	r1, r4
   13974:	f3c9 000b 	ubfx	r0, r9, #0, #12
   13978:	f002 fc66 	bl	16248 <ll_tx_mem_enqueue>
   1397c:	2800      	cmp	r0, #0
   1397e:	d0eb      	beq.n	13958 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   13980:	2302      	movs	r3, #2
   13982:	4a2d      	ldr	r2, [pc, #180]	; (13a38 <hci_acl_handle+0x128>)
   13984:	9206      	str	r2, [sp, #24]
   13986:	9301      	str	r3, [sp, #4]
   13988:	9305      	str	r3, [sp, #20]
   1398a:	482c      	ldr	r0, [pc, #176]	; (13a3c <hci_acl_handle+0x12c>)
   1398c:	2300      	movs	r3, #0
   1398e:	aa05      	add	r2, sp, #20
   13990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13994:	f00f fd6f 	bl	23476 <z_impl_z_log_msg2_static_create>
		ll_tx_mem_release(node_tx);
   13998:	4620      	mov	r0, r4
   1399a:	f002 fc4f 	bl	1623c <ll_tx_mem_release>
		return -EINVAL;
   1399e:	f06f 0015 	mvn.w	r0, #21
   139a2:	e7d9      	b.n	13958 <hci_acl_handle+0x48>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   139a4:	7903      	ldrb	r3, [r0, #4]
   139a6:	2202      	movs	r2, #2
   139a8:	f362 0301 	bfi	r3, r2, #0, #2
   139ac:	7103      	strb	r3, [r0, #4]
		break;
   139ae:	e7da      	b.n	13966 <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   139b0:	4a23      	ldr	r2, [pc, #140]	; (13a40 <hci_acl_handle+0x130>)
   139b2:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI ACL packet length");
   139b4:	9206      	str	r2, [sp, #24]
   139b6:	9301      	str	r3, [sp, #4]
   139b8:	9305      	str	r3, [sp, #20]
   139ba:	4820      	ldr	r0, [pc, #128]	; (13a3c <hci_acl_handle+0x12c>)
   139bc:	4623      	mov	r3, r4
   139be:	aa05      	add	r2, sp, #20
   139c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   139c4:	f00f fd57 	bl	23476 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   139c8:	f06f 0015 	mvn.w	r0, #21
   139cc:	e7c4      	b.n	13958 <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   139ce:	4a1d      	ldr	r2, [pc, #116]	; (13a44 <hci_acl_handle+0x134>)
   139d0:	2302      	movs	r3, #2
   139d2:	e7ef      	b.n	139b4 <hci_acl_handle+0xa4>
		BT_ERR("Invalid HCI ACL packet length");
   139d4:	4a1c      	ldr	r2, [pc, #112]	; (13a48 <hci_acl_handle+0x138>)
   139d6:	2302      	movs	r3, #2
   139d8:	e7ec      	b.n	139b4 <hci_acl_handle+0xa4>
		BT_ERR("Tx Buffer Overflow");
   139da:	2502      	movs	r5, #2
   139dc:	4b1b      	ldr	r3, [pc, #108]	; (13a4c <hci_acl_handle+0x13c>)
   139de:	9306      	str	r3, [sp, #24]
   139e0:	9501      	str	r5, [sp, #4]
   139e2:	9505      	str	r5, [sp, #20]
   139e4:	4815      	ldr	r0, [pc, #84]	; (13a3c <hci_acl_handle+0x12c>)
   139e6:	4623      	mov	r3, r4
   139e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   139ec:	aa05      	add	r2, sp, #20
   139ee:	f00f fd42 	bl	23476 <z_impl_z_log_msg2_static_create>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   139f2:	4b17      	ldr	r3, [pc, #92]	; (13a50 <hci_acl_handle+0x140>)
   139f4:	681b      	ldr	r3, [r3, #0]
   139f6:	019b      	lsls	r3, r3, #6
   139f8:	d402      	bmi.n	13a00 <hci_acl_handle+0xf0>
		return -ENOBUFS;
   139fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   139fe:	e7ab      	b.n	13958 <hci_acl_handle+0x48>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a08:	2001      	movs	r0, #1
   13a0a:	f7f5 fc4b 	bl	92a4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   13a0e:	4629      	mov	r1, r5
   13a10:	f8c8 0000 	str.w	r0, [r8]
   13a14:	3008      	adds	r0, #8
   13a16:	f013 fb47 	bl	270a8 <net_buf_simple_add>
	hdr->len = len;
   13a1a:	2401      	movs	r4, #1
	hdr->evt = evt;
   13a1c:	221a      	movs	r2, #26
   13a1e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13a20:	7044      	strb	r4, [r0, #1]
   13a22:	f8d8 0000 	ldr.w	r0, [r8]
   13a26:	4621      	mov	r1, r4
   13a28:	3008      	adds	r0, #8
   13a2a:	f013 fb3d 	bl	270a8 <net_buf_simple_add>
   13a2e:	4603      	mov	r3, r0
		return -ENOBUFS;
   13a30:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   13a34:	701c      	strb	r4, [r3, #0]
   13a36:	e78f      	b.n	13958 <hci_acl_handle+0x48>
   13a38:	000293d4 	.word	0x000293d4
   13a3c:	000288d0 	.word	0x000288d0
   13a40:	00029370 	.word	0x00029370
   13a44:	000293a4 	.word	0x000293a4
   13a48:	00029384 	.word	0x00029384
   13a4c:	000293c0 	.word	0x000293c0
   13a50:	20000158 	.word	0x20000158

00013a54 <hci_disconn_complete_encode>:
{
   13a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   13a56:	4b0e      	ldr	r3, [pc, #56]	; (13a90 <hci_disconn_complete_encode+0x3c>)
   13a58:	681b      	ldr	r3, [r3, #0]
   13a5a:	06db      	lsls	r3, r3, #27
   13a5c:	d400      	bmi.n	13a60 <hci_disconn_complete_encode+0xc>
}
   13a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a60:	f102 0408 	add.w	r4, r2, #8
   13a64:	4605      	mov	r5, r0
   13a66:	460e      	mov	r6, r1
   13a68:	4620      	mov	r0, r4
   13a6a:	2102      	movs	r1, #2
   13a6c:	f013 fb1c 	bl	270a8 <net_buf_simple_add>
   13a70:	4603      	mov	r3, r0
	hdr->len = len;
   13a72:	2104      	movs	r1, #4
	hdr->evt = evt;
   13a74:	2205      	movs	r2, #5
	hdr->len = len;
   13a76:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   13a78:	701a      	strb	r2, [r3, #0]
   13a7a:	4620      	mov	r0, r4
   13a7c:	f013 fb14 	bl	270a8 <net_buf_simple_add>
   13a80:	2700      	movs	r7, #0
	ep->status = 0x00;
   13a82:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13a84:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   13a88:	782b      	ldrb	r3, [r5, #0]
   13a8a:	70c3      	strb	r3, [r0, #3]
}
   13a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a8e:	bf00      	nop
   13a90:	20000158 	.word	0x20000158

00013a94 <hci_disconn_complete_process>:
	conn_count--;
   13a94:	4a02      	ldr	r2, [pc, #8]	; (13aa0 <hci_disconn_complete_process+0xc>)
   13a96:	6813      	ldr	r3, [r2, #0]
   13a98:	3b01      	subs	r3, #1
   13a9a:	6013      	str	r3, [r2, #0]
}
   13a9c:	4770      	bx	lr
   13a9e:	bf00      	nop
   13aa0:	200023ac 	.word	0x200023ac

00013aa4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   13aa4:	7f03      	ldrb	r3, [r0, #28]
   13aa6:	f003 0303 	and.w	r3, r3, #3
   13aaa:	3b01      	subs	r3, #1
   13aac:	2b01      	cmp	r3, #1
{
   13aae:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   13ab0:	d90d      	bls.n	13ace <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   13ab2:	4a16      	ldr	r2, [pc, #88]	; (13b0c <hci_acl_encode+0x68>)
   13ab4:	4916      	ldr	r1, [pc, #88]	; (13b10 <hci_acl_encode+0x6c>)
   13ab6:	4817      	ldr	r0, [pc, #92]	; (13b14 <hci_acl_encode+0x70>)
   13ab8:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   13abc:	f00e fe22 	bl	22704 <printk>
   13ac0:	4040      	eors	r0, r0
   13ac2:	f380 8811 	msr	BASEPRI, r0
   13ac6:	f04f 0003 	mov.w	r0, #3
   13aca:	df02      	svc	2
		break;
	}
}
   13acc:	bd70      	pop	{r4, r5, r6, pc}
   13ace:	4604      	mov	r4, r0
   13ad0:	f101 0508 	add.w	r5, r1, #8
   13ad4:	4628      	mov	r0, r5
   13ad6:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   13ad8:	88e6      	ldrh	r6, [r4, #6]
   13ada:	f013 fae5 	bl	270a8 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   13ade:	7f23      	ldrb	r3, [r4, #28]
   13ae0:	f003 0303 	and.w	r3, r3, #3
   13ae4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   13ae6:	bf0c      	ite	eq
   13ae8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   13aec:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   13af0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   13af2:	7f61      	ldrb	r1, [r4, #29]
   13af4:	8041      	strh	r1, [r0, #2]
   13af6:	4628      	mov	r0, r5
   13af8:	f013 fad6 	bl	270a8 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   13afc:	7f62      	ldrb	r2, [r4, #29]
   13afe:	f104 011f 	add.w	r1, r4, #31
}
   13b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   13b06:	f010 bf4a 	b.w	2499e <memcpy>
   13b0a:	bf00      	nop
   13b0c:	000293e8 	.word	0x000293e8
   13b10:	000292b8 	.word	0x000292b8
   13b14:	00029220 	.word	0x00029220

00013b18 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   13b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b1c:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13b1e:	f890 c004 	ldrb.w	ip, [r0, #4]
   13b22:	f1bc 0f03 	cmp.w	ip, #3
{
   13b26:	af04      	add	r7, sp, #16
   13b28:	4604      	mov	r4, r0
   13b2a:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   13b2c:	f100 061c 	add.w	r6, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13b30:	d020      	beq.n	13b74 <hci_evt_encode+0x5c>
	switch (node_rx->hdr.type) {
   13b32:	f1ac 0c05 	sub.w	ip, ip, #5
	handle = node_rx->hdr.handle;
   13b36:	f8b0 8006 	ldrh.w	r8, [r0, #6]
	switch (node_rx->hdr.type) {
   13b3a:	f1bc 0f17 	cmp.w	ip, #23
   13b3e:	d835      	bhi.n	13bac <hci_evt_encode+0x94>
   13b40:	e8df f01c 	tbh	[pc, ip, lsl #1]
   13b44:	00340045 	.word	0x00340045
   13b48:	00340034 	.word	0x00340034
   13b4c:	00340034 	.word	0x00340034
   13b50:	00340034 	.word	0x00340034
   13b54:	00340034 	.word	0x00340034
   13b58:	00340034 	.word	0x00340034
   13b5c:	00340034 	.word	0x00340034
   13b60:	00340034 	.word	0x00340034
   13b64:	00c00034 	.word	0x00c00034
   13b68:	0122011c 	.word	0x0122011c
   13b6c:	01680151 	.word	0x01680151
   13b70:	01b0017c 	.word	0x01b0017c
	switch (pdu_data->llctrl.opcode) {
   13b74:	7fc3      	ldrb	r3, [r0, #31]
   13b76:	f8b0 8006 	ldrh.w	r8, [r0, #6]
   13b7a:	3b03      	subs	r3, #3
   13b7c:	2b12      	cmp	r3, #18
   13b7e:	f200 81c6 	bhi.w	13f0e <hci_evt_encode+0x3f6>
   13b82:	e8df f013 	tbh	[pc, r3, lsl #1]
   13b86:	0228      	.short	0x0228
   13b88:	01c401c4 	.word	0x01c401c4
   13b8c:	026e0255 	.word	0x026e0255
   13b90:	028201c4 	.word	0x028201c4
   13b94:	01c401c4 	.word	0x01c401c4
   13b98:	02b801c4 	.word	0x02b801c4
   13b9c:	028901c4 	.word	0x028901c4
   13ba0:	02af01c4 	.word	0x02af01c4
   13ba4:	01c401c4 	.word	0x01c401c4
   13ba8:	01d201d2 	.word	0x01d201d2
		LL_ASSERT(0);
   13bac:	4ab4      	ldr	r2, [pc, #720]	; (13e80 <hci_evt_encode+0x368>)
   13bae:	49b5      	ldr	r1, [pc, #724]	; (13e84 <hci_evt_encode+0x36c>)
   13bb0:	48b5      	ldr	r0, [pc, #724]	; (13e88 <hci_evt_encode+0x370>)
   13bb2:	f641 43af 	movw	r3, #7343	; 0x1caf
   13bb6:	f00e fda5 	bl	22704 <printk>
   13bba:	4040      	eors	r0, r0
   13bbc:	f380 8811 	msr	BASEPRI, r0
   13bc0:	f04f 0003 	mov.w	r0, #3
   13bc4:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   13bc6:	372c      	adds	r7, #44	; 0x2c
   13bc8:	46bd      	mov	sp, r7
   13bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   13bce:	4aaf      	ldr	r2, [pc, #700]	; (13e8c <hci_evt_encode+0x374>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   13bd0:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   13bd2:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   13bd4:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   13bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
   13bdc:	0c0a      	lsrs	r2, r1, #16
   13bde:	75ba      	strb	r2, [r7, #22]
	if (adv->tx_addr) {
   13be0:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   13be2:	6138      	str	r0, [r7, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   13be4:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   13be6:	0650      	lsls	r0, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   13be8:	82b9      	strh	r1, [r7, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   13bea:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   13bee:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   13bf2:	f100 82b2 	bmi.w	1415a <hci_evt_encode+0x642>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13bf6:	4ba6      	ldr	r3, [pc, #664]	; (13e90 <hci_evt_encode+0x378>)
   13bf8:	685b      	ldr	r3, [r3, #4]
	if (direct_report) {
   13bfa:	2e00      	cmp	r6, #0
   13bfc:	f040 82f2 	bne.w	141e4 <hci_evt_encode+0x6cc>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13c00:	009b      	lsls	r3, r3, #2
   13c02:	d5e0      	bpl.n	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   13c04:	4ba3      	ldr	r3, [pc, #652]	; (13e94 <hci_evt_encode+0x37c>)
   13c06:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13c08:	079e      	lsls	r6, r3, #30
   13c0a:	d5dc      	bpl.n	13bc6 <hci_evt_encode+0xae>
	if (dup_count >= 0) {
   13c0c:	4ba2      	ldr	r3, [pc, #648]	; (13e98 <hci_evt_encode+0x380>)
   13c0e:	681b      	ldr	r3, [r3, #0]
   13c10:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   13c12:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   13c16:	db09      	blt.n	13c2c <hci_evt_encode+0x114>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   13c18:	7f20      	ldrb	r0, [r4, #28]
   13c1a:	465a      	mov	r2, fp
   13c1c:	f3c0 1180 	ubfx	r1, r0, #6, #1
   13c20:	f000 000f 	and.w	r0, r0, #15
   13c24:	f7ff f81a 	bl	12c5c <dup_found.part.0>
	if (dup_scan &&
   13c28:	2800      	cmp	r0, #0
   13c2a:	d1cc      	bne.n	13bc6 <hci_evt_encode+0xae>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   13c2c:	7f23      	ldrb	r3, [r4, #28]
   13c2e:	f003 030f 	and.w	r3, r3, #15
   13c32:	2b01      	cmp	r3, #1
   13c34:	f000 839a 	beq.w	1436c <hci_evt_encode+0x854>
		data_len = (adv->len - BDADDR_SIZE);
   13c38:	7f63      	ldrb	r3, [r4, #29]
   13c3a:	1f9e      	subs	r6, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   13c3c:	1d9a      	adds	r2, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   13c3e:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   13c40:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   13c42:	b2d2      	uxtb	r2, r2
   13c44:	603a      	str	r2, [r7, #0]
	return net_buf_add(buf, melen);
   13c46:	b2db      	uxtb	r3, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   13c48:	46b2      	mov	sl, r6
   13c4a:	3508      	adds	r5, #8
   13c4c:	2102      	movs	r1, #2
   13c4e:	4628      	mov	r0, r5
   13c50:	607b      	str	r3, [r7, #4]
   13c52:	f013 fa29 	bl	270a8 <net_buf_simple_add>
	hdr->len = len;
   13c56:	683b      	ldr	r3, [r7, #0]
   13c58:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   13c5a:	213e      	movs	r1, #62	; 0x3e
   13c5c:	7001      	strb	r1, [r0, #0]
   13c5e:	2101      	movs	r1, #1
   13c60:	4628      	mov	r0, r5
   13c62:	f013 fa21 	bl	270a8 <net_buf_simple_add>
   13c66:	687b      	ldr	r3, [r7, #4]
   13c68:	4684      	mov	ip, r0
   13c6a:	4619      	mov	r1, r3
	me->subevent = subevt;
   13c6c:	2302      	movs	r3, #2
   13c6e:	f88c 3000 	strb.w	r3, [ip]
   13c72:	4628      	mov	r0, r5
   13c74:	f013 fa18 	bl	270a8 <net_buf_simple_add>
	sep->num_reports = 1U;
   13c78:	2301      	movs	r3, #1
   13c7a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   13c7c:	7f23      	ldrb	r3, [r4, #28]
   13c7e:	f003 030f 	and.w	r3, r3, #15
   13c82:	f107 0208 	add.w	r2, r7, #8
   13c86:	3320      	adds	r3, #32
   13c88:	4413      	add	r3, r2
   13c8a:	4605      	mov	r5, r0
   13c8c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
   13c90:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   13c92:	f005 fc7d 	bl	19590 <ll_rl_size_get>
   13c96:	4581      	cmp	r9, r0
   13c98:	f080 8339 	bcs.w	1430e <hci_evt_encode+0x7f6>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   13c9c:	4648      	mov	r0, r9
   13c9e:	1cea      	adds	r2, r5, #3
   13ca0:	1ca9      	adds	r1, r5, #2
   13ca2:	f005 fc2f 	bl	19504 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   13ca6:	78ab      	ldrb	r3, [r5, #2]
   13ca8:	3302      	adds	r3, #2
   13caa:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   13cac:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   13cb0:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   13cb2:	4652      	mov	r2, sl
   13cb4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   13cb8:	4648      	mov	r0, r9
   13cba:	f010 fe70 	bl	2499e <memcpy>
	*prssi = rssi;
   13cbe:	f809 800a 	strb.w	r8, [r9, sl]
   13cc2:	e780      	b.n	13bc6 <hci_evt_encode+0xae>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   13cc4:	07f0      	lsls	r0, r6, #31
   13cc6:	f100 823a 	bmi.w	1413e <hci_evt_encode+0x626>
	status = cc->status;
   13cca:	7f26      	ldrb	r6, [r4, #28]
	if (!status) {
   13ccc:	2e00      	cmp	r6, #0
   13cce:	f000 822d 	beq.w	1412c <hci_evt_encode+0x614>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13cd2:	4b6f      	ldr	r3, [pc, #444]	; (13e90 <hci_evt_encode+0x378>)
   13cd4:	685b      	ldr	r3, [r3, #4]
   13cd6:	0099      	lsls	r1, r3, #2
   13cd8:	f57f af75 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   13cdc:	4b6d      	ldr	r3, [pc, #436]	; (13e94 <hci_evt_encode+0x37c>)
   13cde:	681b      	ldr	r3, [r3, #0]
   13ce0:	f240 2201 	movw	r2, #513	; 0x201
   13ce4:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   13ce6:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   13cea:	f43f af6c 	beq.w	13bc6 <hci_evt_encode+0xae>
	if (!status) {
   13cee:	2e00      	cmp	r6, #0
   13cf0:	f040 8245 	bne.w	1417e <hci_evt_encode+0x666>
		conn_count++;
   13cf4:	4a69      	ldr	r2, [pc, #420]	; (13e9c <hci_evt_encode+0x384>)
   13cf6:	6813      	ldr	r3, [r2, #0]
   13cf8:	3301      	adds	r3, #1
   13cfa:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13cfc:	f1b9 0f00 	cmp.w	r9, #0
   13d00:	f000 82ce 	beq.w	142a0 <hci_evt_encode+0x788>
   13d04:	3508      	adds	r5, #8
   13d06:	2102      	movs	r1, #2
   13d08:	4628      	mov	r0, r5
   13d0a:	f013 f9cd 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13d0e:	233e      	movs	r3, #62	; 0x3e
   13d10:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13d12:	231f      	movs	r3, #31
   13d14:	7043      	strb	r3, [r0, #1]
   13d16:	2101      	movs	r1, #1
   13d18:	4628      	mov	r0, r5
   13d1a:	f013 f9c5 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   13d1e:	230a      	movs	r3, #10
   13d20:	7003      	strb	r3, [r0, #0]
   13d22:	211e      	movs	r1, #30
   13d24:	4628      	mov	r0, r5
   13d26:	f013 f9bf 	bl	270a8 <net_buf_simple_add>
		leecc->status = 0x00;
   13d2a:	7006      	strb	r6, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   13d2c:	f8a0 8001 	strh.w	r8, [r0, #1]
		leecc->role = cc->role;
   13d30:	7f63      	ldrb	r3, [r4, #29]
   13d32:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   13d34:	7fa3      	ldrb	r3, [r4, #30]
   13d36:	7103      	strb	r3, [r0, #4]
   13d38:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   13d3a:	2206      	movs	r2, #6
   13d3c:	f104 011f 	add.w	r1, r4, #31
   13d40:	3005      	adds	r0, #5
   13d42:	f010 fe2c 	bl	2499e <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   13d46:	2206      	movs	r2, #6
   13d48:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   13d4c:	f105 000b 	add.w	r0, r5, #11
   13d50:	f010 fe25 	bl	2499e <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   13d54:	2206      	movs	r2, #6
   13d56:	f104 0125 	add.w	r1, r4, #37	; 0x25
   13d5a:	f105 0011 	add.w	r0, r5, #17
   13d5e:	f010 fe1e 	bl	2499e <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13d62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   13d64:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   13d66:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13d68:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   13d6c:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13d70:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   13d74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13d78:	776b      	strb	r3, [r5, #29]
		return;
   13d7a:	e724      	b.n	13bc6 <hci_evt_encode+0xae>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   13d7c:	460a      	mov	r2, r1
   13d7e:	4630      	mov	r0, r6
   13d80:	4641      	mov	r1, r8
   13d82:	f7ff fe67 	bl	13a54 <hci_disconn_complete_encode>
		break;
   13d86:	e71e      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13d88:	4b41      	ldr	r3, [pc, #260]	; (13e90 <hci_evt_encode+0x378>)
   13d8a:	685b      	ldr	r3, [r3, #4]
   13d8c:	009a      	lsls	r2, r3, #2
   13d8e:	f57f af1a 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   13d92:	4b40      	ldr	r3, [pc, #256]	; (13e94 <hci_evt_encode+0x37c>)
   13d94:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13d96:	075b      	lsls	r3, r3, #29
   13d98:	f57f af15 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13d9c:	3508      	adds	r5, #8
   13d9e:	2102      	movs	r1, #2
   13da0:	4628      	mov	r0, r5
   13da2:	f013 f981 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13da6:	233e      	movs	r3, #62	; 0x3e
   13da8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13daa:	230a      	movs	r3, #10
   13dac:	7043      	strb	r3, [r0, #1]
   13dae:	2101      	movs	r1, #1
   13db0:	4628      	mov	r0, r5
   13db2:	f013 f979 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   13db6:	2303      	movs	r3, #3
   13db8:	7003      	strb	r3, [r0, #0]
   13dba:	2109      	movs	r1, #9
   13dbc:	4628      	mov	r0, r5
   13dbe:	f013 f973 	bl	270a8 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   13dc2:	07f6      	lsls	r6, r6, #31
   13dc4:	4605      	mov	r5, r0
   13dc6:	f100 82c3 	bmi.w	14350 <hci_evt_encode+0x838>
	sep->status = cu->status;
   13dca:	7f23      	ldrb	r3, [r4, #28]
   13dcc:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   13dce:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13dd0:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13dd2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13dd4:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   13dd8:	f8a5 8001 	strh.w	r8, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   13ddc:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13de0:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13de4:	e6ef      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   13de6:	4b2a      	ldr	r3, [pc, #168]	; (13e90 <hci_evt_encode+0x378>)
   13de8:	685b      	ldr	r3, [r3, #4]
   13dea:	0418      	lsls	r0, r3, #16
   13dec:	f04f 0400 	mov.w	r4, #0
   13df0:	f57f aee9 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13df4:	3508      	adds	r5, #8
   13df6:	2102      	movs	r1, #2
   13df8:	4628      	mov	r0, r5
   13dfa:	f013 f955 	bl	270a8 <net_buf_simple_add>
	hdr->len = len;
   13dfe:	2103      	movs	r1, #3
	hdr->evt = evt;
   13e00:	2330      	movs	r3, #48	; 0x30
   13e02:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13e04:	7041      	strb	r1, [r0, #1]
   13e06:	4628      	mov	r0, r5
   13e08:	f013 f94e 	bl	270a8 <net_buf_simple_add>
	ep->status = 0x00;
   13e0c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13e0e:	f8a0 8001 	strh.w	r8, [r0, #1]
   13e12:	e6d8      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   13e14:	4b22      	ldr	r3, [pc, #136]	; (13ea0 <hci_evt_encode+0x388>)
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	0219      	lsls	r1, r3, #8
   13e1a:	f57f aed4 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13e1e:	3508      	adds	r5, #8
   13e20:	2102      	movs	r1, #2
   13e22:	4628      	mov	r0, r5
   13e24:	f013 f940 	bl	270a8 <net_buf_simple_add>
	hdr->len = len;
   13e28:	2102      	movs	r1, #2
	hdr->evt = evt;
   13e2a:	2357      	movs	r3, #87	; 0x57
   13e2c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13e2e:	7041      	strb	r1, [r0, #1]
   13e30:	4628      	mov	r0, r5
   13e32:	f013 f939 	bl	270a8 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   13e36:	f8a0 8000 	strh.w	r8, [r0]
   13e3a:	e6c4      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13e3c:	4b14      	ldr	r3, [pc, #80]	; (13e90 <hci_evt_encode+0x378>)
   13e3e:	685b      	ldr	r3, [r3, #4]
   13e40:	009a      	lsls	r2, r3, #2
   13e42:	f57f aec0 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   13e46:	4b13      	ldr	r3, [pc, #76]	; (13e94 <hci_evt_encode+0x37c>)
   13e48:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13e4a:	031b      	lsls	r3, r3, #12
   13e4c:	f57f aebb 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13e50:	3508      	adds	r5, #8
   13e52:	2102      	movs	r1, #2
   13e54:	4628      	mov	r0, r5
   13e56:	f013 f927 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13e5a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13e5c:	2304      	movs	r3, #4
	hdr->evt = evt;
   13e5e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13e60:	7043      	strb	r3, [r0, #1]
   13e62:	2101      	movs	r1, #1
   13e64:	4628      	mov	r0, r5
   13e66:	f013 f91f 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   13e6a:	2314      	movs	r3, #20
   13e6c:	7003      	strb	r3, [r0, #0]
   13e6e:	2103      	movs	r1, #3
   13e70:	4628      	mov	r0, r5
   13e72:	f013 f919 	bl	270a8 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13e76:	f8a0 8000 	strh.w	r8, [r0]
	sep->chan_sel_algo = cs->csa;
   13e7a:	7f23      	ldrb	r3, [r4, #28]
   13e7c:	7083      	strb	r3, [r0, #2]
   13e7e:	e6a2      	b.n	13bc6 <hci_evt_encode+0xae>
   13e80:	000293e8 	.word	0x000293e8
   13e84:	000292b8 	.word	0x000292b8
   13e88:	00029220 	.word	0x00029220
   13e8c:	00028ac0 	.word	0x00028ac0
   13e90:	20000158 	.word	0x20000158
   13e94:	20000160 	.word	0x20000160
   13e98:	200023b0 	.word	0x200023b0
   13e9c:	200023ac 	.word	0x200023ac
   13ea0:	20001998 	.word	0x20001998
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13ea4:	4bc5      	ldr	r3, [pc, #788]	; (141bc <hci_evt_encode+0x6a4>)
   13ea6:	685b      	ldr	r3, [r3, #4]
   13ea8:	009e      	lsls	r6, r3, #2
   13eaa:	d503      	bpl.n	13eb4 <hci_evt_encode+0x39c>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   13eac:	4bc4      	ldr	r3, [pc, #784]	; (141c0 <hci_evt_encode+0x6a8>)
   13eae:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13eb0:	0518      	lsls	r0, r3, #20
   13eb2:	d462      	bmi.n	13f7a <hci_evt_encode+0x462>
   13eb4:	7f62      	ldrb	r2, [r4, #29]
   13eb6:	7fa3      	ldrb	r3, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   13eb8:	7f26      	ldrb	r6, [r4, #28]
   13eba:	2a00      	cmp	r2, #0
   13ebc:	fa92 f2a2 	rbit	r2, r2
   13ec0:	fab2 f282 	clz	r2, r2
   13ec4:	466d      	mov	r5, sp
   13ec6:	bf08      	it	eq
   13ec8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   13ecc:	b08a      	sub	sp, #40	; 0x28
   13ece:	2b00      	cmp	r3, #0
   13ed0:	f102 0101 	add.w	r1, r2, #1
   13ed4:	a804      	add	r0, sp, #16
   13ed6:	4abb      	ldr	r2, [pc, #748]	; (141c4 <hci_evt_encode+0x6ac>)
   13ed8:	9208      	str	r2, [sp, #32]
   13eda:	fa93 f3a3 	rbit	r3, r3
   13ede:	fab3 f383 	clz	r3, r3
   13ee2:	4602      	mov	r2, r0
   13ee4:	bf08      	it	eq
   13ee6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13eea:	2406      	movs	r4, #6
   13eec:	3301      	adds	r3, #1
   13eee:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
   13ef2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   13ef6:	930c      	str	r3, [sp, #48]	; 0x30
   13ef8:	613c      	str	r4, [r7, #16]
   13efa:	f842 4f0c 	str.w	r4, [r2, #12]!
   13efe:	48b2      	ldr	r0, [pc, #712]	; (141c8 <hci_evt_encode+0x6b0>)
   13f00:	2300      	movs	r3, #0
   13f02:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   13f06:	f00f fab6 	bl	23476 <z_impl_z_log_msg2_static_create>
   13f0a:	46ad      	mov	sp, r5
		return;
   13f0c:	e65b      	b.n	13bc6 <hci_evt_encode+0xae>
		LL_ASSERT(0);
   13f0e:	4aaf      	ldr	r2, [pc, #700]	; (141cc <hci_evt_encode+0x6b4>)
   13f10:	49af      	ldr	r1, [pc, #700]	; (141d0 <hci_evt_encode+0x6b8>)
   13f12:	48b0      	ldr	r0, [pc, #704]	; (141d4 <hci_evt_encode+0x6bc>)
   13f14:	f641 538f 	movw	r3, #7567	; 0x1d8f
   13f18:	f00e fbf4 	bl	22704 <printk>
   13f1c:	4040      	eors	r0, r0
   13f1e:	f380 8811 	msr	BASEPRI, r0
   13f22:	f04f 0003 	mov.w	r0, #3
   13f26:	df02      	svc	2
}
   13f28:	e64d      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f2a:	4ba4      	ldr	r3, [pc, #656]	; (141bc <hci_evt_encode+0x6a4>)
   13f2c:	685b      	ldr	r3, [r3, #4]
   13f2e:	009a      	lsls	r2, r3, #2
   13f30:	f57f ae49 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   13f34:	4ba2      	ldr	r3, [pc, #648]	; (141c0 <hci_evt_encode+0x6a8>)
   13f36:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f38:	065b      	lsls	r3, r3, #25
   13f3a:	f57f ae44 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13f3e:	3508      	adds	r5, #8
   13f40:	2102      	movs	r1, #2
   13f42:	4628      	mov	r0, r5
   13f44:	f013 f8b0 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13f48:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13f4a:	230b      	movs	r3, #11
	hdr->evt = evt;
   13f4c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13f4e:	7043      	strb	r3, [r0, #1]
   13f50:	2101      	movs	r1, #1
   13f52:	4628      	mov	r0, r5
   13f54:	f013 f8a8 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   13f58:	2307      	movs	r3, #7
   13f5a:	7003      	strb	r3, [r0, #0]
   13f5c:	210a      	movs	r1, #10
   13f5e:	4628      	mov	r0, r5
   13f60:	f013 f8a2 	bl	270a8 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13f64:	f8a0 8000 	strh.w	r8, [r0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   13f68:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13f6a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   13f6c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13f6e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13f70:	8c23      	ldrh	r3, [r4, #32]
   13f72:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   13f74:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13f76:	8103      	strh	r3, [r0, #8]
   13f78:	e625      	b.n	13bc6 <hci_evt_encode+0xae>
   13f7a:	3508      	adds	r5, #8
   13f7c:	2102      	movs	r1, #2
   13f7e:	4628      	mov	r0, r5
   13f80:	f013 f892 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13f84:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13f86:	2306      	movs	r3, #6
	hdr->evt = evt;
   13f88:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13f8a:	7043      	strb	r3, [r0, #1]
   13f8c:	2101      	movs	r1, #1
   13f8e:	4628      	mov	r0, r5
   13f90:	f013 f88a 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   13f94:	230c      	movs	r3, #12
   13f96:	7003      	strb	r3, [r0, #0]
   13f98:	2105      	movs	r1, #5
   13f9a:	4628      	mov	r0, r5
   13f9c:	f013 f884 	bl	270a8 <net_buf_simple_add>
	sep->status = pu->status;
   13fa0:	7f23      	ldrb	r3, [r4, #28]
   13fa2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   13fa4:	f8a0 8001 	strh.w	r8, [r0, #1]
   13fa8:	7f62      	ldrb	r2, [r4, #29]
   13faa:	2a00      	cmp	r2, #0
   13fac:	fa92 f3a2 	rbit	r3, r2
   13fb0:	fab3 f383 	clz	r3, r3
   13fb4:	bf08      	it	eq
   13fb6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13fba:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   13fbc:	70c3      	strb	r3, [r0, #3]
   13fbe:	7fa2      	ldrb	r2, [r4, #30]
   13fc0:	fa92 f3a2 	rbit	r3, r2
   13fc4:	2a00      	cmp	r2, #0
   13fc6:	fab3 f383 	clz	r3, r3
   13fca:	bf08      	it	eq
   13fcc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13fd0:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   13fd2:	7103      	strb	r3, [r0, #4]
   13fd4:	e5f7      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13fd6:	4b79      	ldr	r3, [pc, #484]	; (141bc <hci_evt_encode+0x6a4>)
   13fd8:	685b      	ldr	r3, [r3, #4]
   13fda:	0099      	lsls	r1, r3, #2
   13fdc:	f57f adf3 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   13fe0:	4b77      	ldr	r3, [pc, #476]	; (141c0 <hci_evt_encode+0x6a8>)
   13fe2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13fe4:	06da      	lsls	r2, r3, #27
   13fe6:	f57f adee 	bpl.w	13bc6 <hci_evt_encode+0xae>
   13fea:	3508      	adds	r5, #8
   13fec:	2102      	movs	r1, #2
   13fee:	4628      	mov	r0, r5
   13ff0:	f013 f85a 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   13ff4:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13ff6:	230d      	movs	r3, #13
	hdr->evt = evt;
   13ff8:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13ffa:	7043      	strb	r3, [r0, #1]
   13ffc:	2101      	movs	r1, #1
   13ffe:	4628      	mov	r0, r5
   14000:	f013 f852 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   14004:	2305      	movs	r3, #5
   14006:	7003      	strb	r3, [r0, #0]
   14008:	210c      	movs	r1, #12
   1400a:	4628      	mov	r0, r5
   1400c:	f013 f84c 	bl	270a8 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   14010:	f104 0120 	add.w	r1, r4, #32
   14014:	4605      	mov	r5, r0
   14016:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   14018:	f820 8b02 	strh.w	r8, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1401c:	f010 fcbf 	bl	2499e <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   14020:	2202      	movs	r2, #2
   14022:	f104 0128 	add.w	r1, r4, #40	; 0x28
   14026:	f105 000a 	add.w	r0, r5, #10
   1402a:	f010 fcb8 	bl	2499e <memcpy>
   1402e:	e5ca      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   14030:	4b62      	ldr	r3, [pc, #392]	; (141bc <hci_evt_encode+0x6a4>)
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	061b      	lsls	r3, r3, #24
   14036:	f04f 0400 	mov.w	r4, #0
   1403a:	f57f adc4 	bpl.w	13bc6 <hci_evt_encode+0xae>
   1403e:	3508      	adds	r5, #8
   14040:	2102      	movs	r1, #2
   14042:	4628      	mov	r0, r5
   14044:	f013 f830 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   14048:	2308      	movs	r3, #8
	hdr->len = len;
   1404a:	2104      	movs	r1, #4
	hdr->evt = evt;
   1404c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1404e:	7041      	strb	r1, [r0, #1]
   14050:	4628      	mov	r0, r5
   14052:	f013 f829 	bl	270a8 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   14056:	2301      	movs	r3, #1
	ep->status = err;
   14058:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1405a:	f8a0 8001 	strh.w	r8, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1405e:	70c3      	strb	r3, [r0, #3]
   14060:	e5b1      	b.n	13bc6 <hci_evt_encode+0xae>
		le_unknown_rsp(pdu_data, handle, buf);
   14062:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   14066:	2b0e      	cmp	r3, #14
   14068:	f000 814a 	beq.w	14300 <hci_evt_encode+0x7e8>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1406c:	495a      	ldr	r1, [pc, #360]	; (141d8 <hci_evt_encode+0x6c0>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1406e:	e9c7 1308 	strd	r1, r3, [r7, #32]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   14072:	2203      	movs	r2, #3
   14074:	60fa      	str	r2, [r7, #12]
   14076:	61fa      	str	r2, [r7, #28]
   14078:	4853      	ldr	r0, [pc, #332]	; (141c8 <hci_evt_encode+0x6b0>)
   1407a:	2300      	movs	r3, #0
   1407c:	f107 021c 	add.w	r2, r7, #28
   14080:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14084:	f00f f9f7 	bl	23476 <z_impl_z_log_msg2_static_create>
}
   14088:	e59d      	b.n	13bc6 <hci_evt_encode+0xae>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1408a:	460b      	mov	r3, r1
   1408c:	4642      	mov	r2, r8
   1408e:	4631      	mov	r1, r6
   14090:	2000      	movs	r0, #0
   14092:	f7fe fe43 	bl	12d1c <le_remote_feat_complete>
		break;
   14096:	e596      	b.n	13bc6 <hci_evt_encode+0xae>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14098:	4b48      	ldr	r3, [pc, #288]	; (141bc <hci_evt_encode+0x6a4>)
   1409a:	685b      	ldr	r3, [r3, #4]
   1409c:	0098      	lsls	r0, r3, #2
   1409e:	d564      	bpl.n	1416a <hci_evt_encode+0x652>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   140a0:	4b47      	ldr	r3, [pc, #284]	; (141c0 <hci_evt_encode+0x6a8>)
   140a2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   140a4:	0699      	lsls	r1, r3, #26
   140a6:	d560      	bpl.n	1416a <hci_evt_encode+0x652>
   140a8:	3508      	adds	r5, #8
   140aa:	2102      	movs	r1, #2
   140ac:	4628      	mov	r0, r5
   140ae:	f012 fffb 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   140b2:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   140b4:	230b      	movs	r3, #11
	hdr->evt = evt;
   140b6:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   140b8:	7043      	strb	r3, [r0, #1]
   140ba:	2101      	movs	r1, #1
   140bc:	4628      	mov	r0, r5
   140be:	f012 fff3 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   140c2:	2306      	movs	r3, #6
   140c4:	7003      	strb	r3, [r0, #0]
   140c6:	210a      	movs	r1, #10
   140c8:	4628      	mov	r0, r5
   140ca:	f012 ffed 	bl	270a8 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   140ce:	f8a0 8000 	strh.w	r8, [r0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   140d2:	8c23      	ldrh	r3, [r4, #32]
   140d4:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   140d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   140d8:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   140da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   140dc:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   140de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   140e0:	8103      	strh	r3, [r0, #8]
   140e2:	e570      	b.n	13bc6 <hci_evt_encode+0xae>
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   140e4:	f890 2020 	ldrb.w	r2, [r0, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   140e8:	493c      	ldr	r1, [pc, #240]	; (141dc <hci_evt_encode+0x6c4>)
   140ea:	2303      	movs	r3, #3
   140ec:	e9c7 1208 	strd	r1, r2, [r7, #32]
   140f0:	60fb      	str	r3, [r7, #12]
   140f2:	61fb      	str	r3, [r7, #28]
   140f4:	e7c0      	b.n	14078 <hci_evt_encode+0x560>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   140f6:	4b31      	ldr	r3, [pc, #196]	; (141bc <hci_evt_encode+0x6a4>)
   140f8:	681b      	ldr	r3, [r3, #0]
   140fa:	061e      	lsls	r6, r3, #24
   140fc:	f57f ad63 	bpl.w	13bc6 <hci_evt_encode+0xae>
   14100:	3508      	adds	r5, #8
   14102:	2102      	movs	r1, #2
   14104:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   14106:	f894 4020 	ldrb.w	r4, [r4, #32]
   1410a:	f012 ffcd 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   1410e:	2308      	movs	r3, #8
	hdr->len = len;
   14110:	2104      	movs	r1, #4
	hdr->evt = evt;
   14112:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   14114:	7041      	strb	r1, [r0, #1]
   14116:	4628      	mov	r0, r5
   14118:	f012 ffc6 	bl	270a8 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1411c:	fab4 f384 	clz	r3, r4
   14120:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   14122:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   14124:	f8a0 8001 	strh.w	r8, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   14128:	70c3      	strb	r3, [r0, #3]
   1412a:	e54c      	b.n	13bc6 <hci_evt_encode+0xae>
		ll_rl_crpa_set(cc->peer_addr_type,
   1412c:	7fa0      	ldrb	r0, [r4, #30]
   1412e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   14132:	22ff      	movs	r2, #255	; 0xff
   14134:	f104 011f 	add.w	r1, r4, #31
   14138:	f005 fb26 	bl	19788 <ll_rl_crpa_set>
   1413c:	e5c9      	b.n	13cd2 <hci_evt_encode+0x1ba>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   1413e:	4a23      	ldr	r2, [pc, #140]	; (141cc <hci_evt_encode+0x6b4>)
   14140:	4927      	ldr	r1, [pc, #156]	; (141e0 <hci_evt_encode+0x6c8>)
   14142:	4824      	ldr	r0, [pc, #144]	; (141d4 <hci_evt_encode+0x6bc>)
   14144:	f641 23f5 	movw	r3, #6901	; 0x1af5
   14148:	f00e fadc 	bl	22704 <printk>
   1414c:	4040      	eors	r0, r0
   1414e:	f380 8811 	msr	BASEPRI, r0
   14152:	f04f 0003 	mov.w	r0, #3
   14156:	df02      	svc	2
   14158:	e5b7      	b.n	13cca <hci_evt_encode+0x1b2>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   1415a:	2100      	movs	r1, #0
   1415c:	f104 031e 	add.w	r3, r4, #30
   14160:	464a      	mov	r2, r9
   14162:	4608      	mov	r0, r1
   14164:	f005 fb10 	bl	19788 <ll_rl_crpa_set>
   14168:	e545      	b.n	13bf6 <hci_evt_encode+0xde>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1416a:	2300      	movs	r3, #0
   1416c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   14170:	9300      	str	r3, [sp, #0]
   14172:	221a      	movs	r2, #26
   14174:	2102      	movs	r1, #2
   14176:	4640      	mov	r0, r8
   14178:	f002 f8a8 	bl	162cc <ll_conn_update>
		return;
   1417c:	e523      	b.n	13bc6 <hci_evt_encode+0xae>
   1417e:	3508      	adds	r5, #8
   14180:	2102      	movs	r1, #2
   14182:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   14184:	f1b9 0f00 	cmp.w	r9, #0
   14188:	f040 80cb 	bne.w	14322 <hci_evt_encode+0x80a>
   1418c:	f012 ff8c 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   14190:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   14192:	2313      	movs	r3, #19
	hdr->evt = evt;
   14194:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   14196:	7043      	strb	r3, [r0, #1]
   14198:	2101      	movs	r1, #1
   1419a:	4628      	mov	r0, r5
   1419c:	f012 ff84 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   141a0:	2301      	movs	r3, #1
   141a2:	7003      	strb	r3, [r0, #0]
   141a4:	2112      	movs	r1, #18
   141a6:	4628      	mov	r0, r5
   141a8:	f012 ff7e 	bl	270a8 <net_buf_simple_add>
   141ac:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   141ae:	2212      	movs	r2, #18
   141b0:	4649      	mov	r1, r9
   141b2:	f010 fbff 	bl	249b4 <memset>
		lecc->status = status;
   141b6:	7026      	strb	r6, [r4, #0]
		return;
   141b8:	e505      	b.n	13bc6 <hci_evt_encode+0xae>
   141ba:	bf00      	nop
   141bc:	20000158 	.word	0x20000158
   141c0:	20000160 	.word	0x20000160
   141c4:	000294c4 	.word	0x000294c4
   141c8:	000288d0 	.word	0x000288d0
   141cc:	000293e8 	.word	0x000293e8
   141d0:	000292b8 	.word	0x000292b8
   141d4:	00029220 	.word	0x00029220
   141d8:	000294f0 	.word	0x000294f0
   141dc:	00029500 	.word	0x00029500
   141e0:	0002944c 	.word	0x0002944c
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   141e4:	0099      	lsls	r1, r3, #2
   141e6:	f57f acee 	bpl.w	13bc6 <hci_evt_encode+0xae>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   141ea:	4b69      	ldr	r3, [pc, #420]	; (14390 <hci_evt_encode+0x878>)
   141ec:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   141ee:	055a      	lsls	r2, r3, #21
   141f0:	f57f ace9 	bpl.w	13bc6 <hci_evt_encode+0xae>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   141f4:	7f23      	ldrb	r3, [r4, #28]
   141f6:	f003 030f 	and.w	r3, r3, #15
   141fa:	2b01      	cmp	r3, #1
   141fc:	d00c      	beq.n	14218 <hci_evt_encode+0x700>
   141fe:	4a65      	ldr	r2, [pc, #404]	; (14394 <hci_evt_encode+0x87c>)
   14200:	4965      	ldr	r1, [pc, #404]	; (14398 <hci_evt_encode+0x880>)
   14202:	4866      	ldr	r0, [pc, #408]	; (1439c <hci_evt_encode+0x884>)
   14204:	f241 435a 	movw	r3, #5210	; 0x145a
   14208:	f00e fa7c 	bl	22704 <printk>
   1420c:	4040      	eors	r0, r0
   1420e:	f380 8811 	msr	BASEPRI, r0
   14212:	f04f 0003 	mov.w	r0, #3
   14216:	df02      	svc	2
	if (dup_count >= 0) {
   14218:	4b61      	ldr	r3, [pc, #388]	; (143a0 <hci_evt_encode+0x888>)
   1421a:	681b      	ldr	r3, [r3, #0]
   1421c:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   1421e:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   14222:	db0a      	blt.n	1423a <hci_evt_encode+0x722>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   14224:	7f20      	ldrb	r0, [r4, #28]
   14226:	4632      	mov	r2, r6
   14228:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1422c:	f000 000f 	and.w	r0, r0, #15
   14230:	f7fe fd14 	bl	12c5c <dup_found.part.0>
	if (dup_scan &&
   14234:	2800      	cmp	r0, #0
   14236:	f47f acc6 	bne.w	13bc6 <hci_evt_encode+0xae>
   1423a:	3508      	adds	r5, #8
   1423c:	2102      	movs	r1, #2
   1423e:	4628      	mov	r0, r5
   14240:	f012 ff32 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   14244:	233e      	movs	r3, #62	; 0x3e
   14246:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   14248:	2312      	movs	r3, #18
   1424a:	7043      	strb	r3, [r0, #1]
   1424c:	2101      	movs	r1, #1
   1424e:	4628      	mov	r0, r5
   14250:	f012 ff2a 	bl	270a8 <net_buf_simple_add>
   14254:	4603      	mov	r3, r0
	me->subevent = subevt;
   14256:	220b      	movs	r2, #11
   14258:	701a      	strb	r2, [r3, #0]
   1425a:	4628      	mov	r0, r5
   1425c:	2111      	movs	r1, #17
   1425e:	f012 ff23 	bl	270a8 <net_buf_simple_add>
	drp->num_reports = 1U;
   14262:	2301      	movs	r3, #1
   14264:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   14266:	7043      	strb	r3, [r0, #1]
   14268:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   1426a:	f005 f991 	bl	19590 <ll_rl_size_get>
   1426e:	4581      	cmp	r9, r0
   14270:	f080 8083 	bcs.w	1437a <hci_evt_encode+0x862>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   14274:	1cea      	adds	r2, r5, #3
   14276:	1ca9      	adds	r1, r5, #2
   14278:	4648      	mov	r0, r9
   1427a:	f005 f943 	bl	19504 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   1427e:	78ab      	ldrb	r3, [r5, #2]
   14280:	3302      	adds	r3, #2
   14282:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   14284:	7f23      	ldrb	r3, [r4, #28]
   14286:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   1428a:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   1428c:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   1428e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   14292:	f105 000a 	add.w	r0, r5, #10
   14296:	f010 fb82 	bl	2499e <memcpy>
	dir_info->rssi = rssi;
   1429a:	f885 8010 	strb.w	r8, [r5, #16]
   1429e:	e492      	b.n	13bc6 <hci_evt_encode+0xae>
   142a0:	3508      	adds	r5, #8
   142a2:	2102      	movs	r1, #2
   142a4:	4628      	mov	r0, r5
   142a6:	f012 feff 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   142aa:	233e      	movs	r3, #62	; 0x3e
   142ac:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   142ae:	2313      	movs	r3, #19
   142b0:	7043      	strb	r3, [r0, #1]
   142b2:	2101      	movs	r1, #1
   142b4:	4628      	mov	r0, r5
   142b6:	f012 fef7 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   142ba:	2301      	movs	r3, #1
   142bc:	7003      	strb	r3, [r0, #0]
   142be:	2112      	movs	r1, #18
   142c0:	4628      	mov	r0, r5
   142c2:	f012 fef1 	bl	270a8 <net_buf_simple_add>
	lecc->status = 0x00;
   142c6:	7006      	strb	r6, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   142c8:	f8a0 8001 	strh.w	r8, [r0, #1]
	lecc->role = cc->role;
   142cc:	7f63      	ldrb	r3, [r4, #29]
   142ce:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   142d0:	7fa3      	ldrb	r3, [r4, #30]
   142d2:	f003 0301 	and.w	r3, r3, #1
   142d6:	4605      	mov	r5, r0
   142d8:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   142da:	2206      	movs	r2, #6
   142dc:	f104 011f 	add.w	r1, r4, #31
   142e0:	3005      	adds	r0, #5
   142e2:	f010 fb5c 	bl	2499e <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   142e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   142e8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   142ea:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   142ec:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   142f0:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   142f4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   142f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   142fc:	746b      	strb	r3, [r5, #17]
   142fe:	e462      	b.n	13bc6 <hci_evt_encode+0xae>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   14300:	460b      	mov	r3, r1
   14302:	4642      	mov	r2, r8
   14304:	2100      	movs	r1, #0
   14306:	201a      	movs	r0, #26
   14308:	f7fe fd08 	bl	12d1c <le_remote_feat_complete>
		break;
   1430c:	e45b      	b.n	13bc6 <hci_evt_encode+0xae>
		adv_info->addr.type = adv->tx_addr;
   1430e:	7f23      	ldrb	r3, [r4, #28]
   14310:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   14314:	4659      	mov	r1, fp
		adv_info->addr.type = adv->tx_addr;
   14316:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   14318:	2206      	movs	r2, #6
   1431a:	1ce8      	adds	r0, r5, #3
   1431c:	f010 fb3f 	bl	2499e <memcpy>
   14320:	e4c4      	b.n	13cac <hci_evt_encode+0x194>
   14322:	f012 fec1 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   14326:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   14328:	231f      	movs	r3, #31
	hdr->evt = evt;
   1432a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1432c:	7043      	strb	r3, [r0, #1]
   1432e:	2101      	movs	r1, #1
   14330:	4628      	mov	r0, r5
   14332:	f012 feb9 	bl	270a8 <net_buf_simple_add>
	me->subevent = subevt;
   14336:	230a      	movs	r3, #10
   14338:	7003      	strb	r3, [r0, #0]
   1433a:	211e      	movs	r1, #30
   1433c:	4628      	mov	r0, r5
   1433e:	f012 feb3 	bl	270a8 <net_buf_simple_add>
   14342:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   14344:	221e      	movs	r2, #30
   14346:	2100      	movs	r1, #0
   14348:	f010 fb34 	bl	249b4 <memset>
			leecc->status = status;
   1434c:	7026      	strb	r6, [r4, #0]
			return;
   1434e:	e43a      	b.n	13bc6 <hci_evt_encode+0xae>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   14350:	4a10      	ldr	r2, [pc, #64]	; (14394 <hci_evt_encode+0x87c>)
   14352:	4914      	ldr	r1, [pc, #80]	; (143a4 <hci_evt_encode+0x88c>)
   14354:	4811      	ldr	r0, [pc, #68]	; (1439c <hci_evt_encode+0x884>)
   14356:	f641 337a 	movw	r3, #7034	; 0x1b7a
   1435a:	f00e f9d3 	bl	22704 <printk>
   1435e:	4040      	eors	r0, r0
   14360:	f380 8811 	msr	BASEPRI, r0
   14364:	f04f 0003 	mov.w	r0, #3
   14368:	df02      	svc	2
   1436a:	e52e      	b.n	13dca <hci_evt_encode+0x2b2>
   1436c:	f04f 0a00 	mov.w	sl, #0
   14370:	220c      	movs	r2, #12
   14372:	230b      	movs	r3, #11
   14374:	603a      	str	r2, [r7, #0]
		data_len = 0U;
   14376:	4656      	mov	r6, sl
   14378:	e467      	b.n	13c4a <hci_evt_encode+0x132>
		dir_info->addr.type = adv->tx_addr;
   1437a:	7f23      	ldrb	r3, [r4, #28]
   1437c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   14380:	2206      	movs	r2, #6
		dir_info->addr.type = adv->tx_addr;
   14382:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   14384:	4631      	mov	r1, r6
   14386:	1ce8      	adds	r0, r5, #3
   14388:	f010 fb09 	bl	2499e <memcpy>
   1438c:	e77a      	b.n	14284 <hci_evt_encode+0x76c>
   1438e:	bf00      	nop
   14390:	20000160 	.word	0x20000160
   14394:	000293e8 	.word	0x000293e8
   14398:	00029424 	.word	0x00029424
   1439c:	00029220 	.word	0x00029220
   143a0:	200023b0 	.word	0x200023b0
   143a4:	00029488 	.word	0x00029488

000143a8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   143a8:	b570      	push	{r4, r5, r6, lr}
   143aa:	f100 0408 	add.w	r4, r0, #8
   143ae:	460e      	mov	r6, r1
   143b0:	4620      	mov	r0, r4
   143b2:	2102      	movs	r1, #2
   143b4:	4615      	mov	r5, r2
   143b6:	f012 fe77 	bl	270a8 <net_buf_simple_add>
	hdr->evt = evt;
   143ba:	2313      	movs	r3, #19
	hdr->len = len;
   143bc:	2105      	movs	r1, #5
	hdr->evt = evt;
   143be:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   143c0:	7041      	strb	r1, [r0, #1]
   143c2:	4620      	mov	r0, r4
   143c4:	f012 fe70 	bl	270a8 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   143c8:	2301      	movs	r3, #1
   143ca:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   143cc:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   143d0:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   143d4:	bd70      	pop	{r4, r5, r6, pc}
   143d6:	bf00      	nop

000143d8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   143d8:	7903      	ldrb	r3, [r0, #4]
   143da:	2b03      	cmp	r3, #3
   143dc:	d008      	beq.n	143f0 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   143de:	3b05      	subs	r3, #5
   143e0:	b2db      	uxtb	r3, r3
   143e2:	2b17      	cmp	r3, #23
   143e4:	d901      	bls.n	143ea <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   143e6:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   143e8:	4770      	bx	lr
   143ea:	4a05      	ldr	r2, [pc, #20]	; (14400 <hci_get_class+0x28>)
   143ec:	5cd0      	ldrb	r0, [r2, r3]
   143ee:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   143f0:	7f03      	ldrb	r3, [r0, #28]
   143f2:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   143f6:	2b03      	cmp	r3, #3
   143f8:	bf0c      	ite	eq
   143fa:	2004      	moveq	r0, #4
   143fc:	2005      	movne	r0, #5
   143fe:	4770      	bx	lr
   14400:	00029524 	.word	0x00029524

00014404 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   14404:	480d      	ldr	r0, [pc, #52]	; (1443c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   14406:	4a0e      	ldr	r2, [pc, #56]	; (14440 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14408:	490e      	ldr	r1, [pc, #56]	; (14444 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   1440a:	4b0f      	ldr	r3, [pc, #60]	; (14448 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1440c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1440e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14412:	f641 75ff 	movw	r5, #8191	; 0x1fff
   14416:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1441a:	2400      	movs	r4, #0
   1441c:	2500      	movs	r5, #0
   1441e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   14422:	4a0a      	ldr	r2, [pc, #40]	; (1444c <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14424:	241f      	movs	r4, #31
   14426:	2500      	movs	r5, #0
   14428:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1442c:	2100      	movs	r1, #0
   1442e:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   14430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   14434:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   14436:	601a      	str	r2, [r3, #0]
}
   14438:	4770      	bx	lr
   1443a:	bf00      	nop
   1443c:	20000158 	.word	0x20000158
   14440:	20001998 	.word	0x20001998
   14444:	20000160 	.word	0x20000160
   14448:	200023b0 	.word	0x200023b0
   1444c:	200023ac 	.word	0x200023ac

00014450 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   14450:	f006 b980 	b.w	1a754 <lll_csrand_get>

00014454 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   14454:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   14456:	2300      	movs	r3, #0
   14458:	f007 fe00 	bl	1c05c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1445c:	2000      	movs	r0, #0
   1445e:	bd08      	pop	{r3, pc}

00014460 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   14460:	4801      	ldr	r0, [pc, #4]	; (14468 <ll_feat_get+0x8>)
   14462:	2100      	movs	r1, #0
   14464:	4770      	bx	lr
   14466:	bf00      	nop
   14468:	000141ff 	.word	0x000141ff

0001446c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1446c:	b510      	push	{r4, lr}
   1446e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   14470:	f006 f992 	bl	1a798 <lll_reset>
	LL_ASSERT(!err);
   14474:	b950      	cbnz	r0, 1448c <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   14476:	f006 ffcf 	bl	1b418 <lll_scan_reset>
	LL_ASSERT(!err);
   1447a:	b9c0      	cbnz	r0, 144ae <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1447c:	f007 f8e6 	bl	1b64c <lll_conn_reset>
	LL_ASSERT(!err);
   14480:	bb30      	cbnz	r0, 144d0 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   14482:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   14484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14488:	f00d b8b6 	b.w	215f8 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   1448c:	4a19      	ldr	r2, [pc, #100]	; (144f4 <perform_lll_reset+0x88>)
   1448e:	491a      	ldr	r1, [pc, #104]	; (144f8 <perform_lll_reset+0x8c>)
   14490:	481a      	ldr	r0, [pc, #104]	; (144fc <perform_lll_reset+0x90>)
   14492:	f640 0324 	movw	r3, #2084	; 0x824
   14496:	f00e f935 	bl	22704 <printk>
   1449a:	4040      	eors	r0, r0
   1449c:	f380 8811 	msr	BASEPRI, r0
   144a0:	f04f 0003 	mov.w	r0, #3
   144a4:	df02      	svc	2
	err = lll_scan_reset();
   144a6:	f006 ffb7 	bl	1b418 <lll_scan_reset>
	LL_ASSERT(!err);
   144aa:	2800      	cmp	r0, #0
   144ac:	d0e6      	beq.n	1447c <perform_lll_reset+0x10>
   144ae:	4a11      	ldr	r2, [pc, #68]	; (144f4 <perform_lll_reset+0x88>)
   144b0:	4911      	ldr	r1, [pc, #68]	; (144f8 <perform_lll_reset+0x8c>)
   144b2:	4812      	ldr	r0, [pc, #72]	; (144fc <perform_lll_reset+0x90>)
   144b4:	f640 032f 	movw	r3, #2095	; 0x82f
   144b8:	f00e f924 	bl	22704 <printk>
   144bc:	4040      	eors	r0, r0
   144be:	f380 8811 	msr	BASEPRI, r0
   144c2:	f04f 0003 	mov.w	r0, #3
   144c6:	df02      	svc	2
	err = lll_conn_reset();
   144c8:	f007 f8c0 	bl	1b64c <lll_conn_reset>
	LL_ASSERT(!err);
   144cc:	2800      	cmp	r0, #0
   144ce:	d0d8      	beq.n	14482 <perform_lll_reset+0x16>
   144d0:	4a08      	ldr	r2, [pc, #32]	; (144f4 <perform_lll_reset+0x88>)
   144d2:	4909      	ldr	r1, [pc, #36]	; (144f8 <perform_lll_reset+0x8c>)
   144d4:	4809      	ldr	r0, [pc, #36]	; (144fc <perform_lll_reset+0x90>)
   144d6:	f640 0335 	movw	r3, #2101	; 0x835
   144da:	f00e f913 	bl	22704 <printk>
   144de:	4040      	eors	r0, r0
   144e0:	f380 8811 	msr	BASEPRI, r0
   144e4:	f04f 0003 	mov.w	r0, #3
   144e8:	df02      	svc	2
   144ea:	4620      	mov	r0, r4
}
   144ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   144f0:	f00d b882 	b.w	215f8 <z_impl_k_sem_give>
   144f4:	0002955c 	.word	0x0002955c
   144f8:	00029598 	.word	0x00029598
   144fc:	00029220 	.word	0x00029220

00014500 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   14500:	6008      	str	r0, [r1, #0]
   14502:	4801      	ldr	r0, [pc, #4]	; (14508 <ull_ticker_status_give+0x8>)
   14504:	f00d b878 	b.w	215f8 <z_impl_k_sem_give>
   14508:	200026e0 	.word	0x200026e0

0001450c <disabled_cb>:
   1450c:	f00d b874 	b.w	215f8 <z_impl_k_sem_give>

00014510 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   14510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   14514:	4d2c      	ldr	r5, [pc, #176]	; (145c8 <tx_cmplt_get+0xb8>)
{
   14516:	460c      	mov	r4, r1
   14518:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1451a:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1451c:	7822      	ldrb	r2, [r4, #0]
   1451e:	782b      	ldrb	r3, [r5, #0]
   14520:	4291      	cmp	r1, r2
   14522:	bf9c      	itt	ls
   14524:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   14526:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   14528:	4591      	cmp	r9, r2
{
   1452a:	4682      	mov	sl, r0
   1452c:	d043      	beq.n	145b6 <tx_cmplt_get+0xa6>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1452e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   14532:	3201      	adds	r2, #1
   14534:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   14536:	4f25      	ldr	r7, [pc, #148]	; (145cc <tx_cmplt_get+0xbc>)
		i = 0U;
   14538:	4291      	cmp	r1, r2
   1453a:	bf08      	it	eq
   1453c:	2200      	moveq	r2, #0

	*idx = i;
   1453e:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   14540:	5afa      	ldrh	r2, [r7, r3]
   14542:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   14544:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   14546:	443b      	add	r3, r7
   14548:	f04f 0802 	mov.w	r8, #2
   1454c:	f04f 0b01 	mov.w	fp, #1
   14550:	e01d      	b.n	1458e <tx_cmplt_get+0x7e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   14552:	3601      	adds	r6, #1
   14554:	f8c3 b004 	str.w	fp, [r3, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   14558:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
   1455c:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   1455e:	d124      	bne.n	145aa <tx_cmplt_get+0x9a>
	if (*idx >= count) {
   14560:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   14562:	7869      	ldrb	r1, [r5, #1]
   14564:	7828      	ldrb	r0, [r5, #0]
   14566:	4299      	cmp	r1, r3
   14568:	bf9c      	itt	ls
   1456a:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   1456c:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   1456e:	454b      	cmp	r3, r9
   14570:	d022      	beq.n	145b8 <tx_cmplt_get+0xa8>
	i = *idx + 1;
   14572:	1c5a      	adds	r2, r3, #1
   14574:	b2d2      	uxtb	r2, r2
		i = 0U;
   14576:	4291      	cmp	r1, r2
   14578:	bf08      	it	eq
   1457a:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   1457c:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   14580:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   14582:	5af9      	ldrh	r1, [r7, r3]
   14584:	f8ba 2000 	ldrh.w	r2, [sl]
   14588:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   1458a:	443b      	add	r3, r7
   1458c:	d114      	bne.n	145b8 <tx_cmplt_get+0xa8>
		node_tx = tx->node;
   1458e:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   14590:	2801      	cmp	r0, #1
   14592:	d9de      	bls.n	14552 <tx_cmplt_get+0x42>
   14594:	f030 0203 	bics.w	r2, r0, #3
   14598:	d00a      	beq.n	145b0 <tx_cmplt_get+0xa0>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1459a:	7902      	ldrb	r2, [r0, #4]
   1459c:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   145a0:	3a01      	subs	r2, #1
   145a2:	2a01      	cmp	r2, #1
   145a4:	d90b      	bls.n	145be <tx_cmplt_get+0xae>
   145a6:	f8c3 8004 	str.w	r8, [r3, #4]
			ll_tx_mem_release(node_tx);
   145aa:	f001 fe47 	bl	1623c <ll_tx_mem_release>
   145ae:	e7d7      	b.n	14560 <tx_cmplt_get+0x50>
   145b0:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   145b4:	e7d4      	b.n	14560 <tx_cmplt_get+0x50>
		return 0;
   145b6:	2600      	movs	r6, #0

	return cmplt;
}
   145b8:	4630      	mov	r0, r6
   145ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   145be:	3601      	adds	r6, #1
   145c0:	f8c3 b004 	str.w	fp, [r3, #4]
   145c4:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   145c6:	e7f0      	b.n	145aa <tx_cmplt_get+0x9a>
   145c8:	20000528 	.word	0x20000528
   145cc:	2000052c 	.word	0x2000052c

000145d0 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   145d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   145d4:	4e3c      	ldr	r6, [pc, #240]	; (146c8 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   145d6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 146cc <ull_done+0xfc>
   145da:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 146d0 <ull_done+0x100>
{
   145de:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   145e0:	e9d6 0100 	ldrd	r0, r1, [r6]
   145e4:	aa01      	add	r2, sp, #4
   145e6:	f7fc fdb9 	bl	1115c <memq_peek>
		if (link) {
   145ea:	4604      	mov	r4, r0
   145ec:	2800      	cmp	r0, #0
   145ee:	d03e      	beq.n	1466e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   145f0:	6870      	ldr	r0, [r6, #4]
   145f2:	2200      	movs	r2, #0
   145f4:	4631      	mov	r1, r6
   145f6:	f7fc fdb9 	bl	1116c <memq_dequeue>
			rx_demux_event_done(link, done);
   145fa:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   145fc:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   145fe:	b135      	cbz	r5, 1460e <ull_done+0x3e>
	return hdr->ref;
   14600:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   14602:	2b00      	cmp	r3, #0
   14604:	d052      	beq.n	146ac <ull_done+0xdc>
	return hdr->ref--;
   14606:	782b      	ldrb	r3, [r5, #0]
   14608:	3b01      	subs	r3, #1
   1460a:	b2db      	uxtb	r3, r3
   1460c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1460e:	f897 3020 	ldrb.w	r3, [r7, #32]
   14612:	b123      	cbz	r3, 1461e <ull_done+0x4e>
   14614:	2b01      	cmp	r3, #1
   14616:	d13b      	bne.n	14690 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   14618:	4638      	mov	r0, r7
   1461a:	f003 fca5 	bl	17f68 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1461e:	4a2d      	ldr	r2, [pc, #180]	; (146d4 <ull_done+0x104>)
	last = last + 1;
   14620:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   14622:	f892 c001 	ldrb.w	ip, [r2, #1]
   14626:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   14628:	3301      	adds	r3, #1
	done->extra.type = 0U;
   1462a:	2000      	movs	r0, #0
   1462c:	b2db      	uxtb	r3, r3
		last = 0U;
   1462e:	459c      	cmp	ip, r3
   14630:	bf08      	it	eq
   14632:	4603      	moveq	r3, r0
	if (last == first) {
   14634:	4299      	cmp	r1, r3
   14636:	f887 0020 	strb.w	r0, [r7, #32]
   1463a:	d01b      	beq.n	14674 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   1463c:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1463e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14640:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14642:	fb00 2101 	mla	r1, r0, r1, r2
   14646:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   14648:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1464a:	2d00      	cmp	r5, #0
   1464c:	d0c8      	beq.n	145e0 <ull_done+0x10>
	return hdr->ref;
   1464e:	782b      	ldrb	r3, [r5, #0]
   14650:	2b00      	cmp	r3, #0
   14652:	d1c5      	bne.n	145e0 <ull_done+0x10>
   14654:	696b      	ldr	r3, [r5, #20]
   14656:	2b00      	cmp	r3, #0
   14658:	d0c2      	beq.n	145e0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1465a:	69a8      	ldr	r0, [r5, #24]
   1465c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1465e:	e9d6 0100 	ldrd	r0, r1, [r6]
   14662:	aa01      	add	r2, sp, #4
   14664:	f7fc fd7a 	bl	1115c <memq_peek>
		if (link) {
   14668:	4604      	mov	r4, r0
   1466a:	2800      	cmp	r0, #0
   1466c:	d1c0      	bne.n	145f0 <ull_done+0x20>
}
   1466e:	b003      	add	sp, #12
   14670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   14674:	4918      	ldr	r1, [pc, #96]	; (146d8 <ull_done+0x108>)
   14676:	4819      	ldr	r0, [pc, #100]	; (146dc <ull_done+0x10c>)
   14678:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   1467c:	4642      	mov	r2, r8
   1467e:	f00e f841 	bl	22704 <printk>
   14682:	4040      	eors	r0, r0
   14684:	f380 8811 	msr	BASEPRI, r0
   14688:	f04f 0003 	mov.w	r0, #3
   1468c:	df02      	svc	2
   1468e:	e7dc      	b.n	1464a <ull_done+0x7a>
		LL_ASSERT(0);
   14690:	4913      	ldr	r1, [pc, #76]	; (146e0 <ull_done+0x110>)
   14692:	4812      	ldr	r0, [pc, #72]	; (146dc <ull_done+0x10c>)
   14694:	f640 2369 	movw	r3, #2665	; 0xa69
   14698:	4642      	mov	r2, r8
   1469a:	f00e f833 	bl	22704 <printk>
   1469e:	4040      	eors	r0, r0
   146a0:	f380 8811 	msr	BASEPRI, r0
   146a4:	f04f 0003 	mov.w	r0, #3
   146a8:	df02      	svc	2
		break;
   146aa:	e7b8      	b.n	1461e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   146ac:	480b      	ldr	r0, [pc, #44]	; (146dc <ull_done+0x10c>)
   146ae:	f640 2312 	movw	r3, #2578	; 0xa12
   146b2:	4642      	mov	r2, r8
   146b4:	4649      	mov	r1, r9
   146b6:	f00e f825 	bl	22704 <printk>
   146ba:	4040      	eors	r0, r0
   146bc:	f380 8811 	msr	BASEPRI, r0
   146c0:	f04f 0003 	mov.w	r0, #3
   146c4:	df02      	svc	2
   146c6:	e79e      	b.n	14606 <ull_done+0x36>
   146c8:	200026cc 	.word	0x200026cc
   146cc:	0002955c 	.word	0x0002955c
   146d0:	000295a0 	.word	0x000295a0
   146d4:	200003e4 	.word	0x200003e4
   146d8:	000295b8 	.word	0x000295b8
   146dc:	00029220 	.word	0x00029220
   146e0:	000292b8 	.word	0x000292b8

000146e4 <rx_alloc>:
{
   146e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   146e8:	4f33      	ldr	r7, [pc, #204]	; (147b8 <rx_alloc+0xd4>)
   146ea:	783e      	ldrb	r6, [r7, #0]
   146ec:	4286      	cmp	r6, r0
   146ee:	bf28      	it	cs
   146f0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   146f2:	b34e      	cbz	r6, 14748 <rx_alloc+0x64>
   146f4:	4d31      	ldr	r5, [pc, #196]	; (147bc <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   146f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 147c0 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   146fa:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   146fc:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   14700:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14702:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   14704:	3401      	adds	r4, #1
   14706:	b2e4      	uxtb	r4, r4
		last = 0U;
   14708:	42a2      	cmp	r2, r4
   1470a:	bf08      	it	eq
   1470c:	2400      	moveq	r4, #0
	if (last == first) {
   1470e:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   14710:	4640      	mov	r0, r8
   14712:	d01b      	beq.n	1474c <rx_alloc+0x68>
   14714:	f7fc fcb4 	bl	11080 <mem_acquire>
   14718:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1471a:	4648      	mov	r0, r9
		if (!link) {
   1471c:	f1ba 0f00 	cmp.w	sl, #0
   14720:	d012      	beq.n	14748 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   14722:	f7fc fcad 	bl	11080 <mem_acquire>
		if (!rx) {
   14726:	2800      	cmp	r0, #0
   14728:	d03f      	beq.n	147aa <rx_alloc+0xc6>
		rx->link = link;
   1472a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1472e:	78ea      	ldrb	r2, [r5, #3]
   14730:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14732:	fb02 5303 	mla	r3, r2, r3, r5
   14736:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14738:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   1473a:	70ec      	strb	r4, [r5, #3]
		max--;
   1473c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   1473e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14740:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   14744:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14746:	d1db      	bne.n	14700 <rx_alloc+0x1c>
}
   14748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   1474c:	783b      	ldrb	r3, [r7, #0]
   1474e:	2b00      	cmp	r3, #0
   14750:	d0fa      	beq.n	14748 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14752:	4d1c      	ldr	r5, [pc, #112]	; (147c4 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   14754:	4e1c      	ldr	r6, [pc, #112]	; (147c8 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14756:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14758:	f8df 8064 	ldr.w	r8, [pc, #100]	; 147c0 <rx_alloc+0xdc>
		link->mem = NULL;
   1475c:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   14760:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14762:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   14764:	3401      	adds	r4, #1
   14766:	b2e4      	uxtb	r4, r4
		last = 0U;
   14768:	42a2      	cmp	r2, r4
   1476a:	bf08      	it	eq
   1476c:	2400      	moveq	r4, #0
	if (last == first) {
   1476e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14770:	4630      	mov	r0, r6
   14772:	d0e9      	beq.n	14748 <rx_alloc+0x64>
   14774:	f7fc fc84 	bl	11080 <mem_acquire>
   14778:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1477a:	4640      	mov	r0, r8
		if (!link) {
   1477c:	f1ba 0f00 	cmp.w	sl, #0
   14780:	d0e2      	beq.n	14748 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   14782:	f7fc fc7d 	bl	11080 <mem_acquire>
		if (!rx) {
   14786:	b180      	cbz	r0, 147aa <rx_alloc+0xc6>
		link->mem = NULL;
   14788:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   1478c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14790:	78ea      	ldrb	r2, [r5, #3]
   14792:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14794:	fb02 5303 	mla	r3, r2, r3, r5
   14798:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1479a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   1479c:	70ec      	strb	r4, [r5, #3]
   1479e:	3b01      	subs	r3, #1
   147a0:	b2db      	uxtb	r3, r3
   147a2:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   147a4:	2b00      	cmp	r3, #0
   147a6:	d1db      	bne.n	14760 <rx_alloc+0x7c>
   147a8:	e7ce      	b.n	14748 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   147aa:	4650      	mov	r0, sl
   147ac:	4906      	ldr	r1, [pc, #24]	; (147c8 <rx_alloc+0xe4>)
}
   147ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   147b2:	f7fc bc7f 	b.w	110b4 <mem_release>
   147b6:	bf00      	nop
   147b8:	20002494 	.word	0x20002494
   147bc:	2000040c 	.word	0x2000040c
   147c0:	200024e4 	.word	0x200024e4
   147c4:	200003fc 	.word	0x200003fc
   147c8:	20002498 	.word	0x20002498

000147cc <rx_demux>:
{
   147cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 14980 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   147d4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 14984 <rx_demux+0x1b8>
		LL_ASSERT(0);
   147d8:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 14988 <rx_demux+0x1bc>
   147dc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 1498c <rx_demux+0x1c0>
{
   147e0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   147e2:	e9d8 0100 	ldrd	r0, r1, [r8]
   147e6:	aa03      	add	r2, sp, #12
   147e8:	f7fc fcb8 	bl	1115c <memq_peek>
		if (link) {
   147ec:	4605      	mov	r5, r0
   147ee:	2800      	cmp	r0, #0
   147f0:	d035      	beq.n	1485e <rx_demux+0x92>
			LL_ASSERT(rx);
   147f2:	9b03      	ldr	r3, [sp, #12]
   147f4:	2b00      	cmp	r3, #0
   147f6:	f000 80a6 	beq.w	14946 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   147fa:	7818      	ldrb	r0, [r3, #0]
   147fc:	aa04      	add	r2, sp, #16
   147fe:	a902      	add	r1, sp, #8
   14800:	f003 fe4a 	bl	18498 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   14804:	4604      	mov	r4, r0
   14806:	2800      	cmp	r0, #0
   14808:	d055      	beq.n	148b6 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1480a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1480e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   14812:	780f      	ldrb	r7, [r1, #0]
   14814:	f8ad 200a 	strh.w	r2, [sp, #10]
   14818:	ae05      	add	r6, sp, #20
   1481a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1481c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   14820:	f003 fe54 	bl	184cc <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   14824:	4621      	mov	r1, r4
   14826:	9a05      	ldr	r2, [sp, #20]
   14828:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1482c:	f003 fe98 	bl	18560 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   14830:	4620      	mov	r0, r4
   14832:	f003 fe09 	bl	18448 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   14836:	4632      	mov	r2, r6
   14838:	4629      	mov	r1, r5
   1483a:	4638      	mov	r0, r7
   1483c:	f003 fe2c 	bl	18498 <ull_conn_ack_by_last_peek>
	} while (link);
   14840:	4604      	mov	r4, r0
   14842:	2800      	cmp	r0, #0
   14844:	d1ec      	bne.n	14820 <rx_demux+0x54>
	k_sem_give(sem_recv);
   14846:	f8d9 0000 	ldr.w	r0, [r9]
   1484a:	f00c fed5 	bl	215f8 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1484e:	e9d8 0100 	ldrd	r0, r1, [r8]
   14852:	aa03      	add	r2, sp, #12
   14854:	f7fc fc82 	bl	1115c <memq_peek>
		if (link) {
   14858:	4605      	mov	r5, r0
   1485a:	2800      	cmp	r0, #0
   1485c:	d1c9      	bne.n	147f2 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1485e:	aa04      	add	r2, sp, #16
   14860:	a902      	add	r1, sp, #8
   14862:	f10d 0007 	add.w	r0, sp, #7
   14866:	f003 fdfb 	bl	18460 <ull_conn_ack_peek>
			if (link) {
   1486a:	4604      	mov	r4, r0
   1486c:	2800      	cmp	r0, #0
   1486e:	d067      	beq.n	14940 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   14870:	9b04      	ldr	r3, [sp, #16]
   14872:	9305      	str	r3, [sp, #20]
   14874:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   14878:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1487c:	f8ad 300a 	strh.w	r3, [sp, #10]
   14880:	ae05      	add	r6, sp, #20
   14882:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   14886:	f003 fe21 	bl	184cc <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1488a:	4621      	mov	r1, r4
   1488c:	9a05      	ldr	r2, [sp, #20]
   1488e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14892:	f003 fe65 	bl	18560 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   14896:	4620      	mov	r0, r4
   14898:	f003 fdd6 	bl	18448 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1489c:	4632      	mov	r2, r6
   1489e:	4629      	mov	r1, r5
   148a0:	4638      	mov	r0, r7
   148a2:	f003 fdf9 	bl	18498 <ull_conn_ack_by_last_peek>
	} while (link);
   148a6:	4604      	mov	r4, r0
   148a8:	2800      	cmp	r0, #0
   148aa:	d1ec      	bne.n	14886 <rx_demux+0xba>
	k_sem_give(sem_recv);
   148ac:	f8d9 0000 	ldr.w	r0, [r9]
   148b0:	f00c fea2 	bl	215f8 <z_impl_k_sem_give>
			if (nack) {
   148b4:	e7cb      	b.n	1484e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   148b6:	9b03      	ldr	r3, [sp, #12]
   148b8:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   148ba:	791b      	ldrb	r3, [r3, #4]
   148bc:	3b01      	subs	r3, #1
   148be:	2b16      	cmp	r3, #22
   148c0:	d80d      	bhi.n	148de <rx_demux+0x112>
   148c2:	e8df f003 	tbb	[pc, r3]
   148c6:	0c1a      	.short	0x0c1a
   148c8:	0c1a0c38 	.word	0x0c1a0c38
   148cc:	0c0c0c0c 	.word	0x0c0c0c0c
   148d0:	0c0c0c0c 	.word	0x0c0c0c0c
   148d4:	0c0c0c0c 	.word	0x0c0c0c0c
   148d8:	2d0c0c0c 	.word	0x2d0c0c0c
   148dc:	1a          	.byte	0x1a
   148dd:	00          	.byte	0x00
		LL_ASSERT(0);
   148de:	482c      	ldr	r0, [pc, #176]	; (14990 <rx_demux+0x1c4>)
   148e0:	f640 13ff 	movw	r3, #2559	; 0x9ff
   148e4:	4652      	mov	r2, sl
   148e6:	4659      	mov	r1, fp
   148e8:	f00d ff0c 	bl	22704 <printk>
   148ec:	4040      	eors	r0, r0
   148ee:	f380 8811 	msr	BASEPRI, r0
   148f2:	f04f 0003 	mov.w	r0, #3
   148f6:	df02      	svc	2
			if (nack) {
   148f8:	e773      	b.n	147e2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   148fa:	4921      	ldr	r1, [pc, #132]	; (14980 <rx_demux+0x1b4>)
   148fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   14900:	2200      	movs	r2, #0
   14902:	f7fc fc33 	bl	1116c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14906:	4b23      	ldr	r3, [pc, #140]	; (14994 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   14908:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1490a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1490c:	4628      	mov	r0, r5
   1490e:	4a22      	ldr	r2, [pc, #136]	; (14998 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14910:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14912:	f7fc fc19 	bl	11148 <memq_enqueue>
	k_sem_give(sem_recv);
   14916:	f8d9 0000 	ldr.w	r0, [r9]
   1491a:	f00c fe6d 	bl	215f8 <z_impl_k_sem_give>
			if (nack) {
   1491e:	e796      	b.n	1484e <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   14920:	4917      	ldr	r1, [pc, #92]	; (14980 <rx_demux+0x1b4>)
   14922:	f8d8 0004 	ldr.w	r0, [r8, #4]
   14926:	2200      	movs	r2, #0
   14928:	f7fc fc20 	bl	1116c <memq_dequeue>
		ull_conn_setup(link, rx);
   1492c:	9905      	ldr	r1, [sp, #20]
   1492e:	4628      	mov	r0, r5
   14930:	f001 ff6c 	bl	1680c <ull_conn_setup>
			if (nack) {
   14934:	e755      	b.n	147e2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   14936:	a905      	add	r1, sp, #20
   14938:	4628      	mov	r0, r5
   1493a:	f001 ff8f 	bl	1685c <ull_conn_rx>
		if (nack) {
   1493e:	b188      	cbz	r0, 14964 <rx_demux+0x198>
}
   14940:	b007      	add	sp, #28
   14942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   14946:	4915      	ldr	r1, [pc, #84]	; (1499c <rx_demux+0x1d0>)
   14948:	4811      	ldr	r0, [pc, #68]	; (14990 <rx_demux+0x1c4>)
   1494a:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   1494e:	4652      	mov	r2, sl
   14950:	f00d fed8 	bl	22704 <printk>
   14954:	4040      	eors	r0, r0
   14956:	f380 8811 	msr	BASEPRI, r0
   1495a:	f04f 0003 	mov.w	r0, #3
   1495e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   14960:	9b03      	ldr	r3, [sp, #12]
   14962:	e74a      	b.n	147fa <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   14964:	4906      	ldr	r1, [pc, #24]	; (14980 <rx_demux+0x1b4>)
   14966:	4602      	mov	r2, r0
   14968:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1496c:	f7fc fbfe 	bl	1116c <memq_dequeue>
		if (rx) {
   14970:	9905      	ldr	r1, [sp, #20]
   14972:	2900      	cmp	r1, #0
   14974:	f43f af35 	beq.w	147e2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14978:	4b06      	ldr	r3, [pc, #24]	; (14994 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1497a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1497c:	78db      	ldrb	r3, [r3, #3]
   1497e:	e7c6      	b.n	1490e <rx_demux+0x142>
   14980:	200026d4 	.word	0x200026d4
   14984:	200026dc 	.word	0x200026dc
   14988:	0002955c 	.word	0x0002955c
   1498c:	000292b8 	.word	0x000292b8
   14990:	00029220 	.word	0x00029220
   14994:	20000528 	.word	0x20000528
   14998:	200026c8 	.word	0x200026c8
   1499c:	000295c8 	.word	0x000295c8

000149a0 <ll_rx_get>:
{
   149a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a4:	b085      	sub	sp, #20
   149a6:	e9cd 0100 	strd	r0, r1, [sp]
   149aa:	4c63      	ldr	r4, [pc, #396]	; (14b38 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   149ac:	4d63      	ldr	r5, [pc, #396]	; (14b3c <ll_rx_get+0x19c>)
   149ae:	4e64      	ldr	r6, [pc, #400]	; (14b40 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   149b0:	9a00      	ldr	r2, [sp, #0]
   149b2:	2300      	movs	r3, #0
   149b4:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   149b6:	e9d6 0100 	ldrd	r0, r1, [r6]
   149ba:	aa03      	add	r2, sp, #12
   149bc:	f7fc fbce 	bl	1115c <memq_peek>
	if (link) {
   149c0:	4680      	mov	r8, r0
   149c2:	2800      	cmp	r0, #0
   149c4:	f000 809f 	beq.w	14b06 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   149c8:	9b03      	ldr	r3, [sp, #12]
   149ca:	495e      	ldr	r1, [pc, #376]	; (14b44 <ll_rx_get+0x1a4>)
   149cc:	781a      	ldrb	r2, [r3, #0]
   149ce:	9801      	ldr	r0, [sp, #4]
   149d0:	f7ff fd9e 	bl	14510 <tx_cmplt_get>
		if (!cmplt) {
   149d4:	2800      	cmp	r0, #0
   149d6:	f040 809b 	bne.w	14b10 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   149da:	78a3      	ldrb	r3, [r4, #2]
   149dc:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   149e0:	78e2      	ldrb	r2, [r4, #3]
   149e2:	4607      	mov	r7, r0
   149e4:	f10d 0109 	add.w	r1, sp, #9
   149e8:	f10d 000a 	add.w	r0, sp, #10
   149ec:	f7ff fd90 	bl	14510 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   149f0:	ea47 0200 	orr.w	r2, r7, r0
   149f4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   149f8:	d1f2      	bne.n	149e0 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   149fa:	9b03      	ldr	r3, [sp, #12]
   149fc:	7919      	ldrb	r1, [r3, #4]
   149fe:	2901      	cmp	r1, #1
   14a00:	f040 8093 	bne.w	14b2a <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   14a04:	494e      	ldr	r1, [pc, #312]	; (14b40 <ll_rx_get+0x1a0>)
   14a06:	6870      	ldr	r0, [r6, #4]
   14a08:	f7fc fbb0 	bl	1116c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   14a0c:	494e      	ldr	r1, [pc, #312]	; (14b48 <ll_rx_get+0x1a8>)
   14a0e:	4640      	mov	r0, r8
   14a10:	f7fc fb50 	bl	110b4 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14a14:	782b      	ldrb	r3, [r5, #0]
   14a16:	2b05      	cmp	r3, #5
   14a18:	d866      	bhi.n	14ae8 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   14a1a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   14a1c:	494b      	ldr	r1, [pc, #300]	; (14b4c <ll_rx_get+0x1ac>)
   14a1e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   14a20:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   14a22:	f7fc fb47 	bl	110b4 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14a26:	782b      	ldrb	r3, [r5, #0]
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d0c1      	beq.n	149b0 <ll_rx_get+0x10>
   14a2c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 14b50 <ll_rx_get+0x1b0>
	last = last + 1;
   14a30:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   14a34:	f898 2001 	ldrb.w	r2, [r8, #1]
   14a38:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   14a3c:	3701      	adds	r7, #1
   14a3e:	b2ff      	uxtb	r7, r7
		last = 0U;
   14a40:	42ba      	cmp	r2, r7
   14a42:	bf08      	it	eq
   14a44:	2700      	moveq	r7, #0
	if (last == first) {
   14a46:	429f      	cmp	r7, r3
   14a48:	d019      	beq.n	14a7e <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   14a4a:	483f      	ldr	r0, [pc, #252]	; (14b48 <ll_rx_get+0x1a8>)
   14a4c:	f7fc fb18 	bl	11080 <mem_acquire>
		if (!link) {
   14a50:	4681      	mov	r9, r0
   14a52:	2800      	cmp	r0, #0
   14a54:	d0ac      	beq.n	149b0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   14a56:	483d      	ldr	r0, [pc, #244]	; (14b4c <ll_rx_get+0x1ac>)
   14a58:	f7fc fb12 	bl	11080 <mem_acquire>
		if (!rx) {
   14a5c:	2800      	cmp	r0, #0
   14a5e:	d05a      	beq.n	14b16 <ll_rx_get+0x176>
		rx->link = link;
   14a60:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14a64:	f898 2003 	ldrb.w	r2, [r8, #3]
   14a68:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14a6c:	fb02 8303 	mla	r3, r2, r3, r8
   14a70:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14a72:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14a74:	f888 7003 	strb.w	r7, [r8, #3]
   14a78:	3b01      	subs	r3, #1
   14a7a:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14a7c:	e798      	b.n	149b0 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 14b54 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   14a82:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 14b48 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14a86:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14a8a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 14b4c <ll_rx_get+0x1ac>
	if (last == count) {
   14a8e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14a92:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   14a96:	3701      	adds	r7, #1
   14a98:	b2ff      	uxtb	r7, r7
		last = 0U;
   14a9a:	42ba      	cmp	r2, r7
   14a9c:	bf08      	it	eq
   14a9e:	2700      	moveq	r7, #0
	if (last == first) {
   14aa0:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   14aa2:	4648      	mov	r0, r9
   14aa4:	d084      	beq.n	149b0 <ll_rx_get+0x10>
   14aa6:	f7fc faeb 	bl	11080 <mem_acquire>
   14aaa:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14aac:	4650      	mov	r0, sl
		if (!link) {
   14aae:	f1bb 0f00 	cmp.w	fp, #0
   14ab2:	f43f af7d 	beq.w	149b0 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   14ab6:	f7fc fae3 	bl	11080 <mem_acquire>
		if (!rx) {
   14aba:	2800      	cmp	r0, #0
   14abc:	d030      	beq.n	14b20 <ll_rx_get+0x180>
		link->mem = NULL;
   14abe:	2300      	movs	r3, #0
   14ac0:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   14ac4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14ac8:	f898 2003 	ldrb.w	r2, [r8, #3]
   14acc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14ad0:	fb02 8303 	mla	r3, r2, r3, r8
   14ad4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14ad6:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14ad8:	f888 7003 	strb.w	r7, [r8, #3]
   14adc:	3b01      	subs	r3, #1
   14ade:	b2db      	uxtb	r3, r3
   14ae0:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	d1d3      	bne.n	14a8e <ll_rx_get+0xee>
   14ae6:	e763      	b.n	149b0 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14ae8:	4a1b      	ldr	r2, [pc, #108]	; (14b58 <ll_rx_get+0x1b8>)
   14aea:	491c      	ldr	r1, [pc, #112]	; (14b5c <ll_rx_get+0x1bc>)
   14aec:	481c      	ldr	r0, [pc, #112]	; (14b60 <ll_rx_get+0x1c0>)
   14aee:	f240 6306 	movw	r3, #1542	; 0x606
   14af2:	f00d fe07 	bl	22704 <printk>
   14af6:	4040      	eors	r0, r0
   14af8:	f380 8811 	msr	BASEPRI, r0
   14afc:	f04f 0003 	mov.w	r0, #3
   14b00:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   14b02:	782b      	ldrb	r3, [r5, #0]
   14b04:	e789      	b.n	14a1a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   14b06:	78e2      	ldrb	r2, [r4, #3]
   14b08:	490e      	ldr	r1, [pc, #56]	; (14b44 <ll_rx_get+0x1a4>)
   14b0a:	9801      	ldr	r0, [sp, #4]
   14b0c:	f7ff fd00 	bl	14510 <tx_cmplt_get>
}
   14b10:	b005      	add	sp, #20
   14b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   14b16:	490c      	ldr	r1, [pc, #48]	; (14b48 <ll_rx_get+0x1a8>)
   14b18:	4648      	mov	r0, r9
   14b1a:	f7fc facb 	bl	110b4 <mem_release>
			return;
   14b1e:	e747      	b.n	149b0 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   14b20:	4909      	ldr	r1, [pc, #36]	; (14b48 <ll_rx_get+0x1a8>)
   14b22:	4658      	mov	r0, fp
   14b24:	f7fc fac6 	bl	110b4 <mem_release>
			return;
   14b28:	e742      	b.n	149b0 <ll_rx_get+0x10>
			*node_rx = rx;
   14b2a:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   14b2c:	4610      	mov	r0, r2
			*node_rx = rx;
   14b2e:	600b      	str	r3, [r1, #0]
}
   14b30:	b005      	add	sp, #20
   14b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b36:	bf00      	nop
   14b38:	20000528 	.word	0x20000528
   14b3c:	20002494 	.word	0x20002494
   14b40:	200026c4 	.word	0x200026c4
   14b44:	2000052a 	.word	0x2000052a
   14b48:	20002498 	.word	0x20002498
   14b4c:	200024e4 	.word	0x200024e4
   14b50:	2000040c 	.word	0x2000040c
   14b54:	200003fc 	.word	0x200003fc
   14b58:	0002955c 	.word	0x0002955c
   14b5c:	000295cc 	.word	0x000295cc
   14b60:	00029220 	.word	0x00029220

00014b64 <ll_rx_dequeue>:
{
   14b64:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14b66:	4932      	ldr	r1, [pc, #200]	; (14c30 <ll_rx_dequeue+0xcc>)
{
   14b68:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   14b6a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14b6c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   14b6e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   14b70:	aa01      	add	r2, sp, #4
   14b72:	f7fc fafb 	bl	1116c <memq_dequeue>
	LL_ASSERT(link);
   14b76:	4604      	mov	r4, r0
   14b78:	2800      	cmp	r0, #0
   14b7a:	d04a      	beq.n	14c12 <ll_rx_dequeue+0xae>
	mem_release(link, &mem_link_rx.free);
   14b7c:	492d      	ldr	r1, [pc, #180]	; (14c34 <ll_rx_dequeue+0xd0>)
   14b7e:	4620      	mov	r0, r4
   14b80:	f7fc fa98 	bl	110b4 <mem_release>
	switch (rx->type) {
   14b84:	9a01      	ldr	r2, [sp, #4]
   14b86:	7913      	ldrb	r3, [r2, #4]
   14b88:	2b1c      	cmp	r3, #28
   14b8a:	d810      	bhi.n	14bae <ll_rx_dequeue+0x4a>
   14b8c:	e8df f003 	tbb	[pc, r3]
   14b90:	1e0f0f1e 	.word	0x1e0f0f1e
   14b94:	0f0f1e0f 	.word	0x0f0f1e0f
   14b98:	0f0f0f0f 	.word	0x0f0f0f0f
   14b9c:	0f0f0f0f 	.word	0x0f0f0f0f
   14ba0:	0f0f0f0f 	.word	0x0f0f0f0f
   14ba4:	1e2f0f0f 	.word	0x1e2f0f0f
   14ba8:	1e1e1e1e 	.word	0x1e1e1e1e
   14bac:	1e          	.byte	0x1e
   14bad:	00          	.byte	0x00
		LL_ASSERT(0);
   14bae:	4a22      	ldr	r2, [pc, #136]	; (14c38 <ll_rx_dequeue+0xd4>)
   14bb0:	4922      	ldr	r1, [pc, #136]	; (14c3c <ll_rx_dequeue+0xd8>)
   14bb2:	4823      	ldr	r0, [pc, #140]	; (14c40 <ll_rx_dequeue+0xdc>)
   14bb4:	f240 43c7 	movw	r3, #1223	; 0x4c7
   14bb8:	f00d fda4 	bl	22704 <printk>
   14bbc:	4040      	eors	r0, r0
   14bbe:	f380 8811 	msr	BASEPRI, r0
   14bc2:	f04f 0003 	mov.w	r0, #3
   14bc6:	df02      	svc	2
}
   14bc8:	b002      	add	sp, #8
   14bca:	bd10      	pop	{r4, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d1fb      	bne.n	14bc8 <ll_rx_dequeue+0x64>
   14bd0:	4a19      	ldr	r2, [pc, #100]	; (14c38 <ll_rx_dequeue+0xd4>)
   14bd2:	491c      	ldr	r1, [pc, #112]	; (14c44 <ll_rx_dequeue+0xe0>)
   14bd4:	481a      	ldr	r0, [pc, #104]	; (14c40 <ll_rx_dequeue+0xdc>)
   14bd6:	f240 43c3 	movw	r3, #1219	; 0x4c3
   14bda:	f00d fd93 	bl	22704 <printk>
   14bde:	4040      	eors	r0, r0
   14be0:	f380 8811 	msr	BASEPRI, r0
   14be4:	f04f 0003 	mov.w	r0, #3
   14be8:	df02      	svc	2
}
   14bea:	b002      	add	sp, #8
   14bec:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   14bee:	6893      	ldr	r3, [r2, #8]
   14bf0:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   14bf2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
   14bf6:	2000      	movs	r0, #0
			scan->is_enabled = 0U;
   14bf8:	f360 0200 	bfi	r2, r0, #0, #1
			scan->lll.conn = NULL;
   14bfc:	6218      	str	r0, [r3, #32]
			scan->is_enabled = 0U;
   14bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
   14c02:	f000 fe83 	bl	1590c <ull_scan_is_enabled>
			if (!bm) {
   14c06:	0040      	lsls	r0, r0, #1
   14c08:	d1de      	bne.n	14bc8 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   14c0a:	f004 ff57 	bl	19abc <ull_filter_adv_scan_state_cb>
}
   14c0e:	b002      	add	sp, #8
   14c10:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
   14c12:	4a09      	ldr	r2, [pc, #36]	; (14c38 <ll_rx_dequeue+0xd4>)
   14c14:	490c      	ldr	r1, [pc, #48]	; (14c48 <ll_rx_dequeue+0xe4>)
   14c16:	480a      	ldr	r0, [pc, #40]	; (14c40 <ll_rx_dequeue+0xdc>)
   14c18:	f240 33a1 	movw	r3, #929	; 0x3a1
   14c1c:	f00d fd72 	bl	22704 <printk>
   14c20:	4040      	eors	r0, r0
   14c22:	f380 8811 	msr	BASEPRI, r0
   14c26:	f04f 0003 	mov.w	r0, #3
   14c2a:	df02      	svc	2
   14c2c:	e7a6      	b.n	14b7c <ll_rx_dequeue+0x18>
   14c2e:	bf00      	nop
   14c30:	200026c4 	.word	0x200026c4
   14c34:	20002498 	.word	0x20002498
   14c38:	0002955c 	.word	0x0002955c
   14c3c:	000292b8 	.word	0x000292b8
   14c40:	00029220 	.word	0x00029220
   14c44:	0002960c 	.word	0x0002960c
   14c48:	000297e4 	.word	0x000297e4

00014c4c <ll_rx_mem_release>:
{
   14c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   14c50:	6804      	ldr	r4, [r0, #0]
{
   14c52:	4680      	mov	r8, r0
	while (rx) {
   14c54:	b344      	cbz	r4, 14ca8 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   14c56:	4f57      	ldr	r7, [pc, #348]	; (14db4 <ll_rx_mem_release+0x168>)
   14c58:	f8df 915c 	ldr.w	r9, [pc, #348]	; 14db8 <ll_rx_mem_release+0x16c>
   14c5c:	4e57      	ldr	r6, [pc, #348]	; (14dbc <ll_rx_mem_release+0x170>)
		rx = rx->next;
   14c5e:	4625      	mov	r5, r4
   14c60:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   14c62:	792b      	ldrb	r3, [r5, #4]
   14c64:	2b1c      	cmp	r3, #28
   14c66:	d810      	bhi.n	14c8a <ll_rx_mem_release+0x3e>
   14c68:	e8df f003 	tbb	[pc, r3]
   14c6c:	380f0f38 	.word	0x380f0f38
   14c70:	0f0f380f 	.word	0x0f0f380f
   14c74:	0f0f0f0f 	.word	0x0f0f0f0f
   14c78:	0f0f0f0f 	.word	0x0f0f0f0f
   14c7c:	0f0f0f0f 	.word	0x0f0f0f0f
   14c80:	56260f0f 	.word	0x56260f0f
   14c84:	38383838 	.word	0x38383838
   14c88:	38          	.byte	0x38
   14c89:	00          	.byte	0x00
			LL_ASSERT(0);
   14c8a:	f240 53fa 	movw	r3, #1530	; 0x5fa
   14c8e:	463a      	mov	r2, r7
   14c90:	4649      	mov	r1, r9
   14c92:	4630      	mov	r0, r6
   14c94:	f00d fd36 	bl	22704 <printk>
   14c98:	4040      	eors	r0, r0
   14c9a:	f380 8811 	msr	BASEPRI, r0
   14c9e:	f04f 0003 	mov.w	r0, #3
   14ca2:	df02      	svc	2
	while (rx) {
   14ca4:	2c00      	cmp	r4, #0
   14ca6:	d1da      	bne.n	14c5e <ll_rx_mem_release+0x12>
	*node_rx = rx;
   14ca8:	2300      	movs	r3, #0
   14caa:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   14cae:	20ff      	movs	r0, #255	; 0xff
}
   14cb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   14cb4:	f7ff bd16 	b.w	146e4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   14cb8:	7f2b      	ldrb	r3, [r5, #28]
   14cba:	2b02      	cmp	r3, #2
   14cbc:	d062      	beq.n	14d84 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   14cbe:	b1db      	cbz	r3, 14cf8 <ll_rx_mem_release+0xac>
   14cc0:	493f      	ldr	r1, [pc, #252]	; (14dc0 <ll_rx_mem_release+0x174>)
   14cc2:	f240 532b 	movw	r3, #1323	; 0x52b
   14cc6:	463a      	mov	r2, r7
   14cc8:	4630      	mov	r0, r6
   14cca:	f00d fd1b 	bl	22704 <printk>
   14cce:	4040      	eors	r0, r0
   14cd0:	f380 8811 	msr	BASEPRI, r0
   14cd4:	f04f 0003 	mov.w	r0, #3
   14cd8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14cda:	792b      	ldrb	r3, [r5, #4]
   14cdc:	b963      	cbnz	r3, 14cf8 <ll_rx_mem_release+0xac>
   14cde:	4939      	ldr	r1, [pc, #228]	; (14dc4 <ll_rx_mem_release+0x178>)
   14ce0:	f240 537d 	movw	r3, #1405	; 0x57d
   14ce4:	463a      	mov	r2, r7
   14ce6:	4630      	mov	r0, r6
   14ce8:	f00d fd0c 	bl	22704 <printk>
   14cec:	4040      	eors	r0, r0
   14cee:	f380 8811 	msr	BASEPRI, r0
   14cf2:	f04f 0003 	mov.w	r0, #3
   14cf6:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14cf8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 14dc8 <ll_rx_mem_release+0x17c>
   14cfc:	f89a 3000 	ldrb.w	r3, [sl]
   14d00:	2b05      	cmp	r3, #5
   14d02:	d82f      	bhi.n	14d64 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   14d04:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   14d06:	4931      	ldr	r1, [pc, #196]	; (14dcc <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
   14d08:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   14d0c:	4628      	mov	r0, r5
   14d0e:	f7fc f9d1 	bl	110b4 <mem_release>
	while (rx) {
   14d12:	2c00      	cmp	r4, #0
   14d14:	d1a3      	bne.n	14c5e <ll_rx_mem_release+0x12>
   14d16:	e7c7      	b.n	14ca8 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   14d18:	88e8      	ldrh	r0, [r5, #6]
   14d1a:	2800      	cmp	r0, #0
   14d1c:	d1c2      	bne.n	14ca4 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   14d1e:	f001 fa6d 	bl	161fc <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   14d22:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
   14d24:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   14d26:	b163      	cbz	r3, 14d42 <ll_rx_mem_release+0xf6>
   14d28:	4929      	ldr	r1, [pc, #164]	; (14dd0 <ll_rx_mem_release+0x184>)
   14d2a:	f240 53ec 	movw	r3, #1516	; 0x5ec
   14d2e:	463a      	mov	r2, r7
   14d30:	4630      	mov	r0, r6
   14d32:	f00d fce7 	bl	22704 <printk>
   14d36:	4040      	eors	r0, r0
   14d38:	f380 8811 	msr	BASEPRI, r0
   14d3c:	f04f 0003 	mov.w	r0, #3
   14d40:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   14d42:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   14d46:	f105 0048 	add.w	r0, r5, #72	; 0x48
   14d4a:	f7fc f9f3 	bl	11134 <memq_deinit>
				LL_ASSERT(link);
   14d4e:	4682      	mov	sl, r0
   14d50:	b310      	cbz	r0, 14d98 <ll_rx_mem_release+0x14c>
				conn->lll.link_tx_free = link;
   14d52:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
   14d56:	4628      	mov	r0, r5
   14d58:	f001 fa42 	bl	161e0 <ll_conn_release>
	while (rx) {
   14d5c:	2c00      	cmp	r4, #0
   14d5e:	f47f af7e 	bne.w	14c5e <ll_rx_mem_release+0x12>
   14d62:	e7a1      	b.n	14ca8 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14d64:	491b      	ldr	r1, [pc, #108]	; (14dd4 <ll_rx_mem_release+0x188>)
   14d66:	f240 6306 	movw	r3, #1542	; 0x606
   14d6a:	463a      	mov	r2, r7
   14d6c:	4630      	mov	r0, r6
   14d6e:	f00d fcc9 	bl	22704 <printk>
   14d72:	4040      	eors	r0, r0
   14d74:	f380 8811 	msr	BASEPRI, r0
   14d78:	f04f 0003 	mov.w	r0, #3
   14d7c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   14d7e:	f89a 3000 	ldrb.w	r3, [sl]
   14d82:	e7bf      	b.n	14d04 <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
   14d84:	4628      	mov	r0, r5
   14d86:	f003 ff51 	bl	18c2c <ull_central_cleanup>
					ull_filter_adv_scan_state_cb(0);
   14d8a:	2000      	movs	r0, #0
   14d8c:	f004 fe96 	bl	19abc <ull_filter_adv_scan_state_cb>
	while (rx) {
   14d90:	2c00      	cmp	r4, #0
   14d92:	f47f af64 	bne.w	14c5e <ll_rx_mem_release+0x12>
   14d96:	e787      	b.n	14ca8 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   14d98:	490f      	ldr	r1, [pc, #60]	; (14dd8 <ll_rx_mem_release+0x18c>)
   14d9a:	f240 53ef 	movw	r3, #1519	; 0x5ef
   14d9e:	463a      	mov	r2, r7
   14da0:	4630      	mov	r0, r6
   14da2:	f00d fcaf 	bl	22704 <printk>
   14da6:	4040      	eors	r0, r0
   14da8:	f380 8811 	msr	BASEPRI, r0
   14dac:	f04f 0003 	mov.w	r0, #3
   14db0:	df02      	svc	2
   14db2:	e7ce      	b.n	14d52 <ll_rx_mem_release+0x106>
   14db4:	0002955c 	.word	0x0002955c
   14db8:	000292b8 	.word	0x000292b8
   14dbc:	00029220 	.word	0x00029220
   14dc0:	0002962c 	.word	0x0002962c
   14dc4:	00029638 	.word	0x00029638
   14dc8:	20002494 	.word	0x20002494
   14dcc:	200024e4 	.word	0x200024e4
   14dd0:	0002965c 	.word	0x0002965c
   14dd4:	000295cc 	.word	0x000295cc
   14dd8:	000297e4 	.word	0x000297e4

00014ddc <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   14ddc:	4801      	ldr	r0, [pc, #4]	; (14de4 <ll_rx_link_alloc+0x8>)
   14dde:	f7fc b94f 	b.w	11080 <mem_acquire>
   14de2:	bf00      	nop
   14de4:	20002498 	.word	0x20002498

00014de8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   14de8:	4901      	ldr	r1, [pc, #4]	; (14df0 <ll_rx_link_release+0x8>)
   14dea:	f7fc b963 	b.w	110b4 <mem_release>
   14dee:	bf00      	nop
   14df0:	20002498 	.word	0x20002498

00014df4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14df4:	4b02      	ldr	r3, [pc, #8]	; (14e00 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14df6:	4a03      	ldr	r2, [pc, #12]	; (14e04 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14df8:	78db      	ldrb	r3, [r3, #3]
   14dfa:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14dfc:	f7fc b9a4 	b.w	11148 <memq_enqueue>
   14e00:	20000528 	.word	0x20000528
   14e04:	200026c8 	.word	0x200026c8

00014e08 <ll_rx_sched>:
	k_sem_give(sem_recv);
   14e08:	4b01      	ldr	r3, [pc, #4]	; (14e10 <ll_rx_sched+0x8>)
   14e0a:	6818      	ldr	r0, [r3, #0]
   14e0c:	f00c bbf4 	b.w	215f8 <z_impl_k_sem_give>
   14e10:	200026dc 	.word	0x200026dc

00014e14 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14e14:	4b0d      	ldr	r3, [pc, #52]	; (14e4c <ll_pdu_rx_alloc_peek+0x38>)
   14e16:	7899      	ldrb	r1, [r3, #2]
   14e18:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   14e1a:	4291      	cmp	r1, r2
   14e1c:	d80a      	bhi.n	14e34 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   14e1e:	eba2 0c01 	sub.w	ip, r2, r1
   14e22:	fa5f fc8c 	uxtb.w	ip, ip
   14e26:	4560      	cmp	r0, ip
   14e28:	d802      	bhi.n	14e30 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   14e2a:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14e2c:	7818      	ldrb	r0, [r3, #0]
   14e2e:	d109      	bne.n	14e44 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   14e30:	2000      	movs	r0, #0
}
   14e32:	4770      	bx	lr
		return count - first + last;
   14e34:	f893 c001 	ldrb.w	ip, [r3, #1]
   14e38:	4462      	add	r2, ip
   14e3a:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14e3c:	b2d2      	uxtb	r2, r2
   14e3e:	4290      	cmp	r0, r2
   14e40:	d8f6      	bhi.n	14e30 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14e42:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   14e44:	fb01 3300 	mla	r3, r1, r0, r3
   14e48:	6858      	ldr	r0, [r3, #4]
   14e4a:	4770      	bx	lr
   14e4c:	200003fc 	.word	0x200003fc

00014e50 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14e50:	4b09      	ldr	r3, [pc, #36]	; (14e78 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   14e52:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   14e54:	78da      	ldrb	r2, [r3, #3]
   14e56:	7818      	ldrb	r0, [r3, #0]
   14e58:	f893 c001 	ldrb.w	ip, [r3, #1]
   14e5c:	428a      	cmp	r2, r1
   14e5e:	d009      	beq.n	14e74 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   14e60:	1c4a      	adds	r2, r1, #1
   14e62:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14e64:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   14e68:	4594      	cmp	ip, r2
   14e6a:	bf08      	it	eq
   14e6c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14e6e:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   14e70:	709a      	strb	r2, [r3, #2]

	return mem;
   14e72:	4770      	bx	lr
		return NULL;
   14e74:	2000      	movs	r0, #0
}
   14e76:	4770      	bx	lr
   14e78:	200003fc 	.word	0x200003fc

00014e7c <ll_tx_ack_put>:
{
   14e7c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14e7e:	4a15      	ldr	r2, [pc, #84]	; (14ed4 <ll_tx_ack_put+0x58>)
   14e80:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   14e84:	7854      	ldrb	r4, [r2, #1]
   14e86:	f892 e002 	ldrb.w	lr, [r2, #2]
   14e8a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   14e8c:	f10c 0301 	add.w	r3, ip, #1
   14e90:	b2db      	uxtb	r3, r3
		last = 0U;
   14e92:	429c      	cmp	r4, r3
   14e94:	bf08      	it	eq
   14e96:	2300      	moveq	r3, #0
	if (last == first) {
   14e98:	459e      	cmp	lr, r3
   14e9a:	d00a      	beq.n	14eb2 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14e9c:	fb1c fc05 	smulbb	ip, ip, r5
   14ea0:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   14ea4:	f82e 000c 	strh.w	r0, [lr, ip]
   14ea8:	44f4      	add	ip, lr
	tx->node = node_tx;
   14eaa:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   14eae:	70d3      	strb	r3, [r2, #3]
}
   14eb0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   14eb2:	4a09      	ldr	r2, [pc, #36]	; (14ed8 <ll_tx_ack_put+0x5c>)
   14eb4:	4909      	ldr	r1, [pc, #36]	; (14edc <ll_tx_ack_put+0x60>)
   14eb6:	480a      	ldr	r0, [pc, #40]	; (14ee0 <ll_tx_ack_put+0x64>)
   14eb8:	f240 634e 	movw	r3, #1614	; 0x64e
   14ebc:	f00d fc22 	bl	22704 <printk>
   14ec0:	4040      	eors	r0, r0
   14ec2:	f380 8811 	msr	BASEPRI, r0
   14ec6:	f04f 0003 	mov.w	r0, #3
   14eca:	df02      	svc	2
	tx->handle = handle;
   14ecc:	2300      	movs	r3, #0
   14ece:	801b      	strh	r3, [r3, #0]
   14ed0:	deff      	udf	#255	; 0xff
   14ed2:	bf00      	nop
   14ed4:	20000528 	.word	0x20000528
   14ed8:	0002955c 	.word	0x0002955c
   14edc:	000297d8 	.word	0x000297d8
   14ee0:	00029220 	.word	0x00029220

00014ee4 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14ee4:	f030 0302 	bics.w	r3, r0, #2
{
   14ee8:	b510      	push	{r4, lr}
   14eea:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14eec:	d002      	beq.n	14ef4 <ull_ticker_status_take+0x10>
   14eee:	680b      	ldr	r3, [r1, #0]
   14ef0:	2b02      	cmp	r3, #2
   14ef2:	d008      	beq.n	14f06 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   14ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14efc:	4809      	ldr	r0, [pc, #36]	; (14f24 <ull_ticker_status_take+0x40>)
   14efe:	f00c fba1 	bl	21644 <z_impl_k_sem_take>
	return *ret_cb;
   14f02:	6820      	ldr	r0, [r4, #0]
}
   14f04:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14f06:	4a08      	ldr	r2, [pc, #32]	; (14f28 <ull_ticker_status_take+0x44>)
   14f08:	4908      	ldr	r1, [pc, #32]	; (14f2c <ull_ticker_status_take+0x48>)
   14f0a:	4809      	ldr	r0, [pc, #36]	; (14f30 <ull_ticker_status_take+0x4c>)
   14f0c:	f240 6382 	movw	r3, #1666	; 0x682
   14f10:	f00d fbf8 	bl	22704 <printk>
   14f14:	4040      	eors	r0, r0
   14f16:	f380 8811 	msr	BASEPRI, r0
   14f1a:	f04f 0003 	mov.w	r0, #3
   14f1e:	df02      	svc	2
   14f20:	e7e8      	b.n	14ef4 <ull_ticker_status_take+0x10>
   14f22:	bf00      	nop
   14f24:	200026e0 	.word	0x200026e0
   14f28:	0002955c 	.word	0x0002955c
   14f2c:	0002967c 	.word	0x0002967c
   14f30:	00029220 	.word	0x00029220

00014f34 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14f34:	4b01      	ldr	r3, [pc, #4]	; (14f3c <ull_disable_mark_get+0x8>)
}
   14f36:	6818      	ldr	r0, [r3, #0]
   14f38:	4770      	bx	lr
   14f3a:	bf00      	nop
   14f3c:	20002460 	.word	0x20002460

00014f40 <ull_update_mark>:
	if (!*m) {
   14f40:	4a03      	ldr	r2, [pc, #12]	; (14f50 <ull_update_mark+0x10>)
{
   14f42:	4603      	mov	r3, r0
	if (!*m) {
   14f44:	6810      	ldr	r0, [r2, #0]
   14f46:	b100      	cbz	r0, 14f4a <ull_update_mark+0xa>
}
   14f48:	4770      	bx	lr
		*m = param;
   14f4a:	6013      	str	r3, [r2, #0]
   14f4c:	4618      	mov	r0, r3
}
   14f4e:	4770      	bx	lr
   14f50:	20002464 	.word	0x20002464

00014f54 <ull_update_unmark>:
	if (*m && *m == param) {
   14f54:	4a04      	ldr	r2, [pc, #16]	; (14f68 <ull_update_unmark+0x14>)
   14f56:	6813      	ldr	r3, [r2, #0]
   14f58:	b123      	cbz	r3, 14f64 <ull_update_unmark+0x10>
   14f5a:	4298      	cmp	r0, r3
		*m = NULL;
   14f5c:	bf06      	itte	eq
   14f5e:	2100      	moveq	r1, #0
   14f60:	6011      	streq	r1, [r2, #0]
	return NULL;
   14f62:	2300      	movne	r3, #0
}
   14f64:	4618      	mov	r0, r3
   14f66:	4770      	bx	lr
   14f68:	20002464 	.word	0x20002464

00014f6c <ull_update_mark_get>:
	return mark_get(mark_update);
   14f6c:	4b01      	ldr	r3, [pc, #4]	; (14f74 <ull_update_mark_get+0x8>)
}
   14f6e:	6818      	ldr	r0, [r3, #0]
   14f70:	4770      	bx	lr
   14f72:	bf00      	nop
   14f74:	20002464 	.word	0x20002464

00014f78 <ull_disable>:
{
   14f78:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   14f7a:	6805      	ldr	r5, [r0, #0]
   14f7c:	782b      	ldrb	r3, [r5, #0]
{
   14f7e:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   14f80:	b353      	cbz	r3, 14fd8 <ull_disable+0x60>
	compiler_barrier();
   14f82:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   14f84:	2201      	movs	r2, #1
   14f86:	2100      	movs	r1, #0
   14f88:	4668      	mov	r0, sp
   14f8a:	f012 fef6 	bl	27d7a <z_impl_k_sem_init>
   14f8e:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   14f90:	4a13      	ldr	r2, [pc, #76]	; (14fe0 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   14f92:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14f96:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   14f98:	b1f3      	cbz	r3, 14fd8 <ull_disable+0x60>
	mfy.param = lll;
   14f9a:	4b12      	ldr	r3, [pc, #72]	; (14fe4 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14f9c:	2200      	movs	r2, #0
   14f9e:	4611      	mov	r1, r2
   14fa0:	2003      	movs	r0, #3
	mfy.param = lll;
   14fa2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14fa4:	f7fc f944 	bl	11230 <mayfly_enqueue>
	LL_ASSERT(!ret);
   14fa8:	b940      	cbnz	r0, 14fbc <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   14faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fb2:	4668      	mov	r0, sp
   14fb4:	f00c fb46 	bl	21644 <z_impl_k_sem_take>
}
   14fb8:	b007      	add	sp, #28
   14fba:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14fbc:	4a0a      	ldr	r2, [pc, #40]	; (14fe8 <ull_disable+0x70>)
   14fbe:	490b      	ldr	r1, [pc, #44]	; (14fec <ull_disable+0x74>)
   14fc0:	480b      	ldr	r0, [pc, #44]	; (14ff0 <ull_disable+0x78>)
   14fc2:	f240 63ff 	movw	r3, #1791	; 0x6ff
   14fc6:	f00d fb9d 	bl	22704 <printk>
   14fca:	4040      	eors	r0, r0
   14fcc:	f380 8811 	msr	BASEPRI, r0
   14fd0:	f04f 0003 	mov.w	r0, #3
   14fd4:	df02      	svc	2
   14fd6:	e7e8      	b.n	14faa <ull_disable+0x32>
		return -EALREADY;
   14fd8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14fdc:	e7ec      	b.n	14fb8 <ull_disable+0x40>
   14fde:	bf00      	nop
   14fe0:	0001450d 	.word	0x0001450d
   14fe4:	2000058c 	.word	0x2000058c
   14fe8:	0002955c 	.word	0x0002955c
   14fec:	00029674 	.word	0x00029674
   14ff0:	00029220 	.word	0x00029220

00014ff4 <ull_ticker_stop_with_mark>:
{
   14ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   14ff6:	4e20      	ldr	r6, [pc, #128]	; (15078 <ull_ticker_stop_with_mark+0x84>)
   14ff8:	6833      	ldr	r3, [r6, #0]
{
   14ffa:	b085      	sub	sp, #20
   14ffc:	460c      	mov	r4, r1
   14ffe:	4617      	mov	r7, r2
	if (!*m) {
   15000:	b353      	cbz	r3, 15058 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   15002:	4299      	cmp	r1, r3
   15004:	d113      	bne.n	1502e <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   15006:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   15008:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1500a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   1500c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1500e:	9500      	str	r5, [sp, #0]
   15010:	4b1a      	ldr	r3, [pc, #104]	; (1507c <ull_ticker_stop_with_mark+0x88>)
   15012:	2103      	movs	r1, #3
   15014:	2000      	movs	r0, #0
   15016:	f7fd fb73 	bl	12700 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1501a:	4629      	mov	r1, r5
   1501c:	f7ff ff62 	bl	14ee4 <ull_ticker_status_take>
	if (ret) {
   15020:	4605      	mov	r5, r0
   15022:	b140      	cbz	r0, 15036 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   15024:	6833      	ldr	r3, [r6, #0]
   15026:	b10b      	cbz	r3, 1502c <ull_ticker_stop_with_mark+0x38>
   15028:	429c      	cmp	r4, r3
   1502a:	d017      	beq.n	1505c <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   1502c:	b304      	cbz	r4, 15070 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   1502e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   15032:	b005      	add	sp, #20
   15034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   15036:	4638      	mov	r0, r7
   15038:	f7ff ff9e 	bl	14f78 <ull_disable>
	if (*m && *m == param) {
   1503c:	6833      	ldr	r3, [r6, #0]
   1503e:	b10b      	cbz	r3, 15044 <ull_ticker_stop_with_mark+0x50>
   15040:	429c      	cmp	r4, r3
   15042:	d011      	beq.n	15068 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   15044:	2c00      	cmp	r4, #0
   15046:	d1f2      	bne.n	1502e <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   15048:	2800      	cmp	r0, #0
   1504a:	d0f2      	beq.n	15032 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   1504c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   15050:	bf08      	it	eq
   15052:	2000      	moveq	r0, #0
}
   15054:	b005      	add	sp, #20
   15056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   15058:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   1505a:	e7d4      	b.n	15006 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   1505c:	2300      	movs	r3, #0
		return -EALREADY;
   1505e:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   15062:	6033      	str	r3, [r6, #0]
}
   15064:	b005      	add	sp, #20
   15066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   15068:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   1506a:	2800      	cmp	r0, #0
   1506c:	d0e1      	beq.n	15032 <ull_ticker_stop_with_mark+0x3e>
   1506e:	e7ed      	b.n	1504c <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   15070:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15074:	e7dd      	b.n	15032 <ull_ticker_stop_with_mark+0x3e>
   15076:	bf00      	nop
   15078:	20002460 	.word	0x20002460
   1507c:	00014501 	.word	0x00014501

00015080 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   15080:	4b0d      	ldr	r3, [pc, #52]	; (150b8 <ull_pdu_rx_alloc_peek+0x38>)
   15082:	7899      	ldrb	r1, [r3, #2]
   15084:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   15086:	4291      	cmp	r1, r2
   15088:	d80a      	bhi.n	150a0 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   1508a:	eba2 0c01 	sub.w	ip, r2, r1
   1508e:	fa5f fc8c 	uxtb.w	ip, ip
   15092:	4560      	cmp	r0, ip
   15094:	d802      	bhi.n	1509c <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   15096:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   15098:	7818      	ldrb	r0, [r3, #0]
   1509a:	d109      	bne.n	150b0 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   1509c:	2000      	movs	r0, #0
}
   1509e:	4770      	bx	lr
		return count - first + last;
   150a0:	f893 c001 	ldrb.w	ip, [r3, #1]
   150a4:	4462      	add	r2, ip
   150a6:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   150a8:	b2d2      	uxtb	r2, r2
   150aa:	4290      	cmp	r0, r2
   150ac:	d8f6      	bhi.n	1509c <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   150ae:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   150b0:	fb01 3300 	mla	r3, r1, r0, r3
   150b4:	6858      	ldr	r0, [r3, #4]
   150b6:	4770      	bx	lr
   150b8:	2000040c 	.word	0x2000040c

000150bc <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   150bc:	4b09      	ldr	r3, [pc, #36]	; (150e4 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   150be:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   150c0:	78da      	ldrb	r2, [r3, #3]
   150c2:	7818      	ldrb	r0, [r3, #0]
   150c4:	f893 c001 	ldrb.w	ip, [r3, #1]
   150c8:	428a      	cmp	r2, r1
   150ca:	d009      	beq.n	150e0 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   150cc:	1c4a      	adds	r2, r1, #1
   150ce:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   150d0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   150d4:	4594      	cmp	ip, r2
   150d6:	bf08      	it	eq
   150d8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   150da:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   150dc:	709a      	strb	r2, [r3, #2]
	return mem;
   150de:	4770      	bx	lr
		return NULL;
   150e0:	2000      	movs	r0, #0
}
   150e2:	4770      	bx	lr
   150e4:	2000040c 	.word	0x2000040c

000150e8 <ull_rx_put>:
{
   150e8:	b538      	push	{r3, r4, r5, lr}
   150ea:	460c      	mov	r4, r1
   150ec:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   150ee:	f003 f9b1 	bl	18454 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   150f2:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   150f4:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   150f6:	4a03      	ldr	r2, [pc, #12]	; (15104 <ull_rx_put+0x1c>)
   150f8:	4628      	mov	r0, r5
}
   150fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   150fe:	f7fc b823 	b.w	11148 <memq_enqueue>
   15102:	bf00      	nop
   15104:	200026d8 	.word	0x200026d8

00015108 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   15108:	2201      	movs	r2, #1
   1510a:	4b02      	ldr	r3, [pc, #8]	; (15114 <ull_rx_sched+0xc>)
   1510c:	4611      	mov	r1, r2
   1510e:	2000      	movs	r0, #0
   15110:	f7fc b88e 	b.w	11230 <mayfly_enqueue>
   15114:	2000057c 	.word	0x2000057c

00015118 <ull_prepare_enqueue>:
{
   15118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1511c:	4e15      	ldr	r6, [pc, #84]	; (15174 <ull_prepare_enqueue+0x5c>)
{
   1511e:	f89d a020 	ldrb.w	sl, [sp, #32]
   15122:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   15124:	78f3      	ldrb	r3, [r6, #3]
{
   15126:	460f      	mov	r7, r1
	last = last + 1;
   15128:	1c5d      	adds	r5, r3, #1
   1512a:	4611      	mov	r1, r2
	if (last == count) {
   1512c:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   1512e:	b2ed      	uxtb	r5, r5
		last = 0U;
   15130:	42aa      	cmp	r2, r5
   15132:	bf08      	it	eq
   15134:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   15136:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   15138:	42aa      	cmp	r2, r5
{
   1513a:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1513c:	7830      	ldrb	r0, [r6, #0]
   1513e:	d015      	beq.n	1516c <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15140:	1d34      	adds	r4, r6, #4
   15142:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   15146:	2210      	movs	r2, #16
   15148:	4620      	mov	r0, r4
   1514a:	f00f fc28 	bl	2499e <memcpy>
	e->is_resume = is_resume;
   1514e:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   15150:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   15152:	f00a 0a01 	and.w	sl, sl, #1
   15156:	f023 0303 	bic.w	r3, r3, #3
   1515a:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1515e:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   15162:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   15164:	70f5      	strb	r5, [r6, #3]
}
   15166:	4620      	mov	r0, r4
   15168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   1516c:	2400      	movs	r4, #0
}
   1516e:	4620      	mov	r0, r4
   15170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15174:	20000424 	.word	0x20000424

00015178 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   15178:	4b05      	ldr	r3, [pc, #20]	; (15190 <ull_prepare_dequeue_get+0x18>)
   1517a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1517c:	78da      	ldrb	r2, [r3, #3]
   1517e:	7819      	ldrb	r1, [r3, #0]
   15180:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   15182:	bf1a      	itte	ne
   15184:	3304      	addne	r3, #4
   15186:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1518a:	2000      	moveq	r0, #0
}
   1518c:	4770      	bx	lr
   1518e:	bf00      	nop
   15190:	20000424 	.word	0x20000424

00015194 <ull_prepare_dequeue_iter>:
{
   15194:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   15196:	4b0d      	ldr	r3, [pc, #52]	; (151cc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   15198:	7802      	ldrb	r2, [r0, #0]
   1519a:	7859      	ldrb	r1, [r3, #1]
   1519c:	f893 c003 	ldrb.w	ip, [r3, #3]
   151a0:	f893 e000 	ldrb.w	lr, [r3]
   151a4:	4291      	cmp	r1, r2
   151a6:	bf9c      	itt	ls
   151a8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   151aa:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   151ac:	4594      	cmp	ip, r2
   151ae:	d00a      	beq.n	151c6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   151b0:	1c53      	adds	r3, r2, #1
   151b2:	b2db      	uxtb	r3, r3
		i = 0U;
   151b4:	4299      	cmp	r1, r3
   151b6:	bf08      	it	eq
   151b8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   151ba:	4905      	ldr	r1, [pc, #20]	; (151d0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   151bc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   151be:	fb02 100e 	mla	r0, r2, lr, r1
}
   151c2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   151c6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   151c8:	e7fb      	b.n	151c2 <ull_prepare_dequeue_iter+0x2e>
   151ca:	bf00      	nop
   151cc:	20000424 	.word	0x20000424
   151d0:	20000428 	.word	0x20000428

000151d4 <ull_prepare_dequeue>:
{
   151d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   151d8:	4c23      	ldr	r4, [pc, #140]	; (15268 <ull_prepare_dequeue+0x94>)
   151da:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   151dc:	78e1      	ldrb	r1, [r4, #3]
   151de:	7823      	ldrb	r3, [r4, #0]
   151e0:	4291      	cmp	r1, r2
   151e2:	d027      	beq.n	15234 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   151e4:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   151e6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1526c <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   151ea:	f8df b084 	ldr.w	fp, [pc, #132]	; 15270 <ull_prepare_dequeue+0x9c>
   151ee:	f8df a084 	ldr.w	sl, [pc, #132]	; 15274 <ull_prepare_dequeue+0xa0>
   151f2:	4680      	mov	r8, r0
   151f4:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   151f8:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   151fa:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   151fc:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   15200:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   15204:	d518      	bpl.n	15238 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   15206:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   15208:	78e1      	ldrb	r1, [r4, #3]
   1520a:	7820      	ldrb	r0, [r4, #0]
   1520c:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   15210:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   15212:	4291      	cmp	r1, r2
	_first += 1U;
   15214:	b2db      	uxtb	r3, r3
	if (_first == last) {
   15216:	d00d      	beq.n	15234 <ull_prepare_dequeue+0x60>
		_first = 0U;
   15218:	459c      	cmp	ip, r3
   1521a:	bf08      	it	eq
   1521c:	2300      	moveq	r3, #0
	if (first == last) {
   1521e:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   15220:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   15222:	d007      	beq.n	15234 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   15224:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   15228:	2d00      	cmp	r5, #0
   1522a:	d1e5      	bne.n	151f8 <ull_prepare_dequeue+0x24>
   1522c:	b116      	cbz	r6, 15234 <ull_prepare_dequeue+0x60>
   1522e:	7f03      	ldrb	r3, [r0, #28]
   15230:	07db      	lsls	r3, r3, #31
   15232:	d5e1      	bpl.n	151f8 <ull_prepare_dequeue+0x24>
}
   15234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   15238:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   1523c:	4b0b      	ldr	r3, [pc, #44]	; (1526c <ull_prepare_dequeue+0x98>)
   1523e:	462a      	mov	r2, r5
   15240:	4629      	mov	r1, r5
   15242:	4640      	mov	r0, r8
   15244:	f7fb fff4 	bl	11230 <mayfly_enqueue>
			LL_ASSERT(!ret);
   15248:	2800      	cmp	r0, #0
   1524a:	d0dc      	beq.n	15206 <ull_prepare_dequeue+0x32>
   1524c:	480a      	ldr	r0, [pc, #40]	; (15278 <ull_prepare_dequeue+0xa4>)
   1524e:	f240 7376 	movw	r3, #1910	; 0x776
   15252:	465a      	mov	r2, fp
   15254:	4651      	mov	r1, sl
   15256:	f00d fa55 	bl	22704 <printk>
   1525a:	4040      	eors	r0, r0
   1525c:	f380 8811 	msr	BASEPRI, r0
   15260:	f04f 0003 	mov.w	r0, #3
   15264:	df02      	svc	2
   15266:	e7ce      	b.n	15206 <ull_prepare_dequeue+0x32>
   15268:	20000424 	.word	0x20000424
   1526c:	2000054c 	.word	0x2000054c
   15270:	0002955c 	.word	0x0002955c
   15274:	00029674 	.word	0x00029674
   15278:	00029220 	.word	0x00029220

0001527c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1527c:	4b06      	ldr	r3, [pc, #24]	; (15298 <ull_event_done_extra_get+0x1c>)
   1527e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   15280:	78d9      	ldrb	r1, [r3, #3]
   15282:	7818      	ldrb	r0, [r3, #0]
   15284:	4291      	cmp	r1, r2
   15286:	d005      	beq.n	15294 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   15288:	fb02 3300 	mla	r3, r2, r0, r3
   1528c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1528e:	b110      	cbz	r0, 15296 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   15290:	3020      	adds	r0, #32
   15292:	4770      	bx	lr
		return NULL;
   15294:	2000      	movs	r0, #0
}
   15296:	4770      	bx	lr
   15298:	200003e4 	.word	0x200003e4

0001529c <ull_event_done>:
{
   1529c:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   1529e:	4a13      	ldr	r2, [pc, #76]	; (152ec <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   152a0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   152a2:	78d4      	ldrb	r4, [r2, #3]
   152a4:	7811      	ldrb	r1, [r2, #0]
   152a6:	429c      	cmp	r4, r3
{
   152a8:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   152aa:	7850      	ldrb	r0, [r2, #1]
   152ac:	d01b      	beq.n	152e6 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   152ae:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   152b2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   152b4:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   152b6:	b2db      	uxtb	r3, r3
		_first = 0U;
   152b8:	4298      	cmp	r0, r3
   152ba:	bf08      	it	eq
   152bc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   152be:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   152c0:	b17c      	cbz	r4, 152e2 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   152c2:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   152c4:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   152c6:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   152c8:	4a09      	ldr	r2, [pc, #36]	; (152f0 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   152ca:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   152cc:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   152ce:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   152d0:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   152d2:	f7fb ff39 	bl	11148 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   152d6:	2201      	movs	r2, #1
   152d8:	4b06      	ldr	r3, [pc, #24]	; (152f4 <ull_event_done+0x58>)
   152da:	4611      	mov	r1, r2
   152dc:	4628      	mov	r0, r5
   152de:	f7fb ffa7 	bl	11230 <mayfly_enqueue>
}
   152e2:	4620      	mov	r0, r4
   152e4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   152e6:	2400      	movs	r4, #0
   152e8:	e7fb      	b.n	152e2 <ull_event_done+0x46>
   152ea:	bf00      	nop
   152ec:	200003e4 	.word	0x200003e4
   152f0:	200026d0 	.word	0x200026d0
   152f4:	2000056c 	.word	0x2000056c

000152f8 <ull_rxfifo_alloc>:
{
   152f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152fc:	b083      	sub	sp, #12
   152fe:	461d      	mov	r5, r3
   15300:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   15302:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   15306:	e9cd 0400 	strd	r0, r4, [sp]
   1530a:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1530e:	b33b      	cbz	r3, 15360 <ull_rxfifo_alloc+0x68>
   15310:	1e5c      	subs	r4, r3, #1
   15312:	f895 b000 	ldrb.w	fp, [r5]
   15316:	4688      	mov	r8, r1
   15318:	4617      	mov	r7, r2
   1531a:	b2e4      	uxtb	r4, r4
	last = last + 1;
   1531c:	f10b 0301 	add.w	r3, fp, #1
   15320:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   15324:	45d8      	cmp	r8, fp
   15326:	bf08      	it	eq
   15328:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   1532c:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   1532e:	4648      	mov	r0, r9
   15330:	d016      	beq.n	15360 <ull_rxfifo_alloc+0x68>
   15332:	f7fb fea5 	bl	11080 <mem_acquire>
   15336:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   15338:	4650      	mov	r0, sl
		if (!link) {
   1533a:	b18e      	cbz	r6, 15360 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   1533c:	f7fb fea0 	bl	11080 <mem_acquire>
		if (!rx) {
   15340:	b188      	cbz	r0, 15366 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   15342:	2300      	movs	r3, #0
   15344:	6073      	str	r3, [r6, #4]
		rx->link = link;
   15346:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   15348:	782a      	ldrb	r2, [r5, #0]
   1534a:	9b00      	ldr	r3, [sp, #0]
   1534c:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   15350:	9b01      	ldr	r3, [sp, #4]
   15352:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   15354:	3c01      	subs	r4, #1
   15356:	b2e4      	uxtb	r4, r4
   15358:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   1535a:	f885 b000 	strb.w	fp, [r5]
   1535e:	d1dd      	bne.n	1531c <ull_rxfifo_alloc+0x24>
}
   15360:	b003      	add	sp, #12
   15362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   15366:	4649      	mov	r1, r9
   15368:	4630      	mov	r0, r6
}
   1536a:	b003      	add	sp, #12
   1536c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   15370:	f7fb bea0 	b.w	110b4 <mem_release>

00015374 <init_reset>:
{
   15374:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   15376:	4c3f      	ldr	r4, [pc, #252]	; (15474 <init_reset+0x100>)
   15378:	4d3f      	ldr	r5, [pc, #252]	; (15478 <init_reset+0x104>)
   1537a:	79a2      	ldrb	r2, [r4, #6]
   1537c:	88a1      	ldrh	r1, [r4, #4]
   1537e:	4e3f      	ldr	r6, [pc, #252]	; (1547c <init_reset+0x108>)
   15380:	2000      	movs	r0, #0
{
   15382:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   15384:	4623      	mov	r3, r4
   15386:	8068      	strh	r0, [r5, #2]
   15388:	f104 0008 	add.w	r0, r4, #8
   1538c:	f7fb fe48 	bl	11020 <mem_init>
   15390:	79e3      	ldrb	r3, [r4, #7]
   15392:	79a2      	ldrb	r2, [r4, #6]
   15394:	1d30      	adds	r0, r6, #4
   15396:	441a      	add	r2, r3
   15398:	2108      	movs	r1, #8
   1539a:	4633      	mov	r3, r6
   1539c:	f7fb fe40 	bl	11020 <mem_init>
   153a0:	9602      	str	r6, [sp, #8]
   153a2:	462e      	mov	r6, r5
   153a4:	79a3      	ldrb	r3, [r4, #6]
   153a6:	f816 0b04 	ldrb.w	r0, [r6], #4
   153aa:	78aa      	ldrb	r2, [r5, #2]
   153ac:	7869      	ldrb	r1, [r5, #1]
   153ae:	9303      	str	r3, [sp, #12]
   153b0:	e9cd 6400 	strd	r6, r4, [sp]
   153b4:	1ceb      	adds	r3, r5, #3
   153b6:	f7ff ff9f 	bl	152f8 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   153ba:	4b31      	ldr	r3, [pc, #196]	; (15480 <init_reset+0x10c>)
   153bc:	2207      	movs	r2, #7
   153be:	1d18      	adds	r0, r3, #4
   153c0:	2144      	movs	r1, #68	; 0x44
   153c2:	f7fb fe2d 	bl	11020 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   153c6:	4b2f      	ldr	r3, [pc, #188]	; (15484 <init_reset+0x110>)
   153c8:	2209      	movs	r2, #9
   153ca:	1d18      	adds	r0, r3, #4
   153cc:	2108      	movs	r1, #8
   153ce:	f7fb fe27 	bl	11020 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   153d2:	482c      	ldr	r0, [pc, #176]	; (15484 <init_reset+0x110>)
   153d4:	f7fb fe54 	bl	11080 <mem_acquire>
	LL_ASSERT(link);
   153d8:	4604      	mov	r4, r0
   153da:	b308      	cbz	r0, 15420 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   153dc:	4a2a      	ldr	r2, [pc, #168]	; (15488 <init_reset+0x114>)
   153de:	4620      	mov	r0, r4
   153e0:	1f11      	subs	r1, r2, #4
   153e2:	f7fb fea3 	bl	1112c <memq_init>
	link = mem_acquire(&mem_link_done.free);
   153e6:	4825      	ldr	r0, [pc, #148]	; (1547c <init_reset+0x108>)
   153e8:	f7fb fe4a 	bl	11080 <mem_acquire>
	LL_ASSERT(link);
   153ec:	4604      	mov	r4, r0
   153ee:	b328      	cbz	r0, 1543c <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   153f0:	4a26      	ldr	r2, [pc, #152]	; (1548c <init_reset+0x118>)
   153f2:	4620      	mov	r0, r4
   153f4:	1f11      	subs	r1, r2, #4
   153f6:	f7fb fe99 	bl	1112c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   153fa:	4822      	ldr	r0, [pc, #136]	; (15484 <init_reset+0x110>)
   153fc:	f7fb fe40 	bl	11080 <mem_acquire>
	LL_ASSERT(link);
   15400:	4604      	mov	r4, r0
   15402:	b348      	cbz	r0, 15458 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   15404:	4a22      	ldr	r2, [pc, #136]	; (15490 <init_reset+0x11c>)
   15406:	4620      	mov	r0, r4
   15408:	1f11      	subs	r1, r2, #4
   1540a:	f7fb fe8f 	bl	1112c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1540e:	4b21      	ldr	r3, [pc, #132]	; (15494 <init_reset+0x120>)
   15410:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   15412:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   15414:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   15416:	f7ff f965 	bl	146e4 <rx_alloc>
}
   1541a:	2000      	movs	r0, #0
   1541c:	b004      	add	sp, #16
   1541e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   15420:	4a1d      	ldr	r2, [pc, #116]	; (15498 <init_reset+0x124>)
   15422:	491e      	ldr	r1, [pc, #120]	; (1549c <init_reset+0x128>)
   15424:	481e      	ldr	r0, [pc, #120]	; (154a0 <init_reset+0x12c>)
   15426:	f640 0302 	movw	r3, #2050	; 0x802
   1542a:	f00d f96b 	bl	22704 <printk>
   1542e:	4040      	eors	r0, r0
   15430:	f380 8811 	msr	BASEPRI, r0
   15434:	f04f 0003 	mov.w	r0, #3
   15438:	df02      	svc	2
   1543a:	e7cf      	b.n	153dc <init_reset+0x68>
	LL_ASSERT(link);
   1543c:	4a16      	ldr	r2, [pc, #88]	; (15498 <init_reset+0x124>)
   1543e:	4917      	ldr	r1, [pc, #92]	; (1549c <init_reset+0x128>)
   15440:	4817      	ldr	r0, [pc, #92]	; (154a0 <init_reset+0x12c>)
   15442:	f640 030a 	movw	r3, #2058	; 0x80a
   15446:	f00d f95d 	bl	22704 <printk>
   1544a:	4040      	eors	r0, r0
   1544c:	f380 8811 	msr	BASEPRI, r0
   15450:	f04f 0003 	mov.w	r0, #3
   15454:	df02      	svc	2
   15456:	e7cb      	b.n	153f0 <init_reset+0x7c>
	LL_ASSERT(link);
   15458:	4a0f      	ldr	r2, [pc, #60]	; (15498 <init_reset+0x124>)
   1545a:	4910      	ldr	r1, [pc, #64]	; (1549c <init_reset+0x128>)
   1545c:	4810      	ldr	r0, [pc, #64]	; (154a0 <init_reset+0x12c>)
   1545e:	f640 0312 	movw	r3, #2066	; 0x812
   15462:	f00d f94f 	bl	22704 <printk>
   15466:	4040      	eors	r0, r0
   15468:	f380 8811 	msr	BASEPRI, r0
   1546c:	f04f 0003 	mov.w	r0, #3
   15470:	df02      	svc	2
   15472:	e7c7      	b.n	15404 <init_reset+0x90>
   15474:	2000033c 	.word	0x2000033c
   15478:	200003e4 	.word	0x200003e4
   1547c:	20002468 	.word	0x20002468
   15480:	200024e4 	.word	0x200024e4
   15484:	20002498 	.word	0x20002498
   15488:	200026d8 	.word	0x200026d8
   1548c:	200026d0 	.word	0x200026d0
   15490:	200026c8 	.word	0x200026c8
   15494:	20002494 	.word	0x20002494
   15498:	0002955c 	.word	0x0002955c
   1549c:	000297e4 	.word	0x000297e4
   154a0:	00029220 	.word	0x00029220

000154a4 <ll_init>:
{
   154a4:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   154a6:	4b2b      	ldr	r3, [pc, #172]	; (15554 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154a8:	4d2b      	ldr	r5, [pc, #172]	; (15558 <ll_init+0xb4>)
	sem_recv = sem_rx;
   154aa:	6018      	str	r0, [r3, #0]
{
   154ac:	b087      	sub	sp, #28
	cntr_init();
   154ae:	f006 fd5b 	bl	1bf68 <cntr_init>
	mayfly_init();
   154b2:	f7fb fe6b 	bl	1118c <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154b6:	4a29      	ldr	r2, [pc, #164]	; (1555c <ll_init+0xb8>)
   154b8:	4929      	ldr	r1, [pc, #164]	; (15560 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   154ba:	482a      	ldr	r0, [pc, #168]	; (15564 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154bc:	e9cd 2504 	strd	r2, r5, [sp, #16]
   154c0:	4a29      	ldr	r2, [pc, #164]	; (15568 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   154c2:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   154c8:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154ca:	210c      	movs	r1, #12
   154cc:	e9cd 0100 	strd	r0, r1, [sp]
   154d0:	4a26      	ldr	r2, [pc, #152]	; (1556c <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   154d2:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   154d4:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   154d6:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   154d8:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   154da:	4619      	mov	r1, r3
   154dc:	2000      	movs	r0, #0
   154de:	f7fc ffd3 	bl	12488 <ticker_init>
	LL_ASSERT(!err);
   154e2:	bb40      	cbnz	r0, 15536 <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
   154e4:	2201      	movs	r2, #1
   154e6:	2100      	movs	r1, #0
   154e8:	4821      	ldr	r0, [pc, #132]	; (15570 <ll_init+0xcc>)
   154ea:	f012 fc46 	bl	27d7a <z_impl_k_sem_init>
	err = lll_init();
   154ee:	f005 f8fd 	bl	1a6ec <lll_init>
	if (err) {
   154f2:	4604      	mov	r4, r0
   154f4:	b110      	cbz	r0, 154fc <ll_init+0x58>
}
   154f6:	4620      	mov	r0, r4
   154f8:	b007      	add	sp, #28
   154fa:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   154fc:	f7ff ff3a 	bl	15374 <init_reset>
	if (err) {
   15500:	4604      	mov	r4, r0
   15502:	2800      	cmp	r0, #0
   15504:	d1f7      	bne.n	154f6 <ll_init+0x52>
	err = lll_scan_init();
   15506:	f005 ff85 	bl	1b414 <lll_scan_init>
	if (err) {
   1550a:	4604      	mov	r4, r0
   1550c:	2800      	cmp	r0, #0
   1550e:	d1f2      	bne.n	154f6 <ll_init+0x52>
	err = ull_scan_init();
   15510:	f000 f92e 	bl	15770 <ull_scan_init>
	if (err) {
   15514:	4604      	mov	r4, r0
   15516:	2800      	cmp	r0, #0
   15518:	d1ed      	bne.n	154f6 <ll_init+0x52>
	err = lll_conn_init();
   1551a:	f006 f88b 	bl	1b634 <lll_conn_init>
	if (err) {
   1551e:	4604      	mov	r4, r0
   15520:	2800      	cmp	r0, #0
   15522:	d1e8      	bne.n	154f6 <ll_init+0x52>
	err = ull_conn_init();
   15524:	f001 f918 	bl	16758 <ull_conn_init>
	if (err) {
   15528:	4604      	mov	r4, r0
   1552a:	2800      	cmp	r0, #0
   1552c:	d1e3      	bne.n	154f6 <ll_init+0x52>
		ull_filter_reset(true);
   1552e:	2001      	movs	r0, #1
   15530:	f004 fa44 	bl	199bc <ull_filter_reset>
	return  0;
   15534:	e7df      	b.n	154f6 <ll_init+0x52>
	LL_ASSERT(!err);
   15536:	4a0f      	ldr	r2, [pc, #60]	; (15574 <ll_init+0xd0>)
   15538:	490f      	ldr	r1, [pc, #60]	; (15578 <ll_init+0xd4>)
   1553a:	4810      	ldr	r0, [pc, #64]	; (1557c <ll_init+0xd8>)
   1553c:	f240 230d 	movw	r3, #525	; 0x20d
   15540:	f00d f8e0 	bl	22704 <printk>
   15544:	4040      	eors	r0, r0
   15546:	f380 8811 	msr	BASEPRI, r0
   1554a:	f04f 0003 	mov.w	r0, #3
   1554e:	df02      	svc	2
   15550:	e7c8      	b.n	154e4 <ll_init+0x40>
   15552:	bf00      	nop
   15554:	200026dc 	.word	0x200026dc
   15558:	0001cc61 	.word	0x0001cc61
   1555c:	0001cb11 	.word	0x0001cb11
   15560:	0001caad 	.word	0x0001caad
   15564:	20002a28 	.word	0x20002a28
   15568:	200027b8 	.word	0x200027b8
   1556c:	200026f8 	.word	0x200026f8
   15570:	200026e0 	.word	0x200026e0
   15574:	0002955c 	.word	0x0002955c
   15578:	00029598 	.word	0x00029598
   1557c:	00029220 	.word	0x00029220

00015580 <ll_reset>:
{
   15580:	b510      	push	{r4, lr}
   15582:	b086      	sub	sp, #24
	err = ull_scan_reset();
   15584:	f000 f972 	bl	1586c <ull_scan_reset>
	LL_ASSERT(!err);
   15588:	bb50      	cbnz	r0, 155e0 <ll_reset+0x60>
	err = ull_conn_reset();
   1558a:	f001 f8e7 	bl	1675c <ull_conn_reset>
	LL_ASSERT(!err);
   1558e:	2800      	cmp	r0, #0
   15590:	d137      	bne.n	15602 <ll_reset+0x82>
	MFIFO_INIT(tx_ack);
   15592:	4b31      	ldr	r3, [pc, #196]	; (15658 <ll_reset+0xd8>)
   15594:	2400      	movs	r4, #0
   15596:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   15598:	4620      	mov	r0, r4
   1559a:	f004 fa0f 	bl	199bc <ull_filter_reset>
	MFIFO_INIT(prep);
   1559e:	492f      	ldr	r1, [pc, #188]	; (1565c <ll_reset+0xdc>)
	MFIFO_INIT(pdu_rx_free);
   155a0:	4a2f      	ldr	r2, [pc, #188]	; (15660 <ll_reset+0xe0>)
	MFIFO_INIT(ll_pdu_rx_free);
   155a2:	4b30      	ldr	r3, [pc, #192]	; (15664 <ll_reset+0xe4>)
	MFIFO_INIT(prep);
   155a4:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   155a6:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   155a8:	805c      	strh	r4, [r3, #2]
   155aa:	2201      	movs	r2, #1
   155ac:	4621      	mov	r1, r4
   155ae:	4668      	mov	r0, sp
   155b0:	f012 fbe3 	bl	27d7a <z_impl_k_sem_init>
		mfy.param = &sem;
   155b4:	4b2c      	ldr	r3, [pc, #176]	; (15668 <ll_reset+0xe8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   155b6:	4622      	mov	r2, r4
   155b8:	4621      	mov	r1, r4
   155ba:	2003      	movs	r0, #3
		mfy.param = &sem;
   155bc:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   155c0:	f7fb fe36 	bl	11230 <mayfly_enqueue>
		LL_ASSERT(!retval);
   155c4:	2800      	cmp	r0, #0
   155c6:	d139      	bne.n	1563c <ll_reset+0xbc>
	return z_impl_k_sem_take(sem, timeout);
   155c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155d0:	4668      	mov	r0, sp
   155d2:	f00c f837 	bl	21644 <z_impl_k_sem_take>
	err = init_reset();
   155d6:	f7ff fecd 	bl	15374 <init_reset>
	LL_ASSERT(!err);
   155da:	bb00      	cbnz	r0, 1561e <ll_reset+0x9e>
}
   155dc:	b006      	add	sp, #24
   155de:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   155e0:	4a22      	ldr	r2, [pc, #136]	; (1566c <ll_reset+0xec>)
   155e2:	4923      	ldr	r1, [pc, #140]	; (15670 <ll_reset+0xf0>)
   155e4:	4823      	ldr	r0, [pc, #140]	; (15674 <ll_reset+0xf4>)
   155e6:	f240 23b3 	movw	r3, #691	; 0x2b3
   155ea:	f00d f88b 	bl	22704 <printk>
   155ee:	4040      	eors	r0, r0
   155f0:	f380 8811 	msr	BASEPRI, r0
   155f4:	f04f 0003 	mov.w	r0, #3
   155f8:	df02      	svc	2
	err = ull_conn_reset();
   155fa:	f001 f8af 	bl	1675c <ull_conn_reset>
	LL_ASSERT(!err);
   155fe:	2800      	cmp	r0, #0
   15600:	d0c7      	beq.n	15592 <ll_reset+0x12>
   15602:	4a1a      	ldr	r2, [pc, #104]	; (1566c <ll_reset+0xec>)
   15604:	491a      	ldr	r1, [pc, #104]	; (15670 <ll_reset+0xf0>)
   15606:	481b      	ldr	r0, [pc, #108]	; (15674 <ll_reset+0xf4>)
   15608:	f240 23de 	movw	r3, #734	; 0x2de
   1560c:	f00d f87a 	bl	22704 <printk>
   15610:	4040      	eors	r0, r0
   15612:	f380 8811 	msr	BASEPRI, r0
   15616:	f04f 0003 	mov.w	r0, #3
   1561a:	df02      	svc	2
   1561c:	e7b9      	b.n	15592 <ll_reset+0x12>
	LL_ASSERT(!err);
   1561e:	4a13      	ldr	r2, [pc, #76]	; (1566c <ll_reset+0xec>)
   15620:	4913      	ldr	r1, [pc, #76]	; (15670 <ll_reset+0xf0>)
   15622:	4814      	ldr	r0, [pc, #80]	; (15674 <ll_reset+0xf4>)
   15624:	f240 3327 	movw	r3, #807	; 0x327
   15628:	f00d f86c 	bl	22704 <printk>
   1562c:	4040      	eors	r0, r0
   1562e:	f380 8811 	msr	BASEPRI, r0
   15632:	f04f 0003 	mov.w	r0, #3
   15636:	df02      	svc	2
}
   15638:	b006      	add	sp, #24
   1563a:	bd10      	pop	{r4, pc}
		LL_ASSERT(!retval);
   1563c:	4a0b      	ldr	r2, [pc, #44]	; (1566c <ll_reset+0xec>)
   1563e:	490e      	ldr	r1, [pc, #56]	; (15678 <ll_reset+0xf8>)
   15640:	480c      	ldr	r0, [pc, #48]	; (15674 <ll_reset+0xf4>)
   15642:	f240 330d 	movw	r3, #781	; 0x30d
   15646:	f00d f85d 	bl	22704 <printk>
   1564a:	4040      	eors	r0, r0
   1564c:	f380 8811 	msr	BASEPRI, r0
   15650:	f04f 0003 	mov.w	r0, #3
   15654:	df02      	svc	2
   15656:	e7b7      	b.n	155c8 <ll_reset+0x48>
   15658:	20000528 	.word	0x20000528
   1565c:	20000424 	.word	0x20000424
   15660:	2000040c 	.word	0x2000040c
   15664:	200003fc 	.word	0x200003fc
   15668:	2000055c 	.word	0x2000055c
   1566c:	0002955c 	.word	0x0002955c
   15670:	00029598 	.word	0x00029598
   15674:	00029220 	.word	0x00029220
   15678:	0002969c 	.word	0x0002969c

0001567c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1567c:	b510      	push	{r4, lr}
   1567e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   15680:	2400      	movs	r4, #0
   15682:	e9cd 4400 	strd	r4, r4, [sp]
   15686:	9b04      	ldr	r3, [sp, #16]
   15688:	f005 fa3e 	bl	1ab08 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1568c:	b002      	add	sp, #8
   1568e:	bd10      	pop	{r4, pc}

00015690 <lll_resume>:

void lll_resume(void *param)
{
   15690:	b510      	push	{r4, lr}
   15692:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   15694:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   15696:	691a      	ldr	r2, [r3, #16]
   15698:	6999      	ldr	r1, [r3, #24]
   1569a:	2401      	movs	r4, #1
{
   1569c:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1569e:	4020      	ands	r0, r4
   156a0:	e9cd 0400 	strd	r0, r4, [sp]
   156a4:	6958      	ldr	r0, [r3, #20]
   156a6:	f005 fa2f 	bl	1ab08 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   156aa:	b108      	cbz	r0, 156b0 <lll_resume+0x20>
   156ac:	3077      	adds	r0, #119	; 0x77
   156ae:	d101      	bne.n	156b4 <lll_resume+0x24>
}
   156b0:	b002      	add	sp, #8
   156b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   156b4:	4a06      	ldr	r2, [pc, #24]	; (156d0 <lll_resume+0x40>)
   156b6:	4907      	ldr	r1, [pc, #28]	; (156d4 <lll_resume+0x44>)
   156b8:	4807      	ldr	r0, [pc, #28]	; (156d8 <lll_resume+0x48>)
   156ba:	234f      	movs	r3, #79	; 0x4f
   156bc:	f00d f822 	bl	22704 <printk>
   156c0:	4040      	eors	r0, r0
   156c2:	f380 8811 	msr	BASEPRI, r0
   156c6:	f04f 0003 	mov.w	r0, #3
   156ca:	df02      	svc	2
}
   156cc:	b002      	add	sp, #8
   156ce:	bd10      	pop	{r4, pc}
   156d0:	000296b0 	.word	0x000296b0
   156d4:	000296f4 	.word	0x000296f4
   156d8:	00029220 	.word	0x00029220

000156dc <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   156dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   156e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   156e2:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   156e6:	4625      	mov	r5, r4
{
   156e8:	4680      	mov	r8, r0
	return ++hdr->ref;
   156ea:	f815 1b1c 	ldrb.w	r1, [r5], #28
   156ee:	3101      	adds	r1, #1
   156f0:	b2c9      	uxtb	r1, r1
   156f2:	4617      	mov	r7, r2
   156f4:	461e      	mov	r6, r3
   156f6:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   156f8:	b181      	cbz	r1, 1571c <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   156fa:	4c17      	ldr	r4, [pc, #92]	; (15758 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   156fc:	4b17      	ldr	r3, [pc, #92]	; (1575c <ticker_cb+0x80>)
	p.lazy = lazy;
   156fe:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15700:	2200      	movs	r2, #0
   15702:	4611      	mov	r1, r2
   15704:	2001      	movs	r0, #1
	p.remainder = remainder;
   15706:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   1570a:	60e5      	str	r5, [r4, #12]
	p.force = force;
   1570c:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   15710:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15712:	f7fb fd8d 	bl	11230 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   15716:	b978      	cbnz	r0, 15738 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   15718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   1571c:	4a10      	ldr	r2, [pc, #64]	; (15760 <ticker_cb+0x84>)
   1571e:	4911      	ldr	r1, [pc, #68]	; (15764 <ticker_cb+0x88>)
   15720:	4811      	ldr	r0, [pc, #68]	; (15768 <ticker_cb+0x8c>)
   15722:	f240 23db 	movw	r3, #731	; 0x2db
   15726:	f00c ffed 	bl	22704 <printk>
   1572a:	4040      	eors	r0, r0
   1572c:	f380 8811 	msr	BASEPRI, r0
   15730:	f04f 0003 	mov.w	r0, #3
   15734:	df02      	svc	2
   15736:	e7e0      	b.n	156fa <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   15738:	4a09      	ldr	r2, [pc, #36]	; (15760 <ticker_cb+0x84>)
   1573a:	490c      	ldr	r1, [pc, #48]	; (1576c <ticker_cb+0x90>)
   1573c:	480a      	ldr	r0, [pc, #40]	; (15768 <ticker_cb+0x8c>)
   1573e:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15742:	f00c ffdf 	bl	22704 <printk>
   15746:	4040      	eors	r0, r0
   15748:	f380 8811 	msr	BASEPRI, r0
   1574c:	f04f 0003 	mov.w	r0, #3
   15750:	df02      	svc	2
}
   15752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15756:	bf00      	nop
   15758:	20002a98 	.word	0x20002a98
   1575c:	2000059c 	.word	0x2000059c
   15760:	0002971c 	.word	0x0002971c
   15764:	0002975c 	.word	0x0002975c
   15768:	00029220 	.word	0x00029220
   1576c:	00029674 	.word	0x00029674

00015770 <ull_scan_init>:
}
   15770:	2000      	movs	r0, #0
   15772:	4770      	bx	lr

00015774 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   15774:	3002      	adds	r0, #2
{
   15776:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   15778:	f101 021c 	add.w	r2, r1, #28
   1577c:	b2c0      	uxtb	r0, r0
   1577e:	f7ff fc39 	bl	14ff4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   15782:	b110      	cbz	r0, 1578a <ull_scan_disable+0x16>
   15784:	3078      	adds	r0, #120	; 0x78
   15786:	d101      	bne.n	1578c <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15788:	200c      	movs	r0, #12
}
   1578a:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   1578c:	4a07      	ldr	r2, [pc, #28]	; (157ac <ull_scan_disable+0x38>)
   1578e:	4908      	ldr	r1, [pc, #32]	; (157b0 <ull_scan_disable+0x3c>)
   15790:	4808      	ldr	r0, [pc, #32]	; (157b4 <ull_scan_disable+0x40>)
   15792:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   15796:	f00c ffb5 	bl	22704 <printk>
   1579a:	4040      	eors	r0, r0
   1579c:	f380 8811 	msr	BASEPRI, r0
   157a0:	f04f 0003 	mov.w	r0, #3
   157a4:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   157a6:	200c      	movs	r0, #12
}
   157a8:	bd08      	pop	{r3, pc}
   157aa:	bf00      	nop
   157ac:	0002971c 	.word	0x0002971c
   157b0:	00029760 	.word	0x00029760
   157b4:	00029220 	.word	0x00029220

000157b8 <ll_scan_enable>:
{
   157b8:	b538      	push	{r3, r4, r5, lr}
	if (!enable) {
   157ba:	b378      	cbz	r0, 1581c <ll_scan_enable+0x64>
	if (!scan || scan->is_enabled) {
   157bc:	4c2a      	ldr	r4, [pc, #168]	; (15868 <ll_scan_enable+0xb0>)
   157be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   157c2:	07d9      	lsls	r1, r3, #31
   157c4:	d42f      	bmi.n	15826 <ll_scan_enable+0x6e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   157c6:	079a      	lsls	r2, r3, #30
   157c8:	f3c3 0541 	ubfx	r5, r3, #1, #2
   157cc:	d50b      	bpl.n	157e6 <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   157ce:	2001      	movs	r0, #1
   157d0:	f7fd f85a 	bl	12888 <ll_addr_get>
   157d4:	2106      	movs	r1, #6
   157d6:	f7fb fc9d 	bl	11114 <mem_nz>
   157da:	2800      	cmp	r0, #0
   157dc:	d042      	beq.n	15864 <ll_scan_enable+0xac>
		own_addr_type = scan->own_addr_type;
   157de:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   157e2:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   157e6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   157ea:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   157ee:	f004 f983 	bl	19af8 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   157f2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   157f6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   157fa:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   157fe:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   15800:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   15804:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   15806:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   1580a:	d502      	bpl.n	15812 <ll_scan_enable+0x5a>
   1580c:	3d02      	subs	r5, #2
   1580e:	2d01      	cmp	r5, #1
   15810:	d91e      	bls.n	15850 <ll_scan_enable+0x98>
}
   15812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   15816:	4814      	ldr	r0, [pc, #80]	; (15868 <ll_scan_enable+0xb0>)
   15818:	f7ec b896 	b.w	1948 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   1581c:	4d12      	ldr	r5, [pc, #72]	; (15868 <ll_scan_enable+0xb0>)
   1581e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   15822:	07dc      	lsls	r4, r3, #31
   15824:	d402      	bmi.n	1582c <ll_scan_enable+0x74>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   15826:	240c      	movs	r4, #12
}
   15828:	4620      	mov	r0, r4
   1582a:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   1582c:	6a2b      	ldr	r3, [r5, #32]
   1582e:	2b00      	cmp	r3, #0
   15830:	d1f9      	bne.n	15826 <ll_scan_enable+0x6e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   15832:	4629      	mov	r1, r5
   15834:	f7ff ff9e 	bl	15774 <ull_scan_disable>
	if (ret) {
   15838:	4604      	mov	r4, r0
   1583a:	2800      	cmp	r0, #0
   1583c:	d1f4      	bne.n	15828 <ll_scan_enable+0x70>
		return ret;
	}

	scan->is_enabled = 0U;
   1583e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   15842:	f360 0300 	bfi	r3, r0, #0, #1
   15846:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   1584a:	f004 f937 	bl	19abc <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
   1584e:	e7eb      	b.n	15828 <ll_scan_enable+0x70>
		ull_filter_rpa_update(false);
   15850:	2000      	movs	r0, #0
   15852:	f004 f96b 	bl	19b2c <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   15856:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1585a:	f043 0302 	orr.w	r3, r3, #2
   1585e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   15862:	e7d6      	b.n	15812 <ll_scan_enable+0x5a>
			return BT_HCI_ERR_INVALID_PARAM;
   15864:	2412      	movs	r4, #18
   15866:	e7df      	b.n	15828 <ll_scan_enable+0x70>
   15868:	20002a50 	.word	0x20002a50

0001586c <ull_scan_reset>:
{
   1586c:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   1586e:	4c0c      	ldr	r4, [pc, #48]	; (158a0 <ull_scan_reset+0x34>)
   15870:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   15874:	07db      	lsls	r3, r3, #31
   15876:	d501      	bpl.n	1587c <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   15878:	6a20      	ldr	r0, [r4, #32]
   1587a:	b108      	cbz	r0, 15880 <ull_scan_reset+0x14>
}
   1587c:	2000      	movs	r0, #0
   1587e:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   15880:	4621      	mov	r1, r4
   15882:	f7ff ff77 	bl	15774 <ull_scan_disable>
	if (ret) {
   15886:	2800      	cmp	r0, #0
   15888:	d1f8      	bne.n	1587c <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   1588a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1588e:	f360 0200 	bfi	r2, r0, #0, #1
   15892:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(0);
   15896:	f004 f911 	bl	19abc <ull_filter_adv_scan_state_cb>
}
   1589a:	2000      	movs	r0, #0
   1589c:	bd10      	pop	{r4, pc}
   1589e:	bf00      	nop
   158a0:	20002a50 	.word	0x20002a50

000158a4 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   158a4:	4a03      	ldr	r2, [pc, #12]	; (158b4 <ull_scan_handle_get+0x10>)
   158a6:	4b04      	ldr	r3, [pc, #16]	; (158b8 <ull_scan_handle_get+0x14>)
   158a8:	1a80      	subs	r0, r0, r2
   158aa:	fba3 3000 	umull	r3, r0, r3, r0
}
   158ae:	f3c0 1007 	ubfx	r0, r0, #4, #8
   158b2:	4770      	bx	lr
   158b4:	20002a50 	.word	0x20002a50
   158b8:	38e38e39 	.word	0x38e38e39

000158bc <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   158bc:	4a04      	ldr	r2, [pc, #16]	; (158d0 <ull_scan_lll_handle_get+0x14>)
   158be:	6800      	ldr	r0, [r0, #0]
   158c0:	4b04      	ldr	r3, [pc, #16]	; (158d4 <ull_scan_lll_handle_get+0x18>)
   158c2:	1a80      	subs	r0, r0, r2
   158c4:	fba3 3000 	umull	r3, r0, r3, r0
}
   158c8:	f3c0 1007 	ubfx	r0, r0, #4, #8
   158cc:	4770      	bx	lr
   158ce:	bf00      	nop
   158d0:	20002a50 	.word	0x20002a50
   158d4:	38e38e39 	.word	0x38e38e39

000158d8 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   158d8:	b938      	cbnz	r0, 158ea <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   158da:	4805      	ldr	r0, [pc, #20]	; (158f0 <ull_scan_is_enabled_get+0x18>)
   158dc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   158e0:	f013 0f01 	tst.w	r3, #1
   158e4:	bf08      	it	eq
   158e6:	2000      	moveq	r0, #0
   158e8:	4770      	bx	lr
		return NULL;
   158ea:	2000      	movs	r0, #0
}
   158ec:	4770      	bx	lr
   158ee:	bf00      	nop
   158f0:	20002a50 	.word	0x20002a50

000158f4 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   158f4:	4a04      	ldr	r2, [pc, #16]	; (15908 <ull_scan_is_disabled_get+0x14>)
   158f6:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   158fa:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   158fe:	4303      	orrs	r3, r0
}
   15900:	bf0c      	ite	eq
   15902:	4610      	moveq	r0, r2
   15904:	2000      	movne	r0, #0
   15906:	4770      	bx	lr
   15908:	20002a50 	.word	0x20002a50

0001590c <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1590c:	b990      	cbnz	r0, 15934 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   1590e:	4a0a      	ldr	r2, [pc, #40]	; (15938 <ull_scan_is_enabled+0x2c>)
   15910:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   15914:	f013 0001 	ands.w	r0, r3, #1
   15918:	d00d      	beq.n	15936 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1591a:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   1591e:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   15920:	f003 0301 	and.w	r3, r3, #1
   15924:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15928:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   1592c:	b11a      	cbz	r2, 15936 <ull_scan_is_enabled+0x2a>
   1592e:	f040 0004 	orr.w	r0, r0, #4
   15932:	4770      	bx	lr
		return 0U;
   15934:	2000      	movs	r0, #0
}
   15936:	4770      	bx	lr
   15938:	20002a50 	.word	0x20002a50

0001593c <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1593c:	b950      	cbnz	r0, 15954 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   1593e:	4b06      	ldr	r3, [pc, #24]	; (15958 <ull_scan_filter_pol_get+0x1c>)
   15940:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   15944:	f010 0001 	ands.w	r0, r0, #1
   15948:	d005      	beq.n	15956 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   1594a:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   1594e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15952:	4770      	bx	lr
		return 0;
   15954:	2000      	movs	r0, #0
}
   15956:	4770      	bx	lr
   15958:	20002a50 	.word	0x20002a50

0001595c <init_reset>:
{
   1595c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1595e:	4b15      	ldr	r3, [pc, #84]	; (159b4 <init_reset+0x58>)
   15960:	4815      	ldr	r0, [pc, #84]	; (159b8 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   15962:	4c16      	ldr	r4, [pc, #88]	; (159bc <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   15964:	2201      	movs	r2, #1
   15966:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1596a:	f7fb fb59 	bl	11020 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   1596e:	4b14      	ldr	r3, [pc, #80]	; (159c0 <init_reset+0x64>)
   15970:	2203      	movs	r2, #3
   15972:	1d18      	adds	r0, r3, #4
   15974:	2124      	movs	r1, #36	; 0x24
   15976:	f7fb fb53 	bl	11020 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1597a:	4b12      	ldr	r3, [pc, #72]	; (159c4 <init_reset+0x68>)
   1597c:	2204      	movs	r2, #4
   1597e:	1898      	adds	r0, r3, r2
   15980:	212c      	movs	r1, #44	; 0x2c
   15982:	f7fb fb4d 	bl	11020 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   15986:	4b10      	ldr	r3, [pc, #64]	; (159c8 <init_reset+0x6c>)
   15988:	2207      	movs	r2, #7
   1598a:	1d18      	adds	r0, r3, #4
   1598c:	2108      	movs	r1, #8
   1598e:	f7fb fb47 	bl	11020 <mem_init>
	default_phy_tx |= PHY_2M;
   15992:	490e      	ldr	r1, [pc, #56]	; (159cc <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   15994:	4a0e      	ldr	r2, [pc, #56]	; (159d0 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15996:	480f      	ldr	r0, [pc, #60]	; (159d4 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   15998:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1599a:	f04f 0c1b 	mov.w	ip, #27
   1599e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   159a2:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   159a4:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   159a8:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   159aa:	f8a0 c000 	strh.w	ip, [r0]
}
   159ae:	2000      	movs	r0, #0
   159b0:	bd10      	pop	{r4, pc}
   159b2:	bf00      	nop
   159b4:	20002aa8 	.word	0x20002aa8
   159b8:	200019a0 	.word	0x200019a0
   159bc:	20003dda 	.word	0x20003dda
   159c0:	20002ad0 	.word	0x20002ad0
   159c4:	20002b40 	.word	0x20002b40
   159c8:	20002bf4 	.word	0x20002bf4
   159cc:	20003f3e 	.word	0x20003f3e
   159d0:	20003f3d 	.word	0x20003f3d
   159d4:	20003ddc 	.word	0x20003ddc

000159d8 <ctrl_tx_pause_enqueue>:
{
   159d8:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   159da:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
{
   159de:	4604      	mov	r4, r0
   159e0:	460d      	mov	r5, r1
	if (
   159e2:	b11b      	cbz	r3, 159ec <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   159e4:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
	    conn->tx_head &&
   159e8:	0788      	lsls	r0, r1, #30
   159ea:	d50e      	bpl.n	15a0a <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   159ec:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   159f0:	b351      	cbz	r1, 15a48 <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
   159f2:	2a00      	cmp	r2, #0
   159f4:	d132      	bne.n	15a5c <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
   159f6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   159fa:	681a      	ldr	r2, [r3, #0]
   159fc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   159fe:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15a00:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   15a02:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
   15a06:	b1e3      	cbz	r3, 15a42 <ctrl_tx_pause_enqueue+0x6a>
}
   15a08:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   15a0a:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
   15a0e:	07c9      	lsls	r1, r1, #31
   15a10:	d4ec      	bmi.n	159ec <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   15a12:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   15a16:	428b      	cmp	r3, r1
   15a18:	d02e      	beq.n	15a78 <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
   15a1a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   15a1e:	2900      	cmp	r1, #0
   15a20:	d038      	beq.n	15a94 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
   15a22:	2a00      	cmp	r2, #0
   15a24:	d0e7      	beq.n	159f6 <ctrl_tx_pause_enqueue+0x1e>
   15a26:	4a23      	ldr	r2, [pc, #140]	; (15ab4 <ctrl_tx_pause_enqueue+0xdc>)
   15a28:	4923      	ldr	r1, [pc, #140]	; (15ab8 <ctrl_tx_pause_enqueue+0xe0>)
   15a2a:	4824      	ldr	r0, [pc, #144]	; (15abc <ctrl_tx_pause_enqueue+0xe4>)
   15a2c:	f640 236e 	movw	r3, #2670	; 0xa6e
   15a30:	f00c fe68 	bl	22704 <printk>
   15a34:	4040      	eors	r0, r0
   15a36:	f380 8811 	msr	BASEPRI, r0
   15a3a:	f04f 0003 	mov.w	r0, #3
   15a3e:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   15a40:	e7d9      	b.n	159f6 <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
   15a42:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
   15a46:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   15a48:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   15a4a:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
   15a4e:	2a00      	cmp	r2, #0
   15a50:	d1d9      	bne.n	15a06 <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
   15a52:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
   15a56:	2b00      	cmp	r3, #0
   15a58:	d1d6      	bne.n	15a08 <ctrl_tx_pause_enqueue+0x30>
   15a5a:	e7f2      	b.n	15a42 <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
   15a5c:	4a15      	ldr	r2, [pc, #84]	; (15ab4 <ctrl_tx_pause_enqueue+0xdc>)
   15a5e:	4916      	ldr	r1, [pc, #88]	; (15ab8 <ctrl_tx_pause_enqueue+0xe0>)
   15a60:	4816      	ldr	r0, [pc, #88]	; (15abc <ctrl_tx_pause_enqueue+0xe4>)
   15a62:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   15a66:	f00c fe4d 	bl	22704 <printk>
   15a6a:	4040      	eors	r0, r0
   15a6c:	f380 8811 	msr	BASEPRI, r0
   15a70:	f04f 0003 	mov.w	r0, #3
   15a74:	df02      	svc	2
   15a76:	e7be      	b.n	159f6 <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
   15a78:	6819      	ldr	r1, [r3, #0]
   15a7a:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   15a7e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   15a82:	2900      	cmp	r1, #0
   15a84:	d1cd      	bne.n	15a22 <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
   15a86:	6819      	ldr	r1, [r3, #0]
   15a88:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   15a8a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15a8c:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   15a8e:	2a00      	cmp	r2, #0
   15a90:	d0df      	beq.n	15a52 <ctrl_tx_pause_enqueue+0x7a>
   15a92:	e7b8      	b.n	15a06 <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15a94:	7919      	ldrb	r1, [r3, #4]
   15a96:	f001 0103 	and.w	r1, r1, #3
   15a9a:	2903      	cmp	r1, #3
   15a9c:	d004      	beq.n	15aa8 <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15a9e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
   15aa2:	2a00      	cmp	r2, #0
   15aa4:	d0a7      	beq.n	159f6 <ctrl_tx_pause_enqueue+0x1e>
   15aa6:	e7be      	b.n	15a26 <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
   15aa8:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15aaa:	2903      	cmp	r1, #3
   15aac:	d0eb      	beq.n	15a86 <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15aae:	290a      	cmp	r1, #10
   15ab0:	d1f5      	bne.n	15a9e <ctrl_tx_pause_enqueue+0xc6>
   15ab2:	e7e8      	b.n	15a86 <ctrl_tx_pause_enqueue+0xae>
   15ab4:	0002978c 	.word	0x0002978c
   15ab8:	000297cc 	.word	0x000297cc
   15abc:	00029220 	.word	0x00029220

00015ac0 <tx_lll_flush>:
{
   15ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   15ac4:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15ac8:	4934      	ldr	r1, [pc, #208]	; (15b9c <tx_lll_flush+0xdc>)
{
   15aca:	b083      	sub	sp, #12
   15acc:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15ace:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   15ad2:	4640      	mov	r0, r8
   15ad4:	f7fb fb0a 	bl	110ec <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15ad8:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
   15adc:	4629      	mov	r1, r5
   15ade:	f005 fdb7 	bl	1b650 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15ae2:	6b28      	ldr	r0, [r5, #48]	; 0x30
   15ae4:	aa01      	add	r2, sp, #4
   15ae6:	4631      	mov	r1, r6
   15ae8:	f7fb fb40 	bl	1116c <memq_dequeue>
	while (link) {
   15aec:	b328      	cbz	r0, 15b3a <tx_lll_flush+0x7a>
   15aee:	4c2c      	ldr	r4, [pc, #176]	; (15ba0 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   15af0:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15af4:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   15af8:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   15afa:	f894 c001 	ldrb.w	ip, [r4, #1]
   15afe:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   15b00:	1c53      	adds	r3, r2, #1
   15b02:	b2db      	uxtb	r3, r3
		last = 0U;
   15b04:	459c      	cmp	ip, r3
   15b06:	bf08      	it	eq
   15b08:	2300      	moveq	r3, #0
	if (last == first) {
   15b0a:	4299      	cmp	r1, r3
   15b0c:	f894 c000 	ldrb.w	ip, [r4]
   15b10:	d033      	beq.n	15b7a <tx_lll_flush+0xba>
		lll_tx->node = tx;
   15b12:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15b14:	fb12 f20c 	smulbb	r2, r2, ip
   15b18:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   15b1c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   15b20:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   15b22:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   15b26:	6002      	str	r2, [r0, #0]
		tx->next = link;
   15b28:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15b2a:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
   15b2c:	70e3      	strb	r3, [r4, #3]
   15b2e:	aa01      	add	r2, sp, #4
   15b30:	4631      	mov	r1, r6
   15b32:	f7fb fb1b 	bl	1116c <memq_dequeue>
	while (link) {
   15b36:	2800      	cmp	r0, #0
   15b38:	d1de      	bne.n	15af8 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   15b3a:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
   15b3e:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
   15b42:	b150      	cbz	r0, 15b5a <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   15b44:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   15b46:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   15b48:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
   15b4c:	f7ff facc 	bl	150e8 <ull_rx_put>
	ull_rx_sched();
   15b50:	f7ff fada 	bl	15108 <ull_rx_sched>
}
   15b54:	b003      	add	sp, #12
   15b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   15b5a:	4a12      	ldr	r2, [pc, #72]	; (15ba4 <tx_lll_flush+0xe4>)
   15b5c:	4912      	ldr	r1, [pc, #72]	; (15ba8 <tx_lll_flush+0xe8>)
   15b5e:	4813      	ldr	r0, [pc, #76]	; (15bac <tx_lll_flush+0xec>)
   15b60:	f640 13da 	movw	r3, #2522	; 0x9da
   15b64:	f00c fdce 	bl	22704 <printk>
   15b68:	4040      	eors	r0, r0
   15b6a:	f380 8811 	msr	BASEPRI, r0
   15b6e:	f04f 0003 	mov.w	r0, #3
   15b72:	df02      	svc	2
	link = rx->hdr.link;
   15b74:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
   15b78:	e7e4      	b.n	15b44 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   15b7a:	4a0a      	ldr	r2, [pc, #40]	; (15ba4 <tx_lll_flush+0xe4>)
   15b7c:	490c      	ldr	r1, [pc, #48]	; (15bb0 <tx_lll_flush+0xf0>)
   15b7e:	480b      	ldr	r0, [pc, #44]	; (15bac <tx_lll_flush+0xec>)
   15b80:	f640 13c6 	movw	r3, #2502	; 0x9c6
   15b84:	f00c fdbe 	bl	22704 <printk>
   15b88:	4040      	eors	r0, r0
   15b8a:	f380 8811 	msr	BASEPRI, r0
   15b8e:	f04f 0003 	mov.w	r0, #3
   15b92:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   15b94:	2300      	movs	r3, #0
   15b96:	801b      	strh	r3, [r3, #0]
   15b98:	deff      	udf	#255	; 0xff
   15b9a:	bf00      	nop
   15b9c:	200019a0 	.word	0x200019a0
   15ba0:	200005ac 	.word	0x200005ac
   15ba4:	0002978c 	.word	0x0002978c
   15ba8:	000297dc 	.word	0x000297dc
   15bac:	00029220 	.word	0x00029220
   15bb0:	000297d4 	.word	0x000297d4

00015bb4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   15bb4:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
   15bb8:	f012 0202 	ands.w	r2, r2, #2
   15bbc:	d00a      	beq.n	15bd4 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   15bbe:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
   15bc2:	b1d3      	cbz	r3, 15bfa <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   15bc4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
   15bc8:	681a      	ldr	r2, [r3, #0]
   15bca:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   15bcc:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   15bce:	680b      	ldr	r3, [r1, #0]
   15bd0:	b1d3      	cbz	r3, 15c08 <ctrl_tx_sec_enqueue+0x54>
   15bd2:	4770      	bx	lr
		if (conn->tx_head) {
   15bd4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   15bd8:	b1cb      	cbz	r3, 15c0e <ctrl_tx_sec_enqueue+0x5a>
{
   15bda:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   15bdc:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
   15be0:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
   15be4:	45e6      	cmp	lr, ip
   15be6:	d004      	beq.n	15bf2 <ctrl_tx_sec_enqueue+0x3e>
   15be8:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
   15bec:	f1bc 0f03 	cmp.w	ip, #3
   15bf0:	d010      	beq.n	15c14 <ctrl_tx_sec_enqueue+0x60>
}
   15bf2:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   15bf6:	f7ff beef 	b.w	159d8 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   15bfa:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   15bfe:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   15c00:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
   15c04:	2b00      	cmp	r3, #0
   15c06:	d1e4      	bne.n	15bd2 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   15c08:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
   15c0c:	4770      	bx	lr
	bool pause = false;
   15c0e:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   15c10:	f7ff bee2 	b.w	159d8 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15c14:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   15c18:	f00c 0c03 	and.w	ip, ip, #3
   15c1c:	f1bc 0f03 	cmp.w	ip, #3
   15c20:	d1e7      	bne.n	15bf2 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   15c22:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15c24:	2a03      	cmp	r2, #3
   15c26:	d005      	beq.n	15c34 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15c28:	f1a2 020a 	sub.w	r2, r2, #10
   15c2c:	fab2 f282 	clz	r2, r2
   15c30:	0952      	lsrs	r2, r2, #5
   15c32:	e7de      	b.n	15bf2 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   15c34:	2201      	movs	r2, #1
   15c36:	e7dc      	b.n	15bf2 <ctrl_tx_sec_enqueue+0x3e>

00015c38 <ticker_stop_op_cb>:
{
   15c38:	b510      	push	{r4, lr}
   15c3a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15c3c:	b9b0      	cbnz	r0, 15c6c <ticker_stop_op_cb+0x34>
	mfy.param = param;
   15c3e:	4b12      	ldr	r3, [pc, #72]	; (15c88 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   15c40:	2200      	movs	r2, #0
   15c42:	2101      	movs	r1, #1
   15c44:	2002      	movs	r0, #2
	mfy.param = param;
   15c46:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   15c48:	f7fb faf2 	bl	11230 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15c4c:	b900      	cbnz	r0, 15c50 <ticker_stop_op_cb+0x18>
}
   15c4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   15c50:	4a0e      	ldr	r2, [pc, #56]	; (15c8c <ticker_stop_op_cb+0x54>)
   15c52:	490f      	ldr	r1, [pc, #60]	; (15c90 <ticker_stop_op_cb+0x58>)
   15c54:	480f      	ldr	r0, [pc, #60]	; (15c94 <ticker_stop_op_cb+0x5c>)
   15c56:	f44f 6318 	mov.w	r3, #2432	; 0x980
   15c5a:	f00c fd53 	bl	22704 <printk>
   15c5e:	4040      	eors	r0, r0
   15c60:	f380 8811 	msr	BASEPRI, r0
   15c64:	f04f 0003 	mov.w	r0, #3
   15c68:	df02      	svc	2
}
   15c6a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15c6c:	4a07      	ldr	r2, [pc, #28]	; (15c8c <ticker_stop_op_cb+0x54>)
   15c6e:	490a      	ldr	r1, [pc, #40]	; (15c98 <ticker_stop_op_cb+0x60>)
   15c70:	4808      	ldr	r0, [pc, #32]	; (15c94 <ticker_stop_op_cb+0x5c>)
   15c72:	f640 137a 	movw	r3, #2426	; 0x97a
   15c76:	f00c fd45 	bl	22704 <printk>
   15c7a:	4040      	eors	r0, r0
   15c7c:	f380 8811 	msr	BASEPRI, r0
   15c80:	f04f 0003 	mov.w	r0, #3
   15c84:	df02      	svc	2
   15c86:	e7da      	b.n	15c3e <ticker_stop_op_cb+0x6>
   15c88:	20000644 	.word	0x20000644
   15c8c:	0002978c 	.word	0x0002978c
   15c90:	00029674 	.word	0x00029674
   15c94:	00029220 	.word	0x00029220
   15c98:	000297ec 	.word	0x000297ec

00015c9c <disabled_cb>:
{
   15c9c:	b508      	push	{r3, lr}
	mfy.param = param;
   15c9e:	4b0b      	ldr	r3, [pc, #44]	; (15ccc <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15ca0:	2200      	movs	r2, #0
	mfy.param = param;
   15ca2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15ca4:	4611      	mov	r1, r2
   15ca6:	2001      	movs	r0, #1
   15ca8:	f7fb fac2 	bl	11230 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15cac:	b900      	cbnz	r0, 15cb0 <disabled_cb+0x14>
}
   15cae:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   15cb0:	4a07      	ldr	r2, [pc, #28]	; (15cd0 <disabled_cb+0x34>)
   15cb2:	4908      	ldr	r1, [pc, #32]	; (15cd4 <disabled_cb+0x38>)
   15cb4:	4808      	ldr	r0, [pc, #32]	; (15cd8 <disabled_cb+0x3c>)
   15cb6:	f640 13ac 	movw	r3, #2476	; 0x9ac
   15cba:	f00c fd23 	bl	22704 <printk>
   15cbe:	4040      	eors	r0, r0
   15cc0:	f380 8811 	msr	BASEPRI, r0
   15cc4:	f04f 0003 	mov.w	r0, #3
   15cc8:	df02      	svc	2
}
   15cca:	bd08      	pop	{r3, pc}
   15ccc:	20000614 	.word	0x20000614
   15cd0:	0002978c 	.word	0x0002978c
   15cd4:	00029674 	.word	0x00029674
   15cd8:	00029220 	.word	0x00029220

00015cdc <conn_disable>:
{
   15cdc:	b538      	push	{r3, r4, r5, lr}
	return hdr->ref;
   15cde:	7803      	ldrb	r3, [r0, #0]
   15ce0:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
   15ce2:	2b00      	cmp	r3, #0
   15ce4:	d02c      	beq.n	15d40 <conn_disable+0x64>
		mfy.param = &conn->lll;
   15ce6:	4d19      	ldr	r5, [pc, #100]	; (15d4c <conn_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   15ce8:	6943      	ldr	r3, [r0, #20]
		mfy.param = &conn->lll;
   15cea:	f100 011c 	add.w	r1, r0, #28
   15cee:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   15cf0:	b16b      	cbz	r3, 15d0e <conn_disable+0x32>
   15cf2:	4a17      	ldr	r2, [pc, #92]	; (15d50 <conn_disable+0x74>)
   15cf4:	4917      	ldr	r1, [pc, #92]	; (15d54 <conn_disable+0x78>)
   15cf6:	4818      	ldr	r0, [pc, #96]	; (15d58 <conn_disable+0x7c>)
   15cf8:	f640 1395 	movw	r3, #2453	; 0x995
   15cfc:	f00c fd02 	bl	22704 <printk>
   15d00:	4040      	eors	r0, r0
   15d02:	f380 8811 	msr	BASEPRI, r0
   15d06:	f04f 0003 	mov.w	r0, #3
   15d0a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   15d0c:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   15d0e:	4813      	ldr	r0, [pc, #76]	; (15d5c <conn_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15d10:	4b0e      	ldr	r3, [pc, #56]	; (15d4c <conn_disable+0x70>)
   15d12:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   15d14:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15d18:	4611      	mov	r1, r2
   15d1a:	2001      	movs	r0, #1
   15d1c:	f7fb fa88 	bl	11230 <mayfly_enqueue>
		LL_ASSERT(!ret);
   15d20:	b900      	cbnz	r0, 15d24 <conn_disable+0x48>
}
   15d22:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   15d24:	4a0a      	ldr	r2, [pc, #40]	; (15d50 <conn_disable+0x74>)
   15d26:	490e      	ldr	r1, [pc, #56]	; (15d60 <conn_disable+0x84>)
   15d28:	480b      	ldr	r0, [pc, #44]	; (15d58 <conn_disable+0x7c>)
   15d2a:	f640 139c 	movw	r3, #2460	; 0x99c
   15d2e:	f00c fce9 	bl	22704 <printk>
   15d32:	4040      	eors	r0, r0
   15d34:	f380 8811 	msr	BASEPRI, r0
   15d38:	f04f 0003 	mov.w	r0, #3
   15d3c:	df02      	svc	2
}
   15d3e:	bd38      	pop	{r3, r4, r5, pc}
   15d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   15d44:	301c      	adds	r0, #28
   15d46:	f7ff bfa9 	b.w	15c9c <disabled_cb>
   15d4a:	bf00      	nop
   15d4c:	20000634 	.word	0x20000634
   15d50:	0002978c 	.word	0x0002978c
   15d54:	000297f8 	.word	0x000297f8
   15d58:	00029220 	.word	0x00029220
   15d5c:	00015c9d 	.word	0x00015c9d
   15d60:	00029674 	.word	0x00029674

00015d64 <conn_setup_adv_scan_disabled_cb>:
{
   15d64:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   15d66:	6883      	ldr	r3, [r0, #8]
   15d68:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   15d6a:	7f53      	ldrb	r3, [r2, #29]
   15d6c:	09db      	lsrs	r3, r3, #7
   15d6e:	d105      	bne.n	15d7c <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
   15d70:	4601      	mov	r1, r0
}
   15d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
   15d76:	3108      	adds	r1, #8
   15d78:	f7ed be2e 	b.w	39d8 <ull_central_setup>
		LL_ASSERT(0);
   15d7c:	4a06      	ldr	r2, [pc, #24]	; (15d98 <conn_setup_adv_scan_disabled_cb+0x34>)
   15d7e:	4907      	ldr	r1, [pc, #28]	; (15d9c <conn_setup_adv_scan_disabled_cb+0x38>)
   15d80:	4807      	ldr	r0, [pc, #28]	; (15da0 <conn_setup_adv_scan_disabled_cb+0x3c>)
   15d82:	f640 03d5 	movw	r3, #2261	; 0x8d5
   15d86:	f00c fcbd 	bl	22704 <printk>
   15d8a:	4040      	eors	r0, r0
   15d8c:	f380 8811 	msr	BASEPRI, r0
   15d90:	f04f 0003 	mov.w	r0, #3
   15d94:	df02      	svc	2
}
   15d96:	bd08      	pop	{r3, pc}
   15d98:	0002978c 	.word	0x0002978c
   15d9c:	000292b8 	.word	0x000292b8
   15da0:	00029220 	.word	0x00029220

00015da4 <ticker_start_conn_op_cb>:
{
   15da4:	b510      	push	{r4, lr}
   15da6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15da8:	b990      	cbnz	r0, 15dd0 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   15daa:	4620      	mov	r0, r4
   15dac:	f7ff f8d2 	bl	14f54 <ull_update_unmark>
	LL_ASSERT(p == param);
   15db0:	4284      	cmp	r4, r0
   15db2:	d00c      	beq.n	15dce <ticker_start_conn_op_cb+0x2a>
   15db4:	4a0d      	ldr	r2, [pc, #52]	; (15dec <ticker_start_conn_op_cb+0x48>)
   15db6:	490e      	ldr	r1, [pc, #56]	; (15df0 <ticker_start_conn_op_cb+0x4c>)
   15db8:	480e      	ldr	r0, [pc, #56]	; (15df4 <ticker_start_conn_op_cb+0x50>)
   15dba:	f640 03b7 	movw	r3, #2231	; 0x8b7
   15dbe:	f00c fca1 	bl	22704 <printk>
   15dc2:	4040      	eors	r0, r0
   15dc4:	f380 8811 	msr	BASEPRI, r0
   15dc8:	f04f 0003 	mov.w	r0, #3
   15dcc:	df02      	svc	2
}
   15dce:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15dd0:	4a06      	ldr	r2, [pc, #24]	; (15dec <ticker_start_conn_op_cb+0x48>)
   15dd2:	4909      	ldr	r1, [pc, #36]	; (15df8 <ticker_start_conn_op_cb+0x54>)
   15dd4:	4807      	ldr	r0, [pc, #28]	; (15df4 <ticker_start_conn_op_cb+0x50>)
   15dd6:	f640 03b4 	movw	r3, #2228	; 0x8b4
   15dda:	f00c fc93 	bl	22704 <printk>
   15dde:	4040      	eors	r0, r0
   15de0:	f380 8811 	msr	BASEPRI, r0
   15de4:	f04f 0003 	mov.w	r0, #3
   15de8:	df02      	svc	2
   15dea:	e7de      	b.n	15daa <ticker_start_conn_op_cb+0x6>
   15dec:	0002978c 	.word	0x0002978c
   15df0:	0002980c 	.word	0x0002980c
   15df4:	00029220 	.word	0x00029220
   15df8:	000297ec 	.word	0x000297ec

00015dfc <ticker_stop_conn_op_cb>:
{
   15dfc:	b510      	push	{r4, lr}
   15dfe:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15e00:	b990      	cbnz	r0, 15e28 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   15e02:	4620      	mov	r0, r4
   15e04:	f7ff f89c 	bl	14f40 <ull_update_mark>
	LL_ASSERT(p == param);
   15e08:	4284      	cmp	r4, r0
   15e0a:	d00c      	beq.n	15e26 <ticker_stop_conn_op_cb+0x2a>
   15e0c:	4a0d      	ldr	r2, [pc, #52]	; (15e44 <ticker_stop_conn_op_cb+0x48>)
   15e0e:	490e      	ldr	r1, [pc, #56]	; (15e48 <ticker_stop_conn_op_cb+0x4c>)
   15e10:	480e      	ldr	r0, [pc, #56]	; (15e4c <ticker_stop_conn_op_cb+0x50>)
   15e12:	f640 03ad 	movw	r3, #2221	; 0x8ad
   15e16:	f00c fc75 	bl	22704 <printk>
   15e1a:	4040      	eors	r0, r0
   15e1c:	f380 8811 	msr	BASEPRI, r0
   15e20:	f04f 0003 	mov.w	r0, #3
   15e24:	df02      	svc	2
}
   15e26:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15e28:	4a06      	ldr	r2, [pc, #24]	; (15e44 <ticker_stop_conn_op_cb+0x48>)
   15e2a:	4909      	ldr	r1, [pc, #36]	; (15e50 <ticker_stop_conn_op_cb+0x54>)
   15e2c:	4807      	ldr	r0, [pc, #28]	; (15e4c <ticker_stop_conn_op_cb+0x50>)
   15e2e:	f640 03aa 	movw	r3, #2218	; 0x8aa
   15e32:	f00c fc67 	bl	22704 <printk>
   15e36:	4040      	eors	r0, r0
   15e38:	f380 8811 	msr	BASEPRI, r0
   15e3c:	f04f 0003 	mov.w	r0, #3
   15e40:	df02      	svc	2
   15e42:	e7de      	b.n	15e02 <ticker_stop_conn_op_cb+0x6>
   15e44:	0002978c 	.word	0x0002978c
   15e48:	0002980c 	.word	0x0002980c
   15e4c:	00029220 	.word	0x00029220
   15e50:	000297ec 	.word	0x000297ec

00015e54 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15e54:	b900      	cbnz	r0, 15e58 <ticker_update_conn_op_cb+0x4>
   15e56:	4770      	bx	lr
{
   15e58:	b510      	push	{r4, lr}
   15e5a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15e5c:	f7ff f886 	bl	14f6c <ull_update_mark_get>
   15e60:	4284      	cmp	r4, r0
   15e62:	d010      	beq.n	15e86 <ticker_update_conn_op_cb+0x32>
   15e64:	f7ff f866 	bl	14f34 <ull_disable_mark_get>
   15e68:	4284      	cmp	r4, r0
   15e6a:	d00c      	beq.n	15e86 <ticker_update_conn_op_cb+0x32>
   15e6c:	4a06      	ldr	r2, [pc, #24]	; (15e88 <ticker_update_conn_op_cb+0x34>)
   15e6e:	4907      	ldr	r1, [pc, #28]	; (15e8c <ticker_update_conn_op_cb+0x38>)
   15e70:	4807      	ldr	r0, [pc, #28]	; (15e90 <ticker_update_conn_op_cb+0x3c>)
   15e72:	f640 03a1 	movw	r3, #2209	; 0x8a1
   15e76:	f00c fc45 	bl	22704 <printk>
   15e7a:	4040      	eors	r0, r0
   15e7c:	f380 8811 	msr	BASEPRI, r0
   15e80:	f04f 0003 	mov.w	r0, #3
   15e84:	df02      	svc	2
}
   15e86:	bd10      	pop	{r4, pc}
   15e88:	0002978c 	.word	0x0002978c
   15e8c:	00029818 	.word	0x00029818
   15e90:	00029220 	.word	0x00029220

00015e94 <tx_ull_dequeue>:
{
   15e94:	4603      	mov	r3, r0
   15e96:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15e98:	f8d0 41a0 	ldr.w	r4, [r0, #416]	; 0x1a0
   15e9c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
{
   15ea0:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15ea2:	b164      	cbz	r4, 15ebe <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   15ea4:	4294      	cmp	r4, r2
   15ea6:	d021      	beq.n	15eec <tx_ull_dequeue+0x58>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15ea8:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
   15eac:	428a      	cmp	r2, r1
   15eae:	d00b      	beq.n	15ec8 <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
   15eb0:	6811      	ldr	r1, [r2, #0]
   15eb2:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
   15eb6:	2200      	movs	r2, #0
}
   15eb8:	bc10      	pop	{r4}
		tx->next = NULL;
   15eba:	6002      	str	r2, [r0, #0]
}
   15ebc:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15ebe:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
   15ec2:	428a      	cmp	r2, r1
   15ec4:	d104      	bne.n	15ed0 <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
   15ec6:	b18a      	cbz	r2, 15eec <tx_ull_dequeue+0x58>
			conn->tx_data = conn->tx_data->next;
   15ec8:	6809      	ldr	r1, [r1, #0]
   15eca:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
   15ece:	e7ef      	b.n	15eb0 <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15ed0:	7911      	ldrb	r1, [r2, #4]
   15ed2:	f001 0103 	and.w	r1, r1, #3
   15ed6:	2903      	cmp	r1, #3
   15ed8:	d013      	beq.n	15f02 <tx_ull_dequeue+0x6e>
		conn->tx_head = conn->tx_head->next;
   15eda:	6812      	ldr	r2, [r2, #0]
   15edc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
   15ee0:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   15ee2:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
   15ee6:	bc10      	pop	{r4}
		tx->next = tx;
   15ee8:	6000      	str	r0, [r0, #0]
}
   15eea:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15eec:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
   15ef0:	6812      	ldr	r2, [r2, #0]
   15ef2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15ef6:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   15ef8:	bf18      	it	ne
   15efa:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15efe:	d1f2      	bne.n	15ee6 <tx_ull_dequeue+0x52>
   15f00:	e7ee      	b.n	15ee0 <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
   15f02:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15f04:	2903      	cmp	r1, #3
   15f06:	d0d3      	beq.n	15eb0 <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15f08:	290a      	cmp	r1, #10
   15f0a:	d1e6      	bne.n	15eda <tx_ull_dequeue+0x46>
   15f0c:	e7d0      	b.n	15eb0 <tx_ull_dequeue+0x1c>
   15f0e:	bf00      	nop

00015f10 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   15f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f12:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   15f14:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
   15f18:	0780      	lsls	r0, r0, #30
{
   15f1a:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   15f1c:	d433      	bmi.n	15f86 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15f1e:	4830      	ldr	r0, [pc, #192]	; (15fe0 <reject_ext_ind_send+0xd0>)
   15f20:	4617      	mov	r7, r2
   15f22:	461e      	mov	r6, r3
   15f24:	f7fb f8ac 	bl	11080 <mem_acquire>
	if (!tx) {
   15f28:	2800      	cmp	r0, #0
   15f2a:	d03a      	beq.n	15fa2 <reject_ext_ind_send+0x92>
	conn->common.txn_lock = 1U;
   15f2c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   15f30:	f043 0302 	orr.w	r3, r3, #2
   15f34:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15f38:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15f3a:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15f3c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15f3e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15f42:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f44:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   15f46:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f48:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15f4c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f4e:	7102      	strb	r2, [r0, #4]
	if (
   15f50:	b1eb      	cbz	r3, 15f8e <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   15f52:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   15f56:	0791      	lsls	r1, r2, #30
   15f58:	d419      	bmi.n	15f8e <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   15f5a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   15f5e:	07d2      	lsls	r2, r2, #31
   15f60:	d415      	bmi.n	15f8e <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   15f62:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   15f66:	4293      	cmp	r3, r2
   15f68:	d026      	beq.n	15fb8 <reject_ext_ind_send+0xa8>
		} else if (!conn->tx_ctrl) {
   15f6a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   15f6e:	b1da      	cbz	r2, 15fa8 <reject_ext_ind_send+0x98>
	tx->next = conn->tx_ctrl_last->next;
   15f70:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   15f74:	681a      	ldr	r2, [r3, #0]
   15f76:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15f78:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15f7a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15f7c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   15f80:	b90b      	cbnz	r3, 15f86 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   15f82:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15f86:	2301      	movs	r3, #1
   15f88:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   15f8a:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   15f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   15f8e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   15f92:	2a00      	cmp	r2, #0
   15f94:	d1ec      	bne.n	15f70 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   15f96:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15f98:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   15f9c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   15fa0:	e7ee      	b.n	15f80 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   15fa2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15fa8:	791a      	ldrb	r2, [r3, #4]
   15faa:	f002 0203 	and.w	r2, r2, #3
   15fae:	2a03      	cmp	r2, #3
   15fb0:	d010      	beq.n	15fd4 <reject_ext_ind_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15fb2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   15fb6:	e7dd      	b.n	15f74 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   15fb8:	681a      	ldr	r2, [r3, #0]
   15fba:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   15fbe:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   15fc2:	2a00      	cmp	r2, #0
   15fc4:	d1d4      	bne.n	15f70 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   15fc6:	681a      	ldr	r2, [r3, #0]
   15fc8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15fca:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15fcc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15fce:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   15fd2:	e7d5      	b.n	15f80 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   15fd4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15fd6:	2a03      	cmp	r2, #3
   15fd8:	d0f5      	beq.n	15fc6 <reject_ext_ind_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15fda:	2a0a      	cmp	r2, #10
   15fdc:	d1e9      	bne.n	15fb2 <reject_ext_ind_send+0xa2>
   15fde:	e7f2      	b.n	15fc6 <reject_ext_ind_send+0xb6>
   15fe0:	20002b40 	.word	0x20002b40

00015fe4 <event_len_prep>:
{
   15fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   15fe6:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   15fea:	f003 0207 	and.w	r2, r3, #7
{
   15fee:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   15ff0:	2a06      	cmp	r2, #6
   15ff2:	f200 80d7 	bhi.w	161a4 <event_len_prep+0x1c0>
   15ff6:	e8df f002 	tbb	[pc, r2]
   15ffa:	4804      	.short	0x4804
   15ffc:	49494848 	.word	0x49494848
   16000:	48          	.byte	0x48
   16001:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16002:	486f      	ldr	r0, [pc, #444]	; (161c0 <event_len_prep+0x1dc>)
   16004:	f7fb f83c 	bl	11080 <mem_acquire>
		if (!tx) {
   16008:	2800      	cmp	r0, #0
   1600a:	d03e      	beq.n	1608a <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1600c:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16010:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
   16014:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16018:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1601c:	2301      	movs	r3, #1
   1601e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   16022:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16026:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1602a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1602c:	72c3      	strb	r3, [r0, #11]
   1602e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16030:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   16032:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16034:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16036:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   16038:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1603a:	2214      	movs	r2, #20
	    conn->tx_head &&
   1603c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   16040:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16042:	221b      	movs	r2, #27
   16044:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16046:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16048:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1604a:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1604e:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16050:	7102      	strb	r2, [r0, #4]
	if (
   16052:	b13b      	cbz	r3, 16064 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   16054:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   16058:	0791      	lsls	r1, r2, #30
   1605a:	d403      	bmi.n	16064 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   1605c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   16060:	07d2      	lsls	r2, r2, #31
   16062:	d576      	bpl.n	16152 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   16064:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   16068:	2a00      	cmp	r2, #0
   1606a:	f000 8082 	beq.w	16172 <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   1606e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   16072:	681a      	ldr	r2, [r3, #0]
   16074:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16076:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16078:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1607a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1607e:	2b00      	cmp	r3, #0
   16080:	d056      	beq.n	16130 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   16082:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   16086:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
   1608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1608c:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   16090:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
   16094:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
   16098:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
   1609c:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   160a0:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   160a4:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   160a6:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   160aa:	d024      	beq.n	160f6 <event_len_prep+0x112>
			conn->llcp_length.state =
   160ac:	2206      	movs	r2, #6
   160ae:	f362 0302 	bfi	r3, r2, #0, #3
   160b2:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
   160b6:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
   160ba:	b335      	cbz	r5, 1610a <event_len_prep+0x126>
   160bc:	6828      	ldr	r0, [r5, #0]
   160be:	b320      	cbz	r0, 1610a <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   160c0:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   160c2:	6842      	ldr	r2, [r0, #4]
   160c4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   160c8:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   160cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   160ce:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   160d0:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   160d2:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   160d4:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   160d6:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   160d8:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   160da:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   160dc:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   160e0:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   160e2:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   160e4:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   160e6:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   160e8:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   160ea:	f7fe fe83 	bl	14df4 <ll_rx_put>
}
   160ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   160f2:	f7fe be89 	b.w	14e08 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   160f6:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
   160fa:	b9e2      	cbnz	r2, 16136 <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   160fc:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
   16100:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
   16104:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
   16108:	e7d5      	b.n	160b6 <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   1610a:	4a2e      	ldr	r2, [pc, #184]	; (161c4 <event_len_prep+0x1e0>)
   1610c:	492e      	ldr	r1, [pc, #184]	; (161c8 <event_len_prep+0x1e4>)
   1610e:	482f      	ldr	r0, [pc, #188]	; (161cc <event_len_prep+0x1e8>)
   16110:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   16114:	f00c faf6 	bl	22704 <printk>
   16118:	4040      	eors	r0, r0
   1611a:	f380 8811 	msr	BASEPRI, r0
   1611e:	f04f 0003 	mov.w	r0, #3
   16122:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   16124:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   16126:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1612a:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   1612e:	e7c7      	b.n	160c0 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   16130:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   16134:	e7a5      	b.n	16082 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   16136:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   1613a:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1613c:	f362 0302 	bfi	r3, r2, #0, #3
   16140:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
   16144:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
   16148:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
   1614c:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16150:	e7b1      	b.n	160b6 <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   16152:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   16156:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   16158:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
   1615c:	d00f      	beq.n	1617e <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   1615e:	2a00      	cmp	r2, #0
   16160:	d185      	bne.n	1606e <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16162:	791a      	ldrb	r2, [r3, #4]
   16164:	f002 0203 	and.w	r2, r2, #3
   16168:	2a03      	cmp	r2, #3
   1616a:	d015      	beq.n	16198 <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1616c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
   16170:	e77f      	b.n	16072 <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   16172:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16174:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   16178:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   1617c:	e77f      	b.n	1607e <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   1617e:	6819      	ldr	r1, [r3, #0]
   16180:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   16184:	2a00      	cmp	r2, #0
   16186:	f47f af72 	bne.w	1606e <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   1618a:	681a      	ldr	r2, [r3, #0]
   1618c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1618e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16190:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16192:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   16196:	e772      	b.n	1607e <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   16198:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1619a:	2a03      	cmp	r2, #3
   1619c:	d0f5      	beq.n	1618a <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1619e:	2a0a      	cmp	r2, #10
   161a0:	d1e4      	bne.n	1616c <event_len_prep+0x188>
   161a2:	e7f2      	b.n	1618a <event_len_prep+0x1a6>
		LL_ASSERT(0);
   161a4:	4a07      	ldr	r2, [pc, #28]	; (161c4 <event_len_prep+0x1e0>)
   161a6:	490a      	ldr	r1, [pc, #40]	; (161d0 <event_len_prep+0x1ec>)
   161a8:	4808      	ldr	r0, [pc, #32]	; (161cc <event_len_prep+0x1e8>)
   161aa:	f241 03ea 	movw	r3, #4330	; 0x10ea
   161ae:	f00c faa9 	bl	22704 <printk>
   161b2:	4040      	eors	r0, r0
   161b4:	f380 8811 	msr	BASEPRI, r0
   161b8:	f04f 0003 	mov.w	r0, #3
   161bc:	df02      	svc	2
}
   161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161c0:	20002b40 	.word	0x20002b40
   161c4:	0002978c 	.word	0x0002978c
   161c8:	0002986c 	.word	0x0002986c
   161cc:	00029220 	.word	0x00029220
   161d0:	000292b8 	.word	0x000292b8

000161d4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   161d4:	4801      	ldr	r0, [pc, #4]	; (161dc <ll_conn_acquire+0x8>)
   161d6:	f7fa bf53 	b.w	11080 <mem_acquire>
   161da:	bf00      	nop
   161dc:	20002aa8 	.word	0x20002aa8

000161e0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   161e0:	4901      	ldr	r1, [pc, #4]	; (161e8 <ll_conn_release+0x8>)
   161e2:	f7fa bf67 	b.w	110b4 <mem_release>
   161e6:	bf00      	nop
   161e8:	20002aa8 	.word	0x20002aa8

000161ec <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   161ec:	4902      	ldr	r1, [pc, #8]	; (161f8 <ll_conn_handle_get+0xc>)
   161ee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   161f2:	f7fa bf7b 	b.w	110ec <mem_index_get>
   161f6:	bf00      	nop
   161f8:	200019a0 	.word	0x200019a0

000161fc <ll_conn_get>:
{
   161fc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   161fe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16202:	4801      	ldr	r0, [pc, #4]	; (16208 <ll_conn_get+0xc>)
   16204:	f7fa bf6e 	b.w	110e4 <mem_get>
   16208:	200019a0 	.word	0x200019a0

0001620c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1620c:	b958      	cbnz	r0, 16226 <ll_connected_get+0x1a>
{
   1620e:	b508      	push	{r3, lr}
   16210:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16212:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16216:	4805      	ldr	r0, [pc, #20]	; (1622c <ll_connected_get+0x20>)
   16218:	f7fa ff64 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   1621c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1621e:	b903      	cbnz	r3, 16222 <ll_connected_get+0x16>
}
   16220:	bd08      	pop	{r3, pc}
		return NULL;
   16222:	2000      	movs	r0, #0
}
   16224:	bd08      	pop	{r3, pc}
		return NULL;
   16226:	2000      	movs	r0, #0
}
   16228:	4770      	bx	lr
   1622a:	bf00      	nop
   1622c:	200019a0 	.word	0x200019a0

00016230 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   16230:	4801      	ldr	r0, [pc, #4]	; (16238 <ll_tx_mem_acquire+0x8>)
   16232:	f7fa bf25 	b.w	11080 <mem_acquire>
   16236:	bf00      	nop
   16238:	20002ad0 	.word	0x20002ad0

0001623c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1623c:	4901      	ldr	r1, [pc, #4]	; (16244 <ll_tx_mem_release+0x8>)
   1623e:	f7fa bf39 	b.w	110b4 <mem_release>
   16242:	bf00      	nop
   16244:	20002ad0 	.word	0x20002ad0

00016248 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16248:	2800      	cmp	r0, #0
   1624a:	d136      	bne.n	162ba <ll_tx_mem_enqueue+0x72>
{
   1624c:	b570      	push	{r4, r5, r6, lr}
   1624e:	4602      	mov	r2, r0
   16250:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16252:	481b      	ldr	r0, [pc, #108]	; (162c0 <ll_tx_mem_enqueue+0x78>)
   16254:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16258:	f7fa ff44 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   1625c:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1625e:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   16260:	bb2e      	cbnz	r6, 162ae <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   16262:	4c18      	ldr	r4, [pc, #96]	; (162c4 <ll_tx_mem_enqueue+0x7c>)
   16264:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   16268:	7862      	ldrb	r2, [r4, #1]
   1626a:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   1626c:	f10c 0301 	add.w	r3, ip, #1
   16270:	b2db      	uxtb	r3, r3
		last = 0U;
   16272:	429a      	cmp	r2, r3
   16274:	bf08      	it	eq
   16276:	2300      	moveq	r3, #0
   16278:	78a2      	ldrb	r2, [r4, #2]
	if (last == first) {
   1627a:	429a      	cmp	r2, r3
   1627c:	d01a      	beq.n	162b4 <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1627e:	fb1c fc00 	smulbb	ip, ip, r0
   16282:	f104 0e04 	add.w	lr, r4, #4
	lll_tx->handle = handle;
   16286:	f82e 600c 	strh.w	r6, [lr, ip]
   1628a:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1628c:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
   16290:	70e3      	strb	r3, [r4, #3]
   16292:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
   16294:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   16298:	b903      	cbnz	r3, 1629c <ll_tx_mem_enqueue+0x54>
}
   1629a:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   1629c:	4b0a      	ldr	r3, [pc, #40]	; (162c8 <ll_tx_mem_enqueue+0x80>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1629e:	4632      	mov	r2, r6
		mfy.param = conn;
   162a0:	6099      	str	r1, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   162a2:	2003      	movs	r0, #3
   162a4:	2101      	movs	r1, #1
   162a6:	f7fa ffc3 	bl	11230 <mayfly_enqueue>
	return 0;
   162aa:	4630      	mov	r0, r6
}
   162ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   162ae:	f06f 0015 	mvn.w	r0, #21
}
   162b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   162b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   162b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   162ba:	f06f 0015 	mvn.w	r0, #21
}
   162be:	4770      	bx	lr
   162c0:	200019a0 	.word	0x200019a0
   162c4:	200005f0 	.word	0x200005f0
   162c8:	20000624 	.word	0x20000624

000162cc <ll_conn_update>:
{
   162cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   162d0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   162d4:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   162d8:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   162dc:	2800      	cmp	r0, #0
   162de:	d151      	bne.n	16384 <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   162e0:	460c      	mov	r4, r1
   162e2:	4615      	mov	r5, r2
   162e4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   162e8:	4602      	mov	r2, r0
   162ea:	483c      	ldr	r0, [pc, #240]	; (163dc <ll_conn_update+0x110>)
   162ec:	461e      	mov	r6, r3
   162ee:	f7fa fef9 	bl	110e4 <mem_get>
   162f2:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   162f4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   162f6:	2800      	cmp	r0, #0
   162f8:	d144      	bne.n	16384 <ll_conn_update+0xb8>
	if (!cmd) {
   162fa:	bb1c      	cbnz	r4, 16344 <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
   162fc:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
   16300:	0699      	lsls	r1, r3, #26
   16302:	d446      	bmi.n	16392 <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
   16304:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
   16308:	07da      	lsls	r2, r3, #31
   1630a:	d43e      	bmi.n	1638a <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
   1630c:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
   16310:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
   16314:	4293      	cmp	r3, r2
   16316:	d132      	bne.n	1637e <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   16318:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   1631c:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
   16320:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   16324:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   16326:	f042 0210 	orr.w	r2, r2, #16
   1632a:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
   1632e:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
   16332:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
   16336:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
   1633a:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
   1633e:	2000      	movs	r0, #0
}
   16340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   16344:	3c01      	subs	r4, #1
		if (cmd) {
   16346:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1634a:	d0df      	beq.n	1630c <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1634c:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
   16350:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
   16354:	429a      	cmp	r2, r3
   16356:	d012      	beq.n	1637e <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
   16358:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
   1635c:	f003 020f 	and.w	r2, r3, #15
   16360:	2a03      	cmp	r2, #3
   16362:	d10c      	bne.n	1637e <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   16364:	f004 040f 	and.w	r4, r4, #15
   16368:	f023 031f 	bic.w	r3, r3, #31
   1636c:	f044 0410 	orr.w	r4, r4, #16
   16370:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   16372:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
   16376:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
   1637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1637e:	200c      	movs	r0, #12
}
   16380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16384:	2002      	movs	r0, #2
}
   16386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1638a:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
   1638e:	079b      	lsls	r3, r3, #30
   16390:	d4bc      	bmi.n	1630c <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   16392:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   16396:	2b00      	cmp	r3, #0
   16398:	db1e      	blt.n	163d8 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1639a:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
   1639e:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
   163a2:	4293      	cmp	r3, r2
   163a4:	d1eb      	bne.n	1637e <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   163a6:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
   163aa:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
   163ae:	3301      	adds	r3, #1
   163b0:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   163b4:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   163b8:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   163ba:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   163be:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   163c0:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
   163c4:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
   163c8:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   163cc:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   163d0:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
   163d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   163d8:	201a      	movs	r0, #26
   163da:	e7d1      	b.n	16380 <ll_conn_update+0xb4>
   163dc:	200019a0 	.word	0x200019a0

000163e0 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   163e0:	b9d0      	cbnz	r0, 16418 <ll_chm_get+0x38>
{
   163e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163e4:	4602      	mov	r2, r0
   163e6:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163e8:	480c      	ldr	r0, [pc, #48]	; (1641c <ll_chm_get+0x3c>)
   163ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   163ee:	f7fa fe79 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   163f2:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163f4:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   163f6:	b96e      	cbnz	r6, 16414 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   163f8:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   163fc:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
   16400:	2205      	movs	r2, #5
   16402:	4639      	mov	r1, r7
   16404:	4628      	mov	r0, r5
   16406:	f00e faca 	bl	2499e <memcpy>
	} while (conn->chm_updated);
   1640a:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
   1640e:	2800      	cmp	r0, #0
   16410:	d1f4      	bne.n	163fc <ll_chm_get+0x1c>
}
   16412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16414:	2002      	movs	r0, #2
}
   16416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16418:	2002      	movs	r0, #2
}
   1641a:	4770      	bx	lr
   1641c:	200019a0 	.word	0x200019a0

00016420 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16420:	2800      	cmp	r0, #0
   16422:	d13a      	bne.n	1649a <ll_terminate_ind_send+0x7a>
{
   16424:	b510      	push	{r4, lr}
   16426:	4602      	mov	r2, r0
   16428:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1642a:	481d      	ldr	r0, [pc, #116]	; (164a0 <ll_terminate_ind_send+0x80>)
   1642c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16430:	f7fa fe58 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   16434:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   16436:	bb73      	cbnz	r3, 16496 <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   16438:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1643c:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   16440:	429a      	cmp	r2, r3
   16442:	d126      	bne.n	16492 <ll_terminate_ind_send+0x72>
	switch (reason) {
   16444:	2c29      	cmp	r4, #41	; 0x29
   16446:	d819      	bhi.n	1647c <ll_terminate_ind_send+0x5c>
   16448:	2c04      	cmp	r4, #4
   1644a:	d919      	bls.n	16480 <ll_terminate_ind_send+0x60>
   1644c:	1f62      	subs	r2, r4, #5
   1644e:	2a24      	cmp	r2, #36	; 0x24
   16450:	d816      	bhi.n	16480 <ll_terminate_ind_send+0x60>
   16452:	e8df f002 	tbb	[pc, r2]
   16456:	1517      	.short	0x1517
   16458:	15151515 	.word	0x15151515
   1645c:	15151515 	.word	0x15151515
   16460:	15151515 	.word	0x15151515
   16464:	15171717 	.word	0x15171717
   16468:	17151515 	.word	0x17151515
   1646c:	15151515 	.word	0x15151515
   16470:	15151515 	.word	0x15151515
   16474:	15151515 	.word	0x15151515
   16478:	1515      	.short	0x1515
   1647a:	17          	.byte	0x17
   1647b:	00          	.byte	0x00
   1647c:	2c3b      	cmp	r4, #59	; 0x3b
   1647e:	d001      	beq.n	16484 <ll_terminate_ind_send+0x64>
   16480:	2012      	movs	r0, #18
}
   16482:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   16484:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   16486:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1648a:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1648e:	2000      	movs	r0, #0
}
   16490:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16492:	200c      	movs	r0, #12
}
   16494:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16496:	2002      	movs	r0, #2
}
   16498:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1649a:	2002      	movs	r0, #2
}
   1649c:	4770      	bx	lr
   1649e:	bf00      	nop
   164a0:	200019a0 	.word	0x200019a0

000164a4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   164a4:	b9b0      	cbnz	r0, 164d4 <ll_feature_req_send+0x30>
{
   164a6:	b508      	push	{r3, lr}
   164a8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   164aa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   164ae:	480a      	ldr	r0, [pc, #40]	; (164d8 <ll_feature_req_send+0x34>)
   164b0:	f7fa fe18 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   164b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   164b6:	b95b      	cbnz	r3, 164d0 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   164b8:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
   164bc:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
   164c0:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
   164c2:	bf05      	ittet	eq
   164c4:	3201      	addeq	r2, #1
   164c6:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
   164ca:	200c      	movne	r0, #12
	return 0;
   164cc:	4618      	moveq	r0, r3
}
   164ce:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   164d0:	2002      	movs	r0, #2
}
   164d2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   164d4:	2002      	movs	r0, #2
}
   164d6:	4770      	bx	lr
   164d8:	200019a0 	.word	0x200019a0

000164dc <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   164dc:	b9b0      	cbnz	r0, 1650c <ll_version_ind_send+0x30>
{
   164de:	b508      	push	{r3, lr}
   164e0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   164e2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   164e6:	480a      	ldr	r0, [pc, #40]	; (16510 <ll_version_ind_send+0x34>)
   164e8:	f7fa fdfc 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   164ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   164ee:	b95b      	cbnz	r3, 16508 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   164f0:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
   164f4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   164f8:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
   164fa:	bf05      	ittet	eq
   164fc:	3201      	addeq	r2, #1
   164fe:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
   16502:	200c      	movne	r0, #12
	return 0;
   16504:	4618      	moveq	r0, r3
}
   16506:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16508:	2002      	movs	r0, #2
}
   1650a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1650c:	2002      	movs	r0, #2
}
   1650e:	4770      	bx	lr
   16510:	200019a0 	.word	0x200019a0

00016514 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16514:	2800      	cmp	r0, #0
   16516:	d143      	bne.n	165a0 <ll_length_req_send+0x8c>
{
   16518:	b538      	push	{r3, r4, r5, lr}
   1651a:	460d      	mov	r5, r1
   1651c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1651e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16522:	4602      	mov	r2, r0
   16524:	481f      	ldr	r0, [pc, #124]	; (165a4 <ll_length_req_send+0x90>)
   16526:	f7fa fddd 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   1652a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1652c:	bba3      	cbnz	r3, 16598 <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
   1652e:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   16532:	071a      	lsls	r2, r3, #28
   16534:	d42e      	bmi.n	16594 <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
   16536:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
   1653a:	07d1      	lsls	r1, r2, #31
   1653c:	d503      	bpl.n	16546 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1653e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
   16542:	0692      	lsls	r2, r2, #26
   16544:	d526      	bpl.n	16594 <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   16546:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
   1654a:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   1654e:	428a      	cmp	r2, r1
   16550:	d011      	beq.n	16576 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   16552:	f003 0307 	and.w	r3, r3, #7
   16556:	2b03      	cmp	r3, #3
   16558:	d004      	beq.n	16564 <ll_length_req_send+0x50>
   1655a:	3303      	adds	r3, #3
   1655c:	f003 0307 	and.w	r3, r3, #7
   16560:	2b01      	cmp	r3, #1
   16562:	d81b      	bhi.n	1659c <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
   16564:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
   16568:	b9c3      	cbnz	r3, 1659c <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1656a:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
   1656e:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
   16572:	4618      	mov	r0, r3
}
   16574:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16576:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
   1657a:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
   1657e:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16580:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   16584:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16588:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
   1658c:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	return 0;
   16590:	2000      	movs	r0, #0
}
   16592:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16594:	201a      	movs	r0, #26
}
   16596:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16598:	2002      	movs	r0, #2
}
   1659a:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1659c:	200c      	movs	r0, #12
}
   1659e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   165a0:	2002      	movs	r0, #2
}
   165a2:	4770      	bx	lr
   165a4:	200019a0 	.word	0x200019a0

000165a8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   165a8:	4a03      	ldr	r2, [pc, #12]	; (165b8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   165aa:	4b04      	ldr	r3, [pc, #16]	; (165bc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   165ac:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   165ae:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   165b0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   165b2:	800b      	strh	r3, [r1, #0]
}
   165b4:	4770      	bx	lr
   165b6:	bf00      	nop
   165b8:	20003dda 	.word	0x20003dda
   165bc:	20003ddc 	.word	0x20003ddc

000165c0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   165c0:	4a02      	ldr	r2, [pc, #8]	; (165cc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   165c2:	4b03      	ldr	r3, [pc, #12]	; (165d0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   165c4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   165c6:	8019      	strh	r1, [r3, #0]
}
   165c8:	2000      	movs	r0, #0
   165ca:	4770      	bx	lr
   165cc:	20003dda 	.word	0x20003dda
   165d0:	20003ddc 	.word	0x20003ddc

000165d4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   165d4:	f04f 0c1b 	mov.w	ip, #27
   165d8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   165dc:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   165e0:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   165e4:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   165e6:	8018      	strh	r0, [r3, #0]
}
   165e8:	4770      	bx	lr
   165ea:	bf00      	nop

000165ec <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   165ec:	b9c0      	cbnz	r0, 16620 <ll_phy_get+0x34>
{
   165ee:	b538      	push	{r3, r4, r5, lr}
   165f0:	460d      	mov	r5, r1
   165f2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   165f4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   165f8:	4602      	mov	r2, r0
   165fa:	480a      	ldr	r0, [pc, #40]	; (16624 <ll_phy_get+0x38>)
   165fc:	f7fa fd72 	bl	110e4 <mem_get>
   16600:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   16602:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   16604:	b950      	cbnz	r0, 1661c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   16606:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1660a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1660e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   16610:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   16614:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16618:	7023      	strb	r3, [r4, #0]
}
   1661a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1661c:	2002      	movs	r0, #2
}
   1661e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16620:	2002      	movs	r0, #2
}
   16622:	4770      	bx	lr
   16624:	200019a0 	.word	0x200019a0

00016628 <ll_phy_default_set>:
	default_phy_tx = tx;
   16628:	4a02      	ldr	r2, [pc, #8]	; (16634 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1662a:	4b03      	ldr	r3, [pc, #12]	; (16638 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1662c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1662e:	7019      	strb	r1, [r3, #0]
}
   16630:	2000      	movs	r0, #0
   16632:	4770      	bx	lr
   16634:	20003f3e 	.word	0x20003f3e
   16638:	20003f3d 	.word	0x20003f3d

0001663c <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1663c:	2800      	cmp	r0, #0
   1663e:	d141      	bne.n	166c4 <ll_phy_req_send+0x88>
{
   16640:	b570      	push	{r4, r5, r6, lr}
   16642:	460c      	mov	r4, r1
   16644:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16646:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1664a:	4602      	mov	r2, r0
   1664c:	481e      	ldr	r0, [pc, #120]	; (166c8 <ll_phy_req_send+0x8c>)
   1664e:	461e      	mov	r6, r3
   16650:	f7fa fd48 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   16654:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16656:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
   16658:	bb93      	cbnz	r3, 166c0 <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
   1665a:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
   1665e:	f010 0008 	ands.w	r0, r0, #8
   16662:	d12b      	bne.n	166bc <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
   16664:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
   16668:	07db      	lsls	r3, r3, #31
   1666a:	d504      	bpl.n	16676 <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1666c:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   16670:	f413 6f10 	tst.w	r3, #2304	; 0x900
   16674:	d022      	beq.n	166bc <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   16676:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
   1667a:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
   1667e:	459c      	cmp	ip, r3
   16680:	d11a      	bne.n	166b8 <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   16682:	f004 0407 	and.w	r4, r4, #7
   16686:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
   1668a:	00a4      	lsls	r4, r4, #2
   1668c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   16690:	f006 0307 	and.w	r3, r6, #7
   16694:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   16698:	f005 0501 	and.w	r5, r5, #1
   1669c:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   166a0:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
   166a4:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   166a8:	f022 0207 	bic.w	r2, r2, #7
   166ac:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
   166ae:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   166b2:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
   166b6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   166b8:	200c      	movs	r0, #12
}
   166ba:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   166bc:	201a      	movs	r0, #26
}
   166be:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   166c0:	2002      	movs	r0, #2
}
   166c2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   166c4:	2002      	movs	r0, #2
}
   166c6:	4770      	bx	lr
   166c8:	200019a0 	.word	0x200019a0

000166cc <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   166cc:	b9d8      	cbnz	r0, 16706 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   166ce:	4602      	mov	r2, r0
{
   166d0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   166d2:	480e      	ldr	r0, [pc, #56]	; (1670c <ll_apto_get+0x40>)
   166d4:	460c      	mov	r4, r1
   166d6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   166da:	f7fa fd03 	bl	110e4 <mem_get>
   166de:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   166e0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   166e2:	b970      	cbnz	r0, 16702 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   166e4:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
   166e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   166ea:	fb02 f303 	mul.w	r3, r2, r3
   166ee:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   166f2:	4a07      	ldr	r2, [pc, #28]	; (16710 <ll_apto_get+0x44>)
   166f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   166f8:	fba2 2303 	umull	r2, r3, r2, r3
   166fc:	099b      	lsrs	r3, r3, #6
   166fe:	8023      	strh	r3, [r4, #0]
}
   16700:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16702:	2002      	movs	r0, #2
}
   16704:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16706:	2002      	movs	r0, #2
}
   16708:	4770      	bx	lr
   1670a:	bf00      	nop
   1670c:	200019a0 	.word	0x200019a0
   16710:	10624dd3 	.word	0x10624dd3

00016714 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16714:	b9e0      	cbnz	r0, 16750 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16716:	4602      	mov	r2, r0
{
   16718:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1671a:	480e      	ldr	r0, [pc, #56]	; (16754 <ll_apto_set+0x40>)
   1671c:	460c      	mov	r4, r1
   1671e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16722:	f7fa fcdf 	bl	110e4 <mem_get>
   16726:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   16728:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1672a:	b978      	cbnz	r0, 1674c <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1672c:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   16730:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16734:	fb03 fc0c 	mul.w	ip, r3, ip
   16738:	f242 7310 	movw	r3, #10000	; 0x2710
   1673c:	fb03 c304 	mla	r3, r3, r4, ip
   16740:	3b01      	subs	r3, #1
   16742:	fbb3 f3fc 	udiv	r3, r3, ip
   16746:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
   1674a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1674c:	2002      	movs	r0, #2
}
   1674e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16750:	2002      	movs	r0, #2
}
   16752:	4770      	bx	lr
   16754:	200019a0 	.word	0x200019a0

00016758 <ull_conn_init>:
	err = init_reset();
   16758:	f7ff b900 	b.w	1595c <init_reset>

0001675c <ull_conn_reset>:
{
   1675c:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   1675e:	f002 fa37 	bl	18bd0 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16762:	2200      	movs	r2, #0
   16764:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16768:	4815      	ldr	r0, [pc, #84]	; (167c0 <ull_conn_reset+0x64>)
   1676a:	f7fa fcbb 	bl	110e4 <mem_get>
   1676e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   16770:	f100 021c 	add.w	r2, r0, #28
   16774:	4601      	mov	r1, r0
   16776:	2003      	movs	r0, #3
   16778:	f7fe fc3c 	bl	14ff4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1677c:	b108      	cbz	r0, 16782 <ull_conn_reset+0x26>
   1677e:	3078      	adds	r0, #120	; 0x78
   16780:	d10f      	bne.n	167a2 <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   16782:	4810      	ldr	r0, [pc, #64]	; (167c4 <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   16784:	4910      	ldr	r1, [pc, #64]	; (167c8 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   16786:	4a11      	ldr	r2, [pc, #68]	; (167cc <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   16788:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1678a:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   1678e:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   16790:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   16792:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   16796:	65a3      	str	r3, [r4, #88]	; 0x58
}
   16798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1679c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1679e:	f7ff b8dd 	b.w	1595c <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   167a2:	4a0b      	ldr	r2, [pc, #44]	; (167d0 <ull_conn_reset+0x74>)
   167a4:	490b      	ldr	r1, [pc, #44]	; (167d4 <ull_conn_reset+0x78>)
   167a6:	480c      	ldr	r0, [pc, #48]	; (167d8 <ull_conn_reset+0x7c>)
   167a8:	f640 03e3 	movw	r3, #2275	; 0x8e3
   167ac:	f00b ffaa 	bl	22704 <printk>
   167b0:	4040      	eors	r0, r0
   167b2:	f380 8811 	msr	BASEPRI, r0
   167b6:	f04f 0003 	mov.w	r0, #3
   167ba:	df02      	svc	2
   167bc:	e7e1      	b.n	16782 <ull_conn_reset+0x26>
   167be:	bf00      	nop
   167c0:	200019a0 	.word	0x200019a0
   167c4:	200005f0 	.word	0x200005f0
   167c8:	200005ac 	.word	0x200005ac
   167cc:	20002aac 	.word	0x20002aac
   167d0:	0002978c 	.word	0x0002978c
   167d4:	00029760 	.word	0x00029760
   167d8:	00029220 	.word	0x00029220

000167dc <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   167dc:	4b01      	ldr	r3, [pc, #4]	; (167e4 <ull_conn_default_tx_octets_get+0x8>)
}
   167de:	8818      	ldrh	r0, [r3, #0]
   167e0:	4770      	bx	lr
   167e2:	bf00      	nop
   167e4:	20003dda 	.word	0x20003dda

000167e8 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   167e8:	4b01      	ldr	r3, [pc, #4]	; (167f0 <ull_conn_default_tx_time_get+0x8>)
}
   167ea:	8818      	ldrh	r0, [r3, #0]
   167ec:	4770      	bx	lr
   167ee:	bf00      	nop
   167f0:	20003ddc 	.word	0x20003ddc

000167f4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   167f4:	4b01      	ldr	r3, [pc, #4]	; (167fc <ull_conn_default_phy_tx_get+0x8>)
}
   167f6:	7818      	ldrb	r0, [r3, #0]
   167f8:	4770      	bx	lr
   167fa:	bf00      	nop
   167fc:	20003f3e 	.word	0x20003f3e

00016800 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   16800:	4b01      	ldr	r3, [pc, #4]	; (16808 <ull_conn_default_phy_rx_get+0x8>)
}
   16802:	7818      	ldrb	r0, [r3, #0]
   16804:	4770      	bx	lr
   16806:	bf00      	nop
   16808:	20003f3d 	.word	0x20003f3d

0001680c <ull_conn_setup>:
{
   1680c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1680e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   16810:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   16812:	681d      	ldr	r5, [r3, #0]
   16814:	782b      	ldrb	r3, [r5, #0]
{
   16816:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   16818:	b193      	cbz	r3, 16840 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   1681a:	696b      	ldr	r3, [r5, #20]
   1681c:	b163      	cbz	r3, 16838 <ull_conn_setup+0x2c>
   1681e:	4a0b      	ldr	r2, [pc, #44]	; (1684c <ull_conn_setup+0x40>)
   16820:	490b      	ldr	r1, [pc, #44]	; (16850 <ull_conn_setup+0x44>)
   16822:	480c      	ldr	r0, [pc, #48]	; (16854 <ull_conn_setup+0x48>)
   16824:	f240 33ed 	movw	r3, #1005	; 0x3ed
   16828:	f00b ff6c 	bl	22704 <printk>
   1682c:	4040      	eors	r0, r0
   1682e:	f380 8811 	msr	BASEPRI, r0
   16832:	f04f 0003 	mov.w	r0, #3
   16836:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   16838:	4b07      	ldr	r3, [pc, #28]	; (16858 <ull_conn_setup+0x4c>)
   1683a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   1683e:	bd38      	pop	{r3, r4, r5, pc}
   16840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   16844:	4608      	mov	r0, r1
   16846:	f7ff ba8d 	b.w	15d64 <conn_setup_adv_scan_disabled_cb>
   1684a:	bf00      	nop
   1684c:	0002978c 	.word	0x0002978c
   16850:	000297f8 	.word	0x000297f8
   16854:	00029220 	.word	0x00029220
   16858:	00015d65 	.word	0x00015d65

0001685c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1685c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1685e:	88da      	ldrh	r2, [r3, #6]
   16860:	2a00      	cmp	r2, #0
   16862:	f040 80cf 	bne.w	16a04 <ull_conn_rx+0x1a8>
{
   16866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686a:	460e      	mov	r6, r1
   1686c:	b083      	sub	sp, #12
   1686e:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16870:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   16874:	48a5      	ldr	r0, [pc, #660]	; (16b0c <ull_conn_rx+0x2b0>)
   16876:	f7fa fc35 	bl	110e4 <mem_get>
   1687a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1687c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1687e:	2800      	cmp	r0, #0
   16880:	f040 80b9 	bne.w	169f6 <ull_conn_rx+0x19a>
	pdu_rx = (void *)(*rx)->pdu;
   16884:	6835      	ldr	r5, [r6, #0]
	switch (pdu_rx->ll_id) {
   16886:	7f2a      	ldrb	r2, [r5, #28]
   16888:	f002 0203 	and.w	r2, r2, #3
   1688c:	2a03      	cmp	r2, #3
   1688e:	d12a      	bne.n	168e6 <ull_conn_rx+0x8a>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16890:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	opcode = pdu_rx->llctrl.opcode;
   16894:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16898:	07d3      	lsls	r3, r2, #31
	pdu_rx = (void *)(*rx)->pdu;
   1689a:	f105 011c 	add.w	r1, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1689e:	d53c      	bpl.n	1691a <ull_conn_rx+0xbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   168a0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   168a4:	2b00      	cmp	r3, #0
   168a6:	f2c0 80b1 	blt.w	16a0c <ull_conn_rx+0x1b0>
	return (!conn->lll.role &&
   168aa:	0750      	lsls	r0, r2, #29
   168ac:	f100 80c3 	bmi.w	16a36 <ull_conn_rx+0x1da>
		((!conn->llcp_enc.refresh &&
   168b0:	f1b8 0f02 	cmp.w	r8, #2
   168b4:	f000 80b4 	beq.w	16a20 <ull_conn_rx+0x1c4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   168b8:	f1b8 0f05 	cmp.w	r8, #5
   168bc:	f000 8467 	beq.w	1718e <ull_conn_rx+0x932>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   168c0:	f1b8 0f06 	cmp.w	r8, #6
   168c4:	f000 83d2 	beq.w	1706c <ull_conn_rx+0x810>
   168c8:	f1b8 0f0d 	cmp.w	r8, #13
   168cc:	f000 8195 	beq.w	16bfa <ull_conn_rx+0x39e>
   168d0:	f1b8 0f11 	cmp.w	r8, #17
   168d4:	f000 8240 	beq.w	16d58 <ull_conn_rx+0x4fc>
		conn->llcp_terminate.reason_final =
   168d8:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   168da:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   168dc:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
   168e0:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   168e2:	712b      	strb	r3, [r5, #4]
		return 0;
   168e4:	e00a      	b.n	168fc <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   168e6:	b962      	cbnz	r2, 16902 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   168e8:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   168ec:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   168ee:	bf44      	itt	mi
   168f0:	233d      	movmi	r3, #61	; 0x3d
   168f2:	f884 311b 	strbmi.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   168f6:	2301      	movs	r3, #1
   168f8:	712b      	strb	r3, [r5, #4]
	return 0;
   168fa:	2000      	movs	r0, #0
}
   168fc:	b003      	add	sp, #12
   168fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16902:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
   16906:	07d2      	lsls	r2, r2, #31
   16908:	d5f7      	bpl.n	168fa <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   1690a:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1690c:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   1690e:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16912:	712a      	strb	r2, [r5, #4]
}
   16914:	b003      	add	sp, #12
   16916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1691a:	f1a8 0302 	sub.w	r3, r8, #2
   1691e:	2b17      	cmp	r3, #23
   16920:	d81d      	bhi.n	1695e <ull_conn_rx+0x102>
   16922:	e8df f013 	tbh	[pc, r3, lsl #1]
   16926:	007d      	.short	0x007d
   16928:	0428001c 	.word	0x0428001c
   1692c:	03a3042f 	.word	0x03a3042f
   16930:	001c0373 	.word	0x001c0373
   16934:	001c01dc 	.word	0x001c01dc
   16938:	01ad044e 	.word	0x01ad044e
   1693c:	02f6016a 	.word	0x02f6016a
   16940:	024f02e1 	.word	0x024f02e1
   16944:	04030219 	.word	0x04030219
   16948:	00ba03ce 	.word	0x00ba03ce
   1694c:	03d800ba 	.word	0x03d800ba
   16950:	001c012d 	.word	0x001c012d
   16954:	00f7      	.short	0x00f7
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   16956:	7f6b      	ldrb	r3, [r5, #29]
   16958:	2b01      	cmp	r3, #1
   1695a:	f000 843b 	beq.w	171d4 <ull_conn_rx+0x978>
	if (conn->common.txn_lock) {
   1695e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   16962:	079f      	lsls	r7, r3, #30
   16964:	d4c7      	bmi.n	168f6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16966:	486a      	ldr	r0, [pc, #424]	; (16b10 <ull_conn_rx+0x2b4>)
   16968:	f7fa fb8a 	bl	11080 <mem_acquire>
	if (!tx) {
   1696c:	2800      	cmp	r0, #0
   1696e:	f000 851b 	beq.w	173a8 <ull_conn_rx+0xb4c>
	conn->common.txn_lock = 1U;
   16972:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   16976:	f043 0302 	orr.w	r3, r3, #2
   1697a:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1697e:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   16980:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16984:	f043 0303 	orr.w	r3, r3, #3
   16988:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1698a:	2302      	movs	r3, #2
   1698c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1698e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16992:	2307      	movs	r3, #7
   16994:	71c3      	strb	r3, [r0, #7]
	if (
   16996:	b1f2      	cbz	r2, 169d6 <ull_conn_rx+0x17a>
	    !conn->llcp_enc.pause_tx &&
   16998:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1699c:	079e      	lsls	r6, r3, #30
   1699e:	d41a      	bmi.n	169d6 <ull_conn_rx+0x17a>
	    !conn->llcp_phy.pause_tx &&
   169a0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   169a4:	07d9      	lsls	r1, r3, #31
   169a6:	d416      	bmi.n	169d6 <ull_conn_rx+0x17a>
		if (conn->tx_head == conn->tx_data) {
   169a8:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   169ac:	429a      	cmp	r2, r3
   169ae:	f000 84ff 	beq.w	173b0 <ull_conn_rx+0xb54>
		} else if (!conn->tx_ctrl) {
   169b2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   169b6:	2b00      	cmp	r3, #0
   169b8:	f000 8542 	beq.w	17440 <ull_conn_rx+0xbe4>
	tx->next = conn->tx_ctrl_last->next;
   169bc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
   169c0:	6813      	ldr	r3, [r2, #0]
   169c2:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   169c4:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   169c6:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   169c8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   169cc:	2a00      	cmp	r2, #0
   169ce:	d192      	bne.n	168f6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   169d0:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   169d4:	e78f      	b.n	168f6 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   169d6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   169da:	2b00      	cmp	r3, #0
   169dc:	f000 84da 	beq.w	17394 <ull_conn_rx+0xb38>
	tx->next = conn->tx_ctrl_last->next;
   169e0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   169e4:	681a      	ldr	r2, [r3, #0]
   169e6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   169e8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   169ea:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   169ec:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   169f0:	2a00      	cmp	r2, #0
   169f2:	d180      	bne.n	168f6 <ull_conn_rx+0x9a>
   169f4:	e7ec      	b.n	169d0 <ull_conn_rx+0x174>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   169f6:	6833      	ldr	r3, [r6, #0]
   169f8:	2201      	movs	r2, #1
		return 0;
   169fa:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   169fc:	711a      	strb	r2, [r3, #4]
}
   169fe:	b003      	add	sp, #12
   16a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16a04:	2201      	movs	r2, #1
   16a06:	711a      	strb	r2, [r3, #4]
		return 0;
   16a08:	2000      	movs	r0, #0
}
   16a0a:	4770      	bx	lr
	       (conn->lll.role &&
   16a0c:	0753      	lsls	r3, r2, #29
   16a0e:	d438      	bmi.n	16a82 <ull_conn_rx+0x226>
		((!conn->llcp_enc.refresh &&
   16a10:	f1b8 0f07 	cmp.w	r8, #7
   16a14:	f000 82fa 	beq.w	1700c <ull_conn_rx+0x7b0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16a18:	f1b8 0f02 	cmp.w	r8, #2
   16a1c:	f47f af50 	bne.w	168c0 <ull_conn_rx+0x64>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   16a20:	7f6b      	ldrb	r3, [r5, #29]
   16a22:	2b02      	cmp	r3, #2
   16a24:	d19b      	bne.n	1695e <ull_conn_rx+0x102>
	conn->llcp_terminate.reason_final =
   16a26:	f895 2020 	ldrb.w	r2, [r5, #32]
   16a2a:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a2e:	2301      	movs	r3, #1
	int nack = 0;
   16a30:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a32:	712b      	strb	r3, [r5, #4]
}
   16a34:	e762      	b.n	168fc <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   16a36:	f1b8 0f02 	cmp.w	r8, #2
   16a3a:	d0f1      	beq.n	16a20 <ull_conn_rx+0x1c4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16a3c:	f1b8 0f0b 	cmp.w	r8, #11
   16a40:	d089      	beq.n	16956 <ull_conn_rx+0xfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16a42:	f1b8 0f04 	cmp.w	r8, #4
   16a46:	f47f af37 	bne.w	168b8 <ull_conn_rx+0x5c>
		if (conn->lll.role ||
   16a4a:	7f6b      	ldrb	r3, [r5, #29]
   16a4c:	2b0d      	cmp	r3, #13
   16a4e:	d186      	bne.n	1695e <ull_conn_rx+0x102>
		memcpy(&conn->llcp.encryption.skd[8],
   16a50:	2208      	movs	r2, #8
   16a52:	f105 0120 	add.w	r1, r5, #32
   16a56:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
   16a5a:	f00d ffa0 	bl	2499e <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   16a5e:	2204      	movs	r2, #4
   16a60:	f105 0128 	add.w	r1, r5, #40	; 0x28
   16a64:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   16a68:	f00d ff99 	bl	2499e <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   16a6c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16a70:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   16a72:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16a76:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   16a78:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
   16a7c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16a7e:	7111      	strb	r1, [r2, #4]
		break;
   16a80:	e73c      	b.n	168fc <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   16a82:	f1b8 0f02 	cmp.w	r8, #2
   16a86:	d0cb      	beq.n	16a20 <ull_conn_rx+0x1c4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16a88:	f1b8 0f0b 	cmp.w	r8, #11
   16a8c:	f000 84a3 	beq.w	173d6 <ull_conn_rx+0xb7a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16a90:	f1b8 0f03 	cmp.w	r8, #3
   16a94:	f47f af14 	bne.w	168c0 <ull_conn_rx+0x64>
   16a98:	e761      	b.n	1695e <ull_conn_rx+0x102>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   16a9a:	7f6b      	ldrb	r3, [r5, #29]
   16a9c:	2b09      	cmp	r3, #9
   16a9e:	f47f af5e 	bne.w	1695e <ull_conn_rx+0x102>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   16aa2:	f1b8 0f14 	cmp.w	r8, #20
   16aa6:	f000 84d9 	beq.w	1745c <ull_conn_rx+0xc00>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16aaa:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   16aae:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   16ab2:	4293      	cmp	r3, r2
   16ab4:	f000 87e4 	beq.w	17a80 <ull_conn_rx+0x1224>
	eff_rx_octets = conn->lll.max_rx_octets;
   16ab8:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   16abc:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   16ac0:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   16ac4:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   16ac8:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
   16acc:	2300      	movs	r3, #0
	       tx) ||
   16ace:	f001 0107 	and.w	r1, r1, #7
   16ad2:	2902      	cmp	r1, #2
   16ad4:	f000 84e2 	beq.w	1749c <ull_conn_rx+0xc40>
   16ad8:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   16adc:	f1b8 0f15 	cmp.w	r8, #21
   16ae0:	f43f af0b 	beq.w	168fa <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   16ae4:	4618      	mov	r0, r3
   16ae6:	490a      	ldr	r1, [pc, #40]	; (16b10 <ull_conn_rx+0x2b4>)
   16ae8:	f7fa fae4 	bl	110b4 <mem_release>
			if (conn->llcp_length.state ==
   16aec:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
   16af0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   16af4:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   16af8:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   16afc:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   16afe:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   16b02:	f47f aefa 	bne.w	168fa <ull_conn_rx+0x9e>
				return -EBUSY;
   16b06:	f06f 000f 	mvn.w	r0, #15
   16b0a:	e6f7      	b.n	168fc <ull_conn_rx+0xa0>
   16b0c:	200019a0 	.word	0x200019a0
   16b10:	20002b40 	.word	0x20002b40
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   16b14:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16b18:	2b00      	cmp	r3, #0
   16b1a:	f6ff af20 	blt.w	1695e <ull_conn_rx+0x102>
   16b1e:	7f6b      	ldrb	r3, [r5, #29]
   16b20:	2b03      	cmp	r3, #3
   16b22:	f47f af1c 	bne.w	1695e <ull_conn_rx+0x102>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   16b26:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
   16b2a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
   16b2e:	f895 2020 	ldrb.w	r2, [r5, #32]
   16b32:	430b      	orrs	r3, r1
   16b34:	f003 0307 	and.w	r3, r3, #7
   16b38:	4213      	tst	r3, r2
   16b3a:	f43f aede 	beq.w	168fa <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   16b3e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   16b42:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   16b46:	1a9b      	subs	r3, r3, r2
   16b48:	f003 0303 	and.w	r3, r3, #3
   16b4c:	2b02      	cmp	r3, #2
   16b4e:	f43f aed4 	beq.w	168fa <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   16b52:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   16b56:	f002 fa8b 	bl	19070 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   16b5a:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
   16b5e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
   16b62:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   16b64:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   16b66:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   16b6a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b6e:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   16b70:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b74:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   16b76:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
   16b7a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b7c:	7111      	strb	r1, [r2, #4]

		break;
   16b7e:	e6bd      	b.n	168fc <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   16b80:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16b84:	2b00      	cmp	r3, #0
   16b86:	f6ff aeea 	blt.w	1695e <ull_conn_rx+0x102>
   16b8a:	7f6b      	ldrb	r3, [r5, #29]
   16b8c:	2b03      	cmp	r3, #3
   16b8e:	f47f aee6 	bne.w	1695e <ull_conn_rx+0x102>
		if (!conn->lll.role &&
   16b92:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   16b96:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   16b9a:	429a      	cmp	r2, r3
   16b9c:	f43f aeab 	beq.w	168f6 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16ba0:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16ba4:	f002 0303 	and.w	r3, r2, #3
   16ba8:	2b02      	cmp	r3, #2
   16baa:	f47f aea4 	bne.w	168f6 <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   16bae:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   16bb2:	f3c2 0182 	ubfx	r1, r2, #2, #3
   16bb6:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   16bb8:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16bbc:	009b      	lsls	r3, r3, #2
   16bbe:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   16bc2:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16bc6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16bca:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16bce:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16bd2:	d002      	beq.n	16bda <ull_conn_rx+0x37e>
   16bd4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16bd8:	d105      	bne.n	16be6 <ull_conn_rx+0x38a>
				conn->llcp_phy.tx = 0;
   16bda:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   16bde:	f003 0303 	and.w	r3, r3, #3
   16be2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   16be6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   16bea:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   16bec:	f043 0301 	orr.w	r3, r3, #1
   16bf0:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   16bf4:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16bf8:	e67d      	b.n	168f6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   16bfa:	7f6b      	ldrb	r3, [r5, #29]
   16bfc:	2b02      	cmp	r3, #2
   16bfe:	f47f aeae 	bne.w	1695e <ull_conn_rx+0x102>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   16c02:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   16c06:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   16c0a:	4293      	cmp	r3, r2
   16c0c:	d004      	beq.n	16c18 <ull_conn_rx+0x3bc>
   16c0e:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   16c12:	2b03      	cmp	r3, #3
   16c14:	f000 86e0 	beq.w	179d8 <ull_conn_rx+0x117c>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16c18:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   16c1c:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   16c20:	4293      	cmp	r3, r2
   16c22:	f000 8531 	beq.w	17688 <ull_conn_rx+0xe2c>
		rej_ext_ind->error_code = rej_ind->error_code;
   16c26:	f895 1020 	ldrb.w	r1, [r5, #32]
   16c2a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16c2e:	2923      	cmp	r1, #35	; 0x23
   16c30:	d012      	beq.n	16c58 <ull_conn_rx+0x3fc>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16c32:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   16c36:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16c3a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   16c3e:	f36f 0200 	bfc	r2, #0, #1
   16c42:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   16c46:	2200      	movs	r2, #0
   16c48:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16c4c:	f3c3 0202 	ubfx	r2, r3, #0, #3
   16c50:	f362 1306 	bfi	r3, r2, #4, #3
   16c54:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   16c58:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   16c5c:	075f      	lsls	r7, r3, #29
   16c5e:	f57f ae4a 	bpl.w	168f6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16c62:	231c      	movs	r3, #28
   16c64:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   16c66:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   16c68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   16c6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16c70:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   16c72:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   16c76:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   16c7a:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   16c7c:	77ab      	strb	r3, [r5, #30]
	if (err) {
   16c7e:	e63d      	b.n	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   16c80:	7f6e      	ldrb	r6, [r5, #29]
   16c82:	2e06      	cmp	r6, #6
   16c84:	f47f ae6b 	bne.w	1695e <ull_conn_rx+0x102>
	if (!conn->llcp_version.tx) {
   16c88:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   16c8c:	07da      	lsls	r2, r3, #31
   16c8e:	f140 85dc 	bpl.w	1784a <ull_conn_rx+0xfee>
	} else if (!conn->llcp_version.rx) {
   16c92:	f013 0302 	ands.w	r3, r3, #2
   16c96:	f47f ae2e 	bne.w	168f6 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   16c9a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   16c9e:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
   16ca2:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
   16ca6:	f895 3020 	ldrb.w	r3, [r5, #32]
   16caa:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16cae:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   16cb2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   16cb6:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16cba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16cbe:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
   16cc2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   16cc6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   16cca:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   16cce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16cd2:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
   16cd6:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
   16cda:	2000      	movs	r0, #0
   16cdc:	e60e      	b.n	168fc <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   16cde:	7f6b      	ldrb	r3, [r5, #29]
   16ce0:	2b09      	cmp	r3, #9
   16ce2:	f47f ae3c 	bne.w	1695e <ull_conn_rx+0x102>
   16ce6:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   16ce8:	49dd      	ldr	r1, [pc, #884]	; (17060 <ull_conn_rx+0x804>)
   16cea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16cec:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16cee:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   16cf2:	400a      	ands	r2, r1
   16cf4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   16cf8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16cfc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   16d00:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16d04:	4013      	ands	r3, r2
   16d06:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   16d0a:	6a2e      	ldr	r6, [r5, #32]
   16d0c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   16d0e:	f7fd fba7 	bl	14460 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   16d12:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16d16:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   16d1a:	4ad1      	ldr	r2, [pc, #836]	; (17060 <ull_conn_rx+0x804>)
	conn->llcp_feature.features_peer =
   16d1c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   16d20:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   16d24:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   16d26:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   16d2a:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   16d2c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
   16d30:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16d34:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
   16d38:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   16d3c:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   16d40:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16d42:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   16d46:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16d48:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   16d4c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
   16d50:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   16d54:	4618      	mov	r0, r3
}
   16d56:	e5d1      	b.n	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   16d58:	7f6b      	ldrb	r3, [r5, #29]
   16d5a:	2b03      	cmp	r3, #3
   16d5c:	f47f adff 	bne.w	1695e <ull_conn_rx+0x102>
	switch (rej_ext_ind->reject_opcode) {
   16d60:	f895 3020 	ldrb.w	r3, [r5, #32]
   16d64:	3b03      	subs	r3, #3
   16d66:	2b13      	cmp	r3, #19
   16d68:	f63f adc5 	bhi.w	168f6 <ull_conn_rx+0x9a>
   16d6c:	a201      	add	r2, pc, #4	; (adr r2, 16d74 <ull_conn_rx+0x518>)
   16d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16d72:	bf00      	nop
   16d74:	00017355 	.word	0x00017355
   16d78:	000168f7 	.word	0x000168f7
   16d7c:	000168f7 	.word	0x000168f7
   16d80:	000168f7 	.word	0x000168f7
   16d84:	000168f7 	.word	0x000168f7
   16d88:	000168f7 	.word	0x000168f7
   16d8c:	000168f7 	.word	0x000168f7
   16d90:	000168f7 	.word	0x000168f7
   16d94:	000168f7 	.word	0x000168f7
   16d98:	000168f7 	.word	0x000168f7
   16d9c:	000168f7 	.word	0x000168f7
   16da0:	000168f7 	.word	0x000168f7
   16da4:	000172df 	.word	0x000172df
   16da8:	000168f7 	.word	0x000168f7
   16dac:	000168f7 	.word	0x000168f7
   16db0:	000168f7 	.word	0x000168f7
   16db4:	000168f7 	.word	0x000168f7
   16db8:	00017255 	.word	0x00017255
   16dbc:	000168f7 	.word	0x000168f7
   16dc0:	00017291 	.word	0x00017291
		if (conn->lll.role ||
   16dc4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16dc8:	2b00      	cmp	r3, #0
   16dca:	f6ff adc8 	blt.w	1695e <ull_conn_rx+0x102>
   16dce:	7f6b      	ldrb	r3, [r5, #29]
   16dd0:	2b18      	cmp	r3, #24
   16dd2:	f47f adc4 	bne.w	1695e <ull_conn_rx+0x102>
		if (!conn->lll.role &&
   16dd6:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   16dda:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   16dde:	429a      	cmp	r2, r3
   16de0:	f43f ad89 	beq.w	168f6 <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   16de4:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
   16de8:	f003 030f 	and.w	r3, r3, #15
   16dec:	2b04      	cmp	r3, #4
   16dee:	f47f ad82 	bne.w	168f6 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16df2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   16df6:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16dfa:	2b05      	cmp	r3, #5
   16dfc:	f240 85af 	bls.w	1795e <ull_conn_rx+0x1102>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16e00:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   16e02:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16e04:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16e08:	f200 85a9 	bhi.w	1795e <ull_conn_rx+0x1102>
			    (interval_max > 3200) ||
   16e0c:	428b      	cmp	r3, r1
   16e0e:	f200 85a6 	bhi.w	1795e <ull_conn_rx+0x1102>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16e12:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   16e14:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   16e16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16e1a:	f080 85a0 	bcs.w	1795e <ull_conn_rx+0x1102>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16e1e:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   16e20:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   16e24:	f1ae 020a 	sub.w	r2, lr, #10
   16e28:	f640 4876 	movw	r8, #3190	; 0xc76
   16e2c:	b292      	uxth	r2, r2
   16e2e:	4542      	cmp	r2, r8
   16e30:	f200 8595 	bhi.w	1795e <ull_conn_rx+0x1102>
			     ((latency + 1) * interval_max)) ||
   16e34:	3301      	adds	r3, #1
   16e36:	b29b      	uxth	r3, r3
   16e38:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   16e3c:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   16e40:	f080 858d 	bcs.w	1795e <ull_conn_rx+0x1102>
			     ((latency + 1) * interval_max)) ||
   16e44:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   16e48:	4291      	cmp	r1, r2
   16e4a:	f0c0 8588 	bcc.w	1795e <ull_conn_rx+0x1102>
			conn->llcp_conn_param.preferred_periodicity =
   16e4e:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16e52:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   16e56:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16e5a:	2301      	movs	r3, #1
   16e5c:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   16e60:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   16e62:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   16e66:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   16e6a:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   16e6e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16e72:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   16e76:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   16e7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16e7e:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   16e82:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   16e86:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   16e8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   16e8e:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   16e92:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   16e96:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   16e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   16e9e:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   16ea2:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   16ea6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   16eaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   16eae:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   16eb2:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   16eb6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   16eba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   16ebe:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   16ec2:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   16ec6:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   16eca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   16ece:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   16ed2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   16ed6:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16eda:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
   16ede:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   16ee2:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16ee6:	e506      	b.n	168f6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   16ee8:	7f6b      	ldrb	r3, [r5, #29]
   16eea:	2b18      	cmp	r3, #24
   16eec:	f47f ad37 	bne.w	1695e <ull_conn_rx+0x102>
	return conn_upd_curr && (conn_upd_curr != conn);
   16ef0:	495c      	ldr	r1, [pc, #368]	; (17064 <ull_conn_rx+0x808>)
   16ef2:	680b      	ldr	r3, [r1, #0]
   16ef4:	2b00      	cmp	r3, #0
   16ef6:	f000 827a 	beq.w	173ee <ull_conn_rx+0xb92>
   16efa:	429c      	cmp	r4, r3
   16efc:	f000 8277 	beq.w	173ee <ull_conn_rx+0xb92>
			nack = reject_ext_ind_send(conn, *rx,
   16f00:	2320      	movs	r3, #32
   16f02:	220f      	movs	r2, #15
   16f04:	4629      	mov	r1, r5
   16f06:	4620      	mov	r0, r4
}
   16f08:	b003      	add	sp, #12
   16f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   16f0e:	f7fe bfff 	b.w	15f10 <reject_ext_ind_send>
		if (conn->lll.role ||
   16f12:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16f16:	2b00      	cmp	r3, #0
   16f18:	f6ff ad21 	blt.w	1695e <ull_conn_rx+0x102>
   16f1c:	f895 901d 	ldrb.w	r9, [r5, #29]
   16f20:	f1b9 0f09 	cmp.w	r9, #9
   16f24:	f47f ad1b 	bne.w	1695e <ull_conn_rx+0x102>
	if (conn->common.txn_lock) {
   16f28:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
   16f2c:	f010 0602 	ands.w	r6, r0, #2
   16f30:	f47f ace1 	bne.w	168f6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16f34:	484c      	ldr	r0, [pc, #304]	; (17068 <ull_conn_rx+0x80c>)
   16f36:	f7fa f8a3 	bl	11080 <mem_acquire>
	if (!tx) {
   16f3a:	4607      	mov	r7, r0
   16f3c:	2800      	cmp	r0, #0
   16f3e:	f000 8233 	beq.w	173a8 <ull_conn_rx+0xb4c>
	conn->common.txn_lock = 1U;
   16f42:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   16f46:	4946      	ldr	r1, [pc, #280]	; (17060 <ull_conn_rx+0x804>)
	conn->common.txn_lock = 1U;
   16f48:	f043 0302 	orr.w	r3, r3, #2
   16f4c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
   16f50:	6a2a      	ldr	r2, [r5, #32]
   16f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   16f54:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16f56:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   16f5a:	400a      	ands	r2, r1
   16f5c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   16f60:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16f64:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   16f68:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16f6c:	4013      	ands	r3, r2
   16f6e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   16f72:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   16f76:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   16f7a:	f7fd fa71 	bl	14460 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   16f7e:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16f82:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   16f86:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
   16f8a:	4b35      	ldr	r3, [pc, #212]	; (17060 <ull_conn_rx+0x804>)
   16f8c:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   16f90:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   16f92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   16f96:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   16f9a:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16f9e:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   16fa2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   16fa6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
   16faa:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   16fae:	f043 0301 	orr.w	r3, r3, #1
   16fb2:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16fb6:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16fb8:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16fbc:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16fc0:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16fc2:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16fc4:	18b8      	adds	r0, r7, r2
   16fc6:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16fc8:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16fcc:	f00d fcf2 	bl	249b4 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   16fd0:	f7fd fa46 	bl	14460 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   16fd4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
   16fd8:	7339      	strb	r1, [r7, #12]
   16fda:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   16fdc:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16fe0:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   16fe4:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   16fe6:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16fe8:	723b      	strb	r3, [r7, #8]
   16fea:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   16fec:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16ff0:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   16ff2:	4620      	mov	r0, r4
   16ff4:	727b      	strb	r3, [r7, #9]
   16ff6:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   16ff8:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   16ffa:	73fe      	strb	r6, [r7, #15]
   16ffc:	72fa      	strb	r2, [r7, #11]
   16ffe:	4639      	mov	r1, r7
   17000:	f7fe fdd8 	bl	15bb4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17004:	2301      	movs	r3, #1
   17006:	712b      	strb	r3, [r5, #4]
	return 0;
   17008:	4630      	mov	r0, r6
   1700a:	e477      	b.n	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1700c:	7f6b      	ldrb	r3, [r5, #29]
   1700e:	2b02      	cmp	r3, #2
   17010:	f47f aca5 	bne.w	1695e <ull_conn_rx+0x102>
		} else if ((conn->llcp_conn_param.ack !=
   17014:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			    conn->llcp_conn_param.req) &&
   17018:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
   1701c:	4293      	cmp	r3, r2
			   (llctrl->unknown_rsp.type ==
   1701e:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   17022:	d002      	beq.n	1702a <ull_conn_rx+0x7ce>
			    conn->llcp_conn_param.req) &&
   17024:	2b0f      	cmp	r3, #15
   17026:	f000 83c5 	beq.w	177b4 <ull_conn_rx+0xf58>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1702a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1702e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   17032:	4291      	cmp	r1, r2
   17034:	d002      	beq.n	1703c <ull_conn_rx+0x7e0>
   17036:	2b14      	cmp	r3, #20
   17038:	f000 8439 	beq.w	178ae <ull_conn_rx+0x1052>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1703c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   17040:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   17044:	4291      	cmp	r1, r2
   17046:	d002      	beq.n	1704e <ull_conn_rx+0x7f2>
   17048:	2b16      	cmp	r3, #22
   1704a:	f000 849a 	beq.w	17982 <ull_conn_rx+0x1126>
			switch (llctrl->unknown_rsp.type) {
   1704e:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17050:	bf04      	itt	eq
   17052:	2301      	moveq	r3, #1
   17054:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   17056:	2300      	movs	r3, #0
   17058:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   1705c:	4618      	mov	r0, r3
		break;
   1705e:	e44d      	b.n	168fc <ull_conn_rx+0xa0>
   17060:	087830d0 	.word	0x087830d0
   17064:	20002aac 	.word	0x20002aac
   17068:	20002b40 	.word	0x20002b40
		if ((conn->llcp_req == conn->llcp_ack) ||
   1706c:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   17070:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   17074:	4299      	cmp	r1, r3
   17076:	f43f ac72 	beq.w	1695e <ull_conn_rx+0x102>
   1707a:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
   1707e:	2903      	cmp	r1, #3
   17080:	f47f ac6d 	bne.w	1695e <ull_conn_rx+0x102>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   17084:	7f69      	ldrb	r1, [r5, #29]
   17086:	2901      	cmp	r1, #1
   17088:	f47f ac69 	bne.w	1695e <ull_conn_rx+0x102>
		if (conn->lll.role) {
   1708c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   17090:	2900      	cmp	r1, #0
   17092:	f2c0 846c 	blt.w	1796e <ull_conn_rx+0x1112>
			conn->llcp_enc.pause_rx = 0U;
   17096:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
   1709a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
   1709e:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   170a0:	f022 0203 	bic.w	r2, r2, #3
   170a4:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
   170a8:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
   170ac:	0757      	lsls	r7, r2, #29
   170ae:	f57f ac24 	bpl.w	168fa <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   170b2:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   170b6:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   170b8:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
   170bc:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   170be:	712b      	strb	r3, [r5, #4]
   170c0:	e41c      	b.n	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   170c2:	7f6a      	ldrb	r2, [r5, #29]
   170c4:	2a01      	cmp	r2, #1
   170c6:	f47f ac4a 	bne.w	1695e <ull_conn_rx+0x102>
		conn->procedure_expire = 0U;
   170ca:	2300      	movs	r3, #0
   170cc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   170d0:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   170d2:	712a      	strb	r2, [r5, #4]
		break;
   170d4:	e412      	b.n	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   170d6:	7f6b      	ldrb	r3, [r5, #29]
   170d8:	2b03      	cmp	r3, #3
   170da:	f47f ac40 	bne.w	1695e <ull_conn_rx+0x102>
		if (!conn->lll.role) {
   170de:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   170e2:	2b00      	cmp	r3, #0
   170e4:	f2c0 82e3 	blt.w	176ae <ull_conn_rx+0xe52>
			if ((conn->llcp_phy.ack !=
   170e8:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   170ec:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   170f0:	4281      	cmp	r1, r0
   170f2:	d007      	beq.n	17104 <ull_conn_rx+0x8a8>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   170f4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   170f8:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   170fc:	3a01      	subs	r2, #1
   170fe:	2a02      	cmp	r2, #2
   17100:	f240 8431 	bls.w	17966 <ull_conn_rx+0x110a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   17104:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   17108:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1710c:	1a9b      	subs	r3, r3, r2
   1710e:	f003 0303 	and.w	r3, r3, #3
   17112:	2b02      	cmp	r3, #2
   17114:	f000 83c2 	beq.w	1789c <ull_conn_rx+0x1040>
				     LLCP_ENCRYPTION)) ||
   17118:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1711c:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   17120:	429a      	cmp	r2, r3
   17122:	f000 83d9 	beq.w	178d8 <ull_conn_rx+0x107c>
				nack = reject_ext_ind_send(conn, *rx,
   17126:	232a      	movs	r3, #42	; 0x2a
   17128:	2216      	movs	r2, #22
   1712a:	e6eb      	b.n	16f04 <ull_conn_rx+0x6a8>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1712c:	7f6f      	ldrb	r7, [r5, #29]
   1712e:	2f01      	cmp	r7, #1
   17130:	f47f ac15 	bne.w	1695e <ull_conn_rx+0x102>
	if (conn->common.txn_lock) {
   17134:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   17138:	f013 0602 	ands.w	r6, r3, #2
   1713c:	f040 83aa 	bne.w	17894 <ull_conn_rx+0x1038>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17140:	48c4      	ldr	r0, [pc, #784]	; (17454 <ull_conn_rx+0xbf8>)
   17142:	f7f9 ff9d 	bl	11080 <mem_acquire>
	if (!tx) {
   17146:	4601      	mov	r1, r0
   17148:	2800      	cmp	r0, #0
   1714a:	f000 812d 	beq.w	173a8 <ull_conn_rx+0xb4c>
	conn->common.txn_lock = 1U;
   1714e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   17152:	f043 0302 	orr.w	r3, r3, #2
   17156:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1715a:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1715c:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1715e:	f043 0303 	orr.w	r3, r3, #3
   17162:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   17164:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   17166:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   17168:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1716a:	f7fe fd23 	bl	15bb4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1716e:	712f      	strb	r7, [r5, #4]
	return 0;
   17170:	4630      	mov	r0, r6
   17172:	f7ff bbc3 	b.w	168fc <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   17176:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1717a:	2b00      	cmp	r3, #0
   1717c:	f6bf ac65 	bge.w	16a4a <ull_conn_rx+0x1ee>
   17180:	f7ff bbed 	b.w	1695e <ull_conn_rx+0x102>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   17184:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17188:	2b00      	cmp	r3, #0
   1718a:	f6ff abe8 	blt.w	1695e <ull_conn_rx+0x102>
   1718e:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   17192:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   17196:	429a      	cmp	r2, r3
   17198:	f43f abe1 	beq.w	1695e <ull_conn_rx+0x102>
   1719c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   171a0:	2b03      	cmp	r3, #3
   171a2:	f47f abdc 	bne.w	1695e <ull_conn_rx+0x102>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   171a6:	7f6b      	ldrb	r3, [r5, #29]
   171a8:	2b01      	cmp	r3, #1
   171aa:	f47f abd8 	bne.w	1695e <ull_conn_rx+0x102>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   171ae:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   171b2:	f36f 0201 	bfc	r2, #0, #2
   171b6:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
   171ba:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   171bc:	712b      	strb	r3, [r5, #4]
		break;
   171be:	f7ff bb9d 	b.w	168fc <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   171c2:	7f6b      	ldrb	r3, [r5, #29]
   171c4:	2b01      	cmp	r3, #1
   171c6:	f47f abca 	bne.w	1695e <ull_conn_rx+0x102>
	} else if (!conn->lll.role) {
   171ca:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   171ce:	2b00      	cmp	r3, #0
   171d0:	f2c0 8105 	blt.w	173de <ull_conn_rx+0xb82>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   171d4:	489f      	ldr	r0, [pc, #636]	; (17454 <ull_conn_rx+0xbf8>)
   171d6:	f7f9 ff53 	bl	11080 <mem_acquire>
		if (!tx) {
   171da:	2800      	cmp	r0, #0
   171dc:	f000 80e4 	beq.w	173a8 <ull_conn_rx+0xb4c>
	conn->lll.enc_rx = 0;
   171e0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   171e4:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
   171e8:	f023 0318 	bic.w	r3, r3, #24
   171ec:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   171f0:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   171f4:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   171f6:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   171fa:	2201      	movs	r2, #1
   171fc:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   171fe:	f043 0303 	orr.w	r3, r3, #3
   17202:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   17204:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   17208:	220b      	movs	r2, #11
   1720a:	71c2      	strb	r2, [r0, #7]
	if (
   1720c:	2b00      	cmp	r3, #0
   1720e:	f000 819d 	beq.w	1754c <ull_conn_rx+0xcf0>
	    !conn->llcp_enc.pause_tx &&
   17212:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   17216:	0796      	lsls	r6, r2, #30
   17218:	f100 8198 	bmi.w	1754c <ull_conn_rx+0xcf0>
	    !conn->llcp_phy.pause_tx &&
   1721c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   17220:	07d1      	lsls	r1, r2, #31
   17222:	f100 8193 	bmi.w	1754c <ull_conn_rx+0xcf0>
		if (conn->tx_head == conn->tx_data) {
   17226:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   1722a:	4293      	cmp	r3, r2
   1722c:	f000 851b 	beq.w	17c66 <ull_conn_rx+0x140a>
		} else if (!conn->tx_ctrl) {
   17230:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   17234:	2a00      	cmp	r2, #0
   17236:	f000 8525 	beq.w	17c84 <ull_conn_rx+0x1428>
	tx->next = conn->tx_ctrl_last->next;
   1723a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   1723e:	681a      	ldr	r2, [r3, #0]
   17240:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17242:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   17244:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   17248:	6803      	ldr	r3, [r0, #0]
   1724a:	2b00      	cmp	r3, #0
   1724c:	f47f ab53 	bne.w	168f6 <ull_conn_rx+0x9a>
   17250:	f7ff bbbe 	b.w	169d0 <ull_conn_rx+0x174>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   17254:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   17258:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1725c:	4293      	cmp	r3, r2
   1725e:	f43f ab4a 	beq.w	168f6 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   17262:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17264:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   17266:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
   1726a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1726e:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   17270:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   17274:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   17276:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17278:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1727a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1727e:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   17280:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   17284:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   17286:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   17288:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   1728a:	4618      	mov	r0, r3
   1728c:	f7ff bb36 	b.w	168fc <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   17290:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   17294:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   17298:	428b      	cmp	r3, r1
   1729a:	f43f ab2c 	beq.w	168f6 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1729e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   172a2:	2a23      	cmp	r2, #35	; 0x23
   172a4:	d012      	beq.n	172cc <ull_conn_rx+0xa70>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   172a6:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   172aa:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   172ae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   172b2:	f36f 0100 	bfc	r1, #0, #1
   172b6:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   172ba:	2100      	movs	r1, #0
   172bc:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   172c0:	f3c3 0102 	ubfx	r1, r3, #0, #3
   172c4:	f361 1306 	bfi	r3, r1, #4, #3
   172c8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   172cc:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   172d0:	075e      	lsls	r6, r3, #29
   172d2:	f57f ab10 	bpl.w	168f6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   172d6:	231c      	movs	r3, #28
   172d8:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   172da:	772a      	strb	r2, [r5, #28]
   172dc:	e4c4      	b.n	16c68 <ull_conn_rx+0x40c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   172de:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   172e2:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   172e6:	4293      	cmp	r3, r2
   172e8:	f43f ab05 	beq.w	168f6 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   172ec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   172f0:	2b00      	cmp	r3, #0
   172f2:	db04      	blt.n	172fe <ull_conn_rx+0xaa2>
   172f4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   172f8:	2b1a      	cmp	r3, #26
   172fa:	f000 852d 	beq.w	17d58 <ull_conn_rx+0x14fc>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   172fe:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   17302:	f003 000f 	and.w	r0, r3, #15
   17306:	2804      	cmp	r0, #4
   17308:	d106      	bne.n	17318 <ull_conn_rx+0xabc>
	conn_upd_curr = NULL;
   1730a:	4853      	ldr	r0, [pc, #332]	; (17458 <ull_conn_rx+0xbfc>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1730c:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   17310:	2200      	movs	r2, #0
   17312:	6002      	str	r2, [r0, #0]
		conn->procedure_expire = 0U;
   17314:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
   17318:	06d8      	lsls	r0, r3, #27
   1731a:	f57f aaec 	bpl.w	168f6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1731e:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17320:	07c9      	lsls	r1, r1, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17322:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17324:	f100 83af 	bmi.w	17a86 <ull_conn_rx+0x122a>
	cu->status = rej_ext_ind->error_code;
   17328:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1732c:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   1732e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   17330:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
   17334:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   17336:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   17338:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   1733a:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   1733e:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   17342:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   17344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   17348:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   1734c:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1734e:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   17350:	f7ff bad4 	b.w	168fc <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   17354:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
   17358:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1735c:	428b      	cmp	r3, r1
   1735e:	f43f aaca 	beq.w	168f6 <ull_conn_rx+0x9a>
   17362:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   17366:	2b03      	cmp	r3, #3
   17368:	f47f aac5 	bne.w	168f6 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   1736c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   17370:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   17374:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   17376:	f022 0203 	bic.w	r2, r2, #3
   1737a:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   1737e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   17382:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   17386:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1738a:	210d      	movs	r1, #13
   1738c:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   1738e:	4618      	mov	r0, r3
   17390:	f7ff bab4 	b.w	168fc <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   17394:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   17396:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1739a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1739e:	2a00      	cmp	r2, #0
   173a0:	f47f aaa9 	bne.w	168f6 <ull_conn_rx+0x9a>
   173a4:	f7ff bb14 	b.w	169d0 <ull_conn_rx+0x174>
		*err = -ENOBUFS;
   173a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   173ac:	f7ff baa6 	b.w	168fc <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
   173b0:	6813      	ldr	r3, [r2, #0]
   173b2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   173b6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   173ba:	2b00      	cmp	r3, #0
   173bc:	f47f aafe 	bne.w	169bc <ull_conn_rx+0x160>
			tx->next = conn->tx_head->next;
   173c0:	6813      	ldr	r3, [r2, #0]
   173c2:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   173c4:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   173c6:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   173c8:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
   173cc:	2a00      	cmp	r2, #0
   173ce:	f47f aa92 	bne.w	168f6 <ull_conn_rx+0x9a>
   173d2:	f7ff bafd 	b.w	169d0 <ull_conn_rx+0x174>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   173d6:	7f6b      	ldrb	r3, [r5, #29]
   173d8:	2b01      	cmp	r3, #1
   173da:	f47f aac0 	bne.w	1695e <ull_conn_rx+0x102>
		conn->lll.enc_tx = 0;
   173de:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   173e2:	f36f 1304 	bfc	r3, #4, #1
   173e6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
   173ea:	f7ff ba84 	b.w	168f6 <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
   173ee:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   173f2:	2800      	cmp	r0, #0
   173f4:	f2c0 80b5 	blt.w	17562 <ull_conn_rx+0xd06>
					conn->llcp_conn_param.ack) &&
   173f8:	f894 c15d 	ldrb.w	ip, [r4, #349]	; 0x15d
			if ((conn->llcp_conn_param.req !=
   173fc:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
   17400:	4560      	cmp	r0, ip
   17402:	d00a      	beq.n	1741a <ull_conn_rx+0xbbe>
			    ((conn->llcp_conn_param.state ==
   17404:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
   17408:	f010 0f0b 	tst.w	r0, #11
   1740c:	f000 824c 	beq.w	178a8 <ull_conn_rx+0x104c>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   17410:	f000 000f 	and.w	r0, r0, #15
   17414:	2806      	cmp	r0, #6
   17416:	f000 8247 	beq.w	178a8 <ull_conn_rx+0x104c>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1741a:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
   1741e:	f894 60bc 	ldrb.w	r6, [r4, #188]	; 0xbc
   17422:	1b80      	subs	r0, r0, r6
   17424:	f000 0003 	and.w	r0, r0, #3
   17428:	2802      	cmp	r0, #2
   1742a:	f000 8323 	beq.w	17a74 <ull_conn_rx+0x1218>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1742e:	f894 6194 	ldrb.w	r6, [r4, #404]	; 0x194
   17432:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   17436:	4286      	cmp	r6, r0
   17438:	f000 835c 	beq.w	17af4 <ull_conn_rx+0x1298>
				nack = reject_ext_ind_send(conn, *rx,
   1743c:	232a      	movs	r3, #42	; 0x2a
   1743e:	e560      	b.n	16f02 <ull_conn_rx+0x6a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17440:	7913      	ldrb	r3, [r2, #4]
   17442:	f003 0303 	and.w	r3, r3, #3
   17446:	2b03      	cmp	r3, #3
   17448:	f000 82be 	beq.w	179c8 <ull_conn_rx+0x116c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1744c:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
   17450:	f7ff bab6 	b.w	169c0 <ull_conn_rx+0x164>
   17454:	20002b40 	.word	0x20002b40
   17458:	20002aac 	.word	0x20002aac
	if (conn->common.txn_lock) {
   1745c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   17460:	079b      	lsls	r3, r3, #30
   17462:	f53f aa48 	bmi.w	168f6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17466:	48d2      	ldr	r0, [pc, #840]	; (177b0 <ull_conn_rx+0xf54>)
   17468:	f7f9 fe0a 	bl	11080 <mem_acquire>
	if (!tx) {
   1746c:	4603      	mov	r3, r0
   1746e:	2800      	cmp	r0, #0
   17470:	d09a      	beq.n	173a8 <ull_conn_rx+0xb4c>
	conn->common.txn_lock = 1U;
   17472:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   17476:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
   1747a:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   1747e:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   17482:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   17486:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
   1748a:	f042 0202 	orr.w	r2, r2, #2
   1748e:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   17492:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   17496:	428a      	cmp	r2, r1
   17498:	f040 8430 	bne.w	17cfc <ull_conn_rx+0x14a0>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   1749c:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1749e:	291a      	cmp	r1, #26
   174a0:	f240 826d 	bls.w	1797e <ull_conn_rx+0x1122>
			eff_tx_octets = MIN(max_rx_octets,
   174a4:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   174a8:	4281      	cmp	r1, r0
   174aa:	bf28      	it	cs
   174ac:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   174ae:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   174b0:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   174b4:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   174b6:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   174b8:	bf34      	ite	cc
   174ba:	46c6      	movcc	lr, r8
   174bc:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   174c0:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   174c4:	bf34      	ite	cc
   174c6:	4658      	movcc	r0, fp
   174c8:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   174cc:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   174d0:	bf34      	ite	cc
   174d2:	46d4      	movcc	ip, sl
   174d4:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   174d8:	45c6      	cmp	lr, r8
   174da:	f000 828b 	beq.w	179f4 <ull_conn_rx+0x1198>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   174de:	3a01      	subs	r2, #1
   174e0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
   174e4:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
   174e8:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
   174ec:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
   174f0:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
   174f4:	2b00      	cmp	r3, #0
   174f6:	f000 82b2 	beq.w	17a5e <ull_conn_rx+0x1202>
				conn->llcp_length.state =
   174fa:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   174fe:	2505      	movs	r5, #5
   17500:	f365 0202 	bfi	r2, r5, #0, #3
   17504:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
   17508:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1750c:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   1750e:	6832      	ldr	r2, [r6, #0]
   17510:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   17512:	6832      	ldr	r2, [r6, #0]
   17514:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
   17518:	2200      	movs	r2, #0
   1751a:	6032      	str	r2, [r6, #0]
	if (tx) {
   1751c:	2b00      	cmp	r3, #0
   1751e:	f43f a9ec 	beq.w	168fa <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17522:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   17524:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17526:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1752a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1752c:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1752e:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17530:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   17532:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   17534:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17538:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1753c:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1753e:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17540:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   17542:	f7fe fb37 	bl	15bb4 <ctrl_tx_sec_enqueue>
	return 0;
   17546:	2000      	movs	r0, #0
}
   17548:	f7ff b9d8 	b.w	168fc <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   1754c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   17550:	2a00      	cmp	r2, #0
   17552:	f47f ae72 	bne.w	1723a <ull_conn_rx+0x9de>
			tx->next = conn->tx_head;
   17556:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17558:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   1755c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   17560:	e672      	b.n	17248 <ull_conn_rx+0x9ec>
			    conn->llcp_conn_param.ack) ||
   17562:	f894 615d 	ldrb.w	r6, [r4, #349]	; 0x15d
		} else if ((conn->llcp_conn_param.req ==
   17566:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1756a:	42b2      	cmp	r2, r6
   1756c:	d005      	beq.n	1757a <ull_conn_rx+0xd1e>
			    conn->llcp_conn_param.ack) ||
   1756e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   17572:	f012 0f0b 	tst.w	r2, #11
   17576:	f47f a9be 	bne.w	168f6 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1757a:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1757e:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17582:	2a05      	cmp	r2, #5
   17584:	f240 8091 	bls.w	176aa <ull_conn_rx+0xe4e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17588:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1758c:	fa1f f089 	uxth.w	r0, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17590:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   17594:	f200 8089 	bhi.w	176aa <ull_conn_rx+0xe4e>
			    (interval_max > 3200) ||
   17598:	4282      	cmp	r2, r0
   1759a:	f200 8086 	bhi.w	176aa <ull_conn_rx+0xe4e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1759e:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   175a2:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   175a6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   175aa:	d27e      	bcs.n	176aa <ull_conn_rx+0xe4e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   175ac:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   175b0:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   175b4:	f1a2 070a 	sub.w	r7, r2, #10
   175b8:	f640 4b76 	movw	fp, #3190	; 0xc76
   175bc:	b2bf      	uxth	r7, r7
   175be:	455f      	cmp	r7, fp
   175c0:	d873      	bhi.n	176aa <ull_conn_rx+0xe4e>
			     ((latency + 1) * interval_max)) ||
   175c2:	f10c 0701 	add.w	r7, ip, #1
   175c6:	b2bf      	uxth	r7, r7
   175c8:	fb00 f707 	mul.w	r7, r0, r7
			    (timeout < 10) || (timeout > 3200) ||
   175cc:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   175d0:	d26b      	bcs.n	176aa <ull_conn_rx+0xe4e>
			     ((latency + 1) * interval_max)) ||
   175d2:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   175d6:	4558      	cmp	r0, fp
   175d8:	d367      	bcc.n	176aa <ull_conn_rx+0xe4e>
			conn->llcp_conn_param.interval_min = interval_min;
   175da:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
   175de:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   175e2:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   175e6:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
   175ea:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   175ee:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   175f2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   175f6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   175fa:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   175fe:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   17602:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   17606:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1760a:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   1760e:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   17612:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   17616:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1761a:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   1761e:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   17622:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   17626:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1762a:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   1762e:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   17632:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   17636:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1763a:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   1763e:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   17642:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   17646:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1764a:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   1764e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   17652:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   17656:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   1765a:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
   1765e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   17660:	42b8      	cmp	r0, r7
   17662:	f000 8359 	beq.w	17d18 <ull_conn_rx+0x14bc>
				conn->llcp_conn_param.state =
   17666:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1766a:	2003      	movs	r0, #3
   1766c:	f360 0203 	bfi	r2, r0, #0, #4
   17670:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
   17674:	3e01      	subs	r6, #1
   17676:	f884 615d 	strb.w	r6, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   1767a:	2b00      	cmp	r3, #0
   1767c:	f47f a93d 	bne.w	168fa <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   17680:	600c      	str	r4, [r1, #0]
	int nack = 0;
   17682:	4618      	mov	r0, r3
   17684:	f7ff b93a 	b.w	168fc <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   17688:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   1768c:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   17690:	4293      	cmp	r3, r2
   17692:	f43f addf 	beq.w	17254 <ull_conn_rx+0x9f8>
		rej_ext_ind->error_code = rej_ind->error_code;
   17696:	f895 3020 	ldrb.w	r3, [r5, #32]
   1769a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1769e:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   176a2:	2800      	cmp	r0, #0
   176a4:	f6bf ae28 	bge.w	172f8 <ull_conn_rx+0xa9c>
   176a8:	e629      	b.n	172fe <ull_conn_rx+0xaa2>
				nack = reject_ext_ind_send(conn, *rx,
   176aa:	231e      	movs	r3, #30
   176ac:	e429      	b.n	16f02 <ull_conn_rx+0x6a6>
	if (conn->common.txn_lock) {
   176ae:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   176b2:	079e      	lsls	r6, r3, #30
   176b4:	f53f a91f 	bmi.w	168f6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   176b8:	483d      	ldr	r0, [pc, #244]	; (177b0 <ull_conn_rx+0xf54>)
   176ba:	f7f9 fce1 	bl	11080 <mem_acquire>
	if (!tx) {
   176be:	4602      	mov	r2, r0
   176c0:	2800      	cmp	r0, #0
   176c2:	f43f ae71 	beq.w	173a8 <ull_conn_rx+0xb4c>
	conn->common.txn_lock = 1U;
   176c6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   176ca:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   176ce:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
	conn->common.txn_lock = 1U;
   176d2:	f043 0302 	orr.w	r3, r3, #2
   176d6:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   176da:	2302      	movs	r3, #2
   176dc:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   176e0:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   176e4:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   176e8:	4283      	cmp	r3, r0
   176ea:	d115      	bne.n	17718 <ull_conn_rx+0xebc>
		conn->llcp_phy.ack--;
   176ec:	3b01      	subs	r3, #1
   176ee:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
   176f2:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
			conn->phy_pref_rx;
   176f6:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
		conn->llcp_phy.tx =
   176fa:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   176fe:	f240 43fc 	movw	r3, #1276	; 0x4fc
   17702:	f021 0104 	bic.w	r1, r1, #4
   17706:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1770a:	430b      	orrs	r3, r1
		conn->procedure_expire =
   1770c:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
		conn->llcp_phy.tx =
   17710:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		conn->procedure_expire =
   17714:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
   17718:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
   1771c:	f895 3020 	ldrb.w	r3, [r5, #32]
   17720:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   17724:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17728:	f3c1 0682 	ubfx	r6, r1, #2, #3
   1772c:	4033      	ands	r3, r6
   1772e:	009b      	lsls	r3, r3, #2
   17730:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   17734:	f001 0103 	and.w	r1, r1, #3
   17738:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1773a:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   1773c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   17740:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   17742:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17746:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   17748:	4603      	mov	r3, r0
   1774a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1774e:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   17750:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17754:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17758:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1775a:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1775e:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   17760:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17762:	7111      	strb	r1, [r2, #4]
	if (
   17764:	2b00      	cmp	r3, #0
   17766:	f000 80ac 	beq.w	178c2 <ull_conn_rx+0x1066>
	    !conn->llcp_enc.pause_tx &&
   1776a:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
   1776e:	0788      	lsls	r0, r1, #30
   17770:	f100 80a7 	bmi.w	178c2 <ull_conn_rx+0x1066>
	    !conn->llcp_phy.pause_tx &&
   17774:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
   17778:	07c9      	lsls	r1, r1, #31
   1777a:	f100 80a2 	bmi.w	178c2 <ull_conn_rx+0x1066>
		if (conn->tx_head == conn->tx_data) {
   1777e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   17782:	428b      	cmp	r3, r1
   17784:	f000 8253 	beq.w	17c2e <ull_conn_rx+0x13d2>
		} else if (!conn->tx_ctrl) {
   17788:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   1778c:	2900      	cmp	r1, #0
   1778e:	f000 82ad 	beq.w	17cec <ull_conn_rx+0x1490>
	tx->next = conn->tx_ctrl_last->next;
   17792:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   17796:	6819      	ldr	r1, [r3, #0]
   17798:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1779a:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1779c:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
   177a0:	6813      	ldr	r3, [r2, #0]
   177a2:	2b00      	cmp	r3, #0
   177a4:	f47f a8a7 	bne.w	168f6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   177a8:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   177ac:	f7ff b8a3 	b.w	168f6 <ull_conn_rx+0x9a>
   177b0:	20002b40 	.word	0x20002b40
			conn->llcp_conn_param.disabled = 1U;
   177b4:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   177b8:	f043 0320 	orr.w	r3, r3, #32
   177bc:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
   177c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   177c4:	2b00      	cmp	r3, #0
   177c6:	f2c0 813b 	blt.w	17a40 <ull_conn_rx+0x11e4>
				LL_ASSERT(conn->llcp_cu.req ==
   177ca:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   177ce:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   177d2:	429a      	cmp	r2, r3
   177d4:	d00e      	beq.n	177f4 <ull_conn_rx+0xf98>
   177d6:	4ac1      	ldr	r2, [pc, #772]	; (17adc <ull_conn_rx+0x1280>)
   177d8:	49c1      	ldr	r1, [pc, #772]	; (17ae0 <ull_conn_rx+0x1284>)
   177da:	48c2      	ldr	r0, [pc, #776]	; (17ae4 <ull_conn_rx+0x1288>)
   177dc:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   177e0:	f00a ff90 	bl	22704 <printk>
   177e4:	4040      	eors	r0, r0
   177e6:	f380 8811 	msr	BASEPRI, r0
   177ea:	f04f 0003 	mov.w	r0, #3
   177ee:	df02      	svc	2
   177f0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
   177f4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   177f8:	2106      	movs	r1, #6
   177fa:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   177fe:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   17800:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   17802:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
   17806:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1780a:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   1780c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17810:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17814:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   17818:	00db      	lsls	r3, r3, #3
   1781a:	f022 020f 	bic.w	r2, r2, #15
   1781e:	430b      	orrs	r3, r1
   17820:	4313      	orrs	r3, r2
   17822:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
   17826:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
   1782a:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
   1782e:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
   17832:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   17834:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
   17838:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
   1783c:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
   17840:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17844:	7129      	strb	r1, [r5, #4]
				break;
   17846:	f7ff b859 	b.w	168fc <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1784a:	48a7      	ldr	r0, [pc, #668]	; (17ae8 <ull_conn_rx+0x128c>)
   1784c:	f7f9 fc18 	bl	11080 <mem_acquire>
		if (!tx) {
   17850:	4601      	mov	r1, r0
   17852:	2800      	cmp	r0, #0
   17854:	f43f ada8 	beq.w	173a8 <ull_conn_rx+0xb4c>
		conn->llcp_version.tx = 1U;
   17858:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   1785c:	f043 0301 	orr.w	r3, r3, #1
   17860:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17864:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   17866:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17868:	220c      	movs	r2, #12
   1786a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1786c:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1786e:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17872:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17876:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17878:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1787a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1787e:	2205      	movs	r2, #5
		v->sub_version_number =
   17880:	72c3      	strb	r3, [r0, #11]
   17882:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17884:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   17886:	4620      	mov	r0, r4
   17888:	f7fe f994 	bl	15bb4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1788c:	2301      	movs	r3, #1
   1788e:	712b      	strb	r3, [r5, #4]
   17890:	f7ff ba09 	b.w	16ca6 <ull_conn_rx+0x44a>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17894:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   17896:	2000      	movs	r0, #0
   17898:	f7ff b830 	b.w	168fc <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   1789c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   178a0:	2b03      	cmp	r3, #3
   178a2:	f47f ac40 	bne.w	17126 <ull_conn_rx+0x8ca>
   178a6:	e437      	b.n	17118 <ull_conn_rx+0x8bc>
				nack = reject_ext_ind_send(conn, *rx,
   178a8:	2323      	movs	r3, #35	; 0x23
   178aa:	f7ff bb2a 	b.w	16f02 <ull_conn_rx+0x6a6>
			conn->llcp_length.disabled = 1U;
   178ae:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   178b2:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
   178b6:	f043 0308 	orr.w	r3, r3, #8
   178ba:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   178be:	f7ff bbca 	b.w	17056 <ull_conn_rx+0x7fa>
		if (!conn->tx_ctrl) {
   178c2:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   178c6:	2900      	cmp	r1, #0
   178c8:	f47f af63 	bne.w	17792 <ull_conn_rx+0xf36>
			tx->next = conn->tx_head;
   178cc:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   178ce:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   178d2:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
   178d6:	e763      	b.n	177a0 <ull_conn_rx+0xf44>
				conn->llcp_phy.state =
   178d8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   178dc:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   178de:	f043 0303 	orr.w	r3, r3, #3
   178e2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   178e6:	d111      	bne.n	1790c <ull_conn_rx+0x10b0>
					conn->llcp_phy.tx =
   178e8:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
   178ec:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
   178f0:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   178f2:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   178f6:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
   178fa:	f240 43fc 	movw	r3, #1276	; 0x4fc
   178fe:	f022 0204 	bic.w	r2, r2, #4
   17902:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   17906:	4313      	orrs	r3, r2
   17908:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   1790c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   17910:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   17914:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   17918:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1791c:	f003 0203 	and.w	r2, r3, #3
   17920:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17924:	4003      	ands	r3, r0
   17926:	009b      	lsls	r3, r3, #2
   17928:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1792c:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1792e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   17932:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17936:	d002      	beq.n	1793e <ull_conn_rx+0x10e2>
   17938:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1793c:	d105      	bne.n	1794a <ull_conn_rx+0x10ee>
					conn->llcp_phy.tx = 0;
   1793e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   17942:	f003 0303 	and.w	r3, r3, #3
   17946:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   1794a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1794e:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   17950:	4313      	orrs	r3, r2
   17952:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
   17956:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17958:	712a      	strb	r2, [r5, #4]
   1795a:	f7fe bfcf 	b.w	168fc <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   1795e:	231e      	movs	r3, #30
   17960:	2210      	movs	r2, #16
   17962:	f7ff bacf 	b.w	16f04 <ull_conn_rx+0x6a8>
				nack = reject_ext_ind_send(conn, *rx,
   17966:	2323      	movs	r3, #35	; 0x23
   17968:	2216      	movs	r2, #22
   1796a:	f7ff bacb 	b.w	16f04 <ull_conn_rx+0x6a8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1796e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   17972:	f36f 0301 	bfc	r3, #0, #2
   17976:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   1797a:	f7ff bb97 	b.w	170ac <ull_conn_rx+0x850>
   1797e:	4649      	mov	r1, r9
   17980:	e595      	b.n	174ae <ull_conn_rx+0xc52>
			lll->phy_tx_time = lll->phy_tx;
   17982:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
   17986:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1798a:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   1798e:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   17992:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   17994:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17998:	f361 1206 	bfi	r2, r1, #4, #3
   1799c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
   179a0:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   179a4:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   179a8:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   179ac:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   179ae:	d078      	beq.n	17aa2 <ull_conn_rx+0x1246>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   179b0:	221c      	movs	r2, #28
   179b2:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   179b4:	2300      	movs	r3, #0
   179b6:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   179b8:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   179ba:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   179be:	f3c3 0302 	ubfx	r3, r3, #0, #3
   179c2:	77ab      	strb	r3, [r5, #30]
   179c4:	f7ff bb47 	b.w	17056 <ull_conn_rx+0x7fa>
	    ((pdu_data_tx->llctrl.opcode !=
   179c8:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   179ca:	2b03      	cmp	r3, #3
   179cc:	f43f acf8 	beq.w	173c0 <ull_conn_rx+0xb64>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   179d0:	2b0a      	cmp	r3, #10
   179d2:	f47f ad3b 	bne.w	1744c <ull_conn_rx+0xbf0>
   179d6:	e4f3      	b.n	173c0 <ull_conn_rx+0xb64>
	conn->llcp_enc.pause_rx = 0U;
   179d8:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   179dc:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   179e0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   179e2:	f021 0103 	bic.w	r1, r1, #3
   179e6:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   179ea:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   179ee:	4618      	mov	r0, r3
   179f0:	f7fe bf84 	b.w	168fc <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   179f4:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   179f6:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   179f8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   179fc:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17a00:	f000 810b 	beq.w	17c1a <ull_conn_rx+0x13be>
			conn->lll.max_rx_time = eff_rx_time;
   17a04:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
   17a08:	2b00      	cmp	r3, #0
   17a0a:	f000 8102 	beq.w	17c12 <ull_conn_rx+0x13b6>
					(conn->llcp_length.req - 1);
   17a0e:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   17a10:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
   17a14:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
   17a18:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
   17a1c:	2603      	movs	r6, #3
   17a1e:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   17a22:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
   17a26:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
   17a2a:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
   17a2e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   17a32:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   17a36:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17a38:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   17a3c:	84e8      	strh	r0, [r5, #38]	; 0x26
   17a3e:	e56d      	b.n	1751c <ull_conn_rx+0xcc0>
	conn_upd_curr = NULL;
   17a40:	4b2a      	ldr	r3, [pc, #168]	; (17aec <ull_conn_rx+0x1290>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17a42:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   17a46:	2200      	movs	r2, #0
   17a48:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   17a4a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   17a4e:	f013 0310 	ands.w	r3, r3, #16
   17a52:	d12a      	bne.n	17aaa <ull_conn_rx+0x124e>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17a54:	2201      	movs	r2, #1
   17a56:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   17a58:	4618      	mov	r0, r3
				break;
   17a5a:	f7fe bf4f 	b.w	168fc <ull_conn_rx+0xa0>
				conn->llcp_length.state =
   17a5e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
   17a62:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
   17a64:	2504      	movs	r5, #4
   17a66:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   17a6a:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
   17a6e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   17a72:	e549      	b.n	17508 <ull_conn_rx+0xcac>
				      0x03) == 0x02) &&
   17a74:	f894 00bd 	ldrb.w	r0, [r4, #189]	; 0xbd
   17a78:	2803      	cmp	r0, #3
   17a7a:	f47f acdf 	bne.w	1743c <ull_conn_rx+0xbe0>
   17a7e:	e4d6      	b.n	1742e <ull_conn_rx+0xbd2>
	struct node_tx *tx = NULL;
   17a80:	2300      	movs	r3, #0
   17a82:	f7ff b82b 	b.w	16adc <ull_conn_rx+0x280>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17a86:	4a15      	ldr	r2, [pc, #84]	; (17adc <ull_conn_rx+0x1280>)
   17a88:	4919      	ldr	r1, [pc, #100]	; (17af0 <ull_conn_rx+0x1294>)
   17a8a:	4816      	ldr	r0, [pc, #88]	; (17ae4 <ull_conn_rx+0x1288>)
   17a8c:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   17a90:	f00a fe38 	bl	22704 <printk>
   17a94:	4040      	eors	r0, r0
   17a96:	f380 8811 	msr	BASEPRI, r0
   17a9a:	f04f 0003 	mov.w	r0, #3
   17a9e:	df02      	svc	2
   17aa0:	e442      	b.n	17328 <ull_conn_rx+0xacc>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17aa2:	2201      	movs	r2, #1
   17aa4:	711a      	strb	r2, [r3, #4]
   17aa6:	f7ff bad6 	b.w	17056 <ull_conn_rx+0x7fa>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17aaa:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17aac:	07ca      	lsls	r2, r1, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17aae:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17ab0:	f100 80cb 	bmi.w	17c4a <ull_conn_rx+0x13ee>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17ab4:	231a      	movs	r3, #26
   17ab6:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   17ab8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   17aba:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
   17abe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   17ac0:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   17ac2:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   17ac6:	227d      	movs	r2, #125	; 0x7d
   17ac8:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   17acc:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   17ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17ad2:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   17ad6:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   17ad8:	f7ff babd 	b.w	17056 <ull_conn_rx+0x7fa>
   17adc:	0002978c 	.word	0x0002978c
   17ae0:	00029880 	.word	0x00029880
   17ae4:	00029220 	.word	0x00029220
   17ae8:	20002b40 	.word	0x20002b40
   17aec:	20002aac 	.word	0x20002aac
   17af0:	00029488 	.word	0x00029488
				uint16_t interval_min =
   17af4:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   17af8:	fa1f f089 	uxth.w	r0, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17afc:	2805      	cmp	r0, #5
   17afe:	f67f add4 	bls.w	176aa <ull_conn_rx+0xe4e>
				uint16_t interval_max =
   17b02:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   17b06:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17b0a:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   17b0e:	f63f adcc 	bhi.w	176aa <ull_conn_rx+0xe4e>
				    (interval_max > 3200) ||
   17b12:	4570      	cmp	r0, lr
   17b14:	f63f adc9 	bhi.w	176aa <ull_conn_rx+0xe4e>
				uint16_t latency =
   17b18:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   17b1a:	b2be      	uxth	r6, r7
				    (interval_min > interval_max) ||
   17b1c:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   17b20:	f4bf adc3 	bcs.w	176aa <ull_conn_rx+0xe4e>
				uint16_t timeout =
   17b24:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   17b26:	f8ad 0006 	strh.w	r0, [sp, #6]
   17b2a:	b280      	uxth	r0, r0
				    (latency > 499) ||
   17b2c:	f1a0 0a0a 	sub.w	sl, r0, #10
   17b30:	f640 4b76 	movw	fp, #3190	; 0xc76
   17b34:	fa1f fa8a 	uxth.w	sl, sl
   17b38:	45da      	cmp	sl, fp
   17b3a:	f63f adb6 	bhi.w	176aa <ull_conn_rx+0xe4e>
				     ((latency + 1) * interval_max)) ||
   17b3e:	f106 0a01 	add.w	sl, r6, #1
   17b42:	fa1f fa8a 	uxth.w	sl, sl
   17b46:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   17b4a:	ebba 0f80 	cmp.w	sl, r0, lsl #2
   17b4e:	f4bf adac 	bcs.w	176aa <ull_conn_rx+0xe4e>
				     ((latency + 1) * interval_max)) ||
   17b52:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   17b56:	45de      	cmp	lr, fp
   17b58:	f4ff ada7 	bcc.w	176aa <ull_conn_rx+0xe4e>
				conn->llcp_conn_param.latency =	latency;
   17b5c:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
   17b60:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   17b64:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.interval_max =
   17b68:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.timeout =	timeout;
   17b6c:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
   17b70:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   17b74:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   17b78:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   17b7c:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   17b80:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
   17b84:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   17b88:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   17b8c:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   17b90:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
   17b94:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   17b98:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   17b9c:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   17ba0:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
   17ba4:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   17ba8:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   17bac:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   17bb0:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
   17bb4:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   17bb8:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   17bbc:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   17bc0:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
   17bc4:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   17bc8:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   17bcc:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   17bd0:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
   17bd4:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   17bd8:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   17bdc:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   17be0:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
   17be4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   17be6:	45be      	cmp	lr, r7
   17be8:	d05b      	beq.n	17ca2 <ull_conn_rx+0x1446>
					if (conn->llcp_enc.pause_tx) {
   17bea:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   17bee:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
   17bf2:	d050      	beq.n	17c96 <ull_conn_rx+0x143a>
						conn->llcp_conn_param.state =
   17bf4:	2002      	movs	r0, #2
   17bf6:	f360 0203 	bfi	r2, r0, #0, #4
   17bfa:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
   17bfe:	2201      	movs	r2, #1
   17c00:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   17c02:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   17c06:	f884 c15d 	strb.w	ip, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	f47e ae75 	bne.w	168fa <ull_conn_rx+0x9e>
   17c10:	e536      	b.n	17680 <ull_conn_rx+0xe24>
				conn->lll.max_tx_octets = eff_tx_octets;
   17c12:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
   17c14:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   17c18:	e70b      	b.n	17a32 <ull_conn_rx+0x11d6>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17c1a:	4558      	cmp	r0, fp
   17c1c:	f47f aef2 	bne.w	17a04 <ull_conn_rx+0x11a8>
			    eff_rx_time == conn->lll.max_rx_time &&
   17c20:	45d4      	cmp	ip, sl
   17c22:	f47f aeef 	bne.w	17a04 <ull_conn_rx+0x11a8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17c26:	6832      	ldr	r2, [r6, #0]
   17c28:	2501      	movs	r5, #1
   17c2a:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   17c2c:	e476      	b.n	1751c <ull_conn_rx+0xcc0>
			conn->tx_data = conn->tx_data->next;
   17c2e:	6819      	ldr	r1, [r3, #0]
   17c30:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   17c34:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   17c38:	2900      	cmp	r1, #0
   17c3a:	f47f adaa 	bne.w	17792 <ull_conn_rx+0xf36>
			tx->next = conn->tx_head->next;
   17c3e:	6819      	ldr	r1, [r3, #0]
   17c40:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   17c42:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   17c44:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
   17c48:	e5aa      	b.n	177a0 <ull_conn_rx+0xf44>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17c4a:	4a62      	ldr	r2, [pc, #392]	; (17dd4 <ull_conn_rx+0x1578>)
   17c4c:	4962      	ldr	r1, [pc, #392]	; (17dd8 <ull_conn_rx+0x157c>)
   17c4e:	4863      	ldr	r0, [pc, #396]	; (17ddc <ull_conn_rx+0x1580>)
   17c50:	f641 4322 	movw	r3, #7202	; 0x1c22
   17c54:	f00a fd56 	bl	22704 <printk>
   17c58:	4040      	eors	r0, r0
   17c5a:	f380 8811 	msr	BASEPRI, r0
   17c5e:	f04f 0003 	mov.w	r0, #3
   17c62:	df02      	svc	2
   17c64:	e726      	b.n	17ab4 <ull_conn_rx+0x1258>
			conn->tx_data = conn->tx_data->next;
   17c66:	681a      	ldr	r2, [r3, #0]
   17c68:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   17c6c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   17c70:	2a00      	cmp	r2, #0
   17c72:	f47f aae2 	bne.w	1723a <ull_conn_rx+0x9de>
			tx->next = conn->tx_head->next;
   17c76:	681a      	ldr	r2, [r3, #0]
   17c78:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17c7a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   17c7c:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   17c80:	f7ff bae2 	b.w	17248 <ull_conn_rx+0x9ec>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17c84:	791a      	ldrb	r2, [r3, #4]
   17c86:	f002 0203 	and.w	r2, r2, #3
   17c8a:	2a03      	cmp	r2, #3
   17c8c:	d028      	beq.n	17ce0 <ull_conn_rx+0x1484>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17c8e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   17c92:	f7ff bad2 	b.w	1723a <ull_conn_rx+0x9de>
						conn->llcp_conn_param.state =
   17c96:	2003      	movs	r0, #3
   17c98:	f360 0203 	bfi	r2, r0, #0, #4
   17c9c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
   17ca0:	e7af      	b.n	17c02 <ull_conn_rx+0x13a6>
				     lll->interval) ||
   17ca2:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   17ca6:	45b6      	cmp	lr, r6
   17ca8:	d19f      	bne.n	17bea <ull_conn_rx+0x138e>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17caa:	f240 46e2 	movw	r6, #1250	; 0x4e2
   17cae:	fb07 f606 	mul.w	r6, r7, r6
   17cb2:	f242 7710 	movw	r7, #10000	; 0x2710
   17cb6:	fb07 6000 	mla	r0, r7, r0, r6
   17cba:	3801      	subs	r0, #1
   17cbc:	fbb0 f0f6 	udiv	r0, r0, r6
				     lll->latency) ||
   17cc0:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
   17cc4:	b280      	uxth	r0, r0
   17cc6:	4286      	cmp	r6, r0
   17cc8:	d18f      	bne.n	17bea <ull_conn_rx+0x138e>
					conn->llcp_conn_param.state =
   17cca:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   17cce:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   17cd2:	f042 0201 	orr.w	r2, r2, #1
   17cd6:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
					(*rx)->hdr.type =
   17cda:	2201      	movs	r2, #1
   17cdc:	712a      	strb	r2, [r5, #4]
   17cde:	e790      	b.n	17c02 <ull_conn_rx+0x13a6>
	    ((pdu_data_tx->llctrl.opcode !=
   17ce0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17ce2:	2a03      	cmp	r2, #3
   17ce4:	d0c7      	beq.n	17c76 <ull_conn_rx+0x141a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17ce6:	2a0a      	cmp	r2, #10
   17ce8:	d1d1      	bne.n	17c8e <ull_conn_rx+0x1432>
   17cea:	e7c4      	b.n	17c76 <ull_conn_rx+0x141a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17cec:	7919      	ldrb	r1, [r3, #4]
   17cee:	f001 0103 	and.w	r1, r1, #3
   17cf2:	2903      	cmp	r1, #3
   17cf4:	d00a      	beq.n	17d0c <ull_conn_rx+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17cf6:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   17cfa:	e54a      	b.n	17792 <ull_conn_rx+0xf36>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   17cfc:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   17d00:	f011 0f06 	tst.w	r1, #6
   17d04:	f43f abca 	beq.w	1749c <ull_conn_rx+0xc40>
   17d08:	f7fe bee1 	b.w	16ace <ull_conn_rx+0x272>
	    ((pdu_data_tx->llctrl.opcode !=
   17d0c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d0e:	2903      	cmp	r1, #3
   17d10:	d095      	beq.n	17c3e <ull_conn_rx+0x13e2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d12:	290a      	cmp	r1, #10
   17d14:	d1ef      	bne.n	17cf6 <ull_conn_rx+0x149a>
   17d16:	e792      	b.n	17c3e <ull_conn_rx+0x13e2>
			     lll->interval) ||
   17d18:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   17d1a:	4567      	cmp	r7, ip
   17d1c:	f47f aca3 	bne.w	17666 <ull_conn_rx+0xe0a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17d20:	f240 47e2 	movw	r7, #1250	; 0x4e2
   17d24:	fb07 f000 	mul.w	r0, r7, r0
   17d28:	f242 7710 	movw	r7, #10000	; 0x2710
   17d2c:	fb07 0202 	mla	r2, r7, r2, r0
   17d30:	3a01      	subs	r2, #1
   17d32:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   17d36:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   17d3a:	b292      	uxth	r2, r2
   17d3c:	4290      	cmp	r0, r2
   17d3e:	f47f ac92 	bne.w	17666 <ull_conn_rx+0xe0a>
				conn->llcp_conn_param.state =
   17d42:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   17d46:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   17d4a:	f042 0201 	orr.w	r2, r2, #1
   17d4e:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17d52:	2201      	movs	r2, #1
   17d54:	712a      	strb	r2, [r5, #4]
   17d56:	e48d      	b.n	17674 <ull_conn_rx+0xe18>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   17d58:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   17d5c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   17d60:	429a      	cmp	r2, r3
   17d62:	d00e      	beq.n	17d82 <ull_conn_rx+0x1526>
   17d64:	4a1b      	ldr	r2, [pc, #108]	; (17dd4 <ull_conn_rx+0x1578>)
   17d66:	491e      	ldr	r1, [pc, #120]	; (17de0 <ull_conn_rx+0x1584>)
   17d68:	481c      	ldr	r0, [pc, #112]	; (17ddc <ull_conn_rx+0x1580>)
   17d6a:	f241 43af 	movw	r3, #5295	; 0x14af
   17d6e:	f00a fcc9 	bl	22704 <printk>
   17d72:	4040      	eors	r0, r0
   17d74:	f380 8811 	msr	BASEPRI, r0
   17d78:	f04f 0003 	mov.w	r0, #3
   17d7c:	df02      	svc	2
   17d7e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17d82:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   17d86:	2106      	movs	r1, #6
   17d88:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   17d8c:	3b01      	subs	r3, #1
   17d8e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17d92:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17d96:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17d9a:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
   17d9e:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17da0:	00db      	lsls	r3, r3, #3
   17da2:	430b      	orrs	r3, r1
   17da4:	f022 020f 	bic.w	r2, r2, #15
   17da8:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   17daa:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17dae:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17db2:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17db6:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   17dba:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17dbc:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
   17dc0:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17dc4:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17dc8:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17dcc:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
   17dd0:	f7fe bd91 	b.w	168f6 <ull_conn_rx+0x9a>
   17dd4:	0002978c 	.word	0x0002978c
   17dd8:	00029488 	.word	0x00029488
   17ddc:	00029220 	.word	0x00029220
   17de0:	00029880 	.word	0x00029880

00017de4 <ull_conn_tx_demux>:
{
   17de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17de8:	4c24      	ldr	r4, [pc, #144]	; (17e7c <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17dea:	4f25      	ldr	r7, [pc, #148]	; (17e80 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17dec:	78e2      	ldrb	r2, [r4, #3]
{
   17dee:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   17df0:	1d26      	adds	r6, r4, #4
   17df2:	e021      	b.n	17e38 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17df4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   17df8:	4638      	mov	r0, r7
   17dfa:	f7f9 f973 	bl	110e4 <mem_get>
	if (conn->lll.handle != handle) {
   17dfe:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   17e00:	bb2a      	cbnz	r2, 17e4e <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   17e02:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   17e06:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
   17e0a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   17e0c:	b351      	cbz	r1, 17e64 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   17e0e:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
   17e12:	b102      	cbz	r2, 17e16 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   17e14:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   17e16:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
   17e1a:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   17e1c:	78a3      	ldrb	r3, [r4, #2]
   17e1e:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   17e20:	429a      	cmp	r2, r3
   17e22:	d005      	beq.n	17e30 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   17e24:	3301      	adds	r3, #1
   17e26:	b2db      	uxtb	r3, r3
		_first = 0U;
   17e28:	4299      	cmp	r1, r3
   17e2a:	bf08      	it	eq
   17e2c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17e2e:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   17e30:	3d01      	subs	r5, #1
   17e32:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   17e36:	d01e      	beq.n	17e76 <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17e38:	78a3      	ldrb	r3, [r4, #2]
   17e3a:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   17e3c:	4293      	cmp	r3, r2
   17e3e:	d01a      	beq.n	17e76 <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   17e40:	fb13 f301 	smulbb	r3, r3, r1
   17e44:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   17e48:	5af2      	ldrh	r2, [r6, r3]
   17e4a:	2a00      	cmp	r2, #0
   17e4c:	d0d2      	beq.n	17df4 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   17e4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   17e52:	790b      	ldrb	r3, [r1, #4]
   17e54:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   17e58:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   17e5c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   17e5e:	f7fd f80d 	bl	14e7c <ll_tx_ack_put>
   17e62:	e7da      	b.n	17e1a <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   17e64:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   17e68:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   17e6c:	2a00      	cmp	r2, #0
   17e6e:	d1ce      	bne.n	17e0e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   17e70:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
   17e74:	e7cf      	b.n	17e16 <ull_conn_tx_demux+0x32>
}
   17e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e7a:	bf00      	nop
   17e7c:	200005f0 	.word	0x200005f0
   17e80:	200019a0 	.word	0x200019a0

00017e84 <conn_cleanup_finalize>:
{
   17e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   17e88:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
   17e8c:	b082      	sub	sp, #8
   17e8e:	4606      	mov	r6, r0
	while (rx) {
   17e90:	b144      	cbz	r4, 17ea4 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   17e92:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   17e94:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   17e96:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   17e98:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   17e9a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   17e9c:	f7fc ffaa 	bl	14df4 <ll_rx_put>
	while (rx) {
   17ea0:	2c00      	cmp	r4, #0
   17ea2:	d1f7      	bne.n	17e94 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   17ea4:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   17ea8:	b381      	cbz	r1, 17f0c <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   17eaa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 17f50 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   17eae:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 17f54 <conn_cleanup_finalize+0xd0>
   17eb2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 17f58 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17eb6:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   17eba:	e007      	b.n	17ecc <conn_cleanup_finalize+0x48>
   17ebc:	4629      	mov	r1, r5
   17ebe:	463a      	mov	r2, r7
   17ec0:	4620      	mov	r0, r4
   17ec2:	f7f9 f941 	bl	11148 <memq_enqueue>
	while (conn->tx_head) {
   17ec6:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   17eca:	b1f9      	cbz	r1, 17f0c <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17ecc:	4630      	mov	r0, r6
   17ece:	f7fd ffe1 	bl	15e94 <tx_ull_dequeue>
   17ed2:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   17ed4:	4640      	mov	r0, r8
   17ed6:	f7f9 f8d3 	bl	11080 <mem_acquire>
		LL_ASSERT(link);
   17eda:	4604      	mov	r4, r0
   17edc:	2800      	cmp	r0, #0
   17ede:	d1ed      	bne.n	17ebc <conn_cleanup_finalize+0x38>
   17ee0:	481e      	ldr	r0, [pc, #120]	; (17f5c <conn_cleanup_finalize+0xd8>)
   17ee2:	f640 135e 	movw	r3, #2398	; 0x95e
   17ee6:	4652      	mov	r2, sl
   17ee8:	4649      	mov	r1, r9
   17eea:	f00a fc0b 	bl	22704 <printk>
   17eee:	4040      	eors	r0, r0
   17ef0:	f380 8811 	msr	BASEPRI, r0
   17ef4:	f04f 0003 	mov.w	r0, #3
   17ef8:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17efa:	4629      	mov	r1, r5
   17efc:	463a      	mov	r2, r7
   17efe:	4620      	mov	r0, r4
   17f00:	f7f9 f922 	bl	11148 <memq_enqueue>
	while (conn->tx_head) {
   17f04:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   17f08:	2900      	cmp	r1, #0
   17f0a:	d1df      	bne.n	17ecc <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17f0c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   17f0e:	4b14      	ldr	r3, [pc, #80]	; (17f60 <conn_cleanup_finalize+0xdc>)
   17f10:	9600      	str	r6, [sp, #0]
   17f12:	3203      	adds	r2, #3
   17f14:	b2d2      	uxtb	r2, r2
   17f16:	2101      	movs	r1, #1
   17f18:	2000      	movs	r0, #0
   17f1a:	f7fa fbf1 	bl	12700 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f1e:	f030 0302 	bics.w	r3, r0, #2
   17f22:	d00c      	beq.n	17f3e <conn_cleanup_finalize+0xba>
   17f24:	4a0b      	ldr	r2, [pc, #44]	; (17f54 <conn_cleanup_finalize+0xd0>)
   17f26:	490f      	ldr	r1, [pc, #60]	; (17f64 <conn_cleanup_finalize+0xe0>)
   17f28:	480c      	ldr	r0, [pc, #48]	; (17f5c <conn_cleanup_finalize+0xd8>)
   17f2a:	f640 1323 	movw	r3, #2339	; 0x923
   17f2e:	f00a fbe9 	bl	22704 <printk>
   17f32:	4040      	eors	r0, r0
   17f34:	f380 8811 	msr	BASEPRI, r0
   17f38:	f04f 0003 	mov.w	r0, #3
   17f3c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   17f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   17f42:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   17f44:	8533      	strh	r3, [r6, #40]	; 0x28
}
   17f46:	b002      	add	sp, #8
   17f48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   17f4c:	f7ff bf4a 	b.w	17de4 <ull_conn_tx_demux>
   17f50:	20002bf4 	.word	0x20002bf4
   17f54:	0002978c 	.word	0x0002978c
   17f58:	000297e4 	.word	0x000297e4
   17f5c:	00029220 	.word	0x00029220
   17f60:	00015c39 	.word	0x00015c39
   17f64:	000298a8 	.word	0x000298a8

00017f68 <ull_conn_done>:
{
   17f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   17f6a:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   17f6c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   17f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f72:	4299      	cmp	r1, r3
{
   17f74:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   17f76:	d071      	beq.n	1805c <ull_conn_done+0xf4>
	switch (done->extra.mic_state) {
   17f78:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   17f7c:	2b01      	cmp	r3, #1
   17f7e:	f000 80d7 	beq.w	18130 <ull_conn_done+0x1c8>
   17f82:	2b02      	cmp	r3, #2
   17f84:	d06c      	beq.n	18060 <ull_conn_done+0xf8>
   17f86:	2b00      	cmp	r3, #0
   17f88:	f000 80b8 	beq.w	180fc <ull_conn_done+0x194>
	reason_final = conn->llcp_terminate.reason_final;
   17f8c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
   17f90:	2b00      	cmp	r3, #0
   17f92:	d168      	bne.n	18066 <ull_conn_done+0xfe>
	latency_event = lll->latency_event;
   17f94:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   17f96:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   17f98:	1c77      	adds	r7, r6, #1
   17f9a:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   17f9c:	2b00      	cmp	r3, #0
   17f9e:	d17a      	bne.n	18096 <ull_conn_done+0x12e>
	if (done->extra.crc_valid) {
   17fa0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   17fa4:	f013 0301 	ands.w	r3, r3, #1
   17fa8:	f000 80da 	beq.w	18160 <ull_conn_done+0x1f8>
		conn->supervision_expire = 0U;
   17fac:	2500      	movs	r5, #0
   17fae:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
   17fb2:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   17fb6:	b12b      	cbz	r3, 17fc4 <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
   17fb8:	429f      	cmp	r7, r3
   17fba:	f080 811c 	bcs.w	181f6 <ull_conn_done+0x28e>
			conn->procedure_expire -= elapsed_event;
   17fbe:	1bdb      	subs	r3, r3, r7
   17fc0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
   17fc4:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   17fc8:	b12b      	cbz	r3, 17fd6 <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
   17fca:	429f      	cmp	r7, r3
   17fcc:	f080 80ee 	bcs.w	181ac <ull_conn_done+0x244>
			conn->apto_expire -= elapsed_event;
   17fd0:	1bdb      	subs	r3, r3, r7
   17fd2:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
   17fd6:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   17fda:	b1ab      	cbz	r3, 18008 <ull_conn_done+0xa0>
		if (conn->appto_expire > elapsed_event) {
   17fdc:	429f      	cmp	r7, r3
   17fde:	f0c0 80cb 	bcc.w	18178 <ull_conn_done+0x210>
			if ((conn->procedure_expire == 0U) &&
   17fe2:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
   17fe6:	2200      	movs	r2, #0
   17fe8:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
   17fec:	b963      	cbnz	r3, 18008 <ull_conn_done+0xa0>
			    (conn->llcp_req == conn->llcp_ack)) {
   17fee:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   17ff2:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			if ((conn->procedure_expire == 0U) &&
   17ff6:	4293      	cmp	r3, r2
   17ff8:	d10a      	bne.n	18010 <ull_conn_done+0xa8>
				conn->llcp_type = LLCP_PING;
   17ffa:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   17ffc:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   17ffe:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
   18002:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18006:	e009      	b.n	1801c <ull_conn_done+0xb4>
			    (conn->llcp_req == conn->llcp_ack)) {
   18008:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   1800c:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18010:	1a9b      	subs	r3, r3, r2
   18012:	f003 0303 	and.w	r3, r3, #3
   18016:	2b02      	cmp	r3, #2
   18018:	f000 80bb 	beq.w	18192 <ull_conn_done+0x22a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1801c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   18020:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   18024:	429a      	cmp	r2, r3
   18026:	f000 80d2 	beq.w	181ce <ull_conn_done+0x266>
		lll->latency_event = 0U;
   1802a:	2300      	movs	r3, #0
   1802c:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   1802e:	b905      	cbnz	r5, 18032 <ull_conn_done+0xca>
   18030:	b1a6      	cbz	r6, 1805c <ull_conn_done+0xf4>
		lazy = lll->latency_event + 1U;
   18032:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18034:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18036:	4b7f      	ldr	r3, [pc, #508]	; (18234 <ull_conn_done+0x2cc>)
		struct ll_conn *conn = lll->hdr.parent;
   18038:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1803a:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1803c:	e9cd 3405 	strd	r3, r4, [sp, #20]
   18040:	2300      	movs	r3, #0
   18042:	e9cd 1503 	strd	r1, r5, [sp, #12]
   18046:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1804a:	9300      	str	r3, [sp, #0]
   1804c:	4618      	mov	r0, r3
   1804e:	b2d2      	uxtb	r2, r2
   18050:	2101      	movs	r1, #1
   18052:	f7fa fb3d 	bl	126d0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18056:	f030 0302 	bics.w	r3, r0, #2
   1805a:	d16f      	bne.n	1813c <ull_conn_done+0x1d4>
}
   1805c:	b009      	add	sp, #36	; 0x24
   1805e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   18060:	233d      	movs	r3, #61	; 0x3d
   18062:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
   18066:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1806a:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
   1806e:	1b52      	subs	r2, r2, r5
	if (reason_final && (
   18070:	b2d2      	uxtb	r2, r2
   18072:	2a03      	cmp	r2, #3
   18074:	d02f      	beq.n	180d6 <ull_conn_done+0x16e>
			     TERM_ACKED) ||
   18076:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
   1807a:	0755      	lsls	r5, r2, #29
   1807c:	d42b      	bmi.n	180d6 <ull_conn_done+0x16e>
			    conn->central.terminate_ack ||
   1807e:	2b3d      	cmp	r3, #61	; 0x3d
   18080:	d029      	beq.n	180d6 <ull_conn_done+0x16e>
	latency_event = lll->latency_event;
   18082:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   18084:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   18086:	1c77      	adds	r7, r6, #1
   18088:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1808a:	2b00      	cmp	r3, #0
   1808c:	d088      	beq.n	17fa0 <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
   1808e:	f042 0204 	orr.w	r2, r2, #4
   18092:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
   18096:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
   1809a:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1809c:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1809e:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
   180a2:	d483      	bmi.n	17fac <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
   180a4:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
   180a8:	b935      	cbnz	r5, 180b8 <ull_conn_done+0x150>
			conn->supervision_expire = conn->supervision_reload;
   180aa:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
   180ae:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
   180b2:	2d00      	cmp	r5, #0
   180b4:	f43f af7d 	beq.w	17fb2 <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
   180b8:	42bd      	cmp	r5, r7
   180ba:	f240 8093 	bls.w	181e4 <ull_conn_done+0x27c>
			conn->supervision_expire -= elapsed_event;
   180be:	1bed      	subs	r5, r5, r7
   180c0:	b2ad      	uxth	r5, r5
	force = 0U;
   180c2:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
   180c4:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
   180c8:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
   180cc:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
   180ce:	bf8c      	ite	hi
   180d0:	2500      	movhi	r5, #0
   180d2:	2501      	movls	r5, #1
   180d4:	e76d      	b.n	17fb2 <ull_conn_done+0x4a>
	if (conn == conn_upd_curr) {
   180d6:	4a58      	ldr	r2, [pc, #352]	; (18238 <ull_conn_done+0x2d0>)
   180d8:	6810      	ldr	r0, [r2, #0]
   180da:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   180dc:	bf04      	itt	eq
   180de:	2000      	moveq	r0, #0
   180e0:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   180e2:	2217      	movs	r2, #23
	conn_cleanup_finalize(conn);
   180e4:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
   180e6:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   180ea:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
   180ee:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
   180f2:	b009      	add	sp, #36	; 0x24
   180f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   180f8:	f7ff bec4 	b.w	17e84 <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   180fc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18100:	071f      	lsls	r7, r3, #28
   18102:	d54d      	bpl.n	181a0 <ull_conn_done+0x238>
					    (lll->latency + 6)) ?
   18104:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   18106:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
   1810a:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
   1810c:	429a      	cmp	r2, r3
   1810e:	bfc4      	itt	gt
   18110:	1f93      	subgt	r3, r2, #6
   18112:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
   18114:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
   18118:	bfcc      	ite	gt
   1811a:	b29b      	uxthgt	r3, r3
   1811c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1811e:	429d      	cmp	r5, r3
   18120:	d05a      	beq.n	181d8 <ull_conn_done+0x270>
				conn->appto_reload = appto_reload_new;
   18122:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
   18126:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
   1812a:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
   1812e:	e72d      	b.n	17f8c <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
   18130:	2300      	movs	r3, #0
   18132:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   18136:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
   1813a:	e727      	b.n	17f8c <ull_conn_done+0x24>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1813c:	f7fc fefa 	bl	14f34 <ull_disable_mark_get>
   18140:	4284      	cmp	r4, r0
   18142:	d08b      	beq.n	1805c <ull_conn_done+0xf4>
   18144:	4a3d      	ldr	r2, [pc, #244]	; (1823c <ull_conn_done+0x2d4>)
   18146:	493e      	ldr	r1, [pc, #248]	; (18240 <ull_conn_done+0x2d8>)
   18148:	483e      	ldr	r0, [pc, #248]	; (18244 <ull_conn_done+0x2dc>)
   1814a:	f240 63cd 	movw	r3, #1741	; 0x6cd
   1814e:	f00a fad9 	bl	22704 <printk>
   18152:	4040      	eors	r0, r0
   18154:	f380 8811 	msr	BASEPRI, r0
   18158:	f04f 0003 	mov.w	r0, #3
   1815c:	df02      	svc	2
   1815e:	e77d      	b.n	1805c <ull_conn_done+0xf4>
	else if (conn->connect_expire) {
   18160:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   18164:	2a00      	cmp	r2, #0
   18166:	d09d      	beq.n	180a4 <ull_conn_done+0x13c>
		if (conn->connect_expire > elapsed_event) {
   18168:	42ba      	cmp	r2, r7
   1816a:	d951      	bls.n	18210 <ull_conn_done+0x2a8>
			conn->connect_expire -= elapsed_event;
   1816c:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
   1816e:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
   18172:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   18176:	e79c      	b.n	180b2 <ull_conn_done+0x14a>
			conn->appto_expire -= elapsed_event;
   18178:	1bdf      	subs	r7, r3, r7
			    (conn->llcp_req == conn->llcp_ack)) {
   1817a:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1817e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
			conn->appto_expire -= elapsed_event;
   18182:	f8a4 70b0 	strh.w	r7, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18186:	1a9b      	subs	r3, r3, r2
   18188:	f003 0303 	and.w	r3, r3, #3
   1818c:	2b02      	cmp	r3, #2
   1818e:	f47f af45 	bne.w	1801c <ull_conn_done+0xb4>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   18192:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18196:	3b01      	subs	r3, #1
   18198:	2b01      	cmp	r3, #1
   1819a:	f63f af3f 	bhi.w	1801c <ull_conn_done+0xb4>
   1819e:	e744      	b.n	1802a <ull_conn_done+0xc2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   181a0:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   181a4:	07de      	lsls	r6, r3, #31
   181a6:	f57f aef1 	bpl.w	17f8c <ull_conn_done+0x24>
   181aa:	e7ab      	b.n	18104 <ull_conn_done+0x19c>
			rx = ll_pdu_rx_alloc();
   181ac:	f7fc fe50 	bl	14e50 <ll_pdu_rx_alloc>
			if (rx) {
   181b0:	4601      	mov	r1, r0
   181b2:	b348      	cbz	r0, 18208 <ull_conn_done+0x2a0>
				rx->handle = lll->handle;
   181b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   181b6:	2200      	movs	r2, #0
   181b8:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
   181bc:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   181be:	231a      	movs	r3, #26
   181c0:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   181c2:	6800      	ldr	r0, [r0, #0]
   181c4:	f7fc fe16 	bl	14df4 <ll_rx_put>
				ll_rx_sched();
   181c8:	f7fc fe1e 	bl	14e08 <ll_rx_sched>
   181cc:	e703      	b.n	17fd6 <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
   181ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   181d0:	b335      	cbz	r5, 18220 <ull_conn_done+0x2b8>
		lazy = lll->latency_event + 1U;
   181d2:	3101      	adds	r1, #1
   181d4:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   181d6:	e72d      	b.n	18034 <ull_conn_done+0xcc>
			if (conn->apto_expire == 0U) {
   181d8:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
   181dc:	2d00      	cmp	r5, #0
   181de:	f47f aed5 	bne.w	17f8c <ull_conn_done+0x24>
   181e2:	e7a0      	b.n	18126 <ull_conn_done+0x1be>
	if (conn == conn_upd_curr) {
   181e4:	4b14      	ldr	r3, [pc, #80]	; (18238 <ull_conn_done+0x2d0>)
   181e6:	681a      	ldr	r2, [r3, #0]
   181e8:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   181ea:	bf04      	itt	eq
   181ec:	2200      	moveq	r2, #0
   181ee:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   181f0:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   181f2:	2308      	movs	r3, #8
   181f4:	e776      	b.n	180e4 <ull_conn_done+0x17c>
	if (conn == conn_upd_curr) {
   181f6:	4b10      	ldr	r3, [pc, #64]	; (18238 <ull_conn_done+0x2d0>)
   181f8:	681a      	ldr	r2, [r3, #0]
   181fa:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   181fc:	bf04      	itt	eq
   181fe:	2200      	moveq	r2, #0
   18200:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18202:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   18204:	2322      	movs	r3, #34	; 0x22
   18206:	e76d      	b.n	180e4 <ull_conn_done+0x17c>
				conn->apto_expire = 1U;
   18208:	2301      	movs	r3, #1
   1820a:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1820e:	e6e2      	b.n	17fd6 <ull_conn_done+0x6e>
	if (conn == conn_upd_curr) {
   18210:	4a09      	ldr	r2, [pc, #36]	; (18238 <ull_conn_done+0x2d0>)
   18212:	6810      	ldr	r0, [r2, #0]
   18214:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   18216:	bf08      	it	eq
   18218:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1821a:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1821c:	233e      	movs	r3, #62	; 0x3e
   1821e:	e761      	b.n	180e4 <ull_conn_done+0x17c>
	if ((force) || (latency_event != lll->latency_event)) {
   18220:	42b1      	cmp	r1, r6
   18222:	f43f af1b 	beq.w	1805c <ull_conn_done+0xf4>
		lazy = lll->latency_event + 1U;
   18226:	3101      	adds	r1, #1
   18228:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1822a:	2900      	cmp	r1, #0
   1822c:	f43f af16 	beq.w	1805c <ull_conn_done+0xf4>
   18230:	e700      	b.n	18034 <ull_conn_done+0xcc>
   18232:	bf00      	nop
   18234:	00015e55 	.word	0x00015e55
   18238:	20002aac 	.word	0x20002aac
   1823c:	0002978c 	.word	0x0002978c
   18240:	000298d8 	.word	0x000298d8
   18244:	00029220 	.word	0x00029220

00018248 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   18248:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   1824c:	2b00      	cmp	r3, #0
   1824e:	f000 80e5 	beq.w	1841c <ull_conn_tx_lll_enqueue+0x1d4>
   18252:	3901      	subs	r1, #1
{
   18254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   18258:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 18420 <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
   1825c:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 18424 <ull_conn_tx_lll_enqueue+0x1dc>
   18260:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 18428 <ull_conn_tx_lll_enqueue+0x1e0>
   18264:	4604      	mov	r4, r0
   18266:	b2cd      	uxtb	r5, r1
   18268:	e012      	b.n	18290 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1826a:	4640      	mov	r0, r8
   1826c:	f7f8 ff08 	bl	11080 <mem_acquire>
		LL_ASSERT(link);
   18270:	4607      	mov	r7, r0
   18272:	2800      	cmp	r0, #0
   18274:	d064      	beq.n	18340 <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18276:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   1827a:	4631      	mov	r1, r6
   1827c:	4638      	mov	r0, r7
   1827e:	f7f8 ff63 	bl	11148 <memq_enqueue>
	while (conn->tx_head &&
   18282:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   18286:	3d01      	subs	r5, #1
   18288:	b2ed      	uxtb	r5, r5
   1828a:	2b00      	cmp	r3, #0
   1828c:	f000 8080 	beq.w	18390 <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
   18290:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
   18294:	07d1      	lsls	r1, r2, #31
   18296:	d403      	bmi.n	182a0 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   18298:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
   1829c:	0792      	lsls	r2, r2, #30
   1829e:	d55d      	bpl.n	1835c <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   182a0:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   182a4:	4293      	cmp	r3, r2
   182a6:	d173      	bne.n	18390 <ull_conn_tx_lll_enqueue+0x148>
   182a8:	2dff      	cmp	r5, #255	; 0xff
   182aa:	d071      	beq.n	18390 <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   182ac:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   182b0:	4620      	mov	r0, r4
   182b2:	f7fd fdef 	bl	15e94 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   182b6:	7903      	ldrb	r3, [r0, #4]
   182b8:	f003 0303 	and.w	r3, r3, #3
   182bc:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   182be:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   182c0:	d1d3      	bne.n	1826a <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   182c2:	79c3      	ldrb	r3, [r0, #7]
   182c4:	3b03      	subs	r3, #3
   182c6:	2b13      	cmp	r3, #19
   182c8:	d8cf      	bhi.n	1826a <ull_conn_tx_lll_enqueue+0x22>
   182ca:	a201      	add	r2, pc, #4	; (adr r2, 182d0 <ull_conn_tx_lll_enqueue+0x88>)
   182cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   182d0:	00018329 	.word	0x00018329
   182d4:	0001826b 	.word	0x0001826b
   182d8:	0001826b 	.word	0x0001826b
   182dc:	0001826b 	.word	0x0001826b
   182e0:	0001826b 	.word	0x0001826b
   182e4:	0001826b 	.word	0x0001826b
   182e8:	0001826b 	.word	0x0001826b
   182ec:	00018329 	.word	0x00018329
   182f0:	00018321 	.word	0x00018321
   182f4:	0001826b 	.word	0x0001826b
   182f8:	0001826b 	.word	0x0001826b
   182fc:	0001826b 	.word	0x0001826b
   18300:	0001826b 	.word	0x0001826b
   18304:	0001826b 	.word	0x0001826b
   18308:	0001826b 	.word	0x0001826b
   1830c:	0001826b 	.word	0x0001826b
   18310:	0001826b 	.word	0x0001826b
   18314:	0001826b 	.word	0x0001826b
   18318:	0001826b 	.word	0x0001826b
   1831c:	00018395 	.word	0x00018395
		if (!conn->lll.role) {
   18320:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18324:	2b00      	cmp	r3, #0
   18326:	daa0      	bge.n	1826a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   18328:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   1832c:	f043 0302 	orr.w	r3, r3, #2
   18330:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
   18334:	4640      	mov	r0, r8
   18336:	f7f8 fea3 	bl	11080 <mem_acquire>
		LL_ASSERT(link);
   1833a:	4607      	mov	r7, r0
   1833c:	2800      	cmp	r0, #0
   1833e:	d19a      	bne.n	18276 <ull_conn_tx_lll_enqueue+0x2e>
   18340:	483a      	ldr	r0, [pc, #232]	; (1842c <ull_conn_tx_lll_enqueue+0x1e4>)
   18342:	f240 7326 	movw	r3, #1830	; 0x726
   18346:	4652      	mov	r2, sl
   18348:	4649      	mov	r1, r9
   1834a:	f00a f9db 	bl	22704 <printk>
   1834e:	4040      	eors	r0, r0
   18350:	f380 8811 	msr	BASEPRI, r0
   18354:	f04f 0003 	mov.w	r0, #3
   18358:	df02      	svc	2
   1835a:	e78c      	b.n	18276 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1835c:	791a      	ldrb	r2, [r3, #4]
   1835e:	f002 0203 	and.w	r2, r2, #3
   18362:	2a03      	cmp	r2, #3
   18364:	d1a0      	bne.n	182a8 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   18366:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18368:	2a03      	cmp	r2, #3
   1836a:	d001      	beq.n	18370 <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1836c:	2a0a      	cmp	r2, #10
   1836e:	d19b      	bne.n	182a8 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   18370:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   18374:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   18378:	428a      	cmp	r2, r1
   1837a:	d012      	beq.n	183a2 <ull_conn_tx_lll_enqueue+0x15a>
   1837c:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
   18380:	2a03      	cmp	r2, #3
   18382:	d091      	beq.n	182a8 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   18384:	681a      	ldr	r2, [r3, #0]
   18386:	b11a      	cbz	r2, 18390 <ull_conn_tx_lll_enqueue+0x148>
   18388:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   1838c:	428a      	cmp	r2, r1
   1838e:	d034      	beq.n	183fa <ull_conn_tx_lll_enqueue+0x1b2>
}
   18390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   18394:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   18398:	f043 0301 	orr.w	r3, r3, #1
   1839c:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   183a0:	e763      	b.n	1826a <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   183a2:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
   183a6:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   183aa:	4288      	cmp	r0, r1
   183ac:	d1ea      	bne.n	18384 <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   183ae:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
   183b2:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
   183b6:	4288      	cmp	r0, r1
   183b8:	d1e4      	bne.n	18384 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   183ba:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
   183be:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
   183c2:	4288      	cmp	r0, r1
   183c4:	d1de      	bne.n	18384 <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
   183c6:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   183ca:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   183ce:	4288      	cmp	r0, r1
   183d0:	d1d8      	bne.n	18384 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   183d2:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   183d6:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   183da:	4288      	cmp	r0, r1
   183dc:	d1d2      	bne.n	18384 <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   183de:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
   183e2:	3a02      	subs	r2, #2
   183e4:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   183e8:	2201      	movs	r2, #1
   183ea:	f362 0301 	bfi	r3, r2, #0, #2
   183ee:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
   183f2:	2303      	movs	r3, #3
   183f4:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   183f8:	e756      	b.n	182a8 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   183fa:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   183fe:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
   18402:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
   18406:	6810      	ldr	r0, [r2, #0]
   18408:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1840a:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1840c:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   18410:	2900      	cmp	r1, #0
   18412:	f47f af49 	bne.w	182a8 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   18416:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   1841a:	e745      	b.n	182a8 <ull_conn_tx_lll_enqueue+0x60>
   1841c:	4770      	bx	lr
   1841e:	bf00      	nop
   18420:	20002bf4 	.word	0x20002bf4
   18424:	0002978c 	.word	0x0002978c
   18428:	000297e4 	.word	0x000297e4
   1842c:	00029220 	.word	0x00029220

00018430 <tx_demux>:
{
   18430:	b510      	push	{r4, lr}
   18432:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   18434:	2001      	movs	r0, #1
   18436:	f7ff fcd5 	bl	17de4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1843a:	4620      	mov	r0, r4
   1843c:	2101      	movs	r1, #1
}
   1843e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   18442:	f7ff bf01 	b.w	18248 <ull_conn_tx_lll_enqueue>
   18446:	bf00      	nop

00018448 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   18448:	4901      	ldr	r1, [pc, #4]	; (18450 <ull_conn_link_tx_release+0x8>)
   1844a:	f7f8 be33 	b.w	110b4 <mem_release>
   1844e:	bf00      	nop
   18450:	20002bf4 	.word	0x20002bf4

00018454 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   18454:	4b01      	ldr	r3, [pc, #4]	; (1845c <ull_conn_ack_last_idx_get+0x8>)
}
   18456:	78d8      	ldrb	r0, [r3, #3]
   18458:	4770      	bx	lr
   1845a:	bf00      	nop
   1845c:	200005ac 	.word	0x200005ac

00018460 <ull_conn_ack_peek>:
{
   18460:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   18462:	4b0c      	ldr	r3, [pc, #48]	; (18494 <ull_conn_ack_peek+0x34>)
   18464:	f893 c002 	ldrb.w	ip, [r3, #2]
   18468:	f893 e003 	ldrb.w	lr, [r3, #3]
   1846c:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1846e:	45f4      	cmp	ip, lr
   18470:	d00d      	beq.n	1848e <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   18472:	fb1c fc04 	smulbb	ip, ip, r4
   18476:	3304      	adds	r3, #4
   18478:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1847c:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   18480:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   18484:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   18486:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   18488:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1848a:	6818      	ldr	r0, [r3, #0]
}
   1848c:	bd10      	pop	{r4, pc}
		return NULL;
   1848e:	2000      	movs	r0, #0
}
   18490:	bd10      	pop	{r4, pc}
   18492:	bf00      	nop
   18494:	200005ac 	.word	0x200005ac

00018498 <ull_conn_ack_by_last_peek>:
{
   18498:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1849a:	4b0b      	ldr	r3, [pc, #44]	; (184c8 <ull_conn_ack_by_last_peek+0x30>)
   1849c:	f893 c002 	ldrb.w	ip, [r3, #2]
   184a0:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   184a4:	4584      	cmp	ip, r0
   184a6:	d00d      	beq.n	184c4 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   184a8:	3304      	adds	r3, #4
   184aa:	fb1c fc0e 	smulbb	ip, ip, lr
   184ae:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   184b2:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   184b6:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   184ba:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   184bc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   184be:	6818      	ldr	r0, [r3, #0]
}
   184c0:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   184c4:	2000      	movs	r0, #0
   184c6:	e7fb      	b.n	184c0 <ull_conn_ack_by_last_peek+0x28>
   184c8:	200005ac 	.word	0x200005ac

000184cc <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   184cc:	4b09      	ldr	r3, [pc, #36]	; (184f4 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   184ce:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   184d0:	78da      	ldrb	r2, [r3, #3]
   184d2:	7818      	ldrb	r0, [r3, #0]
   184d4:	f893 c001 	ldrb.w	ip, [r3, #1]
   184d8:	428a      	cmp	r2, r1
   184da:	d009      	beq.n	184f0 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   184dc:	1c4a      	adds	r2, r1, #1
   184de:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   184e0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   184e4:	4594      	cmp	ip, r2
   184e6:	bf08      	it	eq
   184e8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   184ea:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   184ec:	709a      	strb	r2, [r3, #2]
	return mem;
   184ee:	4770      	bx	lr
		return NULL;
   184f0:	2000      	movs	r0, #0
}
   184f2:	4770      	bx	lr
   184f4:	200005ac 	.word	0x200005ac

000184f8 <ull_conn_lll_ack_enqueue>:
{
   184f8:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   184fa:	4a15      	ldr	r2, [pc, #84]	; (18550 <ull_conn_lll_ack_enqueue+0x58>)
   184fc:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   18500:	7854      	ldrb	r4, [r2, #1]
   18502:	f892 e002 	ldrb.w	lr, [r2, #2]
   18506:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   18508:	f10c 0301 	add.w	r3, ip, #1
   1850c:	b2db      	uxtb	r3, r3
		last = 0U;
   1850e:	429c      	cmp	r4, r3
   18510:	bf08      	it	eq
   18512:	2300      	moveq	r3, #0
	if (last == first) {
   18514:	459e      	cmp	lr, r3
   18516:	d00a      	beq.n	1852e <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18518:	fb1c fc05 	smulbb	ip, ip, r5
   1851c:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   18520:	f82e 000c 	strh.w	r0, [lr, ip]
   18524:	44f4      	add	ip, lr
	lll_tx->node = tx;
   18526:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1852a:	70d3      	strb	r3, [r2, #3]
}
   1852c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1852e:	4a09      	ldr	r2, [pc, #36]	; (18554 <ull_conn_lll_ack_enqueue+0x5c>)
   18530:	4909      	ldr	r1, [pc, #36]	; (18558 <ull_conn_lll_ack_enqueue+0x60>)
   18532:	480a      	ldr	r0, [pc, #40]	; (1855c <ull_conn_lll_ack_enqueue+0x64>)
   18534:	f240 7376 	movw	r3, #1910	; 0x776
   18538:	f00a f8e4 	bl	22704 <printk>
   1853c:	4040      	eors	r0, r0
   1853e:	f380 8811 	msr	BASEPRI, r0
   18542:	f04f 0003 	mov.w	r0, #3
   18546:	df02      	svc	2
	lll_tx->handle = handle;
   18548:	2300      	movs	r3, #0
   1854a:	801b      	strh	r3, [r3, #0]
   1854c:	deff      	udf	#255	; 0xff
   1854e:	bf00      	nop
   18550:	200005ac 	.word	0x200005ac
   18554:	0002978c 	.word	0x0002978c
   18558:	000297d4 	.word	0x000297d4
   1855c:	00029220 	.word	0x00029220

00018560 <ull_conn_tx_ack>:
{
   18560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   18562:	7953      	ldrb	r3, [r2, #5]
{
   18564:	4614      	mov	r4, r2
   18566:	4605      	mov	r5, r0
   18568:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1856a:	b373      	cbz	r3, 185ca <ull_conn_tx_ack+0x6a>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1856c:	7923      	ldrb	r3, [r4, #4]
   1856e:	f003 0203 	and.w	r2, r3, #3
   18572:	2a03      	cmp	r2, #3
   18574:	d00c      	beq.n	18590 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   18576:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1857a:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1857c:	bf04      	itt	eq
   1857e:	f36f 0301 	bfceq	r3, #0, #2
   18582:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   18584:	4621      	mov	r1, r4
   18586:	4628      	mov	r0, r5
}
   18588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1858c:	f7fc bc76 	b.w	14e7c <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   18590:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18594:	429d      	cmp	r5, r3
   18596:	d126      	bne.n	185e6 <ull_conn_tx_ack+0x86>
		if (link->next == (void *)tx) {
   18598:	6830      	ldr	r0, [r6, #0]
   1859a:	4284      	cmp	r4, r0
   1859c:	f000 8096 	beq.w	186cc <ull_conn_tx_ack+0x16c>
		LL_ASSERT(!link->next);
   185a0:	2800      	cmp	r0, #0
   185a2:	d0ef      	beq.n	18584 <ull_conn_tx_ack+0x24>
   185a4:	4abf      	ldr	r2, [pc, #764]	; (188a4 <ull_conn_tx_ack+0x344>)
   185a6:	49c0      	ldr	r1, [pc, #768]	; (188a8 <ull_conn_tx_ack+0x348>)
   185a8:	48c0      	ldr	r0, [pc, #768]	; (188ac <ull_conn_tx_ack+0x34c>)
   185aa:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   185ae:	f00a f8a9 	bl	22704 <printk>
   185b2:	4040      	eors	r0, r0
   185b4:	f380 8811 	msr	BASEPRI, r0
   185b8:	f04f 0003 	mov.w	r0, #3
   185bc:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   185be:	4621      	mov	r1, r4
   185c0:	4628      	mov	r0, r5
}
   185c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   185c6:	f7fc bc59 	b.w	14e7c <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   185ca:	4ab6      	ldr	r2, [pc, #728]	; (188a4 <ull_conn_tx_ack+0x344>)
   185cc:	49b8      	ldr	r1, [pc, #736]	; (188b0 <ull_conn_tx_ack+0x350>)
   185ce:	48b7      	ldr	r0, [pc, #732]	; (188ac <ull_conn_tx_ack+0x34c>)
   185d0:	f240 7383 	movw	r3, #1923	; 0x783
   185d4:	f00a f896 	bl	22704 <printk>
   185d8:	4040      	eors	r0, r0
   185da:	f380 8811 	msr	BASEPRI, r0
   185de:	f04f 0003 	mov.w	r0, #3
   185e2:	df02      	svc	2
   185e4:	e7c2      	b.n	1856c <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   185e6:	48b3      	ldr	r0, [pc, #716]	; (188b4 <ull_conn_tx_ack+0x354>)
   185e8:	462a      	mov	r2, r5
   185ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   185ee:	f7f8 fd79 	bl	110e4 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   185f2:	79e3      	ldrb	r3, [r4, #7]
   185f4:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   185f6:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   185f8:	2b16      	cmp	r3, #22
   185fa:	d86c      	bhi.n	186d6 <ull_conn_tx_ack+0x176>
   185fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   18600:	009e00ba 	.word	0x009e00ba
   18604:	006b006b 	.word	0x006b006b
   18608:	007500d9 	.word	0x007500d9
   1860c:	0075006b 	.word	0x0075006b
   18610:	00c600d2 	.word	0x00c600d2
   18614:	0094006b 	.word	0x0094006b
   18618:	006b006b 	.word	0x006b006b
   1861c:	0072006b 	.word	0x0072006b
   18620:	0075006b 	.word	0x0075006b
   18624:	00e40110 	.word	0x00e40110
   18628:	006b007c 	.word	0x006b007c
   1862c:	0083      	.short	0x0083
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1862e:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   18630:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18632:	f043 0303 	orr.w	r3, r3, #3
   18636:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   18638:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1863a:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1863c:	2208      	movs	r2, #8
   1863e:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   18642:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   18644:	18a0      	adds	r0, r4, r2
   18646:	f00c f9aa 	bl	2499e <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1864a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
   1864e:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   18650:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
   18654:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   18656:	210c      	movs	r1, #12
   18658:	f104 0012 	add.w	r0, r4, #18
   1865c:	f002 f888 	bl	1a770 <lll_csrand_isr_get>
	    conn->tx_head &&
   18660:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
   18664:	2b00      	cmp	r3, #0
   18666:	f000 80fd 	beq.w	18864 <ull_conn_tx_ack+0x304>
	    !conn->llcp_enc.pause_tx &&
   1866a:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
   1866e:	0791      	lsls	r1, r2, #30
   18670:	f100 80f8 	bmi.w	18864 <ull_conn_tx_ack+0x304>
	    !conn->llcp_phy.pause_tx &&
   18674:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
   18678:	07d2      	lsls	r2, r2, #31
   1867a:	f100 80f3 	bmi.w	18864 <ull_conn_tx_ack+0x304>
		if (conn->tx_head == conn->tx_data) {
   1867e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
   18682:	4293      	cmp	r3, r2
   18684:	f000 811c 	beq.w	188c0 <ull_conn_tx_ack+0x360>
		} else if (!conn->tx_ctrl) {
   18688:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   1868c:	2a00      	cmp	r2, #0
   1868e:	f000 8126 	beq.w	188de <ull_conn_tx_ack+0x37e>
	tx->next = conn->tx_ctrl_last->next;
   18692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
   18696:	681a      	ldr	r2, [r3, #0]
   18698:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1869a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1869c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1869e:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
	if (!tx->next) {
   186a2:	2b00      	cmp	r3, #0
   186a4:	f000 80c9 	beq.w	1883a <ull_conn_tx_ack+0x2da>
		if (link->next == (void *)tx) {
   186a8:	6833      	ldr	r3, [r6, #0]
   186aa:	2b00      	cmp	r3, #0
   186ac:	f040 80cb 	bne.w	18846 <ull_conn_tx_ack+0x2e6>
			LL_ASSERT(link->next);
   186b0:	4a7c      	ldr	r2, [pc, #496]	; (188a4 <ull_conn_tx_ack+0x344>)
   186b2:	4981      	ldr	r1, [pc, #516]	; (188b8 <ull_conn_tx_ack+0x358>)
   186b4:	487d      	ldr	r0, [pc, #500]	; (188ac <ull_conn_tx_ack+0x34c>)
   186b6:	f240 7392 	movw	r3, #1938	; 0x792
   186ba:	f00a f823 	bl	22704 <printk>
   186be:	4040      	eors	r0, r0
   186c0:	f380 8811 	msr	BASEPRI, r0
   186c4:	f04f 0003 	mov.w	r0, #3
   186c8:	df02      	svc	2
   186ca:	2000      	movs	r0, #0
}
   186cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   186d0:	497a      	ldr	r1, [pc, #488]	; (188bc <ull_conn_tx_ack+0x35c>)
   186d2:	f7f8 bcef 	b.w	110b4 <mem_release>
		if (link->next == (void *)tx) {
   186d6:	6830      	ldr	r0, [r6, #0]
   186d8:	42a0      	cmp	r0, r4
   186da:	d0f7      	beq.n	186cc <ull_conn_tx_ack+0x16c>
		LL_ASSERT(!link->next);
   186dc:	2800      	cmp	r0, #0
   186de:	f47f af61 	bne.w	185a4 <ull_conn_tx_ack+0x44>
   186e2:	e74f      	b.n	18584 <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   186e4:	7a23      	ldrb	r3, [r4, #8]
   186e6:	2b03      	cmp	r3, #3
   186e8:	d01e      	beq.n	18728 <ull_conn_tx_ack+0x1c8>
			conn->common.txn_lock = 0U;
   186ea:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
   186ee:	f36f 0341 	bfc	r3, #1, #1
   186f2:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
   186f6:	e74f      	b.n	18598 <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   186f8:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   186fc:	2202      	movs	r2, #2
   186fe:	f362 0301 	bfi	r3, r2, #0, #2
   18702:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   18706:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
   1870a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   1870e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   18712:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   18716:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1871a:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   1871e:	f36f 0300 	bfc	r3, #0, #1
   18722:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
   18726:	e737      	b.n	18598 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
   18728:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1872c:	f023 0303 	bic.w	r3, r3, #3
   18730:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
   18734:	2300      	movs	r3, #0
   18736:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
   1873a:	e72d      	b.n	18598 <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
   1873c:	2208      	movs	r2, #8
   1873e:	f104 0112 	add.w	r1, r4, #18
   18742:	30ce      	adds	r0, #206	; 0xce
   18744:	f00c f92b 	bl	2499e <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   18748:	2204      	movs	r2, #4
   1874a:	f104 011a 	add.w	r1, r4, #26
   1874e:	f107 0078 	add.w	r0, r7, #120	; 0x78
   18752:	f00c f924 	bl	2499e <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   18756:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   1875a:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   1875e:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
   18762:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
   18766:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1876a:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
   1876e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
   18772:	e711      	b.n	18598 <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   18774:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   18776:	2b13      	cmp	r3, #19
   18778:	bf08      	it	eq
   1877a:	2316      	moveq	r3, #22
   1877c:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
   18780:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   18784:	3b01      	subs	r3, #1
   18786:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
   1878a:	e705      	b.n	18598 <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
   1878c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   18790:	2b00      	cmp	r3, #0
   18792:	f6bf af4c 	bge.w	1862e <ull_conn_tx_ack+0xce>
			conn->llcp_enc.pause_tx = 1U;
   18796:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1879a:	f043 0302 	orr.w	r3, r3, #2
   1879e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
   187a2:	e6f9      	b.n	18598 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
   187a4:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   187a8:	f023 0306 	bic.w	r3, r3, #6
   187ac:	f043 0306 	orr.w	r3, r3, #6
   187b0:	e7d5      	b.n	1875e <ull_conn_tx_ack+0x1fe>
		if (conn->lll.role) {
   187b2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   187b6:	2b00      	cmp	r3, #0
   187b8:	db46      	blt.n	18848 <ull_conn_tx_ack+0x2e8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   187ba:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
   187be:	f043 0303 	orr.w	r3, r3, #3
   187c2:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
   187c6:	e6e7      	b.n	18598 <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
   187c8:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   187cc:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
   187d0:	f36f 0341 	bfc	r3, #1, #1
   187d4:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   187d8:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   187dc:	428b      	cmp	r3, r1
   187de:	f43f aedb 	beq.w	18598 <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
   187e2:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
   187e6:	f002 0307 	and.w	r3, r2, #7
   187ea:	2b03      	cmp	r3, #3
   187ec:	d005      	beq.n	187fa <ull_conn_tx_ack+0x29a>
   187ee:	3303      	adds	r3, #3
   187f0:	f003 0307 	and.w	r3, r3, #7
   187f4:	2b01      	cmp	r3, #1
   187f6:	f63f af6e 	bhi.w	186d6 <ull_conn_tx_ack+0x176>
				conn->lll.max_tx_octets =
   187fa:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
   187fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
   18800:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
   18804:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
   18808:	f002 0307 	and.w	r3, r2, #7
   1880c:	2b05      	cmp	r3, #5
   1880e:	d042      	beq.n	18896 <ull_conn_tx_ack+0x336>
				if (!conn->llcp_length.cache.tx_octets) {
   18810:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
   18814:	bb8b      	cbnz	r3, 1887a <ull_conn_tx_ack+0x31a>
					conn->llcp_length.ack =
   18816:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
   1881a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
   1881e:	e6bb      	b.n	18598 <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   18820:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   18824:	f003 0207 	and.w	r2, r3, #7
   18828:	2a01      	cmp	r2, #1
   1882a:	f47f aeb5 	bne.w	18598 <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1882e:	2202      	movs	r2, #2
   18830:	f362 0302 	bfi	r3, r2, #0, #3
   18834:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
   18838:	e6ae      	b.n	18598 <ull_conn_tx_ack+0x38>
		if (link->next == (void *)tx) {
   1883a:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   1883c:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
		if (link->next == (void *)tx) {
   18840:	2b00      	cmp	r3, #0
   18842:	f43f af35 	beq.w	186b0 <ull_conn_tx_ack+0x150>
}
   18846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_enc.pause_rx = 0U;
   18848:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   1884c:	f023 0303 	bic.w	r3, r3, #3
   18850:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
   18854:	2300      	movs	r3, #0
   18856:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
   1885a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   1885e:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
   18862:	e699      	b.n	18598 <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
   18864:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   18868:	2a00      	cmp	r2, #0
   1886a:	f47f af12 	bne.w	18692 <ull_conn_tx_ack+0x132>
			tx->next = conn->tx_head;
   1886e:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   18870:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   18874:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
   18878:	e713      	b.n	186a2 <ull_conn_tx_ack+0x142>
				conn->llcp_length.tx_octets =
   1887a:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   1887e:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18880:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   18884:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
   18888:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1888c:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
   18890:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
   18894:	e680      	b.n	18598 <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
   18896:	2304      	movs	r3, #4
   18898:	f363 0202 	bfi	r2, r3, #0, #3
   1889c:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
   188a0:	e67a      	b.n	18598 <ull_conn_tx_ack+0x38>
   188a2:	bf00      	nop
   188a4:	0002978c 	.word	0x0002978c
   188a8:	00029940 	.word	0x00029940
   188ac:	00029220 	.word	0x00029220
   188b0:	00029934 	.word	0x00029934
   188b4:	200019a0 	.word	0x200019a0
   188b8:	0002994c 	.word	0x0002994c
   188bc:	20002b40 	.word	0x20002b40
			conn->tx_data = conn->tx_data->next;
   188c0:	681a      	ldr	r2, [r3, #0]
   188c2:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   188c6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   188ca:	2a00      	cmp	r2, #0
   188cc:	f47f aee1 	bne.w	18692 <ull_conn_tx_ack+0x132>
			tx->next = conn->tx_head->next;
   188d0:	681a      	ldr	r2, [r3, #0]
   188d2:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   188d4:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   188d6:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   188d8:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
   188dc:	e6e1      	b.n	186a2 <ull_conn_tx_ack+0x142>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   188de:	791a      	ldrb	r2, [r3, #4]
   188e0:	f002 0203 	and.w	r2, r2, #3
   188e4:	2a03      	cmp	r2, #3
   188e6:	d002      	beq.n	188ee <ull_conn_tx_ack+0x38e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   188e8:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
   188ec:	e6d1      	b.n	18692 <ull_conn_tx_ack+0x132>
	    ((pdu_data_tx->llctrl.opcode !=
   188ee:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   188f0:	2a03      	cmp	r2, #3
   188f2:	d0ed      	beq.n	188d0 <ull_conn_tx_ack+0x370>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   188f4:	2a0a      	cmp	r2, #10
   188f6:	d1f7      	bne.n	188e8 <ull_conn_tx_ack+0x388>
   188f8:	e7ea      	b.n	188d0 <ull_conn_tx_ack+0x370>
   188fa:	bf00      	nop

000188fc <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   188fc:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   18900:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   18904:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   18906:	bf03      	ittte	eq
   18908:	3301      	addeq	r3, #1
   1890a:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
   1890e:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   18910:	200c      	movne	r0, #12
}
   18912:	4770      	bx	lr

00018914 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   18914:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (lll->enc_tx) {
   18918:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	switch (lll->phy_tx_time) {
   1891c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18920:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18922:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	return max_tx_octets;
   18924:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18926:	bf15      	itete	ne
   18928:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1892a:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1892c:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1892e:	3b0b      	subeq	r3, #11
   18930:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   18932:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   18934:	bf44      	itt	mi
   18936:	3b04      	submi	r3, #4
   18938:	b29b      	uxthmi	r3, r3
}
   1893a:	4298      	cmp	r0, r3
   1893c:	bf28      	it	cs
   1893e:	4618      	movcs	r0, r3
   18940:	4770      	bx	lr
   18942:	bf00      	nop

00018944 <ull_pdu_data_init>:
}
   18944:	4770      	bx	lr
   18946:	bf00      	nop

00018948 <ticker_op_stop_scan_cb>:
}
   18948:	4770      	bx	lr
   1894a:	bf00      	nop

0001894c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1894c:	b900      	cbnz	r0, 18950 <ticker_op_cb+0x4>
   1894e:	4770      	bx	lr
{
   18950:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18952:	4a07      	ldr	r2, [pc, #28]	; (18970 <ticker_op_cb+0x24>)
   18954:	4907      	ldr	r1, [pc, #28]	; (18974 <ticker_op_cb+0x28>)
   18956:	4808      	ldr	r0, [pc, #32]	; (18978 <ticker_op_cb+0x2c>)
   18958:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1895c:	f009 fed2 	bl	22704 <printk>
   18960:	4040      	eors	r0, r0
   18962:	f380 8811 	msr	BASEPRI, r0
   18966:	f04f 0003 	mov.w	r0, #3
   1896a:	df02      	svc	2
}
   1896c:	bd08      	pop	{r3, pc}
   1896e:	bf00      	nop
   18970:	0002996c 	.word	0x0002996c
   18974:	000297ec 	.word	0x000297ec
   18978:	00029220 	.word	0x00029220

0001897c <ull_central_ticker_cb>:
{
   1897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18980:	9c07      	ldr	r4, [sp, #28]
   18982:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   18986:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   18988:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1898a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1898e:	4299      	cmp	r1, r3
   18990:	d02d      	beq.n	189ee <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   18992:	4606      	mov	r6, r0
   18994:	4617      	mov	r7, r2
   18996:	4601      	mov	r1, r0
   18998:	462a      	mov	r2, r5
   1899a:	4620      	mov	r0, r4
   1899c:	f7e9 f888 	bl	1ab0 <ull_conn_llcp>
		if (ret) {
   189a0:	bb28      	cbnz	r0, 189ee <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
   189a2:	7823      	ldrb	r3, [r4, #0]
   189a4:	3301      	adds	r3, #1
   189a6:	b2db      	uxtb	r3, r3
   189a8:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   189aa:	b383      	cbz	r3, 18a0e <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   189ac:	2002      	movs	r0, #2
   189ae:	f7ff fa19 	bl	17de4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   189b2:	2102      	movs	r1, #2
   189b4:	4620      	mov	r0, r4
   189b6:	f7ff fc47 	bl	18248 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   189ba:	491c      	ldr	r1, [pc, #112]	; (18a2c <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   189bc:	4b1c      	ldr	r3, [pc, #112]	; (18a30 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   189be:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   189c0:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   189c4:	2200      	movs	r2, #0
	p.param = &conn->lll;
   189c6:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   189c8:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   189cc:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   189d0:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   189d2:	2001      	movs	r0, #1
   189d4:	4611      	mov	r1, r2
   189d6:	f7f8 fc2b 	bl	11230 <mayfly_enqueue>
	LL_ASSERT(!err);
   189da:	b950      	cbnz	r0, 189f2 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   189dc:	20ff      	movs	r0, #255	; 0xff
   189de:	f7ff fa01 	bl	17de4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   189e2:	4620      	mov	r0, r4
   189e4:	21ff      	movs	r1, #255	; 0xff
}
   189e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   189ea:	f7ff bc2d 	b.w	18248 <ull_conn_tx_lll_enqueue>
}
   189ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   189f2:	4a10      	ldr	r2, [pc, #64]	; (18a34 <ull_central_ticker_cb+0xb8>)
   189f4:	4910      	ldr	r1, [pc, #64]	; (18a38 <ull_central_ticker_cb+0xbc>)
   189f6:	4811      	ldr	r0, [pc, #68]	; (18a3c <ull_central_ticker_cb+0xc0>)
   189f8:	f240 434d 	movw	r3, #1101	; 0x44d
   189fc:	f009 fe82 	bl	22704 <printk>
   18a00:	4040      	eors	r0, r0
   18a02:	f380 8811 	msr	BASEPRI, r0
   18a06:	f04f 0003 	mov.w	r0, #3
   18a0a:	df02      	svc	2
   18a0c:	e7e6      	b.n	189dc <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   18a0e:	4a09      	ldr	r2, [pc, #36]	; (18a34 <ull_central_ticker_cb+0xb8>)
   18a10:	490b      	ldr	r1, [pc, #44]	; (18a40 <ull_central_ticker_cb+0xc4>)
   18a12:	480a      	ldr	r0, [pc, #40]	; (18a3c <ull_central_ticker_cb+0xc0>)
   18a14:	f240 433a 	movw	r3, #1082	; 0x43a
   18a18:	f009 fe74 	bl	22704 <printk>
   18a1c:	4040      	eors	r0, r0
   18a1e:	f380 8811 	msr	BASEPRI, r0
   18a22:	f04f 0003 	mov.w	r0, #3
   18a26:	df02      	svc	2
   18a28:	e7c0      	b.n	189ac <ull_central_ticker_cb+0x30>
   18a2a:	bf00      	nop
   18a2c:	20002c48 	.word	0x20002c48
   18a30:	20000674 	.word	0x20000674
   18a34:	0002996c 	.word	0x0002996c
   18a38:	00029598 	.word	0x00029598
   18a3c:	00029220 	.word	0x00029220
   18a40:	0002975c 	.word	0x0002975c

00018a44 <ll_connect_disable>:
{
   18a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a48:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   18a4a:	2000      	movs	r0, #0
   18a4c:	f7fc ff44 	bl	158d8 <ull_scan_is_enabled_get>
	if (!scan) {
   18a50:	b368      	cbz	r0, 18aae <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   18a52:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   18a54:	4604      	mov	r4, r0
   18a56:	b353      	cbz	r3, 18aae <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   18a58:	f893 2020 	ldrb.w	r2, [r3, #32]
   18a5c:	f042 0202 	orr.w	r2, r2, #2
   18a60:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   18a64:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   18a66:	b317      	cbz	r7, 18aae <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   18a68:	4601      	mov	r1, r0
   18a6a:	2000      	movs	r0, #0
   18a6c:	f7fc fe82 	bl	15774 <ull_scan_disable>
	if (!err) {
   18a70:	4605      	mov	r5, r0
   18a72:	b9c8      	cbnz	r0, 18aa8 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   18a74:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   18a76:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   18a7a:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
   18a7e:	f1b8 0f00 	cmp.w	r8, #0
   18a82:	d018      	beq.n	18ab6 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   18a84:	4640      	mov	r0, r8
   18a86:	f7fc f9af 	bl	14de8 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18a8a:	2316      	movs	r3, #22
   18a8c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
   18a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18a94:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
   18a98:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a9a:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   18a9c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18aa0:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
   18aa4:	f8c6 9000 	str.w	r9, [r6]
}
   18aa8:	4628      	mov	r0, r5
   18aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   18aae:	250c      	movs	r5, #12
}
   18ab0:	4628      	mov	r0, r5
   18ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   18ab6:	4a07      	ldr	r2, [pc, #28]	; (18ad4 <ll_connect_disable+0x90>)
   18ab8:	4907      	ldr	r1, [pc, #28]	; (18ad8 <ll_connect_disable+0x94>)
   18aba:	4808      	ldr	r0, [pc, #32]	; (18adc <ll_connect_disable+0x98>)
   18abc:	f240 235b 	movw	r3, #603	; 0x25b
   18ac0:	f009 fe20 	bl	22704 <printk>
   18ac4:	4040      	eors	r0, r0
   18ac6:	f380 8811 	msr	BASEPRI, r0
   18aca:	f04f 0003 	mov.w	r0, #3
   18ace:	df02      	svc	2
   18ad0:	e7d8      	b.n	18a84 <ll_connect_disable+0x40>
   18ad2:	bf00      	nop
   18ad4:	0002996c 	.word	0x0002996c
   18ad8:	000297e4 	.word	0x000297e4
   18adc:	00029220 	.word	0x00029220

00018ae0 <ll_enc_req_send>:
{
   18ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ae4:	4607      	mov	r7, r0
   18ae6:	4688      	mov	r8, r1
   18ae8:	4691      	mov	r9, r2
   18aea:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   18aec:	f7fd fb8e 	bl	1620c <ll_connected_get>
	if (!conn) {
   18af0:	2800      	cmp	r0, #0
   18af2:	d06a      	beq.n	18bca <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   18af4:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
   18af8:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
   18afc:	429a      	cmp	r2, r3
   18afe:	4604      	mov	r4, r0
   18b00:	d142      	bne.n	18b88 <ll_enc_req_send+0xa8>
   18b02:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   18b06:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   18b0a:	429a      	cmp	r2, r3
   18b0c:	d003      	beq.n	18b16 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   18b0e:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   18b12:	2b03      	cmp	r3, #3
   18b14:	d038      	beq.n	18b88 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   18b16:	f7fd fb8b 	bl	16230 <ll_tx_mem_acquire>
	if (tx) {
   18b1a:	4605      	mov	r5, r0
   18b1c:	b3a0      	cbz	r0, 18b88 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   18b1e:	3004      	adds	r0, #4
   18b20:	f7ff ff10 	bl	18944 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   18b24:	4631      	mov	r1, r6
   18b26:	2210      	movs	r2, #16
   18b28:	f204 1049 	addw	r0, r4, #329	; 0x149
   18b2c:	f00b ff37 	bl	2499e <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   18b30:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b34:	f013 0318 	ands.w	r3, r3, #24
   18b38:	d029      	beq.n	18b8e <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   18b3a:	2b18      	cmp	r3, #24
   18b3c:	d121      	bne.n	18b82 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   18b3e:	2208      	movs	r2, #8
   18b40:	4641      	mov	r1, r8
   18b42:	f204 1041 	addw	r0, r4, #321	; 0x141
   18b46:	f00b ff2a 	bl	2499e <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   18b4a:	f899 3000 	ldrb.w	r3, [r9]
   18b4e:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
   18b52:	f899 3001 	ldrb.w	r3, [r9, #1]
   18b56:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18b5a:	792b      	ldrb	r3, [r5, #4]
   18b5c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18b60:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18b62:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   18b64:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18b66:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   18b68:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   18b6a:	4629      	mov	r1, r5
   18b6c:	4638      	mov	r0, r7
   18b6e:	f7fd fb6b 	bl	16248 <ll_tx_mem_enqueue>
   18b72:	b930      	cbnz	r0, 18b82 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   18b74:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
   18b78:	3301      	adds	r3, #1
   18b7a:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
   18b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   18b82:	4628      	mov	r0, r5
   18b84:	f7fd fb5a 	bl	1623c <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18b88:	200c      	movs	r0, #12
}
   18b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18b8e:	792b      	ldrb	r3, [r5, #4]
   18b90:	f043 0303 	orr.w	r3, r3, #3
   18b94:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   18b96:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   18b98:	2208      	movs	r2, #8
			pdu_data_tx->len =
   18b9a:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   18b9c:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   18b9e:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   18ba0:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   18ba2:	18a8      	adds	r0, r5, r2
   18ba4:	f00b fefb 	bl	2499e <memcpy>
			enc_req->ediv[0] = ediv[0];
   18ba8:	f899 3000 	ldrb.w	r3, [r9]
   18bac:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   18bae:	f899 3001 	ldrb.w	r3, [r9, #1]
   18bb2:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   18bb4:	2108      	movs	r1, #8
   18bb6:	f105 0012 	add.w	r0, r5, #18
   18bba:	f001 fdcb 	bl	1a754 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   18bbe:	2104      	movs	r1, #4
   18bc0:	f105 001a 	add.w	r0, r5, #26
   18bc4:	f001 fdc6 	bl	1a754 <lll_csrand_get>
   18bc8:	e7cf      	b.n	18b6a <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18bca:	2002      	movs	r0, #2
}
   18bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018bd0 <ull_central_reset>:
{
   18bd0:	b530      	push	{r4, r5, lr}
   18bd2:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   18bd4:	a801      	add	r0, sp, #4
   18bd6:	f7ff ff35 	bl	18a44 <ll_connect_disable>
	if (!err) {
   18bda:	4604      	mov	r4, r0
   18bdc:	b110      	cbz	r0, 18be4 <ull_central_reset+0x14>
}
   18bde:	4620      	mov	r0, r4
   18be0:	b003      	add	sp, #12
   18be2:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   18be4:	f7fc fe78 	bl	158d8 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   18be8:	4605      	mov	r5, r0
   18bea:	b150      	cbz	r0, 18c02 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   18bec:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   18bf0:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   18bf2:	f36f 0300 	bfc	r3, #0, #1
}
   18bf6:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   18bf8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   18bfc:	622a      	str	r2, [r5, #32]
}
   18bfe:	b003      	add	sp, #12
   18c00:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   18c02:	4a07      	ldr	r2, [pc, #28]	; (18c20 <ull_central_reset+0x50>)
   18c04:	4907      	ldr	r1, [pc, #28]	; (18c24 <ull_central_reset+0x54>)
   18c06:	4808      	ldr	r0, [pc, #32]	; (18c28 <ull_central_reset+0x58>)
   18c08:	f240 23e9 	movw	r3, #745	; 0x2e9
   18c0c:	f009 fd7a 	bl	22704 <printk>
   18c10:	4040      	eors	r0, r0
   18c12:	f380 8811 	msr	BASEPRI, r0
   18c16:	f04f 0003 	mov.w	r0, #3
   18c1a:	df02      	svc	2
   18c1c:	e7e6      	b.n	18bec <ull_central_reset+0x1c>
   18c1e:	bf00      	nop
   18c20:	0002996c 	.word	0x0002996c
   18c24:	00029ea0 	.word	0x00029ea0
   18c28:	00029220 	.word	0x00029220

00018c2c <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   18c2c:	6883      	ldr	r3, [r0, #8]
{
   18c2e:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   18c30:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   18c32:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   18c34:	b31c      	cbz	r4, 18c7e <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   18c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
   18c38:	2200      	movs	r2, #0
   18c3a:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   18c3c:	b163      	cbz	r3, 18c58 <ull_central_cleanup+0x2c>
   18c3e:	4a1e      	ldr	r2, [pc, #120]	; (18cb8 <ull_central_cleanup+0x8c>)
   18c40:	491e      	ldr	r1, [pc, #120]	; (18cbc <ull_central_cleanup+0x90>)
   18c42:	481f      	ldr	r0, [pc, #124]	; (18cc0 <ull_central_cleanup+0x94>)
   18c44:	f240 3305 	movw	r3, #773	; 0x305
   18c48:	f009 fd5c 	bl	22704 <printk>
   18c4c:	4040      	eors	r0, r0
   18c4e:	f380 8811 	msr	BASEPRI, r0
   18c52:	f04f 0003 	mov.w	r0, #3
   18c56:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   18c58:	f104 0130 	add.w	r1, r4, #48	; 0x30
   18c5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18c60:	f7f8 fa68 	bl	11134 <memq_deinit>
	LL_ASSERT(link);
   18c64:	4606      	mov	r6, r0
   18c66:	b1c0      	cbz	r0, 18c9a <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   18c68:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   18c6a:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
   18c6c:	f7fd fab8 	bl	161e0 <ll_conn_release>
	scan->is_enabled = 0U;
   18c70:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   18c74:	f36f 0300 	bfc	r3, #0, #1
   18c78:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   18c7c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   18c7e:	4a0e      	ldr	r2, [pc, #56]	; (18cb8 <ull_central_cleanup+0x8c>)
   18c80:	4910      	ldr	r1, [pc, #64]	; (18cc4 <ull_central_cleanup+0x98>)
   18c82:	480f      	ldr	r0, [pc, #60]	; (18cc0 <ull_central_cleanup+0x94>)
   18c84:	f240 3302 	movw	r3, #770	; 0x302
   18c88:	f009 fd3c 	bl	22704 <printk>
   18c8c:	4040      	eors	r0, r0
   18c8e:	f380 8811 	msr	BASEPRI, r0
   18c92:	f04f 0003 	mov.w	r0, #3
   18c96:	df02      	svc	2
   18c98:	e7cd      	b.n	18c36 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   18c9a:	4a07      	ldr	r2, [pc, #28]	; (18cb8 <ull_central_cleanup+0x8c>)
   18c9c:	490a      	ldr	r1, [pc, #40]	; (18cc8 <ull_central_cleanup+0x9c>)
   18c9e:	4808      	ldr	r0, [pc, #32]	; (18cc0 <ull_central_cleanup+0x94>)
   18ca0:	f44f 7342 	mov.w	r3, #776	; 0x308
   18ca4:	f009 fd2e 	bl	22704 <printk>
   18ca8:	4040      	eors	r0, r0
   18caa:	f380 8811 	msr	BASEPRI, r0
   18cae:	f04f 0003 	mov.w	r0, #3
   18cb2:	df02      	svc	2
   18cb4:	e7d8      	b.n	18c68 <ull_central_cleanup+0x3c>
   18cb6:	bf00      	nop
   18cb8:	0002996c 	.word	0x0002996c
   18cbc:	000299d0 	.word	0x000299d0
   18cc0:	00029220 	.word	0x00029220
   18cc4:	000299c4 	.word	0x000299c4
   18cc8:	000297e4 	.word	0x000297e4

00018ccc <ull_central_chm_update>:
{
   18ccc:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   18cce:	2000      	movs	r0, #0
   18cd0:	f7fd fa9c 	bl	1620c <ll_connected_get>
		if (!conn || conn->lll.role) {
   18cd4:	4604      	mov	r4, r0
   18cd6:	b1d8      	cbz	r0, 18d10 <ull_central_chm_update+0x44>
   18cd8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   18cdc:	2b00      	cmp	r3, #0
   18cde:	db17      	blt.n	18d10 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   18ce0:	f7ff fe0c 	bl	188fc <ull_conn_llcp_req>
		if (ret) {
   18ce4:	4605      	mov	r5, r0
   18ce6:	b988      	cbnz	r0, 18d0c <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   18ce8:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   18cec:	f000 f9c0 	bl	19070 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   18cf0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
   18cf4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
   18cf8:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   18cfc:	2102      	movs	r1, #2
		conn->llcp_req++;
   18cfe:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   18d00:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
   18d04:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
   18d08:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
   18d0c:	4628      	mov	r0, r5
   18d0e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   18d10:	2500      	movs	r5, #0
}
   18d12:	4628      	mov	r0, r5
   18d14:	bd38      	pop	{r3, r4, r5, pc}
   18d16:	bf00      	nop

00018d18 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   18d18:	6008      	str	r0, [r1, #0]
}
   18d1a:	4770      	bx	lr

00018d1c <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   18d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d20:	b091      	sub	sp, #68	; 0x44
   18d22:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   18d26:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
   18d28:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   18d2c:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   18d2e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   18d30:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   18d34:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   18d36:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   18d38:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   18d3a:	da02      	bge.n	18d42 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   18d3c:	4613      	mov	r3, r2
   18d3e:	3314      	adds	r3, #20
   18d40:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   18d42:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   18d44:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   18d48:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   18d4c:	f8df a24c 	ldr.w	sl, [pc, #588]	; 18f9c <win_offset_calc.constprop.0+0x280>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   18d50:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   18d54:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   18d56:	f8cd 9018 	str.w	r9, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
   18d5a:	46b3      	mov	fp, r6
	ticks_slot_abs_prev = 0U;
   18d5c:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   18d5e:	4635      	mov	r5, r6
   18d60:	e044      	b.n	18dec <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   18d62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18d66:	2bff      	cmp	r3, #255	; 0xff
   18d68:	d064      	beq.n	18e34 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   18d6a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   18d6e:	d011      	beq.n	18d94 <win_offset_calc.constprop.0+0x78>
   18d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d72:	455a      	cmp	r2, fp
   18d74:	d00e      	beq.n	18d94 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   18d76:	498a      	ldr	r1, [pc, #552]	; (18fa0 <win_offset_calc.constprop.0+0x284>)
   18d78:	488a      	ldr	r0, [pc, #552]	; (18fa4 <win_offset_calc.constprop.0+0x288>)
   18d7a:	f240 13c3 	movw	r3, #451	; 0x1c3
   18d7e:	4652      	mov	r2, sl
   18d80:	f009 fcc0 	bl	22704 <printk>
   18d84:	4040      	eors	r0, r0
   18d86:	f380 8811 	msr	BASEPRI, r0
   18d8a:	f04f 0003 	mov.w	r0, #3
   18d8e:	df02      	svc	2
		if ((ticker_id < TICKER_ID_SCAN_BASE) ||
   18d90:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18d94:	1e9a      	subs	r2, r3, #2
   18d96:	2a01      	cmp	r2, #1
   18d98:	d824      	bhi.n	18de4 <win_offset_calc.constprop.0+0xc8>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   18d9a:	2b02      	cmp	r3, #2
   18d9c:	f000 80db 	beq.w	18f56 <win_offset_calc.constprop.0+0x23a>
		if (ticker_id_other != 0xff) {
   18da0:	9b06      	ldr	r3, [sp, #24]
   18da2:	2bff      	cmp	r3, #255	; 0xff
   18da4:	d176      	bne.n	18e94 <win_offset_calc.constprop.0+0x178>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   18da6:	2000      	movs	r0, #0
   18da8:	f7fd fa28 	bl	161fc <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   18dac:	9b07      	ldr	r3, [sp, #28]
   18dae:	4283      	cmp	r3, r0
   18db0:	d018      	beq.n	18de4 <win_offset_calc.constprop.0+0xc8>
   18db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18db4:	2b00      	cmp	r3, #0
   18db6:	d17c      	bne.n	18eb2 <win_offset_calc.constprop.0+0x196>
   18db8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   18dbc:	2b00      	cmp	r3, #0
   18dbe:	db11      	blt.n	18de4 <win_offset_calc.constprop.0+0xc8>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   18dc0:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   18dc2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   18dc6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   18dca:	3328      	adds	r3, #40	; 0x28
   18dcc:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   18dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18dd0:	681b      	ldr	r3, [r3, #0]
   18dd2:	454b      	cmp	r3, r9
   18dd4:	d37c      	bcc.n	18ed0 <win_offset_calc.constprop.0+0x1b4>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   18dd6:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   18dd8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   18ddc:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   18dde:	464d      	mov	r5, r9
   18de0:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   18de4:	783b      	ldrb	r3, [r7, #0]
   18de6:	42a3      	cmp	r3, r4
   18de8:	f240 80ba 	bls.w	18f60 <win_offset_calc.constprop.0+0x244>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   18dec:	ab0f      	add	r3, sp, #60	; 0x3c
   18dee:	9302      	str	r3, [sp, #8]
   18df0:	4b6d      	ldr	r3, [pc, #436]	; (18fa8 <win_offset_calc.constprop.0+0x28c>)
   18df2:	9301      	str	r3, [sp, #4]
   18df4:	ab0d      	add	r3, sp, #52	; 0x34
   18df6:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   18df8:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   18dfa:	ab0e      	add	r3, sp, #56	; 0x38
   18dfc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   18e00:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   18e02:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   18e04:	f7f9 fcbe 	bl	12784 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   18e08:	2802      	cmp	r0, #2
   18e0a:	d047      	beq.n	18e9c <win_offset_calc.constprop.0+0x180>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   18e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d0a7      	beq.n	18d62 <win_offset_calc.constprop.0+0x46>
   18e12:	4966      	ldr	r1, [pc, #408]	; (18fac <win_offset_calc.constprop.0+0x290>)
   18e14:	4863      	ldr	r0, [pc, #396]	; (18fa4 <win_offset_calc.constprop.0+0x288>)
   18e16:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   18e1a:	4652      	mov	r2, sl
   18e1c:	f009 fc72 	bl	22704 <printk>
   18e20:	4040      	eors	r0, r0
   18e22:	f380 8811 	msr	BASEPRI, r0
   18e26:	f04f 0003 	mov.w	r0, #3
   18e2a:	df02      	svc	2
		if (ticker_id == 0xff) {
   18e2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18e30:	2bff      	cmp	r3, #255	; 0xff
   18e32:	d19a      	bne.n	18d6a <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   18e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e36:	681b      	ldr	r3, [r3, #0]
   18e38:	429d      	cmp	r5, r3
   18e3a:	bf38      	it	cc
   18e3c:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   18e3e:	783b      	ldrb	r3, [r7, #0]
   18e40:	42a3      	cmp	r3, r4
   18e42:	d925      	bls.n	18e90 <win_offset_calc.constprop.0+0x174>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   18e44:	9b04      	ldr	r3, [sp, #16]
   18e46:	495a      	ldr	r1, [pc, #360]	; (18fb0 <win_offset_calc.constprop.0+0x294>)
			if (offset >= conn_interval) {
   18e48:	9805      	ldr	r0, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   18e4a:	442b      	add	r3, r5
   18e4c:	fba1 2303 	umull	r2, r3, r1, r3
   18e50:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   18e54:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   18e56:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   18e5a:	f240 8096 	bls.w	18f8a <win_offset_calc.constprop.0+0x26e>
   18e5e:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
   18e62:	e002      	b.n	18e6a <win_offset_calc.constprop.0+0x14e>
   18e64:	4594      	cmp	ip, r2
   18e66:	f240 8090 	bls.w	18f8a <win_offset_calc.constprop.0+0x26e>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   18e6a:	eb08 0044 	add.w	r0, r8, r4, lsl #1
	dst[0] = val;
   18e6e:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   18e72:	0a12      	lsrs	r2, r2, #8
   18e74:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   18e76:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   18e78:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   18e7a:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   18e7c:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   18e7e:	1973      	adds	r3, r6, r5
   18e80:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   18e84:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   18e86:	f3c3 124f 	ubfx	r2, r3, #5, #16
   18e8a:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   18e8e:	d8e9      	bhi.n	18e64 <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
   18e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e92:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   18e94:	703c      	strb	r4, [r7, #0]
}
   18e96:	b011      	add	sp, #68	; 0x44
   18e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
   18e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18e9e:	2b02      	cmp	r3, #2
   18ea0:	d1b4      	bne.n	18e0c <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   18ea2:	2102      	movs	r1, #2
   18ea4:	2000      	movs	r0, #0
   18ea6:	f7f9 fcb3 	bl	12810 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   18eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18eac:	2b02      	cmp	r3, #2
   18eae:	d0f8      	beq.n	18ea2 <win_offset_calc.constprop.0+0x186>
   18eb0:	e7ac      	b.n	18e0c <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   18eb2:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   18eb6:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   18eb8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
   18ebc:	2900      	cmp	r1, #0
   18ebe:	da59      	bge.n	18f74 <win_offset_calc.constprop.0+0x258>
				ticks_slot_abs_curr += ticks_slot_margin;
   18ec0:	333c      	adds	r3, #60	; 0x3c
   18ec2:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   18ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18ec6:	681b      	ldr	r3, [r3, #0]
   18ec8:	454b      	cmp	r3, r9
				ticks_slot_margin =
   18eca:	f04f 0b14 	mov.w	fp, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   18ece:	d282      	bcs.n	18dd6 <win_offset_calc.constprop.0+0xba>
				if (ticks_to_expire_prev <
   18ed0:	429d      	cmp	r5, r3
   18ed2:	bf38      	it	cc
   18ed4:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   18ed6:	783b      	ldrb	r3, [r7, #0]
   18ed8:	42a3      	cmp	r3, r4
   18eda:	d931      	bls.n	18f40 <win_offset_calc.constprop.0+0x224>
					(ticks_slot_abs_prev + ticks_slot_abs +
   18edc:	9b04      	ldr	r3, [sp, #16]
   18ede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18ee0:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   18ee4:	4413      	add	r3, r2
   18ee6:	449b      	add	fp, r3
   18ee8:	46b0      	mov	r8, r6
   18eea:	462e      	mov	r6, r5
   18eec:	465d      	mov	r5, fp
   18eee:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   18ef2:	e013      	b.n	18f1c <win_offset_calc.constprop.0+0x200>
					if (offset >= conn_interval) {
   18ef4:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
   18ef6:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   18efa:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
   18efc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18f00:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
   18f04:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   18f08:	d243      	bcs.n	18f92 <win_offset_calc.constprop.0+0x276>
	dst[0] = val;
   18f0a:	f80b 3014 	strb.w	r3, [fp, r4, lsl #1]
	dst[1] = val >> 8;
   18f0e:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   18f12:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   18f14:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   18f18:	42a3      	cmp	r3, r4
   18f1a:	d930      	bls.n	18f7e <win_offset_calc.constprop.0+0x262>
				       (ticker_ticks_diff_get(
   18f1c:	4631      	mov	r1, r6
   18f1e:	4648      	mov	r0, r9
   18f20:	f7f9 fc90 	bl	12844 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   18f24:	9b04      	ldr	r3, [sp, #16]
   18f26:	4a22      	ldr	r2, [pc, #136]	; (18fb0 <win_offset_calc.constprop.0+0x294>)
   18f28:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   18f2a:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   18f2c:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
						  ticks_slot_abs_prev) /
   18f30:	fba2 2303 	umull	r2, r3, r2, r3
					offset_index++;
   18f34:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   18f38:	d2dc      	bcs.n	18ef4 <win_offset_calc.constprop.0+0x1d8>
   18f3a:	4635      	mov	r5, r6
   18f3c:	4646      	mov	r6, r8
   18f3e:	46d8      	mov	r8, fp
				*ticks_to_offset_next = ticks_to_expire_prev;
   18f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f42:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   18f44:	9b05      	ldr	r3, [sp, #20]
   18f46:	42b3      	cmp	r3, r6
   18f48:	f63f af45 	bhi.w	18dd6 <win_offset_calc.constprop.0+0xba>
	if (ticker_id == 0xff) {
   18f4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18f50:	2bff      	cmp	r3, #255	; 0xff
   18f52:	d19f      	bne.n	18e94 <win_offset_calc.constprop.0+0x178>
   18f54:	e76e      	b.n	18e34 <win_offset_calc.constprop.0+0x118>
			ticker_id_other = ticker_id;
   18f56:	9306      	str	r3, [sp, #24]
	} while (offset_index < *offset_max);
   18f58:	783b      	ldrb	r3, [r7, #0]
   18f5a:	42a3      	cmp	r3, r4
   18f5c:	f63f af46 	bhi.w	18dec <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   18f60:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   18f64:	2bff      	cmp	r3, #255	; 0xff
   18f66:	d195      	bne.n	18e94 <win_offset_calc.constprop.0+0x178>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   18f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f6a:	681b      	ldr	r3, [r3, #0]
   18f6c:	429d      	cmp	r5, r3
   18f6e:	bf38      	it	cc
   18f70:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   18f72:	e78d      	b.n	18e90 <win_offset_calc.constprop.0+0x174>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   18f74:	3328      	adds	r3, #40	; 0x28
   18f76:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   18f78:	f04f 0b00 	mov.w	fp, #0
   18f7c:	e727      	b.n	18dce <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   18f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f80:	4635      	mov	r5, r6
   18f82:	601d      	str	r5, [r3, #0]
   18f84:	4646      	mov	r6, r8
   18f86:	46d8      	mov	r8, fp
				if (offset >= conn_interval) {
   18f88:	e725      	b.n	18dd6 <win_offset_calc.constprop.0+0xba>
		*ticks_to_offset_next = ticks_to_expire_prev;
   18f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   18f8c:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   18f8e:	601d      	str	r5, [r3, #0]
   18f90:	e780      	b.n	18e94 <win_offset_calc.constprop.0+0x178>
				*ticks_to_offset_next = ticks_to_expire_prev;
   18f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f94:	2500      	movs	r5, #0
   18f96:	46d8      	mov	r8, fp
   18f98:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   18f9a:	e7d7      	b.n	18f4c <win_offset_calc.constprop.0+0x230>
   18f9c:	000299fc 	.word	0x000299fc
   18fa0:	000292b8 	.word	0x000292b8
   18fa4:	00029220 	.word	0x00029220
   18fa8:	00018d19 	.word	0x00018d19
   18fac:	00029a40 	.word	0x00029a40
   18fb0:	cccccccd 	.word	0xcccccccd

00018fb4 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   18fb4:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   18fb6:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   18fb8:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   18fba:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   18fbc:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   18fbe:	89c0      	ldrh	r0, [r0, #14]
   18fc0:	6909      	ldr	r1, [r1, #16]
   18fc2:	3310      	adds	r3, #16
   18fc4:	f7ea bee8 	b.w	3d98 <after_mstr_offset_get>

00018fc8 <ull_sched_mfy_win_offset_use>:
{
   18fc8:	b510      	push	{r4, lr}
   18fca:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   18fcc:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   18fd0:	6901      	ldr	r1, [r0, #16]
   18fd2:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   18fd6:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   18fd8:	f7ea fede 	bl	3d98 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   18fdc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18fe0:	4908      	ldr	r1, [pc, #32]	; (19004 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   18fe2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   18fe6:	fba1 1303 	umull	r1, r3, r1, r3
   18fea:	0a9b      	lsrs	r3, r3, #10
   18fec:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   18ff0:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   18ff2:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   18ff4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   18ff8:	2204      	movs	r2, #4
   18ffa:	f362 0302 	bfi	r3, r2, #0, #3
   18ffe:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   19002:	bd10      	pop	{r4, pc}
   19004:	d1b71759 	.word	0xd1b71759

00019008 <ull_sched_mfy_free_win_offset_calc>:
{
   19008:	b510      	push	{r4, lr}
   1900a:	b084      	sub	sp, #16
   1900c:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1900e:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
   19012:	f8cd c004 	str.w	ip, [sp, #4]
   19016:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   1901a:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
   1901c:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   1901e:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   19022:	9300      	str	r3, [sp, #0]
   19024:	aa03      	add	r2, sp, #12
   19026:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
   1902a:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1902c:	f7ff fe76 	bl	18d1c <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   19030:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   19034:	2208      	movs	r2, #8
   19036:	f362 0303 	bfi	r3, r2, #0, #4
   1903a:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   1903e:	b004      	add	sp, #16
   19040:	bd10      	pop	{r4, pc}
   19042:	bf00      	nop

00019044 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   19044:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   19046:	4c08      	ldr	r4, [pc, #32]	; (19068 <ll_chm_update+0x24>)
   19048:	2205      	movs	r2, #5
{
   1904a:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   1904c:	4620      	mov	r0, r4
   1904e:	f00b fca6 	bl	2499e <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   19052:	2105      	movs	r1, #5
   19054:	4620      	mov	r0, r4
   19056:	f7f8 f9e9 	bl	1142c <util_ones_count_get>
   1905a:	4b04      	ldr	r3, [pc, #16]	; (1906c <ll_chm_update+0x28>)
   1905c:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1905e:	f7ff fe35 	bl	18ccc <ull_central_chm_update>
}
   19062:	2000      	movs	r0, #0
   19064:	bd10      	pop	{r4, pc}
   19066:	bf00      	nop
   19068:	20000684 	.word	0x20000684
   1906c:	200008a2 	.word	0x200008a2

00019070 <ull_chan_map_get>:
{
   19070:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   19072:	4903      	ldr	r1, [pc, #12]	; (19080 <ull_chan_map_get+0x10>)
   19074:	2205      	movs	r2, #5
   19076:	f00b fc92 	bl	2499e <memcpy>
	return count;
   1907a:	4b02      	ldr	r3, [pc, #8]	; (19084 <ull_chan_map_get+0x14>)
}
   1907c:	7818      	ldrb	r0, [r3, #0]
   1907e:	bd08      	pop	{r3, pc}
   19080:	20000684 	.word	0x20000684
   19084:	200008a2 	.word	0x200008a2

00019088 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19088:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1908a:	fb02 1c01 	mla	ip, r2, r1, r1
   1908e:	7802      	ldrb	r2, [r0, #0]
   19090:	491c      	ldr	r1, [pc, #112]	; (19104 <lll_chan_sel_1+0x7c>)
{
   19092:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19096:	4494      	add	ip, r2
   19098:	fb81 210c 	smull	r2, r1, r1, ip
   1909c:	4461      	add	r1, ip
   1909e:	1149      	asrs	r1, r1, #5
   190a0:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   190a4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   190a8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   190aa:	ebac 0101 	sub.w	r1, ip, r1
   190ae:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   190b0:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   190b2:	08c4      	lsrs	r4, r0, #3
   190b4:	f001 0107 	and.w	r1, r1, #7
   190b8:	f813 c004 	ldrb.w	ip, [r3, r4]
   190bc:	fa4c f101 	asr.w	r1, ip, r1
   190c0:	f011 0101 	ands.w	r1, r1, #1
   190c4:	d11d      	bne.n	19102 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   190c6:	fbb0 f2f5 	udiv	r2, r0, r5
   190ca:	fb05 0212 	mls	r2, r5, r2, r0
   190ce:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   190d0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   190d4:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   190d6:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   190d8:	f100 0c08 	add.w	ip, r0, #8
   190dc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   190e0:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   190e4:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   190e8:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   190ec:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   190f0:	d002      	beq.n	190f8 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   190f2:	b132      	cbz	r2, 19102 <lll_chan_sel_1+0x7a>
				chan_index--;
   190f4:	3a01      	subs	r2, #1
   190f6:	b2d2      	uxtb	r2, r2
			chan_next++;
   190f8:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   190fa:	4584      	cmp	ip, r0
   190fc:	d1f2      	bne.n	190e4 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   190fe:	45a6      	cmp	lr, r4
   19100:	d1ea      	bne.n	190d8 <lll_chan_sel_1+0x50>
}
   19102:	bd30      	pop	{r4, r5, pc}
   19104:	dd67c8a7 	.word	0xdd67c8a7

00019108 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   19108:	8842      	ldrh	r2, [r0, #2]
   1910a:	8800      	ldrh	r0, [r0, #0]
}
   1910c:	4050      	eors	r0, r2
   1910e:	4770      	bx	lr

00019110 <lll_chan_sel_2>:
{
   19110:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19112:	4d2f      	ldr	r5, [pc, #188]	; (191d0 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19114:	4c2f      	ldr	r4, [pc, #188]	; (191d4 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   19116:	4048      	eors	r0, r1
   19118:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1911c:	0a07      	lsrs	r7, r0, #8
   1911e:	b2c0      	uxtb	r0, r0
   19120:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   19124:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   19128:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1912c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19130:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   19134:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19138:	433e      	orrs	r6, r7
   1913a:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1913e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   19142:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   19146:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1914a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1914e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   19150:	f3c0 4007 	ubfx	r0, r0, #16, #8
   19154:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19158:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1915c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19160:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   19162:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19166:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   19168:	d1d8      	bne.n	1911c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1916a:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1916c:	481a      	ldr	r0, [pc, #104]	; (191d8 <lll_chan_sel_2+0xc8>)
   1916e:	fba0 4001 	umull	r4, r0, r0, r1
   19172:	1a0c      	subs	r4, r1, r0
   19174:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   19178:	0940      	lsrs	r0, r0, #5
   1917a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1917e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   19182:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19184:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   19188:	f000 0507 	and.w	r5, r0, #7
   1918c:	5d14      	ldrb	r4, [r2, r4]
   1918e:	412c      	asrs	r4, r5
   19190:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   19192:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19194:	d41a      	bmi.n	191cc <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   19196:	fb01 f303 	mul.w	r3, r1, r3
   1919a:	1e56      	subs	r6, r2, #1
   1919c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   191a0:	3204      	adds	r2, #4
	chan_next = 0U;
   191a2:	4660      	mov	r0, ip
		bite = *chan_map;
   191a4:	f100 0508 	add.w	r5, r0, #8
   191a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   191ac:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   191ae:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   191b2:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   191b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   191ba:	d002      	beq.n	191c2 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   191bc:	b133      	cbz	r3, 191cc <lll_chan_sel_2+0xbc>
				chan_index--;
   191be:	3b01      	subs	r3, #1
   191c0:	b2db      	uxtb	r3, r3
			chan_next++;
   191c2:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   191c4:	42a8      	cmp	r0, r5
   191c6:	d1f2      	bne.n	191ae <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   191c8:	42b2      	cmp	r2, r6
   191ca:	d1eb      	bne.n	191a4 <lll_chan_sel_2+0x94>
}
   191cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191ce:	bf00      	nop
   191d0:	00022110 	.word	0x00022110
   191d4:	00088440 	.word	0x00088440
   191d8:	bacf914d 	.word	0xbacf914d

000191dc <rl_update>:
		}
	}
}

static void rl_update(void)
{
   191dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191e0:	4d18      	ldr	r5, [pc, #96]	; (19244 <rl_update+0x68>)
   191e2:	4e19      	ldr	r6, [pc, #100]	; (19248 <rl_update+0x6c>)
   191e4:	2400      	movs	r4, #0
   191e6:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   191ea:	1eaf      	subs	r7, r5, #2
   191ec:	f04f 0801 	mov.w	r8, #1
   191f0:	e006      	b.n	19200 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   191f2:	3401      	adds	r4, #1
   191f4:	2c08      	cmp	r4, #8
   191f6:	f105 0506 	add.w	r5, r5, #6
   191fa:	f106 0628 	add.w	r6, r6, #40	; 0x28
   191fe:	d01e      	beq.n	1923e <rl_update+0x62>
		if (rl[i].taken) {
   19200:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19204:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   19208:	07da      	lsls	r2, r3, #31
   1920a:	d5f2      	bpl.n	191f2 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1920c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1920e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19210:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   19214:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19218:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1921a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1921e:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19220:	4631      	mov	r1, r6
   19222:	4628      	mov	r0, r5
   19224:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19226:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   19228:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1922c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1922e:	f00b fbb6 	bl	2499e <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19232:	2c08      	cmp	r4, #8
   19234:	f105 0506 	add.w	r5, r5, #6
   19238:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1923c:	d1e0      	bne.n	19200 <rl_update+0x24>
}
   1923e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19242:	bf00      	nop
   19244:	20002ec6 	.word	0x20002ec6
   19248:	20002d85 	.word	0x20002d85

0001924c <fal_update>:
{
   1924c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19250:	4e20      	ldr	r6, [pc, #128]	; (192d4 <fal_update+0x88>)
   19252:	4d21      	ldr	r5, [pc, #132]	; (192d8 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19254:	f8df 8084 	ldr.w	r8, [pc, #132]	; 192dc <fal_update+0x90>
   19258:	f8df 9084 	ldr.w	r9, [pc, #132]	; 192e0 <fal_update+0x94>
{
   1925c:	2400      	movs	r4, #0
   1925e:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   19262:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   19264:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19268:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   1926c:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19270:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   19272:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19276:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   19278:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1927c:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   19280:	d021      	beq.n	192c6 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19282:	f898 3000 	ldrb.w	r3, [r8]
   19286:	b163      	cbz	r3, 192a2 <fal_update+0x56>
		j = fal[i].rl_idx;
   19288:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1928c:	2b07      	cmp	r3, #7
   1928e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   19292:	d806      	bhi.n	192a2 <fal_update+0x56>
   19294:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   19298:	f013 0f04 	tst.w	r3, #4
   1929c:	d001      	beq.n	192a2 <fal_update+0x56>
   1929e:	06db      	lsls	r3, r3, #27
   192a0:	d511      	bpl.n	192c6 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   192a2:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   192a6:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   192aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   192ae:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   192b2:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   192b6:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   192ba:	40a3      	lsls	r3, r4
   192bc:	ea4e 0303 	orr.w	r3, lr, r3
   192c0:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   192c2:	f00b fb6c 	bl	2499e <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   192c6:	3401      	adds	r4, #1
   192c8:	2c08      	cmp	r4, #8
   192ca:	f105 0508 	add.w	r5, r5, #8
   192ce:	d1c9      	bne.n	19264 <fal_update+0x18>
}
   192d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   192d4:	20002c9a 	.word	0x20002c9a
   192d8:	20002c5a 	.word	0x20002c5a
   192dc:	20003f40 	.word	0x20003f40
   192e0:	20002d84 	.word	0x20002d84

000192e4 <ll_fal_size_get>:
}
   192e4:	2008      	movs	r0, #8
   192e6:	4770      	bx	lr

000192e8 <ll_fal_clear>:
{
   192e8:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   192ea:	2000      	movs	r0, #0
   192ec:	f7fc fb26 	bl	1593c <ull_scan_filter_pol_get>
   192f0:	f010 0001 	ands.w	r0, r0, #1
   192f4:	d119      	bne.n	1932a <ll_fal_clear+0x42>
   192f6:	4a0e      	ldr	r2, [pc, #56]	; (19330 <ll_fal_clear+0x48>)
			rl[j].fal = 0U;
   192f8:	4c0e      	ldr	r4, [pc, #56]	; (19334 <ll_fal_clear+0x4c>)
		uint8_t j = fal[i].rl_idx;
   192fa:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   192fe:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19300:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   19302:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19306:	d805      	bhi.n	19314 <ll_fal_clear+0x2c>
			rl[j].fal = 0U;
   19308:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1930c:	f36f 1345 	bfc	r3, #5, #1
   19310:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   19314:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19318:	f36f 0300 	bfc	r3, #0, #1
   1931c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   19320:	3001      	adds	r0, #1
   19322:	2808      	cmp	r0, #8
   19324:	d1e9      	bne.n	192fa <ll_fal_clear+0x12>
	return 0;
   19326:	2000      	movs	r0, #0
}
   19328:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1932a:	200c      	movs	r0, #12
}
   1932c:	bd10      	pop	{r4, pc}
   1932e:	bf00      	nop
   19330:	20002c58 	.word	0x20002c58
   19334:	20002d84 	.word	0x20002d84

00019338 <ll_fal_add>:
{
   19338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1933c:	4681      	mov	r9, r0
   1933e:	b083      	sub	sp, #12
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19340:	2000      	movs	r0, #0
   19342:	f7fc fafb 	bl	1593c <ull_scan_filter_pol_get>
   19346:	f010 0501 	ands.w	r5, r0, #1
   1934a:	d170      	bne.n	1942e <ll_fal_add+0xf6>
	if (addr->type == ADDR_TYPE_ANON) {
   1934c:	f899 a000 	ldrb.w	sl, [r9]
   19350:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   19354:	d067      	beq.n	19426 <ll_fal_add+0xee>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   19356:	4e44      	ldr	r6, [pc, #272]	; (19468 <ll_fal_add+0x130>)
   19358:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1935c:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   19360:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   19364:	462c      	mov	r4, r5
   19366:	1eb7      	subs	r7, r6, #2
   19368:	e009      	b.n	1937e <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   1936a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1936e:	d101      	bne.n	19374 <ll_fal_add+0x3c>
			*free_idx = i;
   19370:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   19374:	3401      	adds	r4, #1
   19376:	2c08      	cmp	r4, #8
   19378:	f106 0608 	add.w	r6, r6, #8
   1937c:	d017      	beq.n	193ae <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1937e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19382:	07d8      	lsls	r0, r3, #31
   19384:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19388:	d5ef      	bpl.n	1936a <ll_fal_add+0x32>
   1938a:	4552      	cmp	r2, sl
   1938c:	d1f2      	bne.n	19374 <ll_fal_add+0x3c>
   1938e:	2206      	movs	r2, #6
   19390:	4630      	mov	r0, r6
   19392:	4659      	mov	r1, fp
   19394:	f00b faf2 	bl	2497c <memcmp>
   19398:	2800      	cmp	r0, #0
   1939a:	d041      	beq.n	19420 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   1939c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   193a0:	07d9      	lsls	r1, r3, #31
   193a2:	d5e2      	bpl.n	1936a <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   193a4:	3401      	adds	r4, #1
   193a6:	2c08      	cmp	r4, #8
   193a8:	f106 0608 	add.w	r6, r6, #8
   193ac:	d1e7      	bne.n	1937e <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   193ae:	f1b8 0f07 	cmp.w	r8, #7
   193b2:	d854      	bhi.n	1945e <ll_fal_add+0x126>
	fal[i].id_addr_type = id_addr->type & 0x1;
   193b4:	f899 2000 	ldrb.w	r2, [r9]
   193b8:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   193bc:	4e2b      	ldr	r6, [pc, #172]	; (1946c <ll_fal_add+0x134>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   193be:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   193c0:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   193c4:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   193c8:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   193cc:	4438      	add	r0, r7
   193ce:	2206      	movs	r2, #6
   193d0:	4659      	mov	r1, fp
   193d2:	f00b fae4 	bl	2499e <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   193d6:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193da:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193de:	f003 0301 	and.w	r3, r3, #1
   193e2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   193e6:	fa5f fa85 	uxtb.w	sl, r5
   193ea:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   193ee:	f3c2 1180 	ubfx	r1, r2, #6, #1
   193f2:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193f4:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193f8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   193fc:	d501      	bpl.n	19402 <ll_fal_add+0xca>
   193fe:	4299      	cmp	r1, r3
   19400:	d019      	beq.n	19436 <ll_fal_add+0xfe>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19402:	2d08      	cmp	r5, #8
   19404:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19408:	d1eb      	bne.n	193e2 <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1940a:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1940e:	22ff      	movs	r2, #255	; 0xff
   19410:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   19412:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19416:	f043 0301 	orr.w	r3, r3, #1
   1941a:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1941e:	2000      	movs	r0, #0
}
   19420:	b003      	add	sp, #12
   19422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   19426:	4628      	mov	r0, r5
}
   19428:	b003      	add	sp, #12
   1942a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1942e:	200c      	movs	r0, #12
}
   19430:	b003      	add	sp, #12
   19432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19436:	4630      	mov	r0, r6
   19438:	2206      	movs	r2, #6
   1943a:	4659      	mov	r1, fp
   1943c:	9301      	str	r3, [sp, #4]
   1943e:	f00b fa9d 	bl	2497c <memcmp>
   19442:	9b01      	ldr	r3, [sp, #4]
   19444:	2800      	cmp	r0, #0
   19446:	d1dc      	bne.n	19402 <ll_fal_add+0xca>
		rl[j].fal = 1U;
   19448:	f819 3004 	ldrb.w	r3, [r9, r4]
   1944c:	f043 0320 	orr.w	r3, r3, #32
   19450:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   19454:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19458:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1945c:	e7d9      	b.n	19412 <ll_fal_add+0xda>
   1945e:	2007      	movs	r0, #7
}
   19460:	b003      	add	sp, #12
   19462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19466:	bf00      	nop
   19468:	20002c5a 	.word	0x20002c5a
   1946c:	20002d85 	.word	0x20002d85

00019470 <ll_fal_remove>:
{
   19470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19474:	4607      	mov	r7, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19476:	2000      	movs	r0, #0
   19478:	f7fc fa60 	bl	1593c <ull_scan_filter_pol_get>
   1947c:	f010 0401 	ands.w	r4, r0, #1
   19480:	d139      	bne.n	194f6 <ll_fal_remove+0x86>
	if (addr->type == ADDR_TYPE_ANON) {
   19482:	783e      	ldrb	r6, [r7, #0]
   19484:	2eff      	cmp	r6, #255	; 0xff
   19486:	d033      	beq.n	194f0 <ll_fal_remove+0x80>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   19488:	4d1c      	ldr	r5, [pc, #112]	; (194fc <ll_fal_remove+0x8c>)
   1948a:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1948c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   19490:	f006 0601 	and.w	r6, r6, #1
   19494:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19498:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1949c:	07db      	lsls	r3, r3, #31
   1949e:	d501      	bpl.n	194a4 <ll_fal_remove+0x34>
   194a0:	42b2      	cmp	r2, r6
   194a2:	d007      	beq.n	194b4 <ll_fal_remove+0x44>
	for (i = 0; i < FAL_SIZE; i++) {
   194a4:	3401      	adds	r4, #1
   194a6:	2c08      	cmp	r4, #8
   194a8:	f105 0508 	add.w	r5, r5, #8
   194ac:	d1f2      	bne.n	19494 <ll_fal_remove+0x24>
   194ae:	2002      	movs	r0, #2
}
   194b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   194b4:	2206      	movs	r2, #6
   194b6:	4628      	mov	r0, r5
   194b8:	4639      	mov	r1, r7
   194ba:	f00b fa5f 	bl	2497c <memcmp>
   194be:	2800      	cmp	r0, #0
   194c0:	d1f0      	bne.n	194a4 <ll_fal_remove+0x34>
		uint8_t j = fal[i].rl_idx;
   194c2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   194c6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   194c8:	2b07      	cmp	r3, #7
   194ca:	d808      	bhi.n	194de <ll_fal_remove+0x6e>
			rl[j].fal = 0U;
   194cc:	4a0c      	ldr	r2, [pc, #48]	; (19500 <ll_fal_remove+0x90>)
   194ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   194d2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   194d6:	f360 1145 	bfi	r1, r0, #5, #1
   194da:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   194de:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   194e2:	f36f 0300 	bfc	r3, #0, #1
   194e6:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   194ea:	2000      	movs	r0, #0
}
   194ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   194f0:	4620      	mov	r0, r4
}
   194f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   194f6:	200c      	movs	r0, #12
}
   194f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194fc:	20002c5a 	.word	0x20002c5a
   19500:	20002d84 	.word	0x20002d84

00019504 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19504:	2807      	cmp	r0, #7
{
   19506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1950a:	4604      	mov	r4, r0
   1950c:	460e      	mov	r6, r1
   1950e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19510:	d817      	bhi.n	19542 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   19512:	4d1a      	ldr	r5, [pc, #104]	; (1957c <ll_rl_id_addr_get+0x78>)
   19514:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19518:	00a7      	lsls	r7, r4, #2
   1951a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1951e:	07db      	lsls	r3, r3, #31
   19520:	d51d      	bpl.n	1955e <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   19522:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19524:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   19526:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1952a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1952e:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   19532:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19534:	4640      	mov	r0, r8
   19536:	2206      	movs	r2, #6
}
   19538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1953c:	3101      	adds	r1, #1
   1953e:	f00b ba2e 	b.w	2499e <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19542:	4a0f      	ldr	r2, [pc, #60]	; (19580 <ll_rl_id_addr_get+0x7c>)
   19544:	490f      	ldr	r1, [pc, #60]	; (19584 <ll_rl_id_addr_get+0x80>)
   19546:	4810      	ldr	r0, [pc, #64]	; (19588 <ll_rl_id_addr_get+0x84>)
   19548:	f44f 7389 	mov.w	r3, #274	; 0x112
   1954c:	f009 f8da 	bl	22704 <printk>
   19550:	4040      	eors	r0, r0
   19552:	f380 8811 	msr	BASEPRI, r0
   19556:	f04f 0003 	mov.w	r0, #3
   1955a:	df02      	svc	2
   1955c:	e7d9      	b.n	19512 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1955e:	4a08      	ldr	r2, [pc, #32]	; (19580 <ll_rl_id_addr_get+0x7c>)
   19560:	490a      	ldr	r1, [pc, #40]	; (1958c <ll_rl_id_addr_get+0x88>)
   19562:	4809      	ldr	r0, [pc, #36]	; (19588 <ll_rl_id_addr_get+0x84>)
   19564:	f240 1313 	movw	r3, #275	; 0x113
   19568:	f009 f8cc 	bl	22704 <printk>
   1956c:	4040      	eors	r0, r0
   1956e:	f380 8811 	msr	BASEPRI, r0
   19572:	f04f 0003 	mov.w	r0, #3
   19576:	df02      	svc	2
   19578:	e7d3      	b.n	19522 <ll_rl_id_addr_get+0x1e>
   1957a:	bf00      	nop
   1957c:	20002d84 	.word	0x20002d84
   19580:	00029a70 	.word	0x00029a70
   19584:	00029ab4 	.word	0x00029ab4
   19588:	00029220 	.word	0x00029220
   1958c:	00029ac0 	.word	0x00029ac0

00019590 <ll_rl_size_get>:
   19590:	2008      	movs	r0, #8
   19592:	4770      	bx	lr

00019594 <ll_rl_clear>:
{
   19594:	b510      	push	{r4, lr}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   19596:	2000      	movs	r0, #0
   19598:	f7fc f9b8 	bl	1590c <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1959c:	f030 0001 	bics.w	r0, r0, #1
   195a0:	d131      	bne.n	19606 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   195a2:	4b1a      	ldr	r3, [pc, #104]	; (1960c <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   195a4:	4c1a      	ldr	r4, [pc, #104]	; (19610 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   195a6:	7819      	ldrb	r1, [r3, #0]
   195a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   195ac:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   195ae:	f360 0100 	bfi	r1, r0, #0, #1
   195b2:	f360 0200 	bfi	r2, r0, #0, #1
   195b6:	7019      	strb	r1, [r3, #0]
   195b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   195bc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   195c0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   195c4:	f360 0100 	bfi	r1, r0, #0, #1
   195c8:	f360 0200 	bfi	r2, r0, #0, #1
   195cc:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   195d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   195d4:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   195d8:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   195dc:	f360 0100 	bfi	r1, r0, #0, #1
   195e0:	f360 0200 	bfi	r2, r0, #0, #1
   195e4:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   195e8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   195ec:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   195f0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   195f4:	f360 0100 	bfi	r1, r0, #0, #1
   195f8:	f360 0200 	bfi	r2, r0, #0, #1
   195fc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19600:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   19604:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19606:	200c      	movs	r0, #12
}
   19608:	bd10      	pop	{r4, pc}
   1960a:	bf00      	nop
   1960c:	20002d84 	.word	0x20002d84
   19610:	20003f3f 	.word	0x20003f3f

00019614 <ll_rl_remove>:
{
   19614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19618:	b083      	sub	sp, #12
   1961a:	4603      	mov	r3, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1961c:	2000      	movs	r0, #0
{
   1961e:	461c      	mov	r4, r3
   19620:	9300      	str	r3, [sp, #0]
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   19622:	f7fc f973 	bl	1590c <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   19626:	f030 0901 	bics.w	r9, r0, #1
   1962a:	f040 8085 	bne.w	19738 <ll_rl_remove+0x124>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1962e:	4623      	mov	r3, r4
   19630:	f8df 813c 	ldr.w	r8, [pc, #316]	; 19770 <ll_rl_remove+0x15c>
   19634:	f813 bb01 	ldrb.w	fp, [r3], #1
   19638:	464c      	mov	r4, r9
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1963a:	f00b 0b01 	and.w	fp, fp, #1
   1963e:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   19642:	461e      	mov	r6, r3
   19644:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19648:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1964c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   19650:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19654:	07db      	lsls	r3, r3, #31
   19656:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1965a:	d501      	bpl.n	19660 <ll_rl_remove+0x4c>
   1965c:	455a      	cmp	r2, fp
   1965e:	d008      	beq.n	19672 <ll_rl_remove+0x5e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19660:	3401      	adds	r4, #1
   19662:	2c08      	cmp	r4, #8
   19664:	f108 0828 	add.w	r8, r8, #40	; 0x28
   19668:	d1ec      	bne.n	19644 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1966a:	2002      	movs	r0, #2
}
   1966c:	b003      	add	sp, #12
   1966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19672:	4640      	mov	r0, r8
   19674:	2206      	movs	r2, #6
   19676:	4631      	mov	r1, r6
   19678:	f00b f980 	bl	2497c <memcmp>
   1967c:	2800      	cmp	r0, #0
   1967e:	d1ef      	bne.n	19660 <ll_rl_remove+0x4c>
		if (rl[i].pirk) {
   19680:	782a      	ldrb	r2, [r5, #0]
   19682:	0752      	lsls	r2, r2, #29
   19684:	4633      	mov	r3, r6
   19686:	4606      	mov	r6, r0
   19688:	d535      	bpl.n	196f6 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1968a:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 19774 <ll_rl_remove+0x160>
   1968e:	f89b 8000 	ldrb.w	r8, [fp]
   19692:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   19696:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   1969a:	d02a      	beq.n	196f2 <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1969c:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   1969e:	4545      	cmp	r5, r8
   196a0:	d027      	beq.n	196f2 <ll_rl_remove+0xde>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   196a2:	4835      	ldr	r0, [pc, #212]	; (19778 <ll_rl_remove+0x164>)
   196a4:	9301      	str	r3, [sp, #4]
   196a6:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   196aa:	2210      	movs	r2, #16
   196ac:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   196b0:	f00b f975 	bl	2499e <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   196b4:	4831      	ldr	r0, [pc, #196]	; (1977c <ll_rl_remove+0x168>)
   196b6:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   196b8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
   196bc:	fa5f fc89 	uxtb.w	ip, r9
   196c0:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   196c4:	f011 0f01 	tst.w	r1, #1
   196c8:	f109 0901 	add.w	r9, r9, #1
   196cc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   196d0:	d004      	beq.n	196dc <ll_rl_remove+0xc8>
   196d2:	0749      	lsls	r1, r1, #29
   196d4:	d502      	bpl.n	196dc <ll_rl_remove+0xc8>
   196d6:	7dc1      	ldrb	r1, [r0, #23]
   196d8:	4541      	cmp	r1, r8
   196da:	d03d      	beq.n	19758 <ll_rl_remove+0x144>
				for (k = 0U;
   196dc:	f1b9 0f08 	cmp.w	r9, #8
   196e0:	f100 0028 	add.w	r0, r0, #40	; 0x28
   196e4:	d1e8      	bne.n	196b8 <ll_rl_remove+0xa4>
			peer_irk_count--;
   196e6:	f89b 8000 	ldrb.w	r8, [fp]
   196ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   196ee:	fa5f f888 	uxtb.w	r8, r8
   196f2:	f88b 8000 	strb.w	r8, [fp]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   196f6:	9a00      	ldr	r2, [sp, #0]
   196f8:	4d21      	ldr	r5, [pc, #132]	; (19780 <ll_rl_remove+0x16c>)
   196fa:	f892 9000 	ldrb.w	r9, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   196fe:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   19702:	f009 0901 	and.w	r9, r9, #1
   19706:	469b      	mov	fp, r3
   19708:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   1970c:	07d1      	lsls	r1, r2, #31
   1970e:	f3c2 0040 	ubfx	r0, r2, #1, #1
   19712:	d501      	bpl.n	19718 <ll_rl_remove+0x104>
   19714:	4548      	cmp	r0, r9
   19716:	d013      	beq.n	19740 <ll_rl_remove+0x12c>
	for (i = 0; i < FAL_SIZE; i++) {
   19718:	3601      	adds	r6, #1
   1971a:	2e08      	cmp	r6, #8
   1971c:	f105 0508 	add.w	r5, r5, #8
   19720:	d1f2      	bne.n	19708 <ll_rl_remove+0xf4>
		rl[i].taken = 0U;
   19722:	4454      	add	r4, sl
		return 0;
   19724:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19726:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1972a:	f36f 0300 	bfc	r3, #0, #1
   1972e:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   19732:	b003      	add	sp, #12
   19734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19738:	200c      	movs	r0, #12
}
   1973a:	b003      	add	sp, #12
   1973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   19740:	2206      	movs	r2, #6
   19742:	4628      	mov	r0, r5
   19744:	4659      	mov	r1, fp
   19746:	f00b f919 	bl	2497c <memcmp>
   1974a:	2800      	cmp	r0, #0
   1974c:	d1e4      	bne.n	19718 <ll_rl_remove+0x104>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1974e:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   19752:	23ff      	movs	r3, #255	; 0xff
   19754:	7073      	strb	r3, [r6, #1]
   19756:	e7e4      	b.n	19722 <ll_rl_remove+0x10e>
			peer_irk_count--;
   19758:	f89b 8000 	ldrb.w	r8, [fp]
						rl[k].pirk_idx = pi;
   1975c:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1975e:	4a09      	ldr	r2, [pc, #36]	; (19784 <ll_rl_remove+0x170>)
			peer_irk_count--;
   19760:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   19764:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   19768:	fa5f f888 	uxtb.w	r8, r8
						break;
   1976c:	e7c1      	b.n	196f2 <ll_rl_remove+0xde>
   1976e:	bf00      	nop
   19770:	20002d85 	.word	0x20002d85
   19774:	20003f3f 	.word	0x20003f3f
   19778:	20002d04 	.word	0x20002d04
   1977c:	20002d84 	.word	0x20002d84
   19780:	20002c5a 	.word	0x20002c5a
   19784:	20002cfc 	.word	0x20002cfc

00019788 <ll_rl_crpa_set>:
{
   19788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1978c:	795c      	ldrb	r4, [r3, #5]
   1978e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   19792:	2c40      	cmp	r4, #64	; 0x40
   19794:	d001      	beq.n	1979a <ll_rl_crpa_set+0x12>
}
   19796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1979a:	461e      	mov	r6, r3
   1979c:	460f      	mov	r7, r1
   1979e:	b301      	cbz	r1, 197e2 <ll_rl_crpa_set+0x5a>
   197a0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1980c <ll_rl_crpa_set+0x84>
   197a4:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   197a6:	f000 0a01 	and.w	sl, r0, #1
   197aa:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   197ae:	e003      	b.n	197b8 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   197b0:	2c08      	cmp	r4, #8
   197b2:	f109 0928 	add.w	r9, r9, #40	; 0x28
   197b6:	d0ee      	beq.n	19796 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   197b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   197bc:	4625      	mov	r5, r4
   197be:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   197c2:	f3c2 1380 	ubfx	r3, r2, #6, #1
   197c6:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   197c8:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   197cc:	d5f0      	bpl.n	197b0 <ll_rl_crpa_set+0x28>
   197ce:	4553      	cmp	r3, sl
   197d0:	d1ee      	bne.n	197b0 <ll_rl_crpa_set+0x28>
   197d2:	4648      	mov	r0, r9
   197d4:	2206      	movs	r2, #6
   197d6:	4639      	mov	r1, r7
   197d8:	f00b f8d0 	bl	2497c <memcmp>
   197dc:	2800      	cmp	r0, #0
   197de:	d1e7      	bne.n	197b0 <ll_rl_crpa_set+0x28>
   197e0:	e004      	b.n	197ec <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   197e2:	2a07      	cmp	r2, #7
   197e4:	d8d7      	bhi.n	19796 <ll_rl_crpa_set+0xe>
   197e6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 19810 <ll_rl_crpa_set+0x88>
   197ea:	4615      	mov	r5, r2
   197ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   197f0:	00e8      	lsls	r0, r5, #3
   197f2:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   197f6:	07db      	lsls	r3, r3, #31
   197f8:	d5cd      	bpl.n	19796 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   197fa:	3018      	adds	r0, #24
   197fc:	4631      	mov	r1, r6
   197fe:	4440      	add	r0, r8
   19800:	2206      	movs	r2, #6
}
   19802:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19806:	f00b b8ca 	b.w	2499e <memcpy>
   1980a:	bf00      	nop
   1980c:	20002d85 	.word	0x20002d85
   19810:	20002d84 	.word	0x20002d84

00019814 <ll_rl_crpa_get>:
{
   19814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19818:	4682      	mov	sl, r0
   1981a:	4e1a      	ldr	r6, [pc, #104]	; (19884 <ll_rl_crpa_get+0x70>)
   1981c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   19820:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19822:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19824:	f008 0801 	and.w	r8, r8, #1
   19828:	1e77      	subs	r7, r6, #1
   1982a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1982e:	00d5      	lsls	r5, r2, #3
   19830:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   19834:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19838:	07db      	lsls	r3, r3, #31
   1983a:	f104 0401 	add.w	r4, r4, #1
   1983e:	d501      	bpl.n	19844 <ll_rl_crpa_get+0x30>
   19840:	4542      	cmp	r2, r8
   19842:	d006      	beq.n	19852 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19844:	2c08      	cmp	r4, #8
   19846:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1984a:	d1ee      	bne.n	1982a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1984c:	2002      	movs	r0, #2
}
   1984e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19852:	4630      	mov	r0, r6
   19854:	2206      	movs	r2, #6
   19856:	4651      	mov	r1, sl
   19858:	f00b f890 	bl	2497c <memcmp>
   1985c:	4683      	mov	fp, r0
   1985e:	2800      	cmp	r0, #0
   19860:	d1f0      	bne.n	19844 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   19862:	f105 0218 	add.w	r2, r5, #24
   19866:	4417      	add	r7, r2
   19868:	2106      	movs	r1, #6
   1986a:	4638      	mov	r0, r7
   1986c:	f7f7 fc52 	bl	11114 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   19870:	2800      	cmp	r0, #0
   19872:	d0eb      	beq.n	1984c <ll_rl_crpa_get+0x38>
   19874:	2206      	movs	r2, #6
   19876:	4639      	mov	r1, r7
   19878:	4648      	mov	r0, r9
   1987a:	f00b f890 	bl	2499e <memcpy>
		return 0;
   1987e:	4658      	mov	r0, fp
}
   19880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19884:	20002d85 	.word	0x20002d85

00019888 <ll_rl_lrpa_get>:
{
   19888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1988c:	4681      	mov	r9, r0
   1988e:	4e16      	ldr	r6, [pc, #88]	; (198e8 <ll_rl_lrpa_get+0x60>)
   19890:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   19894:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19896:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19898:	f008 0801 	and.w	r8, r8, #1
   1989c:	1e77      	subs	r7, r6, #1
   1989e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   198a2:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   198a6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   198aa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   198ae:	07db      	lsls	r3, r3, #31
   198b0:	f104 0401 	add.w	r4, r4, #1
   198b4:	d501      	bpl.n	198ba <ll_rl_lrpa_get+0x32>
   198b6:	4542      	cmp	r2, r8
   198b8:	d006      	beq.n	198c8 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198ba:	2c08      	cmp	r4, #8
   198bc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   198c0:	d1ed      	bne.n	1989e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198c2:	2002      	movs	r0, #2
}
   198c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   198c8:	4630      	mov	r0, r6
   198ca:	2206      	movs	r2, #6
   198cc:	4649      	mov	r1, r9
   198ce:	f00b f855 	bl	2497c <memcmp>
   198d2:	4683      	mov	fp, r0
   198d4:	2800      	cmp	r0, #0
   198d6:	d1f0      	bne.n	198ba <ll_rl_lrpa_get+0x32>
   198d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   198da:	2206      	movs	r2, #6
   198dc:	4650      	mov	r0, sl
   198de:	f00b f85e 	bl	2499e <memcpy>
		return 0;
   198e2:	4658      	mov	r0, fp
}
   198e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198e8:	20002d85 	.word	0x20002d85

000198ec <ll_rl_enable>:
{
   198ec:	b510      	push	{r4, lr}
   198ee:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   198f0:	2000      	movs	r0, #0
   198f2:	f7fc f80b 	bl	1590c <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   198f6:	f030 0001 	bics.w	r0, r0, #1
   198fa:	d10b      	bne.n	19914 <ll_rl_enable+0x28>
	switch (enable) {
   198fc:	b134      	cbz	r4, 1990c <ll_rl_enable+0x20>
   198fe:	2c01      	cmp	r4, #1
   19900:	d001      	beq.n	19906 <ll_rl_enable+0x1a>
   19902:	2012      	movs	r0, #18
}
   19904:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   19906:	4b04      	ldr	r3, [pc, #16]	; (19918 <ll_rl_enable+0x2c>)
   19908:	701c      	strb	r4, [r3, #0]
}
   1990a:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1990c:	4b02      	ldr	r3, [pc, #8]	; (19918 <ll_rl_enable+0x2c>)
   1990e:	701c      	strb	r4, [r3, #0]
	return 0;
   19910:	4620      	mov	r0, r4
}
   19912:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19914:	200c      	movs	r0, #12
}
   19916:	bd10      	pop	{r4, pc}
   19918:	20003f40 	.word	0x20003f40

0001991c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1991c:	4b03      	ldr	r3, [pc, #12]	; (1992c <ll_rl_timeout_set+0x10>)
   1991e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19922:	fb02 f000 	mul.w	r0, r2, r0
   19926:	6018      	str	r0, [r3, #0]
}
   19928:	4770      	bx	lr
   1992a:	bf00      	nop
   1992c:	20002ef8 	.word	0x20002ef8

00019930 <ll_priv_mode_set>:
{
   19930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19934:	4682      	mov	sl, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   19936:	2000      	movs	r0, #0
{
   19938:	4688      	mov	r8, r1
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1993a:	f7fb ffe7 	bl	1590c <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   1993e:	f030 0401 	bics.w	r4, r0, #1
   19942:	d12c      	bne.n	1999e <ll_priv_mode_set+0x6e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19944:	4e1c      	ldr	r6, [pc, #112]	; (199b8 <ll_priv_mode_set+0x88>)
   19946:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1994a:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1994c:	f009 0901 	and.w	r9, r9, #1
   19950:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19954:	00d5      	lsls	r5, r2, #3
   19956:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1995a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1995e:	07db      	lsls	r3, r3, #31
   19960:	f104 0401 	add.w	r4, r4, #1
   19964:	d501      	bpl.n	1996a <ll_priv_mode_set+0x3a>
   19966:	454a      	cmp	r2, r9
   19968:	d006      	beq.n	19978 <ll_priv_mode_set+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1996a:	2c08      	cmp	r4, #8
   1996c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19970:	d1ee      	bne.n	19950 <ll_priv_mode_set+0x20>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19972:	2002      	movs	r0, #2
}
   19974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19978:	4630      	mov	r0, r6
   1997a:	2206      	movs	r2, #6
   1997c:	4651      	mov	r1, sl
   1997e:	f00a fffd 	bl	2497c <memcmp>
   19982:	2800      	cmp	r0, #0
   19984:	d1f1      	bne.n	1996a <ll_priv_mode_set+0x3a>
		switch (mode) {
   19986:	f1b8 0f00 	cmp.w	r8, #0
   1998a:	d00e      	beq.n	199aa <ll_priv_mode_set+0x7a>
   1998c:	f1b8 0f01 	cmp.w	r8, #1
   19990:	d108      	bne.n	199a4 <ll_priv_mode_set+0x74>
			rl[i].dev = 1U;
   19992:	5d7b      	ldrb	r3, [r7, r5]
   19994:	f043 0310 	orr.w	r3, r3, #16
   19998:	557b      	strb	r3, [r7, r5]
}
   1999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1999e:	200c      	movs	r0, #12
}
   199a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   199a4:	2012      	movs	r0, #18
}
   199a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   199aa:	5d7b      	ldrb	r3, [r7, r5]
   199ac:	f368 1304 	bfi	r3, r8, #4, #1
   199b0:	557b      	strb	r3, [r7, r5]
	return 0;
   199b2:	4640      	mov	r0, r8
}
   199b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   199b8:	20002d85 	.word	0x20002d85

000199bc <ull_filter_reset>:
{
   199bc:	b4d0      	push	{r4, r6, r7}
   199be:	4930      	ldr	r1, [pc, #192]	; (19a80 <ull_filter_reset+0xc4>)
   199c0:	4c30      	ldr	r4, [pc, #192]	; (19a84 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   199c2:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   199c4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   199c8:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   199ca:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   199cc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   199d0:	d805      	bhi.n	199de <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   199d2:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   199d6:	f36f 1245 	bfc	r2, #5, #1
   199da:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   199de:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   199e2:	f36f 0200 	bfc	r2, #0, #1
   199e6:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   199ea:	3301      	adds	r3, #1
   199ec:	2b08      	cmp	r3, #8
   199ee:	d1e9      	bne.n	199c4 <ull_filter_reset+0x8>
	rl_enable = 0U;
   199f0:	4a25      	ldr	r2, [pc, #148]	; (19a88 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   199f2:	4c26      	ldr	r4, [pc, #152]	; (19a8c <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   199f4:	2300      	movs	r3, #0
   199f6:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   199f8:	780a      	ldrb	r2, [r1, #0]
   199fa:	f363 0200 	bfi	r2, r3, #0, #1
   199fe:	700a      	strb	r2, [r1, #0]
   19a00:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   19a04:	f363 0200 	bfi	r2, r3, #0, #1
   19a08:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   19a0c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   19a10:	f363 0200 	bfi	r2, r3, #0, #1
   19a14:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   19a18:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   19a1c:	f363 0200 	bfi	r2, r3, #0, #1
   19a20:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   19a24:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   19a28:	f363 0200 	bfi	r2, r3, #0, #1
   19a2c:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   19a30:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   19a34:	f363 0200 	bfi	r2, r3, #0, #1
   19a38:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   19a3c:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   19a40:	f363 0200 	bfi	r2, r3, #0, #1
   19a44:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   19a48:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   19a4c:	f363 0200 	bfi	r2, r3, #0, #1
   19a50:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   19a54:	4a0e      	ldr	r2, [pc, #56]	; (19a90 <ull_filter_reset+0xd4>)
   19a56:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   19a58:	4b0e      	ldr	r3, [pc, #56]	; (19a94 <ull_filter_reset+0xd8>)
   19a5a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19a5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19a62:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19a66:	4b0c      	ldr	r3, [pc, #48]	; (19a98 <ull_filter_reset+0xdc>)
   19a68:	6023      	str	r3, [r4, #0]
	if (init) {
   19a6a:	b120      	cbz	r0, 19a76 <ull_filter_reset+0xba>
}
   19a6c:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   19a6e:	490b      	ldr	r1, [pc, #44]	; (19a9c <ull_filter_reset+0xe0>)
   19a70:	480b      	ldr	r0, [pc, #44]	; (19aa0 <ull_filter_reset+0xe4>)
   19a72:	f00e ba28 	b.w	27ec6 <k_work_init_delayable>
}
   19a76:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   19a78:	4809      	ldr	r0, [pc, #36]	; (19aa0 <ull_filter_reset+0xe4>)
   19a7a:	f00e ba30 	b.w	27ede <k_work_cancel_delayable>
   19a7e:	bf00      	nop
   19a80:	20002d84 	.word	0x20002d84
   19a84:	20002c58 	.word	0x20002c58
   19a88:	20003f40 	.word	0x20003f40
   19a8c:	20002ef8 	.word	0x20002ef8
   19a90:	20003f3f 	.word	0x20003f3f
   19a94:	20001b58 	.word	0x20001b58
   19a98:	000dbba0 	.word	0x000dbba0
   19a9c:	00019cb5 	.word	0x00019cb5
   19aa0:	20001b60 	.word	0x20001b60

00019aa4 <ull_filter_lll_get>:
		return &fal_filter;
   19aa4:	4a03      	ldr	r2, [pc, #12]	; (19ab4 <ull_filter_lll_get+0x10>)
   19aa6:	4b04      	ldr	r3, [pc, #16]	; (19ab8 <ull_filter_lll_get+0x14>)
}
   19aa8:	2800      	cmp	r0, #0
   19aaa:	bf0c      	ite	eq
   19aac:	4610      	moveq	r0, r2
   19aae:	4618      	movne	r0, r3
   19ab0:	4770      	bx	lr
   19ab2:	bf00      	nop
   19ab4:	20002ec4 	.word	0x20002ec4
   19ab8:	20002c98 	.word	0x20002c98

00019abc <ull_filter_adv_scan_state_cb>:
	if (bm) {
   19abc:	b1a8      	cbz	r0, 19aea <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   19abe:	4a0c      	ldr	r2, [pc, #48]	; (19af0 <ull_filter_adv_scan_state_cb+0x34>)
   19ac0:	6812      	ldr	r2, [r2, #0]
{
   19ac2:	b510      	push	{r4, lr}
   19ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19ac8:	f240 30e7 	movw	r0, #999	; 0x3e7
   19acc:	2100      	movs	r1, #0
   19ace:	fbe2 0103 	umlal	r0, r1, r2, r3
   19ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19ad6:	2300      	movs	r3, #0
   19ad8:	f7e7 fb12 	bl	1100 <__aeabi_uldivmod>
}
   19adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ae0:	4602      	mov	r2, r0
   19ae2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   19ae4:	4803      	ldr	r0, [pc, #12]	; (19af4 <ull_filter_adv_scan_state_cb+0x38>)
   19ae6:	f007 bf5b 	b.w	219a0 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   19aea:	4802      	ldr	r0, [pc, #8]	; (19af4 <ull_filter_adv_scan_state_cb+0x38>)
   19aec:	f00e b9f7 	b.w	27ede <k_work_cancel_delayable>
   19af0:	20002ef8 	.word	0x20002ef8
   19af4:	20001b60 	.word	0x20001b60

00019af8 <ull_filter_scan_update>:
{
   19af8:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   19afa:	4b09      	ldr	r3, [pc, #36]	; (19b20 <ull_filter_scan_update+0x28>)
   19afc:	2200      	movs	r2, #0
   19afe:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   19b00:	07c3      	lsls	r3, r0, #31
   19b02:	d406      	bmi.n	19b12 <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   19b04:	4b07      	ldr	r3, [pc, #28]	; (19b24 <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   19b06:	4a08      	ldr	r2, [pc, #32]	; (19b28 <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   19b08:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   19b0a:	2100      	movs	r1, #0
   19b0c:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   19b0e:	b91b      	cbnz	r3, 19b18 <ull_filter_scan_update+0x20>
}
   19b10:	bd08      	pop	{r3, pc}
		fal_update();
   19b12:	f7ff fb9b 	bl	1924c <fal_update>
   19b16:	e7f5      	b.n	19b04 <ull_filter_scan_update+0xc>
}
   19b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   19b1c:	f7ff bb5e 	b.w	191dc <rl_update>
   19b20:	20002c98 	.word	0x20002c98
   19b24:	20003f40 	.word	0x20003f40
   19b28:	20002ec4 	.word	0x20002ec4

00019b2c <ull_filter_rpa_update>:
{
   19b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b30:	4604      	mov	r4, r0
   19b32:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   19b34:	f00e fb68 	bl	28208 <z_impl_k_uptime_ticks>
   19b38:	014b      	lsls	r3, r1, #5
   19b3a:	0142      	lsls	r2, r0, #5
   19b3c:	1a12      	subs	r2, r2, r0
   19b3e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   19b42:	eb63 0301 	sbc.w	r3, r3, r1
   19b46:	009b      	lsls	r3, r3, #2
   19b48:	ea4f 0982 	mov.w	r9, r2, lsl #2
   19b4c:	eb19 0900 	adds.w	r9, r9, r0
   19b50:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   19b54:	eb41 0103 	adc.w	r1, r1, r3
   19b58:	00cb      	lsls	r3, r1, #3
   19b5a:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   19b5e:	0bd8      	lsrs	r0, r3, #15
   19b60:	f3c9 3910 	ubfx	r9, r9, #12, #17
   19b64:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   19b68:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   19b6a:	b9bc      	cbnz	r4, 19b9c <ull_filter_rpa_update+0x70>
   19b6c:	4a49      	ldr	r2, [pc, #292]	; (19c94 <ull_filter_rpa_update+0x168>)
   19b6e:	e9d2 3200 	ldrd	r3, r2, [r2]
   19b72:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   19b76:	bf08      	it	eq
   19b78:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   19b7c:	d00e      	beq.n	19b9c <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19b7e:	4946      	ldr	r1, [pc, #280]	; (19c98 <ull_filter_rpa_update+0x16c>)
   19b80:	6809      	ldr	r1, [r1, #0]
   19b82:	ebb9 0303 	subs.w	r3, r9, r3
   19b86:	eb60 0202 	sbc.w	r2, r0, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   19b8a:	428b      	cmp	r3, r1
   19b8c:	f172 0300 	sbcs.w	r3, r2, #0
   19b90:	bfac      	ite	ge
   19b92:	f04f 0a01 	movge.w	sl, #1
   19b96:	f04f 0a00 	movlt.w	sl, #0
   19b9a:	e001      	b.n	19ba0 <ull_filter_rpa_update+0x74>
   19b9c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ba0:	4e3e      	ldr	r6, [pc, #248]	; (19c9c <ull_filter_rpa_update+0x170>)
   19ba2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 19ca0 <ull_filter_rpa_update+0x174>
				LL_ASSERT(!err);
   19ba6:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 19ca4 <ull_filter_rpa_update+0x178>
	bool all = timeout || (rpa_last_ms == -1) ||
   19baa:	2400      	movs	r4, #0
   19bac:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   19bb0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19bb4:	00a5      	lsls	r5, r4, #2
   19bb6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19bba:	07d8      	lsls	r0, r3, #31
   19bbc:	d515      	bpl.n	19bea <ull_filter_rpa_update+0xbe>
   19bbe:	f1ba 0f00 	cmp.w	sl, #0
   19bc2:	d101      	bne.n	19bc8 <ull_filter_rpa_update+0x9c>
   19bc4:	0799      	lsls	r1, r3, #30
   19bc6:	d410      	bmi.n	19bea <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   19bc8:	192b      	adds	r3, r5, r4
   19bca:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19bce:	075a      	lsls	r2, r3, #29
   19bd0:	d42e      	bmi.n	19c30 <ull_filter_rpa_update+0x104>
			if (rl[i].lirk) {
   19bd2:	192b      	adds	r3, r5, r4
   19bd4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19bd8:	071b      	lsls	r3, r3, #28
   19bda:	d418      	bmi.n	19c0e <ull_filter_rpa_update+0xe2>
			rl[i].rpas_ready = 1U;
   19bdc:	4425      	add	r5, r4
   19bde:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   19be2:	f043 0302 	orr.w	r3, r3, #2
   19be6:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bea:	3401      	adds	r4, #1
   19bec:	2c08      	cmp	r4, #8
   19bee:	f108 0806 	add.w	r8, r8, #6
   19bf2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19bf6:	d1db      	bne.n	19bb0 <ull_filter_rpa_update+0x84>
	if (all) {
   19bf8:	f1ba 0f00 	cmp.w	sl, #0
   19bfc:	d004      	beq.n	19c08 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   19bfe:	4b25      	ldr	r3, [pc, #148]	; (19c94 <ull_filter_rpa_update+0x168>)
   19c00:	9a01      	ldr	r2, [sp, #4]
   19c02:	f8c3 9000 	str.w	r9, [r3]
   19c06:	605a      	str	r2, [r3, #4]
}
   19c08:	b007      	add	sp, #28
   19c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   19c0e:	a902      	add	r1, sp, #8
   19c10:	f1a6 0017 	sub.w	r0, r6, #23
   19c14:	f00a ff28 	bl	24a68 <bt_rpa_create>
				LL_ASSERT(!err);
   19c18:	bb70      	cbnz	r0, 19c78 <ull_filter_rpa_update+0x14c>
				rl[i].local_rpa = &rpa;
   19c1a:	ab02      	add	r3, sp, #8
   19c1c:	4619      	mov	r1, r3
   19c1e:	2206      	movs	r2, #6
   19c20:	4640      	mov	r0, r8
   19c22:	f8c6 3006 	str.w	r3, [r6, #6]
   19c26:	f00a feba 	bl	2499e <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19c2a:	f8c6 8006 	str.w	r8, [r6, #6]
   19c2e:	e7d5      	b.n	19bdc <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   19c30:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   19c34:	4a1c      	ldr	r2, [pc, #112]	; (19ca8 <ull_filter_rpa_update+0x17c>)
   19c36:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   19c3a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   19c3c:	f10d 0307 	add.w	r3, sp, #7
   19c40:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   19c44:	f812 1901 	ldrb.w	r1, [r2], #-1
   19c48:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   19c4c:	4283      	cmp	r3, r0
   19c4e:	d1f9      	bne.n	19c44 <ull_filter_rpa_update+0x118>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19c50:	4631      	mov	r1, r6
   19c52:	a802      	add	r0, sp, #8
   19c54:	f00a ff08 	bl	24a68 <bt_rpa_create>
				LL_ASSERT(!err);
   19c58:	2800      	cmp	r0, #0
   19c5a:	d0ba      	beq.n	19bd2 <ull_filter_rpa_update+0xa6>
   19c5c:	4913      	ldr	r1, [pc, #76]	; (19cac <ull_filter_rpa_update+0x180>)
   19c5e:	4814      	ldr	r0, [pc, #80]	; (19cb0 <ull_filter_rpa_update+0x184>)
   19c60:	f240 23eb 	movw	r3, #747	; 0x2eb
   19c64:	465a      	mov	r2, fp
   19c66:	f008 fd4d 	bl	22704 <printk>
   19c6a:	4040      	eors	r0, r0
   19c6c:	f380 8811 	msr	BASEPRI, r0
   19c70:	f04f 0003 	mov.w	r0, #3
   19c74:	df02      	svc	2
   19c76:	e7ac      	b.n	19bd2 <ull_filter_rpa_update+0xa6>
				LL_ASSERT(!err);
   19c78:	490c      	ldr	r1, [pc, #48]	; (19cac <ull_filter_rpa_update+0x180>)
   19c7a:	480d      	ldr	r0, [pc, #52]	; (19cb0 <ull_filter_rpa_update+0x184>)
   19c7c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   19c80:	465a      	mov	r2, fp
   19c82:	f008 fd3f 	bl	22704 <printk>
   19c86:	4040      	eors	r0, r0
   19c88:	f380 8811 	msr	BASEPRI, r0
   19c8c:	f04f 0003 	mov.w	r0, #3
   19c90:	df02      	svc	2
   19c92:	e7c2      	b.n	19c1a <ull_filter_rpa_update+0xee>
   19c94:	20001b58 	.word	0x20001b58
   19c98:	20002ef8 	.word	0x20002ef8
   19c9c:	20002da2 	.word	0x20002da2
   19ca0:	20002ccc 	.word	0x20002ccc
   19ca4:	00029a70 	.word	0x00029a70
   19ca8:	20002d04 	.word	0x20002d04
   19cac:	00029598 	.word	0x00029598
   19cb0:	00029220 	.word	0x00029220

00019cb4 <rpa_timeout>:
{
   19cb4:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   19cb6:	2001      	movs	r0, #1
   19cb8:	f7ff ff38 	bl	19b2c <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   19cbc:	4a0a      	ldr	r2, [pc, #40]	; (19ce8 <rpa_timeout+0x34>)
   19cbe:	6812      	ldr	r2, [r2, #0]
   19cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19cc4:	f240 30e7 	movw	r0, #999	; 0x3e7
   19cc8:	2100      	movs	r1, #0
   19cca:	fbe2 0103 	umlal	r0, r1, r2, r3
   19cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19cd2:	2300      	movs	r3, #0
   19cd4:	f7e7 fa14 	bl	1100 <__aeabi_uldivmod>
}
   19cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19cdc:	4602      	mov	r2, r0
   19cde:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   19ce0:	4802      	ldr	r0, [pc, #8]	; (19cec <rpa_timeout+0x38>)
   19ce2:	f007 be5d 	b.w	219a0 <k_work_schedule>
   19ce6:	bf00      	nop
   19ce8:	20002ef8 	.word	0x20002ef8
   19cec:	20001b60 	.word	0x20001b60

00019cf0 <ull_filter_rl_find>:
{
   19cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cf4:	468b      	mov	fp, r1
	if (free_idx) {
   19cf6:	4617      	mov	r7, r2
   19cf8:	b10a      	cbz	r2, 19cfe <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   19cfa:	23ff      	movs	r3, #255	; 0xff
   19cfc:	7013      	strb	r3, [r2, #0]
   19cfe:	4d1b      	ldr	r5, [pc, #108]	; (19d6c <ull_filter_rl_find+0x7c>)
{
   19d00:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19d02:	f000 0a01 	and.w	sl, r0, #1
   19d06:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   19d0a:	e006      	b.n	19d1a <ull_filter_rl_find+0x2a>
   19d0c:	4552      	cmp	r2, sl
   19d0e:	d01f      	beq.n	19d50 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d10:	3401      	adds	r4, #1
   19d12:	2c08      	cmp	r4, #8
   19d14:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19d18:	d015      	beq.n	19d46 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19d1a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   19d1e:	fa5f f884 	uxtb.w	r8, r4
   19d22:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   19d26:	07d9      	lsls	r1, r3, #31
   19d28:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19d2c:	d4ee      	bmi.n	19d0c <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   19d2e:	2f00      	cmp	r7, #0
   19d30:	d0ee      	beq.n	19d10 <ull_filter_rl_find+0x20>
   19d32:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d34:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   19d36:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   19d38:	bf08      	it	eq
   19d3a:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d3e:	2c08      	cmp	r4, #8
   19d40:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19d44:	d1e9      	bne.n	19d1a <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   19d46:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   19d4a:	4640      	mov	r0, r8
   19d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19d50:	4628      	mov	r0, r5
   19d52:	2206      	movs	r2, #6
   19d54:	4659      	mov	r1, fp
   19d56:	f00a fe11 	bl	2497c <memcmp>
   19d5a:	2800      	cmp	r0, #0
   19d5c:	d0f5      	beq.n	19d4a <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   19d5e:	2f00      	cmp	r7, #0
   19d60:	d0d6      	beq.n	19d10 <ull_filter_rl_find+0x20>
   19d62:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   19d66:	07db      	lsls	r3, r3, #31
   19d68:	d4d2      	bmi.n	19d10 <ull_filter_rl_find+0x20>
   19d6a:	e7e2      	b.n	19d32 <ull_filter_rl_find+0x42>
   19d6c:	20002d85 	.word	0x20002d85

00019d70 <ll_rl_add>:
{
   19d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d74:	4680      	mov	r8, r0
   19d76:	b085      	sub	sp, #20
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   19d78:	2000      	movs	r0, #0
{
   19d7a:	460c      	mov	r4, r1
   19d7c:	4615      	mov	r5, r2
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   19d7e:	f7fb fdc5 	bl	1590c <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   19d82:	f030 0301 	bics.w	r3, r0, #1
   19d86:	d17d      	bne.n	19e84 <ll_rl_add+0x114>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   19d88:	46c1      	mov	r9, r8
   19d8a:	f10d 020f 	add.w	r2, sp, #15
   19d8e:	f819 0b01 	ldrb.w	r0, [r9], #1
   19d92:	4649      	mov	r1, r9
   19d94:	f7ff ffac 	bl	19cf0 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19d98:	2807      	cmp	r0, #7
   19d9a:	f240 80b8 	bls.w	19f0e <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   19d9e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   19da2:	2f07      	cmp	r7, #7
   19da4:	f200 8085 	bhi.w	19eb2 <ll_rl_add+0x142>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19da8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   19dac:	4e5a      	ldr	r6, [pc, #360]	; (19f18 <ll_rl_add+0x1a8>)
   19dae:	00db      	lsls	r3, r3, #3
   19db0:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   19db2:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   19db6:	2206      	movs	r2, #6
   19db8:	4649      	mov	r1, r9
   19dba:	4430      	add	r0, r6
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19dbc:	9301      	str	r3, [sp, #4]
   19dbe:	f00a fdee 	bl	2499e <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   19dc2:	f898 1000 	ldrb.w	r1, [r8]
   19dc6:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   19dca:	ea4f 0acb 	mov.w	sl, fp, lsl #3
   19dce:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19dd2:	4620      	mov	r0, r4
   19dd4:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   19dd6:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19dda:	f7f7 f99b 	bl	11114 <mem_nz>
   19dde:	f816 200a 	ldrb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19de2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19de4:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19de8:	4628      	mov	r0, r5
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19dea:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19dee:	f7f7 f991 	bl	11114 <mem_nz>
   19df2:	f816 200a 	ldrb.w	r2, [r6, sl]
	if (rl[i].pirk) {
   19df6:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19df8:	f000 0001 	and.w	r0, r0, #1
   19dfc:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   19e00:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19e04:	f806 200a 	strb.w	r2, [r6, sl]
	rl[i].id_addr_type = id_addr->type & 0x1;
   19e08:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   19e0c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
	if (rl[i].pirk) {
   19e10:	d153      	bne.n	19eba <ll_rl_add+0x14a>
	if (rl[i].lirk) {
   19e12:	2800      	cmp	r0, #0
   19e14:	d16c      	bne.n	19ef0 <ll_rl_add+0x180>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   19e16:	f103 0018 	add.w	r0, r3, #24
   19e1a:	2206      	movs	r2, #6
   19e1c:	4430      	add	r0, r6
   19e1e:	2100      	movs	r1, #0
   19e20:	f00a fdc8 	bl	249b4 <memset>
	rl[i].dev = 0U;
   19e24:	eb0a 0307 	add.w	r3, sl, r7
   19e28:	4d3c      	ldr	r5, [pc, #240]	; (19f1c <ll_rl_add+0x1ac>)
	rl[i].rpas_ready = 0U;
   19e2a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   19e2e:	f022 0212 	bic.w	r2, r2, #18
   19e32:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   19e36:	f898 b000 	ldrb.w	fp, [r8]
   19e3a:	2400      	movs	r4, #0
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   19e3c:	f00b 0b01 	and.w	fp, fp, #1
   19e40:	f1a5 0802 	sub.w	r8, r5, #2
   19e44:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19e48:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19e4c:	07db      	lsls	r3, r3, #31
   19e4e:	d501      	bpl.n	19e54 <ll_rl_add+0xe4>
   19e50:	455a      	cmp	r2, fp
   19e52:	d01b      	beq.n	19e8c <ll_rl_add+0x11c>
	for (i = 0; i < FAL_SIZE; i++) {
   19e54:	3401      	adds	r4, #1
   19e56:	2c08      	cmp	r4, #8
   19e58:	f105 0508 	add.w	r5, r5, #8
   19e5c:	d1f2      	bne.n	19e44 <ll_rl_add+0xd4>
		rl[i].fal = 0U;
   19e5e:	eb0a 0307 	add.w	r3, sl, r7
   19e62:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   19e66:	f36f 1245 	bfc	r2, #5, #1
   19e6a:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	rl[i].taken = 1U;
   19e6e:	4457      	add	r7, sl
	return 0;
   19e70:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   19e72:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   19e76:	f043 0301 	orr.w	r3, r3, #1
   19e7a:	f806 3037 	strb.w	r3, [r6, r7, lsl #3]
}
   19e7e:	b005      	add	sp, #20
   19e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e84:	200c      	movs	r0, #12
}
   19e86:	b005      	add	sp, #20
   19e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   19e8c:	2206      	movs	r2, #6
   19e8e:	4628      	mov	r0, r5
   19e90:	4649      	mov	r1, r9
   19e92:	f00a fd73 	bl	2497c <memcmp>
   19e96:	2800      	cmp	r0, #0
   19e98:	d1dc      	bne.n	19e54 <ll_rl_add+0xe4>
		rl[i].fal = 1U;
   19e9a:	eb0a 0307 	add.w	r3, sl, r7
		fal[j].rl_idx = i;
   19e9e:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   19ea2:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
		fal[j].rl_idx = i;
   19ea6:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   19ea8:	f042 0220 	orr.w	r2, r2, #32
   19eac:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
   19eb0:	e7dd      	b.n	19e6e <ll_rl_add+0xfe>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19eb2:	2007      	movs	r0, #7
}
   19eb4:	b005      	add	sp, #20
   19eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   19eba:	f8df e064 	ldr.w	lr, [pc, #100]	; 19f20 <ll_rl_add+0x1b0>
		peer_irk_rl_ids[peer_irk_count] = i;
   19ebe:	4a19      	ldr	r2, [pc, #100]	; (19f24 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   19ec0:	f89e 1000 	ldrb.w	r1, [lr]
   19ec4:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   19ec8:	5457      	strb	r7, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   19eca:	4a17      	ldr	r2, [pc, #92]	; (19f28 <ll_rl_add+0x1b8>)
   19ecc:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   19ed0:	3101      	adds	r1, #1
	psrc += length - 1;
   19ed2:	f104 020f 	add.w	r2, r4, #15
   19ed6:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   19eda:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   19ede:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   19ee0:	f812 1901 	ldrb.w	r1, [r2], #-1
   19ee4:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   19ee8:	42a2      	cmp	r2, r4
   19eea:	d1f9      	bne.n	19ee0 <ll_rl_add+0x170>
	if (rl[i].lirk) {
   19eec:	2800      	cmp	r0, #0
   19eee:	d092      	beq.n	19e16 <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   19ef0:	1dd8      	adds	r0, r3, #7
   19ef2:	4629      	mov	r1, r5
   19ef4:	2210      	movs	r2, #16
   19ef6:	4430      	add	r0, r6
   19ef8:	9301      	str	r3, [sp, #4]
   19efa:	f00a fd50 	bl	2499e <memcpy>
		rl[i].local_rpa = NULL;
   19efe:	eb0a 0207 	add.w	r2, sl, r7
   19f02:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   19f06:	2100      	movs	r1, #0
   19f08:	9b01      	ldr	r3, [sp, #4]
   19f0a:	6251      	str	r1, [r2, #36]	; 0x24
   19f0c:	e783      	b.n	19e16 <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   19f0e:	2012      	movs	r0, #18
}
   19f10:	b005      	add	sp, #20
   19f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f16:	bf00      	nop
   19f18:	20002d84 	.word	0x20002d84
   19f1c:	20002c5a 	.word	0x20002c5a
   19f20:	20003f3f 	.word	0x20003f3f
   19f24:	20002cfc 	.word	0x20002cfc
   19f28:	20002d04 	.word	0x20002d04

00019f2c <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19f2c:	2807      	cmp	r0, #7
   19f2e:	d812      	bhi.n	19f56 <ull_filter_lll_lrpa_get+0x2a>
   19f30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19f34:	4a09      	ldr	r2, [pc, #36]	; (19f5c <ull_filter_lll_lrpa_get+0x30>)
   19f36:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19f3a:	f013 0f08 	tst.w	r3, #8
   19f3e:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   19f42:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   19f46:	d007      	beq.n	19f58 <ull_filter_lll_lrpa_get+0x2c>
   19f48:	f3c3 0040 	ubfx	r0, r3, #1, #1
   19f4c:	079b      	lsls	r3, r3, #30
   19f4e:	d503      	bpl.n	19f58 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   19f50:	440a      	add	r2, r1
   19f52:	6a50      	ldr	r0, [r2, #36]	; 0x24
   19f54:	4770      	bx	lr
		return NULL;
   19f56:	2000      	movs	r0, #0
}
   19f58:	4770      	bx	lr
   19f5a:	bf00      	nop
   19f5c:	20002d84 	.word	0x20002d84

00019f60 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   19f60:	4b02      	ldr	r3, [pc, #8]	; (19f6c <ull_filter_lll_irks_get+0xc>)
   19f62:	781b      	ldrb	r3, [r3, #0]
   19f64:	7003      	strb	r3, [r0, #0]
}
   19f66:	4802      	ldr	r0, [pc, #8]	; (19f70 <ull_filter_lll_irks_get+0x10>)
   19f68:	4770      	bx	lr
   19f6a:	bf00      	nop
   19f6c:	20003f3f 	.word	0x20003f3f
   19f70:	20002d04 	.word	0x20002d04

00019f74 <ull_filter_lll_rl_idx>:
{
   19f74:	b538      	push	{r3, r4, r5, lr}
   19f76:	460c      	mov	r4, r1
	if (filter) {
   19f78:	b150      	cbz	r0, 19f90 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   19f7a:	2907      	cmp	r1, #7
   19f7c:	d822      	bhi.n	19fc4 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   19f7e:	4d2a      	ldr	r5, [pc, #168]	; (1a028 <ull_filter_lll_rl_idx+0xb4>)
   19f80:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19f84:	07da      	lsls	r2, r3, #31
   19f86:	d52f      	bpl.n	19fe8 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   19f88:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   19f8c:	7860      	ldrb	r0, [r4, #1]
}
   19f8e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19f90:	2907      	cmp	r1, #7
   19f92:	d83a      	bhi.n	1a00a <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   19f94:	4b25      	ldr	r3, [pc, #148]	; (1a02c <ull_filter_lll_rl_idx+0xb8>)
   19f96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19f9a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   19f9e:	07db      	lsls	r3, r3, #31
   19fa0:	d501      	bpl.n	19fa6 <ull_filter_lll_rl_idx+0x32>
   19fa2:	4620      	mov	r0, r4
}
   19fa4:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   19fa6:	4a22      	ldr	r2, [pc, #136]	; (1a030 <ull_filter_lll_rl_idx+0xbc>)
   19fa8:	4922      	ldr	r1, [pc, #136]	; (1a034 <ull_filter_lll_rl_idx+0xc0>)
   19faa:	4823      	ldr	r0, [pc, #140]	; (1a038 <ull_filter_lll_rl_idx+0xc4>)
   19fac:	f240 3363 	movw	r3, #867	; 0x363
   19fb0:	f008 fba8 	bl	22704 <printk>
   19fb4:	4040      	eors	r0, r0
   19fb6:	f380 8811 	msr	BASEPRI, r0
   19fba:	f04f 0003 	mov.w	r0, #3
   19fbe:	df02      	svc	2
   19fc0:	4620      	mov	r0, r4
}
   19fc2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   19fc4:	4a1a      	ldr	r2, [pc, #104]	; (1a030 <ull_filter_lll_rl_idx+0xbc>)
   19fc6:	491d      	ldr	r1, [pc, #116]	; (1a03c <ull_filter_lll_rl_idx+0xc8>)
   19fc8:	481b      	ldr	r0, [pc, #108]	; (1a038 <ull_filter_lll_rl_idx+0xc4>)
   19fca:	f240 335d 	movw	r3, #861	; 0x35d
   19fce:	f008 fb99 	bl	22704 <printk>
   19fd2:	4040      	eors	r0, r0
   19fd4:	f380 8811 	msr	BASEPRI, r0
   19fd8:	f04f 0003 	mov.w	r0, #3
   19fdc:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   19fde:	4d12      	ldr	r5, [pc, #72]	; (1a028 <ull_filter_lll_rl_idx+0xb4>)
   19fe0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19fe4:	07da      	lsls	r2, r3, #31
   19fe6:	d4cf      	bmi.n	19f88 <ull_filter_lll_rl_idx+0x14>
   19fe8:	4a11      	ldr	r2, [pc, #68]	; (1a030 <ull_filter_lll_rl_idx+0xbc>)
   19fea:	4915      	ldr	r1, [pc, #84]	; (1a040 <ull_filter_lll_rl_idx+0xcc>)
   19fec:	4812      	ldr	r0, [pc, #72]	; (1a038 <ull_filter_lll_rl_idx+0xc4>)
   19fee:	f240 335e 	movw	r3, #862	; 0x35e
   19ff2:	f008 fb87 	bl	22704 <printk>
   19ff6:	4040      	eors	r0, r0
   19ff8:	f380 8811 	msr	BASEPRI, r0
   19ffc:	f04f 0003 	mov.w	r0, #3
   1a000:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1a002:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1a006:	7860      	ldrb	r0, [r4, #1]
   1a008:	e7c1      	b.n	19f8e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1a00a:	4a09      	ldr	r2, [pc, #36]	; (1a030 <ull_filter_lll_rl_idx+0xbc>)
   1a00c:	490d      	ldr	r1, [pc, #52]	; (1a044 <ull_filter_lll_rl_idx+0xd0>)
   1a00e:	480a      	ldr	r0, [pc, #40]	; (1a038 <ull_filter_lll_rl_idx+0xc4>)
   1a010:	f240 3361 	movw	r3, #865	; 0x361
   1a014:	f008 fb76 	bl	22704 <printk>
   1a018:	4040      	eors	r0, r0
   1a01a:	f380 8811 	msr	BASEPRI, r0
   1a01e:	f04f 0003 	mov.w	r0, #3
   1a022:	df02      	svc	2
   1a024:	e7b6      	b.n	19f94 <ull_filter_lll_rl_idx+0x20>
   1a026:	bf00      	nop
   1a028:	20002c58 	.word	0x20002c58
   1a02c:	20002d84 	.word	0x20002d84
   1a030:	00029a70 	.word	0x00029a70
   1a034:	00029c38 	.word	0x00029c38
   1a038:	00029220 	.word	0x00029220
   1a03c:	00029ad4 	.word	0x00029ad4
   1a040:	00029b7c 	.word	0x00029b7c
   1a044:	00029b94 	.word	0x00029b94

0001a048 <ull_filter_lll_rl_irk_idx>:
{
   1a048:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a04a:	4b20      	ldr	r3, [pc, #128]	; (1a0cc <ull_filter_lll_rl_irk_idx+0x84>)
   1a04c:	781b      	ldrb	r3, [r3, #0]
   1a04e:	4283      	cmp	r3, r0
{
   1a050:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a052:	d90c      	bls.n	1a06e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1a054:	4b1e      	ldr	r3, [pc, #120]	; (1a0d0 <ull_filter_lll_rl_irk_idx+0x88>)
   1a056:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a058:	2c07      	cmp	r4, #7
   1a05a:	d819      	bhi.n	1a090 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1a05c:	4b1d      	ldr	r3, [pc, #116]	; (1a0d4 <ull_filter_lll_rl_irk_idx+0x8c>)
   1a05e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a062:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1a066:	07db      	lsls	r3, r3, #31
   1a068:	d520      	bpl.n	1a0ac <ull_filter_lll_rl_irk_idx+0x64>
}
   1a06a:	4620      	mov	r0, r4
   1a06c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a06e:	4a1a      	ldr	r2, [pc, #104]	; (1a0d8 <ull_filter_lll_rl_irk_idx+0x90>)
   1a070:	491a      	ldr	r1, [pc, #104]	; (1a0dc <ull_filter_lll_rl_irk_idx+0x94>)
   1a072:	481b      	ldr	r0, [pc, #108]	; (1a0e0 <ull_filter_lll_rl_irk_idx+0x98>)
   1a074:	f240 336d 	movw	r3, #877	; 0x36d
   1a078:	f008 fb44 	bl	22704 <printk>
   1a07c:	4040      	eors	r0, r0
   1a07e:	f380 8811 	msr	BASEPRI, r0
   1a082:	f04f 0003 	mov.w	r0, #3
   1a086:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1a088:	4b11      	ldr	r3, [pc, #68]	; (1a0d0 <ull_filter_lll_rl_irk_idx+0x88>)
   1a08a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a08c:	2c07      	cmp	r4, #7
   1a08e:	d9e5      	bls.n	1a05c <ull_filter_lll_rl_irk_idx+0x14>
   1a090:	4a11      	ldr	r2, [pc, #68]	; (1a0d8 <ull_filter_lll_rl_irk_idx+0x90>)
   1a092:	4914      	ldr	r1, [pc, #80]	; (1a0e4 <ull_filter_lll_rl_irk_idx+0x9c>)
   1a094:	4812      	ldr	r0, [pc, #72]	; (1a0e0 <ull_filter_lll_rl_irk_idx+0x98>)
   1a096:	f240 336f 	movw	r3, #879	; 0x36f
   1a09a:	f008 fb33 	bl	22704 <printk>
   1a09e:	4040      	eors	r0, r0
   1a0a0:	f380 8811 	msr	BASEPRI, r0
   1a0a4:	f04f 0003 	mov.w	r0, #3
   1a0a8:	df02      	svc	2
   1a0aa:	e7d7      	b.n	1a05c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1a0ac:	4a0a      	ldr	r2, [pc, #40]	; (1a0d8 <ull_filter_lll_rl_irk_idx+0x90>)
   1a0ae:	490e      	ldr	r1, [pc, #56]	; (1a0e8 <ull_filter_lll_rl_irk_idx+0xa0>)
   1a0b0:	480b      	ldr	r0, [pc, #44]	; (1a0e0 <ull_filter_lll_rl_irk_idx+0x98>)
   1a0b2:	f44f 735c 	mov.w	r3, #880	; 0x370
   1a0b6:	f008 fb25 	bl	22704 <printk>
   1a0ba:	4040      	eors	r0, r0
   1a0bc:	f380 8811 	msr	BASEPRI, r0
   1a0c0:	f04f 0003 	mov.w	r0, #3
   1a0c4:	df02      	svc	2
}
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	bd10      	pop	{r4, pc}
   1a0ca:	bf00      	nop
   1a0cc:	20003f3f 	.word	0x20003f3f
   1a0d0:	20002cfc 	.word	0x20002cfc
   1a0d4:	20002d84 	.word	0x20002d84
   1a0d8:	00029a70 	.word	0x00029a70
   1a0dc:	00029c44 	.word	0x00029c44
   1a0e0:	00029220 	.word	0x00029220
   1a0e4:	00029c64 	.word	0x00029c64
   1a0e8:	00029c38 	.word	0x00029c38

0001a0ec <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1a0ec:	2807      	cmp	r0, #7
   1a0ee:	d823      	bhi.n	1a138 <ull_filter_lll_irk_in_fal+0x4c>
{
   1a0f0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1a0f2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a0f6:	4e11      	ldr	r6, [pc, #68]	; (1a13c <ull_filter_lll_irk_in_fal+0x50>)
   1a0f8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1a0fc:	07db      	lsls	r3, r3, #31
   1a0fe:	4604      	mov	r4, r0
   1a100:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1a104:	d505      	bpl.n	1a112 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1a106:	442c      	add	r4, r5
   1a108:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a10c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a110:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1a112:	4a0b      	ldr	r2, [pc, #44]	; (1a140 <ull_filter_lll_irk_in_fal+0x54>)
   1a114:	490b      	ldr	r1, [pc, #44]	; (1a144 <ull_filter_lll_irk_in_fal+0x58>)
   1a116:	480c      	ldr	r0, [pc, #48]	; (1a148 <ull_filter_lll_irk_in_fal+0x5c>)
   1a118:	f240 337b 	movw	r3, #891	; 0x37b
   1a11c:	f008 faf2 	bl	22704 <printk>
   1a120:	4040      	eors	r0, r0
   1a122:	f380 8811 	msr	BASEPRI, r0
   1a126:	f04f 0003 	mov.w	r0, #3
   1a12a:	df02      	svc	2
	return rl[rl_idx].fal;
   1a12c:	442c      	add	r4, r5
   1a12e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a132:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a136:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1a138:	2000      	movs	r0, #0
}
   1a13a:	4770      	bx	lr
   1a13c:	20002d84 	.word	0x20002d84
   1a140:	00029a70 	.word	0x00029a70
   1a144:	00029ac0 	.word	0x00029ac0
   1a148:	00029220 	.word	0x00029220

0001a14c <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1a14c:	4b14      	ldr	r3, [pc, #80]	; (1a1a0 <ull_filter_lll_rl_idx_allowed+0x54>)
   1a14e:	781b      	ldrb	r3, [r3, #0]
   1a150:	b19b      	cbz	r3, 1a17a <ull_filter_lll_rl_idx_allowed+0x2e>
   1a152:	2907      	cmp	r1, #7
{
   1a154:	b570      	push	{r4, r5, r6, lr}
   1a156:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1a158:	d80d      	bhi.n	1a176 <ull_filter_lll_rl_idx_allowed+0x2a>
   1a15a:	b960      	cbnz	r0, 1a176 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1a15c:	4e11      	ldr	r6, [pc, #68]	; (1a1a4 <ull_filter_lll_rl_idx_allowed+0x58>)
   1a15e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1a162:	008d      	lsls	r5, r1, #2
   1a164:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1a168:	07da      	lsls	r2, r3, #31
   1a16a:	d50b      	bpl.n	1a184 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1a16c:	442c      	add	r4, r5
   1a16e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a172:	0743      	lsls	r3, r0, #29
   1a174:	d403      	bmi.n	1a17e <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1a176:	2001      	movs	r0, #1
}
   1a178:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1a17a:	2001      	movs	r0, #1
}
   1a17c:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1a17e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1a182:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1a184:	4a08      	ldr	r2, [pc, #32]	; (1a1a8 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1a186:	4909      	ldr	r1, [pc, #36]	; (1a1ac <ull_filter_lll_rl_idx_allowed+0x60>)
   1a188:	4809      	ldr	r0, [pc, #36]	; (1a1b0 <ull_filter_lll_rl_idx_allowed+0x64>)
   1a18a:	f44f 7365 	mov.w	r3, #916	; 0x394
   1a18e:	f008 fab9 	bl	22704 <printk>
   1a192:	4040      	eors	r0, r0
   1a194:	f380 8811 	msr	BASEPRI, r0
   1a198:	f04f 0003 	mov.w	r0, #3
   1a19c:	df02      	svc	2
   1a19e:	e7e5      	b.n	1a16c <ull_filter_lll_rl_idx_allowed+0x20>
   1a1a0:	20003f40 	.word	0x20003f40
   1a1a4:	20002d84 	.word	0x20002d84
   1a1a8:	00029a70 	.word	0x00029a70
   1a1ac:	00029ac0 	.word	0x00029ac0
   1a1b0:	00029220 	.word	0x00029220

0001a1b4 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1a1b4:	7813      	ldrb	r3, [r2, #0]
   1a1b6:	2bff      	cmp	r3, #255	; 0xff
   1a1b8:	d11b      	bne.n	1a1f2 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1a1ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1be:	4d19      	ldr	r5, [pc, #100]	; (1a224 <ull_filter_lll_rl_addr_allowed+0x70>)
   1a1c0:	4604      	mov	r4, r0
   1a1c2:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1a1c4:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a1c6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1a1ca:	b2df      	uxtb	r7, r3
   1a1cc:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1a1d0:	f01c 0001 	ands.w	r0, ip, #1
   1a1d4:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1a1d8:	d003      	beq.n	1a1e2 <ull_filter_lll_rl_addr_allowed+0x2e>
   1a1da:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1a1de:	45a4      	cmp	ip, r4
   1a1e0:	d009      	beq.n	1a1f6 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a1e2:	3301      	adds	r3, #1
   1a1e4:	2b08      	cmp	r3, #8
   1a1e6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1a1ea:	d1ec      	bne.n	1a1c6 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1a1ec:	2001      	movs	r0, #1
}
   1a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1a1f2:	2001      	movs	r0, #1
}
   1a1f4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a1f6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a1fa:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a1fc:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1a200:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1a204:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1a208:	45ca      	cmp	sl, r9
   1a20a:	d1ea      	bne.n	1a1e2 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a20c:	45dc      	cmp	ip, fp
   1a20e:	d1f7      	bne.n	1a200 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1a210:	4433      	add	r3, r6
				*rl_idx = i;
   1a212:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1a214:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a218:	075a      	lsls	r2, r3, #29
   1a21a:	d5e8      	bpl.n	1a1ee <ull_filter_lll_rl_addr_allowed+0x3a>
   1a21c:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1a220:	e7e5      	b.n	1a1ee <ull_filter_lll_rl_addr_allowed+0x3a>
   1a222:	bf00      	nop
   1a224:	20002d84 	.word	0x20002d84

0001a228 <ull_filter_lll_rl_addr_resolve>:
{
   1a228:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1a22a:	4b0e      	ldr	r3, [pc, #56]	; (1a264 <ull_filter_lll_rl_addr_resolve+0x3c>)
   1a22c:	781c      	ldrb	r4, [r3, #0]
   1a22e:	b17c      	cbz	r4, 1a250 <ull_filter_lll_rl_addr_resolve+0x28>
   1a230:	2a07      	cmp	r2, #7
   1a232:	d80d      	bhi.n	1a250 <ull_filter_lll_rl_addr_resolve+0x28>
   1a234:	4c0c      	ldr	r4, [pc, #48]	; (1a268 <ull_filter_lll_rl_addr_resolve+0x40>)
   1a236:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1a23a:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1a23e:	f01c 0f08 	tst.w	ip, #8
   1a242:	d005      	beq.n	1a250 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1a244:	b120      	cbz	r0, 1a250 <ull_filter_lll_rl_addr_resolve+0x28>
   1a246:	794b      	ldrb	r3, [r1, #5]
   1a248:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a24c:	2b40      	cmp	r3, #64	; 0x40
   1a24e:	d002      	beq.n	1a256 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1a250:	2000      	movs	r0, #0
   1a252:	bc10      	pop	{r4}
   1a254:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1a256:	2028      	movs	r0, #40	; 0x28
   1a258:	fb00 4002 	mla	r0, r0, r2, r4
   1a25c:	3007      	adds	r0, #7
}
   1a25e:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1a260:	f00a bbef 	b.w	24a42 <bt_rpa_irk_matches>
   1a264:	20003f40 	.word	0x20003f40
   1a268:	20002d84 	.word	0x20002d84

0001a26c <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1a26c:	4b02      	ldr	r3, [pc, #8]	; (1a278 <ull_filter_lll_rl_enabled+0xc>)
   1a26e:	7818      	ldrb	r0, [r3, #0]
}
   1a270:	3800      	subs	r0, #0
   1a272:	bf18      	it	ne
   1a274:	2001      	movne	r0, #1
   1a276:	4770      	bx	lr
   1a278:	20003f40 	.word	0x20003f40

0001a27c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a27c:	4668      	mov	r0, sp
   1a27e:	f020 0107 	bic.w	r1, r0, #7
   1a282:	468d      	mov	sp, r1
   1a284:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1a286:	f001 ff0b 	bl	1c0a0 <isr_radio>

	ISR_DIRECT_PM();
   1a28a:	f7ee f83b 	bl	8304 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1a28e:	f7ee f92b 	bl	84e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a296:	4685      	mov	sp, r0
   1a298:	4770      	bx	lr
   1a29a:	bf00      	nop

0001a29c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a29c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a29e:	4b09      	ldr	r3, [pc, #36]	; (1a2c4 <rtc0_nrf5_isr+0x28>)
   1a2a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a2a4:	b93a      	cbnz	r2, 1a2b6 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1a2a6:	2001      	movs	r0, #1
   1a2a8:	f7f7 f81a 	bl	112e0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1a2ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a2b0:	2002      	movs	r0, #2
   1a2b2:	f7f7 b815 	b.w	112e0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a2b6:	2000      	movs	r0, #0
   1a2b8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1a2bc:	f7f8 f928 	bl	12510 <ticker_trigger>
   1a2c0:	e7f1      	b.n	1a2a6 <rtc0_nrf5_isr+0xa>
   1a2c2:	bf00      	nop
   1a2c4:	4000b000 	.word	0x4000b000

0001a2c8 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1a2c8:	2000      	movs	r0, #0
   1a2ca:	f7f7 b809 	b.w	112e0 <mayfly_run>
   1a2ce:	bf00      	nop

0001a2d0 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1a2d0:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1a2d2:	4b0e      	ldr	r3, [pc, #56]	; (1a30c <ticker_stop_op_cb+0x3c>)
   1a2d4:	4c0e      	ldr	r4, [pc, #56]	; (1a310 <ticker_stop_op_cb+0x40>)
   1a2d6:	781a      	ldrb	r2, [r3, #0]
   1a2d8:	7823      	ldrb	r3, [r4, #0]
   1a2da:	429a      	cmp	r2, r3
   1a2dc:	d006      	beq.n	1a2ec <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1a2de:	490d      	ldr	r1, [pc, #52]	; (1a314 <ticker_stop_op_cb+0x44>)
   1a2e0:	4a0d      	ldr	r2, [pc, #52]	; (1a318 <ticker_stop_op_cb+0x48>)
   1a2e2:	7809      	ldrb	r1, [r1, #0]
   1a2e4:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1a2e6:	3301      	adds	r3, #1
   1a2e8:	7023      	strb	r3, [r4, #0]
}
   1a2ea:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1a2ec:	4a0b      	ldr	r2, [pc, #44]	; (1a31c <ticker_stop_op_cb+0x4c>)
   1a2ee:	490c      	ldr	r1, [pc, #48]	; (1a320 <ticker_stop_op_cb+0x50>)
   1a2f0:	480c      	ldr	r0, [pc, #48]	; (1a324 <ticker_stop_op_cb+0x54>)
   1a2f2:	f240 3301 	movw	r3, #769	; 0x301
   1a2f6:	f008 fa05 	bl	22704 <printk>
   1a2fa:	4040      	eors	r0, r0
   1a2fc:	f380 8811 	msr	BASEPRI, r0
   1a300:	f04f 0003 	mov.w	r0, #3
   1a304:	df02      	svc	2
	preempt_stop_ack++;
   1a306:	7823      	ldrb	r3, [r4, #0]
   1a308:	e7e9      	b.n	1a2de <ticker_stop_op_cb+0xe>
   1a30a:	bf00      	nop
   1a30c:	20003f46 	.word	0x20003f46
   1a310:	20003f45 	.word	0x20003f45
   1a314:	20003f41 	.word	0x20003f41
   1a318:	20003f42 	.word	0x20003f42
   1a31c:	00029c80 	.word	0x00029c80
   1a320:	00029cc8 	.word	0x00029cc8
   1a324:	00029220 	.word	0x00029220

0001a328 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1a328:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a32a:	b9f8      	cbnz	r0, 1a36c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1a32c:	4b1e      	ldr	r3, [pc, #120]	; (1a3a8 <ticker_start_op_cb+0x80>)
   1a32e:	4d1f      	ldr	r5, [pc, #124]	; (1a3ac <ticker_start_op_cb+0x84>)
   1a330:	781a      	ldrb	r2, [r3, #0]
   1a332:	782b      	ldrb	r3, [r5, #0]
   1a334:	429a      	cmp	r2, r3
   1a336:	d027      	beq.n	1a388 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1a338:	4a1d      	ldr	r2, [pc, #116]	; (1a3b0 <ticker_start_op_cb+0x88>)
   1a33a:	4c1e      	ldr	r4, [pc, #120]	; (1a3b4 <ticker_start_op_cb+0x8c>)
   1a33c:	7812      	ldrb	r2, [r2, #0]
   1a33e:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1a340:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1a342:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1a344:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1a346:	b2d3      	uxtb	r3, r2
   1a348:	d00d      	beq.n	1a366 <ticker_start_op_cb+0x3e>
   1a34a:	4a1b      	ldr	r2, [pc, #108]	; (1a3b8 <ticker_start_op_cb+0x90>)
   1a34c:	491b      	ldr	r1, [pc, #108]	; (1a3bc <ticker_start_op_cb+0x94>)
   1a34e:	481c      	ldr	r0, [pc, #112]	; (1a3c0 <ticker_start_op_cb+0x98>)
   1a350:	f240 330f 	movw	r3, #783	; 0x30f
   1a354:	f008 f9d6 	bl	22704 <printk>
   1a358:	4040      	eors	r0, r0
   1a35a:	f380 8811 	msr	BASEPRI, r0
   1a35e:	f04f 0003 	mov.w	r0, #3
   1a362:	df02      	svc	2
	preempt_req++;
   1a364:	7823      	ldrb	r3, [r4, #0]
   1a366:	3301      	adds	r3, #1
   1a368:	7023      	strb	r3, [r4, #0]
}
   1a36a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a36c:	4a12      	ldr	r2, [pc, #72]	; (1a3b8 <ticker_start_op_cb+0x90>)
   1a36e:	4915      	ldr	r1, [pc, #84]	; (1a3c4 <ticker_start_op_cb+0x9c>)
   1a370:	4813      	ldr	r0, [pc, #76]	; (1a3c0 <ticker_start_op_cb+0x98>)
   1a372:	f240 330a 	movw	r3, #778	; 0x30a
   1a376:	f008 f9c5 	bl	22704 <printk>
   1a37a:	4040      	eors	r0, r0
   1a37c:	f380 8811 	msr	BASEPRI, r0
   1a380:	f04f 0003 	mov.w	r0, #3
   1a384:	df02      	svc	2
   1a386:	e7d1      	b.n	1a32c <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1a388:	4a0b      	ldr	r2, [pc, #44]	; (1a3b8 <ticker_start_op_cb+0x90>)
   1a38a:	490f      	ldr	r1, [pc, #60]	; (1a3c8 <ticker_start_op_cb+0xa0>)
   1a38c:	480c      	ldr	r0, [pc, #48]	; (1a3c0 <ticker_start_op_cb+0x98>)
   1a38e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1a392:	f008 f9b7 	bl	22704 <printk>
   1a396:	4040      	eors	r0, r0
   1a398:	f380 8811 	msr	BASEPRI, r0
   1a39c:	f04f 0003 	mov.w	r0, #3
   1a3a0:	df02      	svc	2
	preempt_start_ack++;
   1a3a2:	782b      	ldrb	r3, [r5, #0]
   1a3a4:	e7c8      	b.n	1a338 <ticker_start_op_cb+0x10>
   1a3a6:	bf00      	nop
   1a3a8:	20003f44 	.word	0x20003f44
   1a3ac:	20003f43 	.word	0x20003f43
   1a3b0:	20003f41 	.word	0x20003f41
   1a3b4:	20003f42 	.word	0x20003f42
   1a3b8:	00029c80 	.word	0x00029c80
   1a3bc:	00029d18 	.word	0x00029d18
   1a3c0:	00029220 	.word	0x00029220
   1a3c4:	000297ec 	.word	0x000297ec
   1a3c8:	00029cf0 	.word	0x00029cf0

0001a3cc <isr_race>:
	radio_status_reset();
   1a3cc:	f001 bf80 	b.w	1c2d0 <radio_status_reset>

0001a3d0 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1a3d0:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1a3d2:	4a18      	ldr	r2, [pc, #96]	; (1a434 <preempt_ticker_cb+0x64>)
   1a3d4:	4c18      	ldr	r4, [pc, #96]	; (1a438 <preempt_ticker_cb+0x68>)
   1a3d6:	7812      	ldrb	r2, [r2, #0]
   1a3d8:	7823      	ldrb	r3, [r4, #0]
   1a3da:	429a      	cmp	r2, r3
   1a3dc:	d01b      	beq.n	1a416 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1a3de:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1a3e0:	4b16      	ldr	r3, [pc, #88]	; (1a43c <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1a3e2:	3101      	adds	r1, #1
   1a3e4:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3e6:	2200      	movs	r2, #0
	preempt_ack++;
   1a3e8:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1a3ea:	9903      	ldr	r1, [sp, #12]
   1a3ec:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3ee:	2001      	movs	r0, #1
   1a3f0:	4611      	mov	r1, r2
   1a3f2:	f7f6 ff1d 	bl	11230 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1a3f6:	b900      	cbnz	r0, 1a3fa <preempt_ticker_cb+0x2a>
}
   1a3f8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1a3fa:	4a11      	ldr	r2, [pc, #68]	; (1a440 <preempt_ticker_cb+0x70>)
   1a3fc:	4911      	ldr	r1, [pc, #68]	; (1a444 <preempt_ticker_cb+0x74>)
   1a3fe:	4812      	ldr	r0, [pc, #72]	; (1a448 <preempt_ticker_cb+0x78>)
   1a400:	f240 3376 	movw	r3, #886	; 0x376
   1a404:	f008 f97e 	bl	22704 <printk>
   1a408:	4040      	eors	r0, r0
   1a40a:	f380 8811 	msr	BASEPRI, r0
   1a40e:	f04f 0003 	mov.w	r0, #3
   1a412:	df02      	svc	2
}
   1a414:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1a416:	4a0a      	ldr	r2, [pc, #40]	; (1a440 <preempt_ticker_cb+0x70>)
   1a418:	490c      	ldr	r1, [pc, #48]	; (1a44c <preempt_ticker_cb+0x7c>)
   1a41a:	480b      	ldr	r0, [pc, #44]	; (1a448 <preempt_ticker_cb+0x78>)
   1a41c:	f44f 735c 	mov.w	r3, #880	; 0x370
   1a420:	f008 f970 	bl	22704 <printk>
   1a424:	4040      	eors	r0, r0
   1a426:	f380 8811 	msr	BASEPRI, r0
   1a42a:	f04f 0003 	mov.w	r0, #3
   1a42e:	df02      	svc	2
   1a430:	e7d5      	b.n	1a3de <preempt_ticker_cb+0xe>
   1a432:	bf00      	nop
   1a434:	20003f42 	.word	0x20003f42
   1a438:	20003f41 	.word	0x20003f41
   1a43c:	2000068c 	.word	0x2000068c
   1a440:	00029c80 	.word	0x00029c80
   1a444:	00029674 	.word	0x00029674
   1a448:	00029220 	.word	0x00029220
   1a44c:	00029d34 	.word	0x00029d34

0001a450 <preempt_ticker_stop>:
{
   1a450:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1a452:	4917      	ldr	r1, [pc, #92]	; (1a4b0 <preempt_ticker_stop+0x60>)
   1a454:	4a17      	ldr	r2, [pc, #92]	; (1a4b4 <preempt_ticker_stop+0x64>)
   1a456:	780b      	ldrb	r3, [r1, #0]
   1a458:	7812      	ldrb	r2, [r2, #0]
   1a45a:	429a      	cmp	r2, r3
{
   1a45c:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1a45e:	d122      	bne.n	1a4a6 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1a460:	4b15      	ldr	r3, [pc, #84]	; (1a4b8 <preempt_ticker_stop+0x68>)
   1a462:	4a16      	ldr	r2, [pc, #88]	; (1a4bc <preempt_ticker_stop+0x6c>)
   1a464:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1a466:	7812      	ldrb	r2, [r2, #0]
   1a468:	429a      	cmp	r2, r3
   1a46a:	d01c      	beq.n	1a4a6 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1a46c:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a46e:	4b14      	ldr	r3, [pc, #80]	; (1a4c0 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1a470:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a472:	2200      	movs	r2, #0
	preempt_stop_req++;
   1a474:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a476:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1a478:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a47a:	4611      	mov	r1, r2
   1a47c:	4610      	mov	r0, r2
   1a47e:	f7f8 f93f 	bl	12700 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a482:	4604      	mov	r4, r0
   1a484:	b178      	cbz	r0, 1a4a6 <preempt_ticker_stop+0x56>
   1a486:	2802      	cmp	r0, #2
   1a488:	d00e      	beq.n	1a4a8 <preempt_ticker_stop+0x58>
   1a48a:	4a0e      	ldr	r2, [pc, #56]	; (1a4c4 <preempt_ticker_stop+0x74>)
   1a48c:	490e      	ldr	r1, [pc, #56]	; (1a4c8 <preempt_ticker_stop+0x78>)
   1a48e:	480f      	ldr	r0, [pc, #60]	; (1a4cc <preempt_ticker_stop+0x7c>)
   1a490:	f240 3362 	movw	r3, #866	; 0x362
   1a494:	f008 f936 	bl	22704 <printk>
   1a498:	4040      	eors	r0, r0
   1a49a:	f380 8811 	msr	BASEPRI, r0
   1a49e:	f04f 0003 	mov.w	r0, #3
   1a4a2:	df02      	svc	2
   1a4a4:	e000      	b.n	1a4a8 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1a4a6:	2400      	movs	r4, #0
}
   1a4a8:	4620      	mov	r0, r4
   1a4aa:	b002      	add	sp, #8
   1a4ac:	bd10      	pop	{r4, pc}
   1a4ae:	bf00      	nop
   1a4b0:	20003f46 	.word	0x20003f46
   1a4b4:	20003f45 	.word	0x20003f45
   1a4b8:	20003f41 	.word	0x20003f41
   1a4bc:	20003f42 	.word	0x20003f42
   1a4c0:	0001a2d1 	.word	0x0001a2d1
   1a4c4:	00029c80 	.word	0x00029c80
   1a4c8:	00029d50 	.word	0x00029d50
   1a4cc:	00029220 	.word	0x00029220

0001a4d0 <preempt_ticker_start>:
{
   1a4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1a4d4:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1a4d6:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1a4da:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1a4dc:	4b2a      	ldr	r3, [pc, #168]	; (1a588 <preempt_ticker_start+0xb8>)
   1a4de:	4f2b      	ldr	r7, [pc, #172]	; (1a58c <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1a4e0:	68d6      	ldr	r6, [r2, #12]
{
   1a4e2:	460d      	mov	r5, r1
   1a4e4:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1a4e6:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1a4e8:	6890      	ldr	r0, [r2, #8]
   1a4ea:	6853      	ldr	r3, [r2, #4]
   1a4ec:	4298      	cmp	r0, r3
   1a4ee:	bf2c      	ite	cs
   1a4f0:	ebc6 0600 	rsbcs	r6, r6, r0
   1a4f4:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1a4f8:	783b      	ldrb	r3, [r7, #0]
   1a4fa:	4299      	cmp	r1, r3
{
   1a4fc:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1a4fe:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1a502:	d033      	beq.n	1a56c <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1a504:	2c00      	cmp	r4, #0
   1a506:	d03a      	beq.n	1a57e <preempt_ticker_start+0xae>
   1a508:	7f23      	ldrb	r3, [r4, #28]
   1a50a:	079b      	lsls	r3, r3, #30
   1a50c:	d437      	bmi.n	1a57e <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1a50e:	f8df a080 	ldr.w	sl, [pc, #128]	; 1a590 <preempt_ticker_start+0xc0>
   1a512:	f8da 0000 	ldr.w	r0, [sl]
   1a516:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1a51a:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1a51e:	d022      	beq.n	1a566 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1a520:	f7ff ff96 	bl	1a450 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1a524:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1a526:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1a528:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1a52c:	f043 0302 	orr.w	r3, r3, #2
   1a530:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1a532:	4620      	mov	r0, r4
   1a534:	69a3      	ldr	r3, [r4, #24]
   1a536:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a538:	4b16      	ldr	r3, [pc, #88]	; (1a594 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1a53a:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a53c:	9600      	str	r6, [sp, #0]
   1a53e:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1a542:	4b15      	ldr	r3, [pc, #84]	; (1a598 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1a544:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a548:	2200      	movs	r2, #0
	preempt_start_req++;
   1a54a:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a54c:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1a550:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a552:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1a556:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1a55a:	4643      	mov	r3, r8
   1a55c:	4611      	mov	r1, r2
   1a55e:	4610      	mov	r0, r2
	preempt_start_req++;
   1a560:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a562:	f7f8 f843 	bl	125ec <ticker_start>
}
   1a566:	b00a      	add	sp, #40	; 0x28
   1a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1a56c:	4b0b      	ldr	r3, [pc, #44]	; (1a59c <preempt_ticker_start+0xcc>)
   1a56e:	4a0c      	ldr	r2, [pc, #48]	; (1a5a0 <preempt_ticker_start+0xd0>)
   1a570:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1a572:	7812      	ldrb	r2, [r2, #0]
   1a574:	429a      	cmp	r2, r3
   1a576:	d1c5      	bne.n	1a504 <preempt_ticker_start+0x34>
   1a578:	f8df a014 	ldr.w	sl, [pc, #20]	; 1a590 <preempt_ticker_start+0xc0>
   1a57c:	e7dc      	b.n	1a538 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1a57e:	2000      	movs	r0, #0
}
   1a580:	b00a      	add	sp, #40	; 0x28
   1a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a586:	bf00      	nop
   1a588:	20003f43 	.word	0x20003f43
   1a58c:	20003f44 	.word	0x20003f44
   1a590:	20002f14 	.word	0x20002f14
   1a594:	0001a329 	.word	0x0001a329
   1a598:	0001a3d1 	.word	0x0001a3d1
   1a59c:	20003f41 	.word	0x20003f41
   1a5a0:	20003f42 	.word	0x20003f42

0001a5a4 <preempt>:

static void preempt(void *param)
{
   1a5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1a5a6:	4e4b      	ldr	r6, [pc, #300]	; (1a6d4 <preempt+0x130>)
   1a5a8:	68b3      	ldr	r3, [r6, #8]
{
   1a5aa:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1a5ac:	b1b3      	cbz	r3, 1a5dc <preempt+0x38>
   1a5ae:	6833      	ldr	r3, [r6, #0]
   1a5b0:	b1a3      	cbz	r3, 1a5dc <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1a5b2:	23ff      	movs	r3, #255	; 0xff
   1a5b4:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1a5b6:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1a5ba:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1a5be:	f7fa fde9 	bl	15194 <ull_prepare_dequeue_iter>
	if (!next) {
   1a5c2:	4601      	mov	r1, r0
   1a5c4:	b150      	cbz	r0, 1a5dc <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1a5c6:	7f0b      	ldrb	r3, [r1, #28]
   1a5c8:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1a5cc:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1a5d0:	d006      	beq.n	1a5e0 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1a5d2:	f7fa fddf 	bl	15194 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1a5d6:	4601      	mov	r1, r0
   1a5d8:	2800      	cmp	r0, #0
   1a5da:	d1f4      	bne.n	1a5c6 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1a5dc:	b009      	add	sp, #36	; 0x24
   1a5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1a5e0:	428d      	cmp	r5, r1
   1a5e2:	d126      	bne.n	1a632 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1a5e4:	6873      	ldr	r3, [r6, #4]
   1a5e6:	6831      	ldr	r1, [r6, #0]
   1a5e8:	68e8      	ldr	r0, [r5, #12]
   1a5ea:	aa03      	add	r2, sp, #12
   1a5ec:	4798      	blx	r3
	if (!err) {
   1a5ee:	4607      	mov	r7, r0
   1a5f0:	b1b0      	cbz	r0, 1a620 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1a5f2:	68b3      	ldr	r3, [r6, #8]
   1a5f4:	6831      	ldr	r1, [r6, #0]
   1a5f6:	4620      	mov	r0, r4
   1a5f8:	4798      	blx	r3
	if (err == -EAGAIN) {
   1a5fa:	f117 0f0b 	cmn.w	r7, #11
   1a5fe:	d02c      	beq.n	1a65a <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1a600:	378c      	adds	r7, #140	; 0x8c
   1a602:	d0eb      	beq.n	1a5dc <preempt+0x38>
   1a604:	4a34      	ldr	r2, [pc, #208]	; (1a6d8 <preempt+0x134>)
   1a606:	4935      	ldr	r1, [pc, #212]	; (1a6dc <preempt+0x138>)
   1a608:	4835      	ldr	r0, [pc, #212]	; (1a6e0 <preempt+0x13c>)
   1a60a:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1a60e:	f008 f879 	bl	22704 <printk>
   1a612:	4040      	eors	r0, r0
   1a614:	f380 8811 	msr	BASEPRI, r0
   1a618:	f04f 0003 	mov.w	r0, #3
   1a61c:	df02      	svc	2
   1a61e:	e7dd      	b.n	1a5dc <preempt+0x38>
		next->is_aborted = 1;
   1a620:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a622:	69aa      	ldr	r2, [r5, #24]
   1a624:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1a626:	f043 0302 	orr.w	r3, r3, #2
   1a62a:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a62c:	4628      	mov	r0, r5
   1a62e:	4790      	blx	r2
		return;
   1a630:	e7d4      	b.n	1a5dc <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1a632:	4620      	mov	r0, r4
   1a634:	f7ff ff4c 	bl	1a4d0 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a638:	f030 0302 	bics.w	r3, r0, #2
   1a63c:	d0ce      	beq.n	1a5dc <preempt+0x38>
   1a63e:	4a26      	ldr	r2, [pc, #152]	; (1a6d8 <preempt+0x134>)
   1a640:	4928      	ldr	r1, [pc, #160]	; (1a6e4 <preempt+0x140>)
   1a642:	4827      	ldr	r0, [pc, #156]	; (1a6e0 <preempt+0x13c>)
   1a644:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1a648:	f008 f85c 	bl	22704 <printk>
   1a64c:	4040      	eors	r0, r0
   1a64e:	f380 8811 	msr	BASEPRI, r0
   1a652:	f04f 0003 	mov.w	r0, #3
   1a656:	df02      	svc	2
   1a658:	e7c0      	b.n	1a5dc <preempt+0x38>
		iter_idx = UINT8_MAX;
   1a65a:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a65c:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1a660:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a664:	f7fa fd96 	bl	15194 <ull_prepare_dequeue_iter>
		while (iter) {
   1a668:	b928      	cbnz	r0, 1a676 <preempt+0xd2>
   1a66a:	e013      	b.n	1a694 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1a66c:	f10d 000b 	add.w	r0, sp, #11
   1a670:	f7fa fd90 	bl	15194 <ull_prepare_dequeue_iter>
		while (iter) {
   1a674:	b170      	cbz	r0, 1a694 <preempt+0xf0>
			if (!iter->is_aborted &&
   1a676:	7f03      	ldrb	r3, [r0, #28]
   1a678:	079a      	lsls	r2, r3, #30
   1a67a:	d4f7      	bmi.n	1a66c <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1a67c:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1a67e:	6831      	ldr	r1, [r6, #0]
   1a680:	4291      	cmp	r1, r2
   1a682:	d1f3      	bne.n	1a66c <preempt+0xc8>
				iter->is_aborted = 1;
   1a684:	f043 0302 	orr.w	r3, r3, #2
   1a688:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1a68a:	6983      	ldr	r3, [r0, #24]
   1a68c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1a68e:	f88d 400b 	strb.w	r4, [sp, #11]
   1a692:	e7eb      	b.n	1a66c <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1a694:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1a696:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1a698:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a69a:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1a69c:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a6a0:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1a6a2:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1a6a4:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a6a6:	9b03      	ldr	r3, [sp, #12]
   1a6a8:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1a6ac:	aa04      	add	r2, sp, #16
   1a6ae:	f7fa fd33 	bl	15118 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1a6b2:	2800      	cmp	r0, #0
   1a6b4:	d192      	bne.n	1a5dc <preempt+0x38>
   1a6b6:	4a08      	ldr	r2, [pc, #32]	; (1a6d8 <preempt+0x134>)
   1a6b8:	490b      	ldr	r1, [pc, #44]	; (1a6e8 <preempt+0x144>)
   1a6ba:	4809      	ldr	r0, [pc, #36]	; (1a6e0 <preempt+0x13c>)
   1a6bc:	f240 33ce 	movw	r3, #974	; 0x3ce
   1a6c0:	f008 f820 	bl	22704 <printk>
   1a6c4:	4040      	eors	r0, r0
   1a6c6:	f380 8811 	msr	BASEPRI, r0
   1a6ca:	f04f 0003 	mov.w	r0, #3
   1a6ce:	df02      	svc	2
   1a6d0:	e784      	b.n	1a5dc <preempt+0x38>
   1a6d2:	bf00      	nop
   1a6d4:	20002f00 	.word	0x20002f00
   1a6d8:	00029c80 	.word	0x00029c80
   1a6dc:	00029d74 	.word	0x00029d74
   1a6e0:	00029220 	.word	0x00029220
   1a6e4:	00029d50 	.word	0x00029d50
   1a6e8:	00029d6c 	.word	0x00029d6c

0001a6ec <lll_init>:
{
   1a6ec:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1a6ee:	4816      	ldr	r0, [pc, #88]	; (1a748 <lll_init+0x5c>)
   1a6f0:	f006 fbf0 	bl	20ed4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a6f4:	4b15      	ldr	r3, [pc, #84]	; (1a74c <lll_init+0x60>)
   1a6f6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1a6f8:	b310      	cbz	r0, 1a740 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1a6fa:	4b15      	ldr	r3, [pc, #84]	; (1a750 <lll_init+0x64>)
   1a6fc:	2400      	movs	r4, #0
   1a6fe:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1a700:	f000 faf4 	bl	1acec <lll_clock_init>
	if (err < 0) {
   1a704:	2800      	cmp	r0, #0
   1a706:	db1a      	blt.n	1a73e <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1a708:	4621      	mov	r1, r4
   1a70a:	2001      	movs	r0, #1
   1a70c:	4622      	mov	r2, r4
   1a70e:	f7ed fde1 	bl	82d4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1a712:	4622      	mov	r2, r4
   1a714:	200b      	movs	r0, #11
   1a716:	2101      	movs	r1, #1
   1a718:	f7ed fddc 	bl	82d4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1a71c:	4622      	mov	r2, r4
   1a71e:	4621      	mov	r1, r4
   1a720:	2018      	movs	r0, #24
   1a722:	f7ed fdd7 	bl	82d4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1a726:	2001      	movs	r0, #1
   1a728:	f7ed fda2 	bl	8270 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1a72c:	200b      	movs	r0, #11
   1a72e:	f7ed fd9f 	bl	8270 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1a732:	2018      	movs	r0, #24
   1a734:	f7ed fd9c 	bl	8270 <arch_irq_enable>
	radio_setup();
   1a738:	f001 fce2 	bl	1c100 <radio_setup>
	return 0;
   1a73c:	4620      	mov	r0, r4
}
   1a73e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1a740:	f06f 0012 	mvn.w	r0, #18
}
   1a744:	bd10      	pop	{r4, pc}
   1a746:	bf00      	nop
   1a748:	00029d80 	.word	0x00029d80
   1a74c:	20002efc 	.word	0x20002efc
   1a750:	20002f00 	.word	0x20002f00

0001a754 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1a754:	4a05      	ldr	r2, [pc, #20]	; (1a76c <lll_csrand_get+0x18>)
{
   1a756:	b410      	push	{r4}
   1a758:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1a75a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a75c:	6884      	ldr	r4, [r0, #8]
   1a75e:	6824      	ldr	r4, [r4, #0]
   1a760:	b28a      	uxth	r2, r1
   1a762:	4619      	mov	r1, r3
   1a764:	4623      	mov	r3, r4
}
   1a766:	bc10      	pop	{r4}
   1a768:	4718      	bx	r3
   1a76a:	bf00      	nop
   1a76c:	20002efc 	.word	0x20002efc

0001a770 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a770:	4b08      	ldr	r3, [pc, #32]	; (1a794 <lll_csrand_isr_get+0x24>)
{
   1a772:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a774:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a776:	68ab      	ldr	r3, [r5, #8]
   1a778:	685c      	ldr	r4, [r3, #4]
   1a77a:	b13c      	cbz	r4, 1a78c <lll_csrand_isr_get+0x1c>
   1a77c:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a77e:	46a4      	mov	ip, r4
   1a780:	4601      	mov	r1, r0
   1a782:	b292      	uxth	r2, r2
   1a784:	4628      	mov	r0, r5
   1a786:	2300      	movs	r3, #0
}
   1a788:	bc30      	pop	{r4, r5}
   1a78a:	4760      	bx	ip
   1a78c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a790:	bc30      	pop	{r4, r5}
   1a792:	4770      	bx	lr
   1a794:	20002efc 	.word	0x20002efc

0001a798 <lll_reset>:
}
   1a798:	2000      	movs	r0, #0
   1a79a:	4770      	bx	lr

0001a79c <lll_disable>:
{
   1a79c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1a79e:	4604      	mov	r4, r0
{
   1a7a0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1a7a2:	2800      	cmp	r0, #0
   1a7a4:	d032      	beq.n	1a80c <lll_disable+0x70>
   1a7a6:	4b25      	ldr	r3, [pc, #148]	; (1a83c <lll_disable+0xa0>)
   1a7a8:	681a      	ldr	r2, [r3, #0]
   1a7aa:	4282      	cmp	r2, r0
   1a7ac:	d028      	beq.n	1a800 <lll_disable+0x64>
		idx = UINT8_MAX;
   1a7ae:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1a7b0:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1a7b4:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1a7b8:	f7fa fcec 	bl	15194 <ull_prepare_dequeue_iter>
		while (next) {
   1a7bc:	b940      	cbnz	r0, 1a7d0 <lll_disable+0x34>
   1a7be:	e01b      	b.n	1a7f8 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   1a7c0:	68c3      	ldr	r3, [r0, #12]
   1a7c2:	42a3      	cmp	r3, r4
   1a7c4:	d01a      	beq.n	1a7fc <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   1a7c6:	f10d 0007 	add.w	r0, sp, #7
   1a7ca:	f7fa fce3 	bl	15194 <ull_prepare_dequeue_iter>
		while (next) {
   1a7ce:	b198      	cbz	r0, 1a7f8 <lll_disable+0x5c>
			if (!next->is_aborted &&
   1a7d0:	7f03      	ldrb	r3, [r0, #28]
   1a7d2:	079b      	lsls	r3, r3, #30
   1a7d4:	d4f7      	bmi.n	1a7c6 <lll_disable+0x2a>
   1a7d6:	2c00      	cmp	r4, #0
   1a7d8:	d1f2      	bne.n	1a7c0 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1a7da:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1a7dc:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1a7de:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1a7e0:	f043 0302 	orr.w	r3, r3, #2
   1a7e4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1a7e6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1a7e8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1a7ec:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1a7f0:	f7fa fcd0 	bl	15194 <ull_prepare_dequeue_iter>
		while (next) {
   1a7f4:	2800      	cmp	r0, #0
   1a7f6:	d1eb      	bne.n	1a7d0 <lll_disable+0x34>
}
   1a7f8:	b003      	add	sp, #12
   1a7fa:	bd30      	pop	{r4, r5, pc}
   1a7fc:	4621      	mov	r1, r4
   1a7fe:	e7ed      	b.n	1a7dc <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   1a800:	689b      	ldr	r3, [r3, #8]
   1a802:	b16b      	cbz	r3, 1a820 <lll_disable+0x84>
   1a804:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1a806:	2000      	movs	r0, #0
   1a808:	4798      	blx	r3
   1a80a:	e7d0      	b.n	1a7ae <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1a80c:	4a0b      	ldr	r2, [pc, #44]	; (1a83c <lll_disable+0xa0>)
   1a80e:	6893      	ldr	r3, [r2, #8]
   1a810:	2b00      	cmp	r3, #0
   1a812:	d0cc      	beq.n	1a7ae <lll_disable+0x12>
   1a814:	6811      	ldr	r1, [r2, #0]
   1a816:	2900      	cmp	r1, #0
   1a818:	d0c9      	beq.n	1a7ae <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1a81a:	2000      	movs	r0, #0
   1a81c:	4798      	blx	r3
   1a81e:	e7c6      	b.n	1a7ae <lll_disable+0x12>
			LL_ASSERT(!param);
   1a820:	4a07      	ldr	r2, [pc, #28]	; (1a840 <lll_disable+0xa4>)
   1a822:	4908      	ldr	r1, [pc, #32]	; (1a844 <lll_disable+0xa8>)
   1a824:	4808      	ldr	r0, [pc, #32]	; (1a848 <lll_disable+0xac>)
   1a826:	23fd      	movs	r3, #253	; 0xfd
   1a828:	f007 ff6c 	bl	22704 <printk>
   1a82c:	4040      	eors	r0, r0
   1a82e:	f380 8811 	msr	BASEPRI, r0
   1a832:	f04f 0003 	mov.w	r0, #3
   1a836:	df02      	svc	2
   1a838:	e7b9      	b.n	1a7ae <lll_disable+0x12>
   1a83a:	bf00      	nop
   1a83c:	20002f00 	.word	0x20002f00
   1a840:	00029c80 	.word	0x00029c80
   1a844:	00029d84 	.word	0x00029d84
   1a848:	00029220 	.word	0x00029220

0001a84c <lll_prepare_done>:
}
   1a84c:	2000      	movs	r0, #0
   1a84e:	4770      	bx	lr

0001a850 <lll_done>:
{
   1a850:	b538      	push	{r3, r4, r5, lr}
   1a852:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1a854:	f7fa fc90 	bl	15178 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1a858:	b154      	cbz	r4, 1a870 <lll_done+0x20>
   1a85a:	b310      	cbz	r0, 1a8a2 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1a85c:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1a85e:	2000      	movs	r0, #0
   1a860:	f7fa fcb8 	bl	151d4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1a864:	4620      	mov	r0, r4
   1a866:	f7fa fd19 	bl	1529c <ull_event_done>
	LL_ASSERT(evdone);
   1a86a:	b158      	cbz	r0, 1a884 <lll_done+0x34>
}
   1a86c:	2000      	movs	r0, #0
   1a86e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1a870:	4d1a      	ldr	r5, [pc, #104]	; (1a8dc <lll_done+0x8c>)
   1a872:	68ab      	ldr	r3, [r5, #8]
   1a874:	b31b      	cbz	r3, 1a8be <lll_done+0x6e>
		param = event.curr.param;
   1a876:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1a878:	2300      	movs	r3, #0
   1a87a:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1a87c:	602b      	str	r3, [r5, #0]
		if (param) {
   1a87e:	2c00      	cmp	r4, #0
   1a880:	d1ec      	bne.n	1a85c <lll_done+0xc>
   1a882:	e7ec      	b.n	1a85e <lll_done+0xe>
	LL_ASSERT(evdone);
   1a884:	4a16      	ldr	r2, [pc, #88]	; (1a8e0 <lll_done+0x90>)
   1a886:	4917      	ldr	r1, [pc, #92]	; (1a8e4 <lll_done+0x94>)
   1a888:	4817      	ldr	r0, [pc, #92]	; (1a8e8 <lll_done+0x98>)
   1a88a:	f240 136d 	movw	r3, #365	; 0x16d
   1a88e:	f007 ff39 	bl	22704 <printk>
   1a892:	4040      	eors	r0, r0
   1a894:	f380 8811 	msr	BASEPRI, r0
   1a898:	f04f 0003 	mov.w	r0, #3
   1a89c:	df02      	svc	2
}
   1a89e:	2000      	movs	r0, #0
   1a8a0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1a8a2:	4a0f      	ldr	r2, [pc, #60]	; (1a8e0 <lll_done+0x90>)
   1a8a4:	4911      	ldr	r1, [pc, #68]	; (1a8ec <lll_done+0x9c>)
   1a8a6:	4810      	ldr	r0, [pc, #64]	; (1a8e8 <lll_done+0x98>)
   1a8a8:	f240 1337 	movw	r3, #311	; 0x137
   1a8ac:	f007 ff2a 	bl	22704 <printk>
   1a8b0:	4040      	eors	r0, r0
   1a8b2:	f380 8811 	msr	BASEPRI, r0
   1a8b6:	f04f 0003 	mov.w	r0, #3
   1a8ba:	df02      	svc	2
   1a8bc:	e7ce      	b.n	1a85c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1a8be:	4a08      	ldr	r2, [pc, #32]	; (1a8e0 <lll_done+0x90>)
   1a8c0:	490b      	ldr	r1, [pc, #44]	; (1a8f0 <lll_done+0xa0>)
   1a8c2:	4809      	ldr	r0, [pc, #36]	; (1a8e8 <lll_done+0x98>)
   1a8c4:	f240 133d 	movw	r3, #317	; 0x13d
   1a8c8:	f007 ff1c 	bl	22704 <printk>
   1a8cc:	4040      	eors	r0, r0
   1a8ce:	f380 8811 	msr	BASEPRI, r0
   1a8d2:	f04f 0003 	mov.w	r0, #3
   1a8d6:	df02      	svc	2
   1a8d8:	e7cd      	b.n	1a876 <lll_done+0x26>
   1a8da:	bf00      	nop
   1a8dc:	20002f00 	.word	0x20002f00
   1a8e0:	00029c80 	.word	0x00029c80
   1a8e4:	00029db0 	.word	0x00029db0
   1a8e8:	00029220 	.word	0x00029220
   1a8ec:	00029d8c 	.word	0x00029d8c
   1a8f0:	00029d9c 	.word	0x00029d9c

0001a8f4 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1a8f4:	4a05      	ldr	r2, [pc, #20]	; (1a90c <lll_is_done+0x18>)
   1a8f6:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1a8f8:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1a8fa:	1a1b      	subs	r3, r3, r0
   1a8fc:	bf18      	it	ne
   1a8fe:	2301      	movne	r3, #1
}
   1a900:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1a904:	700b      	strb	r3, [r1, #0]
}
   1a906:	0940      	lsrs	r0, r0, #5
   1a908:	4770      	bx	lr
   1a90a:	bf00      	nop
   1a90c:	20002f00 	.word	0x20002f00

0001a910 <lll_is_abort_cb>:
}
   1a910:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1a914:	4770      	bx	lr
   1a916:	bf00      	nop

0001a918 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1a918:	6883      	ldr	r3, [r0, #8]
   1a91a:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   1a91c:	bfb8      	it	lt
   1a91e:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   1a920:	6840      	ldr	r0, [r0, #4]
   1a922:	4298      	cmp	r0, r3
   1a924:	bf38      	it	cc
   1a926:	4618      	movcc	r0, r3
}
   1a928:	4770      	bx	lr
   1a92a:	bf00      	nop

0001a92c <lll_preempt_calc>:
{
   1a92c:	b510      	push	{r4, lr}
   1a92e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1a930:	f7f7 ff86 	bl	12840 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1a934:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1a936:	0203      	lsls	r3, r0, #8
   1a938:	d405      	bmi.n	1a946 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a93a:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1a93c:	2809      	cmp	r0, #9
   1a93e:	bf94      	ite	ls
   1a940:	2000      	movls	r0, #0
   1a942:	2001      	movhi	r0, #1
}
   1a944:	bd10      	pop	{r4, pc}
		return 0;
   1a946:	2000      	movs	r0, #0
}
   1a948:	bd10      	pop	{r4, pc}
   1a94a:	bf00      	nop

0001a94c <lll_chan_set>:
	switch (chan) {
   1a94c:	2826      	cmp	r0, #38	; 0x26
{
   1a94e:	b510      	push	{r4, lr}
   1a950:	4604      	mov	r4, r0
	switch (chan) {
   1a952:	d01c      	beq.n	1a98e <lll_chan_set+0x42>
   1a954:	2827      	cmp	r0, #39	; 0x27
   1a956:	d012      	beq.n	1a97e <lll_chan_set+0x32>
   1a958:	2825      	cmp	r0, #37	; 0x25
   1a95a:	d008      	beq.n	1a96e <lll_chan_set+0x22>
		if (chan < 11) {
   1a95c:	280a      	cmp	r0, #10
   1a95e:	d91e      	bls.n	1a99e <lll_chan_set+0x52>
		} else if (chan < 40) {
   1a960:	2827      	cmp	r0, #39	; 0x27
   1a962:	d821      	bhi.n	1a9a8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a964:	3003      	adds	r0, #3
   1a966:	0040      	lsls	r0, r0, #1
   1a968:	f001 fc26 	bl	1c1b8 <radio_freq_chan_set>
   1a96c:	e002      	b.n	1a974 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a96e:	2002      	movs	r0, #2
   1a970:	f001 fc22 	bl	1c1b8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a974:	4620      	mov	r0, r4
}
   1a976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a97a:	f001 bc23 	b.w	1c1c4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1a97e:	2050      	movs	r0, #80	; 0x50
   1a980:	f001 fc1a 	bl	1c1b8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a984:	4620      	mov	r0, r4
}
   1a986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a98a:	f001 bc1b 	b.w	1c1c4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a98e:	201a      	movs	r0, #26
   1a990:	f001 fc12 	bl	1c1b8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a994:	4620      	mov	r0, r4
}
   1a996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a99a:	f001 bc13 	b.w	1c1c4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1a99e:	3002      	adds	r0, #2
   1a9a0:	0040      	lsls	r0, r0, #1
   1a9a2:	f001 fc09 	bl	1c1b8 <radio_freq_chan_set>
   1a9a6:	e7e5      	b.n	1a974 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1a9a8:	4a06      	ldr	r2, [pc, #24]	; (1a9c4 <lll_chan_set+0x78>)
   1a9aa:	4907      	ldr	r1, [pc, #28]	; (1a9c8 <lll_chan_set+0x7c>)
   1a9ac:	4807      	ldr	r0, [pc, #28]	; (1a9cc <lll_chan_set+0x80>)
   1a9ae:	f240 13df 	movw	r3, #479	; 0x1df
   1a9b2:	f007 fea7 	bl	22704 <printk>
   1a9b6:	4040      	eors	r0, r0
   1a9b8:	f380 8811 	msr	BASEPRI, r0
   1a9bc:	f04f 0003 	mov.w	r0, #3
   1a9c0:	df02      	svc	2
   1a9c2:	e7d7      	b.n	1a974 <lll_chan_set+0x28>
   1a9c4:	00029c80 	.word	0x00029c80
   1a9c8:	000292b8 	.word	0x000292b8
   1a9cc:	00029220 	.word	0x00029220

0001a9d0 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1a9d0:	f001 bc56 	b.w	1c280 <radio_tx_ready_delay_get>

0001a9d4 <lll_isr_tx_status_reset>:
{
   1a9d4:	b508      	push	{r3, lr}
	radio_status_reset();
   1a9d6:	f001 fc7b 	bl	1c2d0 <radio_status_reset>
}
   1a9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1a9de:	f001 bddb 	b.w	1c598 <radio_tmr_status_reset>
   1a9e2:	bf00      	nop

0001a9e4 <lll_isr_rx_status_reset>:
{
   1a9e4:	b508      	push	{r3, lr}
	radio_status_reset();
   1a9e6:	f001 fc73 	bl	1c2d0 <radio_status_reset>
	radio_tmr_status_reset();
   1a9ea:	f001 fdd5 	bl	1c598 <radio_tmr_status_reset>
}
   1a9ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a9f2:	f001 bd7d 	b.w	1c4f0 <radio_rssi_status_reset>
   1a9f6:	bf00      	nop

0001a9f8 <lll_isr_status_reset>:
{
   1a9f8:	b508      	push	{r3, lr}
	radio_status_reset();
   1a9fa:	f001 fc69 	bl	1c2d0 <radio_status_reset>
	radio_tmr_status_reset();
   1a9fe:	f001 fdcb 	bl	1c598 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aa02:	f001 fdb1 	bl	1c568 <radio_filter_status_reset>
	radio_ar_status_reset();
   1aa06:	f001 ffa9 	bl	1c95c <radio_ar_status_reset>
}
   1aa0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1aa0e:	f001 bd6f 	b.w	1c4f0 <radio_rssi_status_reset>
   1aa12:	bf00      	nop

0001aa14 <lll_isr_cleanup>:
{
   1aa14:	b508      	push	{r3, lr}
   1aa16:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1aa18:	4815      	ldr	r0, [pc, #84]	; (1aa70 <lll_isr_cleanup+0x5c>)
   1aa1a:	f001 fb51 	bl	1c0c0 <radio_isr_set>
	if (!radio_is_idle()) {
   1aa1e:	f001 fc77 	bl	1c310 <radio_is_idle>
   1aa22:	b150      	cbz	r0, 1aa3a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1aa24:	f001 fe8e 	bl	1c744 <radio_tmr_stop>
	err = lll_hfclock_off();
   1aa28:	f000 f9a4 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aa2c:	2800      	cmp	r0, #0
   1aa2e:	db0c      	blt.n	1aa4a <lll_isr_cleanup+0x36>
}
   1aa30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aa34:	2000      	movs	r0, #0
   1aa36:	f7ff bf0b 	b.w	1a850 <lll_done>
		radio_disable();
   1aa3a:	f001 fc35 	bl	1c2a8 <radio_disable>
	radio_tmr_stop();
   1aa3e:	f001 fe81 	bl	1c744 <radio_tmr_stop>
	err = lll_hfclock_off();
   1aa42:	f000 f997 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aa46:	2800      	cmp	r0, #0
   1aa48:	daf2      	bge.n	1aa30 <lll_isr_cleanup+0x1c>
   1aa4a:	4a0a      	ldr	r2, [pc, #40]	; (1aa74 <lll_isr_cleanup+0x60>)
   1aa4c:	490a      	ldr	r1, [pc, #40]	; (1aa78 <lll_isr_cleanup+0x64>)
   1aa4e:	480b      	ldr	r0, [pc, #44]	; (1aa7c <lll_isr_cleanup+0x68>)
   1aa50:	f240 2342 	movw	r3, #578	; 0x242
   1aa54:	f007 fe56 	bl	22704 <printk>
   1aa58:	4040      	eors	r0, r0
   1aa5a:	f380 8811 	msr	BASEPRI, r0
   1aa5e:	f04f 0003 	mov.w	r0, #3
   1aa62:	df02      	svc	2
	lll_done(NULL);
   1aa64:	2000      	movs	r0, #0
}
   1aa66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aa6a:	f7ff bef1 	b.w	1a850 <lll_done>
   1aa6e:	bf00      	nop
   1aa70:	0001a3cd 	.word	0x0001a3cd
   1aa74:	00029c80 	.word	0x00029c80
   1aa78:	00029db8 	.word	0x00029db8
   1aa7c:	00029220 	.word	0x00029220

0001aa80 <lll_isr_abort>:
{
   1aa80:	b510      	push	{r4, lr}
   1aa82:	4604      	mov	r4, r0
	radio_status_reset();
   1aa84:	f001 fc24 	bl	1c2d0 <radio_status_reset>
	radio_tmr_status_reset();
   1aa88:	f001 fd86 	bl	1c598 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aa8c:	f001 fd6c 	bl	1c568 <radio_filter_status_reset>
	radio_ar_status_reset();
   1aa90:	f001 ff64 	bl	1c95c <radio_ar_status_reset>
	radio_rssi_status_reset();
   1aa94:	f001 fd2c 	bl	1c4f0 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1aa98:	4620      	mov	r0, r4
}
   1aa9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1aa9e:	f7ff bfb9 	b.w	1aa14 <lll_isr_cleanup>
   1aaa2:	bf00      	nop

0001aaa4 <lll_isr_early_abort>:
{
   1aaa4:	b508      	push	{r3, lr}
   1aaa6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1aaa8:	4813      	ldr	r0, [pc, #76]	; (1aaf8 <lll_isr_early_abort+0x54>)
   1aaaa:	f001 fb09 	bl	1c0c0 <radio_isr_set>
	if (!radio_is_idle()) {
   1aaae:	f001 fc2f 	bl	1c310 <radio_is_idle>
   1aab2:	b140      	cbz	r0, 1aac6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1aab4:	f000 f95e 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aab8:	2800      	cmp	r0, #0
   1aaba:	db0a      	blt.n	1aad2 <lll_isr_early_abort+0x2e>
}
   1aabc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aac0:	2000      	movs	r0, #0
   1aac2:	f7ff bec5 	b.w	1a850 <lll_done>
		radio_disable();
   1aac6:	f001 fbef 	bl	1c2a8 <radio_disable>
	err = lll_hfclock_off();
   1aaca:	f000 f953 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aace:	2800      	cmp	r0, #0
   1aad0:	daf4      	bge.n	1aabc <lll_isr_early_abort+0x18>
   1aad2:	4a0a      	ldr	r2, [pc, #40]	; (1aafc <lll_isr_early_abort+0x58>)
   1aad4:	490a      	ldr	r1, [pc, #40]	; (1ab00 <lll_isr_early_abort+0x5c>)
   1aad6:	480b      	ldr	r0, [pc, #44]	; (1ab04 <lll_isr_early_abort+0x60>)
   1aad8:	f240 2351 	movw	r3, #593	; 0x251
   1aadc:	f007 fe12 	bl	22704 <printk>
   1aae0:	4040      	eors	r0, r0
   1aae2:	f380 8811 	msr	BASEPRI, r0
   1aae6:	f04f 0003 	mov.w	r0, #3
   1aaea:	df02      	svc	2
	lll_done(NULL);
   1aaec:	2000      	movs	r0, #0
}
   1aaee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aaf2:	f7ff bead 	b.w	1a850 <lll_done>
   1aaf6:	bf00      	nop
   1aaf8:	0001a3cd 	.word	0x0001a3cd
   1aafc:	00029c80 	.word	0x00029c80
   1ab00:	00029db8 	.word	0x00029db8
   1ab04:	00029220 	.word	0x00029220

0001ab08 <lll_prepare_resolve>:
{
   1ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab0c:	b084      	sub	sp, #16
   1ab0e:	4606      	mov	r6, r0
   1ab10:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ab12:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1ab16:	23ff      	movs	r3, #255	; 0xff
{
   1ab18:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1ab1c:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1ab20:	460f      	mov	r7, r1
   1ab22:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1ab24:	f7fa fb36 	bl	15194 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ab28:	4604      	mov	r4, r0
   1ab2a:	b920      	cbnz	r0, 1ab36 <lll_prepare_resolve+0x2e>
   1ab2c:	e032      	b.n	1ab94 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1ab2e:	f7fa fb31 	bl	15194 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ab32:	4604      	mov	r4, r0
   1ab34:	b370      	cbz	r0, 1ab94 <lll_prepare_resolve+0x8c>
   1ab36:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1ab3a:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1ab3e:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1ab42:	d1f4      	bne.n	1ab2e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1ab44:	f8df a130 	ldr.w	sl, [pc, #304]	; 1ac78 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1ab48:	f8da 3008 	ldr.w	r3, [sl, #8]
   1ab4c:	bb4b      	cbnz	r3, 1aba2 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1ab4e:	f1b9 0f00 	cmp.w	r9, #0
   1ab52:	d048      	beq.n	1abe6 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ab54:	f8cd 9000 	str.w	r9, [sp]
   1ab58:	4643      	mov	r3, r8
   1ab5a:	462a      	mov	r2, r5
   1ab5c:	4639      	mov	r1, r7
   1ab5e:	4630      	mov	r0, r6
   1ab60:	f7fa fada 	bl	15118 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1ab64:	b980      	cbnz	r0, 1ab88 <lll_prepare_resolve+0x80>
   1ab66:	4a45      	ldr	r2, [pc, #276]	; (1ac7c <lll_prepare_resolve+0x174>)
   1ab68:	4945      	ldr	r1, [pc, #276]	; (1ac80 <lll_prepare_resolve+0x178>)
   1ab6a:	4846      	ldr	r0, [pc, #280]	; (1ac84 <lll_prepare_resolve+0x17c>)
   1ab6c:	f240 238d 	movw	r3, #653	; 0x28d
   1ab70:	f007 fdc8 	bl	22704 <printk>
   1ab74:	4040      	eors	r0, r0
   1ab76:	f380 8811 	msr	BASEPRI, r0
   1ab7a:	f04f 0003 	mov.w	r0, #3
   1ab7e:	df02      	svc	2
   1ab80:	2000      	movs	r0, #0
		if (is_resume) {
   1ab82:	f1b9 0f00 	cmp.w	r9, #0
   1ab86:	d019      	beq.n	1abbc <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1ab88:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1ab8c:	4620      	mov	r0, r4
   1ab8e:	b004      	add	sp, #16
   1ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1ab94:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1ac78 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1ab98:	f8da 3008 	ldr.w	r3, [sl, #8]
   1ab9c:	2b00      	cmp	r3, #0
   1ab9e:	d031      	beq.n	1ac04 <lll_prepare_resolve+0xfc>
   1aba0:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1aba2:	f8cd 9000 	str.w	r9, [sp]
   1aba6:	4643      	mov	r3, r8
   1aba8:	462a      	mov	r2, r5
   1abaa:	4639      	mov	r1, r7
   1abac:	4630      	mov	r0, r6
   1abae:	f7fa fab3 	bl	15118 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1abb2:	2800      	cmp	r0, #0
   1abb4:	d0d7      	beq.n	1ab66 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1abb6:	f1b9 0f00 	cmp.w	r9, #0
   1abba:	d1e5      	bne.n	1ab88 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1abbc:	4601      	mov	r1, r0
   1abbe:	4620      	mov	r0, r4
   1abc0:	f7ff fc86 	bl	1a4d0 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1abc4:	f030 0302 	bics.w	r3, r0, #2
   1abc8:	d0de      	beq.n	1ab88 <lll_prepare_resolve+0x80>
   1abca:	4a2c      	ldr	r2, [pc, #176]	; (1ac7c <lll_prepare_resolve+0x174>)
   1abcc:	492e      	ldr	r1, [pc, #184]	; (1ac88 <lll_prepare_resolve+0x180>)
   1abce:	482d      	ldr	r0, [pc, #180]	; (1ac84 <lll_prepare_resolve+0x17c>)
   1abd0:	f44f 7326 	mov.w	r3, #664	; 0x298
   1abd4:	f007 fd96 	bl	22704 <printk>
   1abd8:	4040      	eors	r0, r0
   1abda:	f380 8811 	msr	BASEPRI, r0
   1abde:	f04f 0003 	mov.w	r0, #3
   1abe2:	df02      	svc	2
   1abe4:	e7d0      	b.n	1ab88 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1abe6:	42ac      	cmp	r4, r5
   1abe8:	d00c      	beq.n	1ac04 <lll_prepare_resolve+0xfc>
   1abea:	4a24      	ldr	r2, [pc, #144]	; (1ac7c <lll_prepare_resolve+0x174>)
   1abec:	4927      	ldr	r1, [pc, #156]	; (1ac8c <lll_prepare_resolve+0x184>)
   1abee:	4825      	ldr	r0, [pc, #148]	; (1ac84 <lll_prepare_resolve+0x17c>)
   1abf0:	f240 23be 	movw	r3, #702	; 0x2be
   1abf4:	f007 fd86 	bl	22704 <printk>
   1abf8:	4040      	eors	r0, r0
   1abfa:	f380 8811 	msr	BASEPRI, r0
   1abfe:	f04f 0003 	mov.w	r0, #3
   1ac02:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1ac04:	68eb      	ldr	r3, [r5, #12]
   1ac06:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1ac0a:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1ac0e:	4628      	mov	r0, r5
   1ac10:	47c0      	blx	r8
   1ac12:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1ac14:	f7ff fc1c 	bl	1a450 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ac18:	f030 0302 	bics.w	r3, r0, #2
   1ac1c:	d11e      	bne.n	1ac5c <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1ac1e:	f10d 000f 	add.w	r0, sp, #15
   1ac22:	f7fa fab7 	bl	15194 <ull_prepare_dequeue_iter>
		if (!p) {
   1ac26:	2800      	cmp	r0, #0
   1ac28:	d0b0      	beq.n	1ab8c <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1ac2a:	7f03      	ldrb	r3, [r0, #28]
   1ac2c:	f013 0303 	ands.w	r3, r3, #3
   1ac30:	d1f5      	bne.n	1ac1e <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1ac32:	4601      	mov	r1, r0
   1ac34:	4618      	mov	r0, r3
   1ac36:	f7ff fc4b 	bl	1a4d0 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ac3a:	f030 0302 	bics.w	r3, r0, #2
   1ac3e:	d0a5      	beq.n	1ab8c <lll_prepare_resolve+0x84>
   1ac40:	4a0e      	ldr	r2, [pc, #56]	; (1ac7c <lll_prepare_resolve+0x174>)
   1ac42:	4911      	ldr	r1, [pc, #68]	; (1ac88 <lll_prepare_resolve+0x180>)
   1ac44:	480f      	ldr	r0, [pc, #60]	; (1ac84 <lll_prepare_resolve+0x17c>)
   1ac46:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1ac4a:	f007 fd5b 	bl	22704 <printk>
   1ac4e:	4040      	eors	r0, r0
   1ac50:	f380 8811 	msr	BASEPRI, r0
   1ac54:	f04f 0003 	mov.w	r0, #3
   1ac58:	df02      	svc	2
   1ac5a:	e797      	b.n	1ab8c <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ac5c:	4a07      	ldr	r2, [pc, #28]	; (1ac7c <lll_prepare_resolve+0x174>)
   1ac5e:	490a      	ldr	r1, [pc, #40]	; (1ac88 <lll_prepare_resolve+0x180>)
   1ac60:	4808      	ldr	r0, [pc, #32]	; (1ac84 <lll_prepare_resolve+0x17c>)
   1ac62:	f240 23cb 	movw	r3, #715	; 0x2cb
   1ac66:	f007 fd4d 	bl	22704 <printk>
   1ac6a:	4040      	eors	r0, r0
   1ac6c:	f380 8811 	msr	BASEPRI, r0
   1ac70:	f04f 0003 	mov.w	r0, #3
   1ac74:	df02      	svc	2
   1ac76:	e7d2      	b.n	1ac1e <lll_prepare_resolve+0x116>
   1ac78:	20002f00 	.word	0x20002f00
   1ac7c:	00029c80 	.word	0x00029c80
   1ac80:	00029dc4 	.word	0x00029dc4
   1ac84:	00029220 	.word	0x00029220
   1ac88:	00029d50 	.word	0x00029d50
   1ac8c:	00029dcc 	.word	0x00029dcc

0001ac90 <clock_ready>:
	z_impl_k_sem_give(sem);
   1ac90:	f101 0010 	add.w	r0, r1, #16
   1ac94:	f006 bcb0 	b.w	215f8 <z_impl_k_sem_give>

0001ac98 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1ac98:	b570      	push	{r4, r5, r6, lr}
   1ac9a:	4605      	mov	r5, r0
   1ac9c:	b08a      	sub	sp, #40	; 0x28
   1ac9e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1aca0:	2201      	movs	r2, #1
   1aca2:	2100      	movs	r1, #0
   1aca4:	a804      	add	r0, sp, #16
   1aca6:	f00d f868 	bl	27d7a <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1acaa:	4b0f      	ldr	r3, [pc, #60]	; (1ace8 <blocking_on+0x50>)
   1acac:	9301      	str	r3, [sp, #4]
   1acae:	2600      	movs	r6, #0
   1acb0:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1acb2:	4669      	mov	r1, sp
   1acb4:	4628      	mov	r0, r5
   1acb6:	9603      	str	r6, [sp, #12]
   1acb8:	9302      	str	r3, [sp, #8]
   1acba:	f007 fdb9 	bl	22830 <onoff_request>
	if (err < 0) {
   1acbe:	2800      	cmp	r0, #0
   1acc0:	db10      	blt.n	1ace4 <blocking_on+0x4c>
   1acc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1acc6:	4631      	mov	r1, r6
   1acc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1accc:	fbe4 0103 	umlal	r0, r1, r4, r3
   1acd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1acd4:	2300      	movs	r3, #0
   1acd6:	f7e6 fa13 	bl	1100 <__aeabi_uldivmod>
   1acda:	4602      	mov	r2, r0
   1acdc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1acde:	a804      	add	r0, sp, #16
   1ace0:	f006 fcb0 	bl	21644 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1ace4:	b00a      	add	sp, #40	; 0x28
   1ace6:	bd70      	pop	{r4, r5, r6, pc}
   1ace8:	0001ac91 	.word	0x0001ac91

0001acec <lll_clock_init>:

int lll_clock_init(void)
{
   1acec:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1acee:	2001      	movs	r0, #1
   1acf0:	f003 f972 	bl	1dfd8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1acf4:	4904      	ldr	r1, [pc, #16]	; (1ad08 <lll_clock_init+0x1c>)
   1acf6:	2300      	movs	r3, #0
   1acf8:	2401      	movs	r4, #1
   1acfa:	608c      	str	r4, [r1, #8]
   1acfc:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1acfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad02:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1ad04:	f007 bd94 	b.w	22830 <onoff_request>
   1ad08:	20002f1c 	.word	0x20002f1c

0001ad0c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1ad0c:	4b0c      	ldr	r3, [pc, #48]	; (1ad40 <lll_clock_wait+0x34>)
   1ad0e:	781a      	ldrb	r2, [r3, #0]
   1ad10:	b10a      	cbz	r2, 1ad16 <lll_clock_wait+0xa>
		return 0;
   1ad12:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1ad14:	4770      	bx	lr
{
   1ad16:	b510      	push	{r4, lr}
	done = true;
   1ad18:	2001      	movs	r0, #1
   1ad1a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1ad1c:	f003 f95c 	bl	1dfd8 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1ad20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1ad24:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1ad26:	f7ff ffb7 	bl	1ac98 <blocking_on>
	if (err) {
   1ad2a:	b938      	cbnz	r0, 1ad3c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1ad2c:	4620      	mov	r0, r4
   1ad2e:	f007 fdc8 	bl	228c2 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1ad32:	2802      	cmp	r0, #2
		return 0;
   1ad34:	bf0c      	ite	eq
   1ad36:	2000      	moveq	r0, #0
		return -EIO;
   1ad38:	f06f 0004 	mvnne.w	r0, #4
}
   1ad3c:	bd10      	pop	{r4, pc}
   1ad3e:	bf00      	nop
   1ad40:	20003f47 	.word	0x20003f47

0001ad44 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1ad44:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ad46:	4b0a      	ldr	r3, [pc, #40]	; (1ad70 <lll_hfclock_on+0x2c>)
   1ad48:	f3bf 8f5b 	dmb	ish
   1ad4c:	e853 2f00 	ldrex	r2, [r3]
   1ad50:	1c51      	adds	r1, r2, #1
   1ad52:	e843 1000 	strex	r0, r1, [r3]
   1ad56:	2800      	cmp	r0, #0
   1ad58:	d1f8      	bne.n	1ad4c <lll_hfclock_on+0x8>
   1ad5a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1ad5e:	2a00      	cmp	r2, #0
   1ad60:	dd01      	ble.n	1ad66 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1ad62:	2000      	movs	r0, #0
   1ad64:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1ad66:	f003 f93f 	bl	1dfe8 <z_nrf_clock_bt_ctlr_hf_request>
}
   1ad6a:	2000      	movs	r0, #0
   1ad6c:	bd08      	pop	{r3, pc}
   1ad6e:	bf00      	nop
   1ad70:	20002f18 	.word	0x20002f18

0001ad74 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1ad74:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1ad76:	4b0d      	ldr	r3, [pc, #52]	; (1adac <lll_hfclock_off+0x38>)
   1ad78:	681a      	ldr	r2, [r3, #0]
   1ad7a:	2a00      	cmp	r2, #0
   1ad7c:	dd12      	ble.n	1ada4 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ad7e:	f3bf 8f5b 	dmb	ish
   1ad82:	e853 2f00 	ldrex	r2, [r3]
   1ad86:	1e51      	subs	r1, r2, #1
   1ad88:	e843 1000 	strex	r0, r1, [r3]
   1ad8c:	2800      	cmp	r0, #0
   1ad8e:	d1f8      	bne.n	1ad82 <lll_hfclock_off+0xe>
   1ad90:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1ad94:	2a01      	cmp	r2, #1
   1ad96:	dd01      	ble.n	1ad9c <lll_hfclock_off+0x28>
		return 0;
   1ad98:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1ad9a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1ad9c:	f003 f93a 	bl	1e014 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1ada0:	2000      	movs	r0, #0
}
   1ada2:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1ada4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1ada8:	bd08      	pop	{r3, pc}
   1adaa:	bf00      	nop
   1adac:	20002f18 	.word	0x20002f18

0001adb0 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1adb0:	2005      	movs	r0, #5
   1adb2:	4770      	bx	lr

0001adb4 <common_prepare_cb>:
{
   1adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1adb8:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1adba:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1adbe:	2b00      	cmp	r3, #0
{
   1adc0:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1adc2:	f2c0 810e 	blt.w	1afe2 <common_prepare_cb+0x22e>
   1adc6:	6863      	ldr	r3, [r4, #4]
   1adc8:	4605      	mov	r5, r0
   1adca:	460f      	mov	r7, r1
   1adcc:	2b00      	cmp	r3, #0
   1adce:	f040 80fd 	bne.w	1afcc <common_prepare_cb+0x218>
	lll->state = 0U;
   1add2:	7da3      	ldrb	r3, [r4, #22]
   1add4:	f36f 0300 	bfc	r3, #0, #1
   1add8:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1adda:	f001 f9b3 	bl	1c144 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1adde:	2008      	movs	r0, #8
   1ade0:	f001 f9e4 	bl	1c1ac <radio_tx_power_set>
	radio_phy_set(0, 0);
   1ade4:	2100      	movs	r1, #0
   1ade6:	4608      	mov	r0, r1
   1ade8:	f001 f9d0 	bl	1c18c <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1adec:	2200      	movs	r2, #0
   1adee:	2125      	movs	r1, #37	; 0x25
   1adf0:	2008      	movs	r0, #8
   1adf2:	f001 fa11 	bl	1c218 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1adf6:	2001      	movs	r0, #1
   1adf8:	f7fa f942 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1adfc:	4606      	mov	r6, r0
   1adfe:	2800      	cmp	r0, #0
   1ae00:	f000 80d6 	beq.w	1afb0 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1ae04:	f106 001c 	add.w	r0, r6, #28
   1ae08:	f001 fa2e 	bl	1c268 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1ae0c:	4b7a      	ldr	r3, [pc, #488]	; (1aff8 <common_prepare_cb+0x244>)
   1ae0e:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1ae10:	a80b      	add	r0, sp, #44	; 0x2c
   1ae12:	f001 f9e9 	bl	1c1e8 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1ae16:	4979      	ldr	r1, [pc, #484]	; (1affc <common_prepare_cb+0x248>)
   1ae18:	f240 605b 	movw	r0, #1627	; 0x65b
   1ae1c:	f001 fa82 	bl	1c324 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1ae20:	7da0      	ldrb	r0, [r4, #22]
   1ae22:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1ae26:	3025      	adds	r0, #37	; 0x25
   1ae28:	f7ff fd90 	bl	1a94c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1ae2c:	4874      	ldr	r0, [pc, #464]	; (1b000 <common_prepare_cb+0x24c>)
   1ae2e:	4621      	mov	r1, r4
   1ae30:	f001 f946 	bl	1c0c0 <radio_isr_set>
	} else if (lll->type ||
   1ae34:	7da3      	ldrb	r3, [r4, #22]
   1ae36:	069b      	lsls	r3, r3, #26
   1ae38:	d403      	bmi.n	1ae42 <common_prepare_cb+0x8e>
		   lll->conn) {
   1ae3a:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1ae3c:	2b00      	cmp	r3, #0
   1ae3e:	f000 8091 	beq.w	1af64 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ae42:	2096      	movs	r0, #150	; 0x96
   1ae44:	f001 fbb8 	bl	1c5b8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1ae48:	2300      	movs	r3, #0
   1ae4a:	461a      	mov	r2, r3
   1ae4c:	4619      	mov	r1, r3
   1ae4e:	4618      	mov	r0, r3
   1ae50:	f001 face 	bl	1c3f0 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1ae54:	f7ff fa0a 	bl	1a26c <ull_filter_lll_rl_enabled>
   1ae58:	2800      	cmp	r0, #0
   1ae5a:	d135      	bne.n	1aec8 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1ae5c:	7da3      	ldrb	r3, [r4, #22]
   1ae5e:	f013 0f18 	tst.w	r3, #24
   1ae62:	d152      	bne.n	1af0a <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1ae64:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1ae68:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1ae6a:	4640      	mov	r0, r8
   1ae6c:	f7ff fd54 	bl	1a918 <lll_event_offset_get>
   1ae70:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1ae72:	686a      	ldr	r2, [r5, #4]
   1ae74:	f106 0109 	add.w	r1, r6, #9
   1ae78:	2000      	movs	r0, #0
   1ae7a:	f001 fba9 	bl	1c5d0 <radio_tmr_start>
	radio_tmr_end_capture();
   1ae7e:	f001 fc8d 	bl	1c79c <radio_tmr_end_capture>
	radio_rssi_measure();
   1ae82:	f001 fb25 	bl	1c4d0 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1ae86:	4620      	mov	r0, r4
   1ae88:	f7fa fd18 	bl	158bc <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1ae8c:	1c81      	adds	r1, r0, #2
   1ae8e:	b2c9      	uxtb	r1, r1
   1ae90:	4640      	mov	r0, r8
   1ae92:	4632      	mov	r2, r6
   1ae94:	f7ff fd4a 	bl	1a92c <lll_preempt_calc>
   1ae98:	bb68      	cbnz	r0, 1aef6 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1ae9a:	b917      	cbnz	r7, 1aea2 <common_prepare_cb+0xee>
   1ae9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d163      	bne.n	1af6a <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1aea2:	6863      	ldr	r3, [r4, #4]
   1aea4:	b143      	cbz	r3, 1aeb8 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1aea6:	4b57      	ldr	r3, [pc, #348]	; (1b004 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1aea8:	2201      	movs	r2, #1
   1aeaa:	2102      	movs	r1, #2
   1aeac:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1aeae:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1aeb0:	f7f6 f9be 	bl	11230 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d142      	bne.n	1af3e <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1aeb8:	4620      	mov	r0, r4
   1aeba:	f7ff fcc7 	bl	1a84c <lll_prepare_done>
		LL_ASSERT(!ret);
   1aebe:	bb68      	cbnz	r0, 1af1c <common_prepare_cb+0x168>
}
   1aec0:	2000      	movs	r0, #0
   1aec2:	b00c      	add	sp, #48	; 0x30
   1aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1aec8:	7da0      	ldrb	r0, [r4, #22]
   1aeca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1aece:	f7fe fde9 	bl	19aa4 <ull_filter_lll_get>
   1aed2:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1aed4:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1aed8:	f7ff f842 	bl	19f60 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1aedc:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1aede:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1aee0:	1cb2      	adds	r2, r6, #2
   1aee2:	7830      	ldrb	r0, [r6, #0]
   1aee4:	f001 fb16 	bl	1c514 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1aee8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1aeec:	2200      	movs	r2, #0
   1aeee:	4641      	mov	r1, r8
   1aef0:	f001 fcfa 	bl	1c8e8 <radio_ar_configure>
   1aef4:	e7b6      	b.n	1ae64 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1aef6:	4844      	ldr	r0, [pc, #272]	; (1b008 <common_prepare_cb+0x254>)
   1aef8:	4621      	mov	r1, r4
   1aefa:	f001 f8e1 	bl	1c0c0 <radio_isr_set>
		radio_disable();
   1aefe:	f001 f9d3 	bl	1c2a8 <radio_disable>
}
   1af02:	2000      	movs	r0, #0
   1af04:	b00c      	add	sp, #48	; 0x30
   1af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1af0a:	2001      	movs	r0, #1
   1af0c:	f7fe fdca 	bl	19aa4 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1af10:	7841      	ldrb	r1, [r0, #1]
   1af12:	1c82      	adds	r2, r0, #2
   1af14:	7800      	ldrb	r0, [r0, #0]
   1af16:	f001 fafd 	bl	1c514 <radio_filter_configure>
   1af1a:	e7a3      	b.n	1ae64 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1af1c:	4a3b      	ldr	r2, [pc, #236]	; (1b00c <common_prepare_cb+0x258>)
   1af1e:	493c      	ldr	r1, [pc, #240]	; (1b010 <common_prepare_cb+0x25c>)
   1af20:	483c      	ldr	r0, [pc, #240]	; (1b014 <common_prepare_cb+0x260>)
   1af22:	f44f 7305 	mov.w	r3, #532	; 0x214
   1af26:	f007 fbed 	bl	22704 <printk>
   1af2a:	4040      	eors	r0, r0
   1af2c:	f380 8811 	msr	BASEPRI, r0
   1af30:	f04f 0003 	mov.w	r0, #3
   1af34:	df02      	svc	2
}
   1af36:	2000      	movs	r0, #0
   1af38:	b00c      	add	sp, #48	; 0x30
   1af3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1af3e:	4a33      	ldr	r2, [pc, #204]	; (1b00c <common_prepare_cb+0x258>)
   1af40:	4935      	ldr	r1, [pc, #212]	; (1b018 <common_prepare_cb+0x264>)
   1af42:	4834      	ldr	r0, [pc, #208]	; (1b014 <common_prepare_cb+0x260>)
   1af44:	f240 230f 	movw	r3, #527	; 0x20f
   1af48:	f007 fbdc 	bl	22704 <printk>
   1af4c:	4040      	eors	r0, r0
   1af4e:	f380 8811 	msr	BASEPRI, r0
   1af52:	f04f 0003 	mov.w	r0, #3
   1af56:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1af58:	4620      	mov	r0, r4
   1af5a:	f7ff fc77 	bl	1a84c <lll_prepare_done>
		LL_ASSERT(!ret);
   1af5e:	2800      	cmp	r0, #0
   1af60:	d0ae      	beq.n	1aec0 <common_prepare_cb+0x10c>
   1af62:	e7db      	b.n	1af1c <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1af64:	f001 faa4 	bl	1c4b0 <radio_switch_complete_and_disable>
   1af68:	e774      	b.n	1ae54 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1af6a:	4a2c      	ldr	r2, [pc, #176]	; (1b01c <common_prepare_cb+0x268>)
   1af6c:	9207      	str	r2, [sp, #28]
   1af6e:	4a2c      	ldr	r2, [pc, #176]	; (1b020 <common_prepare_cb+0x26c>)
   1af70:	9205      	str	r2, [sp, #20]
   1af72:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1af76:	9300      	str	r3, [sp, #0]
   1af78:	9208      	str	r2, [sp, #32]
   1af7a:	4633      	mov	r3, r6
   1af7c:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1af80:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1af84:	9406      	str	r4, [sp, #24]
   1af86:	4639      	mov	r1, r7
   1af88:	2201      	movs	r2, #1
   1af8a:	f7f7 fb2f 	bl	125ec <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1af8e:	f030 0302 	bics.w	r3, r0, #2
   1af92:	d086      	beq.n	1aea2 <common_prepare_cb+0xee>
   1af94:	4a1d      	ldr	r2, [pc, #116]	; (1b00c <common_prepare_cb+0x258>)
   1af96:	4923      	ldr	r1, [pc, #140]	; (1b024 <common_prepare_cb+0x270>)
   1af98:	481e      	ldr	r0, [pc, #120]	; (1b014 <common_prepare_cb+0x260>)
   1af9a:	f240 13fb 	movw	r3, #507	; 0x1fb
   1af9e:	f007 fbb1 	bl	22704 <printk>
   1afa2:	4040      	eors	r0, r0
   1afa4:	f380 8811 	msr	BASEPRI, r0
   1afa8:	f04f 0003 	mov.w	r0, #3
   1afac:	df02      	svc	2
   1afae:	e778      	b.n	1aea2 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1afb0:	4a16      	ldr	r2, [pc, #88]	; (1b00c <common_prepare_cb+0x258>)
   1afb2:	491d      	ldr	r1, [pc, #116]	; (1b028 <common_prepare_cb+0x274>)
   1afb4:	4817      	ldr	r0, [pc, #92]	; (1b014 <common_prepare_cb+0x260>)
   1afb6:	f240 138d 	movw	r3, #397	; 0x18d
   1afba:	f007 fba3 	bl	22704 <printk>
   1afbe:	4040      	eors	r0, r0
   1afc0:	f380 8811 	msr	BASEPRI, r0
   1afc4:	f04f 0003 	mov.w	r0, #3
   1afc8:	df02      	svc	2
   1afca:	e71b      	b.n	1ae04 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1afcc:	6863      	ldr	r3, [r4, #4]
   1afce:	f893 3020 	ldrb.w	r3, [r3, #32]
   1afd2:	07d9      	lsls	r1, r3, #31
   1afd4:	d405      	bmi.n	1afe2 <common_prepare_cb+0x22e>
   1afd6:	6863      	ldr	r3, [r4, #4]
   1afd8:	f893 3020 	ldrb.w	r3, [r3, #32]
   1afdc:	079a      	lsls	r2, r3, #30
   1afde:	f57f aef8 	bpl.w	1add2 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1afe2:	4812      	ldr	r0, [pc, #72]	; (1b02c <common_prepare_cb+0x278>)
   1afe4:	4621      	mov	r1, r4
   1afe6:	f001 f86b 	bl	1c0c0 <radio_isr_set>
		radio_disable();
   1afea:	f001 f95d 	bl	1c2a8 <radio_disable>
}
   1afee:	2000      	movs	r0, #0
   1aff0:	b00c      	add	sp, #48	; 0x30
   1aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aff6:	bf00      	nop
   1aff8:	8e89bed6 	.word	0x8e89bed6
   1affc:	00555555 	.word	0x00555555
   1b000:	00003ff9 	.word	0x00003ff9
   1b004:	200006ac 	.word	0x200006ac
   1b008:	0001b0d9 	.word	0x0001b0d9
   1b00c:	00029e18 	.word	0x00029e18
   1b010:	00029674 	.word	0x00029674
   1b014:	00029220 	.word	0x00029220
   1b018:	0002969c 	.word	0x0002969c
   1b01c:	0001b1fd 	.word	0x0001b1fd
   1b020:	0001b2a5 	.word	0x0001b2a5
   1b024:	00029d50 	.word	0x00029d50
   1b028:	00029e64 	.word	0x00029e64
   1b02c:	0001aaa5 	.word	0x0001aaa5

0001b030 <prepare_cb>:
	return common_prepare_cb(p, false);
   1b030:	2100      	movs	r1, #0
   1b032:	f7ff bebf 	b.w	1adb4 <common_prepare_cb>
   1b036:	bf00      	nop

0001b038 <isr_common_done>:
{
   1b038:	b530      	push	{r4, r5, lr}
   1b03a:	4604      	mov	r4, r0
   1b03c:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1b03e:	f7ff fcdb 	bl	1a9f8 <lll_isr_status_reset>
	lll->state = 0U;
   1b042:	7da3      	ldrb	r3, [r4, #22]
   1b044:	f36f 0300 	bfc	r3, #0, #1
   1b048:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1b04a:	069b      	lsls	r3, r3, #26
   1b04c:	d401      	bmi.n	1b052 <isr_common_done+0x1a>
		   lll->conn) {
   1b04e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1b050:	b3b3      	cbz	r3, 1b0c0 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b052:	2096      	movs	r0, #150	; 0x96
   1b054:	f001 fab0 	bl	1c5b8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1b058:	2300      	movs	r3, #0
   1b05a:	461a      	mov	r2, r3
   1b05c:	4619      	mov	r1, r3
   1b05e:	4618      	mov	r0, r3
   1b060:	f001 f9c6 	bl	1c3f0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b064:	2001      	movs	r0, #1
   1b066:	f7fa f80b 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b06a:	4605      	mov	r5, r0
   1b06c:	b1d0      	cbz	r0, 1b0a4 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1b06e:	f105 001c 	add.w	r0, r5, #28
   1b072:	f001 f8f9 	bl	1c268 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1b076:	f7ff f8f9 	bl	1a26c <ull_filter_lll_rl_enabled>
   1b07a:	b940      	cbnz	r0, 1b08e <isr_common_done+0x56>
	radio_rssi_measure();
   1b07c:	f001 fa28 	bl	1c4d0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b080:	4811      	ldr	r0, [pc, #68]	; (1b0c8 <isr_common_done+0x90>)
   1b082:	4621      	mov	r1, r4
}
   1b084:	b003      	add	sp, #12
   1b086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1b08a:	f001 b819 	b.w	1c0c0 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b08e:	f10d 0007 	add.w	r0, sp, #7
   1b092:	f7fe ff65 	bl	19f60 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b096:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b098:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b09a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b09e:	f001 fc23 	bl	1c8e8 <radio_ar_configure>
   1b0a2:	e7eb      	b.n	1b07c <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1b0a4:	4a09      	ldr	r2, [pc, #36]	; (1b0cc <isr_common_done+0x94>)
   1b0a6:	490a      	ldr	r1, [pc, #40]	; (1b0d0 <isr_common_done+0x98>)
   1b0a8:	480a      	ldr	r0, [pc, #40]	; (1b0d4 <isr_common_done+0x9c>)
   1b0aa:	f44f 7352 	mov.w	r3, #840	; 0x348
   1b0ae:	f007 fb29 	bl	22704 <printk>
   1b0b2:	4040      	eors	r0, r0
   1b0b4:	f380 8811 	msr	BASEPRI, r0
   1b0b8:	f04f 0003 	mov.w	r0, #3
   1b0bc:	df02      	svc	2
   1b0be:	e7d6      	b.n	1b06e <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1b0c0:	f001 f9f6 	bl	1c4b0 <radio_switch_complete_and_disable>
   1b0c4:	e7ce      	b.n	1b064 <isr_common_done+0x2c>
   1b0c6:	bf00      	nop
   1b0c8:	00003ff9 	.word	0x00003ff9
   1b0cc:	00029e18 	.word	0x00029e18
   1b0d0:	00029e64 	.word	0x00029e64
   1b0d4:	00029220 	.word	0x00029220

0001b0d8 <isr_abort>:
{
   1b0d8:	b510      	push	{r4, lr}
   1b0da:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b0dc:	f7ff fc8c 	bl	1a9f8 <lll_isr_status_reset>
	radio_filter_disable();
   1b0e0:	f001 fa38 	bl	1c554 <radio_filter_disable>
	lll_isr_cleanup(param);
   1b0e4:	4620      	mov	r0, r4
}
   1b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b0ea:	f7ff bc93 	b.w	1aa14 <lll_isr_cleanup>
   1b0ee:	bf00      	nop

0001b0f0 <isr_done>:
{
   1b0f0:	b508      	push	{r3, lr}
	isr_common_done(param);
   1b0f2:	f7ff ffa1 	bl	1b038 <isr_common_done>
	radio_rx_enable();
   1b0f6:	f001 f8d1 	bl	1c29c <radio_rx_enable>
}
   1b0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1b0fe:	f001 bb4d 	b.w	1c79c <radio_tmr_end_capture>
   1b102:	bf00      	nop

0001b104 <isr_tx>:
{
   1b104:	b570      	push	{r4, r5, r6, lr}
   1b106:	b082      	sub	sp, #8
   1b108:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1b10a:	f7ff fc63 	bl	1a9d4 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1b10e:	f001 f9cf 	bl	1c4b0 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b112:	2001      	movs	r0, #1
   1b114:	f7f9 ffb4 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b118:	4604      	mov	r4, r0
   1b11a:	2800      	cmp	r0, #0
   1b11c:	d03f      	beq.n	1b19e <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1b11e:	f104 001c 	add.w	r0, r4, #28
   1b122:	f001 f8a1 	bl	1c268 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b126:	f001 f8df 	bl	1c2e8 <radio_is_ready>
   1b12a:	b9e0      	cbnz	r0, 1b166 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1b12c:	f7ff f89e 	bl	1a26c <ull_filter_lll_rl_enabled>
   1b130:	bb50      	cbnz	r0, 1b188 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b132:	f001 fb41 	bl	1c7b8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b136:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b138:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b13a:	4608      	mov	r0, r1
   1b13c:	f001 f8a8 	bl	1c290 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b140:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b142:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b144:	4608      	mov	r0, r1
   1b146:	f001 f8a1 	bl	1c28c <radio_tx_chain_delay_get>
   1b14a:	4434      	add	r4, r6
   1b14c:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b14e:	1a20      	subs	r0, r4, r0
   1b150:	f001 fb04 	bl	1c75c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1b154:	f001 f9bc 	bl	1c4d0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b158:	4818      	ldr	r0, [pc, #96]	; (1b1bc <isr_tx+0xb8>)
   1b15a:	4629      	mov	r1, r5
}
   1b15c:	b002      	add	sp, #8
   1b15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1b162:	f000 bfad 	b.w	1c0c0 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1b166:	4a16      	ldr	r2, [pc, #88]	; (1b1c0 <isr_tx+0xbc>)
   1b168:	4916      	ldr	r1, [pc, #88]	; (1b1c4 <isr_tx+0xc0>)
   1b16a:	4817      	ldr	r0, [pc, #92]	; (1b1c8 <isr_tx+0xc4>)
   1b16c:	f240 3306 	movw	r3, #774	; 0x306
   1b170:	f007 fac8 	bl	22704 <printk>
   1b174:	4040      	eors	r0, r0
   1b176:	f380 8811 	msr	BASEPRI, r0
   1b17a:	f04f 0003 	mov.w	r0, #3
   1b17e:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1b180:	f7ff f874 	bl	1a26c <ull_filter_lll_rl_enabled>
   1b184:	2800      	cmp	r0, #0
   1b186:	d0d4      	beq.n	1b132 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b188:	f10d 0007 	add.w	r0, sp, #7
   1b18c:	f7fe fee8 	bl	19f60 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b190:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b192:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b194:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b198:	f001 fba6 	bl	1c8e8 <radio_ar_configure>
   1b19c:	e7c9      	b.n	1b132 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1b19e:	4a08      	ldr	r2, [pc, #32]	; (1b1c0 <isr_tx+0xbc>)
   1b1a0:	490a      	ldr	r1, [pc, #40]	; (1b1cc <isr_tx+0xc8>)
   1b1a2:	4809      	ldr	r0, [pc, #36]	; (1b1c8 <isr_tx+0xc4>)
   1b1a4:	f240 3302 	movw	r3, #770	; 0x302
   1b1a8:	f007 faac 	bl	22704 <printk>
   1b1ac:	4040      	eors	r0, r0
   1b1ae:	f380 8811 	msr	BASEPRI, r0
   1b1b2:	f04f 0003 	mov.w	r0, #3
   1b1b6:	df02      	svc	2
   1b1b8:	e7b1      	b.n	1b11e <isr_tx+0x1a>
   1b1ba:	bf00      	nop
   1b1bc:	00003ff9 	.word	0x00003ff9
   1b1c0:	00029e18 	.word	0x00029e18
   1b1c4:	00029e6c 	.word	0x00029e6c
   1b1c8:	00029220 	.word	0x00029220
   1b1cc:	00029e64 	.word	0x00029e64

0001b1d0 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1b1d0:	68c3      	ldr	r3, [r0, #12]
{
   1b1d2:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1b1d4:	681e      	ldr	r6, [r3, #0]
{
   1b1d6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1b1d8:	f7f7 fb32 	bl	12840 <ticker_ticks_now_get>
   1b1dc:	4605      	mov	r5, r0
   1b1de:	4630      	mov	r0, r6
   1b1e0:	f7ff fb9a 	bl	1a918 <lll_event_offset_get>
	p->remainder = 0;
   1b1e4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1b1e6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b1e8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b1ec:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1b1ee:	4620      	mov	r0, r4
   1b1f0:	2101      	movs	r1, #1
}
   1b1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1b1f6:	f7ff bddd 	b.w	1adb4 <common_prepare_cb>
   1b1fa:	bf00      	nop

0001b1fc <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b1fc:	b900      	cbnz	r0, 1b200 <ticker_op_start_cb+0x4>
   1b1fe:	4770      	bx	lr
{
   1b200:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b202:	4a07      	ldr	r2, [pc, #28]	; (1b220 <ticker_op_start_cb+0x24>)
   1b204:	4907      	ldr	r1, [pc, #28]	; (1b224 <ticker_op_start_cb+0x28>)
   1b206:	4808      	ldr	r0, [pc, #32]	; (1b228 <ticker_op_start_cb+0x2c>)
   1b208:	f44f 7324 	mov.w	r3, #656	; 0x290
   1b20c:	f007 fa7a 	bl	22704 <printk>
   1b210:	4040      	eors	r0, r0
   1b212:	f380 8811 	msr	BASEPRI, r0
   1b216:	f04f 0003 	mov.w	r0, #3
   1b21a:	df02      	svc	2
}
   1b21c:	bd08      	pop	{r3, pc}
   1b21e:	bf00      	nop
   1b220:	00029e18 	.word	0x00029e18
   1b224:	000297ec 	.word	0x000297ec
   1b228:	00029220 	.word	0x00029220

0001b22c <is_abort_cb>:
	if (next != curr) {
   1b22c:	4281      	cmp	r1, r0
{
   1b22e:	b508      	push	{r3, lr}
	if (next != curr) {
   1b230:	d00d      	beq.n	1b24e <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1b232:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1b234:	b113      	cbz	r3, 1b23c <is_abort_cb+0x10>
			return -ECANCELED;
   1b236:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1b23a:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1b23c:	4b14      	ldr	r3, [pc, #80]	; (1b290 <is_abort_cb+0x64>)
   1b23e:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1b240:	f7ff fd80 	bl	1ad44 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1b244:	2800      	cmp	r0, #0
   1b246:	db12      	blt.n	1b26e <is_abort_cb+0x42>
   1b248:	f06f 000a 	mvn.w	r0, #10
}
   1b24c:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1b24e:	684b      	ldr	r3, [r1, #4]
   1b250:	b123      	cbz	r3, 1b25c <is_abort_cb+0x30>
   1b252:	684b      	ldr	r3, [r1, #4]
   1b254:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b258:	07db      	lsls	r3, r3, #31
   1b25a:	d406      	bmi.n	1b26a <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1b25c:	480d      	ldr	r0, [pc, #52]	; (1b294 <is_abort_cb+0x68>)
   1b25e:	f000 ff2f 	bl	1c0c0 <radio_isr_set>
	radio_disable();
   1b262:	f001 f821 	bl	1c2a8 <radio_disable>
	return 0;
   1b266:	2000      	movs	r0, #0
}
   1b268:	bd08      	pop	{r3, pc}
		return 0;
   1b26a:	2000      	movs	r0, #0
}
   1b26c:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1b26e:	4a0a      	ldr	r2, [pc, #40]	; (1b298 <is_abort_cb+0x6c>)
   1b270:	490a      	ldr	r1, [pc, #40]	; (1b29c <is_abort_cb+0x70>)
   1b272:	480b      	ldr	r0, [pc, #44]	; (1b2a0 <is_abort_cb+0x74>)
   1b274:	f240 2332 	movw	r3, #562	; 0x232
   1b278:	f007 fa44 	bl	22704 <printk>
   1b27c:	4040      	eors	r0, r0
   1b27e:	f380 8811 	msr	BASEPRI, r0
   1b282:	f04f 0003 	mov.w	r0, #3
   1b286:	df02      	svc	2
   1b288:	f06f 000a 	mvn.w	r0, #10
}
   1b28c:	bd08      	pop	{r3, pc}
   1b28e:	bf00      	nop
   1b290:	0001b1d1 	.word	0x0001b1d1
   1b294:	00003f59 	.word	0x00003f59
   1b298:	00029e18 	.word	0x00029e18
   1b29c:	00029db8 	.word	0x00029db8
   1b2a0:	00029220 	.word	0x00029220

0001b2a4 <ticker_stop_cb>:
{
   1b2a4:	b508      	push	{r3, lr}
	mfy.param = param;
   1b2a6:	4b0c      	ldr	r3, [pc, #48]	; (1b2d8 <ticker_stop_cb+0x34>)
{
   1b2a8:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1b2aa:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1b2ac:	2200      	movs	r2, #0
   1b2ae:	4611      	mov	r1, r2
   1b2b0:	2001      	movs	r0, #1
   1b2b2:	f7f5 ffbd 	bl	11230 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1b2b6:	b900      	cbnz	r0, 1b2ba <ticker_stop_cb+0x16>
}
   1b2b8:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1b2ba:	4a08      	ldr	r2, [pc, #32]	; (1b2dc <ticker_stop_cb+0x38>)
   1b2bc:	4908      	ldr	r1, [pc, #32]	; (1b2e0 <ticker_stop_cb+0x3c>)
   1b2be:	4809      	ldr	r0, [pc, #36]	; (1b2e4 <ticker_stop_cb+0x40>)
   1b2c0:	f240 2389 	movw	r3, #649	; 0x289
   1b2c4:	f007 fa1e 	bl	22704 <printk>
   1b2c8:	4040      	eors	r0, r0
   1b2ca:	f380 8811 	msr	BASEPRI, r0
   1b2ce:	f04f 0003 	mov.w	r0, #3
   1b2d2:	df02      	svc	2
}
   1b2d4:	bd08      	pop	{r3, pc}
   1b2d6:	bf00      	nop
   1b2d8:	2000069c 	.word	0x2000069c
   1b2dc:	00029e18 	.word	0x00029e18
   1b2e0:	00029674 	.word	0x00029674
   1b2e4:	00029220 	.word	0x00029220

0001b2e8 <isr_done_cleanup>:
{
   1b2e8:	b530      	push	{r4, r5, lr}
   1b2ea:	4604      	mov	r4, r0
   1b2ec:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1b2ee:	f7ff fb83 	bl	1a9f8 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1b2f2:	f10d 010f 	add.w	r1, sp, #15
   1b2f6:	4620      	mov	r0, r4
   1b2f8:	f7ff fafc 	bl	1a8f4 <lll_is_done>
   1b2fc:	b9c8      	cbnz	r0, 1b332 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1b2fe:	4605      	mov	r5, r0
   1b300:	f001 f928 	bl	1c554 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1b304:	7da2      	ldrb	r2, [r4, #22]
   1b306:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1b30a:	3301      	adds	r3, #1
   1b30c:	f003 0303 	and.w	r3, r3, #3
   1b310:	2b03      	cmp	r3, #3
   1b312:	bf14      	ite	ne
   1b314:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1b318:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1b31c:	2300      	movs	r3, #0
		lll->chan = 0U;
   1b31e:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1b320:	4619      	mov	r1, r3
   1b322:	9300      	str	r3, [sp, #0]
   1b324:	2201      	movs	r2, #1
   1b326:	4618      	mov	r0, r3
   1b328:	f7f7 f9ea 	bl	12700 <ticker_stop>
	lll_isr_cleanup(param);
   1b32c:	4620      	mov	r0, r4
   1b32e:	f7ff fb71 	bl	1aa14 <lll_isr_cleanup>
}
   1b332:	b005      	add	sp, #20
   1b334:	bd30      	pop	{r4, r5, pc}
   1b336:	bf00      	nop

0001b338 <isr_scan_tgta_check>:
{
   1b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b33c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b340:	4616      	mov	r6, r2
   1b342:	4680      	mov	r8, r0
   1b344:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1b346:	464a      	mov	r2, r9
   1b348:	4619      	mov	r1, r3
   1b34a:	4630      	mov	r0, r6
{
   1b34c:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1b34e:	f7fe ff6b 	bl	1a228 <ull_filter_lll_rl_addr_resolve>
   1b352:	4604      	mov	r4, r0
   1b354:	b9a0      	cbnz	r0, 1b380 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1b356:	b11d      	cbz	r5, 1b360 <isr_scan_tgta_check+0x28>
   1b358:	f898 3017 	ldrb.w	r3, [r8, #23]
   1b35c:	079a      	lsls	r2, r3, #30
   1b35e:	d41c      	bmi.n	1b39a <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1b360:	f898 5016 	ldrb.w	r5, [r8, #22]
   1b364:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1b368:	42b3      	cmp	r3, r6
   1b36a:	d00c      	beq.n	1b386 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1b36c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1b370:	07ab      	lsls	r3, r5, #30
   1b372:	d505      	bpl.n	1b380 <isr_scan_tgta_check+0x48>
   1b374:	b126      	cbz	r6, 1b380 <isr_scan_tgta_check+0x48>
   1b376:	797b      	ldrb	r3, [r7, #5]
   1b378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b37c:	2b40      	cmp	r3, #64	; 0x40
   1b37e:	d014      	beq.n	1b3aa <isr_scan_tgta_check+0x72>
}
   1b380:	4620      	mov	r0, r4
   1b382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1b386:	2206      	movs	r2, #6
   1b388:	4639      	mov	r1, r7
   1b38a:	f108 0019 	add.w	r0, r8, #25
   1b38e:	f009 faf5 	bl	2497c <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1b392:	b140      	cbz	r0, 1b3a6 <isr_scan_tgta_check+0x6e>
   1b394:	f898 5016 	ldrb.w	r5, [r8, #22]
   1b398:	e7e8      	b.n	1b36c <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1b39a:	4648      	mov	r0, r9
   1b39c:	f7fe fdc6 	bl	19f2c <ull_filter_lll_lrpa_get>
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	d1ed      	bne.n	1b380 <isr_scan_tgta_check+0x48>
   1b3a4:	e7dc      	b.n	1b360 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1b3a6:	2401      	movs	r4, #1
   1b3a8:	e7ea      	b.n	1b380 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1b3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d0fa      	beq.n	1b3a6 <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1b3b0:	2401      	movs	r4, #1
   1b3b2:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1b3b4:	e7e4      	b.n	1b380 <isr_scan_tgta_check+0x48>
   1b3b6:	bf00      	nop

0001b3b8 <abort_cb>:
{
   1b3b8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b3ba:	b1d8      	cbz	r0, 1b3f4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b3bc:	460c      	mov	r4, r1
   1b3be:	f7ff fcd9 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	db04      	blt.n	1b3d0 <abort_cb+0x18>
	lll_done(param);
   1b3c6:	4620      	mov	r0, r4
}
   1b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b3cc:	f7ff ba40 	b.w	1a850 <lll_done>
	LL_ASSERT(err >= 0);
   1b3d0:	4a0c      	ldr	r2, [pc, #48]	; (1b404 <abort_cb+0x4c>)
   1b3d2:	490d      	ldr	r1, [pc, #52]	; (1b408 <abort_cb+0x50>)
   1b3d4:	480d      	ldr	r0, [pc, #52]	; (1b40c <abort_cb+0x54>)
   1b3d6:	f240 2379 	movw	r3, #633	; 0x279
   1b3da:	f007 f993 	bl	22704 <printk>
   1b3de:	4040      	eors	r0, r0
   1b3e0:	f380 8811 	msr	BASEPRI, r0
   1b3e4:	f04f 0003 	mov.w	r0, #3
   1b3e8:	df02      	svc	2
	lll_done(param);
   1b3ea:	4620      	mov	r0, r4
}
   1b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b3f0:	f7ff ba2e 	b.w	1a850 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1b3f4:	4806      	ldr	r0, [pc, #24]	; (1b410 <abort_cb+0x58>)
   1b3f6:	f000 fe63 	bl	1c0c0 <radio_isr_set>
}
   1b3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1b3fe:	f000 bf53 	b.w	1c2a8 <radio_disable>
   1b402:	bf00      	nop
   1b404:	00029e18 	.word	0x00029e18
   1b408:	00029db8 	.word	0x00029db8
   1b40c:	00029220 	.word	0x00029220
   1b410:	0001b2e9 	.word	0x0001b2e9

0001b414 <lll_scan_init>:
}
   1b414:	2000      	movs	r0, #0
   1b416:	4770      	bx	lr

0001b418 <lll_scan_reset>:
   1b418:	2000      	movs	r0, #0
   1b41a:	4770      	bx	lr

0001b41c <lll_scan_prepare>:
{
   1b41c:	b510      	push	{r4, lr}
   1b41e:	b082      	sub	sp, #8
   1b420:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b422:	f7ff fc8f 	bl	1ad44 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b426:	2800      	cmp	r0, #0
   1b428:	db19      	blt.n	1b45e <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b42a:	4a13      	ldr	r2, [pc, #76]	; (1b478 <lll_scan_prepare+0x5c>)
   1b42c:	4913      	ldr	r1, [pc, #76]	; (1b47c <lll_scan_prepare+0x60>)
   1b42e:	4814      	ldr	r0, [pc, #80]	; (1b480 <lll_scan_prepare+0x64>)
   1b430:	9400      	str	r4, [sp, #0]
   1b432:	2300      	movs	r3, #0
   1b434:	f7fa f922 	bl	1567c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b438:	b108      	cbz	r0, 1b43e <lll_scan_prepare+0x22>
   1b43a:	3077      	adds	r0, #119	; 0x77
   1b43c:	d101      	bne.n	1b442 <lll_scan_prepare+0x26>
}
   1b43e:	b002      	add	sp, #8
   1b440:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b442:	4a10      	ldr	r2, [pc, #64]	; (1b484 <lll_scan_prepare+0x68>)
   1b444:	4910      	ldr	r1, [pc, #64]	; (1b488 <lll_scan_prepare+0x6c>)
   1b446:	4811      	ldr	r0, [pc, #68]	; (1b48c <lll_scan_prepare+0x70>)
   1b448:	238b      	movs	r3, #139	; 0x8b
   1b44a:	f007 f95b 	bl	22704 <printk>
   1b44e:	4040      	eors	r0, r0
   1b450:	f380 8811 	msr	BASEPRI, r0
   1b454:	f04f 0003 	mov.w	r0, #3
   1b458:	df02      	svc	2
}
   1b45a:	b002      	add	sp, #8
   1b45c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b45e:	4a09      	ldr	r2, [pc, #36]	; (1b484 <lll_scan_prepare+0x68>)
   1b460:	490b      	ldr	r1, [pc, #44]	; (1b490 <lll_scan_prepare+0x74>)
   1b462:	480a      	ldr	r0, [pc, #40]	; (1b48c <lll_scan_prepare+0x70>)
   1b464:	2388      	movs	r3, #136	; 0x88
   1b466:	f007 f94d 	bl	22704 <printk>
   1b46a:	4040      	eors	r0, r0
   1b46c:	f380 8811 	msr	BASEPRI, r0
   1b470:	f04f 0003 	mov.w	r0, #3
   1b474:	df02      	svc	2
   1b476:	e7d8      	b.n	1b42a <lll_scan_prepare+0xe>
   1b478:	0001b031 	.word	0x0001b031
   1b47c:	0001b3b9 	.word	0x0001b3b9
   1b480:	0001b22d 	.word	0x0001b22d
   1b484:	00029e18 	.word	0x00029e18
   1b488:	00029e80 	.word	0x00029e80
   1b48c:	00029220 	.word	0x00029220
   1b490:	00029db8 	.word	0x00029db8

0001b494 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1b494:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1b498:	f01c 0f08 	tst.w	ip, #8
   1b49c:	d002      	beq.n	1b4a4 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1b49e:	b162      	cbz	r2, 1b4ba <lll_scan_isr_rx_check+0x26>
{
   1b4a0:	2001      	movs	r0, #1
}
   1b4a2:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1b4a4:	2a00      	cmp	r2, #0
   1b4a6:	d0fb      	beq.n	1b4a0 <lll_scan_isr_rx_check+0xc>
{
   1b4a8:	b510      	push	{r4, lr}
   1b4aa:	4604      	mov	r4, r0
   1b4ac:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1b4ae:	4619      	mov	r1, r3
   1b4b0:	f7fe fe4c 	bl	1a14c <ull_filter_lll_rl_idx_allowed>
   1b4b4:	b120      	cbz	r0, 1b4c0 <lll_scan_isr_rx_check+0x2c>
{
   1b4b6:	2001      	movs	r0, #1
}
   1b4b8:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1b4ba:	4618      	mov	r0, r3
   1b4bc:	f7fe be16 	b.w	1a0ec <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1b4c0:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1b4c2:	071b      	lsls	r3, r3, #28
   1b4c4:	d4f7      	bmi.n	1b4b6 <lll_scan_isr_rx_check+0x22>
}
   1b4c6:	bd10      	pop	{r4, pc}

0001b4c8 <lll_scan_prepare_connect_req>:
{
   1b4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4cc:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   1b4d0:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1b4d2:	01ad      	lsls	r5, r5, #6
   1b4d4:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1b4d8:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   1b4dc:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   1b4e0:	780b      	ldrb	r3, [r1, #0]
   1b4e2:	f003 0310 	and.w	r3, r3, #16
{
   1b4e6:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1b4e8:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1b4ea:	2322      	movs	r3, #34	; 0x22
   1b4ec:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1b4ee:	700d      	strb	r5, [r1, #0]
{
   1b4f0:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1b4f2:	9908      	ldr	r1, [sp, #32]
   1b4f4:	2206      	movs	r2, #6
{
   1b4f6:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   1b4f8:	1ca0      	adds	r0, r4, #2
   1b4fa:	f009 fa50 	bl	2499e <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   1b4fe:	9906      	ldr	r1, [sp, #24]
   1b500:	2206      	movs	r2, #6
   1b502:	f104 0008 	add.w	r0, r4, #8
   1b506:	f009 fa4a 	bl	2499e <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   1b50a:	2204      	movs	r2, #4
   1b50c:	18b1      	adds	r1, r6, r2
   1b50e:	f104 000e 	add.w	r0, r4, #14
   1b512:	f009 fa44 	bl	2499e <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   1b516:	2203      	movs	r2, #3
   1b518:	f106 0108 	add.w	r1, r6, #8
   1b51c:	f104 0012 	add.w	r0, r4, #18
   1b520:	f009 fa3d 	bl	2499e <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   1b524:	2301      	movs	r3, #1
   1b526:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1b528:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1b52a:	f001 f93f 	bl	1c7ac <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1b52e:	f1b8 0f00 	cmp.w	r8, #0
   1b532:	d044      	beq.n	1b5be <lll_scan_prepare_connect_req+0xf6>
   1b534:	f008 0203 	and.w	r2, r8, #3
   1b538:	322b      	adds	r2, #43	; 0x2b
   1b53a:	00d2      	lsls	r2, r2, #3
   1b53c:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1b540:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1b544:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1b546:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1b54a:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1b54c:	b393      	cbz	r3, 1b5b4 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1b54e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1b552:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1b556:	2b00      	cmp	r3, #0
   1b558:	db01      	blt.n	1b55e <lll_scan_prepare_connect_req+0x96>
   1b55a:	4293      	cmp	r3, r2
   1b55c:	d201      	bcs.n	1b562 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   1b55e:	442b      	add	r3, r5
   1b560:	e7f9      	b.n	1b556 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   1b562:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1b564:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1b566:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1b568:	4b16      	ldr	r3, [pc, #88]	; (1b5c4 <lll_scan_prepare_connect_req+0xfc>)
   1b56a:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1b56e:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1b570:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1b572:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1b574:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1b576:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1b578:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1b57a:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1b57c:	8abb      	ldrh	r3, [r7, #20]
   1b57e:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1b580:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1b582:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   1b584:	f106 0118 	add.w	r1, r6, #24
   1b588:	2205      	movs	r2, #5
   1b58a:	f104 001e 	add.w	r0, r4, #30
   1b58e:	f009 fa06 	bl	2499e <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1b592:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b596:	7fb2      	ldrb	r2, [r6, #30]
   1b598:	f362 0304 	bfi	r3, r2, #0, #5
   1b59c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1b5a0:	f7ff fc06 	bl	1adb0 <lll_clock_sca_local_get>
   1b5a4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b5a8:	f360 1347 	bfi	r3, r0, #5, #3
   1b5ac:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1b5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b5b6:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1b5b8:	75a3      	strb	r3, [r4, #22]
   1b5ba:	75e3      	strb	r3, [r4, #23]
   1b5bc:	e7dc      	b.n	1b578 <lll_scan_prepare_connect_req+0xb0>
   1b5be:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1b5c2:	e7bf      	b.n	1b544 <lll_scan_prepare_connect_req+0x7c>
   1b5c4:	d1b71759 	.word	0xd1b71759

0001b5c8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1b5c8:	b538      	push	{r3, r4, r5, lr}
   1b5ca:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1b5cc:	f7ff fa14 	bl	1a9f8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1b5d0:	f7f9 fe54 	bl	1527c <ull_event_done_extra_get>
	LL_ASSERT(e);
   1b5d4:	4604      	mov	r4, r0
   1b5d6:	b190      	cbz	r0, 1b5fe <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1b5d8:	4910      	ldr	r1, [pc, #64]	; (1b61c <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1b5da:	4a11      	ldr	r2, [pc, #68]	; (1b620 <isr_done+0x58>)
	e->crc_valid = crc_valid;
   1b5dc:	7923      	ldrb	r3, [r4, #4]
   1b5de:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1b5e0:	8812      	ldrh	r2, [r2, #0]
   1b5e2:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1b5e4:	4a0f      	ldr	r2, [pc, #60]	; (1b624 <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   1b5e6:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b5ea:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   1b5ec:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b5ee:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1b5f0:	7813      	ldrb	r3, [r2, #0]
   1b5f2:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1b5f4:	4628      	mov	r0, r5
}
   1b5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1b5fa:	f7ff ba0b 	b.w	1aa14 <lll_isr_cleanup>
	LL_ASSERT(e);
   1b5fe:	4a0a      	ldr	r2, [pc, #40]	; (1b628 <isr_done+0x60>)
   1b600:	490a      	ldr	r1, [pc, #40]	; (1b62c <isr_done+0x64>)
   1b602:	480b      	ldr	r0, [pc, #44]	; (1b630 <isr_done+0x68>)
   1b604:	f240 3317 	movw	r3, #791	; 0x317
   1b608:	f007 f87c 	bl	22704 <printk>
   1b60c:	4040      	eors	r0, r0
   1b60e:	f380 8811 	msr	BASEPRI, r0
   1b612:	f04f 0003 	mov.w	r0, #3
   1b616:	df02      	svc	2
   1b618:	e7de      	b.n	1b5d8 <isr_done+0x10>
   1b61a:	bf00      	nop
   1b61c:	20003f49 	.word	0x20003f49
   1b620:	20003dde 	.word	0x20003dde
   1b624:	20003f4a 	.word	0x20003f4a
   1b628:	00029ea8 	.word	0x00029ea8
   1b62c:	00029ef4 	.word	0x00029ef4
   1b630:	00029220 	.word	0x00029220

0001b634 <lll_conn_init>:
{
   1b634:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1b636:	f000 fe8b 	bl	1c350 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b63a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1b63c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b63e:	2101      	movs	r1, #1
   1b640:	f361 0201 	bfi	r2, r1, #0, #2
}
   1b644:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b646:	701a      	strb	r2, [r3, #0]
}
   1b648:	bd08      	pop	{r3, pc}
   1b64a:	bf00      	nop

0001b64c <lll_conn_reset>:
}
   1b64c:	2000      	movs	r0, #0
   1b64e:	4770      	bx	lr

0001b650 <lll_conn_flush>:
}
   1b650:	4770      	bx	lr
   1b652:	bf00      	nop

0001b654 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1b654:	4805      	ldr	r0, [pc, #20]	; (1b66c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1b656:	4906      	ldr	r1, [pc, #24]	; (1b670 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1b658:	4a06      	ldr	r2, [pc, #24]	; (1b674 <lll_conn_prepare_reset+0x20>)
{
   1b65a:	b410      	push	{r4}
	trx_cnt = 0U;
   1b65c:	2300      	movs	r3, #0
   1b65e:	4c06      	ldr	r4, [pc, #24]	; (1b678 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1b660:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1b662:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1b664:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1b666:	8023      	strh	r3, [r4, #0]
}
   1b668:	bc10      	pop	{r4}
   1b66a:	4770      	bx	lr
   1b66c:	20003f49 	.word	0x20003f49
   1b670:	20003f48 	.word	0x20003f48
   1b674:	20003f4a 	.word	0x20003f4a
   1b678:	20003dde 	.word	0x20003dde

0001b67c <lll_conn_abort_cb>:
{
   1b67c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1b67e:	b1e8      	cbz	r0, 1b6bc <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1b680:	460d      	mov	r5, r1
   1b682:	4604      	mov	r4, r0
   1b684:	f7ff fb76 	bl	1ad74 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b688:	2800      	cmp	r0, #0
   1b68a:	db0a      	blt.n	1b6a2 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1b68c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1b68e:	8923      	ldrh	r3, [r4, #8]
   1b690:	8a51      	ldrh	r1, [r2, #18]
   1b692:	3301      	adds	r3, #1
   1b694:	440b      	add	r3, r1
   1b696:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1b698:	4628      	mov	r0, r5
}
   1b69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1b69e:	f7ff b8d7 	b.w	1a850 <lll_done>
	LL_ASSERT(err >= 0);
   1b6a2:	4a0a      	ldr	r2, [pc, #40]	; (1b6cc <lll_conn_abort_cb+0x50>)
   1b6a4:	490a      	ldr	r1, [pc, #40]	; (1b6d0 <lll_conn_abort_cb+0x54>)
   1b6a6:	480b      	ldr	r0, [pc, #44]	; (1b6d4 <lll_conn_abort_cb+0x58>)
   1b6a8:	23aa      	movs	r3, #170	; 0xaa
   1b6aa:	f007 f82b 	bl	22704 <printk>
   1b6ae:	4040      	eors	r0, r0
   1b6b0:	f380 8811 	msr	BASEPRI, r0
   1b6b4:	f04f 0003 	mov.w	r0, #3
   1b6b8:	df02      	svc	2
   1b6ba:	e7e7      	b.n	1b68c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1b6bc:	4806      	ldr	r0, [pc, #24]	; (1b6d8 <lll_conn_abort_cb+0x5c>)
   1b6be:	f000 fcff 	bl	1c0c0 <radio_isr_set>
}
   1b6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1b6c6:	f000 bdef 	b.w	1c2a8 <radio_disable>
   1b6ca:	bf00      	nop
   1b6cc:	00029ea8 	.word	0x00029ea8
   1b6d0:	00029db8 	.word	0x00029db8
   1b6d4:	00029220 	.word	0x00029220
   1b6d8:	0001b5c9 	.word	0x0001b5c9

0001b6dc <lll_conn_rx_pkt_set>:
{
   1b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6de:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b6e0:	2001      	movs	r0, #1
   1b6e2:	f7f9 fccd 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b6e6:	4606      	mov	r6, r0
   1b6e8:	b360      	cbz	r0, 1b744 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   1b6ea:	f895 402b 	ldrb.w	r4, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   1b6ee:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   1b6f0:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1b6f4:	2100      	movs	r1, #0
   1b6f6:	4620      	mov	r0, r4
   1b6f8:	f000 fd48 	bl	1c18c <radio_phy_set>
	} else if (lll->enc_rx) {
   1b6fc:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
   1b700:	071b      	lsls	r3, r3, #28
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1b702:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1b706:	d511      	bpl.n	1b72c <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1b708:	1d39      	adds	r1, r7, #4
   1b70a:	f042 0201 	orr.w	r2, r2, #1
   1b70e:	b2c9      	uxtb	r1, r1
   1b710:	2008      	movs	r0, #8
   1b712:	f000 fd81 	bl	1c218 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b716:	f106 021c 	add.w	r2, r6, #28
   1b71a:	4621      	mov	r1, r4
   1b71c:	f105 0043 	add.w	r0, r5, #67	; 0x43
   1b720:	f001 f850 	bl	1c7c4 <radio_ccm_rx_pkt_set>
}
   1b724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b728:	f000 bd9e 	b.w	1c268 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1b72c:	2008      	movs	r0, #8
   1b72e:	b2f9      	uxtb	r1, r7
   1b730:	f042 0201 	orr.w	r2, r2, #1
   1b734:	f000 fd70 	bl	1c218 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1b738:	f106 001c 	add.w	r0, r6, #28
}
   1b73c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1b740:	f000 bd92 	b.w	1c268 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1b744:	4a06      	ldr	r2, [pc, #24]	; (1b760 <lll_conn_rx_pkt_set+0x84>)
   1b746:	4907      	ldr	r1, [pc, #28]	; (1b764 <lll_conn_rx_pkt_set+0x88>)
   1b748:	4807      	ldr	r0, [pc, #28]	; (1b768 <lll_conn_rx_pkt_set+0x8c>)
   1b74a:	f240 235a 	movw	r3, #602	; 0x25a
   1b74e:	f006 ffd9 	bl	22704 <printk>
   1b752:	4040      	eors	r0, r0
   1b754:	f380 8811 	msr	BASEPRI, r0
   1b758:	f04f 0003 	mov.w	r0, #3
   1b75c:	df02      	svc	2
   1b75e:	e7c4      	b.n	1b6ea <lll_conn_rx_pkt_set+0xe>
   1b760:	00029ea8 	.word	0x00029ea8
   1b764:	00029e64 	.word	0x00029e64
   1b768:	00029220 	.word	0x00029220

0001b76c <lll_conn_isr_tx>:
{
   1b76c:	b538      	push	{r3, r4, r5, lr}
   1b76e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b770:	f7ff f930 	bl	1a9d4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b774:	2096      	movs	r0, #150	; 0x96
   1b776:	f000 ff1f 	bl	1c5b8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1b77a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   1b77e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1b782:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1b786:	f000 0007 	and.w	r0, r0, #7
   1b78a:	f002 0207 	and.w	r2, r2, #7
   1b78e:	2100      	movs	r1, #0
   1b790:	f000 fe2e 	bl	1c3f0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1b794:	4620      	mov	r0, r4
   1b796:	f7ff ffa1 	bl	1b6dc <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b79a:	f000 fda5 	bl	1c2e8 <radio_is_ready>
   1b79e:	bb58      	cbnz	r0, 1b7f8 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1b7a0:	f001 f80a 	bl	1c7b8 <radio_tmr_tifs_base_get>
   1b7a4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b7a6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1b7aa:	2101      	movs	r1, #1
   1b7ac:	f000 0007 	and.w	r0, r0, #7
   1b7b0:	f000 fd6e 	bl	1c290 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1b7b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1b7b8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b7bc:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1b7be:	2b02      	cmp	r3, #2
   1b7c0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1b7c4:	d016      	beq.n	1b7f4 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1b7c6:	2b04      	cmp	r3, #4
   1b7c8:	bf14      	ite	ne
   1b7ca:	2328      	movne	r3, #40	; 0x28
   1b7cc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b7d0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1b7d4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1b7d8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1b7dc:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b7de:	f000 fd55 	bl	1c28c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b7e2:	1a28      	subs	r0, r5, r0
   1b7e4:	f000 ffba 	bl	1c75c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1b7e8:	4621      	mov	r1, r4
   1b7ea:	480a      	ldr	r0, [pc, #40]	; (1b814 <lll_conn_isr_tx+0xa8>)
}
   1b7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1b7f0:	f000 bc66 	b.w	1c0c0 <radio_isr_set>
	switch (phy) {
   1b7f4:	2318      	movs	r3, #24
   1b7f6:	e7eb      	b.n	1b7d0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1b7f8:	4a07      	ldr	r2, [pc, #28]	; (1b818 <lll_conn_isr_tx+0xac>)
   1b7fa:	4908      	ldr	r1, [pc, #32]	; (1b81c <lll_conn_isr_tx+0xb0>)
   1b7fc:	4808      	ldr	r0, [pc, #32]	; (1b820 <lll_conn_isr_tx+0xb4>)
   1b7fe:	f240 2313 	movw	r3, #531	; 0x213
   1b802:	f006 ff7f 	bl	22704 <printk>
   1b806:	4040      	eors	r0, r0
   1b808:	f380 8811 	msr	BASEPRI, r0
   1b80c:	f04f 0003 	mov.w	r0, #3
   1b810:	df02      	svc	2
   1b812:	e7c5      	b.n	1b7a0 <lll_conn_isr_tx+0x34>
   1b814:	0001b95d 	.word	0x0001b95d
   1b818:	00029ea8 	.word	0x00029ea8
   1b81c:	00029e6c 	.word	0x00029e6c
   1b820:	00029220 	.word	0x00029220

0001b824 <lll_conn_tx_pkt_set>:
{
   1b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b826:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1b828:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   1b82c:	8c47      	ldrh	r7, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   1b82e:	f001 0407 	and.w	r4, r1, #7
{
   1b832:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1b834:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1b838:	4620      	mov	r0, r4
   1b83a:	f000 fca7 	bl	1c18c <radio_phy_set>
	} else if (lll->enc_tx) {
   1b83e:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1b842:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1b844:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1b846:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   1b84a:	d50d      	bpl.n	1b868 <lll_conn_tx_pkt_set+0x44>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1b84c:	1d39      	adds	r1, r7, #4
   1b84e:	b2c9      	uxtb	r1, r1
   1b850:	2008      	movs	r0, #8
   1b852:	f000 fce1 	bl	1c218 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1b856:	4631      	mov	r1, r6
   1b858:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1b85c:	f000 fff0 	bl	1c840 <radio_ccm_tx_pkt_set>
}
   1b860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1b864:	f000 bd06 	b.w	1c274 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1b868:	b2f9      	uxtb	r1, r7
   1b86a:	2008      	movs	r0, #8
   1b86c:	f000 fcd4 	bl	1c218 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1b870:	4630      	mov	r0, r6
}
   1b872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1b876:	f000 bcfd 	b.w	1c274 <radio_pkt_tx_set>
   1b87a:	bf00      	nop

0001b87c <lll_conn_pdu_tx_prep>:
{
   1b87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b880:	4604      	mov	r4, r0
   1b882:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b884:	aa01      	add	r2, sp, #4
   1b886:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1b888:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b88a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1b88c:	f7f5 fc66 	bl	1115c <memq_peek>
	if (lll->empty || !link) {
   1b890:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1b894:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b896:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1b898:	d432      	bmi.n	1b900 <lll_conn_pdu_tx_prep+0x84>
   1b89a:	2800      	cmp	r0, #0
   1b89c:	d04e      	beq.n	1b93c <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b89e:	9b01      	ldr	r3, [sp, #4]
   1b8a0:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   1b8a4:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1b8a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b8ac:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1b8b0:	b913      	cbnz	r3, 1b8b8 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1b8b2:	786b      	ldrb	r3, [r5, #1]
   1b8b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   1b8b8:	b137      	cbz	r7, 1b8c8 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b8ba:	f818 2007 	ldrb.w	r2, [r8, r7]
   1b8be:	2101      	movs	r1, #1
   1b8c0:	f361 0201 	bfi	r2, r1, #0, #2
   1b8c4:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1b8c8:	1bdb      	subs	r3, r3, r7
   1b8ca:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1b8cc:	4620      	mov	r0, r4
   1b8ce:	f7fd f821 	bl	18914 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1b8d2:	786b      	ldrb	r3, [r5, #1]
   1b8d4:	4283      	cmp	r3, r0
   1b8d6:	d924      	bls.n	1b922 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1b8d8:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1b8da:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b8de:	f043 0310 	orr.w	r3, r3, #16
   1b8e2:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1b8e6:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b8ea:	f36f 1347 	bfc	r3, #5, #3
   1b8ee:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1b8f6:	f8c9 5000 	str.w	r5, [r9]
}
   1b8fa:	b003      	add	sp, #12
   1b8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1b900:	f043 0304 	orr.w	r3, r3, #4
   1b904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1b908:	f000 fd22 	bl	1c350 <radio_pkt_empty_get>
   1b90c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1b90e:	b1e6      	cbz	r6, 1b94a <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1b910:	7803      	ldrb	r3, [r0, #0]
   1b912:	f043 0310 	orr.w	r3, r3, #16
   1b916:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1b918:	f8c9 5000 	str.w	r5, [r9]
}
   1b91c:	b003      	add	sp, #12
   1b91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1b922:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b924:	6832      	ldr	r2, [r6, #0]
   1b926:	429a      	cmp	r2, r3
			p->md = 1U;
   1b928:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b92c:	bf14      	ite	ne
   1b92e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1b932:	f36f 1304 	bfceq	r3, #4, #1
   1b936:	f808 3007 	strb.w	r3, [r8, r7]
   1b93a:	e7d4      	b.n	1b8e6 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1b93c:	f043 0304 	orr.w	r3, r3, #4
   1b940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   1b944:	f000 fd04 	bl	1c350 <radio_pkt_empty_get>
   1b948:	4605      	mov	r5, r0
			p->md = 0U;
   1b94a:	782b      	ldrb	r3, [r5, #0]
   1b94c:	f36f 1304 	bfc	r3, #4, #1
   1b950:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1b952:	f8c9 5000 	str.w	r5, [r9]
}
   1b956:	b003      	add	sp, #12
   1b958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b95c <lll_conn_isr_rx>:
{
   1b95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b960:	b083      	sub	sp, #12
   1b962:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b964:	f000 fcca 	bl	1c2fc <radio_is_done>
	if (trx_done) {
   1b968:	b2c0      	uxtb	r0, r0
   1b96a:	b950      	cbnz	r0, 1b982 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1b96c:	f7ff f83a 	bl	1a9e4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1b970:	48b6      	ldr	r0, [pc, #728]	; (1bc4c <lll_conn_isr_rx+0x2f0>)
   1b972:	4621      	mov	r1, r4
   1b974:	f000 fba4 	bl	1c0c0 <radio_isr_set>
}
   1b978:	b003      	add	sp, #12
   1b97a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1b97e:	f000 bc93 	b.w	1c2a8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1b982:	f000 fcdb 	bl	1c33c <radio_crc_is_valid>
   1b986:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1b988:	f000 fdba 	bl	1c500 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1b98c:	f7ff f82a 	bl	1a9e4 <lll_isr_rx_status_reset>
	trx_cnt++;
   1b990:	4aaf      	ldr	r2, [pc, #700]	; (1bc50 <lll_conn_isr_rx+0x2f4>)
   1b992:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b994:	2001      	movs	r0, #1
	trx_cnt++;
   1b996:	4403      	add	r3, r0
   1b998:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b99a:	f7f9 fb71 	bl	15080 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b99e:	4606      	mov	r6, r0
   1b9a0:	2800      	cmp	r0, #0
   1b9a2:	f000 80ce 	beq.w	1bb42 <lll_conn_isr_rx+0x1e6>
	if (crc_ok) {
   1b9a6:	2d00      	cmp	r5, #0
   1b9a8:	d148      	bne.n	1ba3c <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1b9aa:	4baa      	ldr	r3, [pc, #680]	; (1bc54 <lll_conn_isr_rx+0x2f8>)
   1b9ac:	781f      	ldrb	r7, [r3, #0]
   1b9ae:	2f00      	cmp	r7, #0
   1b9b0:	f000 80b1 	beq.w	1bb16 <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   1b9b4:	3f01      	subs	r7, #1
   1b9b6:	b2ff      	uxtb	r7, r7
   1b9b8:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1b9ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b9be:	a901      	add	r1, sp, #4
   1b9c0:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1b9c2:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b9c6:	f7ff ff59 	bl	1b87c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b9ca:	2f00      	cmp	r7, #0
   1b9cc:	f040 813c 	bne.w	1bc48 <lll_conn_isr_rx+0x2ec>
		radio_isr_set(isr_done, param);
   1b9d0:	489e      	ldr	r0, [pc, #632]	; (1bc4c <lll_conn_isr_rx+0x2f0>)
   1b9d2:	4621      	mov	r1, r4
   1b9d4:	f000 fb74 	bl	1c0c0 <radio_isr_set>
		} else if (!lll->role) {
   1b9d8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	f280 8104 	bge.w	1bbea <lll_conn_isr_rx+0x28e>
	pdu_data_tx->sn = lll->sn;
   1b9e2:	9901      	ldr	r1, [sp, #4]
   1b9e4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   1b9e8:	780b      	ldrb	r3, [r1, #0]
   1b9ea:	f023 000c 	bic.w	r0, r3, #12
   1b9ee:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1b9f2:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1b9f4:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1b9f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1b9fc:	4303      	orrs	r3, r0
   1b9fe:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1ba00:	4620      	mov	r0, r4
   1ba02:	f7ff ff0f 	bl	1b824 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ba06:	f000 fc6f 	bl	1c2e8 <radio_is_ready>
   1ba0a:	2800      	cmp	r0, #0
   1ba0c:	f040 80d0 	bne.w	1bbb0 <lll_conn_isr_rx+0x254>
	if (!radio_tmr_aa_restore()) {
   1ba10:	f000 febe 	bl	1c790 <radio_tmr_aa_restore>
   1ba14:	2800      	cmp	r0, #0
   1ba16:	d06b      	beq.n	1baf0 <lll_conn_isr_rx+0x194>
	if (tx_release) {
   1ba18:	2d00      	cmp	r5, #0
   1ba1a:	d06f      	beq.n	1bafc <lll_conn_isr_rx+0x1a0>
		LL_ASSERT(lll->handle != 0xFFFF);
   1ba1c:	89a0      	ldrh	r0, [r4, #12]
   1ba1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ba22:	4298      	cmp	r0, r3
   1ba24:	f000 80d2 	beq.w	1bbcc <lll_conn_isr_rx+0x270>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1ba28:	4629      	mov	r1, r5
   1ba2a:	f7fc fd65 	bl	184f8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1ba2e:	2f00      	cmp	r7, #0
   1ba30:	d166      	bne.n	1bb00 <lll_conn_isr_rx+0x1a4>
		ull_rx_sched();
   1ba32:	f7f9 fb69 	bl	15108 <ull_rx_sched>
}
   1ba36:	b003      	add	sp, #12
   1ba38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   1ba3c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ba40:	7f32      	ldrb	r2, [r6, #28]
   1ba42:	f003 0101 	and.w	r1, r3, #1
   1ba46:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1ba4a:	4288      	cmp	r0, r1
   1ba4c:	f000 8089 	beq.w	1bb62 <lll_conn_isr_rx+0x206>
		lll->sn++;
   1ba50:	f081 0101 	eor.w	r1, r1, #1
   1ba54:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1ba58:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   1ba5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   1ba60:	b2da      	uxtb	r2, r3
   1ba62:	f040 80cf 	bne.w	1bc04 <lll_conn_isr_rx+0x2a8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1ba66:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   1ba6a:	aa01      	add	r2, sp, #4
   1ba6c:	f7f5 fb76 	bl	1115c <memq_peek>
		if (link) {
   1ba70:	4605      	mov	r5, r0
   1ba72:	2800      	cmp	r0, #0
   1ba74:	f000 80dd 	beq.w	1bc32 <lll_conn_isr_rx+0x2d6>
			pdu_data_tx = (void *)(tx->pdu +
   1ba78:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1ba7a:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   1ba7e:	3704      	adds	r7, #4
   1ba80:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1ba84:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1ba86:	b152      	cbz	r2, 1ba9e <lll_conn_isr_rx+0x142>
				if (lll->enc_tx) {
   1ba88:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ba8c:	06d9      	lsls	r1, r3, #27
   1ba8e:	d506      	bpl.n	1ba9e <lll_conn_isr_rx+0x142>
					lll->ccm_tx.counter++;
   1ba90:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1ba92:	3301      	adds	r3, #1
   1ba94:	6763      	str	r3, [r4, #116]	; 0x74
   1ba96:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1ba98:	f143 0300 	adc.w	r3, r3, #0
   1ba9c:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   1ba9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1baa2:	444a      	add	r2, r9
   1baa4:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1baa6:	429a      	cmp	r2, r3
   1baa8:	f0c0 80ca 	bcc.w	1bc40 <lll_conn_isr_rx+0x2e4>
			} else if (offset == lll->packet_tx_head_len) {
   1baac:	f000 810b 	beq.w	1bcc6 <lll_conn_isr_rx+0x36a>
				LL_ASSERT(0);
   1bab0:	4a69      	ldr	r2, [pc, #420]	; (1bc58 <lll_conn_isr_rx+0x2fc>)
   1bab2:	496a      	ldr	r1, [pc, #424]	; (1bc5c <lll_conn_isr_rx+0x300>)
   1bab4:	486a      	ldr	r0, [pc, #424]	; (1bc60 <lll_conn_isr_rx+0x304>)
   1bab6:	f240 33a3 	movw	r3, #931	; 0x3a3
   1baba:	f006 fe23 	bl	22704 <printk>
   1babe:	4040      	eors	r0, r0
   1bac0:	f380 8811 	msr	BASEPRI, r0
   1bac4:	f04f 0003 	mov.w	r0, #3
   1bac8:	df02      	svc	2
	tx_release = NULL;
   1baca:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1bacc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1bad0:	2b00      	cmp	r3, #0
   1bad2:	f2c0 80f4 	blt.w	1bcbe <lll_conn_isr_rx+0x362>
			    !pdu_data_rx->md) {
   1bad6:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1bad8:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1bada:	bf58      	it	pl
   1badc:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   1bae0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bae4:	bf5c      	itt	pl
   1bae6:	f088 0810 	eorpl.w	r8, r8, #16
   1baea:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1baee:	e03b      	b.n	1bb68 <lll_conn_isr_rx+0x20c>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1baf0:	f000 fe42 	bl	1c778 <radio_tmr_aa_get>
   1baf4:	f000 fe46 	bl	1c784 <radio_tmr_aa_save>
	if (tx_release) {
   1baf8:	2d00      	cmp	r5, #0
   1bafa:	d18f      	bne.n	1ba1c <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   1bafc:	2f00      	cmp	r7, #0
   1bafe:	d09a      	beq.n	1ba36 <lll_conn_isr_rx+0xda>
		ull_pdu_rx_alloc();
   1bb00:	f7f9 fadc 	bl	150bc <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1bb04:	2303      	movs	r3, #3
   1bb06:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1bb08:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1bb0a:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1bb0c:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1bb0e:	4631      	mov	r1, r6
   1bb10:	f7f9 faea 	bl	150e8 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   1bb14:	e78d      	b.n	1ba32 <lll_conn_isr_rx+0xd6>
		crc_expire--;
   1bb16:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bb18:	a901      	add	r1, sp, #4
   1bb1a:	4620      	mov	r0, r4
		crc_expire--;
   1bb1c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bb1e:	f7ff fead 	bl	1b87c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1bb22:	2096      	movs	r0, #150	; 0x96
   1bb24:	f000 fd48 	bl	1c5b8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1bb28:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1bb2c:	f000 0007 	and.w	r0, r0, #7
   1bb30:	f000 fc16 	bl	1c360 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1bb34:	484b      	ldr	r0, [pc, #300]	; (1bc64 <lll_conn_isr_rx+0x308>)
   1bb36:	4621      	mov	r1, r4
   1bb38:	f000 fac2 	bl	1c0c0 <radio_isr_set>
		radio_tmr_end_capture();
   1bb3c:	f000 fe2e 	bl	1c79c <radio_tmr_end_capture>
   1bb40:	e74f      	b.n	1b9e2 <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   1bb42:	4a45      	ldr	r2, [pc, #276]	; (1bc58 <lll_conn_isr_rx+0x2fc>)
   1bb44:	4948      	ldr	r1, [pc, #288]	; (1bc68 <lll_conn_isr_rx+0x30c>)
   1bb46:	4846      	ldr	r0, [pc, #280]	; (1bc60 <lll_conn_isr_rx+0x304>)
   1bb48:	23f2      	movs	r3, #242	; 0xf2
   1bb4a:	f006 fddb 	bl	22704 <printk>
   1bb4e:	4040      	eors	r0, r0
   1bb50:	f380 8811 	msr	BASEPRI, r0
   1bb54:	f04f 0003 	mov.w	r0, #3
   1bb58:	df02      	svc	2
	if (crc_ok) {
   1bb5a:	2d00      	cmp	r5, #0
   1bb5c:	f43f af25 	beq.w	1b9aa <lll_conn_isr_rx+0x4e>
   1bb60:	e76c      	b.n	1ba3c <lll_conn_isr_rx+0xe0>
	is_done = 0U;
   1bb62:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1bb66:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1bb68:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1bb6c:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1bb70:	428a      	cmp	r2, r1
   1bb72:	f000 8081 	beq.w	1bc78 <lll_conn_isr_rx+0x31c>
	is_rx_enqueue = 0U;
   1bb76:	2700      	movs	r7, #0
		crc_expire = 0U;
   1bb78:	4a36      	ldr	r2, [pc, #216]	; (1bc54 <lll_conn_isr_rx+0x2f8>)
   1bb7a:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1bb7c:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1bb80:	4b3a      	ldr	r3, [pc, #232]	; (1bc6c <lll_conn_isr_rx+0x310>)
		crc_expire = 0U;
   1bb82:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bb84:	4620      	mov	r0, r4
		crc_valid = 1U;
   1bb86:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bb88:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1bb8a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bb8c:	f7ff fe76 	bl	1b87c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1bb90:	f1b8 0f00 	cmp.w	r8, #0
   1bb94:	f47f af1c 	bne.w	1b9d0 <lll_conn_isr_rx+0x74>
   1bb98:	7f33      	ldrb	r3, [r6, #28]
   1bb9a:	06d9      	lsls	r1, r3, #27
   1bb9c:	d4c1      	bmi.n	1bb22 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1bb9e:	9b01      	ldr	r3, [sp, #4]
   1bba0:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1bba2:	06d2      	lsls	r2, r2, #27
   1bba4:	d4bd      	bmi.n	1bb22 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1bba6:	785b      	ldrb	r3, [r3, #1]
   1bba8:	2b00      	cmp	r3, #0
   1bbaa:	f43f af11 	beq.w	1b9d0 <lll_conn_isr_rx+0x74>
   1bbae:	e7b8      	b.n	1bb22 <lll_conn_isr_rx+0x1c6>
	LL_ASSERT(!radio_is_ready());
   1bbb0:	4a29      	ldr	r2, [pc, #164]	; (1bc58 <lll_conn_isr_rx+0x2fc>)
   1bbb2:	492f      	ldr	r1, [pc, #188]	; (1bc70 <lll_conn_isr_rx+0x314>)
   1bbb4:	482a      	ldr	r0, [pc, #168]	; (1bc60 <lll_conn_isr_rx+0x304>)
   1bbb6:	f240 1369 	movw	r3, #361	; 0x169
   1bbba:	f006 fda3 	bl	22704 <printk>
   1bbbe:	4040      	eors	r0, r0
   1bbc0:	f380 8811 	msr	BASEPRI, r0
   1bbc4:	f04f 0003 	mov.w	r0, #3
   1bbc8:	df02      	svc	2
   1bbca:	e721      	b.n	1ba10 <lll_conn_isr_rx+0xb4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1bbcc:	4a22      	ldr	r2, [pc, #136]	; (1bc58 <lll_conn_isr_rx+0x2fc>)
   1bbce:	4929      	ldr	r1, [pc, #164]	; (1bc74 <lll_conn_isr_rx+0x318>)
   1bbd0:	4823      	ldr	r0, [pc, #140]	; (1bc60 <lll_conn_isr_rx+0x304>)
   1bbd2:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1bbd6:	f006 fd95 	bl	22704 <printk>
   1bbda:	4040      	eors	r0, r0
   1bbdc:	f380 8811 	msr	BASEPRI, r0
   1bbe0:	f04f 0003 	mov.w	r0, #3
   1bbe4:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1bbe6:	89a0      	ldrh	r0, [r4, #12]
   1bbe8:	e71e      	b.n	1ba28 <lll_conn_isr_rx+0xcc>
			radio_disable();
   1bbea:	f000 fb5d 	bl	1c2a8 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1bbee:	f000 fb7b 	bl	1c2e8 <radio_is_ready>
   1bbf2:	2800      	cmp	r0, #0
   1bbf4:	d155      	bne.n	1bca2 <lll_conn_isr_rx+0x346>
			lll->empty = is_empty_pdu_tx_retry;
   1bbf6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bbfa:	f369 0382 	bfi	r3, r9, #2, #1
   1bbfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   1bc02:	e705      	b.n	1ba10 <lll_conn_isr_rx+0xb4>
			lll->empty = 0;
   1bc04:	f36f 0282 	bfc	r2, #2, #1
   1bc08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1bc0c:	f000 fba0 	bl	1c350 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1bc10:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1bc14:	2b00      	cmp	r3, #0
   1bc16:	db0c      	blt.n	1bc32 <lll_conn_isr_rx+0x2d6>
			    !pdu_data_rx->md) {
   1bc18:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1bc1a:	f012 0510 	ands.w	r5, r2, #16
   1bc1e:	d109      	bne.n	1bc34 <lll_conn_isr_rx+0x2d8>
				*is_done = !pdu_data_tx->md;
   1bc20:	f890 8000 	ldrb.w	r8, [r0]
   1bc24:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bc28:	f088 0810 	eor.w	r8, r8, #16
   1bc2c:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1bc30:	e79a      	b.n	1bb68 <lll_conn_isr_rx+0x20c>
   1bc32:	7f32      	ldrb	r2, [r6, #28]
   1bc34:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   1bc38:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1bc3c:	4645      	mov	r5, r8
   1bc3e:	e793      	b.n	1bb68 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_offset = offset;
   1bc40:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   1bc44:	2500      	movs	r5, #0
   1bc46:	e741      	b.n	1bacc <lll_conn_isr_rx+0x170>
	is_rx_enqueue = 0U;
   1bc48:	462f      	mov	r7, r5
   1bc4a:	e76a      	b.n	1bb22 <lll_conn_isr_rx+0x1c6>
   1bc4c:	0001b5c9 	.word	0x0001b5c9
   1bc50:	20003dde 	.word	0x20003dde
   1bc54:	20003f48 	.word	0x20003f48
   1bc58:	00029ea8 	.word	0x00029ea8
   1bc5c:	000292b8 	.word	0x000292b8
   1bc60:	00029220 	.word	0x00029220
   1bc64:	0001b76d 	.word	0x0001b76d
   1bc68:	00029e64 	.word	0x00029e64
   1bc6c:	20003f49 	.word	0x20003f49
   1bc70:	00029e6c 	.word	0x00029e6c
   1bc74:	00029f00 	.word	0x00029f00
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1bc78:	2003      	movs	r0, #3
   1bc7a:	f7f9 fa01 	bl	15080 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1bc7e:	b168      	cbz	r0, 1bc9c <lll_conn_isr_rx+0x340>
		lll->nesn++;
   1bc80:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bc84:	f083 0302 	eor.w	r3, r3, #2
   1bc88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   1bc8c:	7f73      	ldrb	r3, [r6, #29]
   1bc8e:	b12b      	cbz	r3, 1bc9c <lll_conn_isr_rx+0x340>
			if (lll->enc_rx) {
   1bc90:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bc94:	0718      	lsls	r0, r3, #28
   1bc96:	d424      	bmi.n	1bce2 <lll_conn_isr_rx+0x386>
			*is_rx_enqueue = 1U;
   1bc98:	2701      	movs	r7, #1
   1bc9a:	e76d      	b.n	1bb78 <lll_conn_isr_rx+0x21c>
   1bc9c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bca0:	e769      	b.n	1bb76 <lll_conn_isr_rx+0x21a>
			LL_ASSERT(!radio_is_ready());
   1bca2:	4a37      	ldr	r2, [pc, #220]	; (1bd80 <lll_conn_isr_rx+0x424>)
   1bca4:	4937      	ldr	r1, [pc, #220]	; (1bd84 <lll_conn_isr_rx+0x428>)
   1bca6:	4838      	ldr	r0, [pc, #224]	; (1bd88 <lll_conn_isr_rx+0x42c>)
   1bca8:	f44f 7398 	mov.w	r3, #304	; 0x130
   1bcac:	f006 fd2a 	bl	22704 <printk>
   1bcb0:	4040      	eors	r0, r0
   1bcb2:	f380 8811 	msr	BASEPRI, r0
   1bcb6:	f04f 0003 	mov.w	r0, #3
   1bcba:	df02      	svc	2
   1bcbc:	e79b      	b.n	1bbf6 <lll_conn_isr_rx+0x29a>
   1bcbe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bcc2:	7f32      	ldrb	r2, [r6, #28]
   1bcc4:	e750      	b.n	1bb68 <lll_conn_isr_rx+0x20c>
				lll->packet_tx_head_len = 0;
   1bcc6:	2200      	movs	r2, #0
   1bcc8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   1bccc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1bcce:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1bcd2:	f7f5 fa4b 	bl	1116c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1bcd6:	9b01      	ldr	r3, [sp, #4]
   1bcd8:	681a      	ldr	r2, [r3, #0]
   1bcda:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1bcdc:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1bcde:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   1bce0:	e6f4      	b.n	1bacc <lll_conn_isr_rx+0x170>
				done = radio_ccm_is_done();
   1bce2:	f000 fdd5 	bl	1c890 <radio_ccm_is_done>
				LL_ASSERT(done);
   1bce6:	2800      	cmp	r0, #0
   1bce8:	d03b      	beq.n	1bd62 <lll_conn_isr_rx+0x406>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1bcea:	f000 fdf3 	bl	1c8d4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1bcee:	bb30      	cbnz	r0, 1bd3e <lll_conn_isr_rx+0x3e2>
				    lll->ccm_rx.counter == 0 &&
   1bcf0:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   1bcf4:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   1bcf8:	4313      	orrs	r3, r2
   1bcfa:	d104      	bne.n	1bd06 <lll_conn_isr_rx+0x3aa>
				    (pdu_data_rx->ll_id ==
   1bcfc:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1bcfe:	f003 0303 	and.w	r3, r3, #3
   1bd02:	2b03      	cmp	r3, #3
   1bd04:	d004      	beq.n	1bd10 <lll_conn_isr_rx+0x3b4>
					mic_state = LLL_CONN_MIC_FAIL;
   1bd06:	4b21      	ldr	r3, [pc, #132]	; (1bd8c <lll_conn_isr_rx+0x430>)
   1bd08:	2202      	movs	r2, #2
   1bd0a:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1bd0c:	2700      	movs	r7, #0
   1bd0e:	e67f      	b.n	1ba10 <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   1bd10:	f000 fb22 	bl	1c358 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1bd14:	7843      	ldrb	r3, [r0, #1]
   1bd16:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1bd18:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1bd1a:	d8f4      	bhi.n	1bd06 <lll_conn_isr_rx+0x3aa>
						memcpy(pdu_data_rx,
   1bd1c:	3303      	adds	r3, #3
   1bd1e:	b2da      	uxtb	r2, r3
   1bd20:	f106 001c 	add.w	r0, r6, #28
   1bd24:	f008 fe3b 	bl	2499e <memcpy>
						lll->ccm_rx.counter--;
   1bd28:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1bd2c:	3b01      	subs	r3, #1
   1bd2e:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1bd32:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   1bd36:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1bd3a:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   1bd3e:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1bd42:	3301      	adds	r3, #1
   1bd44:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1bd48:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   1bd4c:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   1bd50:	f143 0300 	adc.w	r3, r3, #0
   1bd54:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1bd56:	4b0d      	ldr	r3, [pc, #52]	; (1bd8c <lll_conn_isr_rx+0x430>)
   1bd58:	2701      	movs	r7, #1
   1bd5a:	701f      	strb	r7, [r3, #0]
		if (err) {
   1bd5c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1bd60:	e70a      	b.n	1bb78 <lll_conn_isr_rx+0x21c>
				LL_ASSERT(done);
   1bd62:	4a07      	ldr	r2, [pc, #28]	; (1bd80 <lll_conn_isr_rx+0x424>)
   1bd64:	490a      	ldr	r1, [pc, #40]	; (1bd90 <lll_conn_isr_rx+0x434>)
   1bd66:	4808      	ldr	r0, [pc, #32]	; (1bd88 <lll_conn_isr_rx+0x42c>)
   1bd68:	f240 33be 	movw	r3, #958	; 0x3be
   1bd6c:	f006 fcca 	bl	22704 <printk>
   1bd70:	4040      	eors	r0, r0
   1bd72:	f380 8811 	msr	BASEPRI, r0
   1bd76:	f04f 0003 	mov.w	r0, #3
   1bd7a:	df02      	svc	2
   1bd7c:	e7b5      	b.n	1bcea <lll_conn_isr_rx+0x38e>
   1bd7e:	bf00      	nop
   1bd80:	00029ea8 	.word	0x00029ea8
   1bd84:	00029e6c 	.word	0x00029e6c
   1bd88:	00029220 	.word	0x00029220
   1bd8c:	20003f4a 	.word	0x20003f4a
   1bd90:	00029ef8 	.word	0x00029ef8

0001bd94 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1bd96:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1bd98:	89a2      	ldrh	r2, [r4, #12]
   1bd9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bd9e:	429a      	cmp	r2, r3
{
   1bda0:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1bda2:	f000 8090 	beq.w	1bec6 <prepare_cb+0x132>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1bda6:	4605      	mov	r5, r0
   1bda8:	f7ff fc54 	bl	1b654 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1bdac:	892b      	ldrh	r3, [r5, #8]
   1bdae:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1bdb0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1bdb2:	441a      	add	r2, r3
   1bdb4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1bdb6:	4410      	add	r0, r2
   1bdb8:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   1bdba:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1bdbc:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   1bdbe:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   1bdc0:	2100      	movs	r1, #0
   1bdc2:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   1bdc4:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   1bdc6:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   1bdc8:	d460      	bmi.n	1be8c <prepare_cb+0xf8>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1bdca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bdce:	7fa1      	ldrb	r1, [r4, #30]
   1bdd0:	9300      	str	r3, [sp, #0]
   1bdd2:	f104 001f 	add.w	r0, r4, #31
   1bdd6:	f104 0318 	add.w	r3, r4, #24
   1bdda:	f7fd f955 	bl	19088 <lll_chan_sel_1>
   1bdde:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bde0:	4620      	mov	r0, r4
   1bde2:	a903      	add	r1, sp, #12
   1bde4:	f7ff fd4a 	bl	1b87c <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1bde8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   1bdec:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1bdee:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1bdf2:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1bdf4:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1bdf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1bdfc:	780a      	ldrb	r2, [r1, #0]
   1bdfe:	f022 020c 	bic.w	r2, r2, #12
   1be02:	4313      	orrs	r3, r2
   1be04:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1be06:	f000 f99d 	bl	1c144 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1be0a:	2008      	movs	r0, #8
   1be0c:	f000 f9ce 	bl	1c1ac <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1be10:	1d20      	adds	r0, r4, #4
   1be12:	f000 f9e9 	bl	1c1e8 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1be16:	8923      	ldrh	r3, [r4, #8]
   1be18:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1be1a:	f240 605b 	movw	r0, #1627	; 0x65b
   1be1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1be22:	f000 fa7f 	bl	1c324 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1be26:	4630      	mov	r0, r6
   1be28:	f7fe fd90 	bl	1a94c <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1be2c:	9903      	ldr	r1, [sp, #12]
   1be2e:	4620      	mov	r0, r4
   1be30:	f7ff fcf8 	bl	1b824 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1be34:	4621      	mov	r1, r4
   1be36:	4828      	ldr	r0, [pc, #160]	; (1bed8 <prepare_cb+0x144>)
   1be38:	f000 f942 	bl	1c0c0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1be3c:	2096      	movs	r0, #150	; 0x96
   1be3e:	f000 fbbb 	bl	1c5b8 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1be42:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1be46:	f000 0007 	and.w	r0, r0, #7
   1be4a:	f000 fa89 	bl	1c360 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1be4e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1be50:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1be52:	4638      	mov	r0, r7
   1be54:	f7fe fd60 	bl	1a918 <lll_event_offset_get>
   1be58:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1be5a:	686a      	ldr	r2, [r5, #4]
   1be5c:	f106 0109 	add.w	r1, r6, #9
   1be60:	2001      	movs	r0, #1
   1be62:	f000 fbb5 	bl	1c5d0 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1be66:	f000 fc99 	bl	1c79c <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1be6a:	89a1      	ldrh	r1, [r4, #12]
   1be6c:	3103      	adds	r1, #3
   1be6e:	4632      	mov	r2, r6
   1be70:	b2c9      	uxtb	r1, r1
   1be72:	4638      	mov	r0, r7
   1be74:	f7fe fd5a 	bl	1a92c <lll_preempt_calc>
   1be78:	b188      	cbz	r0, 1be9e <prepare_cb+0x10a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1be7a:	4818      	ldr	r0, [pc, #96]	; (1bedc <prepare_cb+0x148>)
   1be7c:	4621      	mov	r1, r4
   1be7e:	f000 f91f 	bl	1c0c0 <radio_isr_set>
		radio_disable();
   1be82:	f000 fa11 	bl	1c2a8 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1be86:	2000      	movs	r0, #0
   1be88:	b005      	add	sp, #20
   1be8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1be8c:	8be1      	ldrh	r1, [r4, #30]
   1be8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1be92:	f104 0218 	add.w	r2, r4, #24
   1be96:	f7fd f93b 	bl	19110 <lll_chan_sel_2>
   1be9a:	4606      	mov	r6, r0
   1be9c:	e7a0      	b.n	1bde0 <prepare_cb+0x4c>
		ret = lll_prepare_done(lll);
   1be9e:	4620      	mov	r0, r4
   1bea0:	f7fe fcd4 	bl	1a84c <lll_prepare_done>
		LL_ASSERT(!ret);
   1bea4:	2800      	cmp	r0, #0
   1bea6:	d0ee      	beq.n	1be86 <prepare_cb+0xf2>
   1bea8:	4a0d      	ldr	r2, [pc, #52]	; (1bee0 <prepare_cb+0x14c>)
   1beaa:	490e      	ldr	r1, [pc, #56]	; (1bee4 <prepare_cb+0x150>)
   1beac:	480e      	ldr	r0, [pc, #56]	; (1bee8 <prepare_cb+0x154>)
   1beae:	23fd      	movs	r3, #253	; 0xfd
   1beb0:	f006 fc28 	bl	22704 <printk>
   1beb4:	4040      	eors	r0, r0
   1beb6:	f380 8811 	msr	BASEPRI, r0
   1beba:	f04f 0003 	mov.w	r0, #3
   1bebe:	df02      	svc	2
}
   1bec0:	2000      	movs	r0, #0
   1bec2:	b005      	add	sp, #20
   1bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1bec6:	4809      	ldr	r0, [pc, #36]	; (1beec <prepare_cb+0x158>)
   1bec8:	4621      	mov	r1, r4
   1beca:	f000 f8f9 	bl	1c0c0 <radio_isr_set>
		radio_disable();
   1bece:	f000 f9eb 	bl	1c2a8 <radio_disable>
}
   1bed2:	2000      	movs	r0, #0
   1bed4:	b005      	add	sp, #20
   1bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bed8:	0001b76d 	.word	0x0001b76d
   1bedc:	0001aa81 	.word	0x0001aa81
   1bee0:	00029f2c 	.word	0x00029f2c
   1bee4:	00029674 	.word	0x00029674
   1bee8:	00029220 	.word	0x00029220
   1beec:	0001aaa5 	.word	0x0001aaa5

0001bef0 <lll_central_prepare>:
{
   1bef0:	b510      	push	{r4, lr}
   1bef2:	b082      	sub	sp, #8
   1bef4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bef6:	f7fe ff25 	bl	1ad44 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1befa:	2800      	cmp	r0, #0
   1befc:	db19      	blt.n	1bf32 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1befe:	4a13      	ldr	r2, [pc, #76]	; (1bf4c <lll_central_prepare+0x5c>)
   1bf00:	4913      	ldr	r1, [pc, #76]	; (1bf50 <lll_central_prepare+0x60>)
   1bf02:	4814      	ldr	r0, [pc, #80]	; (1bf54 <lll_central_prepare+0x64>)
   1bf04:	9400      	str	r4, [sp, #0]
   1bf06:	2300      	movs	r3, #0
   1bf08:	f7f9 fbb8 	bl	1567c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bf0c:	b108      	cbz	r0, 1bf12 <lll_central_prepare+0x22>
   1bf0e:	3077      	adds	r0, #119	; 0x77
   1bf10:	d101      	bne.n	1bf16 <lll_central_prepare+0x26>
}
   1bf12:	b002      	add	sp, #8
   1bf14:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bf16:	4a10      	ldr	r2, [pc, #64]	; (1bf58 <lll_central_prepare+0x68>)
   1bf18:	4910      	ldr	r1, [pc, #64]	; (1bf5c <lll_central_prepare+0x6c>)
   1bf1a:	4811      	ldr	r0, [pc, #68]	; (1bf60 <lll_central_prepare+0x70>)
   1bf1c:	2351      	movs	r3, #81	; 0x51
   1bf1e:	f006 fbf1 	bl	22704 <printk>
   1bf22:	4040      	eors	r0, r0
   1bf24:	f380 8811 	msr	BASEPRI, r0
   1bf28:	f04f 0003 	mov.w	r0, #3
   1bf2c:	df02      	svc	2
}
   1bf2e:	b002      	add	sp, #8
   1bf30:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1bf32:	4a09      	ldr	r2, [pc, #36]	; (1bf58 <lll_central_prepare+0x68>)
   1bf34:	490b      	ldr	r1, [pc, #44]	; (1bf64 <lll_central_prepare+0x74>)
   1bf36:	480a      	ldr	r0, [pc, #40]	; (1bf60 <lll_central_prepare+0x70>)
   1bf38:	234c      	movs	r3, #76	; 0x4c
   1bf3a:	f006 fbe3 	bl	22704 <printk>
   1bf3e:	4040      	eors	r0, r0
   1bf40:	f380 8811 	msr	BASEPRI, r0
   1bf44:	f04f 0003 	mov.w	r0, #3
   1bf48:	df02      	svc	2
   1bf4a:	e7d8      	b.n	1befe <lll_central_prepare+0xe>
   1bf4c:	0001bd95 	.word	0x0001bd95
   1bf50:	0001b67d 	.word	0x0001b67d
   1bf54:	0001a911 	.word	0x0001a911
   1bf58:	00029f2c 	.word	0x00029f2c
   1bf5c:	00029e80 	.word	0x00029e80
   1bf60:	00029220 	.word	0x00029220
   1bf64:	00029db8 	.word	0x00029db8

0001bf68 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1bf68:	4b05      	ldr	r3, [pc, #20]	; (1bf80 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1bf6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bf6e:	2100      	movs	r1, #0
   1bf70:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1bf74:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1bf78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1bf7c:	4770      	bx	lr
   1bf7e:	bf00      	nop
   1bf80:	4000b000 	.word	0x4000b000

0001bf84 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1bf84:	4b05      	ldr	r3, [pc, #20]	; (1bf9c <cntr_start+0x18>)
   1bf86:	7818      	ldrb	r0, [r3, #0]
   1bf88:	1c42      	adds	r2, r0, #1
   1bf8a:	701a      	strb	r2, [r3, #0]
   1bf8c:	b918      	cbnz	r0, 1bf96 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bf8e:	4b04      	ldr	r3, [pc, #16]	; (1bfa0 <cntr_start+0x1c>)
   1bf90:	2201      	movs	r2, #1
   1bf92:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1bf94:	4770      	bx	lr
		return 1;
   1bf96:	2001      	movs	r0, #1
}
   1bf98:	4770      	bx	lr
   1bf9a:	bf00      	nop
   1bf9c:	20003f4b 	.word	0x20003f4b
   1bfa0:	4000b000 	.word	0x4000b000

0001bfa4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1bfa4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1bfa6:	4c0d      	ldr	r4, [pc, #52]	; (1bfdc <cntr_stop+0x38>)
   1bfa8:	7820      	ldrb	r0, [r4, #0]
   1bfaa:	b148      	cbz	r0, 1bfc0 <cntr_stop+0x1c>

	if (--_refcount) {
   1bfac:	3801      	subs	r0, #1
   1bfae:	b2c0      	uxtb	r0, r0
   1bfb0:	7020      	strb	r0, [r4, #0]
   1bfb2:	b918      	cbnz	r0, 1bfbc <cntr_stop+0x18>
   1bfb4:	4b0a      	ldr	r3, [pc, #40]	; (1bfe0 <cntr_stop+0x3c>)
   1bfb6:	2201      	movs	r2, #1
   1bfb8:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1bfba:	bd10      	pop	{r4, pc}
		return 1;
   1bfbc:	2001      	movs	r0, #1
}
   1bfbe:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1bfc0:	4a08      	ldr	r2, [pc, #32]	; (1bfe4 <cntr_stop+0x40>)
   1bfc2:	4909      	ldr	r1, [pc, #36]	; (1bfe8 <cntr_stop+0x44>)
   1bfc4:	4809      	ldr	r0, [pc, #36]	; (1bfec <cntr_stop+0x48>)
   1bfc6:	232d      	movs	r3, #45	; 0x2d
   1bfc8:	f006 fb9c 	bl	22704 <printk>
   1bfcc:	4040      	eors	r0, r0
   1bfce:	f380 8811 	msr	BASEPRI, r0
   1bfd2:	f04f 0003 	mov.w	r0, #3
   1bfd6:	df02      	svc	2
	if (--_refcount) {
   1bfd8:	7820      	ldrb	r0, [r4, #0]
   1bfda:	e7e7      	b.n	1bfac <cntr_stop+0x8>
   1bfdc:	20003f4b 	.word	0x20003f4b
   1bfe0:	4000b000 	.word	0x4000b000
   1bfe4:	00029f90 	.word	0x00029f90
   1bfe8:	00029fdc 	.word	0x00029fdc
   1bfec:	00029220 	.word	0x00029220

0001bff0 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1bff0:	4b01      	ldr	r3, [pc, #4]	; (1bff8 <cntr_cnt_get+0x8>)
   1bff2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1bff6:	4770      	bx	lr
   1bff8:	4000b000 	.word	0x4000b000

0001bffc <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1bffc:	4b02      	ldr	r3, [pc, #8]	; (1c008 <cntr_cmp_set+0xc>)
   1bffe:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c002:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c006:	4770      	bx	lr
   1c008:	4000b000 	.word	0x4000b000

0001c00c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c00c:	4b12      	ldr	r3, [pc, #72]	; (1c058 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c00e:	b430      	push	{r4, r5}
   1c010:	2101      	movs	r1, #1
   1c012:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1c014:	2000      	movs	r0, #0
   1c016:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c018:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c01c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c020:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1c024:	6019      	str	r1, [r3, #0]
}
   1c026:	e005      	b.n	1c034 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c028:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c02c:	b932      	cbnz	r2, 1c03c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c02e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c032:	b11a      	cbz	r2, 1c03c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c034:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c038:	2a00      	cmp	r2, #0
   1c03a:	d0f5      	beq.n	1c028 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c03c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c03e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c042:	2a00      	cmp	r2, #0
   1c044:	d1e7      	bne.n	1c016 <do_ecb+0xa>
   1c046:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1c04a:	2d00      	cmp	r5, #0
   1c04c:	d0e3      	beq.n	1c016 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c04e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1c050:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c054:	4770      	bx	lr
   1c056:	bf00      	nop
   1c058:	4000e000 	.word	0x4000e000

0001c05c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c05c:	b570      	push	{r4, r5, r6, lr}
   1c05e:	b08c      	sub	sp, #48	; 0x30
   1c060:	460e      	mov	r6, r1
   1c062:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c064:	4601      	mov	r1, r0
   1c066:	2210      	movs	r2, #16
   1c068:	4668      	mov	r0, sp
{
   1c06a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c06c:	f7f5 f844 	bl	110f8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c070:	2210      	movs	r2, #16
   1c072:	eb0d 0002 	add.w	r0, sp, r2
   1c076:	4631      	mov	r1, r6
   1c078:	f7f5 f83e 	bl	110f8 <mem_rcopy>

	do_ecb(&ecb);
   1c07c:	4668      	mov	r0, sp
   1c07e:	f7ff ffc5 	bl	1c00c <do_ecb>

	if (cipher_text_le) {
   1c082:	b125      	cbz	r5, 1c08e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c084:	2210      	movs	r2, #16
   1c086:	a908      	add	r1, sp, #32
   1c088:	4628      	mov	r0, r5
   1c08a:	f7f5 f835 	bl	110f8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c08e:	b124      	cbz	r4, 1c09a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1c090:	2210      	movs	r2, #16
   1c092:	a908      	add	r1, sp, #32
   1c094:	4620      	mov	r0, r4
   1c096:	f008 fc82 	bl	2499e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1c09a:	b00c      	add	sp, #48	; 0x30
   1c09c:	bd70      	pop	{r4, r5, r6, pc}
   1c09e:	bf00      	nop

0001c0a0 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1c0a0:	4b04      	ldr	r3, [pc, #16]	; (1c0b4 <isr_radio+0x14>)
   1c0a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1c0a6:	b123      	cbz	r3, 1c0b2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1c0a8:	4a03      	ldr	r2, [pc, #12]	; (1c0b8 <isr_radio+0x18>)
   1c0aa:	4b04      	ldr	r3, [pc, #16]	; (1c0bc <isr_radio+0x1c>)
   1c0ac:	6810      	ldr	r0, [r2, #0]
   1c0ae:	681b      	ldr	r3, [r3, #0]
   1c0b0:	4718      	bx	r3
}
   1c0b2:	4770      	bx	lr
   1c0b4:	40001000 	.word	0x40001000
   1c0b8:	20003158 	.word	0x20003158
   1c0bc:	20003154 	.word	0x20003154

0001c0c0 <radio_isr_set>:
{
   1c0c0:	b538      	push	{r3, r4, r5, lr}
   1c0c2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1c0c4:	2001      	movs	r0, #1
{
   1c0c6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1c0c8:	f7ec f8e2 	bl	8290 <arch_irq_disable>
	isr_cb = cb;
   1c0cc:	4b08      	ldr	r3, [pc, #32]	; (1c0f0 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1c0ce:	4a09      	ldr	r2, [pc, #36]	; (1c0f4 <radio_isr_set+0x34>)
	isr_cb = cb;
   1c0d0:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c0d2:	4909      	ldr	r1, [pc, #36]	; (1c0f8 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c0d4:	4b09      	ldr	r3, [pc, #36]	; (1c0fc <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1c0d6:	6015      	str	r5, [r2, #0]
   1c0d8:	2010      	movs	r0, #16
   1c0da:	2202      	movs	r2, #2
   1c0dc:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1c0e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1c0e4:	2001      	movs	r0, #1
}
   1c0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1c0ea:	f7ec b8c1 	b.w	8270 <arch_irq_enable>
   1c0ee:	bf00      	nop
   1c0f0:	20003154 	.word	0x20003154
   1c0f4:	20003158 	.word	0x20003158
   1c0f8:	40001000 	.word	0x40001000
   1c0fc:	e000e100 	.word	0xe000e100

0001c100 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c108:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c10a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1c10e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c112:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1c116:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1c11a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1c11e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1c122:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1c126:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1c12a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1c12e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1c132:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1c136:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1c13a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1c13e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1c142:	4770      	bx	lr

0001c144 <radio_reset>:
{
   1c144:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1c146:	2001      	movs	r0, #1
   1c148:	f7ec f8a2 	bl	8290 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1c14c:	4a0d      	ldr	r2, [pc, #52]	; (1c184 <radio_reset+0x40>)
   1c14e:	2100      	movs	r1, #0
   1c150:	2301      	movs	r3, #1
   1c152:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1c156:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c15a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c15e:	490a      	ldr	r1, [pc, #40]	; (1c188 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1c160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c164:	f023 0301 	bic.w	r3, r3, #1
   1c168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c16c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c170:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c174:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c178:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c17c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1c180:	bd10      	pop	{r4, pc}
   1c182:	bf00      	nop
   1c184:	40001000 	.word	0x40001000
   1c188:	4001f000 	.word	0x4001f000

0001c18c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1c18c:	4b06      	ldr	r3, [pc, #24]	; (1c1a8 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1c18e:	2802      	cmp	r0, #2
   1c190:	bf14      	ite	ne
   1c192:	2203      	movne	r2, #3
   1c194:	2204      	moveq	r2, #4
   1c196:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1c19a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1c19e:	f042 0201 	orr.w	r2, r2, #1
   1c1a2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1c1a6:	4770      	bx	lr
   1c1a8:	40001000 	.word	0x40001000

0001c1ac <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1c1ac:	4b01      	ldr	r3, [pc, #4]	; (1c1b4 <radio_tx_power_set+0x8>)
   1c1ae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1c1b2:	4770      	bx	lr
   1c1b4:	40001000 	.word	0x40001000

0001c1b8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1c1b8:	4b01      	ldr	r3, [pc, #4]	; (1c1c0 <radio_freq_chan_set+0x8>)
   1c1ba:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1c1be:	4770      	bx	lr
   1c1c0:	40001000 	.word	0x40001000

0001c1c4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1c1c4:	4b07      	ldr	r3, [pc, #28]	; (1c1e4 <radio_whiten_iv_set+0x20>)
   1c1c6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1c1ca:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c1ce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1c1d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1c1d6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c1da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1c1de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1c1e2:	4770      	bx	lr
   1c1e4:	40001000 	.word	0x40001000

0001c1e8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1c1e8:	4a0a      	ldr	r2, [pc, #40]	; (1c214 <radio_aa_set+0x2c>)
   1c1ea:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1c1ec:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1c1ee:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1c1f2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1c1f6:	78c3      	ldrb	r3, [r0, #3]
   1c1f8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c1fc:	7843      	ldrb	r3, [r0, #1]
   1c1fe:	f890 c002 	ldrb.w	ip, [r0, #2]
   1c202:	7801      	ldrb	r1, [r0, #0]
   1c204:	041b      	lsls	r3, r3, #16
   1c206:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1c20a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1c20e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1c212:	4770      	bx	lr
   1c214:	40001000 	.word	0x40001000

0001c218 <radio_pkt_configure>:
	switch (phy) {
   1c218:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1c21c:	2b02      	cmp	r3, #2
   1c21e:	bf14      	ite	ne
   1c220:	f04f 0c00 	movne.w	ip, #0
   1c224:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1c228:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1c22a:	bf48      	it	mi
   1c22c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1c230:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1c234:	4b0a      	ldr	r3, [pc, #40]	; (1c260 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c236:	4a0b      	ldr	r2, [pc, #44]	; (1c264 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1c238:	ea40 000c 	orr.w	r0, r0, ip
   1c23c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1c240:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c244:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1c248:	4002      	ands	r2, r0
   1c24a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1c24e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c252:	4311      	orrs	r1, r2
   1c254:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1c258:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1c25c:	4770      	bx	lr
   1c25e:	bf00      	nop
   1c260:	40001000 	.word	0x40001000
   1c264:	fef80000 	.word	0xfef80000

0001c268 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1c268:	4b01      	ldr	r3, [pc, #4]	; (1c270 <radio_pkt_rx_set+0x8>)
   1c26a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1c26e:	4770      	bx	lr
   1c270:	40001000 	.word	0x40001000

0001c274 <radio_pkt_tx_set>:
   1c274:	4b01      	ldr	r3, [pc, #4]	; (1c27c <radio_pkt_tx_set+0x8>)
   1c276:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1c27a:	4770      	bx	lr
   1c27c:	40001000 	.word	0x40001000

0001c280 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1c280:	2802      	cmp	r0, #2
}
   1c282:	bf14      	ite	ne
   1c284:	2029      	movne	r0, #41	; 0x29
   1c286:	2028      	moveq	r0, #40	; 0x28
   1c288:	4770      	bx	lr
   1c28a:	bf00      	nop

0001c28c <radio_tx_chain_delay_get>:
}
   1c28c:	2001      	movs	r0, #1
   1c28e:	4770      	bx	lr

0001c290 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1c290:	2802      	cmp	r0, #2
}
   1c292:	bf14      	ite	ne
   1c294:	200a      	movne	r0, #10
   1c296:	2005      	moveq	r0, #5
   1c298:	4770      	bx	lr
   1c29a:	bf00      	nop

0001c29c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c29c:	4b01      	ldr	r3, [pc, #4]	; (1c2a4 <radio_rx_enable+0x8>)
   1c29e:	2201      	movs	r2, #1
   1c2a0:	605a      	str	r2, [r3, #4]
}
   1c2a2:	4770      	bx	lr
   1c2a4:	40001000 	.word	0x40001000

0001c2a8 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1c2a8:	4a07      	ldr	r2, [pc, #28]	; (1c2c8 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1c2aa:	4908      	ldr	r1, [pc, #32]	; (1c2cc <radio_disable+0x24>)
{
   1c2ac:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c2ae:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c2b0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1c2b4:	2000      	movs	r0, #0
   1c2b6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c2ba:	6053      	str	r3, [r2, #4]
}
   1c2bc:	bc10      	pop	{r4}
   1c2be:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1c2c0:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c2c4:	610b      	str	r3, [r1, #16]
}
   1c2c6:	4770      	bx	lr
   1c2c8:	4001f000 	.word	0x4001f000
   1c2cc:	40001000 	.word	0x40001000

0001c2d0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1c2d0:	4b04      	ldr	r3, [pc, #16]	; (1c2e4 <radio_status_reset+0x14>)
   1c2d2:	2200      	movs	r2, #0
   1c2d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1c2d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1c2dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1c2e0:	4770      	bx	lr
   1c2e2:	bf00      	nop
   1c2e4:	40001000 	.word	0x40001000

0001c2e8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1c2e8:	4b03      	ldr	r3, [pc, #12]	; (1c2f8 <radio_is_ready+0x10>)
   1c2ea:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1c2ee:	3800      	subs	r0, #0
   1c2f0:	bf18      	it	ne
   1c2f2:	2001      	movne	r0, #1
   1c2f4:	4770      	bx	lr
   1c2f6:	bf00      	nop
   1c2f8:	40001000 	.word	0x40001000

0001c2fc <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1c2fc:	4b03      	ldr	r3, [pc, #12]	; (1c30c <radio_is_done+0x10>)
   1c2fe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1c302:	3800      	subs	r0, #0
   1c304:	bf18      	it	ne
   1c306:	2001      	movne	r0, #1
   1c308:	4770      	bx	lr
   1c30a:	bf00      	nop
   1c30c:	40001000 	.word	0x40001000

0001c310 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1c310:	4b03      	ldr	r3, [pc, #12]	; (1c320 <radio_is_idle+0x10>)
   1c312:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1c316:	fab0 f080 	clz	r0, r0
   1c31a:	0940      	lsrs	r0, r0, #5
   1c31c:	4770      	bx	lr
   1c31e:	bf00      	nop
   1c320:	40001000 	.word	0x40001000

0001c324 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1c324:	4b04      	ldr	r3, [pc, #16]	; (1c338 <radio_crc_configure+0x14>)
   1c326:	f240 1203 	movw	r2, #259	; 0x103
   1c32a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1c32e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1c332:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1c336:	4770      	bx	lr
   1c338:	40001000 	.word	0x40001000

0001c33c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1c33c:	4b03      	ldr	r3, [pc, #12]	; (1c34c <radio_crc_is_valid+0x10>)
   1c33e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c342:	3800      	subs	r0, #0
   1c344:	bf18      	it	ne
   1c346:	2001      	movne	r0, #1
   1c348:	4770      	bx	lr
   1c34a:	bf00      	nop
   1c34c:	40001000 	.word	0x40001000

0001c350 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1c350:	4800      	ldr	r0, [pc, #0]	; (1c354 <radio_pkt_empty_get+0x4>)
   1c352:	4770      	bx	lr
   1c354:	2000304c 	.word	0x2000304c

0001c358 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1c358:	4800      	ldr	r0, [pc, #0]	; (1c35c <radio_pkt_scratch_get+0x4>)
   1c35a:	4770      	bx	lr
   1c35c:	20003050 	.word	0x20003050

0001c360 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1c360:	4b1d      	ldr	r3, [pc, #116]	; (1c3d8 <radio_switch_complete_and_rx+0x78>)
{
   1c362:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1c364:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c366:	4d1d      	ldr	r5, [pc, #116]	; (1c3dc <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1c368:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c36c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c36e:	4e1c      	ldr	r6, [pc, #112]	; (1c3e0 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c370:	4c1c      	ldr	r4, [pc, #112]	; (1c3e4 <radio_switch_complete_and_rx+0x84>)
   1c372:	4f1d      	ldr	r7, [pc, #116]	; (1c3e8 <radio_switch_complete_and_rx+0x88>)
   1c374:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1c378:	f102 030c 	add.w	r3, r2, #12
   1c37c:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c37e:	00d0      	lsls	r0, r2, #3
   1c380:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c382:	0091      	lsls	r1, r2, #2
   1c384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c388:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1c38c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c390:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c394:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c398:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1c39c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c3a0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c3a4:	4811      	ldr	r0, [pc, #68]	; (1c3ec <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c3a6:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c3aa:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1c3ae:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1c3b2:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1c3b4:	bf8a      	itet	hi
   1c3b6:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1c3ba:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c3bc:	3b2d      	subhi	r3, #45	; 0x2d
   1c3be:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1c3c2:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1c3c4:	4b06      	ldr	r3, [pc, #24]	; (1c3e0 <radio_switch_complete_and_rx+0x80>)
   1c3c6:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1c3ca:	f002 0201 	and.w	r2, r2, #1
   1c3ce:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1c3d2:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c3d4:	bcf0      	pop	{r4, r5, r6, r7}
   1c3d6:	4770      	bx	lr
   1c3d8:	40001000 	.word	0x40001000
   1c3dc:	20003f4c 	.word	0x20003f4c
   1c3e0:	4001f000 	.word	0x4001f000
   1c3e4:	40009140 	.word	0x40009140
   1c3e8:	4000110c 	.word	0x4000110c
   1c3ec:	40001004 	.word	0x40001004

0001c3f0 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1c3f4:	4e28      	ldr	r6, [pc, #160]	; (1c498 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c3f6:	4c29      	ldr	r4, [pc, #164]	; (1c49c <radio_switch_complete_and_tx+0xac>)
   1c3f8:	4f29      	ldr	r7, [pc, #164]	; (1c4a0 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c3fa:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1c4a4 <radio_switch_complete_and_tx+0xb4>
   1c3fe:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1c4a8 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1c402:	2303      	movs	r3, #3
   1c404:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c408:	7821      	ldrb	r1, [r4, #0]
   1c40a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1c40e:	f101 030c 	add.w	r3, r1, #12
   1c412:	b2db      	uxtb	r3, r3
   1c414:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c416:	00cd      	lsls	r5, r1, #3
   1c418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c41c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c420:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c424:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c428:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c42c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c430:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c434:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c438:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1c43c:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1c440:	2a02      	cmp	r2, #2
   1c442:	bf08      	it	eq
   1c444:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c446:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1c44a:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1c44e:	f241 3588 	movw	r5, #5000	; 0x1388
   1c452:	2802      	cmp	r0, #2
   1c454:	bf08      	it	eq
   1c456:	462a      	moveq	r2, r5
   1c458:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1c45c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1c460:	4413      	add	r3, r2
   1c462:	4a12      	ldr	r2, [pc, #72]	; (1c4ac <radio_switch_complete_and_tx+0xbc>)
   1c464:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1c468:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1c46c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1c470:	bf85      	ittet	hi
   1c472:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1c474:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1c478:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c47a:	1a1b      	subhi	r3, r3, r0
   1c47c:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1c480:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1c482:	4b08      	ldr	r3, [pc, #32]	; (1c4a4 <radio_switch_complete_and_tx+0xb4>)
   1c484:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1c488:	f001 0101 	and.w	r1, r1, #1
   1c48c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1c490:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c496:	bf00      	nop
   1c498:	40001000 	.word	0x40001000
   1c49c:	20003f4c 	.word	0x20003f4c
   1c4a0:	40009140 	.word	0x40009140
   1c4a4:	4001f000 	.word	0x4001f000
   1c4a8:	4000110c 	.word	0x4000110c
   1c4ac:	10624dd3 	.word	0x10624dd3

0001c4b0 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1c4b0:	4904      	ldr	r1, [pc, #16]	; (1c4c4 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1c4b2:	4b05      	ldr	r3, [pc, #20]	; (1c4c8 <radio_switch_complete_and_disable+0x18>)
   1c4b4:	2003      	movs	r0, #3
   1c4b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1c4ba:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c4be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c4c2:	4770      	bx	lr
   1c4c4:	40001000 	.word	0x40001000
   1c4c8:	4001f000 	.word	0x4001f000

0001c4cc <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   1c4cc:	2000      	movs	r0, #0
   1c4ce:	4770      	bx	lr

0001c4d0 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1c4d0:	4a03      	ldr	r2, [pc, #12]	; (1c4e0 <radio_rssi_measure+0x10>)
   1c4d2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1c4d6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1c4da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1c4de:	4770      	bx	lr
   1c4e0:	40001000 	.word	0x40001000

0001c4e4 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1c4e4:	4b01      	ldr	r3, [pc, #4]	; (1c4ec <radio_rssi_get+0x8>)
   1c4e6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1c4ea:	4770      	bx	lr
   1c4ec:	40001000 	.word	0x40001000

0001c4f0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1c4f0:	4b02      	ldr	r3, [pc, #8]	; (1c4fc <radio_rssi_status_reset+0xc>)
   1c4f2:	2200      	movs	r2, #0
   1c4f4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1c4f8:	4770      	bx	lr
   1c4fa:	bf00      	nop
   1c4fc:	40001000 	.word	0x40001000

0001c500 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1c500:	4b03      	ldr	r3, [pc, #12]	; (1c510 <radio_rssi_is_ready+0x10>)
   1c502:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1c506:	3800      	subs	r0, #0
   1c508:	bf18      	it	ne
   1c50a:	2001      	movne	r0, #1
   1c50c:	4770      	bx	lr
   1c50e:	bf00      	nop
   1c510:	40001000 	.word	0x40001000

0001c514 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1c514:	b410      	push	{r4}
   1c516:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c51a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1c51e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1c526:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c528:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1c52c:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1c530:	8894      	ldrh	r4, [r2, #4]
   1c532:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1c536:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1c53a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1c53e:	d1ec      	bne.n	1c51a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c540:	4b03      	ldr	r3, [pc, #12]	; (1c550 <radio_filter_configure+0x3c>)
}
   1c542:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c544:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1c548:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1c54c:	4770      	bx	lr
   1c54e:	bf00      	nop
   1c550:	40001000 	.word	0x40001000

0001c554 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1c554:	4a03      	ldr	r2, [pc, #12]	; (1c564 <radio_filter_disable+0x10>)
   1c556:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1c55a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1c55e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1c562:	4770      	bx	lr
   1c564:	40001000 	.word	0x40001000

0001c568 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1c568:	4b02      	ldr	r3, [pc, #8]	; (1c574 <radio_filter_status_reset+0xc>)
   1c56a:	2200      	movs	r2, #0
   1c56c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1c570:	4770      	bx	lr
   1c572:	bf00      	nop
   1c574:	40001000 	.word	0x40001000

0001c578 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1c578:	4b03      	ldr	r3, [pc, #12]	; (1c588 <radio_filter_has_match+0x10>)
   1c57a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1c57e:	3800      	subs	r0, #0
   1c580:	bf18      	it	ne
   1c582:	2001      	movne	r0, #1
   1c584:	4770      	bx	lr
   1c586:	bf00      	nop
   1c588:	40001000 	.word	0x40001000

0001c58c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1c58c:	4b01      	ldr	r3, [pc, #4]	; (1c594 <radio_filter_match_get+0x8>)
   1c58e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1c592:	4770      	bx	lr
   1c594:	40001000 	.word	0x40001000

0001c598 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1c598:	4904      	ldr	r1, [pc, #16]	; (1c5ac <radio_tmr_status_reset+0x14>)
   1c59a:	4b05      	ldr	r3, [pc, #20]	; (1c5b0 <radio_tmr_status_reset+0x18>)
   1c59c:	4a05      	ldr	r2, [pc, #20]	; (1c5b4 <radio_tmr_status_reset+0x1c>)
   1c59e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1c5a2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1c5a6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1c5aa:	4770      	bx	lr
   1c5ac:	4000b000 	.word	0x4000b000
   1c5b0:	4001f000 	.word	0x4001f000
   1c5b4:	0e7000c0 	.word	0x0e7000c0

0001c5b8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1c5b8:	4b03      	ldr	r3, [pc, #12]	; (1c5c8 <radio_tmr_tifs_set+0x10>)
   1c5ba:	4a04      	ldr	r2, [pc, #16]	; (1c5cc <radio_tmr_tifs_set+0x14>)
   1c5bc:	781b      	ldrb	r3, [r3, #0]
   1c5be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1c5c2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c5c6:	4770      	bx	lr
   1c5c8:	20003f4c 	.word	0x20003f4c
   1c5cc:	40009000 	.word	0x40009000

0001c5d0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1c5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c5d4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1c5d8:	4d31      	ldr	r5, [pc, #196]	; (1c6a0 <radio_tmr_start+0xd0>)
   1c5da:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1c5de:	42ab      	cmp	r3, r5
{
   1c5e0:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c5e2:	d906      	bls.n	1c5f2 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1c5e4:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1c5e8:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1c5ec:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1c5ee:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5f2:	4b2c      	ldr	r3, [pc, #176]	; (1c6a4 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1c5f4:	482c      	ldr	r0, [pc, #176]	; (1c6a8 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1c5f6:	4d2d      	ldr	r5, [pc, #180]	; (1c6ac <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c5f8:	4e2d      	ldr	r6, [pc, #180]	; (1c6b0 <radio_tmr_start+0xe0>)
   1c5fa:	2701      	movs	r7, #1
   1c5fc:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1c5fe:	2700      	movs	r7, #0
   1c600:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1c604:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1c608:	2704      	movs	r7, #4
   1c60a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1c60e:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1c610:	2702      	movs	r7, #2
   1c612:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1c616:	4a27      	ldr	r2, [pc, #156]	; (1c6b4 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1c618:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c61c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c620:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1c624:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1c628:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c62a:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c62e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c632:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1c636:	bb64      	cbnz	r4, 1c692 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1c638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1c63c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1c640:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1c644:	4b1b      	ldr	r3, [pc, #108]	; (1c6b4 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c646:	4a1c      	ldr	r2, [pc, #112]	; (1c6b8 <radio_tmr_start+0xe8>)
   1c648:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1c64c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1c64e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c650:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1c6bc <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c654:	f8df e068 	ldr.w	lr, [pc, #104]	; 1c6c0 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c658:	f8df c068 	ldr.w	ip, [pc, #104]	; 1c6c4 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c65c:	4f1a      	ldr	r7, [pc, #104]	; (1c6c8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c65e:	4e1b      	ldr	r6, [pc, #108]	; (1c6cc <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c660:	4d1b      	ldr	r5, [pc, #108]	; (1c6d0 <radio_tmr_start+0x100>)
   1c662:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c664:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1c668:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c66c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1c670:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1c674:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c676:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c67a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c67e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c682:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c686:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c68a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1c68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1c692:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1c696:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1c69a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1c69e:	e7d1      	b.n	1c644 <radio_tmr_start+0x74>
   1c6a0:	7ff0bdbf 	.word	0x7ff0bdbf
   1c6a4:	40008000 	.word	0x40008000
   1c6a8:	431bde83 	.word	0x431bde83
   1c6ac:	4000b000 	.word	0x4000b000
   1c6b0:	4000b148 	.word	0x4000b148
   1c6b4:	4001f000 	.word	0x4001f000
   1c6b8:	40009000 	.word	0x40009000
   1c6bc:	4000110c 	.word	0x4000110c
   1c6c0:	4000900c 	.word	0x4000900c
   1c6c4:	40009140 	.word	0x40009140
   1c6c8:	4001f004 	.word	0x4001f004
   1c6cc:	40009144 	.word	0x40009144
   1c6d0:	4001f00c 	.word	0x4001f00c

0001c6d4 <radio_tmr_start_tick>:
   1c6d4:	4a15      	ldr	r2, [pc, #84]	; (1c72c <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1c6d6:	b430      	push	{r4, r5}
   1c6d8:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1c6da:	4c15      	ldr	r4, [pc, #84]	; (1c730 <radio_tmr_start_tick+0x5c>)
   1c6dc:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   1c6de:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1c6e2:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   1c6e4:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c6e8:	4b12      	ldr	r3, [pc, #72]	; (1c734 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1c6ea:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c6ee:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   1c6f2:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c6f4:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1c6f8:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c6fc:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c700:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1c704:	b158      	cbz	r0, 1c71e <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1c706:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c70a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1c70e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1c712:	4a08      	ldr	r2, [pc, #32]	; (1c734 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1c714:	2001      	movs	r0, #1
   1c716:	bc30      	pop	{r4, r5}
   1c718:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1c71c:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1c71e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1c722:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1c726:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1c72a:	e7f2      	b.n	1c712 <radio_tmr_start_tick+0x3e>
   1c72c:	40008000 	.word	0x40008000
   1c730:	4000b000 	.word	0x4000b000
   1c734:	4001f000 	.word	0x4001f000

0001c738 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1c738:	4b01      	ldr	r3, [pc, #4]	; (1c740 <radio_tmr_start_get+0x8>)
   1c73a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1c73e:	4770      	bx	lr
   1c740:	4000b000 	.word	0x4000b000

0001c744 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c744:	4903      	ldr	r1, [pc, #12]	; (1c754 <radio_tmr_stop+0x10>)
   1c746:	4a04      	ldr	r2, [pc, #16]	; (1c758 <radio_tmr_stop+0x14>)
   1c748:	2301      	movs	r3, #1
   1c74a:	604b      	str	r3, [r1, #4]
   1c74c:	610b      	str	r3, [r1, #16]
   1c74e:	6053      	str	r3, [r2, #4]
   1c750:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c752:	4770      	bx	lr
   1c754:	40008000 	.word	0x40008000
   1c758:	40009000 	.word	0x40009000

0001c75c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1c75c:	4904      	ldr	r1, [pc, #16]	; (1c770 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1c75e:	4b05      	ldr	r3, [pc, #20]	; (1c774 <radio_tmr_hcto_configure+0x18>)
   1c760:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1c764:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1c768:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1c76c:	4770      	bx	lr
   1c76e:	bf00      	nop
   1c770:	40008000 	.word	0x40008000
   1c774:	4001f000 	.word	0x4001f000

0001c778 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1c778:	4b01      	ldr	r3, [pc, #4]	; (1c780 <radio_tmr_aa_get+0x8>)
   1c77a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1c77e:	4770      	bx	lr
   1c780:	40008000 	.word	0x40008000

0001c784 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1c784:	4b01      	ldr	r3, [pc, #4]	; (1c78c <radio_tmr_aa_save+0x8>)
   1c786:	6018      	str	r0, [r3, #0]
}
   1c788:	4770      	bx	lr
   1c78a:	bf00      	nop
   1c78c:	2000315c 	.word	0x2000315c

0001c790 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1c790:	4b01      	ldr	r3, [pc, #4]	; (1c798 <radio_tmr_aa_restore+0x8>)
}
   1c792:	6818      	ldr	r0, [r3, #0]
   1c794:	4770      	bx	lr
   1c796:	bf00      	nop
   1c798:	2000315c 	.word	0x2000315c

0001c79c <radio_tmr_end_capture>:
   1c79c:	4b02      	ldr	r3, [pc, #8]	; (1c7a8 <radio_tmr_end_capture+0xc>)
   1c79e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1c7a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1c7a6:	4770      	bx	lr
   1c7a8:	4001f000 	.word	0x4001f000

0001c7ac <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1c7ac:	4b01      	ldr	r3, [pc, #4]	; (1c7b4 <radio_tmr_end_get+0x8>)
   1c7ae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1c7b2:	4770      	bx	lr
   1c7b4:	40008000 	.word	0x40008000

0001c7b8 <radio_tmr_tifs_base_get>:
   1c7b8:	4b01      	ldr	r3, [pc, #4]	; (1c7c0 <radio_tmr_tifs_base_get+0x8>)
   1c7ba:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1c7be:	4770      	bx	lr
   1c7c0:	40008000 	.word	0x40008000

0001c7c4 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c7c4:	4b17      	ldr	r3, [pc, #92]	; (1c824 <radio_ccm_rx_pkt_set+0x60>)
{
   1c7c6:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c7c8:	2400      	movs	r4, #0
{
   1c7ca:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c7cc:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c7ce:	4816      	ldr	r0, [pc, #88]	; (1c828 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c7d0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c7d4:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c7d8:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c7dc:	4e13      	ldr	r6, [pc, #76]	; (1c82c <radio_ccm_rx_pkt_set+0x68>)
   1c7de:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1c7e0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c7e4:	4812      	ldr	r0, [pc, #72]	; (1c830 <radio_ccm_rx_pkt_set+0x6c>)
   1c7e6:	2902      	cmp	r1, #2
   1c7e8:	bf08      	it	eq
   1c7ea:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1c7ec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c7f0:	4810      	ldr	r0, [pc, #64]	; (1c834 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c7f2:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c7f6:	4910      	ldr	r1, [pc, #64]	; (1c838 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c7f8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1c7fc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1c800:	4a0e      	ldr	r2, [pc, #56]	; (1c83c <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c802:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1c806:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1c80a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c80e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c812:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c816:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c81a:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c81c:	bc70      	pop	{r4, r5, r6}
   1c81e:	601a      	str	r2, [r3, #0]
   1c820:	4770      	bx	lr
   1c822:	bf00      	nop
   1c824:	4000f000 	.word	0x4000f000
   1c828:	40001000 	.word	0x40001000
   1c82c:	01010001 	.word	0x01010001
   1c830:	01000001 	.word	0x01000001
   1c834:	20003050 	.word	0x20003050
   1c838:	20002f40 	.word	0x20002f40
   1c83c:	4001f000 	.word	0x4001f000

0001c840 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c840:	4b0f      	ldr	r3, [pc, #60]	; (1c880 <radio_ccm_tx_pkt_set+0x40>)
{
   1c842:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c844:	2200      	movs	r2, #0
{
   1c846:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c848:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c84a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c84e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1c852:	480c      	ldr	r0, [pc, #48]	; (1c884 <radio_ccm_tx_pkt_set+0x44>)
   1c854:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c858:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c85c:	480a      	ldr	r0, [pc, #40]	; (1c888 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1c85e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c862:	4c0a      	ldr	r4, [pc, #40]	; (1c88c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c864:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c868:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c86a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c86e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c872:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c874:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c878:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1c87c:	6019      	str	r1, [r3, #0]
}
   1c87e:	4770      	bx	lr
   1c880:	4000f000 	.word	0x4000f000
   1c884:	01010000 	.word	0x01010000
   1c888:	20003050 	.word	0x20003050
   1c88c:	20002f40 	.word	0x20002f40

0001c890 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c890:	4a0e      	ldr	r2, [pc, #56]	; (1c8cc <radio_ccm_is_done+0x3c>)
   1c892:	2302      	movs	r3, #2
   1c894:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c898:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c89c:	b933      	cbnz	r3, 1c8ac <radio_ccm_is_done+0x1c>
		__WFE();
   1c89e:	bf20      	wfe
		__SEV();
   1c8a0:	bf40      	sev
		__WFE();
   1c8a2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c8a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c8a8:	2b00      	cmp	r3, #0
   1c8aa:	d0f8      	beq.n	1c89e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1c8ac:	4b07      	ldr	r3, [pc, #28]	; (1c8cc <radio_ccm_is_done+0x3c>)
   1c8ae:	4a08      	ldr	r2, [pc, #32]	; (1c8d0 <radio_ccm_is_done+0x40>)
   1c8b0:	2002      	movs	r0, #2
   1c8b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c8b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1c8ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1c8be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1c8c2:	fab0 f080 	clz	r0, r0
   1c8c6:	0940      	lsrs	r0, r0, #5
   1c8c8:	4770      	bx	lr
   1c8ca:	bf00      	nop
   1c8cc:	4000f000 	.word	0x4000f000
   1c8d0:	e000e100 	.word	0xe000e100

0001c8d4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1c8d4:	4b03      	ldr	r3, [pc, #12]	; (1c8e4 <radio_ccm_mic_is_valid+0x10>)
   1c8d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c8da:	3800      	subs	r0, #0
   1c8dc:	bf18      	it	ne
   1c8de:	2001      	movne	r0, #1
   1c8e0:	4770      	bx	lr
   1c8e2:	bf00      	nop
   1c8e4:	4000f000 	.word	0x4000f000

0001c8e8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c8e8:	4a15      	ldr	r2, [pc, #84]	; (1c940 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c8ea:	4b16      	ldr	r3, [pc, #88]	; (1c944 <radio_ar_configure+0x5c>)
{
   1c8ec:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c8ee:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c8f2:	4e15      	ldr	r6, [pc, #84]	; (1c948 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c8f4:	2703      	movs	r7, #3
   1c8f6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1c8fa:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1c8fc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c900:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1c902:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1c906:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1c908:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c90c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1c910:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1c914:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1c918:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c91c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1c920:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1c924:	4909      	ldr	r1, [pc, #36]	; (1c94c <radio_ar_configure+0x64>)
   1c926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c92a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c92e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c932:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c936:	bcf0      	pop	{r4, r5, r6, r7}
   1c938:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1c93c:	4770      	bx	lr
   1c93e:	bf00      	nop
   1c940:	40001000 	.word	0x40001000
   1c944:	4000f000 	.word	0x4000f000
   1c948:	20002f3c 	.word	0x20002f3c
   1c94c:	4001f000 	.word	0x4001f000

0001c950 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1c950:	4b01      	ldr	r3, [pc, #4]	; (1c958 <radio_ar_match_get+0x8>)
   1c952:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c956:	4770      	bx	lr
   1c958:	4000f000 	.word	0x4000f000

0001c95c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1c95c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c95e:	4807      	ldr	r0, [pc, #28]	; (1c97c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c960:	4c07      	ldr	r4, [pc, #28]	; (1c980 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1c962:	4a08      	ldr	r2, [pc, #32]	; (1c984 <radio_ar_status_reset+0x28>)
   1c964:	2300      	movs	r3, #0
   1c966:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1c96a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c96e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c972:	bc10      	pop	{r4}
   1c974:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1c978:	4770      	bx	lr
   1c97a:	bf00      	nop
   1c97c:	4000f000 	.word	0x4000f000
   1c980:	40001000 	.word	0x40001000
   1c984:	4001f000 	.word	0x4001f000

0001c988 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1c988:	4b08      	ldr	r3, [pc, #32]	; (1c9ac <radio_ar_has_match+0x24>)
   1c98a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1c98e:	b160      	cbz	r0, 1c9aa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1c990:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1c994:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1c998:	b138      	cbz	r0, 1c9aa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1c99a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1c99e:	b120      	cbz	r0, 1c9aa <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1c9a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1c9a4:	fab0 f080 	clz	r0, r0
   1c9a8:	0940      	lsrs	r0, r0, #5
}
   1c9aa:	4770      	bx	lr
   1c9ac:	40001000 	.word	0x40001000

0001c9b0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c9b0:	2902      	cmp	r1, #2
{
   1c9b2:	b510      	push	{r4, lr}
   1c9b4:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c9b6:	d00b      	beq.n	1c9d0 <mayfly_enable_cb+0x20>
   1c9b8:	4a0a      	ldr	r2, [pc, #40]	; (1c9e4 <mayfly_enable_cb+0x34>)
   1c9ba:	490b      	ldr	r1, [pc, #44]	; (1c9e8 <mayfly_enable_cb+0x38>)
   1c9bc:	480b      	ldr	r0, [pc, #44]	; (1c9ec <mayfly_enable_cb+0x3c>)
   1c9be:	231e      	movs	r3, #30
   1c9c0:	f005 fea0 	bl	22704 <printk>
   1c9c4:	4040      	eors	r0, r0
   1c9c6:	f380 8811 	msr	BASEPRI, r0
   1c9ca:	f04f 0003 	mov.w	r0, #3
   1c9ce:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1c9d0:	200b      	movs	r0, #11
	if (enable) {
   1c9d2:	b11c      	cbz	r4, 1c9dc <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1c9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1c9d8:	f7eb bc4a 	b.w	8270 <arch_irq_enable>
}
   1c9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1c9e0:	f7eb bc56 	b.w	8290 <arch_irq_disable>
   1c9e4:	0002a00c 	.word	0x0002a00c
   1c9e8:	0002a05c 	.word	0x0002a05c
   1c9ec:	00029220 	.word	0x00029220

0001c9f0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c9f0:	b129      	cbz	r1, 1c9fe <mayfly_is_enabled+0xe>
   1c9f2:	3901      	subs	r1, #1
   1c9f4:	2901      	cmp	r1, #1
   1c9f6:	d805      	bhi.n	1ca04 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1c9f8:	200b      	movs	r0, #11
   1c9fa:	f7eb bc5d 	b.w	82b8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1c9fe:	2018      	movs	r0, #24
   1ca00:	f7eb bc5a 	b.w	82b8 <arch_irq_is_enabled>
{
   1ca04:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1ca06:	4a07      	ldr	r2, [pc, #28]	; (1ca24 <mayfly_is_enabled+0x34>)
   1ca08:	4907      	ldr	r1, [pc, #28]	; (1ca28 <mayfly_is_enabled+0x38>)
   1ca0a:	4808      	ldr	r0, [pc, #32]	; (1ca2c <mayfly_is_enabled+0x3c>)
   1ca0c:	2336      	movs	r3, #54	; 0x36
   1ca0e:	f005 fe79 	bl	22704 <printk>
   1ca12:	4040      	eors	r0, r0
   1ca14:	f380 8811 	msr	BASEPRI, r0
   1ca18:	f04f 0003 	mov.w	r0, #3
   1ca1c:	df02      	svc	2
		break;
	}

	return 0;
}
   1ca1e:	2000      	movs	r0, #0
   1ca20:	bd08      	pop	{r3, pc}
   1ca22:	bf00      	nop
   1ca24:	0002a00c 	.word	0x0002a00c
   1ca28:	000292b8 	.word	0x000292b8
   1ca2c:	00029220 	.word	0x00029220

0001ca30 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ca30:	4288      	cmp	r0, r1
   1ca32:	d00b      	beq.n	1ca4c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1ca34:	2801      	cmp	r0, #1
   1ca36:	d003      	beq.n	1ca40 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1ca38:	2802      	cmp	r0, #2
   1ca3a:	d009      	beq.n	1ca50 <mayfly_prio_is_equal+0x20>
   1ca3c:	2000      	movs	r0, #0
#endif
	       0;
}
   1ca3e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1ca40:	f1a1 0002 	sub.w	r0, r1, #2
   1ca44:	fab0 f080 	clz	r0, r0
   1ca48:	0940      	lsrs	r0, r0, #5
   1ca4a:	4770      	bx	lr
   1ca4c:	2001      	movs	r0, #1
   1ca4e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1ca50:	f1a1 0001 	sub.w	r0, r1, #1
   1ca54:	fab0 f080 	clz	r0, r0
   1ca58:	0940      	lsrs	r0, r0, #5
   1ca5a:	4770      	bx	lr

0001ca5c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1ca5c:	2901      	cmp	r1, #1
{
   1ca5e:	b508      	push	{r3, lr}
	switch (callee_id) {
   1ca60:	d00f      	beq.n	1ca82 <mayfly_pend+0x26>
   1ca62:	2902      	cmp	r1, #2
   1ca64:	d00d      	beq.n	1ca82 <mayfly_pend+0x26>
   1ca66:	b191      	cbz	r1, 1ca8e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1ca68:	4a0c      	ldr	r2, [pc, #48]	; (1ca9c <mayfly_pend+0x40>)
   1ca6a:	490d      	ldr	r1, [pc, #52]	; (1caa0 <mayfly_pend+0x44>)
   1ca6c:	480d      	ldr	r0, [pc, #52]	; (1caa4 <mayfly_pend+0x48>)
   1ca6e:	2367      	movs	r3, #103	; 0x67
   1ca70:	f005 fe48 	bl	22704 <printk>
   1ca74:	4040      	eors	r0, r0
   1ca76:	f380 8811 	msr	BASEPRI, r0
   1ca7a:	f04f 0003 	mov.w	r0, #3
   1ca7e:	df02      	svc	2
		break;
	}
}
   1ca80:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ca82:	4b09      	ldr	r3, [pc, #36]	; (1caa8 <mayfly_pend+0x4c>)
   1ca84:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ca88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ca8c:	bd08      	pop	{r3, pc}
   1ca8e:	4b06      	ldr	r3, [pc, #24]	; (1caa8 <mayfly_pend+0x4c>)
   1ca90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ca94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ca98:	bd08      	pop	{r3, pc}
   1ca9a:	bf00      	nop
   1ca9c:	0002a00c 	.word	0x0002a00c
   1caa0:	000292b8 	.word	0x000292b8
   1caa4:	00029220 	.word	0x00029220
   1caa8:	e000e100 	.word	0xe000e100

0001caac <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1caac:	2803      	cmp	r0, #3
{
   1caae:	b510      	push	{r4, lr}
   1cab0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1cab2:	d804      	bhi.n	1cabe <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1cab4:	4b11      	ldr	r3, [pc, #68]	; (1cafc <hal_ticker_instance0_caller_id_get+0x50>)
   1cab6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1cab8:	b18c      	cbz	r4, 1cade <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1caba:	4620      	mov	r0, r4
   1cabc:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1cabe:	4a10      	ldr	r2, [pc, #64]	; (1cb00 <hal_ticker_instance0_caller_id_get+0x54>)
   1cac0:	4910      	ldr	r1, [pc, #64]	; (1cb04 <hal_ticker_instance0_caller_id_get+0x58>)
   1cac2:	4811      	ldr	r0, [pc, #68]	; (1cb08 <hal_ticker_instance0_caller_id_get+0x5c>)
   1cac4:	232b      	movs	r3, #43	; 0x2b
   1cac6:	f005 fe1d 	bl	22704 <printk>
   1caca:	4040      	eors	r0, r0
   1cacc:	f380 8811 	msr	BASEPRI, r0
   1cad0:	f04f 0003 	mov.w	r0, #3
   1cad4:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1cad6:	4b09      	ldr	r3, [pc, #36]	; (1cafc <hal_ticker_instance0_caller_id_get+0x50>)
   1cad8:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1cada:	2c00      	cmp	r4, #0
   1cadc:	d1ed      	bne.n	1caba <hal_ticker_instance0_caller_id_get+0xe>
   1cade:	4a08      	ldr	r2, [pc, #32]	; (1cb00 <hal_ticker_instance0_caller_id_get+0x54>)
   1cae0:	490a      	ldr	r1, [pc, #40]	; (1cb0c <hal_ticker_instance0_caller_id_get+0x60>)
   1cae2:	4809      	ldr	r0, [pc, #36]	; (1cb08 <hal_ticker_instance0_caller_id_get+0x5c>)
   1cae4:	232e      	movs	r3, #46	; 0x2e
   1cae6:	f005 fe0d 	bl	22704 <printk>
   1caea:	4040      	eors	r0, r0
   1caec:	f380 8811 	msr	BASEPRI, r0
   1caf0:	f04f 0003 	mov.w	r0, #3
   1caf4:	df02      	svc	2
}
   1caf6:	4620      	mov	r0, r4
   1caf8:	bd10      	pop	{r4, pc}
   1cafa:	bf00      	nop
   1cafc:	0002a114 	.word	0x0002a114
   1cb00:	0002a080 	.word	0x0002a080
   1cb04:	0002a0d0 	.word	0x0002a0d0
   1cb08:	00029220 	.word	0x00029220
   1cb0c:	0002a0f0 	.word	0x0002a0f0

0001cb10 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1cb10:	3801      	subs	r0, #1
{
   1cb12:	b510      	push	{r4, lr}
   1cb14:	461c      	mov	r4, r3
	switch (caller_id) {
   1cb16:	2804      	cmp	r0, #4
   1cb18:	f200 8082 	bhi.w	1cc20 <hal_ticker_instance0_sched+0x110>
   1cb1c:	e8df f000 	tbb	[pc, r0]
   1cb20:	3f302112 	.word	0x3f302112
   1cb24:	03          	.byte	0x03
   1cb25:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1cb26:	2904      	cmp	r1, #4
   1cb28:	d04a      	beq.n	1cbc0 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1cb2a:	4a44      	ldr	r2, [pc, #272]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cb2c:	4944      	ldr	r1, [pc, #272]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cb2e:	4845      	ldr	r0, [pc, #276]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cb30:	23ba      	movs	r3, #186	; 0xba
   1cb32:	f005 fde7 	bl	22704 <printk>
   1cb36:	4040      	eors	r0, r0
   1cb38:	f380 8811 	msr	BASEPRI, r0
   1cb3c:	f04f 0003 	mov.w	r0, #3
   1cb40:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1cb42:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1cb44:	2904      	cmp	r1, #4
   1cb46:	d043      	beq.n	1cbd0 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1cb48:	4a3c      	ldr	r2, [pc, #240]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cb4a:	493d      	ldr	r1, [pc, #244]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cb4c:	483d      	ldr	r0, [pc, #244]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cb4e:	234e      	movs	r3, #78	; 0x4e
   1cb50:	f005 fdd8 	bl	22704 <printk>
   1cb54:	4040      	eors	r0, r0
   1cb56:	f380 8811 	msr	BASEPRI, r0
   1cb5a:	f04f 0003 	mov.w	r0, #3
   1cb5e:	df02      	svc	2
}
   1cb60:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1cb62:	2903      	cmp	r1, #3
   1cb64:	d03c      	beq.n	1cbe0 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1cb66:	4a35      	ldr	r2, [pc, #212]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cb68:	4935      	ldr	r1, [pc, #212]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cb6a:	4836      	ldr	r0, [pc, #216]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cb6c:	2365      	movs	r3, #101	; 0x65
   1cb6e:	f005 fdc9 	bl	22704 <printk>
   1cb72:	4040      	eors	r0, r0
   1cb74:	f380 8811 	msr	BASEPRI, r0
   1cb78:	f04f 0003 	mov.w	r0, #3
   1cb7c:	df02      	svc	2
}
   1cb7e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1cb80:	2904      	cmp	r1, #4
   1cb82:	d035      	beq.n	1cbf0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1cb84:	4a2d      	ldr	r2, [pc, #180]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cb86:	492e      	ldr	r1, [pc, #184]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cb88:	482e      	ldr	r0, [pc, #184]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cb8a:	237c      	movs	r3, #124	; 0x7c
   1cb8c:	f005 fdba 	bl	22704 <printk>
   1cb90:	4040      	eors	r0, r0
   1cb92:	f380 8811 	msr	BASEPRI, r0
   1cb96:	f04f 0003 	mov.w	r0, #3
   1cb9a:	df02      	svc	2
}
   1cb9c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1cb9e:	2903      	cmp	r1, #3
   1cba0:	d036      	beq.n	1cc10 <hal_ticker_instance0_sched+0x100>
   1cba2:	2904      	cmp	r1, #4
   1cba4:	d02c      	beq.n	1cc00 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1cba6:	4a25      	ldr	r2, [pc, #148]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cba8:	4925      	ldr	r1, [pc, #148]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cbaa:	4826      	ldr	r0, [pc, #152]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cbac:	23a2      	movs	r3, #162	; 0xa2
   1cbae:	f005 fda9 	bl	22704 <printk>
   1cbb2:	4040      	eors	r0, r0
   1cbb4:	f380 8811 	msr	BASEPRI, r0
   1cbb8:	f04f 0003 	mov.w	r0, #3
   1cbbc:	df02      	svc	2
}
   1cbbe:	bd10      	pop	{r4, pc}
			m.param = instance;
   1cbc0:	4b21      	ldr	r3, [pc, #132]	; (1cc48 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cbc2:	2102      	movs	r1, #2
			m.param = instance;
   1cbc4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cbc6:	2003      	movs	r0, #3
}
   1cbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cbcc:	f7f4 bb30 	b.w	11230 <mayfly_enqueue>
			m.param = instance;
   1cbd0:	4b1e      	ldr	r3, [pc, #120]	; (1cc4c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cbd2:	2102      	movs	r1, #2
			m.param = instance;
   1cbd4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cbd6:	2000      	movs	r0, #0
}
   1cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cbdc:	f7f4 bb28 	b.w	11230 <mayfly_enqueue>
			m.param = instance;
   1cbe0:	4b1b      	ldr	r3, [pc, #108]	; (1cc50 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cbe2:	2101      	movs	r1, #1
			m.param = instance;
   1cbe4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cbe6:	4608      	mov	r0, r1
}
   1cbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cbec:	f7f4 bb20 	b.w	11230 <mayfly_enqueue>
			m.param = instance;
   1cbf0:	4b18      	ldr	r3, [pc, #96]	; (1cc54 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cbf2:	2102      	movs	r1, #2
			m.param = instance;
   1cbf4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cbf6:	2001      	movs	r0, #1
}
   1cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cbfc:	f7f4 bb18 	b.w	11230 <mayfly_enqueue>
			m.param = instance;
   1cc00:	4b15      	ldr	r3, [pc, #84]	; (1cc58 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc02:	2102      	movs	r1, #2
			m.param = instance;
   1cc04:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc06:	4608      	mov	r0, r1
}
   1cc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc0c:	f7f4 bb10 	b.w	11230 <mayfly_enqueue>
			m.param = instance;
   1cc10:	4b12      	ldr	r3, [pc, #72]	; (1cc5c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc12:	2101      	movs	r1, #1
			m.param = instance;
   1cc14:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc16:	2002      	movs	r0, #2
}
   1cc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cc1c:	f7f4 bb08 	b.w	11230 <mayfly_enqueue>
		LL_ASSERT(0);
   1cc20:	4a06      	ldr	r2, [pc, #24]	; (1cc3c <hal_ticker_instance0_sched+0x12c>)
   1cc22:	4907      	ldr	r1, [pc, #28]	; (1cc40 <hal_ticker_instance0_sched+0x130>)
   1cc24:	4807      	ldr	r0, [pc, #28]	; (1cc44 <hal_ticker_instance0_sched+0x134>)
   1cc26:	23c0      	movs	r3, #192	; 0xc0
   1cc28:	f005 fd6c 	bl	22704 <printk>
   1cc2c:	4040      	eors	r0, r0
   1cc2e:	f380 8811 	msr	BASEPRI, r0
   1cc32:	f04f 0003 	mov.w	r0, #3
   1cc36:	df02      	svc	2
}
   1cc38:	bd10      	pop	{r4, pc}
   1cc3a:	bf00      	nop
   1cc3c:	0002a080 	.word	0x0002a080
   1cc40:	000292b8 	.word	0x000292b8
   1cc44:	00029220 	.word	0x00029220
   1cc48:	200006dc 	.word	0x200006dc
   1cc4c:	200006cc 	.word	0x200006cc
   1cc50:	200006bc 	.word	0x200006bc
   1cc54:	2000070c 	.word	0x2000070c
   1cc58:	200006ec 	.word	0x200006ec
   1cc5c:	200006fc 	.word	0x200006fc

0001cc60 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1cc60:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1cc62:	2000      	movs	r0, #0
   1cc64:	f7ff b9ca 	b.w	1bffc <cntr_cmp_set>

0001cc68 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1cc68:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cc6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cc6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1cc72:	3201      	adds	r2, #1
   1cc74:	d008      	beq.n	1cc88 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1cc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1cc7a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cc7e:	f013 0301 	ands.w	r3, r3, #1
   1cc82:	d10a      	bne.n	1cc9a <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1cc84:	4618      	mov	r0, r3
}
   1cc86:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cc88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1cc8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cc90:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cc92:	4293      	cmp	r3, r2
   1cc94:	d1ef      	bne.n	1cc76 <hci_vendor_read_static_addr+0xe>
	return 0;
   1cc96:	2000      	movs	r0, #0
}
   1cc98:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1cc9a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1cc9e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cca0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cca2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cca6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1ccaa:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1ccac:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1ccae:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1ccb2:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1ccb6:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1ccb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1ccbc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ccc0:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ccc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1ccc6:	3301      	adds	r3, #1
   1ccc8:	d03b      	beq.n	1cd42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ccca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ccce:	3301      	adds	r3, #1
   1ccd0:	d037      	beq.n	1cd42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ccd2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ccd6:	3301      	adds	r3, #1
   1ccd8:	d033      	beq.n	1cd42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1ccda:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ccde:	3301      	adds	r3, #1
   1cce0:	d02f      	beq.n	1cd42 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1cce2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1cce6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1cce8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1ccea:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1ccee:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1ccf2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1ccf4:	f880 c009 	strb.w	ip, [r0, #9]
   1ccf8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1ccfa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1ccfe:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1cd00:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cd02:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cd06:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cd0a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1cd0c:	f880 c00d 	strb.w	ip, [r0, #13]
   1cd10:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1cd12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1cd16:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1cd18:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cd1a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cd1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cd22:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1cd24:	73c3      	strb	r3, [r0, #15]
   1cd26:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1cd2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1cd2e:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1cd30:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cd32:	0a11      	lsrs	r1, r2, #8
   1cd34:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cd38:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1cd3a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1cd3c:	7541      	strb	r1, [r0, #21]
		return 1;
   1cd3e:	2001      	movs	r0, #1
}
   1cd40:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1cd42:	2210      	movs	r2, #16
   1cd44:	2100      	movs	r1, #0
   1cd46:	3006      	adds	r0, #6
   1cd48:	f007 fe34 	bl	249b4 <memset>
		return 1;
   1cd4c:	2001      	movs	r0, #1
}
   1cd4e:	bd08      	pop	{r3, pc}

0001cd50 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1cd50:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1cd52:	2210      	movs	r2, #16
{
   1cd54:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1cd56:	2100      	movs	r1, #0
   1cd58:	f007 fe2c 	bl	249b4 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cd5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cd60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1cd64:	3201      	adds	r2, #1
   1cd66:	d034      	beq.n	1cdd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cd68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cd6c:	3201      	adds	r2, #1
   1cd6e:	d030      	beq.n	1cdd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cd70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cd74:	3201      	adds	r2, #1
   1cd76:	d02c      	beq.n	1cdd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1cd78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cd7c:	3201      	adds	r2, #1
   1cd7e:	d028      	beq.n	1cdd2 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1cd80:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1cd84:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cd86:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cd88:	0a08      	lsrs	r0, r1, #8
   1cd8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cd8e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1cd90:	70e0      	strb	r0, [r4, #3]
   1cd92:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1cd94:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1cd98:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1cd9a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cd9c:	0a08      	lsrs	r0, r1, #8
   1cd9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cda2:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1cda4:	71e0      	strb	r0, [r4, #7]
   1cda6:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1cda8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1cdac:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1cdae:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cdb0:	0a08      	lsrs	r0, r1, #8
   1cdb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1cdb6:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1cdb8:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1cdba:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1cdbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1cdc0:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1cdc2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cdc4:	0a11      	lsrs	r1, r2, #8
   1cdc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cdca:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1cdcc:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1cdce:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1cdd0:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1cdd2:	4620      	mov	r0, r4
   1cdd4:	2210      	movs	r2, #16
}
   1cdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1cdda:	2100      	movs	r1, #0
   1cddc:	f007 bdea 	b.w	249b4 <memset>

0001cde0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cde0:	4b02      	ldr	r3, [pc, #8]	; (1cdec <net_buf_pool_get+0xc>)
   1cde2:	222c      	movs	r2, #44	; 0x2c
   1cde4:	fb02 3000 	mla	r0, r2, r0, r3
   1cde8:	4770      	bx	lr
   1cdea:	bf00      	nop
   1cdec:	20000a7c 	.word	0x20000a7c

0001cdf0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cdf0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cdf2:	4b06      	ldr	r3, [pc, #24]	; (1ce0c <net_buf_id+0x1c>)
   1cdf4:	212c      	movs	r1, #44	; 0x2c
   1cdf6:	fb01 3302 	mla	r3, r1, r2, r3
   1cdfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cdfc:	7f1b      	ldrb	r3, [r3, #28]
   1cdfe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ce00:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ce02:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ce06:	fbb0 f0f3 	udiv	r0, r0, r3
   1ce0a:	4770      	bx	lr
   1ce0c:	20000a7c 	.word	0x20000a7c

0001ce10 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ce10:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ce12:	4b0a      	ldr	r3, [pc, #40]	; (1ce3c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ce14:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ce16:	242c      	movs	r4, #44	; 0x2c
   1ce18:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ce1c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ce20:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ce22:	6823      	ldr	r3, [r4, #0]
   1ce24:	429a      	cmp	r2, r3
   1ce26:	bf94      	ite	ls
   1ce28:	600a      	strls	r2, [r1, #0]
   1ce2a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ce2c:	f7ff ffe0 	bl	1cdf0 <net_buf_id>
   1ce30:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ce34:	fb02 3000 	mla	r0, r2, r0, r3
   1ce38:	bd10      	pop	{r4, pc}
   1ce3a:	bf00      	nop
   1ce3c:	20000a7c 	.word	0x20000a7c

0001ce40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ce40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce44:	4605      	mov	r5, r0
   1ce46:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ce48:	4610      	mov	r0, r2
   1ce4a:	4619      	mov	r1, r3
{
   1ce4c:	4691      	mov	r9, r2
   1ce4e:	4698      	mov	r8, r3
   1ce50:	4617      	mov	r7, r2
   1ce52:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ce54:	f00b f9de 	bl	28214 <sys_clock_timeout_end_calc>
   1ce58:	4682      	mov	sl, r0
   1ce5a:	468b      	mov	fp, r1
	__asm__ volatile(
   1ce5c:	f04f 0320 	mov.w	r3, #32
   1ce60:	f3ef 8111 	mrs	r1, BASEPRI
   1ce64:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce68:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ce6c:	8b6b      	ldrh	r3, [r5, #26]
   1ce6e:	2b00      	cmp	r3, #0
   1ce70:	d05a      	beq.n	1cf28 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ce72:	8b2a      	ldrh	r2, [r5, #24]
   1ce74:	429a      	cmp	r2, r3
   1ce76:	d93e      	bls.n	1cef6 <net_buf_alloc_len+0xb6>
   1ce78:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1ce7a:	2200      	movs	r2, #0
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	4628      	mov	r0, r5
   1ce80:	f004 fb86 	bl	21590 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ce84:	9900      	ldr	r1, [sp, #0]
   1ce86:	4604      	mov	r4, r0
   1ce88:	2800      	cmp	r0, #0
   1ce8a:	d034      	beq.n	1cef6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1ce8c:	f381 8811 	msr	BASEPRI, r1
   1ce90:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ce94:	9b01      	ldr	r3, [sp, #4]
   1ce96:	2b00      	cmp	r3, #0
   1ce98:	d056      	beq.n	1cf48 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ce9a:	ea58 0309 	orrs.w	r3, r8, r9
   1ce9e:	d00f      	beq.n	1cec0 <net_buf_alloc_len+0x80>
   1cea0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1cea4:	bf08      	it	eq
   1cea6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1ceaa:	d009      	beq.n	1cec0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1ceac:	f005 fa56 	bl	2235c <sys_clock_tick_get>
   1ceb0:	ebba 0700 	subs.w	r7, sl, r0
   1ceb4:	eb6b 0601 	sbc.w	r6, fp, r1
   1ceb8:	2e00      	cmp	r6, #0
   1ceba:	bfbc      	itt	lt
   1cebc:	2700      	movlt	r7, #0
   1cebe:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cec0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cec2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1cf60 <net_buf_alloc_len+0x120>
   1cec6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1ceca:	fb09 8303 	mla	r3, r9, r3, r8
   1cece:	463a      	mov	r2, r7
   1ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ced2:	681b      	ldr	r3, [r3, #0]
   1ced4:	a901      	add	r1, sp, #4
   1ced6:	681d      	ldr	r5, [r3, #0]
   1ced8:	4620      	mov	r0, r4
   1ceda:	4633      	mov	r3, r6
   1cedc:	47a8      	blx	r5
   1cede:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cee0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cee2:	2800      	cmp	r0, #0
   1cee4:	d131      	bne.n	1cf4a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1cee6:	79a0      	ldrb	r0, [r4, #6]
   1cee8:	4621      	mov	r1, r4
   1ceea:	fb00 8009 	mla	r0, r0, r9, r8
   1ceee:	f00a fefe 	bl	27cee <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cef2:	462c      	mov	r4, r5
}
   1cef4:	e024      	b.n	1cf40 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1cef6:	8b68      	ldrh	r0, [r5, #26]
   1cef8:	1e43      	subs	r3, r0, #1
   1cefa:	836b      	strh	r3, [r5, #26]
   1cefc:	f381 8811 	msr	BASEPRI, r1
   1cf00:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cf04:	7f2a      	ldrb	r2, [r5, #28]
   1cf06:	f102 0417 	add.w	r4, r2, #23
   1cf0a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1cf0e:	8b2c      	ldrh	r4, [r5, #24]
   1cf10:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1cf12:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1cf14:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1cf18:	4811      	ldr	r0, [pc, #68]	; (1cf60 <net_buf_alloc_len+0x120>)
   1cf1a:	4b12      	ldr	r3, [pc, #72]	; (1cf64 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1cf1c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1cf1e:	1a2d      	subs	r5, r5, r0
   1cf20:	10ad      	asrs	r5, r5, #2
   1cf22:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1cf24:	71a5      	strb	r5, [r4, #6]
		goto success;
   1cf26:	e7b5      	b.n	1ce94 <net_buf_alloc_len+0x54>
   1cf28:	f381 8811 	msr	BASEPRI, r1
   1cf2c:	f3bf 8f6f 	isb	sy
   1cf30:	464a      	mov	r2, r9
   1cf32:	4643      	mov	r3, r8
   1cf34:	4628      	mov	r0, r5
   1cf36:	f004 fb2b 	bl	21590 <z_impl_k_queue_get>
	if (!buf) {
   1cf3a:	4604      	mov	r4, r0
   1cf3c:	2800      	cmp	r0, #0
   1cf3e:	d1a9      	bne.n	1ce94 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cf40:	4620      	mov	r0, r4
   1cf42:	b003      	add	sp, #12
   1cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1cf48:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1cf4a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1cf4c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1cf4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1cf50:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1cf52:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1cf54:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1cf56:	6923      	ldr	r3, [r4, #16]
   1cf58:	81e2      	strh	r2, [r4, #14]
   1cf5a:	60a3      	str	r3, [r4, #8]
	return buf;
   1cf5c:	e7f0      	b.n	1cf40 <net_buf_alloc_len+0x100>
   1cf5e:	bf00      	nop
   1cf60:	20000a7c 	.word	0x20000a7c
   1cf64:	ba2e8ba3 	.word	0xba2e8ba3

0001cf68 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1cf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf6c:	4d16      	ldr	r5, [pc, #88]	; (1cfc8 <net_buf_unref+0x60>)
   1cf6e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1cf70:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1cf72:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1cf74:	b90c      	cbnz	r4, 1cf7a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1cf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1cf7a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1cf7c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1cf80:	3b01      	subs	r3, #1
   1cf82:	b2db      	uxtb	r3, r3
   1cf84:	7123      	strb	r3, [r4, #4]
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	d1f5      	bne.n	1cf76 <net_buf_unref+0xe>
		if (buf->__buf) {
   1cf8a:	6921      	ldr	r1, [r4, #16]
   1cf8c:	b159      	cbz	r1, 1cfa6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1cf8e:	7963      	ldrb	r3, [r4, #5]
   1cf90:	079b      	lsls	r3, r3, #30
   1cf92:	d407      	bmi.n	1cfa4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf94:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1cf96:	fb07 5303 	mla	r3, r7, r3, r5
   1cf9a:	4620      	mov	r0, r4
   1cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cf9e:	681b      	ldr	r3, [r3, #0]
   1cfa0:	689b      	ldr	r3, [r3, #8]
   1cfa2:	4798      	blx	r3
			buf->__buf = NULL;
   1cfa4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1cfa6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1cfa8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1cfaa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1cfae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1cfb0:	6a1b      	ldr	r3, [r3, #32]
   1cfb2:	b11b      	cbz	r3, 1cfbc <net_buf_unref+0x54>
			pool->destroy(buf);
   1cfb4:	4620      	mov	r0, r4
   1cfb6:	4798      	blx	r3
{
   1cfb8:	4644      	mov	r4, r8
   1cfba:	e7db      	b.n	1cf74 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1cfbc:	4621      	mov	r1, r4
   1cfbe:	fb00 5007 	mla	r0, r0, r7, r5
   1cfc2:	f00a fe94 	bl	27cee <k_queue_prepend>
}
   1cfc6:	e7f7      	b.n	1cfb8 <net_buf_unref+0x50>
   1cfc8:	20000a7c 	.word	0x20000a7c

0001cfcc <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1cfcc:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1cfd0:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1cfd2:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1cfd4:	d004      	beq.n	1cfe0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   1cfd6:	f010 0f78 	tst.w	r0, #120	; 0x78
   1cfda:	d001      	beq.n	1cfe0 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   1cfdc:	2000      	movs	r0, #0
   1cfde:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1cfe0:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1cfe2:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1cfe6:	f000 0008 	and.w	r0, r0, #8
   1cfea:	da05      	bge.n	1cff8 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1cfec:	b958      	cbnz	r0, 1d006 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   1cfee:	4808      	ldr	r0, [pc, #32]	; (1d010 <endpoint_ctx+0x44>)
   1cff0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1cff4:	304c      	adds	r0, #76	; 0x4c
   1cff6:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1cff8:	b938      	cbnz	r0, 1d00a <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1cffa:	4805      	ldr	r0, [pc, #20]	; (1d010 <endpoint_ctx+0x44>)
   1cffc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d000:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   1d004:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   1d006:	4803      	ldr	r0, [pc, #12]	; (1d014 <endpoint_ctx+0x48>)
   1d008:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1d00a:	4803      	ldr	r0, [pc, #12]	; (1d018 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   1d00c:	4770      	bx	lr
   1d00e:	bf00      	nop
   1d010:	20003790 	.word	0x20003790
   1d014:	200038dc 	.word	0x200038dc
   1d018:	200039fc 	.word	0x200039fc

0001d01c <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   1d01c:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   1d01e:	4801      	ldr	r0, [pc, #4]	; (1d024 <usbd_evt_put+0x8>)
   1d020:	f00a be5a 	b.w	27cd8 <k_queue_append>
   1d024:	20000a64 	.word	0x20000a64

0001d028 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1d028:	4901      	ldr	r1, [pc, #4]	; (1d030 <usbd_work_schedule+0x8>)
   1d02a:	4802      	ldr	r0, [pc, #8]	; (1d034 <usbd_work_schedule+0xc>)
   1d02c:	f00a bf2e 	b.w	27e8c <k_work_submit_to_queue>
   1d030:	200037b8 	.word	0x200037b8
   1d034:	20001b90 	.word	0x20001b90

0001d038 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1d038:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1d03a:	480b      	ldr	r0, [pc, #44]	; (1d068 <usb_init+0x30>)
   1d03c:	f002 fe08 	bl	1fc50 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   1d040:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   1d042:	480a      	ldr	r0, [pc, #40]	; (1d06c <usb_init+0x34>)
   1d044:	f002 fe4a 	bl	1fcdc <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   1d048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d04c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d050:	4907      	ldr	r1, [pc, #28]	; (1d070 <usb_init+0x38>)
   1d052:	4808      	ldr	r0, [pc, #32]	; (1d074 <usb_init+0x3c>)
   1d054:	9400      	str	r4, [sp, #0]
   1d056:	f004 fc41 	bl	218dc <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1d05a:	4907      	ldr	r1, [pc, #28]	; (1d078 <usb_init+0x40>)
   1d05c:	4807      	ldr	r0, [pc, #28]	; (1d07c <usb_init+0x44>)
   1d05e:	f00a ff0c 	bl	27e7a <k_work_init>

	return 0;
}
   1d062:	4620      	mov	r0, r4
   1d064:	b002      	add	sp, #8
   1d066:	bd10      	pop	{r4, pc}
   1d068:	0002c74c 	.word	0x0002c74c
   1d06c:	0002a124 	.word	0x0002a124
   1d070:	200063e0 	.word	0x200063e0
   1d074:	20001b90 	.word	0x20001b90
   1d078:	0001d471 	.word	0x0001d471
   1d07c:	200037b8 	.word	0x200037b8

0001d080 <usbd_evt_get>:
   1d080:	4802      	ldr	r0, [pc, #8]	; (1d08c <usbd_evt_get+0xc>)
   1d082:	2200      	movs	r2, #0
   1d084:	2300      	movs	r3, #0
   1d086:	f004 ba83 	b.w	21590 <z_impl_k_queue_get>
   1d08a:	bf00      	nop
   1d08c:	20000a64 	.word	0x20000a64

0001d090 <usbd_evt_flush>:
{
   1d090:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d092:	4c05      	ldr	r4, [pc, #20]	; (1d0a8 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   1d094:	f7ff fff4 	bl	1d080 <usbd_evt_get>
		if (ev) {
   1d098:	b120      	cbz	r0, 1d0a4 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d09a:	1d01      	adds	r1, r0, #4
   1d09c:	4620      	mov	r0, r4
   1d09e:	f00a fd53 	bl	27b48 <k_mem_slab_free>
	} while (ev != NULL);
   1d0a2:	e7f7      	b.n	1d094 <usbd_evt_flush+0x4>
}
   1d0a4:	bd10      	pop	{r4, pc}
   1d0a6:	bf00      	nop
   1d0a8:	20000988 	.word	0x20000988

0001d0ac <usbd_evt_alloc>:
{
   1d0ac:	b510      	push	{r4, lr}
   1d0ae:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1d0b0:	4819      	ldr	r0, [pc, #100]	; (1d118 <usbd_evt_alloc+0x6c>)
   1d0b2:	2200      	movs	r2, #0
   1d0b4:	2300      	movs	r3, #0
   1d0b6:	4669      	mov	r1, sp
   1d0b8:	f004 f8ac 	bl	21214 <k_mem_slab_alloc>
   1d0bc:	b340      	cbz	r0, 1d110 <usbd_evt_alloc+0x64>
		LOG_ERR("USBD event allocation failed!");
   1d0be:	4b17      	ldr	r3, [pc, #92]	; (1d11c <usbd_evt_alloc+0x70>)
   1d0c0:	4817      	ldr	r0, [pc, #92]	; (1d120 <usbd_evt_alloc+0x74>)
   1d0c2:	9306      	str	r3, [sp, #24]
   1d0c4:	aa05      	add	r2, sp, #20
   1d0c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0ca:	2402      	movs	r4, #2
   1d0cc:	9401      	str	r4, [sp, #4]
   1d0ce:	9405      	str	r4, [sp, #20]
   1d0d0:	f00a f852 	bl	27178 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
   1d0d4:	f7ff ffdc 	bl	1d090 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1d0d8:	480f      	ldr	r0, [pc, #60]	; (1d118 <usbd_evt_alloc+0x6c>)
   1d0da:	2200      	movs	r2, #0
   1d0dc:	2300      	movs	r3, #0
   1d0de:	4669      	mov	r1, sp
   1d0e0:	f004 f898 	bl	21214 <k_mem_slab_alloc>
   1d0e4:	b158      	cbz	r0, 1d0fe <usbd_evt_alloc+0x52>
			LOG_ERR("USBD event memory corrupted");
   1d0e6:	4b0f      	ldr	r3, [pc, #60]	; (1d124 <usbd_evt_alloc+0x78>)
   1d0e8:	480d      	ldr	r0, [pc, #52]	; (1d120 <usbd_evt_alloc+0x74>)
   1d0ea:	9306      	str	r3, [sp, #24]
   1d0ec:	aa05      	add	r2, sp, #20
   1d0ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0f2:	9401      	str	r4, [sp, #4]
   1d0f4:	9405      	str	r4, [sp, #20]
   1d0f6:	f00a f83f 	bl	27178 <z_log_msg2_static_create.constprop.0>
			return NULL;
   1d0fa:	2000      	movs	r0, #0
   1d0fc:	e00a      	b.n	1d114 <usbd_evt_alloc+0x68>
		ev = (struct usbd_event *)block.data;
   1d0fe:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
   1d100:	2304      	movs	r3, #4
		ev->block = block;
   1d102:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1d104:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   1d106:	f7ff ff89 	bl	1d01c <usbd_evt_put>
		usbd_work_schedule();
   1d10a:	f7ff ff8d 	bl	1d028 <usbd_work_schedule>
		return NULL;
   1d10e:	e7f4      	b.n	1d0fa <usbd_evt_alloc+0x4e>
	ev = (struct usbd_event *)block.data;
   1d110:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
   1d112:	6040      	str	r0, [r0, #4]
}
   1d114:	b008      	add	sp, #32
   1d116:	bd10      	pop	{r4, pc}
   1d118:	20000988 	.word	0x20000988
   1d11c:	0002c53b 	.word	0x0002c53b
   1d120:	00028a20 	.word	0x00028a20
   1d124:	0002c559 	.word	0x0002c559

0001d128 <usbd_event_transfer_data>:
{
   1d128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d12a:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
   1d12c:	7881      	ldrb	r1, [r0, #2]
{
   1d12e:	4606      	mov	r6, r0
   1d130:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1d132:	4608      	mov	r0, r1
   1d134:	f7ff ff4a 	bl	1cfcc <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1d138:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   1d13a:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   1d13c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1d13e:	d525      	bpl.n	1d18c <usbd_event_transfer_data+0x64>
		switch (p_event->data.eptransfer.status) {
   1d140:	b19c      	cbz	r4, 1d16a <usbd_event_transfer_data+0x42>
   1d142:	2c03      	cmp	r4, #3
   1d144:	d01f      	beq.n	1d186 <usbd_event_transfer_data+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1d146:	4b2c      	ldr	r3, [pc, #176]	; (1d1f8 <usbd_event_transfer_data+0xd0>)
   1d148:	482c      	ldr	r0, [pc, #176]	; (1d1fc <usbd_event_transfer_data+0xd4>)
   1d14a:	466d      	mov	r5, sp
   1d14c:	b088      	sub	sp, #32
   1d14e:	466a      	mov	r2, sp
   1d150:	e9c2 3404 	strd	r3, r4, [r2, #16]
   1d154:	2304      	movs	r3, #4
   1d156:	6191      	str	r1, [r2, #24]
   1d158:	607b      	str	r3, [r7, #4]
   1d15a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d15e:	f842 3f0c 	str.w	r3, [r2, #12]!
   1d162:	f00a f809 	bl	27178 <z_log_msg2_static_create.constprop.0>
   1d166:	46ad      	mov	sp, r5
		break;
   1d168:	e00d      	b.n	1d186 <usbd_event_transfer_data+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
   1d16a:	f7ff ff9f 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d16e:	4603      	mov	r3, r0
   1d170:	b148      	cbz	r0, 1d186 <usbd_event_transfer_data+0x5e>
			ev->evt_type = USBD_EVT_EP;
   1d172:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1d174:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1d176:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1d178:	2203      	movs	r2, #3
   1d17a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1d17c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   1d17e:	f7ff ff4d 	bl	1d01c <usbd_evt_put>
			usbd_work_schedule();
   1d182:	f7ff ff51 	bl	1d028 <usbd_work_schedule>
}
   1d186:	370c      	adds	r7, #12
   1d188:	46bd      	mov	sp, r7
   1d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
   1d18c:	b154      	cbz	r4, 1d1a4 <usbd_event_transfer_data+0x7c>
   1d18e:	2c01      	cmp	r4, #1
   1d190:	d1d9      	bne.n	1d146 <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
   1d192:	f7ff ff8b 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d196:	4603      	mov	r3, r0
   1d198:	2800      	cmp	r0, #0
   1d19a:	d0f4      	beq.n	1d186 <usbd_event_transfer_data+0x5e>
			ep_ctx->read_pending = true;
   1d19c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1d19e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1d1a0:	7304      	strb	r4, [r0, #12]
   1d1a2:	e7eb      	b.n	1d17c <usbd_event_transfer_data+0x54>
			struct usbd_event *ev = usbd_evt_alloc();
   1d1a4:	f7ff ff82 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d1a8:	2800      	cmp	r0, #0
   1d1aa:	d0ec      	beq.n	1d186 <usbd_event_transfer_data+0x5e>
				p_event->data.eptransfer.ep);
   1d1ac:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   1d1ae:	4b14      	ldr	r3, [pc, #80]	; (1d200 <usbd_event_transfer_data+0xd8>)
   1d1b0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d1b4:	f002 0108 	and.w	r1, r2, #8
   1d1b8:	d011      	beq.n	1d1de <usbd_event_transfer_data+0xb6>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1d1ba:	b141      	cbz	r1, 1d1ce <usbd_event_transfer_data+0xa6>
        {
            ret = p_reg->ISOIN.AMOUNT;
   1d1bc:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1d1c0:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   1d1c2:	2301      	movs	r3, #1
   1d1c4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1d1c6:	2302      	movs	r3, #2
   1d1c8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1d1ca:	6085      	str	r5, [r0, #8]
   1d1cc:	e7d7      	b.n	1d17e <usbd_event_transfer_data+0x56>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   1d1ce:	f002 020f 	and.w	r2, r2, #15
   1d1d2:	2114      	movs	r1, #20
   1d1d4:	fb01 3302 	mla	r3, r1, r2, r3
   1d1d8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1d1dc:	e7f0      	b.n	1d1c0 <usbd_event_transfer_data+0x98>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1d1de:	b111      	cbz	r1, 1d1e6 <usbd_event_transfer_data+0xbe>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1d1e0:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1d1e4:	e7ec      	b.n	1d1c0 <usbd_event_transfer_data+0x98>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   1d1e6:	f002 020f 	and.w	r2, r2, #15
   1d1ea:	2114      	movs	r1, #20
   1d1ec:	fb01 3302 	mla	r3, r1, r2, r3
   1d1f0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1d1f4:	e7e4      	b.n	1d1c0 <usbd_event_transfer_data+0x98>
   1d1f6:	bf00      	nop
   1d1f8:	0002c575 	.word	0x0002c575
   1d1fc:	00028a20 	.word	0x00028a20
   1d200:	40027000 	.word	0x40027000

0001d204 <usb_dc_power_event_handler>:
{
   1d204:	b510      	push	{r4, lr}
   1d206:	2802      	cmp	r0, #2
   1d208:	b088      	sub	sp, #32
   1d20a:	d812      	bhi.n	1d232 <usb_dc_power_event_handler+0x2e>
   1d20c:	4b10      	ldr	r3, [pc, #64]	; (1d250 <usb_dc_power_event_handler+0x4c>)
   1d20e:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   1d210:	f7ff ff4c 	bl	1d0ac <usbd_evt_alloc>
	if (!ev) {
   1d214:	b1c8      	cbz	r0, 1d24a <usb_dc_power_event_handler+0x46>
	ev->evt_type = USBD_EVT_POWER;
   1d216:	2200      	movs	r2, #0
   1d218:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   1d21a:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   1d21c:	f7ff fefe 	bl	1d01c <usbd_evt_put>
	if (usbd_ctx.attached) {
   1d220:	4b0c      	ldr	r3, [pc, #48]	; (1d254 <usb_dc_power_event_handler+0x50>)
   1d222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1d226:	b183      	cbz	r3, 1d24a <usb_dc_power_event_handler+0x46>
}
   1d228:	b008      	add	sp, #32
   1d22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   1d22e:	f7ff befb 	b.w	1d028 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
   1d232:	4b09      	ldr	r3, [pc, #36]	; (1d258 <usb_dc_power_event_handler+0x54>)
   1d234:	aa05      	add	r2, sp, #20
	switch (event) {
   1d236:	e9cd 3006 	strd	r3, r0, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
   1d23a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d23e:	2303      	movs	r3, #3
   1d240:	4806      	ldr	r0, [pc, #24]	; (1d25c <usb_dc_power_event_handler+0x58>)
   1d242:	9301      	str	r3, [sp, #4]
   1d244:	9305      	str	r3, [sp, #20]
   1d246:	f009 ff97 	bl	27178 <z_log_msg2_static_create.constprop.0>
}
   1d24a:	b008      	add	sp, #32
   1d24c:	bd10      	pop	{r4, pc}
   1d24e:	bf00      	nop
   1d250:	0002c749 	.word	0x0002c749
   1d254:	20003790 	.word	0x20003790
   1d258:	0002c5a1 	.word	0x0002c5a1
   1d25c:	00028a20 	.word	0x00028a20

0001d260 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   1d260:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d262:	490f      	ldr	r1, [pc, #60]	; (1d2a0 <hfxo_stop.constprop.0.isra.0+0x40>)
   1d264:	f3bf 8f5b 	dmb	ish
   1d268:	f101 0320 	add.w	r3, r1, #32
   1d26c:	2200      	movs	r2, #0
   1d26e:	e853 0f00 	ldrex	r0, [r3]
   1d272:	2801      	cmp	r0, #1
   1d274:	d103      	bne.n	1d27e <hfxo_stop.constprop.0.isra.0+0x1e>
   1d276:	e843 2400 	strex	r4, r2, [r3]
   1d27a:	2c00      	cmp	r4, #0
   1d27c:	d1f7      	bne.n	1d26e <hfxo_stop.constprop.0.isra.0+0xe>
   1d27e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   1d282:	d10b      	bne.n	1d29c <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1d284:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1d286:	310c      	adds	r1, #12
   1d288:	4620      	mov	r0, r4
   1d28a:	f005 fb3f 	bl	2290c <onoff_cancel>

	if (rv == -EALREADY) {
   1d28e:	3078      	adds	r0, #120	; 0x78
   1d290:	d104      	bne.n	1d29c <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   1d292:	4620      	mov	r0, r4
}
   1d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d298:	f005 bb13 	b.w	228c2 <onoff_release>
   1d29c:	bd10      	pop	{r4, pc}
   1d29e:	bf00      	nop
   1d2a0:	20003790 	.word	0x20003790

0001d2a4 <usbd_event_handler>:
{
   1d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2a6:	b08d      	sub	sp, #52	; 0x34
   1d2a8:	4606      	mov	r6, r0
   1d2aa:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   1d2ac:	2214      	movs	r2, #20
   1d2ae:	2100      	movs	r1, #0
   1d2b0:	1d38      	adds	r0, r7, #4
   1d2b2:	f007 fb7f 	bl	249b4 <memset>
	switch (p_event->type) {
   1d2b6:	7833      	ldrb	r3, [r6, #0]
   1d2b8:	3b01      	subs	r3, #1
   1d2ba:	2b05      	cmp	r3, #5
   1d2bc:	d820      	bhi.n	1d300 <usbd_event_handler+0x5c>
   1d2be:	e8df f003 	tbb	[pc, r3]
   1d2c2:	0397      	.short	0x0397
   1d2c4:	15881313 	.word	0x15881313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   1d2c8:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1d2ca:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
   1d2cc:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1d2ce:	f7ff feed 	bl	1d0ac <usbd_evt_alloc>
		if (!ev) {
   1d2d2:	4603      	mov	r3, r0
   1d2d4:	b1a0      	cbz	r0, 1d300 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   1d2d6:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   1d2d8:	f100 0208 	add.w	r2, r0, #8
   1d2dc:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
   1d2e0:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   1d2e4:	4618      	mov	r0, r3
   1d2e6:	e031      	b.n	1d34c <usbd_event_handler+0xa8>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1d2e8:	2304      	movs	r3, #4
   1d2ea:	e7ee      	b.n	1d2ca <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1d2ec:	78b1      	ldrb	r1, [r6, #2]
   1d2ee:	4608      	mov	r0, r1
   1d2f0:	f7ff fe6c 	bl	1cfcc <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   1d2f4:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1d2f6:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   1d2f8:	b12b      	cbz	r3, 1d306 <usbd_event_handler+0x62>
   1d2fa:	3b01      	subs	r3, #1
   1d2fc:	2b02      	cmp	r3, #2
   1d2fe:	d964      	bls.n	1d3ca <usbd_event_handler+0x126>
}
   1d300:	3734      	adds	r7, #52	; 0x34
   1d302:	46bd      	mov	sp, r7
   1d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1d306:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   1d308:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1d30a:	d524      	bpl.n	1d356 <usbd_event_handler+0xb2>
		switch (p_event->data.eptransfer.status) {
   1d30c:	b19c      	cbz	r4, 1d336 <usbd_event_handler+0x92>
   1d30e:	2c03      	cmp	r4, #3
   1d310:	d0f6      	beq.n	1d300 <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1d312:	4b38      	ldr	r3, [pc, #224]	; (1d3f4 <usbd_event_handler+0x150>)
   1d314:	4838      	ldr	r0, [pc, #224]	; (1d3f8 <usbd_event_handler+0x154>)
   1d316:	466d      	mov	r5, sp
   1d318:	b088      	sub	sp, #32
   1d31a:	466a      	mov	r2, sp
   1d31c:	e9c2 3404 	strd	r3, r4, [r2, #16]
   1d320:	2304      	movs	r3, #4
   1d322:	6191      	str	r1, [r2, #24]
   1d324:	61bb      	str	r3, [r7, #24]
   1d326:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d32a:	f842 3f0c 	str.w	r3, [r2, #12]!
   1d32e:	f009 ff23 	bl	27178 <z_log_msg2_static_create.constprop.0>
   1d332:	46ad      	mov	sp, r5
		break;
   1d334:	e7e4      	b.n	1d300 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1d336:	f7ff feb9 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d33a:	4603      	mov	r3, r0
   1d33c:	2800      	cmp	r0, #0
   1d33e:	d0df      	beq.n	1d300 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1d340:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   1d342:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1d344:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1d346:	2203      	movs	r2, #3
   1d348:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1d34a:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   1d34c:	f7ff fe66 	bl	1d01c <usbd_evt_put>
		usbd_work_schedule();
   1d350:	f7ff fe6a 	bl	1d028 <usbd_work_schedule>
   1d354:	e7d4      	b.n	1d300 <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
   1d356:	b154      	cbz	r4, 1d36e <usbd_event_handler+0xca>
   1d358:	2c01      	cmp	r4, #1
   1d35a:	d1da      	bne.n	1d312 <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
   1d35c:	f7ff fea6 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d360:	4603      	mov	r3, r0
   1d362:	2800      	cmp	r0, #0
   1d364:	d0cc      	beq.n	1d300 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   1d366:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1d368:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1d36a:	7304      	strb	r4, [r0, #12]
   1d36c:	e7ed      	b.n	1d34a <usbd_event_handler+0xa6>
			struct usbd_event *ev = usbd_evt_alloc();
   1d36e:	f7ff fe9d 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1d372:	4604      	mov	r4, r0
   1d374:	2800      	cmp	r0, #0
   1d376:	d0c3      	beq.n	1d300 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   1d378:	2301      	movs	r3, #1
   1d37a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1d37c:	2302      	movs	r3, #2
   1d37e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1d380:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   1d382:	f105 010c 	add.w	r1, r5, #12
   1d386:	78b0      	ldrb	r0, [r6, #2]
   1d388:	f00a fb27 	bl	279da <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   1d38c:	b160      	cbz	r0, 1d3a8 <usbd_event_handler+0x104>
				LOG_ERR("_ep_status_get failed! Code: %d",
   1d38e:	4b1b      	ldr	r3, [pc, #108]	; (1d3fc <usbd_event_handler+0x158>)
   1d390:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1d394:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
   1d398:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d39c:	2303      	movs	r3, #3
   1d39e:	4816      	ldr	r0, [pc, #88]	; (1d3f8 <usbd_event_handler+0x154>)
   1d3a0:	603b      	str	r3, [r7, #0]
   1d3a2:	627b      	str	r3, [r7, #36]	; 0x24
   1d3a4:	f009 fee8 	bl	27178 <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1d3a8:	4a15      	ldr	r2, [pc, #84]	; (1d400 <usbd_event_handler+0x15c>)
   1d3aa:	68e9      	ldr	r1, [r5, #12]
   1d3ac:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   1d3b0:	428b      	cmp	r3, r1
   1d3b2:	d906      	bls.n	1d3c2 <usbd_event_handler+0x11e>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   1d3b4:	1a5b      	subs	r3, r3, r1
   1d3b6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   1d3ba:	f003 faed 	bl	20998 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   1d3be:	4620      	mov	r0, r4
   1d3c0:	e7c4      	b.n	1d34c <usbd_event_handler+0xa8>
				ctx->ctrl_read_len = 0U;
   1d3c2:	2300      	movs	r3, #0
   1d3c4:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   1d3c8:	e7f9      	b.n	1d3be <usbd_event_handler+0x11a>
			usbd_event_transfer_data(p_event);
   1d3ca:	4630      	mov	r0, r6
   1d3cc:	f7ff feac 	bl	1d128 <usbd_event_transfer_data>
	if (put_evt) {
   1d3d0:	e796      	b.n	1d300 <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
   1d3d2:	f107 0018 	add.w	r0, r7, #24
   1d3d6:	f003 fab9 	bl	2094c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   1d3da:	7e7b      	ldrb	r3, [r7, #25]
   1d3dc:	2b05      	cmp	r3, #5
   1d3de:	d103      	bne.n	1d3e8 <usbd_event_handler+0x144>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1d3e0:	7e3b      	ldrb	r3, [r7, #24]
   1d3e2:	f013 0f60 	tst.w	r3, #96	; 0x60
   1d3e6:	d08b      	beq.n	1d300 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   1d3e8:	4b06      	ldr	r3, [pc, #24]	; (1d404 <usbd_event_handler+0x160>)
   1d3ea:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
   1d3ec:	2401      	movs	r4, #1
   1d3ee:	e76e      	b.n	1d2ce <usbd_event_handler+0x2a>
	switch (p_event->type) {
   1d3f0:	2402      	movs	r4, #2
   1d3f2:	e76c      	b.n	1d2ce <usbd_event_handler+0x2a>
   1d3f4:	0002c575 	.word	0x0002c575
   1d3f8:	00028a20 	.word	0x00028a20
   1d3fc:	0002c5bc 	.word	0x0002c5bc
   1d400:	20003790 	.word	0x20003790
   1d404:	200038fc 	.word	0x200038fc

0001d408 <eps_ctx_init>:
{
   1d408:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1d40a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1d40c:	f064 007f 	orn	r0, r4, #127	; 0x7f
   1d410:	b2c0      	uxtb	r0, r0
   1d412:	f7ff fddb 	bl	1cfcc <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1d416:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1d418:	f009 fe9b 	bl	27152 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1d41c:	2c08      	cmp	r4, #8
   1d41e:	d1f5      	bne.n	1d40c <eps_ctx_init+0x4>
   1d420:	4d0f      	ldr	r5, [pc, #60]	; (1d460 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1d422:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1d424:	b2e0      	uxtb	r0, r4
   1d426:	f7ff fdd1 	bl	1cfcc <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1d42a:	6903      	ldr	r3, [r0, #16]
   1d42c:	b903      	cbnz	r3, 1d430 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   1d42e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1d430:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1d432:	f009 fe8e 	bl	27152 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1d436:	2c08      	cmp	r4, #8
   1d438:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1d43c:	d1f2      	bne.n	1d424 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   1d43e:	4c09      	ldr	r4, [pc, #36]	; (1d464 <eps_ctx_init+0x5c>)
   1d440:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   1d444:	f009 fe85 	bl	27152 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1d448:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   1d44c:	b913      	cbnz	r3, 1d454 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1d44e:	4b06      	ldr	r3, [pc, #24]	; (1d468 <eps_ctx_init+0x60>)
   1d450:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   1d454:	4805      	ldr	r0, [pc, #20]	; (1d46c <eps_ctx_init+0x64>)
   1d456:	f009 fe7c 	bl	27152 <ep_ctx_reset>
}
   1d45a:	2000      	movs	r0, #0
   1d45c:	bd38      	pop	{r3, r4, r5, pc}
   1d45e:	bf00      	nop
   1d460:	20003590 	.word	0x20003590
   1d464:	20003790 	.word	0x20003790
   1d468:	20003190 	.word	0x20003190
   1d46c:	200039fc 	.word	0x200039fc

0001d470 <usbd_work_handler>:
{
   1d470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   1d474:	4cab      	ldr	r4, [pc, #684]	; (1d724 <usbd_work_handler+0x2b4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d476:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 1d728 <usbd_work_handler+0x2b8>
{
   1d47a:	b08b      	sub	sp, #44	; 0x2c
   1d47c:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   1d47e:	f7ff fdff 	bl	1d080 <usbd_evt_get>
   1d482:	4606      	mov	r6, r0
   1d484:	b910      	cbnz	r0, 1d48c <usbd_work_handler+0x1c>
}
   1d486:	b00b      	add	sp, #44	; 0x2c
   1d488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   1d48c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1d490:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d492:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1d496:	b93a      	cbnz	r2, 1d4a8 <usbd_work_handler+0x38>
   1d498:	2b00      	cmp	r3, #0
   1d49a:	f000 80a7 	beq.w	1d5ec <usbd_work_handler+0x17c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d49e:	4649      	mov	r1, r9
   1d4a0:	4640      	mov	r0, r8
   1d4a2:	f00a fb51 	bl	27b48 <k_mem_slab_free>
}
   1d4a6:	e7ea      	b.n	1d47e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   1d4a8:	2b04      	cmp	r3, #4
   1d4aa:	f200 8191 	bhi.w	1d7d0 <usbd_work_handler+0x360>
   1d4ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d4b2:	009d      	.short	0x009d
   1d4b4:	01220005 	.word	0x01220005
   1d4b8:	0174014d 	.word	0x0174014d
			if (!ctx->attached) {
   1d4bc:	f817 3c04 	ldrb.w	r3, [r7, #-4]
   1d4c0:	b96b      	cbnz	r3, 1d4de <usbd_work_handler+0x6e>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   1d4c2:	4b9a      	ldr	r3, [pc, #616]	; (1d72c <usbd_work_handler+0x2bc>)
   1d4c4:	9308      	str	r3, [sp, #32]
   1d4c6:	68b3      	ldr	r3, [r6, #8]
   1d4c8:	4899      	ldr	r0, [pc, #612]	; (1d730 <usbd_work_handler+0x2c0>)
   1d4ca:	7a5b      	ldrb	r3, [r3, #9]
   1d4cc:	9309      	str	r3, [sp, #36]	; 0x24
   1d4ce:	aa07      	add	r2, sp, #28
   1d4d0:	2303      	movs	r3, #3
   1d4d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d4d6:	9301      	str	r3, [sp, #4]
   1d4d8:	9307      	str	r3, [sp, #28]
   1d4da:	f009 fe4d 	bl	27178 <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
   1d4de:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   1d4e0:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   1d4e2:	2b03      	cmp	r3, #3
   1d4e4:	d8db      	bhi.n	1d49e <usbd_work_handler+0x2e>
   1d4e6:	e8df f003 	tbb	[pc, r3]
   1d4ea:	3d02      	.short	0x3d02
   1d4ec:	6e69      	.short	0x6e69
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   1d4ee:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   1d4f0:	2208      	movs	r2, #8
   1d4f2:	2100      	movs	r1, #0
   1d4f4:	4630      	mov	r0, r6
   1d4f6:	f007 fa5d 	bl	249b4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1d4fa:	4a8e      	ldr	r2, [pc, #568]	; (1d734 <usbd_work_handler+0x2c4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1d4fc:	488e      	ldr	r0, [pc, #568]	; (1d738 <usbd_work_handler+0x2c8>)
   1d4fe:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
   1d502:	7033      	strb	r3, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1d504:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
   1d508:	7073      	strb	r3, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   1d50a:	f8d2 3488 	ldr.w	r3, [r2, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1d50e:	f8d2 148c 	ldr.w	r1, [r2, #1164]	; 0x48c
   1d512:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1d516:	8073      	strh	r3, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   1d518:	f8d2 3490 	ldr.w	r3, [r2, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1d51c:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
   1d520:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1d524:	80b3      	strh	r3, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1d526:	f8d2 3498 	ldr.w	r3, [r2, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1d52a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
   1d52e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1d532:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1d534:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1d536:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1d538:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1d53a:	f007 fa30 	bl	2499e <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1d53e:	682b      	ldr	r3, [r5, #0]
   1d540:	7a68      	ldrb	r0, [r5, #9]
   1d542:	2100      	movs	r1, #0
   1d544:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1d546:	f996 3000 	ldrsb.w	r3, [r6]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	db06      	blt.n	1d55c <usbd_work_handler+0xec>
   1d54e:	88f3      	ldrh	r3, [r6, #6]
   1d550:	b123      	cbz	r3, 1d55c <usbd_work_handler+0xec>
		ctx->ctrl_read_len = usbd_setup->wLength;
   1d552:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   1d556:	f003 fa1f 	bl	20998 <nrfx_usbd_setup_data_clear>
   1d55a:	e7a0      	b.n	1d49e <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
   1d55c:	2300      	movs	r3, #0
   1d55e:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   1d562:	e79c      	b.n	1d49e <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
   1d564:	7f6b      	ldrb	r3, [r5, #29]
   1d566:	2b00      	cmp	r3, #0
   1d568:	d099      	beq.n	1d49e <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
   1d56a:	7f2b      	ldrb	r3, [r5, #28]
   1d56c:	2b00      	cmp	r3, #0
   1d56e:	d096      	beq.n	1d49e <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
   1d570:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1d572:	4872      	ldr	r0, [pc, #456]	; (1d73c <usbd_work_handler+0x2cc>)
	ep_ctx->read_pending = false;
   1d574:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1d576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   1d57e:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1d580:	f009 fdfd 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   1d584:	696b      	ldr	r3, [r5, #20]
   1d586:	9301      	str	r3, [sp, #4]
   1d588:	686b      	ldr	r3, [r5, #4]
   1d58a:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1d58e:	a901      	add	r1, sp, #4
   1d590:	7a68      	ldrb	r0, [r5, #9]
   1d592:	f003 f80b 	bl	205ac <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1d596:	4b6a      	ldr	r3, [pc, #424]	; (1d740 <usbd_work_handler+0x2d0>)
   1d598:	4298      	cmp	r0, r3
   1d59a:	d00b      	beq.n	1d5b4 <usbd_work_handler+0x144>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   1d59c:	4b69      	ldr	r3, [pc, #420]	; (1d744 <usbd_work_handler+0x2d4>)
   1d59e:	aa07      	add	r2, sp, #28
   1d5a0:	e9cd 3008 	strd	r3, r0, [sp, #32]
   1d5a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d5a8:	2303      	movs	r3, #3
   1d5aa:	4861      	ldr	r0, [pc, #388]	; (1d730 <usbd_work_handler+0x2c0>)
   1d5ac:	9300      	str	r3, [sp, #0]
   1d5ae:	9307      	str	r3, [sp, #28]
   1d5b0:	f009 fde2 	bl	27178 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
   1d5b4:	4861      	ldr	r0, [pc, #388]	; (1d73c <usbd_work_handler+0x2cc>)
   1d5b6:	f009 fde4 	bl	27182 <k_mutex_unlock.isra.0>
   1d5ba:	e770      	b.n	1d49e <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1d5bc:	682b      	ldr	r3, [r5, #0]
   1d5be:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1d5c0:	7a68      	ldrb	r0, [r5, #9]
   1d5c2:	4798      	blx	r3
		break;
   1d5c4:	e76b      	b.n	1d49e <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1d5c6:	7aab      	ldrb	r3, [r5, #10]
   1d5c8:	b96b      	cbnz	r3, 1d5e6 <usbd_work_handler+0x176>
   1d5ca:	7feb      	ldrb	r3, [r5, #31]
   1d5cc:	b95b      	cbnz	r3, 1d5e6 <usbd_work_handler+0x176>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1d5ce:	485b      	ldr	r0, [pc, #364]	; (1d73c <usbd_work_handler+0x2cc>)
   1d5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5d8:	f009 fdd1 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   1d5dc:	f003 fa0c 	bl	209f8 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   1d5e0:	4856      	ldr	r0, [pc, #344]	; (1d73c <usbd_work_handler+0x2cc>)
   1d5e2:	f009 fdce 	bl	27182 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1d5e6:	682b      	ldr	r3, [r5, #0]
   1d5e8:	2102      	movs	r1, #2
   1d5ea:	e7e9      	b.n	1d5c0 <usbd_work_handler+0x150>
	switch (pwr_evt->state) {
   1d5ec:	7a33      	ldrb	r3, [r6, #8]
   1d5ee:	2b04      	cmp	r3, #4
   1d5f0:	f63f af55 	bhi.w	1d49e <usbd_work_handler+0x2e>
   1d5f4:	e8df f003 	tbb	[pc, r3]
   1d5f8:	6925035b 	.word	0x6925035b
   1d5fc:	75          	.byte	0x75
   1d5fd:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   1d5fe:	f002 ff85 	bl	2050c <nrfx_usbd_is_enabled>
   1d602:	4605      	mov	r5, r0
   1d604:	2800      	cmp	r0, #0
   1d606:	f47f af4a 	bne.w	1d49e <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
   1d60a:	f002 fec3 	bl	20394 <nrfx_usbd_enable>
   1d60e:	f3bf 8f5b 	dmb	ish
   1d612:	494d      	ldr	r1, [pc, #308]	; (1d748 <usbd_work_handler+0x2d8>)
   1d614:	2301      	movs	r3, #1
   1d616:	e851 2f00 	ldrex	r2, [r1]
   1d61a:	2a00      	cmp	r2, #0
   1d61c:	d103      	bne.n	1d626 <usbd_work_handler+0x1b6>
   1d61e:	e841 3000 	strex	r0, r3, [r1]
   1d622:	2800      	cmp	r0, #0
   1d624:	d1f7      	bne.n	1d616 <usbd_work_handler+0x1a6>
   1d626:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1d62a:	f47f af38 	bne.w	1d49e <usbd_work_handler+0x2e>
   1d62e:	f841 5c10 	str.w	r5, [r1, #-16]
   1d632:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1d636:	69e0      	ldr	r0, [r4, #28]
   1d638:	6163      	str	r3, [r4, #20]
   1d63a:	3914      	subs	r1, #20
   1d63c:	f005 f8f8 	bl	22830 <onoff_request>
   1d640:	e72d      	b.n	1d49e <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
   1d642:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   1d644:	f065 007f 	orn	r0, r5, #127	; 0x7f
   1d648:	b2c0      	uxtb	r0, r0
   1d64a:	f7ff fcbf 	bl	1cfcc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1d64e:	7a03      	ldrb	r3, [r0, #8]
   1d650:	b113      	cbz	r3, 1d658 <usbd_work_handler+0x1e8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1d652:	7a40      	ldrb	r0, [r0, #9]
   1d654:	f003 fbbc 	bl	20dd0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   1d658:	3501      	adds	r5, #1
   1d65a:	2d08      	cmp	r5, #8
   1d65c:	d1f2      	bne.n	1d644 <usbd_work_handler+0x1d4>
		if (ep_ctx->cfg.en) {
   1d65e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   1d662:	b11b      	cbz	r3, 1d66c <usbd_work_handler+0x1fc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1d664:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   1d668:	f003 fbb2 	bl	20dd0 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1d66c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1d66e:	b2e8      	uxtb	r0, r5
   1d670:	f7ff fcac 	bl	1cfcc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1d674:	7a03      	ldrb	r3, [r0, #8]
   1d676:	b113      	cbz	r3, 1d67e <usbd_work_handler+0x20e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1d678:	7a40      	ldrb	r0, [r0, #9]
   1d67a:	f003 fba9 	bl	20dd0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1d67e:	3501      	adds	r5, #1
   1d680:	2d08      	cmp	r5, #8
   1d682:	d1f4      	bne.n	1d66e <usbd_work_handler+0x1fe>
		if (ep_ctx->cfg.en) {
   1d684:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1d688:	b11b      	cbz	r3, 1d692 <usbd_work_handler+0x222>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1d68a:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1d68e:	f003 fb9f 	bl	20dd0 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   1d692:	2001      	movs	r0, #1
   1d694:	f002 ff1c 	bl	204d0 <nrfx_usbd_start>
		ctx->ready = true;
   1d698:	2301      	movs	r3, #1
   1d69a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1d69e:	6823      	ldr	r3, [r4, #0]
   1d6a0:	2b00      	cmp	r3, #0
   1d6a2:	f43f aefc 	beq.w	1d49e <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   1d6a6:	2100      	movs	r1, #0
   1d6a8:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   1d6aa:	4798      	blx	r3
   1d6ac:	e6f7      	b.n	1d49e <usbd_work_handler+0x2e>
		ctx->ready = false;
   1d6ae:	2500      	movs	r5, #0
   1d6b0:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   1d6b4:	f003 fb18 	bl	20ce8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1d6b8:	f7ff fdd2 	bl	1d260 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   1d6bc:	6823      	ldr	r3, [r4, #0]
   1d6be:	2b00      	cmp	r3, #0
   1d6c0:	f43f aeed 	beq.w	1d49e <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   1d6c4:	4629      	mov	r1, r5
   1d6c6:	2004      	movs	r0, #4
   1d6c8:	e7ef      	b.n	1d6aa <usbd_work_handler+0x23a>
		if (dev_ready()) {
   1d6ca:	2a00      	cmp	r2, #0
   1d6cc:	f43f aee7 	beq.w	1d49e <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
   1d6d0:	f003 fb22 	bl	20d18 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1d6d4:	6823      	ldr	r3, [r4, #0]
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	f43f aee1 	beq.w	1d49e <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1d6dc:	2100      	movs	r1, #0
   1d6de:	2005      	movs	r0, #5
   1d6e0:	e7e3      	b.n	1d6aa <usbd_work_handler+0x23a>
		if (ctx->status_cb && dev_ready()) {
   1d6e2:	6823      	ldr	r3, [r4, #0]
   1d6e4:	2b00      	cmp	r3, #0
   1d6e6:	f43f aeda 	beq.w	1d49e <usbd_work_handler+0x2e>
   1d6ea:	2a00      	cmp	r2, #0
   1d6ec:	f43f aed7 	beq.w	1d49e <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1d6f0:	2100      	movs	r1, #0
   1d6f2:	2006      	movs	r0, #6
   1d6f4:	e7d9      	b.n	1d6aa <usbd_work_handler+0x23a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1d6f6:	f107 0510 	add.w	r5, r7, #16
   1d6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d6fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d702:	4628      	mov	r0, r5
   1d704:	f009 fd3b 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   1d708:	f7ff fe7e 	bl	1d408 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   1d70c:	4628      	mov	r0, r5
   1d70e:	f009 fd38 	bl	27182 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   1d712:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1d716:	2b00      	cmp	r3, #0
   1d718:	f43f aec1 	beq.w	1d49e <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
   1d71c:	2100      	movs	r1, #0
   1d71e:	2001      	movs	r0, #1
   1d720:	e7c3      	b.n	1d6aa <usbd_work_handler+0x23a>
   1d722:	bf00      	nop
   1d724:	20003790 	.word	0x20003790
   1d728:	20000988 	.word	0x20000988
   1d72c:	0002c5dc 	.word	0x0002c5dc
   1d730:	00028a20 	.word	0x00028a20
   1d734:	40027000 	.word	0x40027000
   1d738:	20003794 	.word	0x20003794
   1d73c:	200037c8 	.word	0x200037c8
   1d740:	0bad0000 	.word	0x0bad0000
   1d744:	0002c602 	.word	0x0002c602
   1d748:	200037b0 	.word	0x200037b0
	if (ep_ctx->cfg.en) {
   1d74c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   1d750:	b193      	cbz	r3, 1d778 <usbd_work_handler+0x308>
		ep_ctx->read_pending = true;
   1d752:	2501      	movs	r5, #1
   1d754:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   1d758:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   1d75c:	f7ff fca6 	bl	1d0ac <usbd_evt_alloc>
		if (!ev) {
   1d760:	b990      	cbnz	r0, 1d788 <usbd_work_handler+0x318>
			LOG_ERR("Failed to alloc evt");
   1d762:	4b22      	ldr	r3, [pc, #136]	; (1d7ec <usbd_work_handler+0x37c>)
   1d764:	9308      	str	r3, [sp, #32]
   1d766:	4822      	ldr	r0, [pc, #136]	; (1d7f0 <usbd_work_handler+0x380>)
   1d768:	2302      	movs	r3, #2
   1d76a:	aa07      	add	r2, sp, #28
   1d76c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d770:	9301      	str	r3, [sp, #4]
   1d772:	9307      	str	r3, [sp, #28]
   1d774:	f009 fd00 	bl	27178 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
   1d778:	f857 3c28 	ldr.w	r3, [r7, #-40]
   1d77c:	2b00      	cmp	r3, #0
   1d77e:	f43f ae8e 	beq.w	1d49e <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
   1d782:	2100      	movs	r1, #0
   1d784:	200a      	movs	r0, #10
   1d786:	e790      	b.n	1d6aa <usbd_work_handler+0x23a>
		ev->evt.ep_evt.ep = ep_ctx;
   1d788:	4a1a      	ldr	r2, [pc, #104]	; (1d7f4 <usbd_work_handler+0x384>)
		ev->evt_type = USBD_EVT_EP;
   1d78a:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1d78c:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1d78e:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   1d790:	f7ff fc44 	bl	1d01c <usbd_evt_put>
		usbd_work_schedule();
   1d794:	f7ff fc48 	bl	1d028 <usbd_work_schedule>
   1d798:	e7ee      	b.n	1d778 <usbd_work_handler+0x308>
				LOG_ERR("USBD event queue full!");
   1d79a:	4b17      	ldr	r3, [pc, #92]	; (1d7f8 <usbd_work_handler+0x388>)
   1d79c:	4814      	ldr	r0, [pc, #80]	; (1d7f0 <usbd_work_handler+0x380>)
   1d79e:	9308      	str	r3, [sp, #32]
   1d7a0:	aa07      	add	r2, sp, #28
   1d7a2:	2302      	movs	r3, #2
   1d7a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d7a8:	9301      	str	r3, [sp, #4]
   1d7aa:	9307      	str	r3, [sp, #28]
   1d7ac:	f009 fce4 	bl	27178 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   1d7b0:	f00a f847 	bl	27842 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1d7b4:	f003 fa98 	bl	20ce8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   1d7b8:	f002 fde2 	bl	20380 <nrfx_usbd_uninit>
	usbd_evt_flush();
   1d7bc:	f7ff fc68 	bl	1d090 <usbd_evt_flush>
	ret = eps_ctx_init();
   1d7c0:	f7ff fe22 	bl	1d408 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1d7c4:	f00a f836 	bl	27834 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   1d7c8:	480c      	ldr	r0, [pc, #48]	; (1d7fc <usbd_work_handler+0x38c>)
   1d7ca:	f002 fea9 	bl	20520 <nrfx_usbd_init>
}
   1d7ce:	e666      	b.n	1d49e <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1d7d0:	4a0b      	ldr	r2, [pc, #44]	; (1d800 <usbd_work_handler+0x390>)
   1d7d2:	4807      	ldr	r0, [pc, #28]	; (1d7f0 <usbd_work_handler+0x380>)
		switch (ev->evt_type) {
   1d7d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1d7d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d7dc:	2303      	movs	r3, #3
   1d7de:	aa07      	add	r2, sp, #28
   1d7e0:	9301      	str	r3, [sp, #4]
   1d7e2:	9307      	str	r3, [sp, #28]
   1d7e4:	f009 fcc8 	bl	27178 <z_log_msg2_static_create.constprop.0>
			break;
   1d7e8:	e659      	b.n	1d49e <usbd_work_handler+0x2e>
   1d7ea:	bf00      	nop
   1d7ec:	0002c628 	.word	0x0002c628
   1d7f0:	00028a20 	.word	0x00028a20
   1d7f4:	200039fc 	.word	0x200039fc
   1d7f8:	0002c63c 	.word	0x0002c63c
   1d7fc:	0001d2a5 	.word	0x0001d2a5
   1d800:	0002c653 	.word	0x0002c653

0001d804 <usb_dc_attach>:
{
   1d804:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1d806:	4d1a      	ldr	r5, [pc, #104]	; (1d870 <usb_dc_attach+0x6c>)
   1d808:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1d80c:	bb5c      	cbnz	r4, 1d866 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   1d80e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1d812:	f00a f9de 	bl	27bd2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1d816:	4620      	mov	r0, r4
   1d818:	f000 fbde 	bl	1dfd8 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d81c:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   1d81e:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d820:	2101      	movs	r1, #1
   1d822:	2027      	movs	r0, #39	; 0x27
   1d824:	f7ea fd56 	bl	82d4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   1d828:	4812      	ldr	r0, [pc, #72]	; (1d874 <usb_dc_attach+0x70>)
   1d82a:	f002 fe79 	bl	20520 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   1d82e:	4b12      	ldr	r3, [pc, #72]	; (1d878 <usb_dc_attach+0x74>)
   1d830:	4298      	cmp	r0, r3
   1d832:	d11a      	bne.n	1d86a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   1d834:	f009 fffe 	bl	27834 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   1d838:	f7ff fde6 	bl	1d408 <eps_ctx_init>
	if (ret == 0) {
   1d83c:	4604      	mov	r4, r0
   1d83e:	b910      	cbnz	r0, 1d846 <usb_dc_attach+0x42>
		ctx->attached = true;
   1d840:	2301      	movs	r3, #1
   1d842:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1d846:	4b0d      	ldr	r3, [pc, #52]	; (1d87c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   1d848:	681b      	ldr	r3, [r3, #0]
   1d84a:	b10b      	cbz	r3, 1d850 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   1d84c:	f7ff fbec 	bl	1d028 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   1d850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d854:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   1d858:	07db      	lsls	r3, r3, #31
   1d85a:	d502      	bpl.n	1d862 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   1d85c:	2000      	movs	r0, #0
   1d85e:	f7ff fcd1 	bl	1d204 <usb_dc_power_event_handler>
}
   1d862:	4620      	mov	r0, r4
   1d864:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1d866:	2400      	movs	r4, #0
   1d868:	e7fb      	b.n	1d862 <usb_dc_attach+0x5e>
		return -EIO;
   1d86a:	f06f 0404 	mvn.w	r4, #4
   1d86e:	e7f8      	b.n	1d862 <usb_dc_attach+0x5e>
   1d870:	20003790 	.word	0x20003790
   1d874:	0001d2a5 	.word	0x0001d2a5
   1d878:	0bad0000 	.word	0x0bad0000
   1d87c:	20000a64 	.word	0x20000a64

0001d880 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   1d880:	4b07      	ldr	r3, [pc, #28]	; (1d8a0 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   1d882:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1d886:	b13a      	cbz	r2, 1d898 <usb_dc_set_address+0x18>
   1d888:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   1d88c:	2b00      	cmp	r3, #0
   1d88e:	bf0c      	ite	eq
   1d890:	f06f 0012 	mvneq.w	r0, #18
   1d894:	2000      	movne	r0, #0
   1d896:	4770      	bx	lr
		return -ENODEV;
   1d898:	f06f 0012 	mvn.w	r0, #18
}
   1d89c:	4770      	bx	lr
   1d89e:	bf00      	nop
   1d8a0:	20003790 	.word	0x20003790

0001d8a4 <usb_dc_ep_check_cap>:
{
   1d8a4:	b500      	push	{lr}
   1d8a6:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1d8a8:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1d8aa:	791b      	ldrb	r3, [r3, #4]
{
   1d8ac:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1d8ae:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1d8b2:	b983      	cbnz	r3, 1d8d6 <usb_dc_ep_check_cap+0x32>
   1d8b4:	b160      	cbz	r0, 1d8d0 <usb_dc_ep_check_cap+0x2c>
		LOG_ERR("invalid endpoint configuration");
   1d8b6:	4b11      	ldr	r3, [pc, #68]	; (1d8fc <usb_dc_ep_check_cap+0x58>)
		LOG_ERR("invalid endpoint index/address");
   1d8b8:	9306      	str	r3, [sp, #24]
   1d8ba:	2302      	movs	r3, #2
   1d8bc:	9301      	str	r3, [sp, #4]
   1d8be:	9305      	str	r3, [sp, #20]
   1d8c0:	aa05      	add	r2, sp, #20
   1d8c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d8c6:	480e      	ldr	r0, [pc, #56]	; (1d900 <usb_dc_ep_check_cap+0x5c>)
   1d8c8:	f009 fc56 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -1;
   1d8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d8d0:	b009      	add	sp, #36	; 0x24
   1d8d2:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   1d8d6:	2808      	cmp	r0, #8
   1d8d8:	d901      	bls.n	1d8de <usb_dc_ep_check_cap+0x3a>
		LOG_ERR("invalid endpoint index/address");
   1d8da:	4b0a      	ldr	r3, [pc, #40]	; (1d904 <usb_dc_ep_check_cap+0x60>)
   1d8dc:	e7ec      	b.n	1d8b8 <usb_dc_ep_check_cap+0x14>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1d8de:	2b01      	cmp	r3, #1
   1d8e0:	d10a      	bne.n	1d8f8 <usb_dc_ep_check_cap+0x54>
   1d8e2:	0713      	lsls	r3, r2, #28
   1d8e4:	d408      	bmi.n	1d8f8 <usb_dc_ep_check_cap+0x54>
		LOG_WRN("invalid endpoint type");
   1d8e6:	4b08      	ldr	r3, [pc, #32]	; (1d908 <usb_dc_ep_check_cap+0x64>)
   1d8e8:	9306      	str	r3, [sp, #24]
   1d8ea:	2302      	movs	r3, #2
   1d8ec:	9301      	str	r3, [sp, #4]
   1d8ee:	9305      	str	r3, [sp, #20]
   1d8f0:	aa05      	add	r2, sp, #20
   1d8f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d8f6:	e7e6      	b.n	1d8c6 <usb_dc_ep_check_cap+0x22>
	return 0;
   1d8f8:	2000      	movs	r0, #0
   1d8fa:	e7e9      	b.n	1d8d0 <usb_dc_ep_check_cap+0x2c>
   1d8fc:	0002c66a 	.word	0x0002c66a
   1d900:	00028a20 	.word	0x00028a20
   1d904:	0002c689 	.word	0x0002c689
   1d908:	0002c6a8 	.word	0x0002c6a8

0001d90c <usb_dc_ep_configure>:
{
   1d90c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1d90e:	4b16      	ldr	r3, [pc, #88]	; (1d968 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
   1d910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   1d914:	b088      	sub	sp, #32
   1d916:	4601      	mov	r1, r0
	if (!dev_attached()) {
   1d918:	b313      	cbz	r3, 1d960 <usb_dc_ep_configure+0x54>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   1d91a:	7804      	ldrb	r4, [r0, #0]
   1d91c:	4620      	mov	r0, r4
   1d91e:	f7ff fb55 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1d922:	b1a0      	cbz	r0, 1d94e <usb_dc_ep_configure+0x42>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   1d924:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1d926:	790b      	ldrb	r3, [r1, #4]
   1d928:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1d92a:	8849      	ldrh	r1, [r1, #2]
   1d92c:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   1d92e:	0723      	lsls	r3, r4, #28
   1d930:	d410      	bmi.n	1d954 <usb_dc_ep_configure+0x48>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   1d932:	1e4b      	subs	r3, r1, #1
   1d934:	420b      	tst	r3, r1
   1d936:	d00d      	beq.n	1d954 <usb_dc_ep_configure+0x48>
			LOG_ERR("EP max packet size must be a power of 2");
   1d938:	4b0c      	ldr	r3, [pc, #48]	; (1d96c <usb_dc_ep_configure+0x60>)
   1d93a:	9306      	str	r3, [sp, #24]
   1d93c:	480c      	ldr	r0, [pc, #48]	; (1d970 <usb_dc_ep_configure+0x64>)
   1d93e:	2302      	movs	r3, #2
   1d940:	aa05      	add	r2, sp, #20
   1d942:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d946:	9301      	str	r3, [sp, #4]
   1d948:	9305      	str	r3, [sp, #20]
   1d94a:	f009 fc15 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1d94e:	f06f 0015 	mvn.w	r0, #21
   1d952:	e003      	b.n	1d95c <usb_dc_ep_configure+0x50>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1d954:	4620      	mov	r0, r4
   1d956:	f00a f83b 	bl	279d0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   1d95a:	2000      	movs	r0, #0
}
   1d95c:	b008      	add	sp, #32
   1d95e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1d960:	f06f 0012 	mvn.w	r0, #18
   1d964:	e7fa      	b.n	1d95c <usb_dc_ep_configure+0x50>
   1d966:	bf00      	nop
   1d968:	20003790 	.word	0x20003790
   1d96c:	0002c6be 	.word	0x0002c6be
   1d970:	00028a20 	.word	0x00028a20

0001d974 <usb_dc_ep_set_stall>:
{
   1d974:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   1d976:	4b19      	ldr	r3, [pc, #100]	; (1d9dc <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
   1d978:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1d97c:	b088      	sub	sp, #32
   1d97e:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1d980:	b342      	cbz	r2, 1d9d4 <usb_dc_ep_set_stall+0x60>
   1d982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1d986:	b32b      	cbz	r3, 1d9d4 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
   1d988:	f7ff fb20 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1d98c:	4604      	mov	r4, r0
   1d98e:	b1f0      	cbz	r0, 1d9ce <usb_dc_ep_set_stall+0x5a>
	switch (ep_ctx->cfg.type) {
   1d990:	7a83      	ldrb	r3, [r0, #10]
   1d992:	2b01      	cmp	r3, #1
   1d994:	d010      	beq.n	1d9b8 <usb_dc_ep_set_stall+0x44>
   1d996:	d908      	bls.n	1d9aa <usb_dc_ep_set_stall+0x36>
   1d998:	3b02      	subs	r3, #2
   1d99a:	2b01      	cmp	r3, #1
   1d99c:	d908      	bls.n	1d9b0 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1d99e:	6963      	ldr	r3, [r4, #20]
   1d9a0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1d9a2:	2000      	movs	r0, #0
   1d9a4:	60e0      	str	r0, [r4, #12]
}
   1d9a6:	b008      	add	sp, #32
   1d9a8:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   1d9aa:	f003 f82d 	bl	20a08 <nrfx_usbd_setup_stall>
		break;
   1d9ae:	e7f6      	b.n	1d99e <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   1d9b0:	4608      	mov	r0, r1
   1d9b2:	f002 ff9d 	bl	208f0 <nrfx_usbd_ep_stall>
		break;
   1d9b6:	e7f2      	b.n	1d99e <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
   1d9b8:	4b09      	ldr	r3, [pc, #36]	; (1d9e0 <usb_dc_ep_set_stall+0x6c>)
   1d9ba:	9306      	str	r3, [sp, #24]
   1d9bc:	4809      	ldr	r0, [pc, #36]	; (1d9e4 <usb_dc_ep_set_stall+0x70>)
   1d9be:	2302      	movs	r3, #2
   1d9c0:	aa05      	add	r2, sp, #20
   1d9c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d9c6:	9301      	str	r3, [sp, #4]
   1d9c8:	9305      	str	r3, [sp, #20]
   1d9ca:	f009 fbd5 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1d9ce:	f06f 0015 	mvn.w	r0, #21
   1d9d2:	e7e8      	b.n	1d9a6 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
   1d9d4:	f06f 0012 	mvn.w	r0, #18
   1d9d8:	e7e5      	b.n	1d9a6 <usb_dc_ep_set_stall+0x32>
   1d9da:	bf00      	nop
   1d9dc:	20003790 	.word	0x20003790
   1d9e0:	0002c6e6 	.word	0x0002c6e6
   1d9e4:	00028a20 	.word	0x00028a20

0001d9e8 <usb_dc_ep_clear_stall>:
{
   1d9e8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1d9ea:	4b0e      	ldr	r3, [pc, #56]	; (1da24 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   1d9ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1d9f0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   1d9f2:	b182      	cbz	r2, 1da16 <usb_dc_ep_clear_stall+0x2e>
   1d9f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1d9f8:	b16b      	cbz	r3, 1da16 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   1d9fa:	f7ff fae7 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1d9fe:	b168      	cbz	r0, 1da1c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   1da00:	f015 0408 	ands.w	r4, r5, #8
   1da04:	d10a      	bne.n	1da1c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1da06:	4628      	mov	r0, r5
   1da08:	f002 ff94 	bl	20934 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1da0c:	4628      	mov	r0, r5
   1da0e:	f003 fa31 	bl	20e74 <nrfx_usbd_ep_stall_clear>
	return 0;
   1da12:	4620      	mov	r0, r4
}
   1da14:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1da16:	f06f 0012 	mvn.w	r0, #18
   1da1a:	e7fb      	b.n	1da14 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   1da1c:	f06f 0015 	mvn.w	r0, #21
   1da20:	e7f8      	b.n	1da14 <usb_dc_ep_clear_stall+0x2c>
   1da22:	bf00      	nop
   1da24:	20003790 	.word	0x20003790

0001da28 <usb_dc_ep_is_stalled>:
{
   1da28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1da2a:	4b0c      	ldr	r3, [pc, #48]	; (1da5c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   1da2c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1da30:	4605      	mov	r5, r0
   1da32:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   1da34:	b162      	cbz	r2, 1da50 <usb_dc_ep_is_stalled+0x28>
   1da36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1da3a:	b14b      	cbz	r3, 1da50 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   1da3c:	f7ff fac6 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1da40:	b148      	cbz	r0, 1da56 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   1da42:	b141      	cbz	r1, 1da56 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1da44:	4628      	mov	r0, r5
   1da46:	f002 ff5b 	bl	20900 <nrfx_usbd_ep_stall_check>
   1da4a:	7020      	strb	r0, [r4, #0]
	return 0;
   1da4c:	2000      	movs	r0, #0
}
   1da4e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1da50:	f06f 0012 	mvn.w	r0, #18
   1da54:	e7fb      	b.n	1da4e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   1da56:	f06f 0015 	mvn.w	r0, #21
   1da5a:	e7f8      	b.n	1da4e <usb_dc_ep_is_stalled+0x26>
   1da5c:	20003790 	.word	0x20003790

0001da60 <usb_dc_ep_enable>:
{
   1da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   1da62:	4f13      	ldr	r7, [pc, #76]	; (1dab0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   1da64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   1da68:	4604      	mov	r4, r0
	if (!dev_attached()) {
   1da6a:	b1bb      	cbz	r3, 1da9c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   1da6c:	f7ff faae 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1da70:	4605      	mov	r5, r0
   1da72:	b1b0      	cbz	r0, 1daa2 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1da74:	0723      	lsls	r3, r4, #28
   1da76:	d405      	bmi.n	1da84 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1da78:	4620      	mov	r0, r4
   1da7a:	f002 ff5b 	bl	20934 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1da7e:	4620      	mov	r0, r4
   1da80:	f003 f9f8 	bl	20e74 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   1da84:	7a2e      	ldrb	r6, [r5, #8]
   1da86:	b97e      	cbnz	r6, 1daa8 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   1da88:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   1da8c:	2301      	movs	r3, #1
   1da8e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   1da90:	b118      	cbz	r0, 1da9a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1da92:	4620      	mov	r0, r4
   1da94:	f003 f99c 	bl	20dd0 <nrfx_usbd_ep_enable>
	return 0;
   1da98:	4630      	mov	r0, r6
}
   1da9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1da9c:	f06f 0012 	mvn.w	r0, #18
   1daa0:	e7fb      	b.n	1da9a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   1daa2:	f06f 0015 	mvn.w	r0, #21
   1daa6:	e7f8      	b.n	1da9a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   1daa8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1daac:	e7f5      	b.n	1da9a <usb_dc_ep_enable+0x3a>
   1daae:	bf00      	nop
   1dab0:	20003790 	.word	0x20003790

0001dab4 <usb_dc_ep_disable>:
{
   1dab4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1dab6:	4b11      	ldr	r3, [pc, #68]	; (1dafc <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   1dab8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1dabc:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1dabe:	b19a      	cbz	r2, 1dae8 <usb_dc_ep_disable+0x34>
   1dac0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1dac4:	b183      	cbz	r3, 1dae8 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   1dac6:	f7ff fa81 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1daca:	4605      	mov	r5, r0
   1dacc:	b178      	cbz	r0, 1daee <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   1dace:	7a03      	ldrb	r3, [r0, #8]
   1dad0:	b183      	cbz	r3, 1daf4 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1dad2:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   1dad4:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1dad6:	f003 f94f 	bl	20d78 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   1dada:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   1dadc:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   1dade:	f009 fb38 	bl	27152 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   1dae2:	722c      	strb	r4, [r5, #8]
	return 0;
   1dae4:	4620      	mov	r0, r4
}
   1dae6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1dae8:	f06f 0012 	mvn.w	r0, #18
   1daec:	e7fb      	b.n	1dae6 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   1daee:	f06f 0015 	mvn.w	r0, #21
   1daf2:	e7f8      	b.n	1dae6 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   1daf4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1daf8:	e7f5      	b.n	1dae6 <usb_dc_ep_disable+0x32>
   1dafa:	bf00      	nop
   1dafc:	20003790 	.word	0x20003790

0001db00 <usb_dc_ep_write>:
{
   1db00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   1db04:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1dc10 <usb_dc_ep_write+0x110>
{
   1db08:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   1db0a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   1db0e:	b08b      	sub	sp, #44	; 0x2c
   1db10:	4607      	mov	r7, r0
   1db12:	4689      	mov	r9, r1
   1db14:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   1db16:	2b00      	cmp	r3, #0
   1db18:	d077      	beq.n	1dc0a <usb_dc_ep_write+0x10a>
   1db1a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   1db1e:	2b00      	cmp	r3, #0
   1db20:	d073      	beq.n	1dc0a <usb_dc_ep_write+0x10a>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   1db22:	0603      	lsls	r3, r0, #24
   1db24:	d511      	bpl.n	1db4a <usb_dc_ep_write+0x4a>
	ep_ctx = endpoint_ctx(ep);
   1db26:	f7ff fa51 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1db2a:	4605      	mov	r5, r0
   1db2c:	b168      	cbz	r0, 1db4a <usb_dc_ep_write+0x4a>
	if (!ep_ctx->cfg.en) {
   1db2e:	7a03      	ldrb	r3, [r0, #8]
   1db30:	b973      	cbnz	r3, 1db50 <usb_dc_ep_write+0x50>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1db32:	4b38      	ldr	r3, [pc, #224]	; (1dc14 <usb_dc_ep_write+0x114>)
   1db34:	4838      	ldr	r0, [pc, #224]	; (1dc18 <usb_dc_ep_write+0x118>)
   1db36:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1db3a:	aa07      	add	r2, sp, #28
   1db3c:	2303      	movs	r3, #3
   1db3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1db42:	9301      	str	r3, [sp, #4]
   1db44:	9307      	str	r3, [sp, #28]
   1db46:	f009 fb17 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1db4a:	f06f 0415 	mvn.w	r4, #21
   1db4e:	e00f      	b.n	1db70 <usb_dc_ep_write+0x70>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1db50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db58:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1db5c:	f009 fb0f 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   1db60:	7fab      	ldrb	r3, [r5, #30]
   1db62:	b14b      	cbz	r3, 1db78 <usb_dc_ep_write+0x78>
		k_mutex_unlock(&ctx->drv_lock);
   1db64:	f108 0038 	add.w	r0, r8, #56	; 0x38
   1db68:	f009 fb0b 	bl	27182 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   1db6c:	f06f 040a 	mvn.w	r4, #10
}
   1db70:	4620      	mov	r0, r4
   1db72:	b00b      	add	sp, #44	; 0x2c
   1db74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   1db78:	b916      	cbnz	r6, 1db80 <usb_dc_ep_write+0x80>
   1db7a:	7feb      	ldrb	r3, [r5, #31]
   1db7c:	b103      	cbz	r3, 1db80 <usb_dc_ep_write+0x80>
		ep_ctx->trans_zlp = false;
   1db7e:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   1db80:	7aab      	ldrb	r3, [r5, #10]
   1db82:	b9bb      	cbnz	r3, 1dbb4 <usb_dc_ep_write+0xb4>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1db84:	b15e      	cbz	r6, 1db9e <usb_dc_ep_write+0x9e>
   1db86:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1db8a:	429e      	cmp	r6, r3
   1db8c:	d207      	bcs.n	1db9e <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   1db8e:	686a      	ldr	r2, [r5, #4]
   1db90:	fbb6 f3f2 	udiv	r3, r6, r2
   1db94:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1db98:	b90b      	cbnz	r3, 1db9e <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   1db9a:	2301      	movs	r3, #1
   1db9c:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   1db9e:	f002 ff3b 	bl	20a18 <nrfx_usbd_last_setup_dir_get>
   1dba2:	4287      	cmp	r7, r0
   1dba4:	d006      	beq.n	1dbb4 <usb_dc_ep_write+0xb4>
		nrfx_usbd_setup_clear();
   1dba6:	f002 ff27 	bl	209f8 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   1dbaa:	481c      	ldr	r0, [pc, #112]	; (1dc1c <usb_dc_ep_write+0x11c>)
   1dbac:	f009 fae9 	bl	27182 <k_mutex_unlock.isra.0>
		return 0;
   1dbb0:	2400      	movs	r4, #0
   1dbb2:	e7dd      	b.n	1db70 <usb_dc_ep_write+0x70>
	ep_ctx->write_in_progress = true;
   1dbb4:	2301      	movs	r3, #1
   1dbb6:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1dbb8:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1dbbc:	a901      	add	r1, sp, #4
   1dbbe:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1dbc0:	e9cd 9601 	strd	r9, r6, [sp, #4]
   1dbc4:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1dbc8:	f002 fcf0 	bl	205ac <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1dbcc:	4b14      	ldr	r3, [pc, #80]	; (1dc20 <usb_dc_ep_write+0x120>)
   1dbce:	4298      	cmp	r0, r3
   1dbd0:	d016      	beq.n	1dc00 <usb_dc_ep_write+0x100>
		ep_ctx->write_in_progress = false;
   1dbd2:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   1dbd6:	b10c      	cbz	r4, 1dbdc <usb_dc_ep_write+0xdc>
			*ret_bytes = 0;
   1dbd8:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   1dbdc:	4b11      	ldr	r3, [pc, #68]	; (1dc24 <usb_dc_ep_write+0x124>)
   1dbde:	aa07      	add	r2, sp, #28
   1dbe0:	e9cd 3008 	strd	r3, r0, [sp, #32]
   1dbe4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dbe8:	2303      	movs	r3, #3
   1dbea:	480b      	ldr	r0, [pc, #44]	; (1dc18 <usb_dc_ep_write+0x118>)
   1dbec:	9300      	str	r3, [sp, #0]
		result = -EIO;
   1dbee:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   1dbf2:	9307      	str	r3, [sp, #28]
   1dbf4:	f009 fac0 	bl	27178 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
   1dbf8:	4808      	ldr	r0, [pc, #32]	; (1dc1c <usb_dc_ep_write+0x11c>)
   1dbfa:	f009 fac2 	bl	27182 <k_mutex_unlock.isra.0>
	return result;
   1dbfe:	e7b7      	b.n	1db70 <usb_dc_ep_write+0x70>
		if (ret_bytes) {
   1dc00:	2c00      	cmp	r4, #0
   1dc02:	d0f9      	beq.n	1dbf8 <usb_dc_ep_write+0xf8>
			*ret_bytes = data_len;
   1dc04:	6026      	str	r6, [r4, #0]
	int result = 0;
   1dc06:	4644      	mov	r4, r8
   1dc08:	e7f6      	b.n	1dbf8 <usb_dc_ep_write+0xf8>
		return -ENODEV;
   1dc0a:	f06f 0412 	mvn.w	r4, #18
   1dc0e:	e7af      	b.n	1db70 <usb_dc_ep_write+0x70>
   1dc10:	20003790 	.word	0x20003790
   1dc14:	0002c708 	.word	0x0002c708
   1dc18:	00028a20 	.word	0x00028a20
   1dc1c:	200037c8 	.word	0x200037c8
   1dc20:	0bad0000 	.word	0x0bad0000
   1dc24:	0002c727 	.word	0x0002c727

0001dc28 <usb_dc_ep_read_wait>:
{
   1dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc2c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   1dc2e:	4b29      	ldr	r3, [pc, #164]	; (1dcd4 <usb_dc_ep_read_wait+0xac>)
{
   1dc30:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   1dc32:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   1dc36:	b088      	sub	sp, #32
   1dc38:	4680      	mov	r8, r0
   1dc3a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   1dc3c:	2a00      	cmp	r2, #0
   1dc3e:	d046      	beq.n	1dcce <usb_dc_ep_read_wait+0xa6>
   1dc40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1dc44:	2b00      	cmp	r3, #0
   1dc46:	d042      	beq.n	1dcce <usb_dc_ep_read_wait+0xa6>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1dc48:	f010 0f80 	tst.w	r0, #128	; 0x80
   1dc4c:	d114      	bne.n	1dc78 <usb_dc_ep_read_wait+0x50>
	if (!data && max_data_len) {
   1dc4e:	b901      	cbnz	r1, 1dc52 <usb_dc_ep_read_wait+0x2a>
   1dc50:	b997      	cbnz	r7, 1dc78 <usb_dc_ep_read_wait+0x50>
	ep_ctx = endpoint_ctx(ep);
   1dc52:	4640      	mov	r0, r8
   1dc54:	f7ff f9ba 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1dc58:	4604      	mov	r4, r0
   1dc5a:	b168      	cbz	r0, 1dc78 <usb_dc_ep_read_wait+0x50>
	if (!ep_ctx->cfg.en) {
   1dc5c:	7a03      	ldrb	r3, [r0, #8]
   1dc5e:	b973      	cbnz	r3, 1dc7e <usb_dc_ep_read_wait+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1dc60:	4b1d      	ldr	r3, [pc, #116]	; (1dcd8 <usb_dc_ep_read_wait+0xb0>)
   1dc62:	481e      	ldr	r0, [pc, #120]	; (1dcdc <usb_dc_ep_read_wait+0xb4>)
   1dc64:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1dc68:	aa05      	add	r2, sp, #20
   1dc6a:	2303      	movs	r3, #3
   1dc6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dc70:	9301      	str	r3, [sp, #4]
   1dc72:	9305      	str	r3, [sp, #20]
   1dc74:	f009 fa80 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1dc78:	f06f 0015 	mvn.w	r0, #21
   1dc7c:	e013      	b.n	1dca6 <usb_dc_ep_read_wait+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1dc7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc82:	4817      	ldr	r0, [pc, #92]	; (1dce0 <usb_dc_ep_read_wait+0xb8>)
   1dc84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc88:	f009 fa79 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   1dc8c:	68e3      	ldr	r3, [r4, #12]
   1dc8e:	42bb      	cmp	r3, r7
   1dc90:	4698      	mov	r8, r3
   1dc92:	bf28      	it	cs
   1dc94:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
   1dc96:	b94e      	cbnz	r6, 1dcac <usb_dc_ep_read_wait+0x84>
   1dc98:	b947      	cbnz	r7, 1dcac <usb_dc_ep_read_wait+0x84>
		if (read_bytes) {
   1dc9a:	b105      	cbz	r5, 1dc9e <usb_dc_ep_read_wait+0x76>
			*read_bytes = ep_ctx->buf.len;
   1dc9c:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   1dc9e:	4810      	ldr	r0, [pc, #64]	; (1dce0 <usb_dc_ep_read_wait+0xb8>)
   1dca0:	f009 fa6f 	bl	27182 <k_mutex_unlock.isra.0>
		return 0;
   1dca4:	2000      	movs	r0, #0
}
   1dca6:	b008      	add	sp, #32
   1dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   1dcac:	69a1      	ldr	r1, [r4, #24]
   1dcae:	4642      	mov	r2, r8
   1dcb0:	4630      	mov	r0, r6
   1dcb2:	f006 fe74 	bl	2499e <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   1dcb6:	69a3      	ldr	r3, [r4, #24]
   1dcb8:	4443      	add	r3, r8
   1dcba:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   1dcbc:	68e3      	ldr	r3, [r4, #12]
   1dcbe:	eba3 0308 	sub.w	r3, r3, r8
   1dcc2:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   1dcc4:	2d00      	cmp	r5, #0
   1dcc6:	d0ea      	beq.n	1dc9e <usb_dc_ep_read_wait+0x76>
		*read_bytes = bytes_to_copy;
   1dcc8:	f8c5 8000 	str.w	r8, [r5]
   1dccc:	e7e7      	b.n	1dc9e <usb_dc_ep_read_wait+0x76>
		return -ENODEV;
   1dcce:	f06f 0012 	mvn.w	r0, #18
   1dcd2:	e7e8      	b.n	1dca6 <usb_dc_ep_read_wait+0x7e>
   1dcd4:	20003790 	.word	0x20003790
   1dcd8:	0002c708 	.word	0x0002c708
   1dcdc:	00028a20 	.word	0x00028a20
   1dce0:	200037c8 	.word	0x200037c8

0001dce4 <usb_dc_ep_read_continue>:
{
   1dce4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   1dce6:	4d26      	ldr	r5, [pc, #152]	; (1dd80 <usb_dc_ep_read_continue+0x9c>)
	if (!dev_attached() || !dev_ready()) {
   1dce8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   1dcec:	b088      	sub	sp, #32
   1dcee:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1dcf0:	2b00      	cmp	r3, #0
   1dcf2:	d041      	beq.n	1dd78 <usb_dc_ep_read_continue+0x94>
   1dcf4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1dcf8:	2b00      	cmp	r3, #0
   1dcfa:	d03d      	beq.n	1dd78 <usb_dc_ep_read_continue+0x94>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1dcfc:	0603      	lsls	r3, r0, #24
   1dcfe:	d411      	bmi.n	1dd24 <usb_dc_ep_read_continue+0x40>
	ep_ctx = endpoint_ctx(ep);
   1dd00:	f7ff f964 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1dd04:	4604      	mov	r4, r0
   1dd06:	b168      	cbz	r0, 1dd24 <usb_dc_ep_read_continue+0x40>
	if (!ep_ctx->cfg.en) {
   1dd08:	7a03      	ldrb	r3, [r0, #8]
   1dd0a:	b973      	cbnz	r3, 1dd2a <usb_dc_ep_read_continue+0x46>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1dd0c:	4b1d      	ldr	r3, [pc, #116]	; (1dd84 <usb_dc_ep_read_continue+0xa0>)
   1dd0e:	481e      	ldr	r0, [pc, #120]	; (1dd88 <usb_dc_ep_read_continue+0xa4>)
   1dd10:	e9cd 3106 	strd	r3, r1, [sp, #24]
   1dd14:	aa05      	add	r2, sp, #20
   1dd16:	2303      	movs	r3, #3
   1dd18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd1c:	9301      	str	r3, [sp, #4]
   1dd1e:	9305      	str	r3, [sp, #20]
   1dd20:	f009 fa2a 	bl	27178 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
   1dd24:	f06f 0015 	mvn.w	r0, #21
   1dd28:	e018      	b.n	1dd5c <usb_dc_ep_read_continue+0x78>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1dd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dd32:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1dd36:	f009 fa22 	bl	2717e <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   1dd3a:	68e3      	ldr	r3, [r4, #12]
   1dd3c:	b9bb      	cbnz	r3, 1dd6e <usb_dc_ep_read_continue+0x8a>
		ep_ctx->read_complete = true;
   1dd3e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   1dd40:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   1dd42:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   1dd44:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   1dd46:	7f63      	ldrb	r3, [r4, #29]
   1dd48:	b18b      	cbz	r3, 1dd6e <usb_dc_ep_read_continue+0x8a>
			struct usbd_event *ev = usbd_evt_alloc();
   1dd4a:	f7ff f9af 	bl	1d0ac <usbd_evt_alloc>
			if (!ev) {
   1dd4e:	b938      	cbnz	r0, 1dd60 <usb_dc_ep_read_continue+0x7c>
				k_mutex_unlock(&ctx->drv_lock);
   1dd50:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1dd54:	f009 fa15 	bl	27182 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   1dd58:	f06f 000b 	mvn.w	r0, #11
}
   1dd5c:	b008      	add	sp, #32
   1dd5e:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   1dd60:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   1dd62:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1dd64:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   1dd66:	f7ff f959 	bl	1d01c <usbd_evt_put>
			usbd_work_schedule();
   1dd6a:	f7ff f95d 	bl	1d028 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   1dd6e:	4807      	ldr	r0, [pc, #28]	; (1dd8c <usb_dc_ep_read_continue+0xa8>)
   1dd70:	f009 fa07 	bl	27182 <k_mutex_unlock.isra.0>
	return 0;
   1dd74:	2000      	movs	r0, #0
   1dd76:	e7f1      	b.n	1dd5c <usb_dc_ep_read_continue+0x78>
		return -ENODEV;
   1dd78:	f06f 0012 	mvn.w	r0, #18
   1dd7c:	e7ee      	b.n	1dd5c <usb_dc_ep_read_continue+0x78>
   1dd7e:	bf00      	nop
   1dd80:	20003790 	.word	0x20003790
   1dd84:	0002c708 	.word	0x0002c708
   1dd88:	00028a20 	.word	0x00028a20
   1dd8c:	200037c8 	.word	0x200037c8

0001dd90 <usb_dc_ep_set_callback>:
{
   1dd90:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1dd92:	4b08      	ldr	r3, [pc, #32]	; (1ddb4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   1dd94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1dd98:	b12b      	cbz	r3, 1dda6 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   1dd9a:	f7ff f917 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1dd9e:	b128      	cbz	r0, 1ddac <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   1dda0:	6001      	str	r1, [r0, #0]
	return 0;
   1dda2:	2000      	movs	r0, #0
}
   1dda4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1dda6:	f06f 0012 	mvn.w	r0, #18
   1ddaa:	e7fb      	b.n	1dda4 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   1ddac:	f06f 0015 	mvn.w	r0, #21
   1ddb0:	e7f8      	b.n	1dda4 <usb_dc_ep_set_callback+0x14>
   1ddb2:	bf00      	nop
   1ddb4:	20003790 	.word	0x20003790

0001ddb8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   1ddb8:	4b01      	ldr	r3, [pc, #4]	; (1ddc0 <usb_dc_set_status_callback+0x8>)
   1ddba:	6018      	str	r0, [r3, #0]
}
   1ddbc:	4770      	bx	lr
   1ddbe:	bf00      	nop
   1ddc0:	20003790 	.word	0x20003790

0001ddc4 <usb_dc_ep_mps>:
{
   1ddc4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1ddc6:	4b07      	ldr	r3, [pc, #28]	; (1dde4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   1ddc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ddcc:	b123      	cbz	r3, 1ddd8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   1ddce:	f7ff f8fd 	bl	1cfcc <endpoint_ctx>
	if (!ep_ctx) {
   1ddd2:	b120      	cbz	r0, 1ddde <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   1ddd4:	6840      	ldr	r0, [r0, #4]
}
   1ddd6:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ddd8:	f06f 0012 	mvn.w	r0, #18
   1dddc:	e7fb      	b.n	1ddd6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   1ddde:	f06f 0015 	mvn.w	r0, #21
   1dde2:	e7f8      	b.n	1ddd6 <usb_dc_ep_mps+0x12>
   1dde4:	20003790 	.word	0x20003790

0001dde8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1dde8:	4b08      	ldr	r3, [pc, #32]	; (1de0c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ddea:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ddec:	1ac3      	subs	r3, r0, r3
{
   1ddee:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ddf0:	4907      	ldr	r1, [pc, #28]	; (1de10 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ddf2:	109b      	asrs	r3, r3, #2
{
   1ddf4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ddf6:	4359      	muls	r1, r3
   1ddf8:	4806      	ldr	r0, [pc, #24]	; (1de14 <onoff_stop+0x2c>)
   1ddfa:	2240      	movs	r2, #64	; 0x40
   1ddfc:	f009 f9ee 	bl	271dc <stop>
	notify(mgr, res);
   1de00:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1de02:	4601      	mov	r1, r0
	notify(mgr, res);
   1de04:	4620      	mov	r0, r4
}
   1de06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1de0a:	4718      	bx	r3
   1de0c:	20003a30 	.word	0x20003a30
   1de10:	b6db6db7 	.word	0xb6db6db7
   1de14:	00028608 	.word	0x00028608

0001de18 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1de18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1de1a:	4c0c      	ldr	r4, [pc, #48]	; (1de4c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de1c:	4a0c      	ldr	r2, [pc, #48]	; (1de50 <onoff_start+0x38>)
   1de1e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1de20:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de22:	9300      	str	r3, [sp, #0]
{
   1de24:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de26:	460b      	mov	r3, r1
   1de28:	490a      	ldr	r1, [pc, #40]	; (1de54 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1de2a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de2c:	4361      	muls	r1, r4
{
   1de2e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de30:	4809      	ldr	r0, [pc, #36]	; (1de58 <onoff_start+0x40>)
   1de32:	f009 fa00 	bl	27236 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1de36:	1e01      	subs	r1, r0, #0
   1de38:	da05      	bge.n	1de46 <onoff_start+0x2e>
		notify(mgr, err);
   1de3a:	4630      	mov	r0, r6
   1de3c:	462b      	mov	r3, r5
	}
}
   1de3e:	b002      	add	sp, #8
   1de40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1de44:	4718      	bx	r3
}
   1de46:	b002      	add	sp, #8
   1de48:	bd70      	pop	{r4, r5, r6, pc}
   1de4a:	bf00      	nop
   1de4c:	20003a30 	.word	0x20003a30
   1de50:	000272a5 	.word	0x000272a5
   1de54:	b6db6db7 	.word	0xb6db6db7
   1de58:	00028608 	.word	0x00028608

0001de5c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de5c:	2200      	movs	r2, #0
{
   1de5e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de60:	2101      	movs	r1, #1
{
   1de62:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de64:	4610      	mov	r0, r2
   1de66:	f7ea fa35 	bl	82d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1de6a:	2000      	movs	r0, #0
   1de6c:	f7ea fa00 	bl	8270 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1de70:	480f      	ldr	r0, [pc, #60]	; (1deb0 <clk_init+0x54>)
   1de72:	f001 faff 	bl	1f474 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1de76:	4b0f      	ldr	r3, [pc, #60]	; (1deb4 <clk_init+0x58>)
   1de78:	4298      	cmp	r0, r3
   1de7a:	d115      	bne.n	1dea8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1de7c:	f001 fb0a 	bl	1f494 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1de80:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de82:	490d      	ldr	r1, [pc, #52]	; (1deb8 <clk_init+0x5c>)
   1de84:	4630      	mov	r0, r6
   1de86:	f004 fcc0 	bl	2280a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1de8a:	2800      	cmp	r0, #0
   1de8c:	db0b      	blt.n	1dea6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1de8e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de90:	4909      	ldr	r1, [pc, #36]	; (1deb8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1de92:	2501      	movs	r5, #1
   1de94:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de96:	f104 001c 	add.w	r0, r4, #28
   1de9a:	f004 fcb6 	bl	2280a <onoff_manager_init>
		if (err < 0) {
   1de9e:	2800      	cmp	r0, #0
   1dea0:	db01      	blt.n	1dea6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1dea2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1dea4:	2000      	movs	r0, #0
}
   1dea6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1dea8:	f06f 0004 	mvn.w	r0, #4
   1deac:	e7fb      	b.n	1dea6 <clk_init+0x4a>
   1deae:	bf00      	nop
   1deb0:	0001def1 	.word	0x0001def1
   1deb4:	0bad0000 	.word	0x0bad0000
   1deb8:	0002a158 	.word	0x0002a158

0001debc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1debc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1debe:	230c      	movs	r3, #12
   1dec0:	4809      	ldr	r0, [pc, #36]	; (1dee8 <clkstarted_handle.constprop.0+0x2c>)
   1dec2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1dec4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1dec6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1dec8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1decc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1dece:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1ded0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1ded2:	4418      	add	r0, r3
   1ded4:	f009 f96f 	bl	271b6 <set_on_state>
	if (callback) {
   1ded8:	b12d      	cbz	r5, 1dee6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1deda:	4632      	mov	r2, r6
   1dedc:	462b      	mov	r3, r5
   1dede:	4803      	ldr	r0, [pc, #12]	; (1deec <clkstarted_handle.constprop.0+0x30>)
}
   1dee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1dee4:	4718      	bx	r3
}
   1dee6:	bd70      	pop	{r4, r5, r6, pc}
   1dee8:	20003a30 	.word	0x20003a30
   1deec:	00028608 	.word	0x00028608

0001def0 <clock_event_handler>:
	switch (event) {
   1def0:	b110      	cbz	r0, 1def8 <clock_event_handler+0x8>
   1def2:	2801      	cmp	r0, #1
   1def4:	d004      	beq.n	1df00 <clock_event_handler+0x10>
   1def6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1def8:	4b03      	ldr	r3, [pc, #12]	; (1df08 <clock_event_handler+0x18>)
   1defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1defc:	075b      	lsls	r3, r3, #29
   1defe:	d101      	bne.n	1df04 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1df00:	f7ff bfdc 	b.w	1debc <clkstarted_handle.constprop.0>
}
   1df04:	4770      	bx	lr
   1df06:	bf00      	nop
   1df08:	20003a30 	.word	0x20003a30

0001df0c <generic_hfclk_start>:
{
   1df0c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1df0e:	f04f 0320 	mov.w	r3, #32
   1df12:	f3ef 8111 	mrs	r1, BASEPRI
   1df16:	f383 8812 	msr	BASEPRI_MAX, r3
   1df1a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1df1e:	4a12      	ldr	r2, [pc, #72]	; (1df68 <generic_hfclk_start+0x5c>)
   1df20:	6813      	ldr	r3, [r2, #0]
   1df22:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1df26:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1df2a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1df2c:	d00c      	beq.n	1df48 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1df2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1df32:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1df36:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1df3a:	f013 0301 	ands.w	r3, r3, #1
   1df3e:	d003      	beq.n	1df48 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1df40:	480a      	ldr	r0, [pc, #40]	; (1df6c <generic_hfclk_start+0x60>)
   1df42:	f009 f938 	bl	271b6 <set_on_state>
			already_started = true;
   1df46:	2301      	movs	r3, #1
	__asm__ volatile(
   1df48:	f381 8811 	msr	BASEPRI, r1
   1df4c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1df50:	b123      	cbz	r3, 1df5c <generic_hfclk_start+0x50>
}
   1df52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1df56:	2000      	movs	r0, #0
   1df58:	f7ff bfb0 	b.w	1debc <clkstarted_handle.constprop.0>
}
   1df5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1df60:	2001      	movs	r0, #1
   1df62:	f009 bbd9 	b.w	27718 <nrfx_clock_start>
   1df66:	bf00      	nop
   1df68:	20003a80 	.word	0x20003a80
   1df6c:	20003a70 	.word	0x20003a70

0001df70 <api_blocking_start>:
{
   1df70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df72:	2200      	movs	r2, #0
   1df74:	2301      	movs	r3, #1
   1df76:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1df7a:	ab04      	add	r3, sp, #16
   1df7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df80:	4a09      	ldr	r2, [pc, #36]	; (1dfa8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df82:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df86:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df88:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df8c:	f009 f983 	bl	27296 <api_start>
	if (err < 0) {
   1df90:	2800      	cmp	r0, #0
   1df92:	db05      	blt.n	1dfa0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1df94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1df98:	2300      	movs	r3, #0
   1df9a:	4668      	mov	r0, sp
   1df9c:	f003 fb52 	bl	21644 <z_impl_k_sem_take>
}
   1dfa0:	b007      	add	sp, #28
   1dfa2:	f85d fb04 	ldr.w	pc, [sp], #4
   1dfa6:	bf00      	nop
   1dfa8:	000272c3 	.word	0x000272c3

0001dfac <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfac:	4b09      	ldr	r3, [pc, #36]	; (1dfd4 <generic_hfclk_stop+0x28>)
   1dfae:	f3bf 8f5b 	dmb	ish
   1dfb2:	e853 2f00 	ldrex	r2, [r3]
   1dfb6:	f022 0102 	bic.w	r1, r2, #2
   1dfba:	e843 1000 	strex	r0, r1, [r3]
   1dfbe:	2800      	cmp	r0, #0
   1dfc0:	d1f7      	bne.n	1dfb2 <generic_hfclk_stop+0x6>
   1dfc2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1dfc6:	07d3      	lsls	r3, r2, #31
   1dfc8:	d402      	bmi.n	1dfd0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1dfca:	2001      	movs	r0, #1
   1dfcc:	f001 ba70 	b.w	1f4b0 <nrfx_clock_stop>
}
   1dfd0:	4770      	bx	lr
   1dfd2:	bf00      	nop
   1dfd4:	20003a80 	.word	0x20003a80

0001dfd8 <z_nrf_clock_control_get_onoff>:
}
   1dfd8:	4a02      	ldr	r2, [pc, #8]	; (1dfe4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1dfda:	b2c3      	uxtb	r3, r0
}
   1dfdc:	201c      	movs	r0, #28
   1dfde:	fb03 2000 	mla	r0, r3, r0, r2
   1dfe2:	4770      	bx	lr
   1dfe4:	20003a30 	.word	0x20003a30

0001dfe8 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dfe8:	4b09      	ldr	r3, [pc, #36]	; (1e010 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   1dfea:	f3bf 8f5b 	dmb	ish
   1dfee:	e853 2f00 	ldrex	r2, [r3]
   1dff2:	f042 0101 	orr.w	r1, r2, #1
   1dff6:	e843 1000 	strex	r0, r1, [r3]
   1dffa:	2800      	cmp	r0, #0
   1dffc:	d1f7      	bne.n	1dfee <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1dffe:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1e002:	0793      	lsls	r3, r2, #30
   1e004:	d402      	bmi.n	1e00c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1e006:	2001      	movs	r0, #1
   1e008:	f009 bb86 	b.w	27718 <nrfx_clock_start>
}
   1e00c:	4770      	bx	lr
   1e00e:	bf00      	nop
   1e010:	20003a80 	.word	0x20003a80

0001e014 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e014:	4b09      	ldr	r3, [pc, #36]	; (1e03c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   1e016:	f3bf 8f5b 	dmb	ish
   1e01a:	e853 2f00 	ldrex	r2, [r3]
   1e01e:	f022 0101 	bic.w	r1, r2, #1
   1e022:	e843 1000 	strex	r0, r1, [r3]
   1e026:	2800      	cmp	r0, #0
   1e028:	d1f7      	bne.n	1e01a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1e02a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1e02e:	0793      	lsls	r3, r2, #30
   1e030:	d402      	bmi.n	1e038 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1e032:	2001      	movs	r0, #1
   1e034:	f001 ba3c 	b.w	1f4b0 <nrfx_clock_stop>
}
   1e038:	4770      	bx	lr
   1e03a:	bf00      	nop
   1e03c:	20003a80 	.word	0x20003a80

0001e040 <z_nrf_clock_control_lf_on>:
{
   1e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e044:	4939      	ldr	r1, [pc, #228]	; (1e12c <z_nrf_clock_control_lf_on+0xec>)
   1e046:	f3bf 8f5b 	dmb	ish
   1e04a:	4607      	mov	r7, r0
   1e04c:	2201      	movs	r2, #1
   1e04e:	e851 3f00 	ldrex	r3, [r1]
   1e052:	e841 2000 	strex	r0, r2, [r1]
   1e056:	2800      	cmp	r0, #0
   1e058:	d1f9      	bne.n	1e04e <z_nrf_clock_control_lf_on+0xe>
   1e05a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1e05e:	b933      	cbnz	r3, 1e06e <z_nrf_clock_control_lf_on+0x2e>
   1e060:	4933      	ldr	r1, [pc, #204]	; (1e130 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   1e062:	4834      	ldr	r0, [pc, #208]	; (1e134 <z_nrf_clock_control_lf_on+0xf4>)
   1e064:	604b      	str	r3, [r1, #4]
   1e066:	60cb      	str	r3, [r1, #12]
   1e068:	608a      	str	r2, [r1, #8]
   1e06a:	f004 fbe1 	bl	22830 <onoff_request>
	switch (start_mode) {
   1e06e:	1e7b      	subs	r3, r7, #1
   1e070:	2b01      	cmp	r3, #1
   1e072:	d82f      	bhi.n	1e0d4 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1e074:	2f01      	cmp	r7, #1
   1e076:	d107      	bne.n	1e088 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e07c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e080:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1e084:	2b01      	cmp	r3, #1
   1e086:	d025      	beq.n	1e0d4 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e088:	f009 fd87 	bl	27b9a <k_is_in_isr>
   1e08c:	4604      	mov	r4, r0
   1e08e:	b918      	cbnz	r0, 1e098 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1e090:	4b29      	ldr	r3, [pc, #164]	; (1e138 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   1e092:	781b      	ldrb	r3, [r3, #0]
   1e094:	2b00      	cmp	r3, #0
   1e096:	d141      	bne.n	1e11c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   1e098:	f04f 0320 	mov.w	r3, #32
   1e09c:	f3ef 8611 	mrs	r6, BASEPRI
   1e0a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0a4:	f3bf 8f6f 	isb	sy
   1e0a8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e0aa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1e13c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e0ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1e0b2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e0b6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1e0ba:	03d2      	lsls	r2, r2, #15
   1e0bc:	d50c      	bpl.n	1e0d8 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e0be:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e0c2:	2b01      	cmp	r3, #1
   1e0c4:	d001      	beq.n	1e0ca <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1e0c6:	2f01      	cmp	r7, #1
   1e0c8:	d106      	bne.n	1e0d8 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1e0ca:	b30c      	cbz	r4, 1e110 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1e0cc:	f386 8811 	msr	BASEPRI, r6
   1e0d0:	f3bf 8f6f 	isb	sy
}
   1e0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e0d8:	b1ac      	cbz	r4, 1e106 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1e0da:	4630      	mov	r0, r6
   1e0dc:	f7ea f858 	bl	8190 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1e0e0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1e0e4:	2b00      	cmp	r3, #0
   1e0e6:	d1e4      	bne.n	1e0b2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e0e8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1e0ec:	2a00      	cmp	r2, #0
   1e0ee:	d0e0      	beq.n	1e0b2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0f0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e0f4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e0f8:	2301      	movs	r3, #1
   1e0fa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1e0fe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e102:	60ab      	str	r3, [r5, #8]
}
   1e104:	e7d5      	b.n	1e0b2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1e106:	2100      	movs	r1, #0
   1e108:	2021      	movs	r0, #33	; 0x21
   1e10a:	f003 ff59 	bl	21fc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e10e:	e7e7      	b.n	1e0e0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   1e110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e114:	2202      	movs	r2, #2
   1e116:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e11a:	e7db      	b.n	1e0d4 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1e11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e120:	2202      	movs	r2, #2
   1e122:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1e126:	4606      	mov	r6, r0
}
   1e128:	e7bf      	b.n	1e0aa <z_nrf_clock_control_lf_on+0x6a>
   1e12a:	bf00      	nop
   1e12c:	20003a84 	.word	0x20003a84
   1e130:	20003a20 	.word	0x20003a20
   1e134:	20003a4c 	.word	0x20003a4c
   1e138:	20003f73 	.word	0x20003f73
   1e13c:	e000e100 	.word	0xe000e100

0001e140 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1e140:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1e142:	4b08      	ldr	r3, [pc, #32]	; (1e164 <uart_console_init+0x24>)
   1e144:	4808      	ldr	r0, [pc, #32]	; (1e168 <uart_console_init+0x28>)
   1e146:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1e148:	f009 fc76 	bl	27a38 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1e14c:	b138      	cbz	r0, 1e15e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1e14e:	4807      	ldr	r0, [pc, #28]	; (1e16c <uart_console_init+0x2c>)
   1e150:	f7ea fdc6 	bl	8ce0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1e154:	4805      	ldr	r0, [pc, #20]	; (1e16c <uart_console_init+0x2c>)
   1e156:	f7e6 fe5b 	bl	4e10 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1e15a:	2000      	movs	r0, #0
}
   1e15c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1e15e:	f06f 0012 	mvn.w	r0, #18
   1e162:	e7fb      	b.n	1e15c <uart_console_init+0x1c>
   1e164:	20003a88 	.word	0x20003a88
   1e168:	00028668 	.word	0x00028668
   1e16c:	0001e171 	.word	0x0001e171

0001e170 <console_out>:
	if ('\n' == c) {
   1e170:	280a      	cmp	r0, #10
{
   1e172:	b538      	push	{r3, r4, r5, lr}
   1e174:	4d07      	ldr	r5, [pc, #28]	; (1e194 <console_out+0x24>)
   1e176:	4604      	mov	r4, r0
	if ('\n' == c) {
   1e178:	d104      	bne.n	1e184 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1e17a:	6828      	ldr	r0, [r5, #0]
   1e17c:	6883      	ldr	r3, [r0, #8]
   1e17e:	210d      	movs	r1, #13
   1e180:	685b      	ldr	r3, [r3, #4]
   1e182:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1e184:	6828      	ldr	r0, [r5, #0]
   1e186:	6883      	ldr	r3, [r0, #8]
   1e188:	b2e1      	uxtb	r1, r4
   1e18a:	685b      	ldr	r3, [r3, #4]
   1e18c:	4798      	blx	r3
}
   1e18e:	4620      	mov	r0, r4
   1e190:	bd38      	pop	{r3, r4, r5, pc}
   1e192:	bf00      	nop
   1e194:	20003a88 	.word	0x20003a88

0001e198 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1e198:	b530      	push	{r4, r5, lr}
	return port->config;
   1e19a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e19c:	7b04      	ldrb	r4, [r0, #12]
   1e19e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1e1a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e1a6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1e1aa:	b085      	sub	sp, #20
   1e1ac:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1e1b0:	d104      	bne.n	1e1bc <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1e1b2:	4628      	mov	r0, r5
   1e1b4:	f001 fc2a 	bl	1fa0c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1e1b8:	2000      	movs	r0, #0
   1e1ba:	e032      	b.n	1e222 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1e1bc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e1c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1e1c4:	d12f      	bne.n	1e226 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1e1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1e1ca:	bf0c      	ite	eq
   1e1cc:	2304      	moveq	r3, #4
   1e1ce:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e1d0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1e1d4:	6883      	ldr	r3, [r0, #8]
   1e1d6:	fa23 f101 	lsr.w	r1, r3, r1
   1e1da:	07c9      	lsls	r1, r1, #31
   1e1dc:	d42f      	bmi.n	1e23e <gpio_nrfx_pin_interrupt_configure+0xa6>
   1e1de:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e1e2:	d12c      	bne.n	1e23e <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1e1e4:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1e1e6:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1e1e8:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1e1ec:	4a1c      	ldr	r2, [pc, #112]	; (1e260 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e1ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1e1f2:	bf18      	it	ne
   1e1f4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1e1fc:	07db      	lsls	r3, r3, #31
   1e1fe:	d41e      	bmi.n	1e23e <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e200:	f10d 0407 	add.w	r4, sp, #7
   1e204:	4621      	mov	r1, r4
   1e206:	4628      	mov	r0, r5
   1e208:	f001 fb64 	bl	1f8d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1e20c:	4b15      	ldr	r3, [pc, #84]	; (1e264 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1e20e:	4298      	cmp	r0, r3
   1e210:	d114      	bne.n	1e23c <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1e212:	4620      	mov	r0, r4
   1e214:	f001 fbac 	bl	1f970 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1e218:	4b13      	ldr	r3, [pc, #76]	; (1e268 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1e21a:	4298      	cmp	r0, r3
   1e21c:	d00e      	beq.n	1e23c <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   1e21e:	f06f 000b 	mvn.w	r0, #11
}
   1e222:	b005      	add	sp, #20
   1e224:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1e226:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1e22a:	d005      	beq.n	1e238 <gpio_nrfx_pin_interrupt_configure+0xa0>
   1e22c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1e230:	bf0c      	ite	eq
   1e232:	2302      	moveq	r3, #2
   1e234:	2301      	movne	r3, #1
   1e236:	e7cb      	b.n	1e1d0 <gpio_nrfx_pin_interrupt_configure+0x38>
   1e238:	2303      	movs	r3, #3
   1e23a:	e7c9      	b.n	1e1d0 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1e23c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e23e:	2300      	movs	r3, #0
   1e240:	4619      	mov	r1, r3
   1e242:	aa02      	add	r2, sp, #8
   1e244:	4628      	mov	r0, r5
   1e246:	f001 fa1f 	bl	1f688 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e24a:	4b07      	ldr	r3, [pc, #28]	; (1e268 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1e24c:	4298      	cmp	r0, r3
   1e24e:	d104      	bne.n	1e25a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1e250:	2101      	movs	r1, #1
   1e252:	4628      	mov	r0, r5
   1e254:	f001 fb92 	bl	1f97c <nrfx_gpiote_trigger_enable>
   1e258:	e7ae      	b.n	1e1b8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1e25a:	f06f 0004 	mvn.w	r0, #4
   1e25e:	e7e0      	b.n	1e222 <gpio_nrfx_pin_interrupt_configure+0x8a>
   1e260:	50000300 	.word	0x50000300
   1e264:	0bad0004 	.word	0x0bad0004
   1e268:	0bad0000 	.word	0x0bad0000

0001e26c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e26c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1e26e:	f001 fb6f 	bl	1f950 <nrfx_gpiote_is_init>
   1e272:	4604      	mov	r4, r0
   1e274:	b968      	cbnz	r0, 1e292 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1e276:	f001 fb43 	bl	1f900 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1e27a:	4b08      	ldr	r3, [pc, #32]	; (1e29c <gpio_nrfx_init+0x30>)
   1e27c:	4298      	cmp	r0, r3
   1e27e:	d10a      	bne.n	1e296 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1e280:	4807      	ldr	r0, [pc, #28]	; (1e2a0 <gpio_nrfx_init+0x34>)
   1e282:	4621      	mov	r1, r4
   1e284:	f001 fb20 	bl	1f8c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e288:	4622      	mov	r2, r4
   1e28a:	2105      	movs	r1, #5
   1e28c:	2006      	movs	r0, #6
   1e28e:	f7ea f821 	bl	82d4 <z_arm_irq_priority_set>
		return 0;
   1e292:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1e294:	bd10      	pop	{r4, pc}
		return -EIO;
   1e296:	f06f 0004 	mvn.w	r0, #4
   1e29a:	e7fb      	b.n	1e294 <gpio_nrfx_init+0x28>
   1e29c:	0bad0000 	.word	0x0bad0000
   1e2a0:	0001e2a5 	.word	0x0001e2a5

0001e2a4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2a4:	0942      	lsrs	r2, r0, #5
{
   1e2a6:	b570      	push	{r4, r5, r6, lr}
   1e2a8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2aa:	d002      	beq.n	1e2b2 <nrfx_gpio_handler+0xe>
   1e2ac:	2a01      	cmp	r2, #1
   1e2ae:	d015      	beq.n	1e2dc <nrfx_gpio_handler+0x38>
}
   1e2b0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2b2:	4e0b      	ldr	r6, [pc, #44]	; (1e2e0 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1e2b4:	6932      	ldr	r2, [r6, #16]
   1e2b6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e2b8:	2900      	cmp	r1, #0
   1e2ba:	d0f9      	beq.n	1e2b0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1e2bc:	f003 031f 	and.w	r3, r3, #31
   1e2c0:	2501      	movs	r5, #1
   1e2c2:	680c      	ldr	r4, [r1, #0]
   1e2c4:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1e2c6:	688a      	ldr	r2, [r1, #8]
   1e2c8:	402a      	ands	r2, r5
   1e2ca:	d002      	beq.n	1e2d2 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1e2cc:	684b      	ldr	r3, [r1, #4]
   1e2ce:	4630      	mov	r0, r6
   1e2d0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e2d2:	2c00      	cmp	r4, #0
   1e2d4:	d0ec      	beq.n	1e2b0 <nrfx_gpio_handler+0xc>
   1e2d6:	4621      	mov	r1, r4
   1e2d8:	6824      	ldr	r4, [r4, #0]
   1e2da:	e7f4      	b.n	1e2c6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2dc:	4e01      	ldr	r6, [pc, #4]	; (1e2e4 <nrfx_gpio_handler+0x40>)
   1e2de:	e7e9      	b.n	1e2b4 <nrfx_gpio_handler+0x10>
   1e2e0:	00028620 	.word	0x00028620
   1e2e4:	00028638 	.word	0x00028638

0001e2e8 <gpio_nrfx_pin_configure>:
{
   1e2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1e2ec:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e2ee:	7b3b      	ldrb	r3, [r7, #12]
   1e2f0:	f001 051f 	and.w	r5, r1, #31
{
   1e2f4:	b085      	sub	sp, #20
   1e2f6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e2f8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1e2fc:	4614      	mov	r4, r2
   1e2fe:	b9ca      	cbnz	r2, 1e334 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e300:	a902      	add	r1, sp, #8
   1e302:	4628      	mov	r0, r5
   1e304:	f001 fae6 	bl	1f8d4 <nrfx_gpiote_channel_get>
   1e308:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1e30a:	4628      	mov	r0, r5
   1e30c:	f001 fba6 	bl	1fa5c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1e310:	4b48      	ldr	r3, [pc, #288]	; (1e434 <gpio_nrfx_pin_configure+0x14c>)
   1e312:	4298      	cmp	r0, r3
   1e314:	d004      	beq.n	1e320 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1e316:	f06f 0004 	mvn.w	r0, #4
}
   1e31a:	b005      	add	sp, #20
   1e31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1e320:	4284      	cmp	r4, r0
   1e322:	d105      	bne.n	1e330 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1e324:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1e328:	f001 fb1c 	bl	1f964 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1e32c:	42a0      	cmp	r0, r4
   1e32e:	d1f2      	bne.n	1e316 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e330:	2000      	movs	r0, #0
   1e332:	e7f2      	b.n	1e31a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e334:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e338:	f10d 0103 	add.w	r1, sp, #3
   1e33c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e33e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e342:	f001 fac7 	bl	1f8d4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e346:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e348:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e34a:	aa02      	add	r2, sp, #8
   1e34c:	4649      	mov	r1, r9
   1e34e:	4628      	mov	r0, r5
   1e350:	f001 f99a 	bl	1f688 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e354:	4b37      	ldr	r3, [pc, #220]	; (1e434 <gpio_nrfx_pin_configure+0x14c>)
   1e356:	4298      	cmp	r0, r3
   1e358:	d002      	beq.n	1e360 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e35a:	f06f 0015 	mvn.w	r0, #21
   1e35e:	e7dc      	b.n	1e31a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1e360:	4580      	cmp	r8, r0
   1e362:	d103      	bne.n	1e36c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1e364:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1e368:	f001 fafc 	bl	1f964 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1e36c:	05a3      	lsls	r3, r4, #22
   1e36e:	d54e      	bpl.n	1e40e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e370:	4b31      	ldr	r3, [pc, #196]	; (1e438 <gpio_nrfx_pin_configure+0x150>)
   1e372:	4a32      	ldr	r2, [pc, #200]	; (1e43c <gpio_nrfx_pin_configure+0x154>)
   1e374:	4023      	ands	r3, r4
   1e376:	4293      	cmp	r3, r2
   1e378:	d03a      	beq.n	1e3f0 <gpio_nrfx_pin_configure+0x108>
   1e37a:	d80c      	bhi.n	1e396 <gpio_nrfx_pin_configure+0xae>
   1e37c:	2b06      	cmp	r3, #6
   1e37e:	d014      	beq.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
   1e380:	d804      	bhi.n	1e38c <gpio_nrfx_pin_configure+0xa4>
   1e382:	b193      	cbz	r3, 1e3aa <gpio_nrfx_pin_configure+0xc2>
   1e384:	2b02      	cmp	r3, #2
   1e386:	d1e8      	bne.n	1e35a <gpio_nrfx_pin_configure+0x72>
   1e388:	2304      	movs	r3, #4
   1e38a:	e00e      	b.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
   1e38c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e390:	d1e3      	bne.n	1e35a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1e392:	2301      	movs	r3, #1
   1e394:	e009      	b.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e396:	4a2a      	ldr	r2, [pc, #168]	; (1e440 <gpio_nrfx_pin_configure+0x158>)
   1e398:	4293      	cmp	r3, r2
   1e39a:	d02b      	beq.n	1e3f4 <gpio_nrfx_pin_configure+0x10c>
   1e39c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e3a0:	d02a      	beq.n	1e3f8 <gpio_nrfx_pin_configure+0x110>
   1e3a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e3a6:	d1d8      	bne.n	1e35a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1e3a8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1e3aa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1e3ae:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1e3b2:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1e3b6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1e3b8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1e3bc:	bf54      	ite	pl
   1e3be:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1e3c2:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e3c4:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1e3c6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e3ca:	d517      	bpl.n	1e3fc <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1e3cc:	687b      	ldr	r3, [r7, #4]
   1e3ce:	2101      	movs	r1, #1
   1e3d0:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1e3d4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1e3d8:	2200      	movs	r2, #0
   1e3da:	a901      	add	r1, sp, #4
   1e3dc:	4628      	mov	r0, r5
   1e3de:	f001 fa01 	bl	1f7e4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e3e2:	4b14      	ldr	r3, [pc, #80]	; (1e434 <gpio_nrfx_pin_configure+0x14c>)
   1e3e4:	4298      	cmp	r0, r3
   1e3e6:	bf14      	ite	ne
   1e3e8:	f06f 0015 	mvnne.w	r0, #21
   1e3ec:	2000      	moveq	r0, #0
   1e3ee:	e794      	b.n	1e31a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1e3f0:	2307      	movs	r3, #7
   1e3f2:	e7da      	b.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1e3f4:	2305      	movs	r3, #5
   1e3f6:	e7d8      	b.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1e3f8:	2303      	movs	r3, #3
   1e3fa:	e7d6      	b.n	1e3aa <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1e3fc:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1e3fe:	bf41      	itttt	mi
   1e400:	687b      	ldrmi	r3, [r7, #4]
   1e402:	2101      	movmi	r1, #1
   1e404:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1e408:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1e40c:	e7e4      	b.n	1e3d8 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1e40e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e410:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1e414:	bf54      	ite	pl
   1e416:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1e41a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e41c:	461a      	mov	r2, r3
   1e41e:	a901      	add	r1, sp, #4
   1e420:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1e422:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e426:	f001 f92f 	bl	1f688 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e42a:	4b02      	ldr	r3, [pc, #8]	; (1e434 <gpio_nrfx_pin_configure+0x14c>)
   1e42c:	4298      	cmp	r0, r3
   1e42e:	f43f af7f 	beq.w	1e330 <gpio_nrfx_pin_configure+0x48>
   1e432:	e792      	b.n	1e35a <gpio_nrfx_pin_configure+0x72>
   1e434:	0bad0000 	.word	0x0bad0000
   1e438:	00f00006 	.word	0x00f00006
   1e43c:	00100006 	.word	0x00100006
   1e440:	00400002 	.word	0x00400002

0001e444 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1e444:	4802      	ldr	r0, [pc, #8]	; (1e450 <pwm_nrfx_get_cycles_per_sec+0xc>)
   1e446:	2100      	movs	r1, #0
   1e448:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   1e44c:	2000      	movs	r0, #0
   1e44e:	4770      	bx	lr
   1e450:	00f42400 	.word	0x00f42400

0001e454 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   1e454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1e456:	ab0a      	add	r3, sp, #40	; 0x28
   1e458:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   1e45a:	9302      	str	r3, [sp, #8]
   1e45c:	4b05      	ldr	r3, [pc, #20]	; (1e474 <z_log_msg2_runtime_create.constprop.0+0x20>)
   1e45e:	9301      	str	r3, [sp, #4]
   1e460:	2300      	movs	r3, #0
   1e462:	9300      	str	r3, [sp, #0]
   1e464:	2201      	movs	r2, #1
   1e466:	4618      	mov	r0, r3
   1e468:	f7e8 f830 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   1e46c:	b007      	add	sp, #28
   1e46e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e472:	bf00      	nop
   1e474:	0002c77b 	.word	0x0002c77b

0001e478 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1e478:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e47a:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
   1e47c:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   1e47e:	6922      	ldr	r2, [r4, #16]
   1e480:	f100 0308 	add.w	r3, r0, #8
   1e484:	3204      	adds	r2, #4
   1e486:	f100 050c 	add.w	r5, r0, #12
   1e48a:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
   1e48c:	f913 6b01 	ldrsb.w	r6, [r3], #1
   1e490:	2e00      	cmp	r6, #0
   1e492:	bfb4      	ite	lt
   1e494:	2600      	movlt	r6, #0
   1e496:	f44f 4600 	movge.w	r6, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   1e49a:	42ab      	cmp	r3, r5

		data->current[i] = value;
   1e49c:	f822 6b02 	strh.w	r6, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   1e4a0:	d1f4      	bne.n	1e48c <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1e4a2:	2300      	movs	r3, #0
   1e4a4:	461a      	mov	r2, r3
   1e4a6:	f001 fc79 	bl	1fd9c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1e4aa:	4b0a      	ldr	r3, [pc, #40]	; (1e4d4 <pwm_nrfx_init+0x5c>)
   1e4ac:	4298      	cmp	r0, r3
   1e4ae:	d00e      	beq.n	1e4ce <pwm_nrfx_init+0x56>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1e4b0:	6823      	ldr	r3, [r4, #0]
   1e4b2:	9302      	str	r3, [sp, #8]
   1e4b4:	4b08      	ldr	r3, [pc, #32]	; (1e4d8 <pwm_nrfx_init+0x60>)
   1e4b6:	9301      	str	r3, [sp, #4]
   1e4b8:	2300      	movs	r3, #0
   1e4ba:	4618      	mov	r0, r3
   1e4bc:	4907      	ldr	r1, [pc, #28]	; (1e4dc <pwm_nrfx_init+0x64>)
   1e4be:	9300      	str	r3, [sp, #0]
   1e4c0:	2201      	movs	r2, #1
   1e4c2:	f7ff ffc7 	bl	1e454 <z_log_msg2_runtime_create.constprop.0>
   1e4c6:	f06f 000f 	mvn.w	r0, #15
		return -EBUSY;
	}

	return 0;
}
   1e4ca:	b004      	add	sp, #16
   1e4cc:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1e4ce:	2000      	movs	r0, #0
   1e4d0:	e7fb      	b.n	1e4ca <pwm_nrfx_init+0x52>
   1e4d2:	bf00      	nop
   1e4d4:	0bad0000 	.word	0x0bad0000
   1e4d8:	0002c77b 	.word	0x0002c77b
   1e4dc:	000289f0 	.word	0x000289f0

0001e4e0 <pwm_nrfx_pin_set>:
{
   1e4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e4e4:	b089      	sub	sp, #36	; 0x24
   1e4e6:	460d      	mov	r5, r1
   1e4e8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	const struct pwm_nrfx_config *config = dev->config;
   1e4ec:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1e4ee:	6901      	ldr	r1, [r0, #16]
{
   1e4f0:	4698      	mov	r8, r3
	if (flags) {
   1e4f2:	2c00      	cmp	r4, #0
   1e4f4:	f040 8085 	bne.w	1e602 <pwm_nrfx_pin_set+0x122>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1e4f8:	f107 0008 	add.w	r0, r7, #8
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   1e4fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e500:	2bff      	cmp	r3, #255	; 0xff
   1e502:	d003      	beq.n	1e50c <pwm_nrfx_pin_set+0x2c>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1e504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1e508:	429d      	cmp	r5, r3
   1e50a:	d07f      	beq.n	1e60c <pwm_nrfx_pin_set+0x12c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1e50c:	3401      	adds	r4, #1
   1e50e:	b2e4      	uxtb	r4, r4
   1e510:	2c04      	cmp	r4, #4
   1e512:	d1f3      	bne.n	1e4fc <pwm_nrfx_pin_set+0x1c>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   1e514:	4b65      	ldr	r3, [pc, #404]	; (1e6ac <pwm_nrfx_pin_set+0x1cc>)
   1e516:	e9cd 3506 	strd	r3, r5, [sp, #24]
   1e51a:	e052      	b.n	1e5c2 <pwm_nrfx_pin_set+0xe2>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e51c:	f04f 0900 	mov.w	r9, #0
   1e520:	e087      	b.n	1e632 <pwm_nrfx_pin_set+0x152>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e522:	3301      	adds	r3, #1
   1e524:	2b04      	cmp	r3, #4
   1e526:	f040 8094 	bne.w	1e652 <pwm_nrfx_pin_set+0x172>
   1e52a:	4610      	mov	r0, r2
   1e52c:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1e52e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e532:	b2de      	uxtb	r6, r3
   1e534:	d23d      	bcs.n	1e5b2 <pwm_nrfx_pin_set+0xd2>
			data->prescaler     = prescaler;
   1e536:	738e      	strb	r6, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   1e538:	683e      	ldr	r6, [r7, #0]
			data->period_cycles = period_cycles;
   1e53a:	600a      	str	r2, [r1, #0]
			data->countertop    = (uint16_t)countertop;
   1e53c:	8188      	strh	r0, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   1e53e:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1e542:	f8c6 c504 	str.w	ip, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1e546:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e54a:	eb01 0c44 	add.w	ip, r1, r4, lsl #1
		| (pulse_cycles >> data->prescaler));
   1e54e:	7b88      	ldrb	r0, [r1, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e550:	f8bc 3004 	ldrh.w	r3, [ip, #4]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e554:	4542      	cmp	r2, r8
   1e556:	4616      	mov	r6, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e558:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e55c:	bf28      	it	cs
   1e55e:	4646      	movcs	r6, r8
		| (pulse_cycles >> data->prescaler));
   1e560:	fa26 f000 	lsr.w	r0, r6, r0
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		| (pulse_cycles >> data->prescaler));
   1e568:	4303      	orrs	r3, r0
	data->current[channel] = (
   1e56a:	f8ac 3004 	strh.w	r3, [ip, #4]
	if (!pwm_channel_is_active(channel, data)) {
   1e56e:	4620      	mov	r0, r4
   1e570:	f008 fefb 	bl	2736a <pwm_channel_is_active>
   1e574:	bba8      	cbnz	r0, 1e5e2 <pwm_nrfx_pin_set+0x102>
			config->initial_config.output_pins[channel]
   1e576:	193b      	adds	r3, r7, r4
   1e578:	f005 001f 	and.w	r0, r5, #31
   1e57c:	f993 3008 	ldrsb.w	r3, [r3, #8]
		bool pulse_0_and_not_inverted =
   1e580:	096d      	lsrs	r5, r5, #5
			&& !channel_inverted_state;
   1e582:	2e00      	cmp	r6, #0
   1e584:	f040 808c 	bne.w	1e6a0 <pwm_nrfx_pin_set+0x1c0>
			&& channel_inverted_state;
   1e588:	4542      	cmp	r2, r8
   1e58a:	d87c      	bhi.n	1e686 <pwm_nrfx_pin_set+0x1a6>
        case 1: return NRF_P1;
   1e58c:	2d01      	cmp	r5, #1
   1e58e:	4b48      	ldr	r3, [pc, #288]	; (1e6b0 <pwm_nrfx_pin_set+0x1d0>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e590:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1e594:	bf18      	it	ne
   1e596:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e59a:	4082      	lsls	r2, r0
    p_reg->OUTCLR = clr_mask;
   1e59c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
        case 0: return NRF_P0;
   1e5a0:	2200      	movs	r2, #0
   1e5a2:	b2d0      	uxtb	r0, r2
		if (i != channel && pwm_channel_is_active(i, data)) {
   1e5a4:	42a0      	cmp	r0, r4
   1e5a6:	d014      	beq.n	1e5d2 <pwm_nrfx_pin_set+0xf2>
   1e5a8:	f008 fedf 	bl	2736a <pwm_channel_is_active>
   1e5ac:	b188      	cbz	r0, 1e5d2 <pwm_nrfx_pin_set+0xf2>
	return 0;
   1e5ae:	2000      	movs	r0, #0
   1e5b0:	e029      	b.n	1e606 <pwm_nrfx_pin_set+0x126>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1e5b2:	3301      	adds	r3, #1
   1e5b4:	2b08      	cmp	r3, #8
		countertop >>= 1;
   1e5b6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1e5ba:	d1b8      	bne.n	1e52e <pwm_nrfx_pin_set+0x4e>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   1e5bc:	4b3d      	ldr	r3, [pc, #244]	; (1e6b4 <pwm_nrfx_pin_set+0x1d4>)
   1e5be:	e9cd 3206 	strd	r3, r2, [sp, #24]
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   1e5c2:	2303      	movs	r3, #3
   1e5c4:	9301      	str	r3, [sp, #4]
   1e5c6:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   1e5c8:	2300      	movs	r3, #0
   1e5ca:	aa05      	add	r2, sp, #20
   1e5cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e5d0:	e053      	b.n	1e67a <pwm_nrfx_pin_set+0x19a>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e5d2:	3201      	adds	r2, #1
   1e5d4:	2a04      	cmp	r2, #4
   1e5d6:	d1e4      	bne.n	1e5a2 <pwm_nrfx_pin_set+0xc2>
			nrfx_pwm_stop(&config->pwm, false);
   1e5d8:	2100      	movs	r1, #0
   1e5da:	4638      	mov	r0, r7
   1e5dc:	f009 f962 	bl	278a4 <nrfx_pwm_stop>
   1e5e0:	e7e5      	b.n	1e5ae <pwm_nrfx_pin_set+0xce>
		if (was_stopped) {
   1e5e2:	f1b9 0f00 	cmp.w	r9, #0
   1e5e6:	d0e2      	beq.n	1e5ae <pwm_nrfx_pin_set+0xce>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1e5e8:	4638      	mov	r0, r7
   1e5ea:	f001 fcc1 	bl	1ff70 <nrfx_pwm_is_stopped>
   1e5ee:	2800      	cmp	r0, #0
   1e5f0:	d0fa      	beq.n	1e5e8 <pwm_nrfx_pin_set+0x108>
			nrfx_pwm_simple_playback(&config->pwm,
   1e5f2:	2302      	movs	r3, #2
   1e5f4:	2201      	movs	r2, #1
   1e5f6:	f107 0118 	add.w	r1, r7, #24
   1e5fa:	4638      	mov	r0, r7
   1e5fc:	f001 fc7a 	bl	1fef4 <nrfx_pwm_simple_playback>
   1e600:	e7d5      	b.n	1e5ae <pwm_nrfx_pin_set+0xce>
		return -ENOTSUP;
   1e602:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1e606:	b009      	add	sp, #36	; 0x24
   1e608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e60c:	4620      	mov	r0, r4
   1e60e:	f008 feac 	bl	2736a <pwm_channel_is_active>
   1e612:	4606      	mov	r6, r0
   1e614:	2800      	cmp	r0, #0
   1e616:	d181      	bne.n	1e51c <pwm_nrfx_pin_set+0x3c>
   1e618:	b2f0      	uxtb	r0, r6
		if (i != channel && pwm_channel_is_active(i, data)) {
   1e61a:	42a0      	cmp	r0, r4
   1e61c:	d004      	beq.n	1e628 <pwm_nrfx_pin_set+0x148>
   1e61e:	f008 fea4 	bl	2736a <pwm_channel_is_active>
   1e622:	2800      	cmp	r0, #0
   1e624:	f47f af7a 	bne.w	1e51c <pwm_nrfx_pin_set+0x3c>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e628:	3601      	adds	r6, #1
   1e62a:	2e04      	cmp	r6, #4
   1e62c:	d1f4      	bne.n	1e618 <pwm_nrfx_pin_set+0x138>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e62e:	f04f 0901 	mov.w	r9, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1e632:	f897 c00e 	ldrb.w	ip, [r7, #14]
   1e636:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
   1e63a:	bf04      	itt	eq
   1e63c:	0852      	lsreq	r2, r2, #1
		pulse_cycles /= 2;
   1e63e:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
   1e642:	2a00      	cmp	r2, #0
   1e644:	d081      	beq.n	1e54a <pwm_nrfx_pin_set+0x6a>
   1e646:	680b      	ldr	r3, [r1, #0]
   1e648:	4293      	cmp	r3, r2
   1e64a:	f43f af7e 	beq.w	1e54a <pwm_nrfx_pin_set+0x6a>
   1e64e:	2300      	movs	r3, #0
				data->current[i]
   1e650:	1d0e      	adds	r6, r1, #4
		if (i != channel) {
   1e652:	b2d8      	uxtb	r0, r3
   1e654:	4284      	cmp	r4, r0
   1e656:	f43f af64 	beq.w	1e522 <pwm_nrfx_pin_set+0x42>
			uint16_t channel_pulse_cycle =
   1e65a:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   1e65e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1e662:	2800      	cmp	r0, #0
   1e664:	f43f af5d 	beq.w	1e522 <pwm_nrfx_pin_set+0x42>
				LOG_ERR("Incompatible period.");
   1e668:	4b13      	ldr	r3, [pc, #76]	; (1e6b8 <pwm_nrfx_pin_set+0x1d8>)
   1e66a:	9306      	str	r3, [sp, #24]
   1e66c:	2302      	movs	r3, #2
   1e66e:	9301      	str	r3, [sp, #4]
   1e670:	9305      	str	r3, [sp, #20]
   1e672:	2300      	movs	r3, #0
   1e674:	aa05      	add	r2, sp, #20
   1e676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e67a:	4810      	ldr	r0, [pc, #64]	; (1e6bc <pwm_nrfx_pin_set+0x1dc>)
   1e67c:	f004 fefb 	bl	23476 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1e680:	f06f 0015 	mvn.w	r0, #21
   1e684:	e7bf      	b.n	1e606 <pwm_nrfx_pin_set+0x126>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   1e686:	2b00      	cmp	r3, #0
   1e688:	da80      	bge.n	1e58c <pwm_nrfx_pin_set+0xac>
   1e68a:	2d01      	cmp	r5, #1
   1e68c:	4b08      	ldr	r3, [pc, #32]	; (1e6b0 <pwm_nrfx_pin_set+0x1d0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e68e:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
   1e692:	bf18      	it	ne
   1e694:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e698:	4082      	lsls	r2, r0
    p_reg->OUTSET = set_mask;
   1e69a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1e69e:	e77f      	b.n	1e5a0 <pwm_nrfx_pin_set+0xc0>
			&& channel_inverted_state;
   1e6a0:	4542      	cmp	r2, r8
   1e6a2:	d8f2      	bhi.n	1e68a <pwm_nrfx_pin_set+0x1aa>
   1e6a4:	2b00      	cmp	r3, #0
   1e6a6:	f6ff af71 	blt.w	1e58c <pwm_nrfx_pin_set+0xac>
   1e6aa:	e7ee      	b.n	1e68a <pwm_nrfx_pin_set+0x1aa>
   1e6ac:	0002c7da 	.word	0x0002c7da
   1e6b0:	50000300 	.word	0x50000300
   1e6b4:	0002c7b0 	.word	0x0002c7b0
   1e6b8:	0002c79b 	.word	0x0002c79b
   1e6bc:	000289f0 	.word	0x000289f0

0001e6c0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e6c0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e6c2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e6c6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1e6c8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e6ca:	6002      	str	r2, [r0, #0]
}
   1e6cc:	4802      	ldr	r0, [pc, #8]	; (1e6d8 <nrf_gpio_pin_port_decode+0x18>)
   1e6ce:	bf18      	it	ne
   1e6d0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e6d4:	4770      	bx	lr
   1e6d6:	bf00      	nop
   1e6d8:	50000300 	.word	0x50000300

0001e6dc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e6de:	794b      	ldrb	r3, [r1, #5]
   1e6e0:	2b01      	cmp	r3, #1
   1e6e2:	d026      	beq.n	1e732 <uarte_nrfx_configure+0x56>
   1e6e4:	2b03      	cmp	r3, #3
   1e6e6:	d121      	bne.n	1e72c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e6e8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e6ea:	798b      	ldrb	r3, [r1, #6]
   1e6ec:	2b03      	cmp	r3, #3
   1e6ee:	d11d      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e6f0:	79cc      	ldrb	r4, [r1, #7]
   1e6f2:	b10c      	cbz	r4, 1e6f8 <uarte_nrfx_configure+0x1c>
   1e6f4:	2c01      	cmp	r4, #1
   1e6f6:	d119      	bne.n	1e72c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e6f8:	790a      	ldrb	r2, [r1, #4]
   1e6fa:	b112      	cbz	r2, 1e702 <uarte_nrfx_configure+0x26>
   1e6fc:	2a02      	cmp	r2, #2
   1e6fe:	d115      	bne.n	1e72c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e700:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e702:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e704:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e706:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e70a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e70c:	d065      	beq.n	1e7da <uarte_nrfx_configure+0xfe>
   1e70e:	d82d      	bhi.n	1e76c <uarte_nrfx_configure+0x90>
   1e710:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e714:	d064      	beq.n	1e7e0 <uarte_nrfx_configure+0x104>
   1e716:	d816      	bhi.n	1e746 <uarte_nrfx_configure+0x6a>
   1e718:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e71c:	d062      	beq.n	1e7e4 <uarte_nrfx_configure+0x108>
   1e71e:	d80a      	bhi.n	1e736 <uarte_nrfx_configure+0x5a>
   1e720:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e724:	d061      	beq.n	1e7ea <uarte_nrfx_configure+0x10e>
   1e726:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e72a:	d061      	beq.n	1e7f0 <uarte_nrfx_configure+0x114>
   1e72c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e730:	e052      	b.n	1e7d8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1e732:	2600      	movs	r6, #0
   1e734:	e7d9      	b.n	1e6ea <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e736:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e73a:	d05c      	beq.n	1e7f6 <uarte_nrfx_configure+0x11a>
   1e73c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e740:	d1f4      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e742:	4b37      	ldr	r3, [pc, #220]	; (1e820 <uarte_nrfx_configure+0x144>)
   1e744:	e03c      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e746:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e74a:	d057      	beq.n	1e7fc <uarte_nrfx_configure+0x120>
   1e74c:	d807      	bhi.n	1e75e <uarte_nrfx_configure+0x82>
   1e74e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e752:	d055      	beq.n	1e800 <uarte_nrfx_configure+0x124>
   1e754:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e758:	d1e8      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e75a:	4b32      	ldr	r3, [pc, #200]	; (1e824 <uarte_nrfx_configure+0x148>)
   1e75c:	e030      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e75e:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e762:	42bb      	cmp	r3, r7
   1e764:	d1e2      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e766:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e76a:	e029      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e76c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e770:	d048      	beq.n	1e804 <uarte_nrfx_configure+0x128>
   1e772:	d813      	bhi.n	1e79c <uarte_nrfx_configure+0xc0>
   1e774:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e778:	d047      	beq.n	1e80a <uarte_nrfx_configure+0x12e>
   1e77a:	d809      	bhi.n	1e790 <uarte_nrfx_configure+0xb4>
   1e77c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e780:	42bb      	cmp	r3, r7
   1e782:	d044      	beq.n	1e80e <uarte_nrfx_configure+0x132>
   1e784:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e788:	d1d0      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e78a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e78e:	e017      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e790:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e794:	d1ca      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e796:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e79a:	e011      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e79c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e7a0:	d038      	beq.n	1e814 <uarte_nrfx_configure+0x138>
   1e7a2:	d808      	bhi.n	1e7b6 <uarte_nrfx_configure+0xda>
   1e7a4:	4f20      	ldr	r7, [pc, #128]	; (1e828 <uarte_nrfx_configure+0x14c>)
   1e7a6:	42bb      	cmp	r3, r7
   1e7a8:	d037      	beq.n	1e81a <uarte_nrfx_configure+0x13e>
   1e7aa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e7ae:	d1bd      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e7b0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e7b4:	e004      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e7b6:	4f1d      	ldr	r7, [pc, #116]	; (1e82c <uarte_nrfx_configure+0x150>)
   1e7b8:	42bb      	cmp	r3, r7
   1e7ba:	d1b7      	bne.n	1e72c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e7bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1e7c0:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e7c2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1e7c6:	1d03      	adds	r3, r0, #4
   1e7c8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e7ca:	4334      	orrs	r4, r6
   1e7cc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e7ce:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e7d2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e7d6:	2000      	movs	r0, #0
}
   1e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e7da:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e7de:	e7ef      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e7e0:	4b13      	ldr	r3, [pc, #76]	; (1e830 <uarte_nrfx_configure+0x154>)
   1e7e2:	e7ed      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e7e4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e7e8:	e7ea      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1e7ea:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e7ee:	e7e7      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e7f0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e7f4:	e7e4      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e7f6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e7fa:	e7e1      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e7fc:	4b0d      	ldr	r3, [pc, #52]	; (1e834 <uarte_nrfx_configure+0x158>)
   1e7fe:	e7df      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e800:	4b0d      	ldr	r3, [pc, #52]	; (1e838 <uarte_nrfx_configure+0x15c>)
   1e802:	e7dd      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e804:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e808:	e7da      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e80a:	4b0c      	ldr	r3, [pc, #48]	; (1e83c <uarte_nrfx_configure+0x160>)
   1e80c:	e7d8      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e80e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e812:	e7d5      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e814:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e818:	e7d2      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e81a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e81e:	e7cf      	b.n	1e7c0 <uarte_nrfx_configure+0xe4>
   1e820:	0013b000 	.word	0x0013b000
   1e824:	004ea000 	.word	0x004ea000
   1e828:	0003d090 	.word	0x0003d090
   1e82c:	000f4240 	.word	0x000f4240
   1e830:	00275000 	.word	0x00275000
   1e834:	0075c000 	.word	0x0075c000
   1e838:	003af000 	.word	0x003af000
   1e83c:	013a9000 	.word	0x013a9000

0001e840 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1e842:	6906      	ldr	r6, [r0, #16]
{
   1e844:	4605      	mov	r5, r0
   1e846:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e848:	f009 f9a7 	bl	27b9a <k_is_in_isr>
   1e84c:	b910      	cbnz	r0, 1e854 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1e84e:	4b20      	ldr	r3, [pc, #128]	; (1e8d0 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   1e850:	781b      	ldrb	r3, [r3, #0]
   1e852:	b983      	cbnz	r3, 1e876 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1e854:	f04f 0320 	mov.w	r3, #32
   1e858:	f3ef 8411 	mrs	r4, BASEPRI
   1e85c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e860:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e864:	6868      	ldr	r0, [r5, #4]
   1e866:	f008 fe99 	bl	2759c <is_tx_ready.isra.0>
   1e86a:	bb28      	cbnz	r0, 1e8b8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1e86c:	f384 8811 	msr	BASEPRI, r4
   1e870:	f3bf 8f6f 	isb	sy
}
   1e874:	e7ee      	b.n	1e854 <uarte_nrfx_poll_out+0x14>
{
   1e876:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e878:	6868      	ldr	r0, [r5, #4]
   1e87a:	f008 fe8f 	bl	2759c <is_tx_ready.isra.0>
   1e87e:	b970      	cbnz	r0, 1e89e <uarte_nrfx_poll_out+0x5e>
   1e880:	2001      	movs	r0, #1
   1e882:	f008 ff47 	bl	27714 <nrfx_busy_wait>
   1e886:	3c01      	subs	r4, #1
   1e888:	d1f6      	bne.n	1e878 <uarte_nrfx_poll_out+0x38>
   1e88a:	2100      	movs	r1, #0
   1e88c:	2021      	movs	r0, #33	; 0x21
   1e88e:	f003 fb97 	bl	21fc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e892:	e7f0      	b.n	1e876 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1e894:	f384 8811 	msr	BASEPRI, r4
   1e898:	f3bf 8f6f 	isb	sy
}
   1e89c:	e7f5      	b.n	1e88a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1e89e:	f04f 0320 	mov.w	r3, #32
   1e8a2:	f3ef 8411 	mrs	r4, BASEPRI
   1e8a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8aa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e8ae:	6868      	ldr	r0, [r5, #4]
   1e8b0:	f008 fe74 	bl	2759c <is_tx_ready.isra.0>
   1e8b4:	2800      	cmp	r0, #0
   1e8b6:	d0ed      	beq.n	1e894 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1e8b8:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1e8ba:	2201      	movs	r2, #1
	data->char_out = c;
   1e8bc:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1e8c0:	6868      	ldr	r0, [r5, #4]
   1e8c2:	f008 fe50 	bl	27566 <tx_start.isra.0>
	__asm__ volatile(
   1e8c6:	f384 8811 	msr	BASEPRI, r4
   1e8ca:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8d0:	20003f73 	.word	0x20003f73

0001e8d4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8d8:	2200      	movs	r2, #0
   1e8da:	4607      	mov	r7, r0
   1e8dc:	b088      	sub	sp, #32
   1e8de:	2101      	movs	r1, #1
   1e8e0:	2002      	movs	r0, #2
   1e8e2:	f7e9 fcf7 	bl	82d4 <z_arm_irq_priority_set>
   1e8e6:	2002      	movs	r0, #2
   1e8e8:	f7e9 fcc2 	bl	8270 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1e8ec:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1e8f0:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1e8f2:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e8f6:	2300      	movs	r3, #0
   1e8f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1e8fc:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   1e8fe:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e900:	68eb      	ldr	r3, [r5, #12]
   1e902:	1c5a      	adds	r2, r3, #1
   1e904:	d013      	beq.n	1e92e <uarte_0_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e906:	a802      	add	r0, sp, #8
   1e908:	9302      	str	r3, [sp, #8]
   1e90a:	f7ff fed9 	bl	1e6c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e90e:	9a02      	ldr	r2, [sp, #8]
   1e910:	2301      	movs	r3, #1
   1e912:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e914:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e918:	68eb      	ldr	r3, [r5, #12]
   1e91a:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e91c:	a802      	add	r0, sp, #8
   1e91e:	f7ff fecf 	bl	1e6c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e922:	9b02      	ldr	r3, [sp, #8]
   1e924:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e928:	2203      	movs	r2, #3
   1e92a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e92e:	6928      	ldr	r0, [r5, #16]
   1e930:	1c43      	adds	r3, r0, #1
   1e932:	d006      	beq.n	1e942 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1e934:	7f2b      	ldrb	r3, [r5, #28]
   1e936:	2b00      	cmp	r3, #0
   1e938:	bf14      	ite	ne
   1e93a:	2103      	movne	r1, #3
   1e93c:	2100      	moveq	r1, #0
   1e93e:	f008 fe04 	bl	2754a <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e942:	696b      	ldr	r3, [r5, #20]
   1e944:	1c5a      	adds	r2, r3, #1
   1e946:	d013      	beq.n	1e970 <uarte_0_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e948:	a802      	add	r0, sp, #8
   1e94a:	9302      	str	r3, [sp, #8]
   1e94c:	f7ff feb8 	bl	1e6c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e950:	9a02      	ldr	r2, [sp, #8]
   1e952:	2301      	movs	r3, #1
   1e954:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e956:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e95a:	696b      	ldr	r3, [r5, #20]
   1e95c:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e95e:	a802      	add	r0, sp, #8
   1e960:	f7ff feae 	bl	1e6c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e964:	9b02      	ldr	r3, [sp, #8]
   1e966:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e96a:	2203      	movs	r2, #3
   1e96c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e970:	69a8      	ldr	r0, [r5, #24]
   1e972:	1c43      	adds	r3, r0, #1
   1e974:	d006      	beq.n	1e984 <uarte_0_init+0xb0>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1e976:	7f6b      	ldrb	r3, [r5, #29]
   1e978:	2b00      	cmp	r3, #0
   1e97a:	bf14      	ite	ne
   1e97c:	2103      	movne	r1, #3
   1e97e:	2100      	moveq	r1, #0
   1e980:	f008 fde3 	bl	2754a <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1e984:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1e988:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1e98a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e98e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1e992:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1e996:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   1e998:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1e99c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1e9a0:	1d31      	adds	r1, r6, #4
   1e9a2:	f7ff fe9b 	bl	1e6dc <uarte_nrfx_configure>
	if (err) {
   1e9a6:	4605      	mov	r5, r0
   1e9a8:	b9c0      	cbnz	r0, 1e9dc <uarte_0_init+0x108>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e9aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e9ae:	0799      	lsls	r1, r3, #30
   1e9b0:	d52b      	bpl.n	1ea0a <uarte_0_init+0x136>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e9b2:	f106 0016 	add.w	r0, r6, #22
   1e9b6:	f001 f9eb 	bl	1fd90 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e9ba:	4b29      	ldr	r3, [pc, #164]	; (1ea60 <uarte_0_init+0x18c>)
   1e9bc:	4298      	cmp	r0, r3
   1e9be:	d011      	beq.n	1e9e4 <uarte_0_init+0x110>
		LOG_ERR("Failed to allocate PPI Channel");
   1e9c0:	4b28      	ldr	r3, [pc, #160]	; (1ea64 <uarte_0_init+0x190>)
   1e9c2:	9306      	str	r3, [sp, #24]
   1e9c4:	2302      	movs	r3, #2
   1e9c6:	9301      	str	r3, [sp, #4]
   1e9c8:	9305      	str	r3, [sp, #20]
   1e9ca:	4827      	ldr	r0, [pc, #156]	; (1ea68 <uarte_0_init+0x194>)
   1e9cc:	462b      	mov	r3, r5
   1e9ce:	aa05      	add	r2, sp, #20
   1e9d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1e9d4:	f06f 0504 	mvn.w	r5, #4
   1e9d8:	f004 fd4d 	bl	23476 <z_impl_z_log_msg2_static_create>
UART_NRF_UARTE_DEVICE(0);
   1e9dc:	4628      	mov	r0, r5
   1e9de:	b008      	add	sp, #32
   1e9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e9e4:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e9e6:	00c3      	lsls	r3, r0, #3
   1e9e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e9ec:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e9f0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e9f4:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e9f8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e9fc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1ea00:	4a1a      	ldr	r2, [pc, #104]	; (1ea6c <uarte_0_init+0x198>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ea02:	2301      	movs	r3, #1
   1ea04:	4083      	lsls	r3, r0
   1ea06:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ea0a:	2308      	movs	r3, #8
   1ea0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1ea10:	f898 3008 	ldrb.w	r3, [r8, #8]
   1ea14:	b95b      	cbnz	r3, 1ea2e <uarte_0_init+0x15a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea16:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ea1a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ea1e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ea22:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ea26:	2301      	movs	r3, #1
   1ea28:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea2c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ea2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ea32:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1ea34:	bf5c      	itt	pl
   1ea36:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1ea3a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ea3e:	06db      	lsls	r3, r3, #27
   1ea40:	bf44      	itt	mi
   1ea42:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ea46:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ea4a:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
   1ea4c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ea4e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ea52:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea56:	2301      	movs	r3, #1
   1ea58:	60a3      	str	r3, [r4, #8]
   1ea5a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1ea5c:	e7be      	b.n	1e9dc <uarte_0_init+0x108>
   1ea5e:	bf00      	nop
   1ea60:	0bad0000 	.word	0x0bad0000
   1ea64:	0002c81b 	.word	0x0002c81b
   1ea68:	00028a00 	.word	0x00028a00
   1ea6c:	4001f000 	.word	0x4001f000

0001ea70 <random_byte_get>:
	__asm__ volatile(
   1ea70:	f04f 0320 	mov.w	r3, #32
   1ea74:	f3ef 8211 	mrs	r2, BASEPRI
   1ea78:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea7c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ea80:	4b09      	ldr	r3, [pc, #36]	; (1eaa8 <random_byte_get+0x38>)
   1ea82:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ea86:	b161      	cbz	r1, 1eaa2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ea88:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ea8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ea8e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1ea92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ea96:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1ea98:	f382 8811 	msr	BASEPRI, r2
   1ea9c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1eaa0:	4770      	bx	lr
	int retval = -EAGAIN;
   1eaa2:	f06f 000a 	mvn.w	r0, #10
   1eaa6:	e7f7      	b.n	1ea98 <random_byte_get+0x28>
   1eaa8:	4000d000 	.word	0x4000d000

0001eaac <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1eaac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eaae:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1eab0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1eab2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1eab4:	f04f 0020 	mov.w	r0, #32
   1eab8:	f3ef 8e11 	mrs	lr, BASEPRI
   1eabc:	f380 8812 	msr	BASEPRI_MAX, r0
   1eac0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1eac4:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1eac6:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1eaca:	1ba4      	subs	r4, r4, r6
   1eacc:	403c      	ands	r4, r7
	if (available < len) {
   1eace:	42a2      	cmp	r2, r4
		len = available;
   1ead0:	bf88      	it	hi
   1ead2:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ead4:	18b0      	adds	r0, r6, r2
   1ead6:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1ead8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1eada:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1eadc:	f38e 8811 	msr	BASEPRI, lr
   1eae0:	f3bf 8f6f 	isb	sy
   1eae4:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1eae6:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1eae8:	4290      	cmp	r0, r2
   1eaea:	d119      	bne.n	1eb20 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1eaec:	4566      	cmp	r6, ip
   1eaee:	d10d      	bne.n	1eb0c <rng_pool_get+0x60>
	__asm__ volatile(
   1eaf0:	f04f 0520 	mov.w	r5, #32
   1eaf4:	f3ef 8011 	mrs	r0, BASEPRI
   1eaf8:	f385 8812 	msr	BASEPRI_MAX, r5
   1eafc:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1eb00:	781d      	ldrb	r5, [r3, #0]
   1eb02:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1eb04:	f380 8811 	msr	BASEPRI, r0
   1eb08:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1eb0c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1eb0e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1eb10:	b290      	uxth	r0, r2
	available = available - len;
   1eb12:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1eb14:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eb16:	bf22      	ittt	cs
   1eb18:	4b06      	ldrcs	r3, [pc, #24]	; (1eb34 <rng_pool_get+0x88>)
   1eb1a:	2201      	movcs	r2, #1
   1eb1c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1eb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1eb20:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1eb24:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1eb26:	f89e e005 	ldrb.w	lr, [lr, #5]
   1eb2a:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1eb2e:	403d      	ands	r5, r7
   1eb30:	e7da      	b.n	1eae8 <rng_pool_get+0x3c>
   1eb32:	bf00      	nop
   1eb34:	4000d000 	.word	0x4000d000

0001eb38 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eb38:	43db      	mvns	r3, r3
{
   1eb3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eb3e:	f013 0501 	ands.w	r5, r3, #1
{
   1eb42:	460e      	mov	r6, r1
   1eb44:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eb46:	d004      	beq.n	1eb52 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1eb48:	4821      	ldr	r0, [pc, #132]	; (1ebd0 <entropy_nrf5_get_entropy_isr+0x98>)
   1eb4a:	f7ff ffaf 	bl	1eaac <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1eb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1eb52:	b3a2      	cbz	r2, 1ebbe <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1eb54:	f04f 0320 	mov.w	r3, #32
   1eb58:	f3ef 8811 	mrs	r8, BASEPRI
   1eb5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb60:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1eb64:	200d      	movs	r0, #13
   1eb66:	f7e9 fba7 	bl	82b8 <arch_irq_is_enabled>
   1eb6a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1eb6c:	200d      	movs	r0, #13
   1eb6e:	f7e9 fb8f 	bl	8290 <arch_irq_disable>
	__asm__ volatile(
   1eb72:	f388 8811 	msr	BASEPRI, r8
   1eb76:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eb7a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ebd4 <entropy_nrf5_get_entropy_isr+0x9c>
   1eb7e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ebd8 <entropy_nrf5_get_entropy_isr+0xa0>
   1eb82:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1eb86:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1eb8a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eb8e:	2301      	movs	r3, #1
   1eb90:	f8c8 3000 	str.w	r3, [r8]
   1eb94:	4625      	mov	r5, r4
   1eb96:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1eb9a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1eb9e:	b183      	cbz	r3, 1ebc2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1eba0:	f7ff ff66 	bl	1ea70 <random_byte_get>
			if (byte < 0) {
   1eba4:	1e03      	subs	r3, r0, #0
   1eba6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ebaa:	dbf6      	blt.n	1eb9a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1ebac:	3d01      	subs	r5, #1
   1ebae:	b2ad      	uxth	r5, r5
   1ebb0:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ebb2:	2d00      	cmp	r5, #0
   1ebb4:	d1f1      	bne.n	1eb9a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1ebb6:	b117      	cbz	r7, 1ebbe <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1ebb8:	200d      	movs	r0, #13
   1ebba:	f7e9 fb59 	bl	8270 <arch_irq_enable>
	return cnt;
   1ebbe:	4620      	mov	r0, r4
   1ebc0:	e7c5      	b.n	1eb4e <entropy_nrf5_get_entropy_isr+0x16>
   1ebc2:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ebc6:	bf20      	wfe
				__SEV();
   1ebc8:	bf40      	sev
				__WFE();
   1ebca:	bf20      	wfe
   1ebcc:	e7e5      	b.n	1eb9a <entropy_nrf5_get_entropy_isr+0x62>
   1ebce:	bf00      	nop
   1ebd0:	20003ae4 	.word	0x20003ae4
   1ebd4:	4000d000 	.word	0x4000d000
   1ebd8:	e000e100 	.word	0xe000e100

0001ebdc <entropy_nrf5_get_entropy>:
{
   1ebdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ebe0:	4f13      	ldr	r7, [pc, #76]	; (1ec30 <entropy_nrf5_get_entropy+0x54>)
   1ebe2:	460d      	mov	r5, r1
   1ebe4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ebe6:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ebea:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ebee:	b914      	cbnz	r4, 1ebf6 <entropy_nrf5_get_entropy+0x1a>
}
   1ebf0:	4620      	mov	r0, r4
   1ebf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ebf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ebfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ebfe:	4638      	mov	r0, r7
   1ec00:	f002 fd20 	bl	21644 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ec04:	4622      	mov	r2, r4
   1ec06:	4629      	mov	r1, r5
   1ec08:	4640      	mov	r0, r8
   1ec0a:	f7ff ff4f 	bl	1eaac <rng_pool_get>
   1ec0e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ec10:	4638      	mov	r0, r7
   1ec12:	f002 fcf1 	bl	215f8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ec16:	b93e      	cbnz	r6, 1ec28 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ec18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec20:	4648      	mov	r0, r9
   1ec22:	f002 fd0f 	bl	21644 <z_impl_k_sem_take>
			continue;
   1ec26:	e7e2      	b.n	1ebee <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ec28:	1ba4      	subs	r4, r4, r6
   1ec2a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ec2c:	4435      	add	r5, r6
   1ec2e:	e7de      	b.n	1ebee <entropy_nrf5_get_entropy+0x12>
   1ec30:	20003ab4 	.word	0x20003ab4

0001ec34 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ec34:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ec36:	4c19      	ldr	r4, [pc, #100]	; (1ec9c <entropy_nrf5_init+0x68>)
   1ec38:	2201      	movs	r2, #1
   1ec3a:	4611      	mov	r1, r2
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	f009 f89c 	bl	27d7a <z_impl_k_sem_init>
   1ec42:	2201      	movs	r2, #1
   1ec44:	2100      	movs	r1, #0
   1ec46:	f104 0018 	add.w	r0, r4, #24
   1ec4a:	f009 f896 	bl	27d7a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ec4e:	f240 4307 	movw	r3, #1031	; 0x407
   1ec52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ec56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ec5a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ec5c:	230c      	movs	r3, #12
   1ec5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ec62:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ec64:	4b0e      	ldr	r3, [pc, #56]	; (1eca0 <entropy_nrf5_init+0x6c>)
   1ec66:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ec6a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ec6e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ec72:	f042 0201 	orr.w	r2, r2, #1
   1ec76:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ec7a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ec7c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ec80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ec84:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ec88:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ec8a:	6019      	str	r1, [r3, #0]
   1ec8c:	200d      	movs	r0, #13
   1ec8e:	f7e9 fb21 	bl	82d4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ec92:	200d      	movs	r0, #13
   1ec94:	f7e9 faec 	bl	8270 <arch_irq_enable>

	return 0;
}
   1ec98:	4628      	mov	r0, r5
   1ec9a:	bd38      	pop	{r3, r4, r5, pc}
   1ec9c:	20003ab4 	.word	0x20003ab4
   1eca0:	4000d000 	.word	0x4000d000

0001eca4 <isr>:
{
   1eca4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1eca6:	f7ff fee3 	bl	1ea70 <random_byte_get>
	if (byte < 0) {
   1ecaa:	2800      	cmp	r0, #0
   1ecac:	db20      	blt.n	1ecf0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ecae:	4b17      	ldr	r3, [pc, #92]	; (1ed0c <isr+0x68>)
   1ecb0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ecb4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ecb8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ecbc:	1a51      	subs	r1, r2, r1
   1ecbe:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ecc2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ecc4:	d10d      	bne.n	1ece2 <isr+0x3e>
	uint8_t last  = rngp->last;
   1ecc6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ecca:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ecce:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ecd2:	1a51      	subs	r1, r2, r1
   1ecd4:	ea34 0101 	bics.w	r1, r4, r1
   1ecd8:	d10b      	bne.n	1ecf2 <isr+0x4e>
   1ecda:	4b0d      	ldr	r3, [pc, #52]	; (1ed10 <isr+0x6c>)
   1ecdc:	2201      	movs	r2, #1
   1ecde:	605a      	str	r2, [r3, #4]
}
   1ece0:	e00e      	b.n	1ed00 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ece2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ece4:	3201      	adds	r2, #1
   1ece6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ece8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ecec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ecf0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ecf2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ecf4:	3201      	adds	r2, #1
   1ecf6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ecf8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ecfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ed00:	4804      	ldr	r0, [pc, #16]	; (1ed14 <isr+0x70>)
}
   1ed02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ed06:	f002 bc77 	b.w	215f8 <z_impl_k_sem_give>
   1ed0a:	bf00      	nop
   1ed0c:	20003ab4 	.word	0x20003ab4
   1ed10:	4000d000 	.word	0x4000d000
   1ed14:	20003acc 	.word	0x20003acc

0001ed18 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1ed18:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ed1a:	2301      	movs	r3, #1
   1ed1c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ed1e:	4a11      	ldr	r2, [pc, #68]	; (1ed64 <compare_int_lock+0x4c>)
   1ed20:	f3bf 8f5b 	dmb	ish
   1ed24:	43dc      	mvns	r4, r3
   1ed26:	e852 1f00 	ldrex	r1, [r2]
   1ed2a:	ea01 0c04 	and.w	ip, r1, r4
   1ed2e:	e842 ce00 	strex	lr, ip, [r2]
   1ed32:	f1be 0f00 	cmp.w	lr, #0
   1ed36:	d1f6      	bne.n	1ed26 <compare_int_lock+0xe>
   1ed38:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ed3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ed40:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1ed44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ed48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ed4c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ed50:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ed54:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ed58:	420b      	tst	r3, r1
}
   1ed5a:	bf14      	ite	ne
   1ed5c:	2001      	movne	r0, #1
   1ed5e:	2000      	moveq	r0, #0
   1ed60:	bd10      	pop	{r4, pc}
   1ed62:	bf00      	nop
   1ed64:	20003b0c 	.word	0x20003b0c

0001ed68 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ed68:	4919      	ldr	r1, [pc, #100]	; (1edd0 <sys_clock_timeout_handler+0x68>)
{
   1ed6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed6c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1ed6e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ed72:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1ed74:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ed78:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ed7c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1ed7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ed82:	d222      	bcs.n	1edca <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ed84:	4b13      	ldr	r3, [pc, #76]	; (1edd4 <sys_clock_timeout_handler+0x6c>)
   1ed86:	681b      	ldr	r3, [r3, #0]
   1ed88:	0a1a      	lsrs	r2, r3, #8
   1ed8a:	061b      	lsls	r3, r3, #24
   1ed8c:	195e      	adds	r6, r3, r5
   1ed8e:	4b12      	ldr	r3, [pc, #72]	; (1edd8 <sys_clock_timeout_handler+0x70>)
   1ed90:	f142 0700 	adc.w	r7, r2, #0
   1ed94:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1ed98:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ed9a:	f003 fa83 	bl	222a4 <sys_clock_announce>
    return p_reg->CC[ch];
   1ed9e:	00a3      	lsls	r3, r4, #2
   1eda0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eda4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1eda8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1edac:	42aa      	cmp	r2, r5
   1edae:	d10b      	bne.n	1edc8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1edb0:	b91e      	cbnz	r6, 1edba <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1edb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1edb6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1edba:	4b08      	ldr	r3, [pc, #32]	; (1eddc <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1edbc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1edc0:	fa00 f404 	lsl.w	r4, r0, r4
   1edc4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1edc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1edca:	2600      	movs	r6, #0
   1edcc:	e7e5      	b.n	1ed9a <sys_clock_timeout_handler+0x32>
   1edce:	bf00      	nop
   1edd0:	20001c48 	.word	0x20001c48
   1edd4:	20003b10 	.word	0x20003b10
   1edd8:	20001c30 	.word	0x20001c30
   1eddc:	40011000 	.word	0x40011000

0001ede0 <compare_int_unlock>:
	if (key) {
   1ede0:	b319      	cbz	r1, 1ee2a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ede2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1ede6:	2301      	movs	r3, #1
   1ede8:	4a10      	ldr	r2, [pc, #64]	; (1ee2c <compare_int_unlock+0x4c>)
   1edea:	4083      	lsls	r3, r0
   1edec:	e852 1f00 	ldrex	r1, [r2]
   1edf0:	4319      	orrs	r1, r3
   1edf2:	e842 1c00 	strex	ip, r1, [r2]
   1edf6:	f1bc 0f00 	cmp.w	ip, #0
   1edfa:	d1f7      	bne.n	1edec <compare_int_unlock+0xc>
   1edfc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ee00:	4a0b      	ldr	r2, [pc, #44]	; (1ee30 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ee02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ee06:	4083      	lsls	r3, r0
   1ee08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ee0c:	4b09      	ldr	r3, [pc, #36]	; (1ee34 <compare_int_unlock+0x54>)
   1ee0e:	f3bf 8f5b 	dmb	ish
   1ee12:	681b      	ldr	r3, [r3, #0]
   1ee14:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ee18:	fa23 f000 	lsr.w	r0, r3, r0
   1ee1c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ee1e:	bf42      	ittt	mi
   1ee20:	4b05      	ldrmi	r3, [pc, #20]	; (1ee38 <compare_int_unlock+0x58>)
   1ee22:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ee26:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ee2a:	4770      	bx	lr
   1ee2c:	20003b0c 	.word	0x20003b0c
   1ee30:	40011000 	.word	0x40011000
   1ee34:	20003b08 	.word	0x20003b08
   1ee38:	e000e100 	.word	0xe000e100

0001ee3c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ee3c:	4b0d      	ldr	r3, [pc, #52]	; (1ee74 <z_nrf_rtc_timer_read+0x38>)
   1ee3e:	6818      	ldr	r0, [r3, #0]
   1ee40:	0a01      	lsrs	r1, r0, #8
   1ee42:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ee44:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ee48:	4b0b      	ldr	r3, [pc, #44]	; (1ee78 <z_nrf_rtc_timer_read+0x3c>)
   1ee4a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ee4e:	1818      	adds	r0, r3, r0
   1ee50:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ee54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ee58:	d20a      	bcs.n	1ee70 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ee5a:	4b08      	ldr	r3, [pc, #32]	; (1ee7c <z_nrf_rtc_timer_read+0x40>)
   1ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee60:	4290      	cmp	r0, r2
   1ee62:	eb71 0303 	sbcs.w	r3, r1, r3
   1ee66:	d203      	bcs.n	1ee70 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1ee68:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ee6c:	f141 0100 	adc.w	r1, r1, #0
}
   1ee70:	4770      	bx	lr
   1ee72:	bf00      	nop
   1ee74:	20003b10 	.word	0x20003b10
   1ee78:	40011000 	.word	0x40011000
   1ee7c:	20001c30 	.word	0x20001c30

0001ee80 <compare_set>:
{
   1ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee84:	b085      	sub	sp, #20
   1ee86:	4616      	mov	r6, r2
   1ee88:	4698      	mov	r8, r3
   1ee8a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1ee8c:	f7ff ff44 	bl	1ed18 <compare_int_lock>
   1ee90:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1ee92:	f7ff ffd3 	bl	1ee3c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1ee96:	42b0      	cmp	r0, r6
   1ee98:	eb71 0308 	sbcs.w	r3, r1, r8
   1ee9c:	d278      	bcs.n	1ef90 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1ee9e:	4b46      	ldr	r3, [pc, #280]	; (1efb8 <compare_set+0x138>)
   1eea0:	1a30      	subs	r0, r6, r0
   1eea2:	eb68 0101 	sbc.w	r1, r8, r1
   1eea6:	4298      	cmp	r0, r3
   1eea8:	f171 0300 	sbcs.w	r3, r1, #0
   1eeac:	f080 8081 	bcs.w	1efb2 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1eeb0:	4b42      	ldr	r3, [pc, #264]	; (1efbc <compare_set+0x13c>)
   1eeb2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1eeb6:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1eeba:	45d8      	cmp	r8, fp
   1eebc:	bf08      	it	eq
   1eebe:	4556      	cmpeq	r6, sl
   1eec0:	d051      	beq.n	1ef66 <compare_set+0xe6>
   1eec2:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1eec6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1eeca:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1eece:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1eed2:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eed4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1eed8:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eedc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1eede:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1eee2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eee6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1eee8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1eeec:	4b34      	ldr	r3, [pc, #208]	; (1efc0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eeee:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1eef2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1eef4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1eef8:	1a40      	subs	r0, r0, r1
   1eefa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1eefe:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1ef02:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1ef04:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1ef08:	d107      	bne.n	1ef1a <compare_set+0x9a>
   1ef0a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1ef0e:	2013      	movs	r0, #19
   1ef10:	f009 f97c 	bl	2820c <z_impl_k_busy_wait>
   1ef14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1ef18:	4b29      	ldr	r3, [pc, #164]	; (1efc0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1ef1a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1ef1e:	eba4 000c 	sub.w	r0, r4, ip
   1ef22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1ef26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ef2a:	bf88      	it	hi
   1ef2c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ef2e:	2000      	movs	r0, #0
   1ef30:	6038      	str	r0, [r7, #0]
   1ef32:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1ef34:	9801      	ldr	r0, [sp, #4]
   1ef36:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ef3a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1ef3e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1ef42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1ef46:	4281      	cmp	r1, r0
   1ef48:	d006      	beq.n	1ef58 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1ef4a:	1a20      	subs	r0, r4, r0
   1ef4c:	3802      	subs	r0, #2
   1ef4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1ef52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ef56:	d819      	bhi.n	1ef8c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1ef58:	1aa4      	subs	r4, r4, r2
   1ef5a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1ef5e:	eb14 0a06 	adds.w	sl, r4, r6
   1ef62:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1ef66:	4915      	ldr	r1, [pc, #84]	; (1efbc <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1ef68:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1ef6a:	012b      	lsls	r3, r5, #4
   1ef6c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1ef70:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1ef74:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1ef76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ef78:	6053      	str	r3, [r2, #4]
	return ret;
   1ef7a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1ef7c:	4628      	mov	r0, r5
   1ef7e:	9900      	ldr	r1, [sp, #0]
   1ef80:	f7ff ff2e 	bl	1ede0 <compare_int_unlock>
}
   1ef84:	4620      	mov	r0, r4
   1ef86:	b005      	add	sp, #20
   1ef88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef8c:	4620      	mov	r0, r4
   1ef8e:	e7b1      	b.n	1eef4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1ef90:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ef92:	4a0c      	ldr	r2, [pc, #48]	; (1efc4 <compare_set+0x144>)
   1ef94:	f3bf 8f5b 	dmb	ish
   1ef98:	40ab      	lsls	r3, r5
   1ef9a:	e852 1f00 	ldrex	r1, [r2]
   1ef9e:	4319      	orrs	r1, r3
   1efa0:	e842 1000 	strex	r0, r1, [r2]
   1efa4:	2800      	cmp	r0, #0
   1efa6:	d1f8      	bne.n	1ef9a <compare_set+0x11a>
   1efa8:	f3bf 8f5b 	dmb	ish
   1efac:	46b2      	mov	sl, r6
   1efae:	46c3      	mov	fp, r8
   1efb0:	e7d9      	b.n	1ef66 <compare_set+0xe6>
			return -EINVAL;
   1efb2:	f06f 0415 	mvn.w	r4, #21
   1efb6:	e7e1      	b.n	1ef7c <compare_set+0xfc>
   1efb8:	01000001 	.word	0x01000001
   1efbc:	20001c38 	.word	0x20001c38
   1efc0:	40011000 	.word	0x40011000
   1efc4:	20003b08 	.word	0x20003b08

0001efc8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1efc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1efca:	4b19      	ldr	r3, [pc, #100]	; (1f030 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1efcc:	4d19      	ldr	r5, [pc, #100]	; (1f034 <sys_clock_driver_init+0x6c>)
   1efce:	2400      	movs	r4, #0
   1efd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1efd8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1efdc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1efe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1efe4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1efe8:	4b13      	ldr	r3, [pc, #76]	; (1f038 <sys_clock_driver_init+0x70>)
   1efea:	2602      	movs	r6, #2
   1efec:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1eff0:	2101      	movs	r1, #1
   1eff2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1eff6:	2011      	movs	r0, #17
   1eff8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1effc:	4622      	mov	r2, r4
   1effe:	f7e9 f969 	bl	82d4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f002:	2011      	movs	r0, #17
   1f004:	f7e9 f934 	bl	8270 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f008:	4a0c      	ldr	r2, [pc, #48]	; (1f03c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f00a:	2301      	movs	r3, #1
   1f00c:	60ab      	str	r3, [r5, #8]
   1f00e:	602b      	str	r3, [r5, #0]
   1f010:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f012:	4b0b      	ldr	r3, [pc, #44]	; (1f040 <sys_clock_driver_init+0x78>)
   1f014:	4a0b      	ldr	r2, [pc, #44]	; (1f044 <sys_clock_driver_init+0x7c>)
   1f016:	9300      	str	r3, [sp, #0]
   1f018:	9401      	str	r4, [sp, #4]
   1f01a:	2300      	movs	r3, #0
   1f01c:	4620      	mov	r0, r4
   1f01e:	f7ff ff2f 	bl	1ee80 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f022:	4630      	mov	r0, r6
   1f024:	f7ff f80c 	bl	1e040 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f028:	4620      	mov	r0, r4
   1f02a:	b002      	add	sp, #8
   1f02c:	bd70      	pop	{r4, r5, r6, pc}
   1f02e:	bf00      	nop
   1f030:	20001c38 	.word	0x20001c38
   1f034:	40011000 	.word	0x40011000
   1f038:	e000e100 	.word	0xe000e100
   1f03c:	20003b0c 	.word	0x20003b0c
   1f040:	0001ed69 	.word	0x0001ed69
   1f044:	007fffff 	.word	0x007fffff

0001f048 <rtc_nrf_isr>:
{
   1f048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1f04c:	4c35      	ldr	r4, [pc, #212]	; (1f124 <rtc_nrf_isr+0xdc>)
   1f04e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f052:	079a      	lsls	r2, r3, #30
   1f054:	d50b      	bpl.n	1f06e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f056:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f05a:	b143      	cbz	r3, 1f06e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1f05c:	4a32      	ldr	r2, [pc, #200]	; (1f128 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f05e:	2300      	movs	r3, #0
   1f060:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1f064:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f068:	6813      	ldr	r3, [r2, #0]
   1f06a:	3301      	adds	r3, #1
   1f06c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1f06e:	f04f 0320 	mov.w	r3, #32
   1f072:	f3ef 8211 	mrs	r2, BASEPRI
   1f076:	f383 8812 	msr	BASEPRI_MAX, r3
   1f07a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   1f07e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f082:	03db      	lsls	r3, r3, #15
   1f084:	d512      	bpl.n	1f0ac <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f086:	f3bf 8f5b 	dmb	ish
   1f08a:	4b28      	ldr	r3, [pc, #160]	; (1f12c <rtc_nrf_isr+0xe4>)
   1f08c:	e853 1f00 	ldrex	r1, [r3]
   1f090:	f021 0001 	bic.w	r0, r1, #1
   1f094:	e843 0600 	strex	r6, r0, [r3]
   1f098:	2e00      	cmp	r6, #0
   1f09a:	d1f7      	bne.n	1f08c <rtc_nrf_isr+0x44>
   1f09c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f0a0:	2900      	cmp	r1, #0
   1f0a2:	d136      	bne.n	1f112 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   1f0a8:	2b00      	cmp	r3, #0
   1f0aa:	d132      	bne.n	1f112 <rtc_nrf_isr+0xca>
{
   1f0ac:	2300      	movs	r3, #0
	__asm__ volatile(
   1f0ae:	f382 8811 	msr	BASEPRI, r2
   1f0b2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1f0b6:	b34b      	cbz	r3, 1f10c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   1f0b8:	f7ff fec0 	bl	1ee3c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1f0bc:	f04f 0320 	mov.w	r3, #32
   1f0c0:	f3ef 8c11 	mrs	ip, BASEPRI
   1f0c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0c8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1f0cc:	4b18      	ldr	r3, [pc, #96]	; (1f130 <rtc_nrf_isr+0xe8>)
   1f0ce:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1f0d2:	42b0      	cmp	r0, r6
   1f0d4:	eb71 0207 	sbcs.w	r2, r1, r7
   1f0d8:	f04f 0200 	mov.w	r2, #0
   1f0dc:	d320      	bcc.n	1f120 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f0de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1f0e2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1f0e6:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f0ea:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   1f0ee:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   1f0f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f0f4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   1f0f8:	f38c 8811 	msr	BASEPRI, ip
   1f0fc:	f3bf 8f6f 	isb	sy
		if (handler) {
   1f100:	b121      	cbz	r1, 1f10c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   1f102:	9500      	str	r5, [sp, #0]
   1f104:	4632      	mov	r2, r6
   1f106:	463b      	mov	r3, r7
   1f108:	2000      	movs	r0, #0
   1f10a:	4788      	blx	r1
}
   1f10c:	b003      	add	sp, #12
   1f10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f112:	2300      	movs	r3, #0
   1f114:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   1f118:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f11c:	2301      	movs	r3, #1
}
   1f11e:	e7c6      	b.n	1f0ae <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f120:	4611      	mov	r1, r2
   1f122:	e7e9      	b.n	1f0f8 <rtc_nrf_isr+0xb0>
   1f124:	40011000 	.word	0x40011000
   1f128:	20003b10 	.word	0x20003b10
   1f12c:	20003b08 	.word	0x20003b08
   1f130:	20001c38 	.word	0x20001c38

0001f134 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f134:	1c43      	adds	r3, r0, #1
{
   1f136:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f138:	d021      	beq.n	1f17e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f13a:	2801      	cmp	r0, #1
   1f13c:	dd21      	ble.n	1f182 <sys_clock_set_timeout+0x4e>
   1f13e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f142:	da20      	bge.n	1f186 <sys_clock_set_timeout+0x52>
   1f144:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1f146:	f7ff fe79 	bl	1ee3c <z_nrf_rtc_timer_read>
   1f14a:	4b10      	ldr	r3, [pc, #64]	; (1f18c <sys_clock_set_timeout+0x58>)
   1f14c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1f150:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1f152:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f156:	bf28      	it	cs
   1f158:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1f15a:	3001      	adds	r0, #1
   1f15c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1f15e:	480c      	ldr	r0, [pc, #48]	; (1f190 <sys_clock_set_timeout+0x5c>)
   1f160:	4282      	cmp	r2, r0
   1f162:	bf28      	it	cs
   1f164:	4602      	movcs	r2, r0
   1f166:	1852      	adds	r2, r2, r1
   1f168:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1f16c:	4909      	ldr	r1, [pc, #36]	; (1f194 <sys_clock_set_timeout+0x60>)
   1f16e:	9001      	str	r0, [sp, #4]
   1f170:	9100      	str	r1, [sp, #0]
   1f172:	f143 0300 	adc.w	r3, r3, #0
   1f176:	f7ff fe83 	bl	1ee80 <compare_set>
}
   1f17a:	b002      	add	sp, #8
   1f17c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f17e:	4804      	ldr	r0, [pc, #16]	; (1f190 <sys_clock_set_timeout+0x5c>)
   1f180:	e7e0      	b.n	1f144 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f182:	2400      	movs	r4, #0
   1f184:	e7df      	b.n	1f146 <sys_clock_set_timeout+0x12>
   1f186:	4c02      	ldr	r4, [pc, #8]	; (1f190 <sys_clock_set_timeout+0x5c>)
   1f188:	e7dd      	b.n	1f146 <sys_clock_set_timeout+0x12>
   1f18a:	bf00      	nop
   1f18c:	20001c48 	.word	0x20001c48
   1f190:	007fffff 	.word	0x007fffff
   1f194:	0001ed69 	.word	0x0001ed69

0001f198 <sys_clock_elapsed>:
{
   1f198:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1f19a:	f7ff fe4f 	bl	1ee3c <z_nrf_rtc_timer_read>
   1f19e:	4b02      	ldr	r3, [pc, #8]	; (1f1a8 <sys_clock_elapsed+0x10>)
   1f1a0:	681b      	ldr	r3, [r3, #0]
}
   1f1a2:	1ac0      	subs	r0, r0, r3
   1f1a4:	bd08      	pop	{r3, pc}
   1f1a6:	bf00      	nop
   1f1a8:	20001c48 	.word	0x20001c48

0001f1ac <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   1f1ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f1b0:	4905      	ldr	r1, [pc, #20]	; (1f1c8 <__NVIC_SystemReset+0x1c>)
   1f1b2:	4b06      	ldr	r3, [pc, #24]	; (1f1cc <__NVIC_SystemReset+0x20>)
   1f1b4:	68ca      	ldr	r2, [r1, #12]
   1f1b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f1ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f1bc:	60cb      	str	r3, [r1, #12]
   1f1be:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f1c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f1c4:	e7fd      	b.n	1f1c2 <__NVIC_SystemReset+0x16>
   1f1c6:	bf00      	nop
   1f1c8:	e000ed00 	.word	0xe000ed00
   1f1cc:	05fa0004 	.word	0x05fa0004

0001f1d0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1f1d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f1d8:	2a08      	cmp	r2, #8
   1f1da:	d106      	bne.n	1f1ea <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f1dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1f1e0:	2b05      	cmp	r3, #5
   1f1e2:	d802      	bhi.n	1f1ea <nrf52_errata_103+0x1a>
   1f1e4:	4a02      	ldr	r2, [pc, #8]	; (1f1f0 <nrf52_errata_103+0x20>)
   1f1e6:	5cd0      	ldrb	r0, [r2, r3]
   1f1e8:	4770      	bx	lr
        return false;
   1f1ea:	2000      	movs	r0, #0
}
   1f1ec:	4770      	bx	lr
   1f1ee:	bf00      	nop
   1f1f0:	0002c85b 	.word	0x0002c85b

0001f1f4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f1f4:	4a02      	ldr	r2, [pc, #8]	; (1f200 <nvmc_wait+0xc>)
   1f1f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f1fa:	2b00      	cmp	r3, #0
   1f1fc:	d0fb      	beq.n	1f1f6 <nvmc_wait+0x2>
}
   1f1fe:	4770      	bx	lr
   1f200:	4001e000 	.word	0x4001e000

0001f204 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f204:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f206:	f008 fa7b 	bl	27700 <nrf52_errata_136>
   1f20a:	b140      	cbz	r0, 1f21e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f20c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f210:	2200      	movs	r2, #0
   1f212:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f216:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f21a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f21e:	f008 fa6f 	bl	27700 <nrf52_errata_136>
   1f222:	2800      	cmp	r0, #0
   1f224:	d046      	beq.n	1f2b4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f22a:	4b65      	ldr	r3, [pc, #404]	; (1f3c0 <SystemInit+0x1bc>)
   1f22c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f230:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f234:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f238:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f23c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f240:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f244:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f248:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f24c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f250:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f254:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f258:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f25c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f260:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f264:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f268:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f26c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f270:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f274:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f278:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f27c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f280:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f284:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f288:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f28c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f290:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f294:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f298:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f29c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f2a0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f2a4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f2a8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f2ac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f2b0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f2b4:	f7ff ff8c 	bl	1f1d0 <nrf52_errata_103>
   1f2b8:	b118      	cbz	r0, 1f2c2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f2ba:	4b42      	ldr	r3, [pc, #264]	; (1f3c4 <SystemInit+0x1c0>)
   1f2bc:	4a42      	ldr	r2, [pc, #264]	; (1f3c8 <SystemInit+0x1c4>)
   1f2be:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f2c2:	f7ff ff85 	bl	1f1d0 <nrf52_errata_103>
   1f2c6:	b118      	cbz	r0, 1f2d0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f2c8:	4b40      	ldr	r3, [pc, #256]	; (1f3cc <SystemInit+0x1c8>)
   1f2ca:	22fb      	movs	r2, #251	; 0xfb
   1f2cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f2d0:	f7ff ff7e 	bl	1f1d0 <nrf52_errata_103>
   1f2d4:	b170      	cbz	r0, 1f2f4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f2d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1f2da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f2de:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1f2e2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f2e6:	f022 020f 	bic.w	r2, r2, #15
   1f2ea:	f003 030f 	and.w	r3, r3, #15
   1f2ee:	4313      	orrs	r3, r2
   1f2f0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f2f4:	f7ff ff6c 	bl	1f1d0 <nrf52_errata_103>
   1f2f8:	b120      	cbz	r0, 1f304 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f2fa:	4b35      	ldr	r3, [pc, #212]	; (1f3d0 <SystemInit+0x1cc>)
   1f2fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f300:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f304:	f008 f9fc 	bl	27700 <nrf52_errata_136>
   1f308:	b148      	cbz	r0, 1f31e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f30a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f30e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f312:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f314:	bf44      	itt	mi
   1f316:	f06f 0201 	mvnmi.w	r2, #1
   1f31a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f31e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f322:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f326:	2a08      	cmp	r2, #8
   1f328:	d10e      	bne.n	1f348 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f32a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1f32e:	2b05      	cmp	r3, #5
   1f330:	d802      	bhi.n	1f338 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f332:	4a28      	ldr	r2, [pc, #160]	; (1f3d4 <SystemInit+0x1d0>)
   1f334:	5cd3      	ldrb	r3, [r2, r3]
   1f336:	b13b      	cbz	r3, 1f348 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f338:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f33c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f344:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1f348:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1f34c:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f350:	07db      	lsls	r3, r3, #31
   1f352:	d514      	bpl.n	1f37e <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f354:	4820      	ldr	r0, [pc, #128]	; (1f3d8 <SystemInit+0x1d4>)
   1f356:	2301      	movs	r3, #1
   1f358:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f35c:	f7ff ff4a 	bl	1f1f4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1f360:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f364:	f023 0301 	bic.w	r3, r3, #1
   1f368:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1f36c:	f7ff ff42 	bl	1f1f4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f370:	2300      	movs	r3, #0
   1f372:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f376:	f7ff ff3d 	bl	1f1f4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1f37a:	f7ff ff17 	bl	1f1ac <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f37e:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1f382:	2b00      	cmp	r3, #0
   1f384:	db03      	blt.n	1f38e <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f386:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f38a:	2b00      	cmp	r3, #0
   1f38c:	da14      	bge.n	1f3b8 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f38e:	4912      	ldr	r1, [pc, #72]	; (1f3d8 <SystemInit+0x1d4>)
   1f390:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f392:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f396:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f39a:	2412      	movs	r4, #18
    nvmc_wait();
   1f39c:	f7ff ff2a 	bl	1f1f4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3a0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f3a4:	f7ff ff26 	bl	1f1f4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f3a8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f3ac:	f7ff ff22 	bl	1f1f4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3b0:	2300      	movs	r3, #0
   1f3b2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1f3b6:	e7de      	b.n	1f376 <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f3b8:	4b08      	ldr	r3, [pc, #32]	; (1f3dc <SystemInit+0x1d8>)
   1f3ba:	4a09      	ldr	r2, [pc, #36]	; (1f3e0 <SystemInit+0x1dc>)
   1f3bc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f3be:	bd10      	pop	{r4, pc}
   1f3c0:	4000c000 	.word	0x4000c000
   1f3c4:	40005000 	.word	0x40005000
   1f3c8:	00038148 	.word	0x00038148
   1f3cc:	4000f000 	.word	0x4000f000
   1f3d0:	40029000 	.word	0x40029000
   1f3d4:	0002c855 	.word	0x0002c855
   1f3d8:	4001e000 	.word	0x4001e000
   1f3dc:	20000748 	.word	0x20000748
   1f3e0:	03d09000 	.word	0x03d09000

0001f3e4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f3e4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f3e6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f3e8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1f3ea:	fab2 f382 	clz	r3, r2
   1f3ee:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1f3f2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1f3f4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1f3f6:	d014      	beq.n	1f422 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f3f8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f3fc:	fa05 f303 	lsl.w	r3, r5, r3
   1f400:	ea22 0303 	bic.w	r3, r2, r3
   1f404:	e850 6f00 	ldrex	r6, [r0]
   1f408:	4296      	cmp	r6, r2
   1f40a:	d104      	bne.n	1f416 <nrfx_flag32_alloc+0x32>
   1f40c:	e840 3c00 	strex	ip, r3, [r0]
   1f410:	f1bc 0f00 	cmp.w	ip, #0
   1f414:	d1f6      	bne.n	1f404 <nrfx_flag32_alloc+0x20>
   1f416:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f41a:	d1e5      	bne.n	1f3e8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1f41c:	4802      	ldr	r0, [pc, #8]	; (1f428 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1f41e:	700c      	strb	r4, [r1, #0]
}
   1f420:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1f422:	4802      	ldr	r0, [pc, #8]	; (1f42c <nrfx_flag32_alloc+0x48>)
   1f424:	e7fc      	b.n	1f420 <nrfx_flag32_alloc+0x3c>
   1f426:	bf00      	nop
   1f428:	0bad0000 	.word	0x0bad0000
   1f42c:	0bad0002 	.word	0x0bad0002

0001f430 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f430:	6803      	ldr	r3, [r0, #0]
   1f432:	40cb      	lsrs	r3, r1
   1f434:	07db      	lsls	r3, r3, #31
{
   1f436:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1f438:	d415      	bmi.n	1f466 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f43a:	2301      	movs	r3, #1
   1f43c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1f440:	6803      	ldr	r3, [r0, #0]
   1f442:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f446:	ea41 0203 	orr.w	r2, r1, r3
   1f44a:	e850 4f00 	ldrex	r4, [r0]
   1f44e:	429c      	cmp	r4, r3
   1f450:	d104      	bne.n	1f45c <nrfx_flag32_free+0x2c>
   1f452:	e840 2c00 	strex	ip, r2, [r0]
   1f456:	f1bc 0f00 	cmp.w	ip, #0
   1f45a:	d1f6      	bne.n	1f44a <nrfx_flag32_free+0x1a>
   1f45c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f460:	d1ee      	bne.n	1f440 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1f462:	4802      	ldr	r0, [pc, #8]	; (1f46c <nrfx_flag32_free+0x3c>)
}
   1f464:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f466:	4802      	ldr	r0, [pc, #8]	; (1f470 <nrfx_flag32_free+0x40>)
   1f468:	e7fc      	b.n	1f464 <nrfx_flag32_free+0x34>
   1f46a:	bf00      	nop
   1f46c:	0bad0000 	.word	0x0bad0000
   1f470:	0bad0004 	.word	0x0bad0004

0001f474 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1f474:	4b04      	ldr	r3, [pc, #16]	; (1f488 <nrfx_clock_init+0x14>)
   1f476:	791a      	ldrb	r2, [r3, #4]
   1f478:	b922      	cbnz	r2, 1f484 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1f47a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1f47c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1f47e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f480:	4802      	ldr	r0, [pc, #8]	; (1f48c <nrfx_clock_init+0x18>)
   1f482:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1f484:	4802      	ldr	r0, [pc, #8]	; (1f490 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f486:	4770      	bx	lr
   1f488:	20003b14 	.word	0x20003b14
   1f48c:	0bad0000 	.word	0x0bad0000
   1f490:	0bad000c 	.word	0x0bad000c

0001f494 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1f494:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1f496:	2000      	movs	r0, #0
   1f498:	f7e8 ff0e 	bl	82b8 <arch_irq_is_enabled>
   1f49c:	b908      	cbnz	r0, 1f4a2 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1f49e:	f7e8 fee7 	bl	8270 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   1f4a2:	4b02      	ldr	r3, [pc, #8]	; (1f4ac <nrfx_clock_enable+0x18>)
   1f4a4:	2201      	movs	r2, #1
   1f4a6:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1f4a8:	bd08      	pop	{r3, pc}
   1f4aa:	bf00      	nop
   1f4ac:	20003f6d 	.word	0x20003f6d

0001f4b0 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f4b0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f4b2:	b110      	cbz	r0, 1f4ba <nrfx_clock_stop+0xa>
   1f4b4:	2801      	cmp	r0, #1
   1f4b6:	d017      	beq.n	1f4e8 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1f4b8:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1f4ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1f4be:	2302      	movs	r3, #2
   1f4c0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4c4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1f4c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4cc:	2301      	movs	r3, #1
   1f4ce:	60e3      	str	r3, [r4, #12]
   1f4d0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f4d4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1f4d8:	03db      	lsls	r3, r3, #15
   1f4da:	d5ed      	bpl.n	1f4b8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1f4dc:	2001      	movs	r0, #1
   1f4de:	f008 f919 	bl	27714 <nrfx_busy_wait>
   1f4e2:	3d01      	subs	r5, #1
   1f4e4:	d1f6      	bne.n	1f4d4 <nrfx_clock_stop+0x24>
   1f4e6:	e7e7      	b.n	1f4b8 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1f4e8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4ec:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1f4ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f4f6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4fa:	6060      	str	r0, [r4, #4]
   1f4fc:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f500:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f504:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1f508:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f50a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f50e:	d505      	bpl.n	1f51c <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f510:	b123      	cbz	r3, 1f51c <nrfx_clock_stop+0x6c>
   1f512:	2001      	movs	r0, #1
   1f514:	f008 f8fe 	bl	27714 <nrfx_busy_wait>
   1f518:	3d01      	subs	r5, #1
   1f51a:	d1f1      	bne.n	1f500 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1f51c:	4b01      	ldr	r3, [pc, #4]	; (1f524 <nrfx_clock_stop+0x74>)
   1f51e:	2200      	movs	r2, #0
   1f520:	715a      	strb	r2, [r3, #5]
   1f522:	e7c9      	b.n	1f4b8 <nrfx_clock_stop+0x8>
   1f524:	20003b14 	.word	0x20003b14

0001f528 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1f52c:	b510      	push	{r4, lr}
   1f52e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1f532:	b16a      	cbz	r2, 1f550 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f534:	2200      	movs	r2, #0
   1f536:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f53a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1f53e:	2201      	movs	r2, #1
   1f540:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1f544:	4b11      	ldr	r3, [pc, #68]	; (1f58c <nrfx_clock_irq_handler+0x64>)
   1f546:	7958      	ldrb	r0, [r3, #5]
   1f548:	b910      	cbnz	r0, 1f550 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1f54a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f54c:	681b      	ldr	r3, [r3, #0]
   1f54e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f554:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f558:	b172      	cbz	r2, 1f578 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f55a:	2200      	movs	r2, #0
   1f55c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f560:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f564:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f568:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f56c:	0792      	lsls	r2, r2, #30
   1f56e:	d104      	bne.n	1f57a <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f570:	2201      	movs	r2, #1
   1f572:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f576:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f578:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1f57a:	2202      	movs	r2, #2
   1f57c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f580:	4b02      	ldr	r3, [pc, #8]	; (1f58c <nrfx_clock_irq_handler+0x64>)
}
   1f582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f586:	681b      	ldr	r3, [r3, #0]
   1f588:	2001      	movs	r0, #1
   1f58a:	4718      	bx	r3
   1f58c:	20003b14 	.word	0x20003b14

0001f590 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1f590:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1f592:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1f596:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1f598:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1f59a:	6002      	str	r2, [r0, #0]
}
   1f59c:	4802      	ldr	r0, [pc, #8]	; (1f5a8 <nrf_gpio_pin_port_decode+0x18>)
   1f59e:	bf18      	it	ne
   1f5a0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1f5a4:	4770      	bx	lr
   1f5a6:	bf00      	nop
   1f5a8:	50000300 	.word	0x50000300

0001f5ac <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f5ac:	4b03      	ldr	r3, [pc, #12]	; (1f5bc <pin_in_use_by_te+0x10>)
   1f5ae:	3008      	adds	r0, #8
   1f5b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f5b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f5b8:	4770      	bx	lr
   1f5ba:	bf00      	nop
   1f5bc:	2000074c 	.word	0x2000074c

0001f5c0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f5c0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f5c2:	f100 0308 	add.w	r3, r0, #8
   1f5c6:	4c0c      	ldr	r4, [pc, #48]	; (1f5f8 <call_handler+0x38>)
   1f5c8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f5cc:	05da      	lsls	r2, r3, #23
{
   1f5ce:	4605      	mov	r5, r0
   1f5d0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f5d2:	d507      	bpl.n	1f5e4 <call_handler+0x24>
   1f5d4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f5d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f5dc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f5e0:	6852      	ldr	r2, [r2, #4]
   1f5e2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f5e4:	68a3      	ldr	r3, [r4, #8]
   1f5e6:	b12b      	cbz	r3, 1f5f4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f5e8:	68e2      	ldr	r2, [r4, #12]
   1f5ea:	4631      	mov	r1, r6
   1f5ec:	4628      	mov	r0, r5
    }
}
   1f5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f5f2:	4718      	bx	r3
}
   1f5f4:	bd70      	pop	{r4, r5, r6, pc}
   1f5f6:	bf00      	nop
   1f5f8:	2000074c 	.word	0x2000074c

0001f5fc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f5fc:	4a12      	ldr	r2, [pc, #72]	; (1f648 <release_handler+0x4c>)
   1f5fe:	3008      	adds	r0, #8
{
   1f600:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f602:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f606:	05d9      	lsls	r1, r3, #23
   1f608:	d51b      	bpl.n	1f642 <release_handler+0x46>
   1f60a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f60e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f612:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f616:	f102 0410 	add.w	r4, r2, #16
   1f61a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f61c:	f834 3b02 	ldrh.w	r3, [r4], #2
   1f620:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f624:	d003      	beq.n	1f62e <release_handler+0x32>
   1f626:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f62a:	4299      	cmp	r1, r3
   1f62c:	d009      	beq.n	1f642 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f62e:	3001      	adds	r0, #1
   1f630:	2830      	cmp	r0, #48	; 0x30
   1f632:	d1f3      	bne.n	1f61c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f634:	2300      	movs	r3, #0
   1f636:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f63a:	4804      	ldr	r0, [pc, #16]	; (1f64c <release_handler+0x50>)
}
   1f63c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f63e:	f7ff bef7 	b.w	1f430 <nrfx_flag32_free>
}
   1f642:	bc10      	pop	{r4}
   1f644:	4770      	bx	lr
   1f646:	bf00      	nop
   1f648:	2000074c 	.word	0x2000074c
   1f64c:	200007c0 	.word	0x200007c0

0001f650 <pin_handler_trigger_uninit>:
{
   1f650:	b538      	push	{r3, r4, r5, lr}
   1f652:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f654:	f7ff ffaa 	bl	1f5ac <pin_in_use_by_te>
   1f658:	4c09      	ldr	r4, [pc, #36]	; (1f680 <pin_handler_trigger_uninit+0x30>)
   1f65a:	f102 0508 	add.w	r5, r2, #8
   1f65e:	b140      	cbz	r0, 1f672 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f660:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f664:	4907      	ldr	r1, [pc, #28]	; (1f684 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f666:	0b5b      	lsrs	r3, r3, #13
   1f668:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f66c:	2000      	movs	r0, #0
   1f66e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f672:	4610      	mov	r0, r2
   1f674:	f7ff ffc2 	bl	1f5fc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f678:	2300      	movs	r3, #0
   1f67a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f67e:	bd38      	pop	{r3, r4, r5, pc}
   1f680:	2000074c 	.word	0x2000074c
   1f684:	40006000 	.word	0x40006000

0001f688 <nrfx_gpiote_input_configure>:
{
   1f688:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f68c:	4604      	mov	r4, r0
   1f68e:	4617      	mov	r7, r2
   1f690:	461d      	mov	r5, r3
    if (p_input_config)
   1f692:	b321      	cbz	r1, 1f6de <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f694:	4e4e      	ldr	r6, [pc, #312]	; (1f7d0 <nrfx_gpiote_input_configure+0x148>)
   1f696:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1f69a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1f69e:	079b      	lsls	r3, r3, #30
   1f6a0:	d506      	bpl.n	1f6b0 <nrfx_gpiote_input_configure+0x28>
   1f6a2:	f7ff ff83 	bl	1f5ac <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1f6a6:	b118      	cbz	r0, 1f6b0 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   1f6a8:	484a      	ldr	r0, [pc, #296]	; (1f7d4 <nrfx_gpiote_input_configure+0x14c>)
}
   1f6aa:	b004      	add	sp, #16
   1f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f6b0:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f6b2:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f6b6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f6ba:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f6be:	f10d 020f 	add.w	r2, sp, #15
   1f6c2:	460b      	mov	r3, r1
   1f6c4:	4620      	mov	r0, r4
   1f6c6:	f10d 010e 	add.w	r1, sp, #14
   1f6ca:	f008 f851 	bl	27770 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f6ce:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1f6d2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f6d6:	f043 0301 	orr.w	r3, r3, #1
   1f6da:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   1f6de:	b197      	cbz	r7, 1f706 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f6e0:	4b3b      	ldr	r3, [pc, #236]	; (1f7d0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f6e2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f6e4:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f6e6:	f104 0008 	add.w	r0, r4, #8
   1f6ea:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1f6ee:	078f      	lsls	r7, r1, #30
   1f6f0:	d50c      	bpl.n	1f70c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   1f6f2:	2a00      	cmp	r2, #0
   1f6f4:	d1d8      	bne.n	1f6a8 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f6f6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1f6fa:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f6fe:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1f702:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1f706:	bbcd      	cbnz	r5, 1f77c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   1f708:	4833      	ldr	r0, [pc, #204]	; (1f7d8 <nrfx_gpiote_input_configure+0x150>)
   1f70a:	e7ce      	b.n	1f6aa <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f70c:	f021 0120 	bic.w	r1, r1, #32
   1f710:	04c9      	lsls	r1, r1, #19
   1f712:	0cc9      	lsrs	r1, r1, #19
   1f714:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   1f718:	2a00      	cmp	r2, #0
   1f71a:	d0ec      	beq.n	1f6f6 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   1f71c:	2e03      	cmp	r6, #3
   1f71e:	d8c3      	bhi.n	1f6a8 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f720:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f722:	b92e      	cbnz	r6, 1f730 <nrfx_gpiote_input_configure+0xa8>
   1f724:	4a2d      	ldr	r2, [pc, #180]	; (1f7dc <nrfx_gpiote_input_configure+0x154>)
   1f726:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1f72a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1f72e:	e7e2      	b.n	1f6f6 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f730:	00ba      	lsls	r2, r7, #2
   1f732:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f736:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f73a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f73e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1f742:	f02c 0c03 	bic.w	ip, ip, #3
   1f746:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f74a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1f74e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1f752:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1f756:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f75a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f75e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1f762:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   1f766:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1f76a:	ea4c 0c0e 	orr.w	ip, ip, lr
   1f76e:	f041 0120 	orr.w	r1, r1, #32
   1f772:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1f776:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1f77a:	e7bc      	b.n	1f6f6 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f77c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f780:	4620      	mov	r0, r4
   1f782:	f7ff ff3b 	bl	1f5fc <release_handler>
    if (!handler)
   1f786:	2e00      	cmp	r6, #0
   1f788:	d0be      	beq.n	1f708 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f78a:	4d11      	ldr	r5, [pc, #68]	; (1f7d0 <nrfx_gpiote_input_configure+0x148>)
   1f78c:	682b      	ldr	r3, [r5, #0]
   1f78e:	429e      	cmp	r6, r3
   1f790:	d104      	bne.n	1f79c <nrfx_gpiote_input_configure+0x114>
   1f792:	686b      	ldr	r3, [r5, #4]
   1f794:	429f      	cmp	r7, r3
   1f796:	d101      	bne.n	1f79c <nrfx_gpiote_input_configure+0x114>
   1f798:	2200      	movs	r2, #0
   1f79a:	e00a      	b.n	1f7b2 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f79c:	4810      	ldr	r0, [pc, #64]	; (1f7e0 <nrfx_gpiote_input_configure+0x158>)
   1f79e:	f10d 010f 	add.w	r1, sp, #15
   1f7a2:	f7ff fe1f 	bl	1f3e4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f7a6:	4b0c      	ldr	r3, [pc, #48]	; (1f7d8 <nrfx_gpiote_input_configure+0x150>)
   1f7a8:	4298      	cmp	r0, r3
   1f7aa:	f47f af7e 	bne.w	1f6aa <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   1f7ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f7b2:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f7b6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f7ba:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f7bc:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f7be:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f7c2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f7c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f7ca:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1f7ce:	e79b      	b.n	1f708 <nrfx_gpiote_input_configure+0x80>
   1f7d0:	2000074c 	.word	0x2000074c
   1f7d4:	0bad0004 	.word	0x0bad0004
   1f7d8:	0bad0000 	.word	0x0bad0000
   1f7dc:	40006000 	.word	0x40006000
   1f7e0:	200007c0 	.word	0x200007c0

0001f7e4 <nrfx_gpiote_output_configure>:
{
   1f7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7e6:	4604      	mov	r4, r0
   1f7e8:	b085      	sub	sp, #20
   1f7ea:	4615      	mov	r5, r2
    if (p_config)
   1f7ec:	b319      	cbz	r1, 1f836 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f7ee:	4e33      	ldr	r6, [pc, #204]	; (1f8bc <nrfx_gpiote_output_configure+0xd8>)
   1f7f0:	f100 0708 	add.w	r7, r0, #8
   1f7f4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f7f8:	0793      	lsls	r3, r2, #30
   1f7fa:	d403      	bmi.n	1f804 <nrfx_gpiote_output_configure+0x20>
   1f7fc:	f7ff fed6 	bl	1f5ac <pin_in_use_by_te>
   1f800:	2800      	cmp	r0, #0
   1f802:	d158      	bne.n	1f8b6 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f804:	f012 0f1c 	tst.w	r2, #28
   1f808:	d002      	beq.n	1f810 <nrfx_gpiote_output_configure+0x2c>
   1f80a:	784b      	ldrb	r3, [r1, #1]
   1f80c:	2b01      	cmp	r3, #1
   1f80e:	d052      	beq.n	1f8b6 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f810:	2301      	movs	r3, #1
   1f812:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f816:	2300      	movs	r3, #0
   1f818:	e9cd 1300 	strd	r1, r3, [sp]
   1f81c:	1c4a      	adds	r2, r1, #1
   1f81e:	1c8b      	adds	r3, r1, #2
   1f820:	4620      	mov	r0, r4
   1f822:	f10d 010f 	add.w	r1, sp, #15
   1f826:	f007 ffa3 	bl	27770 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f82a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1f82e:	f043 0303 	orr.w	r3, r3, #3
   1f832:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1f836:	b915      	cbnz	r5, 1f83e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1f838:	4821      	ldr	r0, [pc, #132]	; (1f8c0 <nrfx_gpiote_output_configure+0xdc>)
}
   1f83a:	b005      	add	sp, #20
   1f83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f83e:	4e1f      	ldr	r6, [pc, #124]	; (1f8bc <nrfx_gpiote_output_configure+0xd8>)
   1f840:	f104 0708 	add.w	r7, r4, #8
   1f844:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1f848:	0783      	lsls	r3, r0, #30
   1f84a:	d534      	bpl.n	1f8b6 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1f84c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1f850:	4661      	mov	r1, ip
   1f852:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f854:	f020 0020 	bic.w	r0, r0, #32
   1f858:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f85c:	04c0      	lsls	r0, r0, #19
   1f85e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f862:	0cc0      	lsrs	r0, r0, #19
   1f864:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f868:	2300      	movs	r3, #0
   1f86a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f86e:	786a      	ldrb	r2, [r5, #1]
   1f870:	2a00      	cmp	r2, #0
   1f872:	d0e1      	beq.n	1f838 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f874:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1f878:	78ad      	ldrb	r5, [r5, #2]
   1f87a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f87e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f882:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f886:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f88a:	0223      	lsls	r3, r4, #8
   1f88c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f890:	0412      	lsls	r2, r2, #16
   1f892:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f896:	ea43 030e 	orr.w	r3, r3, lr
   1f89a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f89c:	052a      	lsls	r2, r5, #20
   1f89e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f8a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f8a6:	4313      	orrs	r3, r2
   1f8a8:	f040 0020 	orr.w	r0, r0, #32
   1f8ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f8b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f8b4:	e7c0      	b.n	1f838 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   1f8b6:	4803      	ldr	r0, [pc, #12]	; (1f8c4 <nrfx_gpiote_output_configure+0xe0>)
   1f8b8:	e7bf      	b.n	1f83a <nrfx_gpiote_output_configure+0x56>
   1f8ba:	bf00      	nop
   1f8bc:	2000074c 	.word	0x2000074c
   1f8c0:	0bad0000 	.word	0x0bad0000
   1f8c4:	0bad0004 	.word	0x0bad0004

0001f8c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f8c8:	4b01      	ldr	r3, [pc, #4]	; (1f8d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f8ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f8ce:	4770      	bx	lr
   1f8d0:	2000074c 	.word	0x2000074c

0001f8d4 <nrfx_gpiote_channel_get>:
{
   1f8d4:	b508      	push	{r3, lr}
   1f8d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f8d8:	f7ff fe68 	bl	1f5ac <pin_in_use_by_te>
   1f8dc:	b138      	cbz	r0, 1f8ee <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f8de:	4b05      	ldr	r3, [pc, #20]	; (1f8f4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1f8e0:	4805      	ldr	r0, [pc, #20]	; (1f8f8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f8e2:	3208      	adds	r2, #8
   1f8e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1f8e8:	0b5b      	lsrs	r3, r3, #13
   1f8ea:	700b      	strb	r3, [r1, #0]
}
   1f8ec:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f8ee:	4803      	ldr	r0, [pc, #12]	; (1f8fc <nrfx_gpiote_channel_get+0x28>)
   1f8f0:	e7fc      	b.n	1f8ec <nrfx_gpiote_channel_get+0x18>
   1f8f2:	bf00      	nop
   1f8f4:	2000074c 	.word	0x2000074c
   1f8f8:	0bad0000 	.word	0x0bad0000
   1f8fc:	0bad0004 	.word	0x0bad0004

0001f900 <nrfx_gpiote_init>:
{
   1f900:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f902:	4c0f      	ldr	r4, [pc, #60]	; (1f940 <nrfx_gpiote_init+0x40>)
   1f904:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f908:	b9bd      	cbnz	r5, 1f93a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f90a:	2260      	movs	r2, #96	; 0x60
   1f90c:	4629      	mov	r1, r5
   1f90e:	f104 0010 	add.w	r0, r4, #16
   1f912:	f005 f84f 	bl	249b4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f916:	2006      	movs	r0, #6
   1f918:	f7e8 fcaa 	bl	8270 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f91c:	4b09      	ldr	r3, [pc, #36]	; (1f944 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f91e:	480a      	ldr	r0, [pc, #40]	; (1f948 <nrfx_gpiote_init+0x48>)
   1f920:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f924:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f928:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f92c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f930:	2301      	movs	r3, #1
   1f932:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f936:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f938:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f93a:	4804      	ldr	r0, [pc, #16]	; (1f94c <nrfx_gpiote_init+0x4c>)
   1f93c:	e7fc      	b.n	1f938 <nrfx_gpiote_init+0x38>
   1f93e:	bf00      	nop
   1f940:	2000074c 	.word	0x2000074c
   1f944:	40006000 	.word	0x40006000
   1f948:	0bad0000 	.word	0x0bad0000
   1f94c:	0bad0005 	.word	0x0bad0005

0001f950 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f950:	4b03      	ldr	r3, [pc, #12]	; (1f960 <nrfx_gpiote_is_init+0x10>)
   1f952:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f956:	3800      	subs	r0, #0
   1f958:	bf18      	it	ne
   1f95a:	2001      	movne	r0, #1
   1f95c:	4770      	bx	lr
   1f95e:	bf00      	nop
   1f960:	2000074c 	.word	0x2000074c

0001f964 <nrfx_gpiote_channel_free>:
{
   1f964:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f966:	4801      	ldr	r0, [pc, #4]	; (1f96c <nrfx_gpiote_channel_free+0x8>)
   1f968:	f7ff bd62 	b.w	1f430 <nrfx_flag32_free>
   1f96c:	200007bc 	.word	0x200007bc

0001f970 <nrfx_gpiote_channel_alloc>:
{
   1f970:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f972:	4801      	ldr	r0, [pc, #4]	; (1f978 <nrfx_gpiote_channel_alloc+0x8>)
   1f974:	f7ff bd36 	b.w	1f3e4 <nrfx_flag32_alloc>
   1f978:	200007bc 	.word	0x200007bc

0001f97c <nrfx_gpiote_trigger_enable>:
{
   1f97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f97e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f980:	f7ff fe14 	bl	1f5ac <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f984:	f104 0208 	add.w	r2, r4, #8
   1f988:	4b1e      	ldr	r3, [pc, #120]	; (1fa04 <nrfx_gpiote_trigger_enable+0x88>)
   1f98a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f98e:	b1e8      	cbz	r0, 1f9cc <nrfx_gpiote_trigger_enable+0x50>
   1f990:	f013 0502 	ands.w	r5, r3, #2
   1f994:	d11a      	bne.n	1f9cc <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f996:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f998:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1f99a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1f99e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1f9a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f9a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f9aa:	6005      	str	r5, [r0, #0]
   1f9ac:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f9ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f9b2:	f040 0001 	orr.w	r0, r0, #1
   1f9b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1f9ba:	b129      	cbz	r1, 1f9c8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f9bc:	2201      	movs	r2, #1
   1f9be:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1f9c2:	4a11      	ldr	r2, [pc, #68]	; (1fa08 <nrfx_gpiote_trigger_enable+0x8c>)
   1f9c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f9c8:	b003      	add	sp, #12
   1f9ca:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f9cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f9d0:	2b04      	cmp	r3, #4
   1f9d2:	d012      	beq.n	1f9fa <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f9d4:	2b05      	cmp	r3, #5
   1f9d6:	d012      	beq.n	1f9fe <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f9d8:	a801      	add	r0, sp, #4
   1f9da:	9401      	str	r4, [sp, #4]
   1f9dc:	f7ff fdd8 	bl	1f590 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f9e0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f9e2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f9e6:	40d9      	lsrs	r1, r3
   1f9e8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f9ec:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f9ee:	4620      	mov	r0, r4
}
   1f9f0:	b003      	add	sp, #12
   1f9f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f9f6:	f007 bf02 	b.w	277fe <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f9fa:	2103      	movs	r1, #3
   1f9fc:	e7f7      	b.n	1f9ee <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f9fe:	2102      	movs	r1, #2
   1fa00:	e7f5      	b.n	1f9ee <nrfx_gpiote_trigger_enable+0x72>
   1fa02:	bf00      	nop
   1fa04:	2000074c 	.word	0x2000074c
   1fa08:	40006000 	.word	0x40006000

0001fa0c <nrfx_gpiote_trigger_disable>:
{
   1fa0c:	b508      	push	{r3, lr}
   1fa0e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa10:	f7ff fdcc 	bl	1f5ac <pin_in_use_by_te>
   1fa14:	b1c0      	cbz	r0, 1fa48 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fa16:	f102 0108 	add.w	r1, r2, #8
   1fa1a:	4b0e      	ldr	r3, [pc, #56]	; (1fa54 <nrfx_gpiote_trigger_disable+0x48>)
   1fa1c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa20:	0799      	lsls	r1, r3, #30
   1fa22:	d411      	bmi.n	1fa48 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fa24:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fa26:	2201      	movs	r2, #1
   1fa28:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1fa2a:	009b      	lsls	r3, r3, #2
   1fa2c:	490a      	ldr	r1, [pc, #40]	; (1fa58 <nrfx_gpiote_trigger_disable+0x4c>)
   1fa2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fa32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fa36:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fa3a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fa3e:	f022 0203 	bic.w	r2, r2, #3
   1fa42:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1fa46:	bd08      	pop	{r3, pc}
   1fa48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fa4c:	2100      	movs	r1, #0
   1fa4e:	4610      	mov	r0, r2
   1fa50:	f007 bed5 	b.w	277fe <nrf_gpio_cfg_sense_set>
   1fa54:	2000074c 	.word	0x2000074c
   1fa58:	40006000 	.word	0x40006000

0001fa5c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fa5c:	4b0e      	ldr	r3, [pc, #56]	; (1fa98 <nrfx_gpiote_pin_uninit+0x3c>)
   1fa5e:	f100 0208 	add.w	r2, r0, #8
{
   1fa62:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fa64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1fa68:	07db      	lsls	r3, r3, #31
{
   1fa6a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1fa6c:	d511      	bpl.n	1fa92 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1fa6e:	f7ff ffcd 	bl	1fa0c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1fa72:	4620      	mov	r0, r4
   1fa74:	f7ff fdec 	bl	1f650 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fa78:	a801      	add	r0, sp, #4
   1fa7a:	9401      	str	r4, [sp, #4]
   1fa7c:	f7ff fd88 	bl	1f590 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fa80:	9b01      	ldr	r3, [sp, #4]
   1fa82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fa86:	2202      	movs	r2, #2
   1fa88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1fa8c:	4803      	ldr	r0, [pc, #12]	; (1fa9c <nrfx_gpiote_pin_uninit+0x40>)
}
   1fa8e:	b002      	add	sp, #8
   1fa90:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fa92:	4803      	ldr	r0, [pc, #12]	; (1faa0 <nrfx_gpiote_pin_uninit+0x44>)
   1fa94:	e7fb      	b.n	1fa8e <nrfx_gpiote_pin_uninit+0x32>
   1fa96:	bf00      	nop
   1fa98:	2000074c 	.word	0x2000074c
   1fa9c:	0bad0000 	.word	0x0bad0000
   1faa0:	0bad0004 	.word	0x0bad0004

0001faa4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1faa8:	4b64      	ldr	r3, [pc, #400]	; (1fc3c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1faaa:	4865      	ldr	r0, [pc, #404]	; (1fc40 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1faac:	4965      	ldr	r1, [pc, #404]	; (1fc44 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1faae:	2600      	movs	r6, #0
{
   1fab0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1fab2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fab4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fab6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1fab8:	b135      	cbz	r5, 1fac8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1faba:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1fabe:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fac0:	bf1e      	ittt	ne
   1fac2:	601c      	strne	r4, [r3, #0]
   1fac4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1fac6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fac8:	3304      	adds	r3, #4
   1faca:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1facc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fad0:	d1f1      	bne.n	1fab6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fad2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1fc40 <nrfx_gpiote_irq_handler+0x19c>
   1fad6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1fada:	2b00      	cmp	r3, #0
   1fadc:	f000 8091 	beq.w	1fc02 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   1fae0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fae4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fae8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1faea:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1faee:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1faf2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1faf4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1faf8:	2700      	movs	r7, #0
            while (latch[i])
   1fafa:	f10d 0910 	add.w	r9, sp, #16
   1fafe:	017b      	lsls	r3, r7, #5
   1fb00:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1fb02:	f04f 0a01 	mov.w	sl, #1
   1fb06:	e049      	b.n	1fb9c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   1fb08:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb0a:	4a4f      	ldr	r2, [pc, #316]	; (1fc48 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1fb0c:	fa94 f4a4 	rbit	r4, r4
   1fb10:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1fb14:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb16:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fb1a:	08e0      	lsrs	r0, r4, #3
   1fb1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1fb20:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1fb22:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1fb26:	fa0a fc02 	lsl.w	ip, sl, r2
   1fb2a:	f819 2000 	ldrb.w	r2, [r9, r0]
   1fb2e:	ea22 020c 	bic.w	r2, r2, ip
   1fb32:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb36:	a803      	add	r0, sp, #12
   1fb38:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1fb3c:	0899      	lsrs	r1, r3, #2
   1fb3e:	f7ff fd27 	bl	1f590 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb42:	9a03      	ldr	r2, [sp, #12]
   1fb44:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   1fb48:	074b      	lsls	r3, r1, #29
   1fb4a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb4e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1fb50:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1fb54:	d529      	bpl.n	1fbaa <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1fb56:	4620      	mov	r0, r4
   1fb58:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb5a:	b2d5      	uxtb	r5, r2
   1fb5c:	f7ff fd30 	bl	1f5c0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb60:	a803      	add	r0, sp, #12
   1fb62:	9403      	str	r4, [sp, #12]
   1fb64:	f7ff fd14 	bl	1f590 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb68:	9b03      	ldr	r3, [sp, #12]
   1fb6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fb6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1fb72:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1fb76:	429d      	cmp	r5, r3
   1fb78:	d107      	bne.n	1fb8a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fb7a:	2100      	movs	r1, #0
   1fb7c:	4620      	mov	r0, r4
   1fb7e:	f007 fe3e 	bl	277fe <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1fb82:	4629      	mov	r1, r5
   1fb84:	4620      	mov	r0, r4
   1fb86:	f007 fe3a 	bl	277fe <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb8a:	a803      	add	r0, sp, #12
   1fb8c:	9403      	str	r4, [sp, #12]
   1fb8e:	f7ff fcff 	bl	1f590 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1fb92:	9b03      	ldr	r3, [sp, #12]
   1fb94:	fa0a f303 	lsl.w	r3, sl, r3
   1fb98:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1fb9c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1fba0:	2c00      	cmp	r4, #0
   1fba2:	d1b1      	bne.n	1fb08 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1fba4:	b9cf      	cbnz	r7, 1fbda <nrfx_gpiote_irq_handler+0x136>
   1fba6:	2701      	movs	r7, #1
   1fba8:	e7a9      	b.n	1fafe <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fbaa:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fbac:	bf0c      	ite	eq
   1fbae:	2103      	moveq	r1, #3
   1fbb0:	2102      	movne	r1, #2
   1fbb2:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fbb4:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fbb6:	f007 fe22 	bl	277fe <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fbba:	2d03      	cmp	r5, #3
   1fbbc:	d004      	beq.n	1fbc8 <nrfx_gpiote_irq_handler+0x124>
   1fbbe:	9a01      	ldr	r2, [sp, #4]
   1fbc0:	2a02      	cmp	r2, #2
   1fbc2:	d106      	bne.n	1fbd2 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fbc4:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fbc6:	d1e0      	bne.n	1fb8a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1fbc8:	4659      	mov	r1, fp
   1fbca:	4620      	mov	r0, r4
   1fbcc:	f7ff fcf8 	bl	1f5c0 <call_handler>
   1fbd0:	e7db      	b.n	1fb8a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fbd2:	2a03      	cmp	r2, #3
   1fbd4:	d1d9      	bne.n	1fb8a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fbd6:	2d02      	cmp	r5, #2
   1fbd8:	e7f5      	b.n	1fbc6 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fbda:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1fbde:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1fbe2:	491a      	ldr	r1, [pc, #104]	; (1fc4c <nrfx_gpiote_irq_handler+0x1a8>)
   1fbe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fbe8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fbec:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1fbee:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1fbf2:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1fbf6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1fbf8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1fbfc:	4313      	orrs	r3, r2
   1fbfe:	f47f af7b 	bne.w	1faf8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1fc02:	2401      	movs	r4, #1
    while (mask)
   1fc04:	b916      	cbnz	r6, 1fc0c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1fc06:	b007      	add	sp, #28
   1fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1fc0c:	fa96 f3a6 	rbit	r3, r6
   1fc10:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fc14:	fa04 f203 	lsl.w	r2, r4, r3
   1fc18:	009b      	lsls	r3, r3, #2
   1fc1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fc1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fc22:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fc26:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fc2a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fc2e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1fc32:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1fc36:	f7ff fcc3 	bl	1f5c0 <call_handler>
   1fc3a:	e7e3      	b.n	1fc04 <nrfx_gpiote_irq_handler+0x160>
   1fc3c:	40006100 	.word	0x40006100
   1fc40:	40006000 	.word	0x40006000
   1fc44:	40006120 	.word	0x40006120
   1fc48:	2000074c 	.word	0x2000074c
   1fc4c:	50000300 	.word	0x50000300

0001fc50 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   1fc50:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   1fc52:	4c18      	ldr	r4, [pc, #96]	; (1fcb4 <nrfx_power_init+0x64>)
   1fc54:	7823      	ldrb	r3, [r4, #0]
   1fc56:	bb53      	cbnz	r3, 1fcae <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   1fc58:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   1fc5a:	0791      	lsls	r1, r2, #30
   1fc5c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1fc60:	d511      	bpl.n	1fc86 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fc62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1fc66:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   1fc6a:	2908      	cmp	r1, #8
   1fc6c:	d11d      	bne.n	1fcaa <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1fc6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1fc72:	2b05      	cmp	r3, #5
   1fc74:	d819      	bhi.n	1fcaa <nrfx_power_init+0x5a>
   1fc76:	4910      	ldr	r1, [pc, #64]	; (1fcb8 <nrfx_power_init+0x68>)
   1fc78:	5cc9      	ldrb	r1, [r1, r3]
   1fc7a:	2301      	movs	r3, #1
   1fc7c:	b119      	cbz	r1, 1fc86 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1fc7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1fc82:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1fc86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1fc8a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1fc8e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1fc92:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1fc94:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   1fc98:	f7e8 fb0e 	bl	82b8 <arch_irq_is_enabled>
   1fc9c:	b908      	cbnz	r0, 1fca2 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1fc9e:	f7e8 fae7 	bl	8270 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   1fca2:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   1fca4:	4805      	ldr	r0, [pc, #20]	; (1fcbc <nrfx_power_init+0x6c>)
    m_initialized = true;
   1fca6:	7023      	strb	r3, [r4, #0]
}
   1fca8:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1fcaa:	2301      	movs	r3, #1
   1fcac:	e7eb      	b.n	1fc86 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1fcae:	4804      	ldr	r0, [pc, #16]	; (1fcc0 <nrfx_power_init+0x70>)
   1fcb0:	e7fa      	b.n	1fca8 <nrfx_power_init+0x58>
   1fcb2:	bf00      	nop
   1fcb4:	20003f6e 	.word	0x20003f6e
   1fcb8:	0002c861 	.word	0x0002c861
   1fcbc:	0bad0000 	.word	0x0bad0000
   1fcc0:	0bad000c 	.word	0x0bad000c

0001fcc4 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   1fcc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fcc8:	f44f 7260 	mov.w	r2, #896	; 0x380
   1fccc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   1fcd0:	4b01      	ldr	r3, [pc, #4]	; (1fcd8 <nrfx_power_usbevt_uninit+0x14>)
   1fcd2:	2200      	movs	r2, #0
   1fcd4:	601a      	str	r2, [r3, #0]
}
   1fcd6:	4770      	bx	lr
   1fcd8:	20003b24 	.word	0x20003b24

0001fcdc <nrfx_power_usbevt_init>:
{
   1fcdc:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   1fcde:	f7ff fff1 	bl	1fcc4 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   1fce2:	6803      	ldr	r3, [r0, #0]
   1fce4:	b10b      	cbz	r3, 1fcea <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   1fce6:	4a01      	ldr	r2, [pc, #4]	; (1fcec <nrfx_power_usbevt_init+0x10>)
   1fce8:	6013      	str	r3, [r2, #0]
}
   1fcea:	bd08      	pop	{r3, pc}
   1fcec:	20003b24 	.word	0x20003b24

0001fcf0 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   1fcf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   1fcf4:	b510      	push	{r4, lr}
   1fcf6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1fcfa:	0762      	lsls	r2, r4, #29
   1fcfc:	d507      	bpl.n	1fd0e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   1fcfe:	f44f 7084 	mov.w	r0, #264	; 0x108
   1fd02:	f007 fd8b 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1fd06:	b110      	cbz	r0, 1fd0e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   1fd08:	4b1e      	ldr	r3, [pc, #120]	; (1fd84 <nrfx_power_irq_handler+0x94>)
   1fd0a:	681b      	ldr	r3, [r3, #0]
   1fd0c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1fd0e:	06a3      	lsls	r3, r4, #26
   1fd10:	d508      	bpl.n	1fd24 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   1fd12:	f44f 708a 	mov.w	r0, #276	; 0x114
   1fd16:	f007 fd81 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1fd1a:	b118      	cbz	r0, 1fd24 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   1fd1c:	4b1a      	ldr	r3, [pc, #104]	; (1fd88 <nrfx_power_irq_handler+0x98>)
   1fd1e:	2000      	movs	r0, #0
   1fd20:	681b      	ldr	r3, [r3, #0]
   1fd22:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1fd24:	0660      	lsls	r0, r4, #25
   1fd26:	d508      	bpl.n	1fd3a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   1fd28:	f44f 708c 	mov.w	r0, #280	; 0x118
   1fd2c:	f007 fd76 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1fd30:	b118      	cbz	r0, 1fd3a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   1fd32:	4b15      	ldr	r3, [pc, #84]	; (1fd88 <nrfx_power_irq_handler+0x98>)
   1fd34:	2001      	movs	r0, #1
   1fd36:	681b      	ldr	r3, [r3, #0]
   1fd38:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1fd3a:	0621      	lsls	r1, r4, #24
   1fd3c:	d508      	bpl.n	1fd50 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   1fd3e:	f44f 708e 	mov.w	r0, #284	; 0x11c
   1fd42:	f007 fd6b 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1fd46:	b118      	cbz	r0, 1fd50 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   1fd48:	4b10      	ldr	r3, [pc, #64]	; (1fd8c <nrfx_power_irq_handler+0x9c>)
   1fd4a:	2000      	movs	r0, #0
   1fd4c:	681b      	ldr	r3, [r3, #0]
   1fd4e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1fd50:	05e2      	lsls	r2, r4, #23
   1fd52:	d508      	bpl.n	1fd66 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   1fd54:	f44f 7090 	mov.w	r0, #288	; 0x120
   1fd58:	f007 fd60 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1fd5c:	b118      	cbz	r0, 1fd66 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   1fd5e:	4b0b      	ldr	r3, [pc, #44]	; (1fd8c <nrfx_power_irq_handler+0x9c>)
   1fd60:	2001      	movs	r0, #1
   1fd62:	681b      	ldr	r3, [r3, #0]
   1fd64:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1fd66:	05a3      	lsls	r3, r4, #22
   1fd68:	d50a      	bpl.n	1fd80 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   1fd6a:	f44f 7092 	mov.w	r0, #292	; 0x124
   1fd6e:	f007 fd55 	bl	2781c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1fd72:	b128      	cbz	r0, 1fd80 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1fd74:	4b05      	ldr	r3, [pc, #20]	; (1fd8c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   1fd76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1fd7a:	681b      	ldr	r3, [r3, #0]
   1fd7c:	2002      	movs	r0, #2
   1fd7e:	4718      	bx	r3
}
   1fd80:	bd10      	pop	{r4, pc}
   1fd82:	bf00      	nop
   1fd84:	20003b1c 	.word	0x20003b1c
   1fd88:	20003b20 	.word	0x20003b20
   1fd8c:	20003b24 	.word	0x20003b24

0001fd90 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1fd90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1fd92:	4801      	ldr	r0, [pc, #4]	; (1fd98 <nrfx_ppi_channel_alloc+0x8>)
   1fd94:	f7ff bb26 	b.w	1f3e4 <nrfx_flag32_alloc>
   1fd98:	200007c8 	.word	0x200007c8

0001fd9c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   1fd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fda0:	f890 8004 	ldrb.w	r8, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fda4:	4c4f      	ldr	r4, [pc, #316]	; (1fee4 <nrfx_pwm_init+0x148>)
   1fda6:	250c      	movs	r5, #12
   1fda8:	fb05 f508 	mul.w	r5, r5, r8
   1fdac:	1966      	adds	r6, r4, r5
{
   1fdae:	b087      	sub	sp, #28
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fdb0:	7a37      	ldrb	r7, [r6, #8]
   1fdb2:	2f00      	cmp	r7, #0
   1fdb4:	f040 8093 	bne.w	1fede <nrfx_pwm_init+0x142>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1fdb8:	f891 c00c 	ldrb.w	ip, [r1, #12]
    p_cb->p_context = p_context;
   1fdbc:	6073      	str	r3, [r6, #4]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1fdbe:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->handler = handler;
   1fdc0:	5162      	str	r2, [r4, r5]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1fdc2:	f886 c00a 	strb.w	ip, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1fdc6:	9300      	str	r3, [sp, #0]
   1fdc8:	f1bc 0f00 	cmp.w	ip, #0
   1fdcc:	d030      	beq.n	1fe30 <nrfx_pwm_init+0x94>
   1fdce:	b37b      	cbz	r3, 1fe30 <nrfx_pwm_init+0x94>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   1fdd0:	6800      	ldr	r0, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   1fdd2:	2301      	movs	r3, #1
   1fdd4:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   1fdd8:	798d      	ldrb	r5, [r1, #6]
   1fdda:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
   1fddc:	794e      	ldrb	r6, [r1, #5]
   1fdde:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1fde2:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1fde6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   1fdea:	894b      	ldrh	r3, [r1, #10]
   1fdec:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   1fdf0:	2300      	movs	r3, #0
   1fdf2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   1fdf6:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fdfa:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fdfe:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   1fe02:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1fe06:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   1fe0a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1fe0e:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1fe12:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1fe16:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   1fe1a:	2a00      	cmp	r2, #0
   1fe1c:	d15a      	bne.n	1fed4 <nrfx_pwm_init+0x138>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fe1e:	230c      	movs	r3, #12
   1fe20:	fb03 4408 	mla	r4, r3, r8, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1fe24:	4830      	ldr	r0, [pc, #192]	; (1fee8 <nrfx_pwm_init+0x14c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fe26:	2301      	movs	r3, #1
   1fe28:	7223      	strb	r3, [r4, #8]
}
   1fe2a:	b007      	add	sp, #28
   1fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe30:	1ccb      	adds	r3, r1, #3
        case 1: return NRF_P1;
   1fe32:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 1feec <nrfx_pwm_init+0x150>
   1fe36:	9301      	str	r3, [sp, #4]
   1fe38:	1e4f      	subs	r7, r1, #1
   1fe3a:	ae02      	add	r6, sp, #8
   1fe3c:	f04f 0901 	mov.w	r9, #1
        uint8_t output_pin = p_config->output_pins[i];
   1fe40:	f817 af01 	ldrb.w	sl, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   1fe44:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1fe48:	d040      	beq.n	1fecc <nrfx_pwm_init+0x130>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   1fe4a:	f02a 0380 	bic.w	r3, sl, #128	; 0x80
   1fe4e:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
   1fe50:	f1bc 0f00 	cmp.w	ip, #0
   1fe54:	d11a      	bne.n	1fe8c <nrfx_pwm_init+0xf0>
    if (value == 0)
   1fe56:	f01a 0f80 	tst.w	sl, #128	; 0x80
    *p_pin = pin_number & 0x1F;
   1fe5a:	f00a 051f 	and.w	r5, sl, #31
    return pin_number >> 5;
   1fe5e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    if (value == 0)
   1fe62:	d129      	bne.n	1feb8 <nrfx_pwm_init+0x11c>
        case 1: return NRF_P1;
   1fe64:	2b01      	cmp	r3, #1
   1fe66:	bf14      	ite	ne
   1fe68:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
   1fe6c:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1fe6e:	fa09 fb05 	lsl.w	fp, r9, r5
    p_reg->OUTCLR = clr_mask;
   1fe72:	f8ca b50c 	str.w	fp, [sl, #1292]	; 0x50c
        case 1: return NRF_P1;
   1fe76:	2b01      	cmp	r3, #1
   1fe78:	bf14      	ite	ne
   1fe7a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
   1fe7e:	4673      	moveq	r3, lr
    reg->PIN_CNF[pin_number] = cnf;
   1fe80:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1fe84:	f04f 0a03 	mov.w	sl, #3
   1fe88:	f843 a025 	str.w	sl, [r3, r5, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1fe8c:	9b01      	ldr	r3, [sp, #4]
   1fe8e:	42bb      	cmp	r3, r7
   1fe90:	f106 0604 	add.w	r6, r6, #4
   1fe94:	d1d4      	bne.n	1fe40 <nrfx_pwm_init+0xa4>
    if (!p_config->skip_psel_cfg)
   1fe96:	9b00      	ldr	r3, [sp, #0]
   1fe98:	2b00      	cmp	r3, #0
   1fe9a:	d199      	bne.n	1fdd0 <nrfx_pwm_init+0x34>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   1fe9c:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   1fe9e:	9d02      	ldr	r5, [sp, #8]
   1fea0:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
   1fea4:	9d03      	ldr	r5, [sp, #12]
   1fea6:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
   1feaa:	9d04      	ldr	r5, [sp, #16]
   1feac:	f8c3 5568 	str.w	r5, [r3, #1384]	; 0x568
   1feb0:	9d05      	ldr	r5, [sp, #20]
   1feb2:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1feb6:	e78b      	b.n	1fdd0 <nrfx_pwm_init+0x34>
        case 1: return NRF_P1;
   1feb8:	2b01      	cmp	r3, #1
   1feba:	bf14      	ite	ne
   1febc:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
   1fec0:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fec2:	fa09 fb05 	lsl.w	fp, r9, r5
    p_reg->OUTSET = set_mask;
   1fec6:	f8ca b508 	str.w	fp, [sl, #1288]	; 0x508
   1feca:	e7d4      	b.n	1fe76 <nrfx_pwm_init+0xda>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   1fecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fed0:	6033      	str	r3, [r6, #0]
   1fed2:	e7db      	b.n	1fe8c <nrfx_pwm_init+0xf0>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   1fed4:	f340 3007 	sbfx	r0, r0, #12, #8
   1fed8:	f7e8 f9ca 	bl	8270 <arch_irq_enable>
   1fedc:	e79f      	b.n	1fe1e <nrfx_pwm_init+0x82>
        return err_code;
   1fede:	4804      	ldr	r0, [pc, #16]	; (1fef0 <nrfx_pwm_init+0x154>)
   1fee0:	e7a3      	b.n	1fe2a <nrfx_pwm_init+0x8e>
   1fee2:	bf00      	nop
   1fee4:	20003b28 	.word	0x20003b28
   1fee8:	0bad0000 	.word	0x0bad0000
   1feec:	50000300 	.word	0x50000300
   1fef0:	0bad0005 	.word	0x0bad0005

0001fef4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   1fef4:	b4f0      	push	{r4, r5, r6, r7}
   1fef6:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fef8:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   1fefa:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1fefc:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   1ff00:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   1ff02:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1ff04:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
   1ff08:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ff0a:	4b18      	ldr	r3, [pc, #96]	; (1ff6c <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
   1ff0c:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
   1ff10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ff14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   1ff18:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1ff1a:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   1ff1e:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1ff22:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   1ff26:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1ff2a:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   1ff2e:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   1ff32:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   1ff36:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   1ff3a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   1ff3e:	07e2      	lsls	r2, r4, #31
   1ff40:	d411      	bmi.n	1ff66 <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   1ff42:	f014 0202 	ands.w	r2, r4, #2
   1ff46:	d003      	beq.n	1ff50 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   1ff48:	2b00      	cmp	r3, #0
   1ff4a:	bf14      	ite	ne
   1ff4c:	2208      	movne	r2, #8
   1ff4e:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   1ff50:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   1ff52:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   1ff56:	bf18      	it	ne
   1ff58:	230c      	movne	r3, #12
   1ff5a:	b2e2      	uxtb	r2, r4
   1ff5c:	bf08      	it	eq
   1ff5e:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   1ff60:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   1ff62:	f007 bc7c 	b.w	2785e <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   1ff66:	2210      	movs	r2, #16
   1ff68:	e7f2      	b.n	1ff50 <nrfx_pwm_simple_playback+0x5c>
   1ff6a:	bf00      	nop
   1ff6c:	20003b28 	.word	0x20003b28

0001ff70 <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ff70:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1ff72:	4a08      	ldr	r2, [pc, #32]	; (1ff94 <nrfx_pwm_is_stopped+0x24>)
   1ff74:	210c      	movs	r1, #12
   1ff76:	fb01 2203 	mla	r2, r1, r3, r2
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1ff7a:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1ff7c:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff7e:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   1ff82:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1ff84:	b919      	cbnz	r1, 1ff8e <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1ff86:	1e98      	subs	r0, r3, #2
   1ff88:	bf18      	it	ne
   1ff8a:	2001      	movne	r0, #1
   1ff8c:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ff8e:	2001      	movs	r0, #1
   1ff90:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   1ff92:	4770      	bx	lr
   1ff94:	20003b28 	.word	0x20003b28

0001ff98 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ff98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ff9c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ffa0:	2a08      	cmp	r2, #8
   1ffa2:	d106      	bne.n	1ffb2 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ffa4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1ffa8:	2b05      	cmp	r3, #5
   1ffaa:	d804      	bhi.n	1ffb6 <nrf52_errata_187+0x1e>
   1ffac:	4a03      	ldr	r2, [pc, #12]	; (1ffbc <nrf52_errata_187+0x24>)
   1ffae:	5cd0      	ldrb	r0, [r2, r3]
   1ffb0:	4770      	bx	lr
        return false;
   1ffb2:	2000      	movs	r0, #0
   1ffb4:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ffb6:	2001      	movs	r0, #1
}
   1ffb8:	4770      	bx	lr
   1ffba:	bf00      	nop
   1ffbc:	0002c867 	.word	0x0002c867

0001ffc0 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1ffc0:	4b05      	ldr	r3, [pc, #20]	; (1ffd8 <ep_state_access+0x18>)
   1ffc2:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ffc6:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   1ffca:	bf08      	it	eq
   1ffcc:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   1ffce:	f000 000f 	and.w	r0, r0, #15
}
   1ffd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1ffd6:	4770      	bx	lr
   1ffd8:	20003ca4 	.word	0x20003ca4

0001ffdc <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   1ffdc:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1ffde:	f007 fc77 	bl	278d0 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1ffe2:	b118      	cbz	r0, 1ffec <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1ffe4:	4b03      	ldr	r3, [pc, #12]	; (1fff4 <usbd_dma_pending_clear+0x18>)
   1ffe6:	2200      	movs	r2, #0
   1ffe8:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   1ffec:	4b02      	ldr	r3, [pc, #8]	; (1fff8 <usbd_dma_pending_clear+0x1c>)
   1ffee:	2200      	movs	r2, #0
   1fff0:	701a      	strb	r2, [r3, #0]
}
   1fff2:	bd08      	pop	{r3, pc}
   1fff4:	40027000 	.word	0x40027000
   1fff8:	20003f70 	.word	0x20003f70

0001fffc <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   1fffc:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   1fffe:	4a09      	ldr	r2, [pc, #36]	; (20024 <ev_usbreset_handler+0x28>)
   20000:	2300      	movs	r3, #0
   20002:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   20004:	4a08      	ldr	r2, [pc, #32]	; (20028 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   20006:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2000a:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   2000c:	f88d 3007 	strb.w	r3, [sp, #7]
   20010:	2301      	movs	r3, #1
   20012:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   20016:	4b05      	ldr	r3, [pc, #20]	; (2002c <ev_usbreset_handler+0x30>)
   20018:	a801      	add	r0, sp, #4
   2001a:	681b      	ldr	r3, [r3, #0]
   2001c:	4798      	blx	r3
}
   2001e:	b003      	add	sp, #12
   20020:	f85d fb04 	ldr.w	pc, [sp], #4
   20024:	20003f6f 	.word	0x20003f6f
   20028:	20003f72 	.word	0x20003f72
   2002c:	20003d34 	.word	0x20003d34

00020030 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   20030:	4b21      	ldr	r3, [pc, #132]	; (200b8 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   20032:	b513      	push	{r0, r1, r4, lr}
   20034:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   20038:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   2003c:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   2003e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20042:	d50e      	bpl.n	20062 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   20044:	4b1d      	ldr	r3, [pc, #116]	; (200bc <ev_usbevent_handler+0x8c>)
   20046:	2201      	movs	r2, #1
   20048:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2004a:	2300      	movs	r3, #0
   2004c:	f8ad 3005 	strh.w	r3, [sp, #5]
   20050:	f88d 3007 	strb.w	r3, [sp, #7]
   20054:	2302      	movs	r3, #2
   20056:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   2005a:	4b19      	ldr	r3, [pc, #100]	; (200c0 <ev_usbevent_handler+0x90>)
   2005c:	a801      	add	r0, sp, #4
   2005e:	681b      	ldr	r3, [r3, #0]
   20060:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   20062:	05a2      	lsls	r2, r4, #22
   20064:	d50d      	bpl.n	20082 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   20066:	4a15      	ldr	r2, [pc, #84]	; (200bc <ev_usbevent_handler+0x8c>)
   20068:	2300      	movs	r3, #0
   2006a:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   2006c:	f8ad 3005 	strh.w	r3, [sp, #5]
   20070:	f88d 3007 	strb.w	r3, [sp, #7]
   20074:	2303      	movs	r3, #3
   20076:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   2007a:	4b11      	ldr	r3, [pc, #68]	; (200c0 <ev_usbevent_handler+0x90>)
   2007c:	a801      	add	r0, sp, #4
   2007e:	681b      	ldr	r3, [r3, #0]
   20080:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   20082:	0563      	lsls	r3, r4, #21
   20084:	d515      	bpl.n	200b2 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   20086:	4a0d      	ldr	r2, [pc, #52]	; (200bc <ev_usbevent_handler+0x8c>)
   20088:	7813      	ldrb	r3, [r2, #0]
   2008a:	b193      	cbz	r3, 200b2 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   2008c:	2300      	movs	r3, #0
   2008e:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   20090:	4a09      	ldr	r2, [pc, #36]	; (200b8 <ev_usbevent_handler+0x88>)
   20092:	2101      	movs	r1, #1
   20094:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20098:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2009a:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   2009c:	f8ad 3005 	strh.w	r3, [sp, #5]
   200a0:	f88d 3007 	strb.w	r3, [sp, #7]
   200a4:	2304      	movs	r3, #4
   200a6:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   200aa:	4b05      	ldr	r3, [pc, #20]	; (200c0 <ev_usbevent_handler+0x90>)
   200ac:	a801      	add	r0, sp, #4
   200ae:	681b      	ldr	r3, [r3, #0]
   200b0:	4798      	blx	r3
        }
    }
}
   200b2:	b002      	add	sp, #8
   200b4:	bd10      	pop	{r4, pc}
   200b6:	bf00      	nop
   200b8:	40027000 	.word	0x40027000
   200bc:	20003f6f 	.word	0x20003f6f
   200c0:	20003d34 	.word	0x20003d34

000200c4 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   200c4:	f04f 0320 	mov.w	r3, #32
   200c8:	f3ef 8011 	mrs	r0, BASEPRI
   200cc:	f383 8812 	msr	BASEPRI_MAX, r3
   200d0:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   200d4:	4b0a      	ldr	r3, [pc, #40]	; (20100 <usbd_errata_187_211_begin+0x3c>)
   200d6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   200da:	2203      	movs	r2, #3
   200dc:	b961      	cbnz	r1, 200f8 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   200de:	f249 3175 	movw	r1, #37749	; 0x9375
   200e2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   200e6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   200ea:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   200ee:	f380 8811 	msr	BASEPRI, r0
   200f2:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   200f6:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   200f8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   200fc:	e7f7      	b.n	200ee <usbd_errata_187_211_begin+0x2a>
   200fe:	bf00      	nop
   20100:	4006e000 	.word	0x4006e000

00020104 <usbd_errata_187_211_end>:
	__asm__ volatile(
   20104:	f04f 0320 	mov.w	r3, #32
   20108:	f3ef 8011 	mrs	r0, BASEPRI
   2010c:	f383 8812 	msr	BASEPRI_MAX, r3
   20110:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   20114:	4b0a      	ldr	r3, [pc, #40]	; (20140 <usbd_errata_187_211_end+0x3c>)
   20116:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2011a:	b961      	cbnz	r1, 20136 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2011c:	f249 3275 	movw	r2, #37749	; 0x9375
   20120:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   20124:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   20128:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2012c:	f380 8811 	msr	BASEPRI, r0
   20130:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   20134:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   20136:	2200      	movs	r2, #0
   20138:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2013c:	e7f6      	b.n	2012c <usbd_errata_187_211_end+0x28>
   2013e:	bf00      	nop
   20140:	4006e000 	.word	0x4006e000

00020144 <nrfx_usbd_feeder_flash>:
{
   20144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   20146:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   20148:	4f0b      	ldr	r7, [pc, #44]	; (20178 <nrfx_usbd_feeder_flash+0x34>)
   2014a:	4295      	cmp	r5, r2
   2014c:	bf28      	it	cs
   2014e:	4615      	movcs	r5, r2
{
   20150:	460c      	mov	r4, r1
   20152:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   20154:	462a      	mov	r2, r5
   20156:	6809      	ldr	r1, [r1, #0]
   20158:	4638      	mov	r0, r7
   2015a:	f004 fc20 	bl	2499e <memcpy>
    p_transfer->size -= tx_size;
   2015e:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   20160:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   20162:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   20164:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   20168:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   2016a:	6060      	str	r0, [r4, #4]
}
   2016c:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2016e:	6022      	str	r2, [r4, #0]
}
   20170:	bf18      	it	ne
   20172:	2001      	movne	r0, #1
   20174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20176:	bf00      	nop
   20178:	20003d38 	.word	0x20003d38

0002017c <nrfx_usbd_feeder_flash_zlp>:
{
   2017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   2017e:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   20180:	4294      	cmp	r4, r2
   20182:	bf28      	it	cs
   20184:	4614      	movcs	r4, r2
{
   20186:	4606      	mov	r6, r0
   20188:	460d      	mov	r5, r1
    if (tx_size != 0)
   2018a:	b18c      	cbz	r4, 201b0 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2018c:	4f09      	ldr	r7, [pc, #36]	; (201b4 <nrfx_usbd_feeder_flash_zlp+0x38>)
   2018e:	6809      	ldr	r1, [r1, #0]
   20190:	4622      	mov	r2, r4
   20192:	4638      	mov	r0, r7
   20194:	f004 fc03 	bl	2499e <memcpy>
        p_next->p_data.tx = p_buffer;
   20198:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   2019a:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   2019c:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   2019e:	1b1b      	subs	r3, r3, r4
   201a0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   201a2:	682b      	ldr	r3, [r5, #0]
}
   201a4:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   201a6:	4423      	add	r3, r4
   201a8:	602b      	str	r3, [r5, #0]
}
   201aa:	bf18      	it	ne
   201ac:	2001      	movne	r0, #1
   201ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   201b0:	6004      	str	r4, [r0, #0]
   201b2:	e7f2      	b.n	2019a <nrfx_usbd_feeder_flash_zlp+0x1e>
   201b4:	20003d38 	.word	0x20003d38

000201b8 <ev_sof_handler>:
{
   201b8:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   201ba:	2300      	movs	r3, #0
   201bc:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   201c0:	4b0b      	ldr	r3, [pc, #44]	; (201f0 <ev_sof_handler+0x38>)
   201c2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   201c6:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   201ca:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   201ce:	4a09      	ldr	r2, [pc, #36]	; (201f4 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   201d0:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   201d2:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   201d4:	bf0c      	ite	eq
   201d6:	f44f 7180 	moveq.w	r1, #256	; 0x100
   201da:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   201de:	430b      	orrs	r3, r1
   201e0:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   201e2:	4b05      	ldr	r3, [pc, #20]	; (201f8 <ev_sof_handler+0x40>)
   201e4:	a801      	add	r0, sp, #4
   201e6:	681b      	ldr	r3, [r3, #0]
   201e8:	4798      	blx	r3
}
   201ea:	b003      	add	sp, #12
   201ec:	f85d fb04 	ldr.w	pc, [sp], #4
   201f0:	40027000 	.word	0x40027000
   201f4:	20003c10 	.word	0x20003c10
   201f8:	20003d34 	.word	0x20003d34

000201fc <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   201fc:	4b06      	ldr	r3, [pc, #24]	; (20218 <atomic_and.constprop.0.isra.0+0x1c>)
   201fe:	f3bf 8f5b 	dmb	ish
   20202:	e853 2f00 	ldrex	r2, [r3]
   20206:	4002      	ands	r2, r0
   20208:	e843 2100 	strex	r1, r2, [r3]
   2020c:	2900      	cmp	r1, #0
   2020e:	d1f8      	bne.n	20202 <atomic_and.constprop.0.isra.0+0x6>
   20210:	f3bf 8f5b 	dmb	ish
}
   20214:	4770      	bx	lr
   20216:	bf00      	nop
   20218:	20003ba0 	.word	0x20003ba0

0002021c <nrf_usbd_ep0in_dma_handler>:
{
   2021c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2021e:	f7ff fedd 	bl	1ffdc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   20222:	4b08      	ldr	r3, [pc, #32]	; (20244 <nrf_usbd_ep0in_dma_handler+0x28>)
   20224:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   20228:	2a03      	cmp	r2, #3
   2022a:	d105      	bne.n	20238 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   2022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   20230:	f06f 0001 	mvn.w	r0, #1
   20234:	f7ff bfe2 	b.w	201fc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   20238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2023c:	2b00      	cmp	r3, #0
   2023e:	d0f5      	beq.n	2022c <nrf_usbd_ep0in_dma_handler+0x10>
}
   20240:	bd08      	pop	{r3, pc}
   20242:	bf00      	nop
   20244:	20003c14 	.word	0x20003c14

00020248 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   20248:	2201      	movs	r2, #1
{
   2024a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   2024c:	fa02 f501 	lsl.w	r5, r2, r1
   20250:	491c      	ldr	r1, [pc, #112]	; (202c4 <usbd_ep_data_handler+0x7c>)
   20252:	4e1d      	ldr	r6, [pc, #116]	; (202c8 <usbd_ep_data_handler+0x80>)
   20254:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   20256:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   2025a:	ea43 0305 	orr.w	r3, r3, r5
{
   2025e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   20260:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   20262:	d024      	beq.n	202ae <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   20264:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20268:	4b18      	ldr	r3, [pc, #96]	; (202cc <usbd_ep_data_handler+0x84>)
   2026a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2026e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20272:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20276:	681a      	ldr	r2, [r3, #0]
    if (ret)
   20278:	b132      	cbz	r2, 20288 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2027a:	2200      	movs	r2, #0
   2027c:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   2027e:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   20280:	681b      	ldr	r3, [r3, #0]
   20282:	d011      	beq.n	202a8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   20284:	f007 fb74 	bl	27970 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   20288:	6831      	ldr	r1, [r6, #0]
   2028a:	4029      	ands	r1, r5
   2028c:	d10a      	bne.n	202a4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2028e:	2306      	movs	r3, #6
   20290:	f88d 3004 	strb.w	r3, [sp, #4]
   20294:	f88d 4006 	strb.w	r4, [sp, #6]
   20298:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   2029c:	4b0c      	ldr	r3, [pc, #48]	; (202d0 <usbd_ep_data_handler+0x88>)
   2029e:	a801      	add	r0, sp, #4
   202a0:	681b      	ldr	r3, [r3, #0]
   202a2:	4798      	blx	r3
}
   202a4:	b002      	add	sp, #8
   202a6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   202a8:	f7ff ffb8 	bl	2021c <nrf_usbd_ep0in_dma_handler>
   202ac:	e7ec      	b.n	20288 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   202ae:	6833      	ldr	r3, [r6, #0]
   202b0:	421d      	tst	r5, r3
   202b2:	d1f7      	bne.n	202a4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   202b4:	2306      	movs	r3, #6
   202b6:	f88d 3004 	strb.w	r3, [sp, #4]
   202ba:	f88d 0006 	strb.w	r0, [sp, #6]
   202be:	f88d 2007 	strb.w	r2, [sp, #7]
   202c2:	e7eb      	b.n	2029c <usbd_ep_data_handler+0x54>
   202c4:	20003c10 	.word	0x20003c10
   202c8:	20003ba0 	.word	0x20003ba0
   202cc:	0002a2e4 	.word	0x0002a2e4
   202d0:	20003d34 	.word	0x20003d34

000202d4 <ev_setup_data_handler>:
{
   202d4:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   202d6:	4b05      	ldr	r3, [pc, #20]	; (202ec <ev_setup_data_handler+0x18>)
   202d8:	781a      	ldrb	r2, [r3, #0]
   202da:	4610      	mov	r0, r2
   202dc:	f007 fb3e 	bl	2795c <ep2bit>
}
   202e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   202e4:	4601      	mov	r1, r0
   202e6:	4610      	mov	r0, r2
   202e8:	f7ff bfae 	b.w	20248 <usbd_ep_data_handler>
   202ec:	20003f72 	.word	0x20003f72

000202f0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   202f0:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   202f2:	f7ff fe73 	bl	1ffdc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   202f6:	4b0c      	ldr	r3, [pc, #48]	; (20328 <ev_dma_epout8_handler+0x38>)
   202f8:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   202fc:	2a03      	cmp	r2, #3
   202fe:	d010      	beq.n	20322 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   20300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   20304:	b96b      	cbnz	r3, 20322 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   20306:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2030a:	f7ff ff77 	bl	201fc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2030e:	2306      	movs	r3, #6
   20310:	f88d 3004 	strb.w	r3, [sp, #4]
   20314:	2308      	movs	r3, #8
   20316:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2031a:	4b04      	ldr	r3, [pc, #16]	; (2032c <ev_dma_epout8_handler+0x3c>)
   2031c:	a801      	add	r0, sp, #4
   2031e:	681b      	ldr	r3, [r3, #0]
   20320:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   20322:	b003      	add	sp, #12
   20324:	f85d fb04 	ldr.w	pc, [sp], #4
   20328:	20003c14 	.word	0x20003c14
   2032c:	20003d34 	.word	0x20003d34

00020330 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   20330:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   20332:	f7ff fe53 	bl	1ffdc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   20336:	4b10      	ldr	r3, [pc, #64]	; (20378 <ev_dma_epin8_handler+0x48>)
   20338:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   2033c:	2a03      	cmp	r2, #3
   2033e:	d106      	bne.n	2034e <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   20340:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   20344:	b003      	add	sp, #12
   20346:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2034a:	f7ff bf57 	b.w	201fc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2034e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   20352:	b96b      	cbnz	r3, 20370 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   20354:	f46f 7080 	mvn.w	r0, #256	; 0x100
   20358:	f7ff ff50 	bl	201fc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2035c:	2306      	movs	r3, #6
   2035e:	f88d 3004 	strb.w	r3, [sp, #4]
   20362:	2388      	movs	r3, #136	; 0x88
   20364:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   20368:	4b04      	ldr	r3, [pc, #16]	; (2037c <ev_dma_epin8_handler+0x4c>)
   2036a:	a801      	add	r0, sp, #4
   2036c:	681b      	ldr	r3, [r3, #0]
   2036e:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   20370:	b003      	add	sp, #12
   20372:	f85d fb04 	ldr.w	pc, [sp], #4
   20376:	bf00      	nop
   20378:	20003c14 	.word	0x20003c14
   2037c:	20003d34 	.word	0x20003d34

00020380 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   20380:	4a02      	ldr	r2, [pc, #8]	; (2038c <nrfx_usbd_uninit+0xc>)
   20382:	2300      	movs	r3, #0
   20384:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   20386:	4a02      	ldr	r2, [pc, #8]	; (20390 <nrfx_usbd_uninit+0x10>)
   20388:	7013      	strb	r3, [r2, #0]
    return;
}
   2038a:	4770      	bx	lr
   2038c:	20003d34 	.word	0x20003d34
   20390:	20003f71 	.word	0x20003f71

00020394 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   20394:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   20396:	4b48      	ldr	r3, [pc, #288]	; (204b8 <nrfx_usbd_enable+0x124>)
   20398:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2039c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   203a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   203a4:	f7ff fdf8 	bl	1ff98 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   203a8:	b108      	cbz	r0, 203ae <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   203aa:	f7ff fe8b 	bl	200c4 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   203ae:	f007 fa8f 	bl	278d0 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   203b2:	b1c8      	cbz	r0, 203e8 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   203b4:	f04f 0320 	mov.w	r3, #32
   203b8:	f3ef 8011 	mrs	r0, BASEPRI
   203bc:	f383 8812 	msr	BASEPRI_MAX, r3
   203c0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   203c4:	4b3d      	ldr	r3, [pc, #244]	; (204bc <nrfx_usbd_enable+0x128>)
   203c6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   203ca:	22c0      	movs	r2, #192	; 0xc0
   203cc:	2900      	cmp	r1, #0
   203ce:	d16a      	bne.n	204a6 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   203d0:	f249 3175 	movw	r1, #37749	; 0x9375
   203d4:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   203d8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   203dc:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   203e0:	f380 8811 	msr	BASEPRI, r0
   203e4:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   203e8:	4b33      	ldr	r3, [pc, #204]	; (204b8 <nrfx_usbd_enable+0x124>)
   203ea:	2201      	movs	r2, #1
   203ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   203f0:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   203f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   203f8:	0512      	lsls	r2, r2, #20
   203fa:	d5fb      	bpl.n	203f4 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   203fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20400:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   20404:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20408:	f007 fa62 	bl	278d0 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   2040c:	b1c0      	cbz	r0, 20440 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   2040e:	f04f 0320 	mov.w	r3, #32
   20412:	f3ef 8011 	mrs	r0, BASEPRI
   20416:	f383 8812 	msr	BASEPRI_MAX, r3
   2041a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2041e:	4b27      	ldr	r3, [pc, #156]	; (204bc <nrfx_usbd_enable+0x128>)
   20420:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   20424:	2900      	cmp	r1, #0
   20426:	d141      	bne.n	204ac <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   20428:	f249 3275 	movw	r2, #37749	; 0x9375
   2042c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   20430:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   20434:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   20438:	f380 8811 	msr	BASEPRI, r0
   2043c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   20440:	f7ff fdaa 	bl	1ff98 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   20444:	b130      	cbz	r0, 20454 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   20446:	f7ff fe5d 	bl	20104 <usbd_errata_187_211_end>
   2044a:	f7ff fda5 	bl	1ff98 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2044e:	b108      	cbz	r0, 20454 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   20450:	f7ff fe38 	bl	200c4 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   20454:	f007 fa3c 	bl	278d0 <nrf52_errata_166>
   20458:	4b17      	ldr	r3, [pc, #92]	; (204b8 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   2045a:	b150      	cbz	r0, 20472 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   2045c:	f240 72e3 	movw	r2, #2019	; 0x7e3
   20460:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   20464:	2240      	movs	r2, #64	; 0x40
   20466:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   2046a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2046e:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   20472:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   20474:	2280      	movs	r2, #128	; 0x80
   20476:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2047a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2047e:	4b10      	ldr	r3, [pc, #64]	; (204c0 <nrfx_usbd_enable+0x12c>)
   20480:	f240 12ff 	movw	r2, #511	; 0x1ff
   20484:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   20486:	4b0f      	ldr	r3, [pc, #60]	; (204c4 <nrfx_usbd_enable+0x130>)
   20488:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2048a:	f7ff fda7 	bl	1ffdc <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2048e:	4b0e      	ldr	r3, [pc, #56]	; (204c8 <nrfx_usbd_enable+0x134>)
   20490:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   20492:	4b0e      	ldr	r3, [pc, #56]	; (204cc <nrfx_usbd_enable+0x138>)
   20494:	2202      	movs	r2, #2
   20496:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   20498:	f7ff fd7e 	bl	1ff98 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2049c:	b150      	cbz	r0, 204b4 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   2049e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   204a2:	f7ff be2f 	b.w	20104 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   204a6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   204aa:	e799      	b.n	203e0 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   204ac:	2200      	movs	r2, #0
   204ae:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   204b2:	e7c1      	b.n	20438 <nrfx_usbd_enable+0xa4>
}
   204b4:	bd08      	pop	{r3, pc}
   204b6:	bf00      	nop
   204b8:	40027000 	.word	0x40027000
   204bc:	4006e000 	.word	0x4006e000
   204c0:	20003c10 	.word	0x20003c10
   204c4:	20003ba0 	.word	0x20003ba0
   204c8:	20003f72 	.word	0x20003f72
   204cc:	20003f71 	.word	0x20003f71

000204d0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   204d0:	4b0a      	ldr	r3, [pc, #40]	; (204fc <nrfx_usbd_start+0x2c>)
   204d2:	2200      	movs	r2, #0
{
   204d4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   204d6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   204d8:	4a09      	ldr	r2, [pc, #36]	; (20500 <nrfx_usbd_start+0x30>)
   204da:	4b0a      	ldr	r3, [pc, #40]	; (20504 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   204dc:	4c0a      	ldr	r4, [pc, #40]	; (20508 <nrfx_usbd_start+0x38>)
   204de:	2800      	cmp	r0, #0
   204e0:	bf18      	it	ne
   204e2:	4613      	movne	r3, r2
   204e4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   204e8:	2027      	movs	r0, #39	; 0x27
   204ea:	f7e7 fec1 	bl	8270 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   204ee:	2301      	movs	r3, #1
   204f0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   204f4:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   204f8:	bd10      	pop	{r4, pc}
   204fa:	bf00      	nop
   204fc:	20003f6f 	.word	0x20003f6f
   20500:	01e01407 	.word	0x01e01407
   20504:	01c01407 	.word	0x01c01407
   20508:	40027000 	.word	0x40027000

0002050c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   2050c:	4b03      	ldr	r3, [pc, #12]	; (2051c <nrfx_usbd_is_enabled+0x10>)
   2050e:	7818      	ldrb	r0, [r3, #0]
}
   20510:	2801      	cmp	r0, #1
   20512:	bf94      	ite	ls
   20514:	2000      	movls	r0, #0
   20516:	2001      	movhi	r0, #1
   20518:	4770      	bx	lr
   2051a:	bf00      	nop
   2051c:	20003f71 	.word	0x20003f71

00020520 <nrfx_usbd_init>:
{
   20520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   20524:	4b1d      	ldr	r3, [pc, #116]	; (2059c <nrfx_usbd_init+0x7c>)
   20526:	781c      	ldrb	r4, [r3, #0]
   20528:	2c00      	cmp	r4, #0
   2052a:	d135      	bne.n	20598 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   2052c:	4a1c      	ldr	r2, [pc, #112]	; (205a0 <nrfx_usbd_init+0x80>)
   2052e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   20530:	2201      	movs	r2, #1
   20532:	701a      	strb	r2, [r3, #0]
   20534:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20536:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2053a:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2053c:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20540:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   20544:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20546:	bf14      	ite	ne
   20548:	4641      	movne	r1, r8
   2054a:	2140      	moveq	r1, #64	; 0x40
   2054c:	4630      	mov	r0, r6
   2054e:	f007 fa3f 	bl	279d0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   20552:	4630      	mov	r0, r6
   20554:	f7ff fd34 	bl	1ffc0 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   20558:	3501      	adds	r5, #1
   2055a:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   2055c:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   2055e:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   20560:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   20562:	d1eb      	bne.n	2053c <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20564:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   20566:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20568:	f240 16ff 	movw	r6, #511	; 0x1ff
   2056c:	4620      	mov	r0, r4
   2056e:	f007 fa2f 	bl	279d0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   20572:	4620      	mov	r0, r4
   20574:	f7ff fd24 	bl	1ffc0 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   20578:	3401      	adds	r4, #1
   2057a:	b2e4      	uxtb	r4, r4
   2057c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2057e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   20580:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   20582:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   20584:	d102      	bne.n	2058c <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   20586:	4807      	ldr	r0, [pc, #28]	; (205a4 <nrfx_usbd_init+0x84>)
}
   20588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2058c:	f014 0f08 	tst.w	r4, #8
   20590:	bf14      	ite	ne
   20592:	4631      	movne	r1, r6
   20594:	2140      	moveq	r1, #64	; 0x40
   20596:	e7e9      	b.n	2056c <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   20598:	4803      	ldr	r0, [pc, #12]	; (205a8 <nrfx_usbd_init+0x88>)
   2059a:	e7f5      	b.n	20588 <nrfx_usbd_init+0x68>
   2059c:	20003f71 	.word	0x20003f71
   205a0:	20003d34 	.word	0x20003d34
   205a4:	0bad0000 	.word	0x0bad0000
   205a8:	0bad0005 	.word	0x0bad0005

000205ac <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   205ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   205b0:	4605      	mov	r5, r0
	__asm__ volatile(
   205b2:	f04f 0320 	mov.w	r3, #32
   205b6:	f3ef 8811 	mrs	r8, BASEPRI
   205ba:	f383 8812 	msr	BASEPRI_MAX, r3
   205be:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   205c2:	f010 040f 	ands.w	r4, r0, #15
   205c6:	d103      	bne.n	205d0 <nrfx_usbd_ep_transfer+0x24>
   205c8:	4b27      	ldr	r3, [pc, #156]	; (20668 <nrfx_usbd_ep_transfer+0xbc>)
   205ca:	781b      	ldrb	r3, [r3, #0]
   205cc:	4283      	cmp	r3, r0
   205ce:	d146      	bne.n	2065e <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   205d0:	4b26      	ldr	r3, [pc, #152]	; (2066c <nrfx_usbd_ep_transfer+0xc0>)
   205d2:	4f27      	ldr	r7, [pc, #156]	; (20670 <nrfx_usbd_ep_transfer+0xc4>)
   205d4:	681a      	ldr	r2, [r3, #0]
   205d6:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   205d8:	4628      	mov	r0, r5
   205da:	f007 f9bf 	bl	2795c <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   205de:	43d2      	mvns	r2, r2
   205e0:	b292      	uxth	r2, r2
   205e2:	f04f 0901 	mov.w	r9, #1
   205e6:	4332      	orrs	r2, r6
   205e8:	fa09 f900 	lsl.w	r9, r9, r0
   205ec:	ea12 0f09 	tst.w	r2, r9
   205f0:	d137      	bne.n	20662 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   205f2:	4628      	mov	r0, r5
   205f4:	f7ff fce4 	bl	1ffc0 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   205f8:	220c      	movs	r2, #12
   205fa:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   205fc:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   205fe:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   20600:	d529      	bpl.n	20656 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   20602:	4a1c      	ldr	r2, [pc, #112]	; (20674 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   20604:	6808      	ldr	r0, [r1, #0]
   20606:	4414      	add	r4, r2
   20608:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2060c:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2060e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   20612:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   20616:	d119      	bne.n	2064c <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   20618:	b9b2      	cbnz	r2, 20648 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   2061a:	4a17      	ldr	r2, [pc, #92]	; (20678 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   2061c:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   2061e:	c907      	ldmia	r1, {r0, r1, r2}
   20620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   20624:	2200      	movs	r2, #0
   20626:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   20628:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   2062a:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2062c:	4b13      	ldr	r3, [pc, #76]	; (2067c <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   2062e:	4814      	ldr	r0, [pc, #80]	; (20680 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   20630:	ea46 0609 	orr.w	r6, r6, r9
   20634:	2280      	movs	r2, #128	; 0x80
   20636:	603e      	str	r6, [r7, #0]
   20638:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   2063c:	f388 8811 	msr	BASEPRI, r8
   20640:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   20644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   20648:	4a0e      	ldr	r2, [pc, #56]	; (20684 <nrfx_usbd_ep_transfer+0xd8>)
   2064a:	e7e7      	b.n	2061c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2064c:	b90a      	cbnz	r2, 20652 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   2064e:	4a0e      	ldr	r2, [pc, #56]	; (20688 <nrfx_usbd_ep_transfer+0xdc>)
   20650:	e7e4      	b.n	2061c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   20652:	4a0e      	ldr	r2, [pc, #56]	; (2068c <nrfx_usbd_ep_transfer+0xe0>)
   20654:	e7e2      	b.n	2061c <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   20656:	4a0e      	ldr	r2, [pc, #56]	; (20690 <nrfx_usbd_ep_transfer+0xe4>)
   20658:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   2065a:	4a0e      	ldr	r2, [pc, #56]	; (20694 <nrfx_usbd_ep_transfer+0xe8>)
   2065c:	e7de      	b.n	2061c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   2065e:	480e      	ldr	r0, [pc, #56]	; (20698 <nrfx_usbd_ep_transfer+0xec>)
   20660:	e7ec      	b.n	2063c <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   20662:	480e      	ldr	r0, [pc, #56]	; (2069c <nrfx_usbd_ep_transfer+0xf0>)
   20664:	e7ea      	b.n	2063c <nrfx_usbd_ep_transfer+0x90>
   20666:	bf00      	nop
   20668:	20003f72 	.word	0x20003f72
   2066c:	20003c10 	.word	0x20003c10
   20670:	20003ba0 	.word	0x20003ba0
   20674:	20003ba4 	.word	0x20003ba4
   20678:	00027911 	.word	0x00027911
   2067c:	e000e100 	.word	0xe000e100
   20680:	0bad0000 	.word	0x0bad0000
   20684:	00027933 	.word	0x00027933
   20688:	00020145 	.word	0x00020145
   2068c:	0002017d 	.word	0x0002017d
   20690:	20003b34 	.word	0x20003b34
   20694:	000278e3 	.word	0x000278e3
   20698:	0bad000a 	.word	0x0bad000a
   2069c:	0bad000b 	.word	0x0bad000b

000206a0 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   206a0:	f010 0f08 	tst.w	r0, #8
   206a4:	4b07      	ldr	r3, [pc, #28]	; (206c4 <nrfx_usbd_epout_size_get+0x24>)
   206a6:	d006      	beq.n	206b6 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   206a8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   206ac:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   206b0:	bf18      	it	ne
   206b2:	2000      	movne	r0, #0
   206b4:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   206b6:	f000 000f 	and.w	r0, r0, #15
   206ba:	f500 7094 	add.w	r0, r0, #296	; 0x128
   206be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   206c2:	4770      	bx	lr
   206c4:	40027000 	.word	0x40027000

000206c8 <usbd_dmareq_process>:
{
   206c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   206cc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2082c <usbd_dmareq_process+0x164>
   206d0:	f898 3000 	ldrb.w	r3, [r8]
{
   206d4:	b085      	sub	sp, #20
    if (!m_dma_pending)
   206d6:	2b00      	cmp	r3, #0
   206d8:	d16b      	bne.n	207b2 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   206da:	f8df 9154 	ldr.w	r9, [pc, #340]	; 20830 <usbd_dmareq_process+0x168>
   206de:	4e55      	ldr	r6, [pc, #340]	; (20834 <usbd_dmareq_process+0x16c>)
   206e0:	f8d9 1000 	ldr.w	r1, [r9]
   206e4:	6833      	ldr	r3, [r6, #0]
   206e6:	4019      	ands	r1, r3
   206e8:	d063      	beq.n	207b2 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   206ea:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   206ee:	bf14      	ite	ne
   206f0:	fa93 f1a3 	rbitne	r1, r3
   206f4:	fa91 f1a1 	rbiteq	r1, r1
   206f8:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   206fc:	290f      	cmp	r1, #15
   206fe:	bf8a      	itet	hi
   20700:	f1a1 0410 	subhi.w	r4, r1, #16
   20704:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   20708:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2070a:	4620      	mov	r0, r4
   2070c:	f7ff fc58 	bl	1ffc0 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   20710:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   20714:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   20718:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   2071c:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   20720:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   20722:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   20726:	da47      	bge.n	207b8 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   20728:	6803      	ldr	r3, [r0, #0]
   2072a:	8982      	ldrh	r2, [r0, #12]
   2072c:	6841      	ldr	r1, [r0, #4]
   2072e:	a802      	add	r0, sp, #8
   20730:	4798      	blx	r3
                if (!continue_transfer)
   20732:	b900      	cbnz	r0, 20736 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   20734:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   20736:	f007 f8cb 	bl	278d0 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   2073a:	b118      	cbz	r0, 20744 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   2073c:	4b3e      	ldr	r3, [pc, #248]	; (20838 <usbd_dmareq_process+0x170>)
   2073e:	2282      	movs	r2, #130	; 0x82
   20740:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   20744:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   20746:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   20748:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   2074a:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   2074e:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   20750:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   20754:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   20756:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   2075a:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   2075c:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   2075e:	f004 0008 	and.w	r0, r4, #8
   20762:	9902      	ldr	r1, [sp, #8]
   20764:	4b34      	ldr	r3, [pc, #208]	; (20838 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   20766:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2076a:	da4f      	bge.n	2080c <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   2076c:	2800      	cmp	r0, #0
   2076e:	d045      	beq.n	207fc <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   20770:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   20774:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   20778:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2077a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2077e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20782:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20786:	2201      	movs	r2, #1
   20788:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2078a:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2078c:	4a2b      	ldr	r2, [pc, #172]	; (2083c <usbd_dmareq_process+0x174>)
   2078e:	4b2c      	ldr	r3, [pc, #176]	; (20840 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20790:	4929      	ldr	r1, [pc, #164]	; (20838 <usbd_dmareq_process+0x170>)
   20792:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   20796:	bf38      	it	cc
   20798:	4613      	movcc	r3, r2
   2079a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2079e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   207a2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   207a6:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   207a8:	b91a      	cbnz	r2, 207b2 <usbd_dmareq_process+0xea>
   207aa:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   207ae:	2a00      	cmp	r2, #0
   207b0:	d0f9      	beq.n	207a6 <usbd_dmareq_process+0xde>
}
   207b2:	b005      	add	sp, #20
   207b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   207b8:	4620      	mov	r0, r4
   207ba:	f7ff ff71 	bl	206a0 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   207be:	89aa      	ldrh	r2, [r5, #12]
   207c0:	6869      	ldr	r1, [r5, #4]
   207c2:	f8d5 c000 	ldr.w	ip, [r5]
   207c6:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   207c8:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   207ca:	a802      	add	r0, sp, #8
   207cc:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   207ce:	9a02      	ldr	r2, [sp, #8]
   207d0:	2a00      	cmp	r2, #0
   207d2:	d0ae      	beq.n	20732 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   207d4:	9a03      	ldr	r2, [sp, #12]
   207d6:	4297      	cmp	r7, r2
   207d8:	d9ab      	bls.n	20732 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   207da:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   207dc:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   207de:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   207e0:	f7ff fd0c 	bl	201fc <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   207e4:	2306      	movs	r3, #6
   207e6:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   207ea:	4b16      	ldr	r3, [pc, #88]	; (20844 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   207ec:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   207f0:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   207f2:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   207f6:	a801      	add	r0, sp, #4
   207f8:	4798      	blx	r3
                    continue;
   207fa:	e771      	b.n	206e0 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   207fc:	2014      	movs	r0, #20
   207fe:	fb00 3304 	mla	r3, r0, r4, r3
   20802:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   20806:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   2080a:	e7b5      	b.n	20778 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   2080c:	b128      	cbz	r0, 2081a <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   2080e:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   20812:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   20816:	2328      	movs	r3, #40	; 0x28
   20818:	e7af      	b.n	2077a <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   2081a:	2014      	movs	r0, #20
   2081c:	fb00 3304 	mla	r3, r0, r4, r3
   20820:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   20824:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   20828:	e7f5      	b.n	20816 <usbd_dmareq_process+0x14e>
   2082a:	bf00      	nop
   2082c:	20003f70 	.word	0x20003f70
   20830:	20003ba0 	.word	0x20003ba0
   20834:	20003c10 	.word	0x20003c10
   20838:	40027000 	.word	0x40027000
   2083c:	0002a2f6 	.word	0x0002a2f6
   20840:	0002a2e4 	.word	0x0002a2e4
   20844:	20003d34 	.word	0x20003d34

00020848 <ev_epdata_handler>:
{
   20848:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   2084a:	4b0f      	ldr	r3, [pc, #60]	; (20888 <ev_epdata_handler+0x40>)
   2084c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   20850:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   20854:	2501      	movs	r5, #1
    while (dataepstatus)
   20856:	b91c      	cbnz	r4, 20860 <ev_epdata_handler+0x18>
}
   20858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   2085c:	f7ff bf34 	b.w	206c8 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   20860:	fa94 f3a4 	rbit	r3, r4
   20864:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20868:	2b0f      	cmp	r3, #15
   2086a:	bfc8      	it	gt
   2086c:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   20870:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20872:	bfd4      	ite	le
   20874:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   20878:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   2087a:	fa05 f303 	lsl.w	r3, r5, r3
   2087e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   20882:	f7ff fce1 	bl	20248 <usbd_ep_data_handler>
   20886:	e7e6      	b.n	20856 <ev_epdata_handler+0xe>
   20888:	40027000 	.word	0x40027000

0002088c <nrf_usbd_epout_dma_handler>:
{
   2088c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2088e:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   20890:	f7ff fba4 	bl	1ffdc <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   20894:	4620      	mov	r0, r4
   20896:	f7ff fb93 	bl	1ffc0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2089a:	7b83      	ldrb	r3, [r0, #14]
   2089c:	2b03      	cmp	r3, #3
   2089e:	d10d      	bne.n	208bc <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   208a0:	4620      	mov	r0, r4
   208a2:	f007 f85b 	bl	2795c <ep2bit>
   208a6:	2301      	movs	r3, #1
   208a8:	fa03 f000 	lsl.w	r0, r3, r0
   208ac:	43c0      	mvns	r0, r0
   208ae:	f7ff fca5 	bl	201fc <atomic_and.constprop.0.isra.0>
}
   208b2:	b003      	add	sp, #12
   208b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   208b8:	f7ff bf06 	b.w	206c8 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   208bc:	6805      	ldr	r5, [r0, #0]
   208be:	2d00      	cmp	r5, #0
   208c0:	d1f7      	bne.n	208b2 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   208c2:	4620      	mov	r0, r4
   208c4:	f007 f84a 	bl	2795c <ep2bit>
   208c8:	2301      	movs	r3, #1
   208ca:	fa03 f000 	lsl.w	r0, r3, r0
   208ce:	43c0      	mvns	r0, r0
   208d0:	f7ff fc94 	bl	201fc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   208d4:	2306      	movs	r3, #6
   208d6:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   208da:	4b04      	ldr	r3, [pc, #16]	; (208ec <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   208dc:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   208e0:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   208e2:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   208e6:	a801      	add	r0, sp, #4
   208e8:	4798      	blx	r3
   208ea:	e7e2      	b.n	208b2 <nrf_usbd_epout_dma_handler+0x26>
   208ec:	20003d34 	.word	0x20003d34

000208f0 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   208f0:	4b02      	ldr	r3, [pc, #8]	; (208fc <nrfx_usbd_ep_stall+0xc>)
   208f2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   208f6:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   208fa:	4770      	bx	lr
   208fc:	40027000 	.word	0x40027000

00020900 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   20900:	0702      	lsls	r2, r0, #28
   20902:	d413      	bmi.n	2092c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   20904:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   20908:	f010 0f80 	tst.w	r0, #128	; 0x80
   2090c:	4a08      	ldr	r2, [pc, #32]	; (20930 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   2090e:	bf0b      	itete	eq
   20910:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   20914:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   20918:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   2091c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   20920:	bf08      	it	eq
   20922:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   20924:	1e43      	subs	r3, r0, #1
   20926:	4258      	negs	r0, r3
   20928:	4158      	adcs	r0, r3
   2092a:	4770      	bx	lr
        return false;
   2092c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   2092e:	4770      	bx	lr
   20930:	40027000 	.word	0x40027000

00020934 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   20934:	4b04      	ldr	r3, [pc, #16]	; (20948 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   20936:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   2093a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2093e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   20942:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   20946:	4770      	bx	lr
   20948:	40027000 	.word	0x40027000

0002094c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   2094c:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2094e:	2208      	movs	r2, #8
   20950:	2100      	movs	r1, #0
{
   20952:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   20954:	f004 f82e 	bl	249b4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   20958:	4b0e      	ldr	r3, [pc, #56]	; (20994 <nrfx_usbd_setup_get+0x48>)
   2095a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2095e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   20960:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   20964:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   20966:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2096a:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2096e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   20972:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   20974:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   20978:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2097c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   20980:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   20982:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   20986:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2098a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   2098e:	80e3      	strh	r3, [r4, #6]
}
   20990:	bd10      	pop	{r4, pc}
   20992:	bf00      	nop
   20994:	40027000 	.word	0x40027000

00020998 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20998:	4b02      	ldr	r3, [pc, #8]	; (209a4 <nrfx_usbd_setup_data_clear+0xc>)
   2099a:	2201      	movs	r2, #1
   2099c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   209a0:	4770      	bx	lr
   209a2:	bf00      	nop
   209a4:	40027000 	.word	0x40027000

000209a8 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   209a8:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   209aa:	f7ff fb17 	bl	1ffdc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   209ae:	4b10      	ldr	r3, [pc, #64]	; (209f0 <ev_dma_epout0_handler+0x48>)
   209b0:	7b9a      	ldrb	r2, [r3, #14]
   209b2:	2a03      	cmp	r2, #3
   209b4:	d106      	bne.n	209c4 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   209b6:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   209ba:	b002      	add	sp, #8
   209bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   209c0:	f7ff bc1c 	b.w	201fc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   209c4:	681c      	ldr	r4, [r3, #0]
   209c6:	b974      	cbnz	r4, 209e6 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   209c8:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   209cc:	f7ff fc16 	bl	201fc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   209d0:	2306      	movs	r3, #6
   209d2:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   209d6:	4b07      	ldr	r3, [pc, #28]	; (209f4 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   209d8:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   209dc:	681b      	ldr	r3, [r3, #0]
   209de:	a801      	add	r0, sp, #4
   209e0:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   209e2:	b002      	add	sp, #8
   209e4:	bd10      	pop	{r4, pc}
   209e6:	b002      	add	sp, #8
   209e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   209ec:	f7ff bfd4 	b.w	20998 <nrfx_usbd_setup_data_clear>
   209f0:	20003c14 	.word	0x20003c14
   209f4:	20003d34 	.word	0x20003d34

000209f8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   209f8:	4b02      	ldr	r3, [pc, #8]	; (20a04 <nrfx_usbd_setup_clear+0xc>)
   209fa:	2201      	movs	r2, #1
   209fc:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   209fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   20a00:	4770      	bx	lr
   20a02:	bf00      	nop
   20a04:	40027000 	.word	0x40027000

00020a08 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20a08:	4b02      	ldr	r3, [pc, #8]	; (20a14 <nrfx_usbd_setup_stall+0xc>)
   20a0a:	2201      	movs	r2, #1
   20a0c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   20a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   20a10:	4770      	bx	lr
   20a12:	bf00      	nop
   20a14:	40027000 	.word	0x40027000

00020a18 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   20a18:	4b01      	ldr	r3, [pc, #4]	; (20a20 <nrfx_usbd_last_setup_dir_get+0x8>)
   20a1a:	7818      	ldrb	r0, [r3, #0]
   20a1c:	4770      	bx	lr
   20a1e:	bf00      	nop
   20a20:	20003f72 	.word	0x20003f72

00020a24 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   20a24:	b510      	push	{r4, lr}
   20a26:	4602      	mov	r2, r0
	__asm__ volatile(
   20a28:	f04f 0320 	mov.w	r3, #32
   20a2c:	f3ef 8411 	mrs	r4, BASEPRI
   20a30:	f383 8812 	msr	BASEPRI_MAX, r3
   20a34:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   20a38:	f006 ff90 	bl	2795c <ep2bit>
   20a3c:	490d      	ldr	r1, [pc, #52]	; (20a74 <nrfx_usbd_transfer_out_drop+0x50>)
   20a3e:	2301      	movs	r3, #1
   20a40:	fa03 f000 	lsl.w	r0, r3, r0
   20a44:	680b      	ldr	r3, [r1, #0]
   20a46:	ea23 0300 	bic.w	r3, r3, r0
   20a4a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   20a4c:	f012 0108 	ands.w	r1, r2, #8
   20a50:	d10a      	bne.n	20a68 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   20a52:	f002 030f 	and.w	r3, r2, #15
   20a56:	009b      	lsls	r3, r3, #2
   20a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20a5c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   20a60:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   20a64:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   20a68:	f384 8811 	msr	BASEPRI, r4
   20a6c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   20a70:	bd10      	pop	{r4, pc}
   20a72:	bf00      	nop
   20a74:	20003c10 	.word	0x20003c10

00020a78 <usbd_ep_abort>:
{
   20a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a7a:	4601      	mov	r1, r0
	__asm__ volatile(
   20a7c:	f04f 0320 	mov.w	r3, #32
   20a80:	f3ef 8511 	mrs	r5, BASEPRI
   20a84:	f383 8812 	msr	BASEPRI_MAX, r3
   20a88:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   20a8c:	f7ff fa98 	bl	1ffc0 <ep_state_access>
   20a90:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20a92:	4608      	mov	r0, r1
   20a94:	f006 ff62 	bl	2795c <ep2bit>
   20a98:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   20a9a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20a9e:	fa02 f200 	lsl.w	r2, r2, r0
   20aa2:	482e      	ldr	r0, [pc, #184]	; (20b5c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   20aa4:	d118      	bne.n	20ad8 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20aa6:	6803      	ldr	r3, [r0, #0]
   20aa8:	ea32 0403 	bics.w	r4, r2, r3
   20aac:	d00a      	beq.n	20ac4 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   20aae:	4608      	mov	r0, r1
   20ab0:	f7ff ffb8 	bl	20a24 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   20ab4:	2303      	movs	r3, #3
   20ab6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   20ab8:	f385 8811 	msr	BASEPRI, r5
   20abc:	f3bf 8f6f 	isb	sy
}
   20ac0:	b003      	add	sp, #12
   20ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20ac4:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   20ac8:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20aca:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   20acc:	4b24      	ldr	r3, [pc, #144]	; (20b60 <usbd_ep_abort+0xe8>)
   20ace:	6818      	ldr	r0, [r3, #0]
   20ad0:	ea20 0002 	bic.w	r0, r0, r2
   20ad4:	6018      	str	r0, [r3, #0]
   20ad6:	e7ed      	b.n	20ab4 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   20ad8:	070b      	lsls	r3, r1, #28
   20ada:	d415      	bmi.n	20b08 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   20adc:	2980      	cmp	r1, #128	; 0x80
   20ade:	4b21      	ldr	r3, [pc, #132]	; (20b64 <usbd_ep_abort+0xec>)
   20ae0:	d02f      	beq.n	20b42 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   20ae2:	f001 040f 	and.w	r4, r1, #15
   20ae6:	f204 34da 	addw	r4, r4, #986	; 0x3da
   20aea:	0064      	lsls	r4, r4, #1
   20aec:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20af0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20af4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20af8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20afa:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20afe:	433c      	orrs	r4, r7
   20b00:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   20b04:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   20b08:	4f15      	ldr	r7, [pc, #84]	; (20b60 <usbd_ep_abort+0xe8>)
   20b0a:	6804      	ldr	r4, [r0, #0]
   20b0c:	683b      	ldr	r3, [r7, #0]
   20b0e:	ea64 0c03 	orn	ip, r4, r3
   20b12:	ea1c 0f02 	tst.w	ip, r2
   20b16:	d0cf      	beq.n	20ab8 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   20b18:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20b1a:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   20b1e:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   20b20:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20b22:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   20b24:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   20b26:	2303      	movs	r3, #3
   20b28:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   20b2a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   20b2e:	4b0e      	ldr	r3, [pc, #56]	; (20b68 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   20b30:	f88d 1006 	strb.w	r1, [sp, #6]
   20b34:	2206      	movs	r2, #6
            m_event_handler(&evt);
   20b36:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   20b38:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   20b3c:	a801      	add	r0, sp, #4
   20b3e:	4798      	blx	r3
   20b40:	e7ba      	b.n	20ab8 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   20b42:	f240 74b4 	movw	r4, #1972	; 0x7b4
   20b46:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20b4a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20b4e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20b52:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20b54:	f044 0404 	orr.w	r4, r4, #4
   20b58:	e7d1      	b.n	20afe <usbd_ep_abort+0x86>
   20b5a:	bf00      	nop
   20b5c:	20003ba0 	.word	0x20003ba0
   20b60:	20003c10 	.word	0x20003c10
   20b64:	40027000 	.word	0x40027000
   20b68:	20003d34 	.word	0x20003d34

00020b6c <ev_setup_handler>:
{
   20b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   20b6e:	4b17      	ldr	r3, [pc, #92]	; (20bcc <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20b70:	4c17      	ldr	r4, [pc, #92]	; (20bd0 <ev_setup_handler+0x64>)
   20b72:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   20b76:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   20b78:	4e16      	ldr	r6, [pc, #88]	; (20bd4 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20b7a:	43da      	mvns	r2, r3
   20b7c:	4b16      	ldr	r3, [pc, #88]	; (20bd8 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   20b7e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20b80:	681b      	ldr	r3, [r3, #0]
   20b82:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   20b84:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20b86:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   20b88:	f006 fee8 	bl	2795c <ep2bit>
   20b8c:	2301      	movs	r3, #1
   20b8e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20b90:	4213      	tst	r3, r2
   20b92:	d002      	beq.n	20b9a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   20b94:	4608      	mov	r0, r1
   20b96:	f7ff ff6f 	bl	20a78 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   20b9a:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   20b9e:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   20ba2:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   20ba4:	f7ff fb2a 	bl	201fc <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   20ba8:	6823      	ldr	r3, [r4, #0]
   20baa:	f043 0301 	orr.w	r3, r3, #1
   20bae:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   20bb0:	2300      	movs	r3, #0
   20bb2:	f8ad 3005 	strh.w	r3, [sp, #5]
   20bb6:	f88d 3007 	strb.w	r3, [sp, #7]
   20bba:	2305      	movs	r3, #5
   20bbc:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   20bc0:	4b06      	ldr	r3, [pc, #24]	; (20bdc <ev_setup_handler+0x70>)
   20bc2:	a801      	add	r0, sp, #4
   20bc4:	681b      	ldr	r3, [r3, #0]
   20bc6:	4798      	blx	r3
}
   20bc8:	b002      	add	sp, #8
   20bca:	bd70      	pop	{r4, r5, r6, pc}
   20bcc:	40027000 	.word	0x40027000
   20bd0:	20003c10 	.word	0x20003c10
   20bd4:	20003f72 	.word	0x20003f72
   20bd8:	20003ba0 	.word	0x20003ba0
   20bdc:	20003d34 	.word	0x20003d34

00020be0 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   20be0:	4b1b      	ldr	r3, [pc, #108]	; (20c50 <nrfx_usbd_irq_handler+0x70>)
   20be2:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   20be6:	2300      	movs	r3, #0
{
   20be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   20bec:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   20bee:	461d      	mov	r5, r3
    while (to_process)
   20bf0:	b970      	cbnz	r0, 20c10 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   20bf2:	4f18      	ldr	r7, [pc, #96]	; (20c54 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   20bf4:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   20bf8:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   20bfc:	f04f 0801 	mov.w	r8, #1
    while (active)
   20c00:	b9bc      	cbnz	r4, 20c32 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   20c02:	f7ff fd61 	bl	206c8 <usbd_dmareq_process>
    if (setup_active)
   20c06:	b306      	cbz	r6, 20c4a <nrfx_usbd_irq_handler+0x6a>
}
   20c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   20c0c:	f7ff bfae 	b.w	20b6c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   20c10:	fa90 f2a0 	rbit	r2, r0
   20c14:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   20c18:	490f      	ldr	r1, [pc, #60]	; (20c58 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   20c1a:	0096      	lsls	r6, r2, #2
   20c1c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   20c1e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20c22:	680e      	ldr	r6, [r1, #0]
    if (ret)
   20c24:	b116      	cbz	r6, 20c2c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   20c26:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   20c28:	6809      	ldr	r1, [r1, #0]
   20c2a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   20c2c:	ea20 0002 	bic.w	r0, r0, r2
   20c30:	e7de      	b.n	20bf0 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   20c32:	fa94 f5a4 	rbit	r5, r4
   20c36:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   20c3a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   20c3e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   20c42:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   20c44:	ea24 0405 	bic.w	r4, r4, r5
   20c48:	e7da      	b.n	20c00 <nrfx_usbd_irq_handler+0x20>
}
   20c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c4e:	bf00      	nop
   20c50:	40027000 	.word	0x40027000
   20c54:	0002a254 	.word	0x0002a254
   20c58:	40027100 	.word	0x40027100

00020c5c <usbd_ep_abort_all>:
{
   20c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   20c5e:	4e11      	ldr	r6, [pc, #68]	; (20ca4 <usbd_ep_abort_all+0x48>)
   20c60:	4b11      	ldr	r3, [pc, #68]	; (20ca8 <usbd_ep_abort_all+0x4c>)
   20c62:	6834      	ldr	r4, [r6, #0]
   20c64:	681b      	ldr	r3, [r3, #0]
   20c66:	0c24      	lsrs	r4, r4, #16
   20c68:	0424      	lsls	r4, r4, #16
   20c6a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   20c6c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   20c6e:	b91c      	cbnz	r4, 20c78 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   20c70:	f240 13ff 	movw	r3, #511	; 0x1ff
   20c74:	6033      	str	r3, [r6, #0]
}
   20c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   20c78:	fa94 f5a4 	rbit	r5, r4
   20c7c:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20c80:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   20c82:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20c84:	bfc6      	itte	gt
   20c86:	f1a5 0010 	subgt.w	r0, r5, #16
   20c8a:	b2c0      	uxtbgt	r0, r0
   20c8c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   20c90:	0703      	lsls	r3, r0, #28
   20c92:	d401      	bmi.n	20c98 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   20c94:	f7ff fef0 	bl	20a78 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   20c98:	fa07 f505 	lsl.w	r5, r7, r5
   20c9c:	ea24 0405 	bic.w	r4, r4, r5
   20ca0:	e7e5      	b.n	20c6e <usbd_ep_abort_all+0x12>
   20ca2:	bf00      	nop
   20ca4:	20003c10 	.word	0x20003c10
   20ca8:	20003ba0 	.word	0x20003ba0

00020cac <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20cac:	4b0c      	ldr	r3, [pc, #48]	; (20ce0 <nrfx_usbd_stop+0x34>)
   20cae:	2280      	movs	r2, #128	; 0x80
{
   20cb0:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   20cb2:	2027      	movs	r0, #39	; 0x27
   20cb4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   20cb8:	f7e7 fafe 	bl	82b8 <arch_irq_is_enabled>
   20cbc:	b170      	cbz	r0, 20cdc <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   20cbe:	4c09      	ldr	r4, [pc, #36]	; (20ce4 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   20cc0:	f7ff ffcc 	bl	20c5c <usbd_ep_abort_all>
   20cc4:	2300      	movs	r3, #0
   20cc6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   20cca:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   20ccc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   20cd0:	f7e7 fade 	bl	8290 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   20cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20cd8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   20cdc:	bd10      	pop	{r4, pc}
   20cde:	bf00      	nop
   20ce0:	e000e100 	.word	0xe000e100
   20ce4:	40027000 	.word	0x40027000

00020ce8 <nrfx_usbd_disable>:
{
   20ce8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   20cea:	f7ff ffdf 	bl	20cac <nrfx_usbd_stop>
    return p_reg->INTENSET;
   20cee:	4b08      	ldr	r3, [pc, #32]	; (20d10 <nrfx_usbd_disable+0x28>)
   20cf0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   20cf4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   20cf8:	2200      	movs	r2, #0
   20cfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   20cfe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   20d02:	f7ff f96b 	bl	1ffdc <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   20d06:	4b03      	ldr	r3, [pc, #12]	; (20d14 <nrfx_usbd_disable+0x2c>)
   20d08:	2201      	movs	r2, #1
   20d0a:	701a      	strb	r2, [r3, #0]
}
   20d0c:	bd08      	pop	{r3, pc}
   20d0e:	bf00      	nop
   20d10:	40027000 	.word	0x40027000
   20d14:	20003f71 	.word	0x20003f71

00020d18 <nrfx_usbd_suspend>:
{
   20d18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20d1a:	f04f 0320 	mov.w	r3, #32
   20d1e:	f3ef 8511 	mrs	r5, BASEPRI
   20d22:	f383 8812 	msr	BASEPRI_MAX, r3
   20d26:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   20d2a:	4b11      	ldr	r3, [pc, #68]	; (20d70 <nrfx_usbd_suspend+0x58>)
   20d2c:	781b      	ldrb	r3, [r3, #0]
   20d2e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   20d32:	b933      	cbnz	r3, 20d42 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   20d34:	2400      	movs	r4, #0
	__asm__ volatile(
   20d36:	f385 8811 	msr	BASEPRI, r5
   20d3a:	f3bf 8f6f 	isb	sy
}
   20d3e:	4620      	mov	r0, r4
   20d40:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   20d42:	f7ff ff8b 	bl	20c5c <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   20d46:	4b0b      	ldr	r3, [pc, #44]	; (20d74 <nrfx_usbd_suspend+0x5c>)
   20d48:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   20d4c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   20d50:	d1f0      	bne.n	20d34 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   20d52:	2101      	movs	r1, #1
   20d54:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   20d58:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   20d5c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   20d60:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   20d62:	bf42      	ittt	mi
   20d64:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   20d68:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   20d6c:	4614      	movmi	r4, r2
}
   20d6e:	e7e2      	b.n	20d36 <nrfx_usbd_suspend+0x1e>
   20d70:	20003f6f 	.word	0x20003f6f
   20d74:	40027000 	.word	0x40027000

00020d78 <nrfx_usbd_ep_disable>:
{
   20d78:	b510      	push	{r4, lr}
   20d7a:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   20d7c:	f7ff fe7c 	bl	20a78 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   20d80:	4a10      	ldr	r2, [pc, #64]	; (20dc4 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   20d82:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   20d86:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   20d8a:	f04f 0301 	mov.w	r3, #1
   20d8e:	bf14      	ite	ne
   20d90:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   20d94:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   20d98:	fa03 f300 	lsl.w	r3, r3, r0
   20d9c:	ea6f 0303 	mvn.w	r3, r3
   20da0:	bf15      	itete	ne
   20da2:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   20da4:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   20da6:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   20daa:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   20dae:	bf14      	ite	ne
   20db0:	4b05      	ldrne	r3, [pc, #20]	; (20dc8 <nrfx_usbd_ep_disable+0x50>)
   20db2:	4b06      	ldreq	r3, [pc, #24]	; (20dcc <nrfx_usbd_ep_disable+0x54>)
   20db4:	5c1a      	ldrb	r2, [r3, r0]
   20db6:	2301      	movs	r3, #1
   20db8:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   20dba:	4a02      	ldr	r2, [pc, #8]	; (20dc4 <nrfx_usbd_ep_disable+0x4c>)
   20dbc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   20dc0:	bd10      	pop	{r4, pc}
   20dc2:	bf00      	nop
   20dc4:	40027000 	.word	0x40027000
   20dc8:	0002c86d 	.word	0x0002c86d
   20dcc:	0002c876 	.word	0x0002c876

00020dd0 <nrfx_usbd_ep_enable>:
{
   20dd0:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   20dd2:	b243      	sxtb	r3, r0
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	4b23      	ldr	r3, [pc, #140]	; (20e64 <nrfx_usbd_ep_enable+0x94>)
   20dd8:	4a23      	ldr	r2, [pc, #140]	; (20e68 <nrfx_usbd_ep_enable+0x98>)
   20dda:	bfa8      	it	ge
   20ddc:	461a      	movge	r2, r3
   20dde:	f000 030f 	and.w	r3, r0, #15
   20de2:	f04f 0401 	mov.w	r4, #1
   20de6:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   20de8:	4a20      	ldr	r2, [pc, #128]	; (20e6c <nrfx_usbd_ep_enable+0x9c>)
   20dea:	fa04 f101 	lsl.w	r1, r4, r1
{
   20dee:	4605      	mov	r5, r0
   20df0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   20df4:	da0c      	bge.n	20e10 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   20df6:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   20dfa:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   20dfc:	07c8      	lsls	r0, r1, #31
   20dfe:	d406      	bmi.n	20e0e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   20e00:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20e04:	fa04 f303 	lsl.w	r3, r4, r3
   20e08:	4303      	orrs	r3, r0
   20e0a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   20e0e:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   20e10:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   20e14:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   20e16:	07c9      	lsls	r1, r1, #31
   20e18:	d4f9      	bmi.n	20e0e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   20e1a:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   20e1e:	fa04 f103 	lsl.w	r1, r4, r3
   20e22:	4331      	orrs	r1, r6
   20e24:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   20e28:	2b00      	cmp	r3, #0
   20e2a:	d0f0      	beq.n	20e0e <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   20e2c:	0703      	lsls	r3, r0, #28
   20e2e:	d4ee      	bmi.n	20e0e <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   20e30:	f04f 0320 	mov.w	r3, #32
   20e34:	f3ef 8611 	mrs	r6, BASEPRI
   20e38:	f383 8812 	msr	BASEPRI_MAX, r3
   20e3c:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   20e40:	f7ff fdf0 	bl	20a24 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20e44:	4628      	mov	r0, r5
   20e46:	f006 fd89 	bl	2795c <ep2bit>
   20e4a:	4a09      	ldr	r2, [pc, #36]	; (20e70 <nrfx_usbd_ep_enable+0xa0>)
   20e4c:	6813      	ldr	r3, [r2, #0]
   20e4e:	fa04 f000 	lsl.w	r0, r4, r0
   20e52:	ea23 0000 	bic.w	r0, r3, r0
   20e56:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   20e58:	f386 8811 	msr	BASEPRI, r6
   20e5c:	f3bf 8f6f 	isb	sy
}
   20e60:	e7d5      	b.n	20e0e <nrfx_usbd_ep_enable+0x3e>
   20e62:	bf00      	nop
   20e64:	0002c876 	.word	0x0002c876
   20e68:	0002c86d 	.word	0x0002c86d
   20e6c:	40027000 	.word	0x40027000
   20e70:	20003ba0 	.word	0x20003ba0

00020e74 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   20e74:	0603      	lsls	r3, r0, #24
{
   20e76:	b510      	push	{r4, lr}
   20e78:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   20e7a:	d405      	bmi.n	20e88 <nrfx_usbd_ep_stall_clear+0x14>
   20e7c:	f7ff fd40 	bl	20900 <nrfx_usbd_ep_stall_check>
   20e80:	b110      	cbz	r0, 20e88 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   20e82:	4620      	mov	r0, r4
   20e84:	f7ff fdce 	bl	20a24 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   20e88:	4b01      	ldr	r3, [pc, #4]	; (20e90 <nrfx_usbd_ep_stall_clear+0x1c>)
   20e8a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   20e8e:	bd10      	pop	{r4, pc}
   20e90:	40027000 	.word	0x40027000

00020e94 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20e94:	4b0e      	ldr	r3, [pc, #56]	; (20ed0 <z_sys_init_run_level+0x3c>)
{
   20e96:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20e98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20e9c:	3001      	adds	r0, #1
   20e9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20ea2:	42a6      	cmp	r6, r4
   20ea4:	d800      	bhi.n	20ea8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   20ea6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20ea8:	e9d4 3500 	ldrd	r3, r5, [r4]
   20eac:	4628      	mov	r0, r5
   20eae:	4798      	blx	r3
		if (dev != NULL) {
   20eb0:	b165      	cbz	r5, 20ecc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   20eb2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   20eb4:	b130      	cbz	r0, 20ec4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   20eb6:	2800      	cmp	r0, #0
   20eb8:	bfb8      	it	lt
   20eba:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20ebc:	28ff      	cmp	r0, #255	; 0xff
   20ebe:	bfa8      	it	ge
   20ec0:	20ff      	movge	r0, #255	; 0xff
   20ec2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20ec4:	785a      	ldrb	r2, [r3, #1]
   20ec6:	f042 0201 	orr.w	r2, r2, #1
   20eca:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20ecc:	3408      	adds	r4, #8
   20ece:	e7e8      	b.n	20ea2 <z_sys_init_run_level+0xe>
   20ed0:	0002a2b8 	.word	0x0002a2b8

00020ed4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   20ed4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   20ed6:	4605      	mov	r5, r0
   20ed8:	b910      	cbnz	r0, 20ee0 <z_impl_device_get_binding+0xc>
		return NULL;
   20eda:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   20edc:	4620      	mov	r0, r4
   20ede:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   20ee0:	7803      	ldrb	r3, [r0, #0]
   20ee2:	2b00      	cmp	r3, #0
   20ee4:	d0f9      	beq.n	20eda <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   20ee6:	4c0e      	ldr	r4, [pc, #56]	; (20f20 <z_impl_device_get_binding+0x4c>)
   20ee8:	4e0e      	ldr	r6, [pc, #56]	; (20f24 <z_impl_device_get_binding+0x50>)
   20eea:	42b4      	cmp	r4, r6
   20eec:	d108      	bne.n	20f00 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   20eee:	4c0c      	ldr	r4, [pc, #48]	; (20f20 <z_impl_device_get_binding+0x4c>)
   20ef0:	42b4      	cmp	r4, r6
   20ef2:	d0f2      	beq.n	20eda <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20ef4:	4620      	mov	r0, r4
   20ef6:	f006 fd9f 	bl	27a38 <z_device_is_ready>
   20efa:	b950      	cbnz	r0, 20f12 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   20efc:	3418      	adds	r4, #24
   20efe:	e7f7      	b.n	20ef0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   20f00:	4620      	mov	r0, r4
   20f02:	f006 fd99 	bl	27a38 <z_device_is_ready>
   20f06:	b110      	cbz	r0, 20f0e <z_impl_device_get_binding+0x3a>
   20f08:	6823      	ldr	r3, [r4, #0]
   20f0a:	42ab      	cmp	r3, r5
   20f0c:	d0e6      	beq.n	20edc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   20f0e:	3418      	adds	r4, #24
   20f10:	e7eb      	b.n	20eea <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20f12:	6821      	ldr	r1, [r4, #0]
   20f14:	4628      	mov	r0, r5
   20f16:	f003 fd25 	bl	24964 <strcmp>
   20f1a:	2800      	cmp	r0, #0
   20f1c:	d1ee      	bne.n	20efc <z_impl_device_get_binding+0x28>
   20f1e:	e7dd      	b.n	20edc <z_impl_device_get_binding+0x8>
   20f20:	00028608 	.word	0x00028608
   20f24:	000286b0 	.word	0x000286b0

00020f28 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   20f28:	b510      	push	{r4, lr}
   20f2a:	4604      	mov	r4, r0
   20f2c:	b088      	sub	sp, #32
	z_impl_log_panic();
   20f2e:	f7e5 f8a3 	bl	6078 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   20f32:	4b07      	ldr	r3, [pc, #28]	; (20f50 <k_sys_fatal_error_handler+0x28>)
   20f34:	9306      	str	r3, [sp, #24]
   20f36:	2302      	movs	r3, #2
   20f38:	9301      	str	r3, [sp, #4]
   20f3a:	9305      	str	r3, [sp, #20]
   20f3c:	4805      	ldr	r0, [pc, #20]	; (20f54 <k_sys_fatal_error_handler+0x2c>)
   20f3e:	2300      	movs	r3, #0
   20f40:	aa05      	add	r2, sp, #20
   20f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20f46:	f002 fa96 	bl	23476 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   20f4a:	4620      	mov	r0, r4
   20f4c:	f006 fd8d 	bl	27a6a <arch_system_halt>
   20f50:	0002c87f 	.word	0x0002c87f
   20f54:	000289e0 	.word	0x000289e0

00020f58 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f5c:	4605      	mov	r5, r0
   20f5e:	b08e      	sub	sp, #56	; 0x38
   20f60:	460e      	mov	r6, r1
	__asm__ volatile(
   20f62:	f04f 0320 	mov.w	r3, #32
   20f66:	f3ef 8811 	mrs	r8, BASEPRI
   20f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f6e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20f72:	f001 f83f 	bl	21ff4 <z_impl_z_current_get>
   20f76:	2d04      	cmp	r5, #4
   20f78:	bf96      	itet	ls
   20f7a:	4b22      	ldrls	r3, [pc, #136]	; (21004 <z_fatal_error+0xac>)
   20f7c:	4b22      	ldrhi	r3, [pc, #136]	; (21008 <z_fatal_error+0xb0>)
   20f7e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20f82:	4922      	ldr	r1, [pc, #136]	; (2100c <z_fatal_error+0xb4>)
   20f84:	9502      	str	r5, [sp, #8]
   20f86:	2700      	movs	r7, #0
   20f88:	e9cd 3703 	strd	r3, r7, [sp, #12]
   20f8c:	4b20      	ldr	r3, [pc, #128]	; (21010 <z_fatal_error+0xb8>)
   20f8e:	4604      	mov	r4, r0
   20f90:	e9cd 7300 	strd	r7, r3, [sp]
   20f94:	2201      	movs	r2, #1
   20f96:	463b      	mov	r3, r7
   20f98:	4638      	mov	r0, r7
   20f9a:	f006 fd57 	bl	27a4c <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20f9e:	b17e      	cbz	r6, 20fc0 <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20fa0:	69f3      	ldr	r3, [r6, #28]
   20fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20fa6:	b15b      	cbz	r3, 20fc0 <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
   20fa8:	4b1a      	ldr	r3, [pc, #104]	; (21014 <z_fatal_error+0xbc>)
   20faa:	930c      	str	r3, [sp, #48]	; 0x30
   20fac:	2302      	movs	r3, #2
   20fae:	9307      	str	r3, [sp, #28]
   20fb0:	930b      	str	r3, [sp, #44]	; 0x2c
   20fb2:	4816      	ldr	r0, [pc, #88]	; (2100c <z_fatal_error+0xb4>)
   20fb4:	463b      	mov	r3, r7
   20fb6:	aa0b      	add	r2, sp, #44	; 0x2c
   20fb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20fbc:	f002 fa5b 	bl	23476 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20fc0:	b12c      	cbz	r4, 20fce <z_fatal_error+0x76>
   20fc2:	4620      	mov	r0, r4
   20fc4:	f006 fdf2 	bl	27bac <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20fc8:	b108      	cbz	r0, 20fce <z_fatal_error+0x76>
   20fca:	7803      	ldrb	r3, [r0, #0]
   20fcc:	b903      	cbnz	r3, 20fd0 <z_fatal_error+0x78>
		thread_name = "unknown";
   20fce:	4812      	ldr	r0, [pc, #72]	; (21018 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20fd0:	4b12      	ldr	r3, [pc, #72]	; (2101c <z_fatal_error+0xc4>)
   20fd2:	9301      	str	r3, [sp, #4]
   20fd4:	2300      	movs	r3, #0
   20fd6:	e9cd 4002 	strd	r4, r0, [sp, #8]
   20fda:	9300      	str	r3, [sp, #0]
   20fdc:	4618      	mov	r0, r3
   20fde:	2201      	movs	r2, #1
   20fe0:	490a      	ldr	r1, [pc, #40]	; (2100c <z_fatal_error+0xb4>)
   20fe2:	f006 fd33 	bl	27a4c <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20fe6:	4631      	mov	r1, r6
   20fe8:	4628      	mov	r0, r5
   20fea:	f7ff ff9d 	bl	20f28 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20fee:	f388 8811 	msr	BASEPRI, r8
   20ff2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20ff6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20ff8:	b00e      	add	sp, #56	; 0x38
   20ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20ffe:	f7e7 bd7d 	b.w	8afc <z_impl_k_thread_abort>
   21002:	bf00      	nop
   21004:	0002a2d0 	.word	0x0002a2d0
   21008:	0002c88e 	.word	0x0002c88e
   2100c:	000289e0 	.word	0x000289e0
   21010:	0002c8a4 	.word	0x0002c8a4
   21014:	0002c8cc 	.word	0x0002c8cc
   21018:	0002c89c 	.word	0x0002c89c
   2101c:	0002c8ed 	.word	0x0002c8ed

00021020 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   21020:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   21022:	2300      	movs	r3, #0
{
   21024:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   21026:	2201      	movs	r2, #1
   21028:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2102c:	220f      	movs	r2, #15
   2102e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   21032:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   21034:	4c0c      	ldr	r4, [pc, #48]	; (21068 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21036:	4b0d      	ldr	r3, [pc, #52]	; (2106c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   21038:	490d      	ldr	r1, [pc, #52]	; (21070 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2103a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   2103c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21040:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   21044:	f44f 75b0 	mov.w	r5, #352	; 0x160
   21048:	9300      	str	r3, [sp, #0]
   2104a:	fb05 1100 	mla	r1, r5, r0, r1
   2104e:	4b09      	ldr	r3, [pc, #36]	; (21074 <init_idle_thread+0x54>)
   21050:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21054:	4620      	mov	r0, r4
   21056:	f000 f90b 	bl	21270 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2105a:	7b63      	ldrb	r3, [r4, #13]
   2105c:	f023 0304 	bic.w	r3, r3, #4
   21060:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21062:	b007      	add	sp, #28
   21064:	bd30      	pop	{r4, r5, pc}
   21066:	bf00      	nop
   21068:	20001c50 	.word	0x20001c50
   2106c:	20003d78 	.word	0x20003d78
   21070:	20006c20 	.word	0x20006c20
   21074:	000213e5 	.word	0x000213e5

00021078 <bg_thread_main>:
{
   21078:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2107a:	4b0a      	ldr	r3, [pc, #40]	; (210a4 <bg_thread_main+0x2c>)
   2107c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2107e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21080:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21082:	f7ff ff07 	bl	20e94 <z_sys_init_run_level>
	boot_banner();
   21086:	f001 fabd 	bl	22604 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2108a:	2003      	movs	r0, #3
   2108c:	f7ff ff02 	bl	20e94 <z_sys_init_run_level>
	z_init_static_threads();
   21090:	f000 f94c 	bl	2132c <z_init_static_threads>
	main();
   21094:	f001 fac3 	bl	2261e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21098:	4a03      	ldr	r2, [pc, #12]	; (210a8 <bg_thread_main+0x30>)
   2109a:	7b13      	ldrb	r3, [r2, #12]
   2109c:	f023 0301 	bic.w	r3, r3, #1
   210a0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   210a2:	bd08      	pop	{r3, pc}
   210a4:	20003f73 	.word	0x20003f73
   210a8:	20001cd0 	.word	0x20001cd0

000210ac <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   210ac:	4802      	ldr	r0, [pc, #8]	; (210b8 <z_bss_zero+0xc>)
   210ae:	4a03      	ldr	r2, [pc, #12]	; (210bc <z_bss_zero+0x10>)
   210b0:	2100      	movs	r1, #0
   210b2:	1a12      	subs	r2, r2, r0
   210b4:	f003 bc7e 	b.w	249b4 <memset>
   210b8:	20000c50 	.word	0x20000c50
   210bc:	20003f74 	.word	0x20003f74

000210c0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   210c0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   210c2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2118c <z_cstart+0xcc>
   210c6:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   210c8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   210cc:	4d30      	ldr	r5, [pc, #192]	; (21190 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   210ce:	4e31      	ldr	r6, [pc, #196]	; (21194 <z_cstart+0xd4>)
   210d0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   210d2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 21198 <z_cstart+0xd8>
   210d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   210da:	2400      	movs	r4, #0
   210dc:	616b      	str	r3, [r5, #20]
   210de:	23e0      	movs	r3, #224	; 0xe0
   210e0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   210e4:	77ec      	strb	r4, [r5, #31]
   210e6:	762c      	strb	r4, [r5, #24]
   210e8:	766c      	strb	r4, [r5, #25]
   210ea:	76ac      	strb	r4, [r5, #26]
   210ec:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   210f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   210f2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   210f6:	626b      	str	r3, [r5, #36]	; 0x24
   210f8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   210fc:	f7e7 fcc8 	bl	8a90 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21100:	f7e7 f832 	bl	8168 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21108:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2110a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2110c:	f7e7 fdb8 	bl	8c80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21110:	f7e7 fd06 	bl	8b20 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   21114:	f7e4 feba 	bl	5e8c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   21118:	f240 1301 	movw	r3, #257	; 0x101
   2111c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21120:	ab06      	add	r3, sp, #24
   21122:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21124:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   21128:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2112a:	f006 fc84 	bl	27a36 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2112e:	4620      	mov	r0, r4
   21130:	f7ff feb0 	bl	20e94 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21134:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21136:	4d19      	ldr	r5, [pc, #100]	; (2119c <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21138:	f7ff feac 	bl	20e94 <z_sys_init_run_level>
	z_sched_init();
   2113c:	f000 feac 	bl	21e98 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21140:	4b17      	ldr	r3, [pc, #92]	; (211a0 <z_cstart+0xe0>)
   21142:	9305      	str	r3, [sp, #20]
   21144:	2301      	movs	r3, #1
   21146:	4917      	ldr	r1, [pc, #92]	; (211a4 <z_cstart+0xe4>)
   21148:	9400      	str	r4, [sp, #0]
   2114a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2114e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21152:	464b      	mov	r3, r9
   21154:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21158:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2115a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2115c:	f000 f888 	bl	21270 <z_setup_new_thread>
   21160:	7b6a      	ldrb	r2, [r5, #13]
   21162:	4607      	mov	r7, r0
   21164:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   21168:	4628      	mov	r0, r5
   2116a:	736a      	strb	r2, [r5, #13]
   2116c:	f006 ff52 	bl	28014 <z_ready_thread>
		init_idle_thread(i);
   21170:	4620      	mov	r0, r4
   21172:	f7ff ff55 	bl	21020 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   21176:	4b0c      	ldr	r3, [pc, #48]	; (211a8 <z_cstart+0xe8>)
   21178:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2117a:	464a      	mov	r2, r9
   2117c:	4639      	mov	r1, r7
   2117e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   21180:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   21182:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21186:	f7e7 f979 	bl	847c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2118a:	bf00      	nop
   2118c:	200075a0 	.word	0x200075a0
   21190:	e000ed00 	.word	0xe000ed00
   21194:	20003d78 	.word	0x20003d78
   21198:	00021079 	.word	0x00021079
   2119c:	20001cd0 	.word	0x20001cd0
   211a0:	0002c94f 	.word	0x0002c94f
   211a4:	20006800 	.word	0x20006800
   211a8:	20001c50 	.word	0x20001c50

000211ac <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   211ac:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   211ae:	4c06      	ldr	r4, [pc, #24]	; (211c8 <statics_init+0x1c>)
   211b0:	4d06      	ldr	r5, [pc, #24]	; (211cc <statics_init+0x20>)
   211b2:	42ac      	cmp	r4, r5
   211b4:	d301      	bcc.n	211ba <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   211b6:	2000      	movs	r0, #0
   211b8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   211ba:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   211be:	4620      	mov	r0, r4
   211c0:	f006 fc5c 	bl	27a7c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   211c4:	3414      	adds	r4, #20
   211c6:	e7f4      	b.n	211b2 <statics_init+0x6>
   211c8:	200009c0 	.word	0x200009c0
   211cc:	200009c0 	.word	0x200009c0

000211d0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   211d0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   211d2:	4b0e      	ldr	r3, [pc, #56]	; (2120c <init_mem_slab_module+0x3c>)
   211d4:	4c0e      	ldr	r4, [pc, #56]	; (21210 <init_mem_slab_module+0x40>)
   211d6:	42a3      	cmp	r3, r4
   211d8:	d301      	bcc.n	211de <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   211da:	2000      	movs	r0, #0
	return rc;
}
   211dc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   211de:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   211e2:	ea41 0200 	orr.w	r2, r1, r0
   211e6:	f012 0203 	ands.w	r2, r2, #3
   211ea:	d10b      	bne.n	21204 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   211ec:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   211ee:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   211f0:	42aa      	cmp	r2, r5
   211f2:	d101      	bne.n	211f8 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   211f4:	331c      	adds	r3, #28
   211f6:	e7ee      	b.n	211d6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   211f8:	695e      	ldr	r6, [r3, #20]
   211fa:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   211fc:	3201      	adds	r2, #1
		slab->free_list = p;
   211fe:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   21200:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   21202:	e7f5      	b.n	211f0 <init_mem_slab_module+0x20>
	return rc;
   21204:	f06f 0015 	mvn.w	r0, #21
   21208:	e7e8      	b.n	211dc <init_mem_slab_module+0xc>
   2120a:	bf00      	nop
   2120c:	20000950 	.word	0x20000950
   21210:	200009c0 	.word	0x200009c0

00021214 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21214:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21216:	460c      	mov	r4, r1
	__asm__ volatile(
   21218:	f04f 0520 	mov.w	r5, #32
   2121c:	f3ef 8111 	mrs	r1, BASEPRI
   21220:	f385 8812 	msr	BASEPRI_MAX, r5
   21224:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21228:	6945      	ldr	r5, [r0, #20]
   2122a:	b15d      	cbz	r5, 21244 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2122c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2122e:	682b      	ldr	r3, [r5, #0]
   21230:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21232:	6983      	ldr	r3, [r0, #24]
   21234:	3301      	adds	r3, #1
   21236:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21238:	2000      	movs	r0, #0
	__asm__ volatile(
   2123a:	f381 8811 	msr	BASEPRI, r1
   2123e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21242:	e011      	b.n	21268 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21244:	ea52 0c03 	orrs.w	ip, r2, r3
   21248:	d103      	bne.n	21252 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2124a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2124c:	f06f 000b 	mvn.w	r0, #11
   21250:	e7f3      	b.n	2123a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21252:	e9cd 2300 	strd	r2, r3, [sp]
   21256:	4602      	mov	r2, r0
   21258:	3008      	adds	r0, #8
   2125a:	f000 fd73 	bl	21d44 <z_pend_curr>
		if (result == 0) {
   2125e:	b918      	cbnz	r0, 21268 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   21260:	4b02      	ldr	r3, [pc, #8]	; (2126c <k_mem_slab_alloc+0x58>)
   21262:	689b      	ldr	r3, [r3, #8]
   21264:	695b      	ldr	r3, [r3, #20]
   21266:	6023      	str	r3, [r4, #0]
}
   21268:	b003      	add	sp, #12
   2126a:	bd30      	pop	{r4, r5, pc}
   2126c:	20003d78 	.word	0x20003d78

00021270 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21270:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   21274:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   21276:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21278:	2604      	movs	r6, #4
   2127a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   2127c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2127e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21280:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   21284:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21286:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   21288:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2128c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2128e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21290:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   21294:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21296:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2129a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   2129e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   212a0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   212a2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   212a4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   212a8:	9202      	str	r2, [sp, #8]
   212aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   212ac:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   212ae:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   212b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   212b2:	9200      	str	r2, [sp, #0]
   212b4:	4642      	mov	r2, r8
{
   212b6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   212b8:	f7e7 f8ae 	bl	8418 <arch_new_thread>
	if (!_current) {
   212bc:	4b04      	ldr	r3, [pc, #16]	; (212d0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   212be:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   212c0:	689b      	ldr	r3, [r3, #8]
   212c2:	b103      	cbz	r3, 212c6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   212c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   212c6:	6763      	str	r3, [r4, #116]	; 0x74
}
   212c8:	4640      	mov	r0, r8
   212ca:	b004      	add	sp, #16
   212cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212d0:	20003d78 	.word	0x20003d78

000212d4 <z_impl_k_thread_create>:
{
   212d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   212d6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   212d8:	2700      	movs	r7, #0
   212da:	9705      	str	r7, [sp, #20]
   212dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
   212de:	9704      	str	r7, [sp, #16]
   212e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   212e2:	9703      	str	r7, [sp, #12]
   212e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   212e6:	9702      	str	r7, [sp, #8]
{
   212e8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   212ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   212ee:	9701      	str	r7, [sp, #4]
   212f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   212f2:	9700      	str	r7, [sp, #0]
{
   212f4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   212f6:	f7ff ffbb 	bl	21270 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   212fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   212fe:	bf08      	it	eq
   21300:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   21304:	d005      	beq.n	21312 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21306:	ea55 0306 	orrs.w	r3, r5, r6
   2130a:	d105      	bne.n	21318 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2130c:	4620      	mov	r0, r4
   2130e:	f000 fcbd 	bl	21c8c <z_sched_start>
}
   21312:	4620      	mov	r0, r4
   21314:	b007      	add	sp, #28
   21316:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21318:	4903      	ldr	r1, [pc, #12]	; (21328 <z_impl_k_thread_create+0x54>)
   2131a:	4632      	mov	r2, r6
   2131c:	462b      	mov	r3, r5
   2131e:	f104 0018 	add.w	r0, r4, #24
   21322:	f000 ff45 	bl	221b0 <z_add_timeout>
   21326:	e7f4      	b.n	21312 <z_impl_k_thread_create+0x3e>
   21328:	00028035 	.word	0x00028035

0002132c <z_init_static_threads>:
{
   2132c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21330:	4c29      	ldr	r4, [pc, #164]	; (213d8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   21332:	4d2a      	ldr	r5, [pc, #168]	; (213dc <z_init_static_threads+0xb0>)
{
   21334:	b087      	sub	sp, #28
   21336:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   21338:	42ae      	cmp	r6, r5
   2133a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2133e:	d30f      	bcc.n	21360 <z_init_static_threads+0x34>
	k_sched_lock();
   21340:	f000 fbc0 	bl	21ac4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21344:	4c24      	ldr	r4, [pc, #144]	; (213d8 <z_init_static_threads+0xac>)
   21346:	f8df 9098 	ldr.w	r9, [pc, #152]	; 213e0 <z_init_static_threads+0xb4>
   2134a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2134e:	f240 37e7 	movw	r7, #999	; 0x3e7
   21352:	42ac      	cmp	r4, r5
   21354:	d320      	bcc.n	21398 <z_init_static_threads+0x6c>
}
   21356:	b007      	add	sp, #28
   21358:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2135c:	f000 bd80 	b.w	21e60 <k_sched_unlock>
		z_setup_new_thread(
   21360:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21364:	9305      	str	r3, [sp, #20]
   21366:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2136a:	9304      	str	r3, [sp, #16]
   2136c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21370:	9303      	str	r3, [sp, #12]
   21372:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21376:	9302      	str	r3, [sp, #8]
   21378:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2137c:	9301      	str	r3, [sp, #4]
   2137e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21382:	9300      	str	r3, [sp, #0]
   21384:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21388:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2138c:	f7ff ff70 	bl	21270 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21390:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21394:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   21396:	e7ce      	b.n	21336 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21398:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2139a:	1c5a      	adds	r2, r3, #1
   2139c:	d00d      	beq.n	213ba <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2139e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   213a2:	2100      	movs	r1, #0
   213a4:	4638      	mov	r0, r7
   213a6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   213aa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   213ae:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   213b2:	d104      	bne.n	213be <z_init_static_threads+0x92>
	z_sched_start(thread);
   213b4:	4640      	mov	r0, r8
   213b6:	f000 fc69 	bl	21c8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   213ba:	3430      	adds	r4, #48	; 0x30
   213bc:	e7c9      	b.n	21352 <z_init_static_threads+0x26>
   213be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   213c2:	2300      	movs	r3, #0
   213c4:	f7df fe9c 	bl	1100 <__aeabi_uldivmod>
   213c8:	4602      	mov	r2, r0
   213ca:	460b      	mov	r3, r1
   213cc:	f108 0018 	add.w	r0, r8, #24
   213d0:	4649      	mov	r1, r9
   213d2:	f000 feed 	bl	221b0 <z_add_timeout>
   213d6:	e7f0      	b.n	213ba <z_init_static_threads+0x8e>
   213d8:	200008c0 	.word	0x200008c0
   213dc:	20000950 	.word	0x20000950
   213e0:	00028035 	.word	0x00028035

000213e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   213e4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   213e6:	4c0b      	ldr	r4, [pc, #44]	; (21414 <idle+0x30>)
	return !z_sys_post_kernel;
   213e8:	4d0b      	ldr	r5, [pc, #44]	; (21418 <idle+0x34>)
	__asm__ volatile(
   213ea:	f04f 0220 	mov.w	r2, #32
   213ee:	f3ef 8311 	mrs	r3, BASEPRI
   213f2:	f382 8812 	msr	BASEPRI_MAX, r2
   213f6:	f3bf 8f6f 	isb	sy
   213fa:	f006 fed7 	bl	281ac <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   213fe:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   21400:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   21402:	b913      	cbnz	r3, 2140a <idle+0x26>
	arch_cpu_idle();
   21404:	f7e6 feb6 	bl	8174 <arch_cpu_idle>
}
   21408:	e7ef      	b.n	213ea <idle+0x6>
   2140a:	f7e6 fcad 	bl	7d68 <pm_system_suspend>
   2140e:	2800      	cmp	r0, #0
   21410:	d1eb      	bne.n	213ea <idle+0x6>
   21412:	e7f7      	b.n	21404 <idle+0x20>
   21414:	20003d78 	.word	0x20003d78
   21418:	20003f73 	.word	0x20003f73

0002141c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2141c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21420:	4604      	mov	r4, r0
   21422:	4617      	mov	r7, r2
   21424:	461e      	mov	r6, r3
   21426:	f04f 0320 	mov.w	r3, #32
   2142a:	f3ef 8811 	mrs	r8, BASEPRI
   2142e:	f383 8812 	msr	BASEPRI_MAX, r3
   21432:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21436:	68c3      	ldr	r3, [r0, #12]
   21438:	4a32      	ldr	r2, [pc, #200]	; (21504 <z_impl_k_mutex_lock+0xe8>)
   2143a:	b16b      	cbz	r3, 21458 <z_impl_k_mutex_lock+0x3c>
   2143c:	6880      	ldr	r0, [r0, #8]
   2143e:	6891      	ldr	r1, [r2, #8]
   21440:	4288      	cmp	r0, r1
   21442:	d019      	beq.n	21478 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21444:	ea57 0306 	orrs.w	r3, r7, r6
   21448:	d118      	bne.n	2147c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2144a:	f388 8811 	msr	BASEPRI, r8
   2144e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21452:	f06f 000f 	mvn.w	r0, #15
   21456:	e00c      	b.n	21472 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   21458:	6891      	ldr	r1, [r2, #8]
   2145a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2145e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21460:	3301      	adds	r3, #1
   21462:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21464:	6893      	ldr	r3, [r2, #8]
   21466:	60a3      	str	r3, [r4, #8]
   21468:	f388 8811 	msr	BASEPRI, r8
   2146c:	f3bf 8f6f 	isb	sy
		return 0;
   21470:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21472:	b002      	add	sp, #8
   21474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   21478:	6921      	ldr	r1, [r4, #16]
   2147a:	e7f0      	b.n	2145e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2147c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   21480:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   21484:	4299      	cmp	r1, r3
   21486:	bfa8      	it	ge
   21488:	4619      	movge	r1, r3
   2148a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2148e:	4291      	cmp	r1, r2
   21490:	bfb8      	it	lt
   21492:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   21494:	428b      	cmp	r3, r1
   21496:	dd2e      	ble.n	214f6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   21498:	f006 fb93 	bl	27bc2 <adjust_owner_prio.isra.0>
   2149c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2149e:	e9cd 7600 	strd	r7, r6, [sp]
   214a2:	4819      	ldr	r0, [pc, #100]	; (21508 <z_impl_k_mutex_lock+0xec>)
   214a4:	4622      	mov	r2, r4
   214a6:	4641      	mov	r1, r8
   214a8:	f000 fc4c 	bl	21d44 <z_pend_curr>
	if (got_mutex == 0) {
   214ac:	2800      	cmp	r0, #0
   214ae:	d0e0      	beq.n	21472 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   214b0:	f04f 0320 	mov.w	r3, #32
   214b4:	f3ef 8611 	mrs	r6, BASEPRI
   214b8:	f383 8812 	msr	BASEPRI_MAX, r3
   214bc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   214c0:	6823      	ldr	r3, [r4, #0]
   214c2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214c4:	429c      	cmp	r4, r3
   214c6:	d00a      	beq.n	214de <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   214c8:	b14b      	cbz	r3, 214de <z_impl_k_mutex_lock+0xc2>
   214ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
   214ce:	4299      	cmp	r1, r3
   214d0:	bfa8      	it	ge
   214d2:	4619      	movge	r1, r3
   214d4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   214d8:	4299      	cmp	r1, r3
   214da:	bfb8      	it	lt
   214dc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   214de:	68a0      	ldr	r0, [r4, #8]
   214e0:	f006 fb6f 	bl	27bc2 <adjust_owner_prio.isra.0>
   214e4:	b900      	cbnz	r0, 214e8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   214e6:	b145      	cbz	r5, 214fa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   214e8:	4807      	ldr	r0, [pc, #28]	; (21508 <z_impl_k_mutex_lock+0xec>)
   214ea:	4631      	mov	r1, r6
   214ec:	f000 fad8 	bl	21aa0 <z_reschedule>
	return -EAGAIN;
   214f0:	f06f 000a 	mvn.w	r0, #10
   214f4:	e7bd      	b.n	21472 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   214f6:	2500      	movs	r5, #0
   214f8:	e7d1      	b.n	2149e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   214fa:	f386 8811 	msr	BASEPRI, r6
   214fe:	f3bf 8f6f 	isb	sy
   21502:	e7f5      	b.n	214f0 <z_impl_k_mutex_lock+0xd4>
   21504:	20003d78 	.word	0x20003d78
   21508:	20003f74 	.word	0x20003f74

0002150c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2150c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2150e:	6883      	ldr	r3, [r0, #8]
{
   21510:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   21512:	2b00      	cmp	r3, #0
   21514:	d032      	beq.n	2157c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21516:	4a1c      	ldr	r2, [pc, #112]	; (21588 <z_impl_k_mutex_unlock+0x7c>)
   21518:	6892      	ldr	r2, [r2, #8]
   2151a:	4293      	cmp	r3, r2
   2151c:	d131      	bne.n	21582 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   2151e:	7bda      	ldrb	r2, [r3, #15]
   21520:	3a01      	subs	r2, #1
   21522:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21524:	68c3      	ldr	r3, [r0, #12]
   21526:	2b01      	cmp	r3, #1
   21528:	d905      	bls.n	21536 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   2152a:	3b01      	subs	r3, #1
   2152c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2152e:	f000 fc97 	bl	21e60 <k_sched_unlock>

	return 0;
   21532:	2000      	movs	r0, #0
}
   21534:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   21536:	f04f 0320 	mov.w	r3, #32
   2153a:	f3ef 8511 	mrs	r5, BASEPRI
   2153e:	f383 8812 	msr	BASEPRI_MAX, r3
   21542:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21546:	6901      	ldr	r1, [r0, #16]
   21548:	6880      	ldr	r0, [r0, #8]
   2154a:	f006 fb3a 	bl	27bc2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2154e:	4620      	mov	r0, r4
   21550:	f006 fdd1 	bl	280f6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   21554:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21556:	b158      	cbz	r0, 21570 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   21558:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2155c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2155e:	2200      	movs	r2, #0
   21560:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21562:	f006 fd57 	bl	28014 <z_ready_thread>
		z_reschedule(&lock, key);
   21566:	4809      	ldr	r0, [pc, #36]	; (2158c <z_impl_k_mutex_unlock+0x80>)
   21568:	4629      	mov	r1, r5
   2156a:	f000 fa99 	bl	21aa0 <z_reschedule>
   2156e:	e7de      	b.n	2152e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   21570:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   21572:	f385 8811 	msr	BASEPRI, r5
   21576:	f3bf 8f6f 	isb	sy
   2157a:	e7d8      	b.n	2152e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2157c:	f06f 0015 	mvn.w	r0, #21
   21580:	e7d8      	b.n	21534 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   21582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21586:	e7d5      	b.n	21534 <z_impl_k_mutex_unlock+0x28>
   21588:	20003d78 	.word	0x20003d78
   2158c:	20003f74 	.word	0x20003f74

00021590 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21592:	4611      	mov	r1, r2
	__asm__ volatile(
   21594:	f04f 0220 	mov.w	r2, #32
   21598:	f3ef 8511 	mrs	r5, BASEPRI
   2159c:	f382 8812 	msr	BASEPRI_MAX, r2
   215a0:	f3bf 8f6f 	isb	sy
   215a4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   215a6:	b19c      	cbz	r4, 215d0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   215a8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   215aa:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   215ac:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   215b0:	4294      	cmp	r4, r2
	list->head = node;
   215b2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   215b4:	bf08      	it	eq
   215b6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   215b8:	2101      	movs	r1, #1
   215ba:	4620      	mov	r0, r4
   215bc:	f006 fb74 	bl	27ca8 <z_queue_node_peek>
   215c0:	4604      	mov	r4, r0
	__asm__ volatile(
   215c2:	f385 8811 	msr	BASEPRI, r5
   215c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   215ca:	4620      	mov	r0, r4
   215cc:	b003      	add	sp, #12
   215ce:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   215d0:	ea51 0203 	orrs.w	r2, r1, r3
   215d4:	d0f5      	beq.n	215c2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   215d6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   215da:	e9cd 1300 	strd	r1, r3, [sp]
   215de:	4610      	mov	r0, r2
   215e0:	4629      	mov	r1, r5
   215e2:	f000 fbaf 	bl	21d44 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   215e6:	2800      	cmp	r0, #0
   215e8:	d1ef      	bne.n	215ca <z_impl_k_queue_get+0x3a>
   215ea:	4b02      	ldr	r3, [pc, #8]	; (215f4 <z_impl_k_queue_get+0x64>)
   215ec:	689b      	ldr	r3, [r3, #8]
   215ee:	695c      	ldr	r4, [r3, #20]
   215f0:	e7eb      	b.n	215ca <z_impl_k_queue_get+0x3a>
   215f2:	bf00      	nop
   215f4:	20003d78 	.word	0x20003d78

000215f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   215f8:	b538      	push	{r3, r4, r5, lr}
   215fa:	4604      	mov	r4, r0
	__asm__ volatile(
   215fc:	f04f 0320 	mov.w	r3, #32
   21600:	f3ef 8511 	mrs	r5, BASEPRI
   21604:	f383 8812 	msr	BASEPRI_MAX, r3
   21608:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2160c:	f006 fd73 	bl	280f6 <z_unpend_first_thread>

	if (thread != NULL) {
   21610:	b148      	cbz	r0, 21626 <z_impl_k_sem_give+0x2e>
   21612:	2200      	movs	r2, #0
   21614:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21616:	f006 fcfd 	bl	28014 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2161a:	4629      	mov	r1, r5
   2161c:	4808      	ldr	r0, [pc, #32]	; (21640 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2161e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21622:	f000 ba3d 	b.w	21aa0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21626:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2162a:	429a      	cmp	r2, r3
   2162c:	bf18      	it	ne
   2162e:	3301      	addne	r3, #1
   21630:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21632:	2102      	movs	r1, #2
   21634:	f104 0010 	add.w	r0, r4, #16
   21638:	f006 ff7e 	bl	28538 <z_handle_obj_poll_events>
}
   2163c:	e7ed      	b.n	2161a <z_impl_k_sem_give+0x22>
   2163e:	bf00      	nop
   21640:	20003f74 	.word	0x20003f74

00021644 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21644:	b513      	push	{r0, r1, r4, lr}
   21646:	f04f 0420 	mov.w	r4, #32
   2164a:	f3ef 8111 	mrs	r1, BASEPRI
   2164e:	f384 8812 	msr	BASEPRI_MAX, r4
   21652:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21656:	6884      	ldr	r4, [r0, #8]
   21658:	b144      	cbz	r4, 2166c <z_impl_k_sem_take+0x28>
		sem->count--;
   2165a:	3c01      	subs	r4, #1
   2165c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2165e:	f381 8811 	msr	BASEPRI, r1
   21662:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21666:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21668:	b002      	add	sp, #8
   2166a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2166c:	ea52 0403 	orrs.w	r4, r2, r3
   21670:	d106      	bne.n	21680 <z_impl_k_sem_take+0x3c>
   21672:	f381 8811 	msr	BASEPRI, r1
   21676:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2167a:	f06f 000f 	mvn.w	r0, #15
   2167e:	e7f3      	b.n	21668 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21680:	e9cd 2300 	strd	r2, r3, [sp]
   21684:	4602      	mov	r2, r0
   21686:	4802      	ldr	r0, [pc, #8]	; (21690 <z_impl_k_sem_take+0x4c>)
   21688:	f000 fb5c 	bl	21d44 <z_pend_curr>
	return ret;
   2168c:	e7ec      	b.n	21668 <z_impl_k_sem_take+0x24>
   2168e:	bf00      	nop
   21690:	20003f74 	.word	0x20003f74

00021694 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21696:	4b09      	ldr	r3, [pc, #36]	; (216bc <k_sys_work_q_init+0x28>)
   21698:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2169a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2169c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2169e:	9300      	str	r3, [sp, #0]
   216a0:	4907      	ldr	r1, [pc, #28]	; (216c0 <k_sys_work_q_init+0x2c>)
   216a2:	4808      	ldr	r0, [pc, #32]	; (216c4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   216a4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   216a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   216ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   216b0:	f000 f914 	bl	218dc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   216b4:	4620      	mov	r0, r4
   216b6:	b004      	add	sp, #16
   216b8:	bd10      	pop	{r4, pc}
   216ba:	bf00      	nop
   216bc:	0002c957 	.word	0x0002c957
   216c0:	200075a0 	.word	0x200075a0
   216c4:	20001d50 	.word	0x20001d50

000216c8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   216c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   216cc:	4e47      	ldr	r6, [pc, #284]	; (217ec <work_queue_main+0x124>)
   216ce:	b085      	sub	sp, #20
   216d0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   216d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   216d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   216da:	f04f 0320 	mov.w	r3, #32
   216de:	f3ef 8711 	mrs	r7, BASEPRI
   216e2:	f383 8812 	msr	BASEPRI_MAX, r3
   216e6:	f3bf 8f6f 	isb	sy
   216ea:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   216ee:	b98d      	cbnz	r5, 21714 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   216f0:	2102      	movs	r1, #2
   216f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   216f6:	f006 fb50 	bl	27d9a <flag_test_and_clear>
   216fa:	2800      	cmp	r0, #0
   216fc:	d135      	bne.n	2176a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   216fe:	2300      	movs	r3, #0
   21700:	e9cd 8900 	strd	r8, r9, [sp]
   21704:	9302      	str	r3, [sp, #8]
   21706:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2170a:	4639      	mov	r1, r7
   2170c:	4838      	ldr	r0, [pc, #224]	; (217f0 <work_queue_main+0x128>)
   2170e:	f000 fcd9 	bl	220c4 <z_sched_wait>
			continue;
   21712:	e7e2      	b.n	216da <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21714:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   21718:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2171a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2171e:	4295      	cmp	r5, r2
   21720:	d101      	bne.n	21726 <work_queue_main+0x5e>
	list->tail = node;
   21722:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   21726:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2172a:	f043 0302 	orr.w	r3, r3, #2
   2172e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   21732:	68eb      	ldr	r3, [r5, #12]
   21734:	f023 0304 	bic.w	r3, r3, #4
   21738:	f043 0301 	orr.w	r3, r3, #1
   2173c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2173e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   21740:	f387 8811 	msr	BASEPRI, r7
   21744:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   21748:	4628      	mov	r0, r5
   2174a:	4798      	blx	r3
	__asm__ volatile(
   2174c:	f04f 0320 	mov.w	r3, #32
   21750:	f3ef 8b11 	mrs	fp, BASEPRI
   21754:	f383 8812 	msr	BASEPRI_MAX, r3
   21758:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2175c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2175e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21760:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21764:	d40b      	bmi.n	2177e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   21766:	60ea      	str	r2, [r5, #12]
   21768:	e00e      	b.n	21788 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2176a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2176e:	2200      	movs	r2, #0
   21770:	2101      	movs	r1, #1
   21772:	4628      	mov	r0, r5
   21774:	f006 fce7 	bl	28146 <z_sched_wake>
   21778:	2800      	cmp	r0, #0
   2177a:	d1f8      	bne.n	2176e <work_queue_main+0xa6>
   2177c:	e7bf      	b.n	216fe <work_queue_main+0x36>
	return list->head;
   2177e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   21780:	f023 0303 	bic.w	r3, r3, #3
   21784:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21786:	b970      	cbnz	r0, 217a6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   21788:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2178c:	f023 0302 	bic.w	r3, r3, #2
   21790:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   21794:	f38b 8811 	msr	BASEPRI, fp
   21798:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2179c:	05d8      	lsls	r0, r3, #23
   2179e:	d49c      	bmi.n	216da <work_queue_main+0x12>
	z_impl_k_yield();
   217a0:	f000 fb86 	bl	21eb0 <z_impl_k_yield>
}
   217a4:	e799      	b.n	216da <work_queue_main+0x12>
	return node->next;
   217a6:	2700      	movs	r7, #0
   217a8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   217ac:	463b      	mov	r3, r7
		if (wc->work == work) {
   217ae:	6842      	ldr	r2, [r0, #4]
   217b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   217b2:	4601      	mov	r1, r0
		if (wc->work == work) {
   217b4:	d10c      	bne.n	217d0 <work_queue_main+0x108>
	return node->next;
   217b6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   217b8:	b997      	cbnz	r7, 217e0 <work_queue_main+0x118>
   217ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   217bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   217be:	4282      	cmp	r2, r0
   217c0:	d100      	bne.n	217c4 <work_queue_main+0xfc>
	list->tail = node;
   217c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   217c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   217c8:	f7ff ff16 	bl	215f8 <z_impl_k_sem_give>
}
   217cc:	4639      	mov	r1, r7
   217ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   217d0:	f1ba 0f00 	cmp.w	sl, #0
   217d4:	d0d8      	beq.n	21788 <work_queue_main+0xc0>
	return node->next;
   217d6:	4650      	mov	r0, sl
   217d8:	460f      	mov	r7, r1
   217da:	f8da a000 	ldr.w	sl, [sl]
   217de:	e7e6      	b.n	217ae <work_queue_main+0xe6>
	return list->tail;
   217e0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   217e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   217e4:	4290      	cmp	r0, r2
	list->tail = node;
   217e6:	bf08      	it	eq
   217e8:	6077      	streq	r7, [r6, #4]
}
   217ea:	e7eb      	b.n	217c4 <work_queue_main+0xfc>
   217ec:	20003da0 	.word	0x20003da0
   217f0:	20003f74 	.word	0x20003f74

000217f4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   217f4:	68c3      	ldr	r3, [r0, #12]
{
   217f6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   217f8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   217fc:	079b      	lsls	r3, r3, #30
{
   217fe:	4605      	mov	r5, r0
   21800:	460c      	mov	r4, r1
	if (ret) {
   21802:	d50d      	bpl.n	21820 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21804:	2201      	movs	r2, #1
   21806:	2100      	movs	r1, #0
   21808:	f104 0008 	add.w	r0, r4, #8
   2180c:	f006 fab5 	bl	27d7a <z_impl_k_sem_init>
	parent->next = child;
   21810:	2300      	movs	r3, #0
   21812:	6023      	str	r3, [r4, #0]
	return list->tail;
   21814:	4b05      	ldr	r3, [pc, #20]	; (2182c <cancel_sync_locked+0x38>)
	canceler->work = work;
   21816:	6065      	str	r5, [r4, #4]
   21818:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2181a:	b91a      	cbnz	r2, 21824 <cancel_sync_locked+0x30>
	list->head = node;
   2181c:	e9c3 4400 	strd	r4, r4, [r3]
}
   21820:	4630      	mov	r0, r6
   21822:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21824:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21826:	605c      	str	r4, [r3, #4]
}
   21828:	e7fa      	b.n	21820 <cancel_sync_locked+0x2c>
   2182a:	bf00      	nop
   2182c:	20003da0 	.word	0x20003da0

00021830 <submit_to_queue_locked>:
{
   21830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   21832:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21834:	079a      	lsls	r2, r3, #30
{
   21836:	4604      	mov	r4, r0
   21838:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2183a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2183e:	d41f      	bmi.n	21880 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21840:	075f      	lsls	r7, r3, #29
   21842:	d41f      	bmi.n	21884 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   21844:	680a      	ldr	r2, [r1, #0]
   21846:	b90a      	cbnz	r2, 2184c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21848:	6882      	ldr	r2, [r0, #8]
   2184a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2184c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2184e:	bf44      	itt	mi
   21850:	68a3      	ldrmi	r3, [r4, #8]
   21852:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   21854:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   21856:	bf4c      	ite	mi
   21858:	2502      	movmi	r5, #2
		ret = 1;
   2185a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2185c:	b37f      	cbz	r7, 218be <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2185e:	4b1b      	ldr	r3, [pc, #108]	; (218cc <submit_to_queue_locked+0x9c>)
   21860:	689b      	ldr	r3, [r3, #8]
   21862:	42bb      	cmp	r3, r7
   21864:	d111      	bne.n	2188a <submit_to_queue_locked+0x5a>
   21866:	f006 f998 	bl	27b9a <k_is_in_isr>
   2186a:	f080 0001 	eor.w	r0, r0, #1
   2186e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   21870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21874:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21876:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2187a:	d523      	bpl.n	218c4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2187c:	b13a      	cbz	r2, 2188e <submit_to_queue_locked+0x5e>
   2187e:	b940      	cbnz	r0, 21892 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   21880:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   21884:	2300      	movs	r3, #0
   21886:	6033      	str	r3, [r6, #0]
	return ret;
   21888:	e013      	b.n	218b2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2188a:	2000      	movs	r0, #0
   2188c:	e7f0      	b.n	21870 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2188e:	071b      	lsls	r3, r3, #28
   21890:	d4f6      	bmi.n	21880 <submit_to_queue_locked+0x50>
	parent->next = child;
   21892:	2300      	movs	r3, #0
   21894:	6023      	str	r3, [r4, #0]
	return list->tail;
   21896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2189a:	b963      	cbnz	r3, 218b6 <submit_to_queue_locked+0x86>
	list->head = node;
   2189c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   218a0:	4638      	mov	r0, r7
   218a2:	f006 fa93 	bl	27dcc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   218a6:	68e3      	ldr	r3, [r4, #12]
   218a8:	f043 0304 	orr.w	r3, r3, #4
   218ac:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   218ae:	6833      	ldr	r3, [r6, #0]
   218b0:	60a3      	str	r3, [r4, #8]
}
   218b2:	4628      	mov	r0, r5
   218b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   218b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   218b8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   218bc:	e7f0      	b.n	218a0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   218be:	f06f 0515 	mvn.w	r5, #21
   218c2:	e7df      	b.n	21884 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   218c4:	f06f 0512 	mvn.w	r5, #18
   218c8:	e7dc      	b.n	21884 <submit_to_queue_locked+0x54>
   218ca:	bf00      	nop
   218cc:	20003d78 	.word	0x20003d78

000218d0 <k_work_submit>:
{
   218d0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   218d2:	4801      	ldr	r0, [pc, #4]	; (218d8 <k_work_submit+0x8>)
   218d4:	f006 bada 	b.w	27e8c <k_work_submit_to_queue>
   218d8:	20001d50 	.word	0x20001d50

000218dc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   218dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   218de:	b089      	sub	sp, #36	; 0x24
   218e0:	4604      	mov	r4, r0
	list->head = NULL;
   218e2:	2000      	movs	r0, #0
	list->tail = NULL;
   218e4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   218e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   218ea:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   218ee:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   218f2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   218f6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   218fa:	b31d      	cbz	r5, 21944 <k_work_queue_start+0x68>
   218fc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   218fe:	2800      	cmp	r0, #0
   21900:	f240 1001 	movw	r0, #257	; 0x101
   21904:	bf08      	it	eq
   21906:	2001      	moveq	r0, #1
	*flagp = flags;
   21908:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2190c:	2000      	movs	r0, #0
   2190e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21912:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21916:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2191a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2191e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21922:	4b09      	ldr	r3, [pc, #36]	; (21948 <k_work_queue_start+0x6c>)
   21924:	9400      	str	r4, [sp, #0]
   21926:	4620      	mov	r0, r4
   21928:	f7ff fcd4 	bl	212d4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2192c:	b125      	cbz	r5, 21938 <k_work_queue_start+0x5c>
   2192e:	6829      	ldr	r1, [r5, #0]
   21930:	b111      	cbz	r1, 21938 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   21932:	4620      	mov	r0, r4
   21934:	f006 f937 	bl	27ba6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   21938:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2193a:	b009      	add	sp, #36	; 0x24
   2193c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21940:	f006 b936 	b.w	27bb0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21944:	2001      	movs	r0, #1
   21946:	e7df      	b.n	21908 <k_work_queue_start+0x2c>
   21948:	000216c9 	.word	0x000216c9

0002194c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2194c:	b513      	push	{r0, r1, r4, lr}
   2194e:	9001      	str	r0, [sp, #4]
   21950:	4608      	mov	r0, r1
	__asm__ volatile(
   21952:	f04f 0120 	mov.w	r1, #32
   21956:	f3ef 8411 	mrs	r4, BASEPRI
   2195a:	f381 8812 	msr	BASEPRI_MAX, r1
   2195e:	f3bf 8f6f 	isb	sy
	return *flagp;
   21962:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21964:	f011 0f0e 	tst.w	r1, #14
   21968:	d116      	bne.n	21998 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2196a:	ea53 0c02 	orrs.w	ip, r3, r2
   2196e:	d108      	bne.n	21982 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   21970:	a901      	add	r1, sp, #4
   21972:	f7ff ff5d 	bl	21830 <submit_to_queue_locked>
	__asm__ volatile(
   21976:	f384 8811 	msr	BASEPRI, r4
   2197a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2197e:	b002      	add	sp, #8
   21980:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   21982:	f041 0108 	orr.w	r1, r1, #8
   21986:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   21988:	9901      	ldr	r1, [sp, #4]
   2198a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2198c:	3010      	adds	r0, #16
   2198e:	4903      	ldr	r1, [pc, #12]	; (2199c <k_work_schedule_for_queue+0x50>)
   21990:	f000 fc0e 	bl	221b0 <z_add_timeout>
	return ret;
   21994:	2001      	movs	r0, #1
   21996:	e7ee      	b.n	21976 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   21998:	2000      	movs	r0, #0
   2199a:	e7ec      	b.n	21976 <k_work_schedule_for_queue+0x2a>
   2199c:	00027e3d 	.word	0x00027e3d

000219a0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   219a0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   219a2:	4801      	ldr	r0, [pc, #4]	; (219a8 <k_work_schedule+0x8>)
   219a4:	f7ff bfd2 	b.w	2194c <k_work_schedule_for_queue>
   219a8:	20001d50 	.word	0x20001d50

000219ac <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   219ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   219ae:	460c      	mov	r4, r1
   219b0:	9001      	str	r0, [sp, #4]
   219b2:	4616      	mov	r6, r2
   219b4:	461d      	mov	r5, r3
	__asm__ volatile(
   219b6:	f04f 0320 	mov.w	r3, #32
   219ba:	f3ef 8711 	mrs	r7, BASEPRI
   219be:	f383 8812 	msr	BASEPRI_MAX, r3
   219c2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   219c6:	4608      	mov	r0, r1
   219c8:	f006 f9f2 	bl	27db0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   219cc:	ea55 0306 	orrs.w	r3, r5, r6
   219d0:	d109      	bne.n	219e6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   219d2:	a901      	add	r1, sp, #4
   219d4:	4620      	mov	r0, r4
   219d6:	f7ff ff2b 	bl	21830 <submit_to_queue_locked>
	__asm__ volatile(
   219da:	f387 8811 	msr	BASEPRI, r7
   219de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   219e2:	b003      	add	sp, #12
   219e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   219e6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   219e8:	4906      	ldr	r1, [pc, #24]	; (21a04 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   219ea:	f043 0308 	orr.w	r3, r3, #8
   219ee:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   219f0:	9b01      	ldr	r3, [sp, #4]
   219f2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   219f4:	f104 0010 	add.w	r0, r4, #16
   219f8:	4632      	mov	r2, r6
   219fa:	462b      	mov	r3, r5
   219fc:	f000 fbd8 	bl	221b0 <z_add_timeout>
	return ret;
   21a00:	2001      	movs	r0, #1
   21a02:	e7ea      	b.n	219da <k_work_reschedule_for_queue+0x2e>
   21a04:	00027e3d 	.word	0x00027e3d

00021a08 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21a08:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21a0a:	4801      	ldr	r0, [pc, #4]	; (21a10 <k_work_reschedule+0x8>)
   21a0c:	f7ff bfce 	b.w	219ac <k_work_reschedule_for_queue>
   21a10:	20001d50 	.word	0x20001d50

00021a14 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   21a14:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   21a16:	4c08      	ldr	r4, [pc, #32]	; (21a38 <z_reset_time_slice+0x24>)
   21a18:	6823      	ldr	r3, [r4, #0]
   21a1a:	b15b      	cbz	r3, 21a34 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   21a1c:	f7fd fbbc 	bl	1f198 <sys_clock_elapsed>
   21a20:	4603      	mov	r3, r0
   21a22:	6820      	ldr	r0, [r4, #0]
   21a24:	4a05      	ldr	r2, [pc, #20]	; (21a3c <z_reset_time_slice+0x28>)
   21a26:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   21a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   21a2c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   21a2e:	2100      	movs	r1, #0
   21a30:	f006 bbcc 	b.w	281cc <z_set_timeout_expiry>
}
   21a34:	bd10      	pop	{r4, pc}
   21a36:	bf00      	nop
   21a38:	20003db0 	.word	0x20003db0
   21a3c:	20003d78 	.word	0x20003d78

00021a40 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a42:	4604      	mov	r4, r0
   21a44:	460d      	mov	r5, r1
	__asm__ volatile(
   21a46:	f04f 0320 	mov.w	r3, #32
   21a4a:	f3ef 8611 	mrs	r6, BASEPRI
   21a4e:	f383 8812 	msr	BASEPRI_MAX, r3
   21a52:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   21a56:	4b0f      	ldr	r3, [pc, #60]	; (21a94 <k_sched_time_slice_set+0x54>)
   21a58:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   21a5a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   21a5e:	f240 30e7 	movw	r0, #999	; 0x3e7
   21a62:	6119      	str	r1, [r3, #16]
   21a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21a68:	2300      	movs	r3, #0
   21a6a:	fbe4 0107 	umlal	r0, r1, r4, r7
   21a6e:	f7df fb47 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21a72:	2c00      	cmp	r4, #0
   21a74:	4b08      	ldr	r3, [pc, #32]	; (21a98 <k_sched_time_slice_set+0x58>)
   21a76:	dc09      	bgt.n	21a8c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   21a78:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   21a7a:	4b08      	ldr	r3, [pc, #32]	; (21a9c <k_sched_time_slice_set+0x5c>)
   21a7c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   21a7e:	f7ff ffc9 	bl	21a14 <z_reset_time_slice>
	__asm__ volatile(
   21a82:	f386 8811 	msr	BASEPRI, r6
   21a86:	f3bf 8f6f 	isb	sy
	}
}
   21a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   21a8c:	2802      	cmp	r0, #2
   21a8e:	bfb8      	it	lt
   21a90:	2002      	movlt	r0, #2
   21a92:	e7f1      	b.n	21a78 <k_sched_time_slice_set+0x38>
   21a94:	20003d78 	.word	0x20003d78
   21a98:	20003db0 	.word	0x20003db0
   21a9c:	20003dac 	.word	0x20003dac

00021aa0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21aa0:	b949      	cbnz	r1, 21ab6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21aa2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   21aa6:	b930      	cbnz	r0, 21ab6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   21aa8:	4b05      	ldr	r3, [pc, #20]	; (21ac0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   21aaa:	69da      	ldr	r2, [r3, #28]
   21aac:	689b      	ldr	r3, [r3, #8]
   21aae:	429a      	cmp	r2, r3
   21ab0:	d001      	beq.n	21ab6 <z_reschedule+0x16>
	ret = arch_swap(key);
   21ab2:	f7e6 bc5d 	b.w	8370 <arch_swap>
   21ab6:	f381 8811 	msr	BASEPRI, r1
   21aba:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   21abe:	4770      	bx	lr
   21ac0:	20003d78 	.word	0x20003d78

00021ac4 <k_sched_lock>:
	__asm__ volatile(
   21ac4:	f04f 0320 	mov.w	r3, #32
   21ac8:	f3ef 8111 	mrs	r1, BASEPRI
   21acc:	f383 8812 	msr	BASEPRI_MAX, r3
   21ad0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   21ad4:	4b04      	ldr	r3, [pc, #16]	; (21ae8 <k_sched_lock+0x24>)
   21ad6:	689a      	ldr	r2, [r3, #8]
   21ad8:	7bd3      	ldrb	r3, [r2, #15]
   21ada:	3b01      	subs	r3, #1
   21adc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   21ade:	f381 8811 	msr	BASEPRI, r1
   21ae2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21ae6:	4770      	bx	lr
   21ae8:	20003d78 	.word	0x20003d78

00021aec <update_cache>:
{
   21aec:	b538      	push	{r3, r4, r5, lr}
   21aee:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   21af0:	480c      	ldr	r0, [pc, #48]	; (21b24 <update_cache+0x38>)
   21af2:	4d0d      	ldr	r5, [pc, #52]	; (21b28 <update_cache+0x3c>)
   21af4:	f006 fa88 	bl	28008 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21af8:	4604      	mov	r4, r0
   21afa:	b900      	cbnz	r0, 21afe <update_cache+0x12>
   21afc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   21afe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21b00:	b94a      	cbnz	r2, 21b16 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   21b02:	7b5a      	ldrb	r2, [r3, #13]
   21b04:	06d2      	lsls	r2, r2, #27
   21b06:	d106      	bne.n	21b16 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21b08:	69a2      	ldr	r2, [r4, #24]
   21b0a:	b922      	cbnz	r2, 21b16 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   21b0c:	89da      	ldrh	r2, [r3, #14]
   21b0e:	2a7f      	cmp	r2, #127	; 0x7f
   21b10:	d901      	bls.n	21b16 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   21b12:	61eb      	str	r3, [r5, #28]
}
   21b14:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   21b16:	429c      	cmp	r4, r3
   21b18:	d001      	beq.n	21b1e <update_cache+0x32>
			z_reset_time_slice();
   21b1a:	f7ff ff7b 	bl	21a14 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21b1e:	61ec      	str	r4, [r5, #28]
}
   21b20:	e7f8      	b.n	21b14 <update_cache+0x28>
   21b22:	bf00      	nop
   21b24:	20003d98 	.word	0x20003d98
   21b28:	20003d78 	.word	0x20003d78

00021b2c <move_thread_to_end_of_prio_q>:
{
   21b2c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21b2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21b32:	7b43      	ldrb	r3, [r0, #13]
   21b34:	2a00      	cmp	r2, #0
{
   21b36:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21b38:	da04      	bge.n	21b44 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b3e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   21b40:	f006 fa0d 	bl	27f5e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21b44:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   21b46:	4a15      	ldr	r2, [pc, #84]	; (21b9c <move_thread_to_end_of_prio_q+0x70>)
   21b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21b4c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21b4e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b52:	f102 0520 	add.w	r5, r2, #32
   21b56:	42ab      	cmp	r3, r5
   21b58:	d01b      	beq.n	21b92 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b5a:	b1d3      	cbz	r3, 21b92 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   21b5c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   21b60:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   21b64:	4286      	cmp	r6, r0
   21b66:	d00f      	beq.n	21b88 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   21b68:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b6a:	2800      	cmp	r0, #0
   21b6c:	dd0c      	ble.n	21b88 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21b6e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21b70:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   21b74:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   21b76:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   21b78:	6890      	ldr	r0, [r2, #8]
   21b7a:	1a43      	subs	r3, r0, r1
   21b7c:	4258      	negs	r0, r3
}
   21b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21b82:	4158      	adcs	r0, r3
   21b84:	f7ff bfb2 	b.w	21aec <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21b88:	42a3      	cmp	r3, r4
   21b8a:	d002      	beq.n	21b92 <move_thread_to_end_of_prio_q+0x66>
   21b8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b8e:	2b00      	cmp	r3, #0
   21b90:	d1e6      	bne.n	21b60 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   21b92:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   21b96:	6021      	str	r1, [r4, #0]
	list->tail = node;
   21b98:	6251      	str	r1, [r2, #36]	; 0x24
}
   21b9a:	e7ed      	b.n	21b78 <move_thread_to_end_of_prio_q+0x4c>
   21b9c:	20003d78 	.word	0x20003d78

00021ba0 <z_time_slice>:
{
   21ba0:	b538      	push	{r3, r4, r5, lr}
   21ba2:	4601      	mov	r1, r0
	__asm__ volatile(
   21ba4:	f04f 0320 	mov.w	r3, #32
   21ba8:	f3ef 8411 	mrs	r4, BASEPRI
   21bac:	f383 8812 	msr	BASEPRI_MAX, r3
   21bb0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   21bb4:	4b15      	ldr	r3, [pc, #84]	; (21c0c <z_time_slice+0x6c>)
   21bb6:	4a16      	ldr	r2, [pc, #88]	; (21c10 <z_time_slice+0x70>)
   21bb8:	6898      	ldr	r0, [r3, #8]
   21bba:	6815      	ldr	r5, [r2, #0]
   21bbc:	42a8      	cmp	r0, r5
   21bbe:	d106      	bne.n	21bce <z_time_slice+0x2e>
			z_reset_time_slice();
   21bc0:	f7ff ff28 	bl	21a14 <z_reset_time_slice>
	__asm__ volatile(
   21bc4:	f384 8811 	msr	BASEPRI, r4
   21bc8:	f3bf 8f6f 	isb	sy
}
   21bcc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   21bce:	2500      	movs	r5, #0
   21bd0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   21bd2:	4a10      	ldr	r2, [pc, #64]	; (21c14 <z_time_slice+0x74>)
   21bd4:	6812      	ldr	r2, [r2, #0]
   21bd6:	b1ba      	cbz	r2, 21c08 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   21bd8:	89c2      	ldrh	r2, [r0, #14]
   21bda:	2a7f      	cmp	r2, #127	; 0x7f
   21bdc:	d814      	bhi.n	21c08 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   21bde:	7b42      	ldrb	r2, [r0, #13]
   21be0:	06d2      	lsls	r2, r2, #27
   21be2:	d111      	bne.n	21c08 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21be4:	4a0c      	ldr	r2, [pc, #48]	; (21c18 <z_time_slice+0x78>)
   21be6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   21bea:	6812      	ldr	r2, [r2, #0]
   21bec:	4295      	cmp	r5, r2
   21bee:	db0b      	blt.n	21c08 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   21bf0:	4a0a      	ldr	r2, [pc, #40]	; (21c1c <z_time_slice+0x7c>)
   21bf2:	4290      	cmp	r0, r2
   21bf4:	d008      	beq.n	21c08 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   21bf6:	691a      	ldr	r2, [r3, #16]
   21bf8:	428a      	cmp	r2, r1
   21bfa:	dc02      	bgt.n	21c02 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   21bfc:	f7ff ff96 	bl	21b2c <move_thread_to_end_of_prio_q>
   21c00:	e7de      	b.n	21bc0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   21c02:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   21c04:	611a      	str	r2, [r3, #16]
   21c06:	e7dd      	b.n	21bc4 <z_time_slice+0x24>
   21c08:	2200      	movs	r2, #0
   21c0a:	e7fb      	b.n	21c04 <z_time_slice+0x64>
   21c0c:	20003d78 	.word	0x20003d78
   21c10:	20003da8 	.word	0x20003da8
   21c14:	20003db0 	.word	0x20003db0
   21c18:	20003dac 	.word	0x20003dac
   21c1c:	20001c50 	.word	0x20001c50

00021c20 <ready_thread>:
{
   21c20:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21c22:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21c26:	7b43      	ldrb	r3, [r0, #13]
   21c28:	2a00      	cmp	r2, #0
   21c2a:	db2a      	blt.n	21c82 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21c2c:	06da      	lsls	r2, r3, #27
   21c2e:	d128      	bne.n	21c82 <ready_thread+0x62>
   21c30:	6982      	ldr	r2, [r0, #24]
   21c32:	bb32      	cbnz	r2, 21c82 <ready_thread+0x62>
	return list->head == list;
   21c34:	4a14      	ldr	r2, [pc, #80]	; (21c88 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   21c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21c3a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   21c3c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c40:	f102 0520 	add.w	r5, r2, #32
   21c44:	42ab      	cmp	r3, r5
   21c46:	d017      	beq.n	21c78 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c48:	b1b3      	cbz	r3, 21c78 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   21c4a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21c4e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21c52:	428e      	cmp	r6, r1
   21c54:	d00b      	beq.n	21c6e <ready_thread+0x4e>
		return b2 - b1;
   21c56:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21c58:	2900      	cmp	r1, #0
   21c5a:	dd08      	ble.n	21c6e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   21c5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21c5e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21c62:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21c64:	6058      	str	r0, [r3, #4]
}
   21c66:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   21c68:	2000      	movs	r0, #0
   21c6a:	f7ff bf3f 	b.w	21aec <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21c6e:	42a3      	cmp	r3, r4
   21c70:	d002      	beq.n	21c78 <ready_thread+0x58>
   21c72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c74:	2b00      	cmp	r3, #0
   21c76:	d1ea      	bne.n	21c4e <ready_thread+0x2e>
	node->prev = tail;
   21c78:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   21c7c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21c7e:	6250      	str	r0, [r2, #36]	; 0x24
}
   21c80:	e7f1      	b.n	21c66 <ready_thread+0x46>
}
   21c82:	bc70      	pop	{r4, r5, r6}
   21c84:	4770      	bx	lr
   21c86:	bf00      	nop
   21c88:	20003d78 	.word	0x20003d78

00021c8c <z_sched_start>:
{
   21c8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   21c8e:	f04f 0220 	mov.w	r2, #32
   21c92:	f3ef 8411 	mrs	r4, BASEPRI
   21c96:	f382 8812 	msr	BASEPRI_MAX, r2
   21c9a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21c9e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   21ca0:	0751      	lsls	r1, r2, #29
   21ca2:	d404      	bmi.n	21cae <z_sched_start+0x22>
	__asm__ volatile(
   21ca4:	f384 8811 	msr	BASEPRI, r4
   21ca8:	f3bf 8f6f 	isb	sy
}
   21cac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21cae:	f022 0204 	bic.w	r2, r2, #4
   21cb2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   21cb4:	f7ff ffb4 	bl	21c20 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21cb8:	4621      	mov	r1, r4
   21cba:	4802      	ldr	r0, [pc, #8]	; (21cc4 <z_sched_start+0x38>)
}
   21cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   21cc0:	f7ff beee 	b.w	21aa0 <z_reschedule>
   21cc4:	20003f74 	.word	0x20003f74

00021cc8 <unready_thread>:
{
   21cc8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   21cca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21cce:	7b43      	ldrb	r3, [r0, #13]
   21cd0:	2a00      	cmp	r2, #0
{
   21cd2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21cd4:	da04      	bge.n	21ce0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21cda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21cdc:	f006 f93f 	bl	27f5e <sys_dlist_remove>
	update_cache(thread == _current);
   21ce0:	4b04      	ldr	r3, [pc, #16]	; (21cf4 <unready_thread+0x2c>)
   21ce2:	6898      	ldr	r0, [r3, #8]
   21ce4:	1a43      	subs	r3, r0, r1
   21ce6:	4258      	negs	r0, r3
   21ce8:	4158      	adcs	r0, r3
}
   21cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   21cee:	f7ff befd 	b.w	21aec <update_cache>
   21cf2:	bf00      	nop
   21cf4:	20003d78 	.word	0x20003d78

00021cf8 <pend>:
{
   21cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cfc:	4606      	mov	r6, r0
   21cfe:	4615      	mov	r5, r2
   21d00:	461c      	mov	r4, r3
	__asm__ volatile(
   21d02:	f04f 0320 	mov.w	r3, #32
   21d06:	f3ef 8711 	mrs	r7, BASEPRI
   21d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   21d0e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   21d12:	f006 f9b1 	bl	28078 <add_to_waitq_locked>
	__asm__ volatile(
   21d16:	f387 8811 	msr	BASEPRI, r7
   21d1a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21d1e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   21d22:	bf08      	it	eq
   21d24:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   21d28:	d008      	beq.n	21d3c <pend+0x44>
   21d2a:	462a      	mov	r2, r5
   21d2c:	4623      	mov	r3, r4
   21d2e:	f106 0018 	add.w	r0, r6, #24
   21d32:	4903      	ldr	r1, [pc, #12]	; (21d40 <pend+0x48>)
}
   21d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21d38:	f000 ba3a 	b.w	221b0 <z_add_timeout>
   21d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d40:	00028035 	.word	0x00028035

00021d44 <z_pend_curr>:
{
   21d44:	b510      	push	{r4, lr}
	pending_current = _current;
   21d46:	4b07      	ldr	r3, [pc, #28]	; (21d64 <z_pend_curr+0x20>)
   21d48:	6898      	ldr	r0, [r3, #8]
   21d4a:	4b07      	ldr	r3, [pc, #28]	; (21d68 <z_pend_curr+0x24>)
{
   21d4c:	460c      	mov	r4, r1
	pending_current = _current;
   21d4e:	6018      	str	r0, [r3, #0]
{
   21d50:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   21d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21d56:	f7ff ffcf 	bl	21cf8 <pend>
   21d5a:	4620      	mov	r0, r4
}
   21d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21d60:	f7e6 bb06 	b.w	8370 <arch_swap>
   21d64:	20003d78 	.word	0x20003d78
   21d68:	20003da8 	.word	0x20003da8

00021d6c <z_set_prio>:
{
   21d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d6e:	4604      	mov	r4, r0
	__asm__ volatile(
   21d70:	f04f 0320 	mov.w	r3, #32
   21d74:	f3ef 8611 	mrs	r6, BASEPRI
   21d78:	f383 8812 	msr	BASEPRI_MAX, r3
   21d7c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   21d80:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21d82:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21d84:	b249      	sxtb	r1, r1
   21d86:	d133      	bne.n	21df0 <z_set_prio+0x84>
		if (need_sched) {
   21d88:	6982      	ldr	r2, [r0, #24]
   21d8a:	bb8a      	cbnz	r2, 21df0 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21d90:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21d92:	f006 f8e4 	bl	27f5e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21d96:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   21d98:	4a17      	ldr	r2, [pc, #92]	; (21df8 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   21d9a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21da0:	7343      	strb	r3, [r0, #13]
   21da2:	4610      	mov	r0, r2
   21da4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21da8:	4283      	cmp	r3, r0
   21daa:	d01b      	beq.n	21de4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21dac:	b1d3      	cbz	r3, 21de4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   21dae:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   21db0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   21db4:	42a9      	cmp	r1, r5
   21db6:	d010      	beq.n	21dda <z_set_prio+0x6e>
		return b2 - b1;
   21db8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21dba:	2d00      	cmp	r5, #0
   21dbc:	dd0d      	ble.n	21dda <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   21dbe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21dc0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21dc4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21dc6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21dc8:	2001      	movs	r0, #1
   21dca:	f7ff fe8f 	bl	21aec <update_cache>
   21dce:	2001      	movs	r0, #1
	__asm__ volatile(
   21dd0:	f386 8811 	msr	BASEPRI, r6
   21dd4:	f3bf 8f6f 	isb	sy
}
   21dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21dda:	42bb      	cmp	r3, r7
   21ddc:	d002      	beq.n	21de4 <z_set_prio+0x78>
   21dde:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21de0:	2b00      	cmp	r3, #0
   21de2:	d1e5      	bne.n	21db0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   21de4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   21de6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   21dea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21dec:	6254      	str	r4, [r2, #36]	; 0x24
}
   21dee:	e7eb      	b.n	21dc8 <z_set_prio+0x5c>
			thread->base.prio = prio;
   21df0:	73a1      	strb	r1, [r4, #14]
   21df2:	2000      	movs	r0, #0
   21df4:	e7ec      	b.n	21dd0 <z_set_prio+0x64>
   21df6:	bf00      	nop
   21df8:	20003d78 	.word	0x20003d78

00021dfc <z_impl_k_thread_suspend>:
{
   21dfc:	b570      	push	{r4, r5, r6, lr}
   21dfe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21e00:	3018      	adds	r0, #24
   21e02:	f006 f9bd 	bl	28180 <z_abort_timeout>
	__asm__ volatile(
   21e06:	f04f 0320 	mov.w	r3, #32
   21e0a:	f3ef 8611 	mrs	r6, BASEPRI
   21e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   21e12:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   21e16:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21e1a:	7b63      	ldrb	r3, [r4, #13]
   21e1c:	2a00      	cmp	r2, #0
   21e1e:	da05      	bge.n	21e2c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21e24:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21e26:	4620      	mov	r0, r4
   21e28:	f006 f899 	bl	27f5e <sys_dlist_remove>
		update_cache(thread == _current);
   21e2c:	4d0b      	ldr	r5, [pc, #44]	; (21e5c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21e2e:	7b63      	ldrb	r3, [r4, #13]
   21e30:	68a8      	ldr	r0, [r5, #8]
   21e32:	f043 0310 	orr.w	r3, r3, #16
   21e36:	7363      	strb	r3, [r4, #13]
   21e38:	1b03      	subs	r3, r0, r4
   21e3a:	4258      	negs	r0, r3
   21e3c:	4158      	adcs	r0, r3
   21e3e:	f7ff fe55 	bl	21aec <update_cache>
	__asm__ volatile(
   21e42:	f386 8811 	msr	BASEPRI, r6
   21e46:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21e4a:	68ab      	ldr	r3, [r5, #8]
   21e4c:	42a3      	cmp	r3, r4
   21e4e:	d103      	bne.n	21e58 <z_impl_k_thread_suspend+0x5c>
}
   21e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21e54:	f006 b8ce 	b.w	27ff4 <z_reschedule_unlocked>
}
   21e58:	bd70      	pop	{r4, r5, r6, pc}
   21e5a:	bf00      	nop
   21e5c:	20003d78 	.word	0x20003d78

00021e60 <k_sched_unlock>:
{
   21e60:	b510      	push	{r4, lr}
	__asm__ volatile(
   21e62:	f04f 0320 	mov.w	r3, #32
   21e66:	f3ef 8411 	mrs	r4, BASEPRI
   21e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   21e6e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   21e72:	4b08      	ldr	r3, [pc, #32]	; (21e94 <k_sched_unlock+0x34>)
   21e74:	689a      	ldr	r2, [r3, #8]
   21e76:	7bd3      	ldrb	r3, [r2, #15]
   21e78:	3301      	adds	r3, #1
   21e7a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21e7c:	2000      	movs	r0, #0
   21e7e:	f7ff fe35 	bl	21aec <update_cache>
	__asm__ volatile(
   21e82:	f384 8811 	msr	BASEPRI, r4
   21e86:	f3bf 8f6f 	isb	sy
}
   21e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21e8e:	f006 b8b1 	b.w	27ff4 <z_reschedule_unlocked>
   21e92:	bf00      	nop
   21e94:	20003d78 	.word	0x20003d78

00021e98 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21e98:	4b04      	ldr	r3, [pc, #16]	; (21eac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21e9a:	2100      	movs	r1, #0
   21e9c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21ea0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21ea4:	4608      	mov	r0, r1
   21ea6:	f7ff bdcb 	b.w	21a40 <k_sched_time_slice_set>
   21eaa:	bf00      	nop
   21eac:	20003d78 	.word	0x20003d78

00021eb0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   21eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   21eb2:	f04f 0320 	mov.w	r3, #32
   21eb6:	f3ef 8511 	mrs	r5, BASEPRI
   21eba:	f383 8812 	msr	BASEPRI_MAX, r3
   21ebe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21ec2:	491a      	ldr	r1, [pc, #104]	; (21f2c <z_impl_k_yield+0x7c>)
   21ec4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21ec6:	7b43      	ldrb	r3, [r0, #13]
   21ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21ecc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21ece:	f006 f846 	bl	27f5e <sys_dlist_remove>
	}
	queue_thread(_current);
   21ed2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21ed4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   21ed6:	4608      	mov	r0, r1
   21ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21edc:	735a      	strb	r2, [r3, #13]
   21ede:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ee2:	4282      	cmp	r2, r0
   21ee4:	d01c      	beq.n	21f20 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ee6:	b1da      	cbz	r2, 21f20 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   21ee8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   21eea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21eee:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   21ef2:	42a6      	cmp	r6, r4
   21ef4:	d00f      	beq.n	21f16 <z_impl_k_yield+0x66>
		return b2 - b1;
   21ef6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21ef8:	2c00      	cmp	r4, #0
   21efa:	dd0c      	ble.n	21f16 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   21efc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21efe:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21f02:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21f04:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21f06:	2001      	movs	r0, #1
   21f08:	f7ff fdf0 	bl	21aec <update_cache>
   21f0c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   21f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21f12:	f7e6 ba2d 	b.w	8370 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   21f16:	42ba      	cmp	r2, r7
   21f18:	d002      	beq.n	21f20 <z_impl_k_yield+0x70>
   21f1a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f1c:	2a00      	cmp	r2, #0
   21f1e:	d1e6      	bne.n	21eee <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   21f20:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   21f22:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   21f26:	6013      	str	r3, [r2, #0]
	list->tail = node;
   21f28:	624b      	str	r3, [r1, #36]	; 0x24
}
   21f2a:	e7ec      	b.n	21f06 <z_impl_k_yield+0x56>
   21f2c:	20003d78 	.word	0x20003d78

00021f30 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   21f30:	ea50 0301 	orrs.w	r3, r0, r1
{
   21f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f38:	4605      	mov	r5, r0
   21f3a:	460e      	mov	r6, r1
	if (ticks == 0) {
   21f3c:	d103      	bne.n	21f46 <z_tick_sleep+0x16>
	z_impl_k_yield();
   21f3e:	f7ff ffb7 	bl	21eb0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   21f42:	2000      	movs	r0, #0
   21f44:	e033      	b.n	21fae <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   21f46:	f06f 0401 	mvn.w	r4, #1
   21f4a:	1a24      	subs	r4, r4, r0
   21f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21f50:	eb63 0301 	sbc.w	r3, r3, r1
   21f54:	2c01      	cmp	r4, #1
   21f56:	f173 0300 	sbcs.w	r3, r3, #0
   21f5a:	da02      	bge.n	21f62 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21f5c:	f006 f950 	bl	28200 <sys_clock_tick_get_32>
   21f60:	1944      	adds	r4, r0, r5
   21f62:	f04f 0320 	mov.w	r3, #32
   21f66:	f3ef 8811 	mrs	r8, BASEPRI
   21f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f6e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   21f72:	4f10      	ldr	r7, [pc, #64]	; (21fb4 <z_tick_sleep+0x84>)
   21f74:	4b10      	ldr	r3, [pc, #64]	; (21fb8 <z_tick_sleep+0x88>)
   21f76:	68b8      	ldr	r0, [r7, #8]
   21f78:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21f7a:	f7ff fea5 	bl	21cc8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21f7e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21f80:	490e      	ldr	r1, [pc, #56]	; (21fbc <z_tick_sleep+0x8c>)
   21f82:	462a      	mov	r2, r5
   21f84:	4633      	mov	r3, r6
   21f86:	3018      	adds	r0, #24
   21f88:	f000 f912 	bl	221b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21f8c:	68ba      	ldr	r2, [r7, #8]
   21f8e:	7b53      	ldrb	r3, [r2, #13]
   21f90:	f043 0310 	orr.w	r3, r3, #16
   21f94:	7353      	strb	r3, [r2, #13]
   21f96:	4640      	mov	r0, r8
   21f98:	f7e6 f9ea 	bl	8370 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21f9c:	f006 f930 	bl	28200 <sys_clock_tick_get_32>
   21fa0:	1a20      	subs	r0, r4, r0
   21fa2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21fa6:	2801      	cmp	r0, #1
   21fa8:	f173 0300 	sbcs.w	r3, r3, #0
   21fac:	dbc9      	blt.n	21f42 <z_tick_sleep+0x12>
}
   21fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fb2:	bf00      	nop
   21fb4:	20003d78 	.word	0x20003d78
   21fb8:	20003da8 	.word	0x20003da8
   21fbc:	00028035 	.word	0x00028035

00021fc0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fc0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   21fc4:	bf08      	it	eq
   21fc6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   21fca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fcc:	d106      	bne.n	21fdc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   21fce:	4b08      	ldr	r3, [pc, #32]	; (21ff0 <z_impl_k_sleep+0x30>)
   21fd0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21fd2:	f7ff ff13 	bl	21dfc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21fda:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21fdc:	f7ff ffa8 	bl	21f30 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21fe4:	fb80 0303 	smull	r0, r3, r0, r3
   21fe8:	0bc0      	lsrs	r0, r0, #15
   21fea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21fee:	e7f4      	b.n	21fda <z_impl_k_sleep+0x1a>
   21ff0:	20003d78 	.word	0x20003d78

00021ff4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21ff4:	4b01      	ldr	r3, [pc, #4]	; (21ffc <z_impl_z_current_get+0x8>)
   21ff6:	6898      	ldr	r0, [r3, #8]
   21ff8:	4770      	bx	lr
   21ffa:	bf00      	nop
   21ffc:	20003d78 	.word	0x20003d78

00022000 <z_impl_k_is_preempt_thread>:
   22000:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   22004:	b93b      	cbnz	r3, 22016 <z_impl_k_is_preempt_thread+0x16>
   22006:	4b05      	ldr	r3, [pc, #20]	; (2201c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   22008:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   2200a:	89d8      	ldrh	r0, [r3, #14]
   2200c:	287f      	cmp	r0, #127	; 0x7f
   2200e:	bf8c      	ite	hi
   22010:	2000      	movhi	r0, #0
   22012:	2001      	movls	r0, #1
   22014:	4770      	bx	lr
   22016:	2000      	movs	r0, #0
}
   22018:	4770      	bx	lr
   2201a:	bf00      	nop
   2201c:	20003d78 	.word	0x20003d78

00022020 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22024:	4604      	mov	r4, r0
   22026:	f04f 0320 	mov.w	r3, #32
   2202a:	f3ef 8611 	mrs	r6, BASEPRI
   2202e:	f383 8812 	msr	BASEPRI_MAX, r3
   22032:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22036:	7b43      	ldrb	r3, [r0, #13]
   22038:	071a      	lsls	r2, r3, #28
   2203a:	d505      	bpl.n	22048 <z_thread_abort+0x28>
	__asm__ volatile(
   2203c:	f386 8811 	msr	BASEPRI, r6
   22040:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22048:	f023 0220 	bic.w	r2, r3, #32
   2204c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22050:	09d2      	lsrs	r2, r2, #7
   22052:	d120      	bne.n	22096 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22054:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   22056:	68a3      	ldr	r3, [r4, #8]
   22058:	b113      	cbz	r3, 22060 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   2205a:	4620      	mov	r0, r4
   2205c:	f005 ff87 	bl	27f6e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22060:	f104 0018 	add.w	r0, r4, #24
   22064:	f006 f88c 	bl	28180 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22068:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2206c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22070:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22072:	42bd      	cmp	r5, r7
   22074:	d000      	beq.n	22078 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22076:	b9b5      	cbnz	r5, 220a6 <z_thread_abort+0x86>
		update_cache(1);
   22078:	2001      	movs	r0, #1
   2207a:	f7ff fd37 	bl	21aec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2207e:	4b10      	ldr	r3, [pc, #64]	; (220c0 <z_thread_abort+0xa0>)
   22080:	689b      	ldr	r3, [r3, #8]
   22082:	42a3      	cmp	r3, r4
   22084:	d1da      	bne.n	2203c <z_thread_abort+0x1c>
   22086:	f3ef 8305 	mrs	r3, IPSR
   2208a:	2b00      	cmp	r3, #0
   2208c:	d1d6      	bne.n	2203c <z_thread_abort+0x1c>
   2208e:	4630      	mov	r0, r6
   22090:	f7e6 f96e 	bl	8370 <arch_swap>
	return ret;
   22094:	e7d2      	b.n	2203c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22096:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2209a:	f043 0308 	orr.w	r3, r3, #8
   2209e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   220a0:	f005 ff5d 	bl	27f5e <sys_dlist_remove>
}
   220a4:	e7d7      	b.n	22056 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   220a6:	4628      	mov	r0, r5
   220a8:	f005 ff61 	bl	27f6e <unpend_thread_no_timeout>
   220ac:	f105 0018 	add.w	r0, r5, #24
   220b0:	f006 f866 	bl	28180 <z_abort_timeout>
   220b4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   220b8:	4628      	mov	r0, r5
   220ba:	f7ff fdb1 	bl	21c20 <ready_thread>
   220be:	e7d7      	b.n	22070 <z_thread_abort+0x50>
   220c0:	20003d78 	.word	0x20003d78

000220c4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   220c4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   220c6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   220ca:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   220cc:	e9cd 6700 	strd	r6, r7, [sp]
   220d0:	f7ff fe38 	bl	21d44 <z_pend_curr>

	if (data != NULL) {
   220d4:	b11c      	cbz	r4, 220de <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   220d6:	4b03      	ldr	r3, [pc, #12]	; (220e4 <z_sched_wait+0x20>)
   220d8:	689b      	ldr	r3, [r3, #8]
   220da:	695b      	ldr	r3, [r3, #20]
   220dc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   220de:	b002      	add	sp, #8
   220e0:	bdd0      	pop	{r4, r6, r7, pc}
   220e2:	bf00      	nop
   220e4:	20003d78 	.word	0x20003d78

000220e8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   220e8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   220ea:	4806      	ldr	r0, [pc, #24]	; (22104 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   220ec:	4a06      	ldr	r2, [pc, #24]	; (22108 <z_data_copy+0x20>)
   220ee:	4907      	ldr	r1, [pc, #28]	; (2210c <z_data_copy+0x24>)
   220f0:	1a12      	subs	r2, r2, r0
   220f2:	f002 fc54 	bl	2499e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   220f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   220fa:	4a05      	ldr	r2, [pc, #20]	; (22110 <z_data_copy+0x28>)
   220fc:	4905      	ldr	r1, [pc, #20]	; (22114 <z_data_copy+0x2c>)
   220fe:	4806      	ldr	r0, [pc, #24]	; (22118 <z_data_copy+0x30>)
   22100:	f002 bc4d 	b.w	2499e <memcpy>
   22104:	20000000 	.word	0x20000000
   22108:	20000c4c 	.word	0x20000c4c
   2210c:	0002c998 	.word	0x0002c998
   22110:	00000000 	.word	0x00000000
   22114:	0002c998 	.word	0x0002c998
   22118:	20000000 	.word	0x20000000

0002211c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2211c:	4b03      	ldr	r3, [pc, #12]	; (2212c <elapsed+0x10>)
   2211e:	681b      	ldr	r3, [r3, #0]
   22120:	b90b      	cbnz	r3, 22126 <elapsed+0xa>
   22122:	f7fd b839 	b.w	1f198 <sys_clock_elapsed>
}
   22126:	2000      	movs	r0, #0
   22128:	4770      	bx	lr
   2212a:	bf00      	nop
   2212c:	20003db4 	.word	0x20003db4

00022130 <next_timeout>:
	return list->head == list;
   22130:	4b10      	ldr	r3, [pc, #64]	; (22174 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   22132:	b510      	push	{r4, lr}
   22134:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22136:	429c      	cmp	r4, r3
   22138:	bf08      	it	eq
   2213a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2213c:	f7ff ffee 	bl	2211c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   22140:	b1a4      	cbz	r4, 2216c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22142:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22146:	1a1b      	subs	r3, r3, r0
   22148:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   2214c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22150:	f170 0200 	sbcs.w	r2, r0, #0
   22154:	da0a      	bge.n	2216c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   22156:	2800      	cmp	r0, #0
   22158:	bfac      	ite	ge
   2215a:	4618      	movge	r0, r3
   2215c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2215e:	4b06      	ldr	r3, [pc, #24]	; (22178 <next_timeout+0x48>)
   22160:	691b      	ldr	r3, [r3, #16]
   22162:	b113      	cbz	r3, 2216a <next_timeout+0x3a>
   22164:	4298      	cmp	r0, r3
   22166:	bfa8      	it	ge
   22168:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2216a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   2216c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22170:	e7f5      	b.n	2215e <next_timeout+0x2e>
   22172:	bf00      	nop
   22174:	200007cc 	.word	0x200007cc
   22178:	20003d78 	.word	0x20003d78

0002217c <remove_timeout>:
{
   2217c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2217e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22180:	b168      	cbz	r0, 2219e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22182:	4a0a      	ldr	r2, [pc, #40]	; (221ac <remove_timeout+0x30>)
   22184:	6852      	ldr	r2, [r2, #4]
   22186:	4290      	cmp	r0, r2
   22188:	d009      	beq.n	2219e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2218a:	b143      	cbz	r3, 2219e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2218c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22190:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22194:	1912      	adds	r2, r2, r4
   22196:	eb41 0105 	adc.w	r1, r1, r5
   2219a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2219e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   221a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   221a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   221a4:	2300      	movs	r3, #0
	node->prev = NULL;
   221a6:	e9c0 3300 	strd	r3, r3, [r0]
}
   221aa:	bd30      	pop	{r4, r5, pc}
   221ac:	200007cc 	.word	0x200007cc

000221b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   221b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   221b4:	bf08      	it	eq
   221b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   221ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221bc:	4604      	mov	r4, r0
   221be:	461f      	mov	r7, r3
   221c0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   221c2:	d067      	beq.n	22294 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   221c4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   221c6:	f04f 0320 	mov.w	r3, #32
   221ca:	f3ef 8611 	mrs	r6, BASEPRI
   221ce:	f383 8812 	msr	BASEPRI_MAX, r3
   221d2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   221d6:	f06f 0201 	mvn.w	r2, #1
   221da:	1b53      	subs	r3, r2, r5
   221dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   221e0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   221e4:	2b00      	cmp	r3, #0
   221e6:	db1b      	blt.n	22220 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   221e8:	4b2b      	ldr	r3, [pc, #172]	; (22298 <z_add_timeout+0xe8>)
   221ea:	e9d3 1300 	ldrd	r1, r3, [r3]
   221ee:	1a52      	subs	r2, r2, r1
   221f0:	eb6c 0303 	sbc.w	r3, ip, r3
   221f4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   221f6:	eb63 0307 	sbc.w	r3, r3, r7
   221fa:	2d01      	cmp	r5, #1
   221fc:	f173 0200 	sbcs.w	r2, r3, #0
   22200:	bfbc      	itt	lt
   22202:	2501      	movlt	r5, #1
   22204:	2300      	movlt	r3, #0
   22206:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2220a:	4824      	ldr	r0, [pc, #144]	; (2229c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   2220c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22210:	4283      	cmp	r3, r0
   22212:	d118      	bne.n	22246 <z_add_timeout+0x96>
	node->prev = tail;
   22214:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   22218:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2221c:	6044      	str	r4, [r0, #4]
}
   2221e:	e026      	b.n	2226e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   22220:	f7ff ff7c 	bl	2211c <elapsed>
   22224:	3501      	adds	r5, #1
   22226:	f147 0700 	adc.w	r7, r7, #0
   2222a:	182d      	adds	r5, r5, r0
   2222c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   22230:	e9c4 5704 	strd	r5, r7, [r4, #16]
   22234:	e7e9      	b.n	2220a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   22236:	1a52      	subs	r2, r2, r1
   22238:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   2223c:	459c      	cmp	ip, r3
   2223e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   22242:	d0e7      	beq.n	22214 <z_add_timeout+0x64>
   22244:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   22246:	2b00      	cmp	r3, #0
   22248:	d0e4      	beq.n	22214 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   2224a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   2224e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   22252:	428a      	cmp	r2, r1
   22254:	eb75 0e07 	sbcs.w	lr, r5, r7
   22258:	daed      	bge.n	22236 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   2225a:	1a8a      	subs	r2, r1, r2
   2225c:	eb67 0505 	sbc.w	r5, r7, r5
   22260:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   22264:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22266:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2226a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2226c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2226e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22270:	4283      	cmp	r3, r0
   22272:	d00b      	beq.n	2228c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22274:	429c      	cmp	r4, r3
   22276:	d109      	bne.n	2228c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22278:	f7ff ff5a 	bl	22130 <next_timeout>

			if (next_time == 0 ||
   2227c:	b118      	cbz	r0, 22286 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   2227e:	4b08      	ldr	r3, [pc, #32]	; (222a0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   22280:	691b      	ldr	r3, [r3, #16]
   22282:	4283      	cmp	r3, r0
   22284:	d002      	beq.n	2228c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   22286:	2100      	movs	r1, #0
   22288:	f7fc ff54 	bl	1f134 <sys_clock_set_timeout>
	__asm__ volatile(
   2228c:	f386 8811 	msr	BASEPRI, r6
   22290:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22296:	bf00      	nop
   22298:	20001df0 	.word	0x20001df0
   2229c:	200007cc 	.word	0x200007cc
   222a0:	20003d78 	.word	0x20003d78

000222a4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   222a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222a8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   222aa:	f7ff fc79 	bl	21ba0 <z_time_slice>
	__asm__ volatile(
   222ae:	f04f 0320 	mov.w	r3, #32
   222b2:	f3ef 8411 	mrs	r4, BASEPRI
   222b6:	f383 8812 	msr	BASEPRI_MAX, r3
   222ba:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   222be:	4e24      	ldr	r6, [pc, #144]	; (22350 <sys_clock_announce+0xac>)
	return list->head == list;
   222c0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 22354 <sys_clock_announce+0xb0>
   222c4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   222c6:	4d24      	ldr	r5, [pc, #144]	; (22358 <sys_clock_announce+0xb4>)
   222c8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   222cc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222ce:	4540      	cmp	r0, r8
		curr_tick += dt;
   222d0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   222d4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   222d8:	d00b      	beq.n	222f2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   222da:	b150      	cbz	r0, 222f2 <sys_clock_announce+0x4e>
   222dc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   222e0:	429a      	cmp	r2, r3
   222e2:	eb77 090c 	sbcs.w	r9, r7, ip
   222e6:	da16      	bge.n	22316 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   222e8:	1a9b      	subs	r3, r3, r2
   222ea:	eb6c 0c07 	sbc.w	ip, ip, r7
   222ee:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   222f2:	1852      	adds	r2, r2, r1
   222f4:	eb4e 0707 	adc.w	r7, lr, r7
   222f8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   222fc:	2500      	movs	r5, #0
   222fe:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   22300:	f7ff ff16 	bl	22130 <next_timeout>
   22304:	4629      	mov	r1, r5
   22306:	f7fc ff15 	bl	1f134 <sys_clock_set_timeout>
	__asm__ volatile(
   2230a:	f384 8811 	msr	BASEPRI, r4
   2230e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22316:	1859      	adds	r1, r3, r1
   22318:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   2231c:	1ad3      	subs	r3, r2, r3
   2231e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   22320:	2200      	movs	r2, #0
   22322:	2300      	movs	r3, #0
   22324:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   22328:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   2232c:	f7ff ff26 	bl	2217c <remove_timeout>
   22330:	f384 8811 	msr	BASEPRI, r4
   22334:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22338:	6883      	ldr	r3, [r0, #8]
   2233a:	4798      	blx	r3
	__asm__ volatile(
   2233c:	f04f 0320 	mov.w	r3, #32
   22340:	f3ef 8411 	mrs	r4, BASEPRI
   22344:	f383 8812 	msr	BASEPRI_MAX, r3
   22348:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2234c:	e7bc      	b.n	222c8 <sys_clock_announce+0x24>
   2234e:	bf00      	nop
   22350:	20003db4 	.word	0x20003db4
   22354:	200007cc 	.word	0x200007cc
   22358:	20001df0 	.word	0x20001df0

0002235c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2235c:	b510      	push	{r4, lr}
   2235e:	f04f 0320 	mov.w	r3, #32
   22362:	f3ef 8411 	mrs	r4, BASEPRI
   22366:	f383 8812 	msr	BASEPRI_MAX, r3
   2236a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2236e:	f7fc ff13 	bl	1f198 <sys_clock_elapsed>
   22372:	4a05      	ldr	r2, [pc, #20]	; (22388 <sys_clock_tick_get+0x2c>)
   22374:	e9d2 3100 	ldrd	r3, r1, [r2]
   22378:	18c0      	adds	r0, r0, r3
   2237a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   2237e:	f384 8811 	msr	BASEPRI, r4
   22382:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22386:	bd10      	pop	{r4, pc}
   22388:	20001df0 	.word	0x20001df0

0002238c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2238c:	b570      	push	{r4, r5, r6, lr}
   2238e:	4604      	mov	r4, r0
	__asm__ volatile(
   22390:	f04f 0320 	mov.w	r3, #32
   22394:	f3ef 8511 	mrs	r5, BASEPRI
   22398:	f383 8812 	msr	BASEPRI_MAX, r3
   2239c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   223a0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   223a4:	3301      	adds	r3, #1
   223a6:	f142 0200 	adc.w	r2, r2, #0
   223aa:	2b02      	cmp	r3, #2
   223ac:	f172 0300 	sbcs.w	r3, r2, #0
   223b0:	d304      	bcc.n	223bc <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   223b2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   223b6:	4917      	ldr	r1, [pc, #92]	; (22414 <z_timer_expiration_handler+0x88>)
   223b8:	f7ff fefa 	bl	221b0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   223bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   223be:	3301      	adds	r3, #1
   223c0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   223c2:	6a23      	ldr	r3, [r4, #32]
   223c4:	b173      	cbz	r3, 223e4 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   223c6:	f385 8811 	msr	BASEPRI, r5
   223ca:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   223ce:	6a23      	ldr	r3, [r4, #32]
   223d0:	4620      	mov	r0, r4
   223d2:	4798      	blx	r3
	__asm__ volatile(
   223d4:	f04f 0320 	mov.w	r3, #32
   223d8:	f3ef 8511 	mrs	r5, BASEPRI
   223dc:	f383 8812 	msr	BASEPRI_MAX, r3
   223e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   223e4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223e8:	42a6      	cmp	r6, r4
   223ea:	d000      	beq.n	223ee <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   223ec:	b926      	cbnz	r6, 223f8 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   223ee:	f385 8811 	msr	BASEPRI, r5
   223f2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   223f6:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   223f8:	4630      	mov	r0, r6
   223fa:	f005 fdcb 	bl	27f94 <z_unpend_thread_no_timeout>
   223fe:	2300      	movs	r3, #0
   22400:	67f3      	str	r3, [r6, #124]	; 0x7c
   22402:	f385 8811 	msr	BASEPRI, r5
   22406:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2240a:	4630      	mov	r0, r6
}
   2240c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   22410:	f005 be00 	b.w	28014 <z_ready_thread>
   22414:	0002238d 	.word	0x0002238d

00022418 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2241c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2241e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22422:	bf08      	it	eq
   22424:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   22428:	4606      	mov	r6, r0
   2242a:	461c      	mov	r4, r3
   2242c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   22430:	4689      	mov	r9, r1
   22432:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22434:	d03e      	beq.n	224b4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22436:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2243a:	bf08      	it	eq
   2243c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   22440:	4615      	mov	r5, r2
   22442:	4607      	mov	r7, r0
   22444:	d014      	beq.n	22470 <z_impl_k_timer_start+0x58>
   22446:	ea50 0302 	orrs.w	r3, r0, r2
   2244a:	d011      	beq.n	22470 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   2244c:	f06f 0301 	mvn.w	r3, #1
   22450:	1a9b      	subs	r3, r3, r2
   22452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22456:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2245a:	2b00      	cmp	r3, #0
   2245c:	da08      	bge.n	22470 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   2245e:	2a02      	cmp	r2, #2
   22460:	f170 0300 	sbcs.w	r3, r0, #0
   22464:	bfbc      	itt	lt
   22466:	2502      	movlt	r5, #2
   22468:	2700      	movlt	r7, #0
   2246a:	3d01      	subs	r5, #1
   2246c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22470:	f06f 0301 	mvn.w	r3, #1
   22474:	1a5b      	subs	r3, r3, r1
   22476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2247a:	eb63 0304 	sbc.w	r3, r3, r4
   2247e:	2b00      	cmp	r3, #0
   22480:	da09      	bge.n	22496 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22482:	2901      	cmp	r1, #1
   22484:	f174 0300 	sbcs.w	r3, r4, #0
   22488:	bfbc      	itt	lt
   2248a:	2101      	movlt	r1, #1
   2248c:	2400      	movlt	r4, #0
   2248e:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   22492:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   22496:	4630      	mov	r0, r6
   22498:	f005 fe72 	bl	28180 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2249c:	2300      	movs	r3, #0
   2249e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   224a0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   224a4:	464a      	mov	r2, r9
   224a6:	4643      	mov	r3, r8
   224a8:	4630      	mov	r0, r6
   224aa:	4903      	ldr	r1, [pc, #12]	; (224b8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   224ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   224b0:	f7ff be7e 	b.w	221b0 <z_add_timeout>
}
   224b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   224b8:	0002238d 	.word	0x0002238d

000224bc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   224bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   224c0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   224c2:	4b29      	ldr	r3, [pc, #164]	; (22568 <z_impl_k_poll+0xac>)
   224c4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   224c6:	2301      	movs	r3, #1
   224c8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   224cc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   224d0:	ea52 0305 	orrs.w	r3, r2, r5
{
   224d4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   224d6:	bf0c      	ite	eq
   224d8:	2301      	moveq	r3, #1
   224da:	2300      	movne	r3, #0
   224dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   224e0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   224e2:	f005 ff1a 	bl	2831a <register_events>
   224e6:	4681      	mov	r9, r0
	__asm__ volatile(
   224e8:	f04f 0320 	mov.w	r3, #32
   224ec:	f3ef 8a11 	mrs	sl, BASEPRI
   224f0:	f383 8812 	msr	BASEPRI_MAX, r3
   224f4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   224f8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   224fc:	b964      	cbnz	r4, 22518 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   224fe:	4601      	mov	r1, r0
   22500:	4652      	mov	r2, sl
   22502:	4640      	mov	r0, r8
   22504:	f005 ffda 	bl	284bc <clear_event_registrations>
	__asm__ volatile(
   22508:	f38a 8811 	msr	BASEPRI, sl
   2250c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22510:	4620      	mov	r0, r4
   22512:	b002      	add	sp, #8
   22514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   22518:	2300      	movs	r3, #0
   2251a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2251e:	ea56 0305 	orrs.w	r3, r6, r5
   22522:	d106      	bne.n	22532 <z_impl_k_poll+0x76>
   22524:	f38a 8811 	msr	BASEPRI, sl
   22528:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2252c:	f06f 040a 	mvn.w	r4, #10
   22530:	e7ee      	b.n	22510 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22532:	e9cd 6500 	strd	r6, r5, [sp]
   22536:	4a0d      	ldr	r2, [pc, #52]	; (2256c <z_impl_k_poll+0xb0>)
   22538:	480d      	ldr	r0, [pc, #52]	; (22570 <z_impl_k_poll+0xb4>)
   2253a:	4651      	mov	r1, sl
   2253c:	f7ff fc02 	bl	21d44 <z_pend_curr>
   22540:	4604      	mov	r4, r0
	__asm__ volatile(
   22542:	f04f 0320 	mov.w	r3, #32
   22546:	f3ef 8511 	mrs	r5, BASEPRI
   2254a:	f383 8812 	msr	BASEPRI_MAX, r3
   2254e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   22552:	462a      	mov	r2, r5
   22554:	4649      	mov	r1, r9
   22556:	4640      	mov	r0, r8
   22558:	f005 ffb0 	bl	284bc <clear_event_registrations>
	__asm__ volatile(
   2255c:	f385 8811 	msr	BASEPRI, r5
   22560:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22564:	e7d4      	b.n	22510 <z_impl_k_poll+0x54>
   22566:	bf00      	nop
   22568:	20003d78 	.word	0x20003d78
   2256c:	200007d4 	.word	0x200007d4
   22570:	20003f74 	.word	0x20003f74

00022574 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22574:	b538      	push	{r3, r4, r5, lr}
   22576:	4603      	mov	r3, r0
	__asm__ volatile(
   22578:	f04f 0220 	mov.w	r2, #32
   2257c:	f3ef 8511 	mrs	r5, BASEPRI
   22580:	f382 8812 	msr	BASEPRI_MAX, r2
   22584:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22588:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2258a:	2101      	movs	r1, #1
   2258c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2258e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22590:	4283      	cmp	r3, r0
   22592:	d106      	bne.n	225a2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   22594:	f385 8811 	msr	BASEPRI, r5
   22598:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2259c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2259e:	4620      	mov	r0, r4
   225a0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   225a2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   225a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   225a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   225aa:	2300      	movs	r3, #0
	node->prev = NULL;
   225ac:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   225b0:	f005 ff2a 	bl	28408 <signal_poll_event>
	z_reschedule(&lock, key);
   225b4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   225b6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   225b8:	4801      	ldr	r0, [pc, #4]	; (225c0 <z_impl_k_poll_signal_raise+0x4c>)
   225ba:	f7ff fa71 	bl	21aa0 <z_reschedule>
	return rc;
   225be:	e7ee      	b.n	2259e <z_impl_k_poll_signal_raise+0x2a>
   225c0:	20003f74 	.word	0x20003f74

000225c4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   225c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   225c6:	4606      	mov	r6, r0
   225c8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   225ca:	f005 fae6 	bl	27b9a <k_is_in_isr>
   225ce:	b978      	cbnz	r0, 225f0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   225d0:	4b0b      	ldr	r3, [pc, #44]	; (22600 <z_thread_aligned_alloc+0x3c>)
   225d2:	689b      	ldr	r3, [r3, #8]
   225d4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   225d6:	b17c      	cbz	r4, 225f8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   225d8:	1d2a      	adds	r2, r5, #4
   225da:	d209      	bcs.n	225f0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   225dc:	2000      	movs	r0, #0
   225de:	2100      	movs	r1, #0
   225e0:	e9cd 0100 	strd	r0, r1, [sp]
   225e4:	f046 0104 	orr.w	r1, r6, #4
   225e8:	4620      	mov	r0, r4
   225ea:	f005 fa4f 	bl	27a8c <k_heap_aligned_alloc>
	if (mem == NULL) {
   225ee:	b908      	cbnz	r0, 225f4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   225f0:	2400      	movs	r4, #0
	}

	return ret;
   225f2:	e001      	b.n	225f8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   225f4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   225f6:	1d04      	adds	r4, r0, #4
}
   225f8:	4620      	mov	r0, r4
   225fa:	b002      	add	sp, #8
   225fc:	bd70      	pop	{r4, r5, r6, pc}
   225fe:	bf00      	nop
   22600:	20003d78 	.word	0x20003d78

00022604 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   22604:	4a02      	ldr	r2, [pc, #8]	; (22610 <boot_banner+0xc>)
   22606:	4903      	ldr	r1, [pc, #12]	; (22614 <boot_banner+0x10>)
   22608:	4803      	ldr	r0, [pc, #12]	; (22618 <boot_banner+0x14>)
   2260a:	f000 b87b 	b.w	22704 <printk>
   2260e:	bf00      	nop
   22610:	0002a52f 	.word	0x0002a52f
   22614:	0002c960 	.word	0x0002c960
   22618:	0002c96e 	.word	0x0002c96e

0002261c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2261c:	4770      	bx	lr

0002261e <main>:
	BLINKY_PRIORITY, 0, 100);

/* Main Function */
void main(void) {
	const struct device* console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (usb_enable(NULL)) {
   2261e:	2000      	movs	r0, #0
   22620:	f7e4 bc4a 	b.w	6eb8 <usb_enable>

00022624 <z_log_msg2_static_create.constprop.0>:
   22624:	2300      	movs	r3, #0
   22626:	f000 bf26 	b.w	23476 <z_impl_z_log_msg2_static_create>

0002262a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2262a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2262e:	4607      	mov	r7, r0
   22630:	460e      	mov	r6, r1
   22632:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   22634:	461d      	mov	r5, r3
   22636:	b1fb      	cbz	r3, 22678 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   22638:	7818      	ldrb	r0, [r3, #0]
   2263a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   2263c:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   22640:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   22644:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   22646:	f04f 0900 	mov.w	r9, #0
   2264a:	45d1      	cmp	r9, sl
   2264c:	d308      	bcc.n	22660 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   2264e:	686a      	ldr	r2, [r5, #4]
   22650:	f105 0308 	add.w	r3, r5, #8
   22654:	4641      	mov	r1, r8
   22656:	4638      	mov	r0, r7
   22658:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   2265a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2265e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   22660:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   22664:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   22668:	4620      	mov	r0, r4
   2266a:	f002 f96b 	bl	24944 <strlen>
   2266e:	3001      	adds	r0, #1
   22670:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   22672:	f109 0901 	add.w	r9, r9, #1
   22676:	e7e8      	b.n	2264a <cbpprintf_external+0x20>
}
   22678:	f06f 0015 	mvn.w	r0, #21
   2267c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022680 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   22680:	4603      	mov	r3, r0
   22682:	b140      	cbz	r0, 22696 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22684:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22686:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2268a:	2a02      	cmp	r2, #2
   2268c:	d006      	beq.n	2269c <sys_notify_validate+0x1c>
   2268e:	2a03      	cmp	r2, #3
   22690:	d004      	beq.n	2269c <sys_notify_validate+0x1c>
   22692:	2a01      	cmp	r2, #1
   22694:	d005      	beq.n	226a2 <sys_notify_validate+0x22>
		return -EINVAL;
   22696:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2269a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2269c:	681a      	ldr	r2, [r3, #0]
   2269e:	2a00      	cmp	r2, #0
   226a0:	d0f9      	beq.n	22696 <sys_notify_validate+0x16>
		notify->result = 0;
   226a2:	2000      	movs	r0, #0
   226a4:	6098      	str	r0, [r3, #8]
   226a6:	4770      	bx	lr

000226a8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   226a8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   226aa:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   226ae:	2a02      	cmp	r2, #2
{
   226b0:	b510      	push	{r4, lr}
   226b2:	4603      	mov	r3, r0
	notify->result = res;
   226b4:	6081      	str	r1, [r0, #8]
	switch (method) {
   226b6:	d00a      	beq.n	226ce <sys_notify_finalize+0x26>
   226b8:	2a03      	cmp	r2, #3
   226ba:	d10b      	bne.n	226d4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   226bc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   226be:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   226c0:	2200      	movs	r2, #0
   226c2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   226c4:	b108      	cbz	r0, 226ca <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   226c6:	f7ff ff55 	bl	22574 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   226ca:	4620      	mov	r0, r4
   226cc:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   226ce:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   226d0:	2400      	movs	r4, #0
		break;
   226d2:	e7f5      	b.n	226c0 <sys_notify_finalize+0x18>
	switch (method) {
   226d4:	2400      	movs	r4, #0
   226d6:	4620      	mov	r0, r4
   226d8:	e7f2      	b.n	226c0 <sys_notify_finalize+0x18>

000226da <arch_printk_char_out>:
}
   226da:	2000      	movs	r0, #0
   226dc:	4770      	bx	lr

000226de <str_out>:
{
   226de:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   226e0:	688a      	ldr	r2, [r1, #8]
   226e2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   226e4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   226e6:	b114      	cbz	r4, 226ee <str_out+0x10>
   226e8:	684b      	ldr	r3, [r1, #4]
   226ea:	4293      	cmp	r3, r2
   226ec:	dc01      	bgt.n	226f2 <str_out+0x14>
		ctx->count++;
   226ee:	608d      	str	r5, [r1, #8]
}
   226f0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   226f2:	3b01      	subs	r3, #1
   226f4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   226f6:	bf08      	it	eq
   226f8:	2200      	moveq	r2, #0
   226fa:	608d      	str	r5, [r1, #8]
   226fc:	bf0c      	ite	eq
   226fe:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   22700:	54a0      	strbne	r0, [r4, r2]
   22702:	e7f5      	b.n	226f0 <str_out+0x12>

00022704 <printk>:
{
   22704:	b40f      	push	{r0, r1, r2, r3}
   22706:	b507      	push	{r0, r1, r2, lr}
   22708:	a904      	add	r1, sp, #16
   2270a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2270e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   22710:	f000 fe3e 	bl	23390 <z_log_vprintk>
}
   22714:	b003      	add	sp, #12
   22716:	f85d eb04 	ldr.w	lr, [sp], #4
   2271a:	b004      	add	sp, #16
   2271c:	4770      	bx	lr

0002271e <snprintk>:
{
   2271e:	b40c      	push	{r2, r3}
   22720:	b507      	push	{r0, r1, r2, lr}
   22722:	ab04      	add	r3, sp, #16
   22724:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   22728:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2272a:	f7e2 fb77 	bl	4e1c <vsnprintk>
}
   2272e:	b003      	add	sp, #12
   22730:	f85d eb04 	ldr.w	lr, [sp], #4
   22734:	b002      	add	sp, #8
   22736:	4770      	bx	lr

00022738 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22738:	b510      	push	{r4, lr}
   2273a:	4603      	mov	r3, r0
	return list->head;
   2273c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2273e:	2200      	movs	r2, #0
   22740:	b158      	cbz	r0, 2275a <sys_slist_find_and_remove+0x22>
   22742:	4288      	cmp	r0, r1
   22744:	d10f      	bne.n	22766 <sys_slist_find_and_remove+0x2e>
	return node->next;
   22746:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   22748:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2274a:	b93a      	cbnz	r2, 2275c <sys_slist_find_and_remove+0x24>
   2274c:	42a1      	cmp	r1, r4
	list->head = node;
   2274e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22750:	d100      	bne.n	22754 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   22752:	6058      	str	r0, [r3, #4]
	parent->next = child;
   22754:	2300      	movs	r3, #0
   22756:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22758:	2001      	movs	r0, #1
   2275a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2275c:	42a1      	cmp	r1, r4
	parent->next = child;
   2275e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   22760:	bf08      	it	eq
   22762:	605a      	streq	r2, [r3, #4]
}
   22764:	e7f6      	b.n	22754 <sys_slist_find_and_remove+0x1c>
	return node->next;
   22766:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22768:	6800      	ldr	r0, [r0, #0]
   2276a:	e7e9      	b.n	22740 <sys_slist_find_and_remove+0x8>

0002276c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2276c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2276e:	f013 0307 	ands.w	r3, r3, #7
   22772:	d105      	bne.n	22780 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22774:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   22776:	2b00      	cmp	r3, #0
   22778:	bf0c      	ite	eq
   2277a:	2000      	moveq	r0, #0
   2277c:	2003      	movne	r0, #3
   2277e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22780:	2b02      	cmp	r3, #2
   22782:	d105      	bne.n	22790 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22784:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   22786:	2b00      	cmp	r3, #0
   22788:	bf14      	ite	ne
   2278a:	2000      	movne	r0, #0
   2278c:	2004      	moveq	r0, #4
   2278e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22790:	2b01      	cmp	r3, #1
   22792:	d105      	bne.n	227a0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22794:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   22796:	2b00      	cmp	r3, #0
   22798:	bf0c      	ite	eq
   2279a:	2000      	moveq	r0, #0
   2279c:	2005      	movne	r0, #5
   2279e:	4770      	bx	lr
	int evt = EVT_NOP;
   227a0:	2000      	movs	r0, #0
}
   227a2:	4770      	bx	lr

000227a4 <notify_one>:
{
   227a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227a8:	460d      	mov	r5, r1
   227aa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   227ac:	4619      	mov	r1, r3
   227ae:	1d28      	adds	r0, r5, #4
{
   227b0:	4690      	mov	r8, r2
   227b2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   227b4:	f7ff ff78 	bl	226a8 <sys_notify_finalize>
	if (cb) {
   227b8:	4604      	mov	r4, r0
   227ba:	b138      	cbz	r0, 227cc <notify_one+0x28>
		cb(mgr, cli, state, res);
   227bc:	4633      	mov	r3, r6
   227be:	4642      	mov	r2, r8
   227c0:	4629      	mov	r1, r5
   227c2:	4638      	mov	r0, r7
   227c4:	46a4      	mov	ip, r4
}
   227c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   227ca:	4760      	bx	ip
}
   227cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000227d0 <transition_complete>:
{
   227d0:	b410      	push	{r4}
	__asm__ volatile(
   227d2:	f04f 0420 	mov.w	r4, #32
   227d6:	f3ef 8211 	mrs	r2, BASEPRI
   227da:	f384 8812 	msr	BASEPRI_MAX, r4
   227de:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   227e2:	6141      	str	r1, [r0, #20]
}
   227e4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   227e6:	2101      	movs	r1, #1
   227e8:	f7e2 bb2c 	b.w	4e44 <process_event>

000227ec <validate_args>:
{
   227ec:	b510      	push	{r4, lr}
   227ee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   227f0:	b140      	cbz	r0, 22804 <validate_args+0x18>
   227f2:	b139      	cbz	r1, 22804 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   227f4:	1d08      	adds	r0, r1, #4
   227f6:	f7ff ff43 	bl	22680 <sys_notify_validate>
	if ((rv == 0)
   227fa:	b928      	cbnz	r0, 22808 <validate_args+0x1c>
	    && ((cli->notify.flags
   227fc:	68a3      	ldr	r3, [r4, #8]
   227fe:	f033 0303 	bics.w	r3, r3, #3
   22802:	d001      	beq.n	22808 <validate_args+0x1c>
		rv = -EINVAL;
   22804:	f06f 0015 	mvn.w	r0, #21
}
   22808:	bd10      	pop	{r4, pc}

0002280a <onoff_manager_init>:
{
   2280a:	b538      	push	{r3, r4, r5, lr}
   2280c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2280e:	4605      	mov	r5, r0
   22810:	b158      	cbz	r0, 2282a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22812:	b151      	cbz	r1, 2282a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22814:	680b      	ldr	r3, [r1, #0]
   22816:	b143      	cbz	r3, 2282a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22818:	684b      	ldr	r3, [r1, #4]
   2281a:	b133      	cbz	r3, 2282a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2281c:	221c      	movs	r2, #28
   2281e:	2100      	movs	r1, #0
   22820:	f002 f8c8 	bl	249b4 <memset>
   22824:	612c      	str	r4, [r5, #16]
	return 0;
   22826:	2000      	movs	r0, #0
}
   22828:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2282a:	f06f 0015 	mvn.w	r0, #21
   2282e:	e7fb      	b.n	22828 <onoff_manager_init+0x1e>

00022830 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   22830:	b570      	push	{r4, r5, r6, lr}
   22832:	4604      	mov	r4, r0
   22834:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   22836:	f7ff ffd9 	bl	227ec <validate_args>

	if (rv < 0) {
   2283a:	1e05      	subs	r5, r0, #0
   2283c:	db31      	blt.n	228a2 <onoff_request+0x72>
   2283e:	f04f 0320 	mov.w	r3, #32
   22842:	f3ef 8111 	mrs	r1, BASEPRI
   22846:	f383 8812 	msr	BASEPRI_MAX, r3
   2284a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2284e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22850:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   22852:	f64f 75ff 	movw	r5, #65535	; 0xffff
   22856:	42ab      	cmp	r3, r5
   22858:	f000 0207 	and.w	r2, r0, #7
   2285c:	d02e      	beq.n	228bc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2285e:	2a02      	cmp	r2, #2
   22860:	d10e      	bne.n	22880 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   22862:	3301      	adds	r3, #1
   22864:	8363      	strh	r3, [r4, #26]
	rv = state;
   22866:	4615      	mov	r5, r2
		notify = true;
   22868:	2301      	movs	r3, #1
	__asm__ volatile(
   2286a:	f381 8811 	msr	BASEPRI, r1
   2286e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   22872:	b1b3      	cbz	r3, 228a2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   22874:	2300      	movs	r3, #0
   22876:	4631      	mov	r1, r6
   22878:	4620      	mov	r0, r4
   2287a:	f7ff ff93 	bl	227a4 <notify_one>
   2287e:	e010      	b.n	228a2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   22880:	0783      	lsls	r3, r0, #30
   22882:	d001      	beq.n	22888 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   22884:	2a06      	cmp	r2, #6
   22886:	d10e      	bne.n	228a6 <onoff_request+0x76>
	parent->next = child;
   22888:	2300      	movs	r3, #0
   2288a:	6033      	str	r3, [r6, #0]
	return list->tail;
   2288c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2288e:	b993      	cbnz	r3, 228b6 <onoff_request+0x86>
	list->head = node;
   22890:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   22894:	4615      	mov	r5, r2
   22896:	b962      	cbnz	r2, 228b2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   22898:	460a      	mov	r2, r1
   2289a:	4620      	mov	r0, r4
   2289c:	2102      	movs	r1, #2
   2289e:	f7e2 fad1 	bl	4e44 <process_event>
		}
	}

	return rv;
}
   228a2:	4628      	mov	r0, r5
   228a4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   228a6:	2a05      	cmp	r2, #5
   228a8:	bf0c      	ite	eq
   228aa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   228ae:	f06f 0504 	mvnne.w	r5, #4
   228b2:	2300      	movs	r3, #0
   228b4:	e7d9      	b.n	2286a <onoff_request+0x3a>
	parent->next = child;
   228b6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   228b8:	6066      	str	r6, [r4, #4]
}
   228ba:	e7eb      	b.n	22894 <onoff_request+0x64>
		rv = -EAGAIN;
   228bc:	f06f 050a 	mvn.w	r5, #10
   228c0:	e7f7      	b.n	228b2 <onoff_request+0x82>

000228c2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   228c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   228c4:	f04f 0320 	mov.w	r3, #32
   228c8:	f3ef 8211 	mrs	r2, BASEPRI
   228cc:	f383 8812 	msr	BASEPRI_MAX, r3
   228d0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   228d4:	8b04      	ldrh	r4, [r0, #24]
   228d6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   228da:	2c02      	cmp	r4, #2
   228dc:	d00a      	beq.n	228f4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   228de:	2c01      	cmp	r4, #1
   228e0:	bf0c      	ite	eq
   228e2:	f06f 0004 	mvneq.w	r0, #4
   228e6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   228ea:	f382 8811 	msr	BASEPRI, r2
   228ee:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   228f2:	e008      	b.n	22906 <onoff_release+0x44>
	mgr->refs -= 1U;
   228f4:	8b43      	ldrh	r3, [r0, #26]
   228f6:	3b01      	subs	r3, #1
   228f8:	b29b      	uxth	r3, r3
   228fa:	8343      	strh	r3, [r0, #26]
	if (stop) {
   228fc:	b923      	cbnz	r3, 22908 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   228fe:	4621      	mov	r1, r4
   22900:	f7e2 faa0 	bl	4e44 <process_event>
	int rv = state;
   22904:	4620      	mov	r0, r4
}
   22906:	bd10      	pop	{r4, pc}
	int rv = state;
   22908:	4620      	mov	r0, r4
   2290a:	e7ee      	b.n	228ea <onoff_release+0x28>

0002290c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   2290c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   2290e:	b1b0      	cbz	r0, 2293e <onoff_cancel+0x32>
   22910:	b1a9      	cbz	r1, 2293e <onoff_cancel+0x32>
	__asm__ volatile(
   22912:	f04f 0220 	mov.w	r2, #32
   22916:	f3ef 8511 	mrs	r5, BASEPRI
   2291a:	f382 8812 	msr	BASEPRI_MAX, r2
   2291e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22922:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   22924:	f7ff ff08 	bl	22738 <sys_slist_find_and_remove>
   22928:	b130      	cbz	r0, 22938 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2292a:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   2292e:	f385 8811 	msr	BASEPRI, r5
   22932:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   22936:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   22938:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2293c:	e7f7      	b.n	2292e <onoff_cancel+0x22>
		return -EINVAL;
   2293e:	f06f 0015 	mvn.w	r0, #21
   22942:	e7f8      	b.n	22936 <onoff_cancel+0x2a>

00022944 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22944:	4604      	mov	r4, r0
   22946:	b508      	push	{r3, lr}
   22948:	4608      	mov	r0, r1
   2294a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2294c:	461a      	mov	r2, r3
   2294e:	47a0      	blx	r4
	return z_impl_z_current_get();
   22950:	f7ff fb50 	bl	21ff4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   22954:	f7e6 f8d2 	bl	8afc <z_impl_k_thread_abort>

00022958 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   22958:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2295c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2295e:	0840      	lsrs	r0, r0, #1
   22960:	4770      	bx	lr

00022962 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   22962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22964:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   22966:	f7ff fff7 	bl	22958 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2296a:	fab0 f080 	clz	r0, r0
   2296e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   22972:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   22976:	00ca      	lsls	r2, r1, #3
   22978:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2297c:	1d17      	adds	r7, r2, #4
{
   2297e:	460c      	mov	r4, r1
   22980:	3206      	adds	r2, #6
   22982:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   22984:	b956      	cbnz	r6, 2299c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   22986:	2101      	movs	r1, #1
   22988:	fa01 f000 	lsl.w	r0, r1, r0
   2298c:	68d9      	ldr	r1, [r3, #12]
   2298e:	4301      	orrs	r1, r0
   22990:	60d9      	str	r1, [r3, #12]
		b->next = c;
   22992:	f8cc 4010 	str.w	r4, [ip, #16]
   22996:	53dd      	strh	r5, [r3, r7]
   22998:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2299c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2299e:	3104      	adds	r1, #4
   229a0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   229a2:	53d8      	strh	r0, [r3, r7]
   229a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   229a8:	529e      	strh	r6, [r3, r2]
   229aa:	80c5      	strh	r5, [r0, #6]
   229ac:	525d      	strh	r5, [r3, r1]
   229ae:	e7f4      	b.n	2299a <free_list_add+0x38>

000229b0 <free_list_remove_bidx>:
{
   229b0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   229b2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   229b6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   229b8:	4299      	cmp	r1, r3
   229ba:	f102 0104 	add.w	r1, r2, #4
   229be:	d10a      	bne.n	229d6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   229c0:	2301      	movs	r3, #1
   229c2:	fa03 f202 	lsl.w	r2, r3, r2
   229c6:	68c3      	ldr	r3, [r0, #12]
   229c8:	ea23 0302 	bic.w	r3, r3, r2
   229cc:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   229ce:	2300      	movs	r3, #0
   229d0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   229d4:	bd10      	pop	{r4, pc}
   229d6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   229d8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   229dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   229e0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   229e4:	80cb      	strh	r3, [r1, #6]
   229e6:	8082      	strh	r2, [r0, #4]
}
   229e8:	e7f4      	b.n	229d4 <free_list_remove_bidx+0x24>

000229ea <free_list_remove>:
{
   229ea:	b508      	push	{r3, lr}
   229ec:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   229ee:	f7ff ffb3 	bl	22958 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   229f2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   229f6:	f1c2 021f 	rsb	r2, r2, #31
   229fa:	4618      	mov	r0, r3
}
   229fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   22a00:	f7ff bfd6 	b.w	229b0 <free_list_remove_bidx>

00022a04 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   22a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a08:	fab1 f581 	clz	r5, r1
   22a0c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   22a10:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   22a14:	4603      	mov	r3, r0
	if (b->next) {
   22a16:	693a      	ldr	r2, [r7, #16]
{
   22a18:	460e      	mov	r6, r1
	if (b->next) {
   22a1a:	b1c2      	cbz	r2, 22a4e <alloc_chunk+0x4a>
   22a1c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   22a20:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   22a22:	4618      	mov	r0, r3
   22a24:	4621      	mov	r1, r4
   22a26:	f7ff ff97 	bl	22958 <chunk_size>
   22a2a:	42b0      	cmp	r0, r6
   22a2c:	d306      	bcc.n	22a3c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   22a2e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   22a30:	4618      	mov	r0, r3
   22a32:	f7ff ffbd 	bl	229b0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   22a36:	4620      	mov	r0, r4
   22a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   22a3c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   22a40:	f1b8 0801 	subs.w	r8, r8, #1
   22a44:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   22a46:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   22a48:	d001      	beq.n	22a4e <alloc_chunk+0x4a>
   22a4a:	4282      	cmp	r2, r0
   22a4c:	d1e8      	bne.n	22a20 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   22a4e:	f1c5 0220 	rsb	r2, r5, #32
   22a52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22a56:	4094      	lsls	r4, r2
   22a58:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   22a5a:	4014      	ands	r4, r2
   22a5c:	d0eb      	beq.n	22a36 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   22a5e:	fa94 f2a4 	rbit	r2, r4
   22a62:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   22a66:	1d11      	adds	r1, r2, #4
   22a68:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   22a6c:	4621      	mov	r1, r4
   22a6e:	e7df      	b.n	22a30 <alloc_chunk+0x2c>

00022a70 <merge_chunks>:
{
   22a70:	b538      	push	{r3, r4, r5, lr}
   22a72:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22a74:	f7ff ff70 	bl	22958 <chunk_size>
{
   22a78:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22a7a:	4604      	mov	r4, r0
   22a7c:	4611      	mov	r1, r2
   22a7e:	4618      	mov	r0, r3
   22a80:	f7ff ff6a 	bl	22958 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   22a84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   22a88:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22a8a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   22a8c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   22a8e:	4618      	mov	r0, r3
   22a90:	f7ff ff62 	bl	22958 <chunk_size>
	void *cmem = &buf[c];
   22a94:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   22a96:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   22a9a:	bd38      	pop	{r3, r4, r5, pc}

00022a9c <split_chunks>:
{
   22a9c:	b538      	push	{r3, r4, r5, lr}
   22a9e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   22aa0:	f7ff ff5a 	bl	22958 <chunk_size>
{
   22aa4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   22aa6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   22aa8:	1a51      	subs	r1, r2, r1
   22aaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   22aae:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22ab0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   22ab2:	8060      	strh	r0, [r4, #2]
   22ab4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22ab8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   22aba:	8044      	strh	r4, [r0, #2]
   22abc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   22ac0:	4618      	mov	r0, r3
   22ac2:	4611      	mov	r1, r2
   22ac4:	f7ff ff48 	bl	22958 <chunk_size>
	void *cmem = &buf[c];
   22ac8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   22aca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   22ace:	bd38      	pop	{r3, r4, r5, pc}

00022ad0 <free_chunk>:
{
   22ad0:	b538      	push	{r3, r4, r5, lr}
   22ad2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   22ad4:	f7ff ff40 	bl	22958 <chunk_size>
   22ad8:	460c      	mov	r4, r1
   22ada:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   22adc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   22ae0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   22ae2:	07da      	lsls	r2, r3, #31
   22ae4:	d40a      	bmi.n	22afc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   22ae6:	4628      	mov	r0, r5
   22ae8:	f7ff ff7f 	bl	229ea <free_list_remove>
	return c + chunk_size(h, c);
   22aec:	4621      	mov	r1, r4
   22aee:	4628      	mov	r0, r5
   22af0:	f7ff ff32 	bl	22958 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   22af4:	1822      	adds	r2, r4, r0
   22af6:	4628      	mov	r0, r5
   22af8:	f7ff ffba 	bl	22a70 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   22afc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   22b00:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   22b02:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   22b06:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   22b08:	07db      	lsls	r3, r3, #31
   22b0a:	d40c      	bmi.n	22b26 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   22b0c:	4628      	mov	r0, r5
   22b0e:	f7ff ff6c 	bl	229ea <free_list_remove>
		return ((uint16_t *)cmem)[f];
   22b12:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   22b16:	4622      	mov	r2, r4
   22b18:	1a61      	subs	r1, r4, r1
   22b1a:	4628      	mov	r0, r5
   22b1c:	f7ff ffa8 	bl	22a70 <merge_chunks>
   22b20:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   22b24:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   22b26:	4621      	mov	r1, r4
   22b28:	4628      	mov	r0, r5
}
   22b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   22b2e:	f7ff bf18 	b.w	22962 <free_list_add>

00022b32 <sys_heap_free>:
	if (mem == NULL) {
   22b32:	b161      	cbz	r1, 22b4e <sys_heap_free+0x1c>
   22b34:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22b36:	3904      	subs	r1, #4
   22b38:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   22b3a:	f021 0307 	bic.w	r3, r1, #7
   22b3e:	4403      	add	r3, r0
	free_chunk(h, c);
   22b40:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22b42:	885a      	ldrh	r2, [r3, #2]
   22b44:	f022 0201 	bic.w	r2, r2, #1
   22b48:	805a      	strh	r2, [r3, #2]
   22b4a:	f7ff bfc1 	b.w	22ad0 <free_chunk>
}
   22b4e:	4770      	bx	lr

00022b50 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   22b50:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   22b52:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   22b54:	b909      	cbnz	r1, 22b5a <sys_heap_alloc+0xa>
		return NULL;
   22b56:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   22b58:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   22b5a:	68ab      	ldr	r3, [r5, #8]
   22b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   22b60:	d9f9      	bls.n	22b56 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22b62:	310b      	adds	r1, #11
   22b64:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   22b66:	4621      	mov	r1, r4
   22b68:	4628      	mov	r0, r5
   22b6a:	f7ff ff4b 	bl	22a04 <alloc_chunk>
	if (c == 0U) {
   22b6e:	4606      	mov	r6, r0
   22b70:	2800      	cmp	r0, #0
   22b72:	d0f0      	beq.n	22b56 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   22b74:	4601      	mov	r1, r0
   22b76:	4628      	mov	r0, r5
   22b78:	f7ff feee 	bl	22958 <chunk_size>
   22b7c:	42a0      	cmp	r0, r4
   22b7e:	d907      	bls.n	22b90 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   22b80:	1932      	adds	r2, r6, r4
   22b82:	4628      	mov	r0, r5
   22b84:	f7ff ff8a 	bl	22a9c <split_chunks>
		free_list_add(h, c + chunk_sz);
   22b88:	4611      	mov	r1, r2
   22b8a:	4628      	mov	r0, r5
   22b8c:	f7ff fee9 	bl	22962 <free_list_add>
	void *cmem = &buf[c];
   22b90:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   22b94:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22b96:	8853      	ldrh	r3, [r2, #2]
   22b98:	f043 0301 	orr.w	r3, r3, #1
   22b9c:	8053      	strh	r3, [r2, #2]
   22b9e:	3004      	adds	r0, #4
	return mem;
   22ba0:	e7da      	b.n	22b58 <sys_heap_alloc+0x8>

00022ba2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   22ba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ba6:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   22ba8:	424a      	negs	r2, r1
   22baa:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   22bae:	ea31 0202 	bics.w	r2, r1, r2
{
   22bb2:	4603      	mov	r3, r0
	if (align != rew) {
   22bb4:	d00a      	beq.n	22bcc <sys_heap_aligned_alloc+0x2a>
		return false;
   22bb6:	2f04      	cmp	r7, #4
   22bb8:	463a      	mov	r2, r7
   22bba:	46b9      	mov	r9, r7
   22bbc:	bf28      	it	cs
   22bbe:	2204      	movcs	r2, #4
		align -= rew;
   22bc0:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   22bc2:	b974      	cbnz	r4, 22be2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   22bc4:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   22bc6:	4628      	mov	r0, r5
   22bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   22bcc:	2904      	cmp	r1, #4
   22bce:	d804      	bhi.n	22bda <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   22bd0:	4621      	mov	r1, r4
}
   22bd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   22bd6:	f7ff bfbb 	b.w	22b50 <sys_heap_alloc>
		rew = 0;
   22bda:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   22bde:	2204      	movs	r2, #4
   22be0:	e7ef      	b.n	22bc2 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   22be2:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   22be4:	68b3      	ldr	r3, [r6, #8]
   22be6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   22bea:	d9eb      	bls.n	22bc4 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22bec:	f104 010b 	add.w	r1, r4, #11
   22bf0:	4439      	add	r1, r7
   22bf2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   22bf4:	08c9      	lsrs	r1, r1, #3
   22bf6:	4630      	mov	r0, r6
   22bf8:	f7ff ff04 	bl	22a04 <alloc_chunk>
	if (c0 == 0) {
   22bfc:	4680      	mov	r8, r0
   22bfe:	2800      	cmp	r0, #0
   22c00:	d0e0      	beq.n	22bc4 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   22c02:	f109 0504 	add.w	r5, r9, #4
   22c06:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   22c0a:	1e7b      	subs	r3, r7, #1
   22c0c:	4435      	add	r5, r6
   22c0e:	441d      	add	r5, r3
   22c10:	427f      	negs	r7, r7
   22c12:	403d      	ands	r5, r7
   22c14:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22c18:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22c1a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22c1c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22c1e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22c20:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   22c24:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   22c26:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22c2a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   22c2e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   22c32:	d208      	bcs.n	22c46 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   22c34:	4601      	mov	r1, r0
   22c36:	463a      	mov	r2, r7
   22c38:	4630      	mov	r0, r6
   22c3a:	f7ff ff2f 	bl	22a9c <split_chunks>
		free_list_add(h, c0);
   22c3e:	4641      	mov	r1, r8
   22c40:	4630      	mov	r0, r6
   22c42:	f7ff fe8e 	bl	22962 <free_list_add>
	return c + chunk_size(h, c);
   22c46:	4639      	mov	r1, r7
   22c48:	4630      	mov	r0, r6
   22c4a:	f7ff fe85 	bl	22958 <chunk_size>
   22c4e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   22c50:	4284      	cmp	r4, r0
   22c52:	d207      	bcs.n	22c64 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   22c54:	4630      	mov	r0, r6
   22c56:	4622      	mov	r2, r4
   22c58:	f7ff ff20 	bl	22a9c <split_chunks>
		free_list_add(h, c_end);
   22c5c:	4621      	mov	r1, r4
   22c5e:	4630      	mov	r0, r6
   22c60:	f7ff fe7f 	bl	22962 <free_list_add>
	void *cmem = &buf[c];
   22c64:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22c68:	8873      	ldrh	r3, [r6, #2]
   22c6a:	f043 0301 	orr.w	r3, r3, #1
   22c6e:	8073      	strh	r3, [r6, #2]
   22c70:	e7a9      	b.n	22bc6 <sys_heap_aligned_alloc+0x24>

00022c72 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   22c72:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   22c74:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   22c76:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   22c78:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   22c7c:	f021 0107 	bic.w	r1, r1, #7
{
   22c80:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   22c82:	1acd      	subs	r5, r1, r3
   22c84:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   22c86:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   22c88:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   22c8c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   22c90:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22c92:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   22c94:	2600      	movs	r6, #0
   22c96:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   22c98:	f1c0 0020 	rsb	r0, r0, #32
   22c9c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   22ca0:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   22ca2:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   22ca4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   22ca8:	4284      	cmp	r4, r0
   22caa:	d118      	bne.n	22cde <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22cac:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22cae:	f040 0001 	orr.w	r0, r0, #1
   22cb2:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   22cb4:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   22cb8:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22cba:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   22cbc:	801e      	strh	r6, [r3, #0]
   22cbe:	8067      	strh	r7, [r4, #2]
   22cc0:	195c      	adds	r4, r3, r5
   22cc2:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   22cc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   22cca:	8066      	strh	r6, [r4, #2]
   22ccc:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22cce:	8850      	ldrh	r0, [r2, #2]
   22cd0:	f040 0001 	orr.w	r0, r0, #1
   22cd4:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   22cd6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   22cd8:	4618      	mov	r0, r3
   22cda:	f7ff be42 	b.w	22962 <free_list_add>
		h->buckets[i].next = 0;
   22cde:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   22ce2:	e7e1      	b.n	22ca8 <sys_heap_init+0x36>

00022ce4 <_ldiv5>:
	uint32_t v_lo = *v;
   22ce4:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   22ce8:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   22cea:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   22cee:	fba2 2403 	umull	r2, r4, r2, r3
   22cf2:	18d5      	adds	r5, r2, r3
   22cf4:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   22cf8:	fba1 1303 	umull	r1, r3, r1, r3
   22cfc:	1852      	adds	r2, r2, r1
   22cfe:	eb44 0403 	adc.w	r4, r4, r3
   22d02:	1952      	adds	r2, r2, r5
   22d04:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   22d08:	1889      	adds	r1, r1, r2
   22d0a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   22d0e:	e9c0 1300 	strd	r1, r3, [r0]
}
   22d12:	bd30      	pop	{r4, r5, pc}

00022d14 <_get_digit>:
	if (*digit_count > 0) {
   22d14:	680a      	ldr	r2, [r1, #0]
   22d16:	2a00      	cmp	r2, #0
{
   22d18:	b510      	push	{r4, lr}
   22d1a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   22d1c:	dd0f      	ble.n	22d3e <_get_digit+0x2a>
		--*digit_count;
   22d1e:	3a01      	subs	r2, #1
   22d20:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   22d22:	681a      	ldr	r2, [r3, #0]
   22d24:	6844      	ldr	r4, [r0, #4]
   22d26:	200a      	movs	r0, #10
   22d28:	fba2 1200 	umull	r1, r2, r2, r0
   22d2c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   22d30:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   22d32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   22d36:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   22d3a:	3030      	adds	r0, #48	; 0x30
}
   22d3c:	bd10      	pop	{r4, pc}
		rval = '0';
   22d3e:	2030      	movs	r0, #48	; 0x30
   22d40:	e7fc      	b.n	22d3c <_get_digit+0x28>

00022d42 <encode_uint>:
{
   22d42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d46:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   22d48:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   22d4a:	2b6f      	cmp	r3, #111	; 0x6f
{
   22d4c:	4680      	mov	r8, r0
   22d4e:	460f      	mov	r7, r1
   22d50:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22d52:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   22d56:	d029      	beq.n	22dac <encode_uint+0x6a>
   22d58:	d824      	bhi.n	22da4 <encode_uint+0x62>
		return 16;
   22d5a:	2b58      	cmp	r3, #88	; 0x58
   22d5c:	bf14      	ite	ne
   22d5e:	260a      	movne	r6, #10
   22d60:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   22d62:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   22d66:	4632      	mov	r2, r6
   22d68:	2300      	movs	r3, #0
   22d6a:	4640      	mov	r0, r8
   22d6c:	4639      	mov	r1, r7
   22d6e:	f7de f9c7 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22d72:	2a09      	cmp	r2, #9
   22d74:	b2d4      	uxtb	r4, r2
   22d76:	d81e      	bhi.n	22db6 <encode_uint+0x74>
   22d78:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   22d7a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22d7c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   22d7e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22d82:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   22d86:	d301      	bcc.n	22d8c <encode_uint+0x4a>
   22d88:	45d1      	cmp	r9, sl
   22d8a:	d811      	bhi.n	22db0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   22d8c:	782b      	ldrb	r3, [r5, #0]
   22d8e:	069b      	lsls	r3, r3, #26
   22d90:	d505      	bpl.n	22d9e <encode_uint+0x5c>
		if (radix == 8) {
   22d92:	2e08      	cmp	r6, #8
   22d94:	d115      	bne.n	22dc2 <encode_uint+0x80>
			conv->altform_0 = true;
   22d96:	78ab      	ldrb	r3, [r5, #2]
   22d98:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   22d9c:	70ab      	strb	r3, [r5, #2]
}
   22d9e:	4648      	mov	r0, r9
   22da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22da4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22da8:	2b70      	cmp	r3, #112	; 0x70
   22daa:	e7d7      	b.n	22d5c <encode_uint+0x1a>
	switch (specifier) {
   22dac:	2608      	movs	r6, #8
   22dae:	e7d8      	b.n	22d62 <encode_uint+0x20>
		value /= radix;
   22db0:	4680      	mov	r8, r0
   22db2:	460f      	mov	r7, r1
   22db4:	e7d7      	b.n	22d66 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22db6:	f1bb 0f19 	cmp.w	fp, #25
   22dba:	bf94      	ite	ls
   22dbc:	3437      	addls	r4, #55	; 0x37
   22dbe:	3457      	addhi	r4, #87	; 0x57
   22dc0:	e7db      	b.n	22d7a <encode_uint+0x38>
		} else if (radix == 16) {
   22dc2:	2e10      	cmp	r6, #16
   22dc4:	d1eb      	bne.n	22d9e <encode_uint+0x5c>
			conv->altform_0c = true;
   22dc6:	78ab      	ldrb	r3, [r5, #2]
   22dc8:	f043 0310 	orr.w	r3, r3, #16
   22dcc:	e7e6      	b.n	22d9c <encode_uint+0x5a>

00022dce <outs>:
{
   22dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22dd2:	4607      	mov	r7, r0
   22dd4:	4688      	mov	r8, r1
   22dd6:	4615      	mov	r5, r2
   22dd8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22dda:	4614      	mov	r4, r2
   22ddc:	42b4      	cmp	r4, r6
   22dde:	eba4 0005 	sub.w	r0, r4, r5
   22de2:	d302      	bcc.n	22dea <outs+0x1c>
   22de4:	b93e      	cbnz	r6, 22df6 <outs+0x28>
   22de6:	7823      	ldrb	r3, [r4, #0]
   22de8:	b12b      	cbz	r3, 22df6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   22dea:	f814 0b01 	ldrb.w	r0, [r4], #1
   22dee:	4641      	mov	r1, r8
   22df0:	47b8      	blx	r7
		if (rc < 0) {
   22df2:	2800      	cmp	r0, #0
   22df4:	daf2      	bge.n	22ddc <outs+0xe>
}
   22df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022dfa <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   22dfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   22dfe:	4770      	bx	lr

00022e00 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
   22e00:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
   22e02:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
   22e06:	42ac      	cmp	r4, r5
   22e08:	d207      	bcs.n	22e1a <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
   22e0a:	6906      	ldr	r6, [r0, #16]
   22e0c:	f7ff fff5 	bl	22dfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   22e10:	fbb0 f0f6 	udiv	r0, r0, r6
   22e14:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
   22e16:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   22e1a:	1b63      	subs	r3, r4, r5
   22e1c:	4258      	negs	r0, r3
   22e1e:	4158      	adcs	r0, r3
   22e20:	bd70      	pop	{r4, r5, r6, pc}

00022e22 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   22e22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
   22e26:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
   22e28:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
   22e2c:	454c      	cmp	r4, r9
{
   22e2e:	4605      	mov	r5, r0
   22e30:	460e      	mov	r6, r1
   22e32:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
   22e34:	d907      	bls.n	22e46 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   22e36:	6907      	ldr	r7, [r0, #16]
   22e38:	f7ff ffdf 	bl	22dfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   22e3c:	fbb0 f0f7 	udiv	r0, r0, r7
   22e40:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
   22e42:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22e46:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   22e48:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22e4a:	692f      	ldr	r7, [r5, #16]
   22e4c:	b18b      	cbz	r3, 22e72 <ring_buf_put_claim+0x50>
   22e4e:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
   22e50:	443c      	add	r4, r7
   22e52:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   22e56:	4540      	cmp	r0, r8
   22e58:	bf28      	it	cs
   22e5a:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
   22e5c:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   22e5e:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
   22e60:	42b8      	cmp	r0, r7
   22e62:	bf28      	it	cs
   22e64:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   22e66:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   22e68:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   22e6a:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
   22e6c:	60a9      	str	r1, [r5, #8]

	return allocated;
}
   22e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22e72:	fbb1 f3f7 	udiv	r3, r1, r7
   22e76:	fb07 1313 	mls	r3, r7, r3, r1
   22e7a:	e7e9      	b.n	22e50 <ring_buf_put_claim+0x2e>

00022e7c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   22e7c:	b570      	push	{r4, r5, r6, lr}
   22e7e:	4605      	mov	r5, r0
   22e80:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   22e82:	f7ff ffba 	bl	22dfa <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
   22e86:	686e      	ldr	r6, [r5, #4]
   22e88:	692a      	ldr	r2, [r5, #16]
   22e8a:	682b      	ldr	r3, [r5, #0]
   22e8c:	1931      	adds	r1, r6, r4
   22e8e:	4413      	add	r3, r2
   22e90:	4299      	cmp	r1, r3
   22e92:	d80c      	bhi.n	22eae <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   22e94:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
   22e96:	bf83      	ittte	hi
   22e98:	fbb0 f3f2 	udivhi	r3, r0, r2
   22e9c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   22ea0:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
   22ea2:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
   22ea4:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   22ea6:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
   22eaa:	2000      	movs	r0, #0
}
   22eac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22eae:	f06f 0015 	mvn.w	r0, #21
   22eb2:	e7fb      	b.n	22eac <ring_buf_put_finish+0x30>

00022eb4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   22eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22eb8:	4680      	mov	r8, r0
   22eba:	460e      	mov	r6, r1
   22ebc:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   22ebe:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   22ec0:	462a      	mov	r2, r5
   22ec2:	a901      	add	r1, sp, #4
   22ec4:	4640      	mov	r0, r8
   22ec6:	f7ff ffac 	bl	22e22 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   22eca:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   22ecc:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   22ece:	4602      	mov	r2, r0
   22ed0:	9801      	ldr	r0, [sp, #4]
   22ed2:	f001 fd64 	bl	2499e <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   22ed6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   22ed8:	4427      	add	r7, r4
		data += partial_size;
   22eda:	4426      	add	r6, r4
	} while (size && partial_size);
   22edc:	d001      	beq.n	22ee2 <ring_buf_put+0x2e>
   22ede:	2c00      	cmp	r4, #0
   22ee0:	d1ee      	bne.n	22ec0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   22ee2:	4639      	mov	r1, r7
   22ee4:	4640      	mov	r0, r8
   22ee6:	f7ff ffc9 	bl	22e7c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   22eea:	4638      	mov	r0, r7
   22eec:	b002      	add	sp, #8
   22eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022ef2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   22ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   22ef6:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   22ef8:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   22efa:	42b3      	cmp	r3, r6
{
   22efc:	4604      	mov	r4, r0
   22efe:	460f      	mov	r7, r1
   22f00:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   22f02:	d907      	bls.n	22f14 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
   22f04:	6905      	ldr	r5, [r0, #16]
   22f06:	f7ff ff78 	bl	22dfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   22f0a:	fbb0 f1f5 	udiv	r1, r0, r5
   22f0e:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
   22f10:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22f14:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   22f16:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22f18:	6923      	ldr	r3, [r4, #16]
   22f1a:	b185      	cbz	r5, 22f3e <ring_buf_get_claim+0x4c>
   22f1c:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   22f1e:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   22f20:	4540      	cmp	r0, r8
   22f22:	bf28      	it	cs
   22f24:	4640      	movcs	r0, r8
   22f26:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   22f28:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   22f2a:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
   22f2c:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   22f2e:	bf28      	it	cs
   22f30:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   22f32:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
   22f34:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   22f36:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   22f38:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
   22f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   22f3e:	fbb1 f5f3 	udiv	r5, r1, r3
   22f42:	fb03 1515 	mls	r5, r3, r5, r1
   22f46:	e7ea      	b.n	22f1e <ring_buf_get_claim+0x2c>

00022f48 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   22f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   22f4a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   22f4c:	68c3      	ldr	r3, [r0, #12]
   22f4e:	42b3      	cmp	r3, r6
{
   22f50:	4605      	mov	r5, r0
   22f52:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   22f54:	d914      	bls.n	22f80 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
   22f56:	6907      	ldr	r7, [r0, #16]
   22f58:	f7ff ff4f 	bl	22dfa <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
   22f5c:	fbb0 f1f7 	udiv	r1, r0, r7
   22f60:	3901      	subs	r1, #1
   22f62:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
   22f66:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
   22f68:	6829      	ldr	r1, [r5, #0]
   22f6a:	4421      	add	r1, r4
   22f6c:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   22f6e:	bf9f      	itttt	ls
   22f70:	1ac9      	subls	r1, r1, r3
   22f72:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   22f74:	60e9      	strls	r1, [r5, #12]

	return 0;
   22f76:	2000      	movls	r0, #0
		return -EINVAL;
   22f78:	bf88      	it	hi
   22f7a:	f06f 0015 	mvnhi.w	r0, #21
}
   22f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   22f80:	2300      	movs	r3, #0
   22f82:	e7f1      	b.n	22f68 <ring_buf_get_finish+0x20>

00022f84 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   22f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22f88:	4680      	mov	r8, r0
   22f8a:	460d      	mov	r5, r1
   22f8c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   22f8e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   22f90:	4632      	mov	r2, r6
   22f92:	a901      	add	r1, sp, #4
   22f94:	4640      	mov	r0, r8
   22f96:	f7ff ffac 	bl	22ef2 <ring_buf_get_claim>
   22f9a:	4604      	mov	r4, r0
		if (data) {
   22f9c:	b12d      	cbz	r5, 22faa <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   22f9e:	4602      	mov	r2, r0
   22fa0:	9901      	ldr	r1, [sp, #4]
   22fa2:	4628      	mov	r0, r5
   22fa4:	f001 fcfb 	bl	2499e <memcpy>
			data += partial_size;
   22fa8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   22faa:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   22fac:	4427      	add	r7, r4
	} while (size && partial_size);
   22fae:	d001      	beq.n	22fb4 <ring_buf_get+0x30>
   22fb0:	2c00      	cmp	r4, #0
   22fb2:	d1ed      	bne.n	22f90 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   22fb4:	4639      	mov	r1, r7
   22fb6:	4640      	mov	r0, r8
   22fb8:	f7ff ffc6 	bl	22f48 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   22fbc:	4638      	mov	r0, r7
   22fbe:	b002      	add	sp, #8
   22fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022fc4 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   22fc4:	4602      	mov	r2, r0
   22fc6:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   22fc8:	68c0      	ldr	r0, [r0, #12]
   22fca:	6814      	ldr	r4, [r2, #0]
   22fcc:	42a0      	cmp	r0, r4
   22fce:	d904      	bls.n	22fda <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   22fd0:	3801      	subs	r0, #1
   22fd2:	1b00      	subs	r0, r0, r4
   22fd4:	6008      	str	r0, [r1, #0]

		return false;
   22fd6:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   22fd8:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   22fda:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   22fdc:	b918      	cbnz	r0, 22fe6 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   22fde:	3b01      	subs	r3, #1
   22fe0:	1b1b      	subs	r3, r3, r4
   22fe2:	600b      	str	r3, [r1, #0]
		return false;
   22fe4:	e7f8      	b.n	22fd8 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   22fe6:	1b1b      	subs	r3, r3, r4
   22fe8:	600b      	str	r3, [r1, #0]
	return true;
   22fea:	2001      	movs	r0, #1
   22fec:	e7f4      	b.n	22fd8 <free_space+0x14>

00022fee <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   22fee:	b510      	push	{r4, lr}
   22ff0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   22ff2:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   22ff4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   22ff6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   22ff8:	07d2      	lsls	r2, r2, #31
   22ffa:	d502      	bpl.n	23002 <idx_inc+0x14>
		return i & (buffer->size - 1);
   22ffc:	3b01      	subs	r3, #1
   22ffe:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   23000:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   23002:	4298      	cmp	r0, r3
   23004:	bf28      	it	cs
   23006:	1ac0      	subcs	r0, r0, r3
   23008:	e7fa      	b.n	23000 <idx_inc+0x12>

0002300a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2300a:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2300c:	69c2      	ldr	r2, [r0, #28]
{
   2300e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   23010:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23012:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   23014:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23018:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2301c:	462a      	mov	r2, r5
   2301e:	6801      	ldr	r1, [r0, #0]
{
   23020:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   23022:	f7ff ffe4 	bl	22fee <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   23026:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   23028:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2302a:	462a      	mov	r2, r5
   2302c:	4620      	mov	r0, r4
   2302e:	f7ff ffde 	bl	22fee <idx_inc>
   23032:	6060      	str	r0, [r4, #4]
}
   23034:	bd38      	pop	{r3, r4, r5, pc}

00023036 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   23036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2303a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2303e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   23042:	461f      	mov	r7, r3
	*user_packet = false;
   23044:	2300      	movs	r3, #0
   23046:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   23048:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2304c:	f003 0303 	and.w	r3, r3, #3
   23050:	2b02      	cmp	r3, #2
{
   23052:	4604      	mov	r4, r0
   23054:	468b      	mov	fp, r1
   23056:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   23058:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2305c:	d103      	bne.n	23066 <drop_item_locked+0x30>
		return item->skip.len;
   2305e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   23062:	08ad      	lsrs	r5, r5, #2
   23064:	d12e      	bne.n	230c4 <drop_item_locked+0x8e>
   23066:	69a3      	ldr	r3, [r4, #24]
   23068:	4630      	mov	r0, r6
   2306a:	4798      	blx	r3
   2306c:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   2306e:	f1b8 0f00 	cmp.w	r8, #0
   23072:	d036      	beq.n	230e2 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   23074:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   23078:	079b      	lsls	r3, r3, #30
   2307a:	d52f      	bpl.n	230dc <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   2307c:	f10b 0101 	add.w	r1, fp, #1
   23080:	4620      	mov	r0, r4
   23082:	f7ff ffc2 	bl	2300a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23086:	6861      	ldr	r1, [r4, #4]
   23088:	462a      	mov	r2, r5
   2308a:	4620      	mov	r0, r4
   2308c:	f7ff ffaf 	bl	22fee <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   23090:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23092:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   23094:	462a      	mov	r2, r5
   23096:	4620      	mov	r0, r4
   23098:	f7ff ffa9 	bl	22fee <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2309c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2309e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   230a0:	68e1      	ldr	r1, [r4, #12]
   230a2:	4620      	mov	r0, r4
   230a4:	f7ff ffa3 	bl	22fee <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   230a8:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   230aa:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   230ae:	f002 0203 	and.w	r2, r2, #3
   230b2:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   230b4:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   230b8:	d10c      	bne.n	230d4 <drop_item_locked+0x9e>
		return item->skip.len;
   230ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   230be:	089b      	lsrs	r3, r3, #2
   230c0:	d008      	beq.n	230d4 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   230c2:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   230c4:	68e1      	ldr	r1, [r4, #12]
   230c6:	462a      	mov	r2, r5
   230c8:	4620      	mov	r0, r4
   230ca:	f7ff ff90 	bl	22fee <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   230ce:	e9c4 0002 	strd	r0, r0, [r4, #8]
   230d2:	e007      	b.n	230e4 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   230d4:	69a3      	ldr	r3, [r4, #24]
   230d6:	4630      	mov	r0, r6
   230d8:	4798      	blx	r3
   230da:	4405      	add	r5, r0
			*user_packet = true;
   230dc:	2301      	movs	r3, #1
   230de:	703b      	strb	r3, [r7, #0]
   230e0:	e7f0      	b.n	230c4 <drop_item_locked+0x8e>
		item = NULL;
   230e2:	4646      	mov	r6, r8
	}

	return item;
}
   230e4:	4630      	mov	r0, r6
   230e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000230ea <mpsc_pbuf_init>:
{
   230ea:	b538      	push	{r3, r4, r5, lr}
   230ec:	460d      	mov	r5, r1
   230ee:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   230f0:	221c      	movs	r2, #28
   230f2:	2100      	movs	r1, #0
   230f4:	f001 fc5e 	bl	249b4 <memset>
	buffer->get_wlen = cfg->get_wlen;
   230f8:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   230fa:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   230fc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   230fe:	68ab      	ldr	r3, [r5, #8]
   23100:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   23102:	682b      	ldr	r3, [r5, #0]
   23104:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   23106:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   23108:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2310a:	b122      	cbz	r2, 23116 <mpsc_pbuf_init+0x2c>
   2310c:	1e51      	subs	r1, r2, #1
   2310e:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   23110:	bf08      	it	eq
   23112:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   23116:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   23118:	2201      	movs	r2, #1
   2311a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2311e:	2100      	movs	r1, #0
}
   23120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23124:	f004 be29 	b.w	27d7a <z_impl_k_sem_init>

00023128 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   23128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2312c:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   2312e:	6a03      	ldr	r3, [r0, #32]
   23130:	3b01      	subs	r3, #1
   23132:	428b      	cmp	r3, r1
{
   23134:	b085      	sub	sp, #20
   23136:	4604      	mov	r4, r0
   23138:	460f      	mov	r7, r1
   2313a:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   2313c:	d364      	bcc.n	23208 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   2313e:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   23140:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   23142:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   23146:	f04f 0320 	mov.w	r3, #32
   2314a:	f3ef 8611 	mrs	r6, BASEPRI
   2314e:	f383 8812 	msr	BASEPRI_MAX, r3
   23152:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   23156:	a903      	add	r1, sp, #12
   23158:	4620      	mov	r0, r4
   2315a:	f7ff ff33 	bl	22fc4 <free_space>
		if (free_wlen >= wlen) {
   2315e:	9903      	ldr	r1, [sp, #12]
   23160:	42b9      	cmp	r1, r7
   23162:	d321      	bcc.n	231a8 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   23164:	6821      	ldr	r1, [r4, #0]
			item =
   23166:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   23168:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   2316c:	f022 0203 	bic.w	r2, r2, #3
   23170:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   23174:	4620      	mov	r0, r4
   23176:	463a      	mov	r2, r7
			item =
   23178:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   2317c:	f7ff ff37 	bl	22fee <idx_inc>
		cont = false;
   23180:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   23182:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   23184:	f386 8811 	msr	BASEPRI, r6
   23188:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   2318c:	2b00      	cmp	r3, #0
   2318e:	d03d      	beq.n	2320c <mpsc_pbuf_alloc+0xe4>
   23190:	2d00      	cmp	r5, #0
   23192:	d0d8      	beq.n	23146 <mpsc_pbuf_alloc+0x1e>
   23194:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23198:	2b00      	cmp	r3, #0
   2319a:	d0d4      	beq.n	23146 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   2319c:	4629      	mov	r1, r5
   2319e:	6963      	ldr	r3, [r4, #20]
   231a0:	4620      	mov	r0, r4
   231a2:	4798      	blx	r3
			dropped_item = NULL;
   231a4:	2500      	movs	r5, #0
   231a6:	e7ce      	b.n	23146 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   231a8:	b128      	cbz	r0, 231b6 <mpsc_pbuf_alloc+0x8e>
   231aa:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   231ac:	4620      	mov	r0, r4
   231ae:	f7ff ff2c 	bl	2300a <add_skip_item>
			cont = true;
   231b2:	9b01      	ldr	r3, [sp, #4]
   231b4:	e7e6      	b.n	23184 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   231b6:	ea58 0309 	orrs.w	r3, r8, r9
   231ba:	d017      	beq.n	231ec <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   231bc:	f004 fced 	bl	27b9a <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   231c0:	b9a0      	cbnz	r0, 231ec <mpsc_pbuf_alloc+0xc4>
   231c2:	f386 8811 	msr	BASEPRI, r6
   231c6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   231ca:	4642      	mov	r2, r8
   231cc:	464b      	mov	r3, r9
   231ce:	4658      	mov	r0, fp
   231d0:	f7fe fa38 	bl	21644 <z_impl_k_sem_take>
	__asm__ volatile(
   231d4:	f04f 0320 	mov.w	r3, #32
   231d8:	f3ef 8611 	mrs	r6, BASEPRI
   231dc:	f383 8812 	msr	BASEPRI_MAX, r3
   231e0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   231e4:	fab0 f380 	clz	r3, r0
   231e8:	095b      	lsrs	r3, r3, #5
   231ea:	e7cb      	b.n	23184 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   231ec:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   231ee:	9903      	ldr	r1, [sp, #12]
   231f0:	f10d 030b 	add.w	r3, sp, #11
   231f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   231f8:	4620      	mov	r0, r4
   231fa:	f7ff ff1c 	bl	23036 <drop_item_locked>
			cont = dropped_item != NULL;
   231fe:	1e03      	subs	r3, r0, #0
   23200:	4605      	mov	r5, r0
   23202:	bf18      	it	ne
   23204:	2301      	movne	r3, #1
   23206:	e7bd      	b.n	23184 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   23208:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2320c:	4650      	mov	r0, sl
   2320e:	b005      	add	sp, #20
   23210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023214 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   23214:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   23216:	6983      	ldr	r3, [r0, #24]
{
   23218:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2321a:	4608      	mov	r0, r1
{
   2321c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2321e:	4798      	blx	r3
   23220:	4602      	mov	r2, r0
   23222:	f04f 0320 	mov.w	r3, #32
   23226:	f3ef 8611 	mrs	r6, BASEPRI
   2322a:	f383 8812 	msr	BASEPRI_MAX, r3
   2322e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   23232:	782b      	ldrb	r3, [r5, #0]
   23234:	f043 0301 	orr.w	r3, r3, #1
   23238:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2323a:	6861      	ldr	r1, [r4, #4]
   2323c:	4620      	mov	r0, r4
   2323e:	f7ff fed6 	bl	22fee <idx_inc>
   23242:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   23244:	f386 8811 	msr	BASEPRI, r6
   23248:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2324c:	bd70      	pop	{r4, r5, r6, pc}

0002324e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2324e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23252:	4604      	mov	r4, r0
	__asm__ volatile(
   23254:	f04f 0320 	mov.w	r3, #32
   23258:	f3ef 8611 	mrs	r6, BASEPRI
   2325c:	f383 8812 	msr	BASEPRI_MAX, r3
   23260:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   23264:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   23268:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2326a:	bf88      	it	hi
   2326c:	6a23      	ldrhi	r3, [r4, #32]
   2326e:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   23270:	b1f3      	cbz	r3, 232b0 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   23272:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   23274:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   23278:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   2327c:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   23280:	d016      	beq.n	232b0 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   23282:	2b02      	cmp	r3, #2
   23284:	d103      	bne.n	2328e <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   23286:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   2328a:	08ad      	lsrs	r5, r5, #2
   2328c:	d115      	bne.n	232ba <mpsc_pbuf_claim+0x6c>
   2328e:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   23290:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   23292:	d50f      	bpl.n	232b4 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   23294:	f042 0202 	orr.w	r2, r2, #2
   23298:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2329c:	4640      	mov	r0, r8
   2329e:	4798      	blx	r3
   232a0:	4639      	mov	r1, r7
   232a2:	4602      	mov	r2, r0
   232a4:	4620      	mov	r0, r4
   232a6:	f7ff fea2 	bl	22fee <idx_inc>
		cont = false;
   232aa:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   232ac:	60a0      	str	r0, [r4, #8]
   232ae:	e011      	b.n	232d4 <mpsc_pbuf_claim+0x86>
			item = NULL;
   232b0:	4698      	mov	r8, r3
   232b2:	e00f      	b.n	232d4 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   232b4:	4640      	mov	r0, r8
   232b6:	4798      	blx	r3
   232b8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   232ba:	68a1      	ldr	r1, [r4, #8]
   232bc:	462a      	mov	r2, r5
   232be:	4620      	mov	r0, r4
   232c0:	f7ff fe95 	bl	22fee <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   232c4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   232c6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   232c8:	462a      	mov	r2, r5
   232ca:	4620      	mov	r0, r4
   232cc:	f7ff fe8f 	bl	22fee <idx_inc>
				cont = true;
   232d0:	2301      	movs	r3, #1
				buffer->rd_idx =
   232d2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   232d4:	f386 8811 	msr	BASEPRI, r6
   232d8:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   232dc:	2b00      	cmp	r3, #0
   232de:	d1b9      	bne.n	23254 <mpsc_pbuf_claim+0x6>

	return item;
}
   232e0:	4640      	mov	r0, r8
   232e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000232e6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   232e6:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   232e8:	6983      	ldr	r3, [r0, #24]
{
   232ea:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   232ec:	4608      	mov	r0, r1
{
   232ee:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   232f0:	4798      	blx	r3
   232f2:	4602      	mov	r2, r0
	__asm__ volatile(
   232f4:	f04f 0320 	mov.w	r3, #32
   232f8:	f3ef 8611 	mrs	r6, BASEPRI
   232fc:	f383 8812 	msr	BASEPRI_MAX, r3
   23300:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   23304:	782b      	ldrb	r3, [r5, #0]
   23306:	f36f 0300 	bfc	r3, #0, #1
   2330a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2330c:	6923      	ldr	r3, [r4, #16]
   2330e:	079b      	lsls	r3, r3, #30
   23310:	d505      	bpl.n	2331e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   23312:	68e1      	ldr	r1, [r4, #12]
   23314:	69e3      	ldr	r3, [r4, #28]
   23316:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2331a:	429d      	cmp	r5, r3
   2331c:	d112      	bne.n	23344 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2331e:	782b      	ldrb	r3, [r5, #0]
   23320:	f36f 0341 	bfc	r3, #1, #1
   23324:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   23326:	68e1      	ldr	r1, [r4, #12]
   23328:	4620      	mov	r0, r4
   2332a:	f7ff fe60 	bl	22fee <idx_inc>
   2332e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23330:	f386 8811 	msr	BASEPRI, r6
   23334:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   23338:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23340:	f7fe b95a 	b.w	215f8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   23344:	682b      	ldr	r3, [r5, #0]
   23346:	f360 039f 	bfi	r3, r0, #2, #30
   2334a:	602b      	str	r3, [r5, #0]
   2334c:	e7f0      	b.n	23330 <mpsc_pbuf_free+0x4a>

0002334e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2334e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   23352:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   23354:	bf8a      	itet	hi
   23356:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   23358:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2335a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2335c:	1e18      	subs	r0, r3, #0
   2335e:	bf18      	it	ne
   23360:	2001      	movne	r0, #1
   23362:	4770      	bx	lr

00023364 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   23364:	4770      	bx	lr

00023366 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   23366:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   23368:	075b      	lsls	r3, r3, #29
   2336a:	d40b      	bmi.n	23384 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2336c:	6803      	ldr	r3, [r0, #0]
   2336e:	8840      	ldrh	r0, [r0, #2]
   23370:	f3c3 2349 	ubfx	r3, r3, #9, #10
   23374:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   23378:	4418      	add	r0, r3
   2337a:	3013      	adds	r0, #19
   2337c:	f020 0007 	bic.w	r0, r0, #7
   23380:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   23382:	4770      	bx	lr
	return 0;
   23384:	2000      	movs	r0, #0
}
   23386:	4770      	bx	lr

00023388 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   23388:	f004 b9b6 	b.w	276f8 <sys_clock_cycle_get_32>

0002338c <dummy_timestamp>:
   2338c:	2000      	movs	r0, #0
   2338e:	4770      	bx	lr

00023390 <z_log_vprintk>:
{
   23390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   23392:	2300      	movs	r3, #0
   23394:	e9cd 0101 	strd	r0, r1, [sp, #4]
   23398:	9300      	str	r3, [sp, #0]
   2339a:	461a      	mov	r2, r3
   2339c:	4619      	mov	r1, r3
   2339e:	4618      	mov	r0, r3
   233a0:	f7e3 f894 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   233a4:	b005      	add	sp, #20
   233a6:	f85d fb04 	ldr.w	pc, [sp], #4

000233aa <notify_drop>:
	z_log_dropped(true);
   233aa:	2001      	movs	r0, #1
   233ac:	f7e2 bd1c 	b.w	5de8 <z_log_dropped>

000233b0 <get_msg>:
{
   233b0:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   233b2:	f7e2 fd8d 	bl	5ed0 <z_log_msg2_claim>
}
   233b6:	bd08      	pop	{r3, pc}

000233b8 <z_log_get_tag>:
}
   233b8:	2000      	movs	r0, #0
   233ba:	4770      	bx	lr

000233bc <buffer_write>:
{
   233bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233be:	4606      	mov	r6, r0
   233c0:	460d      	mov	r5, r1
   233c2:	4614      	mov	r4, r2
   233c4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   233c6:	4621      	mov	r1, r4
   233c8:	4628      	mov	r0, r5
   233ca:	463a      	mov	r2, r7
   233cc:	47b0      	blx	r6
	} while (len != 0);
   233ce:	1a24      	subs	r4, r4, r0
		buf += processed;
   233d0:	4405      	add	r5, r0
	} while (len != 0);
   233d2:	d1f8      	bne.n	233c6 <buffer_write+0xa>
}
   233d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000233d6 <log_output_flush>:
		     output->control_block->offset,
   233d6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   233d8:	6881      	ldr	r1, [r0, #8]
{
   233da:	b510      	push	{r4, lr}
   233dc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   233de:	e9d2 2300 	ldrd	r2, r3, [r2]
   233e2:	6800      	ldr	r0, [r0, #0]
   233e4:	f7ff ffea 	bl	233bc <buffer_write>
	output->control_block->offset = 0;
   233e8:	6863      	ldr	r3, [r4, #4]
   233ea:	2200      	movs	r2, #0
   233ec:	601a      	str	r2, [r3, #0]
}
   233ee:	bd10      	pop	{r4, pc}

000233f0 <out_func>:
{
   233f0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   233f2:	684b      	ldr	r3, [r1, #4]
   233f4:	681a      	ldr	r2, [r3, #0]
   233f6:	68cb      	ldr	r3, [r1, #12]
   233f8:	429a      	cmp	r2, r3
{
   233fa:	4605      	mov	r5, r0
   233fc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   233fe:	d102      	bne.n	23406 <out_func+0x16>
		log_output_flush(out_ctx);
   23400:	4608      	mov	r0, r1
   23402:	f7ff ffe8 	bl	233d6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23406:	6863      	ldr	r3, [r4, #4]
   23408:	f3bf 8f5b 	dmb	ish
   2340c:	e853 2f00 	ldrex	r2, [r3]
   23410:	1c51      	adds	r1, r2, #1
   23412:	e843 1000 	strex	r0, r1, [r3]
   23416:	2800      	cmp	r0, #0
   23418:	d1f8      	bne.n	2340c <out_func+0x1c>
   2341a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2341e:	68a3      	ldr	r3, [r4, #8]
   23420:	549d      	strb	r5, [r3, r2]
}
   23422:	2000      	movs	r0, #0
   23424:	bd38      	pop	{r3, r4, r5, pc}

00023426 <cr_out_func>:
{
   23426:	b538      	push	{r3, r4, r5, lr}
   23428:	4605      	mov	r5, r0
   2342a:	460c      	mov	r4, r1
	out_func(c, ctx);
   2342c:	f7ff ffe0 	bl	233f0 <out_func>
	if (c == '\n') {
   23430:	2d0a      	cmp	r5, #10
   23432:	d103      	bne.n	2343c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   23434:	4621      	mov	r1, r4
   23436:	200d      	movs	r0, #13
   23438:	f7ff ffda 	bl	233f0 <out_func>
}
   2343c:	2000      	movs	r0, #0
   2343e:	bd38      	pop	{r3, r4, r5, pc}

00023440 <z_log_msg2_finalize>:
{
   23440:	b570      	push	{r4, r5, r6, lr}
   23442:	460e      	mov	r6, r1
   23444:	4615      	mov	r5, r2
   23446:	4619      	mov	r1, r3
	if (!msg) {
   23448:	4604      	mov	r4, r0
   2344a:	b918      	cbnz	r0, 23454 <z_log_msg2_finalize+0x14>
}
   2344c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   23450:	f7e2 bcca 	b.w	5de8 <z_log_dropped>
	if (data) {
   23454:	b143      	cbz	r3, 23468 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   23456:	f100 030c 	add.w	r3, r0, #12
   2345a:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   2345e:	4418      	add	r0, r3
   23460:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   23464:	f001 fa9b 	bl	2499e <memcpy>
	msg->hdr.source = source;
   23468:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   2346c:	4620      	mov	r0, r4
}
   2346e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   23472:	f7e2 bdef 	b.w	6054 <z_log_msg2_commit>

00023476 <z_impl_z_log_msg2_static_create>:
{
   23476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2347a:	f3c1 2949 	ubfx	r9, r1, #9, #10
   2347e:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   23482:	444c      	add	r4, r9
   23484:	3413      	adds	r4, #19
   23486:	f024 0407 	bic.w	r4, r4, #7
   2348a:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   2348c:	08a0      	lsrs	r0, r4, #2
{
   2348e:	460d      	mov	r5, r1
   23490:	4690      	mov	r8, r2
   23492:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   23494:	f7e2 fd14 	bl	5ec0 <z_log_msg2_alloc>
	if (msg) {
   23498:	4604      	mov	r4, r0
   2349a:	b120      	cbz	r0, 234a6 <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
   2349c:	464a      	mov	r2, r9
   2349e:	4641      	mov	r1, r8
   234a0:	300c      	adds	r0, #12
   234a2:	f001 fa7c 	bl	2499e <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   234a6:	463b      	mov	r3, r7
   234a8:	462a      	mov	r2, r5
   234aa:	4631      	mov	r1, r6
   234ac:	4620      	mov	r0, r4
}
   234ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   234b2:	f7ff bfc5 	b.w	23440 <z_log_msg2_finalize>

000234b6 <read_str>:
{
   234b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   234ba:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   234be:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   234c0:	4640      	mov	r0, r8
{
   234c2:	461f      	mov	r7, r3
   234c4:	460c      	mov	r4, r1
   234c6:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   234c8:	f001 fa3c 	bl	24944 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   234cc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   234d0:	9300      	str	r3, [sp, #0]
   234d2:	b280      	uxth	r0, r0
   234d4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   234d8:	463b      	mov	r3, r7
   234da:	4632      	mov	r2, r6
   234dc:	4621      	mov	r1, r4
   234de:	4628      	mov	r0, r5
   234e0:	f002 ff5b 	bl	2639a <bt_gatt_attr_read>
}
   234e4:	b004      	add	sp, #16
   234e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000234ea <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   234ea:	2300      	movs	r3, #0
   234ec:	f7ff bfc3 	b.w	23476 <z_impl_z_log_msg2_static_create>

000234f0 <usb_get_dev_data_by_cfg>:
	return list->head;
   234f0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   234f2:	b140      	cbz	r0, 23506 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   234f4:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   234f8:	685b      	ldr	r3, [r3, #4]
   234fa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   234fc:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   23500:	d001      	beq.n	23506 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   23502:	6840      	ldr	r0, [r0, #4]
   23504:	e7f5      	b.n	234f2 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   23506:	4770      	bx	lr

00023508 <usb_get_dev_data_by_iface>:
	return list->head;
   23508:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2350a:	b150      	cbz	r0, 23522 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2350c:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   23510:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   23512:	685b      	ldr	r3, [r3, #4]
   23514:	789b      	ldrb	r3, [r3, #2]
   23516:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   23518:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   2351c:	d001      	beq.n	23522 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   2351e:	6840      	ldr	r0, [r0, #4]
   23520:	e7f3      	b.n	2350a <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   23522:	4770      	bx	lr

00023524 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   23524:	b530      	push	{r4, r5, lr}
	return list->head;
   23526:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   23528:	b188      	cbz	r0, 2354e <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2352a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2352e:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   23530:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   23532:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   23534:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   23536:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   23538:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2353a:	b2dc      	uxtb	r4, r3
   2353c:	42a5      	cmp	r5, r4
   2353e:	d801      	bhi.n	23544 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   23540:	6840      	ldr	r0, [r0, #4]
   23542:	e7f1      	b.n	23528 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   23544:	3301      	adds	r3, #1
   23546:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   2354a:	428c      	cmp	r4, r1
   2354c:	d1f5      	bne.n	2353a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   2354e:	bd30      	pop	{r4, r5, pc}

00023550 <usb_transfer_is_busy>:
{
   23550:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   23552:	f7e3 feaf 	bl	72b4 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   23556:	b128      	cbz	r0, 23564 <usb_transfer_is_busy+0x14>
   23558:	6840      	ldr	r0, [r0, #4]
   2355a:	f110 0f10 	cmn.w	r0, #16
   2355e:	bf14      	ite	ne
   23560:	2000      	movne	r0, #0
   23562:	2001      	moveq	r0, #1
}
   23564:	bd08      	pop	{r3, pc}

00023566 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   23566:	1c4b      	adds	r3, r1, #1
   23568:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   2356a:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2356c:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2356e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   23572:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   23574:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   23578:	4770      	bx	lr

0002357a <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   2357a:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   2357e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   23580:	4718      	bx	r3

00023582 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   23582:	6903      	ldr	r3, [r0, #16]
   23584:	2200      	movs	r2, #0
   23586:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   2358a:	4770      	bx	lr

0002358c <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2358c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   2358e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   23592:	b108      	cbz	r0, 23598 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   23594:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   23598:	4770      	bx	lr

0002359a <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   2359a:	6903      	ldr	r3, [r0, #16]
   2359c:	2200      	movs	r2, #0
   2359e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   235a2:	4770      	bx	lr

000235a4 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   235a4:	6903      	ldr	r3, [r0, #16]
}
   235a6:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   235aa:	4770      	bx	lr

000235ac <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   235ac:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   235ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   235b2:	b112      	cbz	r2, 235ba <cdc_acm_irq_is_pending+0xe>
   235b4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   235b8:	b92a      	cbnz	r2, 235c6 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   235ba:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   235be:	b118      	cbz	r0, 235c8 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   235c0:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
   235c4:	4770      	bx	lr
		return 1;
   235c6:	2001      	movs	r0, #1
}
   235c8:	4770      	bx	lr

000235ca <cdc_acm_irq_update>:
}
   235ca:	2001      	movs	r0, #1
   235cc:	4770      	bx	lr

000235ce <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   235ce:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   235d0:	e9c3 1200 	strd	r1, r2, [r3]
}
   235d4:	4770      	bx	lr

000235d6 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   235d6:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   235d8:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   235da:	d007      	beq.n	235ec <cdc_acm_line_ctrl_get+0x16>
   235dc:	2904      	cmp	r1, #4
   235de:	d00a      	beq.n	235f6 <cdc_acm_line_ctrl_get+0x20>
   235e0:	2901      	cmp	r1, #1
   235e2:	d10d      	bne.n	23600 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   235e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
   235e6:	6013      	str	r3, [r2, #0]
		return 0;
   235e8:	2000      	movs	r0, #0
   235ea:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   235ec:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   235f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   235f4:	e7f7      	b.n	235e6 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   235f6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   235fa:	f003 0301 	and.w	r3, r3, #1
   235fe:	e7f2      	b.n	235e6 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   23600:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   23604:	4770      	bx	lr

00023606 <cdc_acm_fifo_read>:
{
   23606:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   23608:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2360a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   2360c:	f7ff fcba 	bl	22f84 <ring_buf_get>
   23610:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   23612:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   23614:	f7ff fbf4 	bl	22e00 <ring_buf_is_empty>
   23618:	b110      	cbz	r0, 23620 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   2361a:	2300      	movs	r3, #0
   2361c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   23620:	4620      	mov	r0, r4
   23622:	bd38      	pop	{r3, r4, r5, pc}

00023624 <cdc_acm_poll_in>:
{
   23624:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   23626:	2201      	movs	r2, #1
   23628:	f7ff ffed 	bl	23606 <cdc_acm_fifo_read>
}
   2362c:	3801      	subs	r0, #1
   2362e:	bf18      	it	ne
   23630:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23634:	bd08      	pop	{r3, pc}

00023636 <z_log_msg2_static_create.constprop.0>:
   23636:	2300      	movs	r3, #0
   23638:	f7ff bf1d 	b.w	23476 <z_impl_z_log_msg2_static_create>

0002363c <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   2363c:	2940      	cmp	r1, #64	; 0x40
{
   2363e:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   23640:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   23642:	d042      	beq.n	236ca <cdc_acm_line_ctrl_set+0x8e>
   23644:	d813      	bhi.n	2366e <cdc_acm_line_ctrl_set+0x32>
   23646:	2910      	cmp	r1, #16
   23648:	d032      	beq.n	236b0 <cdc_acm_line_ctrl_set+0x74>
   2364a:	d806      	bhi.n	2365a <cdc_acm_line_ctrl_set+0x1e>
   2364c:	2901      	cmp	r1, #1
   2364e:	d01e      	beq.n	2368e <cdc_acm_line_ctrl_set+0x52>
   23650:	2908      	cmp	r1, #8
   23652:	d01f      	beq.n	23694 <cdc_acm_line_ctrl_set+0x58>
   23654:	f06f 0012 	mvn.w	r0, #18
}
   23658:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   2365a:	2920      	cmp	r1, #32
   2365c:	d1fa      	bne.n	23654 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   2365e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   23662:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   23666:	b342      	cbz	r2, 236ba <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   23668:	f041 0104 	orr.w	r1, r1, #4
   2366c:	e025      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   2366e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   23672:	d033      	beq.n	236dc <cdc_acm_line_ctrl_set+0xa0>
   23674:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   23678:	d039      	beq.n	236ee <cdc_acm_line_ctrl_set+0xb2>
   2367a:	2980      	cmp	r1, #128	; 0x80
   2367c:	d1ea      	bne.n	23654 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   2367e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   23682:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   23686:	b1c2      	cbz	r2, 236ba <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   23688:	f041 0110 	orr.w	r1, r1, #16
   2368c:	e015      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   2368e:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
   23690:	2000      	movs	r0, #0
   23692:	e7e1      	b.n	23658 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   23694:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   23698:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   2369c:	b92a      	cbnz	r2, 236aa <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   2369e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   236a2:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   236a4:	f7e4 fa92 	bl	7bcc <cdc_acm_send_notification.isra.0>
   236a8:	e7f2      	b.n	23690 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   236aa:	f041 0101 	orr.w	r1, r1, #1
   236ae:	e7f6      	b.n	2369e <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   236b0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   236b4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   236b8:	b922      	cbnz	r2, 236c4 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   236ba:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   236be:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   236c2:	e7ef      	b.n	236a4 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   236c4:	f041 0102 	orr.w	r1, r1, #2
   236c8:	e7f7      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   236ca:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   236ce:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   236d2:	2a00      	cmp	r2, #0
   236d4:	d0f1      	beq.n	236ba <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   236d6:	f041 0108 	orr.w	r1, r1, #8
   236da:	e7ee      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   236dc:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   236e0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   236e4:	2a00      	cmp	r2, #0
   236e6:	d0e8      	beq.n	236ba <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   236e8:	f041 0120 	orr.w	r1, r1, #32
   236ec:	e7e5      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   236ee:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
   236f2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   236f6:	2a00      	cmp	r2, #0
   236f8:	d0df      	beq.n	236ba <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   236fa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   236fe:	e7dc      	b.n	236ba <cdc_acm_line_ctrl_set+0x7e>

00023700 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23700:	b538      	push	{r3, r4, r5, lr}
   23702:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23704:	42ab      	cmp	r3, r5
{
   23706:	4611      	mov	r1, r2
   23708:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2370a:	d804      	bhi.n	23716 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2370c:	461a      	mov	r2, r3
   2370e:	f001 f946 	bl	2499e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23712:	4620      	mov	r0, r4
   23714:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   23716:	2400      	movs	r4, #0
   23718:	e7fb      	b.n	23712 <_copy+0x12>

0002371a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2371a:	f001 b94b 	b.w	249b4 <memset>

0002371e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2371e:	09c3      	lsrs	r3, r0, #7
   23720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23724:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23728:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2372c:	b2c0      	uxtb	r0, r0
   2372e:	4770      	bx	lr

00023730 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   23730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23734:	4606      	mov	r6, r0
   23736:	b0a9      	sub	sp, #164	; 0xa4
   23738:	4688      	mov	r8, r1
   2373a:	4614      	mov	r4, r2
   2373c:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2373e:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   23742:	f7e4 fbe9 	bl	7f18 <uECC_get_rng>
		if (!rng_function ||
   23746:	4603      	mov	r3, r0
   23748:	2800      	cmp	r0, #0
   2374a:	d03e      	beq.n	237ca <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2374c:	2140      	movs	r1, #64	; 0x40
   2374e:	a808      	add	r0, sp, #32
   23750:	4798      	blx	r3
		if (!rng_function ||
   23752:	b3d0      	cbz	r0, 237ca <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   23754:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   23758:	f112 031f 	adds.w	r3, r2, #31
   2375c:	bf48      	it	mi
   2375e:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   23762:	466d      	mov	r5, sp
   23764:	464a      	mov	r2, r9
   23766:	a908      	add	r1, sp, #32
   23768:	4628      	mov	r0, r5
   2376a:	f343 1347 	sbfx	r3, r3, #5, #8
   2376e:	f000 f9ee 	bl	23b4e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   23772:	4622      	mov	r2, r4
   23774:	4629      	mov	r1, r5
   23776:	a818      	add	r0, sp, #96	; 0x60
   23778:	f000 fe03 	bl	24382 <EccPoint_compute_public_key>
   2377c:	b318      	cbz	r0, 237c6 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2377e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   23782:	1dd9      	adds	r1, r3, #7
   23784:	bf48      	it	mi
   23786:	f103 010e 	addmi.w	r1, r3, #14
   2378a:	462a      	mov	r2, r5
   2378c:	4640      	mov	r0, r8
   2378e:	10c9      	asrs	r1, r1, #3
   23790:	f000 fe1f 	bl	243d2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   23794:	f994 1001 	ldrsb.w	r1, [r4, #1]
   23798:	aa18      	add	r2, sp, #96	; 0x60
   2379a:	4630      	mov	r0, r6
   2379c:	f000 fe19 	bl	243d2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   237a0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   237a4:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   237a8:	ab18      	add	r3, sp, #96	; 0x60
   237aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   237ae:	1870      	adds	r0, r6, r1
   237b0:	f000 fe0f 	bl	243d2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   237b4:	2220      	movs	r2, #32
   237b6:	2100      	movs	r1, #0
   237b8:	4628      	mov	r0, r5
   237ba:	f001 f8fb 	bl	249b4 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   237be:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   237c0:	b029      	add	sp, #164	; 0xa4
   237c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   237c6:	3f01      	subs	r7, #1
   237c8:	d1bb      	bne.n	23742 <uECC_make_key+0x12>
        		return 0;
   237ca:	2000      	movs	r0, #0
   237cc:	e7f8      	b.n	237c0 <uECC_make_key+0x90>

000237ce <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   237ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237d2:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   237d4:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   237d8:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   237dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   237e0:	b0a4      	sub	sp, #144	; 0x90
   237e2:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   237e4:	1dda      	adds	r2, r3, #7
   237e6:	bf48      	it	mi
   237e8:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   237ec:	ad04      	add	r5, sp, #16
{
   237ee:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   237f0:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   237f2:	4628      	mov	r0, r5
   237f4:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   237f6:	9502      	str	r5, [sp, #8]
   237f8:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   237fa:	f000 fdfe 	bl	243fa <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   237fe:	463a      	mov	r2, r7
   23800:	4649      	mov	r1, r9
   23802:	a814      	add	r0, sp, #80	; 0x50
   23804:	f000 fdf9 	bl	243fa <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   23808:	ab14      	add	r3, sp, #80	; 0x50
   2380a:	eb09 0107 	add.w	r1, r9, r7
   2380e:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   23812:	463a      	mov	r2, r7
   23814:	f000 fdf1 	bl	243fa <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   23818:	4623      	mov	r3, r4
   2381a:	4632      	mov	r2, r6
   2381c:	4629      	mov	r1, r5
   2381e:	4628      	mov	r0, r5
   23820:	f000 fd83 	bl	2432a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   23824:	fab0 f380 	clz	r3, r0
   23828:	9401      	str	r4, [sp, #4]
   2382a:	aa24      	add	r2, sp, #144	; 0x90
   2382c:	095b      	lsrs	r3, r3, #5
   2382e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   23832:	8863      	ldrh	r3, [r4, #2]
   23834:	3301      	adds	r3, #1
   23836:	b21b      	sxth	r3, r3
   23838:	9300      	str	r3, [sp, #0]
   2383a:	f851 2c88 	ldr.w	r2, [r1, #-136]
   2383e:	a914      	add	r1, sp, #80	; 0x50
   23840:	2300      	movs	r3, #0
   23842:	4608      	mov	r0, r1
   23844:	f000 fca4 	bl	24190 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   23848:	aa14      	add	r2, sp, #80	; 0x50
   2384a:	4639      	mov	r1, r7
   2384c:	4640      	mov	r0, r8
   2384e:	f000 fdc0 	bl	243d2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   23852:	4621      	mov	r1, r4
   23854:	a814      	add	r0, sp, #80	; 0x50
   23856:	f000 fc10 	bl	2407a <EccPoint_isZero>
   2385a:	af02      	add	r7, sp, #8
   2385c:	4604      	mov	r4, r0
   2385e:	2208      	movs	r2, #8
   23860:	2100      	movs	r1, #0
   23862:	4638      	mov	r0, r7
   23864:	f001 f8a6 	bl	249b4 <memset>
   23868:	2220      	movs	r2, #32
   2386a:	2100      	movs	r1, #0
   2386c:	4630      	mov	r0, r6
   2386e:	f001 f8a1 	bl	249b4 <memset>
   23872:	2220      	movs	r2, #32
   23874:	2100      	movs	r1, #0
   23876:	4628      	mov	r0, r5
   23878:	f001 f89c 	bl	249b4 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   2387c:	fab4 f084 	clz	r0, r4
   23880:	0940      	lsrs	r0, r0, #5
   23882:	b024      	add	sp, #144	; 0x90
   23884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023888 <uECC_vli_add>:
{
   23888:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2388a:	2400      	movs	r4, #0
{
   2388c:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2388e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23890:	b265      	sxtb	r5, r4
   23892:	42ab      	cmp	r3, r5
   23894:	dc00      	bgt.n	23898 <uECC_vli_add+0x10>
}
   23896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   23898:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2389c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   238a0:	443d      	add	r5, r7
   238a2:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   238a4:	42af      	cmp	r7, r5
   238a6:	f000 0001 	and.w	r0, r0, #1
   238aa:	bf18      	it	ne
   238ac:	2000      	movne	r0, #0
		result[i] = sum;
   238ae:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   238b2:	bf88      	it	hi
   238b4:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   238b8:	3401      	adds	r4, #1
   238ba:	e7e9      	b.n	23890 <uECC_vli_add+0x8>

000238bc <uECC_vli_rshift1>:
	vli += num_words;
   238bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   238c0:	2300      	movs	r3, #0
	while (vli-- > end) {
   238c2:	4288      	cmp	r0, r1
   238c4:	d300      	bcc.n	238c8 <uECC_vli_rshift1+0xc>
}
   238c6:	4770      	bx	lr
		uECC_word_t temp = *vli;
   238c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   238cc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   238d0:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   238d2:	07d3      	lsls	r3, r2, #31
   238d4:	e7f5      	b.n	238c2 <uECC_vli_rshift1+0x6>

000238d6 <vli_modInv_update>:
	if (!EVEN(uv)) {
   238d6:	6803      	ldr	r3, [r0, #0]
{
   238d8:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   238da:	f013 0601 	ands.w	r6, r3, #1
{
   238de:	4605      	mov	r5, r0
   238e0:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   238e2:	d005      	beq.n	238f0 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   238e4:	4613      	mov	r3, r2
   238e6:	460a      	mov	r2, r1
   238e8:	4601      	mov	r1, r0
   238ea:	f7ff ffcd 	bl	23888 <uECC_vli_add>
   238ee:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   238f0:	4621      	mov	r1, r4
   238f2:	4628      	mov	r0, r5
   238f4:	f7ff ffe2 	bl	238bc <uECC_vli_rshift1>
	if (carry) {
   238f8:	b146      	cbz	r6, 2390c <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   238fa:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   238fe:	3a01      	subs	r2, #1
   23900:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   23904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23908:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2390c:	bd70      	pop	{r4, r5, r6, pc}

0002390e <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   2390e:	f04f 0c00 	mov.w	ip, #0
{
   23912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   23916:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   23918:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   2391a:	fa4f f98c 	sxtb.w	r9, ip
   2391e:	454b      	cmp	r3, r9
   23920:	dc16      	bgt.n	23950 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23922:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23926:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   2392a:	9601      	str	r6, [sp, #4]
   2392c:	f04f 0800 	mov.w	r8, #0
   23930:	9f01      	ldr	r7, [sp, #4]
   23932:	fa53 fe88 	uxtab	lr, r3, r8
   23936:	fa4f fe8e 	sxtb.w	lr, lr
   2393a:	45be      	cmp	lr, r7
   2393c:	fa5f f688 	uxtb.w	r6, r8
   23940:	db26      	blt.n	23990 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   23942:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23946:	f840 4c04 	str.w	r4, [r0, #-4]
}
   2394a:	b003      	add	sp, #12
   2394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   23950:	f04f 0e00 	mov.w	lr, #0
   23954:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   23958:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   2395a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2395e:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23962:	fba6 6707 	umull	r6, r7, r6, r7
   23966:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   23968:	f10e 0e01 	add.w	lr, lr, #1
   2396c:	417d      	adcs	r5, r7
   2396e:	fa4f f68e 	sxtb.w	r6, lr
   23972:	f04f 0b00 	mov.w	fp, #0
   23976:	bf28      	it	cs
   23978:	f04f 0b01 	movcs.w	fp, #1
   2397c:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   2397e:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   23980:	ddeb      	ble.n	2395a <uECC_vli_mult+0x4c>
		result[k] = r0;
   23982:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23986:	462c      	mov	r4, r5
   23988:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   2398c:	4645      	mov	r5, r8
   2398e:	e7c4      	b.n	2391a <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23990:	3601      	adds	r6, #1
   23992:	46a9      	mov	r9, r5
   23994:	b276      	sxtb	r6, r6
   23996:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   2399a:	2500      	movs	r5, #0
   2399c:	b277      	sxtb	r7, r6
   2399e:	42bb      	cmp	r3, r7
   239a0:	dc05      	bgt.n	239ae <uECC_vli_mult+0xa0>
		result[k] = r0;
   239a2:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   239a6:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   239aa:	464c      	mov	r4, r9
   239ac:	e7c0      	b.n	23930 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   239ae:	f06f 0703 	mvn.w	r7, #3
   239b2:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   239b4:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   239b8:	f85a 7007 	ldr.w	r7, [sl, r7]
   239bc:	fba7 7c0c 	umull	r7, ip, r7, ip
   239c0:	193c      	adds	r4, r7, r4
   239c2:	eb5c 0909 	adcs.w	r9, ip, r9
   239c6:	f04f 0b00 	mov.w	fp, #0
   239ca:	bf28      	it	cs
   239cc:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   239d0:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   239d2:	3601      	adds	r6, #1
   239d4:	e7e2      	b.n	2399c <uECC_vli_mult+0x8e>

000239d6 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   239d6:	2300      	movs	r3, #0
{
   239d8:	b510      	push	{r4, lr}
		 vli[i] = 0;
   239da:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   239dc:	b25a      	sxtb	r2, r3
   239de:	4291      	cmp	r1, r2
   239e0:	dc00      	bgt.n	239e4 <uECC_vli_clear+0xe>
}
   239e2:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   239e4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   239e8:	3301      	adds	r3, #1
   239ea:	e7f7      	b.n	239dc <uECC_vli_clear+0x6>

000239ec <uECC_vli_isZero>:
{
   239ec:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   239ee:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   239f0:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   239f2:	b25c      	sxtb	r4, r3
   239f4:	42a1      	cmp	r1, r4
   239f6:	dc03      	bgt.n	23a00 <uECC_vli_isZero+0x14>
}
   239f8:	fab2 f082 	clz	r0, r2
   239fc:	0940      	lsrs	r0, r0, #5
   239fe:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   23a00:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23a04:	3301      	adds	r3, #1
   23a06:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   23a08:	e7f3      	b.n	239f2 <uECC_vli_isZero+0x6>

00023a0a <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23a0a:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23a0c:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23a0e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23a12:	f001 011f 	and.w	r1, r1, #31
   23a16:	fa03 f101 	lsl.w	r1, r3, r1
}
   23a1a:	4008      	ands	r0, r1
   23a1c:	4770      	bx	lr

00023a1e <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23a1e:	3901      	subs	r1, #1
{
   23a20:	b510      	push	{r4, lr}
   23a22:	4602      	mov	r2, r0
   23a24:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23a26:	1d04      	adds	r4, r0, #4
   23a28:	0608      	lsls	r0, r1, #24
   23a2a:	b2cb      	uxtb	r3, r1
   23a2c:	d404      	bmi.n	23a38 <uECC_vli_numBits+0x1a>
   23a2e:	3901      	subs	r1, #1
   23a30:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   23a34:	2800      	cmp	r0, #0
   23a36:	d0f7      	beq.n	23a28 <uECC_vli_numBits+0xa>
	return (i + 1);
   23a38:	3301      	adds	r3, #1
   23a3a:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   23a3c:	b150      	cbz	r0, 23a54 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   23a3e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   23a42:	3b01      	subs	r3, #1
   23a44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23a48:	2300      	movs	r3, #0
   23a4a:	b922      	cbnz	r2, 23a56 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   23a4c:	3801      	subs	r0, #1
   23a4e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   23a52:	b200      	sxth	r0, r0
}
   23a54:	bd10      	pop	{r4, pc}
		digit >>= 1;
   23a56:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   23a58:	3301      	adds	r3, #1
   23a5a:	e7f6      	b.n	23a4a <uECC_vli_numBits+0x2c>

00023a5c <uECC_vli_set>:
{
   23a5c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23a5e:	2300      	movs	r3, #0
   23a60:	b25c      	sxtb	r4, r3
   23a62:	42a2      	cmp	r2, r4
   23a64:	dc00      	bgt.n	23a68 <uECC_vli_set+0xc>
}
   23a66:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   23a68:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   23a6c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23a70:	3301      	adds	r3, #1
   23a72:	e7f5      	b.n	23a60 <uECC_vli_set+0x4>

00023a74 <uECC_vli_cmp_unsafe>:
{
   23a74:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23a76:	3a01      	subs	r2, #1
   23a78:	b252      	sxtb	r2, r2
   23a7a:	0613      	lsls	r3, r2, #24
   23a7c:	d501      	bpl.n	23a82 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   23a7e:	2000      	movs	r0, #0
}
   23a80:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   23a82:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   23a86:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   23a8a:	429c      	cmp	r4, r3
   23a8c:	d805      	bhi.n	23a9a <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   23a8e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   23a92:	d2f2      	bcs.n	23a7a <uECC_vli_cmp_unsafe+0x6>
			return -1;
   23a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23a98:	e7f2      	b.n	23a80 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   23a9a:	2001      	movs	r0, #1
   23a9c:	e7f0      	b.n	23a80 <uECC_vli_cmp_unsafe+0xc>

00023a9e <uECC_vli_equal>:
{
   23a9e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23aa0:	3a01      	subs	r2, #1
   23aa2:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   23aa4:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   23aa6:	0614      	lsls	r4, r2, #24
   23aa8:	d503      	bpl.n	23ab2 <uECC_vli_equal+0x14>
}
   23aaa:	1e18      	subs	r0, r3, #0
   23aac:	bf18      	it	ne
   23aae:	2001      	movne	r0, #1
   23ab0:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   23ab2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   23ab6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   23aba:	406c      	eors	r4, r5
   23abc:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   23abe:	3a01      	subs	r2, #1
   23ac0:	e7f1      	b.n	23aa6 <uECC_vli_equal+0x8>

00023ac2 <uECC_vli_sub>:
{
   23ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23ac4:	2400      	movs	r4, #0
{
   23ac6:	4606      	mov	r6, r0
   23ac8:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   23aca:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23acc:	b265      	sxtb	r5, r4
   23ace:	4565      	cmp	r5, ip
   23ad0:	db00      	blt.n	23ad4 <uECC_vli_sub+0x12>
}
   23ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   23ad4:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23ad8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   23adc:	1a3d      	subs	r5, r7, r0
   23ade:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   23ae0:	42af      	cmp	r7, r5
   23ae2:	f000 0001 	and.w	r0, r0, #1
   23ae6:	bf18      	it	ne
   23ae8:	2000      	movne	r0, #0
		result[i] = diff;
   23aea:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23aee:	bf38      	it	cc
   23af0:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23af4:	3401      	adds	r4, #1
   23af6:	e7e9      	b.n	23acc <uECC_vli_sub+0xa>

00023af8 <uECC_vli_modAdd>:
{
   23af8:	b570      	push	{r4, r5, r6, lr}
   23afa:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23afe:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23b00:	4633      	mov	r3, r6
{
   23b02:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23b04:	f7ff fec0 	bl	23888 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   23b08:	b930      	cbnz	r0, 23b18 <uECC_vli_modAdd+0x20>
   23b0a:	4632      	mov	r2, r6
   23b0c:	4621      	mov	r1, r4
   23b0e:	4628      	mov	r0, r5
   23b10:	f7ff ffb0 	bl	23a74 <uECC_vli_cmp_unsafe>
   23b14:	2801      	cmp	r0, #1
   23b16:	d007      	beq.n	23b28 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   23b18:	4633      	mov	r3, r6
   23b1a:	462a      	mov	r2, r5
   23b1c:	4621      	mov	r1, r4
   23b1e:	4620      	mov	r0, r4
}
   23b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   23b24:	f7ff bfcd 	b.w	23ac2 <uECC_vli_sub>
}
   23b28:	bd70      	pop	{r4, r5, r6, pc}

00023b2a <uECC_vli_modSub>:
{
   23b2a:	b570      	push	{r4, r5, r6, lr}
   23b2c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23b30:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23b32:	4633      	mov	r3, r6
{
   23b34:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23b36:	f7ff ffc4 	bl	23ac2 <uECC_vli_sub>
	if (l_borrow) {
   23b3a:	b138      	cbz	r0, 23b4c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   23b3c:	4633      	mov	r3, r6
   23b3e:	462a      	mov	r2, r5
   23b40:	4621      	mov	r1, r4
   23b42:	4620      	mov	r0, r4
}
   23b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   23b48:	f7ff be9e 	b.w	23888 <uECC_vli_add>
}
   23b4c:	bd70      	pop	{r4, r5, r6, pc}

00023b4e <uECC_vli_mmod>:
{
   23b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b52:	b0a5      	sub	sp, #148	; 0x94
   23b54:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   23b56:	ab14      	add	r3, sp, #80	; 0x50
   23b58:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   23b5c:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   23b5e:	4629      	mov	r1, r5
   23b60:	4610      	mov	r0, r2
{
   23b62:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   23b64:	f7ff ff5b 	bl	23a1e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   23b68:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   23b6c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23b6e:	2c00      	cmp	r4, #0
   23b70:	4621      	mov	r1, r4
   23b72:	bfb8      	it	lt
   23b74:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23b78:	4263      	negs	r3, r4
   23b7a:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23b7e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23b82:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   23b86:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23b88:	bf58      	it	pl
   23b8a:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   23b8c:	f7ff ff23 	bl	239d6 <uECC_vli_clear>
	if (bit_shift > 0) {
   23b90:	2e00      	cmp	r6, #0
   23b92:	b208      	sxth	r0, r1
   23b94:	dd2b      	ble.n	23bee <uECC_vli_mmod+0xa0>
   23b96:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   23b98:	2200      	movs	r2, #0
   23b9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23b9e:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23ba2:	4613      	mov	r3, r2
   23ba4:	429d      	cmp	r5, r3
   23ba6:	d817      	bhi.n	23bd8 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   23ba8:	006b      	lsls	r3, r5, #1
   23baa:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23bac:	ab04      	add	r3, sp, #16
   23bae:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23bb2:	1e6f      	subs	r7, r5, #1
   23bb4:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23bb6:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23bb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   23bbc:	2c00      	cmp	r4, #0
   23bbe:	da54      	bge.n	23c6a <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   23bc0:	ab24      	add	r3, sp, #144	; 0x90
   23bc2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   23bc6:	462a      	mov	r2, r5
   23bc8:	f856 1c88 	ldr.w	r1, [r6, #-136]
   23bcc:	4640      	mov	r0, r8
   23bce:	f7ff ff45 	bl	23a5c <uECC_vli_set>
}
   23bd2:	b025      	add	sp, #148	; 0x94
   23bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23bd8:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   23bdc:	fa0c f106 	lsl.w	r1, ip, r6
   23be0:	430a      	orrs	r2, r1
   23be2:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23be6:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23be8:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23bec:	e7da      	b.n	23ba4 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   23bee:	ab04      	add	r3, sp, #16
   23bf0:	462a      	mov	r2, r5
   23bf2:	4639      	mov	r1, r7
   23bf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23bf8:	f7ff ff30 	bl	23a5c <uECC_vli_set>
   23bfc:	e7d4      	b.n	23ba8 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23bfe:	fa0f fe82 	sxth.w	lr, r2
   23c02:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   23c06:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   23c0a:	ab24      	add	r3, sp, #144	; 0x90
   23c0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23c10:	3001      	adds	r0, #1
   23c12:	f852 3c80 	ldr.w	r3, [r2, #-128]
   23c16:	440b      	add	r3, r1
   23c18:	ebbb 0303 	subs.w	r3, fp, r3
   23c1c:	bf34      	ite	cc
   23c1e:	2201      	movcc	r2, #1
   23c20:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   23c22:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   23c24:	bf18      	it	ne
   23c26:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   23c28:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   23c2c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   23c30:	9b01      	ldr	r3, [sp, #4]
   23c32:	b242      	sxtb	r2, r0
   23c34:	429a      	cmp	r2, r3
   23c36:	dbe2      	blt.n	23bfe <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   23c38:	1a73      	subs	r3, r6, r1
   23c3a:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23c3c:	4629      	mov	r1, r5
   23c3e:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   23c40:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23c42:	f7ff fe3b 	bl	238bc <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23c46:	ab24      	add	r3, sp, #144	; 0x90
   23c48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23c4c:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23c4e:	f853 2c80 	ldr.w	r2, [r3, #-128]
   23c52:	f857 3c80 	ldr.w	r3, [r7, #-128]
   23c56:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   23c5a:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23c5e:	4648      	mov	r0, r9
   23c60:	3c01      	subs	r4, #1
   23c62:	f7ff fe2b 	bl	238bc <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   23c66:	b224      	sxth	r4, r4
   23c68:	e7a8      	b.n	23bbc <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23c6a:	ab24      	add	r3, sp, #144	; 0x90
   23c6c:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   23c6e:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   23c72:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23c74:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   23c78:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   23c7c:	e7d8      	b.n	23c30 <uECC_vli_mmod+0xe2>

00023c7e <uECC_vli_modMult_fast>:
{
   23c7e:	b530      	push	{r4, r5, lr}
   23c80:	461c      	mov	r4, r3
   23c82:	b091      	sub	sp, #68	; 0x44
   23c84:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   23c86:	f993 3000 	ldrsb.w	r3, [r3]
   23c8a:	4668      	mov	r0, sp
   23c8c:	f7ff fe3f 	bl	2390e <uECC_vli_mult>
	curve->mmod_fast(result, product);
   23c90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   23c94:	4669      	mov	r1, sp
   23c96:	4628      	mov	r0, r5
   23c98:	4798      	blx	r3
}
   23c9a:	b011      	add	sp, #68	; 0x44
   23c9c:	bd30      	pop	{r4, r5, pc}

00023c9e <uECC_vli_modSquare_fast>:
{
   23c9e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   23ca0:	460a      	mov	r2, r1
   23ca2:	f7ff bfec 	b.w	23c7e <uECC_vli_modMult_fast>

00023ca6 <double_jacobian_default>:
{
   23ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   23caa:	f993 6000 	ldrsb.w	r6, [r3]
{
   23cae:	b092      	sub	sp, #72	; 0x48
   23cb0:	4604      	mov	r4, r0
   23cb2:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   23cb4:	4610      	mov	r0, r2
   23cb6:	4631      	mov	r1, r6
{
   23cb8:	4615      	mov	r5, r2
   23cba:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   23cbc:	f7ff fe96 	bl	239ec <uECC_vli_isZero>
   23cc0:	2800      	cmp	r0, #0
   23cc2:	f040 8091 	bne.w	23de8 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23cc6:	463a      	mov	r2, r7
   23cc8:	4649      	mov	r1, r9
   23cca:	a802      	add	r0, sp, #8
   23ccc:	f7ff ffe7 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   23cd0:	463b      	mov	r3, r7
   23cd2:	aa02      	add	r2, sp, #8
   23cd4:	4621      	mov	r1, r4
   23cd6:	a80a      	add	r0, sp, #40	; 0x28
   23cd8:	f7ff ffd1 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   23cdc:	a902      	add	r1, sp, #8
   23cde:	4608      	mov	r0, r1
   23ce0:	463a      	mov	r2, r7
   23ce2:	f7ff ffdc 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23ce6:	463b      	mov	r3, r7
   23ce8:	462a      	mov	r2, r5
   23cea:	4649      	mov	r1, r9
   23cec:	4648      	mov	r0, r9
   23cee:	f7ff ffc6 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23cf2:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23cf6:	463a      	mov	r2, r7
   23cf8:	4629      	mov	r1, r5
   23cfa:	4628      	mov	r0, r5
   23cfc:	f7ff ffcf 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23d00:	4643      	mov	r3, r8
   23d02:	462a      	mov	r2, r5
   23d04:	4621      	mov	r1, r4
   23d06:	4620      	mov	r0, r4
   23d08:	9600      	str	r6, [sp, #0]
   23d0a:	f7ff fef5 	bl	23af8 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   23d0e:	4643      	mov	r3, r8
   23d10:	462a      	mov	r2, r5
   23d12:	4629      	mov	r1, r5
   23d14:	4628      	mov	r0, r5
   23d16:	9600      	str	r6, [sp, #0]
   23d18:	f7ff feee 	bl	23af8 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   23d1c:	4643      	mov	r3, r8
   23d1e:	462a      	mov	r2, r5
   23d20:	4621      	mov	r1, r4
   23d22:	4628      	mov	r0, r5
   23d24:	9600      	str	r6, [sp, #0]
   23d26:	f7ff ff00 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23d2a:	463b      	mov	r3, r7
   23d2c:	462a      	mov	r2, r5
   23d2e:	4621      	mov	r1, r4
   23d30:	4620      	mov	r0, r4
   23d32:	f7ff ffa4 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23d36:	4643      	mov	r3, r8
   23d38:	4622      	mov	r2, r4
   23d3a:	4621      	mov	r1, r4
   23d3c:	4628      	mov	r0, r5
   23d3e:	9600      	str	r6, [sp, #0]
   23d40:	f7ff feda 	bl	23af8 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23d44:	4643      	mov	r3, r8
   23d46:	9600      	str	r6, [sp, #0]
   23d48:	462a      	mov	r2, r5
   23d4a:	4621      	mov	r1, r4
   23d4c:	4620      	mov	r0, r4
   23d4e:	f7ff fed3 	bl	23af8 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23d52:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23d54:	07db      	lsls	r3, r3, #31
   23d56:	d54a      	bpl.n	23dee <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23d58:	4633      	mov	r3, r6
   23d5a:	4642      	mov	r2, r8
   23d5c:	4621      	mov	r1, r4
   23d5e:	4620      	mov	r0, r4
   23d60:	f7ff fd92 	bl	23888 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23d64:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23d66:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23d68:	4620      	mov	r0, r4
   23d6a:	f7ff fda7 	bl	238bc <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   23d6e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23d72:	3b01      	subs	r3, #1
   23d74:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   23d78:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   23d7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   23d80:	463a      	mov	r2, r7
   23d82:	4621      	mov	r1, r4
   23d84:	4628      	mov	r0, r5
   23d86:	f7ff ff8a 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   23d8a:	4643      	mov	r3, r8
   23d8c:	aa0a      	add	r2, sp, #40	; 0x28
   23d8e:	4629      	mov	r1, r5
   23d90:	4628      	mov	r0, r5
   23d92:	9600      	str	r6, [sp, #0]
   23d94:	f7ff fec9 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   23d98:	4643      	mov	r3, r8
   23d9a:	aa0a      	add	r2, sp, #40	; 0x28
   23d9c:	4629      	mov	r1, r5
   23d9e:	4628      	mov	r0, r5
   23da0:	9600      	str	r6, [sp, #0]
   23da2:	f7ff fec2 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23da6:	a90a      	add	r1, sp, #40	; 0x28
   23da8:	4608      	mov	r0, r1
   23daa:	4643      	mov	r3, r8
   23dac:	462a      	mov	r2, r5
   23dae:	9600      	str	r6, [sp, #0]
   23db0:	f7ff febb 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23db4:	463b      	mov	r3, r7
   23db6:	aa0a      	add	r2, sp, #40	; 0x28
   23db8:	4621      	mov	r1, r4
   23dba:	4620      	mov	r0, r4
   23dbc:	f7ff ff5f 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   23dc0:	aa02      	add	r2, sp, #8
   23dc2:	4643      	mov	r3, r8
   23dc4:	4610      	mov	r0, r2
   23dc6:	4621      	mov	r1, r4
   23dc8:	9600      	str	r6, [sp, #0]
   23dca:	f7ff feae 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   23dce:	4632      	mov	r2, r6
   23dd0:	4629      	mov	r1, r5
   23dd2:	4620      	mov	r0, r4
   23dd4:	f7ff fe42 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23dd8:	4649      	mov	r1, r9
   23dda:	4628      	mov	r0, r5
   23ddc:	f7ff fe3e 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   23de0:	a902      	add	r1, sp, #8
   23de2:	4648      	mov	r0, r9
   23de4:	f7ff fe3a 	bl	23a5c <uECC_vli_set>
}
   23de8:	b012      	add	sp, #72	; 0x48
   23dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   23dee:	4631      	mov	r1, r6
   23df0:	4620      	mov	r0, r4
   23df2:	f7ff fd63 	bl	238bc <uECC_vli_rshift1>
   23df6:	e7c3      	b.n	23d80 <double_jacobian_default+0xda>

00023df8 <x_side_default>:
{
   23df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dfc:	4615      	mov	r5, r2
   23dfe:	b08a      	sub	sp, #40	; 0x28
   23e00:	4604      	mov	r4, r0
   23e02:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23e04:	221c      	movs	r2, #28
   23e06:	2100      	movs	r1, #0
   23e08:	a803      	add	r0, sp, #12
   23e0a:	f000 fdd3 	bl	249b4 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23e0e:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   23e10:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23e14:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23e16:	462a      	mov	r2, r5
   23e18:	4631      	mov	r1, r6
   23e1a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23e1c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23e1e:	f7ff ff3e 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23e22:	463b      	mov	r3, r7
   23e24:	aa02      	add	r2, sp, #8
   23e26:	4621      	mov	r1, r4
   23e28:	4620      	mov	r0, r4
   23e2a:	f8cd 8000 	str.w	r8, [sp]
   23e2e:	f7ff fe7c 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23e32:	462b      	mov	r3, r5
   23e34:	4632      	mov	r2, r6
   23e36:	4621      	mov	r1, r4
   23e38:	4620      	mov	r0, r4
   23e3a:	f7ff ff20 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   23e3e:	f8cd 8000 	str.w	r8, [sp]
   23e42:	463b      	mov	r3, r7
   23e44:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23e48:	4621      	mov	r1, r4
   23e4a:	4620      	mov	r0, r4
   23e4c:	f7ff fe54 	bl	23af8 <uECC_vli_modAdd>
}
   23e50:	b00a      	add	sp, #40	; 0x28
   23e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e56 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23e56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e5a:	b09a      	sub	sp, #104	; 0x68
   23e5c:	4616      	mov	r6, r2
   23e5e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23e62:	4644      	mov	r4, r8
{
   23e64:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23e66:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23e6a:	9500      	str	r5, [sp, #0]
{
   23e6c:	4607      	mov	r7, r0
   23e6e:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23e70:	4623      	mov	r3, r4
   23e72:	4602      	mov	r2, r0
   23e74:	4631      	mov	r1, r6
   23e76:	a802      	add	r0, sp, #8
   23e78:	f7ff fe57 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23e7c:	a902      	add	r1, sp, #8
   23e7e:	4642      	mov	r2, r8
   23e80:	4608      	mov	r0, r1
   23e82:	f7ff ff0c 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23e86:	4643      	mov	r3, r8
   23e88:	aa02      	add	r2, sp, #8
   23e8a:	4639      	mov	r1, r7
   23e8c:	4638      	mov	r0, r7
   23e8e:	f7ff fef6 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23e92:	4643      	mov	r3, r8
   23e94:	aa02      	add	r2, sp, #8
   23e96:	4631      	mov	r1, r6
   23e98:	4630      	mov	r0, r6
   23e9a:	f7ff fef0 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   23e9e:	4623      	mov	r3, r4
   23ea0:	4652      	mov	r2, sl
   23ea2:	4649      	mov	r1, r9
   23ea4:	a802      	add	r0, sp, #8
   23ea6:	9500      	str	r5, [sp, #0]
   23ea8:	f7ff fe26 	bl	23af8 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23eac:	4623      	mov	r3, r4
   23eae:	4652      	mov	r2, sl
   23eb0:	4649      	mov	r1, r9
   23eb2:	4648      	mov	r0, r9
   23eb4:	9500      	str	r5, [sp, #0]
   23eb6:	f7ff fe38 	bl	23b2a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   23eba:	4623      	mov	r3, r4
   23ebc:	463a      	mov	r2, r7
   23ebe:	4631      	mov	r1, r6
   23ec0:	a80a      	add	r0, sp, #40	; 0x28
   23ec2:	9500      	str	r5, [sp, #0]
   23ec4:	f7ff fe31 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   23ec8:	4643      	mov	r3, r8
   23eca:	aa0a      	add	r2, sp, #40	; 0x28
   23ecc:	4651      	mov	r1, sl
   23ece:	4650      	mov	r0, sl
   23ed0:	f7ff fed5 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23ed4:	4623      	mov	r3, r4
   23ed6:	4632      	mov	r2, r6
   23ed8:	4639      	mov	r1, r7
   23eda:	a80a      	add	r0, sp, #40	; 0x28
   23edc:	9500      	str	r5, [sp, #0]
   23ede:	f7ff fe0b 	bl	23af8 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23ee2:	4642      	mov	r2, r8
   23ee4:	4649      	mov	r1, r9
   23ee6:	4630      	mov	r0, r6
   23ee8:	f7ff fed9 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   23eec:	4623      	mov	r3, r4
   23eee:	aa0a      	add	r2, sp, #40	; 0x28
   23ef0:	4631      	mov	r1, r6
   23ef2:	4630      	mov	r0, r6
   23ef4:	9500      	str	r5, [sp, #0]
   23ef6:	f7ff fe18 	bl	23b2a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   23efa:	4623      	mov	r3, r4
   23efc:	4632      	mov	r2, r6
   23efe:	4639      	mov	r1, r7
   23f00:	a812      	add	r0, sp, #72	; 0x48
   23f02:	9500      	str	r5, [sp, #0]
   23f04:	f7ff fe11 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   23f08:	4643      	mov	r3, r8
   23f0a:	aa12      	add	r2, sp, #72	; 0x48
   23f0c:	4649      	mov	r1, r9
   23f0e:	4648      	mov	r0, r9
   23f10:	f7ff feb5 	bl	23c7e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23f14:	4623      	mov	r3, r4
   23f16:	4652      	mov	r2, sl
   23f18:	4649      	mov	r1, r9
   23f1a:	4648      	mov	r0, r9
   23f1c:	9500      	str	r5, [sp, #0]
   23f1e:	f7ff fe04 	bl	23b2a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   23f22:	4642      	mov	r2, r8
   23f24:	a902      	add	r1, sp, #8
   23f26:	a812      	add	r0, sp, #72	; 0x48
   23f28:	f7ff feb9 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   23f2c:	a912      	add	r1, sp, #72	; 0x48
   23f2e:	4623      	mov	r3, r4
   23f30:	aa0a      	add	r2, sp, #40	; 0x28
   23f32:	4608      	mov	r0, r1
   23f34:	9500      	str	r5, [sp, #0]
   23f36:	f7ff fdf8 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   23f3a:	4623      	mov	r3, r4
   23f3c:	463a      	mov	r2, r7
   23f3e:	a912      	add	r1, sp, #72	; 0x48
   23f40:	a80a      	add	r0, sp, #40	; 0x28
   23f42:	9500      	str	r5, [sp, #0]
   23f44:	f7ff fdf1 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   23f48:	a90a      	add	r1, sp, #40	; 0x28
   23f4a:	4643      	mov	r3, r8
   23f4c:	aa02      	add	r2, sp, #8
   23f4e:	4608      	mov	r0, r1
   23f50:	f7ff fe95 	bl	23c7e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23f54:	4623      	mov	r3, r4
   23f56:	4652      	mov	r2, sl
   23f58:	a90a      	add	r1, sp, #40	; 0x28
   23f5a:	4650      	mov	r0, sl
   23f5c:	9500      	str	r5, [sp, #0]
   23f5e:	f7ff fde4 	bl	23b2a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23f62:	462a      	mov	r2, r5
   23f64:	a912      	add	r1, sp, #72	; 0x48
   23f66:	4638      	mov	r0, r7
   23f68:	f7ff fd78 	bl	23a5c <uECC_vli_set>
}
   23f6c:	b01a      	add	sp, #104	; 0x68
   23f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023f72 <uECC_vli_modInv>:
{
   23f72:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f74:	460f      	mov	r7, r1
   23f76:	b0a1      	sub	sp, #132	; 0x84
   23f78:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   23f7a:	4619      	mov	r1, r3
   23f7c:	4638      	mov	r0, r7
{
   23f7e:	4615      	mov	r5, r2
   23f80:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23f82:	f7ff fd33 	bl	239ec <uECC_vli_isZero>
   23f86:	b128      	cbz	r0, 23f94 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   23f88:	4630      	mov	r0, r6
}
   23f8a:	b021      	add	sp, #132	; 0x84
   23f8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   23f90:	f7ff bd21 	b.w	239d6 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   23f94:	4622      	mov	r2, r4
   23f96:	4639      	mov	r1, r7
   23f98:	4668      	mov	r0, sp
   23f9a:	f7ff fd5f 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   23f9e:	4629      	mov	r1, r5
   23fa0:	a808      	add	r0, sp, #32
   23fa2:	f7ff fd5b 	bl	23a5c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   23fa6:	a810      	add	r0, sp, #64	; 0x40
   23fa8:	4621      	mov	r1, r4
   23faa:	f7ff fd14 	bl	239d6 <uECC_vli_clear>
	u[0] = 1;
   23fae:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   23fb0:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   23fb2:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   23fb4:	f7ff fd0f 	bl	239d6 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   23fb8:	4622      	mov	r2, r4
   23fba:	a908      	add	r1, sp, #32
   23fbc:	4668      	mov	r0, sp
   23fbe:	f7ff fd59 	bl	23a74 <uECC_vli_cmp_unsafe>
   23fc2:	b930      	cbnz	r0, 23fd2 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   23fc4:	4622      	mov	r2, r4
   23fc6:	a910      	add	r1, sp, #64	; 0x40
   23fc8:	4630      	mov	r0, r6
   23fca:	f7ff fd47 	bl	23a5c <uECC_vli_set>
}
   23fce:	b021      	add	sp, #132	; 0x84
   23fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   23fd2:	9b00      	ldr	r3, [sp, #0]
   23fd4:	07da      	lsls	r2, r3, #31
   23fd6:	d409      	bmi.n	23fec <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   23fd8:	4621      	mov	r1, r4
   23fda:	4668      	mov	r0, sp
   23fdc:	f7ff fc6e 	bl	238bc <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   23fe0:	4622      	mov	r2, r4
   23fe2:	4629      	mov	r1, r5
   23fe4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   23fe6:	f7ff fc76 	bl	238d6 <vli_modInv_update>
   23fea:	e7e5      	b.n	23fb8 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   23fec:	9b08      	ldr	r3, [sp, #32]
   23fee:	07db      	lsls	r3, r3, #31
   23ff0:	d407      	bmi.n	24002 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   23ff2:	4621      	mov	r1, r4
   23ff4:	a808      	add	r0, sp, #32
   23ff6:	f7ff fc61 	bl	238bc <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   23ffa:	4622      	mov	r2, r4
   23ffc:	4629      	mov	r1, r5
   23ffe:	a818      	add	r0, sp, #96	; 0x60
   24000:	e7f1      	b.n	23fe6 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   24002:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   24004:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   24006:	dd1c      	ble.n	24042 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   24008:	aa08      	add	r2, sp, #32
   2400a:	4669      	mov	r1, sp
   2400c:	4668      	mov	r0, sp
   2400e:	f7ff fd58 	bl	23ac2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   24012:	4621      	mov	r1, r4
   24014:	4668      	mov	r0, sp
   24016:	f7ff fc51 	bl	238bc <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2401a:	4622      	mov	r2, r4
   2401c:	a918      	add	r1, sp, #96	; 0x60
   2401e:	a810      	add	r0, sp, #64	; 0x40
   24020:	f7ff fd28 	bl	23a74 <uECC_vli_cmp_unsafe>
   24024:	2800      	cmp	r0, #0
   24026:	da05      	bge.n	24034 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   24028:	a910      	add	r1, sp, #64	; 0x40
   2402a:	4623      	mov	r3, r4
   2402c:	462a      	mov	r2, r5
   2402e:	4608      	mov	r0, r1
   24030:	f7ff fc2a 	bl	23888 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   24034:	a910      	add	r1, sp, #64	; 0x40
   24036:	4623      	mov	r3, r4
   24038:	aa18      	add	r2, sp, #96	; 0x60
   2403a:	4608      	mov	r0, r1
   2403c:	f7ff fd41 	bl	23ac2 <uECC_vli_sub>
   24040:	e7ce      	b.n	23fe0 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   24042:	466a      	mov	r2, sp
   24044:	a808      	add	r0, sp, #32
   24046:	f7ff fd3c 	bl	23ac2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2404a:	4621      	mov	r1, r4
   2404c:	a808      	add	r0, sp, #32
   2404e:	f7ff fc35 	bl	238bc <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   24052:	4622      	mov	r2, r4
   24054:	a910      	add	r1, sp, #64	; 0x40
   24056:	a818      	add	r0, sp, #96	; 0x60
   24058:	f7ff fd0c 	bl	23a74 <uECC_vli_cmp_unsafe>
   2405c:	2800      	cmp	r0, #0
   2405e:	da05      	bge.n	2406c <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   24060:	a918      	add	r1, sp, #96	; 0x60
   24062:	4623      	mov	r3, r4
   24064:	462a      	mov	r2, r5
   24066:	4608      	mov	r0, r1
   24068:	f7ff fc0e 	bl	23888 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2406c:	a918      	add	r1, sp, #96	; 0x60
   2406e:	4623      	mov	r3, r4
   24070:	aa10      	add	r2, sp, #64	; 0x40
   24072:	4608      	mov	r0, r1
   24074:	f7ff fd25 	bl	23ac2 <uECC_vli_sub>
   24078:	e7bf      	b.n	23ffa <uECC_vli_modInv+0x88>

0002407a <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2407a:	7809      	ldrb	r1, [r1, #0]
   2407c:	0049      	lsls	r1, r1, #1
   2407e:	b249      	sxtb	r1, r1
   24080:	f7ff bcb4 	b.w	239ec <uECC_vli_isZero>

00024084 <apply_z>:
{
   24084:	b5f0      	push	{r4, r5, r6, r7, lr}
   24086:	4615      	mov	r5, r2
   24088:	b089      	sub	sp, #36	; 0x24
   2408a:	461c      	mov	r4, r3
   2408c:	4607      	mov	r7, r0
   2408e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   24090:	461a      	mov	r2, r3
   24092:	4629      	mov	r1, r5
   24094:	4668      	mov	r0, sp
   24096:	f7ff fe02 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2409a:	4623      	mov	r3, r4
   2409c:	466a      	mov	r2, sp
   2409e:	4639      	mov	r1, r7
   240a0:	4638      	mov	r0, r7
   240a2:	f7ff fdec 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   240a6:	4623      	mov	r3, r4
   240a8:	462a      	mov	r2, r5
   240aa:	4669      	mov	r1, sp
   240ac:	4668      	mov	r0, sp
   240ae:	f7ff fde6 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   240b2:	4623      	mov	r3, r4
   240b4:	466a      	mov	r2, sp
   240b6:	4631      	mov	r1, r6
   240b8:	4630      	mov	r0, r6
   240ba:	f7ff fde0 	bl	23c7e <uECC_vli_modMult_fast>
}
   240be:	b009      	add	sp, #36	; 0x24
   240c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000240c2 <XYcZ_add>:
{
   240c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240c6:	b08a      	sub	sp, #40	; 0x28
   240c8:	4614      	mov	r4, r2
   240ca:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   240ce:	4655      	mov	r5, sl
{
   240d0:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   240d2:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   240d6:	9600      	str	r6, [sp, #0]
{
   240d8:	4680      	mov	r8, r0
   240da:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   240dc:	462b      	mov	r3, r5
   240de:	4602      	mov	r2, r0
   240e0:	4621      	mov	r1, r4
   240e2:	a802      	add	r0, sp, #8
   240e4:	f7ff fd21 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   240e8:	a902      	add	r1, sp, #8
   240ea:	4652      	mov	r2, sl
   240ec:	4608      	mov	r0, r1
   240ee:	f7ff fdd6 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   240f2:	4653      	mov	r3, sl
   240f4:	aa02      	add	r2, sp, #8
   240f6:	4641      	mov	r1, r8
   240f8:	4640      	mov	r0, r8
   240fa:	f7ff fdc0 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   240fe:	4653      	mov	r3, sl
   24100:	aa02      	add	r2, sp, #8
   24102:	4621      	mov	r1, r4
   24104:	4620      	mov	r0, r4
   24106:	f7ff fdba 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2410a:	462b      	mov	r3, r5
   2410c:	464a      	mov	r2, r9
   2410e:	4639      	mov	r1, r7
   24110:	4638      	mov	r0, r7
   24112:	9600      	str	r6, [sp, #0]
   24114:	f7ff fd09 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   24118:	4652      	mov	r2, sl
   2411a:	4639      	mov	r1, r7
   2411c:	a802      	add	r0, sp, #8
   2411e:	f7ff fdbe 	bl	23c9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   24122:	a902      	add	r1, sp, #8
   24124:	462b      	mov	r3, r5
   24126:	4642      	mov	r2, r8
   24128:	4608      	mov	r0, r1
   2412a:	9600      	str	r6, [sp, #0]
   2412c:	f7ff fcfd 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   24130:	a902      	add	r1, sp, #8
   24132:	462b      	mov	r3, r5
   24134:	4622      	mov	r2, r4
   24136:	4608      	mov	r0, r1
   24138:	9600      	str	r6, [sp, #0]
   2413a:	f7ff fcf6 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2413e:	462b      	mov	r3, r5
   24140:	4642      	mov	r2, r8
   24142:	4621      	mov	r1, r4
   24144:	4620      	mov	r0, r4
   24146:	9600      	str	r6, [sp, #0]
   24148:	f7ff fcef 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2414c:	4653      	mov	r3, sl
   2414e:	4622      	mov	r2, r4
   24150:	4649      	mov	r1, r9
   24152:	4648      	mov	r0, r9
   24154:	f7ff fd93 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   24158:	462b      	mov	r3, r5
   2415a:	aa02      	add	r2, sp, #8
   2415c:	4641      	mov	r1, r8
   2415e:	4620      	mov	r0, r4
   24160:	9600      	str	r6, [sp, #0]
   24162:	f7ff fce2 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   24166:	4653      	mov	r3, sl
   24168:	4622      	mov	r2, r4
   2416a:	4639      	mov	r1, r7
   2416c:	4638      	mov	r0, r7
   2416e:	f7ff fd86 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   24172:	462b      	mov	r3, r5
   24174:	464a      	mov	r2, r9
   24176:	4639      	mov	r1, r7
   24178:	4638      	mov	r0, r7
   2417a:	9600      	str	r6, [sp, #0]
   2417c:	f7ff fcd5 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   24180:	4632      	mov	r2, r6
   24182:	a902      	add	r1, sp, #8
   24184:	4620      	mov	r0, r4
   24186:	f7ff fc69 	bl	23a5c <uECC_vli_set>
}
   2418a:	b00a      	add	sp, #40	; 0x28
   2418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024190 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   24190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24194:	b0b1      	sub	sp, #196	; 0xc4
   24196:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2419a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2419c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   241a0:	a818      	add	r0, sp, #96	; 0x60
{
   241a2:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   241a4:	463a      	mov	r2, r7
{
   241a6:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   241a8:	f7ff fc58 	bl	23a5c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   241ac:	00bb      	lsls	r3, r7, #2
   241ae:	9305      	str	r3, [sp, #20]
   241b0:	9b04      	ldr	r3, [sp, #16]
   241b2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   241b6:	4619      	mov	r1, r3
   241b8:	a828      	add	r0, sp, #160	; 0xa0
   241ba:	9302      	str	r3, [sp, #8]
   241bc:	f7ff fc4e 	bl	23a5c <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   241c0:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   241c4:	2d00      	cmp	r5, #0
   241c6:	f000 8086 	beq.w	242d6 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   241ca:	4632      	mov	r2, r6
   241cc:	4629      	mov	r1, r5
   241ce:	a808      	add	r0, sp, #32
   241d0:	f7ff fc44 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   241d4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   241d8:	4632      	mov	r2, r6
   241da:	a918      	add	r1, sp, #96	; 0x60
   241dc:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   241de:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   241e2:	f7ff fc3b 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   241e6:	a928      	add	r1, sp, #160	; 0xa0
   241e8:	4648      	mov	r0, r9
   241ea:	f7ff fc37 	bl	23a5c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   241ee:	4623      	mov	r3, r4
   241f0:	aa08      	add	r2, sp, #32
   241f2:	a818      	add	r0, sp, #96	; 0x60
   241f4:	f7ff ff46 	bl	24084 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   241f8:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   241fc:	4623      	mov	r3, r4
   241fe:	aa08      	add	r2, sp, #32
   24200:	a928      	add	r1, sp, #160	; 0xa0
   24202:	a818      	add	r0, sp, #96	; 0x60
   24204:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   24206:	4623      	mov	r3, r4
   24208:	aa08      	add	r2, sp, #32
   2420a:	4649      	mov	r1, r9
   2420c:	4640      	mov	r0, r8
   2420e:	f7ff ff39 	bl	24084 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   24212:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   24216:	3d02      	subs	r5, #2
   24218:	b22d      	sxth	r5, r5
   2421a:	2d00      	cmp	r5, #0
   2421c:	dc62      	bgt.n	242e4 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2421e:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24222:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   24224:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24228:	ab10      	add	r3, sp, #64	; 0x40
   2422a:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2422e:	43ed      	mvns	r5, r5
   24230:	ab20      	add	r3, sp, #128	; 0x80
   24232:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   24236:	f005 0501 	and.w	r5, r5, #1
   2423a:	ab10      	add	r3, sp, #64	; 0x40
   2423c:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   24240:	ab20      	add	r3, sp, #128	; 0x80
   24242:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   24246:	462b      	mov	r3, r5
   24248:	464a      	mov	r2, r9
   2424a:	4631      	mov	r1, r6
   2424c:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2424e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24252:	f7ff fe00 	bl	23e56 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   24256:	4653      	mov	r3, sl
   24258:	aa10      	add	r2, sp, #64	; 0x40
   2425a:	a918      	add	r1, sp, #96	; 0x60
   2425c:	a808      	add	r0, sp, #32
   2425e:	9700      	str	r7, [sp, #0]
   24260:	f7ff fc63 	bl	23b2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   24264:	a908      	add	r1, sp, #32
   24266:	4623      	mov	r3, r4
   24268:	4632      	mov	r2, r6
   2426a:	4608      	mov	r0, r1
   2426c:	f7ff fd07 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   24270:	a908      	add	r1, sp, #32
   24272:	9a04      	ldr	r2, [sp, #16]
   24274:	4623      	mov	r3, r4
   24276:	4608      	mov	r0, r1
   24278:	f7ff fd01 	bl	23c7e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2427c:	a908      	add	r1, sp, #32
   2427e:	463b      	mov	r3, r7
   24280:	4652      	mov	r2, sl
   24282:	4608      	mov	r0, r1
   24284:	f7ff fe75 	bl	23f72 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   24288:	a908      	add	r1, sp, #32
   2428a:	9a02      	ldr	r2, [sp, #8]
   2428c:	4623      	mov	r3, r4
   2428e:	4608      	mov	r0, r1
   24290:	f7ff fcf5 	bl	23c7e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   24294:	a908      	add	r1, sp, #32
   24296:	4623      	mov	r3, r4
   24298:	4642      	mov	r2, r8
   2429a:	4608      	mov	r0, r1
   2429c:	f7ff fcef 	bl	23c7e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   242a0:	4633      	mov	r3, r6
   242a2:	4642      	mov	r2, r8
   242a4:	4629      	mov	r1, r5
   242a6:	4648      	mov	r0, r9
   242a8:	9400      	str	r4, [sp, #0]
   242aa:	f7ff ff0a 	bl	240c2 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   242ae:	4623      	mov	r3, r4
   242b0:	aa08      	add	r2, sp, #32
   242b2:	a920      	add	r1, sp, #128	; 0x80
   242b4:	a810      	add	r0, sp, #64	; 0x40
   242b6:	f7ff fee5 	bl	24084 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   242ba:	9803      	ldr	r0, [sp, #12]
   242bc:	463a      	mov	r2, r7
   242be:	a910      	add	r1, sp, #64	; 0x40
   242c0:	f7ff fbcc 	bl	23a5c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   242c4:	9803      	ldr	r0, [sp, #12]
   242c6:	9b05      	ldr	r3, [sp, #20]
   242c8:	a920      	add	r1, sp, #128	; 0x80
   242ca:	4418      	add	r0, r3
   242cc:	f7ff fbc6 	bl	23a5c <uECC_vli_set>
}
   242d0:	b031      	add	sp, #196	; 0xc4
   242d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   242d6:	4631      	mov	r1, r6
   242d8:	a808      	add	r0, sp, #32
   242da:	f7ff fb7c 	bl	239d6 <uECC_vli_clear>
		z[0] = 1;
   242de:	2301      	movs	r3, #1
   242e0:	9308      	str	r3, [sp, #32]
   242e2:	e777      	b.n	241d4 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   242e4:	4629      	mov	r1, r5
   242e6:	4650      	mov	r0, sl
   242e8:	f7ff fb8f 	bl	23a0a <uECC_vli_testBit>
   242ec:	fab0 f680 	clz	r6, r0
   242f0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   242f2:	f1c6 0101 	rsb	r1, r6, #1
   242f6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   242fa:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   242fe:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   24302:	4633      	mov	r3, r6
   24304:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   24308:	465a      	mov	r2, fp
   2430a:	9400      	str	r4, [sp, #0]
   2430c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   24310:	f7ff fda1 	bl	23e56 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   24314:	9907      	ldr	r1, [sp, #28]
   24316:	9806      	ldr	r0, [sp, #24]
   24318:	9400      	str	r4, [sp, #0]
   2431a:	460b      	mov	r3, r1
   2431c:	4602      	mov	r2, r0
   2431e:	4631      	mov	r1, r6
   24320:	4658      	mov	r0, fp
   24322:	f7ff fece 	bl	240c2 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   24326:	3d01      	subs	r5, #1
   24328:	e776      	b.n	24218 <EccPoint_mult+0x88>

0002432a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2432a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2432e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   24332:	f119 081f 	adds.w	r8, r9, #31
{
   24336:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   24338:	bf48      	it	mi
   2433a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2433e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   24340:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   24344:	3524      	adds	r5, #36	; 0x24
   24346:	4601      	mov	r1, r0
{
   24348:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2434a:	4643      	mov	r3, r8
   2434c:	462a      	mov	r2, r5
   2434e:	4630      	mov	r0, r6
   24350:	f7ff fa9a 	bl	23888 <uECC_vli_add>
   24354:	4604      	mov	r4, r0
   24356:	b990      	cbnz	r0, 2437e <regularize_k+0x54>
   24358:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2435c:	da06      	bge.n	2436c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2435e:	4649      	mov	r1, r9
   24360:	4630      	mov	r0, r6
   24362:	f7ff fb52 	bl	23a0a <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   24366:	1e04      	subs	r4, r0, #0
   24368:	bf18      	it	ne
   2436a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2436c:	4643      	mov	r3, r8
   2436e:	462a      	mov	r2, r5
   24370:	4631      	mov	r1, r6
   24372:	4638      	mov	r0, r7
   24374:	f7ff fa88 	bl	23888 <uECC_vli_add>

	return carry;
}
   24378:	4620      	mov	r0, r4
   2437a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2437e:	2401      	movs	r4, #1
   24380:	e7f4      	b.n	2436c <regularize_k+0x42>

00024382 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   24382:	b530      	push	{r4, r5, lr}
   24384:	4614      	mov	r4, r2
   24386:	b095      	sub	sp, #84	; 0x54
   24388:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2438a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2438c:	4623      	mov	r3, r4
{
   2438e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   24390:	a904      	add	r1, sp, #16
   24392:	9102      	str	r1, [sp, #8]
   24394:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   24396:	f7ff ffc8 	bl	2432a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2439a:	fab0 f380 	clz	r3, r0
   2439e:	095b      	lsrs	r3, r3, #5
   243a0:	aa14      	add	r2, sp, #80	; 0x50
   243a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   243a6:	8863      	ldrh	r3, [r4, #2]
   243a8:	9401      	str	r4, [sp, #4]
   243aa:	3301      	adds	r3, #1
   243ac:	b21b      	sxth	r3, r3
   243ae:	9300      	str	r3, [sp, #0]
   243b0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   243b4:	2300      	movs	r3, #0
   243b6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   243ba:	4628      	mov	r0, r5
   243bc:	f7ff fee8 	bl	24190 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   243c0:	4621      	mov	r1, r4
   243c2:	4628      	mov	r0, r5
   243c4:	f7ff fe59 	bl	2407a <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   243c8:	fab0 f080 	clz	r0, r0
   243cc:	0940      	lsrs	r0, r0, #5
   243ce:	b015      	add	sp, #84	; 0x54
   243d0:	bd30      	pop	{r4, r5, pc}

000243d2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   243d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   243d4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   243d6:	1e4f      	subs	r7, r1, #1
   243d8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   243da:	428c      	cmp	r4, r1
   243dc:	f105 0501 	add.w	r5, r5, #1
   243e0:	db00      	blt.n	243e4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   243e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   243e4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   243e6:	f023 0603 	bic.w	r6, r3, #3
   243ea:	f003 0303 	and.w	r3, r3, #3
   243ee:	5996      	ldr	r6, [r2, r6]
   243f0:	00db      	lsls	r3, r3, #3
   243f2:	fa26 f303 	lsr.w	r3, r6, r3
   243f6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   243f8:	e7ee      	b.n	243d8 <uECC_vli_nativeToBytes+0x6>

000243fa <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   243fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243fc:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   243fe:	1cd1      	adds	r1, r2, #3
   24400:	bf48      	it	mi
   24402:	1d91      	addmi	r1, r2, #6
   24404:	f341 0187 	sbfx	r1, r1, #2, #8
{
   24408:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2440a:	f7ff fae4 	bl	239d6 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2440e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   24410:	1e67      	subs	r7, r4, #1
   24412:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   24414:	42a2      	cmp	r2, r4
   24416:	f105 0501 	add.w	r5, r5, #1
   2441a:	db00      	blt.n	2441e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2441e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   24420:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   24424:	5cb2      	ldrb	r2, [r6, r2]
   24426:	f003 0303 	and.w	r3, r3, #3
   2442a:	00db      	lsls	r3, r3, #3
   2442c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   24430:	5842      	ldr	r2, [r0, r1]
   24432:	431a      	orrs	r2, r3
   24434:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   24436:	e7ec      	b.n	24412 <uECC_vli_bytesToNative+0x18>

00024438 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   24438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2443a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2443c:	f991 6000 	ldrsb.w	r6, [r1]
{
   24440:	4605      	mov	r5, r0
   24442:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   24444:	f7ff fe19 	bl	2407a <EccPoint_isZero>
   24448:	bb28      	cbnz	r0, 24496 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2444a:	1d27      	adds	r7, r4, #4
   2444c:	4632      	mov	r2, r6
   2444e:	4629      	mov	r1, r5
   24450:	4638      	mov	r0, r7
   24452:	f7ff fb0f 	bl	23a74 <uECC_vli_cmp_unsafe>
   24456:	2801      	cmp	r0, #1
   24458:	d120      	bne.n	2449c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2445a:	4632      	mov	r2, r6
   2445c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   24460:	4638      	mov	r0, r7
   24462:	f7ff fb07 	bl	23a74 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   24466:	2801      	cmp	r0, #1
   24468:	d118      	bne.n	2449c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2446a:	4622      	mov	r2, r4
   2446c:	4668      	mov	r0, sp
   2446e:	f7ff fc16 	bl	23c9e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   24472:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   24476:	4622      	mov	r2, r4
   24478:	4629      	mov	r1, r5
   2447a:	a808      	add	r0, sp, #32
   2447c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2447e:	4632      	mov	r2, r6
   24480:	a908      	add	r1, sp, #32
   24482:	4668      	mov	r0, sp
   24484:	f7ff fb0b 	bl	23a9e <uECC_vli_equal>
		return -3;
   24488:	2800      	cmp	r0, #0
   2448a:	bf0c      	ite	eq
   2448c:	2000      	moveq	r0, #0
   2448e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   24492:	b011      	add	sp, #68	; 0x44
   24494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   24496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2449a:	e7fa      	b.n	24492 <uECC_valid_point+0x5a>
		return -2;
   2449c:	f06f 0001 	mvn.w	r0, #1
   244a0:	e7f7      	b.n	24492 <uECC_valid_point+0x5a>

000244a2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   244a2:	b570      	push	{r4, r5, r6, lr}
   244a4:	460c      	mov	r4, r1
   244a6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   244a8:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   244aa:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   244ae:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   244b0:	4601      	mov	r1, r0
   244b2:	4668      	mov	r0, sp
   244b4:	f7ff ffa1 	bl	243fa <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   244b8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   244bc:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   244c0:	18a9      	adds	r1, r5, r2
   244c2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   244c6:	f7ff ff98 	bl	243fa <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   244ca:	2210      	movs	r2, #16
   244cc:	4631      	mov	r1, r6
   244ce:	4668      	mov	r0, sp
   244d0:	f7ff fad0 	bl	23a74 <uECC_vli_cmp_unsafe>
   244d4:	b128      	cbz	r0, 244e2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   244d6:	4621      	mov	r1, r4
   244d8:	4668      	mov	r0, sp
   244da:	f7ff ffad 	bl	24438 <uECC_valid_point>
}
   244de:	b010      	add	sp, #64	; 0x40
   244e0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   244e2:	f06f 0003 	mvn.w	r0, #3
   244e6:	e7fa      	b.n	244de <uECC_valid_public_key+0x3c>

000244e8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   244e8:	78cb      	ldrb	r3, [r1, #3]
   244ea:	7802      	ldrb	r2, [r0, #0]
   244ec:	4053      	eors	r3, r2
   244ee:	7003      	strb	r3, [r0, #0]
   244f0:	884b      	ldrh	r3, [r1, #2]
   244f2:	7842      	ldrb	r2, [r0, #1]
   244f4:	4053      	eors	r3, r2
   244f6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   244f8:	680a      	ldr	r2, [r1, #0]
   244fa:	7883      	ldrb	r3, [r0, #2]
   244fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24500:	7083      	strb	r3, [r0, #2]
   24502:	680a      	ldr	r2, [r1, #0]
   24504:	78c3      	ldrb	r3, [r0, #3]
   24506:	4053      	eors	r3, r2
   24508:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2450a:	79cb      	ldrb	r3, [r1, #7]
   2450c:	7902      	ldrb	r2, [r0, #4]
   2450e:	4053      	eors	r3, r2
   24510:	7103      	strb	r3, [r0, #4]
   24512:	88cb      	ldrh	r3, [r1, #6]
   24514:	7942      	ldrb	r2, [r0, #5]
   24516:	4053      	eors	r3, r2
   24518:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2451a:	684a      	ldr	r2, [r1, #4]
   2451c:	7983      	ldrb	r3, [r0, #6]
   2451e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24522:	7183      	strb	r3, [r0, #6]
   24524:	684a      	ldr	r2, [r1, #4]
   24526:	79c3      	ldrb	r3, [r0, #7]
   24528:	4053      	eors	r3, r2
   2452a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2452c:	7acb      	ldrb	r3, [r1, #11]
   2452e:	7a02      	ldrb	r2, [r0, #8]
   24530:	4053      	eors	r3, r2
   24532:	7203      	strb	r3, [r0, #8]
   24534:	7a42      	ldrb	r2, [r0, #9]
   24536:	894b      	ldrh	r3, [r1, #10]
   24538:	4053      	eors	r3, r2
   2453a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2453c:	688a      	ldr	r2, [r1, #8]
   2453e:	7a83      	ldrb	r3, [r0, #10]
   24540:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24544:	7283      	strb	r3, [r0, #10]
   24546:	688a      	ldr	r2, [r1, #8]
   24548:	7ac3      	ldrb	r3, [r0, #11]
   2454a:	4053      	eors	r3, r2
   2454c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2454e:	7bcb      	ldrb	r3, [r1, #15]
   24550:	7b02      	ldrb	r2, [r0, #12]
   24552:	4053      	eors	r3, r2
   24554:	7303      	strb	r3, [r0, #12]
   24556:	89cb      	ldrh	r3, [r1, #14]
   24558:	7b42      	ldrb	r2, [r0, #13]
   2455a:	4053      	eors	r3, r2
   2455c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2455e:	68ca      	ldr	r2, [r1, #12]
   24560:	7b83      	ldrb	r3, [r0, #14]
   24562:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24566:	7383      	strb	r3, [r0, #14]
   24568:	68ca      	ldr	r2, [r1, #12]
   2456a:	7bc3      	ldrb	r3, [r0, #15]
   2456c:	4053      	eors	r3, r2
   2456e:	73c3      	strb	r3, [r0, #15]
}
   24570:	4770      	bx	lr

00024572 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   24572:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24574:	7802      	ldrb	r2, [r0, #0]
   24576:	f88d 2000 	strb.w	r2, [sp]
   2457a:	7942      	ldrb	r2, [r0, #5]
   2457c:	f88d 2001 	strb.w	r2, [sp, #1]
   24580:	7a82      	ldrb	r2, [r0, #10]
   24582:	f88d 2002 	strb.w	r2, [sp, #2]
   24586:	7bc2      	ldrb	r2, [r0, #15]
   24588:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2458c:	7902      	ldrb	r2, [r0, #4]
   2458e:	f88d 2004 	strb.w	r2, [sp, #4]
   24592:	7a42      	ldrb	r2, [r0, #9]
   24594:	f88d 2005 	strb.w	r2, [sp, #5]
   24598:	7b82      	ldrb	r2, [r0, #14]
   2459a:	f88d 2006 	strb.w	r2, [sp, #6]
   2459e:	78c2      	ldrb	r2, [r0, #3]
   245a0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   245a4:	7a02      	ldrb	r2, [r0, #8]
   245a6:	f88d 2008 	strb.w	r2, [sp, #8]
   245aa:	7b42      	ldrb	r2, [r0, #13]
   245ac:	f88d 2009 	strb.w	r2, [sp, #9]
   245b0:	7882      	ldrb	r2, [r0, #2]
   245b2:	f88d 200a 	strb.w	r2, [sp, #10]
   245b6:	79c2      	ldrb	r2, [r0, #7]
   245b8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   245bc:	7b02      	ldrb	r2, [r0, #12]
   245be:	f88d 200c 	strb.w	r2, [sp, #12]
   245c2:	7842      	ldrb	r2, [r0, #1]
   245c4:	7ac3      	ldrb	r3, [r0, #11]
   245c6:	f88d 200d 	strb.w	r2, [sp, #13]
   245ca:	7982      	ldrb	r2, [r0, #6]
   245cc:	f88d 200e 	strb.w	r2, [sp, #14]
   245d0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   245d4:	2310      	movs	r3, #16
   245d6:	466a      	mov	r2, sp
   245d8:	4619      	mov	r1, r3
   245da:	f7ff f891 	bl	23700 <_copy>
}
   245de:	b005      	add	sp, #20
   245e0:	f85d fb04 	ldr.w	pc, [sp], #4

000245e4 <mult_row_column>:
{
   245e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245e6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   245e8:	7808      	ldrb	r0, [r1, #0]
{
   245ea:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   245ec:	f7ff f897 	bl	2371e <_double_byte>
   245f0:	4605      	mov	r5, r0
   245f2:	7860      	ldrb	r0, [r4, #1]
   245f4:	f7ff f893 	bl	2371e <_double_byte>
   245f8:	78a2      	ldrb	r2, [r4, #2]
   245fa:	7863      	ldrb	r3, [r4, #1]
   245fc:	4053      	eors	r3, r2
   245fe:	78e2      	ldrb	r2, [r4, #3]
   24600:	4053      	eors	r3, r2
   24602:	405d      	eors	r5, r3
   24604:	4045      	eors	r5, r0
   24606:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24608:	7860      	ldrb	r0, [r4, #1]
   2460a:	7827      	ldrb	r7, [r4, #0]
   2460c:	f7ff f887 	bl	2371e <_double_byte>
   24610:	4605      	mov	r5, r0
   24612:	78a0      	ldrb	r0, [r4, #2]
   24614:	f7ff f883 	bl	2371e <_double_byte>
   24618:	78a3      	ldrb	r3, [r4, #2]
   2461a:	405f      	eors	r7, r3
   2461c:	78e3      	ldrb	r3, [r4, #3]
   2461e:	405f      	eors	r7, r3
   24620:	407d      	eors	r5, r7
   24622:	4045      	eors	r5, r0
   24624:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24626:	78a0      	ldrb	r0, [r4, #2]
   24628:	7865      	ldrb	r5, [r4, #1]
   2462a:	7827      	ldrb	r7, [r4, #0]
   2462c:	f7ff f877 	bl	2371e <_double_byte>
   24630:	406f      	eors	r7, r5
   24632:	4605      	mov	r5, r0
   24634:	78e0      	ldrb	r0, [r4, #3]
   24636:	f7ff f872 	bl	2371e <_double_byte>
   2463a:	78e3      	ldrb	r3, [r4, #3]
   2463c:	405f      	eors	r7, r3
   2463e:	407d      	eors	r5, r7
   24640:	4045      	eors	r5, r0
   24642:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24644:	7820      	ldrb	r0, [r4, #0]
   24646:	f7ff f86a 	bl	2371e <_double_byte>
   2464a:	7863      	ldrb	r3, [r4, #1]
   2464c:	7825      	ldrb	r5, [r4, #0]
   2464e:	405d      	eors	r5, r3
   24650:	78a3      	ldrb	r3, [r4, #2]
   24652:	405d      	eors	r5, r3
   24654:	4045      	eors	r5, r0
   24656:	78e0      	ldrb	r0, [r4, #3]
   24658:	f7ff f861 	bl	2371e <_double_byte>
   2465c:	b2ed      	uxtb	r5, r5
   2465e:	4045      	eors	r5, r0
   24660:	70f5      	strb	r5, [r6, #3]
}
   24662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024664 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24664:	b570      	push	{r4, r5, r6, lr}
   24666:	4614      	mov	r4, r2
   24668:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2466a:	4605      	mov	r5, r0
   2466c:	2800      	cmp	r0, #0
   2466e:	d049      	beq.n	24704 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   24670:	2900      	cmp	r1, #0
   24672:	d049      	beq.n	24708 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24674:	2a00      	cmp	r2, #0
   24676:	d049      	beq.n	2470c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24678:	2310      	movs	r3, #16
   2467a:	460a      	mov	r2, r1
   2467c:	4668      	mov	r0, sp
   2467e:	4619      	mov	r1, r3
   24680:	f7ff f83e 	bl	23700 <_copy>
	add_round_key(state, s->words);
   24684:	4621      	mov	r1, r4
   24686:	4668      	mov	r0, sp
   24688:	f7ff ff2e 	bl	244e8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2468c:	3410      	adds	r4, #16
   2468e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24692:	4668      	mov	r0, sp
   24694:	f7e3 fd0a 	bl	80ac <sub_bytes>
		shift_rows(state);
   24698:	4668      	mov	r0, sp
   2469a:	f7ff ff6a 	bl	24572 <shift_rows>
	mult_row_column(t, s);
   2469e:	4669      	mov	r1, sp
   246a0:	a804      	add	r0, sp, #16
   246a2:	f7ff ff9f 	bl	245e4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   246a6:	a901      	add	r1, sp, #4
   246a8:	a805      	add	r0, sp, #20
   246aa:	f7ff ff9b 	bl	245e4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   246ae:	a902      	add	r1, sp, #8
   246b0:	a806      	add	r0, sp, #24
   246b2:	f7ff ff97 	bl	245e4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   246b6:	a903      	add	r1, sp, #12
   246b8:	a807      	add	r0, sp, #28
   246ba:	f7ff ff93 	bl	245e4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   246be:	2310      	movs	r3, #16
   246c0:	4619      	mov	r1, r3
   246c2:	eb0d 0203 	add.w	r2, sp, r3
   246c6:	4668      	mov	r0, sp
   246c8:	f7ff f81a 	bl	23700 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   246cc:	4621      	mov	r1, r4
   246ce:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   246d0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   246d2:	f7ff ff09 	bl	244e8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   246d6:	42a6      	cmp	r6, r4
   246d8:	d1db      	bne.n	24692 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   246da:	f7e3 fce7 	bl	80ac <sub_bytes>
	shift_rows(state);
   246de:	4668      	mov	r0, sp
   246e0:	f7ff ff47 	bl	24572 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   246e4:	4631      	mov	r1, r6
   246e6:	4668      	mov	r0, sp
   246e8:	f7ff fefe 	bl	244e8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   246ec:	2310      	movs	r3, #16
   246ee:	4619      	mov	r1, r3
   246f0:	466a      	mov	r2, sp
   246f2:	4628      	mov	r0, r5
   246f4:	f7ff f804 	bl	23700 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   246f8:	4668      	mov	r0, sp
   246fa:	2210      	movs	r2, #16
   246fc:	2100      	movs	r1, #0
   246fe:	f7ff f80c 	bl	2371a <_set>

	return TC_CRYPTO_SUCCESS;
   24702:	2001      	movs	r0, #1
}
   24704:	b008      	add	sp, #32
   24706:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24708:	4608      	mov	r0, r1
   2470a:	e7fb      	b.n	24704 <tc_aes_encrypt+0xa0>
   2470c:	4610      	mov	r0, r2
   2470e:	e7f9      	b.n	24704 <tc_aes_encrypt+0xa0>

00024710 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24710:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24712:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24714:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24716:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2471a:	2b00      	cmp	r3, #0
   2471c:	bfb4      	ite	lt
   2471e:	2387      	movlt	r3, #135	; 0x87
   24720:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24722:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24726:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2472a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2472c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24730:	d002      	beq.n	24738 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24732:	7813      	ldrb	r3, [r2, #0]
   24734:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24736:	e7f4      	b.n	24722 <gf_double+0x12>
	}
}
   24738:	bd10      	pop	{r4, pc}

0002473a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2473a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2473c:	b120      	cbz	r0, 24748 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2473e:	2258      	movs	r2, #88	; 0x58
   24740:	2100      	movs	r1, #0
   24742:	f7fe ffea 	bl	2371a <_set>
   24746:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24748:	bd08      	pop	{r3, pc}

0002474a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2474a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2474c:	4604      	mov	r4, r0
   2474e:	b188      	cbz	r0, 24774 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24750:	2210      	movs	r2, #16
   24752:	2100      	movs	r1, #0
   24754:	f7fe ffe1 	bl	2371a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24758:	2210      	movs	r2, #16
   2475a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2475e:	2100      	movs	r1, #0
   24760:	f7fe ffdb 	bl	2371a <_set>
	s->leftover_offset = 0;
   24764:	2300      	movs	r3, #0
   24766:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24768:	2200      	movs	r2, #0
   2476a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2476e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24772:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24774:	bd10      	pop	{r4, pc}

00024776 <tc_cmac_setup>:
{
   24776:	b570      	push	{r4, r5, r6, lr}
   24778:	460d      	mov	r5, r1
   2477a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2477c:	4604      	mov	r4, r0
   2477e:	b310      	cbz	r0, 247c6 <tc_cmac_setup+0x50>
   24780:	b311      	cbz	r1, 247c8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24782:	2258      	movs	r2, #88	; 0x58
   24784:	2100      	movs	r1, #0
   24786:	f7fe ffc8 	bl	2371a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2478a:	4629      	mov	r1, r5
	s->sched = sched;
   2478c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2478e:	4630      	mov	r0, r6
   24790:	f7e3 fc98 	bl	80c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24794:	2210      	movs	r2, #16
   24796:	2100      	movs	r1, #0
   24798:	4620      	mov	r0, r4
   2479a:	f7fe ffbe 	bl	2371a <_set>
	gf_double (s->K1, s->iv);
   2479e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   247a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   247a4:	4621      	mov	r1, r4
   247a6:	4620      	mov	r0, r4
   247a8:	f7ff ff5c 	bl	24664 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   247ac:	4621      	mov	r1, r4
   247ae:	4628      	mov	r0, r5
   247b0:	f7ff ffae 	bl	24710 <gf_double>
	gf_double (s->K2, s->K1);
   247b4:	4629      	mov	r1, r5
   247b6:	f104 0020 	add.w	r0, r4, #32
   247ba:	f7ff ffa9 	bl	24710 <gf_double>
	tc_cmac_init(s);
   247be:	4620      	mov	r0, r4
   247c0:	f7ff ffc3 	bl	2474a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   247c4:	2001      	movs	r0, #1
}
   247c6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   247c8:	4608      	mov	r0, r1
   247ca:	e7fc      	b.n	247c6 <tc_cmac_setup+0x50>

000247cc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   247cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247d0:	460d      	mov	r5, r1
   247d2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   247d4:	4604      	mov	r4, r0
   247d6:	2800      	cmp	r0, #0
   247d8:	d061      	beq.n	2489e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   247da:	b912      	cbnz	r2, 247e2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   247dc:	2001      	movs	r0, #1
}
   247de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   247e2:	2900      	cmp	r1, #0
   247e4:	d05b      	beq.n	2489e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   247e6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   247ea:	ea53 0102 	orrs.w	r1, r3, r2
   247ee:	d056      	beq.n	2489e <tc_cmac_update+0xd2>
	s->countdown--;
   247f0:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   247f2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   247f6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   247fa:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   247fe:	f1b8 0f00 	cmp.w	r8, #0
   24802:	d02a      	beq.n	2485a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24804:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24808:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2480c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2480e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   24810:	d208      	bcs.n	24824 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24812:	462a      	mov	r2, r5
   24814:	4633      	mov	r3, r6
   24816:	4631      	mov	r1, r6
   24818:	f7fe ff72 	bl	23700 <_copy>
			s->leftover_offset += data_length;
   2481c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2481e:	4432      	add	r2, r6
   24820:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24822:	e7db      	b.n	247dc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   24824:	463b      	mov	r3, r7
   24826:	462a      	mov	r2, r5
   24828:	4639      	mov	r1, r7
   2482a:	f7fe ff69 	bl	23700 <_copy>
		data_length -= remaining_space;
   2482e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   24830:	2300      	movs	r3, #0
   24832:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24834:	4446      	add	r6, r8
		data += remaining_space;
   24836:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24838:	1e63      	subs	r3, r4, #1
   2483a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2483e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24842:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24846:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24848:	ea82 0200 	eor.w	r2, r2, r0
   2484c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2484e:	d1f6      	bne.n	2483e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24850:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24852:	4621      	mov	r1, r4
   24854:	4620      	mov	r0, r4
   24856:	f7ff ff05 	bl	24664 <tc_aes_encrypt>
   2485a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2485e:	2e10      	cmp	r6, #16
   24860:	d80a      	bhi.n	24878 <tc_cmac_update+0xac>
	if (data_length > 0) {
   24862:	2e00      	cmp	r6, #0
   24864:	d0ba      	beq.n	247dc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   24866:	4633      	mov	r3, r6
   24868:	462a      	mov	r2, r5
   2486a:	4631      	mov	r1, r6
   2486c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24870:	f7fe ff46 	bl	23700 <_copy>
		s->leftover_offset = data_length;
   24874:	6466      	str	r6, [r4, #68]	; 0x44
   24876:	e7b1      	b.n	247dc <tc_cmac_update+0x10>
   24878:	1e63      	subs	r3, r4, #1
   2487a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2487c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24884:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24886:	ea82 0200 	eor.w	r2, r2, r0
   2488a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2488c:	d1f6      	bne.n	2487c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2488e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24890:	4621      	mov	r1, r4
   24892:	4620      	mov	r0, r4
   24894:	f7ff fee6 	bl	24664 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24898:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2489a:	3e10      	subs	r6, #16
   2489c:	e7df      	b.n	2485e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   2489e:	2000      	movs	r0, #0
   248a0:	e79d      	b.n	247de <tc_cmac_update+0x12>

000248a2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   248a2:	b570      	push	{r4, r5, r6, lr}
   248a4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   248a6:	4605      	mov	r5, r0
   248a8:	b1e8      	cbz	r0, 248e6 <tc_cmac_final+0x44>
   248aa:	b369      	cbz	r1, 24908 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   248ac:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   248ae:	2a10      	cmp	r2, #16
   248b0:	d11a      	bne.n	248e8 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   248b2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248b4:	1e63      	subs	r3, r4, #1
   248b6:	3901      	subs	r1, #1
   248b8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   248bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   248c0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   248c4:	4072      	eors	r2, r6
   248c6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248ca:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   248cc:	ea82 0206 	eor.w	r2, r2, r6
   248d0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248d2:	d1f3      	bne.n	248bc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   248d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   248d6:	4621      	mov	r1, r4
   248d8:	4628      	mov	r0, r5
   248da:	f7ff fec3 	bl	24664 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   248de:	4620      	mov	r0, r4
   248e0:	f7ff ff2b 	bl	2473a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   248e4:	2001      	movs	r0, #1
}
   248e6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   248e8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   248ec:	2100      	movs	r1, #0
   248ee:	f1c2 0210 	rsb	r2, r2, #16
   248f2:	4420      	add	r0, r4
   248f4:	f7fe ff11 	bl	2371a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   248f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   248fa:	4423      	add	r3, r4
   248fc:	2280      	movs	r2, #128	; 0x80
   248fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24902:	f104 0120 	add.w	r1, r4, #32
   24906:	e7d5      	b.n	248b4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24908:	4608      	mov	r0, r1
   2490a:	e7ec      	b.n	248e6 <tc_cmac_final+0x44>

0002490c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2490c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2490e:	6800      	ldr	r0, [r0, #0]
   24910:	f7e3 bc48 	b.w	81a4 <z_arm_fatal_error>

00024914 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24914:	2100      	movs	r1, #0
   24916:	2001      	movs	r0, #1
   24918:	f7e3 bc44 	b.w	81a4 <z_arm_fatal_error>

0002491c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2491c:	b508      	push	{r3, lr}
	handler();
   2491e:	f7e3 fcff 	bl	8320 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24926:	f7e3 bddf 	b.w	84e8 <z_arm_exc_exit>

0002492a <z_log_msg2_static_create.constprop.0>:
   2492a:	2300      	movs	r3, #0
   2492c:	f7fe bda3 	b.w	23476 <z_impl_z_log_msg2_static_create>

00024930 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24930:	3901      	subs	r1, #1
   24932:	4603      	mov	r3, r0
   24934:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24938:	b90a      	cbnz	r2, 2493e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2493a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2493c:	4770      	bx	lr
		*d = *s;
   2493e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24942:	e7f7      	b.n	24934 <strcpy+0x4>

00024944 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24944:	4603      	mov	r3, r0
	size_t n = 0;
   24946:	2000      	movs	r0, #0

	while (*s != '\0') {
   24948:	5c1a      	ldrb	r2, [r3, r0]
   2494a:	b902      	cbnz	r2, 2494e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2494c:	4770      	bx	lr
		n++;
   2494e:	3001      	adds	r0, #1
   24950:	e7fa      	b.n	24948 <strlen+0x4>

00024952 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24952:	4603      	mov	r3, r0
	size_t n = 0;
   24954:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24956:	5c1a      	ldrb	r2, [r3, r0]
   24958:	b10a      	cbz	r2, 2495e <strnlen+0xc>
   2495a:	4288      	cmp	r0, r1
   2495c:	d100      	bne.n	24960 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2495e:	4770      	bx	lr
		n++;
   24960:	3001      	adds	r0, #1
   24962:	e7f8      	b.n	24956 <strnlen+0x4>

00024964 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   24964:	1e43      	subs	r3, r0, #1
   24966:	3901      	subs	r1, #1
   24968:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2496c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24970:	4282      	cmp	r2, r0
   24972:	d101      	bne.n	24978 <strcmp+0x14>
   24974:	2a00      	cmp	r2, #0
   24976:	d1f7      	bne.n	24968 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24978:	1a10      	subs	r0, r2, r0
   2497a:	4770      	bx	lr

0002497c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2497c:	b510      	push	{r4, lr}
   2497e:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24980:	b15a      	cbz	r2, 2499a <memcmp+0x1e>
   24982:	3901      	subs	r1, #1
   24984:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24986:	f813 0b01 	ldrb.w	r0, [r3], #1
   2498a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2498e:	42a3      	cmp	r3, r4
   24990:	d001      	beq.n	24996 <memcmp+0x1a>
   24992:	4290      	cmp	r0, r2
   24994:	d0f7      	beq.n	24986 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24996:	1a80      	subs	r0, r0, r2
}
   24998:	bd10      	pop	{r4, pc}
		return 0;
   2499a:	4610      	mov	r0, r2
   2499c:	e7fc      	b.n	24998 <memcmp+0x1c>

0002499e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2499e:	b510      	push	{r4, lr}
   249a0:	1e43      	subs	r3, r0, #1
   249a2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   249a4:	4291      	cmp	r1, r2
   249a6:	d100      	bne.n	249aa <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   249a8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   249aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   249ae:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   249b2:	e7f7      	b.n	249a4 <memcpy+0x6>

000249b4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   249b4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   249b6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   249b8:	4603      	mov	r3, r0
	while (n > 0) {
   249ba:	4293      	cmp	r3, r2
   249bc:	d100      	bne.n	249c0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   249be:	4770      	bx	lr
		*(d_byte++) = c_byte;
   249c0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   249c4:	e7f9      	b.n	249ba <memset+0x6>

000249c6 <_stdout_hook_default>:
}
   249c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   249ca:	4770      	bx	lr

000249cc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   249cc:	b084      	sub	sp, #16
   249ce:	ab04      	add	r3, sp, #16
   249d0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   249d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   249d8:	2b06      	cmp	r3, #6
   249da:	d108      	bne.n	249ee <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   249dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   249e0:	2201      	movs	r2, #1
   249e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   249e6:	f3bf 8f4f 	dsb	sy
        __WFE();
   249ea:	bf20      	wfe
    while (true)
   249ec:	e7fd      	b.n	249ea <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   249ee:	b004      	add	sp, #16
   249f0:	4770      	bx	lr

000249f2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   249f2:	b084      	sub	sp, #16
   249f4:	ab04      	add	r3, sp, #16
   249f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
   249fa:	2300      	movs	r3, #0
   249fc:	f383 8811 	msr	BASEPRI, r3
   24a00:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24a04:	b004      	add	sp, #16
   24a06:	4770      	bx	lr

00024a08 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24a08:	b530      	push	{r4, r5, lr}
   24a0a:	b085      	sub	sp, #20
   24a0c:	4604      	mov	r4, r0
   24a0e:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24a10:	4668      	mov	r0, sp
   24a12:	2203      	movs	r2, #3
   24a14:	f7ff ffc3 	bl	2499e <memcpy>
	(void)memset(res + 3, 0, 13);
   24a18:	220d      	movs	r2, #13
   24a1a:	2100      	movs	r1, #0
   24a1c:	f10d 0003 	add.w	r0, sp, #3
   24a20:	f7ff ffc8 	bl	249b4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24a24:	4620      	mov	r0, r4
   24a26:	466a      	mov	r2, sp
   24a28:	4669      	mov	r1, sp
   24a2a:	f7ef fd13 	bl	14454 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   24a2e:	4604      	mov	r4, r0
   24a30:	b920      	cbnz	r0, 24a3c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   24a32:	2203      	movs	r2, #3
   24a34:	4669      	mov	r1, sp
   24a36:	4628      	mov	r0, r5
   24a38:	f7ff ffb1 	bl	2499e <memcpy>

	return 0;
}
   24a3c:	4620      	mov	r0, r4
   24a3e:	b005      	add	sp, #20
   24a40:	bd30      	pop	{r4, r5, pc}

00024a42 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24a42:	b513      	push	{r0, r1, r4, lr}
   24a44:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24a46:	aa01      	add	r2, sp, #4
   24a48:	3103      	adds	r1, #3
   24a4a:	f7ff ffdd 	bl	24a08 <ah>
	if (err) {
   24a4e:	b948      	cbnz	r0, 24a64 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   24a50:	2203      	movs	r2, #3
   24a52:	a901      	add	r1, sp, #4
   24a54:	4620      	mov	r0, r4
   24a56:	f7ff ff91 	bl	2497c <memcmp>
   24a5a:	fab0 f080 	clz	r0, r0
   24a5e:	0940      	lsrs	r0, r0, #5
}
   24a60:	b002      	add	sp, #8
   24a62:	bd10      	pop	{r4, pc}
		return false;
   24a64:	2000      	movs	r0, #0
   24a66:	e7fb      	b.n	24a60 <bt_rpa_irk_matches+0x1e>

00024a68 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   24a68:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   24a6a:	1cce      	adds	r6, r1, #3
{
   24a6c:	4605      	mov	r5, r0
   24a6e:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   24a70:	4630      	mov	r0, r6
   24a72:	2103      	movs	r1, #3
   24a74:	f7ef fcec 	bl	14450 <bt_rand>
	if (err) {
   24a78:	b960      	cbnz	r0, 24a94 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   24a7a:	7963      	ldrb	r3, [r4, #5]
   24a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24a84:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   24a86:	4622      	mov	r2, r4
   24a88:	4631      	mov	r1, r6
   24a8a:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   24a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   24a90:	f7ff bfba 	b.w	24a08 <ah>
}
   24a94:	bd70      	pop	{r4, r5, r6, pc}

00024a96 <send_cmd_status>:
{
   24a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24a9e:	4606      	mov	r6, r0
   24aa0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24aa6:	2100      	movs	r1, #0
   24aa8:	200f      	movs	r0, #15
   24aaa:	f7e4 fc25 	bl	92f8 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   24aae:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   24ab0:	f100 0808 	add.w	r8, r0, #8
   24ab4:	4604      	mov	r4, r0
   24ab6:	7507      	strb	r7, [r0, #20]
   24ab8:	2102      	movs	r1, #2
   24aba:	4640      	mov	r0, r8
   24abc:	f002 faf4 	bl	270a8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24ac0:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   24ac2:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24ac4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   24ac6:	7041      	strb	r1, [r0, #1]
   24ac8:	4640      	mov	r0, r8
   24aca:	f002 faed 	bl	270a8 <net_buf_simple_add>
	evt->ncmd = 1U;
   24ace:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   24ad0:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   24ad2:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   24ad4:	4620      	mov	r0, r4
}
   24ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   24ada:	f7e5 be11 	b.w	a700 <bt_recv_prio>

00024ade <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   24ade:	f101 0320 	add.w	r3, r1, #32
   24ae2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24ae4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   24ae8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   24aec:	428b      	cmp	r3, r1
   24aee:	d1f9      	bne.n	24ae4 <sys_memcpy_swap.constprop.0+0x6>
}
   24af0:	4770      	bx	lr

00024af2 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   24af2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   24af6:	f043 0306 	orr.w	r3, r3, #6
   24afa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   24afe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   24b02:	f043 0304 	orr.w	r3, r3, #4
   24b06:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   24b0a:	4770      	bx	lr

00024b0c <default_CSPRNG>:
{
   24b0c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24b0e:	f7ef fc9f 	bl	14450 <bt_rand>
}
   24b12:	fab0 f080 	clz	r0, r0
   24b16:	0940      	lsrs	r0, r0, #5
   24b18:	bd08      	pop	{r3, pc}

00024b1a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24b1a:	b510      	push	{r4, lr}
   24b1c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24b1e:	7801      	ldrb	r1, [r0, #0]
   24b20:	7822      	ldrb	r2, [r4, #0]
   24b22:	428a      	cmp	r2, r1
{
   24b24:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24b26:	d00f      	beq.n	24b48 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24b28:	4669      	mov	r1, sp
   24b2a:	f7e4 fb85 	bl	9238 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24b2e:	a905      	add	r1, sp, #20
   24b30:	4620      	mov	r0, r4
   24b32:	f7e4 fb81 	bl	9238 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24b36:	2210      	movs	r2, #16
   24b38:	f10d 0115 	add.w	r1, sp, #21
   24b3c:	f10d 0001 	add.w	r0, sp, #1
   24b40:	f7ff ff1c 	bl	2497c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24b44:	b00a      	add	sp, #40	; 0x28
   24b46:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24b48:	2a01      	cmp	r2, #1
   24b4a:	d006      	beq.n	24b5a <bt_uuid_cmp+0x40>
   24b4c:	2a02      	cmp	r2, #2
   24b4e:	d007      	beq.n	24b60 <bt_uuid_cmp+0x46>
   24b50:	b972      	cbnz	r2, 24b70 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24b52:	8840      	ldrh	r0, [r0, #2]
   24b54:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24b56:	1ac0      	subs	r0, r0, r3
   24b58:	e7f4      	b.n	24b44 <bt_uuid_cmp+0x2a>
   24b5a:	6840      	ldr	r0, [r0, #4]
   24b5c:	6863      	ldr	r3, [r4, #4]
   24b5e:	e7fa      	b.n	24b56 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24b60:	2210      	movs	r2, #16
   24b62:	1c61      	adds	r1, r4, #1
   24b64:	3001      	adds	r0, #1
}
   24b66:	b00a      	add	sp, #40	; 0x28
   24b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24b6c:	f7ff bf06 	b.w	2497c <memcmp>
	switch (u1->type) {
   24b70:	f06f 0015 	mvn.w	r0, #21
   24b74:	e7e6      	b.n	24b44 <bt_uuid_cmp+0x2a>

00024b76 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24b76:	2a04      	cmp	r2, #4
{
   24b78:	b510      	push	{r4, lr}
	switch (data_len) {
   24b7a:	d00a      	beq.n	24b92 <bt_uuid_create+0x1c>
   24b7c:	2a10      	cmp	r2, #16
   24b7e:	d00d      	beq.n	24b9c <bt_uuid_create+0x26>
   24b80:	2a02      	cmp	r2, #2
   24b82:	f04f 0300 	mov.w	r3, #0
   24b86:	d10f      	bne.n	24ba8 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24b88:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24b8a:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24b8c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24b8e:	2001      	movs	r0, #1
}
   24b90:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24b92:	2301      	movs	r3, #1
   24b94:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24b96:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24b98:	6042      	str	r2, [r0, #4]
		break;
   24b9a:	e7f8      	b.n	24b8e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24b9c:	2302      	movs	r3, #2
   24b9e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24ba2:	f7ff fefc 	bl	2499e <memcpy>
		break;
   24ba6:	e7f2      	b.n	24b8e <bt_uuid_create+0x18>
	switch (data_len) {
   24ba8:	4618      	mov	r0, r3
   24baa:	e7f1      	b.n	24b90 <bt_uuid_create+0x1a>

00024bac <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24bac:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24bae:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24bb0:	2106      	movs	r1, #6
{
   24bb2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24bb4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24bb8:	f7ef fc4a 	bl	14450 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24bbc:	b918      	cbnz	r0, 24bc6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24bbe:	79a3      	ldrb	r3, [r4, #6]
   24bc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24bc4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24bc6:	bd10      	pop	{r4, pc}

00024bc8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24bc8:	280f      	cmp	r0, #15
   24bca:	d806      	bhi.n	24bda <bt_hci_evt_get_flags+0x12>
   24bcc:	280d      	cmp	r0, #13
   24bce:	d80b      	bhi.n	24be8 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   24bd0:	2805      	cmp	r0, #5
   24bd2:	bf14      	ite	ne
   24bd4:	2002      	movne	r0, #2
   24bd6:	2003      	moveq	r0, #3
   24bd8:	4770      	bx	lr
	switch (evt) {
   24bda:	2813      	cmp	r0, #19
   24bdc:	d004      	beq.n	24be8 <bt_hci_evt_get_flags+0x20>
   24bde:	281a      	cmp	r0, #26
   24be0:	bf14      	ite	ne
   24be2:	2002      	movne	r0, #2
   24be4:	2001      	moveq	r0, #1
   24be6:	4770      	bx	lr
   24be8:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24bea:	4770      	bx	lr

00024bec <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24bec:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   24bf0:	b193      	cbz	r3, 24c18 <update_sec_level+0x2c>
   24bf2:	7b5a      	ldrb	r2, [r3, #13]
   24bf4:	07d1      	lsls	r1, r2, #31
   24bf6:	d50f      	bpl.n	24c18 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24bf8:	06d2      	lsls	r2, r2, #27
   24bfa:	d50b      	bpl.n	24c14 <update_sec_level+0x28>
   24bfc:	7b1b      	ldrb	r3, [r3, #12]
   24bfe:	2b10      	cmp	r3, #16
   24c00:	d108      	bne.n	24c14 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   24c02:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   24c04:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24c06:	7a82      	ldrb	r2, [r0, #10]
   24c08:	7a40      	ldrb	r0, [r0, #9]
}
   24c0a:	4282      	cmp	r2, r0
   24c0c:	bf8c      	ite	hi
   24c0e:	2000      	movhi	r0, #0
   24c10:	2001      	movls	r0, #1
   24c12:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   24c14:	2303      	movs	r3, #3
   24c16:	e7f5      	b.n	24c04 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   24c18:	2302      	movs	r3, #2
   24c1a:	e7f3      	b.n	24c04 <update_sec_level+0x18>

00024c1c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24c1c:	2207      	movs	r2, #7
   24c1e:	f7ff bebe 	b.w	2499e <memcpy>

00024c22 <atomic_or>:
{
   24c22:	4603      	mov	r3, r0
}
   24c24:	f3bf 8f5b 	dmb	ish
   24c28:	e853 0f00 	ldrex	r0, [r3]
   24c2c:	ea40 0201 	orr.w	r2, r0, r1
   24c30:	e843 2c00 	strex	ip, r2, [r3]
   24c34:	f1bc 0f00 	cmp.w	ip, #0
   24c38:	d1f6      	bne.n	24c28 <atomic_or+0x6>
   24c3a:	f3bf 8f5b 	dmb	ish
   24c3e:	4770      	bx	lr

00024c40 <z_log_msg2_static_create.constprop.0>:
   24c40:	2300      	movs	r3, #0
   24c42:	f7fe bc18 	b.w	23476 <z_impl_z_log_msg2_static_create>

00024c46 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   24c46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24c48:	ab0a      	add	r3, sp, #40	; 0x28
   24c4a:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   24c4c:	9302      	str	r3, [sp, #8]
   24c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24c50:	9301      	str	r3, [sp, #4]
   24c52:	2300      	movs	r3, #0
   24c54:	9300      	str	r3, [sp, #0]
   24c56:	4618      	mov	r0, r3
   24c58:	f7e1 fc38 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   24c5c:	b007      	add	sp, #28
   24c5e:	f85d fb04 	ldr.w	pc, [sp], #4

00024c62 <sys_put_le64>:
	dst[1] = val >> 8;
   24c62:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24c66:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   24c68:	0e00      	lsrs	r0, r0, #24
   24c6a:	7053      	strb	r3, [r2, #1]
   24c6c:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   24c6e:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   24c70:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24c74:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24c76:	7093      	strb	r3, [r2, #2]
   24c78:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   24c7a:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   24c7c:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   24c7e:	71d1      	strb	r1, [r2, #7]
}
   24c80:	4770      	bx	lr

00024c82 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   24c82:	f7e5 b91b 	b.w	9ebc <bt_le_create_conn_legacy>

00024c86 <bt_hci_disconnect>:
{
   24c86:	b570      	push	{r4, r5, r6, lr}
   24c88:	4606      	mov	r6, r0
   24c8a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24c8c:	f240 4006 	movw	r0, #1030	; 0x406
   24c90:	2103      	movs	r1, #3
   24c92:	f7e4 ff09 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   24c96:	4604      	mov	r4, r0
   24c98:	b168      	cbz	r0, 24cb6 <bt_hci_disconnect+0x30>
   24c9a:	2103      	movs	r1, #3
   24c9c:	3008      	adds	r0, #8
   24c9e:	f002 fa03 	bl	270a8 <net_buf_simple_add>
	disconn->reason = reason;
   24ca2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   24ca4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24ca6:	4621      	mov	r1, r4
   24ca8:	2200      	movs	r2, #0
}
   24caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24cae:	f240 4006 	movw	r0, #1030	; 0x406
   24cb2:	f7e5 b859 	b.w	9d68 <bt_hci_cmd_send_sync>
}
   24cb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24cba:	bd70      	pop	{r4, r5, r6, pc}

00024cbc <bt_le_set_data_len>:
{
   24cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cbe:	4607      	mov	r7, r0
   24cc0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24cc2:	f242 0022 	movw	r0, #8226	; 0x2022
   24cc6:	2106      	movs	r1, #6
{
   24cc8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24cca:	f7e4 feed 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   24cce:	4604      	mov	r4, r0
   24cd0:	b170      	cbz	r0, 24cf0 <bt_le_set_data_len+0x34>
   24cd2:	2106      	movs	r1, #6
   24cd4:	3008      	adds	r0, #8
   24cd6:	f002 f9e7 	bl	270a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24cda:	883b      	ldrh	r3, [r7, #0]
   24cdc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24cde:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24ce0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24ce2:	4621      	mov	r1, r4
   24ce4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   24ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24cec:	f7e4 bf16 	b.w	9b1c <bt_hci_cmd_send>
}
   24cf0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024cf6 <bt_le_set_phy>:
{
   24cf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24cfa:	4680      	mov	r8, r0
   24cfc:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24cfe:	f242 0032 	movw	r0, #8242	; 0x2032
   24d02:	2107      	movs	r1, #7
{
   24d04:	f89d 9020 	ldrb.w	r9, [sp, #32]
   24d08:	4616      	mov	r6, r2
   24d0a:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24d0c:	f7e4 fecc 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   24d10:	4604      	mov	r4, r0
   24d12:	b190      	cbz	r0, 24d3a <bt_le_set_phy+0x44>
   24d14:	2107      	movs	r1, #7
   24d16:	3008      	adds	r0, #8
   24d18:	f002 f9c6 	bl	270a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24d1c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   24d20:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24d22:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24d24:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   24d26:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   24d28:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24d2c:	4621      	mov	r1, r4
   24d2e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   24d32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24d36:	f7e4 bef1 	b.w	9b1c <bt_hci_cmd_send>
}
   24d3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024d42 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   24d42:	6880      	ldr	r0, [r0, #8]
   24d44:	f7e5 ba22 	b.w	a18c <bt_hci_le_enh_conn_complete>

00024d48 <le_legacy_conn_complete>:
{
   24d48:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   24d4a:	6881      	ldr	r1, [r0, #8]
{
   24d4c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   24d4e:	780b      	ldrb	r3, [r1, #0]
   24d50:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   24d54:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   24d58:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   24d5c:	78cb      	ldrb	r3, [r1, #3]
   24d5e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   24d62:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   24d66:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   24d6a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   24d6e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   24d72:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   24d76:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   24d7a:	7c4b      	ldrb	r3, [r1, #17]
   24d7c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   24d80:	a803      	add	r0, sp, #12
   24d82:	3104      	adds	r1, #4
   24d84:	f7ff ff4a 	bl	24c1c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   24d88:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   24d8a:	4669      	mov	r1, sp
   24d8c:	2206      	movs	r2, #6
   24d8e:	f10d 0013 	add.w	r0, sp, #19
   24d92:	9400      	str	r4, [sp, #0]
   24d94:	f8ad 4004 	strh.w	r4, [sp, #4]
   24d98:	f7ff fe01 	bl	2499e <memcpy>
   24d9c:	2206      	movs	r2, #6
   24d9e:	4669      	mov	r1, sp
   24da0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   24da4:	9400      	str	r4, [sp, #0]
   24da6:	f8ad 4004 	strh.w	r4, [sp, #4]
   24daa:	f7ff fdf8 	bl	2499e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   24dae:	a802      	add	r0, sp, #8
   24db0:	f7e5 f9ec 	bl	a18c <bt_hci_le_enh_conn_complete>
}
   24db4:	b00a      	add	sp, #40	; 0x28
   24db6:	bd10      	pop	{r4, pc}

00024db8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   24db8:	8803      	ldrh	r3, [r0, #0]
   24dba:	8842      	ldrh	r2, [r0, #2]
   24dbc:	4293      	cmp	r3, r2
{
   24dbe:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24dc0:	d819      	bhi.n	24df6 <bt_le_conn_params_valid+0x3e>
   24dc2:	2b05      	cmp	r3, #5
   24dc4:	d917      	bls.n	24df6 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24dc6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24dca:	d814      	bhi.n	24df6 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24dcc:	8883      	ldrh	r3, [r0, #4]
   24dce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24dd2:	d210      	bcs.n	24df6 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24dd4:	88c0      	ldrh	r0, [r0, #6]
   24dd6:	f1a0 010a 	sub.w	r1, r0, #10
   24dda:	b289      	uxth	r1, r1
   24ddc:	f640 4476 	movw	r4, #3190	; 0xc76
   24de0:	42a1      	cmp	r1, r4
   24de2:	d808      	bhi.n	24df6 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24de4:	3301      	adds	r3, #1
   24de6:	b29b      	uxth	r3, r3
   24de8:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24dea:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24dee:	bf34      	ite	cc
   24df0:	2001      	movcc	r0, #1
   24df2:	2000      	movcs	r0, #0
}
   24df4:	bd10      	pop	{r4, pc}
		return false;
   24df6:	2000      	movs	r0, #0
   24df8:	e7fc      	b.n	24df4 <bt_le_conn_params_valid+0x3c>

00024dfa <bt_send>:
		return bt_hci_ecc_send(buf);
   24dfa:	f7e4 b98b 	b.w	9114 <bt_hci_ecc_send>

00024dfe <bt_addr_le_is_bonded>:
{
   24dfe:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   24e00:	f7ec f8fe 	bl	11000 <bt_keys_find_addr>
		return keys && keys->keys;
   24e04:	b118      	cbz	r0, 24e0e <bt_addr_le_is_bonded+0x10>
   24e06:	89c0      	ldrh	r0, [r0, #14]
   24e08:	3800      	subs	r0, #0
   24e0a:	bf18      	it	ne
   24e0c:	2001      	movne	r0, #1
}
   24e0e:	bd08      	pop	{r3, pc}

00024e10 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24e10:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24e16:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24e1c:	2100      	movs	r1, #0
{
   24e1e:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24e20:	f7e4 fa6a 	bl	92f8 <bt_buf_get_evt>
   24e24:	2102      	movs	r1, #2
   24e26:	4604      	mov	r4, r0
   24e28:	3008      	adds	r0, #8
   24e2a:	f002 f93d 	bl	270a8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24e2e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24e30:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24e32:	4620      	mov	r0, r4
   24e34:	bd70      	pop	{r4, r5, r6, pc}

00024e36 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24e36:	3103      	adds	r1, #3
{
   24e38:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24e3a:	b2c9      	uxtb	r1, r1
{
   24e3c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24e3e:	200e      	movs	r0, #14
   24e40:	f7ff ffe6 	bl	24e10 <bt_hci_evt_create>
   24e44:	2103      	movs	r1, #3
   24e46:	4604      	mov	r4, r0
   24e48:	3008      	adds	r0, #8
   24e4a:	f002 f92d 	bl	270a8 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24e4e:	2301      	movs	r3, #1
   24e50:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   24e52:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24e56:	4620      	mov	r0, r4
   24e58:	bd38      	pop	{r3, r4, r5, pc}

00024e5a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   24e5a:	b570      	push	{r4, r5, r6, lr}
   24e5c:	4605      	mov	r5, r0
   24e5e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   24e60:	200f      	movs	r0, #15
   24e62:	2104      	movs	r1, #4
   24e64:	f7ff ffd4 	bl	24e10 <bt_hci_evt_create>
   24e68:	2104      	movs	r1, #4
   24e6a:	4604      	mov	r4, r0
   24e6c:	3008      	adds	r0, #8
   24e6e:	f002 f91b 	bl	270a8 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   24e72:	2201      	movs	r2, #1
	cs->status = status;
   24e74:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24e76:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24e78:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24e7a:	4620      	mov	r0, r4
   24e7c:	bd70      	pop	{r4, r5, r6, pc}

00024e7e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24e7e:	2207      	movs	r2, #7
   24e80:	f7ff bd8d 	b.w	2499e <memcpy>

00024e84 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   24e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e86:	4607      	mov	r7, r0
   24e88:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   24e8a:	f242 0027 	movw	r0, #8231	; 0x2027
   24e8e:	2127      	movs	r1, #39	; 0x27
   24e90:	f7e4 fe0a 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   24e94:	4604      	mov	r4, r0
   24e96:	b1d0      	cbz	r0, 24ece <hci_id_add.constprop.0+0x4a>
   24e98:	2127      	movs	r1, #39	; 0x27
   24e9a:	3008      	adds	r0, #8
   24e9c:	f002 f904 	bl	270a8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   24ea0:	4639      	mov	r1, r7
   24ea2:	4605      	mov	r5, r0
   24ea4:	f7ff ffeb 	bl	24e7e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   24ea8:	4631      	mov	r1, r6
   24eaa:	2210      	movs	r2, #16
   24eac:	1de8      	adds	r0, r5, #7
   24eae:	f7ff fd76 	bl	2499e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   24eb2:	2210      	movs	r2, #16
   24eb4:	2100      	movs	r1, #0
   24eb6:	f105 0017 	add.w	r0, r5, #23
   24eba:	f7ff fd7b 	bl	249b4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24ebe:	4621      	mov	r1, r4
   24ec0:	2200      	movs	r2, #0
}
   24ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24ec6:	f242 0027 	movw	r0, #8231	; 0x2027
   24eca:	f7e4 bf4d 	b.w	9d68 <bt_hci_cmd_send_sync>
}
   24ece:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024ed4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   24ed4:	7a03      	ldrb	r3, [r0, #8]
   24ed6:	075b      	lsls	r3, r3, #29
   24ed8:	d504      	bpl.n	24ee4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24eda:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   24ede:	3001      	adds	r0, #1
   24ee0:	f7ff bfd0 	b.w	24e84 <hci_id_add.constprop.0>
}
   24ee4:	4770      	bx	lr

00024ee6 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   24ee6:	2300      	movs	r3, #0
   24ee8:	f7fe bac5 	b.w	23476 <z_impl_z_log_msg2_static_create>

00024eec <addr_res_enable>:
{
   24eec:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24eee:	2101      	movs	r1, #1
{
   24ef0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24ef2:	f242 002d 	movw	r0, #8237	; 0x202d
   24ef6:	f7e4 fdd7 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   24efa:	4604      	mov	r4, r0
   24efc:	b158      	cbz	r0, 24f16 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   24efe:	4629      	mov	r1, r5
   24f00:	3008      	adds	r0, #8
   24f02:	f002 f8e0 	bl	270c6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24f06:	4621      	mov	r1, r4
   24f08:	2200      	movs	r2, #0
}
   24f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24f0e:	f242 002d 	movw	r0, #8237	; 0x202d
   24f12:	f7e4 bf29 	b.w	9d68 <bt_hci_cmd_send_sync>
}
   24f16:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f1a:	bd38      	pop	{r3, r4, r5, pc}

00024f1c <bt_lookup_id_addr>:
{
   24f1c:	b510      	push	{r4, lr}
   24f1e:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   24f20:	f7ec f836 	bl	10f90 <bt_keys_find_irk>
		if (keys) {
   24f24:	b100      	cbz	r0, 24f28 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   24f26:	1c44      	adds	r4, r0, #1
}
   24f28:	4620      	mov	r0, r4
   24f2a:	bd10      	pop	{r4, pc}

00024f2c <bt_id_set_private_addr>:
{
   24f2c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24f2e:	2106      	movs	r1, #6
   24f30:	4668      	mov	r0, sp
   24f32:	f7ef fa8d 	bl	14450 <bt_rand>
	if (err) {
   24f36:	b940      	cbnz	r0, 24f4a <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   24f38:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   24f3c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24f42:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   24f46:	f7e5 fdb3 	bl	aab0 <set_random_address>
}
   24f4a:	b003      	add	sp, #12
   24f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00024f50 <bt_id_scan_random_addr_check>:
}
   24f50:	2001      	movs	r0, #1
   24f52:	4770      	bx	lr

00024f54 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24f54:	7a03      	ldrb	r3, [r0, #8]
   24f56:	07d9      	lsls	r1, r3, #31
   24f58:	d504      	bpl.n	24f64 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   24f5a:	f023 0301 	bic.w	r3, r3, #1
   24f5e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24f60:	f7e5 be20 	b.w	aba4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24f64:	0799      	lsls	r1, r3, #30
   24f66:	d504      	bpl.n	24f72 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   24f68:	f023 0302 	bic.w	r3, r3, #2
   24f6c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24f6e:	f7e5 be31 	b.w	abd4 <bt_id_del>
}
   24f72:	4770      	bx	lr

00024f74 <atomic_and>:
{
   24f74:	4603      	mov	r3, r0
}
   24f76:	f3bf 8f5b 	dmb	ish
   24f7a:	e853 0f00 	ldrex	r0, [r3]
   24f7e:	ea00 0201 	and.w	r2, r0, r1
   24f82:	e843 2c00 	strex	ip, r2, [r3]
   24f86:	f1bc 0f00 	cmp.w	ip, #0
   24f8a:	d1f6      	bne.n	24f7a <atomic_and+0x6>
   24f8c:	f3bf 8f5b 	dmb	ish
   24f90:	4770      	bx	lr

00024f92 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   24f92:	f7e6 b857 	b.w	b044 <bt_le_scan_set_enable_legacy>

00024f96 <atomic_and>:
{
   24f96:	4603      	mov	r3, r0
}
   24f98:	f3bf 8f5b 	dmb	ish
   24f9c:	e853 0f00 	ldrex	r0, [r3]
   24fa0:	ea00 0201 	and.w	r2, r0, r1
   24fa4:	e843 2c00 	strex	ip, r2, [r3]
   24fa8:	f1bc 0f00 	cmp.w	ip, #0
   24fac:	d1f6      	bne.n	24f9c <atomic_and+0x6>
   24fae:	f3bf 8f5b 	dmb	ish
   24fb2:	4770      	bx	lr

00024fb4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24fb4:	f3bf 8f5b 	dmb	ish
   24fb8:	6800      	ldr	r0, [r0, #0]
   24fba:	f3bf 8f5b 	dmb	ish
}
   24fbe:	4770      	bx	lr

00024fc0 <z_log_msg2_static_create.constprop.0>:
   24fc0:	2300      	movs	r3, #0
   24fc2:	f7fe ba58 	b.w	23476 <z_impl_z_log_msg2_static_create>

00024fc6 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   24fc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24fc8:	ab0a      	add	r3, sp, #40	; 0x28
   24fca:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   24fcc:	9302      	str	r3, [sp, #8]
   24fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24fd0:	9301      	str	r3, [sp, #4]
   24fd2:	2300      	movs	r3, #0
   24fd4:	9300      	str	r3, [sp, #0]
   24fd6:	2202      	movs	r2, #2
   24fd8:	4618      	mov	r0, r3
   24fda:	f7e1 fa77 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   24fde:	b007      	add	sp, #28
   24fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00024fe4 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24fe4:	f3bf 8f5b 	dmb	ish
   24fe8:	e850 3f00 	ldrex	r3, [r0]
   24fec:	3b01      	subs	r3, #1
   24fee:	e840 3200 	strex	r2, r3, [r0]
   24ff2:	2a00      	cmp	r2, #0
   24ff4:	d1f8      	bne.n	24fe8 <atomic_dec.isra.0+0x4>
   24ff6:	f3bf 8f5b 	dmb	ish
}
   24ffa:	4770      	bx	lr

00024ffc <tx_notify>:
{
   24ffc:	b570      	push	{r4, r5, r6, lr}
   24ffe:	4604      	mov	r4, r0
	__asm__ volatile(
   25000:	f04f 0220 	mov.w	r2, #32
   25004:	f3ef 8311 	mrs	r3, BASEPRI
   25008:	f382 8812 	msr	BASEPRI_MAX, r2
   2500c:	f3bf 8f6f 	isb	sy
	return list->head;
   25010:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   25012:	b920      	cbnz	r0, 2501e <tx_notify+0x22>
	__asm__ volatile(
   25014:	f383 8811 	msr	BASEPRI, r3
   25018:	f3bf 8f6f 	isb	sy
}
   2501c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2501e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   25020:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25022:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25024:	4288      	cmp	r0, r1
	list->tail = node;
   25026:	bf08      	it	eq
   25028:	6262      	streq	r2, [r4, #36]	; 0x24
   2502a:	f383 8811 	msr	BASEPRI, r3
   2502e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   25032:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   25036:	f7e6 fbb7 	bl	b7a8 <tx_free>
		cb(conn, user_data);
   2503a:	4631      	mov	r1, r6
   2503c:	4620      	mov	r0, r4
   2503e:	47a8      	blx	r5
	while (1) {
   25040:	e7de      	b.n	25000 <tx_notify+0x4>

00025042 <tx_complete_work>:
	tx_notify(conn);
   25042:	3828      	subs	r0, #40	; 0x28
   25044:	f7ff bfda 	b.w	24ffc <tx_notify>

00025048 <bt_conn_reset_rx_state>:
{
   25048:	b510      	push	{r4, lr}
   2504a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2504c:	6900      	ldr	r0, [r0, #16]
   2504e:	b118      	cbz	r0, 25058 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   25050:	f7f7 ff8a 	bl	1cf68 <net_buf_unref>
	conn->rx = NULL;
   25054:	2300      	movs	r3, #0
   25056:	6123      	str	r3, [r4, #16]
}
   25058:	bd10      	pop	{r4, pc}

0002505a <conn_cleanup>:
{
   2505a:	b570      	push	{r4, r5, r6, lr}
   2505c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2505e:	f100 0638 	add.w	r6, r0, #56	; 0x38
   25062:	2200      	movs	r2, #0
   25064:	2300      	movs	r3, #0
   25066:	4630      	mov	r0, r6
   25068:	f001 ffbb 	bl	26fe2 <net_buf_get>
   2506c:	4605      	mov	r5, r0
   2506e:	b950      	cbnz	r0, 25086 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   25070:	4620      	mov	r0, r4
   25072:	f7ff ffe9 	bl	25048 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25076:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2507a:	2200      	movs	r2, #0
}
   2507c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25080:	2300      	movs	r3, #0
   25082:	f7fc bcc1 	b.w	21a08 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   25086:	6968      	ldr	r0, [r5, #20]
   25088:	b108      	cbz	r0, 2508e <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2508a:	f7e6 fb8d 	bl	b7a8 <tx_free>
		net_buf_unref(buf);
   2508e:	4628      	mov	r0, r5
   25090:	f7f7 ff6a 	bl	1cf68 <net_buf_unref>
   25094:	e7e5      	b.n	25062 <conn_cleanup+0x8>

00025096 <bt_conn_ref>:
{
   25096:	b510      	push	{r4, lr}
   25098:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2509a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2509e:	4610      	mov	r0, r2
   250a0:	f7ff ff88 	bl	24fb4 <atomic_get>
		if (!old) {
   250a4:	b180      	cbz	r0, 250c8 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   250a6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   250aa:	1c41      	adds	r1, r0, #1
   250ac:	e852 4f00 	ldrex	r4, [r2]
   250b0:	4284      	cmp	r4, r0
   250b2:	d104      	bne.n	250be <bt_conn_ref+0x28>
   250b4:	e842 1c00 	strex	ip, r1, [r2]
   250b8:	f1bc 0f00 	cmp.w	ip, #0
   250bc:	d1f6      	bne.n	250ac <bt_conn_ref+0x16>
   250be:	f3bf 8f5b 	dmb	ish
   250c2:	d1ec      	bne.n	2509e <bt_conn_ref+0x8>
}
   250c4:	4618      	mov	r0, r3
   250c6:	bd10      	pop	{r4, pc}
			return NULL;
   250c8:	4603      	mov	r3, r0
   250ca:	e7fb      	b.n	250c4 <bt_conn_ref+0x2e>

000250cc <conn_lookup_handle>:
{
   250cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   250d0:	4606      	mov	r6, r0
   250d2:	460d      	mov	r5, r1
   250d4:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   250d6:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   250d8:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   250dc:	42ac      	cmp	r4, r5
   250de:	d102      	bne.n	250e6 <conn_lookup_handle+0x1a>
	return NULL;
   250e0:	2000      	movs	r0, #0
}
   250e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   250e6:	fb08 6004 	mla	r0, r8, r4, r6
   250ea:	f7ff ffd4 	bl	25096 <bt_conn_ref>
		if (!conn) {
   250ee:	b158      	cbz	r0, 25108 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   250f0:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   250f2:	2b01      	cmp	r3, #1
   250f4:	d002      	beq.n	250fc <conn_lookup_handle+0x30>
   250f6:	3b07      	subs	r3, #7
   250f8:	2b01      	cmp	r3, #1
   250fa:	d802      	bhi.n	25102 <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   250fc:	8803      	ldrh	r3, [r0, #0]
   250fe:	42bb      	cmp	r3, r7
   25100:	d0ef      	beq.n	250e2 <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   25102:	30b8      	adds	r0, #184	; 0xb8
   25104:	f7ff ff6e 	bl	24fe4 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   25108:	3401      	adds	r4, #1
   2510a:	e7e7      	b.n	250dc <conn_lookup_handle+0x10>

0002510c <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2510c:	30b8      	adds	r0, #184	; 0xb8
   2510e:	f7ff bf69 	b.w	24fe4 <atomic_dec.isra.0>

00025112 <bt_conn_connected>:
{
   25112:	b510      	push	{r4, lr}
   25114:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   25116:	f7e7 fb13 	bl	c740 <bt_l2cap_connected>
	notify_connected(conn);
   2511a:	4620      	mov	r0, r4
}
   2511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   25120:	f7e6 bb4c 	b.w	b7bc <notify_connected>

00025124 <bt_conn_le_start_encryption>:
{
   25124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25128:	4682      	mov	sl, r0
   2512a:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2512c:	f242 0019 	movw	r0, #8217	; 0x2019
   25130:	211c      	movs	r1, #28
{
   25132:	9e08      	ldr	r6, [sp, #32]
   25134:	4690      	mov	r8, r2
   25136:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   25138:	f7e4 fcb6 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   2513c:	4605      	mov	r5, r0
   2513e:	b340      	cbz	r0, 25192 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   25140:	211c      	movs	r1, #28
   25142:	3008      	adds	r0, #8
   25144:	f001 ffb0 	bl	270a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25148:	f8ba 3000 	ldrh.w	r3, [sl]
   2514c:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2514e:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   25150:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   25154:	4649      	mov	r1, r9
   25156:	f7ff fc22 	bl	2499e <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2515a:	2202      	movs	r2, #2
   2515c:	4641      	mov	r1, r8
   2515e:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   25162:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   25164:	f7ff fc1b 	bl	2499e <memcpy>
	memcpy(cp->ltk, ltk, len);
   25168:	4632      	mov	r2, r6
   2516a:	4639      	mov	r1, r7
   2516c:	4620      	mov	r0, r4
   2516e:	f7ff fc16 	bl	2499e <memcpy>
	if (len < sizeof(cp->ltk)) {
   25172:	2e0f      	cmp	r6, #15
   25174:	d805      	bhi.n	25182 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   25176:	f1c6 0210 	rsb	r2, r6, #16
   2517a:	2100      	movs	r1, #0
   2517c:	19a0      	adds	r0, r4, r6
   2517e:	f7ff fc19 	bl	249b4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   25182:	4629      	mov	r1, r5
   25184:	2200      	movs	r2, #0
}
   25186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2518a:	f242 0019 	movw	r0, #8217	; 0x2019
   2518e:	f7e4 bdeb 	b.w	9d68 <bt_hci_cmd_send_sync>
}
   25192:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002519a <bt_conn_set_security>:
{
   2519a:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2519c:	7b43      	ldrb	r3, [r0, #13]
   2519e:	2b07      	cmp	r3, #7
{
   251a0:	4604      	mov	r4, r0
   251a2:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   251a4:	d124      	bne.n	251f0 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   251a6:	7a43      	ldrb	r3, [r0, #9]
   251a8:	428b      	cmp	r3, r1
   251aa:	d224      	bcs.n	251f6 <bt_conn_set_security+0x5c>
   251ac:	7a83      	ldrb	r3, [r0, #10]
   251ae:	428b      	cmp	r3, r1
   251b0:	d221      	bcs.n	251f6 <bt_conn_set_security+0x5c>
	if (val) {
   251b2:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   251b4:	f100 0004 	add.w	r0, r0, #4
   251b8:	d515      	bpl.n	251e6 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   251ba:	f3bf 8f5b 	dmb	ish
   251be:	e850 3f00 	ldrex	r3, [r0]
   251c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   251c6:	e840 3200 	strex	r2, r3, [r0]
   251ca:	2a00      	cmp	r2, #0
   251cc:	d1f7      	bne.n	251be <bt_conn_set_security+0x24>
   251ce:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   251d2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   251d6:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   251d8:	4620      	mov	r0, r4
   251da:	f001 fda6 	bl	26d2a <bt_smp_start_security>
	if (err) {
   251de:	b108      	cbz	r0, 251e4 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   251e0:	7a63      	ldrb	r3, [r4, #9]
   251e2:	72a3      	strb	r3, [r4, #10]
}
   251e4:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   251e6:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   251ea:	f7ff fed4 	bl	24f96 <atomic_and>
   251ee:	e7f0      	b.n	251d2 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   251f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   251f4:	e7f6      	b.n	251e4 <bt_conn_set_security+0x4a>
		return 0;
   251f6:	2000      	movs	r0, #0
   251f8:	e7f4      	b.n	251e4 <bt_conn_set_security+0x4a>

000251fa <bt_conn_get_security>:
}
   251fa:	7a40      	ldrb	r0, [r0, #9]
   251fc:	4770      	bx	lr

000251fe <bt_conn_is_peer_addr_le>:
{
   251fe:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25200:	7a03      	ldrb	r3, [r0, #8]
   25202:	428b      	cmp	r3, r1
{
   25204:	4604      	mov	r4, r0
   25206:	4615      	mov	r5, r2
	if (id != conn->id) {
   25208:	d115      	bne.n	25236 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2520a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2520e:	2207      	movs	r2, #7
   25210:	4628      	mov	r0, r5
   25212:	f7ff fbb3 	bl	2497c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25216:	b180      	cbz	r0, 2523a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   25218:	78e3      	ldrb	r3, [r4, #3]
   2521a:	2207      	movs	r2, #7
   2521c:	b943      	cbnz	r3, 25230 <bt_conn_is_peer_addr_le+0x32>
   2521e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   25222:	4628      	mov	r0, r5
   25224:	f7ff fbaa 	bl	2497c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   25228:	fab0 f080 	clz	r0, r0
   2522c:	0940      	lsrs	r0, r0, #5
}
   2522e:	bd38      	pop	{r3, r4, r5, pc}
   25230:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   25234:	e7f5      	b.n	25222 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25236:	2000      	movs	r0, #0
   25238:	e7f9      	b.n	2522e <bt_conn_is_peer_addr_le+0x30>
		return true;
   2523a:	2001      	movs	r0, #1
   2523c:	e7f7      	b.n	2522e <bt_conn_is_peer_addr_le+0x30>

0002523e <bt_conn_get_dst>:
}
   2523e:	3088      	adds	r0, #136	; 0x88
   25240:	4770      	bx	lr

00025242 <bt_conn_disconnect>:
{
   25242:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   25244:	7883      	ldrb	r3, [r0, #2]
   25246:	2b01      	cmp	r3, #1
{
   25248:	4604      	mov	r4, r0
   2524a:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2524c:	d103      	bne.n	25256 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2524e:	2100      	movs	r1, #0
   25250:	3088      	adds	r0, #136	; 0x88
   25252:	f7e7 f82d 	bl	c2b0 <bt_le_set_auto_conn>
	switch (conn->state) {
   25256:	7b63      	ldrb	r3, [r4, #13]
   25258:	3b02      	subs	r3, #2
   2525a:	2b06      	cmp	r3, #6
   2525c:	d805      	bhi.n	2526a <bt_conn_disconnect+0x28>
   2525e:	e8df f003 	tbb	[pc, r3]
   25262:	0408      	.short	0x0408
   25264:	1a120404 	.word	0x1a120404
   25268:	10          	.byte	0x10
   25269:	00          	.byte	0x00
   2526a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2526e:	4628      	mov	r0, r5
   25270:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25272:	4620      	mov	r0, r4
		conn->err = reason;
   25274:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25276:	2100      	movs	r1, #0
   25278:	f7e6 fcd2 	bl	bc20 <bt_conn_set_state>
			bt_le_scan_update(false);
   2527c:	2000      	movs	r0, #0
   2527e:	f7e5 ff6b 	bl	b158 <bt_le_scan_update>
		return 0;
   25282:	2500      	movs	r5, #0
   25284:	e7f3      	b.n	2526e <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   25286:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2528a:	f002 fe28 	bl	27ede <k_work_cancel_delayable>
}
   2528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   25292:	f7e4 be75 	b.w	9f80 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   25296:	4629      	mov	r1, r5
   25298:	8820      	ldrh	r0, [r4, #0]
   2529a:	f7ff fcf4 	bl	24c86 <bt_hci_disconnect>
	if (err) {
   2529e:	4605      	mov	r5, r0
   252a0:	2800      	cmp	r0, #0
   252a2:	d1e4      	bne.n	2526e <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   252a4:	7b63      	ldrb	r3, [r4, #13]
   252a6:	2b07      	cmp	r3, #7
   252a8:	d1e1      	bne.n	2526e <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   252aa:	2108      	movs	r1, #8
   252ac:	4620      	mov	r0, r4
   252ae:	f7e6 fcb7 	bl	bc20 <bt_conn_set_state>
   252b2:	e7dc      	b.n	2526e <bt_conn_disconnect+0x2c>

000252b4 <bt_conn_le_conn_update>:
{
   252b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252b6:	4607      	mov	r7, r0
   252b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   252ba:	f242 0013 	movw	r0, #8211	; 0x2013
   252be:	210e      	movs	r1, #14
   252c0:	f7e4 fbf2 	bl	9aa8 <bt_hci_cmd_create>
	if (!buf) {
   252c4:	4606      	mov	r6, r0
   252c6:	b1d0      	cbz	r0, 252fe <bt_conn_le_conn_update+0x4a>
   252c8:	210e      	movs	r1, #14
   252ca:	3008      	adds	r0, #8
   252cc:	f001 feec 	bl	270a8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   252d0:	220e      	movs	r2, #14
   252d2:	4604      	mov	r4, r0
   252d4:	2100      	movs	r1, #0
   252d6:	f7ff fb6d 	bl	249b4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   252da:	883b      	ldrh	r3, [r7, #0]
   252dc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   252de:	882b      	ldrh	r3, [r5, #0]
   252e0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   252e2:	886b      	ldrh	r3, [r5, #2]
   252e4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   252e6:	88ab      	ldrh	r3, [r5, #4]
   252e8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   252ea:	88eb      	ldrh	r3, [r5, #6]
   252ec:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   252ee:	4631      	mov	r1, r6
   252f0:	2200      	movs	r2, #0
}
   252f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   252f6:	f242 0013 	movw	r0, #8211	; 0x2013
   252fa:	f7e4 bd35 	b.w	9d68 <bt_hci_cmd_send_sync>
}
   252fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025304 <l2cap_connected>:
}
   25304:	4770      	bx	lr

00025306 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   25306:	3010      	adds	r0, #16
   25308:	f002 bde9 	b.w	27ede <k_work_cancel_delayable>

0002530c <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2530c:	2300      	movs	r3, #0
   2530e:	f7fe b8b2 	b.w	23476 <z_impl_z_log_msg2_static_create>

00025312 <bt_l2cap_chan_remove>:
	return list->head;
   25312:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   25314:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25316:	b173      	cbz	r3, 25336 <bt_l2cap_chan_remove+0x24>
   25318:	3b08      	subs	r3, #8
   2531a:	2500      	movs	r5, #0
	return node->next;
   2531c:	461a      	mov	r2, r3
		if (chan == ch) {
   2531e:	4299      	cmp	r1, r3
   25320:	f852 4f08 	ldr.w	r4, [r2, #8]!
   25324:	d10d      	bne.n	25342 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   25326:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   25328:	b935      	cbnz	r5, 25338 <bt_l2cap_chan_remove+0x26>
   2532a:	4291      	cmp	r1, r2
	list->head = node;
   2532c:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2532e:	d100      	bne.n	25332 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   25330:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   25332:	2200      	movs	r2, #0
   25334:	609a      	str	r2, [r3, #8]
}
   25336:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   25338:	4291      	cmp	r1, r2
	parent->next = child;
   2533a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2533c:	bf08      	it	eq
   2533e:	6545      	streq	r5, [r0, #84]	; 0x54
}
   25340:	e7f7      	b.n	25332 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25342:	2c00      	cmp	r4, #0
   25344:	d0f7      	beq.n	25336 <bt_l2cap_chan_remove+0x24>
   25346:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2534a:	4615      	mov	r5, r2
   2534c:	e7e6      	b.n	2531c <bt_l2cap_chan_remove+0xa>

0002534e <bt_l2cap_chan_del>:
{
   2534e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   25350:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   25354:	4604      	mov	r4, r0
	if (!chan->conn) {
   25356:	b123      	cbz	r3, 25362 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25358:	686b      	ldr	r3, [r5, #4]
   2535a:	b103      	cbz	r3, 2535e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2535c:	4798      	blx	r3
	chan->conn = NULL;
   2535e:	2300      	movs	r3, #0
   25360:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25362:	68e3      	ldr	r3, [r4, #12]
   25364:	b10b      	cbz	r3, 2536a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   25366:	4620      	mov	r0, r4
   25368:	4798      	blx	r3
	if (ops->released) {
   2536a:	69eb      	ldr	r3, [r5, #28]
   2536c:	b11b      	cbz	r3, 25376 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2536e:	4620      	mov	r0, r4
}
   25370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   25374:	4718      	bx	r3
}
   25376:	bd70      	pop	{r4, r5, r6, pc}

00025378 <bt_l2cap_disconnected>:
	return list->head;
   25378:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2537a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2537c:	b160      	cbz	r0, 25398 <bt_l2cap_disconnected+0x20>
	return node->next;
   2537e:	f850 4908 	ldr.w	r4, [r0], #-8
   25382:	b104      	cbz	r4, 25386 <bt_l2cap_disconnected+0xe>
   25384:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   25386:	f7ff ffe2 	bl	2534e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2538a:	b12c      	cbz	r4, 25398 <bt_l2cap_disconnected+0x20>
   2538c:	68a3      	ldr	r3, [r4, #8]
   2538e:	b103      	cbz	r3, 25392 <bt_l2cap_disconnected+0x1a>
   25390:	3b08      	subs	r3, #8
{
   25392:	4620      	mov	r0, r4
   25394:	461c      	mov	r4, r3
   25396:	e7f6      	b.n	25386 <bt_l2cap_disconnected+0xe>
}
   25398:	bd10      	pop	{r4, pc}

0002539a <bt_l2cap_security_changed>:
	return list->head;
   2539a:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2539c:	b538      	push	{r3, r4, r5, lr}
   2539e:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   253a0:	b178      	cbz	r0, 253c2 <bt_l2cap_security_changed+0x28>
	return node->next;
   253a2:	f850 4908 	ldr.w	r4, [r0], #-8
   253a6:	b104      	cbz	r4, 253aa <bt_l2cap_security_changed+0x10>
   253a8:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   253aa:	6843      	ldr	r3, [r0, #4]
   253ac:	689b      	ldr	r3, [r3, #8]
   253ae:	b10b      	cbz	r3, 253b4 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   253b0:	4629      	mov	r1, r5
   253b2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   253b4:	b12c      	cbz	r4, 253c2 <bt_l2cap_security_changed+0x28>
   253b6:	68a3      	ldr	r3, [r4, #8]
   253b8:	b103      	cbz	r3, 253bc <bt_l2cap_security_changed+0x22>
   253ba:	3b08      	subs	r3, #8
{
   253bc:	4620      	mov	r0, r4
   253be:	461c      	mov	r4, r3
   253c0:	e7f3      	b.n	253aa <bt_l2cap_security_changed+0x10>
}
   253c2:	bd38      	pop	{r3, r4, r5, pc}

000253c4 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   253c4:	3104      	adds	r1, #4
   253c6:	f7e6 bd4f 	b.w	be68 <bt_conn_create_pdu_timeout>

000253ca <bt_l2cap_send_cb>:
{
   253ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253ce:	4614      	mov	r4, r2
   253d0:	4605      	mov	r5, r0
   253d2:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   253d4:	f102 0008 	add.w	r0, r2, #8
   253d8:	2104      	movs	r1, #4
   253da:	461e      	mov	r6, r3
   253dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   253e0:	f001 fe83 	bl	270ea <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   253e4:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   253e6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   253e8:	3a04      	subs	r2, #4
   253ea:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   253ec:	4643      	mov	r3, r8
   253ee:	4632      	mov	r2, r6
   253f0:	4621      	mov	r1, r4
   253f2:	4628      	mov	r0, r5
}
   253f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   253f8:	f7e6 bb70 	b.w	badc <bt_conn_send_cb>

000253fc <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   253fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   253fe:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   25400:	2202      	movs	r2, #2
   25402:	2001      	movs	r0, #1
   25404:	f7e7 f92e 	bl	c664 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   25408:	4604      	mov	r4, r0
   2540a:	b198      	cbz	r0, 25434 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2540c:	2102      	movs	r1, #2
   2540e:	3008      	adds	r0, #8
   25410:	f001 fe4a 	bl	270a8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   25414:	2300      	movs	r3, #0
   25416:	7003      	strb	r3, [r0, #0]
   25418:	7043      	strb	r3, [r0, #1]
   2541a:	4622      	mov	r2, r4
   2541c:	9300      	str	r3, [sp, #0]
   2541e:	2105      	movs	r1, #5
   25420:	4628      	mov	r0, r5
   25422:	f7ff ffd2 	bl	253ca <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   25426:	b128      	cbz	r0, 25434 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   25428:	4620      	mov	r0, r4
}
   2542a:	b003      	add	sp, #12
   2542c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   25430:	f7f7 bd9a 	b.w	1cf68 <net_buf_unref>
}
   25434:	b003      	add	sp, #12
   25436:	bd30      	pop	{r4, r5, pc}

00025438 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   25438:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2543a:	b138      	cbz	r0, 2544c <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2543c:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   25440:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25442:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25446:	d001      	beq.n	2544c <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   25448:	6880      	ldr	r0, [r0, #8]
   2544a:	e7f6      	b.n	2543a <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2544c:	4770      	bx	lr

0002544e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2544e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25450:	b138      	cbz	r0, 25462 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25452:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   25456:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25458:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2545c:	d001      	beq.n	25462 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   2545e:	6880      	ldr	r0, [r0, #8]
   25460:	e7f6      	b.n	25450 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   25462:	4770      	bx	lr

00025464 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25464:	4770      	bx	lr

00025466 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25466:	4603      	mov	r3, r0
	return list->head;
   25468:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2546a:	b128      	cbz	r0, 25478 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2546c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2546e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25470:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25472:	4288      	cmp	r0, r1
	list->tail = node;
   25474:	bf08      	it	eq
   25476:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25478:	4770      	bx	lr

0002547a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2547a:	4603      	mov	r3, r0
	size_t bytes = 0;
   2547c:	2000      	movs	r0, #0

	while (buf) {
   2547e:	b903      	cbnz	r3, 25482 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   25480:	4770      	bx	lr
		bytes += buf->len;
   25482:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   25484:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   25486:	4410      	add	r0, r2
		buf = buf->frags;
   25488:	e7f9      	b.n	2547e <net_buf_frags_len+0x4>

0002548a <att_sent>:
	if (chan->ops->sent) {
   2548a:	684b      	ldr	r3, [r1, #4]
   2548c:	695b      	ldr	r3, [r3, #20]
{
   2548e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   25490:	b103      	cbz	r3, 25494 <att_sent+0xa>
		chan->ops->sent(chan);
   25492:	4718      	bx	r3
}
   25494:	4770      	bx	lr

00025496 <attr_read_type_cb>:
{
   25496:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   25498:	68d4      	ldr	r4, [r2, #12]
   2549a:	7823      	ldrb	r3, [r4, #0]
   2549c:	3102      	adds	r1, #2
   2549e:	b913      	cbnz	r3, 254a6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   254a0:	7021      	strb	r1, [r4, #0]
	return true;
   254a2:	2001      	movs	r0, #1
   254a4:	e006      	b.n	254b4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   254a6:	428b      	cmp	r3, r1
   254a8:	d0fb      	beq.n	254a2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   254aa:	8983      	ldrh	r3, [r0, #12]
   254ac:	3b02      	subs	r3, #2
   254ae:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   254b0:	2000      	movs	r0, #0
   254b2:	6110      	str	r0, [r2, #16]
}
   254b4:	bd10      	pop	{r4, pc}

000254b6 <att_prepare_write_req>:
}
   254b6:	2006      	movs	r0, #6
   254b8:	4770      	bx	lr

000254ba <att_op_get_type>:
	switch (op) {
   254ba:	281e      	cmp	r0, #30
   254bc:	d816      	bhi.n	254ec <att_op_get_type+0x32>
   254be:	b308      	cbz	r0, 25504 <att_op_get_type+0x4a>
   254c0:	1e43      	subs	r3, r0, #1
   254c2:	2b1d      	cmp	r3, #29
   254c4:	d81e      	bhi.n	25504 <att_op_get_type+0x4a>
   254c6:	e8df f003 	tbb	[pc, r3]
   254ca:	2317      	.short	0x2317
   254cc:	23172317 	.word	0x23172317
   254d0:	23172317 	.word	0x23172317
   254d4:	23172317 	.word	0x23172317
   254d8:	23172317 	.word	0x23172317
   254dc:	231d1d17 	.word	0x231d1d17
   254e0:	1d172317 	.word	0x1d172317
   254e4:	0f1b1d19 	.word	0x0f1b1d19
   254e8:	2004      	movs	r0, #4
   254ea:	4770      	bx	lr
   254ec:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   254f0:	2b52      	cmp	r3, #82	; 0x52
   254f2:	d107      	bne.n	25504 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   254f4:	2000      	movs	r0, #0
}
   254f6:	4770      	bx	lr
		return ATT_RESPONSE;
   254f8:	2002      	movs	r0, #2
   254fa:	4770      	bx	lr
		return ATT_NOTIFICATION;
   254fc:	2003      	movs	r0, #3
   254fe:	4770      	bx	lr
		return ATT_INDICATION;
   25500:	2005      	movs	r0, #5
   25502:	4770      	bx	lr
		return ATT_COMMAND;
   25504:	f010 0f40 	tst.w	r0, #64	; 0x40
   25508:	bf0c      	ite	eq
   2550a:	2006      	moveq	r0, #6
   2550c:	2000      	movne	r0, #0
   2550e:	4770      	bx	lr
		return ATT_REQUEST;
   25510:	2001      	movs	r0, #1
   25512:	4770      	bx	lr

00025514 <att_notify_mult>:
{
   25514:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   25516:	6803      	ldr	r3, [r0, #0]
   25518:	898a      	ldrh	r2, [r1, #12]
   2551a:	6818      	ldr	r0, [r3, #0]
   2551c:	6889      	ldr	r1, [r1, #8]
   2551e:	f7e9 fd7f 	bl	f020 <bt_gatt_mult_notification>
}
   25522:	2000      	movs	r0, #0
   25524:	bd08      	pop	{r3, pc}

00025526 <att_notify>:
{
   25526:	b538      	push	{r3, r4, r5, lr}
   25528:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2552a:	f101 0008 	add.w	r0, r1, #8
   2552e:	460c      	mov	r4, r1
   25530:	f001 fdfb 	bl	2712a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   25534:	682d      	ldr	r5, [r5, #0]
   25536:	89a3      	ldrh	r3, [r4, #12]
   25538:	68a2      	ldr	r2, [r4, #8]
   2553a:	4601      	mov	r1, r0
   2553c:	6828      	ldr	r0, [r5, #0]
   2553e:	f001 f8b9 	bl	266b4 <bt_gatt_notification>
}
   25542:	2000      	movs	r0, #0
   25544:	bd38      	pop	{r3, r4, r5, pc}

00025546 <att_chan_mtu_updated>:
{
   25546:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   25548:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2554a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2554c:	b1e3      	cbz	r3, 25588 <att_chan_mtu_updated+0x42>
	return node->next;
   2554e:	681a      	ldr	r2, [r3, #0]
   25550:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   25554:	b10a      	cbz	r2, 2555a <att_chan_mtu_updated+0x14>
   25556:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2555a:	2300      	movs	r3, #0
   2555c:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2555e:	42a8      	cmp	r0, r5
   25560:	d009      	beq.n	25576 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25562:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   25566:	42a1      	cmp	r1, r4
   25568:	bf38      	it	cc
   2556a:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2556c:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   25570:	42a3      	cmp	r3, r4
   25572:	bf38      	it	cc
   25574:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25576:	b142      	cbz	r2, 2558a <att_chan_mtu_updated+0x44>
   25578:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   2557c:	b10c      	cbz	r4, 25582 <att_chan_mtu_updated+0x3c>
   2557e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   25582:	4615      	mov	r5, r2
   25584:	4622      	mov	r2, r4
   25586:	e7ea      	b.n	2555e <att_chan_mtu_updated+0x18>
   25588:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2558a:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2558e:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25592:	428c      	cmp	r4, r1
   25594:	d801      	bhi.n	2559a <att_chan_mtu_updated+0x54>
   25596:	429a      	cmp	r2, r3
   25598:	d909      	bls.n	255ae <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2559a:	429a      	cmp	r2, r3
   2559c:	bf38      	it	cc
   2559e:	461a      	movcc	r2, r3
   255a0:	42a1      	cmp	r1, r4
   255a2:	6830      	ldr	r0, [r6, #0]
   255a4:	bf38      	it	cc
   255a6:	4621      	movcc	r1, r4
}
   255a8:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   255aa:	f7e9 bde1 	b.w	f170 <bt_gatt_att_max_mtu_changed>
}
   255ae:	bc70      	pop	{r4, r5, r6}
   255b0:	4770      	bx	lr

000255b2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   255b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   255b4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   255b8:	2300      	movs	r3, #0
   255ba:	9300      	str	r3, [sp, #0]
   255bc:	461a      	mov	r2, r3
   255be:	f7e8 fd5f 	bl	e080 <bt_gatt_foreach_attr_type>
				  user_data);
}
   255c2:	b005      	add	sp, #20
   255c4:	f85d fb04 	ldr.w	pc, [sp], #4

000255c8 <find_info_cb>:
{
   255c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   255ca:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   255cc:	6817      	ldr	r7, [r2, #0]
{
   255ce:	4605      	mov	r5, r0
   255d0:	460e      	mov	r6, r1
   255d2:	4614      	mov	r4, r2
	if (!data->rsp) {
   255d4:	b963      	cbnz	r3, 255f0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   255d6:	6850      	ldr	r0, [r2, #4]
   255d8:	2101      	movs	r1, #1
   255da:	3008      	adds	r0, #8
   255dc:	f001 fd64 	bl	270a8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   255e0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   255e2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   255e4:	781b      	ldrb	r3, [r3, #0]
   255e6:	2b00      	cmp	r3, #0
   255e8:	bf0c      	ite	eq
   255ea:	2301      	moveq	r3, #1
   255ec:	2302      	movne	r3, #2
   255ee:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   255f0:	68a3      	ldr	r3, [r4, #8]
   255f2:	781b      	ldrb	r3, [r3, #0]
   255f4:	2b01      	cmp	r3, #1
   255f6:	d003      	beq.n	25600 <find_info_cb+0x38>
   255f8:	2b02      	cmp	r3, #2
   255fa:	d019      	beq.n	25630 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   255fc:	2000      	movs	r0, #0
   255fe:	e016      	b.n	2562e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25600:	682b      	ldr	r3, [r5, #0]
   25602:	781b      	ldrb	r3, [r3, #0]
   25604:	2b00      	cmp	r3, #0
   25606:	d1f9      	bne.n	255fc <find_info_cb+0x34>
   25608:	6860      	ldr	r0, [r4, #4]
   2560a:	2104      	movs	r1, #4
   2560c:	3008      	adds	r0, #8
   2560e:	f001 fd4b 	bl	270a8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25612:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25614:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25616:	885b      	ldrh	r3, [r3, #2]
   25618:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2561a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2561c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2561e:	899b      	ldrh	r3, [r3, #12]
   25620:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   25624:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25626:	2804      	cmp	r0, #4
   25628:	bf94      	ite	ls
   2562a:	2000      	movls	r0, #0
   2562c:	2001      	movhi	r0, #1
}
   2562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25630:	682b      	ldr	r3, [r5, #0]
   25632:	781b      	ldrb	r3, [r3, #0]
   25634:	2b02      	cmp	r3, #2
   25636:	d1e1      	bne.n	255fc <find_info_cb+0x34>
   25638:	6860      	ldr	r0, [r4, #4]
   2563a:	2112      	movs	r1, #18
   2563c:	3008      	adds	r0, #8
   2563e:	f001 fd33 	bl	270a8 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25642:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25644:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25646:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   25648:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2564c:	3101      	adds	r1, #1
   2564e:	f7ff f9a6 	bl	2499e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   25652:	6863      	ldr	r3, [r4, #4]
   25654:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   25658:	899b      	ldrh	r3, [r3, #12]
   2565a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2565c:	2812      	cmp	r0, #18
   2565e:	e7e3      	b.n	25628 <find_info_cb+0x60>

00025660 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25660:	68d0      	ldr	r0, [r2, #12]
   25662:	7803      	ldrb	r3, [r0, #0]
   25664:	3104      	adds	r1, #4
   25666:	b913      	cbnz	r3, 2566e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25668:	7001      	strb	r1, [r0, #0]
	return true;
   2566a:	2001      	movs	r0, #1
}
   2566c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2566e:	428b      	cmp	r3, r1
   25670:	d0fb      	beq.n	2566a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   25672:	6891      	ldr	r1, [r2, #8]
   25674:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   25676:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   25678:	3b04      	subs	r3, #4
   2567a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2567c:	6110      	str	r0, [r2, #16]
		return false;
   2567e:	4770      	bx	lr

00025680 <chan_req_sent>:
	if (chan->req) {
   25680:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   25684:	b133      	cbz	r3, 25694 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25686:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2568a:	2300      	movs	r3, #0
   2568c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   25690:	f7fc b9ba 	b.w	21a08 <k_work_reschedule>
}
   25694:	4770      	bx	lr

00025696 <write_cb>:
{
   25696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25698:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2569a:	4601      	mov	r1, r0
{
   2569c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2569e:	222a      	movs	r2, #42	; 0x2a
   256a0:	6820      	ldr	r0, [r4, #0]
   256a2:	f000 feec 	bl	2647e <bt_gatt_check_perm>
   256a6:	4605      	mov	r5, r0
   256a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   256aa:	bb20      	cbnz	r0, 256f6 <write_cb+0x60>
	if (!data->req) {
   256ac:	7a23      	ldrb	r3, [r4, #8]
   256ae:	b1ab      	cbz	r3, 256dc <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   256b0:	2b18      	cmp	r3, #24
   256b2:	bf14      	ite	ne
   256b4:	2300      	movne	r3, #0
   256b6:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   256b8:	9301      	str	r3, [sp, #4]
   256ba:	8a63      	ldrh	r3, [r4, #18]
   256bc:	9300      	str	r3, [sp, #0]
   256be:	68b7      	ldr	r7, [r6, #8]
   256c0:	8a23      	ldrh	r3, [r4, #16]
   256c2:	68e2      	ldr	r2, [r4, #12]
   256c4:	6820      	ldr	r0, [r4, #0]
   256c6:	4631      	mov	r1, r6
   256c8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   256ca:	1e03      	subs	r3, r0, #0
   256cc:	db08      	blt.n	256e0 <write_cb+0x4a>
   256ce:	8a22      	ldrh	r2, [r4, #16]
   256d0:	4293      	cmp	r3, r2
   256d2:	d10e      	bne.n	256f2 <write_cb+0x5c>
	data->err = 0U;
   256d4:	2300      	movs	r3, #0
   256d6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   256d8:	2501      	movs	r5, #1
   256da:	e007      	b.n	256ec <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   256dc:	2302      	movs	r3, #2
   256de:	e7eb      	b.n	256b8 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   256e0:	f113 0fff 	cmn.w	r3, #255	; 0xff
   256e4:	d305      	bcc.n	256f2 <write_cb+0x5c>
		return -err;
   256e6:	425b      	negs	r3, r3
   256e8:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   256ea:	7523      	strb	r3, [r4, #20]
}
   256ec:	4628      	mov	r0, r5
   256ee:	b003      	add	sp, #12
   256f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   256f2:	230e      	movs	r3, #14
   256f4:	e7f9      	b.n	256ea <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   256f6:	2500      	movs	r5, #0
   256f8:	e7f8      	b.n	256ec <write_cb+0x56>

000256fa <z_log_msg2_static_create.constprop.0>:
   256fa:	2300      	movs	r3, #0
   256fc:	f7fd bebb 	b.w	23476 <z_impl_z_log_msg2_static_create>

00025700 <att_chan_read>:
{
   25700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25704:	4680      	mov	r8, r0
   25706:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25708:	4610      	mov	r0, r2
{
   2570a:	4699      	mov	r9, r3
   2570c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2570e:	f7ff feb4 	bl	2547a <net_buf_frags_len>
   25712:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   25716:	4283      	cmp	r3, r0
{
   25718:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2571a:	d97a      	bls.n	25812 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2571c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25720:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25722:	4630      	mov	r0, r6
   25724:	f001 fc92 	bl	2704c <net_buf_frag_last>
	size_t len, total = 0;
   25728:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2572c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2572e:	4630      	mov	r0, r6
   25730:	f7ff fea3 	bl	2547a <net_buf_frags_len>
   25734:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   25738:	f105 0708 	add.w	r7, r5, #8
   2573c:	1a24      	subs	r4, r4, r0
   2573e:	4638      	mov	r0, r7
   25740:	f001 fcff 	bl	27142 <net_buf_simple_tailroom>
   25744:	4284      	cmp	r4, r0
   25746:	d211      	bcs.n	2576c <att_chan_read+0x6c>
   25748:	4630      	mov	r0, r6
   2574a:	f7ff fe96 	bl	2547a <net_buf_frags_len>
   2574e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   25752:	1a24      	subs	r4, r4, r0
		if (!len) {
   25754:	bb34      	cbnz	r4, 257a4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25756:	79b0      	ldrb	r0, [r6, #6]
   25758:	f7f7 fb42 	bl	1cde0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2575c:	2200      	movs	r2, #0
   2575e:	2300      	movs	r3, #0
   25760:	f001 fc3a 	bl	26fd8 <net_buf_alloc_fixed>
			if (!frag) {
   25764:	4605      	mov	r5, r0
   25766:	b930      	cbnz	r0, 25776 <att_chan_read+0x76>
	return total;
   25768:	4657      	mov	r7, sl
   2576a:	e02c      	b.n	257c6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2576c:	4638      	mov	r0, r7
   2576e:	f001 fce8 	bl	27142 <net_buf_simple_tailroom>
   25772:	4604      	mov	r4, r0
   25774:	e7ee      	b.n	25754 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   25776:	4601      	mov	r1, r0
   25778:	4630      	mov	r0, r6
   2577a:	f001 fc78 	bl	2706e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2577e:	4630      	mov	r0, r6
   25780:	f7ff fe7b 	bl	2547a <net_buf_frags_len>
   25784:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   25788:	f105 0708 	add.w	r7, r5, #8
   2578c:	1a24      	subs	r4, r4, r0
   2578e:	4638      	mov	r0, r7
   25790:	f001 fcd7 	bl	27142 <net_buf_simple_tailroom>
   25794:	4284      	cmp	r4, r0
   25796:	d21a      	bcs.n	257ce <att_chan_read+0xce>
   25798:	4630      	mov	r0, r6
   2579a:	f7ff fe6e 	bl	2547a <net_buf_frags_len>
   2579e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   257a2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   257a4:	68a9      	ldr	r1, [r5, #8]
   257a6:	89aa      	ldrh	r2, [r5, #12]
   257a8:	f8db 7004 	ldr.w	r7, [fp, #4]
   257ac:	9803      	ldr	r0, [sp, #12]
   257ae:	f8cd 9000 	str.w	r9, [sp]
   257b2:	440a      	add	r2, r1
   257b4:	b2a3      	uxth	r3, r4
   257b6:	4659      	mov	r1, fp
   257b8:	47b8      	blx	r7
		if (read < 0) {
   257ba:	1e07      	subs	r7, r0, #0
   257bc:	da0c      	bge.n	257d8 <att_chan_read+0xd8>
				return total;
   257be:	f1ba 0f00 	cmp.w	sl, #0
   257c2:	bf18      	it	ne
   257c4:	4657      	movne	r7, sl
}
   257c6:	4638      	mov	r0, r7
   257c8:	b005      	add	sp, #20
   257ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257ce:	4638      	mov	r0, r7
   257d0:	f001 fcb7 	bl	27142 <net_buf_simple_tailroom>
   257d4:	4604      	mov	r4, r0
   257d6:	e7e5      	b.n	257a4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   257d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   257da:	b993      	cbnz	r3, 25802 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   257dc:	4639      	mov	r1, r7
   257de:	f105 0008 	add.w	r0, r5, #8
   257e2:	f001 fc61 	bl	270a8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   257e6:	4630      	mov	r0, r6
   257e8:	f7ff fe47 	bl	2547a <net_buf_frags_len>
   257ec:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   257f0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   257f2:	4283      	cmp	r3, r0
		total += read;
   257f4:	44ba      	add	sl, r7
		offset += read;
   257f6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   257fa:	d9b5      	bls.n	25768 <att_chan_read+0x68>
   257fc:	42a7      	cmp	r7, r4
   257fe:	d096      	beq.n	2572e <att_chan_read+0x2e>
   25800:	e7b2      	b.n	25768 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25806:	4639      	mov	r1, r7
   25808:	4628      	mov	r0, r5
   2580a:	4798      	blx	r3
   2580c:	2800      	cmp	r0, #0
   2580e:	d1e5      	bne.n	257dc <att_chan_read+0xdc>
   25810:	e7aa      	b.n	25768 <att_chan_read+0x68>
		return 0;
   25812:	2700      	movs	r7, #0
   25814:	e7d7      	b.n	257c6 <att_chan_read+0xc6>

00025816 <chan_req_send>:
{
   25816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25818:	688f      	ldr	r7, [r1, #8]
{
   2581a:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2581c:	4638      	mov	r0, r7
   2581e:	f7ff fe2c 	bl	2547a <net_buf_frags_len>
   25822:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   25826:	4283      	cmp	r3, r0
{
   25828:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2582a:	d30d      	bcc.n	25848 <chan_req_send+0x32>
	req->buf = NULL;
   2582c:	2600      	movs	r6, #0
	chan->req = req;
   2582e:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   25832:	4632      	mov	r2, r6
	req->buf = NULL;
   25834:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   25836:	4620      	mov	r0, r4
   25838:	4639      	mov	r1, r7
   2583a:	f7e7 fabb 	bl	cdb4 <chan_send>
	if (err) {
   2583e:	b110      	cbz	r0, 25846 <chan_req_send+0x30>
		req->buf = buf;
   25840:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   25842:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   25846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25848:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2584c:	e7fb      	b.n	25846 <chan_req_send+0x30>

0002584e <process_queue>:
{
   2584e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   25850:	2200      	movs	r2, #0
{
   25852:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   25854:	2300      	movs	r3, #0
   25856:	4608      	mov	r0, r1
{
   25858:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2585a:	f001 fbc2 	bl	26fe2 <net_buf_get>
	if (buf) {
   2585e:	4605      	mov	r5, r0
   25860:	b160      	cbz	r0, 2587c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   25862:	4601      	mov	r1, r0
   25864:	2200      	movs	r2, #0
   25866:	4620      	mov	r0, r4
   25868:	f7e7 faa4 	bl	cdb4 <chan_send>
		if (err) {
   2586c:	4604      	mov	r4, r0
   2586e:	b118      	cbz	r0, 25878 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   25870:	4629      	mov	r1, r5
   25872:	4630      	mov	r0, r6
   25874:	f002 fa3b 	bl	27cee <k_queue_prepend>
}
   25878:	4620      	mov	r0, r4
   2587a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2587c:	f06f 0401 	mvn.w	r4, #1
   25880:	e7fa      	b.n	25878 <process_queue+0x2a>

00025882 <bt_att_chan_send_rsp>:
{
   25882:	b538      	push	{r3, r4, r5, lr}
   25884:	4604      	mov	r4, r0
   25886:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   25888:	f7e7 fa94 	bl	cdb4 <chan_send>
	if (err) {
   2588c:	b130      	cbz	r0, 2589c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2588e:	4629      	mov	r1, r5
   25890:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   25894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   25898:	f001 bbc7 	b.w	2702a <net_buf_put>
}
   2589c:	bd38      	pop	{r3, r4, r5, pc}

0002589e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2589e:	b510      	push	{r4, lr}
	return list->head;
   258a0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   258a2:	2200      	movs	r2, #0
   258a4:	b153      	cbz	r3, 258bc <sys_slist_find_and_remove.isra.0+0x1e>
   258a6:	428b      	cmp	r3, r1
   258a8:	d10e      	bne.n	258c8 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   258aa:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   258ac:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   258ae:	b932      	cbnz	r2, 258be <sys_slist_find_and_remove.isra.0+0x20>
   258b0:	42a1      	cmp	r1, r4
	list->head = node;
   258b2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   258b4:	d100      	bne.n	258b8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   258b6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   258b8:	2300      	movs	r3, #0
   258ba:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   258bc:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   258be:	42a1      	cmp	r1, r4
	parent->next = child;
   258c0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   258c2:	bf08      	it	eq
   258c4:	6042      	streq	r2, [r0, #4]
}
   258c6:	e7f7      	b.n	258b8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   258c8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   258ca:	681b      	ldr	r3, [r3, #0]
   258cc:	e7ea      	b.n	258a4 <sys_slist_find_and_remove.isra.0+0x6>

000258ce <att_exec_write_req>:
   258ce:	2006      	movs	r0, #6
   258d0:	4770      	bx	lr

000258d2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   258d2:	30f0      	adds	r0, #240	; 0xf0
   258d4:	f3bf 8f5b 	dmb	ish
   258d8:	e850 3f00 	ldrex	r3, [r0]
   258dc:	f023 0301 	bic.w	r3, r3, #1
   258e0:	e840 3200 	strex	r2, r3, [r0]
   258e4:	2a00      	cmp	r2, #0
   258e6:	d1f7      	bne.n	258d8 <chan_rsp_sent+0x6>
   258e8:	f3bf 8f5b 	dmb	ish
}
   258ec:	4770      	bx	lr

000258ee <chan_cfm_sent>:
   258ee:	30f0      	adds	r0, #240	; 0xf0
   258f0:	f3bf 8f5b 	dmb	ish
   258f4:	e850 3f00 	ldrex	r3, [r0]
   258f8:	f023 0302 	bic.w	r3, r3, #2
   258fc:	e840 3200 	strex	r2, r3, [r0]
   25900:	2a00      	cmp	r2, #0
   25902:	d1f7      	bne.n	258f4 <chan_cfm_sent+0x6>
   25904:	f3bf 8f5b 	dmb	ish
}
   25908:	4770      	bx	lr

0002590a <read_cb>:
{
   2590a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2590e:	f8d2 8000 	ldr.w	r8, [r2]
{
   25912:	4606      	mov	r6, r0
	data->err = 0x00;
   25914:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25916:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2591a:	7317      	strb	r7, [r2, #12]
{
   2591c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2591e:	4631      	mov	r1, r6
   25920:	2215      	movs	r2, #21
   25922:	f000 fdac 	bl	2647e <bt_gatt_check_perm>
   25926:	4604      	mov	r4, r0
   25928:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2592a:	b9a0      	cbnz	r0, 25956 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2592c:	e9cd 0000 	strd	r0, r0, [sp]
   25930:	88ab      	ldrh	r3, [r5, #4]
   25932:	68aa      	ldr	r2, [r5, #8]
   25934:	4631      	mov	r1, r6
   25936:	4640      	mov	r0, r8
   25938:	f7ff fee2 	bl	25700 <att_chan_read>
	if (ret < 0) {
   2593c:	1e03      	subs	r3, r0, #0
   2593e:	da0c      	bge.n	2595a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25940:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25944:	bf26      	itte	cs
   25946:	425b      	negcs	r3, r3
   25948:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2594a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2594c:	732b      	strb	r3, [r5, #12]
}
   2594e:	4620      	mov	r0, r4
   25950:	b002      	add	sp, #8
   25952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25956:	463c      	mov	r4, r7
   25958:	e7f9      	b.n	2594e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2595a:	2401      	movs	r4, #1
   2595c:	e7f7      	b.n	2594e <read_cb+0x44>

0002595e <bt_att_sent>:
{
   2595e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25960:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   25964:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   25968:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2596a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2596e:	b10b      	cbz	r3, 25974 <bt_att_sent+0x16>
		chan->sent(chan);
   25970:	4638      	mov	r0, r7
   25972:	4798      	blx	r3
   25974:	f3bf 8f5b 	dmb	ish
   25978:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2597c:	e853 2f00 	ldrex	r2, [r3]
   25980:	f022 0210 	bic.w	r2, r2, #16
   25984:	e843 2100 	strex	r1, r2, [r3]
   25988:	2900      	cmp	r1, #0
   2598a:	d1f7      	bne.n	2597c <bt_att_sent+0x1e>
   2598c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25990:	b30c      	cbz	r4, 259d6 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25992:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   25996:	b98b      	cbnz	r3, 259bc <bt_att_sent+0x5e>
   25998:	6863      	ldr	r3, [r4, #4]
   2599a:	b17b      	cbz	r3, 259bc <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2599c:	1d20      	adds	r0, r4, #4
   2599e:	f7ff fd62 	bl	25466 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   259a2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   259a4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   259a6:	4638      	mov	r0, r7
   259a8:	f7ff ff35 	bl	25816 <chan_req_send>
   259ac:	2800      	cmp	r0, #0
   259ae:	da12      	bge.n	259d6 <bt_att_sent+0x78>
	parent->next = child;
   259b0:	6863      	ldr	r3, [r4, #4]
   259b2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   259b4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   259b6:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   259b8:	b903      	cbnz	r3, 259bc <bt_att_sent+0x5e>
	list->tail = node;
   259ba:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   259bc:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   259c0:	4638      	mov	r0, r7
   259c2:	f7ff ff44 	bl	2584e <process_queue>
	if (!err) {
   259c6:	b130      	cbz	r0, 259d6 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   259c8:	f104 010c 	add.w	r1, r4, #12
   259cc:	4638      	mov	r0, r7
}
   259ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   259d2:	f7ff bf3c 	b.w	2584e <process_queue>
}
   259d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000259d8 <att_req_send_process>:
{
   259d8:	b570      	push	{r4, r5, r6, lr}
   259da:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   259dc:	3004      	adds	r0, #4
   259de:	f7ff fd42 	bl	25466 <sys_slist_get>
	if (!node) {
   259e2:	4605      	mov	r5, r0
   259e4:	b1b8      	cbz	r0, 25a16 <att_req_send_process+0x3e>
	return list->head;
   259e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   259e8:	b14b      	cbz	r3, 259fe <att_req_send_process+0x26>
	return node->next;
   259ea:	681e      	ldr	r6, [r3, #0]
   259ec:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   259f0:	b10e      	cbz	r6, 259f6 <att_req_send_process+0x1e>
   259f2:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   259f6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   259fa:	b13b      	cbz	r3, 25a0c <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   259fc:	b966      	cbnz	r6, 25a18 <att_req_send_process+0x40>
	parent->next = child;
   259fe:	6863      	ldr	r3, [r4, #4]
   25a00:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25a02:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25a04:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25a06:	b933      	cbnz	r3, 25a16 <att_req_send_process+0x3e>
	list->tail = node;
   25a08:	60a5      	str	r5, [r4, #8]
}
   25a0a:	e004      	b.n	25a16 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   25a0c:	4629      	mov	r1, r5
   25a0e:	f7ff ff02 	bl	25816 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25a12:	2800      	cmp	r0, #0
   25a14:	dbf2      	blt.n	259fc <att_req_send_process+0x24>
}
   25a16:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   25a18:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a1c:	b10b      	cbz	r3, 25a22 <att_req_send_process+0x4a>
   25a1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25a22:	4630      	mov	r0, r6
   25a24:	461e      	mov	r6, r3
   25a26:	e7e6      	b.n	259f6 <att_req_send_process+0x1e>

00025a28 <bt_att_status>:
{
   25a28:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25a2a:	f3bf 8f5b 	dmb	ish
   25a2e:	680b      	ldr	r3, [r1, #0]
   25a30:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25a34:	07db      	lsls	r3, r3, #31
{
   25a36:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25a38:	d519      	bpl.n	25a6e <bt_att_status+0x46>
	if (!chan->att) {
   25a3a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   25a3e:	b1b0      	cbz	r0, 25a6e <bt_att_status+0x46>
	if (chan->req) {
   25a40:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   25a44:	b99b      	cbnz	r3, 25a6e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   25a46:	3004      	adds	r0, #4
   25a48:	f7ff fd0d 	bl	25466 <sys_slist_get>
	if (!node) {
   25a4c:	4604      	mov	r4, r0
   25a4e:	b170      	cbz	r0, 25a6e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   25a50:	4601      	mov	r1, r0
   25a52:	f1a5 0008 	sub.w	r0, r5, #8
   25a56:	f7ff fede 	bl	25816 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25a5a:	2800      	cmp	r0, #0
   25a5c:	da07      	bge.n	25a6e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   25a5e:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   25a62:	685a      	ldr	r2, [r3, #4]
   25a64:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25a66:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25a68:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25a6a:	b902      	cbnz	r2, 25a6e <bt_att_status+0x46>
	list->tail = node;
   25a6c:	609c      	str	r4, [r3, #8]
}
   25a6e:	bd38      	pop	{r3, r4, r5, pc}

00025a70 <att_write_req>:
{
   25a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a72:	460c      	mov	r4, r1
   25a74:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25a76:	f101 0008 	add.w	r0, r1, #8
   25a7a:	f001 fb56 	bl	2712a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25a7e:	89a2      	ldrh	r2, [r4, #12]
   25a80:	9201      	str	r2, [sp, #4]
   25a82:	68a2      	ldr	r2, [r4, #8]
   25a84:	9200      	str	r2, [sp, #0]
   25a86:	4603      	mov	r3, r0
   25a88:	2213      	movs	r2, #19
   25a8a:	2112      	movs	r1, #18
   25a8c:	4628      	mov	r0, r5
   25a8e:	f7e7 fbd3 	bl	d238 <att_write_rsp.constprop.0>
}
   25a92:	b003      	add	sp, #12
   25a94:	bd30      	pop	{r4, r5, pc}

00025a96 <att_write_cmd>:
{
   25a96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a98:	460c      	mov	r4, r1
   25a9a:	4605      	mov	r5, r0
   25a9c:	f101 0008 	add.w	r0, r1, #8
   25aa0:	f001 fb43 	bl	2712a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25aa4:	89a2      	ldrh	r2, [r4, #12]
   25aa6:	9201      	str	r2, [sp, #4]
   25aa8:	68a2      	ldr	r2, [r4, #8]
   25aaa:	9200      	str	r2, [sp, #0]
   25aac:	2200      	movs	r2, #0
   25aae:	4603      	mov	r3, r0
   25ab0:	4611      	mov	r1, r2
   25ab2:	4628      	mov	r0, r5
   25ab4:	f7e7 fbc0 	bl	d238 <att_write_rsp.constprop.0>
}
   25ab8:	b003      	add	sp, #12
   25aba:	bd30      	pop	{r4, r5, pc}

00025abc <att_read_blob_req>:
{
   25abc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25abe:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25ac0:	8813      	ldrh	r3, [r2, #0]
   25ac2:	8852      	ldrh	r2, [r2, #2]
   25ac4:	9200      	str	r2, [sp, #0]
   25ac6:	210c      	movs	r1, #12
   25ac8:	220d      	movs	r2, #13
   25aca:	f7e7 fd69 	bl	d5a0 <att_read_rsp>
}
   25ace:	b003      	add	sp, #12
   25ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00025ad4 <att_read_req>:
{
   25ad4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25ad6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25ad8:	2200      	movs	r2, #0
   25ada:	881b      	ldrh	r3, [r3, #0]
   25adc:	9200      	str	r2, [sp, #0]
   25ade:	210a      	movs	r1, #10
   25ae0:	220b      	movs	r2, #11
   25ae2:	f7e7 fd5d 	bl	d5a0 <att_read_rsp>
}
   25ae6:	b003      	add	sp, #12
   25ae8:	f85d fb04 	ldr.w	pc, [sp], #4

00025aec <bt_att_init>:
	bt_gatt_init();
   25aec:	f7e8 ba42 	b.w	df74 <bt_gatt_init>

00025af0 <bt_att_get_mtu>:
{
   25af0:	b508      	push	{r3, lr}
	att = att_get(conn);
   25af2:	f7e7 f86f 	bl	cbd4 <att_get>
	if (!att) {
   25af6:	b1b0      	cbz	r0, 25b26 <bt_att_get_mtu+0x36>
	return list->head;
   25af8:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25afa:	b1a0      	cbz	r0, 25b26 <bt_att_get_mtu+0x36>
	return node->next;
   25afc:	6803      	ldr	r3, [r0, #0]
   25afe:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   25b02:	b10b      	cbz	r3, 25b08 <bt_att_get_mtu+0x18>
   25b04:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25b08:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   25b0a:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   25b0e:	4290      	cmp	r0, r2
   25b10:	bf38      	it	cc
   25b12:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25b14:	b13b      	cbz	r3, 25b26 <bt_att_get_mtu+0x36>
   25b16:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   25b1a:	b10a      	cbz	r2, 25b20 <bt_att_get_mtu+0x30>
   25b1c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   25b20:	4619      	mov	r1, r3
   25b22:	4613      	mov	r3, r2
   25b24:	e7f1      	b.n	25b0a <bt_att_get_mtu+0x1a>
}
   25b26:	bd08      	pop	{r3, pc}

00025b28 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25b28:	898a      	ldrh	r2, [r1, #12]
   25b2a:	6889      	ldr	r1, [r1, #8]
   25b2c:	2300      	movs	r3, #0
   25b2e:	f7e7 befb 	b.w	d928 <att_handle_rsp>

00025b32 <att_handle_find_type_rsp>:
   25b32:	f7ff bff9 	b.w	25b28 <att_handle_find_info_rsp>

00025b36 <att_handle_read_type_rsp>:
   25b36:	f7ff bff7 	b.w	25b28 <att_handle_find_info_rsp>

00025b3a <att_handle_read_rsp>:
   25b3a:	f7ff bff5 	b.w	25b28 <att_handle_find_info_rsp>

00025b3e <att_handle_read_blob_rsp>:
   25b3e:	f7ff bff3 	b.w	25b28 <att_handle_find_info_rsp>

00025b42 <att_handle_read_mult_rsp>:
   25b42:	f7ff bff1 	b.w	25b28 <att_handle_find_info_rsp>

00025b46 <att_handle_read_group_rsp>:
   25b46:	f7ff bfef 	b.w	25b28 <att_handle_find_info_rsp>

00025b4a <att_handle_write_rsp>:
   25b4a:	f7ff bfed 	b.w	25b28 <att_handle_find_info_rsp>

00025b4e <att_handle_prepare_write_rsp>:
   25b4e:	f7ff bfeb 	b.w	25b28 <att_handle_find_info_rsp>

00025b52 <att_handle_exec_write_rsp>:
   25b52:	f7ff bfe9 	b.w	25b28 <att_handle_find_info_rsp>

00025b56 <att_confirm>:
   25b56:	f7ff bfe7 	b.w	25b28 <att_handle_find_info_rsp>

00025b5a <att_mtu_rsp>:
{
   25b5a:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   25b5c:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   25b5e:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   25b60:	2b16      	cmp	r3, #22
{
   25b62:	4604      	mov	r4, r0
   25b64:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   25b66:	d806      	bhi.n	25b76 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   25b68:	2200      	movs	r2, #0
   25b6a:	2304      	movs	r3, #4
   25b6c:	4611      	mov	r1, r2
}
   25b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   25b72:	f7e7 bed9 	b.w	d928 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   25b76:	2b41      	cmp	r3, #65	; 0x41
   25b78:	bf28      	it	cs
   25b7a:	2341      	movcs	r3, #65	; 0x41
   25b7c:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25b80:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   25b84:	f7ff fcdf 	bl	25546 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   25b88:	89aa      	ldrh	r2, [r5, #12]
   25b8a:	2300      	movs	r3, #0
   25b8c:	4631      	mov	r1, r6
   25b8e:	4620      	mov	r0, r4
   25b90:	e7ed      	b.n	25b6e <att_mtu_rsp+0x14>

00025b92 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   25b92:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   25b96:	b570      	push	{r4, r5, r6, lr}
   25b98:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   25b9a:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   25b9e:	2b00      	cmp	r3, #0
   25ba0:	d037      	beq.n	25c12 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   25ba2:	b171      	cbz	r1, 25bc2 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   25ba4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   25ba8:	2b00      	cmp	r3, #0
   25baa:	d032      	beq.n	25c12 <bt_att_encrypt_change+0x80>
   25bac:	7c1b      	ldrb	r3, [r3, #16]
   25bae:	07da      	lsls	r2, r3, #31
   25bb0:	d52f      	bpl.n	25c12 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   25bb2:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   25bb4:	2200      	movs	r2, #0
   25bb6:	4630      	mov	r0, r6
   25bb8:	4611      	mov	r1, r2
}
   25bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25bbe:	f7e7 beb3 	b.w	d928 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   25bc2:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   25bc4:	4628      	mov	r0, r5
   25bc6:	f7e9 fae7 	bl	f198 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   25bca:	7a6b      	ldrb	r3, [r5, #9]
   25bcc:	2b01      	cmp	r3, #1
   25bce:	d020      	beq.n	25c12 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   25bd0:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   25bd4:	b1ec      	cbz	r4, 25c12 <bt_att_encrypt_change+0x80>
   25bd6:	7c23      	ldrb	r3, [r4, #16]
   25bd8:	07db      	lsls	r3, r3, #31
   25bda:	d51a      	bpl.n	25c12 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   25bdc:	68e3      	ldr	r3, [r4, #12]
   25bde:	2b00      	cmp	r3, #0
   25be0:	d0e7      	beq.n	25bb2 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   25be2:	6962      	ldr	r2, [r4, #20]
   25be4:	7c61      	ldrb	r1, [r4, #17]
   25be6:	4630      	mov	r0, r6
   25be8:	f7e7 f9da 	bl	cfa0 <bt_att_chan_create_pdu>
	if (!buf) {
   25bec:	4605      	mov	r5, r0
   25bee:	b140      	cbz	r0, 25c02 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   25bf0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   25bf4:	68e3      	ldr	r3, [r4, #12]
   25bf6:	4798      	blx	r3
   25bf8:	4602      	mov	r2, r0
   25bfa:	b120      	cbz	r0, 25c06 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   25bfc:	4628      	mov	r0, r5
   25bfe:	f7f7 f9b3 	bl	1cf68 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   25c02:	230e      	movs	r3, #14
   25c04:	e7d6      	b.n	25bb4 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   25c06:	4629      	mov	r1, r5
   25c08:	4630      	mov	r0, r6
   25c0a:	f7e7 f8d3 	bl	cdb4 <chan_send>
   25c0e:	2800      	cmp	r0, #0
   25c10:	d1f4      	bne.n	25bfc <bt_att_encrypt_change+0x6a>
}
   25c12:	bd70      	pop	{r4, r5, r6, pc}

00025c14 <bt_att_send>:
{
   25c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25c18:	4607      	mov	r7, r0
   25c1a:	460d      	mov	r5, r1
   25c1c:	4616      	mov	r6, r2
   25c1e:	4698      	mov	r8, r3
	att = att_get(conn);
   25c20:	f7e6 ffd8 	bl	cbd4 <att_get>
	if (!att) {
   25c24:	4604      	mov	r4, r0
   25c26:	b938      	cbnz	r0, 25c38 <bt_att_send+0x24>
		net_buf_unref(buf);
   25c28:	4628      	mov	r0, r5
   25c2a:	f7f7 f99d 	bl	1cf68 <net_buf_unref>
		return -ENOTCONN;
   25c2e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   25c32:	b002      	add	sp, #8
   25c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   25c38:	b146      	cbz	r6, 25c4c <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25c3a:	f8cd 8000 	str.w	r8, [sp]
   25c3e:	4633      	mov	r3, r6
   25c40:	462a      	mov	r2, r5
   25c42:	2104      	movs	r1, #4
   25c44:	4638      	mov	r0, r7
   25c46:	f7ff fbc0 	bl	253ca <bt_l2cap_send_cb>
   25c4a:	e7f2      	b.n	25c32 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   25c4c:	f100 060c 	add.w	r6, r0, #12
   25c50:	4629      	mov	r1, r5
   25c52:	4630      	mov	r0, r6
   25c54:	f001 f9e9 	bl	2702a <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   25c58:	2200      	movs	r2, #0
   25c5a:	2300      	movs	r3, #0
   25c5c:	4630      	mov	r0, r6
   25c5e:	f001 f9c0 	bl	26fe2 <net_buf_get>
	if (!buf) {
   25c62:	4605      	mov	r5, r0
   25c64:	b908      	cbnz	r0, 25c6a <bt_att_send+0x56>
	return 0;
   25c66:	2000      	movs	r0, #0
   25c68:	e7e3      	b.n	25c32 <bt_att_send+0x1e>
	return list->head;
   25c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25c6c:	b1a3      	cbz	r3, 25c98 <bt_att_send+0x84>
	return node->next;
   25c6e:	681c      	ldr	r4, [r3, #0]
   25c70:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   25c74:	b10c      	cbz	r4, 25c7a <bt_att_send+0x66>
   25c76:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   25c7a:	2200      	movs	r2, #0
   25c7c:	4629      	mov	r1, r5
   25c7e:	f7e7 f899 	bl	cdb4 <chan_send>
		if (err >= 0) {
   25c82:	2800      	cmp	r0, #0
   25c84:	daef      	bge.n	25c66 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25c86:	b13c      	cbz	r4, 25c98 <bt_att_send+0x84>
   25c88:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   25c8c:	b10b      	cbz	r3, 25c92 <bt_att_send+0x7e>
   25c8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25c92:	4620      	mov	r0, r4
   25c94:	461c      	mov	r4, r3
   25c96:	e7f0      	b.n	25c7a <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   25c98:	4629      	mov	r1, r5
   25c9a:	4630      	mov	r0, r6
   25c9c:	f002 f827 	bl	27cee <k_queue_prepend>
   25ca0:	e7e1      	b.n	25c66 <bt_att_send+0x52>

00025ca2 <bt_att_req_send>:
{
   25ca2:	b510      	push	{r4, lr}
   25ca4:	460c      	mov	r4, r1
	att = att_get(conn);
   25ca6:	f7e6 ff95 	bl	cbd4 <att_get>
	if (!att) {
   25caa:	b160      	cbz	r0, 25cc6 <bt_att_req_send+0x24>
	parent->next = child;
   25cac:	2300      	movs	r3, #0
   25cae:	6023      	str	r3, [r4, #0]
	return list->tail;
   25cb0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   25cb2:	b92b      	cbnz	r3, 25cc0 <bt_att_req_send+0x1e>
	list->head = node;
   25cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   25cb8:	f7ff fe8e 	bl	259d8 <att_req_send_process>
	return 0;
   25cbc:	2000      	movs	r0, #0
}
   25cbe:	bd10      	pop	{r4, pc}
	parent->next = child;
   25cc0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25cc2:	6084      	str	r4, [r0, #8]
}
   25cc4:	e7f8      	b.n	25cb8 <bt_att_req_send+0x16>
		return -ENOTCONN;
   25cc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25cca:	e7f8      	b.n	25cbe <bt_att_req_send+0x1c>

00025ccc <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   25ccc:	b510      	push	{r4, lr}
   25cce:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   25cd0:	f7e6 ff80 	bl	cbd4 <att_get>
	if (!att) {
   25cd4:	b198      	cbz	r0, 25cfe <bt_att_find_req_by_user_data+0x32>
	return list->head;
   25cd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25cd8:	b14b      	cbz	r3, 25cee <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   25cda:	f853 2c50 	ldr.w	r2, [r3, #-80]
   25cde:	6991      	ldr	r1, [r2, #24]
   25ce0:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25ce2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   25ce6:	d009      	beq.n	25cfc <bt_att_find_req_by_user_data+0x30>
	return node->next;
   25ce8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   25cec:	e7f4      	b.n	25cd8 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   25cee:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   25cf0:	b128      	cbz	r0, 25cfe <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   25cf2:	6983      	ldr	r3, [r0, #24]
   25cf4:	42a3      	cmp	r3, r4
   25cf6:	d002      	beq.n	25cfe <bt_att_find_req_by_user_data+0x32>
	return node->next;
   25cf8:	6800      	ldr	r0, [r0, #0]
   25cfa:	e7f9      	b.n	25cf0 <bt_att_find_req_by_user_data+0x24>
   25cfc:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   25cfe:	bd10      	pop	{r4, pc}

00025d00 <gatt_ccc_changed>:
{
   25d00:	460b      	mov	r3, r1
   25d02:	8909      	ldrh	r1, [r1, #8]
   25d04:	8a5a      	ldrh	r2, [r3, #18]
   25d06:	4291      	cmp	r1, r2
   25d08:	bf38      	it	cc
   25d0a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   25d0c:	8a9a      	ldrh	r2, [r3, #20]
   25d0e:	428a      	cmp	r2, r1
   25d10:	d003      	beq.n	25d1a <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25d12:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   25d14:	699b      	ldr	r3, [r3, #24]
   25d16:	b103      	cbz	r3, 25d1a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   25d18:	4718      	bx	r3
}
   25d1a:	4770      	bx	lr

00025d1c <gatt_indicate_rsp>:
{
   25d1c:	b510      	push	{r4, lr}
   25d1e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25d20:	68a3      	ldr	r3, [r4, #8]
{
   25d22:	460a      	mov	r2, r1
	if (params->func) {
   25d24:	b10b      	cbz	r3, 25d2a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25d26:	4621      	mov	r1, r4
   25d28:	4798      	blx	r3
	params->_ref--;
   25d2a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25d2c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25d2e:	3b01      	subs	r3, #1
   25d30:	b2db      	uxtb	r3, r3
   25d32:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25d34:	b122      	cbz	r2, 25d40 <gatt_indicate_rsp+0x24>
   25d36:	b91b      	cbnz	r3, 25d40 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25d38:	4620      	mov	r0, r4
}
   25d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25d3e:	4710      	bx	r2
}
   25d40:	bd10      	pop	{r4, pc}

00025d42 <match_uuid>:
	data->attr = attr;
   25d42:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25d44:	8091      	strh	r1, [r2, #4]
}
   25d46:	2000      	movs	r0, #0
   25d48:	4770      	bx	lr

00025d4a <atomic_get>:
   25d4a:	f3bf 8f5b 	dmb	ish
   25d4e:	6800      	ldr	r0, [r0, #0]
   25d50:	f3bf 8f5b 	dmb	ish
}
   25d54:	4770      	bx	lr

00025d56 <gen_hash_m>:
{
   25d56:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25d58:	6807      	ldr	r7, [r0, #0]
   25d5a:	783d      	ldrb	r5, [r7, #0]
{
   25d5c:	b089      	sub	sp, #36	; 0x24
   25d5e:	4606      	mov	r6, r0
   25d60:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25d62:	b10d      	cbz	r5, 25d68 <gen_hash_m+0x12>
	switch (u16->val) {
   25d64:	2501      	movs	r5, #1
   25d66:	e014      	b.n	25d92 <gen_hash_m+0x3c>
   25d68:	887b      	ldrh	r3, [r7, #2]
   25d6a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25d6e:	d004      	beq.n	25d7a <gen_hash_m+0x24>
   25d70:	d812      	bhi.n	25d98 <gen_hash_m+0x42>
   25d72:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25d76:	2b03      	cmp	r3, #3
   25d78:	d8f4      	bhi.n	25d64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25d7a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25d7e:	2202      	movs	r2, #2
   25d80:	f10d 010a 	add.w	r1, sp, #10
   25d84:	4620      	mov	r0, r4
   25d86:	f7fe fd21 	bl	247cc <tc_cmac_update>
   25d8a:	b9e0      	cbnz	r0, 25dc6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   25d8c:	f06f 0315 	mvn.w	r3, #21
   25d90:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25d92:	4628      	mov	r0, r5
   25d94:	b009      	add	sp, #36	; 0x24
   25d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   25d98:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25d9c:	33ff      	adds	r3, #255	; 0xff
   25d9e:	b29b      	uxth	r3, r3
   25da0:	2b04      	cmp	r3, #4
   25da2:	d8df      	bhi.n	25d64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25da4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25da8:	2202      	movs	r2, #2
   25daa:	f10d 010a 	add.w	r1, sp, #10
   25dae:	4620      	mov	r0, r4
   25db0:	f7fe fd0c 	bl	247cc <tc_cmac_update>
   25db4:	2800      	cmp	r0, #0
   25db6:	d0e9      	beq.n	25d8c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   25db8:	887b      	ldrh	r3, [r7, #2]
   25dba:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25dbe:	2202      	movs	r2, #2
   25dc0:	f10d 010a 	add.w	r1, sp, #10
   25dc4:	e016      	b.n	25df4 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   25dc6:	887b      	ldrh	r3, [r7, #2]
   25dc8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25dcc:	2202      	movs	r2, #2
   25dce:	f10d 010a 	add.w	r1, sp, #10
   25dd2:	4620      	mov	r0, r4
   25dd4:	f7fe fcfa 	bl	247cc <tc_cmac_update>
   25dd8:	2800      	cmp	r0, #0
   25dda:	d0d7      	beq.n	25d8c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25ddc:	2000      	movs	r0, #0
   25dde:	aa03      	add	r2, sp, #12
   25de0:	6877      	ldr	r7, [r6, #4]
   25de2:	9000      	str	r0, [sp, #0]
   25de4:	2313      	movs	r3, #19
   25de6:	4631      	mov	r1, r6
   25de8:	47b8      	blx	r7
		if (len < 0) {
   25dea:	1e02      	subs	r2, r0, #0
   25dec:	da01      	bge.n	25df2 <gen_hash_m+0x9c>
			state->err = len;
   25dee:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25df0:	e7cf      	b.n	25d92 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25df2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25df4:	4620      	mov	r0, r4
   25df6:	f7fe fce9 	bl	247cc <tc_cmac_update>
   25dfa:	2800      	cmp	r0, #0
   25dfc:	d1b2      	bne.n	25d64 <gen_hash_m+0xe>
   25dfe:	e7c5      	b.n	25d8c <gen_hash_m+0x36>

00025e00 <bt_addr_le_cmp>:
   25e00:	2207      	movs	r2, #7
   25e02:	f7fe bdbb 	b.w	2497c <memcmp>

00025e06 <find_ccc_cfg>:
{
   25e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   25e08:	1c4a      	adds	r2, r1, #1
{
   25e0a:	460c      	mov	r4, r1
		if (conn) {
   25e0c:	4605      	mov	r5, r0
   25e0e:	b948      	cbnz	r0, 25e24 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25e10:	9000      	str	r0, [sp, #0]
   25e12:	4669      	mov	r1, sp
   25e14:	f8cd 0003 	str.w	r0, [sp, #3]
   25e18:	4610      	mov	r0, r2
   25e1a:	f7ff fff1 	bl	25e00 <bt_addr_le_cmp>
   25e1e:	b930      	cbnz	r0, 25e2e <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25e20:	4626      	mov	r6, r4
   25e22:	e00e      	b.n	25e42 <find_ccc_cfg+0x3c>
   25e24:	7809      	ldrb	r1, [r1, #0]
   25e26:	f7ff f9ea 	bl	251fe <bt_conn_is_peer_addr_le>
   25e2a:	2800      	cmp	r0, #0
   25e2c:	d1f8      	bne.n	25e20 <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   25e2e:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   25e32:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   25e36:	b13d      	cbz	r5, 25e48 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25e38:	7aa1      	ldrb	r1, [r4, #10]
   25e3a:	4628      	mov	r0, r5
   25e3c:	f7ff f9df 	bl	251fe <bt_conn_is_peer_addr_le>
   25e40:	b158      	cbz	r0, 25e5a <find_ccc_cfg+0x54>
}
   25e42:	4630      	mov	r0, r6
   25e44:	b002      	add	sp, #8
   25e46:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25e48:	4669      	mov	r1, sp
   25e4a:	4610      	mov	r0, r2
   25e4c:	9500      	str	r5, [sp, #0]
   25e4e:	f8cd 5003 	str.w	r5, [sp, #3]
   25e52:	f7ff ffd5 	bl	25e00 <bt_addr_le_cmp>
   25e56:	2800      	cmp	r0, #0
   25e58:	d0f3      	beq.n	25e42 <find_ccc_cfg+0x3c>
	return NULL;
   25e5a:	2600      	movs	r6, #0
   25e5c:	e7f1      	b.n	25e42 <find_ccc_cfg+0x3c>

00025e5e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25e5e:	2207      	movs	r2, #7
   25e60:	f7fe bd9d 	b.w	2499e <memcpy>

00025e64 <gatt_sub_free>:
{
   25e64:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   25e66:	2300      	movs	r3, #0
   25e68:	4669      	mov	r1, sp
   25e6a:	3001      	adds	r0, #1
   25e6c:	9300      	str	r3, [sp, #0]
   25e6e:	f8cd 3003 	str.w	r3, [sp, #3]
   25e72:	f7ff fff4 	bl	25e5e <bt_addr_le_copy>
}
   25e76:	b003      	add	sp, #12
   25e78:	f85d fb04 	ldr.w	pc, [sp], #4

00025e7c <gatt_sub_remove>:
{
   25e7c:	b570      	push	{r4, r5, r6, lr}
   25e7e:	460c      	mov	r4, r1
	if (params) {
   25e80:	4619      	mov	r1, r3
   25e82:	b16b      	cbz	r3, 25ea0 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   25e84:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   25e88:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   25e8a:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   25e8c:	b97a      	cbnz	r2, 25eae <gatt_sub_remove+0x32>
   25e8e:	42ae      	cmp	r6, r5
	list->head = node;
   25e90:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   25e92:	d100      	bne.n	25e96 <gatt_sub_remove+0x1a>
	list->tail = node;
   25e94:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   25e96:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   25e98:	680d      	ldr	r5, [r1, #0]
   25e9a:	614b      	str	r3, [r1, #20]
   25e9c:	461a      	mov	r2, r3
   25e9e:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   25ea0:	68a3      	ldr	r3, [r4, #8]
   25ea2:	b94b      	cbnz	r3, 25eb8 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   25ea4:	4620      	mov	r0, r4
}
   25ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   25eaa:	f7ff bfdb 	b.w	25e64 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   25eae:	42ae      	cmp	r6, r5
	parent->next = child;
   25eb0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25eb2:	bf08      	it	eq
   25eb4:	60e2      	streq	r2, [r4, #12]
}
   25eb6:	e7ee      	b.n	25e96 <gatt_sub_remove+0x1a>
}
   25eb8:	bd70      	pop	{r4, r5, r6, pc}

00025eba <gatt_req_send>:
{
   25eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ebe:	4606      	mov	r6, r0
   25ec0:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   25ec2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   25ec6:	2100      	movs	r1, #0
{
   25ec8:	f89d a020 	ldrb.w	sl, [sp, #32]
   25ecc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   25ed0:	4617      	mov	r7, r2
   25ed2:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   25ed4:	f7e7 fcf4 	bl	d8c0 <bt_att_req_alloc>
	if (!req) {
   25ed8:	4604      	mov	r4, r0
   25eda:	b920      	cbnz	r0, 25ee6 <gatt_req_send+0x2c>
		return -ENOMEM;
   25edc:	f06f 050b 	mvn.w	r5, #11
}
   25ee0:	4628      	mov	r0, r5
   25ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   25ee6:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   25eea:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   25eee:	60c5      	str	r5, [r0, #12]
	req->func = func;
   25ef0:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   25ef4:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   25ef6:	4642      	mov	r2, r8
   25ef8:	4651      	mov	r1, sl
   25efa:	4630      	mov	r0, r6
   25efc:	f7e7 fa46 	bl	d38c <bt_att_create_pdu>
	if (!buf) {
   25f00:	b918      	cbnz	r0, 25f0a <gatt_req_send+0x50>
		bt_att_req_free(req);
   25f02:	4620      	mov	r0, r4
   25f04:	f7e7 fcfe 	bl	d904 <bt_att_req_free>
   25f08:	e7e8      	b.n	25edc <gatt_req_send+0x22>
	req->buf = buf;
   25f0a:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   25f0c:	463a      	mov	r2, r7
   25f0e:	4641      	mov	r1, r8
   25f10:	47a8      	blx	r5
	if (err) {
   25f12:	4605      	mov	r5, r0
   25f14:	b118      	cbz	r0, 25f1e <gatt_req_send+0x64>
		bt_att_req_free(req);
   25f16:	4620      	mov	r0, r4
   25f18:	f7e7 fcf4 	bl	d904 <bt_att_req_free>
   25f1c:	e7e0      	b.n	25ee0 <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   25f1e:	4621      	mov	r1, r4
   25f20:	4630      	mov	r0, r6
   25f22:	f7ff febe 	bl	25ca2 <bt_att_req_send>
	if (err) {
   25f26:	4605      	mov	r5, r0
   25f28:	2800      	cmp	r0, #0
   25f2a:	d0d9      	beq.n	25ee0 <gatt_req_send+0x26>
   25f2c:	e7f3      	b.n	25f16 <gatt_req_send+0x5c>

00025f2e <read_included_uuid_encode>:
{
   25f2e:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   25f30:	2102      	movs	r1, #2
   25f32:	3008      	adds	r0, #8
   25f34:	4614      	mov	r4, r2
   25f36:	f001 f8b7 	bl	270a8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   25f3a:	8963      	ldrh	r3, [r4, #10]
   25f3c:	8003      	strh	r3, [r0, #0]
}
   25f3e:	2000      	movs	r0, #0
   25f40:	bd10      	pop	{r4, pc}

00025f42 <gatt_find_info_encode>:
{
   25f42:	b510      	push	{r4, lr}
   25f44:	2104      	movs	r1, #4
   25f46:	3008      	adds	r0, #8
   25f48:	4614      	mov	r4, r2
   25f4a:	f001 f8ad 	bl	270a8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   25f4e:	8923      	ldrh	r3, [r4, #8]
   25f50:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   25f52:	89e3      	ldrh	r3, [r4, #14]
   25f54:	8043      	strh	r3, [r0, #2]
}
   25f56:	2000      	movs	r0, #0
   25f58:	bd10      	pop	{r4, pc}

00025f5a <gatt_read_encode>:
{
   25f5a:	b510      	push	{r4, lr}
   25f5c:	2102      	movs	r1, #2
   25f5e:	3008      	adds	r0, #8
   25f60:	4614      	mov	r4, r2
   25f62:	f001 f8a1 	bl	270a8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   25f66:	8923      	ldrh	r3, [r4, #8]
   25f68:	8003      	strh	r3, [r0, #0]
}
   25f6a:	2000      	movs	r0, #0
   25f6c:	bd10      	pop	{r4, pc}

00025f6e <gatt_read_blob_encode>:
{
   25f6e:	b510      	push	{r4, lr}
   25f70:	2104      	movs	r1, #4
   25f72:	3008      	adds	r0, #8
   25f74:	4614      	mov	r4, r2
   25f76:	f001 f897 	bl	270a8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   25f7a:	8923      	ldrh	r3, [r4, #8]
   25f7c:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   25f7e:	8963      	ldrh	r3, [r4, #10]
   25f80:	8043      	strh	r3, [r0, #2]
}
   25f82:	2000      	movs	r0, #0
   25f84:	bd10      	pop	{r4, pc}

00025f86 <gatt_read_group_encode>:
{
   25f86:	b538      	push	{r3, r4, r5, lr}
   25f88:	f100 0408 	add.w	r4, r0, #8
   25f8c:	2104      	movs	r1, #4
   25f8e:	4620      	mov	r0, r4
   25f90:	4615      	mov	r5, r2
   25f92:	f001 f889 	bl	270a8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   25f96:	892b      	ldrh	r3, [r5, #8]
   25f98:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   25f9a:	89eb      	ldrh	r3, [r5, #14]
   25f9c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   25f9e:	7c2b      	ldrb	r3, [r5, #16]
   25fa0:	b933      	cbnz	r3, 25fb0 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   25fa2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   25fa6:	4620      	mov	r0, r4
   25fa8:	f001 f895 	bl	270d6 <net_buf_simple_add_le16>
}
   25fac:	2000      	movs	r0, #0
   25fae:	bd38      	pop	{r3, r4, r5, pc}
   25fb0:	f642 0101 	movw	r1, #10241	; 0x2801
   25fb4:	e7f7      	b.n	25fa6 <gatt_read_group_encode+0x20>

00025fb6 <gatt_read_type_encode>:
{
   25fb6:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   25fb8:	f100 0408 	add.w	r4, r0, #8
   25fbc:	2104      	movs	r1, #4
   25fbe:	4620      	mov	r0, r4
   25fc0:	4615      	mov	r5, r2
   25fc2:	f001 f871 	bl	270a8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   25fc6:	892b      	ldrh	r3, [r5, #8]
   25fc8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   25fca:	89eb      	ldrh	r3, [r5, #14]
   25fcc:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   25fce:	7c2b      	ldrb	r3, [r5, #16]
   25fd0:	2b02      	cmp	r3, #2
   25fd2:	d004      	beq.n	25fde <gatt_read_type_encode+0x28>
   25fd4:	2b03      	cmp	r3, #3
   25fd6:	d009      	beq.n	25fec <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   25fd8:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   25fda:	8859      	ldrh	r1, [r3, #2]
   25fdc:	e001      	b.n	25fe2 <gatt_read_type_encode+0x2c>
   25fde:	f642 0102 	movw	r1, #10242	; 0x2802
   25fe2:	4620      	mov	r0, r4
   25fe4:	f001 f877 	bl	270d6 <net_buf_simple_add_le16>
}
   25fe8:	2000      	movs	r0, #0
   25fea:	bd38      	pop	{r3, r4, r5, pc}
   25fec:	f642 0103 	movw	r1, #10243	; 0x2803
   25ff0:	e7f7      	b.n	25fe2 <gatt_read_type_encode+0x2c>

00025ff2 <gatt_read_mult_encode>:
{
   25ff2:	b570      	push	{r4, r5, r6, lr}
   25ff4:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   25ff6:	2500      	movs	r5, #0
   25ff8:	f100 0608 	add.w	r6, r0, #8
   25ffc:	6862      	ldr	r2, [r4, #4]
   25ffe:	b2eb      	uxtb	r3, r5
   26000:	429a      	cmp	r2, r3
   26002:	f105 0501 	add.w	r5, r5, #1
   26006:	d801      	bhi.n	2600c <gatt_read_mult_encode+0x1a>
}
   26008:	2000      	movs	r0, #0
   2600a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   2600c:	68a2      	ldr	r2, [r4, #8]
   2600e:	4630      	mov	r0, r6
   26010:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   26014:	f001 f85f 	bl	270d6 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   26018:	e7f0      	b.n	25ffc <gatt_read_mult_encode+0xa>

0002601a <gatt_read_mult_rsp>:
{
   2601a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2601c:	9d08      	ldr	r5, [sp, #32]
   2601e:	4606      	mov	r6, r0
	params->func(conn, 0, params, pdu, length);
   26020:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   26022:	460c      	mov	r4, r1
   26024:	b901      	cbnz	r1, 26028 <gatt_read_mult_rsp+0xe>
   26026:	b94b      	cbnz	r3, 2603c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   26028:	2300      	movs	r3, #0
   2602a:	9308      	str	r3, [sp, #32]
   2602c:	462a      	mov	r2, r5
   2602e:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   26030:	4630      	mov	r0, r6
   26032:	46bc      	mov	ip, r7
}
   26034:	b003      	add	sp, #12
   26036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2603a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2603c:	9300      	str	r3, [sp, #0]
   2603e:	4613      	mov	r3, r2
   26040:	462a      	mov	r2, r5
   26042:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   26044:	9408      	str	r4, [sp, #32]
   26046:	682f      	ldr	r7, [r5, #0]
   26048:	4623      	mov	r3, r4
   2604a:	462a      	mov	r2, r5
   2604c:	4621      	mov	r1, r4
   2604e:	e7ef      	b.n	26030 <gatt_read_mult_rsp+0x16>

00026050 <z_log_msg2_static_create.constprop.0>:
   26050:	2300      	movs	r3, #0
   26052:	f7fd ba10 	b.w	23476 <z_impl_z_log_msg2_static_create>

00026056 <clear_cf_cfg>:
{
   26056:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26058:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2605a:	2500      	movs	r5, #0
   2605c:	4669      	mov	r1, sp
   2605e:	3001      	adds	r0, #1
   26060:	9500      	str	r5, [sp, #0]
   26062:	f8cd 5003 	str.w	r5, [sp, #3]
   26066:	f7ff fefa 	bl	25e5e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2606a:	f104 0008 	add.w	r0, r4, #8
   2606e:	2201      	movs	r2, #1
   26070:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26072:	340c      	adds	r4, #12
   26074:	f7fe fc9e 	bl	249b4 <memset>
   26078:	f3bf 8f5b 	dmb	ish
   2607c:	e854 3f00 	ldrex	r3, [r4]
   26080:	e844 5200 	strex	r2, r5, [r4]
   26084:	2a00      	cmp	r2, #0
   26086:	d1f9      	bne.n	2607c <clear_cf_cfg+0x26>
   26088:	f3bf 8f5b 	dmb	ish
}
   2608c:	b003      	add	sp, #12
   2608e:	bd30      	pop	{r4, r5, pc}

00026090 <gatt_find_type_encode>:
{
   26090:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   26092:	f100 0508 	add.w	r5, r0, #8
   26096:	2106      	movs	r1, #6
   26098:	4628      	mov	r0, r5
   2609a:	4614      	mov	r4, r2
   2609c:	f001 f804 	bl	270a8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   260a0:	8923      	ldrh	r3, [r4, #8]
   260a2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   260a4:	89e3      	ldrh	r3, [r4, #14]
   260a6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   260a8:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   260aa:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   260ac:	2b00      	cmp	r3, #0
   260ae:	f642 0301 	movw	r3, #10241	; 0x2801
   260b2:	bf08      	it	eq
   260b4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   260b8:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   260ba:	780b      	ldrb	r3, [r1, #0]
   260bc:	b11b      	cbz	r3, 260c6 <gatt_find_type_encode+0x36>
   260be:	2b02      	cmp	r3, #2
   260c0:	d006      	beq.n	260d0 <gatt_find_type_encode+0x40>
}
   260c2:	2000      	movs	r0, #0
   260c4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   260c6:	8849      	ldrh	r1, [r1, #2]
   260c8:	4628      	mov	r0, r5
   260ca:	f001 f804 	bl	270d6 <net_buf_simple_add_le16>
}
   260ce:	e7f8      	b.n	260c2 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   260d0:	2210      	movs	r2, #16
   260d2:	3101      	adds	r1, #1
   260d4:	4628      	mov	r0, r5
   260d6:	f000 ffed 	bl	270b4 <net_buf_simple_add_mem>
   260da:	e7f2      	b.n	260c2 <gatt_find_type_encode+0x32>

000260dc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   260dc:	2301      	movs	r3, #1
   260de:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   260e0:	f3bf 8f5b 	dmb	ish
   260e4:	e850 2f00 	ldrex	r2, [r0]
   260e8:	431a      	orrs	r2, r3
   260ea:	e840 2100 	strex	r1, r2, [r0]
   260ee:	2900      	cmp	r1, #0
   260f0:	d1f8      	bne.n	260e4 <atomic_set_bit+0x8>
   260f2:	f3bf 8f5b 	dmb	ish
}
   260f6:	4770      	bx	lr

000260f8 <sc_restore_rsp>:
{
   260f8:	b538      	push	{r3, r4, r5, lr}
   260fa:	4605      	mov	r5, r0
   260fc:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   260fe:	f7e7 fd2d 	bl	db5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   26102:	b130      	cbz	r0, 26112 <sc_restore_rsp+0x1a>
   26104:	7a03      	ldrb	r3, [r0, #8]
   26106:	07db      	lsls	r3, r3, #31
   26108:	d503      	bpl.n	26112 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2610a:	2100      	movs	r1, #0
   2610c:	300c      	adds	r0, #12
   2610e:	f7ff ffe5 	bl	260dc <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   26112:	b964      	cbnz	r4, 2612e <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   26114:	7a28      	ldrb	r0, [r5, #8]
   26116:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2611a:	f7e7 fd4d 	bl	dbb8 <find_sc_cfg>
		if (sc_cfg) {
   2611e:	b130      	cbz	r0, 2612e <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   26120:	4621      	mov	r1, r4
   26122:	2204      	movs	r2, #4
}
   26124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   26128:	3008      	adds	r0, #8
   2612a:	f7fe bc43 	b.w	249b4 <memset>
}
   2612e:	bd38      	pop	{r3, r4, r5, pc}

00026130 <gatt_write_ccc_buf>:
{
   26130:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   26132:	f100 0508 	add.w	r5, r0, #8
   26136:	2102      	movs	r1, #2
   26138:	4628      	mov	r0, r5
   2613a:	4614      	mov	r4, r2
   2613c:	f000 ffb4 	bl	270a8 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   26140:	8963      	ldrh	r3, [r4, #10]
   26142:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   26144:	89a1      	ldrh	r1, [r4, #12]
   26146:	4628      	mov	r0, r5
   26148:	f000 ffc5 	bl	270d6 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2614c:	f104 0010 	add.w	r0, r4, #16
   26150:	2102      	movs	r1, #2
   26152:	f7ff ffc3 	bl	260dc <atomic_set_bit>
}
   26156:	2000      	movs	r0, #0
   26158:	bd38      	pop	{r3, r4, r5, pc}

0002615a <gatt_write_ccc_rsp>:
{
   2615a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2615e:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26160:	f3bf 8f5b 	dmb	ish
   26164:	4606      	mov	r6, r0
   26166:	460d      	mov	r5, r1
   26168:	f104 0310 	add.w	r3, r4, #16
   2616c:	e853 2f00 	ldrex	r2, [r3]
   26170:	f022 0204 	bic.w	r2, r2, #4
   26174:	e843 2100 	strex	r1, r2, [r3]
   26178:	2900      	cmp	r1, #0
   2617a:	d1f7      	bne.n	2616c <gatt_write_ccc_rsp+0x12>
   2617c:	f3bf 8f5b 	dmb	ish
	if (err) {
   26180:	b1dd      	cbz	r5, 261ba <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   26182:	f7e7 fd39 	bl	dbf8 <gatt_sub_find>
		if (!sub) {
   26186:	4601      	mov	r1, r0
   26188:	b300      	cbz	r0, 261cc <gatt_write_ccc_rsp+0x72>
	return list->head;
   2618a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2618c:	b143      	cbz	r3, 261a0 <gatt_write_ccc_rsp+0x46>
	return node->next;
   2618e:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   26190:	f104 0014 	add.w	r0, r4, #20
   26194:	4283      	cmp	r3, r0
   26196:	d10b      	bne.n	261b0 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   26198:	4623      	mov	r3, r4
   2619a:	4630      	mov	r0, r6
   2619c:	f7ff fe6e 	bl	25e7c <gatt_sub_remove>
	if (params->write) {
   261a0:	6863      	ldr	r3, [r4, #4]
   261a2:	b19b      	cbz	r3, 261cc <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   261a4:	4629      	mov	r1, r5
   261a6:	4630      	mov	r0, r6
   261a8:	2200      	movs	r2, #0
}
   261aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   261ae:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   261b0:	2a00      	cmp	r2, #0
   261b2:	d0f5      	beq.n	261a0 <gatt_write_ccc_rsp+0x46>
	return node->next;
   261b4:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   261b6:	6812      	ldr	r2, [r2, #0]
   261b8:	e7ec      	b.n	26194 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   261ba:	89a3      	ldrh	r3, [r4, #12]
   261bc:	2b00      	cmp	r3, #0
   261be:	d1ef      	bne.n	261a0 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   261c0:	6827      	ldr	r7, [r4, #0]
   261c2:	462b      	mov	r3, r5
   261c4:	462a      	mov	r2, r5
   261c6:	4621      	mov	r1, r4
   261c8:	47b8      	blx	r7
   261ca:	e7e9      	b.n	261a0 <gatt_write_ccc_rsp+0x46>
}
   261cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000261d0 <gatt_read_uuid_encode>:
{
   261d0:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   261d2:	f100 0408 	add.w	r4, r0, #8
   261d6:	2104      	movs	r1, #4
   261d8:	4620      	mov	r0, r4
   261da:	4615      	mov	r5, r2
   261dc:	f000 ff64 	bl	270a8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   261e0:	892b      	ldrh	r3, [r5, #8]
   261e2:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   261e4:	68e9      	ldr	r1, [r5, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   261e6:	896b      	ldrh	r3, [r5, #10]
   261e8:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   261ea:	780b      	ldrb	r3, [r1, #0]
   261ec:	b92b      	cbnz	r3, 261fa <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   261ee:	8849      	ldrh	r1, [r1, #2]
   261f0:	4620      	mov	r0, r4
   261f2:	f000 ff70 	bl	270d6 <net_buf_simple_add_le16>
}
   261f6:	2000      	movs	r0, #0
   261f8:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   261fa:	2210      	movs	r2, #16
   261fc:	3101      	adds	r1, #1
   261fe:	4620      	mov	r0, r4
   26200:	f000 ff58 	bl	270b4 <net_buf_simple_add_mem>
   26204:	e7f7      	b.n	261f6 <gatt_read_uuid_encode+0x26>

00026206 <sc_clear>:
{
   26206:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   26208:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2620c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2620e:	4631      	mov	r1, r6
   26210:	7a00      	ldrb	r0, [r0, #8]
   26212:	f7fe fdf4 	bl	24dfe <bt_addr_le_is_bonded>
   26216:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   26218:	4631      	mov	r1, r6
   2621a:	f7e7 fccd 	bl	dbb8 <find_sc_cfg>
	if (!cfg) {
   2621e:	b128      	cbz	r0, 2622c <sc_clear+0x26>
}
   26220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   26224:	220c      	movs	r2, #12
   26226:	2100      	movs	r1, #0
   26228:	f7fe bbc4 	b.w	249b4 <memset>
}
   2622c:	bd70      	pop	{r4, r5, r6, pc}

0002622e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2622e:	2a02      	cmp	r2, #2
{
   26230:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   26232:	d108      	bne.n	26246 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   26234:	2300      	movs	r3, #0
   26236:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2623a:	461a      	mov	r2, r3
   2623c:	7a00      	ldrb	r0, [r0, #8]
   2623e:	f7e7 fd81 	bl	dd44 <sc_save>
}
   26242:	2002      	movs	r0, #2
   26244:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   26246:	f7ff ffde 	bl	26206 <sc_clear>
   2624a:	e7fa      	b.n	26242 <sc_ccc_cfg_write+0x14>

0002624c <read_appearance>:
{
   2624c:	b513      	push	{r0, r1, r4, lr}
   2624e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   26252:	4610      	mov	r0, r2
	if (offset > value_len) {
   26254:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   26256:	f04f 0200 	mov.w	r2, #0
   2625a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2625e:	d80d      	bhi.n	2627c <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   26260:	f1c1 0402 	rsb	r4, r1, #2
   26264:	429c      	cmp	r4, r3
   26266:	bfa8      	it	ge
   26268:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2626a:	f10d 0306 	add.w	r3, sp, #6
   2626e:	4622      	mov	r2, r4
   26270:	4419      	add	r1, r3
   26272:	f7fe fb94 	bl	2499e <memcpy>
}
   26276:	4620      	mov	r0, r4
   26278:	b002      	add	sp, #8
   2627a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2627c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   26280:	e7f9      	b.n	26276 <read_appearance+0x2a>

00026282 <read_name>:
{
   26282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26286:	4698      	mov	r8, r3
   26288:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2628c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2628e:	f7e4 faed 	bl	a86c <bt_get_name>
   26292:	4607      	mov	r7, r0
				 strlen(name));
   26294:	f7fe fb56 	bl	24944 <strlen>
	if (offset > value_len) {
   26298:	b283      	uxth	r3, r0
   2629a:	42b3      	cmp	r3, r6
   2629c:	d30c      	bcc.n	262b8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2629e:	1b9c      	subs	r4, r3, r6
   262a0:	4544      	cmp	r4, r8
   262a2:	bfa8      	it	ge
   262a4:	4644      	movge	r4, r8
   262a6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   262a8:	4622      	mov	r2, r4
   262aa:	19b9      	adds	r1, r7, r6
   262ac:	4628      	mov	r0, r5
   262ae:	f7fe fb76 	bl	2499e <memcpy>
}
   262b2:	4620      	mov	r0, r4
   262b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   262b8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   262bc:	e7f9      	b.n	262b2 <read_name+0x30>

000262be <cf_read>:
{
   262be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   262c0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   262c2:	2300      	movs	r3, #0
{
   262c4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   262c8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   262cc:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   262ce:	f7e7 fc45 	bl	db5c <find_cf_cfg>
	if (cfg) {
   262d2:	b128      	cbz	r0, 262e0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   262d4:	f100 0108 	add.w	r1, r0, #8
   262d8:	2201      	movs	r2, #1
   262da:	a801      	add	r0, sp, #4
   262dc:	f7fe fb5f 	bl	2499e <memcpy>
	if (offset > value_len) {
   262e0:	2e01      	cmp	r6, #1
   262e2:	d80d      	bhi.n	26300 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   262e4:	f1c6 0401 	rsb	r4, r6, #1
   262e8:	42bc      	cmp	r4, r7
   262ea:	bfa8      	it	ge
   262ec:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   262ee:	ab01      	add	r3, sp, #4
   262f0:	4622      	mov	r2, r4
   262f2:	1999      	adds	r1, r3, r6
   262f4:	4628      	mov	r0, r5
   262f6:	f7fe fb52 	bl	2499e <memcpy>
}
   262fa:	4620      	mov	r0, r4
   262fc:	b003      	add	sp, #12
   262fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26300:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   26304:	e7f9      	b.n	262fa <cf_read+0x3c>

00026306 <bt_gatt_attr_read_service>:
{
   26306:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   26308:	68c9      	ldr	r1, [r1, #12]
{
   2630a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2630e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   26310:	780b      	ldrb	r3, [r1, #0]
{
   26312:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26314:	b993      	cbnz	r3, 2633c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26316:	884b      	ldrh	r3, [r1, #2]
   26318:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2631c:	2d02      	cmp	r5, #2
   2631e:	d819      	bhi.n	26354 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26320:	f1c5 0202 	rsb	r2, r5, #2
   26324:	4294      	cmp	r4, r2
   26326:	bfa8      	it	ge
   26328:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2632a:	f10d 0306 	add.w	r3, sp, #6
   2632e:	4622      	mov	r2, r4
   26330:	1959      	adds	r1, r3, r5
   26332:	f7fe fb34 	bl	2499e <memcpy>
}
   26336:	4620      	mov	r0, r4
   26338:	b003      	add	sp, #12
   2633a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2633c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2633e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   26342:	d807      	bhi.n	26354 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26344:	f1c5 0210 	rsb	r2, r5, #16
   26348:	4294      	cmp	r4, r2
   2634a:	bfa8      	it	ge
   2634c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2634e:	4622      	mov	r2, r4
   26350:	4429      	add	r1, r5
   26352:	e7ee      	b.n	26332 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26354:	f06f 0406 	mvn.w	r4, #6
   26358:	e7ed      	b.n	26336 <bt_gatt_attr_read_service+0x30>

0002635a <bt_gatt_attr_read_ccc>:
{
   2635a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2635c:	68c9      	ldr	r1, [r1, #12]
{
   2635e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   26362:	4615      	mov	r5, r2
   26364:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   26366:	f7ff fd4e 	bl	25e06 <find_ccc_cfg>
	if (cfg) {
   2636a:	b100      	cbz	r0, 2636e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2636c:	8900      	ldrh	r0, [r0, #8]
   2636e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   26372:	2e02      	cmp	r6, #2
   26374:	d80e      	bhi.n	26394 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   26376:	f1c6 0402 	rsb	r4, r6, #2
   2637a:	42bc      	cmp	r4, r7
   2637c:	bfa8      	it	ge
   2637e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26380:	f10d 0306 	add.w	r3, sp, #6
   26384:	4622      	mov	r2, r4
   26386:	1999      	adds	r1, r3, r6
   26388:	4628      	mov	r0, r5
   2638a:	f7fe fb08 	bl	2499e <memcpy>
}
   2638e:	4620      	mov	r0, r4
   26390:	b003      	add	sp, #12
   26392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26394:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26398:	e7f9      	b.n	2638e <bt_gatt_attr_read_ccc+0x34>

0002639a <bt_gatt_attr_read>:
{
   2639a:	b538      	push	{r3, r4, r5, lr}
   2639c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   263a0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   263a4:	42a9      	cmp	r1, r5
{
   263a6:	4610      	mov	r0, r2
	if (offset > value_len) {
   263a8:	d80b      	bhi.n	263c2 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   263aa:	1a6d      	subs	r5, r5, r1
   263ac:	429d      	cmp	r5, r3
   263ae:	bfa8      	it	ge
   263b0:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   263b2:	9b05      	ldr	r3, [sp, #20]
   263b4:	b2ad      	uxth	r5, r5
   263b6:	462a      	mov	r2, r5
   263b8:	4419      	add	r1, r3
   263ba:	f7fe faf0 	bl	2499e <memcpy>
}
   263be:	4628      	mov	r0, r5
   263c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   263c2:	f06f 0506 	mvn.w	r5, #6
   263c6:	e7fa      	b.n	263be <bt_gatt_attr_read+0x24>

000263c8 <bt_gatt_attr_value_handle>:
{
   263c8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   263ca:	4604      	mov	r4, r0
   263cc:	b910      	cbnz	r0, 263d4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   263ce:	2000      	movs	r0, #0
}
   263d0:	b002      	add	sp, #8
   263d2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   263d4:	2300      	movs	r3, #0
   263d6:	f88d 3004 	strb.w	r3, [sp, #4]
   263da:	6800      	ldr	r0, [r0, #0]
   263dc:	f642 0303 	movw	r3, #10243	; 0x2803
   263e0:	a901      	add	r1, sp, #4
   263e2:	f8ad 3006 	strh.w	r3, [sp, #6]
   263e6:	f7fe fb98 	bl	24b1a <bt_uuid_cmp>
   263ea:	2800      	cmp	r0, #0
   263ec:	d1ef      	bne.n	263ce <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   263ee:	68e3      	ldr	r3, [r4, #12]
   263f0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   263f2:	2800      	cmp	r0, #0
   263f4:	d1ec      	bne.n	263d0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   263f6:	4620      	mov	r0, r4
   263f8:	f7e7 fe12 	bl	e020 <bt_gatt_attr_get_handle>
   263fc:	3001      	adds	r0, #1
   263fe:	b280      	uxth	r0, r0
	return handle;
   26400:	e7e6      	b.n	263d0 <bt_gatt_attr_value_handle+0x8>

00026402 <bt_gatt_attr_read_chrc>:
{
   26402:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   26404:	68cf      	ldr	r7, [r1, #12]
{
   26406:	b087      	sub	sp, #28
   26408:	4608      	mov	r0, r1
   2640a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2640c:	79bb      	ldrb	r3, [r7, #6]
   2640e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26412:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   26416:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26418:	f7ff ffd6 	bl	263c8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2641c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2641e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26422:	780b      	ldrb	r3, [r1, #0]
   26424:	b99b      	cbnz	r3, 2644e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   26426:	884b      	ldrh	r3, [r1, #2]
   26428:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2642c:	2105      	movs	r1, #5
	if (offset > value_len) {
   2642e:	42b1      	cmp	r1, r6
   26430:	d315      	bcc.n	2645e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   26432:	1b89      	subs	r1, r1, r6
   26434:	42a1      	cmp	r1, r4
   26436:	bfa8      	it	ge
   26438:	4621      	movge	r1, r4
   2643a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2643c:	ab01      	add	r3, sp, #4
   2643e:	4622      	mov	r2, r4
   26440:	1999      	adds	r1, r3, r6
   26442:	4628      	mov	r0, r5
   26444:	f7fe faab 	bl	2499e <memcpy>
}
   26448:	4620      	mov	r0, r4
   2644a:	b007      	add	sp, #28
   2644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2644e:	3101      	adds	r1, #1
   26450:	2210      	movs	r2, #16
   26452:	f10d 0007 	add.w	r0, sp, #7
   26456:	f7fe faa2 	bl	2499e <memcpy>
		value_len += 16U;
   2645a:	2113      	movs	r1, #19
   2645c:	e7e7      	b.n	2642e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2645e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   26462:	e7f1      	b.n	26448 <bt_gatt_attr_read_chrc+0x46>

00026464 <bt_gatt_foreach_attr>:
{
   26464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   26466:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2646a:	2300      	movs	r3, #0
   2646c:	9300      	str	r3, [sp, #0]
   2646e:	461a      	mov	r2, r3
   26470:	f7e7 fe06 	bl	e080 <bt_gatt_foreach_attr_type>
}
   26474:	b005      	add	sp, #20
   26476:	f85d fb04 	ldr.w	pc, [sp], #4

0002647a <db_hash_process>:
	db_hash_gen(true);
   2647a:	f7e7 be5b 	b.w	e134 <db_hash_gen.constprop.0>

0002647e <bt_gatt_check_perm>:
{
   2647e:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   26480:	07d4      	lsls	r4, r2, #31
{
   26482:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26484:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   26486:	d504      	bpl.n	26492 <bt_gatt_check_perm+0x14>
   26488:	f010 0f15 	tst.w	r0, #21
   2648c:	d01e      	beq.n	264cc <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2648e:	684b      	ldr	r3, [r1, #4]
   26490:	b1e3      	cbz	r3, 264cc <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   26492:	0793      	lsls	r3, r2, #30
   26494:	d504      	bpl.n	264a0 <bt_gatt_check_perm+0x22>
   26496:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2649a:	d019      	beq.n	264d0 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2649c:	688b      	ldr	r3, [r1, #8]
   2649e:	b1bb      	cbz	r3, 264d0 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   264a0:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   264a4:	f014 0f30 	tst.w	r4, #48	; 0x30
   264a8:	d103      	bne.n	264b2 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   264aa:	f014 000c 	ands.w	r0, r4, #12
   264ae:	d107      	bne.n	264c0 <bt_gatt_check_perm+0x42>
}
   264b0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   264b2:	4628      	mov	r0, r5
   264b4:	f7fe fea1 	bl	251fa <bt_conn_get_security>
   264b8:	2802      	cmp	r0, #2
   264ba:	d8f6      	bhi.n	264aa <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   264bc:	2005      	movs	r0, #5
   264be:	e7f7      	b.n	264b0 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   264c0:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   264c2:	2b00      	cmp	r3, #0
   264c4:	bf14      	ite	ne
   264c6:	2000      	movne	r0, #0
   264c8:	200f      	moveq	r0, #15
   264ca:	e7f1      	b.n	264b0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   264cc:	2002      	movs	r0, #2
   264ce:	e7ef      	b.n	264b0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   264d0:	2003      	movs	r0, #3
   264d2:	e7ed      	b.n	264b0 <bt_gatt_check_perm+0x32>

000264d4 <gatt_discover_next>:
{
   264d4:	b570      	push	{r4, r5, r6, lr}
   264d6:	4605      	mov	r5, r0
   264d8:	4614      	mov	r4, r2
	if (!last_handle)
   264da:	b929      	cbnz	r1, 264e8 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   264dc:	4621      	mov	r1, r4
   264de:	4628      	mov	r0, r5
   264e0:	f7e8 f90a 	bl	e6f8 <bt_gatt_discover>
   264e4:	b928      	cbnz	r0, 264f2 <gatt_discover_next+0x1e>
}
   264e6:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   264e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   264ec:	4291      	cmp	r1, r2
   264ee:	d107      	bne.n	26500 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   264f0:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   264f2:	6863      	ldr	r3, [r4, #4]
   264f4:	4622      	mov	r2, r4
   264f6:	4628      	mov	r0, r5
   264f8:	2100      	movs	r1, #0
}
   264fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   264fe:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   26500:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   26502:	1c4b      	adds	r3, r1, #1
   26504:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   26506:	429a      	cmp	r2, r3
		params->start_handle++;
   26508:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2650a:	d2e7      	bcs.n	264dc <gatt_discover_next+0x8>
   2650c:	e7f1      	b.n	264f2 <gatt_discover_next+0x1e>

0002650e <gatt_find_type_rsp>:
{
   2650e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26512:	b088      	sub	sp, #32
   26514:	4607      	mov	r7, r0
   26516:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2651a:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2651c:	b911      	cbnz	r1, 26524 <gatt_find_type_rsp+0x16>
   2651e:	f013 0803 	ands.w	r8, r3, #3
   26522:	d008      	beq.n	26536 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   26524:	f8d9 3004 	ldr.w	r3, [r9, #4]
   26528:	464a      	mov	r2, r9
   2652a:	2100      	movs	r1, #0
   2652c:	4638      	mov	r0, r7
}
   2652e:	b008      	add	sp, #32
   26530:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   26534:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   26536:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2653a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2653e:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26540:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   26544:	42ac      	cmp	r4, r5
   26546:	d107      	bne.n	26558 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   26548:	464a      	mov	r2, r9
   2654a:	4641      	mov	r1, r8
   2654c:	4638      	mov	r0, r7
}
   2654e:	b008      	add	sp, #32
   26550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   26554:	f7ff bfbe 	b.w	264d4 <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   26558:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2655a:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2655e:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26562:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   26564:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   26568:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2656c:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2656e:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26570:	bf0c      	ite	eq
   26572:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   26576:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26578:	ab01      	add	r3, sp, #4
   2657a:	f8ad 1002 	strh.w	r1, [sp, #2]
   2657e:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   26580:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26584:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   26588:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2658c:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26590:	f8cd d00c 	str.w	sp, [sp, #12]
   26594:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   26598:	464a      	mov	r2, r9
   2659a:	a903      	add	r1, sp, #12
   2659c:	4638      	mov	r0, r7
   2659e:	4798      	blx	r3
   265a0:	3404      	adds	r4, #4
   265a2:	2800      	cmp	r0, #0
   265a4:	d1ce      	bne.n	26544 <gatt_find_type_rsp+0x36>
}
   265a6:	b008      	add	sp, #32
   265a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000265ac <bt_gatt_cancel>:
{
   265ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   265ae:	4604      	mov	r4, r0
   265b0:	460d      	mov	r5, r1
	k_sched_lock();
   265b2:	f7fb fa87 	bl	21ac4 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   265b6:	4629      	mov	r1, r5
   265b8:	4620      	mov	r0, r4
   265ba:	f7ff fb87 	bl	25ccc <bt_att_find_req_by_user_data>
	if (req) {
   265be:	4601      	mov	r1, r0
   265c0:	b920      	cbnz	r0, 265cc <bt_gatt_cancel+0x20>
}
   265c2:	b002      	add	sp, #8
   265c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   265c8:	f7fb bc4a 	b.w	21e60 <k_sched_unlock>
		func = req->func;
   265cc:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   265ce:	4620      	mov	r0, r4
   265d0:	f7e7 fa96 	bl	db00 <bt_att_req_cancel>
	k_sched_unlock();
   265d4:	f7fb fc44 	bl	21e60 <k_sched_unlock>
	if (func) {
   265d8:	b12e      	cbz	r6, 265e6 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   265da:	2300      	movs	r3, #0
   265dc:	9500      	str	r5, [sp, #0]
   265de:	461a      	mov	r2, r3
   265e0:	210e      	movs	r1, #14
   265e2:	4620      	mov	r0, r4
   265e4:	47b0      	blx	r6
}
   265e6:	b002      	add	sp, #8
   265e8:	bd70      	pop	{r4, r5, r6, pc}

000265ea <bt_gatt_unsubscribe>:
{
   265ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   265ee:	7b43      	ldrb	r3, [r0, #13]
   265f0:	2b07      	cmp	r3, #7
{
   265f2:	4680      	mov	r8, r0
   265f4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   265f6:	d155      	bne.n	266a4 <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   265f8:	f7e7 fafe 	bl	dbf8 <gatt_sub_find>
	if (!sub) {
   265fc:	4606      	mov	r6, r0
   265fe:	2800      	cmp	r0, #0
   26600:	d053      	beq.n	266aa <bt_gatt_unsubscribe+0xc0>
	return list->head;
   26602:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   26604:	b104      	cbz	r4, 26608 <bt_gatt_unsubscribe+0x1e>
   26606:	3c14      	subs	r4, #20
			has_subscription = true;
   26608:	2300      	movs	r3, #0
   2660a:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2660c:	bb5c      	cbnz	r4, 26666 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   2660e:	2b00      	cmp	r3, #0
   26610:	d04b      	beq.n	266aa <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   26612:	2f00      	cmp	r7, #0
   26614:	d035      	beq.n	26682 <bt_gatt_unsubscribe+0x98>
   26616:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   26618:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2661c:	b15b      	cbz	r3, 26636 <bt_gatt_unsubscribe+0x4c>
   2661e:	429a      	cmp	r2, r3
   26620:	d13d      	bne.n	2669e <bt_gatt_unsubscribe+0xb4>
	return node->next;
   26622:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   26624:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   26626:	2c00      	cmp	r4, #0
   26628:	d134      	bne.n	26694 <bt_gatt_unsubscribe+0xaa>
   2662a:	428a      	cmp	r2, r1
	list->head = node;
   2662c:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   2662e:	d100      	bne.n	26632 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   26630:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   26632:	2300      	movs	r3, #0
   26634:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   26636:	f105 0010 	add.w	r0, r5, #16
   2663a:	f7ff fb86 	bl	25d4a <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   2663e:	0743      	lsls	r3, r0, #29
   26640:	d503      	bpl.n	2664a <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   26642:	4629      	mov	r1, r5
   26644:	4640      	mov	r0, r8
   26646:	f7ff ffb1 	bl	265ac <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   2664a:	68b3      	ldr	r3, [r6, #8]
   2664c:	b913      	cbnz	r3, 26654 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   2664e:	4630      	mov	r0, r6
   26650:	f7ff fc08 	bl	25e64 <gatt_sub_free>
	if (has_subscription) {
   26654:	b367      	cbz	r7, 266b0 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   26656:	2300      	movs	r3, #0
   26658:	682c      	ldr	r4, [r5, #0]
   2665a:	461a      	mov	r2, r3
   2665c:	4629      	mov	r1, r5
   2665e:	4640      	mov	r0, r8
   26660:	47a0      	blx	r4
	return 0;
   26662:	2000      	movs	r0, #0
   26664:	e014      	b.n	26690 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   26666:	42ac      	cmp	r4, r5
   26668:	d009      	beq.n	2667e <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   2666a:	8921      	ldrh	r1, [r4, #8]
   2666c:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   2666e:	4291      	cmp	r1, r2
   26670:	bf08      	it	eq
   26672:	2701      	moveq	r7, #1
	return node->next;
   26674:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   26676:	2c00      	cmp	r4, #0
   26678:	d0c9      	beq.n	2660e <bt_gatt_unsubscribe+0x24>
   2667a:	3c14      	subs	r4, #20
   2667c:	e7c6      	b.n	2660c <bt_gatt_unsubscribe+0x22>
			found = true;
   2667e:	2301      	movs	r3, #1
   26680:	e7f8      	b.n	26674 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   26682:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   26684:	4629      	mov	r1, r5
   26686:	4640      	mov	r0, r8
   26688:	f7e7 fae4 	bl	dc54 <gatt_write_ccc>
		if (err) {
   2668c:	2800      	cmp	r0, #0
   2668e:	d0c2      	beq.n	26616 <bt_gatt_unsubscribe+0x2c>
}
   26690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   26694:	428a      	cmp	r2, r1
	parent->next = child;
   26696:	6023      	str	r3, [r4, #0]
	list->tail = node;
   26698:	bf08      	it	eq
   2669a:	60f4      	streq	r4, [r6, #12]
}
   2669c:	e7c9      	b.n	26632 <bt_gatt_unsubscribe+0x48>
	return node->next;
   2669e:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   266a0:	681b      	ldr	r3, [r3, #0]
   266a2:	e7bb      	b.n	2661c <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   266a4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   266a8:	e7f2      	b.n	26690 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   266aa:	f06f 0015 	mvn.w	r0, #21
   266ae:	e7ef      	b.n	26690 <bt_gatt_unsubscribe+0xa6>
	return 0;
   266b0:	4638      	mov	r0, r7
   266b2:	e7ed      	b.n	26690 <bt_gatt_unsubscribe+0xa6>

000266b4 <bt_gatt_notification>:
{
   266b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266b8:	4606      	mov	r6, r0
   266ba:	460f      	mov	r7, r1
   266bc:	4690      	mov	r8, r2
   266be:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   266c0:	f7e7 fa9a 	bl	dbf8 <gatt_sub_find>
	if (!sub) {
   266c4:	b300      	cbz	r0, 26708 <bt_gatt_notification+0x54>
	return list->head;
   266c6:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   266c8:	b1f4      	cbz	r4, 26708 <bt_gatt_notification+0x54>
	return node->next;
   266ca:	f854 a914 	ldr.w	sl, [r4], #-20
   266ce:	f1ba 0f00 	cmp.w	sl, #0
   266d2:	d001      	beq.n	266d8 <bt_gatt_notification+0x24>
   266d4:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   266d8:	8923      	ldrh	r3, [r4, #8]
   266da:	42bb      	cmp	r3, r7
   266dc:	d10a      	bne.n	266f4 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   266de:	6825      	ldr	r5, [r4, #0]
   266e0:	464b      	mov	r3, r9
   266e2:	4642      	mov	r2, r8
   266e4:	4621      	mov	r1, r4
   266e6:	4630      	mov	r0, r6
   266e8:	47a8      	blx	r5
   266ea:	b918      	cbnz	r0, 266f4 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   266ec:	4621      	mov	r1, r4
   266ee:	4630      	mov	r0, r6
   266f0:	f7ff ff7b 	bl	265ea <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   266f4:	f1ba 0f00 	cmp.w	sl, #0
   266f8:	d006      	beq.n	26708 <bt_gatt_notification+0x54>
   266fa:	f8da 5014 	ldr.w	r5, [sl, #20]
   266fe:	b105      	cbz	r5, 26702 <bt_gatt_notification+0x4e>
   26700:	3d14      	subs	r5, #20
{
   26702:	4654      	mov	r4, sl
   26704:	46aa      	mov	sl, r5
   26706:	e7e7      	b.n	266d8 <bt_gatt_notification+0x24>
}
   26708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002670c <bt_gatt_change_aware>:
{
   2670c:	b510      	push	{r4, lr}
   2670e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   26710:	f7e7 fa24 	bl	db5c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26714:	b910      	cbnz	r0, 2671c <bt_gatt_change_aware+0x10>
		return true;
   26716:	2401      	movs	r4, #1
}
   26718:	4620      	mov	r0, r4
   2671a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2671c:	7a03      	ldrb	r3, [r0, #8]
   2671e:	07d9      	lsls	r1, r3, #31
   26720:	d5f9      	bpl.n	26716 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26722:	f100 030c 	add.w	r3, r0, #12
   26726:	4618      	mov	r0, r3
   26728:	f7ff fb0f 	bl	25d4a <atomic_get>
   2672c:	f010 0101 	ands.w	r1, r0, #1
   26730:	d1f1      	bne.n	26716 <bt_gatt_change_aware+0xa>
	if (!req) {
   26732:	2c00      	cmp	r4, #0
   26734:	d0f0      	beq.n	26718 <bt_gatt_change_aware+0xc>
   26736:	4618      	mov	r0, r3
   26738:	f7ff fb07 	bl	25d4a <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2673c:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2673e:	f3c0 0440 	ubfx	r4, r0, #1, #1
   26742:	d50f      	bpl.n	26764 <bt_gatt_change_aware+0x58>
   26744:	f3bf 8f5b 	dmb	ish
   26748:	e853 2f00 	ldrex	r2, [r3]
   2674c:	f022 0202 	bic.w	r2, r2, #2
   26750:	e843 2000 	strex	r0, r2, [r3]
   26754:	2800      	cmp	r0, #0
   26756:	d1f7      	bne.n	26748 <bt_gatt_change_aware+0x3c>
   26758:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2675c:	4618      	mov	r0, r3
   2675e:	f7ff fcbd 	bl	260dc <atomic_set_bit>
	return false;
   26762:	e7d9      	b.n	26718 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   26764:	2101      	movs	r1, #1
   26766:	e7f9      	b.n	2675c <bt_gatt_change_aware+0x50>

00026768 <sys_memcpy_swap>:
	psrc += length - 1;
   26768:	1e53      	subs	r3, r2, #1
   2676a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2676c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2676e:	f811 3901 	ldrb.w	r3, [r1], #-1
   26772:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   26776:	4290      	cmp	r0, r2
   26778:	d1f9      	bne.n	2676e <sys_memcpy_swap+0x6>
}
   2677a:	4770      	bx	lr

0002677c <sys_mem_swap>:
{
   2677c:	b510      	push	{r4, lr}
   2677e:	1843      	adds	r3, r0, r1
   26780:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26784:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   26788:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2678a:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2678e:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   26790:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   26792:	d1f7      	bne.n	26784 <sys_mem_swap+0x8>
	}
}
   26794:	bd10      	pop	{r4, pc}

00026796 <smp_pairing_req>:
}
   26796:	2007      	movs	r0, #7
   26798:	4770      	bx	lr

0002679a <bt_smp_aes_cmac>:
{
   2679a:	b570      	push	{r4, r5, r6, lr}
   2679c:	b0c2      	sub	sp, #264	; 0x108
   2679e:	460d      	mov	r5, r1
   267a0:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   267a2:	4601      	mov	r1, r0
   267a4:	aa16      	add	r2, sp, #88	; 0x58
   267a6:	4668      	mov	r0, sp
{
   267a8:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   267aa:	f7fd ffe4 	bl	24776 <tc_cmac_setup>
   267ae:	b150      	cbz	r0, 267c6 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   267b0:	4632      	mov	r2, r6
   267b2:	4629      	mov	r1, r5
   267b4:	4668      	mov	r0, sp
   267b6:	f7fe f809 	bl	247cc <tc_cmac_update>
   267ba:	b120      	cbz	r0, 267c6 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   267bc:	4669      	mov	r1, sp
   267be:	4620      	mov	r0, r4
   267c0:	f7fe f86f 	bl	248a2 <tc_cmac_final>
   267c4:	b918      	cbnz	r0, 267ce <bt_smp_aes_cmac+0x34>
		return -EIO;
   267c6:	f06f 0004 	mvn.w	r0, #4
}
   267ca:	b042      	add	sp, #264	; 0x108
   267cc:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   267ce:	2000      	movs	r0, #0
   267d0:	e7fb      	b.n	267ca <bt_smp_aes_cmac+0x30>

000267d2 <smp_f4>:
{
   267d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   267d4:	b097      	sub	sp, #92	; 0x5c
   267d6:	4614      	mov	r4, r2
   267d8:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   267da:	2220      	movs	r2, #32
   267dc:	4601      	mov	r1, r0
   267de:	a805      	add	r0, sp, #20
{
   267e0:	461d      	mov	r5, r3
   267e2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   267e4:	f7ff ffc0 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   267e8:	2220      	movs	r2, #32
   267ea:	4631      	mov	r1, r6
   267ec:	a80d      	add	r0, sp, #52	; 0x34
   267ee:	f7ff ffbb 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   267f2:	4621      	mov	r1, r4
   267f4:	2210      	movs	r2, #16
   267f6:	a801      	add	r0, sp, #4
	m[64] = z;
   267f8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   267fc:	f7ff ffb4 	bl	26768 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   26800:	463b      	mov	r3, r7
   26802:	2241      	movs	r2, #65	; 0x41
   26804:	a905      	add	r1, sp, #20
   26806:	a801      	add	r0, sp, #4
   26808:	f7ff ffc7 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
   2680c:	4604      	mov	r4, r0
   2680e:	b918      	cbnz	r0, 26818 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   26810:	2110      	movs	r1, #16
   26812:	4638      	mov	r0, r7
   26814:	f7ff ffb2 	bl	2677c <sys_mem_swap>
}
   26818:	4620      	mov	r0, r4
   2681a:	b017      	add	sp, #92	; 0x5c
   2681c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002681e <smp_f6>:
{
   2681e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26820:	b097      	sub	sp, #92	; 0x5c
   26822:	4605      	mov	r5, r0
   26824:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   26826:	a805      	add	r0, sp, #20
   26828:	2210      	movs	r2, #16
{
   2682a:	461c      	mov	r4, r3
   2682c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2682e:	f7ff ff9b 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   26832:	2210      	movs	r2, #16
   26834:	4631      	mov	r1, r6
   26836:	a809      	add	r0, sp, #36	; 0x24
   26838:	f7ff ff96 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2683c:	4621      	mov	r1, r4
   2683e:	2210      	movs	r2, #16
   26840:	a80d      	add	r0, sp, #52	; 0x34
   26842:	f7ff ff91 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   26846:	991c      	ldr	r1, [sp, #112]	; 0x70
   26848:	2203      	movs	r2, #3
   2684a:	a811      	add	r0, sp, #68	; 0x44
   2684c:	f7ff ff8c 	bl	26768 <sys_memcpy_swap>
	m[51] = a1->type;
   26850:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   26852:	f814 3b01 	ldrb.w	r3, [r4], #1
   26856:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2685a:	4621      	mov	r1, r4
   2685c:	2206      	movs	r2, #6
   2685e:	a812      	add	r0, sp, #72	; 0x48
   26860:	f7fe f89d 	bl	2499e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26864:	4621      	mov	r1, r4
   26866:	2206      	movs	r2, #6
   26868:	a812      	add	r0, sp, #72	; 0x48
   2686a:	f7ff ff7d 	bl	26768 <sys_memcpy_swap>
	m[58] = a2->type;
   2686e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   26870:	f814 3b01 	ldrb.w	r3, [r4], #1
   26874:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   26878:	4621      	mov	r1, r4
   2687a:	2206      	movs	r2, #6
   2687c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26880:	f7fe f88d 	bl	2499e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26884:	4621      	mov	r1, r4
   26886:	2206      	movs	r2, #6
   26888:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2688c:	f7ff ff6c 	bl	26768 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26890:	2210      	movs	r2, #16
   26892:	4629      	mov	r1, r5
   26894:	a801      	add	r0, sp, #4
   26896:	f7ff ff67 	bl	26768 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2689a:	463b      	mov	r3, r7
   2689c:	2241      	movs	r2, #65	; 0x41
   2689e:	a905      	add	r1, sp, #20
   268a0:	a801      	add	r0, sp, #4
   268a2:	f7ff ff7a 	bl	2679a <bt_smp_aes_cmac>
	if (err) {
   268a6:	4604      	mov	r4, r0
   268a8:	b918      	cbnz	r0, 268b2 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   268aa:	2110      	movs	r1, #16
   268ac:	4638      	mov	r0, r7
   268ae:	f7ff ff65 	bl	2677c <sys_mem_swap>
}
   268b2:	4620      	mov	r0, r4
   268b4:	b017      	add	sp, #92	; 0x5c
   268b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000268b8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   268b8:	2301      	movs	r3, #1
   268ba:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   268bc:	43db      	mvns	r3, r3
   268be:	f3bf 8f5b 	dmb	ish
   268c2:	e850 2f00 	ldrex	r2, [r0]
   268c6:	401a      	ands	r2, r3
   268c8:	e840 2100 	strex	r1, r2, [r0]
   268cc:	2900      	cmp	r1, #0
   268ce:	d1f8      	bne.n	268c2 <atomic_clear_bit+0xa>
   268d0:	f3bf 8f5b 	dmb	ish
}
   268d4:	4770      	bx	lr

000268d6 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   268d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   268d8:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   268da:	2200      	movs	r2, #0
   268dc:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   268de:	4604      	mov	r4, r0
   268e0:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   268e2:	460a      	mov	r2, r1
   268e4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   268e8:	2106      	movs	r1, #6
   268ea:	f7fe fd6e 	bl	253ca <bt_l2cap_send_cb>
   268ee:	b128      	cbz	r0, 268fc <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   268f0:	4628      	mov	r0, r5
}
   268f2:	b003      	add	sp, #12
   268f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   268f8:	f7f6 bb36 	b.w	1cf68 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   268fc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26900:	2300      	movs	r3, #0
   26902:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   26906:	b003      	add	sp, #12
   26908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2690c:	f7fb b87c 	b.w	21a08 <k_work_reschedule>

00026910 <z_log_msg2_static_create.constprop.0>:
   26910:	2300      	movs	r3, #0
   26912:	f7fc bdb0 	b.w	23476 <z_impl_z_log_msg2_static_create>

00026916 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   26916:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26918:	ab0a      	add	r3, sp, #40	; 0x28
   2691a:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2691c:	9302      	str	r3, [sp, #8]
   2691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26920:	9301      	str	r3, [sp, #4]
   26922:	2300      	movs	r3, #0
   26924:	9300      	str	r3, [sp, #0]
   26926:	2201      	movs	r2, #1
   26928:	4618      	mov	r0, r3
   2692a:	f7df fdcf 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   2692e:	b007      	add	sp, #28
   26930:	f85d fb04 	ldr.w	pc, [sp], #4

00026934 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26934:	f3bf 8f5b 	dmb	ish
   26938:	6800      	ldr	r0, [r0, #0]
   2693a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2693e:	4108      	asrs	r0, r1
}
   26940:	f000 0001 	and.w	r0, r0, #1
   26944:	4770      	bx	lr

00026946 <update_keys_check>:
{
   26946:	b510      	push	{r4, lr}
   26948:	4603      	mov	r3, r0
	if (!keys ||
   2694a:	b1d9      	cbz	r1, 26984 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2694c:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2694e:	f010 0f24 	tst.w	r0, #36	; 0x24
   26952:	d017      	beq.n	26984 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   26954:	7d1a      	ldrb	r2, [r3, #20]
   26956:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   26958:	7b09      	ldrb	r1, [r1, #12]
   2695a:	42a2      	cmp	r2, r4
   2695c:	bf28      	it	cs
   2695e:	4622      	movcs	r2, r4
   26960:	4291      	cmp	r1, r2
   26962:	d901      	bls.n	26968 <update_keys_check+0x22>
		return false;
   26964:	2000      	movs	r0, #0
}
   26966:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26968:	0682      	lsls	r2, r0, #26
   2696a:	d404      	bmi.n	26976 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2696c:	7a18      	ldrb	r0, [r3, #8]
   2696e:	3800      	subs	r0, #0
   26970:	bf18      	it	ne
   26972:	2001      	movne	r0, #1
   26974:	e7f7      	b.n	26966 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26976:	2105      	movs	r1, #5
   26978:	1d18      	adds	r0, r3, #4
   2697a:	f7ff ffdb 	bl	26934 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2697e:	2800      	cmp	r0, #0
   26980:	d1f4      	bne.n	2696c <update_keys_check+0x26>
   26982:	e7ef      	b.n	26964 <update_keys_check+0x1e>
		return true;
   26984:	2001      	movs	r0, #1
   26986:	e7ee      	b.n	26966 <update_keys_check+0x20>

00026988 <atomic_test_and_clear_bit>:
{
   26988:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2698a:	2301      	movs	r3, #1
   2698c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26990:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26992:	f3bf 8f5b 	dmb	ish
   26996:	e850 3f00 	ldrex	r3, [r0]
   2699a:	ea03 0c02 	and.w	ip, r3, r2
   2699e:	e840 ce00 	strex	lr, ip, [r0]
   269a2:	f1be 0f00 	cmp.w	lr, #0
   269a6:	d1f6      	bne.n	26996 <atomic_test_and_clear_bit+0xe>
   269a8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   269ac:	420b      	tst	r3, r1
}
   269ae:	bf14      	ite	ne
   269b0:	2001      	movne	r0, #1
   269b2:	2000      	moveq	r0, #0
   269b4:	f85d fb04 	ldr.w	pc, [sp], #4

000269b8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   269b8:	2301      	movs	r3, #1
   269ba:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   269bc:	f3bf 8f5b 	dmb	ish
   269c0:	e850 2f00 	ldrex	r2, [r0]
   269c4:	431a      	orrs	r2, r3
   269c6:	e840 2100 	strex	r1, r2, [r0]
   269ca:	2900      	cmp	r1, #0
   269cc:	d1f8      	bne.n	269c0 <atomic_set_bit+0x8>
   269ce:	f3bf 8f5b 	dmb	ish
}
   269d2:	4770      	bx	lr

000269d4 <smp_keypress_notif>:
{
   269d4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   269d6:	210e      	movs	r1, #14
   269d8:	f7ff ffee 	bl	269b8 <atomic_set_bit>
}
   269dc:	2000      	movs	r0, #0
   269de:	bd08      	pop	{r3, pc}

000269e0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   269e0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   269e2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   269e4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   269e6:	4628      	mov	r0, r5
   269e8:	2104      	movs	r1, #4
   269ea:	f7ff ffa3 	bl	26934 <atomic_test_bit>
   269ee:	b970      	cbnz	r0, 26a0e <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   269f0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   269f4:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   269f6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   269f8:	4608      	mov	r0, r1
   269fa:	f7fe fce3 	bl	253c4 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   269fe:	4604      	mov	r4, r0
   26a00:	b938      	cbnz	r0, 26a12 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   26a02:	2104      	movs	r1, #4
   26a04:	4628      	mov	r0, r5
   26a06:	f7ff ffd7 	bl	269b8 <atomic_set_bit>
}
   26a0a:	4620      	mov	r0, r4
   26a0c:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   26a0e:	2200      	movs	r2, #0
   26a10:	e7f0      	b.n	269f4 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   26a12:	2101      	movs	r1, #1
   26a14:	3008      	adds	r0, #8
   26a16:	f000 fb47 	bl	270a8 <net_buf_simple_add>
	hdr->code = op;
   26a1a:	7006      	strb	r6, [r0, #0]
	return buf;
   26a1c:	e7f5      	b.n	26a0a <smp_create_pdu.constprop.0+0x2a>

00026a1e <smp_send_pairing_random>:
{
   26a1e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26a20:	2104      	movs	r1, #4
{
   26a22:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26a24:	f7ff ffdc 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26a28:	4604      	mov	r4, r0
   26a2a:	b178      	cbz	r0, 26a4c <smp_send_pairing_random+0x2e>
   26a2c:	2110      	movs	r1, #16
   26a2e:	3008      	adds	r0, #8
   26a30:	f000 fb3a 	bl	270a8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   26a34:	2210      	movs	r2, #16
   26a36:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26a3a:	f7fd ffb0 	bl	2499e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26a3e:	4628      	mov	r0, r5
   26a40:	2200      	movs	r2, #0
   26a42:	4621      	mov	r1, r4
   26a44:	f7ff ff47 	bl	268d6 <smp_send.constprop.0>
	return 0;
   26a48:	2000      	movs	r0, #0
}
   26a4a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26a4c:	2008      	movs	r0, #8
   26a4e:	e7fc      	b.n	26a4a <smp_send_pairing_random+0x2c>

00026a50 <smp_pairing_confirm>:
{
   26a50:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   26a52:	688d      	ldr	r5, [r1, #8]
{
   26a54:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   26a56:	210b      	movs	r1, #11
   26a58:	3004      	adds	r0, #4
   26a5a:	f7ff ff2d 	bl	268b8 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   26a5e:	2210      	movs	r2, #16
   26a60:	4629      	mov	r1, r5
   26a62:	f104 0017 	add.w	r0, r4, #23
   26a66:	f7fd ff9a 	bl	2499e <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   26a6a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   26a6e:	78db      	ldrb	r3, [r3, #3]
   26a70:	b93b      	cbnz	r3, 26a82 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   26a72:	4620      	mov	r0, r4
   26a74:	2104      	movs	r1, #4
   26a76:	f7ff ff9f 	bl	269b8 <atomic_set_bit>
}
   26a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   26a7e:	f7ff bfce 	b.w	26a1e <smp_send_pairing_random>
}
   26a82:	2000      	movs	r0, #0
   26a84:	bd38      	pop	{r3, r4, r5, pc}

00026a86 <smp_reset>:
{
   26a86:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26a88:	1d03      	adds	r3, r0, #4
   26a8a:	4604      	mov	r4, r0
   26a8c:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   26a8e:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   26a92:	f3bf 8f5b 	dmb	ish
   26a96:	e853 2f00 	ldrex	r2, [r3]
   26a9a:	e843 5100 	strex	r1, r5, [r3]
   26a9e:	2900      	cmp	r1, #0
   26aa0:	d1f9      	bne.n	26a96 <smp_reset+0x10>
   26aa2:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   26aa6:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   26aaa:	f001 fa18 	bl	27ede <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   26aae:	7225      	strb	r5, [r4, #8]
   26ab0:	f3bf 8f5b 	dmb	ish
   26ab4:	e854 3f00 	ldrex	r3, [r4]
   26ab8:	e844 5200 	strex	r2, r5, [r4]
   26abc:	2a00      	cmp	r2, #0
   26abe:	d1f9      	bne.n	26ab4 <smp_reset+0x2e>
   26ac0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   26ac4:	78f3      	ldrb	r3, [r6, #3]
   26ac6:	b92b      	cbnz	r3, 26ad4 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   26ac8:	4620      	mov	r0, r4
   26aca:	210b      	movs	r1, #11
}
   26acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   26ad0:	f7ff bf72 	b.w	269b8 <atomic_set_bit>
}
   26ad4:	bd70      	pop	{r4, r5, r6, pc}

00026ad6 <smp_c1>:
{
   26ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26ada:	b089      	sub	sp, #36	; 0x24
   26adc:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   26ae0:	4699      	mov	r9, r3
	p1[0] = ia->type;
   26ae2:	783b      	ldrb	r3, [r7, #0]
{
   26ae4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26ae6:	f88d 3000 	strb.w	r3, [sp]
{
   26aea:	460c      	mov	r4, r1
	p1[1] = ra->type;
   26aec:	f898 3000 	ldrb.w	r3, [r8]
   26af0:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26af4:	4611      	mov	r1, r2
   26af6:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26af8:	2207      	movs	r2, #7
   26afa:	f10d 0002 	add.w	r0, sp, #2
   26afe:	f7fd ff4e 	bl	2499e <memcpy>
	memcpy(p1 + 9, pres, 7);
   26b02:	2207      	movs	r2, #7
   26b04:	4649      	mov	r1, r9
   26b06:	f10d 0009 	add.w	r0, sp, #9
   26b0a:	f7fd ff48 	bl	2499e <memcpy>
	while (len--) {
   26b0e:	f104 0010 	add.w	r0, r4, #16
   26b12:	4629      	mov	r1, r5
   26b14:	466a      	mov	r2, sp
   26b16:	42a0      	cmp	r0, r4
   26b18:	d127      	bne.n	26b6a <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26b1a:	462a      	mov	r2, r5
   26b1c:	4629      	mov	r1, r5
   26b1e:	4630      	mov	r0, r6
   26b20:	f7ed fc98 	bl	14454 <bt_encrypt_le>
	if (err) {
   26b24:	4604      	mov	r4, r0
   26b26:	b9e0      	cbnz	r0, 26b62 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   26b28:	2206      	movs	r2, #6
   26b2a:	f108 0101 	add.w	r1, r8, #1
   26b2e:	a804      	add	r0, sp, #16
   26b30:	f7fd ff35 	bl	2499e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26b34:	2206      	movs	r2, #6
   26b36:	1c79      	adds	r1, r7, #1
   26b38:	f10d 0016 	add.w	r0, sp, #22
   26b3c:	f7fd ff2f 	bl	2499e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   26b40:	2204      	movs	r2, #4
   26b42:	4621      	mov	r1, r4
   26b44:	a807      	add	r0, sp, #28
   26b46:	f7fd ff35 	bl	249b4 <memset>
	while (len--) {
   26b4a:	f105 0010 	add.w	r0, r5, #16
   26b4e:	462a      	mov	r2, r5
   26b50:	ab04      	add	r3, sp, #16
   26b52:	4282      	cmp	r2, r0
   26b54:	d112      	bne.n	26b7c <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   26b56:	462a      	mov	r2, r5
   26b58:	4629      	mov	r1, r5
   26b5a:	4630      	mov	r0, r6
   26b5c:	f7ed fc7a 	bl	14454 <bt_encrypt_le>
   26b60:	4604      	mov	r4, r0
}
   26b62:	4620      	mov	r0, r4
   26b64:	b009      	add	sp, #36	; 0x24
   26b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   26b6a:	f814 3b01 	ldrb.w	r3, [r4], #1
   26b6e:	f812 cb01 	ldrb.w	ip, [r2], #1
   26b72:	ea83 030c 	eor.w	r3, r3, ip
   26b76:	f801 3b01 	strb.w	r3, [r1], #1
   26b7a:	e7cc      	b.n	26b16 <smp_c1+0x40>
   26b7c:	f812 1b01 	ldrb.w	r1, [r2], #1
   26b80:	f813 4b01 	ldrb.w	r4, [r3], #1
   26b84:	4061      	eors	r1, r4
   26b86:	f802 1c01 	strb.w	r1, [r2, #-1]
   26b8a:	e7e2      	b.n	26b52 <smp_c1+0x7c>

00026b8c <legacy_send_pairing_confirm>:
{
   26b8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26b8e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   26b90:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   26b94:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26b96:	f7ff ff23 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!buf) {
   26b9a:	4606      	mov	r6, r0
   26b9c:	b1c0      	cbz	r0, 26bd0 <legacy_send_pairing_confirm+0x44>
   26b9e:	2110      	movs	r1, #16
   26ba0:	3008      	adds	r0, #8
   26ba2:	f000 fa81 	bl	270a8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   26ba6:	f104 0396 	add.w	r3, r4, #150	; 0x96
   26baa:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   26bac:	9002      	str	r0, [sp, #8]
   26bae:	9301      	str	r3, [sp, #4]
   26bb0:	9400      	str	r4, [sp, #0]
   26bb2:	f105 0310 	add.w	r3, r5, #16
   26bb6:	f105 0209 	add.w	r2, r5, #9
   26bba:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26bbe:	f105 0047 	add.w	r0, r5, #71	; 0x47
   26bc2:	f7ff ff88 	bl	26ad6 <smp_c1>
   26bc6:	4604      	mov	r4, r0
   26bc8:	b120      	cbz	r0, 26bd4 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   26bca:	4630      	mov	r0, r6
   26bcc:	f7f6 f9cc 	bl	1cf68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26bd0:	2008      	movs	r0, #8
   26bd2:	e009      	b.n	26be8 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   26bd4:	4602      	mov	r2, r0
   26bd6:	4631      	mov	r1, r6
   26bd8:	4628      	mov	r0, r5
   26bda:	f7ff fe7c 	bl	268d6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26bde:	1d28      	adds	r0, r5, #4
   26be0:	4621      	mov	r1, r4
   26be2:	f7ff fe69 	bl	268b8 <atomic_clear_bit>
	return 0;
   26be6:	4620      	mov	r0, r4
}
   26be8:	b004      	add	sp, #16
   26bea:	bd70      	pop	{r4, r5, r6, pc}

00026bec <bt_smp_request_ltk>:
{
   26bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26bf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   26bf4:	e9cd 2300 	strd	r2, r3, [sp]
   26bf8:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26bfa:	f7e8 fbfb 	bl	f3f4 <smp_chan_get>
	if (!smp) {
   26bfe:	4605      	mov	r5, r0
   26c00:	2800      	cmp	r0, #0
   26c02:	f000 8090 	beq.w	26d26 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   26c06:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26c0a:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   26c0c:	f1b9 0f00 	cmp.w	r9, #0
   26c10:	d12a      	bne.n	26c68 <bt_smp_request_ltk+0x7c>
   26c12:	e9dd 2300 	ldrd	r2, r3, [sp]
   26c16:	4313      	orrs	r3, r2
   26c18:	d126      	bne.n	26c68 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26c1a:	2103      	movs	r1, #3
   26c1c:	4638      	mov	r0, r7
   26c1e:	f7ff fe89 	bl	26934 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   26c22:	b308      	cbz	r0, 26c68 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26c24:	2101      	movs	r1, #1
   26c26:	4638      	mov	r0, r7
   26c28:	f7ff fe84 	bl	26934 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26c2c:	4606      	mov	r6, r0
   26c2e:	b1d8      	cbz	r0, 26c68 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   26c30:	7d2c      	ldrb	r4, [r5, #20]
   26c32:	7b6b      	ldrb	r3, [r5, #13]
   26c34:	429c      	cmp	r4, r3
   26c36:	bf28      	it	cs
   26c38:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26c3a:	4622      	mov	r2, r4
   26c3c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   26c40:	4640      	mov	r0, r8
   26c42:	f7fd feac 	bl	2499e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26c46:	2c0f      	cmp	r4, #15
   26c48:	d806      	bhi.n	26c58 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   26c4a:	f1c4 0210 	rsb	r2, r4, #16
   26c4e:	4649      	mov	r1, r9
   26c50:	eb08 0004 	add.w	r0, r8, r4
   26c54:	f7fd feae 	bl	249b4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26c58:	2101      	movs	r1, #1
   26c5a:	4638      	mov	r0, r7
   26c5c:	f7ff feac 	bl	269b8 <atomic_set_bit>
}
   26c60:	4630      	mov	r0, r6
   26c62:	b003      	add	sp, #12
   26c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   26c68:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   26c6c:	b983      	cbnz	r3, 26c90 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   26c6e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   26c72:	7a21      	ldrb	r1, [r4, #8]
   26c74:	4632      	mov	r2, r6
   26c76:	2020      	movs	r0, #32
   26c78:	f7ea f974 	bl	10f64 <bt_keys_find>
   26c7c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   26c80:	b930      	cbnz	r0, 26c90 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   26c82:	7a21      	ldrb	r1, [r4, #8]
   26c84:	4632      	mov	r2, r6
   26c86:	2001      	movs	r0, #1
   26c88:	f7ea f96c 	bl	10f64 <bt_keys_find>
   26c8c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   26c90:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26c94:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   26c98:	b9ee      	cbnz	r6, 26cd6 <bt_smp_request_ltk+0xea>
   26c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
   26c9e:	4313      	orrs	r3, r2
   26ca0:	d119      	bne.n	26cd6 <bt_smp_request_ltk+0xea>
   26ca2:	b388      	cbz	r0, 26d08 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26ca4:	89c3      	ldrh	r3, [r0, #14]
   26ca6:	069a      	lsls	r2, r3, #26
   26ca8:	d516      	bpl.n	26cd8 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   26caa:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26cac:	f100 011a 	add.w	r1, r0, #26
   26cb0:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26cb2:	4640      	mov	r0, r8
   26cb4:	f7fd fe73 	bl	2499e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26cb8:	2c0f      	cmp	r4, #15
   26cba:	d806      	bhi.n	26cca <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   26cbc:	f1c4 0210 	rsb	r2, r4, #16
   26cc0:	4631      	mov	r1, r6
   26cc2:	eb08 0004 	add.w	r0, r8, r4
   26cc6:	f7fd fe75 	bl	249b4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26cca:	2101      	movs	r1, #1
   26ccc:	4638      	mov	r0, r7
   26cce:	f7ff fe73 	bl	269b8 <atomic_set_bit>
		return true;
   26cd2:	2601      	movs	r6, #1
   26cd4:	e7c4      	b.n	26c60 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26cd6:	b1b8      	cbz	r0, 26d08 <bt_smp_request_ltk+0x11c>
   26cd8:	89c3      	ldrh	r3, [r0, #14]
   26cda:	07db      	lsls	r3, r3, #31
   26cdc:	d514      	bpl.n	26d08 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26cde:	2208      	movs	r2, #8
   26ce0:	4669      	mov	r1, sp
   26ce2:	3068      	adds	r0, #104	; 0x68
   26ce4:	f7fd fe4a 	bl	2497c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26ce8:	b970      	cbnz	r0, 26d08 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   26cea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   26cee:	2202      	movs	r2, #2
   26cf0:	a90a      	add	r1, sp, #40	; 0x28
   26cf2:	3070      	adds	r0, #112	; 0x70
   26cf4:	f7fd fe42 	bl	2497c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26cf8:	4606      	mov	r6, r0
   26cfa:	b928      	cbnz	r0, 26d08 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   26cfc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   26d00:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26d02:	3172      	adds	r1, #114	; 0x72
   26d04:	4622      	mov	r2, r4
   26d06:	e7d4      	b.n	26cb2 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26d08:	210f      	movs	r1, #15
   26d0a:	4638      	mov	r0, r7
   26d0c:	f7ff fe12 	bl	26934 <atomic_test_bit>
   26d10:	b120      	cbz	r0, 26d1c <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26d12:	2202      	movs	r2, #2
   26d14:	2106      	movs	r1, #6
   26d16:	4620      	mov	r0, r4
   26d18:	f7e5 f974 	bl	c004 <bt_conn_security_changed>
	smp_reset(smp);
   26d1c:	4628      	mov	r0, r5
   26d1e:	f7ff feb2 	bl	26a86 <smp_reset>
	return false;
   26d22:	2600      	movs	r6, #0
   26d24:	e79c      	b.n	26c60 <bt_smp_request_ltk+0x74>
		return false;
   26d26:	4606      	mov	r6, r0
   26d28:	e79a      	b.n	26c60 <bt_smp_request_ltk+0x74>

00026d2a <bt_smp_start_security>:
{
   26d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   26d2c:	78c3      	ldrb	r3, [r0, #3]
{
   26d2e:	4604      	mov	r4, r0
	switch (conn->role) {
   26d30:	2b00      	cmp	r3, #0
   26d32:	d157      	bne.n	26de4 <bt_smp_start_security+0xba>
		smp = smp_chan_get(conn);
   26d34:	f7e8 fb5e 	bl	f3f4 <smp_chan_get>
		if (!smp) {
   26d38:	4605      	mov	r5, r0
   26d3a:	2800      	cmp	r0, #0
   26d3c:	d055      	beq.n	26dea <bt_smp_start_security+0xc0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   26d3e:	1d06      	adds	r6, r0, #4
   26d40:	2103      	movs	r1, #3
   26d42:	4630      	mov	r0, r6
   26d44:	f7ff fdf6 	bl	26934 <atomic_test_bit>
   26d48:	b120      	cbz	r0, 26d54 <bt_smp_start_security+0x2a>
			return -EBUSY;
   26d4a:	f06f 040f 	mvn.w	r4, #15
}
   26d4e:	4620      	mov	r0, r4
   26d50:	b003      	add	sp, #12
   26d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26d54:	2101      	movs	r1, #1
   26d56:	4630      	mov	r0, r6
   26d58:	f7ff fdec 	bl	26934 <atomic_test_bit>
   26d5c:	2800      	cmp	r0, #0
   26d5e:	d1f4      	bne.n	26d4a <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   26d60:	210b      	movs	r1, #11
   26d62:	1d20      	adds	r0, r4, #4
   26d64:	f7ff fde6 	bl	26934 <atomic_test_bit>
   26d68:	bb00      	cbnz	r0, 26dac <bt_smp_start_security+0x82>
	if (!conn->le.keys) {
   26d6a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   26d6e:	b983      	cbnz	r3, 26d92 <bt_smp_start_security+0x68>
						     conn->id, &conn->le.dst);
   26d70:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   26d74:	7a21      	ldrb	r1, [r4, #8]
   26d76:	463a      	mov	r2, r7
   26d78:	2020      	movs	r0, #32
   26d7a:	f7ea f8f3 	bl	10f64 <bt_keys_find>
   26d7e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   26d82:	b930      	cbnz	r0, 26d92 <bt_smp_start_security+0x68>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   26d84:	7a21      	ldrb	r1, [r4, #8]
   26d86:	463a      	mov	r2, r7
   26d88:	2004      	movs	r0, #4
   26d8a:	f7ea f8eb 	bl	10f64 <bt_keys_find>
   26d8e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   26d92:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   26d96:	b149      	cbz	r1, 26dac <bt_smp_start_security+0x82>
   26d98:	89cb      	ldrh	r3, [r1, #14]
   26d9a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   26d9e:	b12b      	cbz	r3, 26dac <bt_smp_start_security+0x82>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   26da0:	7aa3      	ldrb	r3, [r4, #10]
   26da2:	2b02      	cmp	r3, #2
   26da4:	d908      	bls.n	26db8 <bt_smp_start_security+0x8e>
   26da6:	7b4b      	ldrb	r3, [r1, #13]
   26da8:	07db      	lsls	r3, r3, #31
   26daa:	d405      	bmi.n	26db8 <bt_smp_start_security+0x8e>
			return smp_send_pairing_req(conn);
   26dac:	4620      	mov	r0, r4
}
   26dae:	b003      	add	sp, #12
   26db0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   26db4:	f7e8 bd38 	b.w	f828 <smp_send_pairing_req>
		err = bt_conn_le_start_encryption(conn,
   26db8:	7b0b      	ldrb	r3, [r1, #12]
   26dba:	9300      	str	r3, [sp, #0]
   26dbc:	f101 0218 	add.w	r2, r1, #24
   26dc0:	f101 031a 	add.w	r3, r1, #26
   26dc4:	4620      	mov	r0, r4
   26dc6:	3110      	adds	r1, #16
   26dc8:	f7fe f9ac 	bl	25124 <bt_conn_le_start_encryption>
		if (err) {
   26dcc:	4604      	mov	r4, r0
   26dce:	2800      	cmp	r0, #0
   26dd0:	d1bd      	bne.n	26d4e <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   26dd2:	4628      	mov	r0, r5
   26dd4:	210b      	movs	r1, #11
   26dd6:	f7ff fdef 	bl	269b8 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26dda:	2101      	movs	r1, #1
   26ddc:	4630      	mov	r0, r6
   26dde:	f7ff fdeb 	bl	269b8 <atomic_set_bit>
		return 0;
   26de2:	e7b4      	b.n	26d4e <bt_smp_start_security+0x24>
		return -EINVAL;
   26de4:	f06f 0415 	mvn.w	r4, #21
   26de8:	e7b1      	b.n	26d4e <bt_smp_start_security+0x24>
			return -ENOTCONN;
   26dea:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   26dee:	e7ae      	b.n	26d4e <bt_smp_start_security+0x24>

00026df0 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26df0:	1d03      	adds	r3, r0, #4
{
   26df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26df4:	4605      	mov	r5, r0
   26df6:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26df8:	4618      	mov	r0, r3
   26dfa:	2103      	movs	r1, #3
   26dfc:	f7ff fd9a 	bl	26934 <atomic_test_bit>
   26e00:	b1f0      	cbz	r0, 26e40 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   26e02:	4631      	mov	r1, r6
   26e04:	4628      	mov	r0, r5
   26e06:	f7e9 fc6d 	bl	106e4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   26e0a:	2105      	movs	r1, #5
   26e0c:	4628      	mov	r0, r5
   26e0e:	f7ff fde7 	bl	269e0 <smp_create_pdu.constprop.0>
	if (!buf) {
   26e12:	4604      	mov	r4, r0
   26e14:	b308      	cbz	r0, 26e5a <smp_error+0x6a>
   26e16:	2101      	movs	r1, #1
   26e18:	3008      	adds	r0, #8
   26e1a:	f000 f945 	bl	270a8 <net_buf_simple_add>
	rsp->reason = reason;
   26e1e:	7006      	strb	r6, [r0, #0]
   26e20:	2600      	movs	r6, #0
   26e22:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   26e26:	9600      	str	r6, [sp, #0]
   26e28:	4633      	mov	r3, r6
   26e2a:	4622      	mov	r2, r4
   26e2c:	2106      	movs	r1, #6
   26e2e:	f7fe facc 	bl	253ca <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   26e32:	b118      	cbz	r0, 26e3c <smp_error+0x4c>
		net_buf_unref(buf);
   26e34:	4620      	mov	r0, r4
   26e36:	f7f6 f897 	bl	1cf68 <net_buf_unref>
	return 0;
   26e3a:	4630      	mov	r0, r6
}
   26e3c:	b002      	add	sp, #8
   26e3e:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26e40:	2101      	movs	r1, #1
   26e42:	4618      	mov	r0, r3
   26e44:	f7ff fd76 	bl	26934 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26e48:	2800      	cmp	r0, #0
   26e4a:	d1da      	bne.n	26e02 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26e4c:	210f      	movs	r1, #15
   26e4e:	4618      	mov	r0, r3
   26e50:	f7ff fd70 	bl	26934 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26e54:	2800      	cmp	r0, #0
   26e56:	d1d4      	bne.n	26e02 <smp_error+0x12>
   26e58:	e7d7      	b.n	26e0a <smp_error+0x1a>
		return -ENOBUFS;
   26e5a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e5e:	e7ed      	b.n	26e3c <smp_error+0x4c>

00026e60 <bt_smp_dhkey_ready>:
{
   26e60:	b570      	push	{r4, r5, r6, lr}
   26e62:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26e64:	2008      	movs	r0, #8
   26e66:	f7e8 fae1 	bl	f42c <smp_find>
	if (smp) {
   26e6a:	4604      	mov	r4, r0
   26e6c:	b1b8      	cbz	r0, 26e9e <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26e6e:	1d05      	adds	r5, r0, #4
   26e70:	2108      	movs	r1, #8
   26e72:	4628      	mov	r0, r5
   26e74:	f7ff fd20 	bl	268b8 <atomic_clear_bit>
	if (!dhkey) {
   26e78:	b3b6      	cbz	r6, 26ee8 <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   26e7a:	2107      	movs	r1, #7
   26e7c:	f7ff fd1c 	bl	268b8 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   26e80:	4631      	mov	r1, r6
   26e82:	2220      	movs	r2, #32
   26e84:	f104 0097 	add.w	r0, r4, #151	; 0x97
   26e88:	f7fd fd89 	bl	2499e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26e8c:	210a      	movs	r1, #10
   26e8e:	4628      	mov	r0, r5
   26e90:	f7ff fd50 	bl	26934 <atomic_test_bit>
   26e94:	b168      	cbz	r0, 26eb2 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26e96:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26e98:	4628      	mov	r0, r5
   26e9a:	f7ff fd8d 	bl	269b8 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26e9e:	2007      	movs	r0, #7
   26ea0:	f7e8 fac4 	bl	f42c <smp_find>
		if (smp) {
   26ea4:	4604      	mov	r4, r0
   26ea6:	b118      	cbz	r0, 26eb0 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   26ea8:	f7e8 fb52 	bl	f550 <smp_dhkey_generate>
			if (err) {
   26eac:	4601      	mov	r1, r0
   26eae:	b9b8      	cbnz	r0, 26ee0 <bt_smp_dhkey_ready+0x80>
}
   26eb0:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26eb2:	2110      	movs	r1, #16
   26eb4:	4628      	mov	r0, r5
   26eb6:	f7ff fd3d 	bl	26934 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26eba:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26ebc:	2800      	cmp	r0, #0
   26ebe:	d1eb      	bne.n	26e98 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26ec0:	4628      	mov	r0, r5
   26ec2:	f7ff fd37 	bl	26934 <atomic_test_bit>
   26ec6:	2800      	cmp	r0, #0
   26ec8:	d0e9      	beq.n	26e9e <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   26eca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   26ece:	78db      	ldrb	r3, [r3, #3]
   26ed0:	2b00      	cmp	r3, #0
   26ed2:	d1e4      	bne.n	26e9e <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   26ed4:	4620      	mov	r0, r4
   26ed6:	f7e8 fe35 	bl	fb44 <compute_and_send_central_dhcheck>
		if (err) {
   26eda:	4601      	mov	r1, r0
   26edc:	2800      	cmp	r0, #0
   26ede:	d0de      	beq.n	26e9e <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   26ee0:	4620      	mov	r0, r4
   26ee2:	f7ff ff85 	bl	26df0 <smp_error>
   26ee6:	e7da      	b.n	26e9e <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26ee8:	210b      	movs	r1, #11
   26eea:	e7f9      	b.n	26ee0 <bt_smp_dhkey_ready+0x80>

00026eec <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   26eec:	b510      	push	{r4, lr}
   26eee:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   26ef0:	2106      	movs	r1, #6
   26ef2:	f7fe faa1 	bl	25438 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   26ef6:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   26efa:	ea23 0104 	bic.w	r1, r3, r4
   26efe:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   26f02:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   26f06:	b921      	cbnz	r1, 26f12 <smp_check_complete.part.0+0x26>
}
   26f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   26f0c:	38f0      	subs	r0, #240	; 0xf0
   26f0e:	f7e9 bbe9 	b.w	106e4 <smp_pairing_complete>
}
   26f12:	bd10      	pop	{r4, pc}

00026f14 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   26f14:	7881      	ldrb	r1, [r0, #2]
   26f16:	2901      	cmp	r1, #1
   26f18:	d101      	bne.n	26f1e <smp_ident_sent+0xa>
   26f1a:	f7ff bfe7 	b.w	26eec <smp_check_complete.part.0>
}
   26f1e:	4770      	bx	lr

00026f20 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   26f20:	7883      	ldrb	r3, [r0, #2]
   26f22:	2b01      	cmp	r3, #1
   26f24:	d102      	bne.n	26f2c <smp_sign_info_sent+0xc>
   26f26:	2104      	movs	r1, #4
   26f28:	f7ff bfe0 	b.w	26eec <smp_check_complete.part.0>
}
   26f2c:	4770      	bx	lr

00026f2e <bt_smp_disconnected>:
{
   26f2e:	b570      	push	{r4, r5, r6, lr}
   26f30:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   26f32:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   26f36:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26f3a:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   26f3c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   26f40:	f000 ffcd 	bl	27ede <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26f44:	2103      	movs	r1, #3
   26f46:	4620      	mov	r0, r4
   26f48:	f7ff fcf4 	bl	26934 <atomic_test_bit>
   26f4c:	b1a0      	cbz	r0, 26f78 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26f4e:	2108      	movs	r1, #8
   26f50:	4630      	mov	r0, r6
   26f52:	f7e9 fbc7 	bl	106e4 <smp_pairing_complete>
	if (keys) {
   26f56:	b13d      	cbz	r5, 26f68 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26f58:	89eb      	ldrh	r3, [r5, #14]
   26f5a:	b113      	cbz	r3, 26f62 <bt_smp_disconnected+0x34>
   26f5c:	7b6b      	ldrb	r3, [r5, #13]
   26f5e:	079b      	lsls	r3, r3, #30
   26f60:	d502      	bpl.n	26f68 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26f62:	4628      	mov	r0, r5
   26f64:	f000 f829 	bl	26fba <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   26f68:	4630      	mov	r0, r6
   26f6a:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   26f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26f72:	2100      	movs	r1, #0
   26f74:	f7fd bd1e 	b.w	249b4 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26f78:	2101      	movs	r1, #1
   26f7a:	4620      	mov	r0, r4
   26f7c:	f7ff fcda 	bl	26934 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26f80:	2800      	cmp	r0, #0
   26f82:	d1e4      	bne.n	26f4e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26f84:	210f      	movs	r1, #15
   26f86:	4620      	mov	r0, r4
   26f88:	f7ff fcd4 	bl	26934 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26f8c:	2800      	cmp	r0, #0
   26f8e:	d1de      	bne.n	26f4e <bt_smp_disconnected+0x20>
   26f90:	e7e1      	b.n	26f56 <bt_smp_disconnected+0x28>

00026f92 <bt_keys_get_type>:
{
   26f92:	b570      	push	{r4, r5, r6, lr}
   26f94:	4604      	mov	r4, r0
   26f96:	460d      	mov	r5, r1
   26f98:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   26f9a:	f7e9 ffe3 	bl	10f64 <bt_keys_find>
	if (keys) {
   26f9e:	b938      	cbnz	r0, 26fb0 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26fa0:	4631      	mov	r1, r6
   26fa2:	4628      	mov	r0, r5
   26fa4:	f7e9 ffa8 	bl	10ef8 <bt_keys_get_addr>
	if (!keys) {
   26fa8:	b110      	cbz	r0, 26fb0 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   26faa:	89c3      	ldrh	r3, [r0, #14]
   26fac:	431c      	orrs	r4, r3
   26fae:	81c4      	strh	r4, [r0, #14]
}
   26fb0:	bd70      	pop	{r4, r5, r6, pc}

00026fb2 <bt_keys_add_type>:
	keys->keys |= type;
   26fb2:	89c3      	ldrh	r3, [r0, #14]
   26fb4:	4319      	orrs	r1, r3
   26fb6:	81c1      	strh	r1, [r0, #14]
}
   26fb8:	4770      	bx	lr

00026fba <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   26fba:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   26fbc:	7a03      	ldrb	r3, [r0, #8]
   26fbe:	075b      	lsls	r3, r3, #29
{
   26fc0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   26fc2:	d501      	bpl.n	26fc8 <bt_keys_clear+0xe>
		bt_id_del(keys);
   26fc4:	f7e3 fe06 	bl	abd4 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   26fc8:	4620      	mov	r0, r4
   26fca:	2284      	movs	r2, #132	; 0x84
}
   26fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   26fd0:	2100      	movs	r1, #0
   26fd2:	f7fd bcef 	b.w	249b4 <memset>

00026fd6 <fixed_data_unref>:
}
   26fd6:	4770      	bx	lr

00026fd8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26fd8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26fda:	6849      	ldr	r1, [r1, #4]
   26fdc:	6809      	ldr	r1, [r1, #0]
   26fde:	f7f5 bf2f 	b.w	1ce40 <net_buf_alloc_len>

00026fe2 <net_buf_get>:
{
   26fe2:	b570      	push	{r4, r5, r6, lr}
   26fe4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   26fe6:	f7fa fad3 	bl	21590 <z_impl_k_queue_get>
	if (!buf) {
   26fea:	4605      	mov	r5, r0
   26fec:	b128      	cbz	r0, 26ffa <net_buf_get+0x18>
   26fee:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26ff0:	7963      	ldrb	r3, [r4, #5]
   26ff2:	f013 0301 	ands.w	r3, r3, #1
   26ff6:	d102      	bne.n	26ffe <net_buf_get+0x1c>
	frag->frags = NULL;
   26ff8:	6023      	str	r3, [r4, #0]
}
   26ffa:	4628      	mov	r0, r5
   26ffc:	bd70      	pop	{r4, r5, r6, pc}
   26ffe:	2300      	movs	r3, #0
   27000:	2200      	movs	r2, #0
   27002:	4630      	mov	r0, r6
   27004:	f7fa fac4 	bl	21590 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   27008:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2700a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2700c:	f023 0301 	bic.w	r3, r3, #1
   27010:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   27012:	4604      	mov	r4, r0
   27014:	e7ec      	b.n	26ff0 <net_buf_get+0xe>

00027016 <net_buf_simple_init_with_data>:
	buf->size  = size;
   27016:	b292      	uxth	r2, r2
	buf->__buf = data;
   27018:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2701a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2701c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2701e:	8082      	strh	r2, [r0, #4]
}
   27020:	4770      	bx	lr

00027022 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   27022:	6883      	ldr	r3, [r0, #8]
   27024:	440b      	add	r3, r1
   27026:	6003      	str	r3, [r0, #0]
}
   27028:	4770      	bx	lr

0002702a <net_buf_put>:
{
   2702a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2702c:	460a      	mov	r2, r1
   2702e:	6814      	ldr	r4, [r2, #0]
   27030:	b914      	cbnz	r4, 27038 <net_buf_put+0xe>
}
   27032:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   27034:	f000 be65 	b.w	27d02 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   27038:	7953      	ldrb	r3, [r2, #5]
   2703a:	f043 0301 	orr.w	r3, r3, #1
   2703e:	7153      	strb	r3, [r2, #5]
   27040:	4622      	mov	r2, r4
   27042:	e7f4      	b.n	2702e <net_buf_put+0x4>

00027044 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   27044:	7902      	ldrb	r2, [r0, #4]
   27046:	3201      	adds	r2, #1
   27048:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2704a:	4770      	bx	lr

0002704c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2704c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2704e:	4618      	mov	r0, r3
   27050:	681b      	ldr	r3, [r3, #0]
   27052:	2b00      	cmp	r3, #0
   27054:	d1fb      	bne.n	2704e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   27056:	4770      	bx	lr

00027058 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   27058:	6802      	ldr	r2, [r0, #0]
{
   2705a:	b510      	push	{r4, lr}
	if (parent->frags) {
   2705c:	b12a      	cbz	r2, 2706a <net_buf_frag_insert+0x12>
   2705e:	460b      	mov	r3, r1
	while (buf->frags) {
   27060:	461c      	mov	r4, r3
   27062:	681b      	ldr	r3, [r3, #0]
   27064:	2b00      	cmp	r3, #0
   27066:	d1fb      	bne.n	27060 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   27068:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2706a:	6001      	str	r1, [r0, #0]
}
   2706c:	bd10      	pop	{r4, pc}

0002706e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2706e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   27070:	4604      	mov	r4, r0
   27072:	b920      	cbnz	r0, 2707e <net_buf_frag_add+0x10>
	buf->ref++;
   27074:	790b      	ldrb	r3, [r1, #4]
   27076:	3301      	adds	r3, #1
   27078:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2707a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2707c:	bd10      	pop	{r4, pc}
   2707e:	4603      	mov	r3, r0
	while (buf->frags) {
   27080:	4618      	mov	r0, r3
   27082:	681b      	ldr	r3, [r3, #0]
   27084:	2b00      	cmp	r3, #0
   27086:	d1fb      	bne.n	27080 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   27088:	f7ff ffe6 	bl	27058 <net_buf_frag_insert>
   2708c:	4620      	mov	r0, r4
   2708e:	e7f5      	b.n	2707c <net_buf_frag_add+0xe>

00027090 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   27090:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   27092:	b108      	cbz	r0, 27098 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   27094:	680b      	ldr	r3, [r1, #0]
   27096:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   27098:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2709a:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2709c:	4608      	mov	r0, r1
	frag->frags = NULL;
   2709e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   270a0:	f7f5 ff62 	bl	1cf68 <net_buf_unref>
#endif

	return next_frag;
}
   270a4:	4620      	mov	r0, r4
   270a6:	bd10      	pop	{r4, pc}

000270a8 <net_buf_simple_add>:
	return buf->data + buf->len;
   270a8:	8883      	ldrh	r3, [r0, #4]
   270aa:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   270ac:	4419      	add	r1, r3
   270ae:	8081      	strh	r1, [r0, #4]
	return tail;
}
   270b0:	18d0      	adds	r0, r2, r3
   270b2:	4770      	bx	lr

000270b4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   270b4:	b430      	push	{r4, r5}
   270b6:	8884      	ldrh	r4, [r0, #4]
   270b8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   270ba:	18a3      	adds	r3, r4, r2
   270bc:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   270be:	1928      	adds	r0, r5, r4
}
   270c0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   270c2:	f7fd bc6c 	b.w	2499e <memcpy>

000270c6 <net_buf_simple_add_u8>:
   270c6:	8883      	ldrh	r3, [r0, #4]
   270c8:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   270ca:	b510      	push	{r4, lr}
	buf->len += len;
   270cc:	1c5c      	adds	r4, r3, #1
   270ce:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   270d0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   270d2:	18d0      	adds	r0, r2, r3
   270d4:	bd10      	pop	{r4, pc}

000270d6 <net_buf_simple_add_le16>:
   270d6:	8883      	ldrh	r3, [r0, #4]
   270d8:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   270da:	b530      	push	{r4, r5, lr}
   270dc:	18d4      	adds	r4, r2, r3
	buf->len += len;
   270de:	1c9d      	adds	r5, r3, #2
   270e0:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   270e2:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   270e4:	0a09      	lsrs	r1, r1, #8
   270e6:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   270e8:	bd30      	pop	{r4, r5, pc}

000270ea <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   270ea:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   270ec:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   270ee:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   270f0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   270f2:	4411      	add	r1, r2
	buf->data -= len;
   270f4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   270f6:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   270f8:	4770      	bx	lr

000270fa <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   270fa:	8882      	ldrh	r2, [r0, #4]
   270fc:	1a52      	subs	r2, r2, r1
{
   270fe:	4603      	mov	r3, r0
	buf->len -= len;
   27100:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   27102:	6800      	ldr	r0, [r0, #0]
   27104:	4408      	add	r0, r1
   27106:	6018      	str	r0, [r3, #0]
}
   27108:	4770      	bx	lr

0002710a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2710a:	4603      	mov	r3, r0
	void *data = buf->data;
   2710c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2710e:	889a      	ldrh	r2, [r3, #4]
   27110:	1a52      	subs	r2, r2, r1
	buf->data += len;
   27112:	4401      	add	r1, r0
	buf->len -= len;
   27114:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   27116:	6019      	str	r1, [r3, #0]

	return data;
}
   27118:	4770      	bx	lr

0002711a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2711a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2711c:	6803      	ldr	r3, [r0, #0]
   2711e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   27120:	2101      	movs	r1, #1
   27122:	f7ff ffea 	bl	270fa <net_buf_simple_pull>

	return val;
}
   27126:	4620      	mov	r0, r4
   27128:	bd10      	pop	{r4, pc}

0002712a <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2712a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2712c:	6803      	ldr	r3, [r0, #0]
   2712e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27130:	2102      	movs	r1, #2
   27132:	f7ff ffe2 	bl	270fa <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   27136:	4620      	mov	r0, r4
   27138:	bd10      	pop	{r4, pc}

0002713a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2713a:	6802      	ldr	r2, [r0, #0]
   2713c:	6880      	ldr	r0, [r0, #8]
}
   2713e:	1a10      	subs	r0, r2, r0
   27140:	4770      	bx	lr

00027142 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27142:	8883      	ldrh	r3, [r0, #4]
   27144:	88c2      	ldrh	r2, [r0, #6]
   27146:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27148:	6803      	ldr	r3, [r0, #0]
   2714a:	6880      	ldr	r0, [r0, #8]
   2714c:	1a18      	subs	r0, r3, r0
}
   2714e:	1a10      	subs	r0, r2, r0
   27150:	4770      	bx	lr

00027152 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   27152:	6903      	ldr	r3, [r0, #16]
{
   27154:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   27156:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2715a:	2300      	movs	r3, #0
   2715c:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2715e:	7f83      	ldrb	r3, [r0, #30]
{
   27160:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   27162:	b113      	cbz	r3, 2716a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   27164:	7a40      	ldrb	r0, [r0, #9]
   27166:	f000 fc64 	bl	27a32 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2716a:	2301      	movs	r3, #1
   2716c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2716e:	2300      	movs	r3, #0
   27170:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   27172:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   27174:	77a3      	strb	r3, [r4, #30]
}
   27176:	bd10      	pop	{r4, pc}

00027178 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   27178:	2300      	movs	r3, #0
   2717a:	f7fc b97c 	b.w	23476 <z_impl_z_log_msg2_static_create>

0002717e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2717e:	f7fa b94d 	b.w	2141c <z_impl_k_mutex_lock>

00027182 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27182:	f7fa b9c3 	b.w	2150c <z_impl_k_mutex_unlock>

00027186 <usb_dc_ep_read>:
{
   27186:	b570      	push	{r4, r5, r6, lr}
   27188:	4604      	mov	r4, r0
   2718a:	460e      	mov	r6, r1
   2718c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2718e:	f7f6 fd4b 	bl	1dc28 <usb_dc_ep_read_wait>
	if (ret) {
   27192:	b930      	cbnz	r0, 271a2 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   27194:	b906      	cbnz	r6, 27198 <usb_dc_ep_read+0x12>
   27196:	b125      	cbz	r5, 271a2 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   27198:	4620      	mov	r0, r4
}
   2719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2719e:	f7f6 bda1 	b.w	1dce4 <usb_dc_ep_read_continue>
}
   271a2:	bd70      	pop	{r4, r5, r6, pc}

000271a4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   271a4:	6903      	ldr	r3, [r0, #16]
   271a6:	b2c9      	uxtb	r1, r1
   271a8:	220c      	movs	r2, #12
   271aa:	fb01 3302 	mla	r3, r1, r2, r3
   271ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   271b0:	f000 0007 	and.w	r0, r0, #7
   271b4:	4770      	bx	lr

000271b6 <set_on_state>:
	__asm__ volatile(
   271b6:	f04f 0320 	mov.w	r3, #32
   271ba:	f3ef 8211 	mrs	r2, BASEPRI
   271be:	f383 8812 	msr	BASEPRI_MAX, r3
   271c2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   271c6:	6803      	ldr	r3, [r0, #0]
   271c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   271cc:	f043 0302 	orr.w	r3, r3, #2
   271d0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   271d2:	f382 8811 	msr	BASEPRI, r2
   271d6:	f3bf 8f6f 	isb	sy
}
   271da:	4770      	bx	lr

000271dc <stop>:
{
   271dc:	4603      	mov	r3, r0
   271de:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   271e0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   271e2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   271e4:	f04f 0420 	mov.w	r4, #32
   271e8:	f3ef 8611 	mrs	r6, BASEPRI
   271ec:	f384 8812 	msr	BASEPRI_MAX, r4
   271f0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   271f4:	250c      	movs	r5, #12
   271f6:	fb05 0401 	mla	r4, r5, r1, r0
   271fa:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   271fc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   27200:	d001      	beq.n	27206 <stop+0x2a>
   27202:	42a2      	cmp	r2, r4
   27204:	d111      	bne.n	2722a <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   27206:	fb05 0001 	mla	r0, r5, r1, r0
   2720a:	2201      	movs	r2, #1
   2720c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2720e:	2000      	movs	r0, #0
	__asm__ volatile(
   27210:	f386 8811 	msr	BASEPRI, r6
   27214:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   27218:	b930      	cbnz	r0, 27228 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2721a:	685b      	ldr	r3, [r3, #4]
   2721c:	220c      	movs	r2, #12
   2721e:	fb02 3101 	mla	r1, r2, r1, r3
   27222:	684b      	ldr	r3, [r1, #4]
   27224:	4798      	blx	r3
	return 0;
   27226:	2000      	movs	r0, #0
}
   27228:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2722a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2722e:	e7ef      	b.n	27210 <stop+0x34>

00027230 <api_stop>:
	return stop(dev, subsys, CTX_API);
   27230:	2280      	movs	r2, #128	; 0x80
   27232:	f7ff bfd3 	b.w	271dc <stop>

00027236 <async_start>:
{
   27236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27238:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2723a:	6904      	ldr	r4, [r0, #16]
{
   2723c:	4605      	mov	r5, r0
   2723e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   27240:	f04f 0020 	mov.w	r0, #32
   27244:	f3ef 8c11 	mrs	ip, BASEPRI
   27248:	f380 8812 	msr	BASEPRI_MAX, r0
   2724c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   27250:	260c      	movs	r6, #12
   27252:	fb06 4601 	mla	r6, r6, r1, r4
   27256:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   27258:	f000 0e07 	and.w	lr, r0, #7
   2725c:	f1be 0f01 	cmp.w	lr, #1
   27260:	d110      	bne.n	27284 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   27262:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   27264:	2600      	movs	r6, #0
	__asm__ volatile(
   27266:	f38c 8811 	msr	BASEPRI, ip
   2726a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2726e:	b93e      	cbnz	r6, 27280 <async_start+0x4a>
	subdata->cb = cb;
   27270:	200c      	movs	r0, #12
   27272:	4341      	muls	r1, r0
   27274:	440c      	add	r4, r1
	subdata->user_data = user_data;
   27276:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2727a:	686b      	ldr	r3, [r5, #4]
   2727c:	585b      	ldr	r3, [r3, r1]
   2727e:	4798      	blx	r3
}
   27280:	4630      	mov	r0, r6
   27282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27284:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   27288:	4287      	cmp	r7, r0
   2728a:	bf14      	ite	ne
   2728c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   27290:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   27294:	e7e7      	b.n	27266 <async_start+0x30>

00027296 <api_start>:
{
   27296:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   27298:	2480      	movs	r4, #128	; 0x80
   2729a:	9400      	str	r4, [sp, #0]
   2729c:	f7ff ffcb 	bl	27236 <async_start>
}
   272a0:	b002      	add	sp, #8
   272a2:	bd10      	pop	{r4, pc}

000272a4 <onoff_started_callback>:
	return &data->mgr[type];
   272a4:	6900      	ldr	r0, [r0, #16]
{
   272a6:	b410      	push	{r4}
	return &data->mgr[type];
   272a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   272aa:	241c      	movs	r4, #28
   272ac:	fb03 0004 	mla	r0, r3, r4, r0
   272b0:	2100      	movs	r1, #0
}
   272b2:	bc10      	pop	{r4}
	notify(mgr, 0);
   272b4:	4710      	bx	r2

000272b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   272b6:	2000      	movs	r0, #0
   272b8:	f000 ba2e 	b.w	27718 <nrfx_clock_start>

000272bc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   272bc:	2000      	movs	r0, #0
   272be:	f7f8 b8f7 	b.w	1f4b0 <nrfx_clock_stop>

000272c2 <blocking_start_callback>:
{
   272c2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   272c4:	f7fa b998 	b.w	215f8 <z_impl_k_sem_give>

000272c8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   272c8:	6843      	ldr	r3, [r0, #4]
   272ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   272cc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   272d0:	600b      	str	r3, [r1, #0]
}
   272d2:	2000      	movs	r0, #0
   272d4:	4770      	bx	lr

000272d6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   272d6:	6843      	ldr	r3, [r0, #4]
   272d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   272da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   272de:	4042      	eors	r2, r0
   272e0:	400a      	ands	r2, r1
   272e2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   272e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   272e8:	2000      	movs	r0, #0
   272ea:	4770      	bx	lr

000272ec <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   272ec:	6843      	ldr	r3, [r0, #4]
   272ee:	685b      	ldr	r3, [r3, #4]
}
   272f0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   272f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   272f6:	4770      	bx	lr

000272f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   272f8:	6843      	ldr	r3, [r0, #4]
   272fa:	685b      	ldr	r3, [r3, #4]
}
   272fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   272fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   27302:	4770      	bx	lr

00027304 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27304:	6843      	ldr	r3, [r0, #4]
   27306:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27308:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2730c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2730e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   27312:	2000      	movs	r0, #0
   27314:	4770      	bx	lr

00027316 <gpio_nrfx_manage_callback>:
	return port->data;
   27316:	6903      	ldr	r3, [r0, #16]
	return list->head;
   27318:	6858      	ldr	r0, [r3, #4]
{
   2731a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2731c:	b158      	cbz	r0, 27336 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2731e:	2400      	movs	r4, #0
   27320:	4281      	cmp	r1, r0
   27322:	d112      	bne.n	2734a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   27324:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   27326:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   27328:	b954      	cbnz	r4, 27340 <gpio_nrfx_manage_callback+0x2a>
   2732a:	428d      	cmp	r5, r1
	list->head = node;
   2732c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2732e:	d100      	bne.n	27332 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   27330:	6098      	str	r0, [r3, #8]
	parent->next = child;
   27332:	2000      	movs	r0, #0
   27334:	6008      	str	r0, [r1, #0]
	if (set) {
   27336:	b96a      	cbnz	r2, 27354 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   27338:	2000      	movs	r0, #0
}
   2733a:	bd30      	pop	{r4, r5, pc}
   2733c:	4628      	mov	r0, r5
   2733e:	e7ef      	b.n	27320 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   27340:	428d      	cmp	r5, r1
	parent->next = child;
   27342:	6020      	str	r0, [r4, #0]
	list->tail = node;
   27344:	bf08      	it	eq
   27346:	609c      	streq	r4, [r3, #8]
}
   27348:	e7f3      	b.n	27332 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2734a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2734c:	4604      	mov	r4, r0
   2734e:	2d00      	cmp	r5, #0
   27350:	d1f4      	bne.n	2733c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   27352:	b13a      	cbz	r2, 27364 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   27354:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   27356:	685a      	ldr	r2, [r3, #4]
   27358:	600a      	str	r2, [r1, #0]
	list->head = node;
   2735a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2735c:	2800      	cmp	r0, #0
   2735e:	d1eb      	bne.n	27338 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   27360:	6099      	str	r1, [r3, #8]
}
   27362:	e7ea      	b.n	2733a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   27364:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27368:	e7e7      	b.n	2733a <gpio_nrfx_manage_callback+0x24>

0002736a <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   2736a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	uint16_t pulse_cycle =
   2736e:	8880      	ldrh	r0, [r0, #4]
   27370:	f3c0 000e 	ubfx	r0, r0, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   27374:	b120      	cbz	r0, 27380 <pwm_channel_is_active+0x16>
   27376:	898b      	ldrh	r3, [r1, #12]
   27378:	4283      	cmp	r3, r0
   2737a:	bf94      	ite	ls
   2737c:	2000      	movls	r0, #0
   2737e:	2001      	movhi	r0, #1
}
   27380:	4770      	bx	lr

00027382 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   27382:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   27384:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   27388:	2908      	cmp	r1, #8
   2738a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2738c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   2738e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   27390:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   27392:	ea4f 2515 	mov.w	r5, r5, lsr #8
   27396:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2739a:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2739e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   273a2:	ea4f 2202 	mov.w	r2, r2, lsl #8
   273a6:	ea43 0305 	orr.w	r3, r3, r5
   273aa:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   273ae:	ea43 0302 	orr.w	r3, r3, r2
   273b2:	9300      	str	r3, [sp, #0]
   273b4:	6e26      	ldr	r6, [r4, #96]	; 0x60
   273b6:	6e25      	ldr	r5, [r4, #96]	; 0x60
   273b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   273ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   273bc:	ea4f 2415 	mov.w	r4, r5, lsr #8
   273c0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   273c4:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   273c8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   273cc:	ea43 0304 	orr.w	r3, r3, r4
   273d0:	ea4f 2402 	mov.w	r4, r2, lsl #8
   273d4:	bf28      	it	cs
   273d6:	2108      	movcs	r1, #8
   273d8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   273dc:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   273de:	460a      	mov	r2, r1
   273e0:	460c      	mov	r4, r1
   273e2:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   273e4:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   273e6:	f7fd fada 	bl	2499e <memcpy>

	return length;
}
   273ea:	4620      	mov	r0, r4
   273ec:	b002      	add	sp, #8
   273ee:	bd70      	pop	{r4, r5, r6, pc}

000273f0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   273f0:	6902      	ldr	r2, [r0, #16]
{
   273f2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   273f4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   273f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   273fc:	2000      	movs	r0, #0
   273fe:	4770      	bx	lr

00027400 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   27400:	6843      	ldr	r3, [r0, #4]
   27402:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   27404:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27408:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2740c:	4770      	bx	lr

0002740e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2740e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   27410:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   27412:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27414:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27418:	b148      	cbz	r0, 2742e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2741a:	7d52      	ldrb	r2, [r2, #21]
   2741c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2741e:	2000      	movs	r0, #0
   27420:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   27424:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27428:	2201      	movs	r2, #1
   2742a:	601a      	str	r2, [r3, #0]
	return 0;
   2742c:	4770      	bx	lr
		return -1;
   2742e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27432:	4770      	bx	lr

00027434 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27434:	2a00      	cmp	r2, #0
{
   27436:	b510      	push	{r4, lr}
   27438:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2743a:	dd0f      	ble.n	2745c <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2743c:	6843      	ldr	r3, [r0, #4]
   2743e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27440:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27444:	b148      	cbz	r0, 2745a <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   27446:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27448:	2000      	movs	r0, #0
   2744a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2744e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   27452:	7d52      	ldrb	r2, [r2, #21]
   27454:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27456:	2001      	movs	r0, #1
   27458:	6018      	str	r0, [r3, #0]
}
   2745a:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2745c:	2000      	movs	r0, #0
   2745e:	e7fc      	b.n	2745a <uarte_nrfx_fifo_read+0x26>

00027460 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   27460:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   27462:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   27464:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   27466:	f04f 0020 	mov.w	r0, #32
   2746a:	f3ef 8311 	mrs	r3, BASEPRI
   2746e:	f380 8812 	msr	BASEPRI_MAX, r0
   27472:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   27476:	68c9      	ldr	r1, [r1, #12]
   27478:	2000      	movs	r0, #0
   2747a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2747c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   27480:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   27484:	f383 8811 	msr	BASEPRI, r3
   27488:	f3bf 8f6f 	isb	sy
}
   2748c:	4770      	bx	lr

0002748e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2748e:	6903      	ldr	r3, [r0, #16]
   27490:	68db      	ldr	r3, [r3, #12]
   27492:	2201      	movs	r2, #1
   27494:	739a      	strb	r2, [r3, #14]
}
   27496:	4770      	bx	lr

00027498 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   27498:	6903      	ldr	r3, [r0, #16]
   2749a:	68db      	ldr	r3, [r3, #12]
   2749c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2749e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   274a2:	b962      	cbnz	r2, 274be <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   274a4:	6842      	ldr	r2, [r0, #4]
   274a6:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   274a8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   274ac:	b140      	cbz	r0, 274c0 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   274ae:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   274b2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   274b6:	d003      	beq.n	274c0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   274b8:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   274ba:	2001      	movs	r0, #1
   274bc:	4770      	bx	lr
   274be:	2000      	movs	r0, #0
}
   274c0:	4770      	bx	lr

000274c2 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   274c2:	6843      	ldr	r3, [r0, #4]
   274c4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   274c6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   274ca:	3800      	subs	r0, #0
   274cc:	bf18      	it	ne
   274ce:	2001      	movne	r0, #1
   274d0:	4770      	bx	lr

000274d2 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   274d2:	6843      	ldr	r3, [r0, #4]
   274d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   274d6:	2210      	movs	r2, #16
   274d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   274dc:	4770      	bx	lr

000274de <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   274de:	6843      	ldr	r3, [r0, #4]
   274e0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   274e2:	2210      	movs	r2, #16
   274e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   274e8:	4770      	bx	lr

000274ea <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   274ea:	6843      	ldr	r3, [r0, #4]
   274ec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   274ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   274f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   274f6:	4770      	bx	lr

000274f8 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   274f8:	6843      	ldr	r3, [r0, #4]
   274fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   274fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   27500:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27504:	4770      	bx	lr

00027506 <uarte_nrfx_irq_update>:
}
   27506:	2001      	movs	r0, #1
   27508:	4770      	bx	lr

0002750a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2750a:	6903      	ldr	r3, [r0, #16]
   2750c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2750e:	e9c3 1200 	strd	r1, r2, [r3]
}
   27512:	4770      	bx	lr

00027514 <uarte_nrfx_irq_is_pending>:
{
   27514:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   27516:	6843      	ldr	r3, [r0, #4]
   27518:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2751a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2751e:	025b      	lsls	r3, r3, #9
{
   27520:	4604      	mov	r4, r0
		||
   27522:	d405      	bmi.n	27530 <uarte_nrfx_irq_is_pending+0x1c>
   27524:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   27528:	f010 0010 	ands.w	r0, r0, #16
   2752c:	d106      	bne.n	2753c <uarte_nrfx_irq_is_pending+0x28>
}
   2752e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   27530:	f7ff ffb2 	bl	27498 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   27534:	2800      	cmp	r0, #0
   27536:	d0f5      	beq.n	27524 <uarte_nrfx_irq_is_pending+0x10>
		||
   27538:	2001      	movs	r0, #1
   2753a:	e7f8      	b.n	2752e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2753c:	4620      	mov	r0, r4
   2753e:	f7ff ffc0 	bl	274c2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   27542:	3800      	subs	r0, #0
   27544:	bf18      	it	ne
   27546:	2001      	movne	r0, #1
   27548:	e7f1      	b.n	2752e <uarte_nrfx_irq_is_pending+0x1a>

0002754a <nrf_gpio_cfg_input>:
{
   2754a:	b507      	push	{r0, r1, r2, lr}
   2754c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2754e:	a801      	add	r0, sp, #4
   27550:	f7f7 f8b6 	bl	1e6c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   27554:	9b01      	ldr	r3, [sp, #4]
   27556:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2755a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2755c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   27560:	b003      	add	sp, #12
   27562:	f85d fb04 	ldr.w	pc, [sp], #4

00027566 <tx_start.isra.0>:
	return config->uarte_regs;
   27566:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27568:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2756c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27570:	2200      	movs	r2, #0
   27572:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   27576:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2757a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2757e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   27582:	6842      	ldr	r2, [r0, #4]
   27584:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   27586:	bf41      	itttt	mi
   27588:	2208      	movmi	r2, #8
   2758a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2758e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   27592:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27596:	2201      	movs	r2, #1
   27598:	609a      	str	r2, [r3, #8]
}
   2759a:	4770      	bx	lr

0002759c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2759c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2759e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   275a0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   275a4:	b940      	cbnz	r0, 275b8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   275a6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   275a8:	079b      	lsls	r3, r3, #30
   275aa:	d406      	bmi.n	275ba <is_tx_ready.isra.0+0x1e>
   275ac:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   275b0:	3800      	subs	r0, #0
   275b2:	bf18      	it	ne
   275b4:	2001      	movne	r0, #1
   275b6:	4770      	bx	lr
   275b8:	2001      	movs	r0, #1
}
   275ba:	4770      	bx	lr

000275bc <uarte_nrfx_fifo_fill>:
{
   275bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   275be:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   275c0:	68f3      	ldr	r3, [r6, #12]
   275c2:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   275c4:	f3bf 8f5b 	dmb	ish
   275c8:	4294      	cmp	r4, r2
   275ca:	bfa8      	it	ge
   275cc:	4614      	movge	r4, r2
{
   275ce:	4605      	mov	r5, r0
   275d0:	3310      	adds	r3, #16
   275d2:	2201      	movs	r2, #1
   275d4:	e853 0f00 	ldrex	r0, [r3]
   275d8:	2800      	cmp	r0, #0
   275da:	d103      	bne.n	275e4 <uarte_nrfx_fifo_fill+0x28>
   275dc:	e843 2700 	strex	r7, r2, [r3]
   275e0:	2f00      	cmp	r7, #0
   275e2:	d1f7      	bne.n	275d4 <uarte_nrfx_fifo_fill+0x18>
   275e4:	f3bf 8f5b 	dmb	ish
   275e8:	bf0c      	ite	eq
   275ea:	4613      	moveq	r3, r2
   275ec:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   275ee:	d01d      	beq.n	2762c <uarte_nrfx_fifo_fill+0x70>
		return 0;
   275f0:	461c      	mov	r4, r3
}
   275f2:	4620      	mov	r0, r4
   275f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   275f6:	68f2      	ldr	r2, [r6, #12]
   275f8:	5cc8      	ldrb	r0, [r1, r3]
   275fa:	6892      	ldr	r2, [r2, #8]
   275fc:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   275fe:	3301      	adds	r3, #1
   27600:	42a3      	cmp	r3, r4
   27602:	dbf8      	blt.n	275f6 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   27604:	f04f 0320 	mov.w	r3, #32
   27608:	f3ef 8711 	mrs	r7, BASEPRI
   2760c:	f383 8812 	msr	BASEPRI_MAX, r3
   27610:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   27614:	6868      	ldr	r0, [r5, #4]
   27616:	f7ff ffc1 	bl	2759c <is_tx_ready.isra.0>
   2761a:	68f3      	ldr	r3, [r6, #12]
   2761c:	b940      	cbnz	r0, 27630 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2761e:	6118      	str	r0, [r3, #16]
		len = 0;
   27620:	4604      	mov	r4, r0
	__asm__ volatile(
   27622:	f387 8811 	msr	BASEPRI, r7
   27626:	f3bf 8f6f 	isb	sy
	return len;
   2762a:	e7e2      	b.n	275f2 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2762c:	2300      	movs	r3, #0
   2762e:	e7e7      	b.n	27600 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   27630:	6899      	ldr	r1, [r3, #8]
   27632:	6868      	ldr	r0, [r5, #4]
   27634:	4622      	mov	r2, r4
   27636:	f7ff ff96 	bl	27566 <tx_start.isra.0>
   2763a:	e7f2      	b.n	27622 <uarte_nrfx_fifo_fill+0x66>

0002763c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2763c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2763e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   27640:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   27644:	05c9      	lsls	r1, r1, #23
{
   27646:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   27648:	d518      	bpl.n	2767c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2764a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2764e:	b1a9      	cbz	r1, 2767c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   27650:	f04f 0420 	mov.w	r4, #32
   27654:	f3ef 8111 	mrs	r1, BASEPRI
   27658:	f384 8812 	msr	BASEPRI_MAX, r4
   2765c:	f3bf 8f6f 	isb	sy
   27660:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   27664:	b134      	cbz	r4, 27674 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27666:	2400      	movs	r4, #0
   27668:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2766c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27670:	2401      	movs	r4, #1
   27672:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   27674:	f381 8811 	msr	BASEPRI, r1
   27678:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2767c:	6852      	ldr	r2, [r2, #4]
   2767e:	06d2      	lsls	r2, r2, #27
   27680:	d51a      	bpl.n	276b8 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   27682:	f04f 0220 	mov.w	r2, #32
   27686:	f3ef 8111 	mrs	r1, BASEPRI
   2768a:	f382 8812 	msr	BASEPRI_MAX, r2
   2768e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27692:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   27696:	b112      	cbz	r2, 2769e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   27698:	2200      	movs	r2, #0
   2769a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2769e:	6902      	ldr	r2, [r0, #16]
   276a0:	68d2      	ldr	r2, [r2, #12]
   276a2:	b10a      	cbz	r2, 276a8 <uarte_nrfx_isr_int+0x6c>
   276a4:	6912      	ldr	r2, [r2, #16]
   276a6:	b91a      	cbnz	r2, 276b0 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   276a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   276ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   276b0:	f381 8811 	msr	BASEPRI, r1
   276b4:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   276b8:	6902      	ldr	r2, [r0, #16]
   276ba:	68d2      	ldr	r2, [r2, #12]
   276bc:	b15a      	cbz	r2, 276d6 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276be:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   276c2:	b151      	cbz	r1, 276da <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   276c4:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   276c6:	2100      	movs	r1, #0
   276c8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   276ca:	b134      	cbz	r4, 276da <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   276cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   276d0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   276d4:	7391      	strb	r1, [r2, #14]
}
   276d6:	bc10      	pop	{r4}
   276d8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276da:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   276de:	b121      	cbz	r1, 276ea <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276e0:	2100      	movs	r1, #0
   276e2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   276e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   276ea:	6813      	ldr	r3, [r2, #0]
   276ec:	2b00      	cmp	r3, #0
   276ee:	d0f2      	beq.n	276d6 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   276f0:	6851      	ldr	r1, [r2, #4]
}
   276f2:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   276f4:	4718      	bx	r3

000276f6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   276f6:	4770      	bx	lr

000276f8 <sys_clock_cycle_get_32>:
{
   276f8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   276fa:	f7f7 fb9f 	bl	1ee3c <z_nrf_rtc_timer_read>
}
   276fe:	bd08      	pop	{r3, pc}

00027700 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   27700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   27704:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   27708:	f1a0 0308 	sub.w	r3, r0, #8
   2770c:	4258      	negs	r0, r3
   2770e:	4158      	adcs	r0, r3
   27710:	4770      	bx	lr

00027712 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27712:	4700      	bx	r0

00027714 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27714:	f000 bd7a 	b.w	2820c <z_impl_k_busy_wait>

00027718 <nrfx_clock_start>:
    switch (domain)
   27718:	b110      	cbz	r0, 27720 <nrfx_clock_start+0x8>
   2771a:	2801      	cmp	r0, #1
   2771c:	d01d      	beq.n	2775a <nrfx_clock_start+0x42>
   2771e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   27720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27724:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   27728:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2772c:	03c9      	lsls	r1, r1, #15
   2772e:	d512      	bpl.n	27756 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   27730:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   27734:	2a01      	cmp	r2, #1
   27736:	d10e      	bne.n	27756 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   27738:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2773c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27740:	2200      	movs	r2, #0
   27742:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   27746:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2774a:	2202      	movs	r2, #2
   2774c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27750:	2201      	movs	r2, #1
   27752:	609a      	str	r2, [r3, #8]
}
   27754:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   27756:	2200      	movs	r2, #0
   27758:	e7ee      	b.n	27738 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2775a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2775e:	2200      	movs	r2, #0
   27760:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   27764:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   27768:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2776c:	6018      	str	r0, [r3, #0]
}
   2776e:	4770      	bx	lr

00027770 <nrf_gpio_reconfigure>:
{
   27770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27772:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27774:	a801      	add	r0, sp, #4
{
   27776:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2777a:	4617      	mov	r7, r2
   2777c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2777e:	f7f7 ff07 	bl	1f590 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   27782:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   27784:	2f00      	cmp	r7, #0
   27786:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2778a:	bf14      	ite	ne
   2778c:	2302      	movne	r3, #2
   2778e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27790:	2900      	cmp	r1, #0
   27792:	bf18      	it	ne
   27794:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27798:	2d00      	cmp	r5, #0
   2779a:	bf14      	ite	ne
   2779c:	f04f 0c0c 	movne.w	ip, #12
   277a0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   277a4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   277a6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   277aa:	bf14      	ite	ne
   277ac:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   277b0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   277b4:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   277b6:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   277ba:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   277be:	bf14      	ite	ne
   277c0:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   277c4:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   277c8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   277cc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   277d0:	b101      	cbz	r1, 277d4 <nrf_gpio_reconfigure+0x64>
   277d2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   277d4:	b10f      	cbz	r7, 277da <nrf_gpio_reconfigure+0x6a>
   277d6:	783f      	ldrb	r7, [r7, #0]
   277d8:	007f      	lsls	r7, r7, #1
   277da:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   277dc:	b10d      	cbz	r5, 277e2 <nrf_gpio_reconfigure+0x72>
   277de:	782d      	ldrb	r5, [r5, #0]
   277e0:	00ad      	lsls	r5, r5, #2
   277e2:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   277e4:	b10c      	cbz	r4, 277ea <nrf_gpio_reconfigure+0x7a>
   277e6:	7822      	ldrb	r2, [r4, #0]
   277e8:	0214      	lsls	r4, r2, #8
   277ea:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   277ec:	b10e      	cbz	r6, 277f2 <nrf_gpio_reconfigure+0x82>
   277ee:	7836      	ldrb	r6, [r6, #0]
   277f0:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   277f2:	432c      	orrs	r4, r5
   277f4:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   277f6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   277fa:	b003      	add	sp, #12
   277fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000277fe <nrf_gpio_cfg_sense_set>:
{
   277fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27800:	f10d 030f 	add.w	r3, sp, #15
   27804:	9301      	str	r3, [sp, #4]
   27806:	2300      	movs	r3, #0
{
   27808:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2780c:	9300      	str	r3, [sp, #0]
   2780e:	461a      	mov	r2, r3
   27810:	4619      	mov	r1, r3
   27812:	f7ff ffad 	bl	27770 <nrf_gpio_reconfigure>
}
   27816:	b005      	add	sp, #20
   27818:	f85d fb04 	ldr.w	pc, [sp], #4

0002781c <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2781c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   27820:	681a      	ldr	r2, [r3, #0]
   27822:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27824:	bf1f      	itttt	ne
   27826:	2200      	movne	r2, #0
   27828:	601a      	strne	r2, [r3, #0]
   2782a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2782c:	2001      	movne	r0, #1
   2782e:	bf08      	it	eq
   27830:	2000      	moveq	r0, #0
}
   27832:	4770      	bx	lr

00027834 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   27834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27838:	f44f 7260 	mov.w	r2, #896	; 0x380
   2783c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27840:	4770      	bx	lr

00027842 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   27842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27846:	f44f 7260 	mov.w	r2, #896	; 0x380
   2784a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2784e:	4770      	bx	lr

00027850 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   27850:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   27852:	f7f8 fa4d 	bl	1fcf0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   27856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2785a:	f7f7 be65 	b.w	1f528 <nrfx_clock_irq_handler>

0002785e <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   2785e:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   27860:	2402      	movs	r4, #2
   27862:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   27864:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   27866:	6809      	ldr	r1, [r1, #0]
   27868:	b171      	cbz	r1, 27888 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   2786a:	f012 0f04 	tst.w	r2, #4
   2786e:	bf0c      	ite	eq
   27870:	2182      	moveq	r1, #130	; 0x82
   27872:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   27874:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   27876:	bf48      	it	mi
   27878:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   2787c:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   2787e:	bf48      	it	mi
   27880:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   27884:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   27888:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2788a:	f04f 0100 	mov.w	r1, #0
   2788e:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27892:	bf58      	it	pl
   27894:	2201      	movpl	r2, #1
   27896:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
   2789a:	bf56      	itet	pl
   2789c:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   2789e:	18c0      	addmi	r0, r0, r3
    return 0;
   278a0:	4608      	movpl	r0, r1
}
   278a2:	bd10      	pop	{r4, pc}

000278a4 <nrfx_pwm_stop>:
{
   278a4:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   278a6:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   278a8:	2200      	movs	r2, #0
   278aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   278ae:	2201      	movs	r2, #1
   278b0:	605a      	str	r2, [r3, #4]
{
   278b2:	4605      	mov	r5, r0
   278b4:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   278b6:	f7f8 fb5b 	bl	1ff70 <nrfx_pwm_is_stopped>
   278ba:	b938      	cbnz	r0, 278cc <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   278bc:	4628      	mov	r0, r5
   278be:	f7f8 fb57 	bl	1ff70 <nrfx_pwm_is_stopped>
   278c2:	b918      	cbnz	r0, 278cc <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   278c4:	2c00      	cmp	r4, #0
   278c6:	d1f9      	bne.n	278bc <nrfx_pwm_stop+0x18>
}
   278c8:	4620      	mov	r0, r4
   278ca:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   278cc:	2401      	movs	r4, #1
   278ce:	e7fb      	b.n	278c8 <nrfx_pwm_stop+0x24>

000278d0 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   278d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   278d4:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   278d8:	f1a0 0308 	sub.w	r3, r0, #8
   278dc:	4258      	negs	r0, r3
   278de:	4158      	adcs	r0, r3
   278e0:	4770      	bx	lr

000278e2 <nrfx_usbd_consumer>:
{
   278e2:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   278e4:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   278e6:	680d      	ldr	r5, [r1, #0]
   278e8:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   278ea:	bf97      	itett	ls
   278ec:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   278f0:	2100      	movhi	r1, #0
        size -= data_size;
   278f2:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   278f4:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   278f6:	bf8e      	itee	hi
   278f8:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   278fc:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   278fe:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   27900:	429a      	cmp	r2, r3
   27902:	d103      	bne.n	2790c <nrfx_usbd_consumer+0x2a>
   27904:	1e20      	subs	r0, r4, #0
   27906:	bf18      	it	ne
   27908:	2001      	movne	r0, #1
}
   2790a:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   2790c:	2000      	movs	r0, #0
   2790e:	e7fc      	b.n	2790a <nrfx_usbd_consumer+0x28>

00027910 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   27910:	684b      	ldr	r3, [r1, #4]
{
   27912:	b510      	push	{r4, lr}
   27914:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   27916:	680c      	ldr	r4, [r1, #0]
   27918:	bf28      	it	cs
   2791a:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   2791c:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   27920:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   27922:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   27924:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   27926:	441a      	add	r2, r3
}
   27928:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2792a:	600a      	str	r2, [r1, #0]
}
   2792c:	bf18      	it	ne
   2792e:	2001      	movne	r0, #1
   27930:	bd10      	pop	{r4, pc}

00027932 <nrfx_usbd_feeder_ram_zlp>:
{
   27932:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   27934:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   27936:	680b      	ldr	r3, [r1, #0]
   27938:	42a2      	cmp	r2, r4
   2793a:	bf28      	it	cs
   2793c:	4622      	movcs	r2, r4
   2793e:	2a00      	cmp	r2, #0
   27940:	bf14      	ite	ne
   27942:	461d      	movne	r5, r3
   27944:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   27946:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   2794a:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   2794e:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   27950:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   27952:	600a      	str	r2, [r1, #0]
}
   27954:	bf14      	ite	ne
   27956:	2001      	movne	r0, #1
   27958:	2000      	moveq	r0, #0
   2795a:	bd30      	pop	{r4, r5, pc}

0002795c <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2795c:	f010 0f80 	tst.w	r0, #128	; 0x80
   27960:	bf14      	ite	ne
   27962:	2300      	movne	r3, #0
   27964:	2310      	moveq	r3, #16
   27966:	f000 000f 	and.w	r0, r0, #15
}
   2796a:	4418      	add	r0, r3
   2796c:	4770      	bx	lr

0002796e <ev_started_handler>:
}
   2796e:	4770      	bx	lr

00027970 <nrf_usbd_epin_dma_handler>:
{
   27970:	b508      	push	{r3, lr}
   27972:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   27974:	f7f8 fb32 	bl	1ffdc <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   27978:	4608      	mov	r0, r1
   2797a:	f7f8 fb21 	bl	1ffc0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2797e:	7b83      	ldrb	r3, [r0, #14]
   27980:	2b03      	cmp	r3, #3
   27982:	d10a      	bne.n	2799a <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   27984:	4608      	mov	r0, r1
   27986:	f7ff ffe9 	bl	2795c <ep2bit>
   2798a:	2301      	movs	r3, #1
   2798c:	fa03 f000 	lsl.w	r0, r3, r0
   27990:	43c0      	mvns	r0, r0
}
   27992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   27996:	f7f8 bc31 	b.w	201fc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2799a:	6803      	ldr	r3, [r0, #0]
   2799c:	2b00      	cmp	r3, #0
   2799e:	d0f1      	beq.n	27984 <nrf_usbd_epin_dma_handler+0x14>
}
   279a0:	bd08      	pop	{r3, pc}

000279a2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   279a2:	2087      	movs	r0, #135	; 0x87
   279a4:	f7ff bfe4 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279a8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   279a8:	2086      	movs	r0, #134	; 0x86
   279aa:	f7ff bfe1 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279ae <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   279ae:	2085      	movs	r0, #133	; 0x85
   279b0:	f7ff bfde 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279b4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   279b4:	2084      	movs	r0, #132	; 0x84
   279b6:	f7ff bfdb 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279ba <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   279ba:	2083      	movs	r0, #131	; 0x83
   279bc:	f7ff bfd8 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279c0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   279c0:	2082      	movs	r0, #130	; 0x82
   279c2:	f7ff bfd5 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279c6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   279c6:	2081      	movs	r0, #129	; 0x81
   279c8:	f7ff bfd2 	b.w	27970 <nrf_usbd_epin_dma_handler>

000279cc <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   279cc:	f7f8 bc26 	b.w	2021c <nrf_usbd_ep0in_dma_handler>

000279d0 <nrfx_usbd_ep_max_packet_size_set>:
{
   279d0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   279d2:	f7f8 faf5 	bl	1ffc0 <ep_state_access>
    p_state->max_packet_size = size;
   279d6:	8181      	strh	r1, [r0, #12]
}
   279d8:	bd08      	pop	{r3, pc}

000279da <nrfx_usbd_ep_status_get>:
{
   279da:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   279dc:	f7f8 faf0 	bl	1ffc0 <ep_state_access>
	__asm__ volatile(
   279e0:	f04f 0220 	mov.w	r2, #32
   279e4:	f3ef 8311 	mrs	r3, BASEPRI
   279e8:	f382 8812 	msr	BASEPRI_MAX, r2
   279ec:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   279f0:	6882      	ldr	r2, [r0, #8]
   279f2:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   279f4:	6802      	ldr	r2, [r0, #0]
   279f6:	b92a      	cbnz	r2, 27a04 <nrfx_usbd_ep_status_get+0x2a>
   279f8:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   279fa:	f383 8811 	msr	BASEPRI, r3
   279fe:	f3bf 8f6f 	isb	sy
}
   27a02:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   27a04:	2004      	movs	r0, #4
   27a06:	e7f8      	b.n	279fa <nrfx_usbd_ep_status_get+0x20>

00027a08 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   27a08:	2007      	movs	r0, #7
   27a0a:	f7f8 bf3f 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a0e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   27a0e:	2006      	movs	r0, #6
   27a10:	f7f8 bf3c 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a14 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   27a14:	2005      	movs	r0, #5
   27a16:	f7f8 bf39 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a1a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   27a1a:	2004      	movs	r0, #4
   27a1c:	f7f8 bf36 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a20 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   27a20:	2003      	movs	r0, #3
   27a22:	f7f8 bf33 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a26 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   27a26:	2002      	movs	r0, #2
   27a28:	f7f8 bf30 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a2c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   27a2c:	2001      	movs	r0, #1
   27a2e:	f7f8 bf2d 	b.w	2088c <nrf_usbd_epout_dma_handler>

00027a32 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   27a32:	f7f9 b821 	b.w	20a78 <usbd_ep_abort>

00027a36 <z_device_state_init>:
}
   27a36:	4770      	bx	lr

00027a38 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27a38:	b138      	cbz	r0, 27a4a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27a3a:	68c3      	ldr	r3, [r0, #12]
   27a3c:	8818      	ldrh	r0, [r3, #0]
   27a3e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   27a42:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   27a46:	4258      	negs	r0, r3
   27a48:	4158      	adcs	r0, r3
}
   27a4a:	4770      	bx	lr

00027a4c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   27a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27a4e:	ab0a      	add	r3, sp, #40	; 0x28
   27a50:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   27a52:	9302      	str	r3, [sp, #8]
   27a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27a56:	9301      	str	r3, [sp, #4]
   27a58:	2300      	movs	r3, #0
   27a5a:	9300      	str	r3, [sp, #0]
   27a5c:	2201      	movs	r2, #1
   27a5e:	4618      	mov	r0, r3
   27a60:	f7de fd34 	bl	64cc <z_impl_z_log_msg2_runtime_vcreate>
}
   27a64:	b007      	add	sp, #28
   27a66:	f85d fb04 	ldr.w	pc, [sp], #4

00027a6a <arch_system_halt>:
	__asm__ volatile(
   27a6a:	f04f 0220 	mov.w	r2, #32
   27a6e:	f3ef 8311 	mrs	r3, BASEPRI
   27a72:	f382 8812 	msr	BASEPRI_MAX, r2
   27a76:	f3bf 8f6f 	isb	sy
	for (;;) {
   27a7a:	e7fe      	b.n	27a7a <arch_system_halt+0x10>

00027a7c <k_heap_init>:
{
   27a7c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   27a7e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   27a82:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27a86:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27a88:	f7fb b8f3 	b.w	22c72 <sys_heap_init>

00027a8c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a90:	b085      	sub	sp, #20
   27a92:	4606      	mov	r6, r0
   27a94:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   27a9a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27a9c:	f000 fbba 	bl	28214 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27aa0:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27aa4:	4605      	mov	r5, r0
   27aa6:	460f      	mov	r7, r1
   27aa8:	f04f 0320 	mov.w	r3, #32
   27aac:	f3ef 8411 	mrs	r4, BASEPRI
   27ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   27ab4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27ab8:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27abc:	464a      	mov	r2, r9
   27abe:	4641      	mov	r1, r8
   27ac0:	4630      	mov	r0, r6
   27ac2:	f7fb f86e 	bl	22ba2 <sys_heap_aligned_alloc>
   27ac6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   27ac8:	f7fa fc48 	bl	2235c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   27acc:	9b03      	ldr	r3, [sp, #12]
   27ace:	b13b      	cbz	r3, 27ae0 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   27ad0:	f384 8811 	msr	BASEPRI, r4
   27ad4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27ad8:	4618      	mov	r0, r3
   27ada:	b005      	add	sp, #20
   27adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   27ae0:	1a28      	subs	r0, r5, r0
   27ae2:	eb67 0101 	sbc.w	r1, r7, r1
   27ae6:	2801      	cmp	r0, #1
   27ae8:	f171 0200 	sbcs.w	r2, r1, #0
   27aec:	dbf0      	blt.n	27ad0 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27aee:	e9cd 0100 	strd	r0, r1, [sp]
   27af2:	465a      	mov	r2, fp
   27af4:	4621      	mov	r1, r4
   27af6:	4650      	mov	r0, sl
   27af8:	f7fa f924 	bl	21d44 <z_pend_curr>
	__asm__ volatile(
   27afc:	f04f 0320 	mov.w	r3, #32
   27b00:	f3ef 8411 	mrs	r4, BASEPRI
   27b04:	f383 8812 	msr	BASEPRI_MAX, r3
   27b08:	f3bf 8f6f 	isb	sy
   27b0c:	e7d6      	b.n	27abc <k_heap_aligned_alloc+0x30>

00027b0e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   27b0e:	b538      	push	{r3, r4, r5, lr}
   27b10:	4604      	mov	r4, r0
   27b12:	f04f 0320 	mov.w	r3, #32
   27b16:	f3ef 8511 	mrs	r5, BASEPRI
   27b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   27b1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   27b22:	f7fb f806 	bl	22b32 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   27b26:	f104 000c 	add.w	r0, r4, #12
   27b2a:	f000 fafc 	bl	28126 <z_unpend_all>
   27b2e:	b130      	cbz	r0, 27b3e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   27b30:	4629      	mov	r1, r5
   27b32:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   27b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   27b3a:	f7f9 bfb1 	b.w	21aa0 <z_reschedule>
	__asm__ volatile(
   27b3e:	f385 8811 	msr	BASEPRI, r5
   27b42:	f3bf 8f6f 	isb	sy
}
   27b46:	bd38      	pop	{r3, r4, r5, pc}

00027b48 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b4a:	4604      	mov	r4, r0
   27b4c:	460d      	mov	r5, r1
	__asm__ volatile(
   27b4e:	f04f 0320 	mov.w	r3, #32
   27b52:	f3ef 8611 	mrs	r6, BASEPRI
   27b56:	f383 8812 	msr	BASEPRI_MAX, r3
   27b5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   27b5e:	6947      	ldr	r7, [r0, #20]
   27b60:	b977      	cbnz	r7, 27b80 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27b62:	f000 fac8 	bl	280f6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   27b66:	b158      	cbz	r0, 27b80 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   27b68:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27b6a:	6142      	str	r2, [r0, #20]
   27b6c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   27b6e:	f000 fa51 	bl	28014 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   27b72:	4631      	mov	r1, r6
   27b74:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   27b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   27b7c:	f7f9 bf90 	b.w	21aa0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   27b80:	682b      	ldr	r3, [r5, #0]
   27b82:	6962      	ldr	r2, [r4, #20]
   27b84:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   27b86:	682b      	ldr	r3, [r5, #0]
   27b88:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   27b8a:	69a3      	ldr	r3, [r4, #24]
   27b8c:	3b01      	subs	r3, #1
   27b8e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   27b90:	f386 8811 	msr	BASEPRI, r6
   27b94:	f3bf 8f6f 	isb	sy
}
   27b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027b9a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27b9a:	f3ef 8005 	mrs	r0, IPSR
}
   27b9e:	3800      	subs	r0, #0
   27ba0:	bf18      	it	ne
   27ba2:	2001      	movne	r0, #1
   27ba4:	4770      	bx	lr

00027ba6 <z_impl_k_thread_name_set>:
}
   27ba6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   27baa:	4770      	bx	lr

00027bac <k_thread_name_get>:
}
   27bac:	2000      	movs	r0, #0
   27bae:	4770      	bx	lr

00027bb0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   27bb0:	f7fa b86c 	b.w	21c8c <z_sched_start>

00027bb4 <z_pm_save_idle_exit>:
{
   27bb4:	b508      	push	{r3, lr}
	pm_system_resume();
   27bb6:	f7e0 f893 	bl	7ce0 <pm_system_resume>
}
   27bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   27bbe:	f7ff bd9a 	b.w	276f6 <sys_clock_idle_exit>

00027bc2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   27bc2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27bc6:	428b      	cmp	r3, r1
   27bc8:	d001      	beq.n	27bce <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   27bca:	f7fa b8cf 	b.w	21d6c <z_set_prio>
}
   27bce:	2000      	movs	r0, #0
   27bd0:	4770      	bx	lr

00027bd2 <z_impl_k_mutex_init>:
{
   27bd2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27bd4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   27bd6:	e9c3 0002 	strd	r0, r0, [r3, #8]
   27bda:	e9c3 3300 	strd	r3, r3, [r3]
}
   27bde:	4770      	bx	lr

00027be0 <queue_insert>:
{
   27be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27be4:	4699      	mov	r9, r3
   27be6:	4604      	mov	r4, r0
   27be8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   27bec:	460d      	mov	r5, r1
   27bee:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27bf0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   27bf4:	f04f 0220 	mov.w	r2, #32
   27bf8:	f3ef 8711 	mrs	r7, BASEPRI
   27bfc:	f382 8812 	msr	BASEPRI_MAX, r2
   27c00:	f3bf 8f6f 	isb	sy
	if (is_append) {
   27c04:	b103      	cbz	r3, 27c08 <queue_insert+0x28>
	return list->tail;
   27c06:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   27c08:	4630      	mov	r0, r6
   27c0a:	f000 fa74 	bl	280f6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   27c0e:	b158      	cbz	r0, 27c28 <queue_insert+0x48>
   27c10:	2400      	movs	r4, #0
   27c12:	67c4      	str	r4, [r0, #124]	; 0x7c
   27c14:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   27c18:	f000 f9fc 	bl	28014 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   27c1c:	4630      	mov	r0, r6
   27c1e:	4639      	mov	r1, r7
   27c20:	f7f9 ff3e 	bl	21aa0 <z_reschedule>
	return 0;
   27c24:	2000      	movs	r0, #0
   27c26:	e00c      	b.n	27c42 <queue_insert+0x62>
	if (alloc) {
   27c28:	f1b9 0f00 	cmp.w	r9, #0
   27c2c:	d01b      	beq.n	27c66 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   27c2e:	2108      	movs	r1, #8
   27c30:	f7fa fcc8 	bl	225c4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   27c34:	b938      	cbnz	r0, 27c46 <queue_insert+0x66>
	__asm__ volatile(
   27c36:	f387 8811 	msr	BASEPRI, r7
   27c3a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   27c3e:	f06f 000b 	mvn.w	r0, #11
}
   27c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   27c46:	2301      	movs	r3, #1
		anode->data = data;
   27c48:	f8c0 8004 	str.w	r8, [r0, #4]
   27c4c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27c4e:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c50:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   27c54:	b95d      	cbnz	r5, 27c6e <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c56:	6823      	ldr	r3, [r4, #0]
   27c58:	4313      	orrs	r3, r2
   27c5a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27c5c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   27c5e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27c60:	b973      	cbnz	r3, 27c80 <queue_insert+0xa0>
	list->tail = node;
   27c62:	6060      	str	r0, [r4, #4]
}
   27c64:	e00c      	b.n	27c80 <queue_insert+0xa0>
	node->next_and_flags = flags;
   27c66:	f8c8 9000 	str.w	r9, [r8]
}
   27c6a:	4640      	mov	r0, r8
   27c6c:	e7ef      	b.n	27c4e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27c6e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27c70:	f033 0303 	bics.w	r3, r3, #3
   27c74:	d110      	bne.n	27c98 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c76:	6002      	str	r2, [r0, #0]
	return list->tail;
   27c78:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   27c7a:	b93a      	cbnz	r2, 27c8c <queue_insert+0xac>
	list->head = node;
   27c7c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27c80:	2104      	movs	r1, #4
   27c82:	f104 0010 	add.w	r0, r4, #16
   27c86:	f000 fc57 	bl	28538 <z_handle_obj_poll_events>
   27c8a:	e7c7      	b.n	27c1c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27c8c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c8e:	f003 0303 	and.w	r3, r3, #3
   27c92:	4303      	orrs	r3, r0
   27c94:	6013      	str	r3, [r2, #0]
   27c96:	e7e4      	b.n	27c62 <queue_insert+0x82>
   27c98:	4313      	orrs	r3, r2
   27c9a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27c9c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c9e:	f003 0303 	and.w	r3, r3, #3
   27ca2:	4303      	orrs	r3, r0
   27ca4:	602b      	str	r3, [r5, #0]
}
   27ca6:	e7eb      	b.n	27c80 <queue_insert+0xa0>

00027ca8 <z_queue_node_peek>:
{
   27ca8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   27caa:	4604      	mov	r4, r0
   27cac:	b130      	cbz	r0, 27cbc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27cae:	6802      	ldr	r2, [r0, #0]
   27cb0:	0793      	lsls	r3, r2, #30
   27cb2:	d003      	beq.n	27cbc <z_queue_node_peek+0x14>
		ret = anode->data;
   27cb4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27cb6:	b109      	cbz	r1, 27cbc <z_queue_node_peek+0x14>
			k_free(anode);
   27cb8:	f000 fc4c 	bl	28554 <k_free>
}
   27cbc:	4620      	mov	r0, r4
   27cbe:	bd10      	pop	{r4, pc}

00027cc0 <z_impl_k_queue_init>:
	list->head = NULL;
   27cc0:	2300      	movs	r3, #0
	list->tail = NULL;
   27cc2:	e9c0 3300 	strd	r3, r3, [r0]
   27cc6:	f100 0308 	add.w	r3, r0, #8
   27cca:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   27cce:	f100 0310 	add.w	r3, r0, #16
   27cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   27cd6:	4770      	bx	lr

00027cd8 <k_queue_append>:
{
   27cd8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   27cda:	2301      	movs	r3, #1
   27cdc:	9300      	str	r3, [sp, #0]
   27cde:	2300      	movs	r3, #0
{
   27ce0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   27ce2:	4619      	mov	r1, r3
   27ce4:	f7ff ff7c 	bl	27be0 <queue_insert>
}
   27ce8:	b003      	add	sp, #12
   27cea:	f85d fb04 	ldr.w	pc, [sp], #4

00027cee <k_queue_prepend>:
{
   27cee:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   27cf0:	2300      	movs	r3, #0
{
   27cf2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   27cf4:	9300      	str	r3, [sp, #0]
   27cf6:	4619      	mov	r1, r3
   27cf8:	f7ff ff72 	bl	27be0 <queue_insert>
}
   27cfc:	b003      	add	sp, #12
   27cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00027d02 <k_queue_append_list>:
{
   27d02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27d06:	4605      	mov	r5, r0
   27d08:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   27d0a:	460c      	mov	r4, r1
   27d0c:	b391      	cbz	r1, 27d74 <k_queue_append_list+0x72>
   27d0e:	b38a      	cbz	r2, 27d74 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27d10:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   27d14:	f04f 0320 	mov.w	r3, #32
   27d18:	f3ef 8811 	mrs	r8, BASEPRI
   27d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   27d20:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   27d24:	4638      	mov	r0, r7
   27d26:	f000 f9e6 	bl	280f6 <z_unpend_first_thread>
   27d2a:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   27d2e:	b920      	cbnz	r0, 27d3a <k_queue_append_list+0x38>
	return list->tail;
   27d30:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   27d32:	b9ca      	cbnz	r2, 27d68 <k_queue_append_list+0x66>
	list->head = node;
   27d34:	602c      	str	r4, [r5, #0]
	list->tail = node;
   27d36:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   27d38:	e00a      	b.n	27d50 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   27d3a:	6144      	str	r4, [r0, #20]
   27d3c:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   27d40:	f000 f968 	bl	28014 <z_ready_thread>
		head = *(void **)head;
   27d44:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   27d46:	4638      	mov	r0, r7
   27d48:	f000 f9d5 	bl	280f6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   27d4c:	2c00      	cmp	r4, #0
   27d4e:	d1ee      	bne.n	27d2e <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   27d50:	2104      	movs	r1, #4
   27d52:	f105 0010 	add.w	r0, r5, #16
   27d56:	f000 fbef 	bl	28538 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27d5a:	4638      	mov	r0, r7
   27d5c:	4641      	mov	r1, r8
   27d5e:	f7f9 fe9f 	bl	21aa0 <z_reschedule>
	return 0;
   27d62:	2000      	movs	r0, #0
}
   27d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27d68:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27d6a:	f003 0303 	and.w	r3, r3, #3
   27d6e:	431c      	orrs	r4, r3
   27d70:	6014      	str	r4, [r2, #0]
}
   27d72:	e7e0      	b.n	27d36 <k_queue_append_list+0x34>
		return -EINVAL;
   27d74:	f06f 0015 	mvn.w	r0, #21
   27d78:	e7f4      	b.n	27d64 <k_queue_append_list+0x62>

00027d7a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   27d7a:	b15a      	cbz	r2, 27d94 <z_impl_k_sem_init+0x1a>
   27d7c:	428a      	cmp	r2, r1
   27d7e:	d309      	bcc.n	27d94 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   27d80:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   27d84:	e9c0 1202 	strd	r1, r2, [r0, #8]
   27d88:	e9c0 0000 	strd	r0, r0, [r0]
   27d8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   27d90:	2000      	movs	r0, #0
   27d92:	4770      	bx	lr
		return -EINVAL;
   27d94:	f06f 0015 	mvn.w	r0, #21
}
   27d98:	4770      	bx	lr

00027d9a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   27d9a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   27d9c:	2301      	movs	r3, #1
   27d9e:	408b      	lsls	r3, r1
   27da0:	ea22 0303 	bic.w	r3, r2, r3
   27da4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   27da6:	fa22 f001 	lsr.w	r0, r2, r1
}
   27daa:	f000 0001 	and.w	r0, r0, #1
   27dae:	4770      	bx	lr

00027db0 <unschedule_locked>:
{
   27db0:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27db2:	2103      	movs	r1, #3
{
   27db4:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27db6:	300c      	adds	r0, #12
   27db8:	f7ff ffef 	bl	27d9a <flag_test_and_clear>
   27dbc:	4604      	mov	r4, r0
   27dbe:	b118      	cbz	r0, 27dc8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   27dc0:	f105 0010 	add.w	r0, r5, #16
   27dc4:	f000 f9dc 	bl	28180 <z_abort_timeout>
}
   27dc8:	4620      	mov	r0, r4
   27dca:	bd38      	pop	{r3, r4, r5, pc}

00027dcc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   27dcc:	b120      	cbz	r0, 27dd8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   27dce:	2200      	movs	r2, #0
   27dd0:	4611      	mov	r1, r2
   27dd2:	3088      	adds	r0, #136	; 0x88
   27dd4:	f000 b9b7 	b.w	28146 <z_sched_wake>
}
   27dd8:	4770      	bx	lr

00027dda <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   27dda:	68c3      	ldr	r3, [r0, #12]
{
   27ddc:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   27dde:	f3c3 0540 	ubfx	r5, r3, #1, #1
   27de2:	079b      	lsls	r3, r3, #30
{
   27de4:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   27de6:	d416      	bmi.n	27e16 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   27de8:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   27dea:	2102      	movs	r1, #2
   27dec:	300c      	adds	r0, #12
   27dee:	f7ff ffd4 	bl	27d9a <flag_test_and_clear>
   27df2:	b180      	cbz	r0, 27e16 <cancel_async_locked+0x3c>
	return list->head;
   27df4:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27df8:	b16a      	cbz	r2, 27e16 <cancel_async_locked+0x3c>
   27dfa:	4294      	cmp	r4, r2
   27dfc:	d11b      	bne.n	27e36 <cancel_async_locked+0x5c>
	return node->next;
   27dfe:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   27e00:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   27e04:	b98d      	cbnz	r5, 27e2a <cancel_async_locked+0x50>
   27e06:	428c      	cmp	r4, r1
	list->head = node;
   27e08:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   27e0c:	d101      	bne.n	27e12 <cancel_async_locked+0x38>
	list->tail = node;
   27e0e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   27e12:	2300      	movs	r3, #0
   27e14:	6023      	str	r3, [r4, #0]
	return *flagp;
   27e16:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   27e18:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   27e1c:	bf1e      	ittt	ne
   27e1e:	f043 0302 	orrne.w	r3, r3, #2
   27e22:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   27e24:	f003 000f 	andne.w	r0, r3, #15
}
   27e28:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   27e2a:	428c      	cmp	r4, r1
	parent->next = child;
   27e2c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27e2e:	bf08      	it	eq
   27e30:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   27e34:	e7ed      	b.n	27e12 <cancel_async_locked+0x38>
	return node->next;
   27e36:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27e38:	6812      	ldr	r2, [r2, #0]
   27e3a:	e7dd      	b.n	27df8 <cancel_async_locked+0x1e>

00027e3c <work_timeout>:
{
   27e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27e3e:	4604      	mov	r4, r0
   27e40:	f04f 0320 	mov.w	r3, #32
   27e44:	f3ef 8511 	mrs	r5, BASEPRI
   27e48:	f383 8812 	msr	BASEPRI_MAX, r3
   27e4c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   27e50:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   27e52:	f1a0 0610 	sub.w	r6, r0, #16
   27e56:	2103      	movs	r1, #3
   27e58:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   27e5a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   27e5c:	f7ff ff9d 	bl	27d9a <flag_test_and_clear>
   27e60:	b128      	cbz	r0, 27e6e <work_timeout+0x32>
		queue = dw->queue;
   27e62:	69a3      	ldr	r3, [r4, #24]
   27e64:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   27e66:	a901      	add	r1, sp, #4
   27e68:	4630      	mov	r0, r6
   27e6a:	f7f9 fce1 	bl	21830 <submit_to_queue_locked>
	__asm__ volatile(
   27e6e:	f385 8811 	msr	BASEPRI, r5
   27e72:	f3bf 8f6f 	isb	sy
}
   27e76:	b002      	add	sp, #8
   27e78:	bd70      	pop	{r4, r5, r6, pc}

00027e7a <k_work_init>:
{
   27e7a:	b538      	push	{r3, r4, r5, lr}
   27e7c:	4604      	mov	r4, r0
   27e7e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   27e80:	2210      	movs	r2, #16
   27e82:	2100      	movs	r1, #0
   27e84:	f7fc fd96 	bl	249b4 <memset>
   27e88:	6065      	str	r5, [r4, #4]
}
   27e8a:	bd38      	pop	{r3, r4, r5, pc}

00027e8c <k_work_submit_to_queue>:
{
   27e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27e8e:	9001      	str	r0, [sp, #4]
   27e90:	4608      	mov	r0, r1
	__asm__ volatile(
   27e92:	f04f 0320 	mov.w	r3, #32
   27e96:	f3ef 8511 	mrs	r5, BASEPRI
   27e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   27e9e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   27ea2:	a901      	add	r1, sp, #4
   27ea4:	f7f9 fcc4 	bl	21830 <submit_to_queue_locked>
   27ea8:	4604      	mov	r4, r0
	__asm__ volatile(
   27eaa:	f385 8811 	msr	BASEPRI, r5
   27eae:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   27eb2:	2800      	cmp	r0, #0
   27eb4:	dd04      	ble.n	27ec0 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   27eb6:	f7fa f8a3 	bl	22000 <z_impl_k_is_preempt_thread>
   27eba:	b108      	cbz	r0, 27ec0 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   27ebc:	f7f9 fff8 	bl	21eb0 <z_impl_k_yield>
}
   27ec0:	4620      	mov	r0, r4
   27ec2:	b003      	add	sp, #12
   27ec4:	bd30      	pop	{r4, r5, pc}

00027ec6 <k_work_init_delayable>:
{
   27ec6:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   27ec8:	2230      	movs	r2, #48	; 0x30
{
   27eca:	4604      	mov	r4, r0
   27ecc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   27ece:	2100      	movs	r1, #0
   27ed0:	f7fc fd70 	bl	249b4 <memset>
   27ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
   27ed8:	6065      	str	r5, [r4, #4]
   27eda:	60e3      	str	r3, [r4, #12]
}
   27edc:	bd38      	pop	{r3, r4, r5, pc}

00027ede <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   27ede:	b538      	push	{r3, r4, r5, lr}
   27ee0:	4604      	mov	r4, r0
	__asm__ volatile(
   27ee2:	f04f 0320 	mov.w	r3, #32
   27ee6:	f3ef 8511 	mrs	r5, BASEPRI
   27eea:	f383 8812 	msr	BASEPRI_MAX, r3
   27eee:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   27ef2:	f7ff ff5d 	bl	27db0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   27ef6:	4620      	mov	r0, r4
   27ef8:	f7ff ff6f 	bl	27dda <cancel_async_locked>
	__asm__ volatile(
   27efc:	f385 8811 	msr	BASEPRI, r5
   27f00:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   27f04:	bd38      	pop	{r3, r4, r5, pc}

00027f06 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   27f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f08:	4604      	mov	r4, r0
   27f0a:	460d      	mov	r5, r1
	__asm__ volatile(
   27f0c:	f04f 0320 	mov.w	r3, #32
   27f10:	f3ef 8711 	mrs	r7, BASEPRI
   27f14:	f383 8812 	msr	BASEPRI_MAX, r3
   27f18:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   27f1c:	68c3      	ldr	r3, [r0, #12]
   27f1e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   27f22:	2b00      	cmp	r3, #0
   27f24:	bf14      	ite	ne
   27f26:	2601      	movne	r6, #1
   27f28:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   27f2a:	d009      	beq.n	27f40 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   27f2c:	f7ff ff40 	bl	27db0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   27f30:	4620      	mov	r0, r4
   27f32:	f7ff ff52 	bl	27dda <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   27f36:	4629      	mov	r1, r5
   27f38:	4620      	mov	r0, r4
   27f3a:	f7f9 fc5b 	bl	217f4 <cancel_sync_locked>
   27f3e:	4603      	mov	r3, r0
	__asm__ volatile(
   27f40:	f387 8811 	msr	BASEPRI, r7
   27f44:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   27f48:	b13b      	cbz	r3, 27f5a <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   27f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27f52:	f105 0008 	add.w	r0, r5, #8
   27f56:	f7f9 fb75 	bl	21644 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   27f5a:	4630      	mov	r0, r6
   27f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027f5e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   27f5e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27f62:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27f64:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27f66:	2300      	movs	r3, #0
	node->prev = NULL;
   27f68:	e9c0 3300 	strd	r3, r3, [r0]
}
   27f6c:	4770      	bx	lr

00027f6e <unpend_thread_no_timeout>:
{
   27f6e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   27f70:	f7ff fff5 	bl	27f5e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27f74:	7b43      	ldrb	r3, [r0, #13]
   27f76:	f023 0302 	bic.w	r3, r3, #2
   27f7a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   27f7c:	2300      	movs	r3, #0
   27f7e:	6083      	str	r3, [r0, #8]
}
   27f80:	bd08      	pop	{r3, pc}

00027f82 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   27f82:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   27f86:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   27f8a:	4283      	cmp	r3, r0
		return b2 - b1;
   27f8c:	bf14      	ite	ne
   27f8e:	1ac0      	subne	r0, r0, r3
	return 0;
   27f90:	2000      	moveq	r0, #0
}
   27f92:	4770      	bx	lr

00027f94 <z_unpend_thread_no_timeout>:
{
   27f94:	b508      	push	{r3, lr}
	__asm__ volatile(
   27f96:	f04f 0320 	mov.w	r3, #32
   27f9a:	f3ef 8111 	mrs	r1, BASEPRI
   27f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   27fa2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   27fa6:	f7ff ffe2 	bl	27f6e <unpend_thread_no_timeout>
	__asm__ volatile(
   27faa:	f381 8811 	msr	BASEPRI, r1
   27fae:	f3bf 8f6f 	isb	sy
}
   27fb2:	bd08      	pop	{r3, pc}

00027fb4 <z_unpend_thread>:
{
   27fb4:	b510      	push	{r4, lr}
	__asm__ volatile(
   27fb6:	f04f 0320 	mov.w	r3, #32
   27fba:	f3ef 8411 	mrs	r4, BASEPRI
   27fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   27fc2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   27fc6:	f7ff ffd2 	bl	27f6e <unpend_thread_no_timeout>
	__asm__ volatile(
   27fca:	f384 8811 	msr	BASEPRI, r4
   27fce:	f3bf 8f6f 	isb	sy
}
   27fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27fd6:	3018      	adds	r0, #24
   27fd8:	f000 b8d2 	b.w	28180 <z_abort_timeout>

00027fdc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27fdc:	4603      	mov	r3, r0
   27fde:	b920      	cbnz	r0, 27fea <z_reschedule_irqlock+0xe>
   27fe0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   27fe4:	b90a      	cbnz	r2, 27fea <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   27fe6:	f7e0 b9c3 	b.w	8370 <arch_swap>
   27fea:	f383 8811 	msr	BASEPRI, r3
   27fee:	f3bf 8f6f 	isb	sy
}
   27ff2:	4770      	bx	lr

00027ff4 <z_reschedule_unlocked>:
	__asm__ volatile(
   27ff4:	f04f 0320 	mov.w	r3, #32
   27ff8:	f3ef 8011 	mrs	r0, BASEPRI
   27ffc:	f383 8812 	msr	BASEPRI_MAX, r3
   28000:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   28004:	f7ff bfea 	b.w	27fdc <z_reschedule_irqlock>

00028008 <z_priq_dumb_best>:
{
   28008:	4603      	mov	r3, r0
	return list->head == list;
   2800a:	6800      	ldr	r0, [r0, #0]
}
   2800c:	4283      	cmp	r3, r0
   2800e:	bf08      	it	eq
   28010:	2000      	moveq	r0, #0
   28012:	4770      	bx	lr

00028014 <z_ready_thread>:
{
   28014:	b510      	push	{r4, lr}
   28016:	f04f 0320 	mov.w	r3, #32
   2801a:	f3ef 8411 	mrs	r4, BASEPRI
   2801e:	f383 8812 	msr	BASEPRI_MAX, r3
   28022:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   28026:	f7f9 fdfb 	bl	21c20 <ready_thread>
	__asm__ volatile(
   2802a:	f384 8811 	msr	BASEPRI, r4
   2802e:	f3bf 8f6f 	isb	sy
}
   28032:	bd10      	pop	{r4, pc}

00028034 <z_thread_timeout>:
{
   28034:	b510      	push	{r4, lr}
   28036:	4601      	mov	r1, r0
	__asm__ volatile(
   28038:	f04f 0320 	mov.w	r3, #32
   2803c:	f3ef 8411 	mrs	r4, BASEPRI
   28040:	f383 8812 	msr	BASEPRI_MAX, r3
   28044:	f3bf 8f6f 	isb	sy
		if (!killed) {
   28048:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2804c:	f013 0f28 	tst.w	r3, #40	; 0x28
   28050:	d10d      	bne.n	2806e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   28052:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   28056:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   28058:	b10b      	cbz	r3, 2805e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2805a:	f7ff ff88 	bl	27f6e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2805e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   28062:	f023 0314 	bic.w	r3, r3, #20
   28066:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2806a:	f7f9 fdd9 	bl	21c20 <ready_thread>
	__asm__ volatile(
   2806e:	f384 8811 	msr	BASEPRI, r4
   28072:	f3bf 8f6f 	isb	sy
}
   28076:	bd10      	pop	{r4, pc}

00028078 <add_to_waitq_locked>:
{
   28078:	b538      	push	{r3, r4, r5, lr}
   2807a:	4604      	mov	r4, r0
   2807c:	460d      	mov	r5, r1
	unready_thread(thread);
   2807e:	f7f9 fe23 	bl	21cc8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28082:	7b63      	ldrb	r3, [r4, #13]
   28084:	f043 0302 	orr.w	r3, r3, #2
   28088:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2808a:	b195      	cbz	r5, 280b2 <add_to_waitq_locked+0x3a>
   2808c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2808e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28090:	429d      	cmp	r5, r3
   28092:	d015      	beq.n	280c0 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28094:	b1a3      	cbz	r3, 280c0 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   28096:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2809a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2809e:	4291      	cmp	r1, r2
   280a0:	d008      	beq.n	280b4 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   280a2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   280a4:	2a00      	cmp	r2, #0
   280a6:	dd05      	ble.n	280b4 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   280a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   280aa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   280ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   280b0:	605c      	str	r4, [r3, #4]
}
   280b2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   280b4:	686a      	ldr	r2, [r5, #4]
   280b6:	4293      	cmp	r3, r2
   280b8:	d002      	beq.n	280c0 <add_to_waitq_locked+0x48>
   280ba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   280bc:	2b00      	cmp	r3, #0
   280be:	d1ec      	bne.n	2809a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   280c0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   280c2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   280c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   280c8:	606c      	str	r4, [r5, #4]
}
   280ca:	e7f2      	b.n	280b2 <add_to_waitq_locked+0x3a>

000280cc <z_unpend1_no_timeout>:
{
   280cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   280ce:	f04f 0320 	mov.w	r3, #32
   280d2:	f3ef 8411 	mrs	r4, BASEPRI
   280d6:	f383 8812 	msr	BASEPRI_MAX, r3
   280da:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   280de:	f7ff ff93 	bl	28008 <z_priq_dumb_best>
		if (thread != NULL) {
   280e2:	4601      	mov	r1, r0
   280e4:	b108      	cbz	r0, 280ea <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   280e6:	f7ff ff42 	bl	27f6e <unpend_thread_no_timeout>
	__asm__ volatile(
   280ea:	f384 8811 	msr	BASEPRI, r4
   280ee:	f3bf 8f6f 	isb	sy
}
   280f2:	4608      	mov	r0, r1
   280f4:	bd10      	pop	{r4, pc}

000280f6 <z_unpend_first_thread>:
{
   280f6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   280f8:	f04f 0320 	mov.w	r3, #32
   280fc:	f3ef 8511 	mrs	r5, BASEPRI
   28100:	f383 8812 	msr	BASEPRI_MAX, r3
   28104:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   28108:	f7ff ff7e 	bl	28008 <z_priq_dumb_best>
		if (thread != NULL) {
   2810c:	4604      	mov	r4, r0
   2810e:	b120      	cbz	r0, 2811a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   28110:	f7ff ff2d 	bl	27f6e <unpend_thread_no_timeout>
   28114:	3018      	adds	r0, #24
   28116:	f000 f833 	bl	28180 <z_abort_timeout>
	__asm__ volatile(
   2811a:	f385 8811 	msr	BASEPRI, r5
   2811e:	f3bf 8f6f 	isb	sy
}
   28122:	4620      	mov	r0, r4
   28124:	bd38      	pop	{r3, r4, r5, pc}

00028126 <z_unpend_all>:
{
   28126:	b538      	push	{r3, r4, r5, lr}
   28128:	4605      	mov	r5, r0
	int need_sched = 0;
   2812a:	2000      	movs	r0, #0
	return list->head == list;
   2812c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2812e:	42a5      	cmp	r5, r4
   28130:	d000      	beq.n	28134 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28132:	b904      	cbnz	r4, 28136 <z_unpend_all+0x10>
}
   28134:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28136:	4620      	mov	r0, r4
   28138:	f7ff ff3c 	bl	27fb4 <z_unpend_thread>
		z_ready_thread(thread);
   2813c:	4620      	mov	r0, r4
   2813e:	f7ff ff69 	bl	28014 <z_ready_thread>
		need_sched = 1;
   28142:	2001      	movs	r0, #1
   28144:	e7f2      	b.n	2812c <z_unpend_all+0x6>

00028146 <z_sched_wake>:
{
   28146:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28148:	f04f 0320 	mov.w	r3, #32
   2814c:	f3ef 8511 	mrs	r5, BASEPRI
   28150:	f383 8812 	msr	BASEPRI_MAX, r3
   28154:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   28158:	f7ff ff56 	bl	28008 <z_priq_dumb_best>
		if (thread != NULL) {
   2815c:	4604      	mov	r4, r0
   2815e:	b150      	cbz	r0, 28176 <z_sched_wake+0x30>
   28160:	67c1      	str	r1, [r0, #124]	; 0x7c
   28162:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   28164:	f7ff ff03 	bl	27f6e <unpend_thread_no_timeout>
   28168:	3018      	adds	r0, #24
   2816a:	f000 f809 	bl	28180 <z_abort_timeout>
			ready_thread(thread);
   2816e:	4620      	mov	r0, r4
   28170:	f7f9 fd56 	bl	21c20 <ready_thread>
			ret = true;
   28174:	2001      	movs	r0, #1
	__asm__ volatile(
   28176:	f385 8811 	msr	BASEPRI, r5
   2817a:	f3bf 8f6f 	isb	sy
}
   2817e:	bd38      	pop	{r3, r4, r5, pc}

00028180 <z_abort_timeout>:
{
   28180:	b510      	push	{r4, lr}
	__asm__ volatile(
   28182:	f04f 0220 	mov.w	r2, #32
   28186:	f3ef 8411 	mrs	r4, BASEPRI
   2818a:	f382 8812 	msr	BASEPRI_MAX, r2
   2818e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   28192:	6803      	ldr	r3, [r0, #0]
   28194:	b13b      	cbz	r3, 281a6 <z_abort_timeout+0x26>
			remove_timeout(to);
   28196:	f7f9 fff1 	bl	2217c <remove_timeout>
			ret = 0;
   2819a:	2000      	movs	r0, #0
	__asm__ volatile(
   2819c:	f384 8811 	msr	BASEPRI, r4
   281a0:	f3bf 8f6f 	isb	sy
}
   281a4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   281a6:	f06f 0015 	mvn.w	r0, #21
   281aa:	e7f7      	b.n	2819c <z_abort_timeout+0x1c>

000281ac <z_get_next_timeout_expiry>:
{
   281ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   281ae:	f04f 0320 	mov.w	r3, #32
   281b2:	f3ef 8411 	mrs	r4, BASEPRI
   281b6:	f383 8812 	msr	BASEPRI_MAX, r3
   281ba:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   281be:	f7f9 ffb7 	bl	22130 <next_timeout>
	__asm__ volatile(
   281c2:	f384 8811 	msr	BASEPRI, r4
   281c6:	f3bf 8f6f 	isb	sy
}
   281ca:	bd10      	pop	{r4, pc}

000281cc <z_set_timeout_expiry>:
{
   281cc:	b570      	push	{r4, r5, r6, lr}
   281ce:	4604      	mov	r4, r0
   281d0:	460d      	mov	r5, r1
	__asm__ volatile(
   281d2:	f04f 0320 	mov.w	r3, #32
   281d6:	f3ef 8611 	mrs	r6, BASEPRI
   281da:	f383 8812 	msr	BASEPRI_MAX, r3
   281de:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   281e2:	f7f9 ffa5 	bl	22130 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   281e6:	2801      	cmp	r0, #1
   281e8:	dd05      	ble.n	281f6 <z_set_timeout_expiry+0x2a>
   281ea:	42a0      	cmp	r0, r4
   281ec:	db03      	blt.n	281f6 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   281ee:	4629      	mov	r1, r5
   281f0:	4620      	mov	r0, r4
   281f2:	f7f6 ff9f 	bl	1f134 <sys_clock_set_timeout>
	__asm__ volatile(
   281f6:	f386 8811 	msr	BASEPRI, r6
   281fa:	f3bf 8f6f 	isb	sy
}
   281fe:	bd70      	pop	{r4, r5, r6, pc}

00028200 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   28200:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   28202:	f7fa f8ab 	bl	2235c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   28206:	bd08      	pop	{r3, pc}

00028208 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   28208:	f7fa b8a8 	b.w	2235c <sys_clock_tick_get>

0002820c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2820c:	b108      	cbz	r0, 28212 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2820e:	f7e0 bd9d 	b.w	8d4c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   28212:	4770      	bx	lr

00028214 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28214:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28218:	bf08      	it	eq
   2821a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2821e:	b538      	push	{r3, r4, r5, lr}
   28220:	4605      	mov	r5, r0
   28222:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28224:	d01d      	beq.n	28262 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28226:	ea51 0300 	orrs.w	r3, r1, r0
   2822a:	d103      	bne.n	28234 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   28230:	f7fa b894 	b.w	2235c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   28234:	f06f 0301 	mvn.w	r3, #1
   28238:	1a18      	subs	r0, r3, r0
   2823a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2823e:	eb63 0101 	sbc.w	r1, r3, r1
   28242:	2900      	cmp	r1, #0
   28244:	da0c      	bge.n	28260 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   28246:	f7fa f889 	bl	2235c <sys_clock_tick_get>
   2824a:	2d01      	cmp	r5, #1
   2824c:	4622      	mov	r2, r4
   2824e:	f174 0400 	sbcs.w	r4, r4, #0
   28252:	462b      	mov	r3, r5
   28254:	bfbc      	itt	lt
   28256:	2301      	movlt	r3, #1
   28258:	2200      	movlt	r2, #0
   2825a:	1818      	adds	r0, r3, r0
   2825c:	eb41 0102 	adc.w	r1, r1, r2
}
   28260:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   28262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28266:	4601      	mov	r1, r0
   28268:	e7fa      	b.n	28260 <sys_clock_timeout_end_calc+0x4c>

0002826a <k_timer_init>:
	timer->status = 0U;
   2826a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2826c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   28270:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   28274:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   28278:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2827c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2827e:	6343      	str	r3, [r0, #52]	; 0x34
}
   28280:	4770      	bx	lr

00028282 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   28282:	b510      	push	{r4, lr}
   28284:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   28286:	f7ff ff7b 	bl	28180 <z_abort_timeout>

	if (inactive) {
   2828a:	b9b0      	cbnz	r0, 282ba <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2828c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2828e:	b10b      	cbz	r3, 28294 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28290:	4620      	mov	r0, r4
   28292:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   28294:	f104 0018 	add.w	r0, r4, #24
   28298:	f7ff ff18 	bl	280cc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2829c:	b168      	cbz	r0, 282ba <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2829e:	f7ff feb9 	bl	28014 <z_ready_thread>
	__asm__ volatile(
   282a2:	f04f 0320 	mov.w	r3, #32
   282a6:	f3ef 8011 	mrs	r0, BASEPRI
   282aa:	f383 8812 	msr	BASEPRI_MAX, r3
   282ae:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   282b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   282b6:	f7ff be91 	b.w	27fdc <z_reschedule_irqlock>
   282ba:	bd10      	pop	{r4, pc}

000282bc <add_event>:
{
   282bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   282be:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   282c0:	e9d0 1300 	ldrd	r1, r3, [r0]
   282c4:	4288      	cmp	r0, r1
   282c6:	4604      	mov	r4, r0
   282c8:	d00d      	beq.n	282e6 <add_event+0x2a>
	if ((pending == NULL) ||
   282ca:	b163      	cbz	r3, 282e6 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   282cc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   282ce:	b100      	cbz	r0, 282d2 <add_event+0x16>
   282d0:	3860      	subs	r0, #96	; 0x60
   282d2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   282d6:	4639      	mov	r1, r7
   282d8:	f7ff fe53 	bl	27f82 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   282dc:	2800      	cmp	r0, #0
   282de:	dc02      	bgt.n	282e6 <add_event+0x2a>
	return list->head == list;
   282e0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282e2:	42b4      	cmp	r4, r6
   282e4:	d109      	bne.n	282fa <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   282e6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   282e8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   282ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
   282ee:	6065      	str	r5, [r4, #4]
}
   282f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   282f2:	6863      	ldr	r3, [r4, #4]
   282f4:	42b3      	cmp	r3, r6
   282f6:	d0f6      	beq.n	282e6 <add_event+0x2a>
   282f8:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   282fa:	2e00      	cmp	r6, #0
   282fc:	d0f3      	beq.n	282e6 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   282fe:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28300:	b101      	cbz	r1, 28304 <add_event+0x48>
   28302:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   28304:	4638      	mov	r0, r7
   28306:	f7ff fe3c 	bl	27f82 <z_sched_prio_cmp>
   2830a:	2800      	cmp	r0, #0
   2830c:	ddf1      	ble.n	282f2 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2830e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   28310:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   28314:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   28316:	6075      	str	r5, [r6, #4]
			return;
   28318:	e7ea      	b.n	282f0 <add_event+0x34>

0002831a <register_events>:
{
   2831a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2831e:	2500      	movs	r5, #0
{
   28320:	468b      	mov	fp, r1
   28322:	4614      	mov	r4, r2
   28324:	461f      	mov	r7, r3
   28326:	4682      	mov	sl, r0
	int events_registered = 0;
   28328:	462e      	mov	r6, r5
	event->poller = NULL;
   2832a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2832c:	455d      	cmp	r5, fp
   2832e:	db02      	blt.n	28336 <register_events+0x1c>
}
   28330:	4630      	mov	r0, r6
   28332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28336:	f04f 0320 	mov.w	r3, #32
   2833a:	f3ef 8911 	mrs	r9, BASEPRI
   2833e:	f383 8812 	msr	BASEPRI_MAX, r3
   28342:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   28346:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2834a:	f003 031f 	and.w	r3, r3, #31
   2834e:	3b01      	subs	r3, #1
   28350:	2b07      	cmp	r3, #7
   28352:	d80f      	bhi.n	28374 <register_events+0x5a>
   28354:	e8df f003 	tbb	[pc, r3]
   28358:	0a0e041e 	.word	0x0a0e041e
   2835c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   28360:	f8da 3010 	ldr.w	r3, [sl, #16]
   28364:	689b      	ldr	r3, [r3, #8]
   28366:	b12b      	cbz	r3, 28374 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   28368:	2302      	movs	r3, #2
   2836a:	e020      	b.n	283ae <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2836c:	f8da 3010 	ldr.w	r3, [sl, #16]
   28370:	681b      	ldr	r3, [r3, #0]
   28372:	bb8b      	cbnz	r3, 283d8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   28374:	bb47      	cbnz	r7, 283c8 <register_events+0xae>
   28376:	7823      	ldrb	r3, [r4, #0]
   28378:	b333      	cbz	r3, 283c8 <register_events+0xae>
	switch (event->type) {
   2837a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2837e:	f003 031f 	and.w	r3, r3, #31
   28382:	3b01      	subs	r3, #1
   28384:	2b07      	cmp	r3, #7
   28386:	d830      	bhi.n	283ea <register_events+0xd0>
   28388:	e8df f003 	tbb	[pc, r3]
   2838c:	282f2833 	.word	0x282f2833
   28390:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   28394:	f8da 3010 	ldr.w	r3, [sl, #16]
   28398:	689b      	ldr	r3, [r3, #8]
   2839a:	2b00      	cmp	r3, #0
   2839c:	d0ea      	beq.n	28374 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2839e:	2301      	movs	r3, #1
   283a0:	e005      	b.n	283ae <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   283a2:	f8da 3010 	ldr.w	r3, [sl, #16]
   283a6:	6a1b      	ldr	r3, [r3, #32]
   283a8:	2b00      	cmp	r3, #0
   283aa:	d0e3      	beq.n	28374 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   283ac:	2310      	movs	r3, #16
	event->state |= state;
   283ae:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   283b2:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   283b6:	f3c2 3145 	ubfx	r1, r2, #13, #6
   283ba:	430b      	orrs	r3, r1
   283bc:	f363 3252 	bfi	r2, r3, #13, #6
   283c0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   283c4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   283c8:	f389 8811 	msr	BASEPRI, r9
   283cc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   283d0:	3501      	adds	r5, #1
   283d2:	f10a 0a14 	add.w	sl, sl, #20
   283d6:	e7a9      	b.n	2832c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   283d8:	2304      	movs	r3, #4
   283da:	e7e8      	b.n	283ae <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   283dc:	f8da 0010 	ldr.w	r0, [sl, #16]
   283e0:	4622      	mov	r2, r4
   283e2:	4651      	mov	r1, sl
   283e4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   283e6:	f7ff ff69 	bl	282bc <add_event>
	event->poller = poller;
   283ea:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   283ee:	3601      	adds	r6, #1
   283f0:	e7ea      	b.n	283c8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   283f2:	f8da 0010 	ldr.w	r0, [sl, #16]
   283f6:	4622      	mov	r2, r4
   283f8:	4651      	mov	r1, sl
   283fa:	e7f4      	b.n	283e6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   283fc:	f8da 0010 	ldr.w	r0, [sl, #16]
   28400:	4622      	mov	r2, r4
   28402:	4651      	mov	r1, sl
   28404:	3024      	adds	r0, #36	; 0x24
   28406:	e7ee      	b.n	283e6 <register_events+0xcc>

00028408 <signal_poll_event>:
{
   28408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2840c:	6884      	ldr	r4, [r0, #8]
{
   2840e:	4605      	mov	r5, r0
   28410:	460e      	mov	r6, r1
	if (poller != NULL) {
   28412:	b144      	cbz	r4, 28426 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   28414:	7863      	ldrb	r3, [r4, #1]
   28416:	2b01      	cmp	r3, #1
   28418:	d136      	bne.n	28488 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2841a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2841e:	f013 0302 	ands.w	r3, r3, #2
   28422:	d10a      	bne.n	2843a <signal_poll_event+0x32>
		poller->is_polling = false;
   28424:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   28426:	68eb      	ldr	r3, [r5, #12]
   28428:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2842c:	430e      	orrs	r6, r1
	event->poller = NULL;
   2842e:	2000      	movs	r0, #0
	event->state |= state;
   28430:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   28434:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   28436:	60eb      	str	r3, [r5, #12]
	return retcode;
   28438:	e00b      	b.n	28452 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2843a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2843e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28442:	bf08      	it	eq
   28444:	f112 0f02 	cmneq.w	r2, #2
   28448:	d105      	bne.n	28456 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2844a:	2300      	movs	r3, #0
   2844c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2844e:	f06f 000a 	mvn.w	r0, #10
}
   28452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28456:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2845a:	4640      	mov	r0, r8
   2845c:	f7ff fdaa 	bl	27fb4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28460:	2e08      	cmp	r6, #8
   28462:	bf0c      	ite	eq
   28464:	f06f 0303 	mvneq.w	r3, #3
   28468:	2300      	movne	r3, #0
   2846a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2846c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   28470:	06db      	lsls	r3, r3, #27
   28472:	d102      	bne.n	2847a <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   28474:	f854 7c48 	ldr.w	r7, [r4, #-72]
   28478:	b10f      	cbz	r7, 2847e <signal_poll_event+0x76>
		poller->is_polling = false;
   2847a:	2300      	movs	r3, #0
   2847c:	e7d2      	b.n	28424 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2847e:	4640      	mov	r0, r8
   28480:	f7ff fdc8 	bl	28014 <z_ready_thread>
		poller->is_polling = false;
   28484:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   28486:	e7ce      	b.n	28426 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   28488:	2b02      	cmp	r3, #2
   2848a:	d1f6      	bne.n	2847a <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2848c:	7823      	ldrb	r3, [r4, #0]
   2848e:	2b00      	cmp	r3, #0
   28490:	d0c9      	beq.n	28426 <signal_poll_event+0x1e>
   28492:	f854 7c04 	ldr.w	r7, [r4, #-4]
   28496:	2f00      	cmp	r7, #0
   28498:	d0f4      	beq.n	28484 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2849a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2849e:	f1a4 0914 	sub.w	r9, r4, #20
   284a2:	f104 0014 	add.w	r0, r4, #20
   284a6:	f7ff fe6b 	bl	28180 <z_abort_timeout>
		twork->poll_result = 0;
   284aa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   284ae:	4649      	mov	r1, r9
   284b0:	4638      	mov	r0, r7
   284b2:	f7ff fceb 	bl	27e8c <k_work_submit_to_queue>
		poller->is_polling = false;
   284b6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   284ba:	e7b4      	b.n	28426 <signal_poll_event+0x1e>

000284bc <clear_event_registrations>:
	while (num_events--) {
   284bc:	2314      	movs	r3, #20
{
   284be:	b5f0      	push	{r4, r5, r6, r7, lr}
   284c0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   284c4:	2400      	movs	r4, #0
   284c6:	2601      	movs	r6, #1
	while (num_events--) {
   284c8:	b901      	cbnz	r1, 284cc <clear_event_registrations+0x10>
}
   284ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   284cc:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   284d0:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   284d4:	f003 031f 	and.w	r3, r3, #31
   284d8:	2b08      	cmp	r3, #8
   284da:	f1a0 0714 	sub.w	r7, r0, #20
   284de:	d80d      	bhi.n	284fc <clear_event_registrations+0x40>
   284e0:	fa06 f303 	lsl.w	r3, r6, r3
   284e4:	f413 7f8b 	tst.w	r3, #278	; 0x116
   284e8:	d008      	beq.n	284fc <clear_event_registrations+0x40>
	return node->next != NULL;
   284ea:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   284ee:	b12b      	cbz	r3, 284fc <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   284f0:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   284f4:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   284f6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   284f8:	e940 4405 	strd	r4, r4, [r0, #-20]
   284fc:	f382 8811 	msr	BASEPRI, r2
   28500:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28504:	f04f 0320 	mov.w	r3, #32
   28508:	f3ef 8211 	mrs	r2, BASEPRI
   2850c:	f383 8812 	msr	BASEPRI_MAX, r3
   28510:	f3bf 8f6f 	isb	sy
   28514:	3901      	subs	r1, #1
   28516:	4638      	mov	r0, r7
   28518:	e7d6      	b.n	284c8 <clear_event_registrations+0xc>

0002851a <k_poll_event_init>:
{
   2851a:	b510      	push	{r4, lr}
	event->type = type;
   2851c:	04d2      	lsls	r2, r2, #19
   2851e:	0209      	lsls	r1, r1, #8
   28520:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   28524:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   28528:	430a      	orrs	r2, r1
   2852a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2852c:	2400      	movs	r4, #0
	event->type = type;
   2852e:	430a      	orrs	r2, r1
	event->obj = obj;
   28530:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   28534:	6084      	str	r4, [r0, #8]
}
   28536:	bd10      	pop	{r4, pc}

00028538 <z_handle_obj_poll_events>:
{
   28538:	4603      	mov	r3, r0
	return list->head == list;
   2853a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2853c:	4283      	cmp	r3, r0
   2853e:	d008      	beq.n	28552 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   28540:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28544:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28546:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28548:	2300      	movs	r3, #0
	node->prev = NULL;
   2854a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2854e:	f7ff bf5b 	b.w	28408 <signal_poll_event>
}
   28552:	4770      	bx	lr

00028554 <k_free>:
	if (ptr != NULL) {
   28554:	b120      	cbz	r0, 28560 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   28556:	1f01      	subs	r1, r0, #4
   28558:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2855c:	f7ff bad7 	b.w	27b0e <k_heap_free>
}
   28560:	4770      	bx	lr
	...

00028564 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   28564:	f7f6 be4e 	b.w	1f204 <SystemInit>
